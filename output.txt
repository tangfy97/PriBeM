***** Loading java classes ***** 

Start reading BOM and BIM...
BOM is loaded with 169 methods.
BIM is loaded with 350 methods.
EOM is loaded with 257 methods.
EIM is loaded with 365 methods.
Start looking for sources and sinks: 
[spark] Starting analysis ...
[spark] Done!


***************************
Now we build call graphs for class: org.gbif.dwc.text.ArchiveFile
Start traversal for source: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>...
Starting from method: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>
1: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)> -> <org.gbif.dwc.text.Archive: void sortFiles()>
Global flow detected: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)> -> <org.gbif.dwc.text.Archive: void sortFiles()>


***************************
Now we build call graphs for class: org.gbif.dwc.text.Archive
Continue with method: <org.gbif.dwc.text.Archive: void sortFiles()>


strict digraph G {
  1 [ label="<org.gbif.dwc.text.Archive: void sortFiles()>" ];
  2 [ label="<org.gbif.dwc.text.Archive: void access$5(org.gbif.dwc.text.Archive)>" ];
  1 -> 2;
}

Flows from <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)> is finished.


strict digraph G {
  1 [ label="<org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>" ];
  2 [ label="<org.gbif.dwc.text.Archive: void sortFiles()>" ];
  1 -> 2;
}

Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from method: <java.io.File: java.lang.String getName()>
1: <java.io.File: java.lang.String getName()> -> <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>
Global flow detected: <java.io.File: java.lang.String getName()> -> <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>


***************************
Now we build call graphs for class: org.gbif.dwc.text.ArchiveFile
Continue with method: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>


strict digraph G {
  1 [ label="<org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>" ];
  2 [ label="<org.gbif.dwc.text.Archive: void sortFiles()>" ];
  1 -> 2;
}

2: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)> -> <org.gbif.dwc.text.Archive: void sortFiles()>
Global flow detected: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)> -> <org.gbif.dwc.text.Archive: void sortFiles()>
Flows from <java.io.File: java.lang.String getName()> is finished.


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getName()>" ];
  2 [ label="<org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>" ];
  3 [ label="<org.gbif.dwc.text.Archive: void sortFiles()>" ];
  1 -> 2;
  2 -> 3;
}

Start traversal for source: <java.io.File: java.io.File getParentFile()>...
Starting from method: <java.io.File: java.io.File getParentFile()>
1: <java.io.File: java.io.File getParentFile()> -> <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>
Global flow detected: <java.io.File: java.io.File getParentFile()> -> <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>
2: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)> -> <org.gbif.dwc.text.Archive: void sortFiles()>
Global flow detected: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)> -> <org.gbif.dwc.text.Archive: void sortFiles()>
Flows from <java.io.File: java.io.File getParentFile()> is finished.


strict digraph G {
  1 [ label="<java.io.File: java.io.File getParentFile()>" ];
  2 [ label="<org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>" ];
  3 [ label="<org.gbif.dwc.text.Archive: void sortFiles()>" ];
  1 -> 2;
  2 -> 3;
}



***************************
Now we build call graphs for class: org.gbif.file.CSVReaderFactory
Start traversal for source: <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>...
Starting from method: <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>
1: <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)> -> <org.gbif.file.CSVReaderFactory: org.gbif.file.CSVReader build(java.io.File)>
2: <org.gbif.file.CSVReaderFactory: org.gbif.file.CSVReader build(java.io.File)> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.ArchiveFile readFileHeaders(java.io.File)>
Global flow detected: <org.gbif.file.CSVReaderFactory: org.gbif.file.CSVReader build(java.io.File)> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.ArchiveFile readFileHeaders(java.io.File)>


***************************
Now we build call graphs for class: org.gbif.dwc.text.ArchiveFactory
Continue with method: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.ArchiveFile readFileHeaders(java.io.File)>


strict digraph G {
  1 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.ArchiveFile readFileHeaders(java.io.File)>" ];
  2 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>" ];
  3 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)>" ];
  4 [ label="<org.gbif.dwc.text.ArchiveReader: void main(java.lang.String[])>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

Flows from <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)> is finished.


strict digraph G {
  1 [ label="<org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>" ];
  2 [ label="<org.gbif.file.CSVReaderFactory: org.gbif.file.CSVReader build(java.io.File)>" ];
  3 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.ArchiveFile readFileHeaders(java.io.File)>" ];
  1 -> 2;
  2 -> 3;
}

Start traversal for source: <java.io.File: java.lang.String getAbsolutePath()>...
Starting from method: <java.io.File: java.lang.String getAbsolutePath()>
1: <java.io.File: java.lang.String getAbsolutePath()> -> <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>
Global flow detected: <java.io.File: java.lang.String getAbsolutePath()> -> <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>


***************************
Now we build call graphs for class: org.gbif.file.CSVReaderFactory
Continue with method: <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>


strict digraph G {
  1 [ label="<org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>" ];
  2 [ label="<org.gbif.file.CSVReaderFactory: org.gbif.file.CSVReader build(java.io.File)>" ];
  3 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.ArchiveFile readFileHeaders(java.io.File)>" ];
  1 -> 2;
  2 -> 3;
}

2: <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)> -> <org.gbif.file.CSVReaderFactory: org.gbif.file.CSVReader build(java.io.File)>
3: <org.gbif.file.CSVReaderFactory: org.gbif.file.CSVReader build(java.io.File)> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.ArchiveFile readFileHeaders(java.io.File)>
Global flow detected: <org.gbif.file.CSVReaderFactory: org.gbif.file.CSVReader build(java.io.File)> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.ArchiveFile readFileHeaders(java.io.File)>
Flows from <java.io.File: java.lang.String getAbsolutePath()> is finished.


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getAbsolutePath()>" ];
  2 [ label="<org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>" ];
  3 [ label="<org.gbif.file.CSVReaderFactory: org.gbif.file.CSVReader build(java.io.File)>" ];
  4 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.ArchiveFile readFileHeaders(java.io.File)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}



***************************
Now we build call graphs for class: org.gbif.dwc.tools.CoreIdRenamer


***************************
Now we build call graphs for class: org.gbif.dwc.text.DwcaWriter


***************************
Now we build call graphs for class: org.gbif.dwc.text.ArchiveFactory$MetaHandler


***************************
Now we build call graphs for class: org.gbif.dwc.text.Archive
Start traversal for source: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>...
Starting from method: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>
1: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)> -> <org.gbif.dwc.text.Archive: void sortFiles()>
Global flow detected: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)> -> <org.gbif.dwc.text.Archive: void sortFiles()>
2: <org.gbif.dwc.text.Archive: void sortFiles()> -> <org.gbif.dwc.text.Archive: void access$5(org.gbif.dwc.text.Archive)>
Flows from <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)> is finished.


strict digraph G {
  1 [ label="<org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>" ];
  2 [ label="<org.gbif.dwc.text.Archive: void sortFiles()>" ];
  3 [ label="<org.gbif.dwc.text.Archive: void access$5(org.gbif.dwc.text.Archive)>" ];
  1 -> 2;
  2 -> 3;
}



***************************
Now we build call graphs for class: org.gbif.file.CSVReader
Start traversal for source: <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>...
Starting from method: <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>
Flows from <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)> is finished.


strict digraph G {
}

Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from method: <java.io.BufferedReader: java.lang.String readLine()>
1: <java.io.BufferedReader: java.lang.String readLine()> -> <org.gbif.file.CSVReader: java.lang.String[] next()>
Global flow detected: <java.io.BufferedReader: java.lang.String readLine()> -> <org.gbif.file.CSVReader: java.lang.String[] next()>


***************************
Now we build call graphs for class: org.gbif.file.CSVReader
Continue with method: <org.gbif.file.CSVReader: java.lang.String[] next()>


strict digraph G {
  1 [ label="<org.gbif.file.CSVReader: java.lang.String[] next()>" ];
  2 [ label="<org.gbif.file.CSVReaderFactory: int consistentRowSize(org.gbif.file.CSVReader)>" ];
  3 [ label="<org.gbif.file.CSVReaderFactory: java.lang.Character likelyQuoteChar(org.gbif.file.CSVReader)>" ];
  1 -> 2;
  2 -> 3;
}

2: <org.gbif.file.CSVReader: java.lang.String[] next()> -> <org.gbif.file.CSVReaderFactory: int consistentRowSize(org.gbif.file.CSVReader)>
Global flow detected: <org.gbif.file.CSVReader: java.lang.String[] next()> -> <org.gbif.file.CSVReaderFactory: int consistentRowSize(org.gbif.file.CSVReader)>
3: <org.gbif.file.CSVReaderFactory: int consistentRowSize(org.gbif.file.CSVReader)> -> <org.gbif.file.CSVReaderFactory: java.lang.Character likelyQuoteChar(org.gbif.file.CSVReader)>
Flows from <java.io.BufferedReader: java.lang.String readLine()> is finished.


strict digraph G {
  1 [ label="<java.io.BufferedReader: java.lang.String readLine()>" ];
  2 [ label="<org.gbif.file.CSVReader: java.lang.String[] next()>" ];
  3 [ label="<org.gbif.file.CSVReaderFactory: int consistentRowSize(org.gbif.file.CSVReader)>" ];
  4 [ label="<org.gbif.file.CSVReaderFactory: java.lang.Character likelyQuoteChar(org.gbif.file.CSVReader)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

Start traversal for source: <org.gbif.file.CSVReader: java.lang.String[] next()>...
Starting from method: <org.gbif.file.CSVReader: java.lang.String[] next()>
1: <org.gbif.file.CSVReader: java.lang.String[] next()> -> <org.gbif.file.CSVReaderFactory: int consistentRowSize(org.gbif.file.CSVReader)>
Global flow detected: <org.gbif.file.CSVReader: java.lang.String[] next()> -> <org.gbif.file.CSVReaderFactory: int consistentRowSize(org.gbif.file.CSVReader)>
2: <org.gbif.file.CSVReaderFactory: int consistentRowSize(org.gbif.file.CSVReader)> -> <org.gbif.file.CSVReaderFactory: java.lang.Character likelyQuoteChar(org.gbif.file.CSVReader)>
Flows from <org.gbif.file.CSVReader: java.lang.String[] next()> is finished.


strict digraph G {
  1 [ label="<org.gbif.file.CSVReader: java.lang.String[] next()>" ];
  2 [ label="<org.gbif.file.CSVReaderFactory: int consistentRowSize(org.gbif.file.CSVReader)>" ];
  3 [ label="<org.gbif.file.CSVReaderFactory: java.lang.Character likelyQuoteChar(org.gbif.file.CSVReader)>" ];
  1 -> 2;
  2 -> 3;
}



***************************
Now we build call graphs for class: org.gbif.dwc.text.ArchiveFactory
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from method: <java.io.File: java.lang.String getName()>
1: <java.io.File: java.lang.String getName()> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>
Global flow detected: <java.io.File: java.lang.String getName()> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>
2: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)>
3: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)> -> <org.gbif.dwc.text.ArchiveReader: void main(java.lang.String[])>
Global flow detected: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)> -> <org.gbif.dwc.text.ArchiveReader: void main(java.lang.String[])>


***************************
Now we build call graphs for class: org.gbif.dwc.text.ArchiveReader
Continue with method: <org.gbif.dwc.text.ArchiveReader: void main(java.lang.String[])>


strict digraph G {
}

Flows from <java.io.File: java.lang.String getName()> is finished.


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getName()>" ];
  2 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>" ];
  3 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)>" ];
  4 [ label="<org.gbif.dwc.text.ArchiveReader: void main(java.lang.String[])>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

Start traversal for source: <java.io.File: java.io.File getParentFile()>...
Starting from method: <java.io.File: java.io.File getParentFile()>
1: <java.io.File: java.io.File getParentFile()> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>
Global flow detected: <java.io.File: java.io.File getParentFile()> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>
2: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)>
3: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)> -> <org.gbif.dwc.text.ArchiveReader: void main(java.lang.String[])>
Global flow detected: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)> -> <org.gbif.dwc.text.ArchiveReader: void main(java.lang.String[])>
Flows from <java.io.File: java.io.File getParentFile()> is finished.


strict digraph G {
  1 [ label="<java.io.File: java.io.File getParentFile()>" ];
  2 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>" ];
  3 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)>" ];
  4 [ label="<org.gbif.dwc.text.ArchiveReader: void main(java.lang.String[])>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

Start traversal for source: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>...
Starting from method: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>
1: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)>
2: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)> -> <org.gbif.dwc.text.ArchiveReader: void main(java.lang.String[])>
Global flow detected: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)> -> <org.gbif.dwc.text.ArchiveReader: void main(java.lang.String[])>
Flows from <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)> is finished.


strict digraph G {
  1 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>" ];
  2 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)>" ];
  3 [ label="<org.gbif.dwc.text.ArchiveReader: void main(java.lang.String[])>" ];
  1 -> 2;
  2 -> 3;
}

Loaded 1101 methods from JAR files. 

Found 16 Source Methods.
Found 3 Sink Methods.
Sources and Sinks collected. 

Methods extraction finished.
All finished.
