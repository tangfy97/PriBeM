***** Loading java classes ***** 

Start reading BOM and BIM...
Basic source methods are loaded with 168 methods.
Basic sink methods are loaded with 350 methods.
External source methods are loaded with 257 methods.
External sink methods are loaded with 365 methods.
Start looking for sources and sinks: 
[spark] Starting analysis ...
[spark] Done! 


Source found in the callgraph: <org.signal.client.internal.Native: void loadLibrary()>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <org.signal.client.internal.Native: void loadLibrary()>
Flows from <org.signal.client.internal.Native: void loadLibrary()> is finished.
/////////////////////////////////////


strict digraph G {
}

Source found in the callgraph: <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
<1: <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> -> <org.signal.client.internal.Native: void loadLibrary()>>
The above invocation flows into a source.
Flows from <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>" ];
  2 [ label="<org.signal.client.internal.Native: void loadLibrary()>" ];
  1 -> 2;
}

Source found in the callgraph: <java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>
<1: <java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])> -> <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>>
The above invocation flows into a source.
<2: <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)> -> <org.signal.client.internal.Native: void loadLibrary()>>
The above invocation flows into a source.
Flows from <java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>" ];
  2 [ label="<org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>" ];
  3 [ label="<org.signal.client.internal.Native: void loadLibrary()>" ];
  1 -> 2;
  2 -> 3;
}

Source found in the callgraph: <java.io.InputStream: int read(byte[])>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <java.io.InputStream: int read(byte[])>
<1: <java.io.InputStream: int read(byte[])> -> <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>>
The above invocation flows into a source.
<2: <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)> -> <org.signal.client.internal.Native: void loadLibrary()>>
The above invocation flows into a source.
Flows from <java.io.InputStream: int read(byte[])> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.io.InputStream: int read(byte[])>" ];
  2 [ label="<org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>" ];
  3 [ label="<org.signal.client.internal.Native: void loadLibrary()>" ];
  1 -> 2;
  2 -> 3;
}

Source found in the callgraph: <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>
<1: <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)> -> <org.signal.client.internal.Native: void loadLibrary()>>
The above invocation flows into a source.
Flows from <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>" ];
  2 [ label="<org.signal.client.internal.Native: void loadLibrary()>" ];
  1 -> 2;
}

Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <org.signal.client.internal.Native: void loadLibrary()>>
The above invocation flows into a source.
Flows from <java.lang.System: java.lang.String getProperty(java.lang.String)> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String)>" ];
  2 [ label="<org.signal.client.internal.Native: void loadLibrary()>" ];
  1 -> 2;
}

Source found in the callgraph: <java.io.File: java.lang.String getAbsolutePath()>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <java.io.File: java.lang.String getAbsolutePath()>
<1: <java.io.File: java.lang.String getAbsolutePath()> -> <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>>
The above invocation flows into a source.
<2: <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)> -> <org.signal.client.internal.Native: void loadLibrary()>>
The above invocation flows into a source.
Flows from <java.io.File: java.lang.String getAbsolutePath()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getAbsolutePath()>" ];
  2 [ label="<org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>" ];
  3 [ label="<org.signal.client.internal.Native: void loadLibrary()>" ];
  1 -> 2;
  2 -> 3;
}

Loaded 927 methods from JAR files. 

Found 41 Source Methods.
Found 2 Sink Methods.
Sources and Sinks collected. 

Methods extraction finished.
All finished.
