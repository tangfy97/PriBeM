***** Loading java classes ***** 

Start reading BOM and BIM...
BOM is loaded with 361 methods.
BIM is loaded with 278 methods.
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/C:/Users/feiyang/eclipse-workspace/tutorialSoot/lib/soot-4.2.1-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/C:/Users/feiyang/eclipse-workspace/tutorialSoot/lib/soot-3.3.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]
Local flow analysis: 
Type change: ln <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
interfaceinvoke returned.<java.util.Set: boolean contains(java.lang.Object)>(ln)
Type change: ln <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
interfaceinvoke names.<java.util.List: boolean add(java.lang.Object)>(ln)
Type change: ln <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
interfaceinvoke returned.<java.util.Set: boolean add(java.lang.Object)>(ln)
Value: $stack3 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack13 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack152 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack16 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack123 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack139 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack126 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack23 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack111 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack105 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack94 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack32 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack29 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack62 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack69 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack66 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack35 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack45 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack42 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack39 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack55 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack59 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack72 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack76 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack48 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack52 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack80 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Type change: n <java.io.ObjectInputStream: int readInt()> int java.lang.Object
specialinvoke this.<javassist.tools.rmi.ObjectImporter: java.lang.Object createProxy(int,java.lang.String)>(n, classname)
Type change: classname <java.io.ObjectInputStream: java.lang.String readUTF()> java.lang.String java.lang.Object
specialinvoke this.<javassist.tools.rmi.ObjectImporter: java.lang.Object createProxy(int,java.lang.String)>(n, classname)
Type change: is <java.net.URL: java.io.InputStream openStream()> java.io.InputStream java.util.List
specialinvoke this.<org.glassfish.hk2.osgiresourcelocator.ServiceLoaderImpl: java.util.List load(java.io.InputStream)>(is)
Value: $stack4 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.KerningPair: short value>
Value: $stack5 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.HeadTable: int versionNumber>
Value: $stack6 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.HeadTable: int fontRevision>
Value: $stack7 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.HeadTable: int checkSumAdjustment>
Value: $stack8 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.HeadTable: int magicNumber>
Value: $stack9 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HeadTable: short flags>
Value: $stack10 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HeadTable: short unitsPerEm>
Value: $stack11 from BOM: <java.io.RandomAccessFile: long readLong()>flows to a field: this.<org.apache.batik.svggen.font.table.HeadTable: long created>
Value: $stack12 from BOM: <java.io.RandomAccessFile: long readLong()>flows to a field: this.<org.apache.batik.svggen.font.table.HeadTable: long modified>
Value: $stack13 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HeadTable: short xMin>
Value: $stack14 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HeadTable: short yMin>
Value: $stack15 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HeadTable: short xMax>
Value: $stack16 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HeadTable: short yMax>
Value: $stack17 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HeadTable: short macStyle>
Value: $stack18 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HeadTable: short lowestRecPPEM>
Value: $stack19 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HeadTable: short fontDirectionHint>
Value: $stack20 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HeadTable: short indexToLocFormat>
Value: $stack21 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HeadTable: short glyphDataFormat>
Type change: objectId <java.io.ObjectInputStream: int readInt()> int java.lang.Object
virtualinvoke $stack13.<java.util.Vector: java.lang.Object elementAt(int)>(objectId)
Value: $stack29 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack8 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack25 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack239 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack243 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack246 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack181 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack191 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack196 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack149 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack153 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack30 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack138 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack100 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack105 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack63 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack18 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack28 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack25 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack11 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack11 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack8 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack8 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack10 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack24 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack8 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack15 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack18 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack13 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack5 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack105 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack109 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack113 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack46 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack96 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack102 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack94 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack55 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack61 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Type change: numOfBytesRead <java.io.InputStream: int read(byte[],int,int)> int com.google.common.hash.Hasher
interfaceinvoke $stack7.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putBytes(byte[],int,int)>(bytes, off, numOfBytesRead)
Type change: keyCount <java.io.ObjectInputStream: int readInt()> int java.lang.StringBuilder
virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(keyCount)
Type change: valueCount <java.io.ObjectInputStream: int readInt()> int java.lang.StringBuilder
virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(valueCount)
Value: $stack2 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack154 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack157 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack160 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack163 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack4 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack7 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack120 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack123 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack126 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack129 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack142 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack146 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack132 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack139 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack136 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack10 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack91 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack94 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack97 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack110 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack114 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack100 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack107 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack104 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack13 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack16 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack19 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack82 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack86 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack22 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack77 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack26 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack59 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack62 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack65 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack69 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack29 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack32 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack35 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack38 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack42 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack2 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack5 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
virtualinvoke $stack24.<java.lang.String: boolean equals(java.lang.Object)>(e)
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.StringBuffer
virtualinvoke $stack28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(e)
Value: $stack4 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack8 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack11 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack14 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack17 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack20 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack23 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack26 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack29 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack32 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack35 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack38 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack41 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack45 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack50 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack53 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack83 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack86 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack89 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack92 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack95 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack98 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack101 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack104 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack112 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack347 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack114 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack117 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack120 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack123 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack175 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack178 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack181 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack184 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack188 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack192 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack196 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack200 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack126 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack129 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack132 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack135 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack138 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack141 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack144 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack152 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack163 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack157 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack265 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack268 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack271 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack274 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack277 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack280 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack283 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack286 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack289 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack292 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack295 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack298 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack301 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack304 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack307 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack310 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack313 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack316 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack319 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack322 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack325 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack217 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack220 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack223 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack226 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack229 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack232 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack235 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack238 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack241 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack245 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack251 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack9 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack12 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack15 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack18 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack21 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack24 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack27 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack30 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack33 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack36 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack39 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack42 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack45 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack48 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack51 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack54 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack57 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack60 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack74 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack77 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack80 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack83 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack86 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack89 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack92 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack64 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack6 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack3 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack3 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack8 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack11 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack14 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack17 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack20 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack23 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack26 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack5 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack8 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack11 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack14 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack17 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack20 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack23 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack27 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack4 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack7 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack10 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack13 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack16 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack19 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack22 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack25 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack28 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack31 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack35 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack4 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack7 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack10 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack13 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack16 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack20 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack4 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack7 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack10 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack13 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack16 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack2 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack143 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack146 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack149 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack152 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack4 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack7 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack109 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack112 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack115 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack118 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack131 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack135 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack121 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack128 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack125 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack10 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack80 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack83 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack86 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack99 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack103 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack89 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack96 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack93 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack13 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack16 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack19 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack71 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack75 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack22 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack66 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack26 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack50 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack53 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack56 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack60 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack29 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack32 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack35 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack38 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack42 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack2 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack5 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack2 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.NameRecord: short platformId>
Value: $stack3 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.NameRecord: short encodingId>
Value: $stack4 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.NameRecord: short languageId>
Value: $stack5 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.NameRecord: short nameId>
Value: $stack6 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.NameRecord: short stringLength>
Value: $stack7 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.NameRecord: short stringOffset>
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
virtualinvoke $stack24.<java.lang.String: boolean equals(java.lang.Object)>(e)
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.StringBuffer
virtualinvoke $stack28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(e)
Type change: path <java.io.File: java.lang.String getAbsolutePath()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(path)
Type change: path <java.io.File: java.lang.String getAbsolutePath()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(path)
Value: $stack4 from BOM: <java.io.ObjectInputStream: int readInt()>flows to a field: this.<com.google.common.collect.HashMultimap: int expectedValuesPerKey>
Type change: distinctKeys <com.google.common.collect.Serialization: int readCount(java.io.ObjectInputStream)> int java.util.HashMap
staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMapWithExpectedSize(int)>(distinctKeys)
Type change: line <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.Class
virtualinvoke cl.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(line)
Type change: remaining <java.io.ObjectInputStream: int readInt()> int java.nio.ByteBuffer
staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(remaining)
Value: $stack4 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack47 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack50 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack54 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack32 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack35 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack38 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack42 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack21 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack24 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack28 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Type change: l0 <java.io.BufferedReader: java.lang.String readLine()> java.lang.String org.xml.sax.XMLReader
staticinvoke <org.xml.sax.helpers.XMLReaderFactory: org.xml.sax.XMLReader loadClass(java.lang.ClassLoader,java.lang.String)>(l2, l0)
Type change: line <org.jdesktop.beansbinding.ext.BeanAdapterFactory: void addProviders(java.net.URL)> java.lang.String java.lang.Class
staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(line)
Value: $stack6 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.TableDirectory: int version>
Value: $stack7 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.TableDirectory: short numTables>
Value: $stack8 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.TableDirectory: short searchRange>
Value: $stack9 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.TableDirectory: short entrySelector>
Value: $stack10 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.TableDirectory: short rangeShift>
Type change: keyCount <java.io.ObjectInputStream: int readInt()> int java.lang.StringBuilder
virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(keyCount)
Type change: valueCount <java.io.ObjectInputStream: int readInt()> int java.lang.StringBuilder
virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(valueCount)
Type change: remaining <java.io.ObjectInputStream: int readInt()> int java.nio.ByteBuffer
staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(remaining)
Type change: systemID <java.io.File: java.lang.String getAbsolutePath()> java.lang.String org.dom4j.Document
virtualinvoke this.<org.dom4j.io.XPP3Reader: org.dom4j.Document read(java.io.Reader,java.lang.String)>($stack4, systemID)
Value: $stack11 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack87 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack14 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack59 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack74 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack62 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack21 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack50 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack43 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack25 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Type change: s <java.net.URLConnection: java.io.InputStream getInputStream()> java.io.InputStream byte[]
staticinvoke <javassist.ClassPoolTail: byte[] readStream(java.io.InputStream)>(s)
Value: $stack3 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.css.parser.Scanner: int current>
Type change: l5 <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
virtualinvoke $stack24.<java.lang.String: boolean equals(java.lang.Object)>(l5)
Type change: l5 <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.StringBuffer
virtualinvoke $stack30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(l5)
Type change: l5 <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.Object
staticinvoke <javax.xml.parsers.FactoryFinder: java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader,boolean)>(l5, l3, 0)
Type change: name <java.io.File: java.lang.String getName()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name)
Type change: name <java.io.File: java.lang.String getName()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name)
Value: $stack19 from BOM: <java.io.InputStreamReader: java.lang.String getEncoding()>flows to a field: l0.<org.fife.io.UnicodeReader: java.lang.String encoding>
Type change: l2 <java.net.URL: java.io.InputStream openStream()> java.io.InputStream java.lang.String
virtualinvoke l0.<org.apache.xerces.xinclude.XIncludeTextReader: java.lang.String getEncodingName(java.io.InputStream)>(l2)
Value: $stack12 from BOM: <java.io.File: java.lang.String getParent()>flows to a field: this.<com.mxgraph.examples.swing.editor.scxml.SCXMLEditorActions$OpenAction: java.lang.String lastDir>
Value: $stack3 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
virtualinvoke $stack24.<java.lang.String: boolean equals(java.lang.Object)>(e)
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.StringBuffer
virtualinvoke $stack28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(e)
Type change: l5 <java.io.BufferedReader: java.lang.String readLine()> java.lang.String javax.xml.validation.SchemaFactory
specialinvoke l0.<javax.xml.validation.SchemaFactoryFinder: javax.xml.validation.SchemaFactory createInstance(java.lang.String)>(l5)
Type change: providerClassName <org.glassfish.jersey.internal.OsgiRegistry$BundleSpiProvidersLoader: java.util.List call()> java.lang.String java.lang.Class
staticinvoke <org.glassfish.jersey.internal.OsgiRegistry: java.lang.Class access$200(org.osgi.framework.Bundle,java.lang.String)>($stack23, providerClassName)
Value: $stack3 from BOM: <java.io.DataInputStream: double readDouble()>flows to a field: this.<javassist.bytecode.DoubleInfo: double value>
Type change: distinctElements <com.google.common.collect.Serialization: int readCount(java.io.ObjectInputStream)> int java.util.HashMap
staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMapWithExpectedSize(int)>(distinctElements)
Type change: len <java.io.InputStream: int read(byte[])> int boolean
specialinvoke this.<javassist.tools.web.Webserver: boolean letUsersSendClassfile(java.io.OutputStream,java.lang.String,int)>(out, filename, len)
Value: $stack4 from BOM: <java.io.ObjectInputStream: int readInt()>flows to a field: this.<jersey.repackaged.com.google.common.collect.HashMultimap: int expectedValuesPerKey>
Type change: id <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.util.Hashtable
virtualinvoke this.<com.sun.lwuit.util.Resources: java.util.Hashtable loadTheme(java.lang.String,boolean)>(id, $stack43)
Type change: id <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String com.sun.lwuit.Font
virtualinvoke this.<com.sun.lwuit.util.Resources: com.sun.lwuit.Font loadFont(java.io.DataInputStream,java.lang.String,boolean)>($stack16, id, 0)
Type change: id <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.util.Hashtable
virtualinvoke this.<com.sun.lwuit.util.Resources: java.util.Hashtable loadTheme(java.lang.String,boolean)>(id, $stack29)
Type change: id <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String com.sun.lwuit.Font
virtualinvoke this.<com.sun.lwuit.util.Resources: com.sun.lwuit.Font loadFont(java.io.DataInputStream,java.lang.String,boolean)>($stack33, id, 0)
Type change: id <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String com.sun.lwuit.Font
virtualinvoke this.<com.sun.lwuit.util.Resources: com.sun.lwuit.Font loadFont(java.io.DataInputStream,java.lang.String,boolean)>($stack18, id, 1)
Value: $stack6 from BOM: <java.io.DataInputStream: short readShort()>flows to a field: this.<com.sun.lwuit.util.Resources: short majorVersion>
Value: $stack8 from BOM: <java.io.DataInputStream: short readShort()>flows to a field: this.<com.sun.lwuit.util.Resources: short minorVersion>
Type change: baseURL <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String com.sun.lwuit.Image
staticinvoke <com.sun.lwuit.Image: com.sun.lwuit.Image createSVG(java.lang.String,boolean,byte[])>(baseURL, animated, s)
Type change: name <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String com.sun.lwuit.Image
virtualinvoke this.<com.sun.lwuit.util.Resources: com.sun.lwuit.Image getImage(java.lang.String)>(name)
Type change: name <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String com.sun.lwuit.animations.AnimationObject
staticinvoke <com.sun.lwuit.animations.AnimationObject: com.sun.lwuit.animations.AnimationObject createAnimationImage(java.lang.String,com.sun.lwuit.util.Resources,int,int)>(name, this, x, y)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.Object
virtualinvoke theme.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $stack300)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.Object
virtualinvoke theme.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $stack296)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.Object
virtualinvoke theme.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $stack45)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.Object
virtualinvoke theme.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $stack247)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack260.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(key)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack253.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(key)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.Object
virtualinvoke theme.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, p2#8)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.Object
virtualinvoke theme.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, p2#9)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.Object
virtualinvoke theme.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, p1#10)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(key)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack199.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(key)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack186.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(key)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack193.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(key)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack168.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(key)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack140.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(key)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.Object
virtualinvoke theme.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, p1#17)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.Object
virtualinvoke theme.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, p2#18)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.Object
virtualinvoke theme.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, "true")
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.Object
virtualinvoke theme.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, "false")
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.Object
virtualinvoke theme.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $stack56)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.Object
virtualinvoke theme.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $stack90)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.Object
virtualinvoke theme.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $stack68)
Type change: key <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(key)
Type change: lang <java.io.DataInputStream: java.lang.String readUTF()> java.lang.String java.lang.Object
virtualinvoke l10n.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(lang, key#4)
Type change: height <java.io.DataInputStream: short readShort()> short com.sun.lwuit.Image
staticinvoke <com.sun.lwuit.Image: com.sun.lwuit.Image createIndexed(int,int,int[],byte[])>(iter#9, height, palette, data)
Type change: s <java.io.BufferedReader: java.lang.String readLine()> java.lang.String float
staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(s)
Value: $stack2 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.LangSysRecord: int tag>
Value: $stack3 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.MemberrefInfo: int classIndex>
Value: $stack4 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.MemberrefInfo: int nameAndTypeIndex>
Value: $stack11 from BOM: <java.net.URLConnection: java.io.InputStream getInputStream()>flows to a field: this.<org.apache.batik.util.ParsedURLData: java.io.InputStream stream>
Type change: size <java.io.ObjectInputStream: int readInt()> int com.google.common.collect.MapMaker
virtualinvoke $stack5.<com.google.common.collect.MapMaker: com.google.common.collect.MapMaker initialCapacity(int)>(size)
Type change: factoryClassName <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
virtualinvoke $stack61.<java.lang.String: boolean equals(java.lang.Object)>(factoryClassName)
Type change: factoryClassName <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.Object
staticinvoke <javax.ws.rs.client.FactoryFinder: java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader)>(factoryClassName, classLoader)
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
virtualinvoke $stack24.<java.lang.String: boolean equals(java.lang.Object)>(e)
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.StringBuffer
virtualinvoke $stack28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(e)
Value: $stack2 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.ScriptRecord: int tag>
Value: $stack4 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.MethodInfo: int accessFlags>
Value: $stack5 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.MethodInfo: int name>
Value: $stack6 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.MethodInfo: int descriptor>
Value: $stack3 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack3 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack7 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Type change: canonicalPath <java.io.File: java.lang.String getCanonicalPath()> java.lang.String boolean
virtualinvoke $stack26.<java.util.HashSet: boolean contains(java.lang.Object)>(canonicalPath)
Type change: canonicalPath <java.io.File: java.lang.String getCanonicalPath()> java.lang.String boolean
virtualinvoke $stack28.<java.util.HashSet: boolean add(java.lang.Object)>(canonicalPath)
Type change: canonicalPath <java.io.File: java.lang.String getCanonicalPath()> java.lang.String boolean
virtualinvoke $stack53.<java.util.HashSet: boolean contains(java.lang.Object)>(canonicalPath)
Type change: canonicalPath <java.io.File: java.lang.String getCanonicalPath()> java.lang.String boolean
virtualinvoke $stack56.<java.util.HashSet: boolean remove(java.lang.Object)>(canonicalPath)
Type change: canonicalPath <java.io.File: java.lang.String getCanonicalPath()> java.lang.String boolean
virtualinvoke $stack37.<java.util.HashSet: boolean contains(java.lang.Object)>(canonicalPath)
Type change: canonicalPath <java.io.File: java.lang.String getCanonicalPath()> java.lang.String boolean
virtualinvoke $stack40.<java.util.HashSet: boolean remove(java.lang.Object)>(canonicalPath)
Type change: canonicalPath <java.io.File: java.lang.String getCanonicalPath()> java.lang.String boolean
virtualinvoke $stack91.<java.util.HashSet: boolean contains(java.lang.Object)>(canonicalPath)
Type change: canonicalPath <java.io.File: java.lang.String getCanonicalPath()> java.lang.String boolean
virtualinvoke $stack94.<java.util.HashSet: boolean remove(java.lang.Object)>(canonicalPath)
Type change: l6 <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
virtualinvoke $stack24.<java.lang.String: boolean equals(java.lang.Object)>(l6)
Type change: l6 <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.StringBuffer
virtualinvoke $stack28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(l6)
Type change: l6 <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.Object
staticinvoke <org.apache.xerces.util.ObjectFactory: java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader,boolean)>(l6, l4, 0)
Type change: l5 <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
virtualinvoke $stack24.<java.lang.String: boolean equals(java.lang.Object)>(l5)
Type change: l5 <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.StringBuffer
virtualinvoke $stack30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(l5)
Type change: l5 <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.Object
staticinvoke <javax.xml.datatype.FactoryFinder: java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader)>(l5, l3)
Value: $stack59 from BOM: <java.io.File: java.lang.String getParent()>flows to a field: this.<com.mxgraph.examples.swing.editor.scxml.listener.SCXMLListener: java.lang.String lastDir>
Type change: filename <java.io.File: java.lang.String getAbsolutePath()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(filename)
Value: $stack33 from BOM: <java.io.File: java.lang.String getParent()>flows to a field: this.<com.mxgraph.examples.swing.editor.scxml.listener.SCXMLListener: java.lang.String lastDir>
Value: $stack3 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.xml.XMLScanner: int current>
Value: $stack3 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.MethodTypeInfo: int descriptor>
Value: $stack3 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Type change: fileName <java.io.File: java.lang.String getAbsolutePath()> java.lang.String boolean
virtualinvoke $stack9.<java.util.ArrayList: boolean contains(java.lang.Object)>(fileName)
Type change: fileName <java.io.File: java.lang.String getAbsolutePath()> java.lang.String boolean
virtualinvoke $stack11.<java.util.ArrayList: boolean add(java.lang.Object)>(fileName)
Value: $stack4 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack10 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack8 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack11 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack14 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack17 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack20 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack23 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack26 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack5 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack8 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack11 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack14 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack17 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack20 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack23 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack27 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack4 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack7 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack10 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack13 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack16 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack19 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack22 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack25 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack28 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack31 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack35 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack4 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack7 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack10 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack13 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack16 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack20 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack4 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack7 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack10 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack13 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack16 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack2 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
virtualinvoke $stack24.<java.lang.String: boolean equals(java.lang.Object)>(e)
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.StringBuffer
virtualinvoke $stack28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(e)
Type change: line <com.google.common.io.CharSource: com.google.common.collect.ImmutableList readLines()> java.lang.String boolean
interfaceinvoke result.<java.util.List: boolean add(java.lang.Object)>(line)
Value: $stack27 from BOM: <java.io.File: java.lang.String getPath()>flows to a field: j.<org.apache.batik.util.ClassFileUtilities$Jar: java.lang.String name>
Type change: fileName <java.io.File: java.lang.String getAbsolutePath()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fileName)
Type change: filename <java.io.File: java.lang.String getAbsolutePath()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(filename)
Value: $stack7 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.ClassFile: int minor>
Value: $stack8 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.ClassFile: int major>
Value: $stack10 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.ClassFile: int accessFlags>
Value: $stack11 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.ClassFile: int thisClass>
Value: $stack14 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.ClassFile: int superClass>
Value: $stack3 from BOM: <java.io.DataInputStream: java.lang.String readUTF()>flows to a field: this.<javassist.bytecode.Utf8Info: java.lang.String string>
Type change: tmp <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tmp)
Value: $stack3 from BOM: <java.io.DataInputStream: long readLong()>flows to a field: this.<javassist.bytecode.LongInfo: long value>
Type change: l5 <java.io.BufferedReader: java.lang.String readLine()> java.lang.String javax.xml.xpath.XPathFactory
specialinvoke l0.<javax.xml.xpath.XPathFactoryFinder: javax.xml.xpath.XPathFactory createInstance(java.lang.String)>(l5)
Value: $stack5 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack13 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Type change: systemID <java.io.File: java.lang.String getAbsolutePath()> java.lang.String org.dom4j.Document
virtualinvoke this.<org.dom4j.io.XPPReader: org.dom4j.Document read(java.io.Reader,java.lang.String)>($stack4, systemID)
Value: $stack9 from BOM: <java.io.DataInputStream: short readShort()>flows to a field: this.<org.apache.batik.transcoder.wmf.tosvg.RecordStore: int numObjects>
Value: len from BOM: <java.io.DataInputStream: short readShort()>flows to a field: mr.<org.apache.batik.transcoder.wmf.tosvg.MetaRecord: int numPoints>
Value: functionId from BOM: <java.io.DataInputStream: short readShort()>flows to a field: mr.<org.apache.batik.transcoder.wmf.tosvg.MetaRecord: int functionId>
Type change: l <org.glassfish.jersey.message.internal.ReaderWriter: java.lang.String readFromAsString(java.io.Reader)> int java.lang.StringBuilder
virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(c, 0, l)
Value: $stack17 from BOM: <java.io.File: java.lang.String getCanonicalPath()>flows to a field: $stack16.<org.apache.batik.util.gui.URIChooser: java.lang.String currentPath>
Value: $stack4 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Type change: line <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.util.HashMap
specialinvoke this.<de.lessvoid.nifty.java2d.renderer.fonts.AngelCodeFont: java.util.HashMap getInfoLine(java.lang.String)>(line)
Type change: line <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.util.HashMap
specialinvoke this.<de.lessvoid.nifty.java2d.renderer.fonts.AngelCodeFont: java.util.HashMap splitToInteger(java.lang.String)>(line)
Type change: line <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.util.HashMap
specialinvoke this.<de.lessvoid.nifty.java2d.renderer.fonts.AngelCodeFont: java.util.HashMap getPageLine(java.lang.String)>(line)
Type change: line <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.util.HashMap
specialinvoke this.<de.lessvoid.nifty.java2d.renderer.fonts.AngelCodeFont: java.util.HashMap splitToInteger(java.lang.String)>(line)
Type change: line <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.util.HashMap
specialinvoke this.<de.lessvoid.nifty.java2d.renderer.fonts.AngelCodeFont: java.util.HashMap splitToInteger(java.lang.String)>(line)
Type change: line <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.util.HashMap
specialinvoke this.<de.lessvoid.nifty.java2d.renderer.fonts.AngelCodeFont: java.util.HashMap splitToInteger(java.lang.String)>(line)
Type change: line <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.util.HashMap
specialinvoke this.<de.lessvoid.nifty.java2d.renderer.fonts.AngelCodeFont: java.util.HashMap splitToInteger(java.lang.String)>(line)
Value: $stack5 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.MaxpTable: int versionNumber>
Value: $stack2 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.DirectoryEntry: int tag>
Value: $stack3 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.DirectoryEntry: int checksum>
Value: $stack4 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.DirectoryEntry: int offset>
Value: $stack5 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.DirectoryEntry: int length>
Value: $stack4 from BOM: <java.io.ObjectInputStream: int readInt()>flows to a field: this.<com.google.common.collect.ArrayListMultimap: int expectedValuesPerKey>
Type change: distinctKeys <com.google.common.collect.Serialization: int readCount(java.io.ObjectInputStream)> int java.util.HashMap
staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMapWithExpectedSize(int)>(distinctKeys)
Value: $stack3 from BOM: <java.io.InputStream: int read(byte[],int,int)>flows to a field: this.<org.apache.batik.util.io.AbstractCharDecoder: int count>
Value: $stack5 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack3 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.ClassInfo: int name>
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
virtualinvoke $stack24.<java.lang.String: boolean equals(java.lang.Object)>(e)
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.StringBuffer
virtualinvoke $stack28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(e)
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
virtualinvoke $stack24.<java.lang.String: boolean equals(java.lang.Object)>(e)
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.StringBuffer
virtualinvoke $stack28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(e)
Type change: s <java.net.URLConnection: java.io.InputStream getInputStream()> java.io.InputStream byte[]
specialinvoke this.<javassist.tools.web.Viewer: byte[] readStream(java.io.InputStream)>(s)
Value: $stack2 from BOM: <java.io.ObjectInputStream: long readLong()>flows to a field: this.<com.google.common.cache.LongAdder: long base>
Type change: path <java.io.File: java.lang.String getAbsolutePath()> java.lang.String java.lang.StringBuffer
virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(path)
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
virtualinvoke $stack24.<java.lang.String: boolean equals(java.lang.Object)>(e)
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.StringBuffer
virtualinvoke $stack28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(e)
Type change: read <com.google.common.io.ByteStreams: int read(java.io.InputStream,byte[],int,int)> int java.lang.StringBuilder
virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(read)
Type change: read <java.io.InputStream: int read(byte[])> int boolean
interfaceinvoke processor.<com.google.common.io.ByteProcessor: boolean processBytes(byte[],int,int)>(buf, 0, read)
Value: $stack6 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.HheaTable: int version>
Value: $stack7 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HheaTable: short ascender>
Value: $stack8 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HheaTable: short descender>
Value: $stack9 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HheaTable: short lineGap>
Value: $stack10 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HheaTable: short advanceWidthMax>
Value: $stack11 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HheaTable: short minLeftSideBearing>
Value: $stack12 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HheaTable: short minRightSideBearing>
Value: $stack13 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HheaTable: short xMaxExtent>
Value: $stack14 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HheaTable: short caretSlopeRise>
Value: $stack15 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HheaTable: short caretSlopeRun>
Value: $stack19 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.HheaTable: short metricDataFormat>
Type change: name <java.io.DataInputStream: int readUnsignedShort()> int java.lang.String
virtualinvoke cp.<javassist.bytecode.ConstPool: java.lang.String getUtf8Info(int)>(name)
Value: $stack7 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: short xAvgCharWidth>
Value: $stack10 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: short fsType>
Value: $stack11 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: short ySubscriptXSize>
Value: $stack12 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: short ySubscriptYSize>
Value: $stack13 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: short ySubscriptXOffset>
Value: $stack14 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: short ySubscriptYOffset>
Value: $stack15 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: short ySuperscriptXSize>
Value: $stack16 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: short ySuperscriptYSize>
Value: $stack17 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: short ySuperscriptXOffset>
Value: $stack18 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: short ySuperscriptYOffset>
Value: $stack19 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: short yStrikeoutSize>
Value: $stack20 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: short yStrikeoutPosition>
Value: $stack21 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: short sFamilyClass>
Value: $stack24 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: int ulUnicodeRange1>
Value: $stack25 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: int ulUnicodeRange2>
Value: $stack26 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: int ulUnicodeRange3>
Value: $stack27 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: int ulUnicodeRange4>
Value: $stack28 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: int achVendorID>
Value: $stack29 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: short fsSelection>
Value: $stack32 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: short sTypoAscender>
Value: $stack33 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: short sTypoDescender>
Value: $stack34 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: short sTypoLineGap>
Value: $stack37 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: int ulCodePageRange1>
Value: $stack38 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.Os2Table: int ulCodePageRange2>
Value: $stack4 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.SingleSubstFormat1: short deltaGlyphID>
Value: $stack4 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.CmapIndexEntry: int offset>
Value: $stack40 from BOM: <java.io.File: java.lang.String getParent()>flows to a field: this.<com.mxgraph.examples.swing.editor.scxml.SCXMLEditorActions$SaveAction: java.lang.String lastDir>
Value: $stack3 from BOM: <java.io.DataInputStream: int readUnsignedByte()>flows to a field: this.<javassist.bytecode.MethodHandleInfo: int refKind>
Value: $stack4 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.MethodHandleInfo: int refIndex>
Type change: token <java.util.Scanner: java.lang.String nextLine()> java.lang.String java.io.File
virtualinvoke $stack8.<com.piss.util.Workspace: java.io.File relativeNameToFileInWorkspaceDirectory(java.lang.String)>(token)
Value: $stack3 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack23 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack58 from BOM: <java.io.Reader: int read(char[])>flows to a field: this.<org.apache.lucene.analysis.CharTokenizer: int dataLen>
Value: $stack10 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.PostTable: int version>
Value: $stack11 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.PostTable: int italicAngle>
Value: $stack12 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.PostTable: short underlinePosition>
Value: $stack13 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.PostTable: short underlineThickness>
Value: $stack14 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.PostTable: int isFixedPitch>
Value: $stack15 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.PostTable: int minMemType42>
Value: $stack16 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.PostTable: int maxMemType42>
Value: $stack17 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.PostTable: int minMemType1>
Value: $stack18 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.PostTable: int maxMemType1>
Type change: tag <java.io.DataInputStream: int readUnsignedByte()> int java.lang.StringBuilder
virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(tag)
Value: $stack11 from BOM: <java.io.ObjectInputStream: int readInt()>flows to a field: this.<com.google.common.collect.LinkedHashMultimap: int valueSetCapacity>
Type change: fileName <java.io.File: java.lang.String getAbsolutePath()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack196.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fileName)
Type change: fileName <java.io.File: java.lang.String getAbsolutePath()> java.lang.String java.lang.Object
virtualinvoke $stack36.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(fileName)
Type change: fileName <java.io.File: java.lang.String getAbsolutePath()> java.lang.String java.lang.Object
virtualinvoke $stack38.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(fileName)
Type change: fileName <java.io.File: java.lang.String getAbsolutePath()> java.lang.String boolean
virtualinvoke $stack172.<java.util.HashMap: boolean containsKey(java.lang.Object)>(fileName)
Type change: fileName <java.io.File: java.lang.String getAbsolutePath()> java.lang.String java.lang.Object
virtualinvoke $stack42.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(fileName, $stack41)
Type change: fileName <java.io.File: java.lang.String getAbsolutePath()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fileName)
Type change: fileName <java.io.File: java.lang.String getAbsolutePath()> java.lang.String java.lang.Object
virtualinvoke $stack53.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(fileName, inputFileName#18)
Type change: fileName <java.io.File: java.lang.String getAbsolutePath()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fileName)
Type change: wd <com.mxgraph.examples.swing.SCXMLGraphEditor: java.io.File getThisFileInCurrentDirectory(java.lang.String)> java.lang.String java.lang.StringBuilder
virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(wd)
Type change: parentDir <java.io.File: java.lang.String getParent()> java.lang.String boolean
staticinvoke <com.mxgraph.util.StringUtils: boolean isEmptyString(java.lang.String)>(parentDir)
Type change: parentDir <java.io.File: java.lang.String getParent()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(parentDir)
Type change: title <com.mxgraph.examples.swing.SCXMLGraphEditor: void updateTitle()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(title)
Type change: title <com.mxgraph.examples.swing.SCXMLGraphEditor: void updateTitle()> java.lang.String java.lang.StringBuilder
virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(title)
Value: $stack36 from BOM: <java.io.DataInputStream: short readShort()>flows to a field: $stack35.<com.bulletphysics.demos.opengl.FontRender$Glyph: int x>
Value: $stack39 from BOM: <java.io.DataInputStream: short readShort()>flows to a field: $stack38.<com.bulletphysics.demos.opengl.FontRender$Glyph: int y>
Value: $stack42 from BOM: <java.io.DataInputStream: short readShort()>flows to a field: $stack41.<com.bulletphysics.demos.opengl.FontRender$Glyph: int w>
Value: $stack45 from BOM: <java.io.DataInputStream: short readShort()>flows to a field: $stack44.<com.bulletphysics.demos.opengl.FontRender$Glyph: int h>
Type change: absAssets <java.io.File: java.lang.String getCanonicalPath()> java.lang.String boolean
virtualinvoke parentPath.<java.lang.String: boolean contains(java.lang.CharSequence)>(absAssets)
Type change: absAssets <java.io.File: java.lang.String getCanonicalPath()> java.lang.String boolean
virtualinvoke parentPath.<java.lang.String: boolean contains(java.lang.CharSequence)>(absAssets)
Value: $stack2 from BOM: <java.io.RandomAccessFile: int readInt()>flows to a field: this.<org.apache.batik.svggen.font.table.FeatureRecord: int tag>
Value: $stack3 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractScanner: int current>
Value: $stack3 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.NameAndTypeInfo: int memberName>
Value: $stack4 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.NameAndTypeInfo: int typeDescriptor>
Value: $stack4 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.FieldInfo: int accessFlags>
Value: $stack5 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.FieldInfo: int name>
Value: $stack6 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.FieldInfo: int descriptor>
Type change: line <com.google.common.io.CharStreams: java.util.List readLines(java.lang.Readable)> java.lang.String boolean
interfaceinvoke result.<java.util.List: boolean add(java.lang.Object)>(line)
Type change: line <com.google.common.io.CharStreams: java.lang.Object readLines(java.lang.Readable,com.google.common.io.LineProcessor)> java.lang.String boolean
interfaceinvoke processor.<com.google.common.io.LineProcessor: boolean processLine(java.lang.String)>(line)
Type change: factoryClassName <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
virtualinvoke $stack61.<java.lang.String: boolean equals(java.lang.Object)>(factoryClassName)
Type change: factoryClassName <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.Object
staticinvoke <javax.ws.rs.ext.FactoryFinder: java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader)>(factoryClassName, classLoader)
Value: $stack5 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Type change: line <javax.persistence.Persistence: java.util.Set providerNamesFromReader(java.io.BufferedReader)> java.lang.String java.util.regex.Matcher
virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(line)
Value: $stack7 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.NameTable: short formatSelector>
Value: $stack8 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.NameTable: short numberOfNameRecords>
Value: $stack9 from BOM: <java.io.RandomAccessFile: short readShort()>flows to a field: this.<org.apache.batik.svggen.font.table.NameTable: short stringStorageOffset>
Type change: l5 <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
virtualinvoke $stack24.<java.lang.String: boolean equals(java.lang.Object)>(l5)
Type change: l5 <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.StringBuffer
virtualinvoke $stack30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(l5)
Type change: l5 <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.Object
staticinvoke <javax.xml.transform.FactoryFinder: java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader,boolean)>(l5, l3, 0)
Type change: command <java.util.Scanner: java.lang.String nextLine()> java.lang.String java.lang.Object
virtualinvoke this.<com.piss.editor.ui.ConsoleEditorInterface: java.lang.Object parseInstanceName(java.lang.String)>(command)
Type change: command <java.util.Scanner: java.lang.String nextLine()> java.lang.String java.lang.Object
virtualinvoke this.<com.piss.editor.ui.ConsoleEditorInterface: java.lang.Object parseInstanceName(java.lang.String)>(command)
Type change: command <java.util.Scanner: java.lang.String nextLine()> java.lang.String java.lang.Object
virtualinvoke this.<com.piss.editor.ui.ConsoleEditorInterface: java.lang.Object parseInstanceName(java.lang.String)>(command)
Type change: command <java.util.Scanner: java.lang.String nextLine()> java.lang.String java.lang.Object
virtualinvoke this.<com.piss.editor.ui.ConsoleEditorInterface: java.lang.Object parseInstanceName(java.lang.String)>(command)
Value: $stack4 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack11 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack8 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack5 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack5 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack2 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack2 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack4 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack4 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack4 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack4 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack9 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack9 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack7 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack7 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack7 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack7 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack5 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack5 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack10 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack17 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack20 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack10 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack17 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack20 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack3 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack3 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack7 from BOM: <java.io.Reader: int read()>flows to a field: this.<org.apache.batik.parser.AbstractParser: int current>
Value: $stack3 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.StringInfo: int string>
Type change: l8 <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.StringBuffer
virtualinvoke $stack19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(l8)
Type change: l3 <java.net.URLConnection: java.io.InputStream getInputStream()> java.io.InputStream byte[]
staticinvoke <org.mozilla.javascript.Kit: byte[] readStream(java.io.InputStream,int)>(l3, l4)
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
virtualinvoke $stack24.<java.lang.String: boolean equals(java.lang.Object)>(e)
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.StringBuffer
virtualinvoke $stack28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(e)
Type change: value <java.io.BufferedReader: java.lang.String readLine()> java.lang.String int
staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(value)
Type change: value <java.io.BufferedReader: java.lang.String readLine()> java.lang.String int
staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(value)
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String boolean
virtualinvoke $stack24.<java.lang.String: boolean equals(java.lang.Object)>(e)
Type change: e <java.io.BufferedReader: java.lang.String readLine()> java.lang.String java.lang.StringBuffer
virtualinvoke $stack28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(e)
Value: $stack3 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.InvokeDynamicInfo: int bootstrap>
Value: $stack4 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.InvokeDynamicInfo: int nameAndType>
Value: $stack10 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.CodeAttribute: int maxStack>
Value: $stack11 from BOM: <java.io.DataInputStream: int readUnsignedShort()>flows to a field: this.<javassist.bytecode.CodeAttribute: int maxLocals>
Loaded 116649 methods from JAR files.
Found 62 Basic Source Methods.
Found 1164 Basic Sink Methods.
Found 0 Methods flow to return.
Found 0 Methods flow to a sink.
Found 0 Methods in this Class flow to a field in class.
Found 0 Methods flow to a field in class.
Methods extraction finished.
done
