***** Loading java classes ***** 

Start reading BOM and BIM...
BOMs are loaded with 168 methods.
BIMs are loaded with 350 methods.
EOMs are loaded with 257 methods.
EIMs are loaded with 365 methods.
[SPARK] Starting analysis ...
[SPARK] Done! 


Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
In class: org.signal.libsignal.internal.Native
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <sun.security.action.GetPropertyAction: java.lang.String run()>>
Global flow detected: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <sun.security.action.GetPropertyAction: java.lang.String run()>

Adding connections to callgraphs in class: sun.security.action.GetPropertyAction


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.action.GetPropertyAction
Continue with method: <sun.security.action.GetPropertyAction: java.lang.String run()>


<2: <sun.security.action.GetPropertyAction: java.lang.String run()> -> <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>>
Global flow detected: <sun.security.action.GetPropertyAction: java.lang.String run()> -> <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>

Adding connections to callgraphs in class: sun.security.util.SecurityProperties


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.util.SecurityProperties
Continue with method: <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>


<3: <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)> -> <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>>
Global flow detected: <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)> -> <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>

Adding connections to callgraphs in class: sun.security.util.PropertyExpander


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.util.PropertyExpander
Continue with method: <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>


<4: <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)> -> <sun.net.www.MimeTable: void load()>>
Global flow detected: <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)> -> <sun.net.www.MimeTable: void load()>

Adding connections to callgraphs in class: sun.net.www.MimeTable


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.www.MimeTable
Continue with method: <sun.net.www.MimeTable: void load()>


<5: <sun.net.www.MimeTable: void load()> -> <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>>
Global flow detected: <sun.net.www.MimeTable: void load()> -> <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>

Adding connections to callgraphs in class: sun.net.www.MimeEntry


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.www.MimeEntry
Continue with method: <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>


<6: <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>>
Global flow detected: <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>

Adding connections to callgraphs in class: sun.security.action.GetPropertyAction


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.action.GetPropertyAction
Continue with method: <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>


<7: <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)> -> <org.signal.libsignal.internal.Native: void loadLibrary()>>
Global flow detected: <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)> -> <org.signal.libsignal.internal.Native: void loadLibrary()>

Adding connections to callgraphs in class: org.signal.libsignal.internal.Native


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.internal.Native
Continue with method: <org.signal.libsignal.internal.Native: void loadLibrary()>


<8: <org.signal.libsignal.internal.Native: void loadLibrary()> -> <org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()>>
Global flow detected: <org.signal.libsignal.internal.Native: void loadLibrary()> -> <org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.SenderKeyMessage


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.SenderKeyMessage
Continue with method: <org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()>


<9: <org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()> -> <org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()> -> <org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.DecryptionErrorMessage


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.DecryptionErrorMessage
Continue with method: <org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()>


<10: <org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()> -> <org.signal.libsignal.protocol.message.PlaintextContent: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()> -> <org.signal.libsignal.protocol.message.PlaintextContent: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.PlaintextContent


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.PlaintextContent
Continue with method: <org.signal.libsignal.protocol.message.PlaintextContent: void finalize()>


<11: <org.signal.libsignal.protocol.message.PlaintextContent: void finalize()> -> <org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.PlaintextContent: void finalize()> -> <org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.state.PreKeyBundle


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.state.PreKeyBundle
Continue with method: <org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()>


<12: <org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()> -> <org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()> -> <org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.SenderKeyDistributionMessage


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.SenderKeyDistributionMessage
Continue with method: <org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()>


<13: <org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.Aes256GcmSiv


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.Aes256GcmSiv
Continue with method: <org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()>


<14: <org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()> -> <org.signal.libsignal.crypto.CryptographicHash: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()> -> <org.signal.libsignal.crypto.CryptographicHash: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.CryptographicHash


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.CryptographicHash
Continue with method: <org.signal.libsignal.crypto.CryptographicHash: void finalize()>


<15: <org.signal.libsignal.crypto.CryptographicHash: void finalize()> -> <org.signal.libsignal.crypto.CryptographicMac: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.CryptographicHash: void finalize()> -> <org.signal.libsignal.crypto.CryptographicMac: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.CryptographicMac


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.CryptographicMac
Continue with method: <org.signal.libsignal.crypto.CryptographicMac: void finalize()>


<16: <org.signal.libsignal.crypto.CryptographicMac: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.CryptographicMac: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.Aes256GcmDecryption


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.Aes256GcmDecryption
Continue with method: <org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()>


<17: <org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()> -> <org.signal.libsignal.crypto.Aes256Ctr32: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()> -> <org.signal.libsignal.crypto.Aes256Ctr32: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.Aes256Ctr32


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.Aes256Ctr32
Continue with method: <org.signal.libsignal.crypto.Aes256Ctr32: void finalize()>


<18: <org.signal.libsignal.crypto.Aes256Ctr32: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.Aes256Ctr32: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.Aes256GcmEncryption


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.Aes256GcmEncryption
Continue with method: <org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()>


<19: <org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()> -> <org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()> -> <org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.hsmenclave.HsmEnclaveClient


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.hsmenclave.HsmEnclaveClient
Continue with method: <org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()>


<20: <org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()> -> <org.signal.libsignal.protocol.message.SignalMessage: void finalize()>>
Global flow detected: <org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()> -> <org.signal.libsignal.protocol.message.SignalMessage: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.SignalMessage


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.SignalMessage
Continue with method: <org.signal.libsignal.protocol.message.SignalMessage: void finalize()>


<21: <org.signal.libsignal.protocol.message.SignalMessage: void finalize()> -> <org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.SignalMessage: void finalize()> -> <org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.PreKeySignalMessage


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.PreKeySignalMessage
Continue with method: <org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()>


<22: <org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()> -> <org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()> -> <org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.ecc.ECPrivateKey


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.ecc.ECPrivateKey
Continue with method: <org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()>


<23: <org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()> -> <org.signal.libsignal.protocol.state.SessionRecord: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()> -> <org.signal.libsignal.protocol.state.SessionRecord: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.state.SessionRecord


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.state.SessionRecord
Continue with method: <org.signal.libsignal.protocol.state.SessionRecord: void finalize()>


<24: <org.signal.libsignal.protocol.state.SessionRecord: void finalize()> -> <org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.state.SessionRecord: void finalize()> -> <org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.state.SignedPreKeyRecord


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.state.SignedPreKeyRecord
Continue with method: <org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()>


<25: <org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.groups.state.SenderKeyRecord


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.groups.state.SenderKeyRecord
Continue with method: <org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()>


<26: <org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.SignalProtocolAddress


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.SignalProtocolAddress
Continue with method: <org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()>


<27: <org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()> -> <org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()> -> <org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.state.PreKeyRecord


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.state.PreKeyRecord
Continue with method: <org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()>


<28: <org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.ecc.ECPublicKey


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.ecc.ECPublicKey
Continue with method: <org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()>


<29: <org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()> -> <org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()> -> <org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.metadata.certificate.ServerCertificate


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.metadata.certificate.ServerCertificate
Continue with method: <org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()>


<30: <org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()> -> <org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()>>
Global flow detected: <org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()> -> <org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.metadata.certificate.SenderCertificate


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.metadata.certificate.SenderCertificate
Continue with method: <org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()>


<31: <org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()> -> <org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()>>
Global flow detected: <org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()> -> <org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent
Continue with method: <org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()>


<32: <org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()> -> <org.signal.libsignal.internal.NativeHandleGuard: void close()>>
Global flow detected: <org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()> -> <org.signal.libsignal.internal.NativeHandleGuard: void close()>

Adding connections to callgraphs in class: org.signal.libsignal.internal.NativeHandleGuard


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.internal.NativeHandleGuard
Continue with method: <org.signal.libsignal.internal.NativeHandleGuard: void close()>


Flows from <java.lang.System: java.lang.String getProperty(java.lang.String)> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String)>" ];
  2 [ label="<sun.security.action.GetPropertyAction: java.lang.String run()>" ];
  3 [ label="<sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>" ];
  4 [ label="<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>" ];
  5 [ label="<sun.net.www.MimeTable: void load()>" ];
  6 [ label="<sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>" ];
  7 [ label="<sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>" ];
  8 [ label="<org.signal.libsignal.internal.Native: void loadLibrary()>" ];
  9 [ label="<org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()>" ];
  10 [ label="<org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()>" ];
  11 [ label="<org.signal.libsignal.protocol.message.PlaintextContent: void finalize()>" ];
  12 [ label="<org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()>" ];
  13 [ label="<org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()>" ];
  14 [ label="<org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()>" ];
  15 [ label="<org.signal.libsignal.crypto.CryptographicHash: void finalize()>" ];
  16 [ label="<org.signal.libsignal.crypto.CryptographicMac: void finalize()>" ];
  17 [ label="<org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()>" ];
  18 [ label="<org.signal.libsignal.crypto.Aes256Ctr32: void finalize()>" ];
  19 [ label="<org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()>" ];
  20 [ label="<org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()>" ];
  21 [ label="<org.signal.libsignal.protocol.message.SignalMessage: void finalize()>" ];
  22 [ label="<org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()>" ];
  23 [ label="<org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()>" ];
  24 [ label="<org.signal.libsignal.protocol.state.SessionRecord: void finalize()>" ];
  25 [ label="<org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()>" ];
  26 [ label="<org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()>" ];
  27 [ label="<org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()>" ];
  28 [ label="<org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()>" ];
  29 [ label="<org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()>" ];
  30 [ label="<org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()>" ];
  31 [ label="<org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()>" ];
  32 [ label="<org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()>" ];
  33 [ label="<org.signal.libsignal.internal.NativeHandleGuard: void close()>" ];
  34 [ label="<org.signal.libsignal.protocol.state.PreKeyRecord: void <init>(int,org.signal.libsignal.protocol.ecc.ECKeyPair)>" ];
  35 [ label="<org.signal.libsignal.protocol.state.SignedPreKeyRecord: void <init>(int,long,org.signal.libsignal.protocol.ecc.ECKeyPair,byte[])>" ];
  36 [ label="<org.signal.libsignal.protocol.state.PreKeyBundle: void <init>(int,int,int,org.signal.libsignal.protocol.ecc.ECPublicKey,int,org.signal.libsignal.protocol.ecc.ECPublicKey,byte[],org.signal.libsignal.protocol.IdentityKey)>" ];
  37 [ label="<org.signal.libsignal.protocol.message.PlaintextContent: void <init>(org.signal.libsignal.protocol.message.DecryptionErrorMessage)>" ];
  38 [ label="<org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void <init>(org.signal.libsignal.protocol.message.CiphertextMessage,org.signal.libsignal.metadata.certificate.SenderCertificate,int,java.util.Optional)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
}

Source found in the callgraph: <java.io.InputStream: int read(byte[])>...
In class: org.signal.libsignal.internal.Native
Start traversal: 

Starting from method: <java.io.InputStream: int read(byte[])>
<1: <java.io.InputStream: int read(byte[])> -> <sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)>>
Global flow detected: <java.io.InputStream: int read(byte[])> -> <sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)>

Adding connections to callgraphs in class: sun.security.util.DerValue


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.util.DerValue
Continue with method: <sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)>


<2: <sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)> -> <sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()>>
Global flow detected: <sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)> -> <sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()>

Adding connections to callgraphs in class: sun.security.util.DerInputStream


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.util.DerInputStream
Continue with method: <sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()>


<3: <sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()> -> <sun.nio.ch.ChannelInputStream: int read()>>
Global flow detected: <sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()> -> <sun.nio.ch.ChannelInputStream: int read()>

Adding connections to callgraphs in class: sun.nio.ch.ChannelInputStream


------------------------------------
------------------------------------
Now we build call graphs for class: sun.nio.ch.ChannelInputStream
Continue with method: <sun.nio.ch.ChannelInputStream: int read()>


<4: <sun.nio.ch.ChannelInputStream: int read()> -> <sun.security.util.DerInputStream: byte[] getOctetString()>>
Global flow detected: <sun.nio.ch.ChannelInputStream: int read()> -> <sun.security.util.DerInputStream: byte[] getOctetString()>

Adding connections to callgraphs in class: sun.security.util.DerInputStream


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.util.DerInputStream
Continue with method: <sun.security.util.DerInputStream: byte[] getOctetString()>


<5: <sun.security.util.DerInputStream: byte[] getOctetString()> -> <sun.security.util.DerValue: byte[] getOctetString()>>
Global flow detected: <sun.security.util.DerInputStream: byte[] getOctetString()> -> <sun.security.util.DerValue: byte[] getOctetString()>

Adding connections to callgraphs in class: sun.security.util.DerValue


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.util.DerValue
Continue with method: <sun.security.util.DerValue: byte[] getOctetString()>


<6: <sun.security.util.DerValue: byte[] getOctetString()> -> <sun.security.util.DerInputStream: void getBytes(byte[])>>
Global flow detected: <sun.security.util.DerValue: byte[] getOctetString()> -> <sun.security.util.DerInputStream: void getBytes(byte[])>

Adding connections to callgraphs in class: sun.security.util.DerInputStream


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.util.DerInputStream
Continue with method: <sun.security.util.DerInputStream: void getBytes(byte[])>


<7: <sun.security.util.DerInputStream: void getBytes(byte[])> -> <sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)>>
Global flow detected: <sun.security.util.DerInputStream: void getBytes(byte[])> -> <sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)>

Adding connections to callgraphs in class: sun.security.provider.certpath.X509CertPath


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.provider.certpath.X509CertPath
Continue with method: <sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)>


<8: <sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)> -> <org.signal.libsignal.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>>
Global flow detected: <sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)> -> <org.signal.libsignal.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>

Adding connections to callgraphs in class: org.signal.libsignal.internal.Native


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.internal.Native
Continue with method: <org.signal.libsignal.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>


<9: <org.signal.libsignal.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)> -> <org.signal.libsignal.internal.Native: void loadLibrary()>>
<10: <org.signal.libsignal.internal.Native: void loadLibrary()> -> <org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()>>
Global flow detected: <org.signal.libsignal.internal.Native: void loadLibrary()> -> <org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.SenderKeyMessage


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.SenderKeyMessage
Continue with method: <org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()>


<11: <org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()> -> <org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()> -> <org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.DecryptionErrorMessage


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.DecryptionErrorMessage
Continue with method: <org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()>


<12: <org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()> -> <org.signal.libsignal.protocol.message.PlaintextContent: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()> -> <org.signal.libsignal.protocol.message.PlaintextContent: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.PlaintextContent


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.PlaintextContent
Continue with method: <org.signal.libsignal.protocol.message.PlaintextContent: void finalize()>


<13: <org.signal.libsignal.protocol.message.PlaintextContent: void finalize()> -> <org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.PlaintextContent: void finalize()> -> <org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.state.PreKeyBundle


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.state.PreKeyBundle
Continue with method: <org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()>


<14: <org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()> -> <org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()> -> <org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.SenderKeyDistributionMessage


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.SenderKeyDistributionMessage
Continue with method: <org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()>


<15: <org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.Aes256GcmSiv


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.Aes256GcmSiv
Continue with method: <org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()>


<16: <org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()> -> <org.signal.libsignal.crypto.CryptographicHash: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()> -> <org.signal.libsignal.crypto.CryptographicHash: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.CryptographicHash


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.CryptographicHash
Continue with method: <org.signal.libsignal.crypto.CryptographicHash: void finalize()>


<17: <org.signal.libsignal.crypto.CryptographicHash: void finalize()> -> <org.signal.libsignal.crypto.CryptographicMac: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.CryptographicHash: void finalize()> -> <org.signal.libsignal.crypto.CryptographicMac: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.CryptographicMac


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.CryptographicMac
Continue with method: <org.signal.libsignal.crypto.CryptographicMac: void finalize()>


<18: <org.signal.libsignal.crypto.CryptographicMac: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.CryptographicMac: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.Aes256GcmDecryption


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.Aes256GcmDecryption
Continue with method: <org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()>


<19: <org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()> -> <org.signal.libsignal.crypto.Aes256Ctr32: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()> -> <org.signal.libsignal.crypto.Aes256Ctr32: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.Aes256Ctr32


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.Aes256Ctr32
Continue with method: <org.signal.libsignal.crypto.Aes256Ctr32: void finalize()>


<20: <org.signal.libsignal.crypto.Aes256Ctr32: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.Aes256Ctr32: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.Aes256GcmEncryption


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.Aes256GcmEncryption
Continue with method: <org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()>


<21: <org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()> -> <org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()> -> <org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.hsmenclave.HsmEnclaveClient


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.hsmenclave.HsmEnclaveClient
Continue with method: <org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()>


<22: <org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()> -> <org.signal.libsignal.protocol.message.SignalMessage: void finalize()>>
Global flow detected: <org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()> -> <org.signal.libsignal.protocol.message.SignalMessage: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.SignalMessage


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.SignalMessage
Continue with method: <org.signal.libsignal.protocol.message.SignalMessage: void finalize()>


<23: <org.signal.libsignal.protocol.message.SignalMessage: void finalize()> -> <org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.SignalMessage: void finalize()> -> <org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.PreKeySignalMessage


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.PreKeySignalMessage
Continue with method: <org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()>


<24: <org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()> -> <org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()> -> <org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.ecc.ECPrivateKey


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.ecc.ECPrivateKey
Continue with method: <org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()>


<25: <org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()> -> <org.signal.libsignal.protocol.state.SessionRecord: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()> -> <org.signal.libsignal.protocol.state.SessionRecord: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.state.SessionRecord


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.state.SessionRecord
Continue with method: <org.signal.libsignal.protocol.state.SessionRecord: void finalize()>


<26: <org.signal.libsignal.protocol.state.SessionRecord: void finalize()> -> <org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.state.SessionRecord: void finalize()> -> <org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.state.SignedPreKeyRecord


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.state.SignedPreKeyRecord
Continue with method: <org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()>


<27: <org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.groups.state.SenderKeyRecord


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.groups.state.SenderKeyRecord
Continue with method: <org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()>


<28: <org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.SignalProtocolAddress


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.SignalProtocolAddress
Continue with method: <org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()>


<29: <org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()> -> <org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()> -> <org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.state.PreKeyRecord


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.state.PreKeyRecord
Continue with method: <org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()>


<30: <org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.ecc.ECPublicKey


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.ecc.ECPublicKey
Continue with method: <org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()>


<31: <org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()> -> <org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()> -> <org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.metadata.certificate.ServerCertificate


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.metadata.certificate.ServerCertificate
Continue with method: <org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()>


<32: <org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()> -> <org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()>>
Global flow detected: <org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()> -> <org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.metadata.certificate.SenderCertificate


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.metadata.certificate.SenderCertificate
Continue with method: <org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()>


<33: <org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()> -> <org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()>>
Global flow detected: <org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()> -> <org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent
Continue with method: <org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()>


<34: <org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()> -> <org.signal.libsignal.internal.NativeHandleGuard: void close()>>
Global flow detected: <org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()> -> <org.signal.libsignal.internal.NativeHandleGuard: void close()>

Adding connections to callgraphs in class: org.signal.libsignal.internal.NativeHandleGuard


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.internal.NativeHandleGuard
Continue with method: <org.signal.libsignal.internal.NativeHandleGuard: void close()>


Flows from <java.io.InputStream: int read(byte[])> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.io.InputStream: int read(byte[])>" ];
  2 [ label="<sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)>" ];
  3 [ label="<sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()>" ];
  4 [ label="<sun.nio.ch.ChannelInputStream: int read()>" ];
  5 [ label="<sun.security.util.DerInputStream: byte[] getOctetString()>" ];
  6 [ label="<sun.security.util.DerValue: byte[] getOctetString()>" ];
  7 [ label="<sun.security.util.DerInputStream: void getBytes(byte[])>" ];
  8 [ label="<sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)>" ];
  9 [ label="<org.signal.libsignal.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>" ];
  10 [ label="<org.signal.libsignal.internal.Native: void loadLibrary()>" ];
  11 [ label="<org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()>" ];
  12 [ label="<org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()>" ];
  13 [ label="<org.signal.libsignal.protocol.message.PlaintextContent: void finalize()>" ];
  14 [ label="<org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()>" ];
  15 [ label="<org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()>" ];
  16 [ label="<org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()>" ];
  17 [ label="<org.signal.libsignal.crypto.CryptographicHash: void finalize()>" ];
  18 [ label="<org.signal.libsignal.crypto.CryptographicMac: void finalize()>" ];
  19 [ label="<org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()>" ];
  20 [ label="<org.signal.libsignal.crypto.Aes256Ctr32: void finalize()>" ];
  21 [ label="<org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()>" ];
  22 [ label="<org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()>" ];
  23 [ label="<org.signal.libsignal.protocol.message.SignalMessage: void finalize()>" ];
  24 [ label="<org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()>" ];
  25 [ label="<org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()>" ];
  26 [ label="<org.signal.libsignal.protocol.state.SessionRecord: void finalize()>" ];
  27 [ label="<org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()>" ];
  28 [ label="<org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()>" ];
  29 [ label="<org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()>" ];
  30 [ label="<org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()>" ];
  31 [ label="<org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()>" ];
  32 [ label="<org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()>" ];
  33 [ label="<org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()>" ];
  34 [ label="<org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()>" ];
  35 [ label="<org.signal.libsignal.internal.NativeHandleGuard: void close()>" ];
  36 [ label="<org.signal.libsignal.protocol.state.PreKeyRecord: void <init>(int,org.signal.libsignal.protocol.ecc.ECKeyPair)>" ];
  37 [ label="<org.signal.libsignal.protocol.state.SignedPreKeyRecord: void <init>(int,long,org.signal.libsignal.protocol.ecc.ECKeyPair,byte[])>" ];
  38 [ label="<org.signal.libsignal.protocol.state.PreKeyBundle: void <init>(int,int,int,org.signal.libsignal.protocol.ecc.ECPublicKey,int,org.signal.libsignal.protocol.ecc.ECPublicKey,byte[],org.signal.libsignal.protocol.IdentityKey)>" ];
  39 [ label="<org.signal.libsignal.protocol.message.PlaintextContent: void <init>(org.signal.libsignal.protocol.message.DecryptionErrorMessage)>" ];
  40 [ label="<org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void <init>(org.signal.libsignal.protocol.message.CiphertextMessage,org.signal.libsignal.metadata.certificate.SenderCertificate,int,java.util.Optional)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
}

Source found in the callgraph: <java.io.File: java.lang.String getAbsolutePath()>...
In class: org.signal.libsignal.internal.Native
Start traversal: 

Starting from method: <java.io.File: java.lang.String getAbsolutePath()>
<1: <java.io.File: java.lang.String getAbsolutePath()> -> <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>>
Global flow detected: <java.io.File: java.lang.String getAbsolutePath()> -> <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>

Adding connections to callgraphs in class: sun.net.www.ParseUtil


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.www.ParseUtil
Continue with method: <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>


<2: <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)> -> <org.signal.libsignal.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>>
Global flow detected: <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)> -> <org.signal.libsignal.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>

Adding connections to callgraphs in class: org.signal.libsignal.internal.Native


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.internal.Native
Continue with method: <org.signal.libsignal.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>


<3: <org.signal.libsignal.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)> -> <org.signal.libsignal.internal.Native: void loadLibrary()>>
<4: <org.signal.libsignal.internal.Native: void loadLibrary()> -> <org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()>>
Global flow detected: <org.signal.libsignal.internal.Native: void loadLibrary()> -> <org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.SenderKeyMessage


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.SenderKeyMessage
Continue with method: <org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()>


<5: <org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()> -> <org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()> -> <org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.DecryptionErrorMessage


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.DecryptionErrorMessage
Continue with method: <org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()>


<6: <org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()> -> <org.signal.libsignal.protocol.message.PlaintextContent: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()> -> <org.signal.libsignal.protocol.message.PlaintextContent: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.PlaintextContent


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.PlaintextContent
Continue with method: <org.signal.libsignal.protocol.message.PlaintextContent: void finalize()>


<7: <org.signal.libsignal.protocol.message.PlaintextContent: void finalize()> -> <org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.PlaintextContent: void finalize()> -> <org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.state.PreKeyBundle


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.state.PreKeyBundle
Continue with method: <org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()>


<8: <org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()> -> <org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()> -> <org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.SenderKeyDistributionMessage


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.SenderKeyDistributionMessage
Continue with method: <org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()>


<9: <org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.Aes256GcmSiv


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.Aes256GcmSiv
Continue with method: <org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()>


<10: <org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()> -> <org.signal.libsignal.crypto.CryptographicHash: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()> -> <org.signal.libsignal.crypto.CryptographicHash: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.CryptographicHash


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.CryptographicHash
Continue with method: <org.signal.libsignal.crypto.CryptographicHash: void finalize()>


<11: <org.signal.libsignal.crypto.CryptographicHash: void finalize()> -> <org.signal.libsignal.crypto.CryptographicMac: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.CryptographicHash: void finalize()> -> <org.signal.libsignal.crypto.CryptographicMac: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.CryptographicMac


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.CryptographicMac
Continue with method: <org.signal.libsignal.crypto.CryptographicMac: void finalize()>


<12: <org.signal.libsignal.crypto.CryptographicMac: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.CryptographicMac: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.Aes256GcmDecryption


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.Aes256GcmDecryption
Continue with method: <org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()>


<13: <org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()> -> <org.signal.libsignal.crypto.Aes256Ctr32: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()> -> <org.signal.libsignal.crypto.Aes256Ctr32: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.Aes256Ctr32


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.Aes256Ctr32
Continue with method: <org.signal.libsignal.crypto.Aes256Ctr32: void finalize()>


<14: <org.signal.libsignal.crypto.Aes256Ctr32: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.Aes256Ctr32: void finalize()> -> <org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.crypto.Aes256GcmEncryption


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.crypto.Aes256GcmEncryption
Continue with method: <org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()>


<15: <org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()> -> <org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()>>
Global flow detected: <org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()> -> <org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.hsmenclave.HsmEnclaveClient


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.hsmenclave.HsmEnclaveClient
Continue with method: <org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()>


<16: <org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()> -> <org.signal.libsignal.protocol.message.SignalMessage: void finalize()>>
Global flow detected: <org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()> -> <org.signal.libsignal.protocol.message.SignalMessage: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.SignalMessage


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.SignalMessage
Continue with method: <org.signal.libsignal.protocol.message.SignalMessage: void finalize()>


<17: <org.signal.libsignal.protocol.message.SignalMessage: void finalize()> -> <org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.SignalMessage: void finalize()> -> <org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.message.PreKeySignalMessage


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.message.PreKeySignalMessage
Continue with method: <org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()>


<18: <org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()> -> <org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()> -> <org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.ecc.ECPrivateKey


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.ecc.ECPrivateKey
Continue with method: <org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()>


<19: <org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()> -> <org.signal.libsignal.protocol.state.SessionRecord: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()> -> <org.signal.libsignal.protocol.state.SessionRecord: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.state.SessionRecord


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.state.SessionRecord
Continue with method: <org.signal.libsignal.protocol.state.SessionRecord: void finalize()>


<20: <org.signal.libsignal.protocol.state.SessionRecord: void finalize()> -> <org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.state.SessionRecord: void finalize()> -> <org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.state.SignedPreKeyRecord


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.state.SignedPreKeyRecord
Continue with method: <org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()>


<21: <org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.groups.state.SenderKeyRecord


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.groups.state.SenderKeyRecord
Continue with method: <org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()>


<22: <org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.SignalProtocolAddress


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.SignalProtocolAddress
Continue with method: <org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()>


<23: <org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()> -> <org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()> -> <org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.state.PreKeyRecord


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.state.PreKeyRecord
Continue with method: <org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()>


<24: <org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()> -> <org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.protocol.ecc.ECPublicKey


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.protocol.ecc.ECPublicKey
Continue with method: <org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()>


<25: <org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()> -> <org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()>>
Global flow detected: <org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()> -> <org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.metadata.certificate.ServerCertificate


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.metadata.certificate.ServerCertificate
Continue with method: <org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()>


<26: <org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()> -> <org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()>>
Global flow detected: <org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()> -> <org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.metadata.certificate.SenderCertificate


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.metadata.certificate.SenderCertificate
Continue with method: <org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()>


<27: <org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()> -> <org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()>>
Global flow detected: <org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()> -> <org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()>

Adding connections to callgraphs in class: org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent
Continue with method: <org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()>


<28: <org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()> -> <org.signal.libsignal.internal.NativeHandleGuard: void close()>>
Global flow detected: <org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()> -> <org.signal.libsignal.internal.NativeHandleGuard: void close()>

Adding connections to callgraphs in class: org.signal.libsignal.internal.NativeHandleGuard


------------------------------------
------------------------------------
Now we build call graphs for class: org.signal.libsignal.internal.NativeHandleGuard
Continue with method: <org.signal.libsignal.internal.NativeHandleGuard: void close()>


Flows from <java.io.File: java.lang.String getAbsolutePath()> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getAbsolutePath()>" ];
  2 [ label="<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>" ];
  3 [ label="<org.signal.libsignal.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>" ];
  4 [ label="<org.signal.libsignal.internal.Native: void loadLibrary()>" ];
  5 [ label="<org.signal.libsignal.protocol.message.SenderKeyMessage: void finalize()>" ];
  6 [ label="<org.signal.libsignal.protocol.message.DecryptionErrorMessage: void finalize()>" ];
  7 [ label="<org.signal.libsignal.protocol.message.PlaintextContent: void finalize()>" ];
  8 [ label="<org.signal.libsignal.protocol.state.PreKeyBundle: void finalize()>" ];
  9 [ label="<org.signal.libsignal.protocol.message.SenderKeyDistributionMessage: void finalize()>" ];
  10 [ label="<org.signal.libsignal.crypto.Aes256GcmSiv: void finalize()>" ];
  11 [ label="<org.signal.libsignal.crypto.CryptographicHash: void finalize()>" ];
  12 [ label="<org.signal.libsignal.crypto.CryptographicMac: void finalize()>" ];
  13 [ label="<org.signal.libsignal.crypto.Aes256GcmDecryption: void finalize()>" ];
  14 [ label="<org.signal.libsignal.crypto.Aes256Ctr32: void finalize()>" ];
  15 [ label="<org.signal.libsignal.crypto.Aes256GcmEncryption: void finalize()>" ];
  16 [ label="<org.signal.libsignal.hsmenclave.HsmEnclaveClient: void finalize()>" ];
  17 [ label="<org.signal.libsignal.protocol.message.SignalMessage: void finalize()>" ];
  18 [ label="<org.signal.libsignal.protocol.message.PreKeySignalMessage: void finalize()>" ];
  19 [ label="<org.signal.libsignal.protocol.ecc.ECPrivateKey: void finalize()>" ];
  20 [ label="<org.signal.libsignal.protocol.state.SessionRecord: void finalize()>" ];
  21 [ label="<org.signal.libsignal.protocol.state.SignedPreKeyRecord: void finalize()>" ];
  22 [ label="<org.signal.libsignal.protocol.groups.state.SenderKeyRecord: void finalize()>" ];
  23 [ label="<org.signal.libsignal.protocol.SignalProtocolAddress: void finalize()>" ];
  24 [ label="<org.signal.libsignal.protocol.state.PreKeyRecord: void finalize()>" ];
  25 [ label="<org.signal.libsignal.protocol.ecc.ECPublicKey: void finalize()>" ];
  26 [ label="<org.signal.libsignal.metadata.certificate.ServerCertificate: void finalize()>" ];
  27 [ label="<org.signal.libsignal.metadata.certificate.SenderCertificate: void finalize()>" ];
  28 [ label="<org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void finalize()>" ];
  29 [ label="<org.signal.libsignal.internal.NativeHandleGuard: void close()>" ];
  30 [ label="<org.signal.libsignal.protocol.state.PreKeyRecord: void <init>(int,org.signal.libsignal.protocol.ecc.ECKeyPair)>" ];
  31 [ label="<org.signal.libsignal.protocol.state.SignedPreKeyRecord: void <init>(int,long,org.signal.libsignal.protocol.ecc.ECKeyPair,byte[])>" ];
  32 [ label="<org.signal.libsignal.protocol.state.PreKeyBundle: void <init>(int,int,int,org.signal.libsignal.protocol.ecc.ECPublicKey,int,org.signal.libsignal.protocol.ecc.ECPublicKey,byte[],org.signal.libsignal.protocol.IdentityKey)>" ];
  33 [ label="<org.signal.libsignal.protocol.message.PlaintextContent: void <init>(org.signal.libsignal.protocol.message.DecryptionErrorMessage)>" ];
  34 [ label="<org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: void <init>(org.signal.libsignal.protocol.message.CiphertextMessage,org.signal.libsignal.metadata.certificate.SenderCertificate,int,java.util.Optional)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
}

Loaded 943 methods from JAR files. 

Found 3 Source Methods.
Found 3 Sink Methods.
Found 2 Methods Invoking a Basic Source.
Sources and Sinks collected. 

Methods extraction finished.
All finished.
