***** Loading java classes ***** 

Start reading BOM and BIM...
BOM is loaded with 169 methods.
BIM is loaded with 352 methods.
EOM is loaded with 286 methods.
EIM is loaded with 365 methods.
Start looking for sources and sinks: 
[spark] Starting analysis ...
[main] ERROR soot.jimple.toolkits.typing.fast.TypePromotionUseVisitor - Failed Typing in <java.awt.image.ComponentColorModel: int getRGBComponent(int,int)> at statement opixel#1 = $r0: Is not cast compatible: null_type <-- java.lang.Object
[main] ERROR soot.jimple.toolkits.typing.fast.TypePromotionUseVisitor - Failed Typing in <com.sun.imageio.plugins.tiff.TIFFIFD: int readFieldValue(javax.imageio.stream.ImageInputStream,int,int,java.lang.Object[])> at statement obj#10 = $r0: Is not cast compatible: null_type <-- java.lang.Object
[spark] Done!
Now we build call graphs for class: com.vaadin.data.util.sqlcontainer.connection.SimpleJDBCConnectionPool
Source here: <com.vaadin.data.util.sqlcontainer.connection.SimpleJDBCConnectionPool: java.sql.Connection createConnection()>
Now we build call graphs for class: com.vaadin.server.VaadinPortletService
Source here: <com.vaadin.server.VaadinPortletService: java.io.File getBaseDirectory()>
Now we build call graphs for class: com.google.gwt.core.server.StackTraceDeobfuscator
Source here: <com.google.gwt.core.server.StackTraceDeobfuscator: java.lang.String loadStreamAsString(java.io.InputStream)>
Source here: <com.google.gwt.core.server.StackTraceDeobfuscator: java.util.Map loadSymbolMap(java.lang.String,java.util.Set)>
Now we build call graphs for class: com.vaadin.server.communication.ResourceWriter
Source here: <com.vaadin.server.communication.ResourceWriter: void write(com.vaadin.ui.UI,java.io.Writer,com.vaadin.server.JsonPaintTarget)>
Now we build call graphs for class: com.vaadin.data.util.FilesystemContainer
Source here: <com.vaadin.data.util.FilesystemContainer: java.util.Collection getChildren(java.lang.Object)>
Source here: <com.vaadin.data.util.FilesystemContainer: java.lang.Object getParent(java.lang.Object)>
Source here: <com.vaadin.data.util.FilesystemContainer: boolean hasChildren(java.lang.Object)>
Source here: <com.vaadin.data.util.FilesystemContainer: java.util.Collection rootItemIds()>
Source here: <com.vaadin.data.util.FilesystemContainer: boolean containsId(java.lang.Object)>
Source here: <com.vaadin.data.util.FilesystemContainer: void addItemIds(java.util.Collection,java.io.File)>
Source here: <com.vaadin.data.util.FilesystemContainer: java.util.Collection getItemIds()>
Source here: <com.vaadin.data.util.FilesystemContainer: int getFileCounts(java.io.File)>
Source here: <com.vaadin.data.util.FilesystemContainer: int size()>
Now we build call graphs for class: com.vaadin.data.util.FilesystemContainer$FileItem
Source here: <com.vaadin.data.util.FilesystemContainer$FileItem: int hashCode()>
Source here: <com.vaadin.data.util.FilesystemContainer$FileItem: java.lang.String getName()>
Source here: <com.vaadin.data.util.FilesystemContainer$FileItem: java.lang.String toString()>
Now we build call graphs for class: com.vaadin.server.FileResource
Source here: <com.vaadin.server.FileResource: com.vaadin.server.DownloadStream getStream()>
Source here: <com.vaadin.server.FileResource: java.lang.String getFilename()>
Now we build call graphs for class: com.vaadin.util.FileTypeResolver
Source here: <com.vaadin.util.FileTypeResolver: java.lang.String getMIMEType(java.io.File)>
Now we build call graphs for class: com.vaadin.data.util.TextFileProperty
Source here: <com.vaadin.data.util.TextFileProperty: java.lang.String getValue()>
Now we build call graphs for class: com.vaadin.data.util.sqlcontainer.query.TableQuery
Source here: <com.vaadin.data.util.sqlcontainer.query.TableQuery: com.vaadin.data.util.sqlcontainer.RowId storeRowImmediately(com.vaadin.data.util.sqlcontainer.RowItem)>
Source here: <com.vaadin.data.util.sqlcontainer.query.TableQuery: int executeUpdateReturnKeys(com.vaadin.data.util.sqlcontainer.query.generator.StatementHelper,com.vaadin.data.util.sqlcontainer.RowItem)>
Now we build call graphs for class: com.vaadin.server.widgetsetutils.ClassPathExplorer
Source here: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>
Source here: <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.List getRawClasspathEntries()>
Source here: <com.vaadin.server.widgetsetutils.ClassPathExplorer: boolean acceptClassPathEntry(java.lang.String)>
Source here: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>
Source here: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void includeJar(java.io.File,java.util.Map)>
Source here: <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.net.URL getDefaultSourceDirectory()>
Start traversal for source: <java.io.File: java.io.File[] listFiles()>...
Starting from source: 
0: listFiles
1: include
2: getClasspathLocations
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getRawClasspathEntries
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getPath()>...
Starting from source: 
0: getPath
1: include
2: getClasspathLocations
Flows from source is finished.
Start traversal for source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.List getRawClasspathEntries()>...
Starting from source: 
0: getRawClasspathEntries
Flows from source is finished.
Start traversal for source: <java.net.URL: java.lang.String getFile()>...
Starting from source: 
0: getFile
1: searchForWidgetSetsAndAddonStyles
2: getAvailableWidgetSetsAndStylesheets
3: updateTheme
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: include
2: getClasspathLocations
Flows from source is finished.
Start traversal for source: <com.vaadin.data.util.FilesystemContainer$FileItem: java.lang.String toString()>...
Starting from source: 
0: toString
1: includeJar
2: include
3: getClasspathLocations
4: acceptClassPathEntry
5: getRawClasspathEntries
6: searchForWidgetSetsAndAddonStyles
7: getAvailableWidgetSetsAndStylesheets
8: updateTheme
Flows from source is finished.
Start traversal for source: <java.util.Scanner: java.lang.String next()>...
Starting from source: 
0: next
1: getClasspathLocations
2: getAvailableWidgetSetsAndStylesheets
3: updateTheme
Flows from source is finished.
Start traversal for source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>...
Starting from source: 
0: include
1: getClasspathLocations
Flows from source is finished.
Start traversal for source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void includeJar(java.io.File,java.util.Map)>...
Starting from source: 
0: includeJar
1: include
2: getClasspathLocations
Flows from source is finished.
Start traversal for source: <java.net.URL: int getPort()>...
Starting from source: 
0: getPort
1: searchForWidgetSetsAndAddonStyles
2: getAvailableWidgetSetsAndStylesheets
3: updateTheme
Flows from source is finished.
Start traversal for source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>...
Starting from source: 
0: searchForWidgetSetsAndAddonStyles
1: getAvailableWidgetSetsAndStylesheets
2: updateTheme
Flows from source is finished.
Start traversal for source: <java.net.URL: java.lang.String getHost()>...
Starting from source: 
0: getHost
1: searchForWidgetSetsAndAddonStyles
2: getAvailableWidgetSetsAndStylesheets
3: updateTheme
Flows from source is finished.
Start traversal for source: <java.net.URL: java.lang.String getProtocol()>...
Starting from source: 
0: getProtocol
1: searchForWidgetSetsAndAddonStyles
2: getAvailableWidgetSetsAndStylesheets
3: updateTheme
Flows from source is finished.
Start traversal for source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: boolean acceptClassPathEntry(java.lang.String)>...
Starting from source: 
0: acceptClassPathEntry
1: getRawClasspathEntries
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getCanonicalPath()>...
Starting from source: 
0: getCanonicalPath
1: includeJar
2: include
3: getClasspathLocations
4: acceptClassPathEntry
5: getRawClasspathEntries
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String[] list()>...
Starting from source: 
0: list
1: searchForWidgetSetsAndAddonStyles
2: getAvailableWidgetSetsAndStylesheets
3: updateTheme
Flows from source is finished.
Start traversal for source: <com.vaadin.data.util.FilesystemContainer$FileItem: java.lang.String getName()>...
Starting from source: 
0: getName
1: include
2: getClasspathLocations
Flows from source is finished.
Callgraph for class: com.vaadin.server.widgetsetutils.ClassPathExplorer
strict digraph G {
  1 [ label="getAvailableWidgetSetsAndStylesheets" ];
  2 [ label="next" ];
  3 [ label="hasNext" ];
  4 [ label="iterator" ];
  5 [ label="get" ];
  6 [ label="keySet" ];
  7 [ label="toString" ];
  8 [ label="append" ];
  9 [ label="currentTimeMillis" ];
  10 [ label="searchForWidgetSetsAndAddonStyles" ];
  11 [ label="log" ];
  12 [ label="updateTheme" ];
  13 [ label="put" ];
  14 [ label="containsKey" ];
  15 [ label="replaceAll" ];
  16 [ label="substring" ];
  17 [ label="lastIndexOf" ];
  18 [ label="openConnection" ];
  19 [ label="getPort" ];
  20 [ label="getHost" ];
  21 [ label="getProtocol" ];
  22 [ label="getFile" ];
  23 [ label="list" ];
  24 [ label="isHidden" ];
  25 [ label="exists" ];
  26 [ label="isWidgetset" ];
  27 [ label="error" ];
  28 [ label="getRawClasspathEntries" ];
  29 [ label="add" ];
  30 [ label="getProperty" ];
  31 [ label="debug" ];
  32 [ label="acceptClassPathEntry" ];
  33 [ label="getClasspathLocations" ];
  34 [ label="include" ];
  35 [ label="toExternalForm" ];
  36 [ label="getCanonicalPath" ];
  37 [ label="contains" ];
  38 [ label="accept" ];
  39 [ label="getPath" ];
  40 [ label="getName" ];
  41 [ label="listFiles" ];
  42 [ label="isDirectory" ];
  43 [ label="includeJar" ];
  44 [ label="printStackTrace" ];
  2 -> 1;
  3 -> 1;
  4 -> 1;
  5 -> 1;
  6 -> 1;
  7 -> 1;
  8 -> 1;
  9 -> 1;
  10 -> 1;
  11 -> 1;
  1 -> 12;
  13 -> 10;
  14 -> 10;
  15 -> 10;
  16 -> 10;
  17 -> 10;
  18 -> 10;
  19 -> 10;
  20 -> 10;
  21 -> 10;
  22 -> 10;
  5 -> 10;
  23 -> 10;
  24 -> 10;
  25 -> 10;
  7 -> 10;
  8 -> 10;
  26 -> 10;
  27 -> 10;
  29 -> 28;
  7 -> 28;
  8 -> 28;
  30 -> 28;
  31 -> 28;
  32 -> 28;
  2 -> 33;
  3 -> 33;
  4 -> 33;
  7 -> 33;
  8 -> 33;
  9 -> 33;
  34 -> 33;
  31 -> 33;
  35 -> 32;
  7 -> 32;
  8 -> 32;
  36 -> 32;
  18 -> 32;
  31 -> 32;
  27 -> 32;
  37 -> 34;
  38 -> 34;
  13 -> 34;
  24 -> 34;
  39 -> 34;
  36 -> 34;
  40 -> 34;
  41 -> 34;
  42 -> 34;
  25 -> 34;
  7 -> 34;
  8 -> 34;
  43 -> 34;
  34 -> 34;
  13 -> 43;
  36 -> 43;
  35 -> 43;
  7 -> 43;
  8 -> 43;
  18 -> 43;
  44 -> 27;
}

Now we build call graphs for class: com.google.gwt.user.server.rpc.impl.ServerSerializationStreamReader
Source here: <com.google.gwt.user.server.rpc.impl.ServerSerializationStreamReader: void deserializeClass(java.lang.Class,java.lang.Object,java.lang.reflect.Type,java.lang.reflect.Type[],com.google.gwt.user.server.rpc.impl.DequeMap)>
Now we build call graphs for class: com.vaadin.server.VaadinServlet
Source here: <com.vaadin.server.VaadinServlet: java.lang.String getResourcePath(javax.servlet.ServletContext,java.lang.String)>
Source here: <com.vaadin.server.VaadinServlet: void serveStaticResourcesInVAADIN(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
Source here: <com.vaadin.server.VaadinServlet: void writeStaticResourceResponse(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.net.URL)>
Source here: <com.vaadin.server.VaadinServlet: boolean isAllowedVAADINResourceUrl(javax.servlet.http.HttpServletRequest,java.net.URL)>
Start traversal for source: <com.vaadin.data.util.FilesystemContainer$FileItem: java.lang.String toString()>...
Starting from source: 
0: toString
1: safeEscapeForHtml
2: getHtmlMessage
Flows from source is finished.
Callgraph for class: com.vaadin.server.VaadinServlet
strict digraph G {
  1 [ label="safeEscapeForHtml" ];
  2 [ label="toCharArray" ];
  3 [ label="toString" ];
  4 [ label="append" ];
  5 [ label="isSafe" ];
  6 [ label="getHtmlMessage" ];
  2 -> 1;
  3 -> 1;
  4 -> 1;
  5 -> 1;
  1 -> 6;
}

Now we build call graphs for class: com.google.gwt.user.server.rpc.RemoteServiceServlet
Source here: <com.google.gwt.user.server.rpc.RemoteServiceServlet: com.google.gwt.user.server.rpc.SerializationPolicy loadSerializationPolicy(javax.servlet.http.HttpServlet,javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)>
Source here: <com.google.gwt.user.server.rpc.RemoteServiceServlet: int getCodeServerPort()>
Now we build call graphs for class: com.google.gwt.user.server.rpc.SerializationPolicyLoader
Source here: <com.google.gwt.user.server.rpc.SerializationPolicyLoader: com.google.gwt.user.server.rpc.SerializationPolicy loadFromStream(java.io.InputStream,java.util.List)>
Now we build call graphs for class: com.google.gwt.user.server.rpc.RPCServletUtils
Source here: <com.google.gwt.user.server.rpc.RPCServletUtils: java.lang.String readContent(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)>
Now we build call graphs for class: com.vaadin.data.util.sqlcontainer.query.FreeformQuery
Source here: <com.vaadin.data.util.sqlcontainer.query.FreeformQuery: int getCount()>
Source here: <com.vaadin.data.util.sqlcontainer.query.FreeformQuery: int countByDelegate()>
Source here: <com.vaadin.data.util.sqlcontainer.query.FreeformQuery: java.sql.ResultSet getResults(int,int)>
Source here: <com.vaadin.data.util.sqlcontainer.query.FreeformQuery: boolean containsRowWithKey(java.lang.Object[])>
Now we build call graphs for class: com.vaadin.server.communication.AtmospherePushConnection$FragmentedMessage
Source here: <com.vaadin.server.communication.AtmospherePushConnection$FragmentedMessage: boolean append(java.io.Reader)>
Now we build call graphs for class: com.vaadin.server.communication.FileUploadHandler
Source here: <com.vaadin.server.communication.FileUploadHandler: boolean streamToReceiver(com.vaadin.server.VaadinSession,java.io.InputStream,com.vaadin.server.StreamVariable,java.lang.String,java.lang.String,long)>
Now we build call graphs for class: com.vaadin.server.DefaultDeploymentConfiguration
Source here: <com.vaadin.server.DefaultDeploymentConfiguration: java.lang.String getSystemProperty(java.lang.String)>
Now we build call graphs for class: com.google.gwt.core.server.StackTraceDeobfuscator$3
Source here: <com.google.gwt.core.server.StackTraceDeobfuscator$3: java.io.InputStream openInputStream(java.lang.String)>
Now we build call graphs for class: com.google.gwt.rpc.server.RpcServlet
Source here: <com.google.gwt.rpc.server.RpcServlet: java.lang.String getRequestModuleBasePath()>
Now we build call graphs for class: com.google.gwt.junit.server.JUnitHostImpl
Source here: <com.google.gwt.junit.server.JUnitHostImpl: java.lang.String getRequestModuleBasePath()>
Now we build call graphs for class: com.vaadin.server.communication.PublishedFileHandler
Source here: <com.vaadin.server.communication.PublishedFileHandler: boolean handleRequest(com.vaadin.server.VaadinSession,com.vaadin.server.VaadinRequest,com.vaadin.server.VaadinResponse)>
Now we build call graphs for class: com.google.gwt.user.server.rpc.SerializationPolicyClient
Source here: <com.google.gwt.user.server.rpc.SerializationPolicyClient: com.google.gwt.user.server.rpc.SerializationPolicy loadPolicy(java.lang.String,com.google.gwt.user.server.rpc.SerializationPolicyClient$Logger)>
Now we build call graphs for class: com.vaadin.server.themeutils.SASSAddonImportFileCreator
Source here: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
Source here: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void printImportComment(java.io.PrintStream,java.net.URL)>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: getLogger
2: updateTheme
3: main
Flows from source is finished.
Start traversal for source: <com.vaadin.data.util.FilesystemContainer$FileItem: java.lang.String toString()>...
Starting from source: 
0: toString
1: printUsage
2: main
3: createAddonsMixin
4: updateTheme
5: printImportComment
6: addImport
Flows from source is finished.
Start traversal for source: <java.net.URL: java.lang.String getPath()>...
Starting from source: 
0: getPath
1: printImportComment
2: addImport
3: updateTheme
4: main
Flows from source is finished.
Start traversal for source: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>...
Starting from source: 
0: updateTheme
1: main
Flows from source is finished.
Start traversal for source: <com.vaadin.server.communication.AtmospherePushConnection$FragmentedMessage: boolean append(java.io.Reader)>...
Starting from source: 
0: append
1: printUsage
2: main
3: createAddonsMixin
4: updateTheme
5: printImportComment
6: addImport
Flows from source is finished.
Start traversal for source: <java.io.File: java.io.File getParentFile()>...
Starting from source: 
0: getParentFile
1: updateTheme
2: main
Flows from source is finished.
Start traversal for source: <com.vaadin.data.util.FilesystemContainer$FileItem: java.lang.String getName()>...
Starting from source: 
0: getName
1: getLogger
2: updateTheme
3: main
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getPath()>...
Starting from source: 
0: getPath
1: printImportComment
2: addImport
3: updateTheme
4: main
Flows from source is finished.
Start traversal for source: <java.util.Scanner: java.lang.String next()>...
Starting from source: 
0: next
1: createAddonsMixin
2: updateTheme
3: main
Flows from source is finished.
Start traversal for source: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void printImportComment(java.io.PrintStream,java.net.URL)>...
Starting from source: 
0: printImportComment
1: addImport
2: updateTheme
3: main
Flows from source is finished.
Callgraph for class: com.vaadin.server.themeutils.SASSAddonImportFileCreator
strict digraph G {
  1 [ label="main" ];
  2 [ label="printUsage" ];
  3 [ label="updateTheme" ];
  4 [ label="log" ];
  5 [ label="mkdirs" ];
  6 [ label="createNewFile" ];
  7 [ label="getParentFile" ];
  8 [ label="exists" ];
  9 [ label="println" ];
  10 [ label="next" ];
  11 [ label="hasNext" ];
  12 [ label="iterator" ];
  13 [ label="addAll" ];
  14 [ label="get" ];
  15 [ label="keySet" ];
  16 [ label="getAddonStyles" ];
  17 [ label="getAvailableWidgetSetsAndStylesheets" ];
  18 [ label="sort" ];
  19 [ label="addImport" ];
  20 [ label="createAddonsMixin" ];
  21 [ label="getLogger" ];
  22 [ label="getName" ];
  23 [ label="print" ];
  24 [ label="substring" ];
  25 [ label="length" ];
  26 [ label="lastIndexOf" ];
  27 [ label="endsWith" ];
  28 [ label="add" ];
  29 [ label="toString" ];
  30 [ label="append" ];
  31 [ label="printImportComment" ];
  32 [ label="getPath" ];
  33 [ label="getSimpleName" ];
  2 -> 1;
  3 -> 1;
  4 -> 3;
  5 -> 3;
  6 -> 3;
  7 -> 3;
  8 -> 3;
  9 -> 3;
  10 -> 3;
  11 -> 3;
  12 -> 3;
  13 -> 3;
  14 -> 3;
  15 -> 3;
  16 -> 3;
  17 -> 3;
  18 -> 3;
  19 -> 3;
  20 -> 3;
  21 -> 3;
  22 -> 21;
  21 -> 21;
  9 -> 19;
  23 -> 19;
  24 -> 19;
  25 -> 19;
  26 -> 19;
  27 -> 19;
  28 -> 19;
  29 -> 19;
  30 -> 19;
  31 -> 19;
  9 -> 31;
  24 -> 31;
  26 -> 31;
  32 -> 31;
  29 -> 31;
  30 -> 31;
  9 -> 20;
  10 -> 20;
  11 -> 20;
  12 -> 20;
  29 -> 20;
  30 -> 20;
  33 -> 2;
  29 -> 2;
  30 -> 2;
}

Now we build call graphs for class: com.vaadin.server.DownloadStream
Source here: <com.vaadin.server.DownloadStream: void writeResponse(com.vaadin.server.VaadinRequest,com.vaadin.server.VaadinResponse)>
Now we build call graphs for class: com.vaadin.server.communication.ServerRpcHandler
Source here: <com.vaadin.server.communication.ServerRpcHandler: java.lang.String getMessage(java.io.Reader)>
Now we build call graphs for class: com.vaadin.server.widgetsetutils.WidgetSetBuilder
Source here: <com.vaadin.server.widgetsetutils.WidgetSetBuilder: void updateWidgetSet(java.lang.String)>
Source here: <com.vaadin.server.widgetsetutils.WidgetSetBuilder: java.lang.String readFile(java.io.File)>
Start traversal for source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>...
Starting from source: 
0: searchForWidgetSetsAndAddonStyles
Flows from source is finished.
Callgraph for class: com.vaadin.server.widgetsetutils.WidgetSetBuilder
strict digraph G {
  1 [ label="isWidgetset" ];
  2 [ label="toLowerCase" ];
  3 [ label="contains" ];
  4 [ label="searchForWidgetSetsAndAddonStyles" ];
  2 -> 1;
  3 -> 1;
  1 -> 4;
}

Loaded 8123 methods from JAR files. 

Found 81 Source Methods.
Found 87 Sink Methods.
Sources and Sinks collected. 

Methods extraction finished.
All finished.
