***** Loading java classes ***** 

Start reading BOM and BIM...
Basic source methods are loaded with 168 methods.
Basic sink methods are loaded with 350 methods.
External source methods are loaded with 257 methods.
External sink methods are loaded with 365 methods.
Start looking for sources and sinks: 
[SPARK] Starting analysis ...
[SPARK] Done! 


Source found in the callgraph: <java.net.URL: java.io.InputStream openStream()>...
In class: org.fusesource.jansi.internal.JansiLoader
Start traversal: 

Starting from method: <java.net.URL: java.io.InputStream openStream()>
<1: <java.net.URL: java.io.InputStream openStream()> -> <sun.security.provider.SeedGenerator$URLSeedGenerator$1: java.io.InputStream run()>>
Global flow detected: <java.net.URL: java.io.InputStream openStream()> -> <sun.security.provider.SeedGenerator$URLSeedGenerator$1: java.io.InputStream run()>

Adding connections to callgraphs in class: sun.security.provider.SeedGenerator$URLSeedGenerator$1


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.provider.SeedGenerator$URLSeedGenerator$1
Continue with method: <sun.security.provider.SeedGenerator$URLSeedGenerator$1: java.io.InputStream run()>


<2: <sun.security.provider.SeedGenerator$URLSeedGenerator$1: java.io.InputStream run()> -> <sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>>
Global flow detected: <sun.security.provider.SeedGenerator$URLSeedGenerator$1: java.io.InputStream run()> -> <sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>

Adding connections to callgraphs in class: sun.security.util.PolicyUtil


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.util.PolicyUtil
Continue with method: <sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>


<3: <sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)> -> <sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>>
<4: <sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)> -> <com.sun.org.apache.xml.internal.serializer.Encodings$EncodingInfos: java.io.InputStream openEncodingsFileStream()>>
Global flow detected: <sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)> -> <com.sun.org.apache.xml.internal.serializer.Encodings$EncodingInfos: java.io.InputStream openEncodingsFileStream()>

Adding connections to callgraphs in class: com.sun.org.apache.xml.internal.serializer.Encodings$EncodingInfos


------------------------------------
------------------------------------
Now we build call graphs for class: com.sun.org.apache.xml.internal.serializer.Encodings$EncodingInfos
Continue with method: <com.sun.org.apache.xml.internal.serializer.Encodings$EncodingInfos: java.io.InputStream openEncodingsFileStream()>


<5: <com.sun.org.apache.xml.internal.serializer.Encodings$EncodingInfos: java.io.InputStream openEncodingsFileStream()> -> <java.util.ResourceBundle$ResourceBundleProviderHelper: java.io.InputStream lambda$loadPropertyResourceBundle$2(java.lang.String,java.lang.Module,java.lang.Module)>>
Global flow detected: <com.sun.org.apache.xml.internal.serializer.Encodings$EncodingInfos: java.io.InputStream openEncodingsFileStream()> -> <java.util.ResourceBundle$ResourceBundleProviderHelper: java.io.InputStream lambda$loadPropertyResourceBundle$2(java.lang.String,java.lang.Module,java.lang.Module)>

Adding connections to callgraphs in class: java.util.ResourceBundle$ResourceBundleProviderHelper


------------------------------------
------------------------------------
Now we build call graphs for class: java.util.ResourceBundle$ResourceBundleProviderHelper
Continue with method: <java.util.ResourceBundle$ResourceBundleProviderHelper: java.io.InputStream lambda$loadPropertyResourceBundle$2(java.lang.String,java.lang.Module,java.lang.Module)>


<6: <java.util.ResourceBundle$ResourceBundleProviderHelper: java.io.InputStream lambda$loadPropertyResourceBundle$2(java.lang.String,java.lang.Module,java.lang.Module)> -> <jdk.internal.loader.BuiltinClassLoader: java.io.InputStream findResourceAsStream(java.lang.String,java.lang.String)>>
Global flow detected: <java.util.ResourceBundle$ResourceBundleProviderHelper: java.io.InputStream lambda$loadPropertyResourceBundle$2(java.lang.String,java.lang.Module,java.lang.Module)> -> <jdk.internal.loader.BuiltinClassLoader: java.io.InputStream findResourceAsStream(java.lang.String,java.lang.String)>

Adding connections to callgraphs in class: jdk.internal.loader.BuiltinClassLoader


------------------------------------
------------------------------------
Now we build call graphs for class: jdk.internal.loader.BuiltinClassLoader
Continue with method: <jdk.internal.loader.BuiltinClassLoader: java.io.InputStream findResourceAsStream(java.lang.String,java.lang.String)>


<7: <jdk.internal.loader.BuiltinClassLoader: java.io.InputStream findResourceAsStream(java.lang.String,java.lang.String)> -> <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>>
Global flow detected: <jdk.internal.loader.BuiltinClassLoader: java.io.InputStream findResourceAsStream(java.lang.String,java.lang.String)> -> <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>

Adding connections to callgraphs in class: java.lang.ClassLoader


------------------------------------
------------------------------------
Now we build call graphs for class: java.lang.ClassLoader
Continue with method: <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>


<8: <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)> -> <java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>>
<9: <java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> -> <java.lang.Module: java.io.InputStream getResourceAsStream(java.lang.String)>>
Global flow detected: <java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> -> <java.lang.Module: java.io.InputStream getResourceAsStream(java.lang.String)>

Adding connections to callgraphs in class: java.lang.Module


------------------------------------
------------------------------------
Now we build call graphs for class: java.lang.Module
Continue with method: <java.lang.Module: java.io.InputStream getResourceAsStream(java.lang.String)>


<10: <java.lang.Module: java.io.InputStream getResourceAsStream(java.lang.String)> -> <org.fusesource.jansi.internal.JansiLoader: java.lang.String getVersion()>>
The above invocation flows into a source.
<11: <org.fusesource.jansi.internal.JansiLoader: java.lang.String getVersion()> -> <org.fusesource.jansi.internal.JansiLoader: boolean extractAndLoadLibraryFile(java.lang.String,java.lang.String,java.lang.String)>>
<12: <org.fusesource.jansi.internal.JansiLoader: boolean extractAndLoadLibraryFile(java.lang.String,java.lang.String,java.lang.String)> -> <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>>
The above invocation flows into a source.
Flows from <java.net.URL: java.io.InputStream openStream()> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.net.URL: java.io.InputStream openStream()>" ];
  2 [ label="<sun.security.provider.SeedGenerator$URLSeedGenerator$1: java.io.InputStream run()>" ];
  3 [ label="<sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>" ];
  4 [ label="<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>" ];
  5 [ label="<com.sun.org.apache.xml.internal.serializer.Encodings$EncodingInfos: java.io.InputStream openEncodingsFileStream()>" ];
  6 [ label="<java.util.ResourceBundle$ResourceBundleProviderHelper: java.io.InputStream lambda$loadPropertyResourceBundle$2(java.lang.String,java.lang.Module,java.lang.Module)>" ];
  7 [ label="<jdk.internal.loader.BuiltinClassLoader: java.io.InputStream findResourceAsStream(java.lang.String,java.lang.String)>" ];
  8 [ label="<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>" ];
  9 [ label="<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>" ];
  10 [ label="<java.lang.Module: java.io.InputStream getResourceAsStream(java.lang.String)>" ];
  11 [ label="<org.fusesource.jansi.internal.JansiLoader: java.lang.String getVersion()>" ];
  12 [ label="<org.fusesource.jansi.internal.JansiLoader: boolean extractAndLoadLibraryFile(java.lang.String,java.lang.String,java.lang.String)>" ];
  13 [ label="<org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  10 -> 6;
}

Source found in the callgraph: <java.io.File: java.lang.String getAbsolutePath()>...
In class: org.fusesource.jansi.internal.JansiLoader
Start traversal: 

Starting from method: <java.io.File: java.lang.String getAbsolutePath()>
<1: <java.io.File: java.lang.String getAbsolutePath()> -> <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>>
Global flow detected: <java.io.File: java.lang.String getAbsolutePath()> -> <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>

Adding connections to callgraphs in class: sun.net.www.ParseUtil


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.www.ParseUtil
Continue with method: <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>


<2: <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)> -> <java.io.File: java.io.File getAbsoluteFile()>>
Global flow detected: <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)> -> <java.io.File: java.io.File getAbsoluteFile()>

Adding connections to callgraphs in class: java.io.File


------------------------------------
------------------------------------
Now we build call graphs for class: java.io.File
Continue with method: <java.io.File: java.io.File getAbsoluteFile()>


<3: <java.io.File: java.io.File getAbsoluteFile()> -> <com.sun.org.apache.xml.internal.serializer.utils.SystemIDResolver: java.lang.String getAbsolutePathFromRelativePath(java.lang.String)>>
Global flow detected: <java.io.File: java.io.File getAbsoluteFile()> -> <com.sun.org.apache.xml.internal.serializer.utils.SystemIDResolver: java.lang.String getAbsolutePathFromRelativePath(java.lang.String)>

Adding connections to callgraphs in class: com.sun.org.apache.xml.internal.serializer.utils.SystemIDResolver


------------------------------------
------------------------------------
Now we build call graphs for class: com.sun.org.apache.xml.internal.serializer.utils.SystemIDResolver
Continue with method: <com.sun.org.apache.xml.internal.serializer.utils.SystemIDResolver: java.lang.String getAbsolutePathFromRelativePath(java.lang.String)>


<4: <com.sun.org.apache.xml.internal.serializer.utils.SystemIDResolver: java.lang.String getAbsolutePathFromRelativePath(java.lang.String)> -> <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>>
The above invocation flows into a source.
<5: <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()> -> <org.fusesource.jansi.internal.JansiLoader: boolean loadNativeLibrary(java.io.File)>>
The above invocation flows into a source.
<6: <org.fusesource.jansi.internal.JansiLoader: boolean loadNativeLibrary(java.io.File)> -> <org.fusesource.jansi.internal.JansiLoader: boolean extractAndLoadLibraryFile(java.lang.String,java.lang.String,java.lang.String)>>
<7: <org.fusesource.jansi.internal.JansiLoader: boolean extractAndLoadLibraryFile(java.lang.String,java.lang.String,java.lang.String)> -> <org.fusesource.jansi.internal.JansiLoader: void cleanup()>>
The above invocation flows into a source.
Flows from <java.io.File: java.lang.String getAbsolutePath()> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getAbsolutePath()>" ];
  2 [ label="<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>" ];
  3 [ label="<java.io.File: java.io.File getAbsoluteFile()>" ];
  4 [ label="<com.sun.org.apache.xml.internal.serializer.utils.SystemIDResolver: java.lang.String getAbsolutePathFromRelativePath(java.lang.String)>" ];
  5 [ label="<org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>" ];
  6 [ label="<org.fusesource.jansi.internal.JansiLoader: boolean loadNativeLibrary(java.io.File)>" ];
  7 [ label="<org.fusesource.jansi.internal.JansiLoader: boolean extractAndLoadLibraryFile(java.lang.String,java.lang.String,java.lang.String)>" ];
  8 [ label="<org.fusesource.jansi.internal.JansiLoader: void cleanup()>" ];
  9 [ label="<com.sun.org.apache.xml.internal.serializer.utils.SystemIDResolver: java.lang.String getAbsoluteURI(java.lang.String)>" ];
  10 [ label="<com.sun.org.apache.xml.internal.serializer.utils.SystemIDResolver: java.lang.String getAbsoluteURI(java.lang.String,java.lang.String)>" ];
  11 [ label="<com.sun.org.apache.xml.internal.serializer.CharInfo: com.sun.org.apache.xml.internal.serializer.CharInfo getCharInfo(java.lang.String,java.lang.String)>" ];
  12 [ label="<com.sun.org.apache.xml.internal.serializer.utils.SystemIDResolver: java.lang.String getAbsoluteURIFromRelative(java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  4 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
}

Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
In class: org.fusesource.jansi.internal.JansiLoader
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> -> <org.fusesource.jansi.internal.OSInfo: boolean isAndroid()>>
Global flow detected: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> -> <org.fusesource.jansi.internal.OSInfo: boolean isAndroid()>

Adding connections to callgraphs in class: org.fusesource.jansi.internal.OSInfo


------------------------------------
------------------------------------
Now we build call graphs for class: org.fusesource.jansi.internal.OSInfo
Continue with method: <org.fusesource.jansi.internal.OSInfo: boolean isAndroid()>


<2: <org.fusesource.jansi.internal.OSInfo: boolean isAndroid()> -> <sun.net.NetProperties: java.lang.String get(java.lang.String)>>
Global flow detected: <org.fusesource.jansi.internal.OSInfo: boolean isAndroid()> -> <sun.net.NetProperties: java.lang.String get(java.lang.String)>

Adding connections to callgraphs in class: sun.net.NetProperties


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.NetProperties
Continue with method: <sun.net.NetProperties: java.lang.String get(java.lang.String)>


<3: <sun.net.NetProperties: java.lang.String get(java.lang.String)> -> <sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>>
<4: <sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)> -> <sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>>
<5: <sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)> -> <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()>>
Global flow detected: <sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)> -> <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()>

Adding connections to callgraphs in class: jdk.internal.jimage.BasicImageReader$1


------------------------------------
------------------------------------
Now we build call graphs for class: jdk.internal.jimage.BasicImageReader$1
Continue with method: <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()>


<6: <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()> -> <sun.net.www.MimeTable$1: java.lang.Void run()>>
Global flow detected: <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()> -> <sun.net.www.MimeTable$1: java.lang.Void run()>

Adding connections to callgraphs in class: sun.net.www.MimeTable$1


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.www.MimeTable$1
Continue with method: <sun.net.www.MimeTable$1: java.lang.Void run()>


<7: <sun.net.www.MimeTable$1: java.lang.Void run()> -> <sun.security.provider.SunEntries$1: java.lang.String run()>>
Global flow detected: <sun.net.www.MimeTable$1: java.lang.Void run()> -> <sun.security.provider.SunEntries$1: java.lang.String run()>

Adding connections to callgraphs in class: sun.security.provider.SunEntries$1


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.provider.SunEntries$1
Continue with method: <sun.security.provider.SunEntries$1: java.lang.String run()>


<8: <sun.security.provider.SunEntries$1: java.lang.String run()> -> <sun.net.NetworkClient$1: java.lang.Void run()>>
Global flow detected: <sun.security.provider.SunEntries$1: java.lang.String run()> -> <sun.net.NetworkClient$1: java.lang.Void run()>

Adding connections to callgraphs in class: sun.net.NetworkClient$1


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.NetworkClient$1
Continue with method: <sun.net.NetworkClient$1: java.lang.Void run()>


<9: <sun.net.NetworkClient$1: java.lang.Void run()> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)>>
Global flow detected: <sun.net.NetworkClient$1: java.lang.Void run()> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)>

Adding connections to callgraphs in class: sun.security.action.GetPropertyAction


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.action.GetPropertyAction
Continue with method: <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)>


<10: <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)> -> <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>>
The above invocation flows into a source.
<11: <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()> -> <org.fusesource.jansi.internal.JansiLoader: java.io.File getTempDir()>>
The above invocation flows into a source.
<12: <org.fusesource.jansi.internal.JansiLoader: java.io.File getTempDir()> -> <org.fusesource.jansi.internal.JansiLoader: void cleanup()>>
The above invocation flows into a source.
Flows from <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>" ];
  2 [ label="<org.fusesource.jansi.internal.OSInfo: boolean isAndroid()>" ];
  3 [ label="<sun.net.NetProperties: java.lang.String get(java.lang.String)>" ];
  4 [ label="<sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>" ];
  5 [ label="<sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>" ];
  6 [ label="<jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()>" ];
  7 [ label="<sun.net.www.MimeTable$1: java.lang.Void run()>" ];
  8 [ label="<sun.security.provider.SunEntries$1: java.lang.String run()>" ];
  9 [ label="<sun.net.NetworkClient$1: java.lang.Void run()>" ];
  10 [ label="<sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)>" ];
  11 [ label="<org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>" ];
  12 [ label="<org.fusesource.jansi.internal.JansiLoader: java.io.File getTempDir()>" ];
  13 [ label="<org.fusesource.jansi.internal.JansiLoader: void cleanup()>" ];
  14 [ label="<sun.nio.ch.Net: boolean isFastTcpLoopbackRequested()>" ];
  15 [ label="<sun.nio.ch.FileDispatcherImpl: boolean isFastFileTransferRequested()>" ];
  16 [ label="<java.net.InetAddress: java.net.InetAddressImpl loadImpl(java.lang.String)>" ];
  17 [ label="<jdk.internal.logger.SimpleConsoleLogger: java.lang.System$Logger$Level getDefaultLevel()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  10 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
}

Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
In class: org.fusesource.jansi.internal.JansiLoader
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <sun.security.action.GetPropertyAction: java.lang.String run()>>
Global flow detected: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <sun.security.action.GetPropertyAction: java.lang.String run()>

Adding connections to callgraphs in class: sun.security.action.GetPropertyAction
sun.security.action.GetPropertyAction has been visited already.
<2: <sun.security.action.GetPropertyAction: java.lang.String run()> -> <java.lang.Boolean: boolean getBoolean(java.lang.String)>>
Global flow detected: <sun.security.action.GetPropertyAction: java.lang.String run()> -> <java.lang.Boolean: boolean getBoolean(java.lang.String)>

Adding connections to callgraphs in class: java.lang.Boolean


------------------------------------
------------------------------------
Now we build call graphs for class: java.lang.Boolean
Continue with method: <java.lang.Boolean: boolean getBoolean(java.lang.String)>


<3: <java.lang.Boolean: boolean getBoolean(java.lang.String)> -> <java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)>>
Global flow detected: <java.lang.Boolean: boolean getBoolean(java.lang.String)> -> <java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)>

Adding connections to callgraphs in class: java.util.concurrent.ForkJoinPool


------------------------------------
------------------------------------
Now we build call graphs for class: java.util.concurrent.ForkJoinPool
Continue with method: <java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)>


<4: <java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)> -> <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)>>
Global flow detected: <java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)> -> <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)>

Adding connections to callgraphs in class: java.io.FileSystem


------------------------------------
------------------------------------
Now we build call graphs for class: java.io.FileSystem
Continue with method: <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)>


<5: <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)> -> <javax.xml.stream.FactoryFinder: java.lang.Object find(java.lang.Class,java.lang.String,java.lang.ClassLoader,java.lang.String)>>
Global flow detected: <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)> -> <javax.xml.stream.FactoryFinder: java.lang.Object find(java.lang.Class,java.lang.String,java.lang.ClassLoader,java.lang.String)>

Adding connections to callgraphs in class: javax.xml.stream.FactoryFinder


------------------------------------
------------------------------------
Now we build call graphs for class: javax.xml.stream.FactoryFinder
Continue with method: <javax.xml.stream.FactoryFinder: java.lang.Object find(java.lang.Class,java.lang.String,java.lang.ClassLoader,java.lang.String)>


<6: <javax.xml.stream.FactoryFinder: java.lang.Object find(java.lang.Class,java.lang.String,java.lang.ClassLoader,java.lang.String)> -> <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>>
Global flow detected: <javax.xml.stream.FactoryFinder: java.lang.Object find(java.lang.Class,java.lang.String,java.lang.ClassLoader,java.lang.String)> -> <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>

Adding connections to callgraphs in class: sun.security.util.SecurityProperties


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.util.SecurityProperties
Continue with method: <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>


<7: <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String getArchName()>>
Global flow detected: <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String getArchName()>

Adding connections to callgraphs in class: org.fusesource.jansi.internal.OSInfo
org.fusesource.jansi.internal.OSInfo has been visited already.
<8: <org.fusesource.jansi.internal.OSInfo: java.lang.String getArchName()> -> <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>>
The above invocation flows into a source.
<9: <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String getOSName()>>
Global flow detected: <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String getOSName()>

Adding connections to callgraphs in class: org.fusesource.jansi.internal.OSInfo
org.fusesource.jansi.internal.OSInfo has been visited already.
<10: <org.fusesource.jansi.internal.OSInfo: java.lang.String getOSName()> -> <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>>
Global flow detected: <org.fusesource.jansi.internal.OSInfo: java.lang.String getOSName()> -> <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>

Adding connections to callgraphs in class: java.lang.Integer


------------------------------------
------------------------------------
Now we build call graphs for class: java.lang.Integer
Continue with method: <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>


<11: <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String resolveArmArchType()>>
Global flow detected: <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String resolveArmArchType()>

Adding connections to callgraphs in class: org.fusesource.jansi.internal.OSInfo
org.fusesource.jansi.internal.OSInfo has been visited already.
<12: <org.fusesource.jansi.internal.OSInfo: java.lang.String resolveArmArchType()> -> <java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()>>
Global flow detected: <org.fusesource.jansi.internal.OSInfo: java.lang.String resolveArmArchType()> -> <java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()>

Adding connections to callgraphs in class: java.lang.ProcessHandleImpl


------------------------------------
------------------------------------
Now we build call graphs for class: java.lang.ProcessHandleImpl
Continue with method: <java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()>


<13: <java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()> -> <jdk.xml.internal.SecuritySupport: java.lang.String lambda$getSystemProperty$0(java.lang.String)>>
Global flow detected: <java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()> -> <jdk.xml.internal.SecuritySupport: java.lang.String lambda$getSystemProperty$0(java.lang.String)>

Adding connections to callgraphs in class: jdk.xml.internal.SecuritySupport


------------------------------------
------------------------------------
Now we build call graphs for class: jdk.xml.internal.SecuritySupport
Continue with method: <jdk.xml.internal.SecuritySupport: java.lang.String lambda$getSystemProperty$0(java.lang.String)>


<14: <jdk.xml.internal.SecuritySupport: java.lang.String lambda$getSystemProperty$0(java.lang.String)> -> <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>>
Global flow detected: <jdk.xml.internal.SecuritySupport: java.lang.String lambda$getSystemProperty$0(java.lang.String)> -> <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>

Adding connections to callgraphs in class: java.nio.file.FileSystems$DefaultFileSystemHolder


------------------------------------
------------------------------------
Now we build call graphs for class: java.nio.file.FileSystems$DefaultFileSystemHolder
Continue with method: <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>


<15: <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()> -> <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>>
Global flow detected: <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()> -> <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>

Adding connections to callgraphs in class: sun.net.InetAddressCachePolicy$2


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.InetAddressCachePolicy$2
Continue with method: <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>


<16: <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()> -> <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>>
Global flow detected: <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()> -> <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>

Adding connections to callgraphs in class: sun.net.InetAddressCachePolicy$1


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.InetAddressCachePolicy$1
Continue with method: <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>


<17: <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()> -> <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>>
Global flow detected: <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()> -> <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>

Adding connections to callgraphs in class: jdk.internal.logger.BootstrapLogger$DetectBackend$1


------------------------------------
------------------------------------
Now we build call graphs for class: jdk.internal.logger.BootstrapLogger$DetectBackend$1
Continue with method: <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>


<18: <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()> -> <java.util.prefs.Preferences: java.util.prefs.PreferencesFactory factory1()>>
Global flow detected: <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()> -> <java.util.prefs.Preferences: java.util.prefs.PreferencesFactory factory1()>

Adding connections to callgraphs in class: java.util.prefs.Preferences


------------------------------------
------------------------------------
Now we build call graphs for class: java.util.prefs.Preferences
Continue with method: <java.util.prefs.Preferences: java.util.prefs.PreferencesFactory factory1()>


<19: <java.util.prefs.Preferences: java.util.prefs.PreferencesFactory factory1()> -> <java.util.prefs.Preferences$1: java.lang.String run()>>
Global flow detected: <java.util.prefs.Preferences: java.util.prefs.PreferencesFactory factory1()> -> <java.util.prefs.Preferences$1: java.lang.String run()>

Adding connections to callgraphs in class: java.util.prefs.Preferences$1


------------------------------------
------------------------------------
Now we build call graphs for class: java.util.prefs.Preferences$1
Continue with method: <java.util.prefs.Preferences$1: java.lang.String run()>


<20: <java.util.prefs.Preferences$1: java.lang.String run()> -> <sun.net.www.MimeTable$1: java.lang.Void run()>>
Global flow detected: <java.util.prefs.Preferences$1: java.lang.String run()> -> <sun.net.www.MimeTable$1: java.lang.Void run()>

Adding connections to callgraphs in class: sun.net.www.MimeTable$1
sun.net.www.MimeTable$1 has been visited already.
<21: <sun.net.www.MimeTable$1: java.lang.Void run()> -> <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>>
Global flow detected: <sun.net.www.MimeTable$1: java.lang.Void run()> -> <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>

Adding connections to callgraphs in class: sun.security.util.PropertyExpander


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.util.PropertyExpander
Continue with method: <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>


<22: <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)> -> <java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()>>
Global flow detected: <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)> -> <java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()>

Adding connections to callgraphs in class: java.nio.channels.spi.SelectorProvider$Holder


------------------------------------
------------------------------------
Now we build call graphs for class: java.nio.channels.spi.SelectorProvider$Holder
Continue with method: <java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()>


<23: <java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()> -> <sun.net.www.MimeTable: void load()>>
Global flow detected: <java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()> -> <sun.net.www.MimeTable: void load()>

Adding connections to callgraphs in class: sun.net.www.MimeTable


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.www.MimeTable
Continue with method: <sun.net.www.MimeTable: void load()>


<24: <sun.net.www.MimeTable: void load()> -> <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>>
Global flow detected: <sun.net.www.MimeTable: void load()> -> <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>

Adding connections to callgraphs in class: sun.net.www.MimeEntry


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.www.MimeEntry
Continue with method: <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>


<25: <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)> -> <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>>
Global flow detected: <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)> -> <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>

Adding connections to callgraphs in class: sun.security.jca.ProviderConfig$1


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.jca.ProviderConfig$1
Continue with method: <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>


<26: <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()> -> <sun.security.util.DomainName$Rules$1: java.io.InputStream run()>>
Global flow detected: <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()> -> <sun.security.util.DomainName$Rules$1: java.io.InputStream run()>

Adding connections to callgraphs in class: sun.security.util.DomainName$Rules$1


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.util.DomainName$Rules$1
Continue with method: <sun.security.util.DomainName$Rules$1: java.io.InputStream run()>


<27: <sun.security.util.DomainName$Rules$1: java.io.InputStream run()> -> <sun.security.provider.PolicyFile$1: java.lang.String run()>>
Global flow detected: <sun.security.util.DomainName$Rules$1: java.io.InputStream run()> -> <sun.security.provider.PolicyFile$1: java.lang.String run()>

Adding connections to callgraphs in class: sun.security.provider.PolicyFile$1


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.provider.PolicyFile$1
Continue with method: <sun.security.provider.PolicyFile$1: java.lang.String run()>


<28: <sun.security.provider.PolicyFile$1: java.lang.String run()> -> <sun.security.provider.PolicyFile$4: java.lang.Boolean run()>>
Global flow detected: <sun.security.provider.PolicyFile$1: java.lang.String run()> -> <sun.security.provider.PolicyFile$4: java.lang.Boolean run()>

Adding connections to callgraphs in class: sun.security.provider.PolicyFile$4


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.provider.PolicyFile$4
Continue with method: <sun.security.provider.PolicyFile$4: java.lang.Boolean run()>


<29: <sun.security.provider.PolicyFile$4: java.lang.Boolean run()> -> <java.time.zone.ZoneRulesProvider$1: java.lang.Object run()>>
Global flow detected: <sun.security.provider.PolicyFile$4: java.lang.Boolean run()> -> <java.time.zone.ZoneRulesProvider$1: java.lang.Object run()>

Adding connections to callgraphs in class: java.time.zone.ZoneRulesProvider$1


------------------------------------
------------------------------------
Now we build call graphs for class: java.time.zone.ZoneRulesProvider$1
Continue with method: <java.time.zone.ZoneRulesProvider$1: java.lang.Object run()>


<30: <java.time.zone.ZoneRulesProvider$1: java.lang.Object run()> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>>
Global flow detected: <java.time.zone.ZoneRulesProvider$1: java.lang.Object run()> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>

Adding connections to callgraphs in class: sun.security.action.GetPropertyAction
sun.security.action.GetPropertyAction has been visited already.
<31: <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)> -> <org.fusesource.jansi.internal.JansiLoader: java.io.File getTempDir()>>
The above invocation flows into a source.
<32: <org.fusesource.jansi.internal.JansiLoader: java.io.File getTempDir()> -> <org.fusesource.jansi.internal.JansiLoader: void cleanup()>>
The above invocation flows into a source.
Flows from <java.lang.System: java.lang.String getProperty(java.lang.String)> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String)>" ];
  2 [ label="<sun.security.action.GetPropertyAction: java.lang.String run()>" ];
  3 [ label="<java.lang.Boolean: boolean getBoolean(java.lang.String)>" ];
  4 [ label="<java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)>" ];
  5 [ label="<java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)>" ];
  6 [ label="<javax.xml.stream.FactoryFinder: java.lang.Object find(java.lang.Class,java.lang.String,java.lang.ClassLoader,java.lang.String)>" ];
  7 [ label="<sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>" ];
  8 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String getArchName()>" ];
  9 [ label="<org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>" ];
  10 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String getOSName()>" ];
  11 [ label="<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>" ];
  12 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String resolveArmArchType()>" ];
  13 [ label="<java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()>" ];
  14 [ label="<jdk.xml.internal.SecuritySupport: java.lang.String lambda$getSystemProperty$0(java.lang.String)>" ];
  15 [ label="<java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>" ];
  16 [ label="<sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>" ];
  17 [ label="<sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>" ];
  18 [ label="<jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>" ];
  19 [ label="<java.util.prefs.Preferences: java.util.prefs.PreferencesFactory factory1()>" ];
  20 [ label="<java.util.prefs.Preferences$1: java.lang.String run()>" ];
  21 [ label="<sun.net.www.MimeTable$1: java.lang.Void run()>" ];
  22 [ label="<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>" ];
  23 [ label="<java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()>" ];
  24 [ label="<sun.net.www.MimeTable: void load()>" ];
  25 [ label="<sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>" ];
  26 [ label="<sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>" ];
  27 [ label="<sun.security.util.DomainName$Rules$1: java.io.InputStream run()>" ];
  28 [ label="<sun.security.provider.PolicyFile$1: java.lang.String run()>" ];
  29 [ label="<sun.security.provider.PolicyFile$4: java.lang.Boolean run()>" ];
  30 [ label="<java.time.zone.ZoneRulesProvider$1: java.lang.Object run()>" ];
  31 [ label="<sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>" ];
  32 [ label="<org.fusesource.jansi.internal.JansiLoader: java.io.File getTempDir()>" ];
  33 [ label="<org.fusesource.jansi.internal.JansiLoader: void cleanup()>" ];
  34 [ label="<java.security.AccessController: java.lang.Object executePrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.lang.Class)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  30 -> 34;
}

Source found in the callgraph: <java.io.InputStream: int read(byte[])>...
In class: org.fusesource.jansi.internal.JansiLoader
Start traversal: 

Starting from method: <java.io.InputStream: int read(byte[])>
<1: <java.io.InputStream: int read(byte[])> -> <sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)>>
Global flow detected: <java.io.InputStream: int read(byte[])> -> <sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)>

Adding connections to callgraphs in class: sun.security.util.DerValue


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.util.DerValue
Continue with method: <sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)>


<2: <sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)> -> <sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()>>
Global flow detected: <sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)> -> <sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()>

Adding connections to callgraphs in class: sun.security.util.DerInputStream


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.util.DerInputStream
Continue with method: <sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()>


<3: <sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()> -> <sun.security.util.DerInputStream: byte[] getOctetString()>>
<4: <sun.security.util.DerInputStream: byte[] getOctetString()> -> <sun.security.util.DerValue: byte[] getOctetString()>>
Global flow detected: <sun.security.util.DerInputStream: byte[] getOctetString()> -> <sun.security.util.DerValue: byte[] getOctetString()>

Adding connections to callgraphs in class: sun.security.util.DerValue
sun.security.util.DerValue has been visited already.
<5: <sun.security.util.DerValue: byte[] getOctetString()> -> <sun.security.util.DerInputStream: void getBytes(byte[])>>
Global flow detected: <sun.security.util.DerValue: byte[] getOctetString()> -> <sun.security.util.DerInputStream: void getBytes(byte[])>

Adding connections to callgraphs in class: sun.security.util.DerInputStream
sun.security.util.DerInputStream has been visited already.
<6: <sun.security.util.DerInputStream: void getBytes(byte[])> -> <sun.nio.ch.ChannelInputStream: int read()>>
Global flow detected: <sun.security.util.DerInputStream: void getBytes(byte[])> -> <sun.nio.ch.ChannelInputStream: int read()>

Adding connections to callgraphs in class: sun.nio.ch.ChannelInputStream


------------------------------------
------------------------------------
Now we build call graphs for class: sun.nio.ch.ChannelInputStream
Continue with method: <sun.nio.ch.ChannelInputStream: int read()>


<7: <sun.nio.ch.ChannelInputStream: int read()> -> <java.util.Properties$LineReader: int readLine()>>
Global flow detected: <sun.nio.ch.ChannelInputStream: int read()> -> <java.util.Properties$LineReader: int readLine()>

Adding connections to callgraphs in class: java.util.Properties$LineReader


------------------------------------
------------------------------------
Now we build call graphs for class: java.util.Properties$LineReader
Continue with method: <java.util.Properties$LineReader: int readLine()>


<8: <java.util.Properties$LineReader: int readLine()> -> <sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)>>
Global flow detected: <java.util.Properties$LineReader: int readLine()> -> <sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)>

Adding connections to callgraphs in class: sun.security.provider.certpath.X509CertPath


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.provider.certpath.X509CertPath
Continue with method: <sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)>


<9: <sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)> -> <org.fusesource.jansi.internal.JansiLoader: void copy(java.io.InputStream,java.io.OutputStream)>>
The above invocation flows into a source.
<10: <org.fusesource.jansi.internal.JansiLoader: void copy(java.io.InputStream,java.io.OutputStream)> -> <org.fusesource.jansi.internal.JansiLoader: boolean extractAndLoadLibraryFile(java.lang.String,java.lang.String,java.lang.String)>>
<11: <org.fusesource.jansi.internal.JansiLoader: boolean extractAndLoadLibraryFile(java.lang.String,java.lang.String,java.lang.String)> -> <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>>
The above invocation flows into a source.
Flows from <java.io.InputStream: int read(byte[])> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.io.InputStream: int read(byte[])>" ];
  2 [ label="<sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)>" ];
  3 [ label="<sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()>" ];
  4 [ label="<sun.security.util.DerInputStream: byte[] getOctetString()>" ];
  5 [ label="<sun.security.util.DerValue: byte[] getOctetString()>" ];
  6 [ label="<sun.security.util.DerInputStream: void getBytes(byte[])>" ];
  7 [ label="<sun.nio.ch.ChannelInputStream: int read()>" ];
  8 [ label="<java.util.Properties$LineReader: int readLine()>" ];
  9 [ label="<sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)>" ];
  10 [ label="<org.fusesource.jansi.internal.JansiLoader: void copy(java.io.InputStream,java.io.OutputStream)>" ];
  11 [ label="<org.fusesource.jansi.internal.JansiLoader: boolean extractAndLoadLibraryFile(java.lang.String,java.lang.String,java.lang.String)>" ];
  12 [ label="<org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>" ];
  13 [ label="<sun.security.provider.certpath.X509CertPath: java.util.List parsePKCS7(java.io.InputStream)>" ];
  14 [ label="<sun.security.provider.certpath.X509CertPath: java.util.List parsePKIPATH(java.io.InputStream)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  9 -> 13;
  13 -> 14;
}

Source found in the callgraph: <java.io.File: java.lang.String getName()>...
In class: org.fusesource.jansi.internal.JansiLoader
Start traversal: 

Starting from method: <java.io.File: java.lang.String getName()>
<1: <java.io.File: java.lang.String getName()> -> <java.lang.ProcessImpl: boolean isExe(java.lang.String)>>
Global flow detected: <java.io.File: java.lang.String getName()> -> <java.lang.ProcessImpl: boolean isExe(java.lang.String)>

Adding connections to callgraphs in class: java.lang.ProcessImpl


------------------------------------
------------------------------------
Now we build call graphs for class: java.lang.ProcessImpl
Continue with method: <java.lang.ProcessImpl: boolean isExe(java.lang.String)>


<2: <java.lang.ProcessImpl: boolean isExe(java.lang.String)> -> <jdk.internal.loader.NativeLibraries: jdk.internal.loader.NativeLibrary loadLibrary(java.lang.Class,java.io.File)>>
Global flow detected: <java.lang.ProcessImpl: boolean isExe(java.lang.String)> -> <jdk.internal.loader.NativeLibraries: jdk.internal.loader.NativeLibrary loadLibrary(java.lang.Class,java.io.File)>

Adding connections to callgraphs in class: jdk.internal.loader.NativeLibraries


------------------------------------
------------------------------------
Now we build call graphs for class: jdk.internal.loader.NativeLibraries
Continue with method: <jdk.internal.loader.NativeLibraries: jdk.internal.loader.NativeLibrary loadLibrary(java.lang.Class,java.io.File)>


<3: <jdk.internal.loader.NativeLibraries: jdk.internal.loader.NativeLibrary loadLibrary(java.lang.Class,java.io.File)> -> <org.fusesource.jansi.internal.JansiLoader: boolean loadNativeLibrary(java.io.File)>>
The above invocation flows into a source.
<4: <org.fusesource.jansi.internal.JansiLoader: boolean loadNativeLibrary(java.io.File)> -> <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>>
The above invocation flows into a source.
<5: <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()> -> <org.fusesource.jansi.internal.JansiLoader: boolean extractAndLoadLibraryFile(java.lang.String,java.lang.String,java.lang.String)>>
Flows from <java.io.File: java.lang.String getName()> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getName()>" ];
  2 [ label="<java.lang.ProcessImpl: boolean isExe(java.lang.String)>" ];
  3 [ label="<jdk.internal.loader.NativeLibraries: jdk.internal.loader.NativeLibrary loadLibrary(java.lang.Class,java.io.File)>" ];
  4 [ label="<org.fusesource.jansi.internal.JansiLoader: boolean loadNativeLibrary(java.io.File)>" ];
  5 [ label="<org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>" ];
  6 [ label="<org.fusesource.jansi.internal.JansiLoader: boolean extractAndLoadLibraryFile(java.lang.String,java.lang.String,java.lang.String)>" ];
  7 [ label="<java.lang.ClassLoader: jdk.internal.loader.NativeLibrary loadLibrary(java.lang.Class,java.io.File)>" ];
  8 [ label="<java.lang.ClassLoader: jdk.internal.loader.NativeLibrary loadLibrary(java.lang.Class,java.lang.String)>" ];
  9 [ label="<jdk.internal.loader.NativeLibraries: jdk.internal.loader.NativeLibrary findFromPaths(java.lang.String[],java.lang.Class,java.lang.String)>" ];
  10 [ label="<jdk.internal.loader.NativeLibraries: jdk.internal.loader.NativeLibrary loadLibrary(java.lang.Class,java.lang.String)>" ];
  11 [ label="<jdk.internal.loader.NativeLibraries: jdk.internal.loader.NativeLibrary loadLibrary(java.lang.String)>" ];
  12 [ label="<jdk.internal.loader.BootLoader: void loadLibrary(java.lang.String)>" ];
  13 [ label="<jdk.internal.loader.BootLoader$1: java.lang.Void run()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  3 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
}

Source found in the callgraph: <java.io.InputStream: int read(byte[],int,int)>...
In class: org.fusesource.jansi.internal.OSInfo
Start traversal: 

Starting from method: <java.io.InputStream: int read(byte[],int,int)>
<1: <java.io.InputStream: int read(byte[],int,int)> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String readFully(java.io.InputStream)>>
The above invocation flows into a source.
<2: <org.fusesource.jansi.internal.OSInfo: java.lang.String readFully(java.io.InputStream)> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String getHardwareName()>>
<3: <org.fusesource.jansi.internal.OSInfo: java.lang.String getHardwareName()> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String resolveArmArchType()>>
The above invocation flows into a source.
<4: <org.fusesource.jansi.internal.OSInfo: java.lang.String resolveArmArchType()> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String getArchName()>>
The above invocation flows into a source.
<5: <org.fusesource.jansi.internal.OSInfo: java.lang.String getArchName()> -> <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>>
The above invocation flows into a source.
<6: <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String getNativeLibFolderPathForCurrentOS()>>
Global flow detected: <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String getNativeLibFolderPathForCurrentOS()>

Adding connections to callgraphs in class: org.fusesource.jansi.internal.OSInfo
org.fusesource.jansi.internal.OSInfo has been visited already.
<7: <org.fusesource.jansi.internal.OSInfo: java.lang.String getNativeLibFolderPathForCurrentOS()> -> <org.fusesource.jansi.internal.JansiLoader: boolean loadNativeLibrary(java.io.File)>>
The above invocation flows into a source.
Flows from <java.io.InputStream: int read(byte[],int,int)> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.io.InputStream: int read(byte[],int,int)>" ];
  2 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String readFully(java.io.InputStream)>" ];
  3 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String getHardwareName()>" ];
  4 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String resolveArmArchType()>" ];
  5 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String getArchName()>" ];
  6 [ label="<org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>" ];
  7 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String getNativeLibFolderPathForCurrentOS()>" ];
  8 [ label="<org.fusesource.jansi.internal.JansiLoader: boolean loadNativeLibrary(java.io.File)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
}

Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
In class: org.fusesource.jansi.internal.OSInfo
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> -> <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>>
The above invocation flows into a source.
<2: <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()> -> <org.fusesource.jansi.internal.JansiLoader: java.io.File getTempDir()>>
The above invocation flows into a source.
<3: <org.fusesource.jansi.internal.JansiLoader: java.io.File getTempDir()> -> <sun.net.NetProperties: java.lang.String get(java.lang.String)>>
Global flow detected: <org.fusesource.jansi.internal.JansiLoader: java.io.File getTempDir()> -> <sun.net.NetProperties: java.lang.String get(java.lang.String)>

Adding connections to callgraphs in class: sun.net.NetProperties
sun.net.NetProperties has been visited already.
<4: <sun.net.NetProperties: java.lang.String get(java.lang.String)> -> <sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>>
<5: <sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)> -> <sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>>
<6: <sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)> -> <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()>>
Global flow detected: <sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)> -> <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()>

Adding connections to callgraphs in class: jdk.internal.jimage.BasicImageReader$1
jdk.internal.jimage.BasicImageReader$1 has been visited already.
<7: <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()> -> <sun.net.www.MimeTable$1: java.lang.Void run()>>
Global flow detected: <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()> -> <sun.net.www.MimeTable$1: java.lang.Void run()>

Adding connections to callgraphs in class: sun.net.www.MimeTable$1
sun.net.www.MimeTable$1 has been visited already.
<8: <sun.net.www.MimeTable$1: java.lang.Void run()> -> <sun.security.provider.SunEntries$1: java.lang.String run()>>
Global flow detected: <sun.net.www.MimeTable$1: java.lang.Void run()> -> <sun.security.provider.SunEntries$1: java.lang.String run()>

Adding connections to callgraphs in class: sun.security.provider.SunEntries$1
sun.security.provider.SunEntries$1 has been visited already.
<9: <sun.security.provider.SunEntries$1: java.lang.String run()> -> <sun.net.NetworkClient$1: java.lang.Void run()>>
Global flow detected: <sun.security.provider.SunEntries$1: java.lang.String run()> -> <sun.net.NetworkClient$1: java.lang.Void run()>

Adding connections to callgraphs in class: sun.net.NetworkClient$1
sun.net.NetworkClient$1 has been visited already.
<10: <sun.net.NetworkClient$1: java.lang.Void run()> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)>>
Global flow detected: <sun.net.NetworkClient$1: java.lang.Void run()> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)>

Adding connections to callgraphs in class: sun.security.action.GetPropertyAction
sun.security.action.GetPropertyAction has been visited already.
<11: <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)> -> <org.fusesource.jansi.internal.OSInfo: boolean isAndroid()>>
The above invocation flows into a source.
<12: <org.fusesource.jansi.internal.OSInfo: boolean isAndroid()> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String getArchName()>>
The above invocation flows into a source.
<13: <org.fusesource.jansi.internal.OSInfo: java.lang.String getArchName()> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String getNativeLibFolderPathForCurrentOS()>>
<14: <org.fusesource.jansi.internal.OSInfo: java.lang.String getNativeLibFolderPathForCurrentOS()> -> <org.fusesource.jansi.internal.JansiLoader: boolean loadNativeLibrary(java.io.File)>>
The above invocation flows into a source.
Flows from <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>" ];
  2 [ label="<org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>" ];
  3 [ label="<org.fusesource.jansi.internal.JansiLoader: java.io.File getTempDir()>" ];
  4 [ label="<sun.net.NetProperties: java.lang.String get(java.lang.String)>" ];
  5 [ label="<sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>" ];
  6 [ label="<sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>" ];
  7 [ label="<jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()>" ];
  8 [ label="<sun.net.www.MimeTable$1: java.lang.Void run()>" ];
  9 [ label="<sun.security.provider.SunEntries$1: java.lang.String run()>" ];
  10 [ label="<sun.net.NetworkClient$1: java.lang.Void run()>" ];
  11 [ label="<sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)>" ];
  12 [ label="<org.fusesource.jansi.internal.OSInfo: boolean isAndroid()>" ];
  13 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String getArchName()>" ];
  14 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String getNativeLibFolderPathForCurrentOS()>" ];
  15 [ label="<org.fusesource.jansi.internal.JansiLoader: boolean loadNativeLibrary(java.io.File)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
}

Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
In class: org.fusesource.jansi.internal.OSInfo
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <sun.security.action.GetPropertyAction: java.lang.String run()>>
Global flow detected: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <sun.security.action.GetPropertyAction: java.lang.String run()>

Adding connections to callgraphs in class: sun.security.action.GetPropertyAction
sun.security.action.GetPropertyAction has been visited already.
<2: <sun.security.action.GetPropertyAction: java.lang.String run()> -> <java.lang.Boolean: boolean getBoolean(java.lang.String)>>
Global flow detected: <sun.security.action.GetPropertyAction: java.lang.String run()> -> <java.lang.Boolean: boolean getBoolean(java.lang.String)>

Adding connections to callgraphs in class: java.lang.Boolean
java.lang.Boolean has been visited already.
<3: <java.lang.Boolean: boolean getBoolean(java.lang.String)> -> <java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)>>
Global flow detected: <java.lang.Boolean: boolean getBoolean(java.lang.String)> -> <java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)>

Adding connections to callgraphs in class: java.util.concurrent.ForkJoinPool
java.util.concurrent.ForkJoinPool has been visited already.
<4: <java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)> -> <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)>>
Global flow detected: <java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)> -> <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)>

Adding connections to callgraphs in class: java.io.FileSystem
java.io.FileSystem has been visited already.
<5: <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)> -> <javax.xml.stream.FactoryFinder: java.lang.Object find(java.lang.Class,java.lang.String,java.lang.ClassLoader,java.lang.String)>>
Global flow detected: <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)> -> <javax.xml.stream.FactoryFinder: java.lang.Object find(java.lang.Class,java.lang.String,java.lang.ClassLoader,java.lang.String)>

Adding connections to callgraphs in class: javax.xml.stream.FactoryFinder
javax.xml.stream.FactoryFinder has been visited already.
<6: <javax.xml.stream.FactoryFinder: java.lang.Object find(java.lang.Class,java.lang.String,java.lang.ClassLoader,java.lang.String)> -> <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>>
The above invocation flows into a source.
<7: <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()> -> <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>>
Global flow detected: <org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()> -> <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>

Adding connections to callgraphs in class: sun.security.util.SecurityProperties
sun.security.util.SecurityProperties has been visited already.
<8: <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)> -> <org.fusesource.jansi.internal.JansiLoader: java.io.File getTempDir()>>
The above invocation flows into a source.
<9: <org.fusesource.jansi.internal.JansiLoader: java.io.File getTempDir()> -> <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>>
Global flow detected: <org.fusesource.jansi.internal.JansiLoader: java.io.File getTempDir()> -> <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>

Adding connections to callgraphs in class: java.lang.Integer
java.lang.Integer has been visited already.
<10: <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> -> <java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()>>
Global flow detected: <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> -> <java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()>

Adding connections to callgraphs in class: java.lang.ProcessHandleImpl
java.lang.ProcessHandleImpl has been visited already.
<11: <java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()> -> <jdk.xml.internal.SecuritySupport: java.lang.String lambda$getSystemProperty$0(java.lang.String)>>
Global flow detected: <java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()> -> <jdk.xml.internal.SecuritySupport: java.lang.String lambda$getSystemProperty$0(java.lang.String)>

Adding connections to callgraphs in class: jdk.xml.internal.SecuritySupport
jdk.xml.internal.SecuritySupport has been visited already.
<12: <jdk.xml.internal.SecuritySupport: java.lang.String lambda$getSystemProperty$0(java.lang.String)> -> <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>>
Global flow detected: <jdk.xml.internal.SecuritySupport: java.lang.String lambda$getSystemProperty$0(java.lang.String)> -> <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>

Adding connections to callgraphs in class: java.nio.file.FileSystems$DefaultFileSystemHolder
java.nio.file.FileSystems$DefaultFileSystemHolder has been visited already.
<13: <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()> -> <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>>
Global flow detected: <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()> -> <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>

Adding connections to callgraphs in class: sun.net.InetAddressCachePolicy$2
sun.net.InetAddressCachePolicy$2 has been visited already.
<14: <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()> -> <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>>
Global flow detected: <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()> -> <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>

Adding connections to callgraphs in class: sun.net.InetAddressCachePolicy$1
sun.net.InetAddressCachePolicy$1 has been visited already.
<15: <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()> -> <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>>
Global flow detected: <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()> -> <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>

Adding connections to callgraphs in class: jdk.internal.logger.BootstrapLogger$DetectBackend$1
jdk.internal.logger.BootstrapLogger$DetectBackend$1 has been visited already.
<16: <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()> -> <java.util.prefs.Preferences: java.util.prefs.PreferencesFactory factory1()>>
Global flow detected: <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()> -> <java.util.prefs.Preferences: java.util.prefs.PreferencesFactory factory1()>

Adding connections to callgraphs in class: java.util.prefs.Preferences
java.util.prefs.Preferences has been visited already.
<17: <java.util.prefs.Preferences: java.util.prefs.PreferencesFactory factory1()> -> <java.util.prefs.Preferences$1: java.lang.String run()>>
Global flow detected: <java.util.prefs.Preferences: java.util.prefs.PreferencesFactory factory1()> -> <java.util.prefs.Preferences$1: java.lang.String run()>

Adding connections to callgraphs in class: java.util.prefs.Preferences$1
java.util.prefs.Preferences$1 has been visited already.
<18: <java.util.prefs.Preferences$1: java.lang.String run()> -> <sun.net.www.MimeTable$1: java.lang.Void run()>>
Global flow detected: <java.util.prefs.Preferences$1: java.lang.String run()> -> <sun.net.www.MimeTable$1: java.lang.Void run()>

Adding connections to callgraphs in class: sun.net.www.MimeTable$1
sun.net.www.MimeTable$1 has been visited already.
<19: <sun.net.www.MimeTable$1: java.lang.Void run()> -> <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>>
Global flow detected: <sun.net.www.MimeTable$1: java.lang.Void run()> -> <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>

Adding connections to callgraphs in class: sun.security.util.PropertyExpander
sun.security.util.PropertyExpander has been visited already.
<20: <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)> -> <java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()>>
Global flow detected: <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)> -> <java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()>

Adding connections to callgraphs in class: java.nio.channels.spi.SelectorProvider$Holder
java.nio.channels.spi.SelectorProvider$Holder has been visited already.
<21: <java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()> -> <sun.net.www.MimeTable: void load()>>
Global flow detected: <java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()> -> <sun.net.www.MimeTable: void load()>

Adding connections to callgraphs in class: sun.net.www.MimeTable
sun.net.www.MimeTable has been visited already.
<22: <sun.net.www.MimeTable: void load()> -> <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>>
Global flow detected: <sun.net.www.MimeTable: void load()> -> <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>

Adding connections to callgraphs in class: sun.net.www.MimeEntry
sun.net.www.MimeEntry has been visited already.
<23: <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)> -> <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>>
Global flow detected: <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)> -> <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>

Adding connections to callgraphs in class: sun.security.jca.ProviderConfig$1
sun.security.jca.ProviderConfig$1 has been visited already.
<24: <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()> -> <sun.security.util.DomainName$Rules$1: java.io.InputStream run()>>
Global flow detected: <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()> -> <sun.security.util.DomainName$Rules$1: java.io.InputStream run()>

Adding connections to callgraphs in class: sun.security.util.DomainName$Rules$1
sun.security.util.DomainName$Rules$1 has been visited already.
<25: <sun.security.util.DomainName$Rules$1: java.io.InputStream run()> -> <sun.security.provider.PolicyFile$1: java.lang.String run()>>
Global flow detected: <sun.security.util.DomainName$Rules$1: java.io.InputStream run()> -> <sun.security.provider.PolicyFile$1: java.lang.String run()>

Adding connections to callgraphs in class: sun.security.provider.PolicyFile$1
sun.security.provider.PolicyFile$1 has been visited already.
<26: <sun.security.provider.PolicyFile$1: java.lang.String run()> -> <sun.security.provider.PolicyFile$4: java.lang.Boolean run()>>
Global flow detected: <sun.security.provider.PolicyFile$1: java.lang.String run()> -> <sun.security.provider.PolicyFile$4: java.lang.Boolean run()>

Adding connections to callgraphs in class: sun.security.provider.PolicyFile$4
sun.security.provider.PolicyFile$4 has been visited already.
<27: <sun.security.provider.PolicyFile$4: java.lang.Boolean run()> -> <java.time.zone.ZoneRulesProvider$1: java.lang.Object run()>>
Global flow detected: <sun.security.provider.PolicyFile$4: java.lang.Boolean run()> -> <java.time.zone.ZoneRulesProvider$1: java.lang.Object run()>

Adding connections to callgraphs in class: java.time.zone.ZoneRulesProvider$1
java.time.zone.ZoneRulesProvider$1 has been visited already.
<28: <java.time.zone.ZoneRulesProvider$1: java.lang.Object run()> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>>
Global flow detected: <java.time.zone.ZoneRulesProvider$1: java.lang.Object run()> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>

Adding connections to callgraphs in class: sun.security.action.GetPropertyAction
sun.security.action.GetPropertyAction has been visited already.
<29: <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String getArchName()>>
The above invocation flows into a source.
<30: <org.fusesource.jansi.internal.OSInfo: java.lang.String getArchName()> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String getNativeLibFolderPathForCurrentOS()>>
<31: <org.fusesource.jansi.internal.OSInfo: java.lang.String getNativeLibFolderPathForCurrentOS()> -> <org.fusesource.jansi.internal.JansiLoader: boolean loadNativeLibrary(java.io.File)>>
The above invocation flows into a source.
<32: <org.fusesource.jansi.internal.JansiLoader: boolean loadNativeLibrary(java.io.File)> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String resolveArmArchType()>>
The above invocation flows into a source.
<33: <org.fusesource.jansi.internal.OSInfo: java.lang.String resolveArmArchType()> -> <org.fusesource.jansi.internal.OSInfo: java.lang.String getOSName()>>
The above invocation flows into a source.
Flows from <java.lang.System: java.lang.String getProperty(java.lang.String)> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String)>" ];
  2 [ label="<sun.security.action.GetPropertyAction: java.lang.String run()>" ];
  3 [ label="<java.lang.Boolean: boolean getBoolean(java.lang.String)>" ];
  4 [ label="<java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)>" ];
  5 [ label="<java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)>" ];
  6 [ label="<javax.xml.stream.FactoryFinder: java.lang.Object find(java.lang.Class,java.lang.String,java.lang.ClassLoader,java.lang.String)>" ];
  7 [ label="<org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>" ];
  8 [ label="<sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>" ];
  9 [ label="<org.fusesource.jansi.internal.JansiLoader: java.io.File getTempDir()>" ];
  10 [ label="<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>" ];
  11 [ label="<java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()>" ];
  12 [ label="<jdk.xml.internal.SecuritySupport: java.lang.String lambda$getSystemProperty$0(java.lang.String)>" ];
  13 [ label="<java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>" ];
  14 [ label="<sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>" ];
  15 [ label="<sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>" ];
  16 [ label="<jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>" ];
  17 [ label="<java.util.prefs.Preferences: java.util.prefs.PreferencesFactory factory1()>" ];
  18 [ label="<java.util.prefs.Preferences$1: java.lang.String run()>" ];
  19 [ label="<sun.net.www.MimeTable$1: java.lang.Void run()>" ];
  20 [ label="<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>" ];
  21 [ label="<java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()>" ];
  22 [ label="<sun.net.www.MimeTable: void load()>" ];
  23 [ label="<sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>" ];
  24 [ label="<sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>" ];
  25 [ label="<sun.security.util.DomainName$Rules$1: java.io.InputStream run()>" ];
  26 [ label="<sun.security.provider.PolicyFile$1: java.lang.String run()>" ];
  27 [ label="<sun.security.provider.PolicyFile$4: java.lang.Boolean run()>" ];
  28 [ label="<java.time.zone.ZoneRulesProvider$1: java.lang.Object run()>" ];
  29 [ label="<sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>" ];
  30 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String getArchName()>" ];
  31 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String getNativeLibFolderPathForCurrentOS()>" ];
  32 [ label="<org.fusesource.jansi.internal.JansiLoader: boolean loadNativeLibrary(java.io.File)>" ];
  33 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String resolveArmArchType()>" ];
  34 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String getOSName()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
}

Loaded 579 methods from JAR files. 

Found 10 Source Methods.
Found 14 Sink Methods.
Found 19 Methods Invoking a Basic Source.
Sources and Sinks collected. 

Methods extraction finished.
All finished.
