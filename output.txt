***** Loading java classes ***** 

Start reading BOM and BIM...
Basic source methods are loaded with 169 methods.
Basic sink methods are loaded with 350 methods.
External source methods are loaded with 257 methods.
External sink methods are loaded with 365 methods.
Start looking for sources and sinks: 
[spark] Starting analysis ...
[main] ERROR soot.jimple.toolkits.typing.fast.TypePromotionUseVisitor - Failed Typing in <java.awt.image.ComponentColorModel: int getRGBComponent(int,int)> at statement opixel#1 = $r0: Is not cast compatible: null_type <-- java.lang.Object
[main] ERROR soot.jimple.toolkits.typing.fast.TypePromotionUseVisitor - Failed Typing in <com.sun.imageio.plugins.tiff.TIFFIFD: int readFieldValue(javax.imageio.stream.ImageInputStream,int,int,java.lang.Object[])> at statement obj#10 = $r0: Is not cast compatible: null_type <-- java.lang.Object
[spark] Done! 


Start inspections for class: jcifs.netbios.Lmhosts
Source found in the callgraph: <java.io.BufferedReader: java.lang.String readLine()>...
Start traversal: 

Starting from method: <java.io.BufferedReader: java.lang.String readLine()>
<1: <java.io.BufferedReader: java.lang.String readLine()> -> <jcifs.netbios.Lmhosts: void populate(java.io.Reader)>>
Global flow detected: <java.io.BufferedReader: java.lang.String readLine()> -> <jcifs.netbios.Lmhosts: void populate(java.io.Reader)>

Adding connections to callgraphs in class: jcifs.netbios.Lmhosts


***************************
Now we build call graphs for class: jcifs.netbios.Lmhosts
Continue with method: <jcifs.netbios.Lmhosts: void populate(java.io.Reader)>


strict digraph G {
  1 [ label="<jcifs.netbios.Lmhosts: void populate(java.io.Reader)>" ];
  2 [ label="<jcifs.netbios.Lmhosts: jcifs.netbios.NbtAddress getByName(jcifs.netbios.Name)>" ];
  3 [ label="<jcifs.netbios.NameServiceClient: jcifs.netbios.NbtAddress getByName(jcifs.netbios.Name,java.net.InetAddress)>" ];
  4 [ label="<jcifs.netbios.Lmhosts: jcifs.netbios.NbtAddress getByName(java.lang.String)>" ];
  5 [ label="<jcifs.UniAddress: jcifs.UniAddress[] getAllByName(java.lang.String,boolean)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
}

<2: <jcifs.netbios.Lmhosts: void populate(java.io.Reader)> -> <jcifs.netbios.Lmhosts: jcifs.netbios.NbtAddress getByName(jcifs.netbios.Name)>>
<3: <jcifs.netbios.Lmhosts: jcifs.netbios.NbtAddress getByName(jcifs.netbios.Name)> -> <jcifs.netbios.NameServiceClient: jcifs.netbios.NbtAddress getByName(jcifs.netbios.Name,java.net.InetAddress)>>
Global flow detected: <jcifs.netbios.Lmhosts: jcifs.netbios.NbtAddress getByName(jcifs.netbios.Name)> -> <jcifs.netbios.NameServiceClient: jcifs.netbios.NbtAddress getByName(jcifs.netbios.Name,java.net.InetAddress)>

Adding connections to callgraphs in class: jcifs.netbios.NameServiceClient


***************************
Now we build call graphs for class: jcifs.netbios.NameServiceClient
Continue with method: <jcifs.netbios.NameServiceClient: jcifs.netbios.NbtAddress getByName(jcifs.netbios.Name,java.net.InetAddress)>


strict digraph G {
  1 [ label="<jcifs.netbios.NameServiceClient: jcifs.netbios.NbtAddress getByName(jcifs.netbios.Name,java.net.InetAddress)>" ];
  2 [ label="<jcifs.netbios.NbtAddress: jcifs.netbios.NbtAddress doNameQuery(jcifs.netbios.Name,java.net.InetAddress)>" ];
  1 -> 2;
}

<4: <jcifs.netbios.NameServiceClient: jcifs.netbios.NbtAddress getByName(jcifs.netbios.Name,java.net.InetAddress)> -> <jcifs.netbios.Lmhosts: jcifs.netbios.NbtAddress getByName(java.lang.String)>>
Global flow detected: <jcifs.netbios.NameServiceClient: jcifs.netbios.NbtAddress getByName(jcifs.netbios.Name,java.net.InetAddress)> -> <jcifs.netbios.Lmhosts: jcifs.netbios.NbtAddress getByName(java.lang.String)>

Adding connections to callgraphs in class: jcifs.netbios.Lmhosts
jcifs.netbios.Lmhosts has been visited already.
<5: <jcifs.netbios.Lmhosts: jcifs.netbios.NbtAddress getByName(java.lang.String)> -> <jcifs.UniAddress: jcifs.UniAddress[] getAllByName(java.lang.String,boolean)>>
Global flow detected: <jcifs.netbios.Lmhosts: jcifs.netbios.NbtAddress getByName(java.lang.String)> -> <jcifs.UniAddress: jcifs.UniAddress[] getAllByName(java.lang.String,boolean)>

Adding connections to callgraphs in class: jcifs.UniAddress


***************************
Now we build call graphs for class: jcifs.UniAddress
Continue with method: <jcifs.UniAddress: jcifs.UniAddress[] getAllByName(java.lang.String,boolean)>


strict digraph G {
  1 [ label="<jcifs.UniAddress: jcifs.UniAddress[] getAllByName(java.lang.String,boolean)>" ];
  2 [ label="<jcifs.smb.SmbFile: jcifs.UniAddress getFirstAddress()>" ];
  3 [ label="<jcifs.UniAddress: jcifs.UniAddress getByName(java.lang.String,boolean)>" ];
  4 [ label="<jcifs.smb.Dfs: java.util.HashMap getTrustedDomains(jcifs.smb.NtlmPasswordAuthentication)>" ];
  5 [ label="<jcifs.smb.Dfs: jcifs.smb.SmbTransport getDc(java.lang.String,jcifs.smb.NtlmPasswordAuthentication)>" ];
  6 [ label="<jcifs.smb.SmbFile: boolean exists()>" ];
  7 [ label="<jcifs.UniAddress: jcifs.UniAddress getByName(java.lang.String)>" ];
  8 [ label="<jcifs.smb.SmbFile: void resolveDfs(jcifs.smb.ServerMessageBlock)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
}

Flows from <java.io.BufferedReader: java.lang.String readLine()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.io.BufferedReader: java.lang.String readLine()>" ];
  2 [ label="<jcifs.netbios.Lmhosts: void populate(java.io.Reader)>" ];
  3 [ label="<jcifs.netbios.Lmhosts: jcifs.netbios.NbtAddress getByName(jcifs.netbios.Name)>" ];
  4 [ label="<jcifs.netbios.NameServiceClient: jcifs.netbios.NbtAddress getByName(jcifs.netbios.Name,java.net.InetAddress)>" ];
  5 [ label="<jcifs.netbios.Lmhosts: jcifs.netbios.NbtAddress getByName(java.lang.String)>" ];
  6 [ label="<jcifs.UniAddress: jcifs.UniAddress[] getAllByName(java.lang.String,boolean)>" ];
  7 [ label="<jcifs.smb.SmbFile: jcifs.UniAddress getFirstAddress()>" ];
  8 [ label="<jcifs.UniAddress: jcifs.UniAddress getByName(java.lang.String,boolean)>" ];
  9 [ label="<jcifs.smb.Dfs: java.util.HashMap getTrustedDomains(jcifs.smb.NtlmPasswordAuthentication)>" ];
  10 [ label="<jcifs.smb.Dfs: jcifs.smb.SmbTransport getDc(java.lang.String,jcifs.smb.NtlmPasswordAuthentication)>" ];
  11 [ label="<jcifs.smb.SmbFile: boolean exists()>" ];
  12 [ label="<jcifs.UniAddress: jcifs.UniAddress getByName(java.lang.String)>" ];
  13 [ label="<jcifs.smb.SmbFile: void resolveDfs(jcifs.smb.ServerMessageBlock)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
}

Start inspections for class: org.snmp4j.transport.TLSTM$DefaultSSLEngineConfiguration
Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <org.snmp4j.transport.TLSTM$DefaultSSLEngineConfiguration: void configure(javax.net.ssl.SSLEngine)>>
Global flow detected: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <org.snmp4j.transport.TLSTM$DefaultSSLEngineConfiguration: void configure(javax.net.ssl.SSLEngine)>

Adding connections to callgraphs in class: org.snmp4j.transport.TLSTM$DefaultSSLEngineConfiguration


***************************
Now we build call graphs for class: org.snmp4j.transport.TLSTM$DefaultSSLEngineConfiguration
Continue with method: <org.snmp4j.transport.TLSTM$DefaultSSLEngineConfiguration: void configure(javax.net.ssl.SSLEngine)>


strict digraph G {
}

Flows from <java.lang.System: java.lang.String getProperty(java.lang.String)> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String)>" ];
  2 [ label="<org.snmp4j.transport.TLSTM$DefaultSSLEngineConfiguration: void configure(javax.net.ssl.SSLEngine)>" ];
  1 -> 2;
}

Start inspections for class: org.apache.log4j.helpers.OptionConverter
Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> -> <org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>>
Global flow detected: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> -> <org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>

Adding connections to callgraphs in class: org.apache.log4j.helpers.OptionConverter


***************************
Now we build call graphs for class: org.apache.log4j.helpers.OptionConverter
Continue with method: <org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>


strict digraph G {
  1 [ label="<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>" ];
  2 [ label="<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" ];
  3 [ label="<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>" ];
  4 [ label="<org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" ];
  5 [ label="<org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)>" ];
  6 [ label="<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" ];
  7 [ label="<org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>" ];
  8 [ label="<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" ];
  9 [ label="<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" ];
  10 [ label="<org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" ];
  11 [ label="<org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)>" ];
  12 [ label="<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" ];
  13 [ label="<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
}

<2: <org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)> -> <org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>>
<3: <org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)> -> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>>
<4: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> -> <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>>
Global flow detected: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> -> <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>

Adding connections to callgraphs in class: org.apache.log4j.PropertyConfigurator


***************************
Now we build call graphs for class: org.apache.log4j.PropertyConfigurator
Continue with method: <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>


strict digraph G {
  1 [ label="<org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" ];
  2 [ label="<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" ];
  3 [ label="<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>" ];
  4 [ label="<org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

<5: <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> -> <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)>>
<6: <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)> -> <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>>
<7: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> -> <org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>>
Global flow detected: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> -> <org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>

Adding connections to callgraphs in class: org.apache.log4j.config.PropertySetter


***************************
Now we build call graphs for class: org.apache.log4j.config.PropertySetter
Continue with method: <org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>


strict digraph G {
  1 [ label="<org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>" ];
  2 [ label="<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" ];
  3 [ label="<org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>" ];
  4 [ label="<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" ];
  5 [ label="<org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
}

<8: <org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)> -> <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>>
Global flow detected: <org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)> -> <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>

Adding connections to callgraphs in class: org.apache.log4j.PropertyConfigurator
org.apache.log4j.PropertyConfigurator has been visited already.
<9: <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> -> <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>>
<10: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> -> <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)>>
<11: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> -> <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)>>
<12: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> -> <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>>
<13: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> -> <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>>
Global flow detected: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> -> <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>

Adding connections to callgraphs in class: org.apache.log4j.helpers.OptionConverter
org.apache.log4j.helpers.OptionConverter has been visited already.
Flows from <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>" ];
  2 [ label="<org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>" ];
  3 [ label="<org.apache.log4j.helpers.OptionConverter: java.lang.String substVars(java.lang.String,java.util.Properties)>" ];
  4 [ label="<org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>" ];
  5 [ label="<org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" ];
  6 [ label="<org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)>" ];
  7 [ label="<org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" ];
  8 [ label="<org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>" ];
  9 [ label="<org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)>" ];
  10 [ label="<org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)>" ];
  11 [ label="<org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" ];
  12 [ label="<org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)>" ];
  13 [ label="<org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)>" ];
  14 [ label="<org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>" ];
  15 [ label="<org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  8 -> 7;
  7 -> 15;
  15 -> 10;
  10 -> 6;
}

Source found in the callgraph: <java.net.URL: java.lang.String getFile()>...
Start traversal: 

Starting from method: <java.net.URL: java.lang.String getFile()>
<1: <java.net.URL: java.lang.String getFile()> -> <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>>
Global flow detected: <java.net.URL: java.lang.String getFile()> -> <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>

Adding connections to callgraphs in class: org.apache.log4j.helpers.OptionConverter
org.apache.log4j.helpers.OptionConverter has been visited already.
Flows from <java.net.URL: java.lang.String getFile()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.net.URL: java.lang.String getFile()>" ];
  2 [ label="<org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>" ];
  1 -> 2;
}

Start inspections for class: com.markciecior.snmp.devices.Config
Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <com.markciecior.snmp.devices.Config: void setSetting(java.lang.String,java.lang.String)>>
Global flow detected: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <com.markciecior.snmp.devices.Config: void setSetting(java.lang.String,java.lang.String)>

Adding connections to callgraphs in class: com.markciecior.snmp.devices.Config


***************************
Now we build call graphs for class: com.markciecior.snmp.devices.Config
Continue with method: <com.markciecior.snmp.devices.Config: void setSetting(java.lang.String,java.lang.String)>


strict digraph G {
  1 [ label="<com.markciecior.snmp.devices.Config: void setSetting(java.lang.String,java.lang.String)>" ];
  2 [ label="<com.markciecior.snmp.devices.DeviceCollector$StartDiscoveryListener: void actionPerformed(java.awt.event.ActionEvent)>" ];
  1 -> 2;
}

<2: <com.markciecior.snmp.devices.Config: void setSetting(java.lang.String,java.lang.String)> -> <com.markciecior.snmp.devices.DeviceCollector$StartDiscoveryListener: void actionPerformed(java.awt.event.ActionEvent)>>
Global flow detected: <com.markciecior.snmp.devices.Config: void setSetting(java.lang.String,java.lang.String)> -> <com.markciecior.snmp.devices.DeviceCollector$StartDiscoveryListener: void actionPerformed(java.awt.event.ActionEvent)>

Adding connections to callgraphs in class: com.markciecior.snmp.devices.DeviceCollector$StartDiscoveryListener


***************************
Now we build call graphs for class: com.markciecior.snmp.devices.DeviceCollector$StartDiscoveryListener
Continue with method: <com.markciecior.snmp.devices.DeviceCollector$StartDiscoveryListener: void actionPerformed(java.awt.event.ActionEvent)>


strict digraph G {
  1 [ label="<com.markciecior.snmp.devices.DeviceCollector$StartDiscoveryListener: void actionPerformed(java.awt.event.ActionEvent)>" ];
  2 [ label="<javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  3 [ label="<javax.swing.JComboBox: void fireActionEvent()>" ];
  4 [ label="<javax.swing.Timer: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

Flows from <java.lang.System: java.lang.String getProperty(java.lang.String)> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String)>" ];
  2 [ label="<com.markciecior.snmp.devices.Config: void setSetting(java.lang.String,java.lang.String)>" ];
  3 [ label="<com.markciecior.snmp.devices.DeviceCollector$StartDiscoveryListener: void actionPerformed(java.awt.event.ActionEvent)>" ];
  4 [ label="<javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  5 [ label="<javax.swing.JComboBox: void fireActionEvent()>" ];
  6 [ label="<javax.swing.Timer: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
}

Start inspections for class: org.snmp4j.transport.TLSTM
Start inspections for class: org.apache.log4j.net.SMTPAppender
Start inspections for class: jcifs.http.NtlmHttpURLConnection
Start inspections for class: org.snmp4j.log.LogFactory
Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> -> <org.snmp4j.log.LogFactory: void getFactoryFromSystemProperty()>>
Global flow detected: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> -> <org.snmp4j.log.LogFactory: void getFactoryFromSystemProperty()>

Adding connections to callgraphs in class: org.snmp4j.log.LogFactory


***************************
Now we build call graphs for class: org.snmp4j.log.LogFactory
Continue with method: <org.snmp4j.log.LogFactory: void getFactoryFromSystemProperty()>


strict digraph G {
  1 [ label="<org.snmp4j.log.LogFactory: void getFactoryFromSystemProperty()>" ];
  2 [ label="<org.snmp4j.log.LogFactory: void checkConfig()>" ];
  3 [ label="<org.snmp4j.log.LogFactory: org.snmp4j.log.LogAdapter getLogger(java.lang.Class)>" ];
  1 -> 2;
  2 -> 3;
}

<2: <org.snmp4j.log.LogFactory: void getFactoryFromSystemProperty()> -> <org.snmp4j.log.LogFactory: void checkConfig()>>
<3: <org.snmp4j.log.LogFactory: void checkConfig()> -> <org.snmp4j.log.LogFactory: org.snmp4j.log.LogAdapter getLogger(java.lang.Class)>>
Flows from <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>" ];
  2 [ label="<org.snmp4j.log.LogFactory: void getFactoryFromSystemProperty()>" ];
  3 [ label="<org.snmp4j.log.LogFactory: void checkConfig()>" ];
  4 [ label="<org.snmp4j.log.LogFactory: org.snmp4j.log.LogAdapter getLogger(java.lang.Class)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

Start inspections for class: jcifs.smb.SmbTransport
Start inspections for class: jcifs.netbios.SessionRetargetResponsePacket
Start inspections for class: jcifs.smb.Handler
Start inspections for class: org.apache.log4j.varia.Roller
Start inspections for class: jcifs.netbios.SocketInputStream
Start inspections for class: jcifs.netbios.SessionRequestPacket
Start inspections for class: jcifs.Config
Source found in the callgraph: <java.lang.System: java.util.Properties getProperties()>...
Start traversal: 

Starting from method: <java.lang.System: java.util.Properties getProperties()>
<1: <java.lang.System: java.util.Properties getProperties()> -> <jcifs.Config: void load(java.io.InputStream)>>
Global flow detected: <java.lang.System: java.util.Properties getProperties()> -> <jcifs.Config: void load(java.io.InputStream)>

Adding connections to callgraphs in class: jcifs.Config


***************************
Now we build call graphs for class: jcifs.Config
Continue with method: <jcifs.Config: void load(java.io.InputStream)>


strict digraph G {
}

Flows from <java.lang.System: java.util.Properties getProperties()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.System: java.util.Properties getProperties()>" ];
  2 [ label="<jcifs.Config: void load(java.io.InputStream)>" ];
  1 -> 2;
}

Start inspections for class: org.apache.log4j.lf5.viewer.LogBrokerMonitor
Source found in the callgraph: <java.io.File: java.lang.String getName()>...
Start traversal: 

Starting from method: <java.io.File: java.lang.String getName()>
<1: <java.io.File: java.lang.String getName()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)>>
Global flow detected: <java.io.File: java.lang.String getName()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.LogBrokerMonitor


***************************
Now we build call graphs for class: org.apache.log4j.lf5.viewer.LogBrokerMonitor
Continue with method: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)>


strict digraph G {
  1 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)>" ];
  2 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpen()>" ];
  3 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor$16: void actionPerformed(java.awt.event.ActionEvent)>" ];
  1 -> 2;
  2 -> 3;
}

<2: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpen()>>
<3: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpen()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor$16: void actionPerformed(java.awt.event.ActionEvent)>>
Global flow detected: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpen()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor$16: void actionPerformed(java.awt.event.ActionEvent)>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.LogBrokerMonitor$16


***************************
Now we build call graphs for class: org.apache.log4j.lf5.viewer.LogBrokerMonitor$16
Continue with method: <org.apache.log4j.lf5.viewer.LogBrokerMonitor$16: void actionPerformed(java.awt.event.ActionEvent)>


strict digraph G {
  1 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor$16: void actionPerformed(java.awt.event.ActionEvent)>" ];
  2 [ label="<javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  3 [ label="<javax.swing.JComboBox: void fireActionEvent()>" ];
  4 [ label="<javax.swing.Timer: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

Flows from <java.io.File: java.lang.String getName()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getName()>" ];
  2 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)>" ];
  3 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpen()>" ];
  4 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor$16: void actionPerformed(java.awt.event.ActionEvent)>" ];
  5 [ label="<javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  6 [ label="<javax.swing.JComboBox: void fireActionEvent()>" ];
  7 [ label="<javax.swing.Timer: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
}

Source found in the callgraph: <java.net.URL: java.io.InputStream openStream()>...
Start traversal: 

Starting from method: <java.net.URL: java.io.InputStream openStream()>
<1: <java.net.URL: java.io.InputStream openStream()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>>
Global flow detected: <java.net.URL: java.io.InputStream openStream()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.LogBrokerMonitor
org.apache.log4j.lf5.viewer.LogBrokerMonitor has been visited already.
<2: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()>>
<3: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor$17: void actionPerformed(java.awt.event.ActionEvent)>>
Global flow detected: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor$17: void actionPerformed(java.awt.event.ActionEvent)>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.LogBrokerMonitor$17


***************************
Now we build call graphs for class: org.apache.log4j.lf5.viewer.LogBrokerMonitor$17
Continue with method: <org.apache.log4j.lf5.viewer.LogBrokerMonitor$17: void actionPerformed(java.awt.event.ActionEvent)>


strict digraph G {
  1 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor$17: void actionPerformed(java.awt.event.ActionEvent)>" ];
  2 [ label="<javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  3 [ label="<javax.swing.JComboBox: void fireActionEvent()>" ];
  4 [ label="<javax.swing.Timer: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

Flows from <java.net.URL: java.io.InputStream openStream()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.net.URL: java.io.InputStream openStream()>" ];
  2 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>" ];
  3 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()>" ];
  4 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor$17: void actionPerformed(java.awt.event.ActionEvent)>" ];
  5 [ label="<javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  6 [ label="<javax.swing.JComboBox: void fireActionEvent()>" ];
  7 [ label="<javax.swing.Timer: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
}

Source found in the callgraph: <java.net.URL: java.lang.String getFile()>...
Start traversal: 

Starting from method: <java.net.URL: java.lang.String getFile()>
<1: <java.net.URL: java.lang.String getFile()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>>
Global flow detected: <java.net.URL: java.lang.String getFile()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.LogBrokerMonitor
org.apache.log4j.lf5.viewer.LogBrokerMonitor has been visited already.
<2: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()>>
<3: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor$17: void actionPerformed(java.awt.event.ActionEvent)>>
Global flow detected: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor$17: void actionPerformed(java.awt.event.ActionEvent)>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.LogBrokerMonitor$17
org.apache.log4j.lf5.viewer.LogBrokerMonitor$17 has been visited already.
Flows from <java.net.URL: java.lang.String getFile()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.net.URL: java.lang.String getFile()>" ];
  2 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>" ];
  3 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()>" ];
  4 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor$17: void actionPerformed(java.awt.event.ActionEvent)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

Start inspections for class: jcifs.netbios.SessionServicePacket
Start inspections for class: org.apache.log4j.pattern.LogEvent
Start inspections for class: org.apache.log4j.lf5.viewer.configure.MRUFileManager
Source found in the callgraph: <java.net.URL: java.io.InputStream openStream()>...
Start traversal: 

Starting from method: <java.net.URL: java.io.InputStream openStream()>
<1: <java.net.URL: java.io.InputStream openStream()> -> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>>
Global flow detected: <java.net.URL: java.io.InputStream openStream()> -> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.configure.MRUFileManager


***************************
Now we build call graphs for class: org.apache.log4j.lf5.viewer.configure.MRUFileManager
Continue with method: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>


strict digraph G {
  1 [ label="<org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>" ];
  2 [ label="<org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(int)>" ];
  3 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)>" ];
  1 -> 2;
  2 -> 3;
}

<2: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)> -> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(int)>>
<3: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(int)> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)>>
Global flow detected: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(int)> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.LogBrokerMonitor
org.apache.log4j.lf5.viewer.LogBrokerMonitor has been visited already.
Flows from <java.net.URL: java.io.InputStream openStream()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.net.URL: java.io.InputStream openStream()>" ];
  2 [ label="<org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>" ];
  3 [ label="<org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(int)>" ];
  4 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String getFilename()>>
Global flow detected: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String getFilename()>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.configure.MRUFileManager
org.apache.log4j.lf5.viewer.configure.MRUFileManager has been visited already.
<2: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String getFilename()> -> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void load()>>
<3: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void load()> -> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void save()>>
<4: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void save()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestExit()>>
Global flow detected: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void save()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestExit()>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.LogBrokerMonitor
org.apache.log4j.lf5.viewer.LogBrokerMonitor has been visited already.
<5: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestExit()> -> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void createConfigurationDirectory()>>
Global flow detected: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestExit()> -> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void createConfigurationDirectory()>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.configure.MRUFileManager
org.apache.log4j.lf5.viewer.configure.MRUFileManager has been visited already.
Flows from <java.lang.System: java.lang.String getProperty(java.lang.String)> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String)>" ];
  2 [ label="<org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String getFilename()>" ];
  3 [ label="<org.apache.log4j.lf5.viewer.configure.MRUFileManager: void load()>" ];
  4 [ label="<org.apache.log4j.lf5.viewer.configure.MRUFileManager: void save()>" ];
  5 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestExit()>" ];
  6 [ label="<org.apache.log4j.lf5.viewer.configure.MRUFileManager: void createConfigurationDirectory()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
}

Source found in the callgraph: <java.io.File: java.lang.String getAbsolutePath()>...
Start traversal: 

Starting from method: <java.io.File: java.lang.String getAbsolutePath()>
<1: <java.io.File: java.lang.String getAbsolutePath()> -> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()>>
Global flow detected: <java.io.File: java.lang.String getAbsolutePath()> -> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.configure.MRUFileManager
org.apache.log4j.lf5.viewer.configure.MRUFileManager has been visited already.
<2: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void createMRUFileListMI(javax.swing.JMenu)>>
Global flow detected: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void createMRUFileListMI(javax.swing.JMenu)>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.LogBrokerMonitor
org.apache.log4j.lf5.viewer.LogBrokerMonitor has been visited already.
Flows from <java.io.File: java.lang.String getAbsolutePath()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getAbsolutePath()>" ];
  2 [ label="<org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()>" ];
  3 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void createMRUFileListMI(javax.swing.JMenu)>" ];
  1 -> 2;
  2 -> 3;
}

Start inspections for class: jcifs.util.transport.Transport
Start inspections for class: org.apache.log4j.lf5.util.StreamUtils
Start inspections for class: org.snmp4j.smi.AbstractVariable
Start inspections for class: org.apache.log4j.chainsaw.LoadXMLAction
Source found in the callgraph: <java.io.File: java.lang.String getAbsolutePath()>...
Start traversal: 

Starting from method: <java.io.File: java.lang.String getAbsolutePath()>
<1: <java.io.File: java.lang.String getAbsolutePath()> -> <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)>>
Global flow detected: <java.io.File: java.lang.String getAbsolutePath()> -> <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)>

Adding connections to callgraphs in class: org.apache.log4j.chainsaw.LoadXMLAction


***************************
Now we build call graphs for class: org.apache.log4j.chainsaw.LoadXMLAction
Continue with method: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)>


strict digraph G {
  1 [ label="<org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)>" ];
  2 [ label="<javax.swing.Timer: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  3 [ label="<javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  4 [ label="<javax.swing.JComboBox: void fireActionEvent()>" ];
  5 [ label="<javax.swing.SwingUtilities: boolean notifyAction(javax.swing.Action,javax.swing.KeyStroke,java.awt.event.KeyEvent,java.lang.Object,int)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
}

<2: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> -> <javax.swing.Timer: void fireActionPerformed(java.awt.event.ActionEvent)>>
<3: <javax.swing.Timer: void fireActionPerformed(java.awt.event.ActionEvent)> -> <javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)>>
<4: <javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)> -> <javax.swing.JComboBox: void fireActionEvent()>>
<5: <javax.swing.JComboBox: void fireActionEvent()> -> <javax.swing.SwingUtilities: boolean notifyAction(javax.swing.Action,javax.swing.KeyStroke,java.awt.event.KeyEvent,java.lang.Object,int)>>
Flows from <java.io.File: java.lang.String getAbsolutePath()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getAbsolutePath()>" ];
  2 [ label="<org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)>" ];
  3 [ label="<javax.swing.Timer: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  4 [ label="<javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  5 [ label="<javax.swing.JComboBox: void fireActionEvent()>" ];
  6 [ label="<javax.swing.SwingUtilities: boolean notifyAction(javax.swing.Action,javax.swing.KeyStroke,java.awt.event.KeyEvent,java.lang.Object,int)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
}

Start inspections for class: com.markciecior.snmp.devices.DeviceCollector$SaveOutputListener
Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <com.markciecior.snmp.devices.DeviceCollector$SaveOutputListener: void actionPerformed(java.awt.event.ActionEvent)>>
Global flow detected: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <com.markciecior.snmp.devices.DeviceCollector$SaveOutputListener: void actionPerformed(java.awt.event.ActionEvent)>

Adding connections to callgraphs in class: com.markciecior.snmp.devices.DeviceCollector$SaveOutputListener


***************************
Now we build call graphs for class: com.markciecior.snmp.devices.DeviceCollector$SaveOutputListener
Continue with method: <com.markciecior.snmp.devices.DeviceCollector$SaveOutputListener: void actionPerformed(java.awt.event.ActionEvent)>


strict digraph G {
  1 [ label="<com.markciecior.snmp.devices.DeviceCollector$SaveOutputListener: void actionPerformed(java.awt.event.ActionEvent)>" ];
  2 [ label="<javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  3 [ label="<javax.swing.JComboBox: void fireActionEvent()>" ];
  4 [ label="<javax.swing.Timer: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

<2: <com.markciecior.snmp.devices.DeviceCollector$SaveOutputListener: void actionPerformed(java.awt.event.ActionEvent)> -> <javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)>>
<3: <javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)> -> <javax.swing.JComboBox: void fireActionEvent()>>
<4: <javax.swing.JComboBox: void fireActionEvent()> -> <javax.swing.Timer: void fireActionPerformed(java.awt.event.ActionEvent)>>
Flows from <java.lang.System: java.lang.String getProperty(java.lang.String)> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String)>" ];
  2 [ label="<com.markciecior.snmp.devices.DeviceCollector$SaveOutputListener: void actionPerformed(java.awt.event.ActionEvent)>" ];
  3 [ label="<javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  4 [ label="<javax.swing.JComboBox: void fireActionEvent()>" ];
  5 [ label="<javax.swing.Timer: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
}

Start inspections for class: org.apache.log4j.spi.LoggingEvent
Start inspections for class: org.apache.log4j.lf5.viewer.configure.ConfigurationManager
Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getFilename()>>
Global flow detected: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getFilename()>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.configure.ConfigurationManager


***************************
Now we build call graphs for class: org.apache.log4j.lf5.viewer.configure.ConfigurationManager
Continue with method: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getFilename()>


strict digraph G {
  1 [ label="<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getFilename()>" ];
  2 [ label="<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void deleteConfigurationFile()>" ];
  3 [ label="<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void reset()>" ];
  4 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void resetConfiguration()>" ];
  5 [ label="<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void store(java.lang.String)>" ];
  6 [ label="<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()>" ];
  7 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void saveConfiguration()>" ];
  8 [ label="<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
}

<2: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getFilename()> -> <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void deleteConfigurationFile()>>
<3: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void deleteConfigurationFile()> -> <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void reset()>>
<4: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void reset()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void resetConfiguration()>>
Global flow detected: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void reset()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void resetConfiguration()>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.LogBrokerMonitor
org.apache.log4j.lf5.viewer.LogBrokerMonitor has been visited already.
<5: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void resetConfiguration()> -> <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void store(java.lang.String)>>
Global flow detected: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void resetConfiguration()> -> <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void store(java.lang.String)>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.configure.ConfigurationManager
org.apache.log4j.lf5.viewer.configure.ConfigurationManager has been visited already.
<6: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void store(java.lang.String)> -> <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()>>
<7: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void saveConfiguration()>>
Global flow detected: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void saveConfiguration()>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.LogBrokerMonitor
org.apache.log4j.lf5.viewer.LogBrokerMonitor has been visited already.
<8: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void saveConfiguration()> -> <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()>>
Global flow detected: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void saveConfiguration()> -> <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.configure.ConfigurationManager
org.apache.log4j.lf5.viewer.configure.ConfigurationManager has been visited already.
Flows from <java.lang.System: java.lang.String getProperty(java.lang.String)> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String)>" ];
  2 [ label="<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getFilename()>" ];
  3 [ label="<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void deleteConfigurationFile()>" ];
  4 [ label="<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void reset()>" ];
  5 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void resetConfiguration()>" ];
  6 [ label="<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void store(java.lang.String)>" ];
  7 [ label="<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()>" ];
  8 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void saveConfiguration()>" ];
  9 [ label="<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
}

Start inspections for class: jcifs.smb.SmbFile
Source found in the callgraph: <java.net.URL: java.lang.String getPath()>...
Start traversal: 

Starting from method: <java.net.URL: java.lang.String getPath()>
<1: <java.net.URL: java.lang.String getPath()> -> <jcifs.smb.SmbFile: java.lang.String getUncPath0()>>
Global flow detected: <java.net.URL: java.lang.String getPath()> -> <jcifs.smb.SmbFile: java.lang.String getUncPath0()>

Adding connections to callgraphs in class: jcifs.smb.SmbFile


***************************
Now we build call graphs for class: jcifs.smb.SmbFile
Continue with method: <jcifs.smb.SmbFile: java.lang.String getUncPath0()>


strict digraph G {
  1 [ label="<jcifs.smb.SmbFile: java.lang.String getUncPath0()>" ];
  2 [ label="<jcifs.smb.SmbFile: long lastModified()>" ];
  3 [ label="<jcifs.smb.SmbFile: long getLastModified()>" ];
  4 [ label="<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>" ];
  5 [ label="<jcifs.smb.SmbFile: boolean exists()>" ];
  6 [ label="<jcifs.smb.SmbFile: int getType()>" ];
  7 [ label="<jcifs.smb.SmbFile: long length()>" ];
  8 [ label="<jcifs.smb.SmbFile: int getContentLength()>" ];
  9 [ label="<jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>" ];
  10 [ label="<jcifs.smb.SmbFile: void connect()>" ];
  11 [ label="<jcifs.smb.SmbFile: void connect0()>" ];
  12 [ label="<jcifs.smb.SmbFile: int open0(int,int,int,int)>" ];
  13 [ label="<jcifs.smb.SmbFile: void open(int,int,int,int)>" ];
  14 [ label="<jcifs.smb.SmbFileInputStream: int available()>" ];
  15 [ label="<jcifs.smb.SmbFileInputStream: int readDirect(byte[],int,int)>" ];
  16 [ label="<jcifs.smb.SmbFile: jcifs.smb.Info queryPath(java.lang.String,int)>" ];
  17 [ label="<jcifs.smb.SmbFile: void resolveDfs(jcifs.smb.ServerMessageBlock)>" ];
  18 [ label="<jcifs.smb.SmbFile: void send(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock)>" ];
  19 [ label="<jcifs.smb.SmbFile: void close(int,long)>" ];
  20 [ label="<jcifs.smb.SmbFile: void close(long)>" ];
  21 [ label="<jcifs.smb.SmbFile: void close()>" ];
  22 [ label="<jcifs.smb.SmbFileInputStream: void close()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
}

<2: <jcifs.smb.SmbFile: java.lang.String getUncPath0()> -> <jcifs.smb.SmbFile: long lastModified()>>
<3: <jcifs.smb.SmbFile: long lastModified()> -> <jcifs.smb.SmbFile: long getLastModified()>>
<4: <jcifs.smb.SmbFile: long getLastModified()> -> <java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>>
<5: <java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)> -> <jcifs.smb.SmbFile: boolean exists()>>
Global flow detected: <java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)> -> <jcifs.smb.SmbFile: boolean exists()>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<6: <jcifs.smb.SmbFile: boolean exists()> -> <jcifs.smb.SmbFile: int getType()>>
<7: <jcifs.smb.SmbFile: int getType()> -> <jcifs.smb.SmbFile: long length()>>
<8: <jcifs.smb.SmbFile: long length()> -> <jcifs.smb.SmbFile: int getContentLength()>>
<9: <jcifs.smb.SmbFile: int getContentLength()> -> <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>>
Global flow detected: <jcifs.smb.SmbFile: int getContentLength()> -> <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>

Adding connections to callgraphs in class: jdk.internal.loader.URLClassPath$Loader$1


***************************
Now we build call graphs for class: jdk.internal.loader.URLClassPath$Loader$1
Continue with method: <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>


strict digraph G {
  1 [ label="<jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>" ];
  2 [ label="<jdk.internal.loader.Resource: byte[] getBytes()>" ];
  1 -> 2;
}

<10: <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()> -> <jcifs.smb.SmbFile: void connect()>>
Global flow detected: <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()> -> <jcifs.smb.SmbFile: void connect()>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<11: <jcifs.smb.SmbFile: void connect()> -> <jcifs.smb.SmbFile: void connect0()>>
<12: <jcifs.smb.SmbFile: void connect0()> -> <jcifs.smb.SmbFile: int open0(int,int,int,int)>>
<13: <jcifs.smb.SmbFile: int open0(int,int,int,int)> -> <jcifs.smb.SmbFile: void open(int,int,int,int)>>
<14: <jcifs.smb.SmbFile: void open(int,int,int,int)> -> <jcifs.smb.SmbFileInputStream: int available()>>
Global flow detected: <jcifs.smb.SmbFile: void open(int,int,int,int)> -> <jcifs.smb.SmbFileInputStream: int available()>

Adding connections to callgraphs in class: jcifs.smb.SmbFileInputStream


***************************
Now we build call graphs for class: jcifs.smb.SmbFileInputStream
Continue with method: <jcifs.smb.SmbFileInputStream: int available()>


strict digraph G {
  1 [ label="<jcifs.smb.SmbFileInputStream: int available()>" ];
  2 [ label="<java.io.FilterInputStream: int available()>" ];
  3 [ label="<sun.net.www.MeteredStream: int available()>" ];
  4 [ label="<java.io.BufferedInputStream: int available()>" ];
  5 [ label="<java.io.BufferedInputStream: int read(byte[],int,int)>" ];
  6 [ label="<java.util.jar.JarVerifier$VerifierStream: int available()>" ];
  7 [ label="<jdk.internal.icu.impl.ICUBinary: java.nio.ByteBuffer getRequiredData(java.lang.String)>" ];
  8 [ label="<java.io.SequenceInputStream: int available()>" ];
  9 [ label="<sun.nio.cs.StreamDecoder: boolean inReady()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
}

<15: <jcifs.smb.SmbFileInputStream: int available()> -> <jcifs.smb.SmbFileInputStream: int readDirect(byte[],int,int)>>
<16: <jcifs.smb.SmbFileInputStream: int readDirect(byte[],int,int)> -> <jcifs.smb.SmbFile: jcifs.smb.Info queryPath(java.lang.String,int)>>
Global flow detected: <jcifs.smb.SmbFileInputStream: int readDirect(byte[],int,int)> -> <jcifs.smb.SmbFile: jcifs.smb.Info queryPath(java.lang.String,int)>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<17: <jcifs.smb.SmbFile: jcifs.smb.Info queryPath(java.lang.String,int)> -> <jcifs.smb.SmbFile: void resolveDfs(jcifs.smb.ServerMessageBlock)>>
<18: <jcifs.smb.SmbFile: void resolveDfs(jcifs.smb.ServerMessageBlock)> -> <jcifs.smb.SmbFile: void send(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock)>>
<19: <jcifs.smb.SmbFile: void send(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock)> -> <jcifs.smb.SmbFile: void close(int,long)>>
<20: <jcifs.smb.SmbFile: void close(int,long)> -> <jcifs.smb.SmbFile: void close(long)>>
<21: <jcifs.smb.SmbFile: void close(long)> -> <jcifs.smb.SmbFile: void close()>>
<22: <jcifs.smb.SmbFile: void close()> -> <jcifs.smb.SmbFileInputStream: void close()>>
Global flow detected: <jcifs.smb.SmbFile: void close()> -> <jcifs.smb.SmbFileInputStream: void close()>

Adding connections to callgraphs in class: jcifs.smb.SmbFileInputStream
jcifs.smb.SmbFileInputStream has been visited already.
<23: <jcifs.smb.SmbFileInputStream: void close()> -> <jcifs.smb.SmbFile: jcifs.UniAddress getFirstAddress()>>
Global flow detected: <jcifs.smb.SmbFileInputStream: void close()> -> <jcifs.smb.SmbFile: jcifs.UniAddress getFirstAddress()>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<24: <jcifs.smb.SmbFile: jcifs.UniAddress getFirstAddress()> -> <jcifs.smb.SmbFile: jcifs.UniAddress getAddress()>>
<25: <jcifs.smb.SmbFile: jcifs.UniAddress getAddress()> -> <jcifs.smb.SmbFile: void doConnect()>>
Flows from <java.net.URL: java.lang.String getPath()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.net.URL: java.lang.String getPath()>" ];
  2 [ label="<jcifs.smb.SmbFile: java.lang.String getUncPath0()>" ];
  3 [ label="<jcifs.smb.SmbFile: long lastModified()>" ];
  4 [ label="<jcifs.smb.SmbFile: long getLastModified()>" ];
  5 [ label="<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>" ];
  6 [ label="<jcifs.smb.SmbFile: boolean exists()>" ];
  7 [ label="<jcifs.smb.SmbFile: int getType()>" ];
  8 [ label="<jcifs.smb.SmbFile: long length()>" ];
  9 [ label="<jcifs.smb.SmbFile: int getContentLength()>" ];
  10 [ label="<jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>" ];
  11 [ label="<jcifs.smb.SmbFile: void connect()>" ];
  12 [ label="<jcifs.smb.SmbFile: void connect0()>" ];
  13 [ label="<jcifs.smb.SmbFile: int open0(int,int,int,int)>" ];
  14 [ label="<jcifs.smb.SmbFile: void open(int,int,int,int)>" ];
  15 [ label="<jcifs.smb.SmbFileInputStream: int available()>" ];
  16 [ label="<jcifs.smb.SmbFileInputStream: int readDirect(byte[],int,int)>" ];
  17 [ label="<jcifs.smb.SmbFile: jcifs.smb.Info queryPath(java.lang.String,int)>" ];
  18 [ label="<jcifs.smb.SmbFile: void resolveDfs(jcifs.smb.ServerMessageBlock)>" ];
  19 [ label="<jcifs.smb.SmbFile: void send(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock)>" ];
  20 [ label="<jcifs.smb.SmbFile: void close(int,long)>" ];
  21 [ label="<jcifs.smb.SmbFile: void close(long)>" ];
  22 [ label="<jcifs.smb.SmbFile: void close()>" ];
  23 [ label="<jcifs.smb.SmbFileInputStream: void close()>" ];
  24 [ label="<jcifs.smb.SmbFile: jcifs.UniAddress getFirstAddress()>" ];
  25 [ label="<jcifs.smb.SmbFile: jcifs.UniAddress getAddress()>" ];
  26 [ label="<jcifs.smb.SmbFile: void doConnect()>" ];
  27 [ label="<java.io.FilterInputStream: int available()>" ];
  28 [ label="<sun.net.www.MeteredStream: int available()>" ];
  29 [ label="<java.io.BufferedInputStream: int available()>" ];
  30 [ label="<java.io.BufferedInputStream: int read(byte[],int,int)>" ];
  31 [ label="<java.util.jar.JarVerifier$VerifierStream: int available()>" ];
  32 [ label="<jdk.internal.icu.impl.ICUBinary: java.nio.ByteBuffer getRequiredData(java.lang.String)>" ];
  33 [ label="<java.io.SequenceInputStream: int available()>" ];
  34 [ label="<sun.nio.cs.StreamDecoder: boolean inReady()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  15 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
}

Source found in the callgraph: <java.net.URL: java.lang.String getQuery()>...
Start traversal: 

Starting from method: <java.net.URL: java.lang.String getQuery()>
<1: <java.net.URL: java.lang.String getQuery()> -> <jcifs.smb.SmbFile: jcifs.UniAddress getFirstAddress()>>
Global flow detected: <java.net.URL: java.lang.String getQuery()> -> <jcifs.smb.SmbFile: jcifs.UniAddress getFirstAddress()>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<2: <jcifs.smb.SmbFile: jcifs.UniAddress getFirstAddress()> -> <jcifs.smb.SmbFile: void connect()>>
<3: <jcifs.smb.SmbFile: void connect()> -> <jcifs.smb.SmbFile: void connect0()>>
<4: <jcifs.smb.SmbFile: void connect0()> -> <jcifs.smb.SmbFile: int open0(int,int,int,int)>>
<5: <jcifs.smb.SmbFile: int open0(int,int,int,int)> -> <jcifs.smb.SmbFile: void open(int,int,int,int)>>
<6: <jcifs.smb.SmbFile: void open(int,int,int,int)> -> <jcifs.smb.SmbFileInputStream: int available()>>
Global flow detected: <jcifs.smb.SmbFile: void open(int,int,int,int)> -> <jcifs.smb.SmbFileInputStream: int available()>

Adding connections to callgraphs in class: jcifs.smb.SmbFileInputStream
jcifs.smb.SmbFileInputStream has been visited already.
<7: <jcifs.smb.SmbFileInputStream: int available()> -> <jcifs.smb.SmbFileInputStream: int readDirect(byte[],int,int)>>
<8: <jcifs.smb.SmbFileInputStream: int readDirect(byte[],int,int)> -> <jcifs.smb.SmbFile: boolean exists()>>
Global flow detected: <jcifs.smb.SmbFileInputStream: int readDirect(byte[],int,int)> -> <jcifs.smb.SmbFile: boolean exists()>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<9: <jcifs.smb.SmbFile: boolean exists()> -> <jcifs.smb.SmbFile: long lastModified()>>
<10: <jcifs.smb.SmbFile: long lastModified()> -> <jcifs.smb.SmbFile: long getLastModified()>>
<11: <jcifs.smb.SmbFile: long getLastModified()> -> <java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>>
<12: <java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)> -> <jcifs.smb.SmbFile: jcifs.smb.Info queryPath(java.lang.String,int)>>
Global flow detected: <java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)> -> <jcifs.smb.SmbFile: jcifs.smb.Info queryPath(java.lang.String,int)>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<13: <jcifs.smb.SmbFile: jcifs.smb.Info queryPath(java.lang.String,int)> -> <jcifs.smb.SmbFile: long length()>>
<14: <jcifs.smb.SmbFile: long length()> -> <jcifs.smb.SmbFile: int getContentLength()>>
<15: <jcifs.smb.SmbFile: int getContentLength()> -> <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>>
Global flow detected: <jcifs.smb.SmbFile: int getContentLength()> -> <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>

Adding connections to callgraphs in class: jdk.internal.loader.URLClassPath$Loader$1
jdk.internal.loader.URLClassPath$Loader$1 has been visited already.
<16: <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()> -> <jcifs.smb.SmbFile: int getType()>>
Global flow detected: <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()> -> <jcifs.smb.SmbFile: int getType()>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<17: <jcifs.smb.SmbFile: int getType()> -> <jcifs.smb.SmbFile: void resolveDfs(jcifs.smb.ServerMessageBlock)>>
<18: <jcifs.smb.SmbFile: void resolveDfs(jcifs.smb.ServerMessageBlock)> -> <jcifs.smb.SmbFile: void send(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock)>>
<19: <jcifs.smb.SmbFile: void send(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock)> -> <jcifs.smb.SmbFile: void close(int,long)>>
<20: <jcifs.smb.SmbFile: void close(int,long)> -> <jcifs.smb.SmbFile: void close(long)>>
<21: <jcifs.smb.SmbFile: void close(long)> -> <jcifs.smb.SmbFile: void close()>>
<22: <jcifs.smb.SmbFile: void close()> -> <jcifs.smb.SmbFileInputStream: void close()>>
Global flow detected: <jcifs.smb.SmbFile: void close()> -> <jcifs.smb.SmbFileInputStream: void close()>

Adding connections to callgraphs in class: jcifs.smb.SmbFileInputStream
jcifs.smb.SmbFileInputStream has been visited already.
<23: <jcifs.smb.SmbFileInputStream: void close()> -> <jcifs.smb.SmbFile: jcifs.UniAddress getAddress()>>
Global flow detected: <jcifs.smb.SmbFileInputStream: void close()> -> <jcifs.smb.SmbFile: jcifs.UniAddress getAddress()>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<24: <jcifs.smb.SmbFile: jcifs.UniAddress getAddress()> -> <jcifs.smb.SmbFile: void doConnect()>>
Flows from <java.net.URL: java.lang.String getQuery()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.net.URL: java.lang.String getQuery()>" ];
  2 [ label="<jcifs.smb.SmbFile: jcifs.UniAddress getFirstAddress()>" ];
  3 [ label="<jcifs.smb.SmbFile: void connect()>" ];
  4 [ label="<jcifs.smb.SmbFile: void connect0()>" ];
  5 [ label="<jcifs.smb.SmbFile: int open0(int,int,int,int)>" ];
  6 [ label="<jcifs.smb.SmbFile: void open(int,int,int,int)>" ];
  7 [ label="<jcifs.smb.SmbFileInputStream: int available()>" ];
  8 [ label="<jcifs.smb.SmbFileInputStream: int readDirect(byte[],int,int)>" ];
  9 [ label="<jcifs.smb.SmbFile: boolean exists()>" ];
  10 [ label="<jcifs.smb.SmbFile: long lastModified()>" ];
  11 [ label="<jcifs.smb.SmbFile: long getLastModified()>" ];
  12 [ label="<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>" ];
  13 [ label="<jcifs.smb.SmbFile: jcifs.smb.Info queryPath(java.lang.String,int)>" ];
  14 [ label="<jcifs.smb.SmbFile: long length()>" ];
  15 [ label="<jcifs.smb.SmbFile: int getContentLength()>" ];
  16 [ label="<jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>" ];
  17 [ label="<jcifs.smb.SmbFile: int getType()>" ];
  18 [ label="<jcifs.smb.SmbFile: void resolveDfs(jcifs.smb.ServerMessageBlock)>" ];
  19 [ label="<jcifs.smb.SmbFile: void send(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock)>" ];
  20 [ label="<jcifs.smb.SmbFile: void close(int,long)>" ];
  21 [ label="<jcifs.smb.SmbFile: void close(long)>" ];
  22 [ label="<jcifs.smb.SmbFile: void close()>" ];
  23 [ label="<jcifs.smb.SmbFileInputStream: void close()>" ];
  24 [ label="<jcifs.smb.SmbFile: jcifs.UniAddress getAddress()>" ];
  25 [ label="<jcifs.smb.SmbFile: void doConnect()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
}

Source found in the callgraph: <java.net.URL: java.lang.String getHost()>...
Start traversal: 

Starting from method: <java.net.URL: java.lang.String getHost()>
<1: <java.net.URL: java.lang.String getHost()> -> <jcifs.smb.SmbFile: boolean exists()>>
Global flow detected: <java.net.URL: java.lang.String getHost()> -> <jcifs.smb.SmbFile: boolean exists()>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<2: <jcifs.smb.SmbFile: boolean exists()> -> <jcifs.smb.SmbFile: long lastModified()>>
<3: <jcifs.smb.SmbFile: long lastModified()> -> <jcifs.smb.SmbFile: long getLastModified()>>
<4: <jcifs.smb.SmbFile: long getLastModified()> -> <java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>>
<5: <java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)> -> <jcifs.smb.SmbFile: java.lang.String getServer()>>
Global flow detected: <java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)> -> <jcifs.smb.SmbFile: java.lang.String getServer()>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<6: <jcifs.smb.SmbFile: java.lang.String getServer()> -> <jcifs.smb.SmbFile: java.lang.String getServerWithDfs()>>
<7: <jcifs.smb.SmbFile: java.lang.String getServerWithDfs()> -> <jcifs.smb.SmbFile: void doConnect()>>
<8: <jcifs.smb.SmbFile: void doConnect()> -> <jcifs.smb.SmbFile: void connect()>>
<9: <jcifs.smb.SmbFile: void connect()> -> <jcifs.smb.SmbFile: void connect0()>>
<10: <jcifs.smb.SmbFile: void connect0()> -> <jcifs.smb.SmbFile: int open0(int,int,int,int)>>
<11: <jcifs.smb.SmbFile: int open0(int,int,int,int)> -> <jcifs.smb.SmbFile: void open(int,int,int,int)>>
<12: <jcifs.smb.SmbFile: void open(int,int,int,int)> -> <jcifs.smb.SmbFileInputStream: int available()>>
Global flow detected: <jcifs.smb.SmbFile: void open(int,int,int,int)> -> <jcifs.smb.SmbFileInputStream: int available()>

Adding connections to callgraphs in class: jcifs.smb.SmbFileInputStream
jcifs.smb.SmbFileInputStream has been visited already.
<13: <jcifs.smb.SmbFileInputStream: int available()> -> <jcifs.smb.SmbFileInputStream: int readDirect(byte[],int,int)>>
<14: <jcifs.smb.SmbFileInputStream: int readDirect(byte[],int,int)> -> <jcifs.smb.SmbFile: jcifs.smb.Info queryPath(java.lang.String,int)>>
Global flow detected: <jcifs.smb.SmbFileInputStream: int readDirect(byte[],int,int)> -> <jcifs.smb.SmbFile: jcifs.smb.Info queryPath(java.lang.String,int)>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<15: <jcifs.smb.SmbFile: jcifs.smb.Info queryPath(java.lang.String,int)> -> <jcifs.smb.SmbFile: long length()>>
<16: <jcifs.smb.SmbFile: long length()> -> <jcifs.smb.SmbFile: int getContentLength()>>
<17: <jcifs.smb.SmbFile: int getContentLength()> -> <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>>
Global flow detected: <jcifs.smb.SmbFile: int getContentLength()> -> <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>

Adding connections to callgraphs in class: jdk.internal.loader.URLClassPath$Loader$1
jdk.internal.loader.URLClassPath$Loader$1 has been visited already.
<18: <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()> -> <jcifs.smb.SmbFile: int getType()>>
Global flow detected: <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()> -> <jcifs.smb.SmbFile: int getType()>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<19: <jcifs.smb.SmbFile: int getType()> -> <jcifs.smb.SmbFile: void resolveDfs(jcifs.smb.ServerMessageBlock)>>
<20: <jcifs.smb.SmbFile: void resolveDfs(jcifs.smb.ServerMessageBlock)> -> <jcifs.smb.SmbFile: void send(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock)>>
<21: <jcifs.smb.SmbFile: void send(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock)> -> <jcifs.smb.SmbFile: void close(int,long)>>
<22: <jcifs.smb.SmbFile: void close(int,long)> -> <jcifs.smb.SmbFile: void close(long)>>
<23: <jcifs.smb.SmbFile: void close(long)> -> <jcifs.smb.SmbFile: void close()>>
<24: <jcifs.smb.SmbFile: void close()> -> <jcifs.smb.SmbFileInputStream: void close()>>
Global flow detected: <jcifs.smb.SmbFile: void close()> -> <jcifs.smb.SmbFileInputStream: void close()>

Adding connections to callgraphs in class: jcifs.smb.SmbFileInputStream
jcifs.smb.SmbFileInputStream has been visited already.
<25: <jcifs.smb.SmbFileInputStream: void close()> -> <jcifs.smb.SmbFile: jcifs.UniAddress getFirstAddress()>>
Global flow detected: <jcifs.smb.SmbFileInputStream: void close()> -> <jcifs.smb.SmbFile: jcifs.UniAddress getFirstAddress()>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<26: <jcifs.smb.SmbFile: jcifs.UniAddress getFirstAddress()> -> <jcifs.smb.SmbFile: jcifs.UniAddress getAddress()>>
Flows from <java.net.URL: java.lang.String getHost()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.net.URL: java.lang.String getHost()>" ];
  2 [ label="<jcifs.smb.SmbFile: boolean exists()>" ];
  3 [ label="<jcifs.smb.SmbFile: long lastModified()>" ];
  4 [ label="<jcifs.smb.SmbFile: long getLastModified()>" ];
  5 [ label="<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>" ];
  6 [ label="<jcifs.smb.SmbFile: java.lang.String getServer()>" ];
  7 [ label="<jcifs.smb.SmbFile: java.lang.String getServerWithDfs()>" ];
  8 [ label="<jcifs.smb.SmbFile: void doConnect()>" ];
  9 [ label="<jcifs.smb.SmbFile: void connect()>" ];
  10 [ label="<jcifs.smb.SmbFile: void connect0()>" ];
  11 [ label="<jcifs.smb.SmbFile: int open0(int,int,int,int)>" ];
  12 [ label="<jcifs.smb.SmbFile: void open(int,int,int,int)>" ];
  13 [ label="<jcifs.smb.SmbFileInputStream: int available()>" ];
  14 [ label="<jcifs.smb.SmbFileInputStream: int readDirect(byte[],int,int)>" ];
  15 [ label="<jcifs.smb.SmbFile: jcifs.smb.Info queryPath(java.lang.String,int)>" ];
  16 [ label="<jcifs.smb.SmbFile: long length()>" ];
  17 [ label="<jcifs.smb.SmbFile: int getContentLength()>" ];
  18 [ label="<jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>" ];
  19 [ label="<jcifs.smb.SmbFile: int getType()>" ];
  20 [ label="<jcifs.smb.SmbFile: void resolveDfs(jcifs.smb.ServerMessageBlock)>" ];
  21 [ label="<jcifs.smb.SmbFile: void send(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock)>" ];
  22 [ label="<jcifs.smb.SmbFile: void close(int,long)>" ];
  23 [ label="<jcifs.smb.SmbFile: void close(long)>" ];
  24 [ label="<jcifs.smb.SmbFile: void close()>" ];
  25 [ label="<jcifs.smb.SmbFileInputStream: void close()>" ];
  26 [ label="<jcifs.smb.SmbFile: jcifs.UniAddress getFirstAddress()>" ];
  27 [ label="<jcifs.smb.SmbFile: jcifs.UniAddress getAddress()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
}

Source found in the callgraph: <java.net.URL: int getPort()>...
Start traversal: 

Starting from method: <java.net.URL: int getPort()>
<1: <java.net.URL: int getPort()> -> <jcifs.smb.SmbFile: void doConnect()>>
Global flow detected: <java.net.URL: int getPort()> -> <jcifs.smb.SmbFile: void doConnect()>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<2: <jcifs.smb.SmbFile: void doConnect()> -> <jcifs.smb.SmbFile: void connect()>>
<3: <jcifs.smb.SmbFile: void connect()> -> <jcifs.smb.SmbFile: void connect0()>>
<4: <jcifs.smb.SmbFile: void connect0()> -> <jcifs.smb.SmbFile: int open0(int,int,int,int)>>
<5: <jcifs.smb.SmbFile: int open0(int,int,int,int)> -> <jcifs.smb.SmbFile: void open(int,int,int,int)>>
<6: <jcifs.smb.SmbFile: void open(int,int,int,int)> -> <jcifs.smb.SmbFileInputStream: int available()>>
Global flow detected: <jcifs.smb.SmbFile: void open(int,int,int,int)> -> <jcifs.smb.SmbFileInputStream: int available()>

Adding connections to callgraphs in class: jcifs.smb.SmbFileInputStream
jcifs.smb.SmbFileInputStream has been visited already.
<7: <jcifs.smb.SmbFileInputStream: int available()> -> <jcifs.smb.SmbFileInputStream: int readDirect(byte[],int,int)>>
<8: <jcifs.smb.SmbFileInputStream: int readDirect(byte[],int,int)> -> <jcifs.smb.SmbFile: boolean exists()>>
Global flow detected: <jcifs.smb.SmbFileInputStream: int readDirect(byte[],int,int)> -> <jcifs.smb.SmbFile: boolean exists()>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<9: <jcifs.smb.SmbFile: boolean exists()> -> <jcifs.smb.SmbFile: long lastModified()>>
<10: <jcifs.smb.SmbFile: long lastModified()> -> <jcifs.smb.SmbFile: long getLastModified()>>
<11: <jcifs.smb.SmbFile: long getLastModified()> -> <java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>>
<12: <java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)> -> <jcifs.smb.SmbFile: jcifs.smb.Info queryPath(java.lang.String,int)>>
Global flow detected: <java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)> -> <jcifs.smb.SmbFile: jcifs.smb.Info queryPath(java.lang.String,int)>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<13: <jcifs.smb.SmbFile: jcifs.smb.Info queryPath(java.lang.String,int)> -> <jcifs.smb.SmbFile: long length()>>
<14: <jcifs.smb.SmbFile: long length()> -> <jcifs.smb.SmbFile: int getContentLength()>>
<15: <jcifs.smb.SmbFile: int getContentLength()> -> <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>>
Global flow detected: <jcifs.smb.SmbFile: int getContentLength()> -> <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>

Adding connections to callgraphs in class: jdk.internal.loader.URLClassPath$Loader$1
jdk.internal.loader.URLClassPath$Loader$1 has been visited already.
<16: <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()> -> <jcifs.smb.SmbFile: int getType()>>
Global flow detected: <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()> -> <jcifs.smb.SmbFile: int getType()>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<17: <jcifs.smb.SmbFile: int getType()> -> <jcifs.smb.SmbFile: void resolveDfs(jcifs.smb.ServerMessageBlock)>>
<18: <jcifs.smb.SmbFile: void resolveDfs(jcifs.smb.ServerMessageBlock)> -> <jcifs.smb.SmbFile: void send(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock)>>
<19: <jcifs.smb.SmbFile: void send(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock)> -> <jcifs.smb.SmbFile: void close(int,long)>>
<20: <jcifs.smb.SmbFile: void close(int,long)> -> <jcifs.smb.SmbFile: void close(long)>>
<21: <jcifs.smb.SmbFile: void close(long)> -> <jcifs.smb.SmbFile: void close()>>
<22: <jcifs.smb.SmbFile: void close()> -> <jcifs.smb.SmbFileInputStream: void close()>>
Global flow detected: <jcifs.smb.SmbFile: void close()> -> <jcifs.smb.SmbFileInputStream: void close()>

Adding connections to callgraphs in class: jcifs.smb.SmbFileInputStream
jcifs.smb.SmbFileInputStream has been visited already.
Flows from <java.net.URL: int getPort()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.net.URL: int getPort()>" ];
  2 [ label="<jcifs.smb.SmbFile: void doConnect()>" ];
  3 [ label="<jcifs.smb.SmbFile: void connect()>" ];
  4 [ label="<jcifs.smb.SmbFile: void connect0()>" ];
  5 [ label="<jcifs.smb.SmbFile: int open0(int,int,int,int)>" ];
  6 [ label="<jcifs.smb.SmbFile: void open(int,int,int,int)>" ];
  7 [ label="<jcifs.smb.SmbFileInputStream: int available()>" ];
  8 [ label="<jcifs.smb.SmbFileInputStream: int readDirect(byte[],int,int)>" ];
  9 [ label="<jcifs.smb.SmbFile: boolean exists()>" ];
  10 [ label="<jcifs.smb.SmbFile: long lastModified()>" ];
  11 [ label="<jcifs.smb.SmbFile: long getLastModified()>" ];
  12 [ label="<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>" ];
  13 [ label="<jcifs.smb.SmbFile: jcifs.smb.Info queryPath(java.lang.String,int)>" ];
  14 [ label="<jcifs.smb.SmbFile: long length()>" ];
  15 [ label="<jcifs.smb.SmbFile: int getContentLength()>" ];
  16 [ label="<jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>" ];
  17 [ label="<jcifs.smb.SmbFile: int getType()>" ];
  18 [ label="<jcifs.smb.SmbFile: void resolveDfs(jcifs.smb.ServerMessageBlock)>" ];
  19 [ label="<jcifs.smb.SmbFile: void send(jcifs.smb.ServerMessageBlock,jcifs.smb.ServerMessageBlock)>" ];
  20 [ label="<jcifs.smb.SmbFile: void close(int,long)>" ];
  21 [ label="<jcifs.smb.SmbFile: void close(long)>" ];
  22 [ label="<jcifs.smb.SmbFile: void close()>" ];
  23 [ label="<jcifs.smb.SmbFileInputStream: void close()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
}

Source found in the callgraph: <java.net.URL: java.lang.String getAuthority()>...
Start traversal: 

Starting from method: <java.net.URL: java.lang.String getAuthority()>
<1: <java.net.URL: java.lang.String getAuthority()> -> <jcifs.smb.SmbFile: int getType()>>
Global flow detected: <java.net.URL: java.lang.String getAuthority()> -> <jcifs.smb.SmbFile: int getType()>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<2: <jcifs.smb.SmbFile: int getType()> -> <jcifs.smb.SmbFile: long length()>>
<3: <jcifs.smb.SmbFile: long length()> -> <jcifs.smb.SmbFile: int getContentLength()>>
<4: <jcifs.smb.SmbFile: int getContentLength()> -> <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>>
Global flow detected: <jcifs.smb.SmbFile: int getContentLength()> -> <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>

Adding connections to callgraphs in class: jdk.internal.loader.URLClassPath$Loader$1
jdk.internal.loader.URLClassPath$Loader$1 has been visited already.
<5: <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()> -> <jcifs.smb.SmbFile: boolean exists()>>
Global flow detected: <jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()> -> <jcifs.smb.SmbFile: boolean exists()>

Adding connections to callgraphs in class: jcifs.smb.SmbFile
jcifs.smb.SmbFile has been visited already.
<6: <jcifs.smb.SmbFile: boolean exists()> -> <jcifs.smb.SmbFile: long lastModified()>>
<7: <jcifs.smb.SmbFile: long lastModified()> -> <jcifs.smb.SmbFile: long getLastModified()>>
<8: <jcifs.smb.SmbFile: long getLastModified()> -> <java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>>
Flows from <java.net.URL: java.lang.String getAuthority()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.net.URL: java.lang.String getAuthority()>" ];
  2 [ label="<jcifs.smb.SmbFile: int getType()>" ];
  3 [ label="<jcifs.smb.SmbFile: long length()>" ];
  4 [ label="<jcifs.smb.SmbFile: int getContentLength()>" ];
  5 [ label="<jdk.internal.loader.URLClassPath$Loader$1: int getContentLength()>" ];
  6 [ label="<jcifs.smb.SmbFile: boolean exists()>" ];
  7 [ label="<jcifs.smb.SmbFile: long lastModified()>" ];
  8 [ label="<jcifs.smb.SmbFile: long getLastModified()>" ];
  9 [ label="<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
}

Source found in the callgraph: <java.net.URL: java.io.InputStream openStream()>...
Start traversal: 

Starting from method: <java.net.URL: java.io.InputStream openStream()>
Flows from <java.net.URL: java.io.InputStream openStream()> is finished.
/////////////////////////////////////


strict digraph G {
}

Start inspections for class: org.apache.log4j.net.SocketServer
Start inspections for class: org.snmp4j.transport.TransportMappings
Start inspections for class: jcifs.smb.TestLocking
Start inspections for class: org.apache.log4j.FileAppender
Start inspections for class: com.markciecior.snmp.devices.DeviceCollector$DiscoverWorker
Start inspections for class: org.apache.log4j.varia.HUPNode
Start inspections for class: org.apache.log4j.PropertyConfigurator
Start inspections for class: org.apache.log4j.lf5.util.LogFileParser
Source found in the callgraph: <java.io.BufferedInputStream: int read()>...
Start traversal: 

Starting from method: <java.io.BufferedInputStream: int read()>
<1: <java.io.BufferedInputStream: int read()> -> <org.apache.log4j.lf5.util.LogFileParser: java.lang.String loadLogFile(java.io.InputStream)>>
Global flow detected: <java.io.BufferedInputStream: int read()> -> <org.apache.log4j.lf5.util.LogFileParser: java.lang.String loadLogFile(java.io.InputStream)>

Adding connections to callgraphs in class: org.apache.log4j.lf5.util.LogFileParser


***************************
Now we build call graphs for class: org.apache.log4j.lf5.util.LogFileParser
Continue with method: <org.apache.log4j.lf5.util.LogFileParser: java.lang.String loadLogFile(java.io.InputStream)>


strict digraph G {
  1 [ label="<org.apache.log4j.lf5.util.LogFileParser: java.lang.String loadLogFile(java.io.InputStream)>" ];
  2 [ label="<org.apache.log4j.lf5.util.LogFileParser: void run()>" ];
  3 [ label="<java.lang.Thread: void run()>" ];
  4 [ label="<org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>" ];
  5 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>" ];
  6 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)>" ];
  7 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
}

<2: <org.apache.log4j.lf5.util.LogFileParser: java.lang.String loadLogFile(java.io.InputStream)> -> <org.apache.log4j.lf5.util.LogFileParser: void run()>>
<3: <org.apache.log4j.lf5.util.LogFileParser: void run()> -> <java.lang.Thread: void run()>>
<4: <java.lang.Thread: void run()> -> <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>>
Global flow detected: <java.lang.Thread: void run()> -> <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>

Adding connections to callgraphs in class: org.apache.log4j.lf5.util.LogFileParser
org.apache.log4j.lf5.util.LogFileParser has been visited already.
<5: <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>>
Global flow detected: <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.LogBrokerMonitor
org.apache.log4j.lf5.viewer.LogBrokerMonitor has been visited already.
<6: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)>>
<7: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)>>
Flows from <java.io.BufferedInputStream: int read()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.io.BufferedInputStream: int read()>" ];
  2 [ label="<org.apache.log4j.lf5.util.LogFileParser: java.lang.String loadLogFile(java.io.InputStream)>" ];
  3 [ label="<org.apache.log4j.lf5.util.LogFileParser: void run()>" ];
  4 [ label="<java.lang.Thread: void run()>" ];
  5 [ label="<org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>" ];
  6 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>" ];
  7 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)>" ];
  8 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
}

Source found in the callgraph: <java.io.BufferedInputStream: int available()>...
Start traversal: 

Starting from method: <java.io.BufferedInputStream: int available()>
<1: <java.io.BufferedInputStream: int available()> -> <org.apache.log4j.lf5.util.LogFileParser: java.lang.String loadLogFile(java.io.InputStream)>>
Global flow detected: <java.io.BufferedInputStream: int available()> -> <org.apache.log4j.lf5.util.LogFileParser: java.lang.String loadLogFile(java.io.InputStream)>

Adding connections to callgraphs in class: org.apache.log4j.lf5.util.LogFileParser
org.apache.log4j.lf5.util.LogFileParser has been visited already.
<2: <org.apache.log4j.lf5.util.LogFileParser: java.lang.String loadLogFile(java.io.InputStream)> -> <org.apache.log4j.lf5.util.LogFileParser: void run()>>
<3: <org.apache.log4j.lf5.util.LogFileParser: void run()> -> <java.lang.Thread: void run()>>
<4: <java.lang.Thread: void run()> -> <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>>
Global flow detected: <java.lang.Thread: void run()> -> <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>

Adding connections to callgraphs in class: org.apache.log4j.lf5.util.LogFileParser
org.apache.log4j.lf5.util.LogFileParser has been visited already.
<5: <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>>
Global flow detected: <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>

Adding connections to callgraphs in class: org.apache.log4j.lf5.viewer.LogBrokerMonitor
org.apache.log4j.lf5.viewer.LogBrokerMonitor has been visited already.
<6: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)>>
<7: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)> -> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)>>
Flows from <java.io.BufferedInputStream: int available()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.io.BufferedInputStream: int available()>" ];
  2 [ label="<org.apache.log4j.lf5.util.LogFileParser: java.lang.String loadLogFile(java.io.InputStream)>" ];
  3 [ label="<org.apache.log4j.lf5.util.LogFileParser: void run()>" ];
  4 [ label="<java.lang.Thread: void run()>" ];
  5 [ label="<org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>" ];
  6 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>" ];
  7 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)>" ];
  8 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
}

Start inspections for class: org.apache.log4j.Level
Start inspections for class: org.apache.log4j.xml.DOMConfigurator$2
Start inspections for class: org.apache.log4j.chainsaw.Main
Start inspections for class: jcifs.http.Handler
Start inspections for class: org.snmp4j.security.SecurityProtocols
Start inspections for class: com.markciecior.snmp.devices.DeviceCollector$SaveButtonListener
Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <com.markciecior.snmp.devices.DeviceCollector$SaveButtonListener: void actionPerformed(java.awt.event.ActionEvent)>>
Global flow detected: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <com.markciecior.snmp.devices.DeviceCollector$SaveButtonListener: void actionPerformed(java.awt.event.ActionEvent)>

Adding connections to callgraphs in class: com.markciecior.snmp.devices.DeviceCollector$SaveButtonListener


***************************
Now we build call graphs for class: com.markciecior.snmp.devices.DeviceCollector$SaveButtonListener
Continue with method: <com.markciecior.snmp.devices.DeviceCollector$SaveButtonListener: void actionPerformed(java.awt.event.ActionEvent)>


strict digraph G {
  1 [ label="<com.markciecior.snmp.devices.DeviceCollector$SaveButtonListener: void actionPerformed(java.awt.event.ActionEvent)>" ];
  2 [ label="<javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  3 [ label="<javax.swing.JComboBox: void fireActionEvent()>" ];
  4 [ label="<javax.swing.Timer: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

<2: <com.markciecior.snmp.devices.DeviceCollector$SaveButtonListener: void actionPerformed(java.awt.event.ActionEvent)> -> <javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)>>
<3: <javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)> -> <javax.swing.JComboBox: void fireActionEvent()>>
<4: <javax.swing.JComboBox: void fireActionEvent()> -> <javax.swing.Timer: void fireActionPerformed(java.awt.event.ActionEvent)>>
Flows from <java.lang.System: java.lang.String getProperty(java.lang.String)> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String)>" ];
  2 [ label="<com.markciecior.snmp.devices.DeviceCollector$SaveButtonListener: void actionPerformed(java.awt.event.ActionEvent)>" ];
  3 [ label="<javax.swing.AbstractButton: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  4 [ label="<javax.swing.JComboBox: void fireActionEvent()>" ];
  5 [ label="<javax.swing.Timer: void fireActionPerformed(java.awt.event.ActionEvent)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
}

Start inspections for class: org.apache.log4j.EnhancedThrowableRenderer
Start inspections for class: org.apache.log4j.jdbc.JDBCAppender
Start inspections for class: org.snmp4j.smi.GenericAddress
Start inspections for class: org.apache.log4j.DefaultThrowableRenderer
Source found in the callgraph: <java.io.LineNumberReader: java.lang.String readLine()>...
Start traversal: 

Starting from method: <java.io.LineNumberReader: java.lang.String readLine()>
<1: <java.io.LineNumberReader: java.lang.String readLine()> -> <org.apache.log4j.DefaultThrowableRenderer: java.lang.String[] render(java.lang.Throwable)>>
Global flow detected: <java.io.LineNumberReader: java.lang.String readLine()> -> <org.apache.log4j.DefaultThrowableRenderer: java.lang.String[] render(java.lang.Throwable)>

Adding connections to callgraphs in class: org.apache.log4j.DefaultThrowableRenderer


***************************
Now we build call graphs for class: org.apache.log4j.DefaultThrowableRenderer
Continue with method: <org.apache.log4j.DefaultThrowableRenderer: java.lang.String[] render(java.lang.Throwable)>


strict digraph G {
  1 [ label="<org.apache.log4j.DefaultThrowableRenderer: java.lang.String[] render(java.lang.Throwable)>" ];
  2 [ label="<org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>" ];
  1 -> 2;
}

<2: <org.apache.log4j.DefaultThrowableRenderer: java.lang.String[] render(java.lang.Throwable)> -> <org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>>
Global flow detected: <org.apache.log4j.DefaultThrowableRenderer: java.lang.String[] render(java.lang.Throwable)> -> <org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>

Adding connections to callgraphs in class: org.apache.log4j.spi.ThrowableInformation


***************************
Now we build call graphs for class: org.apache.log4j.spi.ThrowableInformation
Continue with method: <org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>


strict digraph G {
  1 [ label="<org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>" ];
  2 [ label="<org.apache.log4j.spi.LoggingEvent: java.lang.String[] getThrowableStrRep()>" ];
  1 -> 2;
}

Flows from <java.io.LineNumberReader: java.lang.String readLine()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.io.LineNumberReader: java.lang.String readLine()>" ];
  2 [ label="<org.apache.log4j.DefaultThrowableRenderer: java.lang.String[] render(java.lang.Throwable)>" ];
  3 [ label="<org.apache.log4j.spi.ThrowableInformation: java.lang.String[] getThrowableStrRep()>" ];
  4 [ label="<org.apache.log4j.spi.LoggingEvent: java.lang.String[] getThrowableStrRep()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

Loaded 6580 methods from JAR files. 

Found 31 Source Methods.
Found 45 Sink Methods.
Sources and Sinks collected. 

Methods extraction finished.
All finished.
