***** Loading java classes ***** 

Start reading BOM and BIM...
BOMS are loaded with 168 methods.
BIMs are loaded with 350 methods.
EOMs are loaded with 257 methods.
EIMs are loaded with 365 methods.
[SPARK] Starting analysis ...
[SPARK] Done! 


Source found in the callgraph: <java.io.File: java.lang.String getAbsolutePath()>...
In class: org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess
Start traversal: 

Starting from method: <java.io.File: java.lang.String getAbsolutePath()>
<1: <java.io.File: java.lang.String getAbsolutePath()> -> <java.io.File: java.io.File getAbsoluteFile()>>
<2: <java.io.File: java.io.File getAbsoluteFile()> -> <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>>
Global flow detected: <java.io.File: java.io.File getAbsoluteFile()> -> <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>

Adding connections to callgraphs in class: sun.net.www.ParseUtil


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.www.ParseUtil
Continue with method: <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>


<3: <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)> -> <org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: void openIfNecessary()>>
The above invocation flows into a source.
<4: <org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: void openIfNecessary()> -> <org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: int read(byte[],long,int,int)>>
The above invocation flows into a source.
<5: <org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: int read(byte[],long,int,int)> -> <org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: int access$400(org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess,byte[],long,int,int)>>
<6: <org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: int access$400(org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess,byte[],long,int,int)> -> <org.springframework.boot.loader.data.RandomAccessDataFile: int read(byte[],long,int,int)>>
Global flow detected: <org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: int access$400(org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess,byte[],long,int,int)> -> <org.springframework.boot.loader.data.RandomAccessDataFile: int read(byte[],long,int,int)>

Adding connections to callgraphs in class: org.springframework.boot.loader.data.RandomAccessDataFile


------------------------------------
------------------------------------
Now we build call graphs for class: org.springframework.boot.loader.data.RandomAccessDataFile
Continue with method: <org.springframework.boot.loader.data.RandomAccessDataFile: int read(byte[],long,int,int)>


Flows from <java.io.File: java.lang.String getAbsolutePath()> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getAbsolutePath()>" ];
  2 [ label="<java.io.File: java.io.File getAbsoluteFile()>" ];
  3 [ label="<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>" ];
  4 [ label="<org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: void openIfNecessary()>" ];
  5 [ label="<org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: int read(byte[],long,int,int)>" ];
  6 [ label="<org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: int access$400(org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess,byte[],long,int,int)>" ];
  7 [ label="<org.springframework.boot.loader.data.RandomAccessDataFile: int read(byte[],long,int,int)>" ];
  8 [ label="<org.springframework.boot.loader.data.RandomAccessDataFile: byte[] read(long,long)>" ];
  9 [ label="<org.springframework.boot.loader.jar.CentralDirectoryEndRecord: byte[] createBlockFromEndOfData(org.springframework.boot.loader.data.RandomAccessData,int)>" ];
  10 [ label="<org.springframework.boot.loader.jar.CentralDirectoryParser: void parseEntries(org.springframework.boot.loader.jar.CentralDirectoryEndRecord,org.springframework.boot.loader.data.RandomAccessData)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
}

Source found in the callgraph: <java.io.RandomAccessFile: int read(byte[],int,int)>...
In class: org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess
Start traversal: 

Starting from method: <java.io.RandomAccessFile: int read(byte[],int,int)>
<1: <java.io.RandomAccessFile: int read(byte[],int,int)> -> <java.util.zip.ZipFile$Source: int readAt(byte[],int,int,long)>>
Global flow detected: <java.io.RandomAccessFile: int read(byte[],int,int)> -> <java.util.zip.ZipFile$Source: int readAt(byte[],int,int,long)>

Adding connections to callgraphs in class: java.util.zip.ZipFile$Source


------------------------------------
------------------------------------
Now we build call graphs for class: java.util.zip.ZipFile$Source
Continue with method: <java.util.zip.ZipFile$Source: int readAt(byte[],int,int,long)>


<2: <java.util.zip.ZipFile$Source: int readAt(byte[],int,int,long)> -> <java.io.RandomAccessFile: void readFully(byte[],int,int)>>
Global flow detected: <java.util.zip.ZipFile$Source: int readAt(byte[],int,int,long)> -> <java.io.RandomAccessFile: void readFully(byte[],int,int)>

Adding connections to callgraphs in class: java.io.RandomAccessFile


------------------------------------
------------------------------------
Now we build call graphs for class: java.io.RandomAccessFile
Continue with method: <java.io.RandomAccessFile: void readFully(byte[],int,int)>


<3: <java.io.RandomAccessFile: void readFully(byte[],int,int)> -> <org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: int read(byte[],long,int,int)>>
The above invocation flows into a source.
<4: <org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: int read(byte[],long,int,int)> -> <org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: int access$400(org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess,byte[],long,int,int)>>
<5: <org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: int access$400(org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess,byte[],long,int,int)> -> <org.springframework.boot.loader.data.RandomAccessDataFile: int read(byte[],long,int,int)>>
Global flow detected: <org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: int access$400(org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess,byte[],long,int,int)> -> <org.springframework.boot.loader.data.RandomAccessDataFile: int read(byte[],long,int,int)>

Adding connections to callgraphs in class: org.springframework.boot.loader.data.RandomAccessDataFile
org.springframework.boot.loader.data.RandomAccessDataFile has been visited already.
Flows from <java.io.RandomAccessFile: int read(byte[],int,int)> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.io.RandomAccessFile: int read(byte[],int,int)>" ];
  2 [ label="<java.util.zip.ZipFile$Source: int readAt(byte[],int,int,long)>" ];
  3 [ label="<java.io.RandomAccessFile: void readFully(byte[],int,int)>" ];
  4 [ label="<org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: int read(byte[],long,int,int)>" ];
  5 [ label="<org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: int access$400(org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess,byte[],long,int,int)>" ];
  6 [ label="<org.springframework.boot.loader.data.RandomAccessDataFile: int read(byte[],long,int,int)>" ];
  7 [ label="<java.util.zip.ZipFile$Source: int readFullyAt(byte[],int,int,long)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  3 -> 7;
}

Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
In class: org.springframework.boot.loader.jar.JarFile
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> -> <sun.net.NetProperties: java.lang.String get(java.lang.String)>>
Global flow detected: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> -> <sun.net.NetProperties: java.lang.String get(java.lang.String)>

Adding connections to callgraphs in class: sun.net.NetProperties


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.NetProperties
Continue with method: <sun.net.NetProperties: java.lang.String get(java.lang.String)>


<2: <sun.net.NetProperties: java.lang.String get(java.lang.String)> -> <sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>>
<3: <sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)> -> <sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>>
<4: <sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)> -> <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()>>
Global flow detected: <sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)> -> <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()>

Adding connections to callgraphs in class: jdk.internal.jimage.BasicImageReader$1


------------------------------------
------------------------------------
Now we build call graphs for class: jdk.internal.jimage.BasicImageReader$1
Continue with method: <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()>


<5: <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()> -> <sun.net.www.MimeTable$1: java.lang.Void run()>>
Global flow detected: <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()> -> <sun.net.www.MimeTable$1: java.lang.Void run()>

Adding connections to callgraphs in class: sun.net.www.MimeTable$1


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.www.MimeTable$1
Continue with method: <sun.net.www.MimeTable$1: java.lang.Void run()>


<6: <sun.net.www.MimeTable$1: java.lang.Void run()> -> <sun.security.provider.SunEntries$1: java.lang.String run()>>
Global flow detected: <sun.net.www.MimeTable$1: java.lang.Void run()> -> <sun.security.provider.SunEntries$1: java.lang.String run()>

Adding connections to callgraphs in class: sun.security.provider.SunEntries$1


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.provider.SunEntries$1
Continue with method: <sun.security.provider.SunEntries$1: java.lang.String run()>


<7: <sun.security.provider.SunEntries$1: java.lang.String run()> -> <sun.net.NetworkClient$1: java.lang.Void run()>>
Global flow detected: <sun.security.provider.SunEntries$1: java.lang.String run()> -> <sun.net.NetworkClient$1: java.lang.Void run()>

Adding connections to callgraphs in class: sun.net.NetworkClient$1


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.NetworkClient$1
Continue with method: <sun.net.NetworkClient$1: java.lang.Void run()>


<8: <sun.net.NetworkClient$1: java.lang.Void run()> -> <org.springframework.boot.loader.jar.Handler: void captureJarContextUrl()>>
Global flow detected: <sun.net.NetworkClient$1: java.lang.Void run()> -> <org.springframework.boot.loader.jar.Handler: void captureJarContextUrl()>

Adding connections to callgraphs in class: org.springframework.boot.loader.jar.Handler


------------------------------------
------------------------------------
Now we build call graphs for class: org.springframework.boot.loader.jar.Handler
Continue with method: <org.springframework.boot.loader.jar.Handler: void captureJarContextUrl()>


<9: <org.springframework.boot.loader.jar.Handler: void captureJarContextUrl()> -> <org.springframework.boot.loader.jar.JarFile: void registerUrlProtocolHandler()>>
The above invocation flows into a source.
<10: <org.springframework.boot.loader.jar.JarFile: void registerUrlProtocolHandler()> -> <org.springframework.boot.loader.Launcher: void launch(java.lang.String[])>>
Global flow detected: <org.springframework.boot.loader.jar.JarFile: void registerUrlProtocolHandler()> -> <org.springframework.boot.loader.Launcher: void launch(java.lang.String[])>

Adding connections to callgraphs in class: org.springframework.boot.loader.Launcher


------------------------------------
------------------------------------
Now we build call graphs for class: org.springframework.boot.loader.Launcher
Continue with method: <org.springframework.boot.loader.Launcher: void launch(java.lang.String[])>


<11: <org.springframework.boot.loader.Launcher: void launch(java.lang.String[])> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)>>
Global flow detected: <org.springframework.boot.loader.Launcher: void launch(java.lang.String[])> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)>

Adding connections to callgraphs in class: sun.security.action.GetPropertyAction


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.action.GetPropertyAction
Continue with method: <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)>


Flows from <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>" ];
  2 [ label="<sun.net.NetProperties: java.lang.String get(java.lang.String)>" ];
  3 [ label="<sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>" ];
  4 [ label="<sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>" ];
  5 [ label="<jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()>" ];
  6 [ label="<sun.net.www.MimeTable$1: java.lang.Void run()>" ];
  7 [ label="<sun.security.provider.SunEntries$1: java.lang.String run()>" ];
  8 [ label="<sun.net.NetworkClient$1: java.lang.Void run()>" ];
  9 [ label="<org.springframework.boot.loader.jar.Handler: void captureJarContextUrl()>" ];
  10 [ label="<org.springframework.boot.loader.jar.JarFile: void registerUrlProtocolHandler()>" ];
  11 [ label="<org.springframework.boot.loader.Launcher: void launch(java.lang.String[])>" ];
  12 [ label="<sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)>" ];
  13 [ label="<sun.nio.ch.Net: boolean isFastTcpLoopbackRequested()>" ];
  14 [ label="<sun.nio.ch.FileDispatcherImpl: boolean isFastFileTransferRequested()>" ];
  15 [ label="<java.net.InetAddress: java.net.InetAddressImpl loadImpl(java.lang.String)>" ];
  16 [ label="<jdk.internal.logger.SimpleConsoleLogger: java.lang.System$Logger$Level getDefaultLevel()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
}

Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
In class: org.springframework.boot.loader.jar.Handler
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> -> <sun.net.NetProperties: java.lang.String get(java.lang.String)>>
Global flow detected: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> -> <sun.net.NetProperties: java.lang.String get(java.lang.String)>

Adding connections to callgraphs in class: sun.net.NetProperties
sun.net.NetProperties has been visited already.
<2: <sun.net.NetProperties: java.lang.String get(java.lang.String)> -> <sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>>
<3: <sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)> -> <sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>>
<4: <sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)> -> <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()>>
Global flow detected: <sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)> -> <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()>

Adding connections to callgraphs in class: jdk.internal.jimage.BasicImageReader$1
jdk.internal.jimage.BasicImageReader$1 has been visited already.
<5: <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()> -> <sun.net.www.MimeTable$1: java.lang.Void run()>>
Global flow detected: <jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()> -> <sun.net.www.MimeTable$1: java.lang.Void run()>

Adding connections to callgraphs in class: sun.net.www.MimeTable$1
sun.net.www.MimeTable$1 has been visited already.
<6: <sun.net.www.MimeTable$1: java.lang.Void run()> -> <sun.security.provider.SunEntries$1: java.lang.String run()>>
Global flow detected: <sun.net.www.MimeTable$1: java.lang.Void run()> -> <sun.security.provider.SunEntries$1: java.lang.String run()>

Adding connections to callgraphs in class: sun.security.provider.SunEntries$1
sun.security.provider.SunEntries$1 has been visited already.
<7: <sun.security.provider.SunEntries$1: java.lang.String run()> -> <sun.net.NetworkClient$1: java.lang.Void run()>>
Global flow detected: <sun.security.provider.SunEntries$1: java.lang.String run()> -> <sun.net.NetworkClient$1: java.lang.Void run()>

Adding connections to callgraphs in class: sun.net.NetworkClient$1
sun.net.NetworkClient$1 has been visited already.
<8: <sun.net.NetworkClient$1: java.lang.Void run()> -> <org.springframework.boot.loader.jar.JarFile: void registerUrlProtocolHandler()>>
The above invocation flows into a source.
<9: <org.springframework.boot.loader.jar.JarFile: void registerUrlProtocolHandler()> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)>>
Global flow detected: <org.springframework.boot.loader.jar.JarFile: void registerUrlProtocolHandler()> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)>

Adding connections to callgraphs in class: sun.security.action.GetPropertyAction
sun.security.action.GetPropertyAction has been visited already.
<10: <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)> -> <org.springframework.boot.loader.jar.Handler: void captureJarContextUrl()>>
The above invocation flows into a source.
Flows from <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>" ];
  2 [ label="<sun.net.NetProperties: java.lang.String get(java.lang.String)>" ];
  3 [ label="<sun.net.NetProperties: java.lang.Integer getInteger(java.lang.String,int)>" ];
  4 [ label="<sun.net.NetProperties: java.lang.Boolean getBoolean(java.lang.String)>" ];
  5 [ label="<jdk.internal.jimage.BasicImageReader$1: java.lang.Boolean run()>" ];
  6 [ label="<sun.net.www.MimeTable$1: java.lang.Void run()>" ];
  7 [ label="<sun.security.provider.SunEntries$1: java.lang.String run()>" ];
  8 [ label="<sun.net.NetworkClient$1: java.lang.Void run()>" ];
  9 [ label="<org.springframework.boot.loader.jar.JarFile: void registerUrlProtocolHandler()>" ];
  10 [ label="<sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)>" ];
  11 [ label="<org.springframework.boot.loader.jar.Handler: void captureJarContextUrl()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
}

Source found in the callgraph: <java.net.URLClassLoader: java.net.URL findResource(java.lang.String)>...
In class: org.springframework.boot.loader.LaunchedURLClassLoader
Start traversal: 

Starting from method: <java.net.URLClassLoader: java.net.URL findResource(java.lang.String)>
<1: <java.net.URLClassLoader: java.net.URL findResource(java.lang.String)> -> <jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)>>
Global flow detected: <java.net.URLClassLoader: java.net.URL findResource(java.lang.String)> -> <jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)>

Adding connections to callgraphs in class: jdk.internal.loader.Loader


------------------------------------
------------------------------------
Now we build call graphs for class: jdk.internal.loader.Loader
Continue with method: <jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)>


<2: <jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)> -> <java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>>
Global flow detected: <jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)> -> <java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>

Adding connections to callgraphs in class: java.lang.ClassLoader


------------------------------------
------------------------------------
Now we build call graphs for class: java.lang.ClassLoader
Continue with method: <java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>


<3: <java.lang.ClassLoader: java.net.URL getResource(java.lang.String)> -> <java.lang.ClassLoader: java.net.URL findResource(java.lang.String,java.lang.String)>>
<4: <java.lang.ClassLoader: java.net.URL findResource(java.lang.String,java.lang.String)> -> <org.springframework.boot.loader.LaunchedURLClassLoader: java.net.URL findResource(java.lang.String)>>
The above invocation flows into a source.
Flows from <java.net.URLClassLoader: java.net.URL findResource(java.lang.String)> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.net.URLClassLoader: java.net.URL findResource(java.lang.String)>" ];
  2 [ label="<jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)>" ];
  3 [ label="<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>" ];
  4 [ label="<java.lang.ClassLoader: java.net.URL findResource(java.lang.String,java.lang.String)>" ];
  5 [ label="<org.springframework.boot.loader.LaunchedURLClassLoader: java.net.URL findResource(java.lang.String)>" ];
  6 [ label="<java.util.ResourceBundle$Control$2: java.io.InputStream run()>" ];
  7 [ label="<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>" ];
  8 [ label="<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>" ];
  9 [ label="<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>" ];
  10 [ label="<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>" ];
  11 [ label="<java.util.ResourceBundle$ResourceBundleProviderHelper: java.io.InputStream lambda$loadPropertyResourceBundle$2(java.lang.String,java.lang.Module,java.lang.Module)>" ];
  12 [ label="<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>" ];
  13 [ label="<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  3 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
}

Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
In class: org.springframework.boot.loader.Launcher
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <sun.security.action.GetPropertyAction: java.lang.String run()>>
Global flow detected: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <sun.security.action.GetPropertyAction: java.lang.String run()>

Adding connections to callgraphs in class: sun.security.action.GetPropertyAction
sun.security.action.GetPropertyAction has been visited already.
<2: <sun.security.action.GetPropertyAction: java.lang.String run()> -> <java.lang.Boolean: boolean getBoolean(java.lang.String)>>
Global flow detected: <sun.security.action.GetPropertyAction: java.lang.String run()> -> <java.lang.Boolean: boolean getBoolean(java.lang.String)>

Adding connections to callgraphs in class: java.lang.Boolean


------------------------------------
------------------------------------
Now we build call graphs for class: java.lang.Boolean
Continue with method: <java.lang.Boolean: boolean getBoolean(java.lang.String)>


<3: <java.lang.Boolean: boolean getBoolean(java.lang.String)> -> <java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)>>
Global flow detected: <java.lang.Boolean: boolean getBoolean(java.lang.String)> -> <java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)>

Adding connections to callgraphs in class: java.util.concurrent.ForkJoinPool


------------------------------------
------------------------------------
Now we build call graphs for class: java.util.concurrent.ForkJoinPool
Continue with method: <java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)>


<4: <java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)> -> <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)>>
Global flow detected: <java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)> -> <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)>

Adding connections to callgraphs in class: java.io.FileSystem


------------------------------------
------------------------------------
Now we build call graphs for class: java.io.FileSystem
Continue with method: <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)>


<5: <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)> -> <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>>
Global flow detected: <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)> -> <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>

Adding connections to callgraphs in class: sun.security.util.SecurityProperties


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.util.SecurityProperties
Continue with method: <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>


<6: <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)> -> <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>>
Global flow detected: <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)> -> <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>

Adding connections to callgraphs in class: java.lang.Integer


------------------------------------
------------------------------------
Now we build call graphs for class: java.lang.Integer
Continue with method: <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>


<7: <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> -> <java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()>>
Global flow detected: <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> -> <java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()>

Adding connections to callgraphs in class: java.lang.ProcessHandleImpl


------------------------------------
------------------------------------
Now we build call graphs for class: java.lang.ProcessHandleImpl
Continue with method: <java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()>


<8: <java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()> -> <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>>
Global flow detected: <java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()> -> <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>

Adding connections to callgraphs in class: java.nio.file.FileSystems$DefaultFileSystemHolder


------------------------------------
------------------------------------
Now we build call graphs for class: java.nio.file.FileSystems$DefaultFileSystemHolder
Continue with method: <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>


<9: <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()> -> <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>>
Global flow detected: <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()> -> <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>

Adding connections to callgraphs in class: sun.net.InetAddressCachePolicy$2


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.InetAddressCachePolicy$2
Continue with method: <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>


<10: <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()> -> <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>>
Global flow detected: <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()> -> <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>

Adding connections to callgraphs in class: sun.net.InetAddressCachePolicy$1


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.InetAddressCachePolicy$1
Continue with method: <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>


<11: <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()> -> <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>>
Global flow detected: <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()> -> <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>

Adding connections to callgraphs in class: jdk.internal.logger.BootstrapLogger$DetectBackend$1


------------------------------------
------------------------------------
Now we build call graphs for class: jdk.internal.logger.BootstrapLogger$DetectBackend$1
Continue with method: <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>


<12: <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()> -> <sun.net.www.MimeTable$1: java.lang.Void run()>>
Global flow detected: <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()> -> <sun.net.www.MimeTable$1: java.lang.Void run()>

Adding connections to callgraphs in class: sun.net.www.MimeTable$1
sun.net.www.MimeTable$1 has been visited already.
<13: <sun.net.www.MimeTable$1: java.lang.Void run()> -> <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>>
Global flow detected: <sun.net.www.MimeTable$1: java.lang.Void run()> -> <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>

Adding connections to callgraphs in class: sun.security.util.PropertyExpander


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.util.PropertyExpander
Continue with method: <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>


<14: <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)> -> <java.util.logging.LogManager$1: java.util.logging.LogManager run()>>
Global flow detected: <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)> -> <java.util.logging.LogManager$1: java.util.logging.LogManager run()>

Adding connections to callgraphs in class: java.util.logging.LogManager$1


------------------------------------
------------------------------------
Now we build call graphs for class: java.util.logging.LogManager$1
Continue with method: <java.util.logging.LogManager$1: java.util.logging.LogManager run()>


<15: <java.util.logging.LogManager$1: java.util.logging.LogManager run()> -> <java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()>>
Global flow detected: <java.util.logging.LogManager$1: java.util.logging.LogManager run()> -> <java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()>

Adding connections to callgraphs in class: java.nio.channels.spi.SelectorProvider$Holder


------------------------------------
------------------------------------
Now we build call graphs for class: java.nio.channels.spi.SelectorProvider$Holder
Continue with method: <java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()>


<16: <java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()> -> <sun.net.www.MimeTable: void load()>>
Global flow detected: <java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()> -> <sun.net.www.MimeTable: void load()>

Adding connections to callgraphs in class: sun.net.www.MimeTable


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.www.MimeTable
Continue with method: <sun.net.www.MimeTable: void load()>


<17: <sun.net.www.MimeTable: void load()> -> <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>>
Global flow detected: <sun.net.www.MimeTable: void load()> -> <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>

Adding connections to callgraphs in class: sun.net.www.MimeEntry


------------------------------------
------------------------------------
Now we build call graphs for class: sun.net.www.MimeEntry
Continue with method: <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>


<18: <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)> -> <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>>
Global flow detected: <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)> -> <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>

Adding connections to callgraphs in class: sun.security.jca.ProviderConfig$1


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.jca.ProviderConfig$1
Continue with method: <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>


<19: <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()> -> <java.time.zone.ZoneRulesProvider$1: java.lang.Object run()>>
Global flow detected: <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()> -> <java.time.zone.ZoneRulesProvider$1: java.lang.Object run()>

Adding connections to callgraphs in class: java.time.zone.ZoneRulesProvider$1


------------------------------------
------------------------------------
Now we build call graphs for class: java.time.zone.ZoneRulesProvider$1
Continue with method: <java.time.zone.ZoneRulesProvider$1: java.lang.Object run()>


<20: <java.time.zone.ZoneRulesProvider$1: java.lang.Object run()> -> <sun.security.util.DomainName$Rules$1: java.io.InputStream run()>>
Global flow detected: <java.time.zone.ZoneRulesProvider$1: java.lang.Object run()> -> <sun.security.util.DomainName$Rules$1: java.io.InputStream run()>

Adding connections to callgraphs in class: sun.security.util.DomainName$Rules$1


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.util.DomainName$Rules$1
Continue with method: <sun.security.util.DomainName$Rules$1: java.io.InputStream run()>


<21: <sun.security.util.DomainName$Rules$1: java.io.InputStream run()> -> <sun.security.provider.PolicyFile$1: java.lang.String run()>>
Global flow detected: <sun.security.util.DomainName$Rules$1: java.io.InputStream run()> -> <sun.security.provider.PolicyFile$1: java.lang.String run()>

Adding connections to callgraphs in class: sun.security.provider.PolicyFile$1


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.provider.PolicyFile$1
Continue with method: <sun.security.provider.PolicyFile$1: java.lang.String run()>


<22: <sun.security.provider.PolicyFile$1: java.lang.String run()> -> <sun.security.provider.PolicyFile$4: java.lang.Boolean run()>>
Global flow detected: <sun.security.provider.PolicyFile$1: java.lang.String run()> -> <sun.security.provider.PolicyFile$4: java.lang.Boolean run()>

Adding connections to callgraphs in class: sun.security.provider.PolicyFile$4


------------------------------------
------------------------------------
Now we build call graphs for class: sun.security.provider.PolicyFile$4
Continue with method: <sun.security.provider.PolicyFile$4: java.lang.Boolean run()>


<23: <sun.security.provider.PolicyFile$4: java.lang.Boolean run()> -> <java.util.logging.LogManager: void readConfiguration()>>
Global flow detected: <sun.security.provider.PolicyFile$4: java.lang.Boolean run()> -> <java.util.logging.LogManager: void readConfiguration()>

Adding connections to callgraphs in class: java.util.logging.LogManager


------------------------------------
------------------------------------
Now we build call graphs for class: java.util.logging.LogManager
Continue with method: <java.util.logging.LogManager: void readConfiguration()>


<24: <java.util.logging.LogManager: void readConfiguration()> -> <java.util.logging.LogManager: java.lang.String getConfigurationFileName()>>
<25: <java.util.logging.LogManager: java.lang.String getConfigurationFileName()> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>>
Global flow detected: <java.util.logging.LogManager: java.lang.String getConfigurationFileName()> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>

Adding connections to callgraphs in class: sun.security.action.GetPropertyAction
sun.security.action.GetPropertyAction has been visited already.
<26: <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)> -> <org.springframework.boot.loader.Launcher: void launch(java.lang.String[])>>
The above invocation flows into a source.
<27: <org.springframework.boot.loader.Launcher: void launch(java.lang.String[])> -> <org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>>
Global flow detected: <org.springframework.boot.loader.Launcher: void launch(java.lang.String[])> -> <org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>

Adding connections to callgraphs in class: org.springframework.boot.loader.JarLauncher


------------------------------------
------------------------------------
Now we build call graphs for class: org.springframework.boot.loader.JarLauncher
Continue with method: <org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>


Flows from <java.lang.System: java.lang.String getProperty(java.lang.String)> is finished.
*************************************
*************************************


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String)>" ];
  2 [ label="<sun.security.action.GetPropertyAction: java.lang.String run()>" ];
  3 [ label="<java.lang.Boolean: boolean getBoolean(java.lang.String)>" ];
  4 [ label="<java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)>" ];
  5 [ label="<java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)>" ];
  6 [ label="<sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>" ];
  7 [ label="<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>" ];
  8 [ label="<java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()>" ];
  9 [ label="<java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>" ];
  10 [ label="<sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>" ];
  11 [ label="<sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>" ];
  12 [ label="<jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>" ];
  13 [ label="<sun.net.www.MimeTable$1: java.lang.Void run()>" ];
  14 [ label="<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>" ];
  15 [ label="<java.util.logging.LogManager$1: java.util.logging.LogManager run()>" ];
  16 [ label="<java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()>" ];
  17 [ label="<sun.net.www.MimeTable: void load()>" ];
  18 [ label="<sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>" ];
  19 [ label="<sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>" ];
  20 [ label="<java.time.zone.ZoneRulesProvider$1: java.lang.Object run()>" ];
  21 [ label="<sun.security.util.DomainName$Rules$1: java.io.InputStream run()>" ];
  22 [ label="<sun.security.provider.PolicyFile$1: java.lang.String run()>" ];
  23 [ label="<sun.security.provider.PolicyFile$4: java.lang.Boolean run()>" ];
  24 [ label="<java.util.logging.LogManager: void readConfiguration()>" ];
  25 [ label="<java.util.logging.LogManager: java.lang.String getConfigurationFileName()>" ];
  26 [ label="<sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>" ];
  27 [ label="<org.springframework.boot.loader.Launcher: void launch(java.lang.String[])>" ];
  28 [ label="<org.springframework.boot.loader.JarLauncher: void main(java.lang.String[])>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
}

Loaded 729 methods from JAR files. 

Found 20 Source Methods.
Found 14 Sink Methods.
Found 39 Methods Invoking a Basic Source.
Sources and Sinks collected. 

Methods extraction finished.
All finished.
