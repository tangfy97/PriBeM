***** Loading java classes ***** 

Start reading BOM and BIM...
Basic source methods are loaded with 169 methods.
Basic sink methods are loaded with 350 methods.
External source methods are loaded with 257 methods.
External sink methods are loaded with 365 methods.
Start looking for sources and sinks: 
[spark] Starting analysis ...
[spark] Done!



Start inspections for class: toyForTest.data
Source found in the callgraph: <toyForTest.data: int getter()>...
Start traversal: 

Starting from method: <toyForTest.data: int getter()>
<1: <toyForTest.data: int getter()> -> <toyForTest.A: void bar()>>
Global flow detected: <toyForTest.data: int getter()> -> <toyForTest.A: void bar()>

Adding connections to callgraphs in class: toyForTest.A


***************************
Now we build call graphs for class: toyForTest.A
Continue with method: <toyForTest.A: void bar()>


strict digraph G {
  1 [ label="<toyForTest.A: void bar()>" ];
  2 [ label="<toyForTest.A: void foo()>" ];
  3 [ label="<toyForTest.Main: void doStuff()>" ];
  1 -> 2;
  2 -> 3;
}

Flows from <toyForTest.data: int getter()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<toyForTest.data: int getter()>" ];
  2 [ label="<toyForTest.A: void bar()>" ];
  1 -> 2;
}

Source found in the callgraph: <java.util.Scanner: int nextInt()>...
Start traversal: 

Starting from method: <java.util.Scanner: int nextInt()>
<1: <java.util.Scanner: int nextInt()> -> <toyForTest.data: int getter()>>
The above invocation flows into a source.
<2: <toyForTest.data: int getter()> -> <toyForTest.A: void bar()>>
Global flow detected: <toyForTest.data: int getter()> -> <toyForTest.A: void bar()>

Adding connections to callgraphs in class: toyForTest.A
toyForTest.A has been visited already.
Flows from <java.util.Scanner: int nextInt()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Scanner: int nextInt()>" ];
  2 [ label="<toyForTest.data: int getter()>" ];
  3 [ label="<toyForTest.A: void bar()>" ];
  1 -> 2;
  2 -> 3;
}

Loaded 8 methods from JAR files. 

Found 2 Source Methods.
Found 1 Sink Methods.
Sources and Sinks collected. 

Methods extraction finished.
All finished.
