***** Loading java classes ***** 

Start reading BOM and BIM...
BOM is loaded with 169 methods.
BIM is loaded with 350 methods.
EOM is loaded with 257 methods.
EIM is loaded with 365 methods.
Start looking for sources and sinks: 
[spark] Starting analysis ...
[spark] Done!


***************************
Now we build call graphs for class: org.gbif.dwc.text.ArchiveFile


Source here: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>
Edges to Source: STATIC edge: $r25 = staticinvoke <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>($r24) in <org.gbif.dwc.text.Archive: void sortFiles()> ==> <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>
Edges to Source: STATIC edge: $r6 = staticinvoke <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>($r5) in <org.gbif.dwc.text.Archive: void sortFiles()> ==> <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: <java.io.File: java.lang.String getName()>
1: <java.io.File: java.lang.String getName()> -> <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>
Global flow detected: <java.io.File: java.lang.String getName()> -> <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>
Flows from source is finished.


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getName()>" ];
  2 [ label="<org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>" ];
  1 -> 2;
}

Start traversal for source: <java.io.File: java.io.File getParentFile()>...
Starting from source: <java.io.File: java.io.File getParentFile()>
1: <java.io.File: java.io.File getParentFile()> -> <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>
Global flow detected: <java.io.File: java.io.File getParentFile()> -> <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>
Flows from source is finished.


strict digraph G {
  1 [ label="<java.io.File: java.io.File getParentFile()>" ];
  2 [ label="<org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>" ];
  1 -> 2;
}

Start traversal for source: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>...
Starting from source: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>
Flows from source is finished.


strict digraph G {
}



***************************
Now we build call graphs for class: org.gbif.file.CSVReaderFactory


Source here: <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>
Edges to Source: STATIC edge: $r2 = staticinvoke <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>(r0, $r1) in <org.gbif.file.CSVReaderFactory: org.gbif.file.CSVReader build(java.io.File)> ==> <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>
Start traversal for source: <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>...
Starting from source: <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>
1: <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)> -> <org.gbif.file.CSVReaderFactory: org.gbif.file.CSVReader build(java.io.File)>
Flows from source is finished.


strict digraph G {
  1 [ label="<org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>" ];
  2 [ label="<org.gbif.file.CSVReaderFactory: org.gbif.file.CSVReader build(java.io.File)>" ];
  1 -> 2;
}

Start traversal for source: <java.io.File: java.lang.String getAbsolutePath()>...
Starting from source: <java.io.File: java.lang.String getAbsolutePath()>
1: <java.io.File: java.lang.String getAbsolutePath()> -> <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>
Global flow detected: <java.io.File: java.lang.String getAbsolutePath()> -> <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>
2: <org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)> -> <org.gbif.file.CSVReaderFactory: org.gbif.file.CSVReader build(java.io.File)>
Flows from source is finished.


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getAbsolutePath()>" ];
  2 [ label="<org.gbif.file.CSVReaderFactory: org.gbif.dwc.text.ArchiveFile buildArchiveFile(java.io.File,java.lang.String)>" ];
  3 [ label="<org.gbif.file.CSVReaderFactory: org.gbif.file.CSVReader build(java.io.File)>" ];
  1 -> 2;
  2 -> 3;
}



***************************
Now we build call graphs for class: org.gbif.dwc.tools.CoreIdRenamer


Source here: <org.gbif.dwc.tools.CoreIdRenamer: void rewriteFile(org.gbif.dwc.text.ArchiveFile,java.util.Map,java.util.List)>


***************************
Now we build call graphs for class: org.gbif.dwc.text.DwcaWriter


Source here: <org.gbif.dwc.text.DwcaWriter: void addRowType(org.gbif.dwc.terms.ConceptTerm)>


***************************
Now we build call graphs for class: org.gbif.dwc.text.ArchiveFactory$MetaHandler


Source here: <org.gbif.dwc.text.ArchiveFactory$MetaHandler: void makeLocationPathsAbsolute(org.gbif.dwc.text.ArchiveFile,java.io.File)>


***************************
Now we build call graphs for class: org.gbif.dwc.text.Archive


Source here: <org.gbif.dwc.text.Archive: org.gbif.metadata.BasicMetadata getMetadata()>


Source here: <org.gbif.dwc.text.Archive: java.lang.String toString()>
Start traversal for source: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>...
Starting from source: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>
1: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)> -> <org.gbif.dwc.text.Archive: void sortFiles()>
Global flow detected: <org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)> -> <org.gbif.dwc.text.Archive: void sortFiles()>
2: <org.gbif.dwc.text.Archive: void sortFiles()> -> <org.gbif.dwc.text.Archive: void access$5(org.gbif.dwc.text.Archive)>
Flows from source is finished.


strict digraph G {
  1 [ label="<org.gbif.dwc.text.ArchiveFile: java.io.File getLocationFileSorted(java.io.File)>" ];
  2 [ label="<org.gbif.dwc.text.Archive: void sortFiles()>" ];
  3 [ label="<org.gbif.dwc.text.Archive: void access$5(org.gbif.dwc.text.Archive)>" ];
  1 -> 2;
  2 -> 3;
}



***************************
Now we build call graphs for class: org.gbif.file.CSVReader


Source here: <org.gbif.file.CSVReader: java.lang.String[] next()>
Edges to Source: VIRTUAL edge: $r1 = virtualinvoke r0.<org.gbif.file.CSVReader: java.lang.String[] next()>() in <org.gbif.file.CSVReaderFactory: java.lang.Character likelyQuoteChar(org.gbif.file.CSVReader)> ==> <org.gbif.file.CSVReader: java.lang.String[] next()>
Edges to Source: VIRTUAL edge: $r14 = virtualinvoke $r12.<org.gbif.file.CSVReader: java.lang.String[] next()>() in <org.gbif.dwc.text.Archive$ArchiveDwcIterator: void <init>(org.gbif.dwc.text.Archive)> ==> <org.gbif.file.CSVReader: java.lang.String[] next()>
Edges to Source: VIRTUAL edge: $r1 = virtualinvoke r0.<org.gbif.file.CSVReader: java.lang.String[] next()>() in <org.gbif.file.CSVReaderFactory: int consistentRowSize(org.gbif.file.CSVReader)> ==> <org.gbif.file.CSVReader: java.lang.String[] next()>
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: <java.io.BufferedReader: java.lang.String readLine()>
1: <java.io.BufferedReader: java.lang.String readLine()> -> <org.gbif.file.CSVReader: java.lang.String[] next()>
Global flow detected: <java.io.BufferedReader: java.lang.String readLine()> -> <org.gbif.file.CSVReader: java.lang.String[] next()>
Flows from source is finished.


strict digraph G {
  1 [ label="<java.io.BufferedReader: java.lang.String readLine()>" ];
  2 [ label="<org.gbif.file.CSVReader: java.lang.String[] next()>" ];
  1 -> 2;
}

Start traversal for source: <org.gbif.file.CSVReader: java.lang.String[] next()>...
Starting from source: <org.gbif.file.CSVReader: java.lang.String[] next()>
Flows from source is finished.


strict digraph G {
}



***************************
Now we build call graphs for class: org.gbif.dwc.text.ArchiveFactory


Source here: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>
Edges to Source: STATIC edge: $r1 = staticinvoke <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>(r0, 1) in <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)> ==> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: <java.io.File: java.lang.String getName()>
1: <java.io.File: java.lang.String getName()> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>
Global flow detected: <java.io.File: java.lang.String getName()> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>
2: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)>
Flows from source is finished.


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getName()>" ];
  2 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>" ];
  3 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)>" ];
  1 -> 2;
  2 -> 3;
}

Start traversal for source: <java.io.File: java.io.File getParentFile()>...
Starting from source: <java.io.File: java.io.File getParentFile()>
1: <java.io.File: java.io.File getParentFile()> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>
Global flow detected: <java.io.File: java.io.File getParentFile()> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>
2: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)>
Flows from source is finished.


strict digraph G {
  1 [ label="<java.io.File: java.io.File getParentFile()>" ];
  2 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>" ];
  3 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)>" ];
  1 -> 2;
  2 -> 3;
}

Start traversal for source: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>...
Starting from source: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>
1: <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)> -> <org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)>
Flows from source is finished.


strict digraph G {
  1 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File,boolean)>" ];
  2 [ label="<org.gbif.dwc.text.ArchiveFactory: org.gbif.dwc.text.Archive openArchive(java.io.File)>" ];
  1 -> 2;
}

Loaded 1101 methods from JAR files. 

Found 16 Source Methods.
Found 3 Sink Methods.
Sources and Sinks collected. 

Methods extraction finished.
All finished.
