***** Loading java classes ***** 

Start reading BOM and BIM...
Basic source methods are loaded with 168 methods.
Basic sink methods are loaded with 350 methods.
External source methods are loaded with 257 methods.
External sink methods are loaded with 365 methods.
Start looking for sources and sinks: 
[spark] Starting analysis ...
[spark] Done! 


Source found in the callgraph: <java.util.Arrays: int hashCode(byte[])>...
In class: org.whispersystems.libsignal.ecc.ECPublicKey
Start traversal: 

Starting from method: <java.util.Arrays: int hashCode(byte[])>
<1: <java.util.Arrays: int hashCode(byte[])> -> <java.security.cert.Certificate: int hashCode()>>
<2: <java.security.cert.Certificate: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>>
<3: <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>>
<4: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>>
Global flow detected: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.Cache$EqualByteArray


***************************
Now we build call graphs for class: sun.security.util.Cache$EqualByteArray
Continue with method: <sun.security.util.Cache$EqualByteArray: int hashCode()>


strict digraph G {
  1 [ label="<sun.security.util.Cache$EqualByteArray: int hashCode()>" ];
  2 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  3 [ label="<java.lang.Object: java.lang.String toString()>" ];
  4 [ label="<java.util.AbstractSet: int hashCode()>" ];
  5 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  6 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  7 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  8 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  9 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  10 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  11 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  12 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  13 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  14 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  15 [ label="<java.util.AbstractList: int hashCode()>" ];
  16 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  17 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  18 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  19 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  20 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  21 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  22 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  23 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  24 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  25 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  26 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  27 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  28 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  29 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  30 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  31 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  32 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  33 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
}

<5: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>>
Global flow detected: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.ObjectIdentifier


***************************
Now we build call graphs for class: sun.security.util.ObjectIdentifier
Continue with method: <sun.security.util.ObjectIdentifier: int hashCode()>


strict digraph G {
  1 [ label="<sun.security.util.ObjectIdentifier: int hashCode()>" ];
  2 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  3 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  4 [ label="<java.util.AbstractSet: int hashCode()>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  6 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  7 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  8 [ label="<sun.security.util.ObjectIdentifier: sun.security.util.ObjectIdentifier of(sun.security.util.KnownOIDs)>" ];
  9 [ label="<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>" ];
  10 [ label="<sun.security.util.ObjectIdentifier: sun.security.util.ObjectIdentifier of(java.lang.String)>" ];
  11 [ label="<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>" ];
  12 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  13 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  14 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  15 [ label="<sun.security.x509.Extension: int hashCode()>" ];
  16 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  17 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  18 [ label="<sun.security.x509.CertificatePolicyId: int hashCode()>" ];
  19 [ label="<sun.security.x509.OIDName: int hashCode()>" ];
  20 [ label="<sun.security.x509.OtherName: int hashCode()>" ];
  21 [ label="<sun.security.x509.AccessDescription: int hashCode()>" ];
  22 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  23 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  24 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  25 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  26 [ label="<java.lang.Object: java.lang.String toString()>" ];
  27 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  28 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  29 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  30 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  31 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  32 [ label="<java.util.AbstractList: int hashCode()>" ];
  33 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  34 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  35 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  36 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  37 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  38 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  39 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  40 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  41 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  42 [ label="<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>" ];
  43 [ label="<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>" ];
  44 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
}

Flows from <java.util.Arrays: int hashCode(byte[])> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Arrays: int hashCode(byte[])>" ];
  2 [ label="<java.security.cert.Certificate: int hashCode()>" ];
  3 [ label="<java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>" ];
  4 [ label="<java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>" ];
  5 [ label="<sun.security.util.Cache$EqualByteArray: int hashCode()>" ];
  6 [ label="<sun.security.util.ObjectIdentifier: int hashCode()>" ];
  7 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  8 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  9 [ label="<java.util.AbstractSet: int hashCode()>" ];
  10 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  11 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  12 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  13 [ label="<sun.security.util.ObjectIdentifier: sun.security.util.ObjectIdentifier of(sun.security.util.KnownOIDs)>" ];
  14 [ label="<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>" ];
  15 [ label="<sun.security.util.ObjectIdentifier: sun.security.util.ObjectIdentifier of(java.lang.String)>" ];
  16 [ label="<sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>" ];
  17 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  18 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  19 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  20 [ label="<sun.security.x509.Extension: int hashCode()>" ];
  21 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  22 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  23 [ label="<sun.security.x509.CertificatePolicyId: int hashCode()>" ];
  24 [ label="<sun.security.x509.OIDName: int hashCode()>" ];
  25 [ label="<sun.security.x509.OtherName: int hashCode()>" ];
  26 [ label="<sun.security.x509.AccessDescription: int hashCode()>" ];
  27 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  28 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  29 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  30 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  31 [ label="<java.lang.Object: java.lang.String toString()>" ];
  32 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  33 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  34 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  35 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  36 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  37 [ label="<java.util.AbstractList: int hashCode()>" ];
  38 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  39 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  40 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  41 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  42 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  43 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  44 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  45 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  46 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  47 [ label="<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>" ];
  48 [ label="<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>" ];
  49 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  46 -> 47;
  47 -> 48;
  48 -> 49;
}

Source found in the callgraph: <java.util.Arrays: int hashCode(byte[])>...
In class: org.signal.libsignal.metadata.SealedSessionCipher
Start traversal: 

Starting from method: <java.util.Arrays: int hashCode(byte[])>
<1: <java.util.Arrays: int hashCode(byte[])> -> <java.security.cert.Certificate: int hashCode()>>
<2: <java.security.cert.Certificate: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>>
<3: <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>>
<4: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>>
Global flow detected: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.Cache$EqualByteArray
sun.security.util.Cache$EqualByteArray has been visited already.
<5: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>>
Global flow detected: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.ObjectIdentifier
sun.security.util.ObjectIdentifier has been visited already.
Flows from <java.util.Arrays: int hashCode(byte[])> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Arrays: int hashCode(byte[])>" ];
  2 [ label="<java.security.cert.Certificate: int hashCode()>" ];
  3 [ label="<java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>" ];
  4 [ label="<java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>" ];
  5 [ label="<sun.security.util.Cache$EqualByteArray: int hashCode()>" ];
  6 [ label="<sun.security.util.ObjectIdentifier: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
}

Source found in the callgraph: <java.util.Arrays: int hashCode(byte[])>...
In class: org.whispersystems.libsignal.groups.state.InMemorySenderKeyStore
Start traversal: 

Starting from method: <java.util.Arrays: int hashCode(byte[])>
<1: <java.util.Arrays: int hashCode(byte[])> -> <java.security.cert.Certificate: int hashCode()>>
<2: <java.security.cert.Certificate: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>>
<3: <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>>
<4: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>>
Global flow detected: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.Cache$EqualByteArray
sun.security.util.Cache$EqualByteArray has been visited already.
<5: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>>
Global flow detected: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.ObjectIdentifier
sun.security.util.ObjectIdentifier has been visited already.
Flows from <java.util.Arrays: int hashCode(byte[])> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Arrays: int hashCode(byte[])>" ];
  2 [ label="<java.security.cert.Certificate: int hashCode()>" ];
  3 [ label="<java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>" ];
  4 [ label="<java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>" ];
  5 [ label="<sun.security.util.Cache$EqualByteArray: int hashCode()>" ];
  6 [ label="<sun.security.util.ObjectIdentifier: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
}

Source found in the callgraph: <java.lang.String: int hashCode()>...
In class: org.whispersystems.libsignal.SignalProtocolAddress
Start traversal: 

Starting from method: <java.lang.String: int hashCode()>
<1: <java.lang.String: int hashCode()> -> <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>>
<2: <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>>
<3: <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>>
<4: <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>>
<5: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable


***************************
Now we build call graphs for class: jdk.internal.org.objectweb.asm.SymbolTable
Continue with method: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>


strict digraph G {
  1 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>" ];
  2 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int addType(java.lang.String)>" ];
  3 [ label="<jdk.internal.org.objectweb.asm.Frame: int getInitializedType(jdk.internal.org.objectweb.asm.SymbolTable,int)>" ];
  4 [ label="<jdk.internal.org.objectweb.asm.Frame: boolean merge(jdk.internal.org.objectweb.asm.SymbolTable,int,int[],int)>" ];
  5 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int addMergedType(int,int)>" ];
  6 [ label="<jdk.internal.org.objectweb.asm.Frame: void setInputFrameFromDescriptor(jdk.internal.org.objectweb.asm.SymbolTable,int,java.lang.String,int)>" ];
  7 [ label="<jdk.internal.org.objectweb.asm.Frame: int getAbstractTypeFromDescriptor(jdk.internal.org.objectweb.asm.SymbolTable,java.lang.String,int)>" ];
  8 [ label="<jdk.internal.org.objectweb.asm.Frame: void execute(int,int,jdk.internal.org.objectweb.asm.Symbol,jdk.internal.org.objectweb.asm.SymbolTable)>" ];
  9 [ label="<jdk.internal.org.objectweb.asm.Frame: int getAbstractTypeFromInternalName(jdk.internal.org.objectweb.asm.SymbolTable,java.lang.String)>" ];
  10 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: void addConstantUtf8Reference(int,int,java.lang.String)>" ];
  11 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addConstantUtf8Reference(int,java.lang.String)>" ];
  12 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addConstantPackage(java.lang.String)>" ];
  13 [ label="<jdk.internal.org.objectweb.asm.ModuleWriter: void visitExport(java.lang.String,int,java.lang.String[])>" ];
  14 [ label="<jdk.internal.org.objectweb.asm.ModuleWriter: void visitPackage(java.lang.String)>" ];
  15 [ label="<jdk.internal.org.objectweb.asm.ModuleWriter: void visitOpen(java.lang.String,int,java.lang.String[])>" ];
  16 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addConstantModule(java.lang.String)>" ];
  17 [ label="<jdk.internal.org.objectweb.asm.ModuleWriter: void visitRequire(java.lang.String,int,java.lang.String)>" ];
  18 [ label="<jdk.internal.org.objectweb.asm.ClassWriter: jdk.internal.org.objectweb.asm.ModuleVisitor visitModule(java.lang.String,int,java.lang.String)>" ];
  19 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addConstantMethodType(java.lang.String)>" ];
  20 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addConstant(java.lang.Object)>" ];
  21 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>" ];
  22 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addConstantInvokeDynamic(java.lang.String,java.lang.String,jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>" ];
  23 [ label="<jdk.internal.org.objectweb.asm.MethodWriter: void visitInvokeDynamicInsn(java.lang.String,java.lang.String,jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>" ];
  24 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addConstantDynamic(java.lang.String,java.lang.String,jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>" ];
  25 [ label="<jdk.internal.org.objectweb.asm.MethodWriter: void visitLdcInsn(java.lang.Object)>" ];
  26 [ label="<jdk.internal.org.objectweb.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)>" ];
  27 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addConstantString(java.lang.String)>" ];
  28 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addConstantClass(java.lang.String)>" ];
  29 [ label="<jdk.internal.org.objectweb.asm.ClassWriter: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>" ];
  30 [ label="<jdk.internal.org.objectweb.asm.ClassWriter: void visitPermittedSubclassExperimental(java.lang.String)>" ];
  31 [ label="<jdk.internal.org.objectweb.asm.ClassWriter: void visitNestMember(java.lang.String)>" ];
  32 [ label="<jdk.internal.org.objectweb.asm.ClassWriter: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)>" ];
  33 [ label="<jdk.internal.org.objectweb.asm.ClassWriter: void visitNestHost(java.lang.String)>" ];
  34 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.SymbolTable$Entry addConstantMemberReference(int,java.lang.String,java.lang.String,java.lang.String)>" ];
  35 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addConstantMethodref(java.lang.String,java.lang.String,java.lang.String,boolean)>" ];
  36 [ label="<jdk.internal.org.objectweb.asm.MethodWriter: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>" ];
  37 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addConstantMethodHandle(int,java.lang.String,java.lang.String,java.lang.String,boolean)>" ];
  38 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addConstantFieldref(java.lang.String,java.lang.String,java.lang.String)>" ];
  39 [ label="<jdk.internal.org.objectweb.asm.MethodWriter: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>" ];
  40 [ label="<jdk.internal.org.objectweb.asm.MethodWriter: void putFrameType(java.lang.Object)>" ];
  41 [ label="<jdk.internal.org.objectweb.asm.Frame: void putAbstractType(jdk.internal.org.objectweb.asm.SymbolTable,int,jdk.internal.org.objectweb.asm.ByteVector)>" ];
  42 [ label="<jdk.internal.org.objectweb.asm.MethodWriter: void visitMultiANewArrayInsn(java.lang.String,int)>" ];
  43 [ label="<jdk.internal.org.objectweb.asm.MethodWriter: void visitTypeInsn(int,java.lang.String)>" ];
  44 [ label="<jdk.internal.org.objectweb.asm.MethodWriter: void visitTryCatchBlock(jdk.internal.org.objectweb.asm.Label,jdk.internal.org.objectweb.asm.Label,jdk.internal.org.objectweb.asm.Label,java.lang.String)>" ];
  45 [ label="<jdk.internal.org.objectweb.asm.ModuleWriter: void visitProvide(java.lang.String,java.lang.String[])>" ];
  46 [ label="<jdk.internal.org.objectweb.asm.ModuleWriter: void visitUse(java.lang.String)>" ];
  47 [ label="<jdk.internal.org.objectweb.asm.ModuleWriter: void visitMainClass(java.lang.String)>" ];
  48 [ label="<jdk.internal.org.objectweb.asm.ClassWriter: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>" ];
  49 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int setMajorVersionAndClassName(int,java.lang.String)>" ];
  50 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: void addConstantUtf8(int,java.lang.String)>" ];
  51 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>" ];
  52 [ label="<jdk.internal.org.objectweb.asm.AnnotationWriter: void putAnnotations(jdk.internal.org.objectweb.asm.SymbolTable,jdk.internal.org.objectweb.asm.AnnotationWriter,jdk.internal.org.objectweb.asm.AnnotationWriter,jdk.internal.org.objectweb.asm.AnnotationWriter,jdk.internal.org.objectweb.asm.AnnotationWriter,jdk.internal.org.objectweb.asm.ByteVector)>" ];
  53 [ label="<jdk.internal.org.objectweb.asm.ClassWriter: byte[] toByteArray()>" ];
  54 [ label="<jdk.internal.org.objectweb.asm.AnnotationWriter: jdk.internal.org.objectweb.asm.AnnotationWriter create(jdk.internal.org.objectweb.asm.SymbolTable,int,jdk.internal.org.objectweb.asm.TypePath,java.lang.String,jdk.internal.org.objectweb.asm.AnnotationWriter)>" ];
  55 [ label="<jdk.internal.org.objectweb.asm.AnnotationWriter: jdk.internal.org.objectweb.asm.AnnotationWriter create(jdk.internal.org.objectweb.asm.SymbolTable,java.lang.String,jdk.internal.org.objectweb.asm.AnnotationWriter)>" ];
  56 [ label="<jdk.internal.org.objectweb.asm.Attribute: void putAttributes(jdk.internal.org.objectweb.asm.SymbolTable,byte[],int,int,int,jdk.internal.org.objectweb.asm.ByteVector)>" ];
  57 [ label="<jdk.internal.org.objectweb.asm.Attribute: int computeAttributesSize(jdk.internal.org.objectweb.asm.SymbolTable,byte[],int,int,int)>" ];
  58 [ label="<jdk.internal.org.objectweb.asm.FieldWriter: int computeFieldInfoSize()>" ];
  59 [ label="<jdk.internal.org.objectweb.asm.FieldWriter: void putFieldInfo(jdk.internal.org.objectweb.asm.ByteVector)>" ];
  60 [ label="<jdk.internal.org.objectweb.asm.Attribute: int computeAttributesSize(jdk.internal.org.objectweb.asm.SymbolTable,int,int)>" ];
  61 [ label="<jdk.internal.org.objectweb.asm.Attribute: void putAttributes(jdk.internal.org.objectweb.asm.SymbolTable,int,int,jdk.internal.org.objectweb.asm.ByteVector)>" ];
  62 [ label="<jdk.internal.org.objectweb.asm.MethodWriter: jdk.internal.org.objectweb.asm.AnnotationVisitor visitLocalVariableAnnotation(int,jdk.internal.org.objectweb.asm.TypePath,jdk.internal.org.objectweb.asm.Label[],jdk.internal.org.objectweb.asm.Label[],int[],java.lang.String,boolean)>" ];
  63 [ label="<jdk.internal.org.objectweb.asm.MethodWriter: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,jdk.internal.org.objectweb.asm.Label,jdk.internal.org.objectweb.asm.Label,int)>" ];
  64 [ label="<jdk.internal.org.objectweb.asm.MethodWriter: void visitParameter(java.lang.String,int)>" ];
  65 [ label="<jdk.internal.org.objectweb.asm.MethodWriter: int computeMethodInfoSize()>" ];
  66 [ label="<jdk.internal.org.objectweb.asm.MethodWriter: void putMethodInfo(jdk.internal.org.objectweb.asm.ByteVector)>" ];
  67 [ label="<jdk.internal.org.objectweb.asm.AnnotationWriter: int computeAnnotationsSize(java.lang.String)>" ];
  68 [ label="<jdk.internal.org.objectweb.asm.AnnotationWriter: jdk.internal.org.objectweb.asm.AnnotationVisitor visitArray(java.lang.String)>" ];
  69 [ label="<jdk.internal.org.objectweb.asm.AnnotationWriter: jdk.internal.org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)>" ];
  70 [ label="<jdk.internal.org.objectweb.asm.AnnotationWriter: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>" ];
  71 [ label="<jdk.internal.org.objectweb.asm.ModuleWriter: int computeAttributesSize()>" ];
  72 [ label="<jdk.internal.org.objectweb.asm.ModuleWriter: void putAttributes(jdk.internal.org.objectweb.asm.ByteVector)>" ];
  73 [ label="<jdk.internal.org.objectweb.asm.ClassWriter: void visitSource(java.lang.String,java.lang.String)>" ];
  74 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int addConstantNameAndType(java.lang.String,java.lang.String)>" ];
  75 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addConstantDynamicOrInvokeDynamicReference(int,java.lang.String,java.lang.String,int)>" ];
  76 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: void putBootstrapMethods(jdk.internal.org.objectweb.asm.ByteVector)>" ];
  77 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int computeBootstrapMethodsSize()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  46 -> 47;
  47 -> 48;
  48 -> 49;
  49 -> 50;
  50 -> 51;
  51 -> 52;
  52 -> 53;
  53 -> 54;
  54 -> 55;
  55 -> 56;
  56 -> 57;
  57 -> 58;
  58 -> 59;
  59 -> 60;
  60 -> 61;
  61 -> 62;
  62 -> 63;
  63 -> 64;
  64 -> 65;
  65 -> 66;
  66 -> 67;
  67 -> 68;
  68 -> 69;
  69 -> 70;
  70 -> 71;
  71 -> 72;
  72 -> 73;
  73 -> 74;
  74 -> 75;
  75 -> 76;
  76 -> 77;
}

<6: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>>
<7: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>

Adding connections to callgraphs in class: sun.util.PreHashedMap


***************************
Now we build call graphs for class: sun.util.PreHashedMap
Continue with method: <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>


strict digraph G {
  1 [ label="<sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>" ];
  2 [ label="<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>" ];
  3 [ label="<sun.nio.cs.StandardCharsets: java.util.Map cache()>" ];
  4 [ label="<sun.nio.cs.StandardCharsets: java.nio.charset.Charset cache(java.lang.String,java.nio.charset.Charset)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

<8: <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)> -> <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>>
<9: <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)> -> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>>
<10: <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)> -> <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>>
<11: <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>>
<12: <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)> -> <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>>
<13: <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)> -> <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>>
<14: <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)> -> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>>
<15: <java.util.Hashtable: java.lang.Object get(java.lang.Object)> -> <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>>
<16: <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)> -> <java.util.ResourceBundle$CacheKey: int hashCode()>>
<17: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>>
Global flow detected: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<18: <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>>
<19: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>>
<20: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>>
<21: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.Handle


***************************
Now we build call graphs for class: jdk.internal.org.objectweb.asm.Handle
Continue with method: <jdk.internal.org.objectweb.asm.Handle: int hashCode()>


strict digraph G {
  1 [ label="<jdk.internal.org.objectweb.asm.Handle: int hashCode()>" ];
  2 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  3 [ label="<jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>" ];
  4 [ label="<java.lang.Object: java.lang.String toString()>" ];
  5 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
}

<22: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>>
Global flow detected: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<23: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)> -> <java.util.Arrays: int hashCode(java.lang.Object[])>>
<24: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>>
Global flow detected: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.ConstantDynamic


***************************
Now we build call graphs for class: jdk.internal.org.objectweb.asm.ConstantDynamic
Continue with method: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>


strict digraph G {
  1 [ label="<jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>" ];
  2 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  3 [ label="<java.lang.Object: java.lang.String toString()>" ];
  4 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

<25: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>>
Global flow detected: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter


***************************
Now we build call graphs for class: sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter
Continue with method: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>


strict digraph G {
  1 [ label="<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>" ];
  2 [ label="<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Object getObject(java.util.spi.LocaleServiceProvider,java.util.Locale,java.lang.String,java.lang.Object[])>" ];
  3 [ label="<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>" ];
  1 -> 2;
  2 -> 3;
}

<26: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>>
Global flow detected: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>

Adding connections to callgraphs in class: sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter


***************************
Now we build call graphs for class: sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter
Continue with method: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>


strict digraph G {
  1 [ label="<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>" ];
  2 [ label="<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String examineAliases(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,java.lang.String,int,java.util.Map)>" ];
  3 [ label="<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getObject(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,java.lang.Object[])>" ];
  4 [ label="<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.Object getObject(java.util.spi.LocaleServiceProvider,java.util.Locale,java.lang.String,java.lang.Object[])>" ];
  5 [ label="<sun.util.locale.provider.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,java.lang.Object[])>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
}

<27: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>>
Global flow detected: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.jimage.ImageReader$Node


***************************
Now we build call graphs for class: jdk.internal.jimage.ImageReader$Node
Continue with method: <jdk.internal.jimage.ImageReader$Node: int hashCode()>


strict digraph G {
  1 [ label="<jdk.internal.jimage.ImageReader$Node: int hashCode()>" ];
  2 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  3 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  6 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  7 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  8 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  9 [ label="<java.util.AbstractSet: int hashCode()>" ];
  10 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  11 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  12 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  13 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  14 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  15 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  16 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  17 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  18 [ label="<java.lang.Object: java.lang.String toString()>" ];
  19 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  20 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  21 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  22 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  23 [ label="<java.util.AbstractList: int hashCode()>" ];
  24 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  25 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  26 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  27 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  28 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  29 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  30 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  31 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  32 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  33 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
}

<28: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>>
Global flow detected: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.DerValue


***************************
Now we build call graphs for class: sun.security.util.DerValue
Continue with method: <sun.security.util.DerValue: int hashCode()>


strict digraph G {
  1 [ label="<sun.security.util.DerValue: int hashCode()>" ];
  2 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  3 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  6 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  7 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  8 [ label="<java.util.AbstractSet: int hashCode()>" ];
  9 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  10 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  11 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  12 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  13 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  14 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  15 [ label="<java.lang.Object: java.lang.String toString()>" ];
  16 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  17 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  18 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  19 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  20 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  21 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  22 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  23 [ label="<java.util.AbstractList: int hashCode()>" ];
  24 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  25 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  26 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  27 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  28 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  29 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  30 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  31 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  32 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  33 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
}

<29: <sun.security.util.DerValue: int hashCode()> -> <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>>
<30: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>>
Global flow detected: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>

Adding connections to callgraphs in class: sun.security.jca.ProviderConfig


***************************
Now we build call graphs for class: sun.security.jca.ProviderConfig
Continue with method: <sun.security.jca.ProviderConfig: int hashCode()>


strict digraph G {
  1 [ label="<sun.security.jca.ProviderConfig: int hashCode()>" ];
  2 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  3 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  6 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  7 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  8 [ label="<java.util.AbstractSet: int hashCode()>" ];
  9 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  10 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  11 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  12 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  13 [ label="<java.util.AbstractList: int hashCode()>" ];
  14 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  15 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  16 [ label="<java.lang.Object: java.lang.String toString()>" ];
  17 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  18 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  19 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  20 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  21 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  22 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  23 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  24 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  25 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  26 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  27 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  28 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  29 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  30 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  31 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  32 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  33 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
}

<31: <sun.security.jca.ProviderConfig: int hashCode()> -> <java.util.ArrayList: int hashCodeRange(int,int)>>
<32: <java.util.ArrayList: int hashCodeRange(int,int)> -> <java.util.concurrent.ConcurrentHashMap: int hashCode()>>
<33: <java.util.concurrent.ConcurrentHashMap: int hashCode()> -> <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>>
<34: <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()> -> <java.io.WinNTFileSystem: int hashCode(java.io.File)>>
<35: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>>
Global flow detected: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>

Adding connections to callgraphs in class: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator


***************************
Now we build call graphs for class: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator
Continue with method: <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>


strict digraph G {
}

<36: <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)> -> <java.util.Calendar$Builder: java.util.Calendar build()>>
<37: <java.util.Calendar$Builder: java.util.Calendar build()> -> <javax.crypto.CryptoPermission: int hashCode()>>
<38: <javax.crypto.CryptoPermission: int hashCode()> -> <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>>
<39: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>>
Global flow detected: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>

Adding connections to callgraphs in class: jdk.internal.util.Preconditions


***************************
Now we build call graphs for class: jdk.internal.util.Preconditions
Continue with method: <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>


strict digraph G {
  1 [ label="<jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>" ];
  2 [ label="<jdk.internal.util.Preconditions: java.lang.RuntimeException outOfBounds(java.util.function.BiFunction,java.lang.String,java.lang.Integer[])>" ];
  3 [ label="<jdk.internal.util.Preconditions: java.lang.RuntimeException outOfBoundsCheckFromIndexSize(java.util.function.BiFunction,int,int,int)>" ];
  4 [ label="<jdk.internal.util.Preconditions: int checkFromIndexSize(int,int,int,java.util.function.BiFunction)>" ];
  5 [ label="<java.util.Objects: int checkFromIndexSize(int,int,int)>" ];
  6 [ label="<jdk.internal.util.Preconditions: java.lang.RuntimeException outOfBoundsCheckIndex(java.util.function.BiFunction,int,int)>" ];
  7 [ label="<jdk.internal.util.Preconditions: int checkIndex(int,int,java.util.function.BiFunction)>" ];
  8 [ label="<java.util.Objects: int checkIndex(int,int)>" ];
  9 [ label="<jdk.internal.util.Preconditions: java.lang.RuntimeException outOfBoundsCheckFromToIndex(java.util.function.BiFunction,int,int,int)>" ];
  10 [ label="<jdk.internal.util.Preconditions: int checkFromToIndex(int,int,int,java.util.function.BiFunction)>" ];
  11 [ label="<java.util.Objects: int checkFromToIndex(int,int,int)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
}

<40: <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>>
<41: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>>
<42: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)> -> <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>>
<43: <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>>
<44: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>>
Global flow detected: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.LocaleExtensions


***************************
Now we build call graphs for class: sun.util.locale.LocaleExtensions
Continue with method: <sun.util.locale.LocaleExtensions: int hashCode()>


strict digraph G {
  1 [ label="<sun.util.locale.LocaleExtensions: int hashCode()>" ];
  2 [ label="<java.util.Locale: int hashCode()>" ];
  3 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  4 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  5 [ label="<java.lang.Object: java.lang.String toString()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
}

<45: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>>
Global flow detected: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.BaseLocale


***************************
Now we build call graphs for class: sun.util.locale.BaseLocale
Continue with method: <sun.util.locale.BaseLocale: int hashCode()>


strict digraph G {
  1 [ label="<sun.util.locale.BaseLocale: int hashCode()>" ];
  2 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  3 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  5 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  6 [ label="<java.util.AbstractSet: int hashCode()>" ];
  7 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  8 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  9 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  10 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  11 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  12 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  13 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  14 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  15 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  16 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  17 [ label="<java.lang.Object: java.lang.String toString()>" ];
  18 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  19 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  20 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  21 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  22 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  23 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  24 [ label="<java.util.AbstractList: int hashCode()>" ];
  25 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  26 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  27 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  28 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  29 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  30 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  31 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  32 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  33 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  34 [ label="<java.util.Locale: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
}

<46: <sun.util.locale.BaseLocale: int hashCode()> -> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>>
<47: <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()> -> <java.text.PatternEntry: int hashCode()>>
<48: <java.text.PatternEntry: int hashCode()> -> <java.util.Objects: int hashCode(java.lang.Object)>>
<49: <java.util.Objects: int hashCode(java.lang.Object)> -> <java.util.HashMap: int hash(java.lang.Object)>>
<50: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>>
Global flow detected: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString


***************************
Now we build call graphs for class: sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString
Continue with method: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>


strict digraph G {
  1 [ label="<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>" ];
  2 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  3 [ label="<java.util.AbstractSet: int hashCode()>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  6 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  7 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  8 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  9 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  10 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  11 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  12 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  13 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  14 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  15 [ label="<java.lang.Object: java.lang.String toString()>" ];
  16 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  17 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  18 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  19 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  20 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  21 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  22 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  23 [ label="<java.util.AbstractList: int hashCode()>" ];
  24 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  25 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  26 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  27 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  28 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  29 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  30 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  31 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  32 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  33 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
}

<51: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>>
Global flow detected: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility


***************************
Now we build call graphs for class: sun.util.locale.provider.CalendarDataUtility
Continue with method: <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>


strict digraph G {
  1 [ label="<sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>" ];
  2 [ label="<java.util.Calendar: void setWeekCountData(java.util.Locale)>" ];
  1 -> 2;
}

<52: <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)> -> <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>>
<53: <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)> -> <java.lang.module.ModuleDescriptor$Requires: int hashCode()>>
<54: <java.lang.module.ModuleDescriptor$Requires: int hashCode()> -> <java.util.AbstractSet: int hashCode()>>
<55: <java.util.AbstractSet: int hashCode()> -> <java.util.WeakHashMap: int hash(java.lang.Object)>>
<56: <java.util.WeakHashMap: int hash(java.lang.Object)> -> <java.security.Provider$UString: int hashCode()>>
<57: <java.security.Provider$UString: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>>
<58: <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()> -> <java.lang.constant.ReferenceClassDescImpl: int hashCode()>>
<59: <java.lang.constant.ReferenceClassDescImpl: int hashCode()> -> <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>>
<60: <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>>
<61: <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()> -> <java.util.TreeMap$Entry: int hashCode()>>
<62: <java.util.TreeMap$Entry: int hashCode()> -> <java.lang.Object: java.lang.String toString()>>
<63: <java.lang.Object: java.lang.String toString()> -> <java.util.Hashtable: boolean containsKey(java.lang.Object)>>
<64: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>>
Global flow detected: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RDN


***************************
Now we build call graphs for class: sun.security.x509.RDN
Continue with method: <sun.security.x509.RDN: int hashCode()>


strict digraph G {
  1 [ label="<sun.security.x509.RDN: int hashCode()>" ];
  2 [ label="<sun.security.x509.DistributionPoint: int hashCode()>" ];
  3 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  4 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  6 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  7 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  8 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  9 [ label="<java.lang.Object: java.lang.String toString()>" ];
  10 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  11 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  12 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  13 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  14 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  15 [ label="<java.util.AbstractSet: int hashCode()>" ];
  16 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  17 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  18 [ label="<java.util.AbstractList: int hashCode()>" ];
  19 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  20 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  21 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  22 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  23 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  24 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  25 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  26 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  27 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  28 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  29 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  30 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  31 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  32 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  33 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  34 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
}

<65: <sun.security.x509.RDN: int hashCode()> -> <java.text.AttributedString$AttributedStringIterator: int hashCode()>>
<66: <java.text.AttributedString$AttributedStringIterator: int hashCode()> -> <java.net.URLStreamHandler: int hashCode(java.net.URL)>>
<67: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>>
Global flow detected: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.EDIPartyName


***************************
Now we build call graphs for class: sun.security.x509.EDIPartyName
Continue with method: <sun.security.x509.EDIPartyName: int hashCode()>


strict digraph G {
  1 [ label="<sun.security.x509.EDIPartyName: int hashCode()>" ];
  2 [ label="<sun.security.x509.GeneralName: int hashCode()>" ];
  1 -> 2;
}

<68: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>>
Global flow detected: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.X500Name


***************************
Now we build call graphs for class: sun.security.x509.X500Name
Continue with method: <sun.security.x509.X500Name: int hashCode()>


strict digraph G {
  1 [ label="<sun.security.x509.X500Name: int hashCode()>" ];
  2 [ label="<javax.security.auth.x500.X500Principal: int hashCode()>" ];
  3 [ label="<java.lang.Object: java.lang.String toString()>" ];
  4 [ label="<sun.security.x509.GeneralName: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

<69: <sun.security.x509.X500Name: int hashCode()> -> <java.net.URI: int hash(int,java.lang.String)>>
<70: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>>
Global flow detected: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.DNSName


***************************
Now we build call graphs for class: sun.security.x509.DNSName
Continue with method: <sun.security.x509.DNSName: int hashCode()>


strict digraph G {
  1 [ label="<sun.security.x509.DNSName: int hashCode()>" ];
  2 [ label="<sun.security.x509.GeneralName: int hashCode()>" ];
  1 -> 2;
}

<71: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>>
Global flow detected: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RFC822Name


***************************
Now we build call graphs for class: sun.security.x509.RFC822Name
Continue with method: <sun.security.x509.RFC822Name: int hashCode()>


strict digraph G {
  1 [ label="<sun.security.x509.RFC822Name: int hashCode()>" ];
  2 [ label="<sun.security.x509.GeneralName: int hashCode()>" ];
  1 -> 2;
}

<72: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>>
Global flow detected: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AVA


***************************
Now we build call graphs for class: sun.security.x509.AVA
Continue with method: <sun.security.x509.AVA: int hashCode()>


strict digraph G {
  1 [ label="<sun.security.x509.AVA: int hashCode()>" ];
  2 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  3 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  6 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  7 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  8 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  9 [ label="<java.lang.Object: java.lang.String toString()>" ];
  10 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  11 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  12 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  13 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  14 [ label="<java.util.AbstractSet: int hashCode()>" ];
  15 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  16 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  17 [ label="<java.util.AbstractList: int hashCode()>" ];
  18 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  19 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  20 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  21 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  22 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  23 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  24 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  25 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  26 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  27 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  28 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  29 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  30 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  31 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  32 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  33 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
}

<73: <sun.security.x509.AVA: int hashCode()> -> <java.util.AbstractList: int hashCode()>>
<74: <java.util.AbstractList: int hashCode()> -> <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>>
<75: <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)> -> <java.time.ZoneId: int hashCode()>>
<76: <java.time.ZoneId: int hashCode()> -> <java.security.BasicPermission: int hashCode()>>
<77: <java.security.BasicPermission: int hashCode()> -> <java.util.PropertyPermission: int hashCode()>>
<78: <java.util.PropertyPermission: int hashCode()> -> <java.net.SocketPermission: int hashCode()>>
<79: <java.net.SocketPermission: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>>
<80: <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>>
<81: <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>>
<82: <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)> -> <java.security.UnresolvedPermission: int hashCode()>>
<83: <java.security.UnresolvedPermission: int hashCode()> -> <javax.security.auth.Subject$SecureSet: int hashCode()>>
<84: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>>
Global flow detected: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PrincipalEntry


***************************
Now we build call graphs for class: sun.security.provider.PolicyParser$PrincipalEntry
Continue with method: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>


strict digraph G {
  1 [ label="<sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>" ];
  2 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  3 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  5 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  6 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  7 [ label="<java.lang.Object: java.lang.String toString()>" ];
  8 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  9 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  10 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  11 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  12 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  13 [ label="<java.util.AbstractSet: int hashCode()>" ];
  14 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  15 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  16 [ label="<java.util.AbstractList: int hashCode()>" ];
  17 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  18 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  19 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  20 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  21 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  22 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  23 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  24 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  25 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  26 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  27 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  28 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  29 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  30 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  31 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  32 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  33 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
}

<85: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PermissionEntry


***************************
Now we build call graphs for class: sun.security.provider.PolicyParser$PermissionEntry
Continue with method: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>


strict digraph G {
  1 [ label="<sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>" ];
  2 [ label="<java.lang.Object: java.lang.String toString()>" ];
  3 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  6 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  7 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  8 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  9 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  10 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  11 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  12 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  13 [ label="<java.util.AbstractSet: int hashCode()>" ];
  14 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  15 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  16 [ label="<java.util.AbstractList: int hashCode()>" ];
  17 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  18 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  19 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  20 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  21 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  22 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  23 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  24 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  25 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  26 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  27 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  28 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  29 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  30 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  31 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  32 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  33 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
}

<86: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyFile$SelfPermission


***************************
Now we build call graphs for class: sun.security.provider.PolicyFile$SelfPermission
Continue with method: <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>


strict digraph G {
  1 [ label="<sun.security.provider.PolicyFile$SelfPermission: int hashCode()>" ];
  2 [ label="<java.lang.Object: java.lang.String toString()>" ];
  3 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  6 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  7 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  8 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  9 [ label="<java.util.AbstractSet: int hashCode()>" ];
  10 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  11 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  12 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  13 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  14 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  15 [ label="<java.util.AbstractList: int hashCode()>" ];
  16 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  17 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  18 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  19 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  20 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  21 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  22 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  23 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  24 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  25 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  26 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  27 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  28 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  29 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  30 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  31 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  32 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  33 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
}

<87: <sun.security.provider.PolicyFile$SelfPermission: int hashCode()> -> <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>>
<88: <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>>
<89: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AlgorithmId


***************************
Now we build call graphs for class: sun.security.x509.AlgorithmId
Continue with method: <sun.security.x509.AlgorithmId: int hashCode()>


strict digraph G {
  1 [ label="<sun.security.x509.AlgorithmId: int hashCode()>" ];
  2 [ label="<java.lang.Object: java.lang.String toString()>" ];
  1 -> 2;
}

<90: <sun.security.x509.AlgorithmId: int hashCode()> -> <java.util.AbstractMap$SimpleEntry: int hashCode()>>
<91: <java.util.AbstractMap$SimpleEntry: int hashCode()> -> <java.lang.StackTraceElement: int hashCode()>>
<92: <java.lang.StackTraceElement: int hashCode()> -> <java.text.ChoiceFormat: int hashCode()>>
<93: <java.text.ChoiceFormat: int hashCode()> -> <java.text.SimpleDateFormat: int hashCode()>>
<94: <java.text.SimpleDateFormat: int hashCode()> -> <java.text.DecimalFormat: int hashCode()>>
<95: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>>
Global flow detected: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>

Adding connections to callgraphs in class: sun.util.calendar.Era


***************************
Now we build call graphs for class: sun.util.calendar.Era
Continue with method: <sun.util.calendar.Era: int hashCode()>


strict digraph G {
  1 [ label="<sun.util.calendar.Era: int hashCode()>" ];
  2 [ label="<java.lang.Object: java.lang.String toString()>" ];
  3 [ label="<sun.util.calendar.CalendarDate: int hashCode()>" ];
  4 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  5 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  6 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  7 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  8 [ label="<java.util.AbstractList: int hashCode()>" ];
  9 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  10 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  11 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  12 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  13 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  14 [ label="<java.util.AbstractSet: int hashCode()>" ];
  15 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  16 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  17 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  18 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  19 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  20 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  21 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  22 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  23 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  24 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  25 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  26 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  27 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  28 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  29 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  30 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  31 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  32 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  33 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  34 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
}

<96: <sun.util.calendar.Era: int hashCode()> -> <java.util.ImmutableCollections$Set12: int hashCode()>>
<97: <java.util.ImmutableCollections$Set12: int hashCode()> -> <java.util.KeyValueHolder: int hashCode()>>
<98: <java.util.KeyValueHolder: int hashCode()> -> <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>>
<99: <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> -> <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>>
<100: <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)> -> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>>
<101: <java.util.Hashtable: java.lang.Object remove(java.lang.Object)> -> <java.lang.Package: int hashCode()>>
<102: <java.lang.Package: int hashCode()> -> <java.security.SecureClassLoader$CodeSourceKey: int hashCode()>>
<103: <java.security.SecureClassLoader$CodeSourceKey: int hashCode()> -> <java.text.AttributeEntry: int hashCode()>>
<104: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>>
Global flow detected: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>

Adding connections to callgraphs in class: sun.util.calendar.LocalGregorianCalendar


***************************
Now we build call graphs for class: sun.util.calendar.LocalGregorianCalendar
Continue with method: <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>


strict digraph G {
  1 [ label="<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>" ];
  2 [ label="<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar getLocalGregorianCalendar(java.lang.String)>" ];
  3 [ label="<sun.util.calendar.CalendarSystem: sun.util.calendar.CalendarSystem forName(java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
}

<105: <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)> -> <java.util.ImmutableCollections$SetN: int hashCode()>>
<106: <java.util.ImmutableCollections$SetN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int hashCode()>>
<107: <java.util.ImmutableCollections$MapN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>>
Flows from <java.lang.String: int hashCode()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.String: int hashCode()>" ];
  2 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  3 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  6 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>" ];
  7 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>" ];
  8 [ label="<sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>" ];
  9 [ label="<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>" ];
  10 [ label="<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>" ];
  11 [ label="<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>" ];
  12 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>" ];
  13 [ label="<java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>" ];
  14 [ label="<java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>" ];
  15 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  16 [ label="<java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>" ];
  17 [ label="<java.util.ResourceBundle$CacheKey: int hashCode()>" ];
  18 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>" ];
  19 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>" ];
  20 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>" ];
  21 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>" ];
  22 [ label="<jdk.internal.org.objectweb.asm.Handle: int hashCode()>" ];
  23 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>" ];
  24 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  25 [ label="<jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>" ];
  26 [ label="<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>" ];
  27 [ label="<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>" ];
  28 [ label="<jdk.internal.jimage.ImageReader$Node: int hashCode()>" ];
  29 [ label="<sun.security.util.DerValue: int hashCode()>" ];
  30 [ label="<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>" ];
  31 [ label="<sun.security.jca.ProviderConfig: int hashCode()>" ];
  32 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  33 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  34 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  35 [ label="<java.io.WinNTFileSystem: int hashCode(java.io.File)>" ];
  36 [ label="<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>" ];
  37 [ label="<java.util.Calendar$Builder: java.util.Calendar build()>" ];
  38 [ label="<javax.crypto.CryptoPermission: int hashCode()>" ];
  39 [ label="<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>" ];
  40 [ label="<jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>" ];
  41 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>" ];
  42 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>" ];
  43 [ label="<java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>" ];
  44 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>" ];
  45 [ label="<sun.util.locale.LocaleExtensions: int hashCode()>" ];
  46 [ label="<sun.util.locale.BaseLocale: int hashCode()>" ];
  47 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  48 [ label="<java.text.PatternEntry: int hashCode()>" ];
  49 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  50 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  51 [ label="<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>" ];
  52 [ label="<sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>" ];
  53 [ label="<java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>" ];
  54 [ label="<java.lang.module.ModuleDescriptor$Requires: int hashCode()>" ];
  55 [ label="<java.util.AbstractSet: int hashCode()>" ];
  56 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  57 [ label="<java.security.Provider$UString: int hashCode()>" ];
  58 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  59 [ label="<java.lang.constant.ReferenceClassDescImpl: int hashCode()>" ];
  60 [ label="<java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>" ];
  61 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  62 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  63 [ label="<java.lang.Object: java.lang.String toString()>" ];
  64 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  65 [ label="<sun.security.x509.RDN: int hashCode()>" ];
  66 [ label="<java.text.AttributedString$AttributedStringIterator: int hashCode()>" ];
  67 [ label="<java.net.URLStreamHandler: int hashCode(java.net.URL)>" ];
  68 [ label="<sun.security.x509.EDIPartyName: int hashCode()>" ];
  69 [ label="<sun.security.x509.X500Name: int hashCode()>" ];
  70 [ label="<java.net.URI: int hash(int,java.lang.String)>" ];
  71 [ label="<sun.security.x509.DNSName: int hashCode()>" ];
  72 [ label="<sun.security.x509.RFC822Name: int hashCode()>" ];
  73 [ label="<sun.security.x509.AVA: int hashCode()>" ];
  74 [ label="<java.util.AbstractList: int hashCode()>" ];
  75 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  76 [ label="<java.time.ZoneId: int hashCode()>" ];
  77 [ label="<java.security.BasicPermission: int hashCode()>" ];
  78 [ label="<java.util.PropertyPermission: int hashCode()>" ];
  79 [ label="<java.net.SocketPermission: int hashCode()>" ];
  80 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>" ];
  81 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>" ];
  82 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  83 [ label="<java.security.UnresolvedPermission: int hashCode()>" ];
  84 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  85 [ label="<sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>" ];
  86 [ label="<sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>" ];
  87 [ label="<sun.security.provider.PolicyFile$SelfPermission: int hashCode()>" ];
  88 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  89 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  90 [ label="<sun.security.x509.AlgorithmId: int hashCode()>" ];
  91 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  92 [ label="<java.lang.StackTraceElement: int hashCode()>" ];
  93 [ label="<java.text.ChoiceFormat: int hashCode()>" ];
  94 [ label="<java.text.SimpleDateFormat: int hashCode()>" ];
  95 [ label="<java.text.DecimalFormat: int hashCode()>" ];
  96 [ label="<sun.util.calendar.Era: int hashCode()>" ];
  97 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  98 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  99 [ label="<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" ];
  100 [ label="<java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>" ];
  101 [ label="<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>" ];
  102 [ label="<java.lang.Package: int hashCode()>" ];
  103 [ label="<java.security.SecureClassLoader$CodeSourceKey: int hashCode()>" ];
  104 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  105 [ label="<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>" ];
  106 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  107 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  108 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  109 [ label="<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar getLocalGregorianCalendar(java.lang.String)>" ];
  110 [ label="<sun.util.calendar.CalendarSystem: sun.util.calendar.CalendarSystem forName(java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  46 -> 47;
  47 -> 48;
  48 -> 49;
  49 -> 50;
  50 -> 51;
  51 -> 52;
  52 -> 53;
  53 -> 54;
  54 -> 55;
  55 -> 56;
  56 -> 57;
  57 -> 58;
  58 -> 59;
  59 -> 60;
  60 -> 61;
  61 -> 62;
  62 -> 63;
  63 -> 64;
  64 -> 65;
  65 -> 66;
  66 -> 67;
  67 -> 68;
  68 -> 69;
  69 -> 70;
  70 -> 71;
  71 -> 72;
  72 -> 73;
  73 -> 74;
  74 -> 75;
  75 -> 76;
  76 -> 77;
  77 -> 78;
  78 -> 79;
  79 -> 80;
  80 -> 81;
  81 -> 82;
  82 -> 83;
  83 -> 84;
  84 -> 85;
  85 -> 86;
  86 -> 87;
  87 -> 88;
  88 -> 89;
  89 -> 90;
  90 -> 91;
  91 -> 92;
  92 -> 93;
  93 -> 94;
  94 -> 95;
  95 -> 96;
  96 -> 97;
  97 -> 98;
  98 -> 99;
  99 -> 100;
  100 -> 101;
  101 -> 102;
  102 -> 103;
  103 -> 104;
  104 -> 105;
  105 -> 106;
  106 -> 107;
  107 -> 108;
  105 -> 109;
  109 -> 110;
}

Source found in the callgraph: <java.util.Arrays: int hashCode(byte[])>...
In class: org.whispersystems.libsignal.SignalProtocolAddress
Start traversal: 

Starting from method: <java.util.Arrays: int hashCode(byte[])>
<1: <java.util.Arrays: int hashCode(byte[])> -> <java.security.cert.Certificate: int hashCode()>>
<2: <java.security.cert.Certificate: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>>
<3: <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>>
<4: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>>
Global flow detected: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.Cache$EqualByteArray
sun.security.util.Cache$EqualByteArray has been visited already.
<5: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>>
Global flow detected: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.ObjectIdentifier
sun.security.util.ObjectIdentifier has been visited already.
Flows from <java.util.Arrays: int hashCode(byte[])> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Arrays: int hashCode(byte[])>" ];
  2 [ label="<java.security.cert.Certificate: int hashCode()>" ];
  3 [ label="<java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>" ];
  4 [ label="<java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>" ];
  5 [ label="<sun.security.util.Cache$EqualByteArray: int hashCode()>" ];
  6 [ label="<sun.security.util.ObjectIdentifier: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
}

Source found in the callgraph: <java.lang.String: int hashCode()>...
In class: org.whispersystems.libsignal.state.impl.InMemoryPreKeyStore
Start traversal: 

Starting from method: <java.lang.String: int hashCode()>
<1: <java.lang.String: int hashCode()> -> <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>>
<2: <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>>
<3: <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>>
<4: <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>>
<5: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<6: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>>
<7: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>

Adding connections to callgraphs in class: sun.util.PreHashedMap
sun.util.PreHashedMap has been visited already.
<8: <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)> -> <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>>
<9: <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)> -> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>>
<10: <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)> -> <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>>
<11: <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>>
<12: <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)> -> <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>>
<13: <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)> -> <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>>
<14: <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)> -> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>>
<15: <java.util.Hashtable: java.lang.Object get(java.lang.Object)> -> <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>>
<16: <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)> -> <java.util.ResourceBundle$CacheKey: int hashCode()>>
<17: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>>
Global flow detected: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<18: <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>>
<19: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>>
<20: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>>
<21: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.Handle
jdk.internal.org.objectweb.asm.Handle has been visited already.
<22: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>>
Global flow detected: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<23: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)> -> <java.util.Arrays: int hashCode(java.lang.Object[])>>
<24: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>>
Global flow detected: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.ConstantDynamic
jdk.internal.org.objectweb.asm.ConstantDynamic has been visited already.
<25: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>>
Global flow detected: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter
sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter has been visited already.
<26: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>>
Global flow detected: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>

Adding connections to callgraphs in class: sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter
sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter has been visited already.
<27: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>>
Global flow detected: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.jimage.ImageReader$Node
jdk.internal.jimage.ImageReader$Node has been visited already.
<28: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>>
Global flow detected: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.DerValue
sun.security.util.DerValue has been visited already.
<29: <sun.security.util.DerValue: int hashCode()> -> <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>>
<30: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>>
Global flow detected: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>

Adding connections to callgraphs in class: sun.security.jca.ProviderConfig
sun.security.jca.ProviderConfig has been visited already.
<31: <sun.security.jca.ProviderConfig: int hashCode()> -> <java.util.ArrayList: int hashCodeRange(int,int)>>
<32: <java.util.ArrayList: int hashCodeRange(int,int)> -> <java.util.concurrent.ConcurrentHashMap: int hashCode()>>
<33: <java.util.concurrent.ConcurrentHashMap: int hashCode()> -> <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>>
<34: <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()> -> <java.io.WinNTFileSystem: int hashCode(java.io.File)>>
<35: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>>
Global flow detected: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>

Adding connections to callgraphs in class: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator
sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator has been visited already.
<36: <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)> -> <java.util.Calendar$Builder: java.util.Calendar build()>>
<37: <java.util.Calendar$Builder: java.util.Calendar build()> -> <javax.crypto.CryptoPermission: int hashCode()>>
<38: <javax.crypto.CryptoPermission: int hashCode()> -> <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>>
<39: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>>
Global flow detected: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>

Adding connections to callgraphs in class: jdk.internal.util.Preconditions
jdk.internal.util.Preconditions has been visited already.
<40: <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>>
<41: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>>
<42: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)> -> <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>>
<43: <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>>
<44: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>>
Global flow detected: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.LocaleExtensions
sun.util.locale.LocaleExtensions has been visited already.
<45: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>>
Global flow detected: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.BaseLocale
sun.util.locale.BaseLocale has been visited already.
<46: <sun.util.locale.BaseLocale: int hashCode()> -> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>>
<47: <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()> -> <java.text.PatternEntry: int hashCode()>>
<48: <java.text.PatternEntry: int hashCode()> -> <java.util.Objects: int hashCode(java.lang.Object)>>
<49: <java.util.Objects: int hashCode(java.lang.Object)> -> <java.util.HashMap: int hash(java.lang.Object)>>
<50: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>>
Global flow detected: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString
sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString has been visited already.
<51: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>>
Global flow detected: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility
sun.util.locale.provider.CalendarDataUtility has been visited already.
<52: <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)> -> <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>>
<53: <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)> -> <java.lang.module.ModuleDescriptor$Requires: int hashCode()>>
<54: <java.lang.module.ModuleDescriptor$Requires: int hashCode()> -> <java.util.AbstractSet: int hashCode()>>
<55: <java.util.AbstractSet: int hashCode()> -> <java.util.WeakHashMap: int hash(java.lang.Object)>>
<56: <java.util.WeakHashMap: int hash(java.lang.Object)> -> <java.security.Provider$UString: int hashCode()>>
<57: <java.security.Provider$UString: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>>
<58: <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()> -> <java.lang.constant.ReferenceClassDescImpl: int hashCode()>>
<59: <java.lang.constant.ReferenceClassDescImpl: int hashCode()> -> <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>>
<60: <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>>
<61: <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()> -> <java.util.TreeMap$Entry: int hashCode()>>
<62: <java.util.TreeMap$Entry: int hashCode()> -> <java.lang.Object: java.lang.String toString()>>
<63: <java.lang.Object: java.lang.String toString()> -> <java.util.Hashtable: boolean containsKey(java.lang.Object)>>
<64: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>>
Global flow detected: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RDN
sun.security.x509.RDN has been visited already.
<65: <sun.security.x509.RDN: int hashCode()> -> <java.text.AttributedString$AttributedStringIterator: int hashCode()>>
<66: <java.text.AttributedString$AttributedStringIterator: int hashCode()> -> <java.net.URLStreamHandler: int hashCode(java.net.URL)>>
<67: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>>
Global flow detected: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.EDIPartyName
sun.security.x509.EDIPartyName has been visited already.
<68: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>>
Global flow detected: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.X500Name
sun.security.x509.X500Name has been visited already.
<69: <sun.security.x509.X500Name: int hashCode()> -> <java.net.URI: int hash(int,java.lang.String)>>
<70: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>>
Global flow detected: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.DNSName
sun.security.x509.DNSName has been visited already.
<71: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>>
Global flow detected: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RFC822Name
sun.security.x509.RFC822Name has been visited already.
<72: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>>
Global flow detected: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AVA
sun.security.x509.AVA has been visited already.
<73: <sun.security.x509.AVA: int hashCode()> -> <java.util.AbstractList: int hashCode()>>
<74: <java.util.AbstractList: int hashCode()> -> <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>>
<75: <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)> -> <java.time.ZoneId: int hashCode()>>
<76: <java.time.ZoneId: int hashCode()> -> <java.security.BasicPermission: int hashCode()>>
<77: <java.security.BasicPermission: int hashCode()> -> <java.util.PropertyPermission: int hashCode()>>
<78: <java.util.PropertyPermission: int hashCode()> -> <java.net.SocketPermission: int hashCode()>>
<79: <java.net.SocketPermission: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>>
<80: <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>>
<81: <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>>
<82: <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)> -> <java.security.UnresolvedPermission: int hashCode()>>
<83: <java.security.UnresolvedPermission: int hashCode()> -> <javax.security.auth.Subject$SecureSet: int hashCode()>>
<84: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>>
Global flow detected: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PrincipalEntry
sun.security.provider.PolicyParser$PrincipalEntry has been visited already.
<85: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PermissionEntry
sun.security.provider.PolicyParser$PermissionEntry has been visited already.
<86: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyFile$SelfPermission
sun.security.provider.PolicyFile$SelfPermission has been visited already.
<87: <sun.security.provider.PolicyFile$SelfPermission: int hashCode()> -> <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>>
<88: <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>>
<89: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AlgorithmId
sun.security.x509.AlgorithmId has been visited already.
<90: <sun.security.x509.AlgorithmId: int hashCode()> -> <java.util.AbstractMap$SimpleEntry: int hashCode()>>
<91: <java.util.AbstractMap$SimpleEntry: int hashCode()> -> <java.lang.StackTraceElement: int hashCode()>>
<92: <java.lang.StackTraceElement: int hashCode()> -> <java.text.ChoiceFormat: int hashCode()>>
<93: <java.text.ChoiceFormat: int hashCode()> -> <java.text.SimpleDateFormat: int hashCode()>>
<94: <java.text.SimpleDateFormat: int hashCode()> -> <java.text.DecimalFormat: int hashCode()>>
<95: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>>
Global flow detected: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>

Adding connections to callgraphs in class: sun.util.calendar.Era
sun.util.calendar.Era has been visited already.
<96: <sun.util.calendar.Era: int hashCode()> -> <java.util.ImmutableCollections$Set12: int hashCode()>>
<97: <java.util.ImmutableCollections$Set12: int hashCode()> -> <java.util.KeyValueHolder: int hashCode()>>
<98: <java.util.KeyValueHolder: int hashCode()> -> <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>>
<99: <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> -> <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>>
<100: <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)> -> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>>
<101: <java.util.Hashtable: java.lang.Object remove(java.lang.Object)> -> <java.lang.Package: int hashCode()>>
<102: <java.lang.Package: int hashCode()> -> <java.security.SecureClassLoader$CodeSourceKey: int hashCode()>>
<103: <java.security.SecureClassLoader$CodeSourceKey: int hashCode()> -> <java.text.AttributeEntry: int hashCode()>>
<104: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>>
Global flow detected: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>

Adding connections to callgraphs in class: sun.util.calendar.LocalGregorianCalendar
sun.util.calendar.LocalGregorianCalendar has been visited already.
<105: <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)> -> <java.util.ImmutableCollections$SetN: int hashCode()>>
<106: <java.util.ImmutableCollections$SetN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int hashCode()>>
<107: <java.util.ImmutableCollections$MapN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>>
Flows from <java.lang.String: int hashCode()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.String: int hashCode()>" ];
  2 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  3 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  6 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>" ];
  7 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>" ];
  8 [ label="<sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>" ];
  9 [ label="<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>" ];
  10 [ label="<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>" ];
  11 [ label="<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>" ];
  12 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>" ];
  13 [ label="<java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>" ];
  14 [ label="<java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>" ];
  15 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  16 [ label="<java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>" ];
  17 [ label="<java.util.ResourceBundle$CacheKey: int hashCode()>" ];
  18 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>" ];
  19 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>" ];
  20 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>" ];
  21 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>" ];
  22 [ label="<jdk.internal.org.objectweb.asm.Handle: int hashCode()>" ];
  23 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>" ];
  24 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  25 [ label="<jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>" ];
  26 [ label="<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>" ];
  27 [ label="<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>" ];
  28 [ label="<jdk.internal.jimage.ImageReader$Node: int hashCode()>" ];
  29 [ label="<sun.security.util.DerValue: int hashCode()>" ];
  30 [ label="<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>" ];
  31 [ label="<sun.security.jca.ProviderConfig: int hashCode()>" ];
  32 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  33 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  34 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  35 [ label="<java.io.WinNTFileSystem: int hashCode(java.io.File)>" ];
  36 [ label="<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>" ];
  37 [ label="<java.util.Calendar$Builder: java.util.Calendar build()>" ];
  38 [ label="<javax.crypto.CryptoPermission: int hashCode()>" ];
  39 [ label="<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>" ];
  40 [ label="<jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>" ];
  41 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>" ];
  42 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>" ];
  43 [ label="<java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>" ];
  44 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>" ];
  45 [ label="<sun.util.locale.LocaleExtensions: int hashCode()>" ];
  46 [ label="<sun.util.locale.BaseLocale: int hashCode()>" ];
  47 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  48 [ label="<java.text.PatternEntry: int hashCode()>" ];
  49 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  50 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  51 [ label="<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>" ];
  52 [ label="<sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>" ];
  53 [ label="<java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>" ];
  54 [ label="<java.lang.module.ModuleDescriptor$Requires: int hashCode()>" ];
  55 [ label="<java.util.AbstractSet: int hashCode()>" ];
  56 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  57 [ label="<java.security.Provider$UString: int hashCode()>" ];
  58 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  59 [ label="<java.lang.constant.ReferenceClassDescImpl: int hashCode()>" ];
  60 [ label="<java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>" ];
  61 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  62 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  63 [ label="<java.lang.Object: java.lang.String toString()>" ];
  64 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  65 [ label="<sun.security.x509.RDN: int hashCode()>" ];
  66 [ label="<java.text.AttributedString$AttributedStringIterator: int hashCode()>" ];
  67 [ label="<java.net.URLStreamHandler: int hashCode(java.net.URL)>" ];
  68 [ label="<sun.security.x509.EDIPartyName: int hashCode()>" ];
  69 [ label="<sun.security.x509.X500Name: int hashCode()>" ];
  70 [ label="<java.net.URI: int hash(int,java.lang.String)>" ];
  71 [ label="<sun.security.x509.DNSName: int hashCode()>" ];
  72 [ label="<sun.security.x509.RFC822Name: int hashCode()>" ];
  73 [ label="<sun.security.x509.AVA: int hashCode()>" ];
  74 [ label="<java.util.AbstractList: int hashCode()>" ];
  75 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  76 [ label="<java.time.ZoneId: int hashCode()>" ];
  77 [ label="<java.security.BasicPermission: int hashCode()>" ];
  78 [ label="<java.util.PropertyPermission: int hashCode()>" ];
  79 [ label="<java.net.SocketPermission: int hashCode()>" ];
  80 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>" ];
  81 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>" ];
  82 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  83 [ label="<java.security.UnresolvedPermission: int hashCode()>" ];
  84 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  85 [ label="<sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>" ];
  86 [ label="<sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>" ];
  87 [ label="<sun.security.provider.PolicyFile$SelfPermission: int hashCode()>" ];
  88 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  89 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  90 [ label="<sun.security.x509.AlgorithmId: int hashCode()>" ];
  91 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  92 [ label="<java.lang.StackTraceElement: int hashCode()>" ];
  93 [ label="<java.text.ChoiceFormat: int hashCode()>" ];
  94 [ label="<java.text.SimpleDateFormat: int hashCode()>" ];
  95 [ label="<java.text.DecimalFormat: int hashCode()>" ];
  96 [ label="<sun.util.calendar.Era: int hashCode()>" ];
  97 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  98 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  99 [ label="<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" ];
  100 [ label="<java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>" ];
  101 [ label="<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>" ];
  102 [ label="<java.lang.Package: int hashCode()>" ];
  103 [ label="<java.security.SecureClassLoader$CodeSourceKey: int hashCode()>" ];
  104 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  105 [ label="<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>" ];
  106 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  107 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  108 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  46 -> 47;
  47 -> 48;
  48 -> 49;
  49 -> 50;
  50 -> 51;
  51 -> 52;
  52 -> 53;
  53 -> 54;
  54 -> 55;
  55 -> 56;
  56 -> 57;
  57 -> 58;
  58 -> 59;
  59 -> 60;
  60 -> 61;
  61 -> 62;
  62 -> 63;
  63 -> 64;
  64 -> 65;
  65 -> 66;
  66 -> 67;
  67 -> 68;
  68 -> 69;
  69 -> 70;
  70 -> 71;
  71 -> 72;
  72 -> 73;
  73 -> 74;
  74 -> 75;
  75 -> 76;
  76 -> 77;
  77 -> 78;
  78 -> 79;
  79 -> 80;
  80 -> 81;
  81 -> 82;
  82 -> 83;
  83 -> 84;
  84 -> 85;
  85 -> 86;
  86 -> 87;
  87 -> 88;
  88 -> 89;
  89 -> 90;
  90 -> 91;
  91 -> 92;
  92 -> 93;
  93 -> 94;
  94 -> 95;
  95 -> 96;
  96 -> 97;
  97 -> 98;
  98 -> 99;
  99 -> 100;
  100 -> 101;
  101 -> 102;
  102 -> 103;
  103 -> 104;
  104 -> 105;
  105 -> 106;
  106 -> 107;
  107 -> 108;
}

Source found in the callgraph: <java.util.Arrays: int hashCode(byte[])>...
In class: org.whispersystems.libsignal.state.impl.InMemoryPreKeyStore
Start traversal: 

Starting from method: <java.util.Arrays: int hashCode(byte[])>
<1: <java.util.Arrays: int hashCode(byte[])> -> <java.security.cert.Certificate: int hashCode()>>
<2: <java.security.cert.Certificate: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>>
<3: <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>>
<4: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>>
Global flow detected: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.Cache$EqualByteArray
sun.security.util.Cache$EqualByteArray has been visited already.
<5: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>>
Global flow detected: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.ObjectIdentifier
sun.security.util.ObjectIdentifier has been visited already.
Flows from <java.util.Arrays: int hashCode(byte[])> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Arrays: int hashCode(byte[])>" ];
  2 [ label="<java.security.cert.Certificate: int hashCode()>" ];
  3 [ label="<java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>" ];
  4 [ label="<java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>" ];
  5 [ label="<sun.security.util.Cache$EqualByteArray: int hashCode()>" ];
  6 [ label="<sun.security.util.ObjectIdentifier: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
}

Source found in the callgraph: <java.lang.String: int hashCode()>...
In class: org.whispersystems.libsignal.util.KeyHelper
Start traversal: 

Starting from method: <java.lang.String: int hashCode()>
<1: <java.lang.String: int hashCode()> -> <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>>
<2: <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>>
<3: <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>>
<4: <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>>
<5: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<6: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>>
<7: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>

Adding connections to callgraphs in class: sun.util.PreHashedMap
sun.util.PreHashedMap has been visited already.
<8: <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)> -> <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>>
<9: <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)> -> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>>
<10: <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)> -> <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>>
<11: <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>>
<12: <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)> -> <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>>
<13: <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)> -> <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>>
<14: <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)> -> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>>
<15: <java.util.Hashtable: java.lang.Object get(java.lang.Object)> -> <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>>
<16: <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)> -> <java.util.ResourceBundle$CacheKey: int hashCode()>>
<17: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>>
Global flow detected: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<18: <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>>
<19: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>>
<20: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>>
<21: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.Handle
jdk.internal.org.objectweb.asm.Handle has been visited already.
<22: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>>
Global flow detected: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<23: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)> -> <java.util.Arrays: int hashCode(java.lang.Object[])>>
<24: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>>
Global flow detected: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.ConstantDynamic
jdk.internal.org.objectweb.asm.ConstantDynamic has been visited already.
<25: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>>
Global flow detected: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter
sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter has been visited already.
<26: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>>
Global flow detected: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>

Adding connections to callgraphs in class: sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter
sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter has been visited already.
<27: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>>
Global flow detected: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.jimage.ImageReader$Node
jdk.internal.jimage.ImageReader$Node has been visited already.
<28: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>>
Global flow detected: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.DerValue
sun.security.util.DerValue has been visited already.
<29: <sun.security.util.DerValue: int hashCode()> -> <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>>
<30: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>>
Global flow detected: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>

Adding connections to callgraphs in class: sun.security.jca.ProviderConfig
sun.security.jca.ProviderConfig has been visited already.
<31: <sun.security.jca.ProviderConfig: int hashCode()> -> <java.util.ArrayList: int hashCodeRange(int,int)>>
<32: <java.util.ArrayList: int hashCodeRange(int,int)> -> <java.util.concurrent.ConcurrentHashMap: int hashCode()>>
<33: <java.util.concurrent.ConcurrentHashMap: int hashCode()> -> <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>>
<34: <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()> -> <java.io.WinNTFileSystem: int hashCode(java.io.File)>>
<35: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>>
Global flow detected: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>

Adding connections to callgraphs in class: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator
sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator has been visited already.
<36: <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)> -> <java.util.Calendar$Builder: java.util.Calendar build()>>
<37: <java.util.Calendar$Builder: java.util.Calendar build()> -> <javax.crypto.CryptoPermission: int hashCode()>>
<38: <javax.crypto.CryptoPermission: int hashCode()> -> <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>>
<39: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>>
Global flow detected: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>

Adding connections to callgraphs in class: jdk.internal.util.Preconditions
jdk.internal.util.Preconditions has been visited already.
<40: <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>>
<41: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>>
<42: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)> -> <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>>
<43: <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>>
<44: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>>
Global flow detected: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.LocaleExtensions
sun.util.locale.LocaleExtensions has been visited already.
<45: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>>
Global flow detected: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.BaseLocale
sun.util.locale.BaseLocale has been visited already.
<46: <sun.util.locale.BaseLocale: int hashCode()> -> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>>
<47: <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()> -> <java.text.PatternEntry: int hashCode()>>
<48: <java.text.PatternEntry: int hashCode()> -> <java.util.Objects: int hashCode(java.lang.Object)>>
<49: <java.util.Objects: int hashCode(java.lang.Object)> -> <java.util.HashMap: int hash(java.lang.Object)>>
<50: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>>
Global flow detected: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString
sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString has been visited already.
<51: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>>
Global flow detected: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility
sun.util.locale.provider.CalendarDataUtility has been visited already.
<52: <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)> -> <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>>
<53: <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)> -> <java.lang.module.ModuleDescriptor$Requires: int hashCode()>>
<54: <java.lang.module.ModuleDescriptor$Requires: int hashCode()> -> <java.util.AbstractSet: int hashCode()>>
<55: <java.util.AbstractSet: int hashCode()> -> <java.util.WeakHashMap: int hash(java.lang.Object)>>
<56: <java.util.WeakHashMap: int hash(java.lang.Object)> -> <java.security.Provider$UString: int hashCode()>>
<57: <java.security.Provider$UString: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>>
<58: <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()> -> <java.lang.constant.ReferenceClassDescImpl: int hashCode()>>
<59: <java.lang.constant.ReferenceClassDescImpl: int hashCode()> -> <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>>
<60: <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>>
<61: <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()> -> <java.util.TreeMap$Entry: int hashCode()>>
<62: <java.util.TreeMap$Entry: int hashCode()> -> <java.lang.Object: java.lang.String toString()>>
<63: <java.lang.Object: java.lang.String toString()> -> <java.util.Hashtable: boolean containsKey(java.lang.Object)>>
<64: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>>
Global flow detected: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RDN
sun.security.x509.RDN has been visited already.
<65: <sun.security.x509.RDN: int hashCode()> -> <java.text.AttributedString$AttributedStringIterator: int hashCode()>>
<66: <java.text.AttributedString$AttributedStringIterator: int hashCode()> -> <java.net.URLStreamHandler: int hashCode(java.net.URL)>>
<67: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>>
Global flow detected: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.EDIPartyName
sun.security.x509.EDIPartyName has been visited already.
<68: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>>
Global flow detected: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.X500Name
sun.security.x509.X500Name has been visited already.
<69: <sun.security.x509.X500Name: int hashCode()> -> <java.net.URI: int hash(int,java.lang.String)>>
<70: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>>
Global flow detected: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.DNSName
sun.security.x509.DNSName has been visited already.
<71: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>>
Global flow detected: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RFC822Name
sun.security.x509.RFC822Name has been visited already.
<72: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>>
Global flow detected: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AVA
sun.security.x509.AVA has been visited already.
<73: <sun.security.x509.AVA: int hashCode()> -> <java.util.AbstractList: int hashCode()>>
<74: <java.util.AbstractList: int hashCode()> -> <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>>
<75: <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)> -> <java.time.ZoneId: int hashCode()>>
<76: <java.time.ZoneId: int hashCode()> -> <java.security.BasicPermission: int hashCode()>>
<77: <java.security.BasicPermission: int hashCode()> -> <java.util.PropertyPermission: int hashCode()>>
<78: <java.util.PropertyPermission: int hashCode()> -> <java.net.SocketPermission: int hashCode()>>
<79: <java.net.SocketPermission: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>>
<80: <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>>
<81: <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>>
<82: <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)> -> <java.security.UnresolvedPermission: int hashCode()>>
<83: <java.security.UnresolvedPermission: int hashCode()> -> <javax.security.auth.Subject$SecureSet: int hashCode()>>
<84: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>>
Global flow detected: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PrincipalEntry
sun.security.provider.PolicyParser$PrincipalEntry has been visited already.
<85: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PermissionEntry
sun.security.provider.PolicyParser$PermissionEntry has been visited already.
<86: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyFile$SelfPermission
sun.security.provider.PolicyFile$SelfPermission has been visited already.
<87: <sun.security.provider.PolicyFile$SelfPermission: int hashCode()> -> <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>>
<88: <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>>
<89: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AlgorithmId
sun.security.x509.AlgorithmId has been visited already.
<90: <sun.security.x509.AlgorithmId: int hashCode()> -> <java.util.AbstractMap$SimpleEntry: int hashCode()>>
<91: <java.util.AbstractMap$SimpleEntry: int hashCode()> -> <java.lang.StackTraceElement: int hashCode()>>
<92: <java.lang.StackTraceElement: int hashCode()> -> <java.text.ChoiceFormat: int hashCode()>>
<93: <java.text.ChoiceFormat: int hashCode()> -> <java.text.SimpleDateFormat: int hashCode()>>
<94: <java.text.SimpleDateFormat: int hashCode()> -> <java.text.DecimalFormat: int hashCode()>>
<95: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>>
Global flow detected: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>

Adding connections to callgraphs in class: sun.util.calendar.Era
sun.util.calendar.Era has been visited already.
<96: <sun.util.calendar.Era: int hashCode()> -> <java.util.ImmutableCollections$Set12: int hashCode()>>
<97: <java.util.ImmutableCollections$Set12: int hashCode()> -> <java.util.KeyValueHolder: int hashCode()>>
<98: <java.util.KeyValueHolder: int hashCode()> -> <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>>
<99: <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> -> <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>>
<100: <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)> -> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>>
<101: <java.util.Hashtable: java.lang.Object remove(java.lang.Object)> -> <java.lang.Package: int hashCode()>>
<102: <java.lang.Package: int hashCode()> -> <java.security.SecureClassLoader$CodeSourceKey: int hashCode()>>
<103: <java.security.SecureClassLoader$CodeSourceKey: int hashCode()> -> <java.text.AttributeEntry: int hashCode()>>
<104: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>>
Global flow detected: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>

Adding connections to callgraphs in class: sun.util.calendar.LocalGregorianCalendar
sun.util.calendar.LocalGregorianCalendar has been visited already.
<105: <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)> -> <java.util.ImmutableCollections$SetN: int hashCode()>>
<106: <java.util.ImmutableCollections$SetN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int hashCode()>>
<107: <java.util.ImmutableCollections$MapN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>>
Flows from <java.lang.String: int hashCode()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.String: int hashCode()>" ];
  2 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  3 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  6 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>" ];
  7 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>" ];
  8 [ label="<sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>" ];
  9 [ label="<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>" ];
  10 [ label="<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>" ];
  11 [ label="<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>" ];
  12 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>" ];
  13 [ label="<java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>" ];
  14 [ label="<java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>" ];
  15 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  16 [ label="<java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>" ];
  17 [ label="<java.util.ResourceBundle$CacheKey: int hashCode()>" ];
  18 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>" ];
  19 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>" ];
  20 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>" ];
  21 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>" ];
  22 [ label="<jdk.internal.org.objectweb.asm.Handle: int hashCode()>" ];
  23 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>" ];
  24 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  25 [ label="<jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>" ];
  26 [ label="<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>" ];
  27 [ label="<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>" ];
  28 [ label="<jdk.internal.jimage.ImageReader$Node: int hashCode()>" ];
  29 [ label="<sun.security.util.DerValue: int hashCode()>" ];
  30 [ label="<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>" ];
  31 [ label="<sun.security.jca.ProviderConfig: int hashCode()>" ];
  32 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  33 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  34 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  35 [ label="<java.io.WinNTFileSystem: int hashCode(java.io.File)>" ];
  36 [ label="<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>" ];
  37 [ label="<java.util.Calendar$Builder: java.util.Calendar build()>" ];
  38 [ label="<javax.crypto.CryptoPermission: int hashCode()>" ];
  39 [ label="<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>" ];
  40 [ label="<jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>" ];
  41 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>" ];
  42 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>" ];
  43 [ label="<java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>" ];
  44 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>" ];
  45 [ label="<sun.util.locale.LocaleExtensions: int hashCode()>" ];
  46 [ label="<sun.util.locale.BaseLocale: int hashCode()>" ];
  47 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  48 [ label="<java.text.PatternEntry: int hashCode()>" ];
  49 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  50 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  51 [ label="<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>" ];
  52 [ label="<sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>" ];
  53 [ label="<java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>" ];
  54 [ label="<java.lang.module.ModuleDescriptor$Requires: int hashCode()>" ];
  55 [ label="<java.util.AbstractSet: int hashCode()>" ];
  56 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  57 [ label="<java.security.Provider$UString: int hashCode()>" ];
  58 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  59 [ label="<java.lang.constant.ReferenceClassDescImpl: int hashCode()>" ];
  60 [ label="<java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>" ];
  61 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  62 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  63 [ label="<java.lang.Object: java.lang.String toString()>" ];
  64 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  65 [ label="<sun.security.x509.RDN: int hashCode()>" ];
  66 [ label="<java.text.AttributedString$AttributedStringIterator: int hashCode()>" ];
  67 [ label="<java.net.URLStreamHandler: int hashCode(java.net.URL)>" ];
  68 [ label="<sun.security.x509.EDIPartyName: int hashCode()>" ];
  69 [ label="<sun.security.x509.X500Name: int hashCode()>" ];
  70 [ label="<java.net.URI: int hash(int,java.lang.String)>" ];
  71 [ label="<sun.security.x509.DNSName: int hashCode()>" ];
  72 [ label="<sun.security.x509.RFC822Name: int hashCode()>" ];
  73 [ label="<sun.security.x509.AVA: int hashCode()>" ];
  74 [ label="<java.util.AbstractList: int hashCode()>" ];
  75 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  76 [ label="<java.time.ZoneId: int hashCode()>" ];
  77 [ label="<java.security.BasicPermission: int hashCode()>" ];
  78 [ label="<java.util.PropertyPermission: int hashCode()>" ];
  79 [ label="<java.net.SocketPermission: int hashCode()>" ];
  80 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>" ];
  81 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>" ];
  82 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  83 [ label="<java.security.UnresolvedPermission: int hashCode()>" ];
  84 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  85 [ label="<sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>" ];
  86 [ label="<sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>" ];
  87 [ label="<sun.security.provider.PolicyFile$SelfPermission: int hashCode()>" ];
  88 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  89 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  90 [ label="<sun.security.x509.AlgorithmId: int hashCode()>" ];
  91 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  92 [ label="<java.lang.StackTraceElement: int hashCode()>" ];
  93 [ label="<java.text.ChoiceFormat: int hashCode()>" ];
  94 [ label="<java.text.SimpleDateFormat: int hashCode()>" ];
  95 [ label="<java.text.DecimalFormat: int hashCode()>" ];
  96 [ label="<sun.util.calendar.Era: int hashCode()>" ];
  97 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  98 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  99 [ label="<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" ];
  100 [ label="<java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>" ];
  101 [ label="<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>" ];
  102 [ label="<java.lang.Package: int hashCode()>" ];
  103 [ label="<java.security.SecureClassLoader$CodeSourceKey: int hashCode()>" ];
  104 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  105 [ label="<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>" ];
  106 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  107 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  108 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  46 -> 47;
  47 -> 48;
  48 -> 49;
  49 -> 50;
  50 -> 51;
  51 -> 52;
  52 -> 53;
  53 -> 54;
  54 -> 55;
  55 -> 56;
  56 -> 57;
  57 -> 58;
  58 -> 59;
  59 -> 60;
  60 -> 61;
  61 -> 62;
  62 -> 63;
  63 -> 64;
  64 -> 65;
  65 -> 66;
  66 -> 67;
  67 -> 68;
  68 -> 69;
  69 -> 70;
  70 -> 71;
  71 -> 72;
  72 -> 73;
  73 -> 74;
  74 -> 75;
  75 -> 76;
  76 -> 77;
  77 -> 78;
  78 -> 79;
  79 -> 80;
  80 -> 81;
  81 -> 82;
  82 -> 83;
  83 -> 84;
  84 -> 85;
  85 -> 86;
  86 -> 87;
  87 -> 88;
  88 -> 89;
  89 -> 90;
  90 -> 91;
  91 -> 92;
  92 -> 93;
  93 -> 94;
  94 -> 95;
  95 -> 96;
  96 -> 97;
  97 -> 98;
  98 -> 99;
  99 -> 100;
  100 -> 101;
  101 -> 102;
  102 -> 103;
  103 -> 104;
  104 -> 105;
  105 -> 106;
  106 -> 107;
  107 -> 108;
}

Source found in the callgraph: <java.util.Arrays: int hashCode(byte[])>...
In class: org.whispersystems.libsignal.util.KeyHelper
Start traversal: 

Starting from method: <java.util.Arrays: int hashCode(byte[])>
<1: <java.util.Arrays: int hashCode(byte[])> -> <java.security.cert.Certificate: int hashCode()>>
<2: <java.security.cert.Certificate: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>>
<3: <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>>
<4: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>>
Global flow detected: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.Cache$EqualByteArray
sun.security.util.Cache$EqualByteArray has been visited already.
<5: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>>
Global flow detected: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.ObjectIdentifier
sun.security.util.ObjectIdentifier has been visited already.
Flows from <java.util.Arrays: int hashCode(byte[])> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Arrays: int hashCode(byte[])>" ];
  2 [ label="<java.security.cert.Certificate: int hashCode()>" ];
  3 [ label="<java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>" ];
  4 [ label="<java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>" ];
  5 [ label="<sun.security.util.Cache$EqualByteArray: int hashCode()>" ];
  6 [ label="<sun.security.util.ObjectIdentifier: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
}

Source found in the callgraph: <java.lang.String: int hashCode()>...
In class: org.whispersystems.libsignal.state.impl.InMemorySignedPreKeyStore
Start traversal: 

Starting from method: <java.lang.String: int hashCode()>
<1: <java.lang.String: int hashCode()> -> <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>>
<2: <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>>
<3: <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>>
<4: <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>>
<5: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<6: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>>
<7: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>

Adding connections to callgraphs in class: sun.util.PreHashedMap
sun.util.PreHashedMap has been visited already.
<8: <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)> -> <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>>
<9: <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)> -> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>>
<10: <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)> -> <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>>
<11: <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>>
<12: <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)> -> <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>>
<13: <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)> -> <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>>
<14: <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)> -> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>>
<15: <java.util.Hashtable: java.lang.Object get(java.lang.Object)> -> <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>>
<16: <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)> -> <java.util.ResourceBundle$CacheKey: int hashCode()>>
<17: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>>
Global flow detected: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<18: <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>>
<19: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>>
<20: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>>
<21: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.Handle
jdk.internal.org.objectweb.asm.Handle has been visited already.
<22: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>>
Global flow detected: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<23: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)> -> <java.util.Arrays: int hashCode(java.lang.Object[])>>
<24: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>>
Global flow detected: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.ConstantDynamic
jdk.internal.org.objectweb.asm.ConstantDynamic has been visited already.
<25: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>>
Global flow detected: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter
sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter has been visited already.
<26: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>>
Global flow detected: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>

Adding connections to callgraphs in class: sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter
sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter has been visited already.
<27: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>>
Global flow detected: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.jimage.ImageReader$Node
jdk.internal.jimage.ImageReader$Node has been visited already.
<28: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>>
Global flow detected: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.DerValue
sun.security.util.DerValue has been visited already.
<29: <sun.security.util.DerValue: int hashCode()> -> <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>>
<30: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>>
Global flow detected: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>

Adding connections to callgraphs in class: sun.security.jca.ProviderConfig
sun.security.jca.ProviderConfig has been visited already.
<31: <sun.security.jca.ProviderConfig: int hashCode()> -> <java.util.ArrayList: int hashCodeRange(int,int)>>
<32: <java.util.ArrayList: int hashCodeRange(int,int)> -> <java.util.concurrent.ConcurrentHashMap: int hashCode()>>
<33: <java.util.concurrent.ConcurrentHashMap: int hashCode()> -> <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>>
<34: <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()> -> <java.io.WinNTFileSystem: int hashCode(java.io.File)>>
<35: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>>
Global flow detected: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>

Adding connections to callgraphs in class: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator
sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator has been visited already.
<36: <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)> -> <java.util.Calendar$Builder: java.util.Calendar build()>>
<37: <java.util.Calendar$Builder: java.util.Calendar build()> -> <javax.crypto.CryptoPermission: int hashCode()>>
<38: <javax.crypto.CryptoPermission: int hashCode()> -> <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>>
<39: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>>
Global flow detected: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>

Adding connections to callgraphs in class: jdk.internal.util.Preconditions
jdk.internal.util.Preconditions has been visited already.
<40: <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>>
<41: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>>
<42: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)> -> <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>>
<43: <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>>
<44: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>>
Global flow detected: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.LocaleExtensions
sun.util.locale.LocaleExtensions has been visited already.
<45: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>>
Global flow detected: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.BaseLocale
sun.util.locale.BaseLocale has been visited already.
<46: <sun.util.locale.BaseLocale: int hashCode()> -> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>>
<47: <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()> -> <java.text.PatternEntry: int hashCode()>>
<48: <java.text.PatternEntry: int hashCode()> -> <java.util.Objects: int hashCode(java.lang.Object)>>
<49: <java.util.Objects: int hashCode(java.lang.Object)> -> <java.util.HashMap: int hash(java.lang.Object)>>
<50: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>>
Global flow detected: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString
sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString has been visited already.
<51: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>>
Global flow detected: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility
sun.util.locale.provider.CalendarDataUtility has been visited already.
<52: <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)> -> <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>>
<53: <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)> -> <java.lang.module.ModuleDescriptor$Requires: int hashCode()>>
<54: <java.lang.module.ModuleDescriptor$Requires: int hashCode()> -> <java.util.AbstractSet: int hashCode()>>
<55: <java.util.AbstractSet: int hashCode()> -> <java.util.WeakHashMap: int hash(java.lang.Object)>>
<56: <java.util.WeakHashMap: int hash(java.lang.Object)> -> <java.security.Provider$UString: int hashCode()>>
<57: <java.security.Provider$UString: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>>
<58: <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()> -> <java.lang.constant.ReferenceClassDescImpl: int hashCode()>>
<59: <java.lang.constant.ReferenceClassDescImpl: int hashCode()> -> <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>>
<60: <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>>
<61: <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()> -> <java.util.TreeMap$Entry: int hashCode()>>
<62: <java.util.TreeMap$Entry: int hashCode()> -> <java.lang.Object: java.lang.String toString()>>
<63: <java.lang.Object: java.lang.String toString()> -> <java.util.Hashtable: boolean containsKey(java.lang.Object)>>
<64: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>>
Global flow detected: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RDN
sun.security.x509.RDN has been visited already.
<65: <sun.security.x509.RDN: int hashCode()> -> <java.text.AttributedString$AttributedStringIterator: int hashCode()>>
<66: <java.text.AttributedString$AttributedStringIterator: int hashCode()> -> <java.net.URLStreamHandler: int hashCode(java.net.URL)>>
<67: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>>
Global flow detected: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.EDIPartyName
sun.security.x509.EDIPartyName has been visited already.
<68: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>>
Global flow detected: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.X500Name
sun.security.x509.X500Name has been visited already.
<69: <sun.security.x509.X500Name: int hashCode()> -> <java.net.URI: int hash(int,java.lang.String)>>
<70: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>>
Global flow detected: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.DNSName
sun.security.x509.DNSName has been visited already.
<71: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>>
Global flow detected: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RFC822Name
sun.security.x509.RFC822Name has been visited already.
<72: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>>
Global flow detected: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AVA
sun.security.x509.AVA has been visited already.
<73: <sun.security.x509.AVA: int hashCode()> -> <java.util.AbstractList: int hashCode()>>
<74: <java.util.AbstractList: int hashCode()> -> <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>>
<75: <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)> -> <java.time.ZoneId: int hashCode()>>
<76: <java.time.ZoneId: int hashCode()> -> <java.security.BasicPermission: int hashCode()>>
<77: <java.security.BasicPermission: int hashCode()> -> <java.util.PropertyPermission: int hashCode()>>
<78: <java.util.PropertyPermission: int hashCode()> -> <java.net.SocketPermission: int hashCode()>>
<79: <java.net.SocketPermission: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>>
<80: <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>>
<81: <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>>
<82: <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)> -> <java.security.UnresolvedPermission: int hashCode()>>
<83: <java.security.UnresolvedPermission: int hashCode()> -> <javax.security.auth.Subject$SecureSet: int hashCode()>>
<84: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>>
Global flow detected: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PrincipalEntry
sun.security.provider.PolicyParser$PrincipalEntry has been visited already.
<85: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PermissionEntry
sun.security.provider.PolicyParser$PermissionEntry has been visited already.
<86: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyFile$SelfPermission
sun.security.provider.PolicyFile$SelfPermission has been visited already.
<87: <sun.security.provider.PolicyFile$SelfPermission: int hashCode()> -> <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>>
<88: <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>>
<89: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AlgorithmId
sun.security.x509.AlgorithmId has been visited already.
<90: <sun.security.x509.AlgorithmId: int hashCode()> -> <java.util.AbstractMap$SimpleEntry: int hashCode()>>
<91: <java.util.AbstractMap$SimpleEntry: int hashCode()> -> <java.lang.StackTraceElement: int hashCode()>>
<92: <java.lang.StackTraceElement: int hashCode()> -> <java.text.ChoiceFormat: int hashCode()>>
<93: <java.text.ChoiceFormat: int hashCode()> -> <java.text.SimpleDateFormat: int hashCode()>>
<94: <java.text.SimpleDateFormat: int hashCode()> -> <java.text.DecimalFormat: int hashCode()>>
<95: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>>
Global flow detected: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>

Adding connections to callgraphs in class: sun.util.calendar.Era
sun.util.calendar.Era has been visited already.
<96: <sun.util.calendar.Era: int hashCode()> -> <java.util.ImmutableCollections$Set12: int hashCode()>>
<97: <java.util.ImmutableCollections$Set12: int hashCode()> -> <java.util.KeyValueHolder: int hashCode()>>
<98: <java.util.KeyValueHolder: int hashCode()> -> <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>>
<99: <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> -> <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>>
<100: <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)> -> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>>
<101: <java.util.Hashtable: java.lang.Object remove(java.lang.Object)> -> <java.lang.Package: int hashCode()>>
<102: <java.lang.Package: int hashCode()> -> <java.security.SecureClassLoader$CodeSourceKey: int hashCode()>>
<103: <java.security.SecureClassLoader$CodeSourceKey: int hashCode()> -> <java.text.AttributeEntry: int hashCode()>>
<104: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>>
Global flow detected: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>

Adding connections to callgraphs in class: sun.util.calendar.LocalGregorianCalendar
sun.util.calendar.LocalGregorianCalendar has been visited already.
<105: <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)> -> <java.util.ImmutableCollections$SetN: int hashCode()>>
<106: <java.util.ImmutableCollections$SetN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int hashCode()>>
<107: <java.util.ImmutableCollections$MapN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>>
Flows from <java.lang.String: int hashCode()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.String: int hashCode()>" ];
  2 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  3 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  6 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>" ];
  7 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>" ];
  8 [ label="<sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>" ];
  9 [ label="<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>" ];
  10 [ label="<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>" ];
  11 [ label="<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>" ];
  12 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>" ];
  13 [ label="<java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>" ];
  14 [ label="<java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>" ];
  15 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  16 [ label="<java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>" ];
  17 [ label="<java.util.ResourceBundle$CacheKey: int hashCode()>" ];
  18 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>" ];
  19 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>" ];
  20 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>" ];
  21 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>" ];
  22 [ label="<jdk.internal.org.objectweb.asm.Handle: int hashCode()>" ];
  23 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>" ];
  24 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  25 [ label="<jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>" ];
  26 [ label="<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>" ];
  27 [ label="<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>" ];
  28 [ label="<jdk.internal.jimage.ImageReader$Node: int hashCode()>" ];
  29 [ label="<sun.security.util.DerValue: int hashCode()>" ];
  30 [ label="<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>" ];
  31 [ label="<sun.security.jca.ProviderConfig: int hashCode()>" ];
  32 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  33 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  34 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  35 [ label="<java.io.WinNTFileSystem: int hashCode(java.io.File)>" ];
  36 [ label="<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>" ];
  37 [ label="<java.util.Calendar$Builder: java.util.Calendar build()>" ];
  38 [ label="<javax.crypto.CryptoPermission: int hashCode()>" ];
  39 [ label="<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>" ];
  40 [ label="<jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>" ];
  41 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>" ];
  42 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>" ];
  43 [ label="<java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>" ];
  44 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>" ];
  45 [ label="<sun.util.locale.LocaleExtensions: int hashCode()>" ];
  46 [ label="<sun.util.locale.BaseLocale: int hashCode()>" ];
  47 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  48 [ label="<java.text.PatternEntry: int hashCode()>" ];
  49 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  50 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  51 [ label="<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>" ];
  52 [ label="<sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>" ];
  53 [ label="<java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>" ];
  54 [ label="<java.lang.module.ModuleDescriptor$Requires: int hashCode()>" ];
  55 [ label="<java.util.AbstractSet: int hashCode()>" ];
  56 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  57 [ label="<java.security.Provider$UString: int hashCode()>" ];
  58 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  59 [ label="<java.lang.constant.ReferenceClassDescImpl: int hashCode()>" ];
  60 [ label="<java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>" ];
  61 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  62 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  63 [ label="<java.lang.Object: java.lang.String toString()>" ];
  64 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  65 [ label="<sun.security.x509.RDN: int hashCode()>" ];
  66 [ label="<java.text.AttributedString$AttributedStringIterator: int hashCode()>" ];
  67 [ label="<java.net.URLStreamHandler: int hashCode(java.net.URL)>" ];
  68 [ label="<sun.security.x509.EDIPartyName: int hashCode()>" ];
  69 [ label="<sun.security.x509.X500Name: int hashCode()>" ];
  70 [ label="<java.net.URI: int hash(int,java.lang.String)>" ];
  71 [ label="<sun.security.x509.DNSName: int hashCode()>" ];
  72 [ label="<sun.security.x509.RFC822Name: int hashCode()>" ];
  73 [ label="<sun.security.x509.AVA: int hashCode()>" ];
  74 [ label="<java.util.AbstractList: int hashCode()>" ];
  75 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  76 [ label="<java.time.ZoneId: int hashCode()>" ];
  77 [ label="<java.security.BasicPermission: int hashCode()>" ];
  78 [ label="<java.util.PropertyPermission: int hashCode()>" ];
  79 [ label="<java.net.SocketPermission: int hashCode()>" ];
  80 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>" ];
  81 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>" ];
  82 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  83 [ label="<java.security.UnresolvedPermission: int hashCode()>" ];
  84 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  85 [ label="<sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>" ];
  86 [ label="<sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>" ];
  87 [ label="<sun.security.provider.PolicyFile$SelfPermission: int hashCode()>" ];
  88 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  89 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  90 [ label="<sun.security.x509.AlgorithmId: int hashCode()>" ];
  91 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  92 [ label="<java.lang.StackTraceElement: int hashCode()>" ];
  93 [ label="<java.text.ChoiceFormat: int hashCode()>" ];
  94 [ label="<java.text.SimpleDateFormat: int hashCode()>" ];
  95 [ label="<java.text.DecimalFormat: int hashCode()>" ];
  96 [ label="<sun.util.calendar.Era: int hashCode()>" ];
  97 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  98 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  99 [ label="<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" ];
  100 [ label="<java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>" ];
  101 [ label="<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>" ];
  102 [ label="<java.lang.Package: int hashCode()>" ];
  103 [ label="<java.security.SecureClassLoader$CodeSourceKey: int hashCode()>" ];
  104 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  105 [ label="<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>" ];
  106 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  107 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  108 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  46 -> 47;
  47 -> 48;
  48 -> 49;
  49 -> 50;
  50 -> 51;
  51 -> 52;
  52 -> 53;
  53 -> 54;
  54 -> 55;
  55 -> 56;
  56 -> 57;
  57 -> 58;
  58 -> 59;
  59 -> 60;
  60 -> 61;
  61 -> 62;
  62 -> 63;
  63 -> 64;
  64 -> 65;
  65 -> 66;
  66 -> 67;
  67 -> 68;
  68 -> 69;
  69 -> 70;
  70 -> 71;
  71 -> 72;
  72 -> 73;
  73 -> 74;
  74 -> 75;
  75 -> 76;
  76 -> 77;
  77 -> 78;
  78 -> 79;
  79 -> 80;
  80 -> 81;
  81 -> 82;
  82 -> 83;
  83 -> 84;
  84 -> 85;
  85 -> 86;
  86 -> 87;
  87 -> 88;
  88 -> 89;
  89 -> 90;
  90 -> 91;
  91 -> 92;
  92 -> 93;
  93 -> 94;
  94 -> 95;
  95 -> 96;
  96 -> 97;
  97 -> 98;
  98 -> 99;
  99 -> 100;
  100 -> 101;
  101 -> 102;
  102 -> 103;
  103 -> 104;
  104 -> 105;
  105 -> 106;
  106 -> 107;
  107 -> 108;
}

Source found in the callgraph: <java.util.Arrays: int hashCode(byte[])>...
In class: org.whispersystems.libsignal.state.impl.InMemorySignedPreKeyStore
Start traversal: 

Starting from method: <java.util.Arrays: int hashCode(byte[])>
<1: <java.util.Arrays: int hashCode(byte[])> -> <java.security.cert.Certificate: int hashCode()>>
<2: <java.security.cert.Certificate: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>>
<3: <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>>
<4: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>>
Global flow detected: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.Cache$EqualByteArray
sun.security.util.Cache$EqualByteArray has been visited already.
<5: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>>
Global flow detected: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.ObjectIdentifier
sun.security.util.ObjectIdentifier has been visited already.
Flows from <java.util.Arrays: int hashCode(byte[])> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Arrays: int hashCode(byte[])>" ];
  2 [ label="<java.security.cert.Certificate: int hashCode()>" ];
  3 [ label="<java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>" ];
  4 [ label="<java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>" ];
  5 [ label="<sun.security.util.Cache$EqualByteArray: int hashCode()>" ];
  6 [ label="<sun.security.util.ObjectIdentifier: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
}

Source found in the callgraph: <java.util.Optional: java.lang.Object get()>...
In class: org.signal.libsignal.metadata.ProtocolException
Start traversal: 

Starting from method: <java.util.Optional: java.lang.Object get()>
<1: <java.util.Optional: java.lang.Object get()> -> <java.lang.Runtime$Version: int compareBuild(java.lang.Runtime$Version)>>
<2: <java.lang.Runtime$Version: int compareBuild(java.lang.Runtime$Version)> -> <java.lang.Runtime$Version: int comparePre(java.lang.Runtime$Version)>>
<3: <java.lang.Runtime$Version: int comparePre(java.lang.Runtime$Version)> -> <java.lang.Module: java.lang.Module lambda$findModule$2(java.lang.String,java.lang.ModuleLayer)>>
<4: <java.lang.Module: java.lang.Module lambda$findModule$2(java.lang.String,java.lang.ModuleLayer)> -> <java.lang.Runtime$Version: java.lang.String toString()>>
<5: <java.lang.Runtime$Version: java.lang.String toString()> -> <java.lang.module.ModuleReader: java.util.Optional read(java.lang.String)>>
<6: <java.lang.module.ModuleReader: java.util.Optional read(java.lang.String)> -> <java.lang.module.ModuleReader: java.util.Optional open(java.lang.String)>>
<7: <java.lang.module.ModuleReader: java.util.Optional open(java.lang.String)> -> <java.lang.NamedPackage: java.net.URI location()>>
<8: <java.lang.NamedPackage: java.net.URI location()> -> <jdk.internal.loader.Loader$1: java.net.URL run()>>
Global flow detected: <java.lang.NamedPackage: java.net.URI location()> -> <jdk.internal.loader.Loader$1: java.net.URL run()>

Adding connections to callgraphs in class: jdk.internal.loader.Loader$1


***************************
Now we build call graphs for class: jdk.internal.loader.Loader$1
Continue with method: <jdk.internal.loader.Loader$1: java.net.URL run()>


strict digraph G {
  1 [ label="<jdk.internal.loader.Loader$1: java.net.URL run()>" ];
  2 [ label="<java.security.AccessController: java.lang.Object executePrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.lang.Class)>" ];
  3 [ label="<jdk.internal.loader.Loader: java.net.URL findResource(java.lang.String,java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
}

<9: <jdk.internal.loader.Loader$1: java.net.URL run()> -> <java.lang.Runtime$Version: int compareOptional(java.lang.Runtime$Version)>>
Flows from <java.util.Optional: java.lang.Object get()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Optional: java.lang.Object get()>" ];
  2 [ label="<java.lang.Runtime$Version: int compareBuild(java.lang.Runtime$Version)>" ];
  3 [ label="<java.lang.Runtime$Version: int comparePre(java.lang.Runtime$Version)>" ];
  4 [ label="<java.lang.Module: java.lang.Module lambda$findModule$2(java.lang.String,java.lang.ModuleLayer)>" ];
  5 [ label="<java.lang.Runtime$Version: java.lang.String toString()>" ];
  6 [ label="<java.lang.module.ModuleReader: java.util.Optional read(java.lang.String)>" ];
  7 [ label="<java.lang.module.ModuleReader: java.util.Optional open(java.lang.String)>" ];
  8 [ label="<java.lang.NamedPackage: java.net.URI location()>" ];
  9 [ label="<jdk.internal.loader.Loader$1: java.net.URL run()>" ];
  10 [ label="<java.lang.Runtime$Version: int compareOptional(java.lang.Runtime$Version)>" ];
  11 [ label="<java.security.AccessController: java.lang.Object executePrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.lang.Class)>" ];
  12 [ label="<jdk.internal.loader.Loader: java.net.URL findResource(java.lang.String,java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  9 -> 11;
  11 -> 12;
}

Source found in the callgraph: <java.lang.String: int hashCode()>...
In class: org.signal.libsignal.metadata.ProtocolException
Start traversal: 

Starting from method: <java.lang.String: int hashCode()>
<1: <java.lang.String: int hashCode()> -> <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>>
<2: <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>>
<3: <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>>
<4: <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>>
<5: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<6: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>>
<7: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>

Adding connections to callgraphs in class: sun.util.PreHashedMap
sun.util.PreHashedMap has been visited already.
<8: <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)> -> <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>>
<9: <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)> -> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>>
<10: <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)> -> <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>>
<11: <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>>
<12: <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)> -> <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>>
<13: <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)> -> <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>>
<14: <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)> -> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>>
<15: <java.util.Hashtable: java.lang.Object get(java.lang.Object)> -> <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>>
<16: <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)> -> <java.util.ResourceBundle$CacheKey: int hashCode()>>
<17: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>>
Global flow detected: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<18: <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>>
<19: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>>
<20: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>>
<21: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.Handle
jdk.internal.org.objectweb.asm.Handle has been visited already.
<22: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>>
Global flow detected: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<23: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)> -> <java.util.Arrays: int hashCode(java.lang.Object[])>>
<24: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>>
Global flow detected: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.ConstantDynamic
jdk.internal.org.objectweb.asm.ConstantDynamic has been visited already.
<25: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>>
Global flow detected: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter
sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter has been visited already.
<26: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>>
Global flow detected: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>

Adding connections to callgraphs in class: sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter
sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter has been visited already.
<27: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>>
Global flow detected: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.jimage.ImageReader$Node
jdk.internal.jimage.ImageReader$Node has been visited already.
<28: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>>
Global flow detected: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.DerValue
sun.security.util.DerValue has been visited already.
<29: <sun.security.util.DerValue: int hashCode()> -> <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>>
<30: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>>
Global flow detected: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>

Adding connections to callgraphs in class: sun.security.jca.ProviderConfig
sun.security.jca.ProviderConfig has been visited already.
<31: <sun.security.jca.ProviderConfig: int hashCode()> -> <java.util.ArrayList: int hashCodeRange(int,int)>>
<32: <java.util.ArrayList: int hashCodeRange(int,int)> -> <java.util.concurrent.ConcurrentHashMap: int hashCode()>>
<33: <java.util.concurrent.ConcurrentHashMap: int hashCode()> -> <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>>
<34: <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()> -> <java.io.WinNTFileSystem: int hashCode(java.io.File)>>
<35: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>>
Global flow detected: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>

Adding connections to callgraphs in class: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator
sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator has been visited already.
<36: <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)> -> <java.util.Calendar$Builder: java.util.Calendar build()>>
<37: <java.util.Calendar$Builder: java.util.Calendar build()> -> <javax.crypto.CryptoPermission: int hashCode()>>
<38: <javax.crypto.CryptoPermission: int hashCode()> -> <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>>
<39: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>>
Global flow detected: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>

Adding connections to callgraphs in class: jdk.internal.util.Preconditions
jdk.internal.util.Preconditions has been visited already.
<40: <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>>
<41: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>>
<42: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)> -> <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>>
<43: <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>>
<44: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>>
Global flow detected: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.LocaleExtensions
sun.util.locale.LocaleExtensions has been visited already.
<45: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>>
Global flow detected: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.BaseLocale
sun.util.locale.BaseLocale has been visited already.
<46: <sun.util.locale.BaseLocale: int hashCode()> -> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>>
<47: <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()> -> <java.text.PatternEntry: int hashCode()>>
<48: <java.text.PatternEntry: int hashCode()> -> <java.util.Objects: int hashCode(java.lang.Object)>>
<49: <java.util.Objects: int hashCode(java.lang.Object)> -> <java.util.HashMap: int hash(java.lang.Object)>>
<50: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>>
Global flow detected: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString
sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString has been visited already.
<51: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>>
Global flow detected: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility
sun.util.locale.provider.CalendarDataUtility has been visited already.
<52: <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)> -> <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>>
<53: <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)> -> <java.lang.module.ModuleDescriptor$Requires: int hashCode()>>
<54: <java.lang.module.ModuleDescriptor$Requires: int hashCode()> -> <java.util.AbstractSet: int hashCode()>>
<55: <java.util.AbstractSet: int hashCode()> -> <java.util.WeakHashMap: int hash(java.lang.Object)>>
<56: <java.util.WeakHashMap: int hash(java.lang.Object)> -> <java.security.Provider$UString: int hashCode()>>
<57: <java.security.Provider$UString: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>>
<58: <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()> -> <java.lang.constant.ReferenceClassDescImpl: int hashCode()>>
<59: <java.lang.constant.ReferenceClassDescImpl: int hashCode()> -> <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>>
<60: <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>>
<61: <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()> -> <java.util.TreeMap$Entry: int hashCode()>>
<62: <java.util.TreeMap$Entry: int hashCode()> -> <java.lang.Object: java.lang.String toString()>>
<63: <java.lang.Object: java.lang.String toString()> -> <java.util.Hashtable: boolean containsKey(java.lang.Object)>>
<64: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>>
Global flow detected: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RDN
sun.security.x509.RDN has been visited already.
<65: <sun.security.x509.RDN: int hashCode()> -> <java.text.AttributedString$AttributedStringIterator: int hashCode()>>
<66: <java.text.AttributedString$AttributedStringIterator: int hashCode()> -> <java.net.URLStreamHandler: int hashCode(java.net.URL)>>
<67: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>>
Global flow detected: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.EDIPartyName
sun.security.x509.EDIPartyName has been visited already.
<68: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>>
Global flow detected: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.X500Name
sun.security.x509.X500Name has been visited already.
<69: <sun.security.x509.X500Name: int hashCode()> -> <java.net.URI: int hash(int,java.lang.String)>>
<70: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>>
Global flow detected: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.DNSName
sun.security.x509.DNSName has been visited already.
<71: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>>
Global flow detected: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RFC822Name
sun.security.x509.RFC822Name has been visited already.
<72: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>>
Global flow detected: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AVA
sun.security.x509.AVA has been visited already.
<73: <sun.security.x509.AVA: int hashCode()> -> <java.util.AbstractList: int hashCode()>>
<74: <java.util.AbstractList: int hashCode()> -> <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>>
<75: <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)> -> <java.time.ZoneId: int hashCode()>>
<76: <java.time.ZoneId: int hashCode()> -> <java.security.BasicPermission: int hashCode()>>
<77: <java.security.BasicPermission: int hashCode()> -> <java.util.PropertyPermission: int hashCode()>>
<78: <java.util.PropertyPermission: int hashCode()> -> <java.net.SocketPermission: int hashCode()>>
<79: <java.net.SocketPermission: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>>
<80: <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>>
<81: <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>>
<82: <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)> -> <java.security.UnresolvedPermission: int hashCode()>>
<83: <java.security.UnresolvedPermission: int hashCode()> -> <javax.security.auth.Subject$SecureSet: int hashCode()>>
<84: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>>
Global flow detected: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PrincipalEntry
sun.security.provider.PolicyParser$PrincipalEntry has been visited already.
<85: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PermissionEntry
sun.security.provider.PolicyParser$PermissionEntry has been visited already.
<86: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyFile$SelfPermission
sun.security.provider.PolicyFile$SelfPermission has been visited already.
<87: <sun.security.provider.PolicyFile$SelfPermission: int hashCode()> -> <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>>
<88: <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>>
<89: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AlgorithmId
sun.security.x509.AlgorithmId has been visited already.
<90: <sun.security.x509.AlgorithmId: int hashCode()> -> <java.util.AbstractMap$SimpleEntry: int hashCode()>>
<91: <java.util.AbstractMap$SimpleEntry: int hashCode()> -> <java.lang.StackTraceElement: int hashCode()>>
<92: <java.lang.StackTraceElement: int hashCode()> -> <java.text.ChoiceFormat: int hashCode()>>
<93: <java.text.ChoiceFormat: int hashCode()> -> <java.text.SimpleDateFormat: int hashCode()>>
<94: <java.text.SimpleDateFormat: int hashCode()> -> <java.text.DecimalFormat: int hashCode()>>
<95: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>>
Global flow detected: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>

Adding connections to callgraphs in class: sun.util.calendar.Era
sun.util.calendar.Era has been visited already.
<96: <sun.util.calendar.Era: int hashCode()> -> <java.util.ImmutableCollections$Set12: int hashCode()>>
<97: <java.util.ImmutableCollections$Set12: int hashCode()> -> <java.util.KeyValueHolder: int hashCode()>>
<98: <java.util.KeyValueHolder: int hashCode()> -> <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>>
<99: <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> -> <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>>
<100: <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)> -> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>>
<101: <java.util.Hashtable: java.lang.Object remove(java.lang.Object)> -> <java.lang.Package: int hashCode()>>
<102: <java.lang.Package: int hashCode()> -> <java.security.SecureClassLoader$CodeSourceKey: int hashCode()>>
<103: <java.security.SecureClassLoader$CodeSourceKey: int hashCode()> -> <java.text.AttributeEntry: int hashCode()>>
<104: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>>
Global flow detected: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>

Adding connections to callgraphs in class: sun.util.calendar.LocalGregorianCalendar
sun.util.calendar.LocalGregorianCalendar has been visited already.
<105: <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)> -> <java.util.ImmutableCollections$SetN: int hashCode()>>
<106: <java.util.ImmutableCollections$SetN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int hashCode()>>
<107: <java.util.ImmutableCollections$MapN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>>
Flows from <java.lang.String: int hashCode()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.String: int hashCode()>" ];
  2 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  3 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  6 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>" ];
  7 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>" ];
  8 [ label="<sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>" ];
  9 [ label="<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>" ];
  10 [ label="<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>" ];
  11 [ label="<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>" ];
  12 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>" ];
  13 [ label="<java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>" ];
  14 [ label="<java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>" ];
  15 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  16 [ label="<java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>" ];
  17 [ label="<java.util.ResourceBundle$CacheKey: int hashCode()>" ];
  18 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>" ];
  19 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>" ];
  20 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>" ];
  21 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>" ];
  22 [ label="<jdk.internal.org.objectweb.asm.Handle: int hashCode()>" ];
  23 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>" ];
  24 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  25 [ label="<jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>" ];
  26 [ label="<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>" ];
  27 [ label="<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>" ];
  28 [ label="<jdk.internal.jimage.ImageReader$Node: int hashCode()>" ];
  29 [ label="<sun.security.util.DerValue: int hashCode()>" ];
  30 [ label="<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>" ];
  31 [ label="<sun.security.jca.ProviderConfig: int hashCode()>" ];
  32 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  33 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  34 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  35 [ label="<java.io.WinNTFileSystem: int hashCode(java.io.File)>" ];
  36 [ label="<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>" ];
  37 [ label="<java.util.Calendar$Builder: java.util.Calendar build()>" ];
  38 [ label="<javax.crypto.CryptoPermission: int hashCode()>" ];
  39 [ label="<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>" ];
  40 [ label="<jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>" ];
  41 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>" ];
  42 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>" ];
  43 [ label="<java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>" ];
  44 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>" ];
  45 [ label="<sun.util.locale.LocaleExtensions: int hashCode()>" ];
  46 [ label="<sun.util.locale.BaseLocale: int hashCode()>" ];
  47 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  48 [ label="<java.text.PatternEntry: int hashCode()>" ];
  49 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  50 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  51 [ label="<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>" ];
  52 [ label="<sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>" ];
  53 [ label="<java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>" ];
  54 [ label="<java.lang.module.ModuleDescriptor$Requires: int hashCode()>" ];
  55 [ label="<java.util.AbstractSet: int hashCode()>" ];
  56 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  57 [ label="<java.security.Provider$UString: int hashCode()>" ];
  58 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  59 [ label="<java.lang.constant.ReferenceClassDescImpl: int hashCode()>" ];
  60 [ label="<java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>" ];
  61 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  62 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  63 [ label="<java.lang.Object: java.lang.String toString()>" ];
  64 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  65 [ label="<sun.security.x509.RDN: int hashCode()>" ];
  66 [ label="<java.text.AttributedString$AttributedStringIterator: int hashCode()>" ];
  67 [ label="<java.net.URLStreamHandler: int hashCode(java.net.URL)>" ];
  68 [ label="<sun.security.x509.EDIPartyName: int hashCode()>" ];
  69 [ label="<sun.security.x509.X500Name: int hashCode()>" ];
  70 [ label="<java.net.URI: int hash(int,java.lang.String)>" ];
  71 [ label="<sun.security.x509.DNSName: int hashCode()>" ];
  72 [ label="<sun.security.x509.RFC822Name: int hashCode()>" ];
  73 [ label="<sun.security.x509.AVA: int hashCode()>" ];
  74 [ label="<java.util.AbstractList: int hashCode()>" ];
  75 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  76 [ label="<java.time.ZoneId: int hashCode()>" ];
  77 [ label="<java.security.BasicPermission: int hashCode()>" ];
  78 [ label="<java.util.PropertyPermission: int hashCode()>" ];
  79 [ label="<java.net.SocketPermission: int hashCode()>" ];
  80 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>" ];
  81 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>" ];
  82 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  83 [ label="<java.security.UnresolvedPermission: int hashCode()>" ];
  84 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  85 [ label="<sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>" ];
  86 [ label="<sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>" ];
  87 [ label="<sun.security.provider.PolicyFile$SelfPermission: int hashCode()>" ];
  88 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  89 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  90 [ label="<sun.security.x509.AlgorithmId: int hashCode()>" ];
  91 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  92 [ label="<java.lang.StackTraceElement: int hashCode()>" ];
  93 [ label="<java.text.ChoiceFormat: int hashCode()>" ];
  94 [ label="<java.text.SimpleDateFormat: int hashCode()>" ];
  95 [ label="<java.text.DecimalFormat: int hashCode()>" ];
  96 [ label="<sun.util.calendar.Era: int hashCode()>" ];
  97 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  98 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  99 [ label="<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" ];
  100 [ label="<java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>" ];
  101 [ label="<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>" ];
  102 [ label="<java.lang.Package: int hashCode()>" ];
  103 [ label="<java.security.SecureClassLoader$CodeSourceKey: int hashCode()>" ];
  104 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  105 [ label="<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>" ];
  106 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  107 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  108 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  46 -> 47;
  47 -> 48;
  48 -> 49;
  49 -> 50;
  50 -> 51;
  51 -> 52;
  52 -> 53;
  53 -> 54;
  54 -> 55;
  55 -> 56;
  56 -> 57;
  57 -> 58;
  58 -> 59;
  59 -> 60;
  60 -> 61;
  61 -> 62;
  62 -> 63;
  63 -> 64;
  64 -> 65;
  65 -> 66;
  66 -> 67;
  67 -> 68;
  68 -> 69;
  69 -> 70;
  70 -> 71;
  71 -> 72;
  72 -> 73;
  73 -> 74;
  74 -> 75;
  75 -> 76;
  76 -> 77;
  77 -> 78;
  78 -> 79;
  79 -> 80;
  80 -> 81;
  81 -> 82;
  82 -> 83;
  83 -> 84;
  84 -> 85;
  85 -> 86;
  86 -> 87;
  87 -> 88;
  88 -> 89;
  89 -> 90;
  90 -> 91;
  91 -> 92;
  92 -> 93;
  93 -> 94;
  94 -> 95;
  95 -> 96;
  96 -> 97;
  97 -> 98;
  98 -> 99;
  99 -> 100;
  100 -> 101;
  101 -> 102;
  102 -> 103;
  103 -> 104;
  104 -> 105;
  105 -> 106;
  106 -> 107;
  107 -> 108;
}

Source found in the callgraph: <java.util.Arrays: int hashCode(byte[])>...
In class: org.signal.libsignal.metadata.ProtocolException
Start traversal: 

Starting from method: <java.util.Arrays: int hashCode(byte[])>
<1: <java.util.Arrays: int hashCode(byte[])> -> <java.security.cert.Certificate: int hashCode()>>
<2: <java.security.cert.Certificate: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>>
<3: <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>>
<4: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>>
Global flow detected: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.Cache$EqualByteArray
sun.security.util.Cache$EqualByteArray has been visited already.
<5: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>>
Global flow detected: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.ObjectIdentifier
sun.security.util.ObjectIdentifier has been visited already.
Flows from <java.util.Arrays: int hashCode(byte[])> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Arrays: int hashCode(byte[])>" ];
  2 [ label="<java.security.cert.Certificate: int hashCode()>" ];
  3 [ label="<java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>" ];
  4 [ label="<java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>" ];
  5 [ label="<sun.security.util.Cache$EqualByteArray: int hashCode()>" ];
  6 [ label="<sun.security.util.ObjectIdentifier: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
}

Source found in the callgraph: <java.util.Optional: java.lang.Object get()>...
In class: org.signal.zkgroup.ServerSecretParams
Start traversal: 

Starting from method: <java.util.Optional: java.lang.Object get()>
<1: <java.util.Optional: java.lang.Object get()> -> <java.lang.Runtime$Version: int compareBuild(java.lang.Runtime$Version)>>
<2: <java.lang.Runtime$Version: int compareBuild(java.lang.Runtime$Version)> -> <java.lang.Runtime$Version: int comparePre(java.lang.Runtime$Version)>>
<3: <java.lang.Runtime$Version: int comparePre(java.lang.Runtime$Version)> -> <java.lang.Module: java.lang.Module lambda$findModule$2(java.lang.String,java.lang.ModuleLayer)>>
<4: <java.lang.Module: java.lang.Module lambda$findModule$2(java.lang.String,java.lang.ModuleLayer)> -> <java.lang.Runtime$Version: java.lang.String toString()>>
<5: <java.lang.Runtime$Version: java.lang.String toString()> -> <java.lang.module.ModuleReader: java.util.Optional read(java.lang.String)>>
<6: <java.lang.module.ModuleReader: java.util.Optional read(java.lang.String)> -> <java.lang.module.ModuleReader: java.util.Optional open(java.lang.String)>>
<7: <java.lang.module.ModuleReader: java.util.Optional open(java.lang.String)> -> <java.lang.NamedPackage: java.net.URI location()>>
<8: <java.lang.NamedPackage: java.net.URI location()> -> <jdk.internal.loader.Loader$1: java.net.URL run()>>
Global flow detected: <java.lang.NamedPackage: java.net.URI location()> -> <jdk.internal.loader.Loader$1: java.net.URL run()>

Adding connections to callgraphs in class: jdk.internal.loader.Loader$1
jdk.internal.loader.Loader$1 has been visited already.
<9: <jdk.internal.loader.Loader$1: java.net.URL run()> -> <java.lang.Runtime$Version: int compareOptional(java.lang.Runtime$Version)>>
Flows from <java.util.Optional: java.lang.Object get()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Optional: java.lang.Object get()>" ];
  2 [ label="<java.lang.Runtime$Version: int compareBuild(java.lang.Runtime$Version)>" ];
  3 [ label="<java.lang.Runtime$Version: int comparePre(java.lang.Runtime$Version)>" ];
  4 [ label="<java.lang.Module: java.lang.Module lambda$findModule$2(java.lang.String,java.lang.ModuleLayer)>" ];
  5 [ label="<java.lang.Runtime$Version: java.lang.String toString()>" ];
  6 [ label="<java.lang.module.ModuleReader: java.util.Optional read(java.lang.String)>" ];
  7 [ label="<java.lang.module.ModuleReader: java.util.Optional open(java.lang.String)>" ];
  8 [ label="<java.lang.NamedPackage: java.net.URI location()>" ];
  9 [ label="<jdk.internal.loader.Loader$1: java.net.URL run()>" ];
  10 [ label="<java.lang.Runtime$Version: int compareOptional(java.lang.Runtime$Version)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
}

Source found in the callgraph: <java.lang.String: int hashCode()>...
In class: org.signal.zkgroup.ServerSecretParams
Start traversal: 

Starting from method: <java.lang.String: int hashCode()>
<1: <java.lang.String: int hashCode()> -> <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>>
<2: <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>>
<3: <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>>
<4: <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>>
<5: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<6: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>>
<7: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>

Adding connections to callgraphs in class: sun.util.PreHashedMap
sun.util.PreHashedMap has been visited already.
<8: <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)> -> <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>>
<9: <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)> -> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>>
<10: <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)> -> <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>>
<11: <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>>
<12: <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)> -> <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>>
<13: <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)> -> <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>>
<14: <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)> -> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>>
<15: <java.util.Hashtable: java.lang.Object get(java.lang.Object)> -> <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>>
<16: <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)> -> <java.util.ResourceBundle$CacheKey: int hashCode()>>
<17: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>>
Global flow detected: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<18: <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>>
<19: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>>
<20: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>>
<21: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.Handle
jdk.internal.org.objectweb.asm.Handle has been visited already.
<22: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>>
Global flow detected: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<23: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)> -> <java.util.Arrays: int hashCode(java.lang.Object[])>>
<24: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>>
Global flow detected: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.ConstantDynamic
jdk.internal.org.objectweb.asm.ConstantDynamic has been visited already.
<25: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>>
Global flow detected: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter
sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter has been visited already.
<26: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>>
Global flow detected: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>

Adding connections to callgraphs in class: sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter
sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter has been visited already.
<27: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>>
Global flow detected: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.jimage.ImageReader$Node
jdk.internal.jimage.ImageReader$Node has been visited already.
<28: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>>
Global flow detected: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.DerValue
sun.security.util.DerValue has been visited already.
<29: <sun.security.util.DerValue: int hashCode()> -> <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>>
<30: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>>
Global flow detected: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>

Adding connections to callgraphs in class: sun.security.jca.ProviderConfig
sun.security.jca.ProviderConfig has been visited already.
<31: <sun.security.jca.ProviderConfig: int hashCode()> -> <java.util.ArrayList: int hashCodeRange(int,int)>>
<32: <java.util.ArrayList: int hashCodeRange(int,int)> -> <java.util.concurrent.ConcurrentHashMap: int hashCode()>>
<33: <java.util.concurrent.ConcurrentHashMap: int hashCode()> -> <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>>
<34: <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()> -> <java.io.WinNTFileSystem: int hashCode(java.io.File)>>
<35: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>>
Global flow detected: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>

Adding connections to callgraphs in class: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator
sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator has been visited already.
<36: <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)> -> <java.util.Calendar$Builder: java.util.Calendar build()>>
<37: <java.util.Calendar$Builder: java.util.Calendar build()> -> <javax.crypto.CryptoPermission: int hashCode()>>
<38: <javax.crypto.CryptoPermission: int hashCode()> -> <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>>
<39: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>>
Global flow detected: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>

Adding connections to callgraphs in class: jdk.internal.util.Preconditions
jdk.internal.util.Preconditions has been visited already.
<40: <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>>
<41: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>>
<42: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)> -> <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>>
<43: <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>>
<44: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>>
Global flow detected: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.LocaleExtensions
sun.util.locale.LocaleExtensions has been visited already.
<45: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>>
Global flow detected: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.BaseLocale
sun.util.locale.BaseLocale has been visited already.
<46: <sun.util.locale.BaseLocale: int hashCode()> -> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>>
<47: <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()> -> <java.text.PatternEntry: int hashCode()>>
<48: <java.text.PatternEntry: int hashCode()> -> <java.util.Objects: int hashCode(java.lang.Object)>>
<49: <java.util.Objects: int hashCode(java.lang.Object)> -> <java.util.HashMap: int hash(java.lang.Object)>>
<50: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>>
Global flow detected: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString
sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString has been visited already.
<51: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>>
Global flow detected: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility
sun.util.locale.provider.CalendarDataUtility has been visited already.
<52: <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)> -> <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>>
<53: <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)> -> <java.lang.module.ModuleDescriptor$Requires: int hashCode()>>
<54: <java.lang.module.ModuleDescriptor$Requires: int hashCode()> -> <java.util.AbstractSet: int hashCode()>>
<55: <java.util.AbstractSet: int hashCode()> -> <java.util.WeakHashMap: int hash(java.lang.Object)>>
<56: <java.util.WeakHashMap: int hash(java.lang.Object)> -> <java.security.Provider$UString: int hashCode()>>
<57: <java.security.Provider$UString: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>>
<58: <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()> -> <java.lang.constant.ReferenceClassDescImpl: int hashCode()>>
<59: <java.lang.constant.ReferenceClassDescImpl: int hashCode()> -> <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>>
<60: <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>>
<61: <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()> -> <java.util.TreeMap$Entry: int hashCode()>>
<62: <java.util.TreeMap$Entry: int hashCode()> -> <java.lang.Object: java.lang.String toString()>>
<63: <java.lang.Object: java.lang.String toString()> -> <java.util.Hashtable: boolean containsKey(java.lang.Object)>>
<64: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>>
Global flow detected: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RDN
sun.security.x509.RDN has been visited already.
<65: <sun.security.x509.RDN: int hashCode()> -> <java.text.AttributedString$AttributedStringIterator: int hashCode()>>
<66: <java.text.AttributedString$AttributedStringIterator: int hashCode()> -> <java.net.URLStreamHandler: int hashCode(java.net.URL)>>
<67: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>>
Global flow detected: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.EDIPartyName
sun.security.x509.EDIPartyName has been visited already.
<68: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>>
Global flow detected: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.X500Name
sun.security.x509.X500Name has been visited already.
<69: <sun.security.x509.X500Name: int hashCode()> -> <java.net.URI: int hash(int,java.lang.String)>>
<70: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>>
Global flow detected: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.DNSName
sun.security.x509.DNSName has been visited already.
<71: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>>
Global flow detected: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RFC822Name
sun.security.x509.RFC822Name has been visited already.
<72: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>>
Global flow detected: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AVA
sun.security.x509.AVA has been visited already.
<73: <sun.security.x509.AVA: int hashCode()> -> <java.util.AbstractList: int hashCode()>>
<74: <java.util.AbstractList: int hashCode()> -> <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>>
<75: <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)> -> <java.time.ZoneId: int hashCode()>>
<76: <java.time.ZoneId: int hashCode()> -> <java.security.BasicPermission: int hashCode()>>
<77: <java.security.BasicPermission: int hashCode()> -> <java.util.PropertyPermission: int hashCode()>>
<78: <java.util.PropertyPermission: int hashCode()> -> <java.net.SocketPermission: int hashCode()>>
<79: <java.net.SocketPermission: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>>
<80: <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>>
<81: <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>>
<82: <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)> -> <java.security.UnresolvedPermission: int hashCode()>>
<83: <java.security.UnresolvedPermission: int hashCode()> -> <javax.security.auth.Subject$SecureSet: int hashCode()>>
<84: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>>
Global flow detected: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PrincipalEntry
sun.security.provider.PolicyParser$PrincipalEntry has been visited already.
<85: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PermissionEntry
sun.security.provider.PolicyParser$PermissionEntry has been visited already.
<86: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyFile$SelfPermission
sun.security.provider.PolicyFile$SelfPermission has been visited already.
<87: <sun.security.provider.PolicyFile$SelfPermission: int hashCode()> -> <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>>
<88: <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>>
<89: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AlgorithmId
sun.security.x509.AlgorithmId has been visited already.
<90: <sun.security.x509.AlgorithmId: int hashCode()> -> <java.util.AbstractMap$SimpleEntry: int hashCode()>>
<91: <java.util.AbstractMap$SimpleEntry: int hashCode()> -> <java.lang.StackTraceElement: int hashCode()>>
<92: <java.lang.StackTraceElement: int hashCode()> -> <java.text.ChoiceFormat: int hashCode()>>
<93: <java.text.ChoiceFormat: int hashCode()> -> <java.text.SimpleDateFormat: int hashCode()>>
<94: <java.text.SimpleDateFormat: int hashCode()> -> <java.text.DecimalFormat: int hashCode()>>
<95: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>>
Global flow detected: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>

Adding connections to callgraphs in class: sun.util.calendar.Era
sun.util.calendar.Era has been visited already.
<96: <sun.util.calendar.Era: int hashCode()> -> <java.util.ImmutableCollections$Set12: int hashCode()>>
<97: <java.util.ImmutableCollections$Set12: int hashCode()> -> <java.util.KeyValueHolder: int hashCode()>>
<98: <java.util.KeyValueHolder: int hashCode()> -> <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>>
<99: <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> -> <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>>
<100: <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)> -> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>>
<101: <java.util.Hashtable: java.lang.Object remove(java.lang.Object)> -> <java.lang.Package: int hashCode()>>
<102: <java.lang.Package: int hashCode()> -> <java.security.SecureClassLoader$CodeSourceKey: int hashCode()>>
<103: <java.security.SecureClassLoader$CodeSourceKey: int hashCode()> -> <java.text.AttributeEntry: int hashCode()>>
<104: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>>
Global flow detected: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>

Adding connections to callgraphs in class: sun.util.calendar.LocalGregorianCalendar
sun.util.calendar.LocalGregorianCalendar has been visited already.
<105: <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)> -> <java.util.ImmutableCollections$SetN: int hashCode()>>
<106: <java.util.ImmutableCollections$SetN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int hashCode()>>
<107: <java.util.ImmutableCollections$MapN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>>
Flows from <java.lang.String: int hashCode()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.String: int hashCode()>" ];
  2 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  3 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  6 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>" ];
  7 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>" ];
  8 [ label="<sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>" ];
  9 [ label="<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>" ];
  10 [ label="<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>" ];
  11 [ label="<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>" ];
  12 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>" ];
  13 [ label="<java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>" ];
  14 [ label="<java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>" ];
  15 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  16 [ label="<java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>" ];
  17 [ label="<java.util.ResourceBundle$CacheKey: int hashCode()>" ];
  18 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>" ];
  19 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>" ];
  20 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>" ];
  21 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>" ];
  22 [ label="<jdk.internal.org.objectweb.asm.Handle: int hashCode()>" ];
  23 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>" ];
  24 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  25 [ label="<jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>" ];
  26 [ label="<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>" ];
  27 [ label="<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>" ];
  28 [ label="<jdk.internal.jimage.ImageReader$Node: int hashCode()>" ];
  29 [ label="<sun.security.util.DerValue: int hashCode()>" ];
  30 [ label="<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>" ];
  31 [ label="<sun.security.jca.ProviderConfig: int hashCode()>" ];
  32 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  33 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  34 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  35 [ label="<java.io.WinNTFileSystem: int hashCode(java.io.File)>" ];
  36 [ label="<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>" ];
  37 [ label="<java.util.Calendar$Builder: java.util.Calendar build()>" ];
  38 [ label="<javax.crypto.CryptoPermission: int hashCode()>" ];
  39 [ label="<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>" ];
  40 [ label="<jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>" ];
  41 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>" ];
  42 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>" ];
  43 [ label="<java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>" ];
  44 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>" ];
  45 [ label="<sun.util.locale.LocaleExtensions: int hashCode()>" ];
  46 [ label="<sun.util.locale.BaseLocale: int hashCode()>" ];
  47 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  48 [ label="<java.text.PatternEntry: int hashCode()>" ];
  49 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  50 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  51 [ label="<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>" ];
  52 [ label="<sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>" ];
  53 [ label="<java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>" ];
  54 [ label="<java.lang.module.ModuleDescriptor$Requires: int hashCode()>" ];
  55 [ label="<java.util.AbstractSet: int hashCode()>" ];
  56 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  57 [ label="<java.security.Provider$UString: int hashCode()>" ];
  58 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  59 [ label="<java.lang.constant.ReferenceClassDescImpl: int hashCode()>" ];
  60 [ label="<java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>" ];
  61 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  62 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  63 [ label="<java.lang.Object: java.lang.String toString()>" ];
  64 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  65 [ label="<sun.security.x509.RDN: int hashCode()>" ];
  66 [ label="<java.text.AttributedString$AttributedStringIterator: int hashCode()>" ];
  67 [ label="<java.net.URLStreamHandler: int hashCode(java.net.URL)>" ];
  68 [ label="<sun.security.x509.EDIPartyName: int hashCode()>" ];
  69 [ label="<sun.security.x509.X500Name: int hashCode()>" ];
  70 [ label="<java.net.URI: int hash(int,java.lang.String)>" ];
  71 [ label="<sun.security.x509.DNSName: int hashCode()>" ];
  72 [ label="<sun.security.x509.RFC822Name: int hashCode()>" ];
  73 [ label="<sun.security.x509.AVA: int hashCode()>" ];
  74 [ label="<java.util.AbstractList: int hashCode()>" ];
  75 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  76 [ label="<java.time.ZoneId: int hashCode()>" ];
  77 [ label="<java.security.BasicPermission: int hashCode()>" ];
  78 [ label="<java.util.PropertyPermission: int hashCode()>" ];
  79 [ label="<java.net.SocketPermission: int hashCode()>" ];
  80 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>" ];
  81 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>" ];
  82 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  83 [ label="<java.security.UnresolvedPermission: int hashCode()>" ];
  84 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  85 [ label="<sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>" ];
  86 [ label="<sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>" ];
  87 [ label="<sun.security.provider.PolicyFile$SelfPermission: int hashCode()>" ];
  88 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  89 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  90 [ label="<sun.security.x509.AlgorithmId: int hashCode()>" ];
  91 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  92 [ label="<java.lang.StackTraceElement: int hashCode()>" ];
  93 [ label="<java.text.ChoiceFormat: int hashCode()>" ];
  94 [ label="<java.text.SimpleDateFormat: int hashCode()>" ];
  95 [ label="<java.text.DecimalFormat: int hashCode()>" ];
  96 [ label="<sun.util.calendar.Era: int hashCode()>" ];
  97 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  98 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  99 [ label="<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" ];
  100 [ label="<java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>" ];
  101 [ label="<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>" ];
  102 [ label="<java.lang.Package: int hashCode()>" ];
  103 [ label="<java.security.SecureClassLoader$CodeSourceKey: int hashCode()>" ];
  104 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  105 [ label="<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>" ];
  106 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  107 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  108 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  46 -> 47;
  47 -> 48;
  48 -> 49;
  49 -> 50;
  50 -> 51;
  51 -> 52;
  52 -> 53;
  53 -> 54;
  54 -> 55;
  55 -> 56;
  56 -> 57;
  57 -> 58;
  58 -> 59;
  59 -> 60;
  60 -> 61;
  61 -> 62;
  62 -> 63;
  63 -> 64;
  64 -> 65;
  65 -> 66;
  66 -> 67;
  67 -> 68;
  68 -> 69;
  69 -> 70;
  70 -> 71;
  71 -> 72;
  72 -> 73;
  73 -> 74;
  74 -> 75;
  75 -> 76;
  76 -> 77;
  77 -> 78;
  78 -> 79;
  79 -> 80;
  80 -> 81;
  81 -> 82;
  82 -> 83;
  83 -> 84;
  84 -> 85;
  85 -> 86;
  86 -> 87;
  87 -> 88;
  88 -> 89;
  89 -> 90;
  90 -> 91;
  91 -> 92;
  92 -> 93;
  93 -> 94;
  94 -> 95;
  95 -> 96;
  96 -> 97;
  97 -> 98;
  98 -> 99;
  99 -> 100;
  100 -> 101;
  101 -> 102;
  102 -> 103;
  103 -> 104;
  104 -> 105;
  105 -> 106;
  106 -> 107;
  107 -> 108;
}

Source found in the callgraph: <java.util.Arrays: int hashCode(byte[])>...
In class: org.signal.zkgroup.ServerSecretParams
Start traversal: 

Starting from method: <java.util.Arrays: int hashCode(byte[])>
<1: <java.util.Arrays: int hashCode(byte[])> -> <java.security.cert.Certificate: int hashCode()>>
<2: <java.security.cert.Certificate: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>>
<3: <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>>
<4: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>>
Global flow detected: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.Cache$EqualByteArray
sun.security.util.Cache$EqualByteArray has been visited already.
<5: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>>
Global flow detected: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.ObjectIdentifier
sun.security.util.ObjectIdentifier has been visited already.
Flows from <java.util.Arrays: int hashCode(byte[])> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Arrays: int hashCode(byte[])>" ];
  2 [ label="<java.security.cert.Certificate: int hashCode()>" ];
  3 [ label="<java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>" ];
  4 [ label="<java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>" ];
  5 [ label="<sun.security.util.Cache$EqualByteArray: int hashCode()>" ];
  6 [ label="<sun.security.util.ObjectIdentifier: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
}

Source found in the callgraph: <java.util.Optional: java.lang.Object get()>...
In class: org.whispersystems.libsignal.util.Pair
Start traversal: 

Starting from method: <java.util.Optional: java.lang.Object get()>
<1: <java.util.Optional: java.lang.Object get()> -> <java.lang.Runtime$Version: int compareBuild(java.lang.Runtime$Version)>>
<2: <java.lang.Runtime$Version: int compareBuild(java.lang.Runtime$Version)> -> <java.lang.Runtime$Version: int comparePre(java.lang.Runtime$Version)>>
<3: <java.lang.Runtime$Version: int comparePre(java.lang.Runtime$Version)> -> <java.lang.Module: java.lang.Module lambda$findModule$2(java.lang.String,java.lang.ModuleLayer)>>
<4: <java.lang.Module: java.lang.Module lambda$findModule$2(java.lang.String,java.lang.ModuleLayer)> -> <java.lang.Runtime$Version: java.lang.String toString()>>
<5: <java.lang.Runtime$Version: java.lang.String toString()> -> <java.lang.module.ModuleReader: java.util.Optional read(java.lang.String)>>
<6: <java.lang.module.ModuleReader: java.util.Optional read(java.lang.String)> -> <java.lang.module.ModuleReader: java.util.Optional open(java.lang.String)>>
<7: <java.lang.module.ModuleReader: java.util.Optional open(java.lang.String)> -> <java.lang.NamedPackage: java.net.URI location()>>
<8: <java.lang.NamedPackage: java.net.URI location()> -> <jdk.internal.loader.Loader$1: java.net.URL run()>>
Global flow detected: <java.lang.NamedPackage: java.net.URI location()> -> <jdk.internal.loader.Loader$1: java.net.URL run()>

Adding connections to callgraphs in class: jdk.internal.loader.Loader$1
jdk.internal.loader.Loader$1 has been visited already.
<9: <jdk.internal.loader.Loader$1: java.net.URL run()> -> <java.lang.Runtime$Version: int compareOptional(java.lang.Runtime$Version)>>
Flows from <java.util.Optional: java.lang.Object get()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Optional: java.lang.Object get()>" ];
  2 [ label="<java.lang.Runtime$Version: int compareBuild(java.lang.Runtime$Version)>" ];
  3 [ label="<java.lang.Runtime$Version: int comparePre(java.lang.Runtime$Version)>" ];
  4 [ label="<java.lang.Module: java.lang.Module lambda$findModule$2(java.lang.String,java.lang.ModuleLayer)>" ];
  5 [ label="<java.lang.Runtime$Version: java.lang.String toString()>" ];
  6 [ label="<java.lang.module.ModuleReader: java.util.Optional read(java.lang.String)>" ];
  7 [ label="<java.lang.module.ModuleReader: java.util.Optional open(java.lang.String)>" ];
  8 [ label="<java.lang.NamedPackage: java.net.URI location()>" ];
  9 [ label="<jdk.internal.loader.Loader$1: java.net.URL run()>" ];
  10 [ label="<java.lang.Runtime$Version: int compareOptional(java.lang.Runtime$Version)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
}

Source found in the callgraph: <java.lang.String: int hashCode()>...
In class: org.whispersystems.libsignal.util.Pair
Start traversal: 

Starting from method: <java.lang.String: int hashCode()>
<1: <java.lang.String: int hashCode()> -> <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>>
<2: <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>>
<3: <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>>
<4: <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>>
<5: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<6: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>>
<7: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>

Adding connections to callgraphs in class: sun.util.PreHashedMap
sun.util.PreHashedMap has been visited already.
<8: <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)> -> <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>>
<9: <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)> -> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>>
<10: <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)> -> <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>>
<11: <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>>
<12: <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)> -> <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>>
<13: <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)> -> <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>>
<14: <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)> -> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>>
<15: <java.util.Hashtable: java.lang.Object get(java.lang.Object)> -> <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>>
<16: <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)> -> <java.util.ResourceBundle$CacheKey: int hashCode()>>
<17: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>>
Global flow detected: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<18: <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>>
<19: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>>
<20: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>>
<21: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.Handle
jdk.internal.org.objectweb.asm.Handle has been visited already.
<22: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>>
Global flow detected: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<23: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)> -> <java.util.Arrays: int hashCode(java.lang.Object[])>>
<24: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>>
Global flow detected: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.ConstantDynamic
jdk.internal.org.objectweb.asm.ConstantDynamic has been visited already.
<25: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>>
Global flow detected: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter
sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter has been visited already.
<26: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>>
Global flow detected: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>

Adding connections to callgraphs in class: sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter
sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter has been visited already.
<27: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>>
Global flow detected: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.jimage.ImageReader$Node
jdk.internal.jimage.ImageReader$Node has been visited already.
<28: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>>
Global flow detected: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.DerValue
sun.security.util.DerValue has been visited already.
<29: <sun.security.util.DerValue: int hashCode()> -> <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>>
<30: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>>
Global flow detected: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>

Adding connections to callgraphs in class: sun.security.jca.ProviderConfig
sun.security.jca.ProviderConfig has been visited already.
<31: <sun.security.jca.ProviderConfig: int hashCode()> -> <java.util.ArrayList: int hashCodeRange(int,int)>>
<32: <java.util.ArrayList: int hashCodeRange(int,int)> -> <java.util.concurrent.ConcurrentHashMap: int hashCode()>>
<33: <java.util.concurrent.ConcurrentHashMap: int hashCode()> -> <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>>
<34: <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()> -> <java.io.WinNTFileSystem: int hashCode(java.io.File)>>
<35: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>>
Global flow detected: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>

Adding connections to callgraphs in class: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator
sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator has been visited already.
<36: <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)> -> <java.util.Calendar$Builder: java.util.Calendar build()>>
<37: <java.util.Calendar$Builder: java.util.Calendar build()> -> <javax.crypto.CryptoPermission: int hashCode()>>
<38: <javax.crypto.CryptoPermission: int hashCode()> -> <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>>
<39: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>>
Global flow detected: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>

Adding connections to callgraphs in class: jdk.internal.util.Preconditions
jdk.internal.util.Preconditions has been visited already.
<40: <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>>
<41: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>>
<42: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)> -> <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>>
<43: <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>>
<44: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>>
Global flow detected: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.LocaleExtensions
sun.util.locale.LocaleExtensions has been visited already.
<45: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>>
Global flow detected: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.BaseLocale
sun.util.locale.BaseLocale has been visited already.
<46: <sun.util.locale.BaseLocale: int hashCode()> -> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>>
<47: <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()> -> <java.text.PatternEntry: int hashCode()>>
<48: <java.text.PatternEntry: int hashCode()> -> <java.util.Objects: int hashCode(java.lang.Object)>>
<49: <java.util.Objects: int hashCode(java.lang.Object)> -> <java.util.HashMap: int hash(java.lang.Object)>>
<50: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>>
Global flow detected: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString
sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString has been visited already.
<51: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>>
Global flow detected: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility
sun.util.locale.provider.CalendarDataUtility has been visited already.
<52: <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)> -> <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>>
<53: <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)> -> <java.lang.module.ModuleDescriptor$Requires: int hashCode()>>
<54: <java.lang.module.ModuleDescriptor$Requires: int hashCode()> -> <java.util.AbstractSet: int hashCode()>>
<55: <java.util.AbstractSet: int hashCode()> -> <java.util.WeakHashMap: int hash(java.lang.Object)>>
<56: <java.util.WeakHashMap: int hash(java.lang.Object)> -> <java.security.Provider$UString: int hashCode()>>
<57: <java.security.Provider$UString: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>>
<58: <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()> -> <java.lang.constant.ReferenceClassDescImpl: int hashCode()>>
<59: <java.lang.constant.ReferenceClassDescImpl: int hashCode()> -> <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>>
<60: <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>>
<61: <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()> -> <java.util.TreeMap$Entry: int hashCode()>>
<62: <java.util.TreeMap$Entry: int hashCode()> -> <java.lang.Object: java.lang.String toString()>>
<63: <java.lang.Object: java.lang.String toString()> -> <java.util.Hashtable: boolean containsKey(java.lang.Object)>>
<64: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>>
Global flow detected: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RDN
sun.security.x509.RDN has been visited already.
<65: <sun.security.x509.RDN: int hashCode()> -> <java.text.AttributedString$AttributedStringIterator: int hashCode()>>
<66: <java.text.AttributedString$AttributedStringIterator: int hashCode()> -> <java.net.URLStreamHandler: int hashCode(java.net.URL)>>
<67: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>>
Global flow detected: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.EDIPartyName
sun.security.x509.EDIPartyName has been visited already.
<68: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>>
Global flow detected: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.X500Name
sun.security.x509.X500Name has been visited already.
<69: <sun.security.x509.X500Name: int hashCode()> -> <java.net.URI: int hash(int,java.lang.String)>>
<70: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>>
Global flow detected: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.DNSName
sun.security.x509.DNSName has been visited already.
<71: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>>
Global flow detected: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RFC822Name
sun.security.x509.RFC822Name has been visited already.
<72: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>>
Global flow detected: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AVA
sun.security.x509.AVA has been visited already.
<73: <sun.security.x509.AVA: int hashCode()> -> <java.util.AbstractList: int hashCode()>>
<74: <java.util.AbstractList: int hashCode()> -> <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>>
<75: <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)> -> <java.time.ZoneId: int hashCode()>>
<76: <java.time.ZoneId: int hashCode()> -> <java.security.BasicPermission: int hashCode()>>
<77: <java.security.BasicPermission: int hashCode()> -> <java.util.PropertyPermission: int hashCode()>>
<78: <java.util.PropertyPermission: int hashCode()> -> <java.net.SocketPermission: int hashCode()>>
<79: <java.net.SocketPermission: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>>
<80: <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>>
<81: <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>>
<82: <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)> -> <java.security.UnresolvedPermission: int hashCode()>>
<83: <java.security.UnresolvedPermission: int hashCode()> -> <javax.security.auth.Subject$SecureSet: int hashCode()>>
<84: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>>
Global flow detected: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PrincipalEntry
sun.security.provider.PolicyParser$PrincipalEntry has been visited already.
<85: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PermissionEntry
sun.security.provider.PolicyParser$PermissionEntry has been visited already.
<86: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyFile$SelfPermission
sun.security.provider.PolicyFile$SelfPermission has been visited already.
<87: <sun.security.provider.PolicyFile$SelfPermission: int hashCode()> -> <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>>
<88: <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>>
<89: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AlgorithmId
sun.security.x509.AlgorithmId has been visited already.
<90: <sun.security.x509.AlgorithmId: int hashCode()> -> <java.util.AbstractMap$SimpleEntry: int hashCode()>>
<91: <java.util.AbstractMap$SimpleEntry: int hashCode()> -> <java.lang.StackTraceElement: int hashCode()>>
<92: <java.lang.StackTraceElement: int hashCode()> -> <java.text.ChoiceFormat: int hashCode()>>
<93: <java.text.ChoiceFormat: int hashCode()> -> <java.text.SimpleDateFormat: int hashCode()>>
<94: <java.text.SimpleDateFormat: int hashCode()> -> <java.text.DecimalFormat: int hashCode()>>
<95: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>>
Global flow detected: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>

Adding connections to callgraphs in class: sun.util.calendar.Era
sun.util.calendar.Era has been visited already.
<96: <sun.util.calendar.Era: int hashCode()> -> <java.util.ImmutableCollections$Set12: int hashCode()>>
<97: <java.util.ImmutableCollections$Set12: int hashCode()> -> <java.util.KeyValueHolder: int hashCode()>>
<98: <java.util.KeyValueHolder: int hashCode()> -> <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>>
<99: <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> -> <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>>
<100: <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)> -> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>>
<101: <java.util.Hashtable: java.lang.Object remove(java.lang.Object)> -> <java.lang.Package: int hashCode()>>
<102: <java.lang.Package: int hashCode()> -> <java.security.SecureClassLoader$CodeSourceKey: int hashCode()>>
<103: <java.security.SecureClassLoader$CodeSourceKey: int hashCode()> -> <java.text.AttributeEntry: int hashCode()>>
<104: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>>
Global flow detected: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>

Adding connections to callgraphs in class: sun.util.calendar.LocalGregorianCalendar
sun.util.calendar.LocalGregorianCalendar has been visited already.
<105: <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)> -> <java.util.ImmutableCollections$SetN: int hashCode()>>
<106: <java.util.ImmutableCollections$SetN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int hashCode()>>
<107: <java.util.ImmutableCollections$MapN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>>
Flows from <java.lang.String: int hashCode()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.String: int hashCode()>" ];
  2 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  3 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  6 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>" ];
  7 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>" ];
  8 [ label="<sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>" ];
  9 [ label="<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>" ];
  10 [ label="<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>" ];
  11 [ label="<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>" ];
  12 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>" ];
  13 [ label="<java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>" ];
  14 [ label="<java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>" ];
  15 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  16 [ label="<java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>" ];
  17 [ label="<java.util.ResourceBundle$CacheKey: int hashCode()>" ];
  18 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>" ];
  19 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>" ];
  20 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>" ];
  21 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>" ];
  22 [ label="<jdk.internal.org.objectweb.asm.Handle: int hashCode()>" ];
  23 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>" ];
  24 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  25 [ label="<jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>" ];
  26 [ label="<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>" ];
  27 [ label="<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>" ];
  28 [ label="<jdk.internal.jimage.ImageReader$Node: int hashCode()>" ];
  29 [ label="<sun.security.util.DerValue: int hashCode()>" ];
  30 [ label="<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>" ];
  31 [ label="<sun.security.jca.ProviderConfig: int hashCode()>" ];
  32 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  33 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  34 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  35 [ label="<java.io.WinNTFileSystem: int hashCode(java.io.File)>" ];
  36 [ label="<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>" ];
  37 [ label="<java.util.Calendar$Builder: java.util.Calendar build()>" ];
  38 [ label="<javax.crypto.CryptoPermission: int hashCode()>" ];
  39 [ label="<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>" ];
  40 [ label="<jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>" ];
  41 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>" ];
  42 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>" ];
  43 [ label="<java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>" ];
  44 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>" ];
  45 [ label="<sun.util.locale.LocaleExtensions: int hashCode()>" ];
  46 [ label="<sun.util.locale.BaseLocale: int hashCode()>" ];
  47 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  48 [ label="<java.text.PatternEntry: int hashCode()>" ];
  49 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  50 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  51 [ label="<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>" ];
  52 [ label="<sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>" ];
  53 [ label="<java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>" ];
  54 [ label="<java.lang.module.ModuleDescriptor$Requires: int hashCode()>" ];
  55 [ label="<java.util.AbstractSet: int hashCode()>" ];
  56 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  57 [ label="<java.security.Provider$UString: int hashCode()>" ];
  58 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  59 [ label="<java.lang.constant.ReferenceClassDescImpl: int hashCode()>" ];
  60 [ label="<java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>" ];
  61 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  62 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  63 [ label="<java.lang.Object: java.lang.String toString()>" ];
  64 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  65 [ label="<sun.security.x509.RDN: int hashCode()>" ];
  66 [ label="<java.text.AttributedString$AttributedStringIterator: int hashCode()>" ];
  67 [ label="<java.net.URLStreamHandler: int hashCode(java.net.URL)>" ];
  68 [ label="<sun.security.x509.EDIPartyName: int hashCode()>" ];
  69 [ label="<sun.security.x509.X500Name: int hashCode()>" ];
  70 [ label="<java.net.URI: int hash(int,java.lang.String)>" ];
  71 [ label="<sun.security.x509.DNSName: int hashCode()>" ];
  72 [ label="<sun.security.x509.RFC822Name: int hashCode()>" ];
  73 [ label="<sun.security.x509.AVA: int hashCode()>" ];
  74 [ label="<java.util.AbstractList: int hashCode()>" ];
  75 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  76 [ label="<java.time.ZoneId: int hashCode()>" ];
  77 [ label="<java.security.BasicPermission: int hashCode()>" ];
  78 [ label="<java.util.PropertyPermission: int hashCode()>" ];
  79 [ label="<java.net.SocketPermission: int hashCode()>" ];
  80 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>" ];
  81 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>" ];
  82 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  83 [ label="<java.security.UnresolvedPermission: int hashCode()>" ];
  84 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  85 [ label="<sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>" ];
  86 [ label="<sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>" ];
  87 [ label="<sun.security.provider.PolicyFile$SelfPermission: int hashCode()>" ];
  88 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  89 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  90 [ label="<sun.security.x509.AlgorithmId: int hashCode()>" ];
  91 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  92 [ label="<java.lang.StackTraceElement: int hashCode()>" ];
  93 [ label="<java.text.ChoiceFormat: int hashCode()>" ];
  94 [ label="<java.text.SimpleDateFormat: int hashCode()>" ];
  95 [ label="<java.text.DecimalFormat: int hashCode()>" ];
  96 [ label="<sun.util.calendar.Era: int hashCode()>" ];
  97 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  98 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  99 [ label="<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" ];
  100 [ label="<java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>" ];
  101 [ label="<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>" ];
  102 [ label="<java.lang.Package: int hashCode()>" ];
  103 [ label="<java.security.SecureClassLoader$CodeSourceKey: int hashCode()>" ];
  104 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  105 [ label="<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>" ];
  106 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  107 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  108 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  46 -> 47;
  47 -> 48;
  48 -> 49;
  49 -> 50;
  50 -> 51;
  51 -> 52;
  52 -> 53;
  53 -> 54;
  54 -> 55;
  55 -> 56;
  56 -> 57;
  57 -> 58;
  58 -> 59;
  59 -> 60;
  60 -> 61;
  61 -> 62;
  62 -> 63;
  63 -> 64;
  64 -> 65;
  65 -> 66;
  66 -> 67;
  67 -> 68;
  68 -> 69;
  69 -> 70;
  70 -> 71;
  71 -> 72;
  72 -> 73;
  73 -> 74;
  74 -> 75;
  75 -> 76;
  76 -> 77;
  77 -> 78;
  78 -> 79;
  79 -> 80;
  80 -> 81;
  81 -> 82;
  82 -> 83;
  83 -> 84;
  84 -> 85;
  85 -> 86;
  86 -> 87;
  87 -> 88;
  88 -> 89;
  89 -> 90;
  90 -> 91;
  91 -> 92;
  92 -> 93;
  93 -> 94;
  94 -> 95;
  95 -> 96;
  96 -> 97;
  97 -> 98;
  98 -> 99;
  99 -> 100;
  100 -> 101;
  101 -> 102;
  102 -> 103;
  103 -> 104;
  104 -> 105;
  105 -> 106;
  106 -> 107;
  107 -> 108;
}

Source found in the callgraph: <java.lang.Object: int hashCode()>...
In class: org.whispersystems.libsignal.util.Pair
Start traversal: 

Starting from method: <java.lang.Object: int hashCode()>
<1: <java.lang.Object: int hashCode()> -> <java.util.HashMap: int hash(java.lang.Object)>>
<2: <java.util.HashMap: int hash(java.lang.Object)> -> <java.lang.invoke.MethodType: int hashCode()>>
<3: <java.lang.invoke.MethodType: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>>
<4: <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> -> <java.lang.Enum: int hashCode()>>
<5: <java.lang.Enum: int hashCode()> -> <sun.security.provider.SeedGenerator$1: java.lang.Void run()>>
Global flow detected: <java.lang.Enum: int hashCode()> -> <sun.security.provider.SeedGenerator$1: java.lang.Void run()>

Adding connections to callgraphs in class: sun.security.provider.SeedGenerator$1


***************************
Now we build call graphs for class: sun.security.provider.SeedGenerator$1
Continue with method: <sun.security.provider.SeedGenerator$1: java.lang.Void run()>


strict digraph G {
  1 [ label="<sun.security.provider.SeedGenerator$1: java.lang.Void run()>" ];
  2 [ label="<java.security.AccessController: java.lang.Object executePrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.lang.Class)>" ];
  3 [ label="<sun.security.provider.SeedGenerator: byte[] getSystemEntropy()>" ];
  1 -> 2;
  2 -> 3;
}

<6: <sun.security.provider.SeedGenerator$1: java.lang.Void run()> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>>
<7: <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>>
<8: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <java.util.Objects: int hashCode(java.lang.Object)>>
<9: <java.util.Objects: int hashCode(java.lang.Object)> -> <java.lang.invoke.LambdaForm$NamedFunction: int hashCode()>>
<10: <java.lang.invoke.LambdaForm$NamedFunction: int hashCode()> -> <java.util.ArrayList: int hashCodeRange(int,int)>>
<11: <java.util.ArrayList: int hashCodeRange(int,int)> -> <java.util.concurrent.ConcurrentHashMap: int hashCode()>>
<12: <java.util.concurrent.ConcurrentHashMap: int hashCode()> -> <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>>
<13: <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()> -> <java.util.Arrays: int hashCode(java.lang.Object[])>>
<14: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <java.security.AccessControlContext: int hashCode()>>
<15: <java.security.AccessControlContext: int hashCode()> -> <java.lang.Object: java.lang.String toString()>>
<16: <java.lang.Object: java.lang.String toString()> -> <java.util.AbstractSet: int hashCode()>>
<17: <java.util.AbstractSet: int hashCode()> -> <java.lang.Character$Subset: int hashCode()>>
<18: <java.lang.Character$Subset: int hashCode()> -> <java.text.AttributedCharacterIterator$Attribute: int hashCode()>>
<19: <java.text.AttributedCharacterIterator$Attribute: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>>
<20: <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>>
<21: <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()> -> <java.util.TreeMap$Entry: int hashCode()>>
<22: <java.util.TreeMap$Entry: int hashCode()> -> <java.lang.module.ResolvedModule: int hashCode()>>
<23: <java.lang.module.ResolvedModule: int hashCode()> -> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>>
<24: <java.util.Hashtable: java.lang.Object get(java.lang.Object)> -> <java.util.Hashtable: boolean containsKey(java.lang.Object)>>
<25: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>>
<26: <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()> -> <sun.security.x509.GeneralName: int hashCode()>>
Global flow detected: <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()> -> <sun.security.x509.GeneralName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.GeneralName


***************************
Now we build call graphs for class: sun.security.x509.GeneralName
Continue with method: <sun.security.x509.GeneralName: int hashCode()>


strict digraph G {
  1 [ label="<sun.security.x509.GeneralName: int hashCode()>" ];
  2 [ label="<sun.security.x509.AccessDescription: int hashCode()>" ];
  3 [ label="<sun.security.x509.GeneralSubtree: int hashCode()>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  5 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  6 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  7 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  8 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  9 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  10 [ label="<java.lang.Object: java.lang.String toString()>" ];
  11 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  12 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  13 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  14 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  15 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  16 [ label="<java.util.AbstractSet: int hashCode()>" ];
  17 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  18 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  19 [ label="<java.util.AbstractList: int hashCode()>" ];
  20 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  21 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  22 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  23 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  24 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  25 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  26 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  27 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  28 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  29 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  30 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  31 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  32 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  33 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  34 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  35 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
}

<27: <sun.security.x509.GeneralName: int hashCode()> -> <java.util.AbstractList: int hashCode()>>
<28: <java.util.AbstractList: int hashCode()> -> <java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>>
<29: <java.util.ImmutableCollections$MapN: int probe(java.lang.Object)> -> <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>>
<30: <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>>
<31: <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)> -> <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>>
<32: <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)> -> <javax.security.auth.Subject$SecureSet: int hashCode()>>
<33: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>>
<34: <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)> -> <java.util.Collections$SynchronizedSet: int hashCode()>>
<35: <java.util.Collections$SynchronizedSet: int hashCode()> -> <java.util.Collections$UnmodifiableSet: int hashCode()>>
<36: <java.util.Collections$UnmodifiableSet: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>>
<37: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <java.util.ImmutableCollections$Set12: int hashCode()>>
<38: <java.util.ImmutableCollections$Set12: int hashCode()> -> <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>>
<39: <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)> -> <java.util.AbstractMap$SimpleEntry: int hashCode()>>
<40: <java.util.AbstractMap$SimpleEntry: int hashCode()> -> <java.util.KeyValueHolder: int hashCode()>>
<41: <java.util.KeyValueHolder: int hashCode()> -> <jdk.internal.loader.AbstractClassLoaderValue$Sub: int hashCode()>>
Global flow detected: <java.util.KeyValueHolder: int hashCode()> -> <jdk.internal.loader.AbstractClassLoaderValue$Sub: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.loader.AbstractClassLoaderValue$Sub


***************************
Now we build call graphs for class: jdk.internal.loader.AbstractClassLoaderValue$Sub
Continue with method: <jdk.internal.loader.AbstractClassLoaderValue$Sub: int hashCode()>


strict digraph G {
  1 [ label="<jdk.internal.loader.AbstractClassLoaderValue$Sub: int hashCode()>" ];
  2 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  3 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  4 [ label="<java.lang.Object: java.lang.String toString()>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  6 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  7 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  8 [ label="<java.util.AbstractSet: int hashCode()>" ];
  9 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  10 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  11 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  12 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  13 [ label="<java.util.AbstractList: int hashCode()>" ];
  14 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  15 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  16 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  17 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  18 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  19 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  20 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  21 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  22 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  23 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  24 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  25 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  26 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  27 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  28 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  29 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  30 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  31 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  32 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  33 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
}

<42: <jdk.internal.loader.AbstractClassLoaderValue$Sub: int hashCode()> -> <java.text.AttributeEntry: int hashCode()>>
<43: <java.text.AttributeEntry: int hashCode()> -> <java.util.ImmutableCollections$SetN: int hashCode()>>
<44: <java.util.ImmutableCollections$SetN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int hashCode()>>
<45: <java.util.ImmutableCollections$MapN: int hashCode()> -> <java.lang.module.ModuleDescriptor$Requires: int hashCode()>>
<46: <java.lang.module.ModuleDescriptor$Requires: int hashCode()> -> <java.util.WeakHashMap: int hash(java.lang.Object)>>
Flows from <java.lang.Object: int hashCode()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.Object: int hashCode()>" ];
  2 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  3 [ label="<java.lang.invoke.MethodType: int hashCode()>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  5 [ label="<java.lang.Enum: int hashCode()>" ];
  6 [ label="<sun.security.provider.SeedGenerator$1: java.lang.Void run()>" ];
  7 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  8 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  9 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  10 [ label="<java.lang.invoke.LambdaForm$NamedFunction: int hashCode()>" ];
  11 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  12 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  13 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  14 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  15 [ label="<java.security.AccessControlContext: int hashCode()>" ];
  16 [ label="<java.lang.Object: java.lang.String toString()>" ];
  17 [ label="<java.util.AbstractSet: int hashCode()>" ];
  18 [ label="<java.lang.Character$Subset: int hashCode()>" ];
  19 [ label="<java.text.AttributedCharacterIterator$Attribute: int hashCode()>" ];
  20 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  21 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  22 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  23 [ label="<java.lang.module.ResolvedModule: int hashCode()>" ];
  24 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  25 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  26 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  27 [ label="<sun.security.x509.GeneralName: int hashCode()>" ];
  28 [ label="<java.util.AbstractList: int hashCode()>" ];
  29 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  30 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  31 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>" ];
  32 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  33 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  34 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  35 [ label="<java.util.Collections$SynchronizedSet: int hashCode()>" ];
  36 [ label="<java.util.Collections$UnmodifiableSet: int hashCode()>" ];
  37 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  38 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  39 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  40 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  41 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  42 [ label="<jdk.internal.loader.AbstractClassLoaderValue$Sub: int hashCode()>" ];
  43 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  44 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  45 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  46 [ label="<java.lang.module.ModuleDescriptor$Requires: int hashCode()>" ];
  47 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  46 -> 47;
  42 -> 7;
  7 -> 4;
  4 -> 16;
  16 -> 20;
  20 -> 24;
  24 -> 34;
  34 -> 17;
  17 -> 25;
  25 -> 47;
  47 -> 2;
  2 -> 33;
  33 -> 28;
  28 -> 9;
  9 -> 26;
  26 -> 40;
  41 -> 13;
  13 -> 37;
  37 -> 12;
  12 -> 21;
  22 -> 29;
  29 -> 39;
  39 -> 14;
  14 -> 11;
  11 -> 32;
  32 -> 43;
  43 -> 30;
  30 -> 38;
  38 -> 45;
  45 -> 44;
  44 -> 8;
}

Source found in the callgraph: <java.util.Arrays: int hashCode(byte[])>...
In class: org.whispersystems.libsignal.util.Pair
Start traversal: 

Starting from method: <java.util.Arrays: int hashCode(byte[])>
<1: <java.util.Arrays: int hashCode(byte[])> -> <java.security.cert.Certificate: int hashCode()>>
<2: <java.security.cert.Certificate: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>>
<3: <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>>
<4: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>>
Global flow detected: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.Cache$EqualByteArray
sun.security.util.Cache$EqualByteArray has been visited already.
<5: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>>
Global flow detected: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.ObjectIdentifier
sun.security.util.ObjectIdentifier has been visited already.
Flows from <java.util.Arrays: int hashCode(byte[])> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Arrays: int hashCode(byte[])>" ];
  2 [ label="<java.security.cert.Certificate: int hashCode()>" ];
  3 [ label="<java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>" ];
  4 [ label="<java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>" ];
  5 [ label="<sun.security.util.Cache$EqualByteArray: int hashCode()>" ];
  6 [ label="<sun.security.util.ObjectIdentifier: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
}

Source found in the callgraph: <java.util.Optional: java.lang.Object get()>...
In class: org.signal.zkgroup.internal.ByteArray
Start traversal: 

Starting from method: <java.util.Optional: java.lang.Object get()>
<1: <java.util.Optional: java.lang.Object get()> -> <java.lang.Runtime$Version: int compareBuild(java.lang.Runtime$Version)>>
<2: <java.lang.Runtime$Version: int compareBuild(java.lang.Runtime$Version)> -> <java.lang.Runtime$Version: int comparePre(java.lang.Runtime$Version)>>
<3: <java.lang.Runtime$Version: int comparePre(java.lang.Runtime$Version)> -> <java.lang.Module: java.lang.Module lambda$findModule$2(java.lang.String,java.lang.ModuleLayer)>>
<4: <java.lang.Module: java.lang.Module lambda$findModule$2(java.lang.String,java.lang.ModuleLayer)> -> <java.lang.Runtime$Version: java.lang.String toString()>>
<5: <java.lang.Runtime$Version: java.lang.String toString()> -> <java.lang.module.ModuleReader: java.util.Optional read(java.lang.String)>>
<6: <java.lang.module.ModuleReader: java.util.Optional read(java.lang.String)> -> <java.lang.module.ModuleReader: java.util.Optional open(java.lang.String)>>
<7: <java.lang.module.ModuleReader: java.util.Optional open(java.lang.String)> -> <java.lang.NamedPackage: java.net.URI location()>>
<8: <java.lang.NamedPackage: java.net.URI location()> -> <jdk.internal.loader.Loader$1: java.net.URL run()>>
Global flow detected: <java.lang.NamedPackage: java.net.URI location()> -> <jdk.internal.loader.Loader$1: java.net.URL run()>

Adding connections to callgraphs in class: jdk.internal.loader.Loader$1
jdk.internal.loader.Loader$1 has been visited already.
<9: <jdk.internal.loader.Loader$1: java.net.URL run()> -> <java.lang.Runtime$Version: int compareOptional(java.lang.Runtime$Version)>>
Flows from <java.util.Optional: java.lang.Object get()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Optional: java.lang.Object get()>" ];
  2 [ label="<java.lang.Runtime$Version: int compareBuild(java.lang.Runtime$Version)>" ];
  3 [ label="<java.lang.Runtime$Version: int comparePre(java.lang.Runtime$Version)>" ];
  4 [ label="<java.lang.Module: java.lang.Module lambda$findModule$2(java.lang.String,java.lang.ModuleLayer)>" ];
  5 [ label="<java.lang.Runtime$Version: java.lang.String toString()>" ];
  6 [ label="<java.lang.module.ModuleReader: java.util.Optional read(java.lang.String)>" ];
  7 [ label="<java.lang.module.ModuleReader: java.util.Optional open(java.lang.String)>" ];
  8 [ label="<java.lang.NamedPackage: java.net.URI location()>" ];
  9 [ label="<jdk.internal.loader.Loader$1: java.net.URL run()>" ];
  10 [ label="<java.lang.Runtime$Version: int compareOptional(java.lang.Runtime$Version)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
}

Source found in the callgraph: <java.lang.String: int hashCode()>...
In class: org.signal.zkgroup.internal.ByteArray
Start traversal: 

Starting from method: <java.lang.String: int hashCode()>
<1: <java.lang.String: int hashCode()> -> <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>>
<2: <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>>
<3: <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>>
<4: <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>>
<5: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<6: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>>
<7: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>

Adding connections to callgraphs in class: sun.util.PreHashedMap
sun.util.PreHashedMap has been visited already.
<8: <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)> -> <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>>
<9: <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)> -> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>>
<10: <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)> -> <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>>
<11: <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>>
<12: <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)> -> <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>>
<13: <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)> -> <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>>
<14: <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)> -> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>>
<15: <java.util.Hashtable: java.lang.Object get(java.lang.Object)> -> <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>>
<16: <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)> -> <java.util.ResourceBundle$CacheKey: int hashCode()>>
<17: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>>
Global flow detected: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<18: <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>>
<19: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>>
<20: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>>
<21: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.Handle
jdk.internal.org.objectweb.asm.Handle has been visited already.
<22: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>>
Global flow detected: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<23: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)> -> <java.util.Arrays: int hashCode(java.lang.Object[])>>
<24: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>>
Global flow detected: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.ConstantDynamic
jdk.internal.org.objectweb.asm.ConstantDynamic has been visited already.
<25: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>>
Global flow detected: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter
sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter has been visited already.
<26: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>>
Global flow detected: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>

Adding connections to callgraphs in class: sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter
sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter has been visited already.
<27: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>>
Global flow detected: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.jimage.ImageReader$Node
jdk.internal.jimage.ImageReader$Node has been visited already.
<28: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>>
Global flow detected: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.DerValue
sun.security.util.DerValue has been visited already.
<29: <sun.security.util.DerValue: int hashCode()> -> <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>>
<30: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>>
Global flow detected: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>

Adding connections to callgraphs in class: sun.security.jca.ProviderConfig
sun.security.jca.ProviderConfig has been visited already.
<31: <sun.security.jca.ProviderConfig: int hashCode()> -> <java.util.ArrayList: int hashCodeRange(int,int)>>
<32: <java.util.ArrayList: int hashCodeRange(int,int)> -> <java.util.concurrent.ConcurrentHashMap: int hashCode()>>
<33: <java.util.concurrent.ConcurrentHashMap: int hashCode()> -> <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>>
<34: <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()> -> <java.io.WinNTFileSystem: int hashCode(java.io.File)>>
<35: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>>
Global flow detected: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>

Adding connections to callgraphs in class: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator
sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator has been visited already.
<36: <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)> -> <java.util.Calendar$Builder: java.util.Calendar build()>>
<37: <java.util.Calendar$Builder: java.util.Calendar build()> -> <javax.crypto.CryptoPermission: int hashCode()>>
<38: <javax.crypto.CryptoPermission: int hashCode()> -> <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>>
<39: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>>
Global flow detected: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>

Adding connections to callgraphs in class: jdk.internal.util.Preconditions
jdk.internal.util.Preconditions has been visited already.
<40: <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>>
<41: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>>
<42: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)> -> <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>>
<43: <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>>
<44: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>>
Global flow detected: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.LocaleExtensions
sun.util.locale.LocaleExtensions has been visited already.
<45: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>>
Global flow detected: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.BaseLocale
sun.util.locale.BaseLocale has been visited already.
<46: <sun.util.locale.BaseLocale: int hashCode()> -> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>>
<47: <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()> -> <java.text.PatternEntry: int hashCode()>>
<48: <java.text.PatternEntry: int hashCode()> -> <java.util.Objects: int hashCode(java.lang.Object)>>
<49: <java.util.Objects: int hashCode(java.lang.Object)> -> <java.util.HashMap: int hash(java.lang.Object)>>
<50: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>>
Global flow detected: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString
sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString has been visited already.
<51: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>>
Global flow detected: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility
sun.util.locale.provider.CalendarDataUtility has been visited already.
<52: <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)> -> <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>>
<53: <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)> -> <java.lang.module.ModuleDescriptor$Requires: int hashCode()>>
<54: <java.lang.module.ModuleDescriptor$Requires: int hashCode()> -> <java.util.AbstractSet: int hashCode()>>
<55: <java.util.AbstractSet: int hashCode()> -> <java.util.WeakHashMap: int hash(java.lang.Object)>>
<56: <java.util.WeakHashMap: int hash(java.lang.Object)> -> <java.security.Provider$UString: int hashCode()>>
<57: <java.security.Provider$UString: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>>
<58: <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()> -> <java.lang.constant.ReferenceClassDescImpl: int hashCode()>>
<59: <java.lang.constant.ReferenceClassDescImpl: int hashCode()> -> <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>>
<60: <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>>
<61: <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()> -> <java.util.TreeMap$Entry: int hashCode()>>
<62: <java.util.TreeMap$Entry: int hashCode()> -> <java.lang.Object: java.lang.String toString()>>
<63: <java.lang.Object: java.lang.String toString()> -> <java.util.Hashtable: boolean containsKey(java.lang.Object)>>
<64: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>>
Global flow detected: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RDN
sun.security.x509.RDN has been visited already.
<65: <sun.security.x509.RDN: int hashCode()> -> <java.text.AttributedString$AttributedStringIterator: int hashCode()>>
<66: <java.text.AttributedString$AttributedStringIterator: int hashCode()> -> <java.net.URLStreamHandler: int hashCode(java.net.URL)>>
<67: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>>
Global flow detected: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.EDIPartyName
sun.security.x509.EDIPartyName has been visited already.
<68: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>>
Global flow detected: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.X500Name
sun.security.x509.X500Name has been visited already.
<69: <sun.security.x509.X500Name: int hashCode()> -> <java.net.URI: int hash(int,java.lang.String)>>
<70: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>>
Global flow detected: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.DNSName
sun.security.x509.DNSName has been visited already.
<71: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>>
Global flow detected: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RFC822Name
sun.security.x509.RFC822Name has been visited already.
<72: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>>
Global flow detected: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AVA
sun.security.x509.AVA has been visited already.
<73: <sun.security.x509.AVA: int hashCode()> -> <java.util.AbstractList: int hashCode()>>
<74: <java.util.AbstractList: int hashCode()> -> <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>>
<75: <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)> -> <java.time.ZoneId: int hashCode()>>
<76: <java.time.ZoneId: int hashCode()> -> <java.security.BasicPermission: int hashCode()>>
<77: <java.security.BasicPermission: int hashCode()> -> <java.util.PropertyPermission: int hashCode()>>
<78: <java.util.PropertyPermission: int hashCode()> -> <java.net.SocketPermission: int hashCode()>>
<79: <java.net.SocketPermission: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>>
<80: <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>>
<81: <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>>
<82: <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)> -> <java.security.UnresolvedPermission: int hashCode()>>
<83: <java.security.UnresolvedPermission: int hashCode()> -> <javax.security.auth.Subject$SecureSet: int hashCode()>>
<84: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>>
Global flow detected: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PrincipalEntry
sun.security.provider.PolicyParser$PrincipalEntry has been visited already.
<85: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PermissionEntry
sun.security.provider.PolicyParser$PermissionEntry has been visited already.
<86: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyFile$SelfPermission
sun.security.provider.PolicyFile$SelfPermission has been visited already.
<87: <sun.security.provider.PolicyFile$SelfPermission: int hashCode()> -> <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>>
<88: <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>>
<89: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AlgorithmId
sun.security.x509.AlgorithmId has been visited already.
<90: <sun.security.x509.AlgorithmId: int hashCode()> -> <java.util.AbstractMap$SimpleEntry: int hashCode()>>
<91: <java.util.AbstractMap$SimpleEntry: int hashCode()> -> <java.lang.StackTraceElement: int hashCode()>>
<92: <java.lang.StackTraceElement: int hashCode()> -> <java.text.ChoiceFormat: int hashCode()>>
<93: <java.text.ChoiceFormat: int hashCode()> -> <java.text.SimpleDateFormat: int hashCode()>>
<94: <java.text.SimpleDateFormat: int hashCode()> -> <java.text.DecimalFormat: int hashCode()>>
<95: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>>
Global flow detected: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>

Adding connections to callgraphs in class: sun.util.calendar.Era
sun.util.calendar.Era has been visited already.
<96: <sun.util.calendar.Era: int hashCode()> -> <java.util.ImmutableCollections$Set12: int hashCode()>>
<97: <java.util.ImmutableCollections$Set12: int hashCode()> -> <java.util.KeyValueHolder: int hashCode()>>
<98: <java.util.KeyValueHolder: int hashCode()> -> <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>>
<99: <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> -> <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>>
<100: <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)> -> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>>
<101: <java.util.Hashtable: java.lang.Object remove(java.lang.Object)> -> <java.lang.Package: int hashCode()>>
<102: <java.lang.Package: int hashCode()> -> <java.security.SecureClassLoader$CodeSourceKey: int hashCode()>>
<103: <java.security.SecureClassLoader$CodeSourceKey: int hashCode()> -> <java.text.AttributeEntry: int hashCode()>>
<104: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>>
Global flow detected: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>

Adding connections to callgraphs in class: sun.util.calendar.LocalGregorianCalendar
sun.util.calendar.LocalGregorianCalendar has been visited already.
<105: <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)> -> <java.util.ImmutableCollections$SetN: int hashCode()>>
<106: <java.util.ImmutableCollections$SetN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int hashCode()>>
<107: <java.util.ImmutableCollections$MapN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>>
Flows from <java.lang.String: int hashCode()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.String: int hashCode()>" ];
  2 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  3 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  6 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>" ];
  7 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>" ];
  8 [ label="<sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>" ];
  9 [ label="<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>" ];
  10 [ label="<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>" ];
  11 [ label="<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>" ];
  12 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>" ];
  13 [ label="<java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>" ];
  14 [ label="<java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>" ];
  15 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  16 [ label="<java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>" ];
  17 [ label="<java.util.ResourceBundle$CacheKey: int hashCode()>" ];
  18 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>" ];
  19 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>" ];
  20 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>" ];
  21 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>" ];
  22 [ label="<jdk.internal.org.objectweb.asm.Handle: int hashCode()>" ];
  23 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>" ];
  24 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  25 [ label="<jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>" ];
  26 [ label="<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>" ];
  27 [ label="<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>" ];
  28 [ label="<jdk.internal.jimage.ImageReader$Node: int hashCode()>" ];
  29 [ label="<sun.security.util.DerValue: int hashCode()>" ];
  30 [ label="<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>" ];
  31 [ label="<sun.security.jca.ProviderConfig: int hashCode()>" ];
  32 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  33 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  34 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  35 [ label="<java.io.WinNTFileSystem: int hashCode(java.io.File)>" ];
  36 [ label="<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>" ];
  37 [ label="<java.util.Calendar$Builder: java.util.Calendar build()>" ];
  38 [ label="<javax.crypto.CryptoPermission: int hashCode()>" ];
  39 [ label="<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>" ];
  40 [ label="<jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>" ];
  41 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>" ];
  42 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>" ];
  43 [ label="<java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>" ];
  44 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>" ];
  45 [ label="<sun.util.locale.LocaleExtensions: int hashCode()>" ];
  46 [ label="<sun.util.locale.BaseLocale: int hashCode()>" ];
  47 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  48 [ label="<java.text.PatternEntry: int hashCode()>" ];
  49 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  50 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  51 [ label="<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>" ];
  52 [ label="<sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>" ];
  53 [ label="<java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>" ];
  54 [ label="<java.lang.module.ModuleDescriptor$Requires: int hashCode()>" ];
  55 [ label="<java.util.AbstractSet: int hashCode()>" ];
  56 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  57 [ label="<java.security.Provider$UString: int hashCode()>" ];
  58 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  59 [ label="<java.lang.constant.ReferenceClassDescImpl: int hashCode()>" ];
  60 [ label="<java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>" ];
  61 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  62 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  63 [ label="<java.lang.Object: java.lang.String toString()>" ];
  64 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  65 [ label="<sun.security.x509.RDN: int hashCode()>" ];
  66 [ label="<java.text.AttributedString$AttributedStringIterator: int hashCode()>" ];
  67 [ label="<java.net.URLStreamHandler: int hashCode(java.net.URL)>" ];
  68 [ label="<sun.security.x509.EDIPartyName: int hashCode()>" ];
  69 [ label="<sun.security.x509.X500Name: int hashCode()>" ];
  70 [ label="<java.net.URI: int hash(int,java.lang.String)>" ];
  71 [ label="<sun.security.x509.DNSName: int hashCode()>" ];
  72 [ label="<sun.security.x509.RFC822Name: int hashCode()>" ];
  73 [ label="<sun.security.x509.AVA: int hashCode()>" ];
  74 [ label="<java.util.AbstractList: int hashCode()>" ];
  75 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  76 [ label="<java.time.ZoneId: int hashCode()>" ];
  77 [ label="<java.security.BasicPermission: int hashCode()>" ];
  78 [ label="<java.util.PropertyPermission: int hashCode()>" ];
  79 [ label="<java.net.SocketPermission: int hashCode()>" ];
  80 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>" ];
  81 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>" ];
  82 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  83 [ label="<java.security.UnresolvedPermission: int hashCode()>" ];
  84 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  85 [ label="<sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>" ];
  86 [ label="<sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>" ];
  87 [ label="<sun.security.provider.PolicyFile$SelfPermission: int hashCode()>" ];
  88 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  89 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  90 [ label="<sun.security.x509.AlgorithmId: int hashCode()>" ];
  91 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  92 [ label="<java.lang.StackTraceElement: int hashCode()>" ];
  93 [ label="<java.text.ChoiceFormat: int hashCode()>" ];
  94 [ label="<java.text.SimpleDateFormat: int hashCode()>" ];
  95 [ label="<java.text.DecimalFormat: int hashCode()>" ];
  96 [ label="<sun.util.calendar.Era: int hashCode()>" ];
  97 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  98 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  99 [ label="<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" ];
  100 [ label="<java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>" ];
  101 [ label="<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>" ];
  102 [ label="<java.lang.Package: int hashCode()>" ];
  103 [ label="<java.security.SecureClassLoader$CodeSourceKey: int hashCode()>" ];
  104 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  105 [ label="<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>" ];
  106 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  107 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  108 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  46 -> 47;
  47 -> 48;
  48 -> 49;
  49 -> 50;
  50 -> 51;
  51 -> 52;
  52 -> 53;
  53 -> 54;
  54 -> 55;
  55 -> 56;
  56 -> 57;
  57 -> 58;
  58 -> 59;
  59 -> 60;
  60 -> 61;
  61 -> 62;
  62 -> 63;
  63 -> 64;
  64 -> 65;
  65 -> 66;
  66 -> 67;
  67 -> 68;
  68 -> 69;
  69 -> 70;
  70 -> 71;
  71 -> 72;
  72 -> 73;
  73 -> 74;
  74 -> 75;
  75 -> 76;
  76 -> 77;
  77 -> 78;
  78 -> 79;
  79 -> 80;
  80 -> 81;
  81 -> 82;
  82 -> 83;
  83 -> 84;
  84 -> 85;
  85 -> 86;
  86 -> 87;
  87 -> 88;
  88 -> 89;
  89 -> 90;
  90 -> 91;
  91 -> 92;
  92 -> 93;
  93 -> 94;
  94 -> 95;
  95 -> 96;
  96 -> 97;
  97 -> 98;
  98 -> 99;
  99 -> 100;
  100 -> 101;
  101 -> 102;
  102 -> 103;
  103 -> 104;
  104 -> 105;
  105 -> 106;
  106 -> 107;
  107 -> 108;
}

Source found in the callgraph: <java.lang.Object: int hashCode()>...
In class: org.signal.zkgroup.internal.ByteArray
Start traversal: 

Starting from method: <java.lang.Object: int hashCode()>
<1: <java.lang.Object: int hashCode()> -> <java.util.HashMap: int hash(java.lang.Object)>>
<2: <java.util.HashMap: int hash(java.lang.Object)> -> <java.lang.invoke.MethodType: int hashCode()>>
<3: <java.lang.invoke.MethodType: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>>
<4: <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> -> <java.lang.Enum: int hashCode()>>
<5: <java.lang.Enum: int hashCode()> -> <sun.security.provider.SeedGenerator$1: java.lang.Void run()>>
Global flow detected: <java.lang.Enum: int hashCode()> -> <sun.security.provider.SeedGenerator$1: java.lang.Void run()>

Adding connections to callgraphs in class: sun.security.provider.SeedGenerator$1
sun.security.provider.SeedGenerator$1 has been visited already.
<6: <sun.security.provider.SeedGenerator$1: java.lang.Void run()> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>>
<7: <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>>
<8: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <java.util.Objects: int hashCode(java.lang.Object)>>
<9: <java.util.Objects: int hashCode(java.lang.Object)> -> <java.lang.invoke.LambdaForm$NamedFunction: int hashCode()>>
<10: <java.lang.invoke.LambdaForm$NamedFunction: int hashCode()> -> <java.util.ArrayList: int hashCodeRange(int,int)>>
<11: <java.util.ArrayList: int hashCodeRange(int,int)> -> <java.util.concurrent.ConcurrentHashMap: int hashCode()>>
<12: <java.util.concurrent.ConcurrentHashMap: int hashCode()> -> <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>>
<13: <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()> -> <java.util.Arrays: int hashCode(java.lang.Object[])>>
<14: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <java.security.AccessControlContext: int hashCode()>>
<15: <java.security.AccessControlContext: int hashCode()> -> <java.lang.Object: java.lang.String toString()>>
<16: <java.lang.Object: java.lang.String toString()> -> <java.util.AbstractSet: int hashCode()>>
<17: <java.util.AbstractSet: int hashCode()> -> <java.lang.Character$Subset: int hashCode()>>
<18: <java.lang.Character$Subset: int hashCode()> -> <java.text.AttributedCharacterIterator$Attribute: int hashCode()>>
<19: <java.text.AttributedCharacterIterator$Attribute: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>>
<20: <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>>
<21: <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()> -> <java.util.TreeMap$Entry: int hashCode()>>
<22: <java.util.TreeMap$Entry: int hashCode()> -> <java.lang.module.ResolvedModule: int hashCode()>>
<23: <java.lang.module.ResolvedModule: int hashCode()> -> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>>
<24: <java.util.Hashtable: java.lang.Object get(java.lang.Object)> -> <java.util.Hashtable: boolean containsKey(java.lang.Object)>>
<25: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>>
<26: <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()> -> <sun.security.x509.GeneralName: int hashCode()>>
Global flow detected: <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()> -> <sun.security.x509.GeneralName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.GeneralName
sun.security.x509.GeneralName has been visited already.
<27: <sun.security.x509.GeneralName: int hashCode()> -> <java.util.AbstractList: int hashCode()>>
<28: <java.util.AbstractList: int hashCode()> -> <java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>>
<29: <java.util.ImmutableCollections$MapN: int probe(java.lang.Object)> -> <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>>
<30: <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>>
<31: <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)> -> <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>>
<32: <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)> -> <javax.security.auth.Subject$SecureSet: int hashCode()>>
<33: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>>
<34: <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)> -> <java.util.Collections$SynchronizedSet: int hashCode()>>
<35: <java.util.Collections$SynchronizedSet: int hashCode()> -> <java.util.Collections$UnmodifiableSet: int hashCode()>>
<36: <java.util.Collections$UnmodifiableSet: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>>
<37: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <java.util.ImmutableCollections$Set12: int hashCode()>>
<38: <java.util.ImmutableCollections$Set12: int hashCode()> -> <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>>
<39: <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)> -> <java.util.AbstractMap$SimpleEntry: int hashCode()>>
<40: <java.util.AbstractMap$SimpleEntry: int hashCode()> -> <java.util.KeyValueHolder: int hashCode()>>
<41: <java.util.KeyValueHolder: int hashCode()> -> <jdk.internal.loader.AbstractClassLoaderValue$Sub: int hashCode()>>
Global flow detected: <java.util.KeyValueHolder: int hashCode()> -> <jdk.internal.loader.AbstractClassLoaderValue$Sub: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.loader.AbstractClassLoaderValue$Sub
jdk.internal.loader.AbstractClassLoaderValue$Sub has been visited already.
<42: <jdk.internal.loader.AbstractClassLoaderValue$Sub: int hashCode()> -> <java.text.AttributeEntry: int hashCode()>>
<43: <java.text.AttributeEntry: int hashCode()> -> <java.util.ImmutableCollections$SetN: int hashCode()>>
<44: <java.util.ImmutableCollections$SetN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int hashCode()>>
<45: <java.util.ImmutableCollections$MapN: int hashCode()> -> <java.lang.module.ModuleDescriptor$Requires: int hashCode()>>
<46: <java.lang.module.ModuleDescriptor$Requires: int hashCode()> -> <java.util.WeakHashMap: int hash(java.lang.Object)>>
Flows from <java.lang.Object: int hashCode()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.Object: int hashCode()>" ];
  2 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  3 [ label="<java.lang.invoke.MethodType: int hashCode()>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  5 [ label="<java.lang.Enum: int hashCode()>" ];
  6 [ label="<sun.security.provider.SeedGenerator$1: java.lang.Void run()>" ];
  7 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  8 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  9 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  10 [ label="<java.lang.invoke.LambdaForm$NamedFunction: int hashCode()>" ];
  11 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  12 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  13 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  14 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  15 [ label="<java.security.AccessControlContext: int hashCode()>" ];
  16 [ label="<java.lang.Object: java.lang.String toString()>" ];
  17 [ label="<java.util.AbstractSet: int hashCode()>" ];
  18 [ label="<java.lang.Character$Subset: int hashCode()>" ];
  19 [ label="<java.text.AttributedCharacterIterator$Attribute: int hashCode()>" ];
  20 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  21 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  22 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  23 [ label="<java.lang.module.ResolvedModule: int hashCode()>" ];
  24 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  25 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  26 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  27 [ label="<sun.security.x509.GeneralName: int hashCode()>" ];
  28 [ label="<java.util.AbstractList: int hashCode()>" ];
  29 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  30 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  31 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>" ];
  32 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  33 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  34 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  35 [ label="<java.util.Collections$SynchronizedSet: int hashCode()>" ];
  36 [ label="<java.util.Collections$UnmodifiableSet: int hashCode()>" ];
  37 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  38 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  39 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  40 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  41 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  42 [ label="<jdk.internal.loader.AbstractClassLoaderValue$Sub: int hashCode()>" ];
  43 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  44 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  45 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  46 [ label="<java.lang.module.ModuleDescriptor$Requires: int hashCode()>" ];
  47 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  46 -> 47;
}

Source found in the callgraph: <java.util.Arrays: int hashCode(byte[])>...
In class: org.signal.zkgroup.internal.ByteArray
Start traversal: 

Starting from method: <java.util.Arrays: int hashCode(byte[])>
<1: <java.util.Arrays: int hashCode(byte[])> -> <java.security.cert.Certificate: int hashCode()>>
<2: <java.security.cert.Certificate: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>>
<3: <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>>
<4: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>>
Global flow detected: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.Cache$EqualByteArray
sun.security.util.Cache$EqualByteArray has been visited already.
<5: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>>
Global flow detected: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.ObjectIdentifier
sun.security.util.ObjectIdentifier has been visited already.
Flows from <java.util.Arrays: int hashCode(byte[])> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Arrays: int hashCode(byte[])>" ];
  2 [ label="<java.security.cert.Certificate: int hashCode()>" ];
  3 [ label="<java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>" ];
  4 [ label="<java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>" ];
  5 [ label="<sun.security.util.Cache$EqualByteArray: int hashCode()>" ];
  6 [ label="<sun.security.util.ObjectIdentifier: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
}

Source found in the callgraph: <org.signal.client.internal.Native: void loadLibrary()>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <org.signal.client.internal.Native: void loadLibrary()>
Flows from <org.signal.client.internal.Native: void loadLibrary()> is finished.
/////////////////////////////////////


strict digraph G {
}

Source found in the callgraph: <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
<1: <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> -> <java.net.IDN$1: java.io.InputStream run()>>
<2: <java.net.IDN$1: java.io.InputStream run()> -> <sun.net.www.MimeTable: void load()>>
Global flow detected: <java.net.IDN$1: java.io.InputStream run()> -> <sun.net.www.MimeTable: void load()>

Adding connections to callgraphs in class: sun.net.www.MimeTable


***************************
Now we build call graphs for class: sun.net.www.MimeTable
Continue with method: <sun.net.www.MimeTable: void load()>


strict digraph G {
}

<3: <sun.net.www.MimeTable: void load()> -> <java.lang.CharacterName$1: java.io.InputStream run()>>
<4: <java.lang.CharacterName$1: java.io.InputStream run()> -> <jdk.internal.icu.impl.ICUBinary$1: java.io.InputStream run()>>
Global flow detected: <java.lang.CharacterName$1: java.io.InputStream run()> -> <jdk.internal.icu.impl.ICUBinary$1: java.io.InputStream run()>

Adding connections to callgraphs in class: jdk.internal.icu.impl.ICUBinary$1


***************************
Now we build call graphs for class: jdk.internal.icu.impl.ICUBinary$1
Continue with method: <jdk.internal.icu.impl.ICUBinary$1: java.io.InputStream run()>


strict digraph G {
  1 [ label="<jdk.internal.icu.impl.ICUBinary$1: java.io.InputStream run()>" ];
  2 [ label="<java.security.AccessController: java.lang.Object executePrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.lang.Class)>" ];
  3 [ label="<jdk.internal.icu.impl.ICUBinary: java.nio.ByteBuffer getRequiredData(java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
}

<5: <jdk.internal.icu.impl.ICUBinary$1: java.io.InputStream run()> -> <org.signal.client.internal.Native: void loadLibrary()>>
The above invocation flows into a source.
Flows from <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>" ];
  2 [ label="<java.net.IDN$1: java.io.InputStream run()>" ];
  3 [ label="<sun.net.www.MimeTable: void load()>" ];
  4 [ label="<java.lang.CharacterName$1: java.io.InputStream run()>" ];
  5 [ label="<jdk.internal.icu.impl.ICUBinary$1: java.io.InputStream run()>" ];
  6 [ label="<org.signal.client.internal.Native: void loadLibrary()>" ];
  7 [ label="<java.security.AccessController: java.lang.Object executePrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.lang.Class)>" ];
  8 [ label="<jdk.internal.icu.impl.ICUBinary: java.nio.ByteBuffer getRequiredData(java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  5 -> 7;
  7 -> 8;
}

Source found in the callgraph: <java.util.Optional: java.lang.Object get()>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <java.util.Optional: java.lang.Object get()>
<1: <java.util.Optional: java.lang.Object get()> -> <java.lang.Runtime$Version: int compareBuild(java.lang.Runtime$Version)>>
<2: <java.lang.Runtime$Version: int compareBuild(java.lang.Runtime$Version)> -> <java.lang.Runtime$Version: int comparePre(java.lang.Runtime$Version)>>
<3: <java.lang.Runtime$Version: int comparePre(java.lang.Runtime$Version)> -> <java.lang.Module: java.lang.Module lambda$findModule$2(java.lang.String,java.lang.ModuleLayer)>>
<4: <java.lang.Module: java.lang.Module lambda$findModule$2(java.lang.String,java.lang.ModuleLayer)> -> <java.lang.Runtime$Version: java.lang.String toString()>>
<5: <java.lang.Runtime$Version: java.lang.String toString()> -> <java.lang.module.ModuleReader: java.util.Optional read(java.lang.String)>>
<6: <java.lang.module.ModuleReader: java.util.Optional read(java.lang.String)> -> <java.lang.module.ModuleReader: java.util.Optional open(java.lang.String)>>
<7: <java.lang.module.ModuleReader: java.util.Optional open(java.lang.String)> -> <java.lang.NamedPackage: java.net.URI location()>>
<8: <java.lang.NamedPackage: java.net.URI location()> -> <jdk.internal.loader.Loader$1: java.net.URL run()>>
Global flow detected: <java.lang.NamedPackage: java.net.URI location()> -> <jdk.internal.loader.Loader$1: java.net.URL run()>

Adding connections to callgraphs in class: jdk.internal.loader.Loader$1
jdk.internal.loader.Loader$1 has been visited already.
<9: <jdk.internal.loader.Loader$1: java.net.URL run()> -> <java.lang.Runtime$Version: int compareOptional(java.lang.Runtime$Version)>>
Flows from <java.util.Optional: java.lang.Object get()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Optional: java.lang.Object get()>" ];
  2 [ label="<java.lang.Runtime$Version: int compareBuild(java.lang.Runtime$Version)>" ];
  3 [ label="<java.lang.Runtime$Version: int comparePre(java.lang.Runtime$Version)>" ];
  4 [ label="<java.lang.Module: java.lang.Module lambda$findModule$2(java.lang.String,java.lang.ModuleLayer)>" ];
  5 [ label="<java.lang.Runtime$Version: java.lang.String toString()>" ];
  6 [ label="<java.lang.module.ModuleReader: java.util.Optional read(java.lang.String)>" ];
  7 [ label="<java.lang.module.ModuleReader: java.util.Optional open(java.lang.String)>" ];
  8 [ label="<java.lang.NamedPackage: java.net.URI location()>" ];
  9 [ label="<jdk.internal.loader.Loader$1: java.net.URL run()>" ];
  10 [ label="<java.lang.Runtime$Version: int compareOptional(java.lang.Runtime$Version)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
}

Source found in the callgraph: <java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>
<1: <java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])> -> <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>>
The above invocation flows into a source.
<2: <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)> -> <org.signal.client.internal.Native: void loadLibrary()>>
The above invocation flows into a source.
Flows from <java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>" ];
  2 [ label="<org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>" ];
  3 [ label="<org.signal.client.internal.Native: void loadLibrary()>" ];
  1 -> 2;
  2 -> 3;
}

Source found in the callgraph: <java.io.InputStream: int read(byte[])>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <java.io.InputStream: int read(byte[])>
<1: <java.io.InputStream: int read(byte[])> -> <sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)>>
Global flow detected: <java.io.InputStream: int read(byte[])> -> <sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)>

Adding connections to callgraphs in class: sun.security.util.DerValue
sun.security.util.DerValue has been visited already.
<2: <sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)> -> <sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()>>
Global flow detected: <sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)> -> <sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()>

Adding connections to callgraphs in class: sun.security.util.DerInputStream


***************************
Now we build call graphs for class: sun.security.util.DerInputStream
Continue with method: <sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()>


strict digraph G {
  1 [ label="<sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()>" ];
  2 [ label="<sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>" ];
  1 -> 2;
}

<3: <sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()> -> <sun.nio.ch.ChannelInputStream: int read()>>
Global flow detected: <sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()> -> <sun.nio.ch.ChannelInputStream: int read()>

Adding connections to callgraphs in class: sun.nio.ch.ChannelInputStream


***************************
Now we build call graphs for class: sun.nio.ch.ChannelInputStream
Continue with method: <sun.nio.ch.ChannelInputStream: int read()>


strict digraph G {
  1 [ label="<sun.nio.ch.ChannelInputStream: int read()>" ];
  2 [ label="<java.io.DataInputStream: char readChar()>" ];
  3 [ label="<java.io.DataInputStream: int readUnsignedShort()>" ];
  4 [ label="<java.io.DataInputStream: short readShort()>" ];
  5 [ label="<java.io.DataInputStream: int readInt()>" ];
  6 [ label="<java.io.DataInputStream: byte readByte()>" ];
  7 [ label="<java.io.DataInputStream: int readUnsignedByte()>" ];
  8 [ label="<java.io.FilterInputStream: int read()>" ];
  9 [ label="<sun.net.www.MeteredStream: int read()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
}

<4: <sun.nio.ch.ChannelInputStream: int read()> -> <sun.security.util.DerInputStream: byte[] getOctetString()>>
Global flow detected: <sun.nio.ch.ChannelInputStream: int read()> -> <sun.security.util.DerInputStream: byte[] getOctetString()>

Adding connections to callgraphs in class: sun.security.util.DerInputStream
sun.security.util.DerInputStream has been visited already.
<5: <sun.security.util.DerInputStream: byte[] getOctetString()> -> <sun.security.util.DerValue: byte[] getOctetString()>>
Global flow detected: <sun.security.util.DerInputStream: byte[] getOctetString()> -> <sun.security.util.DerValue: byte[] getOctetString()>

Adding connections to callgraphs in class: sun.security.util.DerValue
sun.security.util.DerValue has been visited already.
<6: <sun.security.util.DerValue: byte[] getOctetString()> -> <sun.security.util.DerInputStream: void getBytes(byte[])>>
Global flow detected: <sun.security.util.DerValue: byte[] getOctetString()> -> <sun.security.util.DerInputStream: void getBytes(byte[])>

Adding connections to callgraphs in class: sun.security.util.DerInputStream
sun.security.util.DerInputStream has been visited already.
<7: <sun.security.util.DerInputStream: void getBytes(byte[])> -> <sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)>>
Global flow detected: <sun.security.util.DerInputStream: void getBytes(byte[])> -> <sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)>

Adding connections to callgraphs in class: sun.security.provider.certpath.X509CertPath


***************************
Now we build call graphs for class: sun.security.provider.certpath.X509CertPath
Continue with method: <sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)>


strict digraph G {
  1 [ label="<sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)>" ];
  2 [ label="<sun.security.provider.certpath.X509CertPath: java.util.List parsePKCS7(java.io.InputStream)>" ];
  3 [ label="<sun.security.provider.certpath.X509CertPath: java.util.List parsePKIPATH(java.io.InputStream)>" ];
  1 -> 2;
  2 -> 3;
}

<8: <sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)> -> <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>>
The above invocation flows into a source.
<9: <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)> -> <org.signal.client.internal.Native: void loadLibrary()>>
The above invocation flows into a source.
Flows from <java.io.InputStream: int read(byte[])> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.io.InputStream: int read(byte[])>" ];
  2 [ label="<sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)>" ];
  3 [ label="<sun.security.util.DerInputStream: sun.security.util.BitArray getUnalignedBitString()>" ];
  4 [ label="<sun.nio.ch.ChannelInputStream: int read()>" ];
  5 [ label="<sun.security.util.DerInputStream: byte[] getOctetString()>" ];
  6 [ label="<sun.security.util.DerValue: byte[] getOctetString()>" ];
  7 [ label="<sun.security.util.DerInputStream: void getBytes(byte[])>" ];
  8 [ label="<sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)>" ];
  9 [ label="<org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>" ];
  10 [ label="<org.signal.client.internal.Native: void loadLibrary()>" ];
  11 [ label="<sun.security.provider.certpath.X509CertPath: java.util.List parsePKCS7(java.io.InputStream)>" ];
  12 [ label="<sun.security.provider.certpath.X509CertPath: java.util.List parsePKIPATH(java.io.InputStream)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  8 -> 11;
  11 -> 12;
}

Source found in the callgraph: <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>
<1: <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)> -> <org.signal.client.internal.Native: void loadLibrary()>>
The above invocation flows into a source.
Flows from <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>" ];
  2 [ label="<org.signal.client.internal.Native: void loadLibrary()>" ];
  1 -> 2;
}

Source found in the callgraph: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <java.lang.System: java.lang.String getProperty(java.lang.String)>
<1: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <sun.security.action.GetPropertyAction: java.lang.String run()>>
Global flow detected: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <sun.security.action.GetPropertyAction: java.lang.String run()>

Adding connections to callgraphs in class: sun.security.action.GetPropertyAction


***************************
Now we build call graphs for class: sun.security.action.GetPropertyAction
Continue with method: <sun.security.action.GetPropertyAction: java.lang.String run()>


strict digraph G {
  1 [ label="<sun.security.action.GetPropertyAction: java.lang.String run()>" ];
  2 [ label="<sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>" ];
  3 [ label="<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>" ];
  4 [ label="<java.net.InetAddress: java.net.InetAddress$NameService createNameService()>" ];
  5 [ label="<sun.nio.ch.Util: long getMaxCachedBufferSize()>" ];
  6 [ label="<java.net.URL: java.net.URLStreamHandler lookupViaProperty(java.lang.String)>" ];
  7 [ label="<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar getLocalGregorianCalendar(java.lang.String)>" ];
  8 [ label="<jdk.internal.logger.LoggerFinderLoader: jdk.internal.logger.LoggerFinderLoader$ErrorPolicy configurationErrorPolicy()>" ];
  9 [ label="<jdk.internal.logger.LoggerFinderLoader: boolean ensureSingletonProvider()>" ];
  10 [ label="<jdk.internal.logger.SimpleConsoleLogger$Formatting: java.lang.String getSimpleFormat(java.lang.String,java.util.function.Function)>" ];
  11 [ label="<java.lang.reflect.AccessibleObject: boolean printStackTraceWhenAccessFails()>" ];
  12 [ label="<java.security.AccessController: java.lang.Object executePrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.lang.Class)>" ];
  13 [ label="<sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String,java.lang.String)>" ];
  14 [ label="<sun.nio.ch.Net: boolean isFastTcpLoopbackRequested()>" ];
  15 [ label="<sun.nio.ch.FileDispatcherImpl: boolean isFastFileTransferRequested()>" ];
  16 [ label="<java.net.InetAddress: java.net.InetAddressImpl loadImpl(java.lang.String)>" ];
  17 [ label="<jdk.internal.logger.SimpleConsoleLogger: java.lang.System$Logger$Level getDefaultLevel()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
}

<2: <sun.security.action.GetPropertyAction: java.lang.String run()> -> <java.lang.Boolean: boolean getBoolean(java.lang.String)>>
<3: <java.lang.Boolean: boolean getBoolean(java.lang.String)> -> <java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)>>
<4: <java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)> -> <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)>>
<5: <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)> -> <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>>
Global flow detected: <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)> -> <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>

Adding connections to callgraphs in class: sun.security.util.SecurityProperties


***************************
Now we build call graphs for class: sun.security.util.SecurityProperties
Continue with method: <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>


strict digraph G {
  1 [ label="<sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>" ];
  2 [ label="<sun.security.util.SecurityProperties: java.lang.String lambda$privilegedGetOverridable$0(java.lang.String)>" ];
  3 [ label="<sun.security.util.SecurityProperties$lambda_privilegedGetOverridable_0__71: java.lang.Object run()>" ];
  4 [ label="<sun.security.util.SecurityProperties: java.lang.String privilegedGetOverridable(java.lang.String)>" ];
  5 [ label="<sun.security.util.SecurityProperties: boolean includedInExceptions(java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
}

<6: <sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)> -> <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>>
<7: <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> -> <java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()>>
<8: <java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()> -> <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>>
<9: <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()> -> <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>>
Global flow detected: <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()> -> <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>

Adding connections to callgraphs in class: sun.net.InetAddressCachePolicy$2


***************************
Now we build call graphs for class: sun.net.InetAddressCachePolicy$2
Continue with method: <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>


strict digraph G {
  1 [ label="<sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>" ];
  2 [ label="<java.security.AccessController: java.lang.Object executePrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.lang.Class)>" ];
  1 -> 2;
}

<10: <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()> -> <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>>
Global flow detected: <sun.net.InetAddressCachePolicy$2: java.lang.Integer run()> -> <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>

Adding connections to callgraphs in class: sun.net.InetAddressCachePolicy$1


***************************
Now we build call graphs for class: sun.net.InetAddressCachePolicy$1
Continue with method: <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>


strict digraph G {
  1 [ label="<sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>" ];
  2 [ label="<java.security.AccessController: java.lang.Object executePrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.lang.Class)>" ];
  1 -> 2;
}

<11: <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()> -> <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>>
Global flow detected: <sun.net.InetAddressCachePolicy$1: java.lang.Integer run()> -> <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>

Adding connections to callgraphs in class: jdk.internal.logger.BootstrapLogger$DetectBackend$1


***************************
Now we build call graphs for class: jdk.internal.logger.BootstrapLogger$DetectBackend$1
Continue with method: <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>


strict digraph G {
  1 [ label="<jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>" ];
  2 [ label="<java.security.AccessController: java.lang.Object executePrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.lang.Class)>" ];
  1 -> 2;
}

<12: <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()> -> <sun.net.www.MimeTable$1: java.lang.Void run()>>
Global flow detected: <jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()> -> <sun.net.www.MimeTable$1: java.lang.Void run()>

Adding connections to callgraphs in class: sun.net.www.MimeTable$1


***************************
Now we build call graphs for class: sun.net.www.MimeTable$1
Continue with method: <sun.net.www.MimeTable$1: java.lang.Void run()>


strict digraph G {
  1 [ label="<sun.net.www.MimeTable$1: java.lang.Void run()>" ];
  2 [ label="<java.security.AccessController: java.lang.Object executePrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.lang.Class)>" ];
  1 -> 2;
}

<13: <sun.net.www.MimeTable$1: java.lang.Void run()> -> <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>>
Global flow detected: <sun.net.www.MimeTable$1: java.lang.Void run()> -> <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>

Adding connections to callgraphs in class: sun.security.util.PropertyExpander


***************************
Now we build call graphs for class: sun.security.util.PropertyExpander
Continue with method: <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>


strict digraph G {
  1 [ label="<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>" ];
  2 [ label="<sun.security.provider.PolicyParser: java.lang.String expand(java.lang.String,boolean)>" ];
  3 [ label="<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String)>" ];
  4 [ label="<sun.security.jca.ProviderConfig$4: java.lang.String run()>" ];
  5 [ label="<sun.security.provider.PolicyFile$4: java.lang.Boolean run()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
}

<14: <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)> -> <java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()>>
<15: <java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()> -> <sun.net.www.MimeTable: void load()>>
Global flow detected: <java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()> -> <sun.net.www.MimeTable: void load()>

Adding connections to callgraphs in class: sun.net.www.MimeTable
sun.net.www.MimeTable has been visited already.
<16: <sun.net.www.MimeTable: void load()> -> <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>>
Global flow detected: <sun.net.www.MimeTable: void load()> -> <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>

Adding connections to callgraphs in class: sun.net.www.MimeEntry


***************************
Now we build call graphs for class: sun.net.www.MimeEntry
Continue with method: <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>


strict digraph G {
  1 [ label="<sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>" ];
  2 [ label="<sun.net.www.MimeTable: void fill(sun.net.www.MimeEntry,java.lang.String,java.lang.String)>" ];
  1 -> 2;
}

<17: <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)> -> <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>>
Global flow detected: <sun.net.www.MimeEntry: void setImageFileName(java.lang.String)> -> <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>

Adding connections to callgraphs in class: sun.security.jca.ProviderConfig$1


***************************
Now we build call graphs for class: sun.security.jca.ProviderConfig$1
Continue with method: <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>


strict digraph G {
  1 [ label="<sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>" ];
  2 [ label="<java.security.AccessController: java.lang.Object executePrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.lang.Class)>" ];
  3 [ label="<sun.security.jca.ProviderConfig: void checkSunPKCS11Solaris()>" ];
  1 -> 2;
  2 -> 3;
}

<18: <sun.security.jca.ProviderConfig$1: java.lang.Boolean run()> -> <java.time.zone.ZoneRulesProvider$1: java.lang.Object run()>>
<19: <java.time.zone.ZoneRulesProvider$1: java.lang.Object run()> -> <sun.security.util.DomainName$Rules$1: java.io.InputStream run()>>
Global flow detected: <java.time.zone.ZoneRulesProvider$1: java.lang.Object run()> -> <sun.security.util.DomainName$Rules$1: java.io.InputStream run()>

Adding connections to callgraphs in class: sun.security.util.DomainName$Rules$1


***************************
Now we build call graphs for class: sun.security.util.DomainName$Rules$1
Continue with method: <sun.security.util.DomainName$Rules$1: java.io.InputStream run()>


strict digraph G {
  1 [ label="<sun.security.util.DomainName$Rules$1: java.io.InputStream run()>" ];
  2 [ label="<java.security.AccessController: java.lang.Object executePrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.lang.Class)>" ];
  3 [ label="<sun.security.util.DomainName$Rules: java.io.InputStream getPubSuffixStream()>" ];
  1 -> 2;
  2 -> 3;
}

<20: <sun.security.util.DomainName$Rules$1: java.io.InputStream run()> -> <sun.security.provider.PolicyFile$1: java.lang.String run()>>
Global flow detected: <sun.security.util.DomainName$Rules$1: java.io.InputStream run()> -> <sun.security.provider.PolicyFile$1: java.lang.String run()>

Adding connections to callgraphs in class: sun.security.provider.PolicyFile$1


***************************
Now we build call graphs for class: sun.security.provider.PolicyFile$1
Continue with method: <sun.security.provider.PolicyFile$1: java.lang.String run()>


strict digraph G {
  1 [ label="<sun.security.provider.PolicyFile$1: java.lang.String run()>" ];
  2 [ label="<java.security.AccessController: java.lang.Object executePrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.lang.Class)>" ];
  1 -> 2;
}

<21: <sun.security.provider.PolicyFile$1: java.lang.String run()> -> <sun.security.provider.PolicyFile$4: java.lang.Boolean run()>>
Global flow detected: <sun.security.provider.PolicyFile$1: java.lang.String run()> -> <sun.security.provider.PolicyFile$4: java.lang.Boolean run()>

Adding connections to callgraphs in class: sun.security.provider.PolicyFile$4


***************************
Now we build call graphs for class: sun.security.provider.PolicyFile$4
Continue with method: <sun.security.provider.PolicyFile$4: java.lang.Boolean run()>


strict digraph G {
  1 [ label="<sun.security.provider.PolicyFile$4: java.lang.Boolean run()>" ];
  2 [ label="<java.security.AccessController: java.lang.Object executePrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.lang.Class)>" ];
  1 -> 2;
}

<22: <sun.security.provider.PolicyFile$4: java.lang.Boolean run()> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>>
Global flow detected: <sun.security.provider.PolicyFile$4: java.lang.Boolean run()> -> <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>

Adding connections to callgraphs in class: sun.security.action.GetPropertyAction
sun.security.action.GetPropertyAction has been visited already.
<23: <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)> -> <org.signal.client.internal.Native: void loadLibrary()>>
The above invocation flows into a source.
Flows from <java.lang.System: java.lang.String getProperty(java.lang.String)> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String)>" ];
  2 [ label="<sun.security.action.GetPropertyAction: java.lang.String run()>" ];
  3 [ label="<java.lang.Boolean: boolean getBoolean(java.lang.String)>" ];
  4 [ label="<java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)>" ];
  5 [ label="<java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)>" ];
  6 [ label="<sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>" ];
  7 [ label="<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>" ];
  8 [ label="<java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()>" ];
  9 [ label="<java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>" ];
  10 [ label="<sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>" ];
  11 [ label="<sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>" ];
  12 [ label="<jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>" ];
  13 [ label="<sun.net.www.MimeTable$1: java.lang.Void run()>" ];
  14 [ label="<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>" ];
  15 [ label="<java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()>" ];
  16 [ label="<sun.net.www.MimeTable: void load()>" ];
  17 [ label="<sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>" ];
  18 [ label="<sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>" ];
  19 [ label="<java.time.zone.ZoneRulesProvider$1: java.lang.Object run()>" ];
  20 [ label="<sun.security.util.DomainName$Rules$1: java.io.InputStream run()>" ];
  21 [ label="<sun.security.provider.PolicyFile$1: java.lang.String run()>" ];
  22 [ label="<sun.security.provider.PolicyFile$4: java.lang.Boolean run()>" ];
  23 [ label="<sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>" ];
  24 [ label="<org.signal.client.internal.Native: void loadLibrary()>" ];
  25 [ label="<java.security.AccessController: java.lang.Object executePrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.lang.Class)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  22 -> 25;
}

Source found in the callgraph: <java.lang.String: int hashCode()>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <java.lang.String: int hashCode()>
<1: <java.lang.String: int hashCode()> -> <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>>
<2: <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>>
<3: <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>>
<4: <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>>
<5: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<6: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>>
<7: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)> -> <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>

Adding connections to callgraphs in class: sun.util.PreHashedMap
sun.util.PreHashedMap has been visited already.
<8: <sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)> -> <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>>
<9: <sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)> -> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>>
<10: <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)> -> <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>>
<11: <java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>>
<12: <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)> -> <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>>
<13: <java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)> -> <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>>
<14: <java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)> -> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>>
<15: <java.util.Hashtable: java.lang.Object get(java.lang.Object)> -> <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>>
<16: <java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)> -> <java.util.ResourceBundle$CacheKey: int hashCode()>>
<17: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>>
Global flow detected: <java.util.ResourceBundle$CacheKey: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<18: <jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>>
<19: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>>
<20: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>>
<21: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>>
Global flow detected: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)> -> <jdk.internal.org.objectweb.asm.Handle: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.Handle
jdk.internal.org.objectweb.asm.Handle has been visited already.
<22: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>>
Global flow detected: <jdk.internal.org.objectweb.asm.Handle: int hashCode()> -> <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.SymbolTable
jdk.internal.org.objectweb.asm.SymbolTable has been visited already.
<23: <jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)> -> <java.util.Arrays: int hashCode(java.lang.Object[])>>
<24: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>>
Global flow detected: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.org.objectweb.asm.ConstantDynamic
jdk.internal.org.objectweb.asm.ConstantDynamic has been visited already.
<25: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>>
Global flow detected: <jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter
sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter has been visited already.
<26: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>>
Global flow detected: <sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])> -> <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>

Adding connections to callgraphs in class: sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter
sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter has been visited already.
<27: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>>
Global flow detected: <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)> -> <jdk.internal.jimage.ImageReader$Node: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.jimage.ImageReader$Node
jdk.internal.jimage.ImageReader$Node has been visited already.
<28: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>>
Global flow detected: <jdk.internal.jimage.ImageReader$Node: int hashCode()> -> <sun.security.util.DerValue: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.DerValue
sun.security.util.DerValue has been visited already.
<29: <sun.security.util.DerValue: int hashCode()> -> <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>>
<30: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>>
Global flow detected: <javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()> -> <sun.security.jca.ProviderConfig: int hashCode()>

Adding connections to callgraphs in class: sun.security.jca.ProviderConfig
sun.security.jca.ProviderConfig has been visited already.
<31: <sun.security.jca.ProviderConfig: int hashCode()> -> <java.util.ArrayList: int hashCodeRange(int,int)>>
<32: <java.util.ArrayList: int hashCodeRange(int,int)> -> <java.util.concurrent.ConcurrentHashMap: int hashCode()>>
<33: <java.util.concurrent.ConcurrentHashMap: int hashCode()> -> <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>>
<34: <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()> -> <java.io.WinNTFileSystem: int hashCode(java.io.File)>>
<35: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>>
Global flow detected: <java.io.WinNTFileSystem: int hashCode(java.io.File)> -> <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>

Adding connections to callgraphs in class: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator
sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator has been visited already.
<36: <sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)> -> <java.util.Calendar$Builder: java.util.Calendar build()>>
<37: <java.util.Calendar$Builder: java.util.Calendar build()> -> <javax.crypto.CryptoPermission: int hashCode()>>
<38: <javax.crypto.CryptoPermission: int hashCode()> -> <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>>
<39: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>>
Global flow detected: <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)> -> <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>

Adding connections to callgraphs in class: jdk.internal.util.Preconditions
jdk.internal.util.Preconditions has been visited already.
<40: <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>>
<41: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>>
<42: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)> -> <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>>
<43: <java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)> -> <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>>
<44: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>>
Global flow detected: <java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)> -> <sun.util.locale.LocaleExtensions: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.LocaleExtensions
sun.util.locale.LocaleExtensions has been visited already.
<45: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>>
Global flow detected: <sun.util.locale.LocaleExtensions: int hashCode()> -> <sun.util.locale.BaseLocale: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.BaseLocale
sun.util.locale.BaseLocale has been visited already.
<46: <sun.util.locale.BaseLocale: int hashCode()> -> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>>
<47: <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()> -> <java.text.PatternEntry: int hashCode()>>
<48: <java.text.PatternEntry: int hashCode()> -> <java.util.Objects: int hashCode(java.lang.Object)>>
<49: <java.util.Objects: int hashCode(java.lang.Object)> -> <java.util.HashMap: int hash(java.lang.Object)>>
<50: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>>
Global flow detected: <java.util.HashMap: int hash(java.lang.Object)> -> <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>

Adding connections to callgraphs in class: sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString
sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString has been visited already.
<51: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>>
Global flow detected: <sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()> -> <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>

Adding connections to callgraphs in class: sun.util.locale.provider.CalendarDataUtility
sun.util.locale.provider.CalendarDataUtility has been visited already.
<52: <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)> -> <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>>
<53: <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)> -> <java.lang.module.ModuleDescriptor$Requires: int hashCode()>>
<54: <java.lang.module.ModuleDescriptor$Requires: int hashCode()> -> <java.util.AbstractSet: int hashCode()>>
<55: <java.util.AbstractSet: int hashCode()> -> <java.util.WeakHashMap: int hash(java.lang.Object)>>
<56: <java.util.WeakHashMap: int hash(java.lang.Object)> -> <java.security.Provider$UString: int hashCode()>>
<57: <java.security.Provider$UString: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>>
<58: <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()> -> <java.lang.constant.ReferenceClassDescImpl: int hashCode()>>
<59: <java.lang.constant.ReferenceClassDescImpl: int hashCode()> -> <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>>
<60: <java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>>
<61: <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()> -> <java.util.TreeMap$Entry: int hashCode()>>
<62: <java.util.TreeMap$Entry: int hashCode()> -> <java.lang.Object: java.lang.String toString()>>
<63: <java.lang.Object: java.lang.String toString()> -> <java.util.Hashtable: boolean containsKey(java.lang.Object)>>
<64: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>>
Global flow detected: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <sun.security.x509.RDN: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RDN
sun.security.x509.RDN has been visited already.
<65: <sun.security.x509.RDN: int hashCode()> -> <java.text.AttributedString$AttributedStringIterator: int hashCode()>>
<66: <java.text.AttributedString$AttributedStringIterator: int hashCode()> -> <java.net.URLStreamHandler: int hashCode(java.net.URL)>>
<67: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>>
Global flow detected: <java.net.URLStreamHandler: int hashCode(java.net.URL)> -> <sun.security.x509.EDIPartyName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.EDIPartyName
sun.security.x509.EDIPartyName has been visited already.
<68: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>>
Global flow detected: <sun.security.x509.EDIPartyName: int hashCode()> -> <sun.security.x509.X500Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.X500Name
sun.security.x509.X500Name has been visited already.
<69: <sun.security.x509.X500Name: int hashCode()> -> <java.net.URI: int hash(int,java.lang.String)>>
<70: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>>
Global flow detected: <java.net.URI: int hash(int,java.lang.String)> -> <sun.security.x509.DNSName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.DNSName
sun.security.x509.DNSName has been visited already.
<71: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>>
Global flow detected: <sun.security.x509.DNSName: int hashCode()> -> <sun.security.x509.RFC822Name: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.RFC822Name
sun.security.x509.RFC822Name has been visited already.
<72: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>>
Global flow detected: <sun.security.x509.RFC822Name: int hashCode()> -> <sun.security.x509.AVA: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AVA
sun.security.x509.AVA has been visited already.
<73: <sun.security.x509.AVA: int hashCode()> -> <java.util.AbstractList: int hashCode()>>
<74: <java.util.AbstractList: int hashCode()> -> <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>>
<75: <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)> -> <java.time.ZoneId: int hashCode()>>
<76: <java.time.ZoneId: int hashCode()> -> <java.security.BasicPermission: int hashCode()>>
<77: <java.security.BasicPermission: int hashCode()> -> <java.util.PropertyPermission: int hashCode()>>
<78: <java.util.PropertyPermission: int hashCode()> -> <java.net.SocketPermission: int hashCode()>>
<79: <java.net.SocketPermission: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>>
<80: <java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>>
<81: <java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)> -> <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>>
<82: <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)> -> <java.security.UnresolvedPermission: int hashCode()>>
<83: <java.security.UnresolvedPermission: int hashCode()> -> <javax.security.auth.Subject$SecureSet: int hashCode()>>
<84: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>>
Global flow detected: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PrincipalEntry
sun.security.provider.PolicyParser$PrincipalEntry has been visited already.
<85: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()> -> <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyParser$PermissionEntry
sun.security.provider.PolicyParser$PermissionEntry has been visited already.
<86: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>>
Global flow detected: <sun.security.provider.PolicyParser$PermissionEntry: int hashCode()> -> <sun.security.provider.PolicyFile$SelfPermission: int hashCode()>

Adding connections to callgraphs in class: sun.security.provider.PolicyFile$SelfPermission
sun.security.provider.PolicyFile$SelfPermission has been visited already.
<87: <sun.security.provider.PolicyFile$SelfPermission: int hashCode()> -> <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>>
<88: <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)> -> <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>>
<89: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>>
Global flow detected: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <sun.security.x509.AlgorithmId: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.AlgorithmId
sun.security.x509.AlgorithmId has been visited already.
<90: <sun.security.x509.AlgorithmId: int hashCode()> -> <java.util.AbstractMap$SimpleEntry: int hashCode()>>
<91: <java.util.AbstractMap$SimpleEntry: int hashCode()> -> <java.lang.StackTraceElement: int hashCode()>>
<92: <java.lang.StackTraceElement: int hashCode()> -> <java.text.ChoiceFormat: int hashCode()>>
<93: <java.text.ChoiceFormat: int hashCode()> -> <java.text.SimpleDateFormat: int hashCode()>>
<94: <java.text.SimpleDateFormat: int hashCode()> -> <java.text.DecimalFormat: int hashCode()>>
<95: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>>
Global flow detected: <java.text.DecimalFormat: int hashCode()> -> <sun.util.calendar.Era: int hashCode()>

Adding connections to callgraphs in class: sun.util.calendar.Era
sun.util.calendar.Era has been visited already.
<96: <sun.util.calendar.Era: int hashCode()> -> <java.util.ImmutableCollections$Set12: int hashCode()>>
<97: <java.util.ImmutableCollections$Set12: int hashCode()> -> <java.util.KeyValueHolder: int hashCode()>>
<98: <java.util.KeyValueHolder: int hashCode()> -> <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>>
<99: <java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> -> <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>>
<100: <java.util.zip.ZipCoder: int normalizedHash(java.lang.String)> -> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>>
<101: <java.util.Hashtable: java.lang.Object remove(java.lang.Object)> -> <java.lang.Package: int hashCode()>>
<102: <java.lang.Package: int hashCode()> -> <java.security.SecureClassLoader$CodeSourceKey: int hashCode()>>
<103: <java.security.SecureClassLoader$CodeSourceKey: int hashCode()> -> <java.text.AttributeEntry: int hashCode()>>
<104: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>>
Global flow detected: <java.text.AttributeEntry: int hashCode()> -> <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>

Adding connections to callgraphs in class: sun.util.calendar.LocalGregorianCalendar
sun.util.calendar.LocalGregorianCalendar has been visited already.
<105: <sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)> -> <java.util.ImmutableCollections$SetN: int hashCode()>>
<106: <java.util.ImmutableCollections$SetN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int hashCode()>>
<107: <java.util.ImmutableCollections$MapN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>>
Flows from <java.lang.String: int hashCode()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.String: int hashCode()>" ];
  2 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  3 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  5 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  6 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>" ];
  7 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>" ];
  8 [ label="<sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>" ];
  9 [ label="<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>" ];
  10 [ label="<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>" ];
  11 [ label="<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>" ];
  12 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>" ];
  13 [ label="<java.lang.invoke.MemberName: boolean isMethodHandleInvokeName(java.lang.String)>" ];
  14 [ label="<java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>" ];
  15 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  16 [ label="<java.lang.invoke.MethodHandleNatives: boolean canBeCalledVirtual(java.lang.invoke.MemberName)>" ];
  17 [ label="<java.util.ResourceBundle$CacheKey: int hashCode()>" ];
  18 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: jdk.internal.org.objectweb.asm.Symbol addBootstrapMethod(jdk.internal.org.objectweb.asm.Handle,java.lang.Object[])>" ];
  19 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>" ];
  20 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>" ];
  21 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>" ];
  22 [ label="<jdk.internal.org.objectweb.asm.Handle: int hashCode()>" ];
  23 [ label="<jdk.internal.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>" ];
  24 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  25 [ label="<jdk.internal.org.objectweb.asm.ConstantDynamic: int hashCode()>" ];
  26 [ label="<sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter: java.lang.Integer getObject(java.util.spi.CalendarDataProvider,java.util.Locale,java.lang.String,java.lang.Object[])>" ];
  27 [ label="<sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String getName(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,int,java.lang.String)>" ];
  28 [ label="<jdk.internal.jimage.ImageReader$Node: int hashCode()>" ];
  29 [ label="<sun.security.util.DerValue: int hashCode()>" ];
  30 [ label="<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int hashCode()>" ];
  31 [ label="<sun.security.jca.ProviderConfig: int hashCode()>" ];
  32 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  33 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  34 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  35 [ label="<java.io.WinNTFileSystem: int hashCode(java.io.File)>" ];
  36 [ label="<sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator: sun.security.util.DisabledAlgorithmConstraints$Constraint$Operator of(java.lang.String)>" ];
  37 [ label="<java.util.Calendar$Builder: java.util.Calendar build()>" ];
  38 [ label="<javax.crypto.CryptoPermission: int hashCode()>" ];
  39 [ label="<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,java.lang.Module,java.lang.Module)>" ];
  40 [ label="<jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>" ];
  41 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getPosixPredicate(java.lang.String,boolean)>" ];
  42 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate forProperty(java.lang.String,boolean)>" ];
  43 [ label="<java.util.regex.Pattern: java.util.regex.Pattern$CharPredicate family(boolean,boolean)>" ];
  44 [ label="<java.util.regex.CharPredicates: java.util.regex.Pattern$CharPredicate getUnicodePredicate(java.lang.String,boolean)>" ];
  45 [ label="<sun.util.locale.LocaleExtensions: int hashCode()>" ];
  46 [ label="<sun.util.locale.BaseLocale: int hashCode()>" ];
  47 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  48 [ label="<java.text.PatternEntry: int hashCode()>" ];
  49 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  50 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  51 [ label="<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: int hashCode()>" ];
  52 [ label="<sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>" ];
  53 [ label="<java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>" ];
  54 [ label="<java.lang.module.ModuleDescriptor$Requires: int hashCode()>" ];
  55 [ label="<java.util.AbstractSet: int hashCode()>" ];
  56 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  57 [ label="<java.security.Provider$UString: int hashCode()>" ];
  58 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  59 [ label="<java.lang.constant.ReferenceClassDescImpl: int hashCode()>" ];
  60 [ label="<java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>" ];
  61 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  62 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  63 [ label="<java.lang.Object: java.lang.String toString()>" ];
  64 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  65 [ label="<sun.security.x509.RDN: int hashCode()>" ];
  66 [ label="<java.text.AttributedString$AttributedStringIterator: int hashCode()>" ];
  67 [ label="<java.net.URLStreamHandler: int hashCode(java.net.URL)>" ];
  68 [ label="<sun.security.x509.EDIPartyName: int hashCode()>" ];
  69 [ label="<sun.security.x509.X500Name: int hashCode()>" ];
  70 [ label="<java.net.URI: int hash(int,java.lang.String)>" ];
  71 [ label="<sun.security.x509.DNSName: int hashCode()>" ];
  72 [ label="<sun.security.x509.RFC822Name: int hashCode()>" ];
  73 [ label="<sun.security.x509.AVA: int hashCode()>" ];
  74 [ label="<java.util.AbstractList: int hashCode()>" ];
  75 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  76 [ label="<java.time.ZoneId: int hashCode()>" ];
  77 [ label="<java.security.BasicPermission: int hashCode()>" ];
  78 [ label="<java.util.PropertyPermission: int hashCode()>" ];
  79 [ label="<java.net.SocketPermission: int hashCode()>" ];
  80 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>" ];
  81 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>" ];
  82 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  83 [ label="<java.security.UnresolvedPermission: int hashCode()>" ];
  84 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  85 [ label="<sun.security.provider.PolicyParser$PrincipalEntry: int hashCode()>" ];
  86 [ label="<sun.security.provider.PolicyParser$PermissionEntry: int hashCode()>" ];
  87 [ label="<sun.security.provider.PolicyFile$SelfPermission: int hashCode()>" ];
  88 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  89 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  90 [ label="<sun.security.x509.AlgorithmId: int hashCode()>" ];
  91 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  92 [ label="<java.lang.StackTraceElement: int hashCode()>" ];
  93 [ label="<java.text.ChoiceFormat: int hashCode()>" ];
  94 [ label="<java.text.SimpleDateFormat: int hashCode()>" ];
  95 [ label="<java.text.DecimalFormat: int hashCode()>" ];
  96 [ label="<sun.util.calendar.Era: int hashCode()>" ];
  97 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  98 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  99 [ label="<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>" ];
  100 [ label="<java.util.zip.ZipCoder: int normalizedHash(java.lang.String)>" ];
  101 [ label="<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>" ];
  102 [ label="<java.lang.Package: int hashCode()>" ];
  103 [ label="<java.security.SecureClassLoader$CodeSourceKey: int hashCode()>" ];
  104 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  105 [ label="<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era parseEraEntry(java.lang.String)>" ];
  106 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  107 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  108 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  46 -> 47;
  47 -> 48;
  48 -> 49;
  49 -> 50;
  50 -> 51;
  51 -> 52;
  52 -> 53;
  53 -> 54;
  54 -> 55;
  55 -> 56;
  56 -> 57;
  57 -> 58;
  58 -> 59;
  59 -> 60;
  60 -> 61;
  61 -> 62;
  62 -> 63;
  63 -> 64;
  64 -> 65;
  65 -> 66;
  66 -> 67;
  67 -> 68;
  68 -> 69;
  69 -> 70;
  70 -> 71;
  71 -> 72;
  72 -> 73;
  73 -> 74;
  74 -> 75;
  75 -> 76;
  76 -> 77;
  77 -> 78;
  78 -> 79;
  79 -> 80;
  80 -> 81;
  81 -> 82;
  82 -> 83;
  83 -> 84;
  84 -> 85;
  85 -> 86;
  86 -> 87;
  87 -> 88;
  88 -> 89;
  89 -> 90;
  90 -> 91;
  91 -> 92;
  92 -> 93;
  93 -> 94;
  94 -> 95;
  95 -> 96;
  96 -> 97;
  97 -> 98;
  98 -> 99;
  99 -> 100;
  100 -> 101;
  101 -> 102;
  102 -> 103;
  103 -> 104;
  104 -> 105;
  105 -> 106;
  106 -> 107;
  107 -> 108;
}

Source found in the callgraph: <java.lang.Object: int hashCode()>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <java.lang.Object: int hashCode()>
<1: <java.lang.Object: int hashCode()> -> <java.util.HashMap: int hash(java.lang.Object)>>
<2: <java.util.HashMap: int hash(java.lang.Object)> -> <java.lang.invoke.MethodType: int hashCode()>>
<3: <java.lang.invoke.MethodType: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>>
<4: <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> -> <java.lang.Enum: int hashCode()>>
<5: <java.lang.Enum: int hashCode()> -> <sun.security.provider.SeedGenerator$1: java.lang.Void run()>>
Global flow detected: <java.lang.Enum: int hashCode()> -> <sun.security.provider.SeedGenerator$1: java.lang.Void run()>

Adding connections to callgraphs in class: sun.security.provider.SeedGenerator$1
sun.security.provider.SeedGenerator$1 has been visited already.
<6: <sun.security.provider.SeedGenerator$1: java.lang.Void run()> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>>
<7: <java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>>
<8: <java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)> -> <java.util.Objects: int hashCode(java.lang.Object)>>
<9: <java.util.Objects: int hashCode(java.lang.Object)> -> <java.lang.invoke.LambdaForm$NamedFunction: int hashCode()>>
<10: <java.lang.invoke.LambdaForm$NamedFunction: int hashCode()> -> <java.util.ArrayList: int hashCodeRange(int,int)>>
<11: <java.util.ArrayList: int hashCodeRange(int,int)> -> <java.util.concurrent.ConcurrentHashMap: int hashCode()>>
<12: <java.util.concurrent.ConcurrentHashMap: int hashCode()> -> <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>>
<13: <java.util.ImmutableCollections$AbstractImmutableList: int hashCode()> -> <java.util.Arrays: int hashCode(java.lang.Object[])>>
<14: <java.util.Arrays: int hashCode(java.lang.Object[])> -> <java.security.AccessControlContext: int hashCode()>>
<15: <java.security.AccessControlContext: int hashCode()> -> <java.lang.Object: java.lang.String toString()>>
<16: <java.lang.Object: java.lang.String toString()> -> <java.util.AbstractSet: int hashCode()>>
<17: <java.util.AbstractSet: int hashCode()> -> <java.lang.Character$Subset: int hashCode()>>
<18: <java.lang.Character$Subset: int hashCode()> -> <java.text.AttributedCharacterIterator$Attribute: int hashCode()>>
<19: <java.text.AttributedCharacterIterator$Attribute: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>>
<20: <java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>>
<21: <java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()> -> <java.util.TreeMap$Entry: int hashCode()>>
<22: <java.util.TreeMap$Entry: int hashCode()> -> <java.lang.module.ResolvedModule: int hashCode()>>
<23: <java.lang.module.ResolvedModule: int hashCode()> -> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>>
<24: <java.util.Hashtable: java.lang.Object get(java.lang.Object)> -> <java.util.Hashtable: boolean containsKey(java.lang.Object)>>
<25: <java.util.Hashtable: boolean containsKey(java.lang.Object)> -> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>>
<26: <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()> -> <sun.security.x509.GeneralName: int hashCode()>>
Global flow detected: <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()> -> <sun.security.x509.GeneralName: int hashCode()>

Adding connections to callgraphs in class: sun.security.x509.GeneralName
sun.security.x509.GeneralName has been visited already.
<27: <sun.security.x509.GeneralName: int hashCode()> -> <java.util.AbstractList: int hashCode()>>
<28: <java.util.AbstractList: int hashCode()> -> <java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>>
<29: <java.util.ImmutableCollections$MapN: int probe(java.lang.Object)> -> <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>>
<30: <java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)> -> <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>>
<31: <java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)> -> <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>>
<32: <java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)> -> <javax.security.auth.Subject$SecureSet: int hashCode()>>
<33: <javax.security.auth.Subject$SecureSet: int hashCode()> -> <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>>
<34: <java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)> -> <java.util.Collections$SynchronizedSet: int hashCode()>>
<35: <java.util.Collections$SynchronizedSet: int hashCode()> -> <java.util.Collections$UnmodifiableSet: int hashCode()>>
<36: <java.util.Collections$UnmodifiableSet: int hashCode()> -> <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>>
<37: <java.util.concurrent.ConcurrentHashMap$Node: int hashCode()> -> <java.util.ImmutableCollections$Set12: int hashCode()>>
<38: <java.util.ImmutableCollections$Set12: int hashCode()> -> <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>>
<39: <java.util.ImmutableCollections$SetN: int probe(java.lang.Object)> -> <java.util.AbstractMap$SimpleEntry: int hashCode()>>
<40: <java.util.AbstractMap$SimpleEntry: int hashCode()> -> <java.util.KeyValueHolder: int hashCode()>>
<41: <java.util.KeyValueHolder: int hashCode()> -> <jdk.internal.loader.AbstractClassLoaderValue$Sub: int hashCode()>>
Global flow detected: <java.util.KeyValueHolder: int hashCode()> -> <jdk.internal.loader.AbstractClassLoaderValue$Sub: int hashCode()>

Adding connections to callgraphs in class: jdk.internal.loader.AbstractClassLoaderValue$Sub
jdk.internal.loader.AbstractClassLoaderValue$Sub has been visited already.
<42: <jdk.internal.loader.AbstractClassLoaderValue$Sub: int hashCode()> -> <java.text.AttributeEntry: int hashCode()>>
<43: <java.text.AttributeEntry: int hashCode()> -> <java.util.ImmutableCollections$SetN: int hashCode()>>
<44: <java.util.ImmutableCollections$SetN: int hashCode()> -> <java.util.ImmutableCollections$MapN: int hashCode()>>
<45: <java.util.ImmutableCollections$MapN: int hashCode()> -> <java.lang.module.ModuleDescriptor$Requires: int hashCode()>>
<46: <java.lang.module.ModuleDescriptor$Requires: int hashCode()> -> <java.util.WeakHashMap: int hash(java.lang.Object)>>
Flows from <java.lang.Object: int hashCode()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.lang.Object: int hashCode()>" ];
  2 [ label="<java.util.HashMap: int hash(java.lang.Object)>" ];
  3 [ label="<java.lang.invoke.MethodType: int hashCode()>" ];
  4 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>" ];
  5 [ label="<java.lang.Enum: int hashCode()>" ];
  6 [ label="<sun.security.provider.SeedGenerator$1: java.lang.Void run()>" ];
  7 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>" ];
  8 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>" ];
  9 [ label="<java.util.Objects: int hashCode(java.lang.Object)>" ];
  10 [ label="<java.lang.invoke.LambdaForm$NamedFunction: int hashCode()>" ];
  11 [ label="<java.util.ArrayList: int hashCodeRange(int,int)>" ];
  12 [ label="<java.util.concurrent.ConcurrentHashMap: int hashCode()>" ];
  13 [ label="<java.util.ImmutableCollections$AbstractImmutableList: int hashCode()>" ];
  14 [ label="<java.util.Arrays: int hashCode(java.lang.Object[])>" ];
  15 [ label="<java.security.AccessControlContext: int hashCode()>" ];
  16 [ label="<java.lang.Object: java.lang.String toString()>" ];
  17 [ label="<java.util.AbstractSet: int hashCode()>" ];
  18 [ label="<java.lang.Character$Subset: int hashCode()>" ];
  19 [ label="<java.text.AttributedCharacterIterator$Attribute: int hashCode()>" ];
  20 [ label="<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>" ];
  21 [ label="<java.util.concurrent.ConcurrentHashMap$MapEntry: int hashCode()>" ];
  22 [ label="<java.util.TreeMap$Entry: int hashCode()>" ];
  23 [ label="<java.lang.module.ResolvedModule: int hashCode()>" ];
  24 [ label="<java.util.Hashtable: java.lang.Object get(java.lang.Object)>" ];
  25 [ label="<java.util.Hashtable: boolean containsKey(java.lang.Object)>" ];
  26 [ label="<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>" ];
  27 [ label="<sun.security.x509.GeneralName: int hashCode()>" ];
  28 [ label="<java.util.AbstractList: int hashCode()>" ];
  29 [ label="<java.util.ImmutableCollections$MapN: int probe(java.lang.Object)>" ];
  30 [ label="<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object,java.util.Locale)>" ];
  31 [ label="<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>" ];
  32 [ label="<java.util.concurrent.CopyOnWriteArrayList: int hashCodeOfRange(java.lang.Object[],int,int)>" ];
  33 [ label="<javax.security.auth.Subject$SecureSet: int hashCode()>" ];
  34 [ label="<java.util.Hashtable$EntrySet: boolean contains(java.lang.Object)>" ];
  35 [ label="<java.util.Collections$SynchronizedSet: int hashCode()>" ];
  36 [ label="<java.util.Collections$UnmodifiableSet: int hashCode()>" ];
  37 [ label="<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>" ];
  38 [ label="<java.util.ImmutableCollections$Set12: int hashCode()>" ];
  39 [ label="<java.util.ImmutableCollections$SetN: int probe(java.lang.Object)>" ];
  40 [ label="<java.util.AbstractMap$SimpleEntry: int hashCode()>" ];
  41 [ label="<java.util.KeyValueHolder: int hashCode()>" ];
  42 [ label="<jdk.internal.loader.AbstractClassLoaderValue$Sub: int hashCode()>" ];
  43 [ label="<java.text.AttributeEntry: int hashCode()>" ];
  44 [ label="<java.util.ImmutableCollections$SetN: int hashCode()>" ];
  45 [ label="<java.util.ImmutableCollections$MapN: int hashCode()>" ];
  46 [ label="<java.lang.module.ModuleDescriptor$Requires: int hashCode()>" ];
  47 [ label="<java.util.WeakHashMap: int hash(java.lang.Object)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  46 -> 47;
}

Source found in the callgraph: <java.util.Arrays: int hashCode(byte[])>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <java.util.Arrays: int hashCode(byte[])>
<1: <java.util.Arrays: int hashCode(byte[])> -> <java.security.cert.Certificate: int hashCode()>>
<2: <java.security.cert.Certificate: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>>
<3: <java.lang.invoke.LambdaFormEditor$Transform: int hashCode()> -> <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>>
<4: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>>
Global flow detected: <java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()> -> <sun.security.util.Cache$EqualByteArray: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.Cache$EqualByteArray
sun.security.util.Cache$EqualByteArray has been visited already.
<5: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>>
Global flow detected: <sun.security.util.Cache$EqualByteArray: int hashCode()> -> <sun.security.util.ObjectIdentifier: int hashCode()>

Adding connections to callgraphs in class: sun.security.util.ObjectIdentifier
sun.security.util.ObjectIdentifier has been visited already.
Flows from <java.util.Arrays: int hashCode(byte[])> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.util.Arrays: int hashCode(byte[])>" ];
  2 [ label="<java.security.cert.Certificate: int hashCode()>" ];
  3 [ label="<java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>" ];
  4 [ label="<java.lang.invoke.LambdaFormEditor$TransformKey: int hashCode()>" ];
  5 [ label="<sun.security.util.Cache$EqualByteArray: int hashCode()>" ];
  6 [ label="<sun.security.util.ObjectIdentifier: int hashCode()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
}

Source found in the callgraph: <java.io.File: java.lang.String getAbsolutePath()>...
In class: org.signal.client.internal.Native
Start traversal: 

Starting from method: <java.io.File: java.lang.String getAbsolutePath()>
<1: <java.io.File: java.lang.String getAbsolutePath()> -> <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>>
Global flow detected: <java.io.File: java.lang.String getAbsolutePath()> -> <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>

Adding connections to callgraphs in class: sun.net.www.ParseUtil


***************************
Now we build call graphs for class: sun.net.www.ParseUtil
Continue with method: <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>


strict digraph G {
  1 [ label="<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>" ];
  2 [ label="<sun.security.provider.PolicyFile$4: java.lang.Boolean run()>" ];
  3 [ label="<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>" ];
  4 [ label="<jdk.internal.loader.URLClassPath: java.net.URL toFileURL(java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

<2: <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)> -> <java.io.File: java.io.File getAbsoluteFile()>>
<3: <java.io.File: java.io.File getAbsoluteFile()> -> <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>>
The above invocation flows into a source.
<4: <org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)> -> <org.signal.client.internal.Native: void loadLibrary()>>
The above invocation flows into a source.
Flows from <java.io.File: java.lang.String getAbsolutePath()> is finished.
/////////////////////////////////////


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getAbsolutePath()>" ];
  2 [ label="<sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>" ];
  3 [ label="<java.io.File: java.io.File getAbsoluteFile()>" ];
  4 [ label="<org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>" ];
  5 [ label="<org.signal.client.internal.Native: void loadLibrary()>" ];
  6 [ label="<sun.security.provider.PolicyFile$4: java.lang.Boolean run()>" ];
  7 [ label="<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>" ];
  8 [ label="<jdk.internal.loader.URLClassPath: java.net.URL toFileURL(java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  2 -> 6;
  6 -> 7;
  7 -> 8;
}

Loaded 927 methods from JAR files. 

Found 41 Source Methods.
Found 2 Sink Methods.
Sources and Sinks collected. 

Methods extraction finished.
All finished.
