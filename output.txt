***** Loading java classes ***** 

Start reading BOM and BIM...
BOM is loaded with 169 methods.
BIM is loaded with 350 methods.
EOM is loaded with 257 methods.
EIM is loaded with 365 methods.
Start looking for sources and sinks: 
[spark] Starting analysis ...
[main] ERROR soot.jimple.toolkits.typing.fast.TypePromotionUseVisitor - Failed Typing in <java.awt.image.ComponentColorModel: int getRGBComponent(int,int)> at statement opixel#1 = $r0: Is not cast compatible: null_type <-- java.lang.Object
[main] ERROR soot.jimple.toolkits.typing.fast.TypePromotionUseVisitor - Failed Typing in <com.sun.imageio.plugins.tiff.TIFFIFD: int readFieldValue(javax.imageio.stream.ImageInputStream,int,int,java.lang.Object[])> at statement obj#10 = $r0: Is not cast compatible: null_type <-- java.lang.Object
[spark] Done!


***************************
Now we build call graphs for class: com.vaadin.data.util.sqlcontainer.connection.SimpleJDBCConnectionPool


Source here: <com.vaadin.data.util.sqlcontainer.connection.SimpleJDBCConnectionPool: java.sql.Connection createConnection()>


***************************
Now we build call graphs for class: com.vaadin.server.VaadinPortletService


Source here: <com.vaadin.server.VaadinPortletService: java.io.File getBaseDirectory()>


***************************
Now we build call graphs for class: com.google.gwt.core.server.StackTraceDeobfuscator


Source here: <com.google.gwt.core.server.StackTraceDeobfuscator: java.lang.String loadStreamAsString(java.io.InputStream)>


Source here: <com.google.gwt.core.server.StackTraceDeobfuscator: java.util.Map loadSymbolMap(java.lang.String,java.util.Set)>


***************************
Now we build call graphs for class: com.vaadin.server.communication.ResourceWriter


Source here: <com.vaadin.server.communication.ResourceWriter: void write(com.vaadin.ui.UI,java.io.Writer,com.vaadin.server.JsonPaintTarget)>


***************************
Now we build call graphs for class: com.vaadin.data.util.FilesystemContainer


Source here: <com.vaadin.data.util.FilesystemContainer: java.util.Collection getChildren(java.lang.Object)>


Source here: <com.vaadin.data.util.FilesystemContainer: java.lang.Object getParent(java.lang.Object)>


Source here: <com.vaadin.data.util.FilesystemContainer: boolean hasChildren(java.lang.Object)>


Source here: <com.vaadin.data.util.FilesystemContainer: java.util.Collection rootItemIds()>


Source here: <com.vaadin.data.util.FilesystemContainer: boolean containsId(java.lang.Object)>


Source here: <com.vaadin.data.util.FilesystemContainer: void addItemIds(java.util.Collection,java.io.File)>


Source here: <com.vaadin.data.util.FilesystemContainer: java.util.Collection getItemIds()>


Source here: <com.vaadin.data.util.FilesystemContainer: int getFileCounts(java.io.File)>


Source here: <com.vaadin.data.util.FilesystemContainer: int size()>


***************************
Now we build call graphs for class: com.vaadin.data.util.FilesystemContainer$FileItem


Source here: <com.vaadin.data.util.FilesystemContainer$FileItem: int hashCode()>


Source here: <com.vaadin.data.util.FilesystemContainer$FileItem: java.lang.String getName()>


Source here: <com.vaadin.data.util.FilesystemContainer$FileItem: java.lang.String toString()>


***************************
Now we build call graphs for class: com.vaadin.server.FileResource


Source here: <com.vaadin.server.FileResource: com.vaadin.server.DownloadStream getStream()>


Source here: <com.vaadin.server.FileResource: java.lang.String getFilename()>


***************************
Now we build call graphs for class: com.vaadin.util.FileTypeResolver


Source here: <com.vaadin.util.FileTypeResolver: java.lang.String getMIMEType(java.io.File)>


***************************
Now we build call graphs for class: com.vaadin.data.util.TextFileProperty


Source here: <com.vaadin.data.util.TextFileProperty: java.lang.String getValue()>


***************************
Now we build call graphs for class: com.vaadin.data.util.sqlcontainer.query.TableQuery


Source here: <com.vaadin.data.util.sqlcontainer.query.TableQuery: com.vaadin.data.util.sqlcontainer.RowId storeRowImmediately(com.vaadin.data.util.sqlcontainer.RowItem)>


Source here: <com.vaadin.data.util.sqlcontainer.query.TableQuery: int executeUpdateReturnKeys(com.vaadin.data.util.sqlcontainer.query.generator.StatementHelper,com.vaadin.data.util.sqlcontainer.RowItem)>


***************************
Now we build call graphs for class: com.vaadin.server.widgetsetutils.ClassPathExplorer


Source here: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>
Edges to Source: STATIC edge: staticinvoke <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>(r22, $r0, $r1) in <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()> ==> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>


Source here: <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.List getRawClasspathEntries()>
Edges to Source: STATIC edge: $r1 = staticinvoke <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.List getRawClasspathEntries()>() in <com.vaadin.server.widgetsetutils.ClassPathExplorer: void <clinit>()> ==> <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.List getRawClasspathEntries()>


Source here: <com.vaadin.server.widgetsetutils.ClassPathExplorer: boolean acceptClassPathEntry(java.lang.String)>
Edges to Source: STATIC edge: $z2 = staticinvoke <com.vaadin.server.widgetsetutils.ClassPathExplorer: boolean acceptClassPathEntry(java.lang.String)>(r8) in <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.List getRawClasspathEntries()> ==> <com.vaadin.server.widgetsetutils.ClassPathExplorer: boolean acceptClassPathEntry(java.lang.String)>


Source here: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>
Edges to Source: STATIC edge: staticinvoke <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>(null, $r10, $r0) in <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.Map getClasspathLocations(java.util.List)> ==> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>
Edges to Source: STATIC edge: staticinvoke <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>($r18, $r20, r19) in <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)> ==> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>


Source here: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void includeJar(java.io.File,java.util.Map)>
Edges to Source: STATIC edge: staticinvoke <com.vaadin.server.widgetsetutils.ClassPathExplorer: void includeJar(java.io.File,java.util.Map)>(r0, r19) in <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)> ==> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void includeJar(java.io.File,java.util.Map)>


Source here: <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.net.URL getDefaultSourceDirectory()>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: <java.lang.System: java.lang.String getProperty(java.lang.String)>
1: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.List getRawClasspathEntries()>
Global flow detected: <java.lang.System: java.lang.String getProperty(java.lang.String)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.List getRawClasspathEntries()>
Flows from source is finished.


strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String)>" ];
  2 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.List getRawClasspathEntries()>" ];
  1 -> 2;
}

Start traversal for source: <java.io.File: java.lang.String getPath()>...
Starting from source: <java.io.File: java.lang.String getPath()>
1: <java.io.File: java.lang.String getPath()> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>
Global flow detected: <java.io.File: java.lang.String getPath()> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>
2: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.Map getClasspathLocations(java.util.List)>
Flows from source is finished.


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getPath()>" ];
  2 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>" ];
  3 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.Map getClasspathLocations(java.util.List)>" ];
  1 -> 2;
  2 -> 3;
}

Start traversal for source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.List getRawClasspathEntries()>...
Starting from source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.List getRawClasspathEntries()>
Flows from source is finished.


strict digraph G {
}

Start traversal for source: <java.net.URL: java.lang.String getFile()>...
Starting from source: <java.net.URL: java.lang.String getFile()>
1: <java.net.URL: java.lang.String getFile()> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>
Global flow detected: <java.net.URL: java.lang.String getFile()> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>
2: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()>
3: <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
Global flow detected: <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
Flows from source is finished.


strict digraph G {
  1 [ label="<java.net.URL: java.lang.String getFile()>" ];
  2 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>" ];
  3 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()>" ];
  4 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: <java.io.File: java.lang.String getName()>
1: <java.io.File: java.lang.String getName()> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>
Global flow detected: <java.io.File: java.lang.String getName()> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>
2: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.Map getClasspathLocations(java.util.List)>
Flows from source is finished.


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getName()>" ];
  2 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>" ];
  3 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.Map getClasspathLocations(java.util.List)>" ];
  1 -> 2;
  2 -> 3;
}

Start traversal for source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>...
Starting from source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>
1: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.Map getClasspathLocations(java.util.List)>
Flows from source is finished.


strict digraph G {
  1 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>" ];
  2 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.Map getClasspathLocations(java.util.List)>" ];
  1 -> 2;
}

Start traversal for source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void includeJar(java.io.File,java.util.Map)>...
Starting from source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void includeJar(java.io.File,java.util.Map)>
1: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void includeJar(java.io.File,java.util.Map)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>
2: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.Map getClasspathLocations(java.util.List)>
Flows from source is finished.


strict digraph G {
  1 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: void includeJar(java.io.File,java.util.Map)>" ];
  2 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>" ];
  3 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.Map getClasspathLocations(java.util.List)>" ];
  1 -> 2;
  2 -> 3;
}

Start traversal for source: <java.net.URL: int getPort()>...
Starting from source: <java.net.URL: int getPort()>
1: <java.net.URL: int getPort()> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>
Global flow detected: <java.net.URL: int getPort()> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>
2: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()>
3: <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
Global flow detected: <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
Flows from source is finished.


strict digraph G {
  1 [ label="<java.net.URL: int getPort()>" ];
  2 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>" ];
  3 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()>" ];
  4 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

Start traversal for source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>...
Starting from source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>
1: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()>
2: <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
Global flow detected: <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
Flows from source is finished.


strict digraph G {
  1 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>" ];
  2 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()>" ];
  3 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
}

Start traversal for source: <java.net.URL: java.lang.String getHost()>...
Starting from source: <java.net.URL: java.lang.String getHost()>
1: <java.net.URL: java.lang.String getHost()> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>
Global flow detected: <java.net.URL: java.lang.String getHost()> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>
2: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()>
3: <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
Global flow detected: <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
Flows from source is finished.


strict digraph G {
  1 [ label="<java.net.URL: java.lang.String getHost()>" ];
  2 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>" ];
  3 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()>" ];
  4 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

Start traversal for source: <java.net.URL: java.lang.String getProtocol()>...
Starting from source: <java.net.URL: java.lang.String getProtocol()>
1: <java.net.URL: java.lang.String getProtocol()> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>
Global flow detected: <java.net.URL: java.lang.String getProtocol()> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>
2: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()>
3: <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
Global flow detected: <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
Flows from source is finished.


strict digraph G {
  1 [ label="<java.net.URL: java.lang.String getProtocol()>" ];
  2 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>" ];
  3 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()>" ];
  4 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}

Start traversal for source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: boolean acceptClassPathEntry(java.lang.String)>...
Starting from source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: boolean acceptClassPathEntry(java.lang.String)>
1: <com.vaadin.server.widgetsetutils.ClassPathExplorer: boolean acceptClassPathEntry(java.lang.String)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.List getRawClasspathEntries()>
Flows from source is finished.


strict digraph G {
  1 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: boolean acceptClassPathEntry(java.lang.String)>" ];
  2 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.List getRawClasspathEntries()>" ];
  1 -> 2;
}

Start traversal for source: <java.io.File: java.lang.String getCanonicalPath()>...
Starting from source: <java.io.File: java.lang.String getCanonicalPath()>
1: <java.io.File: java.lang.String getCanonicalPath()> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void includeJar(java.io.File,java.util.Map)>
Global flow detected: <java.io.File: java.lang.String getCanonicalPath()> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void includeJar(java.io.File,java.util.Map)>
2: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void includeJar(java.io.File,java.util.Map)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>
3: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.Map getClasspathLocations(java.util.List)>
4: <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.Map getClasspathLocations(java.util.List)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: boolean acceptClassPathEntry(java.lang.String)>
5: <com.vaadin.server.widgetsetutils.ClassPathExplorer: boolean acceptClassPathEntry(java.lang.String)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.List getRawClasspathEntries()>
Flows from source is finished.


strict digraph G {
  1 [ label="<java.io.File: java.lang.String getCanonicalPath()>" ];
  2 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: void includeJar(java.io.File,java.util.Map)>" ];
  3 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: void include(java.lang.String,java.io.File,java.util.Map)>" ];
  4 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.Map getClasspathLocations(java.util.List)>" ];
  5 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: boolean acceptClassPathEntry(java.lang.String)>" ];
  6 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: java.util.List getRawClasspathEntries()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
}

Start traversal for source: <java.io.File: java.lang.String[] list()>...
Starting from source: <java.io.File: java.lang.String[] list()>
1: <java.io.File: java.lang.String[] list()> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>
Global flow detected: <java.io.File: java.lang.String[] list()> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>
2: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)> -> <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()>
3: <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
Global flow detected: <com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
Flows from source is finished.


strict digraph G {
  1 [ label="<java.io.File: java.lang.String[] list()>" ];
  2 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>" ];
  3 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()>" ];
  4 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}



***************************
Now we build call graphs for class: com.google.gwt.user.server.rpc.impl.ServerSerializationStreamReader


Source here: <com.google.gwt.user.server.rpc.impl.ServerSerializationStreamReader: void deserializeClass(java.lang.Class,java.lang.Object,java.lang.reflect.Type,java.lang.reflect.Type[],com.google.gwt.user.server.rpc.impl.DequeMap)>


***************************
Now we build call graphs for class: com.vaadin.server.VaadinServlet


Source here: <com.vaadin.server.VaadinServlet: java.lang.String getResourcePath(javax.servlet.ServletContext,java.lang.String)>


Source here: <com.vaadin.server.VaadinServlet: void serveStaticResourcesInVAADIN(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>


Source here: <com.vaadin.server.VaadinServlet: void writeStaticResourceResponse(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.net.URL)>


Source here: <com.vaadin.server.VaadinServlet: boolean isAllowedVAADINResourceUrl(javax.servlet.http.HttpServletRequest,java.net.URL)>


***************************
Now we build call graphs for class: com.google.gwt.user.server.rpc.RemoteServiceServlet


Source here: <com.google.gwt.user.server.rpc.RemoteServiceServlet: com.google.gwt.user.server.rpc.SerializationPolicy loadSerializationPolicy(javax.servlet.http.HttpServlet,javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)>


Source here: <com.google.gwt.user.server.rpc.RemoteServiceServlet: int getCodeServerPort()>


***************************
Now we build call graphs for class: com.google.gwt.user.server.rpc.SerializationPolicyLoader


Source here: <com.google.gwt.user.server.rpc.SerializationPolicyLoader: com.google.gwt.user.server.rpc.SerializationPolicy loadFromStream(java.io.InputStream,java.util.List)>


***************************
Now we build call graphs for class: com.google.gwt.user.server.rpc.RPCServletUtils


Source here: <com.google.gwt.user.server.rpc.RPCServletUtils: java.lang.String readContent(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)>


***************************
Now we build call graphs for class: com.vaadin.data.util.sqlcontainer.query.FreeformQuery


Source here: <com.vaadin.data.util.sqlcontainer.query.FreeformQuery: int getCount()>


Source here: <com.vaadin.data.util.sqlcontainer.query.FreeformQuery: int countByDelegate()>


Source here: <com.vaadin.data.util.sqlcontainer.query.FreeformQuery: java.sql.ResultSet getResults(int,int)>


Source here: <com.vaadin.data.util.sqlcontainer.query.FreeformQuery: boolean containsRowWithKey(java.lang.Object[])>


***************************
Now we build call graphs for class: com.vaadin.server.communication.AtmospherePushConnection$FragmentedMessage


Source here: <com.vaadin.server.communication.AtmospherePushConnection$FragmentedMessage: boolean append(java.io.Reader)>


***************************
Now we build call graphs for class: com.vaadin.server.communication.FileUploadHandler


Source here: <com.vaadin.server.communication.FileUploadHandler: boolean streamToReceiver(com.vaadin.server.VaadinSession,java.io.InputStream,com.vaadin.server.StreamVariable,java.lang.String,java.lang.String,long)>


***************************
Now we build call graphs for class: com.vaadin.server.DefaultDeploymentConfiguration


Source here: <com.vaadin.server.DefaultDeploymentConfiguration: java.lang.String getSystemProperty(java.lang.String)>


***************************
Now we build call graphs for class: com.google.gwt.core.server.StackTraceDeobfuscator$3


Source here: <com.google.gwt.core.server.StackTraceDeobfuscator$3: java.io.InputStream openInputStream(java.lang.String)>


***************************
Now we build call graphs for class: com.google.gwt.rpc.server.RpcServlet


Source here: <com.google.gwt.rpc.server.RpcServlet: java.lang.String getRequestModuleBasePath()>


***************************
Now we build call graphs for class: com.google.gwt.junit.server.JUnitHostImpl


Source here: <com.google.gwt.junit.server.JUnitHostImpl: java.lang.String getRequestModuleBasePath()>


***************************
Now we build call graphs for class: com.vaadin.server.communication.PublishedFileHandler


Source here: <com.vaadin.server.communication.PublishedFileHandler: boolean handleRequest(com.vaadin.server.VaadinSession,com.vaadin.server.VaadinRequest,com.vaadin.server.VaadinResponse)>


***************************
Now we build call graphs for class: com.google.gwt.user.server.rpc.SerializationPolicyClient


Source here: <com.google.gwt.user.server.rpc.SerializationPolicyClient: com.google.gwt.user.server.rpc.SerializationPolicy loadPolicy(java.lang.String,com.google.gwt.user.server.rpc.SerializationPolicyClient$Logger)>


***************************
Now we build call graphs for class: com.vaadin.server.themeutils.SASSAddonImportFileCreator


Source here: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
Edges to Source: STATIC edge: staticinvoke <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>(r1) in <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void main(java.lang.String[])> ==> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>


Source here: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void printImportComment(java.io.PrintStream,java.net.URL)>
Edges to Source: STATIC edge: staticinvoke <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void printImportComment(java.io.PrintStream,java.net.URL)>(r0, r1) in <com.vaadin.server.themeutils.SASSAddonImportFileCreator: java.util.List addImport(java.io.PrintStream,java.lang.String,java.net.URL)> ==> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void printImportComment(java.io.PrintStream,java.net.URL)>
Start traversal for source: <java.net.URL: java.lang.String getPath()>...
Starting from source: <java.net.URL: java.lang.String getPath()>
1: <java.net.URL: java.lang.String getPath()> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void printImportComment(java.io.PrintStream,java.net.URL)>
Global flow detected: <java.net.URL: java.lang.String getPath()> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void printImportComment(java.io.PrintStream,java.net.URL)>
2: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void printImportComment(java.io.PrintStream,java.net.URL)> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: java.util.List addImport(java.io.PrintStream,java.lang.String,java.net.URL)>
3: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: java.util.List addImport(java.io.PrintStream,java.lang.String,java.net.URL)> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
4: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void main(java.lang.String[])>
Flows from source is finished.


strict digraph G {
  1 [ label="<java.net.URL: java.lang.String getPath()>" ];
  2 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: void printImportComment(java.io.PrintStream,java.net.URL)>" ];
  3 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: java.util.List addImport(java.io.PrintStream,java.lang.String,java.net.URL)>" ];
  4 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>" ];
  5 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: void main(java.lang.String[])>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
}

Start traversal for source: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>...
Starting from source: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
1: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void main(java.lang.String[])>
Flows from source is finished.


strict digraph G {
  1 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>" ];
  2 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: void main(java.lang.String[])>" ];
  1 -> 2;
}

Start traversal for source: <java.io.File: java.io.File getParentFile()>...
Starting from source: <java.io.File: java.io.File getParentFile()>
1: <java.io.File: java.io.File getParentFile()> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
Global flow detected: <java.io.File: java.io.File getParentFile()> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
2: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void main(java.lang.String[])>
Flows from source is finished.


strict digraph G {
  1 [ label="<java.io.File: java.io.File getParentFile()>" ];
  2 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>" ];
  3 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: void main(java.lang.String[])>" ];
  1 -> 2;
  2 -> 3;
}

Start traversal for source: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void printImportComment(java.io.PrintStream,java.net.URL)>...
Starting from source: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void printImportComment(java.io.PrintStream,java.net.URL)>
1: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void printImportComment(java.io.PrintStream,java.net.URL)> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: java.util.List addImport(java.io.PrintStream,java.lang.String,java.net.URL)>
2: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: java.util.List addImport(java.io.PrintStream,java.lang.String,java.net.URL)> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>
3: <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)> -> <com.vaadin.server.themeutils.SASSAddonImportFileCreator: void main(java.lang.String[])>
Flows from source is finished.


strict digraph G {
  1 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: void printImportComment(java.io.PrintStream,java.net.URL)>" ];
  2 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: java.util.List addImport(java.io.PrintStream,java.lang.String,java.net.URL)>" ];
  3 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>" ];
  4 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: void main(java.lang.String[])>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
}



***************************
Now we build call graphs for class: com.vaadin.server.DownloadStream


Source here: <com.vaadin.server.DownloadStream: void writeResponse(com.vaadin.server.VaadinRequest,com.vaadin.server.VaadinResponse)>


***************************
Now we build call graphs for class: com.vaadin.server.communication.ServerRpcHandler


Source here: <com.vaadin.server.communication.ServerRpcHandler: java.lang.String getMessage(java.io.Reader)>


***************************
Now we build call graphs for class: com.vaadin.server.widgetsetutils.WidgetSetBuilder


Source here: <com.vaadin.server.widgetsetutils.WidgetSetBuilder: void updateWidgetSet(java.lang.String)>


Source here: <com.vaadin.server.widgetsetutils.WidgetSetBuilder: java.lang.String readFile(java.io.File)>
Start traversal for source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>...
Starting from source: <com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>
Flows from source is finished.


strict digraph G {
}

Loaded 8123 methods from JAR files. 

Found 81 Source Methods.
Found 87 Sink Methods.
Sources and Sinks collected. 

Methods extraction finished.
All finished.
