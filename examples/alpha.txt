***** Loading java classes ***** 

Start reading BOM and BIM...
BOM is loaded with 169 methods.
BIM is loaded with 352 methods.
EOM is loaded with 286 methods.
EIM is loaded with 365 methods.
Start looking for sources and sinks: 
[spark] Starting analysis ...
[main] ERROR soot.jimple.toolkits.typing.fast.TypePromotionUseVisitor - Failed Typing in <java.awt.image.ComponentColorModel: int getRGBComponent(int,int)> at statement opixel#1 = $r0: Is not cast compatible: null_type <-- java.lang.Object
[main] ERROR soot.jimple.toolkits.typing.fast.TypePromotionUseVisitor - Failed Typing in <com.sun.imageio.plugins.tiff.TIFFIFD: int readFieldValue(javax.imageio.stream.ImageInputStream,int,int,java.lang.Object[])> at statement obj#10 = $r0: Is not cast compatible: null_type <-- java.lang.Object
[spark] Done!
Now we build call graphs for class: org.jsoup.helper.DataUtil
Source here: <org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream,int)>
Now we build call graphs for class: com.zack6849.alphabot.Commands
Source here: <com.zack6849.alphabot.Commands: void listFiles(org.pircbotx.hooks.events.MessageEvent)>
Source here: <com.zack6849.alphabot.Commands: void checkMojangServers(org.pircbotx.hooks.events.MessageEvent)>
Now we build call graphs for class: org.jsoup.Jsoup
Source here: <org.jsoup.Jsoup: org.jsoup.nodes.Document parse(java.io.File,java.lang.String)>
Now we build call graphs for class: com.google.gson.SimpleCharStream
Source here: <com.google.gson.SimpleCharStream: void FillBuff()>
Now we build call graphs for class: com.zack6849.alphabot.Bot$1
Source here: <com.zack6849.alphabot.Bot$1: void run()>
Global flow here: <com.zack6849.alphabot.Bot$1: void run()> calls: <org.pircbotx.PircBotX: void sendRawLineNow(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r4.<org.pircbotx.PircBotX: void sendRawLineNow(java.lang.String)>($r7) in <com.zack6849.alphabot.Bot$1: void run()> ==> <org.pircbotx.PircBotX: void sendRawLineNow(java.lang.String)>
Start traversal for source: <java.util.Scanner: java.lang.String nextLine()>...
Starting from source: 
0: nextLine
1: run
Flows from source is finished.
Start traversal for source: <com.zack6849.alphabot.Bot$1: void run()>...
Starting from source: 
0: run
Flows from source is finished.
Now we build call graphs for class: org.apache.commons.configuration.DefaultFileSystem
Source here: <org.apache.commons.configuration.DefaultFileSystem: java.io.InputStream getInputStream(java.net.URL)>
Global flow here: <org.apache.commons.configuration.DefaultFileSystem: java.io.InputStream getInputStream(java.net.URL)> calls: <org.apache.commons.configuration.ConfigurationUtils: java.io.File fileFromURL(java.net.URL)> via: STATIC edge: $r1 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.io.File fileFromURL(java.net.URL)>(r0) in <org.apache.commons.configuration.DefaultFileSystem: java.io.InputStream getInputStream(java.net.URL)> ==> <org.apache.commons.configuration.ConfigurationUtils: java.io.File fileFromURL(java.net.URL)>
Source here: <org.apache.commons.configuration.DefaultFileSystem: java.io.OutputStream getOutputStream(java.net.URL)>
Global flow here: <org.apache.commons.configuration.DefaultFileSystem: java.io.OutputStream getOutputStream(java.net.URL)> calls: <org.apache.commons.configuration.ConfigurationUtils: java.io.File fileFromURL(java.net.URL)> via: STATIC edge: $r1 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.io.File fileFromURL(java.net.URL)>(r0) in <org.apache.commons.configuration.DefaultFileSystem: java.io.OutputStream getOutputStream(java.net.URL)> ==> <org.apache.commons.configuration.ConfigurationUtils: java.io.File fileFromURL(java.net.URL)>
Source here: <org.apache.commons.configuration.DefaultFileSystem: java.lang.String getPath(java.io.File,java.net.URL,java.lang.String,java.lang.String)>
Global flow here: <org.apache.commons.configuration.DefaultFileSystem: java.net.URL getURL(java.lang.String,java.lang.String)> calls: <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)> via: STATIC edge: $r6 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)>($r0) in <org.apache.commons.configuration.DefaultFileSystem: java.net.URL getURL(java.lang.String,java.lang.String)> ==> <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)>
Global flow here: <org.apache.commons.configuration.DefaultFileSystem: java.net.URL getURL(java.lang.String,java.lang.String)> calls: <org.apache.commons.configuration.ConfigurationUtils: java.io.File constructFile(java.lang.String,java.lang.String)> via: STATIC edge: $r8 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.io.File constructFile(java.lang.String,java.lang.String)>(r2, r1) in <org.apache.commons.configuration.DefaultFileSystem: java.net.URL getURL(java.lang.String,java.lang.String)> ==> <org.apache.commons.configuration.ConfigurationUtils: java.io.File constructFile(java.lang.String,java.lang.String)>
Global flow here: <org.apache.commons.configuration.DefaultFileSystem: java.net.URL getURL(java.lang.String,java.lang.String)> calls: <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)> via: STATIC edge: $r9 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)>($r8) in <org.apache.commons.configuration.DefaultFileSystem: java.net.URL getURL(java.lang.String,java.lang.String)> ==> <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)>
Source here: <org.apache.commons.configuration.DefaultFileSystem: java.net.URL locateFromURL(java.lang.String,java.lang.String)>
Global flow here: <org.apache.commons.configuration.DefaultFileSystem: java.net.URL locateFromURL(java.lang.String,java.lang.String)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <org.apache.commons.configuration.DefaultFileSystem: java.net.URL locateFromURL(java.lang.String,java.lang.String)> ==> <sun.net.www.MeteredStream: void close()>
Source here: <org.apache.commons.configuration.DefaultFileSystem: void createPath(java.io.File)>
Start traversal for source: <java.net.URLConnection: java.io.OutputStream getOutputStream()>...
Starting from source: 
0: getOutputStream
1: save
Flows from source is finished.
Start traversal for source: <org.apache.commons.configuration.DefaultFileSystem: java.io.OutputStream getOutputStream(java.net.URL)>...
Starting from source: 
0: getOutputStream
1: save
Flows from source is finished.
Start traversal for source: <java.io.File: java.io.File getParentFile()>...
Starting from source: 
0: getParentFile
1: createPath
2: getOutputStream
3: save
Flows from source is finished.
Start traversal for source: <java.net.URL: java.io.InputStream openStream()>...
Starting from source: 
0: openStream
1: locateFromURL
2: locate
3: getInputStream
4: load
Flows from source is finished.
Start traversal for source: <org.apache.commons.configuration.DefaultFileSystem: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: load
Flows from source is finished.
Start traversal for source: <org.apache.commons.configuration.DefaultFileSystem: void createPath(java.io.File)>...
Starting from source: 
0: createPath
1: getOutputStream
2: save
Flows from source is finished.
Start traversal for source: <org.apache.commons.configuration.DefaultFileSystem: java.net.URL locateFromURL(java.lang.String,java.lang.String)>...
Starting from source: 
0: locateFromURL
1: locate
Flows from source is finished.
Now we build call graphs for class: org.pircbotx.IdentServer
Source here: <org.pircbotx.IdentServer: void run()>
Now we build call graphs for class: org.pircbotx.DccFileTransfer
Source here: <org.pircbotx.DccFileTransfer: void doReceive(boolean)>
Global flow here: <org.pircbotx.DccFileTransfer: void doReceive(boolean)> calls: <org.pircbotx.DccManager: boolean removeAwaitingResume(org.pircbotx.DccFileTransfer)> via: VIRTUAL edge: virtualinvoke $r5.<org.pircbotx.DccManager: boolean removeAwaitingResume(org.pircbotx.DccFileTransfer)>(r0) in <org.pircbotx.DccFileTransfer: void doReceive(boolean)> ==> <org.pircbotx.DccManager: boolean removeAwaitingResume(org.pircbotx.DccFileTransfer)>
Global flow here: <org.pircbotx.DccFileTransfer: void doReceive(boolean)> calls: <org.pircbotx.PircBotX: org.pircbotx.DccManager getDccManager()> via: VIRTUAL edge: $r5 = virtualinvoke $r4.<org.pircbotx.PircBotX: org.pircbotx.DccManager getDccManager()>() in <org.pircbotx.DccFileTransfer: void doReceive(boolean)> ==> <org.pircbotx.PircBotX: org.pircbotx.DccManager getDccManager()>
Global flow here: <org.pircbotx.DccFileTransfer: void doReceive(boolean)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r25.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r33) in <org.pircbotx.DccFileTransfer: void doReceive(boolean)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.DccFileTransfer: void doReceive(boolean)> calls: <org.pircbotx.PircBotX: org.pircbotx.hooks.managers.ListenerManager getListenerManager()> via: VIRTUAL edge: $r25 = virtualinvoke $r24.<org.pircbotx.PircBotX: org.pircbotx.hooks.managers.ListenerManager getListenerManager()>() in <org.pircbotx.DccFileTransfer: void doReceive(boolean)> ==> <org.pircbotx.PircBotX: org.pircbotx.hooks.managers.ListenerManager getListenerManager()>
Source here: <org.pircbotx.DccFileTransfer: void doSend(boolean)>
Global flow here: <org.pircbotx.DccFileTransfer: void close()> calls: <org.pircbotx.PircBotX: org.pircbotx.DccManager getDccManager()> via: VIRTUAL edge: $r4 = virtualinvoke $r3.<org.pircbotx.PircBotX: org.pircbotx.DccManager getDccManager()>() in <org.pircbotx.DccFileTransfer: void close()> ==> <org.pircbotx.PircBotX: org.pircbotx.DccManager getDccManager()>
Global flow here: <org.pircbotx.DccFileTransfer: void close()> calls: <org.pircbotx.DccManager: org.pircbotx.DccFileTransfer removeDccFileTransfer(org.pircbotx.DccFileTransfer)> via: VIRTUAL edge: virtualinvoke $r4.<org.pircbotx.DccManager: org.pircbotx.DccFileTransfer removeDccFileTransfer(org.pircbotx.DccFileTransfer)>(r0) in <org.pircbotx.DccFileTransfer: void close()> ==> <org.pircbotx.DccManager: org.pircbotx.DccFileTransfer removeDccFileTransfer(org.pircbotx.DccFileTransfer)>
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: doReceive
2: processRequest
Flows from source is finished.
Start traversal for source: <org.apache.commons.configuration.DefaultFileSystem: java.io.OutputStream getOutputStream(java.net.URL)>...
Starting from source: 
0: getOutputStream
1: doReceive
2: processRequest
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[],int,int)>...
Starting from source: 
0: read
1: doReceive
2: processRequest
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getCanonicalPath()>...
Starting from source: 
0: getCanonicalPath
1: doReceive
2: processRequest
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.OutputStream getOutputStream()>...
Starting from source: 
0: getOutputStream
1: doReceive
2: processRequest
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: doReceive
2: processRequest
Flows from source is finished.
Start traversal for source: <org.pircbotx.DccFileTransfer: void doReceive(boolean)>...
Starting from source: 
0: doReceive
1: processRequest
Flows from source is finished.
Start traversal for source: <org.apache.commons.configuration.DefaultFileSystem: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: doReceive
2: processRequest
Flows from source is finished.
Now we build call graphs for class: org.pircbotx.PircBotX
Source here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.cap.EnableCapHandler: void handleLS(org.pircbotx.PircBotX,java.util.List)> via: INTERFACE edge: interfaceinvoke r164.<org.pircbotx.cap.CapHandler: void handleLS(org.pircbotx.PircBotX,java.util.List)>(r0, $r65) in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.cap.EnableCapHandler: void handleLS(org.pircbotx.PircBotX,java.util.List)>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.cap.EnableCapHandler: void handleACK(org.pircbotx.PircBotX,java.util.List)> via: INTERFACE edge: interfaceinvoke r165.<org.pircbotx.cap.CapHandler: void handleACK(org.pircbotx.PircBotX,java.util.List)>(r0, $r65) in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.cap.EnableCapHandler: void handleACK(org.pircbotx.PircBotX,java.util.List)>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.cap.EnableCapHandler: void handleNAK(org.pircbotx.PircBotX,java.util.List)> via: INTERFACE edge: interfaceinvoke r166.<org.pircbotx.cap.CapHandler: void handleNAK(org.pircbotx.PircBotX,java.util.List)>(r0, $r65) in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.cap.EnableCapHandler: void handleNAK(org.pircbotx.PircBotX,java.util.List)>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.cap.EnableCapHandler: void handleUnknown(org.pircbotx.PircBotX,java.lang.String)> via: INTERFACE edge: interfaceinvoke r167.<org.pircbotx.cap.CapHandler: void handleUnknown(org.pircbotx.PircBotX,java.lang.String)>(r0, $r162) in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.cap.EnableCapHandler: void handleUnknown(org.pircbotx.PircBotX,java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.cap.EnableCapHandler: void handleUnknown(org.pircbotx.PircBotX,java.lang.String)> via: INTERFACE edge: interfaceinvoke r168.<org.pircbotx.cap.CapHandler: void handleUnknown(org.pircbotx.PircBotX,java.lang.String)>(r0, $r162) in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.cap.EnableCapHandler: void handleUnknown(org.pircbotx.PircBotX,java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.cap.EnableCapHandler: boolean isDone()> via: INTERFACE edge: $z3 = interfaceinvoke r169.<org.pircbotx.cap.CapHandler: boolean isDone()>() in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.cap.EnableCapHandler: boolean isDone()>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.InputThread: void run()> via: THREAD edge: virtualinvoke $r39.<org.pircbotx.InputThread: void start()>() in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.InputThread: void run()>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.OutputThread: void run()> via: THREAD edge: virtualinvoke $r34.<org.pircbotx.OutputThread: void start()>() in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.OutputThread: void run()>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r123.<org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)>("CAP LS") in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r108.<org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)>($r122) in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r103.<org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)>($r106) in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r148.<org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)>($r152) in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r153.<org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)>($r161) in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r95.<org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)>($r98) in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r45.<org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)>("CAP END") in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r35.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r36) in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r40.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r41) in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.ManyToManyMap: void clear()> via: VIRTUAL edge: virtualinvoke $r4.<org.pircbotx.ManyToManyMap: void clear()>() in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.ManyToManyMap: void clear()>
Global flow here: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> calls: <org.pircbotx.Utils: java.util.List tokenizeLine(java.lang.String)> via: STATIC edge: $r42 = staticinvoke <org.pircbotx.Utils: java.util.List tokenizeLine(java.lang.String)>($r162) in <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)> ==> <org.pircbotx.Utils: java.util.List tokenizeLine(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void reconnect()> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r15.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r16) in <org.pircbotx.PircBotX: void reconnect()> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void reconnect()> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r12.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r13) in <org.pircbotx.PircBotX: void reconnect()> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void reconnect()> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r9.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r10) in <org.pircbotx.PircBotX: void reconnect()> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void reconnect()> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r5.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r6) in <org.pircbotx.PircBotX: void reconnect()> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void sendRawLine(java.lang.String)> calls: <org.pircbotx.OutputThread: void send(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r2.<org.pircbotx.OutputThread: void send(java.lang.String)>(r0) in <org.pircbotx.PircBotX: void sendRawLine(java.lang.String)> ==> <org.pircbotx.OutputThread: void send(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void sendRawLineNow(java.lang.String)> calls: <org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r2.<org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)>(r0) in <org.pircbotx.PircBotX: void sendRawLineNow(java.lang.String)> ==> <org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void sendCTCPCommand(org.pircbotx.User,java.lang.String)> calls: <org.pircbotx.User: java.lang.String getNick()> via: VIRTUAL edge: $r2 = virtualinvoke r0.<org.pircbotx.User: java.lang.String getNick()>() in <org.pircbotx.PircBotX: void sendCTCPCommand(org.pircbotx.User,java.lang.String)> ==> <org.pircbotx.User: java.lang.String getNick()>
Global flow here: <org.pircbotx.PircBotX: void sendCTCPResponse(org.pircbotx.User,java.lang.String)> calls: <org.pircbotx.User: java.lang.String getNick()> via: VIRTUAL edge: $r2 = virtualinvoke r0.<org.pircbotx.User: java.lang.String getNick()>() in <org.pircbotx.PircBotX: void sendCTCPResponse(org.pircbotx.User,java.lang.String)> ==> <org.pircbotx.User: java.lang.String getNick()>
Global flow here: <org.pircbotx.PircBotX: void sendCAPREQ(java.lang.String[])> calls: <org.pircbotx.Utils: java.lang.String join(java.util.Collection,java.lang.String)> via: STATIC edge: $r5 = staticinvoke <org.pircbotx.Utils: java.lang.String join(java.util.Collection,java.lang.String)>($r4, " ") in <org.pircbotx.PircBotX: void sendCAPREQ(java.lang.String[])> ==> <org.pircbotx.Utils: java.lang.String join(java.util.Collection,java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void identify(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: boolean addListener(org.pircbotx.hooks.Listener)> via: INTERFACE edge: interfaceinvoke $r2.<org.pircbotx.hooks.managers.ListenerManager: boolean addListener(org.pircbotx.hooks.Listener)>($r3) in <org.pircbotx.PircBotX: void identify(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: boolean addListener(org.pircbotx.hooks.Listener)>
Global flow here: <org.pircbotx.PircBotX: void logException(java.lang.Throwable)> calls: <org.apache.commons.lang.exception.NestableRuntimeException: void printStackTrace(java.io.PrintWriter)> via: VIRTUAL edge: virtualinvoke r4.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r3) in <org.pircbotx.PircBotX: void logException(java.lang.Throwable)> ==> <org.apache.commons.lang.exception.NestableRuntimeException: void printStackTrace(java.io.PrintWriter)>
Global flow here: <org.pircbotx.PircBotX: void logException(java.lang.Throwable)> calls: <org.apache.commons.lang.exception.NestableException: void printStackTrace(java.io.PrintWriter)> via: VIRTUAL edge: virtualinvoke r4.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r3) in <org.pircbotx.PircBotX: void logException(java.lang.Throwable)> ==> <org.apache.commons.lang.exception.NestableException: void printStackTrace(java.io.PrintWriter)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.Channel: void setTopicTimestamp(long)> via: VIRTUAL edge: virtualinvoke r104.<org.pircbotx.Channel: void setTopicTimestamp(long)>($l5) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.Channel: void setTopicTimestamp(long)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.Channel: void setTopicSetter(java.lang.String)> via: VIRTUAL edge: virtualinvoke r104.<org.pircbotx.Channel: void setTopicSetter(java.lang.String)>(r101) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.Channel: void setTopicSetter(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.Channel: void setTopic(java.lang.String)> via: VIRTUAL edge: virtualinvoke r104.<org.pircbotx.Channel: void setTopic(java.lang.String)>($r21) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.Channel: void setTopic(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.User: java.util.Set getChannels()> via: VIRTUAL edge: $r19 = virtualinvoke $r14.<org.pircbotx.User: java.util.Set getChannels()>() in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.User: java.util.Set getChannels()>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.User: org.pircbotx.UserSnapshot generateSnapshot()> via: VIRTUAL edge: $r34 = virtualinvoke $r14.<org.pircbotx.User: org.pircbotx.UserSnapshot generateSnapshot()>() in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.User: org.pircbotx.UserSnapshot generateSnapshot()>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.User: void setHostmask(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r14.<org.pircbotx.User: void setHostmask(java.lang.String)>(r99) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.User: void setHostmask(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.User: void setLogin(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r14.<org.pircbotx.User: void setLogin(java.lang.String)>(r98) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.User: void setLogin(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.User: java.lang.String getNick()> via: VIRTUAL edge: $r28 = virtualinvoke $r27.<org.pircbotx.User: java.lang.String getNick()>() in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.User: java.lang.String getNick()>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r91.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r111) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r12.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r112) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r86.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r114) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r83.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r115) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r80.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r116) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r78.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r117) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r76.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r118) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r74.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r119) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r70.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r120) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r66.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r121) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r63.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r122) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r53.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r125) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r48.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r126) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.User: void setNick(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r41.<org.pircbotx.User: void setNick(java.lang.String)>(r100) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.User: void setNick(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r43.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r127) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r39.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r128) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r36.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r129) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r31.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r130) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r22.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r131) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r17.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r132) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r15.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r133) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.DccManager: boolean processRequest(org.pircbotx.User,java.lang.String)> via: VIRTUAL edge: $z30 = virtualinvoke $r73.<org.pircbotx.DccManager: boolean processRequest(org.pircbotx.User,java.lang.String)>($r14, $r68) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.DccManager: boolean processRequest(org.pircbotx.User,java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.PircBotX$UserChannelMap: boolean put(java.lang.Object,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r52.<org.pircbotx.ManyToManyMap: boolean put(java.lang.Object,java.lang.Object)>(r104, $r14) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.PircBotX$UserChannelMap: boolean put(java.lang.Object,java.lang.Object)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.ManyToManyMap: java.util.Set deleteA(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r50.<org.pircbotx.ManyToManyMap: java.util.Set deleteA(java.lang.Object)>(r104) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.ManyToManyMap: java.util.Set deleteA(java.lang.Object)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.ManyToManyMap: boolean dissociate(java.lang.Object,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r46.<org.pircbotx.ManyToManyMap: boolean dissociate(java.lang.Object,java.lang.Object)>(r104, $r47) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.ManyToManyMap: boolean dissociate(java.lang.Object,java.lang.Object)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.PircBotX$UserChannelMap: java.util.Set deleteB(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r38.<org.pircbotx.ManyToManyMap: java.util.Set deleteB(java.lang.Object)>($r14) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.PircBotX$UserChannelMap: java.util.Set deleteB(java.lang.Object)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.ManyToManyMap: java.util.Set deleteA(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r33.<org.pircbotx.ManyToManyMap: java.util.Set deleteA(java.lang.Object)>(r104) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.ManyToManyMap: java.util.Set deleteA(java.lang.Object)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.PircBotX$UserChannelMap: boolean dissociate(java.lang.Object,java.lang.Object,boolean)> via: VIRTUAL edge: virtualinvoke $r30.<org.pircbotx.ManyToManyMap: boolean dissociate(java.lang.Object,java.lang.Object,boolean)>(r104, $r27, 1) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.PircBotX$UserChannelMap: boolean dissociate(java.lang.Object,java.lang.Object,boolean)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.PircBotX$UserChannelMap: java.util.Set deleteB(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r20.<org.pircbotx.ManyToManyMap: java.util.Set deleteB(java.lang.Object)>($r14) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.PircBotX$UserChannelMap: java.util.Set deleteB(java.lang.Object)>
Global flow here: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> calls: <org.pircbotx.Utils: java.util.List tokenizeLine(java.lang.String)> via: STATIC edge: $r6 = staticinvoke <org.pircbotx.Utils: java.util.List tokenizeLine(java.lang.String)>(r0) in <org.pircbotx.PircBotX: void handleLine(java.lang.String)> ==> <org.pircbotx.Utils: java.util.List tokenizeLine(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setChannels(java.util.List)> via: VIRTUAL edge: virtualinvoke $r45.<org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setChannels(java.util.List)>($r47) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setChannels(java.util.List)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setServer(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r32.<org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setServer(java.lang.String)>($r31) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setServer(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setServerInfo(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r37.<org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setServerInfo(java.lang.String)>($r38) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setServerInfo(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setIdleSeconds(long)> via: VIRTUAL edge: virtualinvoke $r21.<org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setIdleSeconds(long)>($l1) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setIdleSeconds(long)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setSignOnTime(long)> via: VIRTUAL edge: virtualinvoke $r26.<org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setSignOnTime(long)>($l2) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setSignOnTime(long)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setRegisteredAs(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r16.<org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setRegisteredAs(java.lang.String)>($r15) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setRegisteredAs(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: org.pircbotx.hooks.events.WhoisEvent generateEvent(org.pircbotx.PircBotX)> via: VIRTUAL edge: $r9 = virtualinvoke $r8.<org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: org.pircbotx.hooks.events.WhoisEvent generateEvent(org.pircbotx.PircBotX)>(r2) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: org.pircbotx.hooks.events.WhoisEvent generateEvent(org.pircbotx.PircBotX)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.User: void setRealName(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r92.<org.pircbotx.User: void setRealName(java.lang.String)>($r100) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.User: void setRealName(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.User: void setHops(int)> via: VIRTUAL edge: virtualinvoke $r92.<org.pircbotx.User: void setHops(int)>($i4) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.User: void setHops(int)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.User: void parseStatus(org.pircbotx.Channel,java.lang.String)> via: VIRTUAL edge: virtualinvoke $r92.<org.pircbotx.User: void parseStatus(org.pircbotx.Channel,java.lang.String)>($r90, $r97) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.User: void parseStatus(org.pircbotx.Channel,java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.User: void setNick(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r92.<org.pircbotx.User: void setNick(java.lang.String)>($r96) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.User: void setNick(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.User: void setServer(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r92.<org.pircbotx.User: void setServer(java.lang.String)>($r95) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.User: void setServer(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.User: void setHostmask(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r92.<org.pircbotx.User: void setHostmask(java.lang.String)>($r94) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.User: void setHostmask(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.User: void setLogin(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r92.<org.pircbotx.User: void setLogin(java.lang.String)>($r93) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.User: void setLogin(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.Channel: java.lang.String getTopic()> via: VIRTUAL edge: $r109 = virtualinvoke $r105.<org.pircbotx.Channel: java.lang.String getTopic()>() in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.Channel: java.lang.String getTopic()>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.Channel: void setTopicSetter(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r105.<org.pircbotx.Channel: void setTopicSetter(java.lang.String)>($r106) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.Channel: void setTopicSetter(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.Channel: void setTopicTimestamp(long)> via: VIRTUAL edge: virtualinvoke $r105.<org.pircbotx.Channel: void setTopicTimestamp(long)>(l16) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.Channel: void setTopicTimestamp(long)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.User: java.lang.String getNick()> via: VIRTUAL edge: $r106 = virtualinvoke $r103.<org.pircbotx.User: java.lang.String getNick()>() in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.User: java.lang.String getNick()>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r114.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r115) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.Channel: void setTopic(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r113.<org.pircbotx.Channel: void setTopic(java.lang.String)>($r112) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.Channel: void setTopic(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r107.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r108) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r85.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r86) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.Channel: void setMode(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r80.<org.pircbotx.Channel: void setMode(java.lang.String)>($r81) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.Channel: void setMode(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.Channel: void setCreateTimestamp(long)> via: VIRTUAL edge: virtualinvoke $r78.<org.pircbotx.Channel: void setCreateTimestamp(long)>($l3) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.Channel: void setCreateTimestamp(long)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.ServerInfo: void setMotd(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r76.<org.pircbotx.ServerInfo: void setMotd(java.lang.String)>("") in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.ServerInfo: void setMotd(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.ServerInfo: void setMotd(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r65.<org.pircbotx.ServerInfo: void setMotd(java.lang.String)>($r75) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.ServerInfo: void setMotd(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.ServerInfo: java.lang.String getMotd()> via: VIRTUAL edge: $r68 = virtualinvoke $r67.<org.pircbotx.ServerInfo: java.lang.String getMotd()>() in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.ServerInfo: java.lang.String getMotd()>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.ServerInfo: void setMotd(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r57.<org.pircbotx.ServerInfo: void setMotd(java.lang.String)>($r60) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.ServerInfo: void setMotd(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.ServerInfo: java.lang.String getMotd()> via: VIRTUAL edge: $r59 = virtualinvoke $r58.<org.pircbotx.ServerInfo: java.lang.String getMotd()>() in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.ServerInfo: java.lang.String getMotd()>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r61.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r62) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.ServerInfo: java.lang.String getMotd()> via: VIRTUAL edge: $r64 = virtualinvoke $r63.<org.pircbotx.ServerInfo: java.lang.String getMotd()>() in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.ServerInfo: java.lang.String getMotd()>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.ServerInfo: void parse(int,java.lang.String)> via: VIRTUAL edge: virtualinvoke $r3.<org.pircbotx.ServerInfo: void parse(int,java.lang.String)>(i0, r0) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.ServerInfo: void parse(int,java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r4.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r9) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r133.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r134) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.PircBotX$ListBuilder: void setRunning(boolean)> via: VIRTUAL edge: virtualinvoke $r124.<org.pircbotx.PircBotX$ListBuilder: void setRunning(boolean)>(1) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.PircBotX$ListBuilder: void setRunning(boolean)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.PircBotX$ListBuilder: void add(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r123.<org.pircbotx.PircBotX$ListBuilder: void add(java.lang.Object)>($r122) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.PircBotX$ListBuilder: void add(java.lang.Object)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.PircBotX$ListBuilder: java.util.Set finish()> via: VIRTUAL edge: $r117 = virtualinvoke $r116.<org.pircbotx.PircBotX$ListBuilder: java.util.Set finish()>() in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.PircBotX$ListBuilder: java.util.Set finish()>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.PircBotX$ListBuilder: void setRunning(boolean)> via: VIRTUAL edge: virtualinvoke $r118.<org.pircbotx.PircBotX$ListBuilder: void setRunning(boolean)>(0) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.PircBotX$ListBuilder: void setRunning(boolean)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.PircBotX$UserChannelMap: boolean put(java.lang.Object,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r101.<org.pircbotx.ManyToManyMap: boolean put(java.lang.Object,java.lang.Object)>($r90, $r92) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.PircBotX$UserChannelMap: boolean put(java.lang.Object,java.lang.Object)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setRealname(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r49.<org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setRealname(java.lang.String)>($r54) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setRealname(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setHostname(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r49.<org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setHostname(java.lang.String)>($r52) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setHostname(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setLogin(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r49.<org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setLogin(java.lang.String)>($r51) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setLogin(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> calls: <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setNick(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r49.<org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setNick(java.lang.String)>($r50) in <org.pircbotx.PircBotX: void processServerResponse(int,java.lang.String)> ==> <org.pircbotx.hooks.events.WhoisEvent$WhoisEventBuilder: void setNick(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.Channel: void parseMode(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r9.<org.pircbotx.Channel: void parseMode(java.lang.String)>(r8) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.Channel: void parseMode(java.lang.String)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r94.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r101) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r91.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r102) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r86.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r103) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r83.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r104) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r78.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r105) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r75.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r106) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r70.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r107) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r67.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r108) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r62.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r109) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r59.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r110) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r53.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r111) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r51.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r112) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r48.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r113) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r46.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r114) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r43.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r115) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r40.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r116) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r38.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r117) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r36.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r118) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r34.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r119) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r32.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r120) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r30.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r121) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r28.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r122) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r26.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r123) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r24.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r124) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r22.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r125) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r20.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r126) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r18.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r127) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r16.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r128) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r13.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r129) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r5.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r130) in <org.pircbotx.PircBotX: void processMode(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: boolean isConnected()> calls: <org.pircbotx.InputThread: boolean isConnected()> via: VIRTUAL edge: $z0 = virtualinvoke $r2.<org.pircbotx.InputThread: boolean isConnected()>() in <org.pircbotx.PircBotX: boolean isConnected()> ==> <org.pircbotx.InputThread: boolean isConnected()>
Global flow here: <org.pircbotx.PircBotX: java.util.Set getChannels()> calls: <org.pircbotx.ManyToManyMap: java.util.Set getAValues()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.pircbotx.ManyToManyMap: java.util.Set getAValues()>() in <org.pircbotx.PircBotX: java.util.Set getChannels()> ==> <org.pircbotx.ManyToManyMap: java.util.Set getAValues()>
Global flow here: <org.pircbotx.PircBotX: java.util.Set getChannels(org.pircbotx.User)> calls: <org.pircbotx.ManyToManyMap: java.util.Set getAValues(java.lang.Object)> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.pircbotx.ManyToManyMap: java.util.Set getAValues(java.lang.Object)>(r0) in <org.pircbotx.PircBotX: java.util.Set getChannels(org.pircbotx.User)> ==> <org.pircbotx.ManyToManyMap: java.util.Set getAValues(java.lang.Object)>
Global flow here: <org.pircbotx.PircBotX: org.pircbotx.Channel getChannel(java.lang.String)> calls: <org.pircbotx.Channel: java.lang.String getName()> via: VIRTUAL edge: $r9 = virtualinvoke r8.<org.pircbotx.Channel: java.lang.String getName()>() in <org.pircbotx.PircBotX: org.pircbotx.Channel getChannel(java.lang.String)> ==> <org.pircbotx.Channel: java.lang.String getName()>
Global flow here: <org.pircbotx.PircBotX: org.pircbotx.Channel getChannel(java.lang.String)> calls: <org.pircbotx.ManyToManyMap: java.util.Set getAValues()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.pircbotx.ManyToManyMap: java.util.Set getAValues()>() in <org.pircbotx.PircBotX: org.pircbotx.Channel getChannel(java.lang.String)> ==> <org.pircbotx.ManyToManyMap: java.util.Set getAValues()>
Global flow here: <org.pircbotx.PircBotX: org.pircbotx.Channel getChannel(java.lang.String)> calls: <org.pircbotx.ManyToManyMap: boolean putB(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r6.<org.pircbotx.ManyToManyMap: boolean putB(java.lang.Object)>($r5) in <org.pircbotx.PircBotX: org.pircbotx.Channel getChannel(java.lang.String)> ==> <org.pircbotx.ManyToManyMap: boolean putB(java.lang.Object)>
Global flow here: <org.pircbotx.PircBotX: java.util.Set getUsers(org.pircbotx.Channel)> calls: <org.pircbotx.ManyToManyMap: java.util.Set getBValues(java.lang.Object)> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.pircbotx.ManyToManyMap: java.util.Set getBValues(java.lang.Object)>(r0) in <org.pircbotx.PircBotX: java.util.Set getUsers(org.pircbotx.Channel)> ==> <org.pircbotx.ManyToManyMap: java.util.Set getBValues(java.lang.Object)>
Global flow here: <org.pircbotx.PircBotX: org.pircbotx.User getUser(java.lang.String)> calls: <org.pircbotx.ManyToManyMap: boolean putA(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r4.<org.pircbotx.ManyToManyMap: boolean putA(java.lang.Object)>($r3) in <org.pircbotx.PircBotX: org.pircbotx.User getUser(java.lang.String)> ==> <org.pircbotx.ManyToManyMap: boolean putA(java.lang.Object)>
Global flow here: <org.pircbotx.PircBotX: org.pircbotx.hooks.managers.ListenerManager getListenerManager()> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: boolean addListener(org.pircbotx.hooks.Listener)> via: INTERFACE edge: interfaceinvoke $r5.<org.pircbotx.hooks.managers.ListenerManager: boolean addListener(org.pircbotx.hooks.Listener)>($r4) in <org.pircbotx.PircBotX: org.pircbotx.hooks.managers.ListenerManager getListenerManager()> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: boolean addListener(org.pircbotx.hooks.Listener)>
Global flow here: <org.pircbotx.PircBotX: void shutdown(boolean)> calls: <org.pircbotx.Channel: java.lang.String getName()> via: VIRTUAL edge: $r21 = virtualinvoke r30.<org.pircbotx.Channel: java.lang.String getName()>() in <org.pircbotx.PircBotX: void shutdown(boolean)> ==> <org.pircbotx.Channel: java.lang.String getName()>
Global flow here: <org.pircbotx.PircBotX: void shutdown(boolean)> calls: <org.pircbotx.Channel: java.lang.String getChannelKey()> via: VIRTUAL edge: $r31 = virtualinvoke r30.<org.pircbotx.Channel: java.lang.String getChannelKey()>() in <org.pircbotx.PircBotX: void shutdown(boolean)> ==> <org.pircbotx.Channel: java.lang.String getChannelKey()>
Global flow here: <org.pircbotx.PircBotX: void shutdown(boolean)> calls: <org.pircbotx.Channel: java.lang.String getChannelKey()> via: VIRTUAL edge: $r20 = virtualinvoke r30.<org.pircbotx.Channel: java.lang.String getChannelKey()>() in <org.pircbotx.PircBotX: void shutdown(boolean)> ==> <org.pircbotx.Channel: java.lang.String getChannelKey()>
Global flow here: <org.pircbotx.PircBotX: void shutdown(boolean)> calls: <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)> via: INTERFACE edge: interfaceinvoke $r10.<org.pircbotx.hooks.managers.ListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>($r11) in <org.pircbotx.PircBotX: void shutdown(boolean)> ==> <org.pircbotx.hooks.managers.ThreadedListenerManager: void dispatchEvent(org.pircbotx.hooks.Event)>
Global flow here: <org.pircbotx.PircBotX: void shutdown(boolean)> calls: <org.pircbotx.DccManager: void close()> via: VIRTUAL edge: virtualinvoke $r29.<org.pircbotx.DccManager: void close()>() in <org.pircbotx.PircBotX: void shutdown(boolean)> ==> <org.pircbotx.DccManager: void close()>
Global flow here: <org.pircbotx.PircBotX: void shutdown(boolean)> calls: <org.pircbotx.ManyToManyMap: void clear()> via: VIRTUAL edge: virtualinvoke $r7.<org.pircbotx.ManyToManyMap: void clear()>() in <org.pircbotx.PircBotX: void shutdown(boolean)> ==> <org.pircbotx.ManyToManyMap: void clear()>
Global flow here: <org.pircbotx.PircBotX: void shutdown(boolean)> calls: <org.pircbotx.PircBotX$ListBuilder: java.util.Set finish()> via: VIRTUAL edge: virtualinvoke $r9.<org.pircbotx.PircBotX$ListBuilder: java.util.Set finish()>() in <org.pircbotx.PircBotX: void shutdown(boolean)> ==> <org.pircbotx.PircBotX$ListBuilder: java.util.Set finish()>
Start traversal for source: <org.apache.commons.configuration.DefaultFileSystem: java.io.OutputStream getOutputStream(java.net.URL)>...
Starting from source: 
0: getOutputStream
1: connect
2: reconnect
3: shutdown
4: run
5: handleLine
6: start
Flows from source is finished.
Start traversal for source: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)>...
Starting from source: 
0: connect
1: reconnect
2: shutdown
3: run
4: handleLine
5: start
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: shutdown
2: run
3: connect
4: reconnect
5: start
6: handleLine
7: getChannel
8: processMode
9: processServerResponse
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.OutputStream getOutputStream()>...
Starting from source: 
0: getOutputStream
1: connect
2: reconnect
3: shutdown
4: run
5: handleLine
6: start
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: connect
2: reconnect
3: shutdown
4: run
5: handleLine
6: start
Flows from source is finished.
Start traversal for source: <org.pircbotx.IdentServer: void run()>...
Starting from source: 
0: run
1: connect
2: reconnect
3: shutdown
4: handleLine
5: start
Flows from source is finished.
Start traversal for source: <org.pircbotx.DccFileTransfer: void doReceive(boolean)>...
Starting from source: 
0: doReceive
Flows from source is finished.
Start traversal for source: <org.apache.commons.configuration.DefaultFileSystem: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: connect
2: reconnect
3: shutdown
4: run
5: handleLine
6: start
Flows from source is finished.
Start traversal for source: <org.jsoup.Jsoup: org.jsoup.nodes.Document parse(java.io.File,java.lang.String)>...
Starting from source: 
0: parse
1: processServerResponse
2: handleLine
3: run
4: connect
5: reconnect
6: shutdown
7: start
Flows from source is finished.
Start traversal for source: <com.zack6849.alphabot.Bot$1: void run()>...
Starting from source: 
0: run
1: connect
2: reconnect
3: shutdown
4: handleLine
5: start
Flows from source is finished.
Now we build call graphs for class: com.zack6849.alphabot.LoggingListener
Source here: <com.zack6849.alphabot.LoggingListener: java.io.BufferedWriter getOrCreateNewBW(java.lang.String)>
Now we build call graphs for class: org.apache.commons.configuration.AbstractFileConfiguration
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.lang.String)> calls: <org.apache.commons.configuration.ConfigurationUtils: java.net.URL locate(org.apache.commons.configuration.FileSystem,java.lang.String,java.lang.String)> via: STATIC edge: $r4 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.net.URL locate(org.apache.commons.configuration.FileSystem,java.lang.String,java.lang.String)>($r3, $r2, r1) in <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.lang.String)> ==> <org.apache.commons.configuration.ConfigurationUtils: java.net.URL locate(org.apache.commons.configuration.FileSystem,java.lang.String,java.lang.String)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.io.File)> calls: <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)> via: STATIC edge: $r2 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)>(r1) in <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.io.File)> ==> <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> calls: <org.apache.commons.logging.impl.NoOpLog: void warn(java.lang.Object,java.lang.Throwable)> via: INTERFACE edge: interfaceinvoke $r16.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Could not close input stream", $r15) in <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> ==> <org.apache.commons.logging.impl.NoOpLog: void warn(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> calls: <org.apache.commons.logging.impl.NoOpLog: void warn(java.lang.Object,java.lang.Throwable)> via: INTERFACE edge: interfaceinvoke $r6.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Could not close input stream", $r5) in <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> ==> <org.apache.commons.logging.impl.NoOpLog: void warn(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> calls: <org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.logging.Log getLogger()> via: VIRTUAL edge: $r6 = virtualinvoke r0.<org.apache.commons.configuration.AbstractFileConfiguration: org.apache.commons.logging.Log getLogger()>() in <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> ==> <org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.logging.Log getLogger()>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> calls: <org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.logging.Log getLogger()> via: VIRTUAL edge: $r16 = virtualinvoke r0.<org.apache.commons.configuration.AbstractFileConfiguration: org.apache.commons.logging.Log getLogger()>() in <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> ==> <org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.logging.Log getLogger()>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> calls: <org.apache.commons.configuration.PropertiesConfiguration: void setBasePath(java.lang.String)> via: VIRTUAL edge: virtualinvoke r0.<org.apache.commons.configuration.AbstractFileConfiguration: void setBasePath(java.lang.String)>($r4) in <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> ==> <org.apache.commons.configuration.PropertiesConfiguration: void setBasePath(java.lang.String)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke r17.<java.io.InputStream: void close()>() in <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke $r19.<java.io.InputStream: void close()>() in <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> calls: <org.apache.commons.configuration.DefaultFileSystem: java.io.InputStream getInputStream(java.net.URL)> via: VIRTUAL edge: $r19 = virtualinvoke $r18.<org.apache.commons.configuration.FileSystem: java.io.InputStream getInputStream(java.net.URL)>(r2) in <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> ==> <org.apache.commons.configuration.DefaultFileSystem: java.io.InputStream getInputStream(java.net.URL)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> calls: <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)> via: STATIC edge: $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>($r3) in <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.net.URL)> ==> <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.io.InputStream)> calls: <org.apache.commons.configuration.PropertiesConfiguration: java.lang.String getEncoding()> via: VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractFileConfiguration: java.lang.String getEncoding()>() in <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.io.InputStream)> ==> <org.apache.commons.configuration.PropertiesConfiguration: java.lang.String getEncoding()>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.io.InputStream,java.lang.String)> calls: <org.apache.commons.configuration.PropertiesConfiguration: void load(java.io.Reader)> via: VIRTUAL edge: virtualinvoke r1.<org.apache.commons.configuration.AbstractFileConfiguration: void load(java.io.Reader)>(r7) in <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.io.InputStream,java.lang.String)> ==> <org.apache.commons.configuration.PropertiesConfiguration: void load(java.io.Reader)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void save(java.lang.String)> calls: <org.apache.commons.configuration.DefaultFileSystem: java.net.URL getURL(java.lang.String,java.lang.String)> via: VIRTUAL edge: $r4 = virtualinvoke $r3.<org.apache.commons.configuration.FileSystem: java.net.URL getURL(java.lang.String,java.lang.String)>($r2, r1) in <org.apache.commons.configuration.AbstractFileConfiguration: void save(java.lang.String)> ==> <org.apache.commons.configuration.DefaultFileSystem: java.net.URL getURL(java.lang.String,java.lang.String)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void save(java.net.URL)> calls: <org.apache.commons.configuration.DefaultFileSystem$HttpOutputStream: void verify()> via: VIRTUAL edge: virtualinvoke $r4.<org.apache.commons.configuration.VerifiableOutputStream: void verify()>() in <org.apache.commons.configuration.AbstractFileConfiguration: void save(java.net.URL)> ==> <org.apache.commons.configuration.DefaultFileSystem$HttpOutputStream: void verify()>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void save(java.net.URL)> calls: <org.apache.commons.configuration.DefaultFileSystem: java.io.OutputStream getOutputStream(java.net.URL)> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.commons.configuration.FileSystem: java.io.OutputStream getOutputStream(java.net.URL)>(r1) in <org.apache.commons.configuration.AbstractFileConfiguration: void save(java.net.URL)> ==> <org.apache.commons.configuration.DefaultFileSystem: java.io.OutputStream getOutputStream(java.net.URL)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void save(java.io.OutputStream)> calls: <org.apache.commons.configuration.PropertiesConfiguration: java.lang.String getEncoding()> via: VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.commons.configuration.AbstractFileConfiguration: java.lang.String getEncoding()>() in <org.apache.commons.configuration.AbstractFileConfiguration: void save(java.io.OutputStream)> ==> <org.apache.commons.configuration.PropertiesConfiguration: java.lang.String getEncoding()>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void save(java.io.OutputStream,java.lang.String)> calls: <org.apache.commons.configuration.PropertiesConfiguration: void save(java.io.Writer)> via: VIRTUAL edge: virtualinvoke r1.<org.apache.commons.configuration.AbstractFileConfiguration: void save(java.io.Writer)>(r7) in <org.apache.commons.configuration.AbstractFileConfiguration: void save(java.io.OutputStream,java.lang.String)> ==> <org.apache.commons.configuration.PropertiesConfiguration: void save(java.io.Writer)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void setFileName(java.lang.String)> calls: <org.apache.commons.logging.impl.NoOpLog: void debug(java.lang.Object)> via: INTERFACE edge: interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r11) in <org.apache.commons.configuration.AbstractFileConfiguration: void setFileName(java.lang.String)> ==> <org.apache.commons.logging.impl.NoOpLog: void debug(java.lang.Object)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void setFileName(java.lang.String)> calls: <org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.logging.Log getLogger()> via: VIRTUAL edge: $r7 = virtualinvoke r0.<org.apache.commons.configuration.AbstractFileConfiguration: org.apache.commons.logging.Log getLogger()>() in <org.apache.commons.configuration.AbstractFileConfiguration: void setFileName(java.lang.String)> ==> <org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.logging.Log getLogger()>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void setBasePath(java.lang.String)> calls: <org.apache.commons.logging.impl.NoOpLog: void debug(java.lang.Object)> via: INTERFACE edge: interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r11) in <org.apache.commons.configuration.AbstractFileConfiguration: void setBasePath(java.lang.String)> ==> <org.apache.commons.logging.impl.NoOpLog: void debug(java.lang.Object)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void setBasePath(java.lang.String)> calls: <org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.logging.Log getLogger()> via: VIRTUAL edge: $r7 = virtualinvoke r0.<org.apache.commons.configuration.AbstractFileConfiguration: org.apache.commons.logging.Log getLogger()>() in <org.apache.commons.configuration.AbstractFileConfiguration: void setBasePath(java.lang.String)> ==> <org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.logging.Log getLogger()>
Source here: <org.apache.commons.configuration.AbstractFileConfiguration: void setFile(java.io.File)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void setFile(java.io.File)> calls: <org.apache.commons.configuration.PropertiesConfiguration: void setBasePath(java.lang.String)> via: VIRTUAL edge: virtualinvoke r0.<org.apache.commons.configuration.AbstractFileConfiguration: void setBasePath(java.lang.String)>($r5) in <org.apache.commons.configuration.AbstractFileConfiguration: void setFile(java.io.File)> ==> <org.apache.commons.configuration.PropertiesConfiguration: void setBasePath(java.lang.String)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: java.net.URL getURL()> calls: <org.apache.commons.configuration.ConfigurationUtils: java.net.URL locate(org.apache.commons.configuration.FileSystem,java.lang.String,java.lang.String)> via: STATIC edge: $r5 = staticinvoke <org.apache.commons.configuration.ConfigurationUtils: java.net.URL locate(org.apache.commons.configuration.FileSystem,java.lang.String,java.lang.String)>($r2, $r3, $r4) in <org.apache.commons.configuration.AbstractFileConfiguration: java.net.URL getURL()> ==> <org.apache.commons.configuration.ConfigurationUtils: java.net.URL locate(org.apache.commons.configuration.FileSystem,java.lang.String,java.lang.String)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void addProperty(java.lang.String,java.lang.Object)> calls: <org.apache.commons.configuration.AbstractConfiguration: void addProperty(java.lang.String,java.lang.Object)> via: SPECIAL edge: specialinvoke r0.<org.apache.commons.configuration.BaseConfiguration: void addProperty(java.lang.String,java.lang.Object)>(r2, r3) in <org.apache.commons.configuration.AbstractFileConfiguration: void addProperty(java.lang.String,java.lang.Object)> ==> <org.apache.commons.configuration.AbstractConfiguration: void addProperty(java.lang.String,java.lang.Object)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> calls: <org.apache.commons.configuration.AbstractConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: SPECIAL edge: specialinvoke r0.<org.apache.commons.configuration.BaseConfiguration: void setProperty(java.lang.String,java.lang.Object)>(r2, r3) in <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> ==> <org.apache.commons.configuration.AbstractConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void clearProperty(java.lang.String)> calls: <org.apache.commons.configuration.AbstractConfiguration: void clearProperty(java.lang.String)> via: SPECIAL edge: specialinvoke r0.<org.apache.commons.configuration.BaseConfiguration: void clearProperty(java.lang.String)>(r2) in <org.apache.commons.configuration.AbstractFileConfiguration: void clearProperty(java.lang.String)> ==> <org.apache.commons.configuration.AbstractConfiguration: void clearProperty(java.lang.String)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void setReloadingStrategy(org.apache.commons.configuration.reloading.ReloadingStrategy)> calls: <org.apache.commons.configuration.reloading.InvariantReloadingStrategy: void setConfiguration(org.apache.commons.configuration.FileConfiguration)> via: INTERFACE edge: interfaceinvoke r1.<org.apache.commons.configuration.reloading.ReloadingStrategy: void setConfiguration(org.apache.commons.configuration.FileConfiguration)>(r0) in <org.apache.commons.configuration.AbstractFileConfiguration: void setReloadingStrategy(org.apache.commons.configuration.reloading.ReloadingStrategy)> ==> <org.apache.commons.configuration.reloading.InvariantReloadingStrategy: void setConfiguration(org.apache.commons.configuration.FileConfiguration)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: boolean reload(boolean)> calls: <org.apache.commons.logging.impl.NoOpLog: boolean isInfoEnabled()> via: INTERFACE edge: $z1 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isInfoEnabled()>() in <org.apache.commons.configuration.AbstractFileConfiguration: boolean reload(boolean)> ==> <org.apache.commons.logging.impl.NoOpLog: boolean isInfoEnabled()>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: boolean reload(boolean)> calls: <org.apache.commons.logging.impl.NoOpLog: void info(java.lang.Object)> via: INTERFACE edge: interfaceinvoke $r5.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r10) in <org.apache.commons.configuration.AbstractFileConfiguration: boolean reload(boolean)> ==> <org.apache.commons.logging.impl.NoOpLog: void info(java.lang.Object)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: boolean reload(boolean)> calls: <org.apache.commons.configuration.event.EventSource: void fireError(int,java.lang.String,java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke r0.<org.apache.commons.configuration.AbstractFileConfiguration: void fireError(int,java.lang.String,java.lang.Object,java.lang.Throwable)>(20, null, null, $r13) in <org.apache.commons.configuration.AbstractFileConfiguration: boolean reload(boolean)> ==> <org.apache.commons.configuration.event.EventSource: void fireError(int,java.lang.String,java.lang.Object,java.lang.Throwable)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: boolean reload(boolean)> calls: <org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.logging.Log getLogger()> via: VIRTUAL edge: $r5 = virtualinvoke r0.<org.apache.commons.configuration.AbstractFileConfiguration: org.apache.commons.logging.Log getLogger()>() in <org.apache.commons.configuration.AbstractFileConfiguration: boolean reload(boolean)> ==> <org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.logging.Log getLogger()>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: boolean reload(boolean)> calls: <org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.logging.Log getLogger()> via: VIRTUAL edge: $r3 = virtualinvoke r0.<org.apache.commons.configuration.AbstractFileConfiguration: org.apache.commons.logging.Log getLogger()>() in <org.apache.commons.configuration.AbstractFileConfiguration: boolean reload(boolean)> ==> <org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.logging.Log getLogger()>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: boolean reload(boolean)> calls: <org.apache.commons.configuration.reloading.InvariantReloadingStrategy: boolean reloadingRequired()> via: INTERFACE edge: $z0 = interfaceinvoke $r2.<org.apache.commons.configuration.reloading.ReloadingStrategy: boolean reloadingRequired()>() in <org.apache.commons.configuration.AbstractFileConfiguration: boolean reload(boolean)> ==> <org.apache.commons.configuration.reloading.InvariantReloadingStrategy: boolean reloadingRequired()>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: boolean reload(boolean)> calls: <org.apache.commons.configuration.reloading.InvariantReloadingStrategy: void reloadingPerformed()> via: INTERFACE edge: interfaceinvoke $r4.<org.apache.commons.configuration.reloading.ReloadingStrategy: void reloadingPerformed()>() in <org.apache.commons.configuration.AbstractFileConfiguration: boolean reload(boolean)> ==> <org.apache.commons.configuration.reloading.InvariantReloadingStrategy: void reloadingPerformed()>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void refresh()> calls: <org.apache.commons.configuration.event.EventSource: void setDetailEvents(boolean)> via: VIRTUAL edge: virtualinvoke r0.<org.apache.commons.configuration.AbstractFileConfiguration: void setDetailEvents(boolean)>(1) in <org.apache.commons.configuration.AbstractFileConfiguration: void refresh()> ==> <org.apache.commons.configuration.event.EventSource: void setDetailEvents(boolean)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void refresh()> calls: <org.apache.commons.configuration.event.EventSource: void setDetailEvents(boolean)> via: VIRTUAL edge: virtualinvoke r0.<org.apache.commons.configuration.AbstractFileConfiguration: void setDetailEvents(boolean)>(1) in <org.apache.commons.configuration.AbstractFileConfiguration: void refresh()> ==> <org.apache.commons.configuration.event.EventSource: void setDetailEvents(boolean)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void refresh()> calls: <org.apache.commons.configuration.BaseConfiguration: void clear()> via: VIRTUAL edge: virtualinvoke r0.<org.apache.commons.configuration.AbstractFileConfiguration: void clear()>() in <org.apache.commons.configuration.AbstractFileConfiguration: void refresh()> ==> <org.apache.commons.configuration.BaseConfiguration: void clear()>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void refresh()> calls: <org.apache.commons.configuration.event.EventSource: void setDetailEvents(boolean)> via: VIRTUAL edge: virtualinvoke r0.<org.apache.commons.configuration.AbstractFileConfiguration: void setDetailEvents(boolean)>(0) in <org.apache.commons.configuration.AbstractFileConfiguration: void refresh()> ==> <org.apache.commons.configuration.event.EventSource: void setDetailEvents(boolean)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)> calls: <org.apache.commons.configuration.event.EventSource: void fireEvent(int,java.lang.String,java.lang.Object,boolean)> via: SPECIAL edge: specialinvoke r0.<org.apache.commons.configuration.BaseConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)>(i0, r1, r2, z0) in <org.apache.commons.configuration.AbstractFileConfiguration: void fireEvent(int,java.lang.String,java.lang.Object,boolean)> ==> <org.apache.commons.configuration.event.EventSource: void fireEvent(int,java.lang.String,java.lang.Object,boolean)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: java.lang.Object getProperty(java.lang.String)> calls: <org.apache.commons.configuration.BaseConfiguration: java.lang.Object getProperty(java.lang.String)> via: SPECIAL edge: $r3 = specialinvoke r0.<org.apache.commons.configuration.BaseConfiguration: java.lang.Object getProperty(java.lang.String)>(r2) in <org.apache.commons.configuration.AbstractFileConfiguration: java.lang.Object getProperty(java.lang.String)> ==> <org.apache.commons.configuration.BaseConfiguration: java.lang.Object getProperty(java.lang.String)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: boolean containsKey(java.lang.String)> calls: <org.apache.commons.configuration.BaseConfiguration: boolean containsKey(java.lang.String)> via: SPECIAL edge: $z0 = specialinvoke r0.<org.apache.commons.configuration.BaseConfiguration: boolean containsKey(java.lang.String)>(r2) in <org.apache.commons.configuration.AbstractFileConfiguration: boolean containsKey(java.lang.String)> ==> <org.apache.commons.configuration.BaseConfiguration: boolean containsKey(java.lang.String)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void closeSilent(java.io.OutputStream)> calls: <org.apache.commons.configuration.DefaultFileSystem$HttpOutputStream: void close()> via: VIRTUAL edge: virtualinvoke r0.<java.io.OutputStream: void close()>() in <org.apache.commons.configuration.AbstractFileConfiguration: void closeSilent(java.io.OutputStream)> ==> <org.apache.commons.configuration.DefaultFileSystem$HttpOutputStream: void close()>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void closeSilent(java.io.OutputStream)> calls: <org.apache.commons.logging.impl.NoOpLog: void warn(java.lang.Object,java.lang.Throwable)> via: INTERFACE edge: interfaceinvoke $r3.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Could not close output stream", $r1) in <org.apache.commons.configuration.AbstractFileConfiguration: void closeSilent(java.io.OutputStream)> ==> <org.apache.commons.logging.impl.NoOpLog: void warn(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.apache.commons.configuration.AbstractFileConfiguration: void closeSilent(java.io.OutputStream)> calls: <org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.logging.Log getLogger()> via: VIRTUAL edge: $r3 = virtualinvoke r2.<org.apache.commons.configuration.AbstractFileConfiguration: org.apache.commons.logging.Log getLogger()>() in <org.apache.commons.configuration.AbstractFileConfiguration: void closeSilent(java.io.OutputStream)> ==> <org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.logging.Log getLogger()>
Start traversal for source: <org.apache.commons.configuration.DefaultFileSystem: java.io.OutputStream getOutputStream(java.net.URL)>...
Starting from source: 
0: getOutputStream
1: save
2: loadConfig
3: possiblySave
4: setProperty
5: clearProperty
6: addProperty
7: propertyLoaded
Flows from source is finished.
Start traversal for source: <java.io.File: java.io.File getParentFile()>...
Starting from source: 
0: getParentFile
1: setFile
2: loadConfig
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getAbsolutePath()>...
Starting from source: 
0: getAbsolutePath
1: setFile
2: loadConfig
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: setFile
2: loadConfig
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.OutputStream getOutputStream()>...
Starting from source: 
0: getOutputStream
1: save
2: loadConfig
3: possiblySave
4: setProperty
5: clearProperty
6: addProperty
7: propertyLoaded
Flows from source is finished.
Start traversal for source: <org.apache.commons.configuration.AbstractFileConfiguration: void setFile(java.io.File)>...
Starting from source: 
0: setFile
1: loadConfig
Flows from source is finished.
Start traversal for source: <org.apache.commons.configuration.DefaultFileSystem: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: load
2: loadIncludeFile
3: loadConfig
4: refresh
5: reload
6: containsKey
7: save
8: possiblySave
9: setProperty
10: clearProperty
11: addProperty
12: propertyLoaded
13: getProperty
14: resolveContainerStore
Flows from source is finished.
Now we build call graphs for class: com.zack6849.alphabot.Utils
Source here: <com.zack6849.alphabot.Utils: java.lang.String google(java.lang.String)>
Source here: <com.zack6849.alphabot.Utils: boolean checkAccount(java.lang.String)>
Source here: <com.zack6849.alphabot.Utils: java.lang.String checkMojangServers()>
Source here: <com.zack6849.alphabot.Utils: java.lang.String shortenUrl(java.lang.String)>
Source here: <com.zack6849.alphabot.Utils: java.lang.String checkServerStatus(java.net.InetAddress,int)>
Now we build call graphs for class: org.jsoup.helper.HttpConnection$Response
Source here: <org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>
Source here: <org.jsoup.helper.HttpConnection$Response: void setupFromConnection(java.net.HttpURLConnection,org.jsoup.Connection$Response)>
Source here: <org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>
Now we build call graphs for class: bsh.JavaCharStream
Global flow here: <bsh.JavaCharStream: void ExpandBuff(boolean)> calls: <org.apache.commons.lang.exception.NestableRuntimeException: java.lang.String getMessage()> via: VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String getMessage()>() in <bsh.JavaCharStream: void ExpandBuff(boolean)> ==> <org.apache.commons.lang.exception.NestableRuntimeException: java.lang.String getMessage()>
Global flow here: <bsh.JavaCharStream: void ExpandBuff(boolean)> calls: <org.apache.commons.lang.exception.NestableException: java.lang.String getMessage()> via: VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String getMessage()>() in <bsh.JavaCharStream: void ExpandBuff(boolean)> ==> <org.apache.commons.lang.exception.NestableException: java.lang.String getMessage()>
Global flow here: <bsh.JavaCharStream: void ExpandBuff(boolean)> calls: <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()> via: VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String getMessage()>() in <bsh.JavaCharStream: void ExpandBuff(boolean)> ==> <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
Global flow here: <bsh.JavaCharStream: void ExpandBuff(boolean)> calls: <org.xml.sax.SAXException: java.lang.String getMessage()> via: VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String getMessage()>() in <bsh.JavaCharStream: void ExpandBuff(boolean)> ==> <org.xml.sax.SAXException: java.lang.String getMessage()>
Global flow here: <bsh.JavaCharStream: void ExpandBuff(boolean)> calls: <bsh.TokenMgrError: java.lang.String getMessage()> via: VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String getMessage()>() in <bsh.JavaCharStream: void ExpandBuff(boolean)> ==> <bsh.TokenMgrError: java.lang.String getMessage()>
Global flow here: <bsh.JavaCharStream: void ExpandBuff(boolean)> calls: <bsh.ParseException: java.lang.String getMessage()> via: VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String getMessage()>() in <bsh.JavaCharStream: void ExpandBuff(boolean)> ==> <bsh.ParseException: java.lang.String getMessage()>
Global flow here: <bsh.JavaCharStream: void ExpandBuff(boolean)> calls: <bsh.EvalError: java.lang.String getMessage()> via: VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String getMessage()>() in <bsh.JavaCharStream: void ExpandBuff(boolean)> ==> <bsh.EvalError: java.lang.String getMessage()>
Global flow here: <bsh.JavaCharStream: void ExpandBuff(boolean)> calls: <com.sun.org.apache.xerces.internal.impl.dv.DatatypeException: java.lang.String getMessage()> via: VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String getMessage()>() in <bsh.JavaCharStream: void ExpandBuff(boolean)> ==> <com.sun.org.apache.xerces.internal.impl.dv.DatatypeException: java.lang.String getMessage()>
Global flow here: <bsh.JavaCharStream: void ExpandBuff(boolean)> calls: <sun.nio.fs.WindowsException: java.lang.String getMessage()> via: VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String getMessage()>() in <bsh.JavaCharStream: void ExpandBuff(boolean)> ==> <sun.nio.fs.WindowsException: java.lang.String getMessage()>
Source here: <bsh.JavaCharStream: void FillBuff()>
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: FillBuff
2: ReadByte
3: readChar
4: jjMoveStringLiteralDfa26_0
5: jjMoveStringLiteralDfa25_0
6: jjMoveStringLiteralDfa24_0
7: jjMoveStringLiteralDfa23_0
8: jjMoveStringLiteralDfa22_0
9: jjMoveStringLiteralDfa21_0
10: jjMoveStringLiteralDfa20_0
11: jjMoveStringLiteralDfa19_0
12: jjMoveStringLiteralDfa18_0
13: jjMoveStringLiteralDfa17_0
14: jjMoveStringLiteralDfa16_0
15: jjMoveStringLiteralDfa15_0
16: jjMoveStringLiteralDfa14_0
17: jjMoveStringLiteralDfa13_0
18: jjMoveStringLiteralDfa12_0
19: jjMoveStringLiteralDfa11_0
20: jjMoveStringLiteralDfa10_0
21: jjMoveStringLiteralDfa9_0
22: jjMoveStringLiteralDfa8_0
23: jjMoveStringLiteralDfa7_0
24: jjMoveStringLiteralDfa6_0
25: jjMoveStringLiteralDfa5_0
26: jjMoveStringLiteralDfa4_0
27: jjMoveStringLiteralDfa3_0
28: jjMoveStringLiteralDfa2_0
29: jjMoveNfa_0
30: jjMoveStringLiteralDfa1_0
31: jjStartNfaWithStates_0
32: getNextToken
33: jjMoveStringLiteralDfa27_0
34: BeginToken
Flows from source is finished.
Start traversal for source: <com.google.gson.SimpleCharStream: void FillBuff()>...
Starting from source: 
0: FillBuff
1: ReadByte
2: readChar
3: jjMoveStringLiteralDfa26_0
4: jjMoveStringLiteralDfa25_0
5: jjMoveStringLiteralDfa24_0
6: jjMoveStringLiteralDfa23_0
7: jjMoveStringLiteralDfa22_0
8: jjMoveStringLiteralDfa21_0
9: jjMoveStringLiteralDfa20_0
10: jjMoveStringLiteralDfa19_0
11: jjMoveStringLiteralDfa18_0
12: jjMoveStringLiteralDfa17_0
13: jjMoveStringLiteralDfa16_0
14: jjMoveStringLiteralDfa15_0
15: jjMoveStringLiteralDfa14_0
16: jjMoveStringLiteralDfa13_0
17: jjMoveStringLiteralDfa12_0
18: jjMoveStringLiteralDfa11_0
19: jjMoveStringLiteralDfa10_0
20: jjMoveStringLiteralDfa9_0
21: jjMoveStringLiteralDfa8_0
22: jjMoveStringLiteralDfa7_0
23: jjMoveStringLiteralDfa6_0
24: jjMoveStringLiteralDfa5_0
25: jjMoveStringLiteralDfa4_0
26: jjMoveStringLiteralDfa3_0
27: jjMoveStringLiteralDfa2_0
28: jjMoveNfa_0
29: jjMoveStringLiteralDfa1_0
30: jjStartNfaWithStates_0
31: getNextToken
32: jjMoveStringLiteralDfa27_0
33: BeginToken
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[],int,int)>...
Starting from source: 
0: read
1: FillBuff
2: ReadByte
3: readChar
4: jjMoveStringLiteralDfa26_0
5: jjMoveStringLiteralDfa25_0
6: jjMoveStringLiteralDfa24_0
7: jjMoveStringLiteralDfa23_0
8: jjMoveStringLiteralDfa22_0
9: jjMoveStringLiteralDfa21_0
10: jjMoveStringLiteralDfa20_0
11: jjMoveStringLiteralDfa19_0
12: jjMoveStringLiteralDfa18_0
13: jjMoveStringLiteralDfa17_0
14: jjMoveStringLiteralDfa16_0
15: jjMoveStringLiteralDfa15_0
16: jjMoveStringLiteralDfa14_0
17: jjMoveStringLiteralDfa13_0
18: jjMoveStringLiteralDfa12_0
19: jjMoveStringLiteralDfa11_0
20: jjMoveStringLiteralDfa10_0
21: jjMoveStringLiteralDfa9_0
22: jjMoveStringLiteralDfa8_0
23: jjMoveStringLiteralDfa7_0
24: jjMoveStringLiteralDfa6_0
25: jjMoveStringLiteralDfa5_0
26: jjMoveStringLiteralDfa4_0
27: jjMoveStringLiteralDfa3_0
28: jjMoveStringLiteralDfa2_0
29: jjMoveNfa_0
30: jjMoveStringLiteralDfa1_0
31: jjStartNfaWithStates_0
32: getNextToken
33: jjMoveStringLiteralDfa27_0
34: BeginToken
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: FillBuff
2: ReadByte
3: readChar
4: jjMoveStringLiteralDfa26_0
5: jjMoveStringLiteralDfa25_0
6: jjMoveStringLiteralDfa24_0
7: jjMoveStringLiteralDfa23_0
8: jjMoveStringLiteralDfa22_0
9: jjMoveStringLiteralDfa21_0
10: jjMoveStringLiteralDfa20_0
11: jjMoveStringLiteralDfa19_0
12: jjMoveStringLiteralDfa18_0
13: jjMoveStringLiteralDfa17_0
14: jjMoveStringLiteralDfa16_0
15: jjMoveStringLiteralDfa15_0
16: jjMoveStringLiteralDfa14_0
17: jjMoveStringLiteralDfa13_0
18: jjMoveStringLiteralDfa12_0
19: jjMoveStringLiteralDfa11_0
20: jjMoveStringLiteralDfa10_0
21: jjMoveStringLiteralDfa9_0
22: jjMoveStringLiteralDfa8_0
23: jjMoveStringLiteralDfa7_0
24: jjMoveStringLiteralDfa6_0
25: jjMoveStringLiteralDfa5_0
26: jjMoveStringLiteralDfa4_0
27: jjMoveStringLiteralDfa3_0
28: jjMoveStringLiteralDfa2_0
29: jjMoveNfa_0
30: jjMoveStringLiteralDfa1_0
31: jjStartNfaWithStates_0
32: getNextToken
33: jjMoveStringLiteralDfa27_0
34: BeginToken
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: char readChar()>...
Starting from source: 
0: readChar
1: jjMoveStringLiteralDfa26_0
2: jjMoveStringLiteralDfa25_0
3: jjMoveStringLiteralDfa24_0
4: jjMoveStringLiteralDfa23_0
5: jjMoveStringLiteralDfa22_0
6: jjMoveStringLiteralDfa21_0
7: jjMoveStringLiteralDfa20_0
8: jjMoveStringLiteralDfa19_0
9: jjMoveStringLiteralDfa18_0
10: jjMoveStringLiteralDfa17_0
11: jjMoveStringLiteralDfa16_0
12: jjMoveStringLiteralDfa15_0
13: jjMoveStringLiteralDfa14_0
14: jjMoveStringLiteralDfa13_0
15: jjMoveStringLiteralDfa12_0
16: jjMoveStringLiteralDfa11_0
17: jjMoveStringLiteralDfa10_0
18: jjMoveStringLiteralDfa9_0
19: jjMoveStringLiteralDfa8_0
20: jjMoveStringLiteralDfa7_0
21: jjMoveStringLiteralDfa6_0
22: jjMoveStringLiteralDfa5_0
23: jjMoveStringLiteralDfa4_0
24: jjMoveStringLiteralDfa3_0
25: jjMoveStringLiteralDfa2_0
26: jjMoveNfa_0
27: jjMoveStringLiteralDfa1_0
28: jjStartNfaWithStates_0
29: getNextToken
30: jjMoveStringLiteralDfa27_0
31: BeginToken
Flows from source is finished.
Start traversal for source: <bsh.JavaCharStream: void FillBuff()>...
Starting from source: 
0: FillBuff
1: ReadByte
2: readChar
3: jjMoveStringLiteralDfa26_0
4: jjMoveStringLiteralDfa25_0
5: jjMoveStringLiteralDfa24_0
6: jjMoveStringLiteralDfa23_0
7: jjMoveStringLiteralDfa22_0
8: jjMoveStringLiteralDfa21_0
9: jjMoveStringLiteralDfa20_0
10: jjMoveStringLiteralDfa19_0
11: jjMoveStringLiteralDfa18_0
12: jjMoveStringLiteralDfa17_0
13: jjMoveStringLiteralDfa16_0
14: jjMoveStringLiteralDfa15_0
15: jjMoveStringLiteralDfa14_0
16: jjMoveStringLiteralDfa13_0
17: jjMoveStringLiteralDfa12_0
18: jjMoveStringLiteralDfa11_0
19: jjMoveStringLiteralDfa10_0
20: jjMoveStringLiteralDfa9_0
21: jjMoveStringLiteralDfa8_0
22: jjMoveStringLiteralDfa7_0
23: jjMoveStringLiteralDfa6_0
24: jjMoveStringLiteralDfa5_0
25: jjMoveStringLiteralDfa4_0
26: jjMoveStringLiteralDfa3_0
27: jjMoveStringLiteralDfa2_0
28: jjMoveNfa_0
29: jjMoveStringLiteralDfa1_0
30: jjStartNfaWithStates_0
31: getNextToken
32: jjMoveStringLiteralDfa27_0
33: BeginToken
Flows from source is finished.
Now we build call graphs for class: org.apache.commons.lang.SystemUtils
Source here: <org.apache.commons.lang.SystemUtils: java.io.File getJavaHome()>
Source here: <org.apache.commons.lang.SystemUtils: java.io.File getJavaIoTmpDir()>
Source here: <org.apache.commons.lang.SystemUtils: java.lang.String getSystemProperty(java.lang.String)>
Source here: <org.apache.commons.lang.SystemUtils: java.io.File getUserDir()>
Source here: <org.apache.commons.lang.SystemUtils: java.io.File getUserHome()>
Global flow here: <org.apache.commons.lang.SystemUtils: int[] toJavaVersionIntArray(java.lang.String,int)> calls: <org.apache.commons.lang.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)> via: STATIC edge: $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>(r0, "._- ") in <org.apache.commons.lang.SystemUtils: int[] toJavaVersionIntArray(java.lang.String,int)> ==> <org.apache.commons.lang.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>
Start traversal for source: <org.apache.commons.lang.SystemUtils: java.lang.String getSystemProperty(java.lang.String)>...
Starting from source: 
0: getSystemProperty
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getSystemProperty
Flows from source is finished.
Now we build call graphs for class: org.pircbotx.InputThread
Source here: <org.pircbotx.InputThread: void run()>
Global flow here: <org.pircbotx.InputThread: void run()> calls: <org.pircbotx.PircBotX: void sendRawLine(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r9.<org.pircbotx.PircBotX: void sendRawLine(java.lang.String)>($r12) in <org.pircbotx.InputThread: void run()> ==> <org.pircbotx.PircBotX: void sendRawLine(java.lang.String)>
Global flow here: <org.pircbotx.InputThread: void run()> calls: <org.pircbotx.PircBotX: void logException(java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r6.<org.pircbotx.PircBotX: void logException(java.lang.Throwable)>($r5) in <org.pircbotx.InputThread: void run()> ==> <org.pircbotx.PircBotX: void logException(java.lang.Throwable)>
Global flow here: <org.pircbotx.InputThread: void run()> calls: <org.pircbotx.PircBotX: void handleLine(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r1.<org.pircbotx.PircBotX: void handleLine(java.lang.String)>(r14) in <org.pircbotx.InputThread: void run()> ==> <org.pircbotx.PircBotX: void handleLine(java.lang.String)>
Global flow here: <org.pircbotx.InputThread: void run()> calls: <org.pircbotx.PircBotX: void logException(java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r4.<org.pircbotx.PircBotX: void logException(java.lang.Throwable)>($r3) in <org.pircbotx.InputThread: void run()> ==> <org.pircbotx.PircBotX: void logException(java.lang.Throwable)>
Global flow here: <org.pircbotx.InputThread: void run()> calls: <org.pircbotx.PircBotX: void shutdown()> via: VIRTUAL edge: virtualinvoke $r2.<org.pircbotx.PircBotX: void shutdown()>() in <org.pircbotx.InputThread: void run()> ==> <org.pircbotx.PircBotX: void shutdown()>
Start traversal for source: <org.pircbotx.InputThread: void run()>...
Starting from source: 
0: run
1: invokeConfigurationListeners
2: runHooks
3: prePaintDirtyRegions
4: stopEventDispatchThreads
5: startUpdateThread
6: start
7: activateBlockerThread
8: addWorker
9: connect
Flows from source is finished.
Start traversal for source: <org.pircbotx.PircBotX: void connect(java.lang.String,int,java.lang.String,javax.net.SocketFactory)>...
Starting from source: 
0: connect
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: run
2: invokeConfigurationListeners
3: runHooks
4: prePaintDirtyRegions
5: stopEventDispatchThreads
6: startUpdateThread
7: start
8: activateBlockerThread
9: addWorker
10: connect
Flows from source is finished.
Start traversal for source: <org.pircbotx.IdentServer: void run()>...
Starting from source: 
0: run
1: invokeConfigurationListeners
2: runHooks
3: prePaintDirtyRegions
4: stopEventDispatchThreads
5: startUpdateThread
6: start
7: activateBlockerThread
8: addWorker
9: connect
Flows from source is finished.
Start traversal for source: <com.zack6849.alphabot.Bot$1: void run()>...
Starting from source: 
0: run
1: invokeConfigurationListeners
2: runHooks
3: prePaintDirtyRegions
4: stopEventDispatchThreads
5: startUpdateThread
6: start
7: activateBlockerThread
8: addWorker
9: connect
Flows from source is finished.
Now we build call graphs for class: bsh.Interpreter
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHFormalParameters: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHFormalParameters: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHSwitchLabel: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHSwitchLabel: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHStatementExpressionList: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHStatementExpressionList: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHArrayInitializer: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHArrayInitializer: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHArrayDimensions: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHArrayDimensions: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHMethodInvocation: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHMethodInvocation: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHAllocationExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHAllocationExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHLiteral: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHLiteral: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHPrimaryExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHPrimaryExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHCastExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHCastExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHUnaryExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHUnaryExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHBinaryExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHBinaryExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHTernaryExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHTernaryExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHAssignment: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHAssignment: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHFormalParameter: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHFormalParameter: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHTryStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHTryStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHThrowStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHThrowStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHReturnStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHReturnStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHEnhancedForStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHEnhancedForStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHForStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHForStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHWhileStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHWhileStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHIfStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHIfStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHSwitchStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHSwitchStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHBlock: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHBlock: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHAmbiguousName: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHAmbiguousName: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHPackageDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHPackageDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHImportDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHImportDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHTypedVariableDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHTypedVariableDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHMethodDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHMethodDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.BSHClassDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0) in <bsh.Interpreter: void run()> ==> <bsh.BSHClassDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.SimpleNode: void dump(java.lang.String)> via: VIRTUAL edge: virtualinvoke r84.<bsh.SimpleNode: void dump(java.lang.String)>(">") in <bsh.Interpreter: void run()> ==> <bsh.SimpleNode: void dump(java.lang.String)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.JJTParserState: int nodeArity()> via: VIRTUAL edge: $i0 = virtualinvoke $r3.<bsh.JJTParserState: int nodeArity()>() in <bsh.Interpreter: void run()> ==> <bsh.JJTParserState: int nodeArity()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.JJTParserState: bsh.Node rootNode()> via: VIRTUAL edge: $r6 = virtualinvoke $r5.<bsh.JJTParserState: bsh.Node rootNode()>() in <bsh.Interpreter: void run()> ==> <bsh.JJTParserState: bsh.Node rootNode()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.JJTParserState: void reset()> via: VIRTUAL edge: virtualinvoke $r86.<bsh.JJTParserState: void reset()>() in <bsh.Interpreter: void run()> ==> <bsh.JJTParserState: void reset()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.JJTParserState: void reset()> via: VIRTUAL edge: virtualinvoke $r79.<bsh.JJTParserState: void reset()>() in <bsh.Interpreter: void run()> ==> <bsh.JJTParserState: void reset()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.JJTParserState: void reset()> via: VIRTUAL edge: virtualinvoke $r69.<bsh.JJTParserState: void reset()>() in <bsh.Interpreter: void run()> ==> <bsh.JJTParserState: void reset()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.JJTParserState: void reset()> via: VIRTUAL edge: virtualinvoke $r60.<bsh.JJTParserState: void reset()>() in <bsh.Interpreter: void run()> ==> <bsh.JJTParserState: void reset()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.JJTParserState: void reset()> via: VIRTUAL edge: virtualinvoke $r47.<bsh.JJTParserState: void reset()>() in <bsh.Interpreter: void run()> ==> <bsh.JJTParserState: void reset()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.JJTParserState: void reset()> via: VIRTUAL edge: virtualinvoke $r39.<bsh.JJTParserState: void reset()>() in <bsh.Interpreter: void run()> ==> <bsh.JJTParserState: void reset()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.JJTParserState: void reset()> via: VIRTUAL edge: virtualinvoke $r32.<bsh.JJTParserState: void reset()>() in <bsh.Interpreter: void run()> ==> <bsh.JJTParserState: void reset()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.JJTParserState: void reset()> via: VIRTUAL edge: virtualinvoke $r23.<bsh.JJTParserState: void reset()>() in <bsh.Interpreter: void run()> ==> <bsh.JJTParserState: void reset()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: void push(bsh.NameSpace)> via: VIRTUAL edge: virtualinvoke $r82.<bsh.CallStack: void push(bsh.NameSpace)>($r24) in <bsh.Interpreter: void run()> ==> <bsh.CallStack: void push(bsh.NameSpace)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: void clear()> via: VIRTUAL edge: virtualinvoke $r82.<bsh.CallStack: void clear()>() in <bsh.Interpreter: void run()> ==> <bsh.CallStack: void clear()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: int depth()> via: VIRTUAL edge: $i2 = virtualinvoke $r82.<bsh.CallStack: int depth()>() in <bsh.Interpreter: void run()> ==> <bsh.CallStack: int depth()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: void push(bsh.NameSpace)> via: VIRTUAL edge: virtualinvoke $r82.<bsh.CallStack: void push(bsh.NameSpace)>($r33) in <bsh.Interpreter: void run()> ==> <bsh.CallStack: void push(bsh.NameSpace)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: void clear()> via: VIRTUAL edge: virtualinvoke $r82.<bsh.CallStack: void clear()>() in <bsh.Interpreter: void run()> ==> <bsh.CallStack: void clear()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: int depth()> via: VIRTUAL edge: $i3 = virtualinvoke $r82.<bsh.CallStack: int depth()>() in <bsh.Interpreter: void run()> ==> <bsh.CallStack: int depth()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: void push(bsh.NameSpace)> via: VIRTUAL edge: virtualinvoke $r82.<bsh.CallStack: void push(bsh.NameSpace)>($r40) in <bsh.Interpreter: void run()> ==> <bsh.CallStack: void push(bsh.NameSpace)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: void clear()> via: VIRTUAL edge: virtualinvoke $r82.<bsh.CallStack: void clear()>() in <bsh.Interpreter: void run()> ==> <bsh.CallStack: void clear()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: int depth()> via: VIRTUAL edge: $i4 = virtualinvoke $r82.<bsh.CallStack: int depth()>() in <bsh.Interpreter: void run()> ==> <bsh.CallStack: int depth()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: void push(bsh.NameSpace)> via: VIRTUAL edge: virtualinvoke $r82.<bsh.CallStack: void push(bsh.NameSpace)>($r48) in <bsh.Interpreter: void run()> ==> <bsh.CallStack: void push(bsh.NameSpace)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: void clear()> via: VIRTUAL edge: virtualinvoke $r82.<bsh.CallStack: void clear()>() in <bsh.Interpreter: void run()> ==> <bsh.CallStack: void clear()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: int depth()> via: VIRTUAL edge: $i5 = virtualinvoke $r82.<bsh.CallStack: int depth()>() in <bsh.Interpreter: void run()> ==> <bsh.CallStack: int depth()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: void push(bsh.NameSpace)> via: VIRTUAL edge: virtualinvoke $r82.<bsh.CallStack: void push(bsh.NameSpace)>($r61) in <bsh.Interpreter: void run()> ==> <bsh.CallStack: void push(bsh.NameSpace)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: void clear()> via: VIRTUAL edge: virtualinvoke $r82.<bsh.CallStack: void clear()>() in <bsh.Interpreter: void run()> ==> <bsh.CallStack: void clear()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: int depth()> via: VIRTUAL edge: $i6 = virtualinvoke $r82.<bsh.CallStack: int depth()>() in <bsh.Interpreter: void run()> ==> <bsh.CallStack: int depth()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: void push(bsh.NameSpace)> via: VIRTUAL edge: virtualinvoke $r82.<bsh.CallStack: void push(bsh.NameSpace)>($r70) in <bsh.Interpreter: void run()> ==> <bsh.CallStack: void push(bsh.NameSpace)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: void clear()> via: VIRTUAL edge: virtualinvoke $r82.<bsh.CallStack: void clear()>() in <bsh.Interpreter: void run()> ==> <bsh.CallStack: void clear()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: int depth()> via: VIRTUAL edge: $i7 = virtualinvoke $r82.<bsh.CallStack: int depth()>() in <bsh.Interpreter: void run()> ==> <bsh.CallStack: int depth()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: void push(bsh.NameSpace)> via: VIRTUAL edge: virtualinvoke $r82.<bsh.CallStack: void push(bsh.NameSpace)>($r80) in <bsh.Interpreter: void run()> ==> <bsh.CallStack: void push(bsh.NameSpace)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: void clear()> via: VIRTUAL edge: virtualinvoke $r82.<bsh.CallStack: void clear()>() in <bsh.Interpreter: void run()> ==> <bsh.CallStack: void clear()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: int depth()> via: VIRTUAL edge: $i8 = virtualinvoke $r82.<bsh.CallStack: int depth()>() in <bsh.Interpreter: void run()> ==> <bsh.CallStack: int depth()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: void push(bsh.NameSpace)> via: VIRTUAL edge: virtualinvoke $r82.<bsh.CallStack: void push(bsh.NameSpace)>($r4) in <bsh.Interpreter: void run()> ==> <bsh.CallStack: void push(bsh.NameSpace)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: void clear()> via: VIRTUAL edge: virtualinvoke $r82.<bsh.CallStack: void clear()>() in <bsh.Interpreter: void run()> ==> <bsh.CallStack: void clear()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: int depth()> via: VIRTUAL edge: $i9 = virtualinvoke $r82.<bsh.CallStack: int depth()>() in <bsh.Interpreter: void run()> ==> <bsh.CallStack: int depth()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.CallStack: int depth()> via: VIRTUAL edge: $i1 = virtualinvoke $r82.<bsh.CallStack: int depth()>() in <bsh.Interpreter: void run()> ==> <bsh.CallStack: int depth()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.ParseException: java.lang.String getMessage(boolean)> via: VIRTUAL edge: $r74 = virtualinvoke $r71.<bsh.ParseException: java.lang.String getMessage(boolean)>($z18) in <bsh.Interpreter: void run()> ==> <bsh.ParseException: java.lang.String getMessage(boolean)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.Parser: void reInitInput(java.io.Reader)> via: VIRTUAL edge: virtualinvoke $r78.<bsh.Parser: void reInitInput(java.io.Reader)>($r77) in <bsh.Interpreter: void run()> ==> <bsh.Parser: void reInitInput(java.io.Reader)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.TargetError: java.lang.Throwable getTarget()> via: VIRTUAL edge: $r59 = virtualinvoke $r54.<bsh.TargetError: java.lang.Throwable getTarget()>() in <bsh.Interpreter: void run()> ==> <bsh.TargetError: java.lang.Throwable getTarget()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.TargetError: void printStackTrace(boolean,java.io.PrintStream)> via: VIRTUAL edge: virtualinvoke $r54.<bsh.TargetError: void printStackTrace(boolean,java.io.PrintStream)>($z16, $r62) in <bsh.Interpreter: void run()> ==> <bsh.TargetError: void printStackTrace(boolean,java.io.PrintStream)>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.TargetError: boolean inNativeCode()> via: VIRTUAL edge: $z14 = virtualinvoke $r54.<bsh.TargetError: boolean inNativeCode()>() in <bsh.Interpreter: void run()> ==> <bsh.TargetError: boolean inNativeCode()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.TargetError: void printStackTrace()> via: VIRTUAL edge: virtualinvoke $r41.<bsh.EvalError: void printStackTrace()>() in <bsh.Interpreter: void run()> ==> <bsh.TargetError: void printStackTrace()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.TargetError: java.lang.String toString()> via: VIRTUAL edge: $r51 = virtualinvoke $r41.<bsh.EvalError: java.lang.String toString()>() in <bsh.Interpreter: void run()> ==> <bsh.TargetError: java.lang.String toString()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.ParseException: java.lang.String getMessage()> via: VIRTUAL edge: $r44 = virtualinvoke $r41.<bsh.EvalError: java.lang.String getMessage()>() in <bsh.Interpreter: void run()> ==> <bsh.ParseException: java.lang.String getMessage()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.ParseException: java.lang.String toString()> via: VIRTUAL edge: $r51 = virtualinvoke $r41.<bsh.EvalError: java.lang.String toString()>() in <bsh.Interpreter: void run()> ==> <bsh.ParseException: java.lang.String toString()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.EvalError: java.lang.String getMessage()> via: VIRTUAL edge: $r44 = virtualinvoke $r41.<bsh.EvalError: java.lang.String getMessage()>() in <bsh.Interpreter: void run()> ==> <bsh.EvalError: java.lang.String getMessage()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.EvalError: java.lang.String toString()> via: VIRTUAL edge: $r51 = virtualinvoke $r41.<bsh.EvalError: java.lang.String toString()>() in <bsh.Interpreter: void run()> ==> <bsh.EvalError: java.lang.String toString()>
Global flow here: <bsh.Interpreter: void run()> calls: <org.apache.commons.lang.exception.NestableRuntimeException: void printStackTrace()> via: VIRTUAL edge: virtualinvoke $r34.<java.lang.Exception: void printStackTrace()>() in <bsh.Interpreter: void run()> ==> <org.apache.commons.lang.exception.NestableRuntimeException: void printStackTrace()>
Global flow here: <bsh.Interpreter: void run()> calls: <org.apache.commons.lang.exception.NestableException: void printStackTrace()> via: VIRTUAL edge: virtualinvoke $r34.<java.lang.Exception: void printStackTrace()>() in <bsh.Interpreter: void run()> ==> <org.apache.commons.lang.exception.NestableException: void printStackTrace()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.TargetError: void printStackTrace()> via: VIRTUAL edge: virtualinvoke $r34.<java.lang.Exception: void printStackTrace()>() in <bsh.Interpreter: void run()> ==> <bsh.TargetError: void printStackTrace()>
Global flow here: <bsh.Interpreter: void run()> calls: <bsh.Parser: void reInitTokenInput(java.io.Reader)> via: VIRTUAL edge: virtualinvoke $r31.<bsh.Parser: void reInitTokenInput(java.io.Reader)>($r30) in <bsh.Interpreter: void run()> ==> <bsh.Parser: void reInitTokenInput(java.io.Reader)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHFormalParameters: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHFormalParameters: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHSwitchLabel: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHSwitchLabel: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHStatementExpressionList: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHStatementExpressionList: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHArrayInitializer: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHArrayInitializer: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHArrayDimensions: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHArrayDimensions: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHMethodInvocation: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHMethodInvocation: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHAllocationExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHAllocationExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHLiteral: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHLiteral: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHPrimaryExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHPrimaryExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHCastExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHCastExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHUnaryExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHUnaryExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHBinaryExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHBinaryExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHTernaryExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHTernaryExpression: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHAssignment: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHAssignment: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHFormalParameter: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHFormalParameter: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHTryStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHTryStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHThrowStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHThrowStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHReturnStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHReturnStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHEnhancedForStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHEnhancedForStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHForStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHForStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHWhileStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHWhileStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHIfStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHIfStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHSwitchStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHSwitchStatement: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHBlock: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHBlock: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHAmbiguousName: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHAmbiguousName: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHPackageDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHPackageDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHImportDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHImportDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHTypedVariableDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHTypedVariableDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHMethodDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHMethodDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.BSHClassDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.BSHClassDeclaration: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.SimpleNode: java.lang.String getText()> via: VIRTUAL edge: $r27 = virtualinvoke r80.<bsh.SimpleNode: java.lang.String getText()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.SimpleNode: java.lang.String getText()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.SimpleNode: void setSourceFile(java.lang.String)> via: VIRTUAL edge: virtualinvoke r80.<bsh.SimpleNode: void setSourceFile(java.lang.String)>(r4) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.SimpleNode: void setSourceFile(java.lang.String)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.ParseException: void setErrorSourceFile(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r77.<bsh.ParseException: void setErrorSourceFile(java.lang.String)>(r4) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.ParseException: void setErrorSourceFile(java.lang.String)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.ParseException: java.lang.String getMessage(boolean)> via: VIRTUAL edge: $r78 = virtualinvoke $r77.<bsh.ParseException: java.lang.String getMessage(boolean)>($z7) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.ParseException: java.lang.String getMessage(boolean)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.EvalError: void reThrow(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r61.<bsh.TargetError: void reThrow(java.lang.String)>($r66) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.EvalError: void reThrow(java.lang.String)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.EvalError: void setNode(bsh.SimpleNode)> via: VIRTUAL edge: virtualinvoke $r61.<bsh.TargetError: void setNode(bsh.SimpleNode)>(r80) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.EvalError: void setNode(bsh.SimpleNode)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.EvalError: bsh.SimpleNode getNode()> via: VIRTUAL edge: $r62 = virtualinvoke $r61.<bsh.TargetError: bsh.SimpleNode getNode()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.EvalError: bsh.SimpleNode getNode()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.TargetError: void printStackTrace()> via: VIRTUAL edge: virtualinvoke $r54.<bsh.EvalError: void printStackTrace()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.TargetError: void printStackTrace()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.EvalError: void reThrow(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r54.<bsh.EvalError: void reThrow(java.lang.String)>($r59) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.EvalError: void reThrow(java.lang.String)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.EvalError: void setNode(bsh.SimpleNode)> via: VIRTUAL edge: virtualinvoke $r54.<bsh.EvalError: void setNode(bsh.SimpleNode)>(r80) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.EvalError: void setNode(bsh.SimpleNode)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.EvalError: bsh.SimpleNode getNode()> via: VIRTUAL edge: $r55 = virtualinvoke $r54.<bsh.EvalError: bsh.SimpleNode getNode()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.EvalError: bsh.SimpleNode getNode()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <org.apache.commons.lang.exception.NestableRuntimeException: java.lang.String getMessage()> via: VIRTUAL edge: $r51 = virtualinvoke $r45.<java.lang.Exception: java.lang.String getMessage()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <org.apache.commons.lang.exception.NestableRuntimeException: java.lang.String getMessage()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <org.apache.commons.lang.exception.NestableRuntimeException: void printStackTrace()> via: VIRTUAL edge: virtualinvoke $r45.<java.lang.Exception: void printStackTrace()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <org.apache.commons.lang.exception.NestableRuntimeException: void printStackTrace()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <org.apache.commons.lang.exception.NestableException: java.lang.String getMessage()> via: VIRTUAL edge: $r51 = virtualinvoke $r45.<java.lang.Exception: java.lang.String getMessage()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <org.apache.commons.lang.exception.NestableException: java.lang.String getMessage()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <org.apache.commons.lang.exception.NestableException: void printStackTrace()> via: VIRTUAL edge: virtualinvoke $r45.<java.lang.Exception: void printStackTrace()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <org.apache.commons.lang.exception.NestableException: void printStackTrace()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()> via: VIRTUAL edge: $r51 = virtualinvoke $r45.<java.lang.Exception: java.lang.String getMessage()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <org.xml.sax.SAXException: java.lang.String getMessage()> via: VIRTUAL edge: $r51 = virtualinvoke $r45.<java.lang.Exception: java.lang.String getMessage()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <org.xml.sax.SAXException: java.lang.String getMessage()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.TargetError: void printStackTrace()> via: VIRTUAL edge: virtualinvoke $r45.<java.lang.Exception: void printStackTrace()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.TargetError: void printStackTrace()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.ParseException: java.lang.String getMessage()> via: VIRTUAL edge: $r51 = virtualinvoke $r45.<java.lang.Exception: java.lang.String getMessage()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.ParseException: java.lang.String getMessage()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.EvalError: java.lang.String getMessage()> via: VIRTUAL edge: $r51 = virtualinvoke $r45.<java.lang.Exception: java.lang.String getMessage()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.EvalError: java.lang.String getMessage()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.TokenMgrError: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r36.<bsh.TokenMgrError: java.lang.String getMessage()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.TokenMgrError: java.lang.String getMessage()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.JJTParserState: int nodeArity()> via: VIRTUAL edge: $i0 = virtualinvoke $r8.<bsh.JJTParserState: int nodeArity()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.JJTParserState: int nodeArity()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.JJTParserState: bsh.Node rootNode()> via: VIRTUAL edge: $r10 = virtualinvoke $r9.<bsh.JJTParserState: bsh.Node rootNode()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.JJTParserState: bsh.Node rootNode()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.JJTParserState: void reset()> via: VIRTUAL edge: virtualinvoke $r19.<bsh.JJTParserState: void reset()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.JJTParserState: void reset()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.JJTParserState: void reset()> via: VIRTUAL edge: virtualinvoke $r81.<bsh.JJTParserState: void reset()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.JJTParserState: void reset()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.JJTParserState: void reset()> via: VIRTUAL edge: virtualinvoke $r67.<bsh.JJTParserState: void reset()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.JJTParserState: void reset()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.JJTParserState: void reset()> via: VIRTUAL edge: virtualinvoke $r60.<bsh.JJTParserState: void reset()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.JJTParserState: void reset()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.JJTParserState: void reset()> via: VIRTUAL edge: virtualinvoke $r35.<bsh.JJTParserState: void reset()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.JJTParserState: void reset()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.CallStack: void push(bsh.NameSpace)> via: VIRTUAL edge: virtualinvoke $r7.<bsh.CallStack: void push(bsh.NameSpace)>(r3) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.CallStack: void push(bsh.NameSpace)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.CallStack: void clear()> via: VIRTUAL edge: virtualinvoke $r7.<bsh.CallStack: void clear()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.CallStack: void clear()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.CallStack: int depth()> via: VIRTUAL edge: $i3 = virtualinvoke $r7.<bsh.CallStack: int depth()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.CallStack: int depth()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.CallStack: void push(bsh.NameSpace)> via: VIRTUAL edge: virtualinvoke $r7.<bsh.CallStack: void push(bsh.NameSpace)>(r3) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.CallStack: void push(bsh.NameSpace)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.CallStack: void clear()> via: VIRTUAL edge: virtualinvoke $r7.<bsh.CallStack: void clear()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.CallStack: void clear()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.CallStack: int depth()> via: VIRTUAL edge: $i4 = virtualinvoke $r7.<bsh.CallStack: int depth()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.CallStack: int depth()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.CallStack: void push(bsh.NameSpace)> via: VIRTUAL edge: virtualinvoke $r7.<bsh.CallStack: void push(bsh.NameSpace)>(r3) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.CallStack: void push(bsh.NameSpace)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.CallStack: void clear()> via: VIRTUAL edge: virtualinvoke $r7.<bsh.CallStack: void clear()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.CallStack: void clear()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.CallStack: int depth()> via: VIRTUAL edge: $i5 = virtualinvoke $r7.<bsh.CallStack: int depth()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.CallStack: int depth()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.CallStack: void push(bsh.NameSpace)> via: VIRTUAL edge: virtualinvoke $r7.<bsh.CallStack: void push(bsh.NameSpace)>(r3) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.CallStack: void push(bsh.NameSpace)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.CallStack: void clear()> via: VIRTUAL edge: virtualinvoke $r7.<bsh.CallStack: void clear()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.CallStack: void clear()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.CallStack: int depth()> via: VIRTUAL edge: $i6 = virtualinvoke $r7.<bsh.CallStack: int depth()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.CallStack: int depth()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.CallStack: void push(bsh.NameSpace)> via: VIRTUAL edge: virtualinvoke $r7.<bsh.CallStack: void push(bsh.NameSpace)>(r3) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.CallStack: void push(bsh.NameSpace)>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.CallStack: void clear()> via: VIRTUAL edge: virtualinvoke $r7.<bsh.CallStack: void clear()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.CallStack: void clear()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.CallStack: int depth()> via: VIRTUAL edge: $i2 = virtualinvoke $r7.<bsh.CallStack: int depth()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.CallStack: int depth()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.CallStack: int depth()> via: VIRTUAL edge: $i1 = virtualinvoke $r7.<bsh.CallStack: int depth()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.CallStack: int depth()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <com.sun.org.apache.xerces.internal.impl.dv.DatatypeException: java.lang.String getMessage()> via: VIRTUAL edge: $r51 = virtualinvoke $r45.<java.lang.Exception: java.lang.String getMessage()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <com.sun.org.apache.xerces.internal.impl.dv.DatatypeException: java.lang.String getMessage()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <sun.nio.fs.WindowsException: java.lang.String getMessage()> via: VIRTUAL edge: $r51 = virtualinvoke $r45.<java.lang.Exception: java.lang.String getMessage()>() in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <sun.nio.fs.WindowsException: java.lang.String getMessage()>
Global flow here: <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> calls: <bsh.Primitive: java.lang.Object unwrap(java.lang.Object)> via: STATIC edge: $r82 = staticinvoke <bsh.Primitive: java.lang.Object unwrap(java.lang.Object)>(r79) in <bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)> ==> <bsh.Primitive: java.lang.Object unwrap(java.lang.Object)>
Global flow here: <bsh.Interpreter: java.lang.Object get(java.lang.String)> calls: <bsh.NameSpace: java.lang.Object get(java.lang.String,bsh.Interpreter)> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<bsh.NameSpace: java.lang.Object get(java.lang.String,bsh.Interpreter)>(r1, r0) in <bsh.Interpreter: java.lang.Object get(java.lang.String)> ==> <bsh.NameSpace: java.lang.Object get(java.lang.String,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: java.lang.Object get(java.lang.String)> calls: <bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)> via: VIRTUAL edge: $r8 = virtualinvoke $r5.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>($r7, $r6) in <bsh.Interpreter: java.lang.Object get(java.lang.String)> ==> <bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>
Global flow here: <bsh.Interpreter: java.lang.Object get(java.lang.String)> calls: <bsh.Primitive: java.lang.Object unwrap(java.lang.Object)> via: STATIC edge: $r4 = staticinvoke <bsh.Primitive: java.lang.Object unwrap(java.lang.Object)>($r3) in <bsh.Interpreter: java.lang.Object get(java.lang.String)> ==> <bsh.Primitive: java.lang.Object unwrap(java.lang.Object)>
Global flow here: <bsh.Interpreter: void set(java.lang.String,java.lang.Object)> calls: <bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)> via: VIRTUAL edge: $r9 = virtualinvoke $r7.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>($r8, $r0) in <bsh.Interpreter: void set(java.lang.String,java.lang.Object)> ==> <bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>
Global flow here: <bsh.Interpreter: void set(java.lang.String,java.lang.Object)> calls: <bsh.LHS: java.lang.Object assign(java.lang.Object,boolean)> via: VIRTUAL edge: virtualinvoke $r6.<bsh.LHS: java.lang.Object assign(java.lang.Object,boolean)>(r10, 0) in <bsh.Interpreter: void set(java.lang.String,java.lang.Object)> ==> <bsh.LHS: java.lang.Object assign(java.lang.Object,boolean)>
Global flow here: <bsh.Interpreter: void set(java.lang.String,java.lang.Object)> calls: <bsh.Name: bsh.LHS toLHS(bsh.CallStack,bsh.Interpreter)> via: VIRTUAL edge: $r6 = virtualinvoke $r5.<bsh.Name: bsh.LHS toLHS(bsh.CallStack,bsh.Interpreter)>($r0, r2) in <bsh.Interpreter: void set(java.lang.String,java.lang.Object)> ==> <bsh.Name: bsh.LHS toLHS(bsh.CallStack,bsh.Interpreter)>
Global flow here: <bsh.Interpreter: void set(java.lang.String,java.lang.Object)> calls: <bsh.NameSpace: bsh.Name getNameResolver(java.lang.String)> via: VIRTUAL edge: $r5 = virtualinvoke $r4.<bsh.NameSpace: bsh.Name getNameResolver(java.lang.String)>(r1) in <bsh.Interpreter: void set(java.lang.String,java.lang.Object)> ==> <bsh.NameSpace: bsh.Name getNameResolver(java.lang.String)>
Global flow here: <bsh.Interpreter: void set(java.lang.String,java.lang.Object)> calls: <bsh.NameSpace: void setVariable(java.lang.String,java.lang.Object,boolean)> via: VIRTUAL edge: virtualinvoke $r3.<bsh.NameSpace: void setVariable(java.lang.String,java.lang.Object,boolean)>(r1, r10, 0) in <bsh.Interpreter: void set(java.lang.String,java.lang.Object)> ==> <bsh.NameSpace: void setVariable(java.lang.String,java.lang.Object,boolean)>
Global flow here: <bsh.Interpreter: void set(java.lang.String,java.lang.Object)> calls: <bsh.Name: boolean isCompound(java.lang.String)> via: STATIC edge: $z0 = staticinvoke <bsh.Name: boolean isCompound(java.lang.String)>(r1) in <bsh.Interpreter: void set(java.lang.String,java.lang.Object)> ==> <bsh.Name: boolean isCompound(java.lang.String)>
Global flow here: <bsh.Interpreter: boolean Line()> calls: <bsh.Parser: boolean Line()> via: VIRTUAL edge: $z0 = virtualinvoke $r1.<bsh.Parser: boolean Line()>() in <bsh.Interpreter: boolean Line()> ==> <bsh.Parser: boolean Line()>
Source here: <bsh.Interpreter: void loadRCFiles()>
Source here: <bsh.Interpreter: java.io.File pathToFile(java.lang.String)>
Global flow here: <bsh.Interpreter: bsh.BshClassManager getClassManager()> calls: <bsh.NameSpace: bsh.BshClassManager getClassManager()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<bsh.NameSpace: bsh.BshClassManager getClassManager()>() in <bsh.Interpreter: bsh.BshClassManager getClassManager()> ==> <bsh.NameSpace: bsh.BshClassManager getClassManager()>
Start traversal for source: <bsh.Interpreter: java.io.File pathToFile(java.lang.String)>...
Starting from source: 
0: pathToFile
1: source
2: loadRCFiles
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getCanonicalPath()>...
Starting from source: 
0: getCanonicalPath
1: pathToFile
2: source
3: loadRCFiles
Flows from source is finished.
Start traversal for source: <org.pircbotx.InputThread: void run()>...
Starting from source: 
0: run
1: prePaintDirtyRegions
2: invokeConfigurationListeners
Flows from source is finished.
Start traversal for source: <bsh.Interpreter: void loadRCFiles()>...
Starting from source: 
0: loadRCFiles
Flows from source is finished.
Start traversal for source: <org.pircbotx.IdentServer: void run()>...
Starting from source: 
0: run
1: prePaintDirtyRegions
2: invokeConfigurationListeners
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: staticInit
2: loadRCFiles
Flows from source is finished.
Start traversal for source: <com.zack6849.alphabot.Bot$1: void run()>...
Starting from source: 
0: run
1: prePaintDirtyRegions
2: invokeConfigurationListeners
Flows from source is finished.
Now we build call graphs for class: org.jsoup.nodes.Node
Source here: <org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>
Now we build call graphs for class: com.zack6849.alphabot.Config
Source here: <com.zack6849.alphabot.Config: void loadConfig()>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)> via: VIRTUAL edge: $r52 = virtualinvoke $r51.<org.apache.commons.configuration.PropertiesConfiguration: java.lang.String getString(java.lang.String)>("NOT-ADMIN") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)> via: VIRTUAL edge: $r54 = virtualinvoke $r53.<org.apache.commons.configuration.PropertiesConfiguration: java.lang.String getString(java.lang.String)>("NICKSERV-PASS") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)> via: VIRTUAL edge: $r56 = virtualinvoke $r55.<org.apache.commons.configuration.PropertiesConfiguration: java.lang.String getString(java.lang.String)>("BOT-NICKNAME") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)> via: VIRTUAL edge: $r58 = virtualinvoke $r57.<org.apache.commons.configuration.PropertiesConfiguration: java.lang.String getString(java.lang.String)>("BOT-IDENT") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)> via: VIRTUAL edge: $r60 = virtualinvoke $r59.<org.apache.commons.configuration.PropertiesConfiguration: java.lang.String getString(java.lang.String)>("BOT-REALNAME") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: boolean getBoolean(java.lang.String)> via: VIRTUAL edge: $z6 = virtualinvoke $r61.<org.apache.commons.configuration.PropertiesConfiguration: boolean getBoolean(java.lang.String)>("ALLOW-FILE-TRANSFER") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: boolean getBoolean(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)> via: VIRTUAL edge: $r63 = virtualinvoke $r62.<org.apache.commons.configuration.PropertiesConfiguration: java.lang.String getString(java.lang.String)>("NOTICE-IDENTIFIER") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)> via: VIRTUAL edge: $r65 = virtualinvoke $r64.<org.apache.commons.configuration.PropertiesConfiguration: java.lang.String getString(java.lang.String)>("PUBLIC-IDENTIFIER") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)> via: VIRTUAL edge: $r67 = virtualinvoke $r66.<org.apache.commons.configuration.PropertiesConfiguration: java.lang.String getString(java.lang.String)>("CHANNELS") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)> via: VIRTUAL edge: $r71 = virtualinvoke $r70.<org.apache.commons.configuration.PropertiesConfiguration: java.lang.String getString(java.lang.String)>("BOT-ADMINS") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)> via: VIRTUAL edge: $r76 = virtualinvoke $r75.<org.apache.commons.configuration.PropertiesConfiguration: java.lang.String getString(java.lang.String)>("EXEC-ADMINS") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)> via: VIRTUAL edge: $r81 = virtualinvoke $r80.<org.apache.commons.configuration.PropertiesConfiguration: java.lang.String getString(java.lang.String)>("LOGGED-CHANNELS") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)> via: VIRTUAL edge: $r85 = virtualinvoke $r84.<org.apache.commons.configuration.PropertiesConfiguration: java.lang.String getString(java.lang.String)>("SERVER") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.io.File)> via: VIRTUAL edge: virtualinvoke $r91.<org.apache.commons.configuration.PropertiesConfiguration: void load(java.io.File)>($r90) in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.io.File)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: boolean getBoolean(java.lang.String)> via: VIRTUAL edge: $z7 = virtualinvoke $r86.<org.apache.commons.configuration.PropertiesConfiguration: boolean getBoolean(java.lang.String)>("ACCEPT-INVITIATIONS") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: boolean getBoolean(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setFile(java.io.File)> via: VIRTUAL edge: virtualinvoke $r19.<org.apache.commons.configuration.PropertiesConfiguration: void setFile(java.io.File)>($r18) in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setFile(java.io.File)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r20.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("SERVER", "irc.esper.net") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r21.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("BOT-NICKNAME", "Alphabot") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r22.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("BOT-IDENT", "Bot") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r23.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("BOT-REALNAME", "Alphabot") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r24.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("IDENTIFY-WITH-NICKSERV", $r25) in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r26.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("NICKSERV-PASS", "password") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r27.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("CHANNELS", "#alphacraft #alphabot") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r28.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("VERIFY-BOT-ADMINS", $r29) in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r30.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("BOT-ADMINS", "zack6849") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r31.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("EXEC-ADMINS", "zack6849") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r32.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("ALLOW-FILE-TRANSFER", $r33) in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r34.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("PUBLIC-IDENTIFIER", "$") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r35.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("NOTICE-IDENTIFIER", "|") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r36.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("PERMISSIONS-DENIED", "Sorry you lack the necessary permissions to perform that action.") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r37.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("NOT-ADMIN", "Sorry, you are either not on the admins list or are not logged in as an admin.") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r38.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("DEBUG-MODE", $r39) in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r40.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("ACCEPT-INVITIATIONS", $r41) in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r42.<org.apache.commons.configuration.PropertiesConfiguration: void setProperty(java.lang.String,java.lang.Object)>("LOGGED-CHANNELS", "#alphacraft #alphabot") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void setProperty(java.lang.String,java.lang.Object)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void save()> via: VIRTUAL edge: virtualinvoke $r43.<org.apache.commons.configuration.PropertiesConfiguration: void save()>() in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void save()>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: boolean getBoolean(java.lang.String)> via: VIRTUAL edge: $z3 = virtualinvoke $r46.<org.apache.commons.configuration.PropertiesConfiguration: boolean getBoolean(java.lang.String)>("IDENTIFY-WITH-NICKSERV") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: boolean getBoolean(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: boolean getBoolean(java.lang.String)> via: VIRTUAL edge: $z4 = virtualinvoke $r47.<org.apache.commons.configuration.PropertiesConfiguration: boolean getBoolean(java.lang.String)>("VERIFY-BOT-ADMINS") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: boolean getBoolean(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: boolean getBoolean(java.lang.String)> via: VIRTUAL edge: $z5 = virtualinvoke $r48.<org.apache.commons.configuration.PropertiesConfiguration: boolean getBoolean(java.lang.String)>("DEBUG-MODE") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: boolean getBoolean(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)> via: VIRTUAL edge: $r50 = virtualinvoke $r49.<org.apache.commons.configuration.PropertiesConfiguration: java.lang.String getString(java.lang.String)>("PERMISSIONS-DENIED") in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractConfiguration: java.lang.String getString(java.lang.String)>
Global flow here: <com.zack6849.alphabot.Config: void loadConfig()> calls: <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.io.File)> via: VIRTUAL edge: virtualinvoke $r93.<org.apache.commons.configuration.PropertiesConfiguration: void load(java.io.File)>($r92) in <com.zack6849.alphabot.Config: void loadConfig()> ==> <org.apache.commons.configuration.AbstractFileConfiguration: void load(java.io.File)>
Start traversal for source: <org.apache.commons.configuration.AbstractFileConfiguration: void setFile(java.io.File)>...
Starting from source: 
0: setFile
1: loadConfig
2: start
Flows from source is finished.
Start traversal for source: <java.io.File: java.io.File getParentFile()>...
Starting from source: 
0: getParentFile
1: loadConfig
2: start
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getAbsolutePath()>...
Starting from source: 
0: getAbsolutePath
1: loadConfig
2: start
Flows from source is finished.
Start traversal for source: <com.zack6849.alphabot.Config: void loadConfig()>...
Starting from source: 
0: loadConfig
1: start
Flows from source is finished.
Now we build call graphs for class: org.apache.commons.logging.LogFactory
Source here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <org.apache.commons.lang.exception.NestableRuntimeException: java.lang.String getMessage()> via: VIRTUAL edge: $r53 = virtualinvoke $r50.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.lang.exception.NestableRuntimeException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <org.apache.commons.lang.exception.NestableRuntimeException: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.lang.exception.NestableRuntimeException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <org.apache.commons.lang.exception.NestableException: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.commons.lang.exception.NestableException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <org.xml.sax.SAXException: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.xml.sax.SAXException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <bsh.ParseException: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <bsh.ParseException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <bsh.EvalError: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <bsh.EvalError: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <com.sun.org.apache.xerces.internal.impl.dv.DatatypeException: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <com.sun.org.apache.xerces.internal.impl.dv.DatatypeException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <sun.nio.fs.WindowsException: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <sun.nio.fs.WindowsException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoaderInternal()> calls: <org.apache.commons.logging.LogFactory$1: java.lang.Object run()> via: GENERIC_FAKE edge: $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoaderInternal()> ==> <org.apache.commons.logging.LogFactory$1: java.lang.Object run()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> calls: <org.apache.commons.logging.LogFactory$2: java.lang.Object run()> via: GENERIC_FAKE edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory$2: java.lang.Object run()>
Global flow here: <org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)> calls: <org.apache.commons.logging.LogFactory$3: java.lang.Object run()> via: GENERIC_FAKE edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory$3: java.lang.Object run()>
Global flow here: <org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)> calls: <org.apache.commons.logging.LogFactory$4: java.lang.Object run()> via: GENERIC_FAKE edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory$4: java.lang.Object run()>
Global flow here: <org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)> calls: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> via: GENERIC_FAKE edge: $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)> ==> <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>
Global flow here: <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> calls: <jdk.internal.loader.Loader$3: java.net.URL nextElement()> via: INTERFACE edge: $r15 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <jdk.internal.loader.Loader$3: java.net.URL nextElement()>
Global flow here: <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> calls: <jdk.internal.loader.Loader$3: boolean hasMoreElements()> via: INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <jdk.internal.loader.Loader$3: boolean hasMoreElements()>
Global flow here: <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> calls: <jdk.internal.loader.URLClassPath$1: java.net.URL nextElement()> via: INTERFACE edge: $r15 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <jdk.internal.loader.URLClassPath$1: java.net.URL nextElement()>
Global flow here: <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> calls: <jdk.internal.loader.URLClassPath$1: boolean hasMoreElements()> via: INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <jdk.internal.loader.URLClassPath$1: boolean hasMoreElements()>
Global flow here: <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)> calls: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()> via: GENERIC_FAKE edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)> ==> <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>
Source here: <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: objectId
2: logHierarchy
3: logClassLoaderEnvironment
4: implementsLogFactory
5: createFactory
6: run
7: getSystemProperty
8: getFactory
9: getLog
10: createFactoryStore
11: getProperties
12: getConfigurationFile
13: getResources
14: getResourceAsStream
15: newFactory
16: getContextClassLoaderInternal
Flows from source is finished.
Start traversal for source: <org.apache.commons.lang.SystemUtils: java.lang.String getSystemProperty(java.lang.String)>...
Starting from source: 
0: getSystemProperty
1: getFactory
2: getLog
3: createFactoryStore
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>...
Starting from source: 
0: getFactory
1: getLog
Flows from source is finished.
Start traversal for source: <org.pircbotx.InputThread: void run()>...
Starting from source: 
0: run
1: getSystemProperty
2: getFactory
3: getLog
4: createFactoryStore
5: getProperties
6: getConfigurationFile
7: getResources
8: getResourceAsStream
9: newFactory
10: getContextClassLoaderInternal
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>...
Starting from source: 
0: logClassLoaderEnvironment
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: getFactory
2: getLog
Flows from source is finished.
Start traversal for source: <org.pircbotx.IdentServer: void run()>...
Starting from source: 
0: run
1: getSystemProperty
2: getFactory
3: getLog
4: createFactoryStore
5: getProperties
6: getConfigurationFile
7: getResources
8: getResourceAsStream
9: newFactory
10: getContextClassLoaderInternal
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: logClassLoaderEnvironment
2: getConfigurationFile
3: getFactory
4: getLog
Flows from source is finished.
Start traversal for source: <com.zack6849.alphabot.Bot$1: void run()>...
Starting from source: 
0: run
1: getSystemProperty
2: getFactory
3: getLog
4: createFactoryStore
5: getProperties
6: getConfigurationFile
7: getResources
8: getResourceAsStream
9: newFactory
10: getContextClassLoaderInternal
Flows from source is finished.
Now we build call graphs for class: org.pircbotx.DccChat
Source here: <org.pircbotx.DccChat: java.lang.String readLine()>
Global flow here: <org.pircbotx.DccChat: void close()> calls: <org.pircbotx.DccManager: org.pircbotx.DccChat removeDccChat(org.pircbotx.DccChat)> via: VIRTUAL edge: virtualinvoke $r3.<org.pircbotx.DccManager: org.pircbotx.DccChat removeDccChat(org.pircbotx.DccChat)>(r0) in <org.pircbotx.DccChat: void close()> ==> <org.pircbotx.DccManager: org.pircbotx.DccChat removeDccChat(org.pircbotx.DccChat)>
Global flow here: <org.pircbotx.DccChat: void close()> calls: <org.pircbotx.PircBotX: org.pircbotx.DccManager getDccManager()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.pircbotx.PircBotX: org.pircbotx.DccManager getDccManager()>() in <org.pircbotx.DccChat: void close()> ==> <org.pircbotx.PircBotX: org.pircbotx.DccManager getDccManager()>
Now we build call graphs for class: org.apache.commons.logging.LogFactory$5
Source here: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>
Global flow here: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> calls: <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()> via: STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
Global flow here: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> calls: <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)>($r9) in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)>
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
2: getProperties
Flows from source is finished.
Start traversal for source: <java.net.URL: java.io.InputStream openStream()>...
Starting from source: 
0: openStream
1: run
2: executePrivileged
3: getProperties
Flows from source is finished.
Start traversal for source: <org.pircbotx.InputThread: void run()>...
Starting from source: 
0: run
1: executePrivileged
2: getProperties
Flows from source is finished.
Start traversal for source: <org.pircbotx.IdentServer: void run()>...
Starting from source: 
0: run
1: executePrivileged
2: getProperties
Flows from source is finished.
Start traversal for source: <com.zack6849.alphabot.Bot$1: void run()>...
Starting from source: 
0: run
1: executePrivileged
2: getProperties
Flows from source is finished.
Now we build call graphs for class: org.apache.commons.logging.LogFactory$6
Source here: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
2: getSystemProperty
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
3: getSystemProperty
Flows from source is finished.
Start traversal for source: <org.apache.commons.lang.SystemUtils: java.lang.String getSystemProperty(java.lang.String)>...
Starting from source: 
0: getSystemProperty
Flows from source is finished.
Start traversal for source: <org.pircbotx.InputThread: void run()>...
Starting from source: 
0: run
1: executePrivileged
2: getSystemProperty
Flows from source is finished.
Start traversal for source: <org.pircbotx.IdentServer: void run()>...
Starting from source: 
0: run
1: executePrivileged
2: getSystemProperty
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
2: getSystemProperty
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
3: getSystemProperty
Flows from source is finished.
Start traversal for source: <com.zack6849.alphabot.Bot$1: void run()>...
Starting from source: 
0: run
1: executePrivileged
2: getSystemProperty
Flows from source is finished.
Now we build call graphs for class: org.apache.commons.configuration.PropertiesConfiguration$PropertiesReader
Source here: <org.apache.commons.configuration.PropertiesConfiguration$PropertiesReader: java.lang.String readProperty()>
Global flow here: <org.apache.commons.configuration.PropertiesConfiguration$PropertiesReader: java.lang.String readProperty()> calls: <org.apache.commons.configuration.PropertiesConfiguration: boolean isCommentLine(java.lang.String)> via: STATIC edge: $z0 = staticinvoke <org.apache.commons.configuration.PropertiesConfiguration: boolean isCommentLine(java.lang.String)>($r7) in <org.apache.commons.configuration.PropertiesConfiguration$PropertiesReader: java.lang.String readProperty()> ==> <org.apache.commons.configuration.PropertiesConfiguration: boolean isCommentLine(java.lang.String)>
Global flow here: <org.apache.commons.configuration.PropertiesConfiguration$PropertiesReader: boolean checkCombineLines(java.lang.String)> calls: <org.apache.commons.configuration.PropertiesConfiguration: int access$100(java.lang.String)> via: STATIC edge: $i0 = staticinvoke <org.apache.commons.configuration.PropertiesConfiguration: int access$100(java.lang.String)>(r0) in <org.apache.commons.configuration.PropertiesConfiguration$PropertiesReader: boolean checkCombineLines(java.lang.String)> ==> <org.apache.commons.configuration.PropertiesConfiguration: int access$100(java.lang.String)>
Start traversal for source: <org.apache.commons.configuration.PropertiesConfiguration$PropertiesReader: java.lang.String readProperty()>...
Starting from source: 
0: readProperty
1: nextProperty
2: load
Flows from source is finished.
Start traversal for source: <org.pircbotx.DccChat: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: readProperty
2: nextProperty
3: load
Flows from source is finished.
Start traversal for source: <java.io.LineNumberReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: readProperty
2: nextProperty
3: load
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: readProperty
2: nextProperty
3: load
Flows from source is finished.
Now we build call graphs for class: bsh.CommandLineReader
Source here: <bsh.CommandLineReader: int read()>
Now we build call graphs for class: org.apache.commons.configuration.ConfigurationUtils
Global flow here: <org.apache.commons.configuration.ConfigurationUtils: java.io.File constructFile(java.lang.String,java.lang.String)> calls: <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)> via: STATIC edge: $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1) in <org.apache.commons.configuration.ConfigurationUtils: java.io.File constructFile(java.lang.String,java.lang.String)> ==> <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>
Source here: <org.apache.commons.configuration.ConfigurationUtils: java.net.URL locate(org.apache.commons.configuration.FileSystem,java.lang.String,java.lang.String)>
Global flow here: <org.apache.commons.configuration.ConfigurationUtils: java.net.URL locate(org.apache.commons.configuration.FileSystem,java.lang.String,java.lang.String)> calls: <org.apache.commons.configuration.DefaultFileSystem: java.net.URL locateFromURL(java.lang.String,java.lang.String)> via: VIRTUAL edge: $r4 = virtualinvoke r2.<org.apache.commons.configuration.FileSystem: java.net.URL locateFromURL(java.lang.String,java.lang.String)>(r3, r1) in <org.apache.commons.configuration.ConfigurationUtils: java.net.URL locate(org.apache.commons.configuration.FileSystem,java.lang.String,java.lang.String)> ==> <org.apache.commons.configuration.DefaultFileSystem: java.net.URL locateFromURL(java.lang.String,java.lang.String)>
Global flow here: <org.apache.commons.configuration.ConfigurationUtils: java.net.URL locateFromClasspath(java.lang.String)> calls: <jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)> via: VIRTUAL edge: $r10 = virtualinvoke $r1.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r2) in <org.apache.commons.configuration.ConfigurationUtils: java.net.URL locateFromClasspath(java.lang.String)> ==> <jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)>
Source here: <org.apache.commons.configuration.ConfigurationUtils: java.lang.String getBasePath(java.net.URL)>
Source here: <org.apache.commons.configuration.ConfigurationUtils: java.lang.String getFileName(java.net.URL)>
Source here: <org.apache.commons.configuration.ConfigurationUtils: java.io.File fileFromURL(java.net.URL)>
Source here: <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)>
Start traversal for source: <java.net.URL: java.lang.String getProtocol()>...
Starting from source: 
0: getProtocol
1: fileFromURL
2: getOutputStream
3: getInputStream
Flows from source is finished.
Start traversal for source: <java.io.File: java.net.URI toURI()>...
Starting from source: 
0: toURI
1: toURL
2: getURL
3: load
4: locate
5: loadIncludeFile
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: locate
2: loadIncludeFile
3: getURL
4: load
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.OutputStream getOutputStream()>...
Starting from source: 
0: getOutputStream
Flows from source is finished.
Start traversal for source: <java.net.URL: java.lang.String getFile()>...
Starting from source: 
0: getFile
1: fileFromURL
2: getOutputStream
3: getInputStream
Flows from source is finished.
Start traversal for source: <org.apache.commons.configuration.DefaultFileSystem: java.io.OutputStream getOutputStream(java.net.URL)>...
Starting from source: 
0: getOutputStream
Flows from source is finished.
Start traversal for source: <org.apache.commons.configuration.ConfigurationUtils: java.net.URL locate(org.apache.commons.configuration.FileSystem,java.lang.String,java.lang.String)>...
Starting from source: 
0: locate
1: loadIncludeFile
2: getURL
3: load
Flows from source is finished.
Start traversal for source: <org.apache.commons.configuration.DefaultFileSystem: java.net.URL locateFromURL(java.lang.String,java.lang.String)>...
Starting from source: 
0: locateFromURL
1: locate
2: loadIncludeFile
3: getURL
4: load
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
Flows from source is finished.
Start traversal for source: <org.apache.commons.configuration.ConfigurationUtils: java.io.File fileFromURL(java.net.URL)>...
Starting from source: 
0: fileFromURL
1: getOutputStream
2: getInputStream
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: locate
2: loadIncludeFile
3: getURL
4: load
Flows from source is finished.
Start traversal for source: <org.apache.commons.configuration.ConfigurationUtils: java.net.URL toURL(java.io.File)>...
Starting from source: 
0: toURL
1: getURL
2: load
3: locate
4: loadIncludeFile
Flows from source is finished.
Start traversal for source: <org.apache.commons.configuration.DefaultFileSystem: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.net.URL getURL()>...
Starting from source: 
0: getURL
Flows from source is finished.
Loaded 6763 methods from JAR files. 

Found 74 Source Methods.
Found 30 Sink Methods.
Sources and Sinks collected. 

Methods extraction finished.
All finished.
