***** Loading java classes ***** 

Start reading BOM and BIM...
BOM is loaded with 169 methods.
BIM is loaded with 352 methods.
EOM is loaded with 286 methods.
EIM is loaded with 365 methods.
Start looking for sources and sinks: 
[spark] Starting analysis ...
[main] ERROR soot.jimple.toolkits.typing.fast.TypePromotionUseVisitor - Failed Typing in <java.awt.image.ComponentColorModel: int getRGBComponent(int,int)> at statement opixel#1 = $r0: Is not cast compatible: null_type <-- java.lang.Object
[main] ERROR soot.jimple.toolkits.typing.fast.TypePromotionUseVisitor - Failed Typing in <com.sun.imageio.plugins.tiff.TIFFIFD: int readFieldValue(javax.imageio.stream.ImageInputStream,int,int,java.lang.Object[])> at statement obj#10 = $r0: Is not cast compatible: null_type <-- java.lang.Object
[spark] Done!
Now we build call graphs for class: org.apache.commons.io.filefilter.EmptyFileFilter
Source here: <org.apache.commons.io.filefilter.EmptyFileFilter: boolean accept(java.io.File)>
Now we build call graphs for class: org.apache.commons.io.filefilter.SuffixFileFilter
Source here: <org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File)>
Now we build call graphs for class: org.apache.commons.io.FileCleaningTracker
Source here: <org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>
Now we build call graphs for class: org.apache.commons.io.FileUtils
Source here: <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>
Source here: <org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)>
Source here: <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>
Source here: <org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])>
Source here: <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
Source here: <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>
Source here: <org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
Source here: <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>
Source here: <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)>
Source here: <org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)>
Source here: <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>
Source here: <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)>
Source here: <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>
Now we build call graphs for class: org.mockito.cglib.transform.AbstractProcessTask
Source here: <org.mockito.cglib.transform.AbstractProcessTask: java.util.Collection getFiles()>
Now we build call graphs for class: org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB
Source here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.Category: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.Logger: void info(java.lang.Object)>($r5) in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.Category: void info(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.Logger: void info(java.lang.Object)>($r5) in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.Logger: void trace(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r8.<org.apache.log4j.Logger: void trace(java.lang.Object)>("Update message does not start with \'TABLE_DUMP2|\' or \'TABLE_DUMP|\'. Skipping message...") in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.Logger: void trace(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void trace(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r8.<org.apache.log4j.Logger: void trace(java.lang.Object)>("Update message does not start with \'TABLE_DUMP2|\' or \'TABLE_DUMP|\'. Skipping message...") in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void trace(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.Logger: void trace(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r43.<org.apache.log4j.Logger: void trace(java.lang.Object,java.lang.Throwable)>("Can\'t parse the name of AS, which has sent the update message! Message will be skipped.", $r42) in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.Logger: void trace(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void trace(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r43.<org.apache.log4j.Logger: void trace(java.lang.Object,java.lang.Throwable)>("Can\'t parse the name of AS, which has sent the update message! Message will be skipped.", $r42) in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void trace(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.Logger: void trace(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r21.<org.apache.log4j.Logger: void trace(java.lang.Object)>($r24) in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.Logger: void trace(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void trace(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r21.<org.apache.log4j.Logger: void trace(java.lang.Object)>($r24) in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void trace(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r38.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r41, $r36) in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r38.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r41, $r36) in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> calls: <org.sapegin.bgp.analyse.ribs.ASPath: org.sapegin.bgp.analyse.ribs.ASPathElement getOriginAS()> via: VIRTUAL edge: $r19 = virtualinvoke $r18.<org.sapegin.bgp.analyse.ribs.ASPath: org.sapegin.bgp.analyse.ribs.ASPathElement getOriginAS()>() in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> ==> <org.sapegin.bgp.analyse.ribs.ASPath: org.sapegin.bgp.analyse.ribs.ASPathElement getOriginAS()>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.Category: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r26.<org.apache.log4j.Logger: void info(java.lang.Object)>($r31) in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.Category: void info(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r26.<org.apache.log4j.Logger: void info(java.lang.Object)>($r31) in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.Category: void fatal(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r35.<org.apache.log4j.Logger: void fatal(java.lang.Object,java.lang.Throwable)>("FileNotFound exception during reading RIB", $r34) in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.Category: void fatal(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r35.<org.apache.log4j.Logger: void fatal(java.lang.Object,java.lang.Throwable)>("FileNotFound exception during reading RIB", $r34) in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.Category: void fatal(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r33.<org.apache.log4j.Logger: void fatal(java.lang.Object,java.lang.Throwable)>("IO exception during reading RIB", $r32) in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.Category: void fatal(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r33.<org.apache.log4j.Logger: void fatal(java.lang.Object,java.lang.Throwable)>("IO exception during reading RIB", $r32) in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void announceOrigin(int,org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPathElement)> calls: <org.sapegin.bgp.analyse.ribs.OriginsOnlyOneAS_RIB: void announceOrigin(org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPathElement)> via: VIRTUAL edge: virtualinvoke $r11.<org.sapegin.bgp.analyse.ribs.OriginsOnlyOneAS_RIB: void announceOrigin(org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPathElement)>(r4, r5) in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void announceOrigin(int,org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPathElement)> ==> <org.sapegin.bgp.analyse.ribs.OriginsOnlyOneAS_RIB: void announceOrigin(org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPathElement)>
Global flow here: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void announceOrigin(int,org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPathElement)> calls: <org.sapegin.bgp.analyse.ribs.OriginsOnlyOneAS_RIB: void announceOrigin(org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPathElement)> via: VIRTUAL edge: virtualinvoke $r3.<org.sapegin.bgp.analyse.ribs.OriginsOnlyOneAS_RIB: void announceOrigin(org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPathElement)>(r4, r5) in <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void announceOrigin(int,org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPathElement)> ==> <org.sapegin.bgp.analyse.ribs.OriginsOnlyOneAS_RIB: void announceOrigin(org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPathElement)>
Start traversal for source: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)>...
Starting from source: 
0: loadRIBFromFile
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: loadRIBFromFile
Flows from source is finished.
Now we build call graphs for class: org.apache.commons.math.random.EmpiricalDistributionImpl$StreamDataAdapter
Source here: <org.apache.commons.math.random.EmpiricalDistributionImpl$StreamDataAdapter: void computeBinStats()>
Source here: <org.apache.commons.math.random.EmpiricalDistributionImpl$StreamDataAdapter: void computeStats()>
Now we build call graphs for class: org.sapegin.bgp.analyse.AnalyseSpikesTask
Source here: <org.sapegin.bgp.analyse.AnalyseSpikesTask: void loadFilenames()>
Now we build call graphs for class: org.apache.commons.io.LineIterator
Source here: <org.apache.commons.io.LineIterator: boolean hasNext()>
Now we build call graphs for class: com.mxgraph.util.svg.PathParser
Source here: <com.mxgraph.util.svg.PathParser: void doParse()>
Source here: <com.mxgraph.util.svg.PathParser: void parsem()>
Source here: <com.mxgraph.util.svg.PathParser: void parseM()>
Source here: <com.mxgraph.util.svg.PathParser: void parsel()>
Source here: <com.mxgraph.util.svg.PathParser: void parseL()>
Source here: <com.mxgraph.util.svg.PathParser: void parseh()>
Source here: <com.mxgraph.util.svg.PathParser: void parseH()>
Source here: <com.mxgraph.util.svg.PathParser: void parsev()>
Source here: <com.mxgraph.util.svg.PathParser: void parseV()>
Source here: <com.mxgraph.util.svg.PathParser: void parsec()>
Source here: <com.mxgraph.util.svg.PathParser: void parseC()>
Source here: <com.mxgraph.util.svg.PathParser: void parseq()>
Source here: <com.mxgraph.util.svg.PathParser: void parseQ()>
Source here: <com.mxgraph.util.svg.PathParser: void parses()>
Source here: <com.mxgraph.util.svg.PathParser: void parseS()>
Source here: <com.mxgraph.util.svg.PathParser: void parset()>
Source here: <com.mxgraph.util.svg.PathParser: void parseT()>
Source here: <com.mxgraph.util.svg.PathParser: void parsea()>
Source here: <com.mxgraph.util.svg.PathParser: void parseA()>
Source here: <com.mxgraph.util.svg.PathParser: void skipSubPath()>
Source here: <com.mxgraph.util.svg.PathParser: boolean skipCommaSpaces2()>
Now we build call graphs for class: org.apache.commons.io.DirectoryWalker
Source here: <org.apache.commons.io.DirectoryWalker: void walk(java.io.File,int,java.util.Collection)>
Now we build call graphs for class: org.apache.log4j.pattern.LogEvent
Source here: <org.apache.log4j.pattern.LogEvent: void readLevel(java.io.ObjectInputStream)>
Now we build call graphs for class: org.sapegin.bgp.analyse.updates.UpdatesWithVisibleAS_Path
Source here: <org.sapegin.bgp.analyse.updates.UpdatesWithVisibleAS_Path: void readUpdates()>
Now we build call graphs for class: org.apache.log4j.lf5.viewer.configure.MRUFileManager
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void save()> calls: <org.apache.commons.math.MathRuntimeException: void printStackTrace()> via: VIRTUAL edge: virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void save()> ==> <org.apache.commons.math.MathRuntimeException: void printStackTrace()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void save()> calls: <org.apache.commons.math.MathException: void printStackTrace()> via: VIRTUAL edge: virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void save()> ==> <org.apache.commons.math.MathException: void printStackTrace()>
Source here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.log4j.Priority: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.log4j.Priority: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.jca.ProviderList: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.jca.ProviderList: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.bcel.internal.generic.Instruction: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.bcel.internal.generic.Instruction: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.font.StandardGlyphVector: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.font.StandardGlyphVector: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.calendar.CalendarDate: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.calendar.CalendarDate: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.BuddhistCalendar: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.BuddhistCalendar: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.font.AttributeValues: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.font.AttributeValues: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.pkcs.SignerInfo: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.pkcs.SignerInfo: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.font.TrueTypeFont: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.font.TrueTypeFont: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.log4j.lf5.LogRecord: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.log4j.lf5.LogRecord: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.font.FontStrikeDesc: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.font.FontStrikeDesc: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.locale.LocaleExtensions: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.locale.LocaleExtensions: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.font.ExtendedTextSourceLabel: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.font.ExtendedTextSourceLabel: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.font.GraphicComponent: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.font.GraphicComponent: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.calendar.Era: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.calendar.Era: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.Extension: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.Extension: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor$6: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor$6: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor$5: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor$5: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.mockito.asm.Type: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.mockito.asm.Type: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.log4j.lf5.LogLevel: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.log4j.lf5.LogLevel: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xpath.internal.objects.XObject: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xpath.internal.objects.XObject: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xpath.internal.patterns.StepPattern: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xpath.internal.patterns.StepPattern: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xpath.internal.functions.FuncExtFunction: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xpath.internal.functions.FuncExtFunction: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.bcel.internal.generic.ElementValuePairGen: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.bcel.internal.generic.ElementValuePairGen: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralExpr: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralExpr: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.RDN: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.RDN: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.xpath.regex.RegularExpression: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.xpath.regex.RegularExpression: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.mockito.asm.Label: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.mockito.asm.Label: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.image.IntegerInterleavedRaster: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.image.IntegerInterleavedRaster: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.image.ShortInterleavedRaster: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.image.ShortInterleavedRaster: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.image.ByteInterleavedRaster: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.image.ByteInterleavedRaster: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.mockito.cglib.core.MethodInfo: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.mockito.cglib.core.MethodInfo: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.bcel.internal.generic.Type: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.bcel.internal.generic.Type: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.NodeType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.NodeType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.ResultTreeType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.ResultTreeType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.IntType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.IntType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.jca.ProviderList$PreferredEntry: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.jca.ProviderList$PreferredEntry: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.PolicyInformation: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.PolicyInformation: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.CertificatePolicyMap: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.CertificatePolicyMap: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.DistributionPoint: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.DistributionPoint: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.GeneralName: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.GeneralName: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.AccessDescription: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.AccessDescription: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.GeneralSubtree: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.GeneralSubtree: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.commons.math.linear.ArrayRealVector: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.commons.math.linear.ArrayRealVector: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.jgrapht.graph.DefaultEdge: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.jgrapht.graph.DefaultEdge: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.xml.sax.SAXException: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.xml.sax.SAXException: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.net.ProgressSource: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.net.ProgressSource: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.AppContext: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.AppContext: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.windows.WComponentPeer: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.windows.WComponentPeer: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.calendar.ZoneInfo: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.calendar.ZoneInfo: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.reflect.'annotation'.EnumConstantNotPresentExceptionProxy: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.reflect.'annotation'.EnumConstantNotPresentExceptionProxy: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.reflect.'annotation'.TypeNotPresentExceptionProxy: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.reflect.'annotation'.TypeNotPresentExceptionProxy: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.reflect.'annotation'.AnnotationTypeMismatchExceptionProxy: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.reflect.'annotation'.AnnotationTypeMismatchExceptionProxy: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.bcel.internal.classfile.ConstantUtf8: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.bcel.internal.classfile.ConstantUtf8: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.util.NamedCurve: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.util.NamedCurve: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.SunHints$Value: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.SunHints$Value: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.OSInfo$WindowsVersion: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.OSInfo$WindowsVersion: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.bcel.internal.classfile.Unknown: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.bcel.internal.classfile.Unknown: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.VoidType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.VoidType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.ReferenceType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.ReferenceType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.StringType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.StringType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.NodeSetType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.NodeSetType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.BooleanType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.BooleanType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.RealType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.RealType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.jgrapht.graph.AbstractGraph: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.jgrapht.graph.AbstractGraph: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.X509CertImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.X509CertImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.beans.WildcardTypeImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.font.EAttribute: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.font.EAttribute: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.commons.math.fraction.BigFraction: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.commons.math.fraction.BigFraction: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.xpath.regex.Token: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.xpath.regex.Token: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.AbstractDateTimeDV$DateTimeData: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.AbstractDateTimeDV$DateTimeData: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.PrecisionDecimalDV$XPrecisionDecimal: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.PrecisionDecimalDV$XPrecisionDecimal: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.QNameDV$XQName: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.QNameDV$XQName: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.Base64BinaryDV$XBase64: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.Base64BinaryDV$XBase64: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.HexBinaryDV$XHex: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.HexBinaryDV$XHex: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.DoubleDV$XDouble: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.DoubleDV$XDouble: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.FloatDV$XFloat: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.FloatDV$XFloat: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.DecimalDV$XDecimal: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.DecimalDV$XDecimal: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.ListDV$ListData: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.ListDV$ListData: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <junit.framework.TestCase: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <junit.framework.TestCase: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.pkcs.PKCS9Attribute: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.net.www.MimeEntry: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.net.www.MimeEntry: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.util.ObjectIdentifier: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.util.ObjectIdentifier: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.SunHints$Key: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.SunHints$Key: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.font.Decoration$DecorationImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.font.Decoration$DecorationImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.locale.BaseLocale: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.locale.BaseLocale: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.X509CRLEntryImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.UnparseableExtension: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.UnparseableExtension: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <jdk.internal.jimage.ImageReader$Node: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <jdk.internal.jimage.ImageReader$Node: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.geom.Edge: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.geom.Edge: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.util.DerValue: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.util.DerValue: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.log4j.NameValue: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.log4j.NameValue: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.nio.fs.WindowsPath: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.nio.fs.WindowsPath: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.jca.ProviderConfig: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.jca.ProviderConfig: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.geom.Curve: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.geom.Curve: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.locale.Extension: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.locale.Extension: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.AVA: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.AVA: java.lang.String toString()>
Source here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void createConfigurationDirectory()>
Source here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void load()> calls: <sun.awt.util.IdentityLinkedList$ListItr: void remove()> via: INTERFACE edge: interfaceinvoke $r9.<java.util.Iterator: void remove()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void load()> ==> <sun.awt.util.IdentityLinkedList$ListItr: void remove()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void load()> calls: <sun.awt.util.IdentityLinkedList$ListItr: java.lang.Object next()> via: INTERFACE edge: $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void load()> ==> <sun.awt.util.IdentityLinkedList$ListItr: java.lang.Object next()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void load()> calls: <sun.awt.util.IdentityLinkedList$ListItr: boolean hasNext()> via: INTERFACE edge: $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void load()> ==> <sun.awt.util.IdentityLinkedList$ListItr: boolean hasNext()>
Source here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String getFilename()>
Start traversal for source: <java.net.URL: java.io.InputStream openStream()>...
Starting from source: 
0: openStream
1: getInputStream
2: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getAbsolutePath()>...
Starting from source: 
0: getAbsolutePath
1: getMRUFileList
2: createMRUFileListMI
Flows from source is finished.
Start traversal for source: <java.net.URL: java.lang.String getFile()>...
Starting from source: 
0: getFile
1: getInputStream
2: requestOpenMRU
3: getMRUFileList
4: createMRUFileListMI
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getFilename
2: load
3: save
4: requestExit
5: createConfigurationDirectory
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()>...
Starting from source: 
0: getMRUFileList
1: createMRUFileListMI
Flows from source is finished.
Start traversal for source: <org.apache.commons.io.LineIterator: boolean hasNext()>...
Starting from source: 
0: hasNext
1: load
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String getFilename()>...
Starting from source: 
0: getFilename
1: load
2: save
3: requestExit
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void createConfigurationDirectory()>...
Starting from source: 
0: createConfigurationDirectory
1: load
Flows from source is finished.
Now we build call graphs for class: org.apache.commons.math.random.ValueServer
Source here: <org.apache.commons.math.random.ValueServer: void resetReplayFile()>
Source here: <org.apache.commons.math.random.ValueServer: double getNextReplay()>
Now we build call graphs for class: org.apache.log4j.lf5.util.StreamUtils
Source here: <org.apache.log4j.lf5.util.StreamUtils: void copy(java.io.InputStream,java.io.OutputStream,int)>
Now we build call graphs for class: org.sapegin.bgp.analyse.InternetMap
Source here: <org.sapegin.bgp.analyse.InternetMap: void readMapITP()>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> calls: <org.apache.log4j.Category: void error(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r23.<org.apache.log4j.Logger: void error(java.lang.Object)>("Cannot parse AS number. Line will be ignored.") in <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> ==> <org.apache.log4j.Category: void error(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> calls: <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r23.<org.apache.log4j.Logger: void error(java.lang.Object)>("Cannot parse AS number. Line will be ignored.") in <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> ==> <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> calls: <org.apache.log4j.Category: void error(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r7.<org.apache.log4j.Logger: void error(java.lang.Object)>("Logical error reading map file - as1 or as2 > 65536. Line will be ignored.") in <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> ==> <org.apache.log4j.Category: void error(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> calls: <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r7.<org.apache.log4j.Logger: void error(java.lang.Object)>("Logical error reading map file - as1 or as2 > 65536. Line will be ignored.") in <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> ==> <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> calls: <org.apache.log4j.Category: void warn(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r15.<org.apache.log4j.Logger: void warn(java.lang.Object)>("Logical error reading map file (as1 > as2). Problem will be ignored...") in <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> ==> <org.apache.log4j.Category: void warn(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> calls: <org.apache.log4j.spi.NOPLogger: void warn(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r15.<org.apache.log4j.Logger: void warn(java.lang.Object)>("Logical error reading map file (as1 > as2). Problem will be ignored...") in <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> ==> <org.apache.log4j.spi.NOPLogger: void warn(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> calls: <org.jgrapht.graph.AbstractBaseGraph: boolean addVertex(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r8.<org.jgrapht.graph.SimpleGraph: boolean addVertex(java.lang.Object)>($r9) in <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> ==> <org.jgrapht.graph.AbstractBaseGraph: boolean addVertex(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> calls: <org.jgrapht.graph.AbstractBaseGraph: boolean addVertex(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r10.<org.jgrapht.graph.SimpleGraph: boolean addVertex(java.lang.Object)>($r11) in <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> ==> <org.jgrapht.graph.AbstractBaseGraph: boolean addVertex(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> calls: <org.jgrapht.graph.AbstractBaseGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r12.<org.jgrapht.graph.SimpleGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>($r13, $r14) in <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> ==> <org.jgrapht.graph.AbstractBaseGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> calls: <org.apache.log4j.Category: void fatal(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r20.<org.apache.log4j.Logger: void fatal(java.lang.Object,java.lang.Throwable)>("Error during reading map file", $r19) in <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> ==> <org.apache.log4j.Category: void fatal(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> calls: <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r20.<org.apache.log4j.Logger: void fatal(java.lang.Object,java.lang.Throwable)>("Error during reading map file", $r19) in <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> ==> <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> calls: <org.apache.log4j.Category: void fatal(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r17.<org.apache.log4j.Logger: void fatal(java.lang.Object,java.lang.Throwable)>("Error during reading map file", $r16) in <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> ==> <org.apache.log4j.Category: void fatal(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> calls: <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r17.<org.apache.log4j.Logger: void fatal(java.lang.Object,java.lang.Throwable)>("Error during reading map file", $r16) in <org.sapegin.bgp.analyse.InternetMap: void readMapITP()> ==> <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object,java.lang.Throwable)>
Source here: <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> calls: <org.jgrapht.graph.AbstractBaseGraph: boolean addVertex(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r16.<org.jgrapht.graph.SimpleGraph: boolean addVertex(java.lang.Object)>(r12) in <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> ==> <org.jgrapht.graph.AbstractBaseGraph: boolean addVertex(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> calls: <org.jgrapht.graph.AbstractBaseGraph: boolean addVertex(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r17.<org.jgrapht.graph.SimpleGraph: boolean addVertex(java.lang.Object)>(r15) in <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> ==> <org.jgrapht.graph.AbstractBaseGraph: boolean addVertex(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> calls: <org.jgrapht.graph.AbstractBaseGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r18.<org.jgrapht.graph.SimpleGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>(r12, r15) in <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> ==> <org.jgrapht.graph.AbstractBaseGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> calls: <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r26.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("Error during adding link to the graph. Link will be ignored.", $r25) in <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> ==> <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> calls: <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r26.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("Error during adding link to the graph. Link will be ignored.", $r25) in <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> ==> <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> calls: <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r23.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("Error during reading map file", $r22) in <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> ==> <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> calls: <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r23.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("Error during reading map file", $r22) in <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> ==> <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> calls: <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r20.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("Error during reading map file", $r19) in <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> ==> <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> calls: <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r20.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("Error during reading map file", $r19) in <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()> ==> <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: java.util.ArrayList parseASsetCAIDA(java.lang.String)> calls: <org.apache.log4j.Category: void error(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.Logger: void error(java.lang.Object)>("Logical error reading map file - AS number > 65536 or < 0. AS will be ignored.") in <org.sapegin.bgp.analyse.InternetMap: java.util.ArrayList parseASsetCAIDA(java.lang.String)> ==> <org.apache.log4j.Category: void error(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: java.util.ArrayList parseASsetCAIDA(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.Logger: void error(java.lang.Object)>("Logical error reading map file - AS number > 65536 or < 0. AS will be ignored.") in <org.sapegin.bgp.analyse.InternetMap: java.util.ArrayList parseASsetCAIDA(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: java.util.ArrayList parseASsetCAIDA(java.lang.String)> calls: <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r9.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("Cannot parse AS number. AS will be ignored.", $r8) in <org.sapegin.bgp.analyse.InternetMap: java.util.ArrayList parseASsetCAIDA(java.lang.String)> ==> <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: java.util.ArrayList parseASsetCAIDA(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r9.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("Cannot parse AS number. AS will be ignored.", $r8) in <org.sapegin.bgp.analyse.InternetMap: java.util.ArrayList parseASsetCAIDA(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: java.util.ArrayList parseASsetCAIDA(java.lang.String)> calls: <org.apache.log4j.Category: void error(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r4.<org.apache.log4j.Logger: void error(java.lang.Object)>("Logical error reading map file - AS number > 65536 or < 0. AS will be ignored.") in <org.sapegin.bgp.analyse.InternetMap: java.util.ArrayList parseASsetCAIDA(java.lang.String)> ==> <org.apache.log4j.Category: void error(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: java.util.ArrayList parseASsetCAIDA(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r4.<org.apache.log4j.Logger: void error(java.lang.Object)>("Logical error reading map file - AS number > 65536 or < 0. AS will be ignored.") in <org.sapegin.bgp.analyse.InternetMap: java.util.ArrayList parseASsetCAIDA(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: java.util.ArrayList parseASsetCAIDA(java.lang.String)> calls: <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r7.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("Cannot parse AS number. AS will be ignored. If this AS is not part of AS set or not multi-homed, the line will be ignored too.", $r6) in <org.sapegin.bgp.analyse.InternetMap: java.util.ArrayList parseASsetCAIDA(java.lang.String)> ==> <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: java.util.ArrayList parseASsetCAIDA(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r7.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("Cannot parse AS number. AS will be ignored. If this AS is not part of AS set or not multi-homed, the line will be ignored too.", $r6) in <org.sapegin.bgp.analyse.InternetMap: java.util.ArrayList parseASsetCAIDA(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)>
Source here: <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)> calls: <org.jgrapht.graph.AbstractBaseGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r0.<org.jgrapht.graph.SimpleGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>(r13, r16) in <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)> ==> <org.jgrapht.graph.AbstractBaseGraph: java.lang.Object addEdge(java.lang.Object,java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)> calls: <org.jgrapht.graph.AbstractBaseGraph: boolean addVertex(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r0.<org.jgrapht.graph.SimpleGraph: boolean addVertex(java.lang.Object)>(r16) in <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)> ==> <org.jgrapht.graph.AbstractBaseGraph: boolean addVertex(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)> calls: <org.jgrapht.graph.AbstractBaseGraph: boolean addVertex(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r0.<org.jgrapht.graph.SimpleGraph: boolean addVertex(java.lang.Object)>(r13) in <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)> ==> <org.jgrapht.graph.AbstractBaseGraph: boolean addVertex(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)> calls: <org.jgrapht.graph.AbstractGraph: boolean containsEdge(java.lang.Object,java.lang.Object)> via: VIRTUAL edge: $z2 = virtualinvoke $r17.<org.jgrapht.graph.SimpleGraph: boolean containsEdge(java.lang.Object,java.lang.Object)>(r13, r16) in <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)> ==> <org.jgrapht.graph.AbstractGraph: boolean containsEdge(java.lang.Object,java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)> calls: <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r22.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("Error during reading map file", $r21) in <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)> ==> <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r22.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("Error during reading map file", $r21) in <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)> calls: <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r19.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("Error during reading map file", $r18) in <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)> ==> <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r19.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("Error during reading map file", $r18) in <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)>
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: addCAIDAmap
2: readCAIDAmap
3: readMapITP
Flows from source is finished.
Start traversal for source: <org.sapegin.bgp.analyse.InternetMap: void readCAIDAmap()>...
Starting from source: 
0: readCAIDAmap
Flows from source is finished.
Start traversal for source: <org.sapegin.bgp.analyse.InternetMap: org.jgrapht.graph.SimpleGraph addCAIDAmap(java.lang.String)>...
Starting from source: 
0: addCAIDAmap
Flows from source is finished.
Start traversal for source: <org.apache.commons.io.LineIterator: boolean hasNext()>...
Starting from source: 
0: hasNext
1: addCAIDAmap
2: readCAIDAmap
Flows from source is finished.
Start traversal for source: <org.sapegin.bgp.analyse.InternetMap: void readMapITP()>...
Starting from source: 
0: readMapITP
Flows from source is finished.
Now we build call graphs for class: org.apache.log4j.spi.LoggingEvent
Source here: <org.apache.log4j.spi.LoggingEvent: void readLevel(java.io.ObjectInputStream)>
Now we build call graphs for class: com.mxgraph.util.svg.NumberParser
Source here: <com.mxgraph.util.svg.NumberParser: float parseFloat()>
Now we build call graphs for class: org.sapegin.bgp.analyse.Colours
Source here: <org.sapegin.bgp.analyse.Colours: java.util.ArrayList readColoursFromFile(java.lang.String)>
Global flow here: <org.sapegin.bgp.analyse.Colours: java.util.ArrayList readColoursFromFile(java.lang.String)> calls: <org.apache.log4j.Category: void error(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r6.<org.apache.log4j.Logger: void error(java.lang.Object)>($r9) in <org.sapegin.bgp.analyse.Colours: java.util.ArrayList readColoursFromFile(java.lang.String)> ==> <org.apache.log4j.Category: void error(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.Colours: java.util.ArrayList readColoursFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r6.<org.apache.log4j.Logger: void error(java.lang.Object)>($r9) in <org.sapegin.bgp.analyse.Colours: java.util.ArrayList readColoursFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.Colours: java.util.ArrayList readColoursFromFile(java.lang.String)> calls: <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r11.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("Error during reading gnuplot colour names from file", $r10) in <org.sapegin.bgp.analyse.Colours: java.util.ArrayList readColoursFromFile(java.lang.String)> ==> <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.Colours: java.util.ArrayList readColoursFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r11.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>("Error during reading gnuplot colour names from file", $r10) in <org.sapegin.bgp.analyse.Colours: java.util.ArrayList readColoursFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)>
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: readColoursFromFile
Flows from source is finished.
Start traversal for source: <org.sapegin.bgp.analyse.Colours: java.util.ArrayList readColoursFromFile(java.lang.String)>...
Starting from source: 
0: readColoursFromFile
Flows from source is finished.
Now we build call graphs for class: org.mockito.cglib.core.DebuggingClassWriter$1
Source here: <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()>
Global flow here: <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> calls: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,int)> via: VIRTUAL edge: virtualinvoke $r33.<org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,int)>($r36, 0) in <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> ==> <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,int)>
Global flow here: <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> calls: <org.mockito.cglib.core.DebuggingClassWriter: byte[] access$001(org.mockito.cglib.core.DebuggingClassWriter)> via: STATIC edge: $r2 = staticinvoke <org.mockito.cglib.core.DebuggingClassWriter: byte[] access$001(org.mockito.cglib.core.DebuggingClassWriter)>($r1) in <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> ==> <org.mockito.cglib.core.DebuggingClassWriter: byte[] access$001(org.mockito.cglib.core.DebuggingClassWriter)>
Global flow here: <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> calls: <org.mockito.cglib.core.DebuggingClassWriter: java.lang.String access$100()> via: STATIC edge: $r3 = staticinvoke <org.mockito.cglib.core.DebuggingClassWriter: java.lang.String access$100()>() in <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> ==> <org.mockito.cglib.core.DebuggingClassWriter: java.lang.String access$100()>
Global flow here: <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> calls: <org.mockito.cglib.core.DebuggingClassWriter: java.lang.String access$200(org.mockito.cglib.core.DebuggingClassWriter)> via: STATIC edge: $r5 = staticinvoke <org.mockito.cglib.core.DebuggingClassWriter: java.lang.String access$200(org.mockito.cglib.core.DebuggingClassWriter)>($r4) in <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> ==> <org.mockito.cglib.core.DebuggingClassWriter: java.lang.String access$200(org.mockito.cglib.core.DebuggingClassWriter)>
Global flow here: <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> calls: <org.mockito.cglib.core.DebuggingClassWriter: java.lang.String access$100()> via: STATIC edge: $r9 = staticinvoke <org.mockito.cglib.core.DebuggingClassWriter: java.lang.String access$100()>() in <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> ==> <org.mockito.cglib.core.DebuggingClassWriter: java.lang.String access$100()>
Global flow here: <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> calls: <org.mockito.cglib.core.DebuggingClassWriter: java.lang.String access$100()> via: STATIC edge: $r17 = staticinvoke <org.mockito.cglib.core.DebuggingClassWriter: java.lang.String access$100()>() in <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> ==> <org.mockito.cglib.core.DebuggingClassWriter: java.lang.String access$100()>
Global flow here: <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> calls: <org.mockito.cglib.core.DebuggingClassWriter: boolean access$300()> via: STATIC edge: $z0 = staticinvoke <org.mockito.cglib.core.DebuggingClassWriter: boolean access$300()>() in <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> ==> <org.mockito.cglib.core.DebuggingClassWriter: boolean access$300()>
Global flow here: <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> calls: <org.mockito.cglib.core.DebuggingClassWriter: java.lang.String access$100()> via: STATIC edge: $r26 = staticinvoke <org.mockito.cglib.core.DebuggingClassWriter: java.lang.String access$100()>() in <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> ==> <org.mockito.cglib.core.DebuggingClassWriter: java.lang.String access$100()>
Start traversal for source: <org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File)>...
Starting from source: 
0: accept
1: run
2: executePrivileged
3: toByteArray
Flows from source is finished.
Start traversal for source: <java.io.File: java.io.File getParentFile()>...
Starting from source: 
0: getParentFile
1: run
2: executePrivileged
3: toByteArray
Flows from source is finished.
Start traversal for source: <org.apache.commons.io.filefilter.EmptyFileFilter: boolean accept(java.io.File)>...
Starting from source: 
0: accept
1: run
2: executePrivileged
3: toByteArray
Flows from source is finished.
Start traversal for source: <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
2: toByteArray
Flows from source is finished.
Now we build call graphs for class: org.apache.log4j.FileAppender
Source here: <org.apache.log4j.FileAppender: void setFile(java.lang.String,boolean,boolean,int)>
Now we build call graphs for class: org.apache.log4j.varia.HUPNode
Source here: <org.apache.log4j.varia.HUPNode: void run()>
Now we build call graphs for class: org.mockito.asm.ClassReader
Source here: <org.mockito.asm.ClassReader: byte[] readClass(java.io.InputStream)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.cglib.core.CodeEmitter: void visitMaxs(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitMaxs(int,int)>($i16, $i18) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.cglib.core.CodeEmitter: void visitMaxs(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitEnd()> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitEnd()>() in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitEnd()>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.cglib.transform.impl.UndeclaredThrowableTransformer$1: void visitMaxs(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitMaxs(int,int)>($i16, $i18) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.cglib.transform.impl.UndeclaredThrowableTransformer$1: void visitMaxs(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitAttribute(org.mockito.asm.Attribute)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitAttribute(org.mockito.asm.Attribute)>(r135) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitAttribute(org.mockito.asm.Attribute)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.cglib.core.LocalVariablesSorter: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.mockito.asm.Label,org.mockito.asm.Label,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.mockito.asm.Label,org.mockito.asm.Label,int)>($r143, $r144, r142, $r145, $r146, $i30) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.cglib.core.LocalVariablesSorter: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.mockito.asm.Label,org.mockito.asm.Label,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitLabel(org.mockito.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLabel(org.mockito.asm.Label)>(r140) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitLabel(org.mockito.asm.Label)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitMultiANewArrayInsn(java.lang.String,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)>($r26, $i497) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitMultiANewArrayInsn(java.lang.String,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.cglib.core.LocalVariablesSorter: void visitIincInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitIincInsn(int,int)>($i494, $i495) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.cglib.core.LocalVariablesSorter: void visitIincInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitTypeInsn(int,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>($i492, $r25) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitTypeInsn(int,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>($i490, $r21, $r23, $r24) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>($i489, $r21, $r23, $r24) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitLdcInsn(java.lang.Object)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r16) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitLdcInsn(java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitLdcInsn(java.lang.Object)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r17) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitLdcInsn(java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitIntInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitIntInsn(int,int)>($i484, $i485) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitIntInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitIntInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitIntInsn(int,int)>($i482, $i483) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitIntInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.cglib.core.LocalVariablesSorter: void visitVarInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitVarInsn(int,int)>($i480, $i481) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.cglib.core.LocalVariablesSorter: void visitVarInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitLookupSwitchInsn(org.mockito.asm.Label,int[],org.mockito.asm.Label[])> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLookupSwitchInsn(org.mockito.asm.Label,int[],org.mockito.asm.Label[])>($r12, r138, r139) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitLookupSwitchInsn(org.mockito.asm.Label,int[],org.mockito.asm.Label[])>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitTableSwitchInsn(int,int,org.mockito.asm.Label,org.mockito.asm.Label[])> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitTableSwitchInsn(int,int,org.mockito.asm.Label,org.mockito.asm.Label[])>($i66, $i68, $r14, r137) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitTableSwitchInsn(int,int,org.mockito.asm.Label,org.mockito.asm.Label[])>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.cglib.core.LocalVariablesSorter: void visitVarInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitVarInsn(int,int)>($i478, $i47) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.cglib.core.LocalVariablesSorter: void visitVarInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.cglib.core.LocalVariablesSorter: void visitIincInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitIincInsn(int,int)>($i49, $i477) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.cglib.core.LocalVariablesSorter: void visitIincInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitJumpInsn(int,org.mockito.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitJumpInsn(int,org.mockito.asm.Label)>($i85, $r18) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitJumpInsn(int,org.mockito.asm.Label)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitJumpInsn(int,org.mockito.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitJumpInsn(int,org.mockito.asm.Label)>($i473, $r19) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitJumpInsn(int,org.mockito.asm.Label)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.cglib.core.LocalVariablesSorter: void visitVarInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitVarInsn(int,int)>($i99, $i98) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.cglib.core.LocalVariablesSorter: void visitVarInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.cglib.core.LocalVariablesSorter: void visitVarInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitVarInsn(int,int)>($i102, $i101) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.cglib.core.LocalVariablesSorter: void visitVarInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitInsn(int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitInsn(int)>($i464) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitInsn(int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>(b325, i328, r133, i329, r134) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>($i448, i327, r133, i329, r134) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitLineNumber(int,org.mockito.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLineNumber(int,org.mockito.asm.Label)>($i123, r136) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitLineNumber(int,org.mockito.asm.Label)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitLabel(org.mockito.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLabel(org.mockito.asm.Label)>(r136) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitLabel(org.mockito.asm.Label)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)>($r54, $r55, $r56, $r58) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)>($r54, $r55, $r56, null) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitCode()> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitCode()>() in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitCode()>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: void visitAttribute(org.mockito.asm.Attribute)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitAttribute(org.mockito.asm.Attribute)>(r129) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: void visitAttribute(org.mockito.asm.Attribute)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)> via: INTERFACE edge: $r61 = interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r60, $z43) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodAdapter: org.mockito.asm.AnnotationVisitor visitAnnotationDefault()> via: INTERFACE edge: $r62 = interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: org.mockito.asm.AnnotationVisitor visitAnnotationDefault()>() in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodAdapter: org.mockito.asm.AnnotationVisitor visitAnnotationDefault()>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.ClassWriter: void visitEnd()> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visitEnd()>() in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.ClassWriter: void visitEnd()>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.ClassWriter: org.mockito.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> via: INTERFACE edge: $r9 = interfaceinvoke r6.<org.mockito.asm.ClassVisitor: org.mockito.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i295, $r7, $r8, r128, r130) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.ClassWriter: org.mockito.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.ClassWriter: org.mockito.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)> via: INTERFACE edge: $r82 = interfaceinvoke r6.<org.mockito.asm.ClassVisitor: org.mockito.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>($i214, $r80, $r81, $r85, $r126) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.ClassWriter: org.mockito.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.ClassWriter: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>($r121, $r122, $r123, $i277) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.ClassWriter: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.ClassWriter: void visitAttribute(org.mockito.asm.Attribute)> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visitAttribute(org.mockito.asm.Attribute)>(r112) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.ClassWriter: void visitAttribute(org.mockito.asm.Attribute)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.ClassWriter: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)> via: INTERFACE edge: $r95 = interfaceinvoke r6.<org.mockito.asm.ClassVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r94, $z39) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.ClassWriter: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.ClassWriter: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)>(r117, r118, r119) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.ClassWriter: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.ClassWriter: void visitSource(java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visitSource(java.lang.String,java.lang.String)>(r115, r116) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.ClassWriter: void visitSource(java.lang.String,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.ClassWriter: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>($i10, i250, $r3, r114, r5, $r111) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.ClassWriter: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.AnnotationWriter: void visitEnd()> via: INTERFACE edge: interfaceinvoke $r62.<org.mockito.asm.AnnotationVisitor: void visitEnd()>() in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.AnnotationWriter: void visitEnd()>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitEnd()> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitEnd()>() in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitEnd()>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitMaxs(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitMaxs(int,int)>($i16, $i18) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitMaxs(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitAttribute(org.mockito.asm.Attribute)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitAttribute(org.mockito.asm.Attribute)>(r135) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitAttribute(org.mockito.asm.Attribute)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.mockito.asm.Label,org.mockito.asm.Label,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.mockito.asm.Label,org.mockito.asm.Label,int)>($r143, $r144, r142, $r145, $r146, $i30) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.mockito.asm.Label,org.mockito.asm.Label,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitLabel(org.mockito.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLabel(org.mockito.asm.Label)>(r140) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitLabel(org.mockito.asm.Label)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitMultiANewArrayInsn(java.lang.String,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)>($r26, $i497) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitMultiANewArrayInsn(java.lang.String,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitIincInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitIincInsn(int,int)>($i494, $i495) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitIincInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitTypeInsn(int,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>($i492, $r25) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitTypeInsn(int,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>($i490, $r21, $r23, $r24) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>($i489, $r21, $r23, $r24) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitLdcInsn(java.lang.Object)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r16) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitLdcInsn(java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitLdcInsn(java.lang.Object)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r17) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitLdcInsn(java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitIntInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitIntInsn(int,int)>($i484, $i485) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitIntInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitIntInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitIntInsn(int,int)>($i482, $i483) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitIntInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitVarInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitVarInsn(int,int)>($i480, $i481) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitVarInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitLookupSwitchInsn(org.mockito.asm.Label,int[],org.mockito.asm.Label[])> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLookupSwitchInsn(org.mockito.asm.Label,int[],org.mockito.asm.Label[])>($r12, r138, r139) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitLookupSwitchInsn(org.mockito.asm.Label,int[],org.mockito.asm.Label[])>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitTableSwitchInsn(int,int,org.mockito.asm.Label,org.mockito.asm.Label[])> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitTableSwitchInsn(int,int,org.mockito.asm.Label,org.mockito.asm.Label[])>($i66, $i68, $r14, r137) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitTableSwitchInsn(int,int,org.mockito.asm.Label,org.mockito.asm.Label[])>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitVarInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitVarInsn(int,int)>($i478, $i47) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitVarInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitIincInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitIincInsn(int,int)>($i49, $i477) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitIincInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitJumpInsn(int,org.mockito.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitJumpInsn(int,org.mockito.asm.Label)>($i85, $r18) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitJumpInsn(int,org.mockito.asm.Label)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitJumpInsn(int,org.mockito.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitJumpInsn(int,org.mockito.asm.Label)>($i473, $r19) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitJumpInsn(int,org.mockito.asm.Label)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitVarInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitVarInsn(int,int)>($i99, $i98) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitVarInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitVarInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitVarInsn(int,int)>($i102, $i101) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitVarInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitInsn(int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitInsn(int)>($i464) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitInsn(int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>(b325, i328, r133, i329, r134) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>($i448, i327, r133, i329, r134) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitLineNumber(int,org.mockito.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLineNumber(int,org.mockito.asm.Label)>($i123, r136) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitLineNumber(int,org.mockito.asm.Label)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitLabel(org.mockito.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLabel(org.mockito.asm.Label)>(r136) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitLabel(org.mockito.asm.Label)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)>($r54, $r55, $r56, $r58) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)>($r54, $r55, $r56, null) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitCode()> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitCode()>() in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitCode()>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: void visitAttribute(org.mockito.asm.Attribute)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitAttribute(org.mockito.asm.Attribute)>(r129) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: void visitAttribute(org.mockito.asm.Attribute)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)> via: INTERFACE edge: $r61 = interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r60, $z43) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.MethodWriter: org.mockito.asm.AnnotationVisitor visitAnnotationDefault()> via: INTERFACE edge: $r62 = interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: org.mockito.asm.AnnotationVisitor visitAnnotationDefault()>() in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.MethodWriter: org.mockito.asm.AnnotationVisitor visitAnnotationDefault()>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.FieldWriter: void visitEnd()> via: INTERFACE edge: interfaceinvoke $r82.<org.mockito.asm.FieldVisitor: void visitEnd()>() in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.FieldWriter: void visitEnd()>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.FieldWriter: void visitAttribute(org.mockito.asm.Attribute)> via: INTERFACE edge: interfaceinvoke $r82.<org.mockito.asm.FieldVisitor: void visitAttribute(org.mockito.asm.Attribute)>(r125) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.FieldWriter: void visitAttribute(org.mockito.asm.Attribute)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.FieldWriter: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)> via: INTERFACE edge: $r84 = interfaceinvoke $r82.<org.mockito.asm.FieldVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r83, $z40) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.FieldWriter: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visitEnd()> via: INTERFACE edge: interfaceinvoke $r62.<org.mockito.asm.AnnotationVisitor: void visitEnd()>() in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visitEnd()>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitEnd()> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitEnd()>() in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitEnd()>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitMaxs(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitMaxs(int,int)>($i16, $i18) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitMaxs(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitAttribute(org.mockito.asm.Attribute)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitAttribute(org.mockito.asm.Attribute)>(r135) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitAttribute(org.mockito.asm.Attribute)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.mockito.asm.Label,org.mockito.asm.Label,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.mockito.asm.Label,org.mockito.asm.Label,int)>($r143, $r144, r142, $r145, $r146, $i30) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.mockito.asm.Label,org.mockito.asm.Label,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitLabel(org.mockito.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLabel(org.mockito.asm.Label)>(r140) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitLabel(org.mockito.asm.Label)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)>($r26, $i497) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitIincInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitIincInsn(int,int)>($i494, $i495) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitIincInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitTypeInsn(int,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>($i492, $r25) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitTypeInsn(int,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>($i490, $r21, $r23, $r24) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>($i489, $r21, $r23, $r24) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitLdcInsn(java.lang.Object)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r16) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitLdcInsn(java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitLdcInsn(java.lang.Object)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r17) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitLdcInsn(java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitIntInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitIntInsn(int,int)>($i484, $i485) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitIntInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitIntInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitIntInsn(int,int)>($i482, $i483) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitIntInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitVarInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitVarInsn(int,int)>($i480, $i481) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitVarInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitLookupSwitchInsn(org.mockito.asm.Label,int[],org.mockito.asm.Label[])> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLookupSwitchInsn(org.mockito.asm.Label,int[],org.mockito.asm.Label[])>($r12, r138, r139) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitLookupSwitchInsn(org.mockito.asm.Label,int[],org.mockito.asm.Label[])>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitTableSwitchInsn(int,int,org.mockito.asm.Label,org.mockito.asm.Label[])> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitTableSwitchInsn(int,int,org.mockito.asm.Label,org.mockito.asm.Label[])>($i66, $i68, $r14, r137) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitTableSwitchInsn(int,int,org.mockito.asm.Label,org.mockito.asm.Label[])>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitVarInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitVarInsn(int,int)>($i478, $i47) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitVarInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitIincInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitIincInsn(int,int)>($i49, $i477) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitIincInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitJumpInsn(int,org.mockito.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitJumpInsn(int,org.mockito.asm.Label)>($i85, $r18) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitJumpInsn(int,org.mockito.asm.Label)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitJumpInsn(int,org.mockito.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitJumpInsn(int,org.mockito.asm.Label)>($i473, $r19) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitJumpInsn(int,org.mockito.asm.Label)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitVarInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitVarInsn(int,int)>($i99, $i98) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitVarInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitVarInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitVarInsn(int,int)>($i102, $i101) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitVarInsn(int,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitInsn(int)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitInsn(int)>($i464) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitInsn(int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>(b325, i328, r133, i329, r134) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>($i448, i327, r133, i329, r134) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitLineNumber(int,org.mockito.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLineNumber(int,org.mockito.asm.Label)>($i123, r136) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitLineNumber(int,org.mockito.asm.Label)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitLabel(org.mockito.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitLabel(org.mockito.asm.Label)>(r136) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitLabel(org.mockito.asm.Label)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)>($r54, $r55, $r56, $r58) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)>($r54, $r55, $r56, null) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitTryCatchBlock(org.mockito.asm.Label,org.mockito.asm.Label,org.mockito.asm.Label,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitCode()> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitCode()>() in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitCode()>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: void visitAttribute(org.mockito.asm.Attribute)> via: INTERFACE edge: interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: void visitAttribute(org.mockito.asm.Attribute)>(r129) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: void visitAttribute(org.mockito.asm.Attribute)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)> via: INTERFACE edge: $r61 = interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r60, $z43) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceMethodVisitor: org.mockito.asm.AnnotationVisitor visitAnnotationDefault()> via: INTERFACE edge: $r62 = interfaceinvoke $r9.<org.mockito.asm.MethodVisitor: org.mockito.asm.AnnotationVisitor visitAnnotationDefault()>() in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceMethodVisitor: org.mockito.asm.AnnotationVisitor visitAnnotationDefault()>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceFieldVisitor: void visitEnd()> via: INTERFACE edge: interfaceinvoke $r82.<org.mockito.asm.FieldVisitor: void visitEnd()>() in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceFieldVisitor: void visitEnd()>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceFieldVisitor: void visitAttribute(org.mockito.asm.Attribute)> via: INTERFACE edge: interfaceinvoke $r82.<org.mockito.asm.FieldVisitor: void visitAttribute(org.mockito.asm.Attribute)>(r125) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceFieldVisitor: void visitAttribute(org.mockito.asm.Attribute)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceFieldVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)> via: INTERFACE edge: $r84 = interfaceinvoke $r82.<org.mockito.asm.FieldVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r83, $z40) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceFieldVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceClassVisitor: void visitEnd()> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visitEnd()>() in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceClassVisitor: void visitEnd()>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceClassVisitor: org.mockito.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> via: INTERFACE edge: $r9 = interfaceinvoke r6.<org.mockito.asm.ClassVisitor: org.mockito.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i295, $r7, $r8, r128, r130) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceClassVisitor: org.mockito.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceClassVisitor: org.mockito.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)> via: INTERFACE edge: $r82 = interfaceinvoke r6.<org.mockito.asm.ClassVisitor: org.mockito.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>($i214, $r80, $r81, $r85, $r126) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceClassVisitor: org.mockito.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceClassVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>($r121, $r122, $r123, $i277) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceClassVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceClassVisitor: void visitAttribute(org.mockito.asm.Attribute)> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visitAttribute(org.mockito.asm.Attribute)>(r112) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceClassVisitor: void visitAttribute(org.mockito.asm.Attribute)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceClassVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)> via: INTERFACE edge: $r95 = interfaceinvoke r6.<org.mockito.asm.ClassVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r94, $z39) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceClassVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceClassVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)>(r117, r118, r119) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceClassVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceClassVisitor: void visitSource(java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visitSource(java.lang.String,java.lang.String)>(r115, r116) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceClassVisitor: void visitSource(java.lang.String,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.util.TraceClassVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>($i10, i250, $r3, r114, r5, $r111) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.util.TraceClassVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.ClassAdapter: void visitEnd()> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visitEnd()>() in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.ClassAdapter: void visitEnd()>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.ClassAdapter: org.mockito.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> via: INTERFACE edge: $r9 = interfaceinvoke r6.<org.mockito.asm.ClassVisitor: org.mockito.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i295, $r7, $r8, r128, r130) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.ClassAdapter: org.mockito.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.ClassAdapter: org.mockito.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)> via: INTERFACE edge: $r82 = interfaceinvoke r6.<org.mockito.asm.ClassVisitor: org.mockito.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>($i214, $r80, $r81, $r85, $r126) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.ClassAdapter: org.mockito.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.ClassAdapter: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>($r121, $r122, $r123, $i277) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.ClassAdapter: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.ClassAdapter: void visitAttribute(org.mockito.asm.Attribute)> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visitAttribute(org.mockito.asm.Attribute)>(r112) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.ClassAdapter: void visitAttribute(org.mockito.asm.Attribute)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.ClassAdapter: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)> via: INTERFACE edge: $r95 = interfaceinvoke r6.<org.mockito.asm.ClassVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r94, $z39) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.ClassAdapter: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.ClassAdapter: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)>(r117, r118, r119) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.ClassAdapter: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.asm.ClassAdapter: void visitSource(java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visitSource(java.lang.String,java.lang.String)>(r115, r116) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.asm.ClassAdapter: void visitSource(java.lang.String,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> calls: <org.mockito.cglib.core.ClassNameReader$1: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> via: INTERFACE edge: interfaceinvoke r6.<org.mockito.asm.ClassVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>($i10, i250, $r3, r114, r5, $r111) in <org.mockito.asm.ClassReader: void accept(org.mockito.asm.ClassVisitor,org.mockito.asm.Attribute[],int)> ==> <org.mockito.cglib.core.ClassNameReader$1: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>
Global flow here: <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> calls: <org.mockito.asm.MethodAdapter: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)> via: INTERFACE edge: $r7 = interfaceinvoke r4.<org.mockito.asm.MethodVisitor: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>(i8, $r6, z0) in <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> ==> <org.mockito.asm.MethodAdapter: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>
Global flow here: <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> calls: <org.mockito.asm.MethodAdapter: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)> via: INTERFACE edge: $r8 = interfaceinvoke r4.<org.mockito.asm.MethodVisitor: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>(i8, "Ljava/lang/Synthetic;", 0) in <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> ==> <org.mockito.asm.MethodAdapter: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>
Global flow here: <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visitEnd()> via: INTERFACE edge: interfaceinvoke $r8.<org.mockito.asm.AnnotationVisitor: void visitEnd()>() in <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visitEnd()>
Global flow here: <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> calls: <org.mockito.asm.MethodWriter: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)> via: INTERFACE edge: $r7 = interfaceinvoke r4.<org.mockito.asm.MethodVisitor: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>(i8, $r6, z0) in <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> ==> <org.mockito.asm.MethodWriter: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>
Global flow here: <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> calls: <org.mockito.asm.MethodWriter: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)> via: INTERFACE edge: $r8 = interfaceinvoke r4.<org.mockito.asm.MethodVisitor: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>(i8, "Ljava/lang/Synthetic;", 0) in <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> ==> <org.mockito.asm.MethodWriter: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>
Global flow here: <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visitEnd()> via: INTERFACE edge: interfaceinvoke $r8.<org.mockito.asm.AnnotationVisitor: void visitEnd()>() in <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visitEnd()>
Global flow here: <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> calls: <org.mockito.asm.util.TraceMethodVisitor: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)> via: INTERFACE edge: $r7 = interfaceinvoke r4.<org.mockito.asm.MethodVisitor: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>(i8, $r6, z0) in <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> ==> <org.mockito.asm.util.TraceMethodVisitor: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>
Global flow here: <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> calls: <org.mockito.asm.util.TraceMethodVisitor: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)> via: INTERFACE edge: $r8 = interfaceinvoke r4.<org.mockito.asm.MethodVisitor: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>(i8, "Ljava/lang/Synthetic;", 0) in <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> ==> <org.mockito.asm.util.TraceMethodVisitor: org.mockito.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>
Global flow here: <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> calls: <org.mockito.asm.Type: org.mockito.asm.Type[] getArgumentTypes(java.lang.String)> via: STATIC edge: $r3 = staticinvoke <org.mockito.asm.Type: org.mockito.asm.Type[] getArgumentTypes(java.lang.String)>(r2) in <org.mockito.asm.ClassReader: void readParameterAnnotations(int,java.lang.String,char[],boolean,org.mockito.asm.MethodVisitor)> ==> <org.mockito.asm.Type: org.mockito.asm.Type[] getArgumentTypes(java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValues(int,char[],boolean,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visitEnd()> via: INTERFACE edge: interfaceinvoke r1.<org.mockito.asm.AnnotationVisitor: void visitEnd()>() in <org.mockito.asm.ClassReader: int readAnnotationValues(int,char[],boolean,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visitEnd()>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValues(int,char[],boolean,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visitEnd()> via: INTERFACE edge: interfaceinvoke r1.<org.mockito.asm.AnnotationVisitor: void visitEnd()>() in <org.mockito.asm.ClassReader: int readAnnotationValues(int,char[],boolean,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visitEnd()>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: org.mockito.asm.AnnotationVisitor visitArray(java.lang.String)> via: INTERFACE edge: $r27 = interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: org.mockito.asm.AnnotationVisitor visitArray(java.lang.String)>(r3) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: org.mockito.asm.AnnotationVisitor visitArray(java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r21) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r19) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r15) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r17) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r23) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r13) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r11) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r25) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: org.mockito.asm.AnnotationVisitor visitArray(java.lang.String)> via: INTERFACE edge: $r28 = interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: org.mockito.asm.AnnotationVisitor visitArray(java.lang.String)>(r3) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: org.mockito.asm.AnnotationVisitor visitArray(java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)> via: INTERFACE edge: $r38 = interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)>(r3, $r37) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r9) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visitEnum(java.lang.String,java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>(r3, $r6, $r7) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r5) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r43) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r42) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r40) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r41) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r32) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.AnnotationWriter: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: org.mockito.asm.AnnotationVisitor visitArray(java.lang.String)> via: INTERFACE edge: $r27 = interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: org.mockito.asm.AnnotationVisitor visitArray(java.lang.String)>(r3) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: org.mockito.asm.AnnotationVisitor visitArray(java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r21) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r19) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r15) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r17) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r23) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r13) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r11) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, r25) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: org.mockito.asm.AnnotationVisitor visitArray(java.lang.String)> via: INTERFACE edge: $r28 = interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: org.mockito.asm.AnnotationVisitor visitArray(java.lang.String)>(r3) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: org.mockito.asm.AnnotationVisitor visitArray(java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)> via: INTERFACE edge: $r38 = interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)>(r3, $r37) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: org.mockito.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r9) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>(r3, $r6, $r7) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r5) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r43) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r42) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r40) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r41) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r0.<org.mockito.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r3, $r32) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.util.TraceAnnotationVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> calls: <org.mockito.asm.Type: org.mockito.asm.Type getType(java.lang.String)> via: STATIC edge: $r9 = staticinvoke <org.mockito.asm.Type: org.mockito.asm.Type getType(java.lang.String)>($r8) in <org.mockito.asm.ClassReader: int readAnnotationValue(int,char[],java.lang.String,org.mockito.asm.AnnotationVisitor)> ==> <org.mockito.asm.Type: org.mockito.asm.Type getType(java.lang.String)>
Global flow here: <org.mockito.asm.ClassReader: org.mockito.asm.Attribute readAttribute(org.mockito.asm.Attribute[],java.lang.String,int,int,char[],int,org.mockito.asm.Label[])> calls: <org.mockito.asm.Attribute: org.mockito.asm.Attribute read(org.mockito.asm.ClassReader,int,int,char[],int,org.mockito.asm.Label[])> via: VIRTUAL edge: $r4 = virtualinvoke $r11.<org.mockito.asm.Attribute: org.mockito.asm.Attribute read(org.mockito.asm.ClassReader,int,int,char[],int,org.mockito.asm.Label[])>(r3, i1, i2, null, $i6, null) in <org.mockito.asm.ClassReader: org.mockito.asm.Attribute readAttribute(org.mockito.asm.Attribute[],java.lang.String,int,int,char[],int,org.mockito.asm.Label[])> ==> <org.mockito.asm.Attribute: org.mockito.asm.Attribute read(org.mockito.asm.ClassReader,int,int,char[],int,org.mockito.asm.Label[])>
Global flow here: <org.mockito.asm.ClassReader: java.lang.Object readConst(int,char[])> calls: <org.mockito.asm.Type: org.mockito.asm.Type getObjectType(java.lang.String)> via: STATIC edge: $r5 = staticinvoke <org.mockito.asm.Type: org.mockito.asm.Type getObjectType(java.lang.String)>($r4) in <org.mockito.asm.ClassReader: java.lang.Object readConst(int,char[])> ==> <org.mockito.asm.Type: org.mockito.asm.Type getObjectType(java.lang.String)>
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: readAttribute
2: accept
3: run
4: toByteArray
5: getClassInfo
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: readAttribute
2: accept
3: run
4: toByteArray
5: getClassInfo
Flows from source is finished.
Start traversal for source: <org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File)>...
Starting from source: 
0: accept
1: run
2: toByteArray
3: getClassInfo
Flows from source is finished.
Start traversal for source: <org.apache.commons.io.filefilter.EmptyFileFilter: boolean accept(java.io.File)>...
Starting from source: 
0: accept
1: run
2: toByteArray
3: getClassInfo
Flows from source is finished.
Start traversal for source: <org.mockito.asm.ClassReader: byte[] readClass(java.io.InputStream)>...
Starting from source: 
0: readClass
1: readFrameType
2: accept
3: run
4: toByteArray
5: getClassInfo
Flows from source is finished.
Start traversal for source: <java.io.ObjectInputStream: int readInt()>...
Starting from source: 
0: readInt
1: readLong
2: readConst
3: readAnnotationValue
4: readAnnotationValues
5: readParameterAnnotations
6: accept
7: run
8: toByteArray
9: getClassInfo
Flows from source is finished.
Start traversal for source: <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: readAttribute
2: accept
3: run
4: toByteArray
5: getClassInfo
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: java.lang.String readUTF()>...
Starting from source: 
0: readUTF
1: readUTF8
2: readConst
3: readAnnotationValue
4: readAnnotationValues
5: readParameterAnnotations
6: accept
7: run
8: toByteArray
9: getClassInfo
10: readClass
11: readFrameType
Flows from source is finished.
Now we build call graphs for class: org.apache.log4j.PropertyConfigurator
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: org.apache.log4j.Level getThreshold()> via: INTERFACE edge: $r10 = interfaceinvoke r1.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Level getThreshold()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: org.apache.log4j.Level getThreshold()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: void setThreshold(org.apache.log4j.Level)> via: INTERFACE edge: interfaceinvoke r1.<org.apache.log4j.spi.LoggerRepository: void setThreshold(org.apache.log4j.Level)>($r7) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: void setThreshold(org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: void resetConfiguration()> via: INTERFACE edge: interfaceinvoke r1.<org.apache.log4j.spi.LoggerRepository: void resetConfiguration()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: void resetConfiguration()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Level getThreshold()> via: INTERFACE edge: $r10 = interfaceinvoke r1.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Level getThreshold()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Level getThreshold()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.spi.NOPLoggerRepository: void setThreshold(org.apache.log4j.Level)> via: INTERFACE edge: interfaceinvoke r1.<org.apache.log4j.spi.LoggerRepository: void setThreshold(org.apache.log4j.Level)>($r7) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.spi.NOPLoggerRepository: void setThreshold(org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.spi.NOPLoggerRepository: void resetConfiguration()> via: INTERFACE edge: interfaceinvoke r1.<org.apache.log4j.spi.LoggerRepository: void resetConfiguration()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.spi.NOPLoggerRepository: void resetConfiguration()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("[log4j.configDebug] is deprecated. Use [log4j.debug] instead.") in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)> via: STATIC edge: $z1 = staticinvoke <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>(r15, 1) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void setInternalDebugging(boolean)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void setInternalDebugging(boolean)>($z1) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void setInternalDebugging(boolean)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)> via: STATIC edge: $z0 = staticinvoke <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>($r4, 0) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r16 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>("log4j.threshold", r2) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> via: STATIC edge: $r7 = staticinvoke <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>($r16, $r6) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r13) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>("Finished configuring.") in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Source here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke r25.<java.io.InputStream: void close()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke r25.<java.io.InputStream: void close()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke $r7.<java.io.InputStream: void close()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <sun.net.www.protocol.file.FileURLConnection: java.io.InputStream getInputStream()> via: VIRTUAL edge: $r7 = virtualinvoke $r6.<java.net.URLConnection: java.io.InputStream getInputStream()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <sun.net.www.protocol.file.FileURLConnection: java.io.InputStream getInputStream()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()> via: VIRTUAL edge: virtualinvoke $r13.<java.lang.Thread: void interrupt()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()> via: VIRTUAL edge: virtualinvoke $r18.<java.lang.Thread: void interrupt()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()> via: VIRTUAL edge: virtualinvoke $r20.<java.lang.Thread: void interrupt()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()> via: VIRTUAL edge: virtualinvoke $r24.<java.lang.Thread: void interrupt()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r5) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r30, $r19) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r35) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r1 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>("log4j.loggerFactory", r0) in <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r6) in <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> via: STATIC edge: $r10 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>($r1, $r13, $r9) in <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)> calls: <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>($r12, r0, "log4j.factory.") in <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)> ==> <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getRootLogger()> via: INTERFACE edge: $r3 = interfaceinvoke r2.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getRootLogger()>() in <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getRootLogger()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getRootLogger()> via: INTERFACE edge: $r3 = interfaceinvoke r2.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getRootLogger()>() in <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getRootLogger()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r1 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>("log4j.rootLogger", r0) in <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: r7 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>("log4j.rootCategory", r0) in <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>("Could not find root logger information. Is this OK?") in <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: void setThrowableRenderer(org.apache.log4j.spi.ThrowableRenderer)> via: INTERFACE edge: interfaceinvoke $r11.<org.apache.log4j.spi.ThrowableRendererSupport: void setThrowableRenderer(org.apache.log4j.spi.ThrowableRenderer)>($r12) in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: void setThrowableRenderer(org.apache.log4j.spi.ThrowableRenderer)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)> via: INTERFACE edge: $r21 = interfaceinvoke r4.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>(r18, $r20) in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)> via: INTERFACE edge: $r21 = interfaceinvoke r4.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>(r18, $r20) in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)> via: VIRTUAL edge: virtualinvoke $r10.<org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>(r0, "log4j.throwableRenderer.") in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r19 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>(r3, r0) in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r15 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>(r3, r0) in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>($r16, $r14, $r15) in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)> via: STATIC edge: $r9 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>(r0, "log4j.throwableRenderer", $r22, null) in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>("Could not instantiate throwableRenderer.") in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> calls: <org.apache.log4j.Category: void setAdditivity(boolean)> via: VIRTUAL edge: virtualinvoke r20.<org.apache.log4j.Logger: void setAdditivity(boolean)>($z1) in <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> ==> <org.apache.log4j.Category: void setAdditivity(boolean)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r6 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>($r4, r5) in <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r13) in <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> calls: <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)> via: STATIC edge: $z1 = staticinvoke <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>($r6, 1) in <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> ==> <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r19) in <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.spi.RootLogger: void setLevel(org.apache.log4j.Level)> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r30) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.spi.RootLogger: void setLevel(org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.spi.RootLogger: void setLevel(org.apache.log4j.Level)> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>(null) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.spi.RootLogger: void setLevel(org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.Category: void addAppender(org.apache.log4j.Appender)> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r20) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Category: void addAppender(org.apache.log4j.Appender)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.Category: void removeAllAppenders()> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void removeAllAppenders()>() in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Category: void removeAllAppenders()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.Category: void setLevel(org.apache.log4j.Level)> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r30) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Category: void setLevel(org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.Category: void setLevel(org.apache.log4j.Level)> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>(null) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Category: void setLevel(org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void addAppender(org.apache.log4j.Appender)> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r20) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void addAppender(org.apache.log4j.Appender)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void removeAllAppenders()> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void removeAllAppenders()>() in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void removeAllAppenders()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.Category: org.apache.log4j.Level getLevel()> via: VIRTUAL edge: $r36 = virtualinvoke r10.<org.apache.log4j.Logger: org.apache.log4j.Level getLevel()>() in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Category: org.apache.log4j.Level getLevel()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void setLevel(org.apache.log4j.Level)> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r30) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void setLevel(org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void setLevel(org.apache.log4j.Level)> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>(null) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void setLevel(org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r8) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r26) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("The root logger cannot be set to null.") in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> via: STATIC edge: $r30 = staticinvoke <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>($r21, $r29) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r38) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r17) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.WeakIdentityHashMap$1$1: java.lang.Object next()> via: INTERFACE edge: $r50 = interfaceinvoke $r40.<java.util.Iterator: java.lang.Object next()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.WeakIdentityHashMap$1$1: java.lang.Object next()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.WeakIdentityHashMap$1$1: boolean hasNext()> via: INTERFACE edge: $z2 = interfaceinvoke $r40.<java.util.Iterator: boolean hasNext()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.WeakIdentityHashMap$1$1: boolean hasNext()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.WeakIdentityHashMap$2$1: java.util.Map$Entry next()> via: INTERFACE edge: $r50 = interfaceinvoke $r40.<java.util.Iterator: java.lang.Object next()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.WeakIdentityHashMap$2$1: java.util.Map$Entry next()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.WeakIdentityHashMap$2$1: boolean hasNext()> via: INTERFACE edge: $z2 = interfaceinvoke $r40.<java.util.Iterator: boolean hasNext()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.WeakIdentityHashMap$2$1: boolean hasNext()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.WeakIdentityHashMap$2$1$1: java.lang.Object getValue()> via: INTERFACE edge: $r53 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getValue()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.WeakIdentityHashMap$2$1$1: java.lang.Object getValue()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.WeakIdentityHashMap$2$1$1: java.lang.Object getKey()> via: INTERFACE edge: $r52 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getKey()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.WeakIdentityHashMap$2$1$1: java.lang.Object getKey()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.WeakIdentityHashMap$2$1$1: java.lang.Object getKey()> via: INTERFACE edge: $r55 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getKey()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.WeakIdentityHashMap$2$1$1: java.lang.Object getKey()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.util.IdentityLinkedList$ListItr: java.lang.Object next()> via: INTERFACE edge: $r50 = interfaceinvoke $r40.<java.util.Iterator: java.lang.Object next()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.util.IdentityLinkedList$ListItr: java.lang.Object next()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.util.IdentityLinkedList$ListItr: boolean hasNext()> via: INTERFACE edge: $z2 = interfaceinvoke $r40.<java.util.Iterator: boolean hasNext()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.util.IdentityLinkedList$ListItr: boolean hasNext()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r84) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)> via: STATIC edge: $r13 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>(r11, $r6, $r85, null) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r78) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)> via: STATIC edge: $r58 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>(r11, $r10, $r86, null) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r63) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>($r73, r11, $r67) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r72) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r91 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>($r90, r11) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)> via: STATIC edge: $r15 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>(r11, $r90, $r92, null) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r20) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>($r56, $r22, $r44) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r49) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>($r79, r11, $r96) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r101) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)> via: INTERFACE edge: $r19 = interfaceinvoke r16.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>($r11, $r17) in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String)> via: INTERFACE edge: $r19 = interfaceinvoke r16.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String)>($r11) in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getRootLogger()> via: INTERFACE edge: $r18 = interfaceinvoke r16.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getRootLogger()>() in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getRootLogger()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)> via: INTERFACE edge: $r19 = interfaceinvoke r16.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>($r11, $r17) in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String)> via: INTERFACE edge: $r19 = interfaceinvoke r16.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String)>($r11) in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getRootLogger()> via: INTERFACE edge: $r18 = interfaceinvoke r16.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getRootLogger()>() in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getRootLogger()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r6 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>($r4, r5) in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)> via: STATIC edge: $z0 = staticinvoke <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>($r6, 0) in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r11 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>($r10, r5) in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r24 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>($r23, r5) in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.SortedKeyEnumeration: java.lang.Object nextElement()> via: INTERFACE edge: $r10 = interfaceinvoke $r65.<java.util.Enumeration: java.lang.Object nextElement()>() in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.SortedKeyEnumeration: java.lang.Object nextElement()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.SortedKeyEnumeration: boolean hasMoreElements()> via: INTERFACE edge: $z1 = interfaceinvoke $r65.<java.util.Enumeration: boolean hasMoreElements()>() in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.SortedKeyEnumeration: boolean hasMoreElements()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.config.PropertySetter: void activate()> via: VIRTUAL edge: virtualinvoke $r67.<org.apache.log4j.config.PropertySetter: void activate()>() in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.config.PropertySetter: void activate()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)> via: VIRTUAL edge: virtualinvoke $r67.<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>($r46, $r45) in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r50 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>(r56, r7) in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r26) in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> via: STATIC edge: $r28 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>($r11, $r60, null) in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r42) in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r16) in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>
Start traversal for source: <java.net.URLConnection: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: doConfigure
2: selectAndConfigure
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: parseAppenderFilters
2: parseAppender
3: parseErrorHandler
4: parseCategory
5: parseCatsAndRenderers
6: doConfigure
7: selectAndConfigure
8: configureRootCategory
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: doConfigure
2: selectAndConfigure
Flows from source is finished.
Start traversal for source: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>...
Starting from source: 
0: doConfigure
1: selectAndConfigure
Flows from source is finished.
Start traversal for source: <org.apache.commons.io.LineIterator: boolean hasNext()>...
Starting from source: 
0: hasNext
1: parseAppender
2: parseErrorHandler
3: parseCategory
4: parseCatsAndRenderers
5: doConfigure
6: selectAndConfigure
7: configureRootCategory
Flows from source is finished.
Now we build call graphs for class: org.junit.rules.TemporaryFolder
Source here: <org.junit.rules.TemporaryFolder: java.io.File newFile()>
Source here: <org.junit.rules.TemporaryFolder: java.io.File newFolder()>
Source here: <org.junit.rules.TemporaryFolder: void recursiveDelete(java.io.File)>
Now we build call graphs for class: org.apache.log4j.xml.DOMConfigurator$2
Source here: <org.apache.log4j.xml.DOMConfigurator$2: org.w3c.dom.Document parse(javax.xml.parsers.DocumentBuilder)>
Now we build call graphs for class: org.apache.commons.io.filefilter.NameFileFilter
Source here: <org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File)>
Now we build call graphs for class: org.sapegin.bgp.analyse.updates.UpdatesFromVisibleASsWithOriginAS
Source here: <org.sapegin.bgp.analyse.updates.UpdatesFromVisibleASsWithOriginAS: void readUpdates()>
Now we build call graphs for class: org.apache.commons.lang3.SystemUtils
Source here: <org.apache.commons.lang3.SystemUtils: java.io.File getJavaHome()>
Source here: <org.apache.commons.lang3.SystemUtils: java.io.File getJavaIoTmpDir()>
Source here: <org.apache.commons.lang3.SystemUtils: java.lang.String getSystemProperty(java.lang.String)>
Source here: <org.apache.commons.lang3.SystemUtils: java.io.File getUserDir()>
Source here: <org.apache.commons.lang3.SystemUtils: java.io.File getUserHome()>
Start traversal for source: <org.apache.commons.lang3.SystemUtils: java.lang.String getSystemProperty(java.lang.String)>...
Starting from source: 
0: getSystemProperty
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getSystemProperty
Flows from source is finished.
Now we build call graphs for class: org.apache.commons.io.filefilter.AbstractFileFilter
Source here: <org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>
Now we build call graphs for class: org.apache.commons.math.random.EmpiricalDistributionImpl
Source here: <org.apache.commons.math.random.EmpiricalDistributionImpl: void load(java.net.URL)>
Now we build call graphs for class: org.apache.log4j.EnhancedThrowableRenderer
Source here: <org.apache.log4j.EnhancedThrowableRenderer: java.lang.String formatElement(java.lang.Object,java.util.Map)>
Now we build call graphs for class: org.jgrapht.experimental.GraphReader
Source here: <org.jgrapht.experimental.GraphReader: java.lang.String[] skipComments()>
Now we build call graphs for class: org.apache.commons.io.CopyUtils
Source here: <org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)>
Source here: <org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)>
Now we build call graphs for class: org.apache.commons.io.input.ProxyReader
Source here: <org.apache.commons.io.input.ProxyReader: int read()>
Source here: <org.apache.commons.io.input.ProxyReader: int read(char[])>
Source here: <org.apache.commons.io.input.ProxyReader: int read(char[],int,int)>
Now we build call graphs for class: org.apache.log4j.jdbc.JDBCAppender
Source here: <org.apache.log4j.jdbc.JDBCAppender: void execute(java.lang.String)>
Now we build call graphs for class: org.sapegin.bgp.analyse.ases.FixPeerAS
Source here: <org.sapegin.bgp.analyse.ases.FixPeerAS: void fixAllUpdates()>
Source here: <org.sapegin.bgp.analyse.ases.FixPeerAS: void checkAndFixUpdateFile(java.lang.String)>
Source here: <org.sapegin.bgp.analyse.ases.FixPeerAS: void fixUpdateFile(java.lang.String)>
Now we build call graphs for class: org.apache.log4j.helpers.OptionConverter
Source here: <org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r8) in <org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r10) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()> via: VIRTUAL edge: virtualinvoke $r44.<java.lang.Thread: void interrupt()>() in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> via: STATIC edge: $r21 = staticinvoke <org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>($r0, r1) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r12) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)> via: STATIC edge: $r13 = staticinvoke <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>($r2) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r58) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r52, $r46) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r68, $r42) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r41, $r36) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r35, $r30) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r29, $r22) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r9, $r4) in <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)> via: STATIC edge: $r2 = staticinvoke <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>(r0) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r12) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r18) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r24) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r33) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r57, $r52) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r51, $r46) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r45, $r40) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r39, $r34) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>
Source here: <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> via: INTERFACE edge: interfaceinvoke r19.<org.apache.log4j.spi.Configurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>(r0, r3) in <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r7) in <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r14) in <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: substVars
2: findAndSubst
3: configureRootCategory
4: configureLoggerFactory
5: parseCatsAndRenderers
6: setProperties
7: parseAdditivityForLogger
8: parseAppender
9: parseErrorHandler
10: parseAppenderFilters
11: doConfigure
12: selectAndConfigure
13: instantiateByKey
14: getSystemProperty
Flows from source is finished.
Start traversal for source: <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>...
Starting from source: 
0: selectAndConfigure
Flows from source is finished.
Start traversal for source: <org.apache.commons.lang3.SystemUtils: java.lang.String getSystemProperty(java.lang.String)>...
Starting from source: 
0: getSystemProperty
1: substVars
2: findAndSubst
3: configureRootCategory
4: configureLoggerFactory
5: parseCatsAndRenderers
6: setProperties
7: parseAdditivityForLogger
8: parseAppender
9: parseErrorHandler
10: parseAppenderFilters
11: doConfigure
12: selectAndConfigure
13: instantiateByKey
Flows from source is finished.
Start traversal for source: <org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getSystemProperty
1: substVars
2: findAndSubst
3: configureRootCategory
4: configureLoggerFactory
5: parseCatsAndRenderers
6: setProperties
7: parseAdditivityForLogger
8: parseAppender
9: parseErrorHandler
10: parseAppenderFilters
11: doConfigure
12: selectAndConfigure
13: instantiateByKey
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: instantiateByClassName
2: configureLoggerFactory
3: addRenderer
4: convertArg
5: parseAppenderFilters
6: selectAndConfigure
7: instantiateByKey
8: setProperties
9: parseAppender
10: parseCatsAndRenderers
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: substVars
2: findAndSubst
3: configureRootCategory
4: configureLoggerFactory
5: parseCatsAndRenderers
6: setProperties
7: parseAdditivityForLogger
8: parseAppender
9: parseErrorHandler
10: parseAppenderFilters
11: doConfigure
12: selectAndConfigure
13: instantiateByKey
14: getSystemProperty
Flows from source is finished.
Start traversal for source: <java.net.URL: java.lang.String getFile()>...
Starting from source: 
0: getFile
1: selectAndConfigure
Flows from source is finished.
Start traversal for source: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>...
Starting from source: 
0: doConfigure
1: selectAndConfigure
Flows from source is finished.
Now we build call graphs for class: org.apache.commons.io.IOUtils
Source here: <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)>
Source here: <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>
Source here: <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)>
Source here: <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)>
Now we build call graphs for class: org.apache.log4j.net.SMTPAppender
Source here: <org.apache.log4j.net.SMTPAppender: javax.mail.Session createSession()>
Now we build call graphs for class: org.sapegin.bgp.analyse.updates.UpdatesFromVisibleASs
Source here: <org.sapegin.bgp.analyse.updates.UpdatesFromVisibleASs: void readUpdates()>
Now we build call graphs for class: com.mxgraph.io.gd.mxGdDocument
Source here: <com.mxgraph.io.gd.mxGdDocument: void parse(java.lang.String)>
Now we build call graphs for class: com.mxgraph.util.svg.AbstractParser
Source here: <com.mxgraph.util.svg.AbstractParser: void skipSpaces()>
Source here: <com.mxgraph.util.svg.AbstractParser: void skipCommaSpaces()>
Now we build call graphs for class: com.mxgraph.util.svg.NormalizingReader
Source here: <com.mxgraph.util.svg.NormalizingReader: int read(char[],int,int)>
Now we build call graphs for class: com.mxgraph.util.png.mxPngTextDecoder
Source here: <com.mxgraph.util.png.mxPngTextDecoder: java.util.Map decodeCompressedText(java.io.InputStream)>
Now we build call graphs for class: org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics
Source here: <org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics: java.lang.String toString()>
Now we build call graphs for class: com.mxgraph.canvas.mxSvgCanvas
Source here: <com.mxgraph.canvas.mxSvgCanvas: java.io.InputStream getResource(java.lang.String)>
Source here: <com.mxgraph.canvas.mxSvgCanvas: java.lang.String createDataUrl(java.lang.String)>
Now we build call graphs for class: org.sapegin.bgp.analyse.ases.ASsFileGenerator
Source here: <org.sapegin.bgp.analyse.ases.ASsFileGenerator: java.lang.String generate()>
Now we build call graphs for class: org.apache.log4j.varia.Roller
Source here: <org.apache.log4j.varia.Roller: void roll()>
Now we build call graphs for class: org.sapegin.bgp.analyse.spikes.SpikeCollection
Global flow here: <org.sapegin.bgp.analyse.spikes.SpikeCollection: boolean addSpike(long,org.sapegin.bgp.analyse.spikes.Spike,org.sapegin.bgp.analyse.spikes.MonitoredAS)> calls: <org.sapegin.bgp.analyse.spikes.SingleASspikes: boolean addSpike(long,org.sapegin.bgp.analyse.spikes.Spike)> via: VIRTUAL edge: $z1 = virtualinvoke $r8.<org.sapegin.bgp.analyse.spikes.SingleASspikes: boolean addSpike(long,org.sapegin.bgp.analyse.spikes.Spike)>(l0, r4) in <org.sapegin.bgp.analyse.spikes.SpikeCollection: boolean addSpike(long,org.sapegin.bgp.analyse.spikes.Spike,org.sapegin.bgp.analyse.spikes.MonitoredAS)> ==> <org.sapegin.bgp.analyse.spikes.SingleASspikes: boolean addSpike(long,org.sapegin.bgp.analyse.spikes.Spike)>
Global flow here: <org.sapegin.bgp.analyse.spikes.SpikeCollection: boolean addSpike(long,org.sapegin.bgp.analyse.spikes.Spike,org.sapegin.bgp.analyse.spikes.MonitoredAS)> calls: <org.sapegin.bgp.analyse.spikes.SingleASspikes: boolean addSpike(long,org.sapegin.bgp.analyse.spikes.Spike)> via: VIRTUAL edge: virtualinvoke $r3.<org.sapegin.bgp.analyse.spikes.SingleASspikes: boolean addSpike(long,org.sapegin.bgp.analyse.spikes.Spike)>(l0, r4) in <org.sapegin.bgp.analyse.spikes.SpikeCollection: boolean addSpike(long,org.sapegin.bgp.analyse.spikes.Spike,org.sapegin.bgp.analyse.spikes.MonitoredAS)> ==> <org.sapegin.bgp.analyse.spikes.SingleASspikes: boolean addSpike(long,org.sapegin.bgp.analyse.spikes.Spike)>
Source here: <org.sapegin.bgp.analyse.spikes.SpikeCollection: void printAllAround(java.lang.String,org.sapegin.bgp.analyse.spikes.Spike,long,long,org.sapegin.bgp.analyse.Colours)>
Now we build call graphs for class: org.apache.log4j.lf5.viewer.LogBrokerMonitor
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setMaxNumberOfLogRecords(int)> calls: <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setMaxNumberOfLogRecords(int)> ==> <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setMaxNumberOfLogRecords(int)> calls: <org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setMaxNumberOfLogRecords(int)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setMaxNumberOfLogRecords(int)>(i0) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setMaxNumberOfLogRecords(int)> ==> <org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setMaxNumberOfLogRecords(int)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setFrameSize(int,int)> calls: <sun.awt.SunToolkit: java.awt.Dimension getScreenSize()> via: VIRTUAL edge: $r1 = virtualinvoke $r0.<java.awt.Toolkit: java.awt.Dimension getScreenSize()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setFrameSize(int,int)> ==> <sun.awt.SunToolkit: java.awt.Dimension getScreenSize()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setFrameSize(int,int)> calls: <sun.awt.HeadlessToolkit: java.awt.Dimension getScreenSize()> via: VIRTUAL edge: $r1 = virtualinvoke $r0.<java.awt.Toolkit: java.awt.Dimension getScreenSize()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setFrameSize(int,int)> ==> <sun.awt.HeadlessToolkit: java.awt.Dimension getScreenSize()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setNDCLogRecordFilter(java.lang.String)> calls: <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setNDCLogRecordFilter(java.lang.String)> ==> <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setNDCLogRecordFilter(java.lang.String)> calls: <org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setLogRecordFilter(org.apache.log4j.lf5.LogRecordFilter)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setLogRecordFilter(org.apache.log4j.lf5.LogRecordFilter)>($r4) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setNDCLogRecordFilter(java.lang.String)> ==> <org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setLogRecordFilter(org.apache.log4j.lf5.LogRecordFilter)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void sortByNDC()> calls: <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void sortByNDC()> ==> <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void sortByNDC()> calls: <org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setLogRecordFilter(org.apache.log4j.lf5.LogRecordFilter)> via: VIRTUAL edge: virtualinvoke $r3.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setLogRecordFilter(org.apache.log4j.lf5.LogRecordFilter)>($r4) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void sortByNDC()> ==> <org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setLogRecordFilter(org.apache.log4j.lf5.LogRecordFilter)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void findSearchText()> calls: <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void findSearchText()> ==> <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void findSearchText()> calls: <org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List getFilteredRecords()> via: VIRTUAL edge: $r4 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List getFilteredRecords()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void findSearchText()> ==> <org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List getFilteredRecords()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void selectRow(int)> calls: <org.apache.log4j.lf5.viewer.LF5SwingUtils: void selectRow(int,javax.swing.JTable,javax.swing.JScrollPane)> via: STATIC edge: staticinvoke <org.apache.log4j.lf5.viewer.LF5SwingUtils: void selectRow(int,javax.swing.JTable,javax.swing.JScrollPane)>(i0, $r2, $r1) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void selectRow(int)> ==> <org.apache.log4j.lf5.viewer.LF5SwingUtils: void selectRow(int,javax.swing.JTable,javax.swing.JScrollPane)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean matches(org.apache.log4j.lf5.LogRecord,java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: java.lang.String getNDC()> via: VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.log4j.lf5.LogRecord: java.lang.String getNDC()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean matches(org.apache.log4j.lf5.LogRecord,java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: java.lang.String getNDC()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean matches(org.apache.log4j.lf5.LogRecord,java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: java.lang.String getMessage()> via: VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.log4j.lf5.LogRecord: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean matches(org.apache.log4j.lf5.LogRecord,java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setFontSize(java.awt.Component,int)> calls: <org.apache.log4j.lf5.viewer.LogTable: void setFont(java.awt.Font)> via: VIRTUAL edge: virtualinvoke r0.<java.awt.Component: void setFont(java.awt.Font)>($r2) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setFontSize(java.awt.Component,int)> ==> <org.apache.log4j.lf5.viewer.LogTable: void setFont(java.awt.Font)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getRecordsDisplayedMessage()> calls: <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getRecordsDisplayedMessage()> ==> <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getRecordsDisplayedMessage()> calls: <org.apache.log4j.lf5.viewer.FilteredLogTableModel: int getTotalRowCount()> via: VIRTUAL edge: $i1 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: int getTotalRowCount()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getRecordsDisplayedMessage()> ==> <org.apache.log4j.lf5.viewer.FilteredLogTableModel: int getTotalRowCount()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getRecordsDisplayedMessage()> calls: <org.apache.log4j.lf5.viewer.FilteredLogTableModel: int getRowCount()> via: VIRTUAL edge: $i0 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: int getRowCount()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getRecordsDisplayedMessage()> ==> <org.apache.log4j.lf5.viewer.FilteredLogTableModel: int getRowCount()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addTableModelProperties()> calls: <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addTableModelProperties()> ==> <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void makeLogTableListenToCategoryExplorer()> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void makeLogTableListenToCategoryExplorer()> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void makeLogTableListenToCategoryExplorer()> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: void addActionListener(java.awt.event.ActionListener)> via: VIRTUAL edge: virtualinvoke $r3.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: void addActionListener(java.awt.event.ActionListener)>($r0) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void makeLogTableListenToCategoryExplorer()> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: void addActionListener(java.awt.event.ActionListener)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JMenuItem createSubMenuItem(org.apache.log4j.lf5.LogLevel)> calls: <org.apache.log4j.lf5.LogLevel: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke r1.<org.apache.log4j.lf5.LogLevel: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JMenuItem createSubMenuItem(org.apache.log4j.lf5.LogLevel)> ==> <org.apache.log4j.lf5.LogLevel: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JMenuItem createSubMenuItem(org.apache.log4j.lf5.LogLevel)> calls: <org.apache.log4j.lf5.LogLevel: java.lang.String toString()> via: VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.log4j.lf5.LogLevel: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JMenuItem createSubMenuItem(org.apache.log4j.lf5.LogLevel)> ==> <org.apache.log4j.lf5.LogLevel: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void showLogLevelColorChangeDialog(javax.swing.JMenuItem,org.apache.log4j.lf5.LogLevel)> calls: <org.apache.log4j.lf5.LogLevel: void setLogLevelColorMap(org.apache.log4j.lf5.LogLevel,java.awt.Color)> via: VIRTUAL edge: virtualinvoke r5.<org.apache.log4j.lf5.LogLevel: void setLogLevelColorMap(org.apache.log4j.lf5.LogLevel,java.awt.Color)>(r5, $r4) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void showLogLevelColorChangeDialog(javax.swing.JMenuItem,org.apache.log4j.lf5.LogLevel)> ==> <org.apache.log4j.lf5.LogLevel: void setLogLevelColorMap(org.apache.log4j.lf5.LogLevel,java.awt.Color)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void showLogLevelColorChangeDialog(javax.swing.JMenuItem,org.apache.log4j.lf5.LogLevel)> calls: <org.apache.log4j.lf5.viewer.FilteredLogTableModel: void refresh()> via: VIRTUAL edge: virtualinvoke $r7.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: void refresh()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void showLogLevelColorChangeDialog(javax.swing.JMenuItem,org.apache.log4j.lf5.LogLevel)> ==> <org.apache.log4j.lf5.viewer.FilteredLogTableModel: void refresh()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void showLogLevelColorChangeDialog(javax.swing.JMenuItem,org.apache.log4j.lf5.LogLevel)> calls: <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()> via: VIRTUAL edge: $r7 = virtualinvoke $r6.<org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void showLogLevelColorChangeDialog(javax.swing.JMenuItem,org.apache.log4j.lf5.LogLevel)> ==> <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem createMenuItem(org.apache.log4j.lf5.LogLevel)> calls: <org.apache.log4j.lf5.LogLevel: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke r1.<org.apache.log4j.lf5.LogLevel: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem createMenuItem(org.apache.log4j.lf5.LogLevel)> ==> <org.apache.log4j.lf5.LogLevel: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem createMenuItem(org.apache.log4j.lf5.LogLevel)> calls: <org.apache.log4j.lf5.LogLevel: java.lang.String toString()> via: VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.log4j.lf5.LogLevel: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem createMenuItem(org.apache.log4j.lf5.LogLevel)> ==> <org.apache.log4j.lf5.LogLevel: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem createLogTableColumnMenuItem(org.apache.log4j.lf5.viewer.LogTableColumn)> calls: <org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke r1.<org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem createLogTableColumnMenuItem(org.apache.log4j.lf5.viewer.LogTableColumn)> ==> <org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem createLogTableColumnMenuItem(org.apache.log4j.lf5.viewer.LogTableColumn)> calls: <org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String toString()> via: VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem createLogTableColumnMenuItem(org.apache.log4j.lf5.viewer.LogTableColumn)> ==> <org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void createMRUFileListMI(javax.swing.JMenu)> calls: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void createMRUFileListMI(javax.swing.JMenu)> ==> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void saveConfiguration()> calls: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> via: VIRTUAL edge: virtualinvoke $r1.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void saveConfiguration()> ==> <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void resetConfiguration()> calls: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void reset()> via: VIRTUAL edge: virtualinvoke $r1.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void reset()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void resetConfiguration()> ==> <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void reset()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setMaxRecordConfiguration()> calls: <org.apache.log4j.lf5.viewer.LogFactor5InputDialog: java.lang.String getText()> via: VIRTUAL edge: $r3 = virtualinvoke $r0.<org.apache.log4j.lf5.viewer.LogFactor5InputDialog: java.lang.String getText()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setMaxRecordConfiguration()> ==> <org.apache.log4j.lf5.viewer.LogFactor5InputDialog: java.lang.String getText()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JToolBar createToolBar()> calls: <sun.awt.SunToolkit: java.lang.String[] getFontList()> via: VIRTUAL edge: r23 = virtualinvoke $r10.<java.awt.Toolkit: java.lang.String[] getFontList()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JToolBar createToolBar()> ==> <sun.awt.SunToolkit: java.lang.String[] getFontList()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JToolBar createToolBar()> calls: <sun.awt.HeadlessToolkit: java.lang.String[] getFontList()> via: VIRTUAL edge: r23 = virtualinvoke $r10.<java.awt.Toolkit: java.lang.String[] getFontList()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JToolBar createToolBar()> ==> <sun.awt.HeadlessToolkit: java.lang.String[] getFontList()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setView(java.lang.String,org.apache.log4j.lf5.viewer.LogTable)> calls: <org.apache.log4j.lf5.viewer.LogTable: void setDetailedView()> via: VIRTUAL edge: virtualinvoke r7.<org.apache.log4j.lf5.viewer.LogTable: void setDetailedView()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setView(java.lang.String,org.apache.log4j.lf5.viewer.LogTable)> ==> <org.apache.log4j.lf5.viewer.LogTable: void setDetailedView()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void centerFrame(javax.swing.JFrame)> calls: <sun.awt.SunToolkit: java.awt.Dimension getScreenSize()> via: VIRTUAL edge: $r1 = virtualinvoke $r0.<java.awt.Toolkit: java.awt.Dimension getScreenSize()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void centerFrame(javax.swing.JFrame)> ==> <sun.awt.SunToolkit: java.awt.Dimension getScreenSize()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void centerFrame(javax.swing.JFrame)> calls: <sun.awt.HeadlessToolkit: java.awt.Dimension getScreenSize()> via: VIRTUAL edge: $r1 = virtualinvoke $r0.<java.awt.Toolkit: java.awt.Dimension getScreenSize()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void centerFrame(javax.swing.JFrame)> ==> <sun.awt.HeadlessToolkit: java.awt.Dimension getScreenSize()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpen()> calls: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void set(java.io.File)> via: VIRTUAL edge: virtualinvoke $r7.<org.apache.log4j.lf5.viewer.configure.MRUFileManager: void set(java.io.File)>($r5) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpen()> ==> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void set(java.io.File)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()> calls: <org.apache.log4j.lf5.viewer.LogFactor5InputDialog: java.lang.String getText()> via: VIRTUAL edge: $r3 = virtualinvoke $r13.<org.apache.log4j.lf5.viewer.LogFactor5InputDialog: java.lang.String getText()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()> ==> <org.apache.log4j.lf5.viewer.LogFactor5InputDialog: java.lang.String getText()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()> calls: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void set(java.net.URL)> via: VIRTUAL edge: virtualinvoke $r5.<org.apache.log4j.lf5.viewer.configure.MRUFileManager: void set(java.net.URL)>($r15) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()> ==> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void set(java.net.URL)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)> calls: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(int)> via: VIRTUAL edge: $r8 = virtualinvoke $r7.<org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(int)>(i1) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)> ==> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(int)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)> calls: <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)> via: VIRTUAL edge: virtualinvoke $r9.<org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>(r6) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)> ==> <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)> calls: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void moveToTop(int)> via: VIRTUAL edge: virtualinvoke $r10.<org.apache.log4j.lf5.viewer.configure.MRUFileManager: void moveToTop(int)>(i1) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)> ==> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void moveToTop(int)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestExit()> calls: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void save()> via: VIRTUAL edge: virtualinvoke $r1.<org.apache.log4j.lf5.viewer.configure.MRUFileManager: void save()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestExit()> ==> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void save()>
Source here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)> calls: <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)> via: VIRTUAL edge: virtualinvoke $r0.<org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>(r2) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)> ==> <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>
Source here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)> calls: <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)> via: VIRTUAL edge: virtualinvoke $r0.<org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>(r3) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)> ==> <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>
Start traversal for source: <org.apache.log4j.xml.DOMConfigurator$2: org.w3c.dom.Document parse(javax.xml.parsers.DocumentBuilder)>...
Starting from source: 
0: parse
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.net.URL: java.io.InputStream openStream()>...
Starting from source: 
0: openStream
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)>...
Starting from source: 
0: loadLogFile
1: requestOpenURL
2: actionPerformed
3: requestOpen
Flows from source is finished.
Start traversal for source: <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()>...
Starting from source: 
0: getMRUFileList
1: createMRUFileListMI
2: updateMRUList
3: requestOpenMRU
4: actionPerformed
5: requestOpenURL
6: requestOpen
7: createFileMenu
8: createMenuBar
Flows from source is finished.
Start traversal for source: <org.apache.commons.io.LineIterator: boolean hasNext()>...
Starting from source: 
0: hasNext
1: selectAllLogTableColumns
2: actionPerformed
3: updateView
4: createViewMenu
5: createMenuBar
6: selectAllLogLevels
7: createLogLevelColorMenu
8: createLogLevelMenu
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>...
Starting from source: 
0: loadLogFile
1: requestOpenURL
2: actionPerformed
3: requestOpen
Flows from source is finished.
Start traversal for source: <org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics: java.lang.String toString()>...
Starting from source: 
0: toString
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
5: closeAfterConfirm
6: requestExit
7: requestClose
8: requestOpenMRU
9: setView
10: setMaxRecordConfiguration
11: createMRUFileListMI
12: updateMRUList
13: createFileMenu
14: createMenuBar
15: createLogTableColumnMenuItem
16: getLogTableColumnMenuItem
17: updateView
18: selectAllLogTableColumns
19: createViewMenu
20: getTableColumnMenuItem
21: processLogTableColumns
22: createMenuItem
23: getMenuItem
24: passes
25: selectAllLogLevels
26: createLogLevelMenu
27: createSubMenuItem
28: createLogLevelColorMenu
29: getStatusText
30: getRecordsDisplayedMessage
31: updateStatusLabel
32: run
33: selectRow
34: setFontSizeSilently
35: findSearchText
Flows from source is finished.
Start traversal for source: <com.mxgraph.io.gd.mxGdDocument: void parse(java.lang.String)>...
Starting from source: 
0: parse
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.net.URL: java.lang.String getFile()>...
Starting from source: 
0: getFile
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
Flows from source is finished.
Start traversal for source: <com.mxgraph.canvas.mxSvgCanvas: java.io.InputStream getResource(java.lang.String)>...
Starting from source: 
0: getResource
1: createToolBar
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: requestOpenMRU
2: actionPerformed
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: requestOpenMRU
2: actionPerformed
Flows from source is finished.
Now we build call graphs for class: org.apache.commons.math.linear.MatrixUtils
Global flow here: <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)> calls: <org.apache.commons.math.linear.BlockRealMatrix: int getRowDimension()> via: INTERFACE edge: $i1 = interfaceinvoke r5.<org.apache.commons.math.linear.AnyMatrix: int getRowDimension()>() in <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)> ==> <org.apache.commons.math.linear.BlockRealMatrix: int getRowDimension()>
Global flow here: <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)> calls: <org.apache.commons.math.linear.BlockRealMatrix: int getRowDimension()> via: INTERFACE edge: $i3 = interfaceinvoke r5.<org.apache.commons.math.linear.AnyMatrix: int getRowDimension()>() in <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)> ==> <org.apache.commons.math.linear.BlockRealMatrix: int getRowDimension()>
Global flow here: <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)> calls: <org.apache.commons.math.linear.Array2DRowRealMatrix: int getRowDimension()> via: INTERFACE edge: $i1 = interfaceinvoke r5.<org.apache.commons.math.linear.AnyMatrix: int getRowDimension()>() in <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)> ==> <org.apache.commons.math.linear.Array2DRowRealMatrix: int getRowDimension()>
Global flow here: <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)> calls: <org.apache.commons.math.linear.Array2DRowRealMatrix: int getRowDimension()> via: INTERFACE edge: $i3 = interfaceinvoke r5.<org.apache.commons.math.linear.AnyMatrix: int getRowDimension()>() in <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)> ==> <org.apache.commons.math.linear.Array2DRowRealMatrix: int getRowDimension()>
Global flow here: <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)> calls: <org.apache.commons.math.linear.BlockRealMatrix: int getColumnDimension()> via: INTERFACE edge: $i1 = interfaceinvoke r5.<org.apache.commons.math.linear.AnyMatrix: int getColumnDimension()>() in <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)> ==> <org.apache.commons.math.linear.BlockRealMatrix: int getColumnDimension()>
Global flow here: <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)> calls: <org.apache.commons.math.linear.BlockRealMatrix: int getColumnDimension()> via: INTERFACE edge: $i3 = interfaceinvoke r5.<org.apache.commons.math.linear.AnyMatrix: int getColumnDimension()>() in <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)> ==> <org.apache.commons.math.linear.BlockRealMatrix: int getColumnDimension()>
Global flow here: <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)> calls: <org.apache.commons.math.linear.Array2DRowRealMatrix: int getColumnDimension()> via: INTERFACE edge: $i1 = interfaceinvoke r5.<org.apache.commons.math.linear.AnyMatrix: int getColumnDimension()>() in <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)> ==> <org.apache.commons.math.linear.Array2DRowRealMatrix: int getColumnDimension()>
Global flow here: <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)> calls: <org.apache.commons.math.linear.Array2DRowRealMatrix: int getColumnDimension()> via: INTERFACE edge: $i3 = interfaceinvoke r5.<org.apache.commons.math.linear.AnyMatrix: int getColumnDimension()>() in <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)> ==> <org.apache.commons.math.linear.Array2DRowRealMatrix: int getColumnDimension()>
Global flow here: <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.Array2DRowRealMatrix bigFractionMatrixToRealMatrix(org.apache.commons.math.linear.FieldMatrix)> calls: <org.apache.commons.math.linear.AbstractFieldMatrix: org.apache.commons.math.FieldElement walkInOptimizedOrder(org.apache.commons.math.linear.FieldMatrixPreservingVisitor)> via: INTERFACE edge: interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrix: org.apache.commons.math.FieldElement walkInOptimizedOrder(org.apache.commons.math.linear.FieldMatrixPreservingVisitor)>($r0) in <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.Array2DRowRealMatrix bigFractionMatrixToRealMatrix(org.apache.commons.math.linear.FieldMatrix)> ==> <org.apache.commons.math.linear.AbstractFieldMatrix: org.apache.commons.math.FieldElement walkInOptimizedOrder(org.apache.commons.math.linear.FieldMatrixPreservingVisitor)>
Global flow here: <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.Array2DRowRealMatrix bigFractionMatrixToRealMatrix(org.apache.commons.math.linear.FieldMatrix)> calls: <org.apache.commons.math.linear.MatrixUtils$BigFractionMatrixConverter: org.apache.commons.math.linear.Array2DRowRealMatrix getConvertedMatrix()> via: VIRTUAL edge: $r2 = virtualinvoke $r0.<org.apache.commons.math.linear.MatrixUtils$BigFractionMatrixConverter: org.apache.commons.math.linear.Array2DRowRealMatrix getConvertedMatrix()>() in <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.Array2DRowRealMatrix bigFractionMatrixToRealMatrix(org.apache.commons.math.linear.FieldMatrix)> ==> <org.apache.commons.math.linear.MatrixUtils$BigFractionMatrixConverter: org.apache.commons.math.linear.Array2DRowRealMatrix getConvertedMatrix()>
Source here: <org.apache.commons.math.linear.MatrixUtils: void deserializeRealVector(java.lang.Object,java.lang.String,java.io.ObjectInputStream)>
Source here: <org.apache.commons.math.linear.MatrixUtils: void deserializeRealMatrix(java.lang.Object,java.lang.String,java.io.ObjectInputStream)>
Now we build call graphs for class: org.apache.log4j.chainsaw.LoadXMLAction
Source here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.Category: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r0.<org.apache.log4j.Logger: void info(java.lang.Object)>("load file called") in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.Category: void info(java.lang.Object)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r0.<org.apache.log4j.Logger: void info(java.lang.Object)>("load file called") in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.Category: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r4.<org.apache.log4j.Logger: void info(java.lang.Object)>("Need to load a file") in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.Category: void info(java.lang.Object)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r4.<org.apache.log4j.Logger: void info(java.lang.Object)>("Need to load a file") in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.Category: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r8.<org.apache.log4j.Logger: void info(java.lang.Object)>($r12) in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.Category: void info(java.lang.Object)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r8.<org.apache.log4j.Logger: void info(java.lang.Object)>($r12) in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.commons.math.MathRuntimeException$6: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.commons.math.MathRuntimeException$6: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.commons.math.MathRuntimeException$7: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.commons.math.MathRuntimeException$7: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.commons.math.MathRuntimeException$5: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.commons.math.MathRuntimeException$5: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <com.sun.org.apache.xpath.internal.XPathException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <com.sun.org.apache.xpath.internal.XPathException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.xml.sax.SAXException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.xml.sax.SAXException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <com.sun.org.apache.xerces.internal.impl.dv.DatatypeException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <com.sun.org.apache.xerces.internal.impl.dv.DatatypeException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.config.PropertySetterException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.config.PropertySetterException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <sun.nio.fs.WindowsException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <sun.nio.fs.WindowsException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.commons.math.MathRuntimeException$1: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.commons.math.MathRuntimeException$1: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.commons.math.MathRuntimeException$4: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.commons.math.MathRuntimeException$4: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.commons.math.MathRuntimeException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.commons.math.MathRuntimeException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.commons.math.exception.MathIllegalStateException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.commons.math.exception.MathIllegalStateException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.commons.math.MathException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.commons.math.MathException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.commons.math.exception.MathIllegalArgumentException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.commons.math.exception.MathIllegalArgumentException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.Category: void warn(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r21.<org.apache.log4j.Logger: void warn(java.lang.Object,java.lang.Throwable)>("caught an exception loading the file", $r20) in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.Category: void warn(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.spi.NOPLogger: void warn(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r21.<org.apache.log4j.Logger: void warn(java.lang.Object,java.lang.Throwable)>("caught an exception loading the file", $r20) in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.spi.NOPLogger: void warn(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: int loadFile(java.lang.String)> calls: <org.apache.log4j.chainsaw.XMLFileHandler: int getNumEvents()> via: VIRTUAL edge: $i0 = virtualinvoke $r8.<org.apache.log4j.chainsaw.XMLFileHandler: int getNumEvents()>() in <org.apache.log4j.chainsaw.LoadXMLAction: int loadFile(java.lang.String)> ==> <org.apache.log4j.chainsaw.XMLFileHandler: int getNumEvents()>
Start traversal for source: <java.io.File: java.lang.String getAbsolutePath()>...
Starting from source: 
0: getAbsolutePath
1: actionPerformed
2: fireActionPerformed
3: fireActionEvent
4: notifyAction
Flows from source is finished.
Start traversal for source: <org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics: java.lang.String toString()>...
Starting from source: 
0: toString
1: loadFile
2: actionPerformed
3: fireActionPerformed
4: fireActionEvent
5: notifyAction
Flows from source is finished.
Start traversal for source: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)>...
Starting from source: 
0: actionPerformed
1: fireActionPerformed
2: fireActionEvent
3: notifyAction
Flows from source is finished.
Now we build call graphs for class: org.mockito.cglib.transform.AbstractTransformTask
Source here: <org.mockito.cglib.transform.AbstractTransformTask: void processJarFile(java.io.File)>
Now we build call graphs for class: org.apache.log4j.lf5.viewer.configure.ConfigurationManager
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode getRootCategoryNode()> via: VIRTUAL edge: $r4 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode getRootCategoryNode()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode getRootCategoryNode()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getNDCTextFilter()> via: VIRTUAL edge: $r7 = virtualinvoke $r6.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getNDCTextFilter()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getNDCTextFilter()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()> via: VIRTUAL edge: $r9 = virtualinvoke $r8.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()> via: VIRTUAL edge: $r11 = virtualinvoke $r10.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> calls: <org.apache.log4j.lf5.LogLevel: java.util.Map getLogLevelColorMap()> via: STATIC edge: $r12 = staticinvoke <org.apache.log4j.lf5.LogLevel: java.util.Map getLogLevelColorMap()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> ==> <org.apache.log4j.lf5.LogLevel: java.util.Map getLogLevelColorMap()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> calls: <org.apache.log4j.lf5.viewer.LogTableColumn: java.util.List getLogTableColumns()> via: STATIC edge: $r13 = staticinvoke <org.apache.log4j.lf5.viewer.LogTableColumn: java.util.List getLogTableColumns()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> ==> <org.apache.log4j.lf5.viewer.LogTableColumn: java.util.List getLogTableColumns()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String treePathToString(javax.swing.tree.TreePath)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String getTitle()> via: VIRTUAL edge: $r5 = virtualinvoke r6.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String getTitle()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String treePathToString(javax.swing.tree.TreePath)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String getTitle()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.apache.commons.math.MathRuntimeException$6: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.apache.commons.math.MathRuntimeException$6: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.apache.commons.math.MathRuntimeException$7: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.apache.commons.math.MathRuntimeException$7: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.apache.commons.math.MathRuntimeException$5: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.apache.commons.math.MathRuntimeException$5: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <com.sun.org.apache.xpath.internal.XPathException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <com.sun.org.apache.xpath.internal.XPathException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.xml.sax.SAXException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.xml.sax.SAXException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <com.sun.org.apache.xerces.internal.impl.dv.DatatypeException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <com.sun.org.apache.xerces.internal.impl.dv.DatatypeException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.apache.log4j.config.PropertySetterException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.apache.log4j.config.PropertySetterException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <sun.nio.fs.WindowsException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <sun.nio.fs.WindowsException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.apache.commons.math.MathRuntimeException$1: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.apache.commons.math.MathRuntimeException$1: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.apache.commons.math.MathRuntimeException$4: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.apache.commons.math.MathRuntimeException$4: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.apache.commons.math.MathRuntimeException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.apache.commons.math.MathRuntimeException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.apache.commons.math.exception.MathIllegalStateException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.apache.commons.math.exception.MathIllegalStateException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.apache.commons.math.MathException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.apache.commons.math.MathException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.apache.commons.math.exception.MathIllegalArgumentException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.apache.commons.math.exception.MathIllegalArgumentException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processRecordFilter(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setNDCLogRecordFilter(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r6.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setNDCLogRecordFilter(java.lang.String)>($r5) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processRecordFilter(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setNDCLogRecordFilter(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: void setSelected(boolean)> via: VIRTUAL edge: virtualinvoke $r13.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: void setSelected(boolean)>($z5) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: void setSelected(boolean)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: javax.swing.tree.TreePath getTreePathToRoot(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode)> via: VIRTUAL edge: $r16 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: javax.swing.tree.TreePath getTreePathToRoot(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode)>($r13) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: javax.swing.tree.TreePath getTreePathToRoot(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode addCategory(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryPath)> via: VIRTUAL edge: $r13 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode addCategory(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryPath)>($r17) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode addCategory(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryPath)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevels(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()> via: VIRTUAL edge: $r4 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevels(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevels(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)> via: STATIC edge: $r8 = staticinvoke <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)>($r7) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevels(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.LogLevel: void setLogLevelColorMap(org.apache.log4j.lf5.LogLevel,java.awt.Color)> via: VIRTUAL edge: virtualinvoke $r6.<org.apache.log4j.lf5.LogLevel: void setLogLevelColorMap(org.apache.log4j.lf5.LogLevel,java.awt.Color)>($r6, $r10) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.LogLevel: void setLogLevelColorMap(org.apache.log4j.lf5.LogLevel,java.awt.Color)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.LogLevel: java.util.Map getLogLevelColorMap()> via: STATIC edge: staticinvoke <org.apache.log4j.lf5.LogLevel: java.util.Map getLogLevelColorMap()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.LogLevel: java.util.Map getLogLevelColorMap()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)> via: STATIC edge: $r6 = staticinvoke <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)>($r5) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogTableColumnMenuItems()> via: VIRTUAL edge: $r4 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogTableColumnMenuItems()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogTableColumnMenuItems()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.LogTable: void setDetailedView()> via: VIRTUAL edge: virtualinvoke $r14.<org.apache.log4j.lf5.viewer.LogTable: void setDetailedView()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.LogTable: void setDetailedView()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.LogTable: void setView(java.util.List)> via: VIRTUAL edge: virtualinvoke $r13.<org.apache.log4j.lf5.viewer.LogTable: void setView(java.util.List)>($r5) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.LogTable: void setView(java.util.List)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.LogTableColumn: org.apache.log4j.lf5.viewer.LogTableColumn valueOf(java.lang.String)> via: STATIC edge: $r9 = staticinvoke <org.apache.log4j.lf5.viewer.LogTableColumn: org.apache.log4j.lf5.viewer.LogTableColumn valueOf(java.lang.String)>($r8) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.LogTableColumn: org.apache.log4j.lf5.viewer.LogTableColumn valueOf(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void collapseTree()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void collapseTree()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void selectAllNodes()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void selectAllNodes()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void selectAllNodes()> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: void setSelected(boolean)> via: VIRTUAL edge: virtualinvoke r7.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: void setSelected(boolean)>(1) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void selectAllNodes()> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: void setSelected(boolean)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void selectAllNodes()> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode getRootCategoryNode()> via: VIRTUAL edge: $r4 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode getRootCategoryNode()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void selectAllNodes()> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode getRootCategoryNode()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void selectAllNodes()> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void selectAllNodes()> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>
Source here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getFilename()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processConfigurationNode(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processConfigurationNode(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processConfigurationNode(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: javax.swing.tree.TreePath getTreePathToRoot(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode)> via: VIRTUAL edge: $r7 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: javax.swing.tree.TreePath getTreePathToRoot(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode)>(r9) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processConfigurationNode(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: javax.swing.tree.TreePath getTreePathToRoot(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processConfigurationNode(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processConfigurationNode(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevels(java.util.Map,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.LogLevel: java.lang.String getLabel()> via: VIRTUAL edge: $r9 = virtualinvoke r5.<org.apache.log4j.lf5.LogLevel: java.lang.String getLabel()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevels(java.util.Map,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.LogLevel: java.lang.String getLabel()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(java.util.Map,java.util.Map,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.LogLevel: java.lang.String getLabel()> via: VIRTUAL edge: $r10 = virtualinvoke r5.<org.apache.log4j.lf5.LogLevel: java.lang.String getLabel()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(java.util.Map,java.util.Map,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.LogLevel: java.lang.String getLabel()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(java.util.List,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem getTableColumnMenuItem(org.apache.log4j.lf5.viewer.LogTableColumn)> via: VIRTUAL edge: $r7 = virtualinvoke $r6.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem getTableColumnMenuItem(org.apache.log4j.lf5.viewer.LogTableColumn)>(r4) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(java.util.List,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem getTableColumnMenuItem(org.apache.log4j.lf5.viewer.LogTableColumn)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(java.util.List,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String getLabel()> via: VIRTUAL edge: $r8 = virtualinvoke r4.<org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String getLabel()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(java.util.List,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String getLabel()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void exportXMLElement(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,javax.swing.tree.TreePath,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: boolean isSelected()> via: VIRTUAL edge: $z1 = virtualinvoke r8.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: boolean isSelected()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void exportXMLElement(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,javax.swing.tree.TreePath,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: boolean isSelected()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void exportXMLElement(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,javax.swing.tree.TreePath,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String getTitle()> via: VIRTUAL edge: $r9 = virtualinvoke r8.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String getTitle()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void exportXMLElement(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,javax.swing.tree.TreePath,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String getTitle()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void exportXMLElement(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,javax.swing.tree.TreePath,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void exportXMLElement(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,javax.swing.tree.TreePath,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: getFilename
2: deleteConfigurationFile
3: reset
4: resetConfiguration
5: store
6: save
7: saveConfiguration
8: load
Flows from source is finished.
Start traversal for source: <org.apache.commons.math.random.EmpiricalDistributionImpl: void load(java.net.URL)>...
Starting from source: 
0: load
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getFilename
2: deleteConfigurationFile
3: reset
4: resetConfiguration
5: store
6: save
7: saveConfiguration
8: load
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getFilename()>...
Starting from source: 
0: getFilename
1: deleteConfigurationFile
2: reset
3: resetConfiguration
4: store
5: save
6: saveConfiguration
7: load
Flows from source is finished.
Start traversal for source: <org.apache.commons.io.LineIterator: boolean hasNext()>...
Starting from source: 
0: hasNext
1: processLogTableColumns
2: load
3: save
4: saveConfiguration
5: processLogLevelColors
6: processLogLevels
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String getFilename()>...
Starting from source: 
0: getFilename
1: deleteConfigurationFile
2: reset
3: resetConfiguration
4: store
5: save
6: saveConfiguration
7: load
Flows from source is finished.
Start traversal for source: <java.net.URL: java.lang.String getPath()>...
Starting from source: 
0: getPath
1: treePathToString
2: exportXMLElement
3: processConfigurationNode
4: save
5: saveConfiguration
Flows from source is finished.
Start traversal for source: <org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics: java.lang.String toString()>...
Starting from source: 
0: toString
1: getFilename
2: deleteConfigurationFile
3: reset
4: resetConfiguration
5: store
6: save
7: saveConfiguration
8: load
9: treePathToString
10: exportXMLElement
11: processConfigurationNode
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getPath()>...
Starting from source: 
0: getPath
1: treePathToString
2: exportXMLElement
3: processConfigurationNode
4: save
5: saveConfiguration
Flows from source is finished.
Now we build call graphs for class: com.mxgraph.util.mxUtils
Source here: <com.mxgraph.util.mxUtils: java.lang.String readFile(java.lang.String)>
Start traversal for source: <org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics: java.lang.String toString()>...
Starting from source: 
0: toString
1: createBufferedImage
Flows from source is finished.
Now we build call graphs for class: org.apache.commons.io.output.LockableFileWriter
Source here: <org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)>
Source here: <org.apache.commons.io.output.LockableFileWriter: void createLock()>
Now we build call graphs for class: org.sapegin.bgp.analyse.duplication.CountDuplicationTask
Source here: <org.sapegin.bgp.analyse.duplication.CountDuplicationTask: void selectVisibleDuplicatedSpikes()>
Source here: <org.sapegin.bgp.analyse.duplication.CountDuplicationTask: void writeResults()>
Now we build call graphs for class: org.apache.log4j.net.SocketServer
Source here: <org.apache.log4j.net.SocketServer: org.apache.log4j.spi.LoggerRepository configureHierarchy(java.net.InetAddress)>
Source here: <org.apache.log4j.net.SocketServer: org.apache.log4j.spi.LoggerRepository genericHierarchy()>
Now we build call graphs for class: org.apache.commons.io.input.ProxyInputStream
Source here: <org.apache.commons.io.input.ProxyInputStream: int read(byte[])>
Source here: <org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)>
Source here: <org.apache.commons.io.input.ProxyInputStream: int available()>
Now we build call graphs for class: org.sapegin.bgp.analyse.updates.Updates
Global flow here: <org.sapegin.bgp.analyse.updates.Updates: void synchronise()> calls: <org.sapegin.bgp.analyse.spikes.SingleASspikes: long getCurrentMaxTime()> via: VIRTUAL edge: l5 = virtualinvoke r9.<org.sapegin.bgp.analyse.spikes.SingleASspikes: long getCurrentMaxTime()>() in <org.sapegin.bgp.analyse.updates.Updates: void synchronise()> ==> <org.sapegin.bgp.analyse.spikes.SingleASspikes: long getCurrentMaxTime()>
Global flow here: <org.sapegin.bgp.analyse.updates.Updates: void synchronise()> calls: <org.sapegin.bgp.analyse.spikes.SingleASspikes: long getCurrentMaxTime()> via: VIRTUAL edge: $l2 = virtualinvoke r9.<org.sapegin.bgp.analyse.spikes.SingleASspikes: long getCurrentMaxTime()>() in <org.sapegin.bgp.analyse.updates.Updates: void synchronise()> ==> <org.sapegin.bgp.analyse.spikes.SingleASspikes: long getCurrentMaxTime()>
Global flow here: <org.sapegin.bgp.analyse.updates.Updates: void synchronise()> calls: <org.sapegin.bgp.analyse.spikes.SingleASspikes: long getCurrentMinTime()> via: VIRTUAL edge: l4 = virtualinvoke r9.<org.sapegin.bgp.analyse.spikes.SingleASspikes: long getCurrentMinTime()>() in <org.sapegin.bgp.analyse.updates.Updates: void synchronise()> ==> <org.sapegin.bgp.analyse.spikes.SingleASspikes: long getCurrentMinTime()>
Global flow here: <org.sapegin.bgp.analyse.updates.Updates: void synchronise()> calls: <org.sapegin.bgp.analyse.spikes.SingleASspikes: long getCurrentMinTime()> via: VIRTUAL edge: $l0 = virtualinvoke r9.<org.sapegin.bgp.analyse.spikes.SingleASspikes: long getCurrentMinTime()>() in <org.sapegin.bgp.analyse.updates.Updates: void synchronise()> ==> <org.sapegin.bgp.analyse.spikes.SingleASspikes: long getCurrentMinTime()>
Global flow here: <org.sapegin.bgp.analyse.updates.Updates: void synchronise()> calls: <org.sapegin.bgp.analyse.spikes.SingleASspikes: void synchronise(long,long)> via: VIRTUAL edge: virtualinvoke r10.<org.sapegin.bgp.analyse.spikes.SingleASspikes: void synchronise(long,long)>(l4, l5) in <org.sapegin.bgp.analyse.updates.Updates: void synchronise()> ==> <org.sapegin.bgp.analyse.spikes.SingleASspikes: void synchronise(long,long)>
Source here: <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()>
Global flow here: <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()> calls: <org.apache.log4j.Category: void fatal(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r17.<org.apache.log4j.Logger: void fatal(java.lang.Object)>($r22) in <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()> ==> <org.apache.log4j.Category: void fatal(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()> calls: <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r17.<org.apache.log4j.Logger: void fatal(java.lang.Object)>($r22) in <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()> ==> <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()> calls: <org.apache.log4j.Category: void fatal(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r10.<org.apache.log4j.Logger: void fatal(java.lang.Object)>($r15) in <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()> ==> <org.apache.log4j.Category: void fatal(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()> calls: <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r10.<org.apache.log4j.Logger: void fatal(java.lang.Object)>($r15) in <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()> ==> <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()> calls: <org.apache.log4j.Category: void fatal(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r26.<org.apache.log4j.Logger: void fatal(java.lang.Object,java.lang.Throwable)>("FileNotFound exception during reading files with updates during determining max start time", $r25) in <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()> ==> <org.apache.log4j.Category: void fatal(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()> calls: <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r26.<org.apache.log4j.Logger: void fatal(java.lang.Object,java.lang.Throwable)>("FileNotFound exception during reading files with updates during determining max start time", $r25) in <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()> ==> <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()> calls: <org.apache.log4j.Category: void fatal(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r24.<org.apache.log4j.Logger: void fatal(java.lang.Object,java.lang.Throwable)>("IO exception during reading files with updates during determining max start time", $r23) in <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()> ==> <org.apache.log4j.Category: void fatal(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()> calls: <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r24.<org.apache.log4j.Logger: void fatal(java.lang.Object,java.lang.Throwable)>("IO exception during reading files with updates during determining max start time", $r23) in <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()> ==> <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object,java.lang.Throwable)>
Start traversal for source: <org.sapegin.bgp.analyse.updates.Updates: void findStartTime()>...
Starting from source: 
0: findStartTime
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: findStartTime
Flows from source is finished.
Start traversal for source: <org.apache.commons.io.LineIterator: boolean hasNext()>...
Starting from source: 
0: hasNext
1: synchronise
2: createUpdates
Flows from source is finished.
Start traversal for source: <org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics: java.lang.String toString()>...
Starting from source: 
0: toString
1: findStartTime
Flows from source is finished.
Now we build call graphs for class: junit.runner.BaseTestRunner
Source here: <junit.runner.BaseTestRunner: java.io.File getPreferencesFile()>
Source here: <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)>
Now we build call graphs for class: org.sapegin.bgp.analyse.ASsNames
Source here: <org.sapegin.bgp.analyse.ASsNames: void readASsNames()>
Global flow here: <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> calls: <org.apache.log4j.Category: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r1.<org.apache.log4j.Logger: void info(java.lang.Object)>("loading ASs names...") in <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> ==> <org.apache.log4j.Category: void info(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> calls: <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r1.<org.apache.log4j.Logger: void info(java.lang.Object)>("loading ASs names...") in <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> ==> <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> calls: <org.apache.log4j.Category: void warn(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r32.<org.apache.log4j.Logger: void warn(java.lang.Object)>($r37) in <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> ==> <org.apache.log4j.Category: void warn(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> calls: <org.apache.log4j.spi.NOPLogger: void warn(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r32.<org.apache.log4j.Logger: void warn(java.lang.Object)>($r37) in <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> ==> <org.apache.log4j.spi.NOPLogger: void warn(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> calls: <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r26.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r29, $r24) in <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> ==> <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> calls: <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r26.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r29, $r24) in <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> ==> <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> calls: <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r20.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r23, $r18) in <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> ==> <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> calls: <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r20.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r23, $r18) in <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> ==> <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> calls: <org.apache.log4j.Category: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r14.<org.apache.log4j.Logger: void info(java.lang.Object)>($r17) in <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> ==> <org.apache.log4j.Category: void info(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> calls: <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r14.<org.apache.log4j.Logger: void info(java.lang.Object)>($r17) in <org.sapegin.bgp.analyse.ASsNames: void readASsNames()> ==> <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)>
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: readASsNames
Flows from source is finished.
Start traversal for source: <org.apache.commons.io.LineIterator: boolean hasNext()>...
Starting from source: 
0: hasNext
1: readASsNames
Flows from source is finished.
Start traversal for source: <org.sapegin.bgp.analyse.ASsNames: void readASsNames()>...
Starting from source: 
0: readASsNames
Flows from source is finished.
Start traversal for source: <org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics: java.lang.String toString()>...
Starting from source: 
0: toString
1: readASsNames
Flows from source is finished.
Now we build call graphs for class: org.apache.commons.io.filefilter.PrefixFileFilter
Source here: <org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File)>
Now we build call graphs for class: org.apache.log4j.lf5.util.LogFileParser
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: void run()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JFrame getBaseFrame()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JFrame getBaseFrame()>() in <org.apache.log4j.lf5.util.LogFileParser: void run()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JFrame getBaseFrame()>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: void run()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addMessage(org.apache.log4j.lf5.LogRecord)> via: VIRTUAL edge: virtualinvoke $r14.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addMessage(org.apache.log4j.lf5.LogRecord)>($r12) in <org.apache.log4j.lf5.util.LogFileParser: void run()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addMessage(org.apache.log4j.lf5.LogRecord)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: void run()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addMessage(org.apache.log4j.lf5.LogRecord)> via: VIRTUAL edge: virtualinvoke $r10.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addMessage(org.apache.log4j.lf5.LogRecord)>($r9) in <org.apache.log4j.lf5.util.LogFileParser: void run()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addMessage(org.apache.log4j.lf5.LogRecord)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: void displayError(java.lang.String)> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JFrame getBaseFrame()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JFrame getBaseFrame()>() in <org.apache.log4j.lf5.util.LogFileParser: void displayError(java.lang.String)> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JFrame getBaseFrame()>
Source here: <org.apache.log4j.lf5.util.LogFileParser: java.lang.String loadLogFile(java.io.InputStream)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogLevel parsePriority(java.lang.String)> calls: <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)> via: STATIC edge: $r4 = staticinvoke <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)>($r2) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogLevel parsePriority(java.lang.String)> ==> <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: void setThrownStackTrace(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setThrownStackTrace(java.lang.String)>($r10) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: void setThrownStackTrace(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: void setMessage(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setMessage(java.lang.String)>($r9) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: void setMessage(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: void setNDC(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setNDC(java.lang.String)>($r8) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: void setNDC(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: void setThreadDescription(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setThreadDescription(java.lang.String)>($r7) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: void setThreadDescription(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: void setLocation(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setLocation(java.lang.String)>($r6) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: void setLocation(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: void setCategory(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setCategory(java.lang.String)>($r5) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: void setCategory(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: void setLevel(org.apache.log4j.lf5.LogLevel)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setLevel(org.apache.log4j.lf5.LogLevel)>($r4) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: void setLevel(org.apache.log4j.lf5.LogLevel)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: void setMillis(long)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setMillis(long)>($l1) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: void setMillis(long)>
Start traversal for source: <org.apache.log4j.xml.DOMConfigurator$2: org.w3c.dom.Document parse(javax.xml.parsers.DocumentBuilder)>...
Starting from source: 
0: parse
1: parseDate
2: createLogRecord
3: run
4: loadLogFile
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.commons.io.input.ProxyReader: int read(char[])>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.commons.io.input.ProxyReader: int read()>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.commons.io.input.ProxyInputStream: int available()>...
Starting from source: 
0: available
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.commons.io.input.ProxyInputStream: int read(byte[])>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int available()>...
Starting from source: 
0: available
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)>...
Starting from source: 
0: loadLogFile
1: run
2: parse
3: parseDate
4: createLogRecord
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int available()>...
Starting from source: 
0: available
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int read()>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.mockito.cglib.core.DebuggingClassWriter$1: java.lang.Object run()>...
Starting from source: 
0: run
1: parse
2: parseDate
3: createLogRecord
4: loadLogFile
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.util.LogFileParser: java.lang.String loadLogFile(java.io.InputStream)>...
Starting from source: 
0: loadLogFile
1: run
2: parse
3: parseDate
4: createLogRecord
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>...
Starting from source: 
0: loadLogFile
1: run
2: parse
3: parseDate
4: createLogRecord
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics: java.lang.String toString()>...
Starting from source: 
0: toString
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <com.mxgraph.io.gd.mxGdDocument: void parse(java.lang.String)>...
Starting from source: 
0: parse
1: parseDate
2: createLogRecord
3: run
4: loadLogFile
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[])>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.commons.io.input.ProxyReader: int read(char[],int,int)>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <com.mxgraph.util.svg.NormalizingReader: int read(char[],int,int)>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
1: parse
2: parseDate
3: createLogRecord
4: loadLogFile
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[],int,int)>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Now we build call graphs for class: org.sapegin.bgp.analyse.ribs.RIB
Source here: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.Category: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.Logger: void info(java.lang.Object)>($r5) in <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.Category: void info(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.Logger: void info(java.lang.Object)>($r5) in <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.Logger: void trace(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r8.<org.apache.log4j.Logger: void trace(java.lang.Object)>("Update message does not start with \'TABLE_DUMP2|\' or \'TABLE_DUMP|\'. Skipping message...") in <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.Logger: void trace(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void trace(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r8.<org.apache.log4j.Logger: void trace(java.lang.Object)>("Update message does not start with \'TABLE_DUMP2|\' or \'TABLE_DUMP|\'. Skipping message...") in <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void trace(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.Logger: void trace(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r42.<org.apache.log4j.Logger: void trace(java.lang.Object,java.lang.Throwable)>("Can\'t parse the name of AS, which has sent the update message! Message will be skipped.", $r41) in <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.Logger: void trace(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void trace(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r42.<org.apache.log4j.Logger: void trace(java.lang.Object,java.lang.Throwable)>("Can\'t parse the name of AS, which has sent the update message! Message will be skipped.", $r41) in <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void trace(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.Logger: void trace(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r20.<org.apache.log4j.Logger: void trace(java.lang.Object)>($r23) in <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.Logger: void trace(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void trace(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r20.<org.apache.log4j.Logger: void trace(java.lang.Object)>($r23) in <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void trace(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r37.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r40, $r35) in <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r37.<org.apache.log4j.Logger: void error(java.lang.Object,java.lang.Throwable)>($r40, $r35) in <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void error(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.Category: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r25.<org.apache.log4j.Logger: void info(java.lang.Object)>($r30) in <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.Category: void info(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r25.<org.apache.log4j.Logger: void info(java.lang.Object)>($r30) in <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.Category: void fatal(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r34.<org.apache.log4j.Logger: void fatal(java.lang.Object,java.lang.Throwable)>("FileNotFound exception during reading RIB", $r33) in <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.Category: void fatal(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r34.<org.apache.log4j.Logger: void fatal(java.lang.Object,java.lang.Throwable)>("FileNotFound exception during reading RIB", $r33) in <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.Category: void fatal(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r32.<org.apache.log4j.Logger: void fatal(java.lang.Object,java.lang.Throwable)>("IO exception during reading RIB", $r31) in <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.Category: void fatal(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r32.<org.apache.log4j.Logger: void fatal(java.lang.Object,java.lang.Throwable)>("IO exception during reading RIB", $r31) in <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void fatal(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void announce(int,org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPath)> calls: <org.sapegin.bgp.analyse.ribs.OneAS_RIB: void announce(org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPath)> via: VIRTUAL edge: virtualinvoke $r11.<org.sapegin.bgp.analyse.ribs.OneAS_RIB: void announce(org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPath)>(r4, r5) in <org.sapegin.bgp.analyse.ribs.RIB: void announce(int,org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPath)> ==> <org.sapegin.bgp.analyse.ribs.OneAS_RIB: void announce(org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPath)>
Global flow here: <org.sapegin.bgp.analyse.ribs.RIB: void announce(int,org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPath)> calls: <org.sapegin.bgp.analyse.ribs.OneAS_RIB: void announce(org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPath)> via: VIRTUAL edge: virtualinvoke $r3.<org.sapegin.bgp.analyse.ribs.OneAS_RIB: void announce(org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPath)>(r4, r5) in <org.sapegin.bgp.analyse.ribs.RIB: void announce(int,org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPath)> ==> <org.sapegin.bgp.analyse.ribs.OneAS_RIB: void announce(org.sapegin.bgp.analyse.spikes.Destination,org.sapegin.bgp.analyse.ribs.ASPath)>
Start traversal for source: <org.sapegin.bgp.analyse.ribs.OriginsOnlyRIB: void loadRIBFromFile(java.lang.String)>...
Starting from source: 
0: loadRIBFromFile
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: loadRIBFromFile
Flows from source is finished.
Start traversal for source: <org.sapegin.bgp.analyse.ribs.RIB: void loadRIBFromFile(java.lang.String)>...
Starting from source: 
0: loadRIBFromFile
Flows from source is finished.
Start traversal for source: <org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics: java.lang.String toString()>...
Starting from source: 
0: toString
1: loadRIBFromFile
Flows from source is finished.
Now we build call graphs for class: org.apache.log4j.Level
Source here: <org.apache.log4j.Level: void readObject(java.io.ObjectInputStream)>
Now we build call graphs for class: org.apache.log4j.chainsaw.Main
Source here: <org.apache.log4j.chainsaw.Main: void setupReceiver(org.apache.log4j.chainsaw.MyTableModel)>
Now we build call graphs for class: org.apache.commons.io.filefilter.WildcardFilter
Source here: <org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File)>
Now we build call graphs for class: com.mxgraph.util.svg.PointsParser
Source here: <com.mxgraph.util.svg.PointsParser: void doParse()>
Now we build call graphs for class: org.apache.commons.io.filefilter.WildcardFileFilter
Source here: <org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File)>
Now we build call graphs for class: org.apache.log4j.DefaultThrowableRenderer
Source here: <org.apache.log4j.DefaultThrowableRenderer: java.lang.String[] render(java.lang.Throwable)>
Now we build call graphs for class: org.apache.commons.io.FileSystemUtils
Source here: <org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)>
Loaded 20927 methods from JAR files. 

Found 172 Source Methods.
Found 111 Sink Methods.
Sources and Sinks collected. 

Methods extraction finished.
All finished.
