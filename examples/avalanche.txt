***** Loading java classes ***** 

Start reading BOM and BIM...
BOM is loaded with 169 methods.
BIM is loaded with 352 methods.
EOM is loaded with 286 methods.
EIM is loaded with 365 methods.
Start looking for sources and sinks: 
[spark] Starting analysis ...
[spark] Done!
Now we build call graphs for class: com.google.common.io.GwtWorkarounds$1
Source here: <com.google.common.io.GwtWorkarounds$1: int read()>
Now we build call graphs for class: com.google.common.io.ByteSource
Source here: <com.google.common.io.ByteSource: long countBySkipping(java.io.InputStream)>
Source here: <com.google.common.io.ByteSource: long countByReading(java.io.InputStream)>
Now we build call graphs for class: com.google.common.io.MultiInputStream
Source here: <com.google.common.io.MultiInputStream: int available()>
Source here: <com.google.common.io.MultiInputStream: int read(byte[],int,int)>
Now we build call graphs for class: com.google.common.collect.LinkedListMultimap
Source here: <com.google.common.collect.LinkedListMultimap: void readObject(java.io.ObjectInputStream)>
Now we build call graphs for class: com.google.common.collect.Serialization
Source here: <com.google.common.collect.Serialization: int readCount(java.io.ObjectInputStream)>
Source here: <com.google.common.collect.Serialization: void populateMap(java.util.Map,java.io.ObjectInputStream)>
Source here: <com.google.common.collect.Serialization: void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream)>
Source here: <com.google.common.collect.Serialization: void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream,int)>
Source here: <com.google.common.collect.Serialization: void populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream)>
Source here: <com.google.common.collect.Serialization: void populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream,int)>
Now we build call graphs for class: com.google.common.collect.HashMultimap
Source here: <com.google.common.collect.HashMultimap: void readObject(java.io.ObjectInputStream)>
Now we build call graphs for class: Core.Impl.BuilderTaskImpl
Source here: <Core.Impl.BuilderTaskImpl: void readFile(java.lang.String,java.util.LinkedList)>
Source here: <Core.Impl.BuilderTaskImpl: void run()>
Global flow here: <Core.Impl.BuilderTaskImpl: void run()> calls: <Core.SamplePrograms.UserBuilderTask: java.util.HashMap userFunction(java.util.LinkedList,java.util.HashMap)> via: VIRTUAL edge: virtualinvoke r0.<Core.Impl.BuilderTaskImpl: java.util.HashMap userFunction(java.util.LinkedList,java.util.HashMap)>(r25, r26) in <Core.Impl.BuilderTaskImpl: void run()> ==> <Core.SamplePrograms.UserBuilderTask: java.util.HashMap userFunction(java.util.LinkedList,java.util.HashMap)>
Global flow here: <Core.Impl.BuilderTaskImpl: void run()> calls: <Core.SamplePrograms.UserBuilderTask: java.util.HashMap userFunction(java.util.LinkedList,java.util.HashMap)> via: VIRTUAL edge: virtualinvoke r0.<Core.Impl.BuilderTaskImpl: java.util.HashMap userFunction(java.util.LinkedList,java.util.HashMap)>(r25, r26) in <Core.Impl.BuilderTaskImpl: void run()> ==> <Core.SamplePrograms.UserBuilderTask: java.util.HashMap userFunction(java.util.LinkedList,java.util.HashMap)>
Global flow here: <Core.Impl.BuilderTaskImpl: void run()> calls: <Core.Status: Core.Status$State getState()> via: VIRTUAL edge: $r23 = virtualinvoke $r22.<Core.Status: Core.Status$State getState()>() in <Core.Impl.BuilderTaskImpl: void run()> ==> <Core.Status: Core.Status$State getState()>
Global flow here: <Core.Impl.BuilderTaskImpl: void run()> calls: <CommLayer.CommClient: void stop()> via: VIRTUAL edge: virtualinvoke $r29.<CommLayer.CommClient: void stop()>() in <Core.Impl.BuilderTaskImpl: void run()> ==> <CommLayer.CommClient: void stop()>
Global flow here: <Core.Impl.BuilderTaskImpl: void changeState(Core.Status$State)> calls: <CommLayer.Messages.MessageBuilderUtil: CommLayer.Messages.AvalancheMessages$Message generateTaskStatusMessage(java.lang.String,Core.Status$State)> via: STATIC edge: $r8 = staticinvoke <CommLayer.Messages.MessageBuilderUtil: CommLayer.Messages.AvalancheMessages$Message generateTaskStatusMessage(java.lang.String,Core.Status$State)>($r5, $r7) in <Core.Impl.BuilderTaskImpl: void changeState(Core.Status$State)> ==> <CommLayer.Messages.MessageBuilderUtil: CommLayer.Messages.AvalancheMessages$Message generateTaskStatusMessage(java.lang.String,Core.Status$State)>
Global flow here: <Core.Impl.BuilderTaskImpl: void changeState(Core.Status$State)> calls: <Core.Status: void setState(Core.Status$State)> via: VIRTUAL edge: virtualinvoke $r2.<Core.Status: void setState(Core.Status$State)>(r1) in <Core.Impl.BuilderTaskImpl: void changeState(Core.Status$State)> ==> <Core.Status: void setState(Core.Status$State)>
Global flow here: <Core.Impl.BuilderTaskImpl: void changeState(Core.Status$State)> calls: <CommLayer.CommClient: void sendMessage(CommLayer.Messages.AvalancheMessages$Message)> via: VIRTUAL edge: virtualinvoke $r4.<CommLayer.CommClient: void sendMessage(CommLayer.Messages.AvalancheMessages$Message)>($r8) in <Core.Impl.BuilderTaskImpl: void changeState(Core.Status$State)> ==> <CommLayer.CommClient: void sendMessage(CommLayer.Messages.AvalancheMessages$Message)>
Global flow here: <Core.Impl.BuilderTaskImpl: void changeState(Core.Status$State)> calls: <Core.Status: java.lang.String getId()> via: VIRTUAL edge: $r5 = virtualinvoke $r3.<Core.Status: java.lang.String getId()>() in <Core.Impl.BuilderTaskImpl: void changeState(Core.Status$State)> ==> <Core.Status: java.lang.String getId()>
Global flow here: <Core.Impl.BuilderTaskImpl: void changeState(Core.Status$State)> calls: <Core.Status: Core.Status$State getState()> via: VIRTUAL edge: $r7 = virtualinvoke $r6.<Core.Status: Core.Status$State getState()>() in <Core.Impl.BuilderTaskImpl: void changeState(Core.Status$State)> ==> <Core.Status: Core.Status$State getState()>
Global flow here: <Core.Impl.BuilderTaskImpl: void update(java.util.Observable,java.lang.Object)> calls: <CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage: CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage$State getState()> via: VIRTUAL edge: $r19 = virtualinvoke $r18.<CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage: CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage$State getState()>() in <Core.Impl.BuilderTaskImpl: void update(java.util.Observable,java.lang.Object)> ==> <CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage: CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage$State getState()>
Global flow here: <Core.Impl.BuilderTaskImpl: void update(java.util.Observable,java.lang.Object)> calls: <CommLayer.Messages.AvalancheMessages$Message: CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage getTaskSetStateMessage()> via: VIRTUAL edge: $r18 = virtualinvoke $r10.<CommLayer.Messages.AvalancheMessages$Message: CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage getTaskSetStateMessage()>() in <Core.Impl.BuilderTaskImpl: void update(java.util.Observable,java.lang.Object)> ==> <CommLayer.Messages.AvalancheMessages$Message: CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage getTaskSetStateMessage()>
Global flow here: <Core.Impl.BuilderTaskImpl: void update(java.util.Observable,java.lang.Object)> calls: <CommLayer.Messages.MessageBuilderUtil: CommLayer.Messages.AvalancheMessages$Message getMessageOfType(java.lang.Object,CommLayer.Messages.AvalancheMessages$Message$MessageType)> via: STATIC edge: $r10 = staticinvoke <CommLayer.Messages.MessageBuilderUtil: CommLayer.Messages.AvalancheMessages$Message getMessageOfType(java.lang.Object,CommLayer.Messages.AvalancheMessages$Message$MessageType)>(r8, $r9) in <Core.Impl.BuilderTaskImpl: void update(java.util.Observable,java.lang.Object)> ==> <CommLayer.Messages.MessageBuilderUtil: CommLayer.Messages.AvalancheMessages$Message getMessageOfType(java.lang.Object,CommLayer.Messages.AvalancheMessages$Message$MessageType)>
Global flow here: <Core.Impl.BuilderTaskImpl: void storeOutput(java.util.HashMap)> calls: <CommLayer.Messages.MessageBuilderUtil: CommLayer.Messages.AvalancheMessages$Message generateDataHandlerWriteMessage(java.lang.String,java.util.HashMap)> via: STATIC edge: $r4 = staticinvoke <CommLayer.Messages.MessageBuilderUtil: CommLayer.Messages.AvalancheMessages$Message generateDataHandlerWriteMessage(java.lang.String,java.util.HashMap)>($r2, r1) in <Core.Impl.BuilderTaskImpl: void storeOutput(java.util.HashMap)> ==> <CommLayer.Messages.MessageBuilderUtil: CommLayer.Messages.AvalancheMessages$Message generateDataHandlerWriteMessage(java.lang.String,java.util.HashMap)>
Global flow here: <Core.Impl.BuilderTaskImpl: void storeOutput(java.util.HashMap)> calls: <CommLayer.CommClient: void sendMessage(CommLayer.Messages.AvalancheMessages$Message)> via: VIRTUAL edge: virtualinvoke $r3.<CommLayer.CommClient: void sendMessage(CommLayer.Messages.AvalancheMessages$Message)>($r4) in <Core.Impl.BuilderTaskImpl: void storeOutput(java.util.HashMap)> ==> <CommLayer.CommClient: void sendMessage(CommLayer.Messages.AvalancheMessages$Message)>
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: run
2: invokeConfigurationListeners
3: readFile
Flows from source is finished.
Start traversal for source: <Core.Impl.BuilderTaskImpl: void run()>...
Starting from source: 
0: run
1: invokeConfigurationListeners
Flows from source is finished.
Start traversal for source: <Core.Impl.BuilderTaskImpl: void readFile(java.lang.String,java.util.LinkedList)>...
Starting from source: 
0: readFile
1: run
2: invokeConfigurationListeners
Flows from source is finished.
Now we build call graphs for class: com.google.common.io.Files
Global flow here: <com.google.common.io.Files: com.google.common.io.CharSource asCharSource(java.io.File,java.nio.charset.Charset)> calls: <com.google.common.io.ByteSource: com.google.common.io.CharSource asCharSource(java.nio.charset.Charset)> via: VIRTUAL edge: $r3 = virtualinvoke $r1.<com.google.common.io.ByteSource: com.google.common.io.CharSource asCharSource(java.nio.charset.Charset)>(r2) in <com.google.common.io.Files: com.google.common.io.CharSource asCharSource(java.io.File,java.nio.charset.Charset)> ==> <com.google.common.io.ByteSource: com.google.common.io.CharSource asCharSource(java.nio.charset.Charset)>
Global flow here: <com.google.common.io.Files: com.google.common.io.CharSink asCharSink(java.io.File,java.nio.charset.Charset,com.google.common.io.FileWriteMode[])> calls: <com.google.common.io.ByteSink: com.google.common.io.CharSink asCharSink(java.nio.charset.Charset)> via: VIRTUAL edge: $r4 = virtualinvoke $r2.<com.google.common.io.ByteSink: com.google.common.io.CharSink asCharSink(java.nio.charset.Charset)>(r3) in <com.google.common.io.Files: com.google.common.io.CharSink asCharSink(java.io.File,java.nio.charset.Charset,com.google.common.io.FileWriteMode[])> ==> <com.google.common.io.ByteSink: com.google.common.io.CharSink asCharSink(java.nio.charset.Charset)>
Global flow here: <com.google.common.io.Files: java.lang.String toString(java.io.File,java.nio.charset.Charset)> calls: <com.google.common.io.CharSource: java.lang.String read()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<com.google.common.io.CharSource: java.lang.String read()>() in <com.google.common.io.Files: java.lang.String toString(java.io.File,java.nio.charset.Charset)> ==> <com.google.common.io.CharSource: java.lang.String read()>
Global flow here: <com.google.common.io.Files: void write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)> calls: <com.google.common.io.CharSink: void write(java.lang.CharSequence)> via: VIRTUAL edge: virtualinvoke $r3.<com.google.common.io.CharSink: void write(java.lang.CharSequence)>(r4) in <com.google.common.io.Files: void write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)> ==> <com.google.common.io.CharSink: void write(java.lang.CharSequence)>
Source here: <com.google.common.io.Files: java.io.File createTempDir()>
Source here: <com.google.common.io.Files: void createParentDirs(java.io.File)>
Source here: <com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>
Source here: <com.google.common.io.Files: java.lang.String getNameWithoutExtension(java.lang.String)>
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: toString
2: recover
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: toString
2: recover
Flows from source is finished.
Start traversal for source: <com.google.common.io.GwtWorkarounds$1: int read()>...
Starting from source: 
0: read
1: toString
2: recover
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: toString
2: recover
Flows from source is finished.
Start traversal for source: <com.google.common.io.MultiInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: toString
2: recover
Flows from source is finished.
Now we build call graphs for class: com.google.common.io.CountingInputStream
Source here: <com.google.common.io.CountingInputStream: int read(byte[],int,int)>
Now we build call graphs for class: com.google.common.io.Files$2
Source here: <com.google.common.io.Files$2: java.lang.Iterable children(java.io.File)>
Now we build call graphs for class: com.google.common.io.CharStreams
Global flow here: <com.google.common.io.CharStreams: long copy(java.lang.Readable,java.lang.Appendable)> calls: <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0) in <com.google.common.io.CharStreams: long copy(java.lang.Readable,java.lang.Appendable)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
Global flow here: <com.google.common.io.CharStreams: long copy(java.lang.Readable,java.lang.Appendable)> calls: <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1) in <com.google.common.io.CharStreams: long copy(java.lang.Readable,java.lang.Appendable)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
Source here: <com.google.common.io.CharStreams: void skipFully(java.io.Reader,long)>
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: copy
2: toStringBuilder
3: toString
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: copy
2: toStringBuilder
3: toString
Flows from source is finished.
Start traversal for source: <com.google.common.io.GwtWorkarounds$1: int read()>...
Starting from source: 
0: read
1: copy
2: toStringBuilder
3: toString
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: copy
2: toStringBuilder
3: toString
Flows from source is finished.
Start traversal for source: <com.google.common.io.MultiInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: copy
2: toStringBuilder
3: toString
Flows from source is finished.
Start traversal for source: <com.google.common.io.CountingInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: copy
2: toStringBuilder
3: toString
Flows from source is finished.
Now we build call graphs for class: org.fusesource.leveldbjni.internal.Util
Source here: <org.fusesource.leveldbjni.internal.Util: void link(java.io.File,java.io.File)>
Now we build call graphs for class: org.iq80.leveldb.util.FileUtils
Source here: <org.iq80.leveldb.util.FileUtils: boolean isSymbolicLink(java.io.File)>
Source here: <org.iq80.leveldb.util.FileUtils: com.google.common.collect.ImmutableList listFiles(java.io.File)>
Source here: <org.iq80.leveldb.util.FileUtils: java.io.File createTempDir(java.lang.String)>
Source here: <org.iq80.leveldb.util.FileUtils: boolean copyDirectoryContents(java.io.File,java.io.File)>
Now we build call graphs for class: org.fusesource.leveldbjni.internal.NativeDB
Global flow here: <org.fusesource.leveldbjni.internal.NativeDB: void checkStatus(long)> calls: <org.fusesource.leveldbjni.internal.NativeStatus: void delete()> via: VIRTUAL edge: virtualinvoke $r0.<org.fusesource.leveldbjni.internal.NativeStatus: void delete()>() in <org.fusesource.leveldbjni.internal.NativeDB: void checkStatus(long)> ==> <org.fusesource.leveldbjni.internal.NativeStatus: void delete()>
Global flow here: <org.fusesource.leveldbjni.internal.NativeDB: void checkStatus(long)> calls: <org.fusesource.leveldbjni.internal.NativeStatus: void delete()> via: VIRTUAL edge: virtualinvoke $r0.<org.fusesource.leveldbjni.internal.NativeStatus: void delete()>() in <org.fusesource.leveldbjni.internal.NativeDB: void checkStatus(long)> ==> <org.fusesource.leveldbjni.internal.NativeStatus: void delete()>
Global flow here: <org.fusesource.leveldbjni.internal.NativeDB: void checkStatus(long)> calls: <org.fusesource.leveldbjni.internal.NativeStatus: boolean isNotFound()> via: VIRTUAL edge: $z1 = virtualinvoke $r0.<org.fusesource.leveldbjni.internal.NativeStatus: boolean isNotFound()>() in <org.fusesource.leveldbjni.internal.NativeDB: void checkStatus(long)> ==> <org.fusesource.leveldbjni.internal.NativeStatus: boolean isNotFound()>
Global flow here: <org.fusesource.leveldbjni.internal.NativeDB: void checkStatus(long)> calls: <org.fusesource.leveldbjni.internal.NativeStatus: java.lang.String toString()> via: VIRTUAL edge: $r2 = virtualinvoke $r0.<org.fusesource.leveldbjni.internal.NativeStatus: java.lang.String toString()>() in <org.fusesource.leveldbjni.internal.NativeDB: void checkStatus(long)> ==> <org.fusesource.leveldbjni.internal.NativeStatus: java.lang.String toString()>
Global flow here: <org.fusesource.leveldbjni.internal.NativeDB: void checkStatus(long)> calls: <org.fusesource.leveldbjni.internal.NativeStatus: boolean isOk()> via: VIRTUAL edge: $z0 = virtualinvoke $r0.<org.fusesource.leveldbjni.internal.NativeStatus: boolean isOk()>() in <org.fusesource.leveldbjni.internal.NativeDB: void checkStatus(long)> ==> <org.fusesource.leveldbjni.internal.NativeStatus: boolean isOk()>
Source here: <org.fusesource.leveldbjni.internal.NativeDB: org.fusesource.leveldbjni.internal.NativeDB open(org.fusesource.leveldbjni.internal.NativeOptions,java.io.File)>
Global flow here: <org.fusesource.leveldbjni.internal.NativeDB: org.fusesource.leveldbjni.internal.NativeDB open(org.fusesource.leveldbjni.internal.NativeOptions,java.io.File)> calls: <org.fusesource.leveldbjni.internal.NativeDB$DBJNI: long Open(org.fusesource.leveldbjni.internal.NativeOptions,java.lang.String,long[])> via: STATIC edge: $l0 = staticinvoke <org.fusesource.leveldbjni.internal.NativeDB$DBJNI: long Open(org.fusesource.leveldbjni.internal.NativeOptions,java.lang.String,long[])>(r0, $r3, r2) in <org.fusesource.leveldbjni.internal.NativeDB: org.fusesource.leveldbjni.internal.NativeDB open(org.fusesource.leveldbjni.internal.NativeOptions,java.io.File)> ==> <org.fusesource.leveldbjni.internal.NativeDB$DBJNI: long Open(org.fusesource.leveldbjni.internal.NativeOptions,java.lang.String,long[])>
Global flow here: <org.fusesource.leveldbjni.internal.NativeDB: org.fusesource.leveldbjni.internal.NativeDB open(org.fusesource.leveldbjni.internal.NativeOptions,java.io.File)> calls: <org.fusesource.leveldbjni.internal.NativeDB$DBJNI: void delete(long)> via: STATIC edge: staticinvoke <org.fusesource.leveldbjni.internal.NativeDB$DBJNI: void delete(long)>($l4) in <org.fusesource.leveldbjni.internal.NativeDB: org.fusesource.leveldbjni.internal.NativeDB open(org.fusesource.leveldbjni.internal.NativeOptions,java.io.File)> ==> <org.fusesource.leveldbjni.internal.NativeDB$DBJNI: void delete(long)>
Source here: <org.fusesource.leveldbjni.internal.NativeDB: void destroy(java.io.File,org.fusesource.leveldbjni.internal.NativeOptions)>
Source here: <org.fusesource.leveldbjni.internal.NativeDB: void repair(java.io.File,org.fusesource.leveldbjni.internal.NativeOptions)>
Start traversal for source: <org.fusesource.leveldbjni.internal.NativeDB: org.fusesource.leveldbjni.internal.NativeDB open(org.fusesource.leveldbjni.internal.NativeOptions,java.io.File)>...
Starting from source: 
0: open
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getCanonicalPath()>...
Starting from source: 
0: getCanonicalPath
1: open
Flows from source is finished.
Now we build call graphs for class: com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream
Source here: <com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream: int available()>
Source here: <com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream: int read()>
Source here: <com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream: int read(byte[],int,int)>
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: readRawBytes
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: readRawBytes
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: readRawBytes
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int read()>...
Starting from source: 
0: read
1: readRawBytes
Flows from source is finished.
Start traversal for source: <com.google.common.io.MultiInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: readRawBytes
Flows from source is finished.
Start traversal for source: <com.google.common.io.CountingInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: readRawBytes
Flows from source is finished.
Start traversal for source: <com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream: int read()>...
Starting from source: 
0: read
1: readRawBytes
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: readRawBytes
Flows from source is finished.
Start traversal for source: <com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: readRawBytes
Flows from source is finished.
Start traversal for source: <com.google.common.io.GwtWorkarounds$1: int read()>...
Starting from source: 
0: read
1: readRawBytes
Flows from source is finished.
Now we build call graphs for class: com.google.common.io.FileBackedOutputStream
Source here: <com.google.common.io.FileBackedOutputStream: void update(int)>
Now we build call graphs for class: com.google.common.io.Resources$UrlByteSource
Source here: <com.google.common.io.Resources$UrlByteSource: java.io.InputStream openStream()>
Now we build call graphs for class: org.iq80.leveldb.util.Slice
Global flow here: <org.iq80.leveldb.util.Slice: byte getByte(int)> calls: <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i4, $i1, $i0) in <org.iq80.leveldb.util.Slice: byte getByte(int)> ==> <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>
Global flow here: <org.iq80.leveldb.util.Slice: int getInt(int)> calls: <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i20, $i1, $i0) in <org.iq80.leveldb.util.Slice: int getInt(int)> ==> <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>
Global flow here: <org.iq80.leveldb.util.Slice: long getLong(int)> calls: <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i48, $i1, $i0) in <org.iq80.leveldb.util.Slice: long getLong(int)> ==> <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>
Global flow here: <org.iq80.leveldb.util.Slice: void getBytes(int,byte[],int,int)> calls: <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i7, $i2, $i1) in <org.iq80.leveldb.util.Slice: void getBytes(int,byte[],int,int)> ==> <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>
Global flow here: <org.iq80.leveldb.util.Slice: void getBytes(int,byte[],int,int)> calls: <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i3, $i5, $i4) in <org.iq80.leveldb.util.Slice: void getBytes(int,byte[],int,int)> ==> <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>
Global flow here: <org.iq80.leveldb.util.Slice: void getBytes(int,java.nio.ByteBuffer)> calls: <com.google.common.base.Preconditions: int checkPositionIndex(int,int)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: int checkPositionIndex(int,int)>(i5, $i0) in <org.iq80.leveldb.util.Slice: void getBytes(int,java.nio.ByteBuffer)> ==> <com.google.common.base.Preconditions: int checkPositionIndex(int,int)>
Global flow here: <org.iq80.leveldb.util.Slice: int getBytes(int,java.nio.channels.GatheringByteChannel,int)> calls: <sun.nio.ch.FileChannelImpl: int write(java.nio.ByteBuffer)> via: INTERFACE edge: $i4 = interfaceinvoke r1.<java.nio.channels.GatheringByteChannel: int write(java.nio.ByteBuffer)>($r3) in <org.iq80.leveldb.util.Slice: int getBytes(int,java.nio.channels.GatheringByteChannel,int)> ==> <sun.nio.ch.FileChannelImpl: int write(java.nio.ByteBuffer)>
Global flow here: <org.iq80.leveldb.util.Slice: int getBytes(int,java.nio.channels.GatheringByteChannel,int)> calls: <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i5, $i2, $i1) in <org.iq80.leveldb.util.Slice: int getBytes(int,java.nio.channels.GatheringByteChannel,int)> ==> <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>
Global flow here: <org.iq80.leveldb.util.Slice: void setInt(int,int)> calls: <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i14, $i1, $i0) in <org.iq80.leveldb.util.Slice: void setInt(int,int)> ==> <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>
Global flow here: <org.iq80.leveldb.util.Slice: void setLong(int,long)> calls: <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i34, $i1, $i0) in <org.iq80.leveldb.util.Slice: void setLong(int,long)> ==> <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>
Global flow here: <org.iq80.leveldb.util.Slice: void setByte(int,int)> calls: <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i5, $i1, $i0) in <org.iq80.leveldb.util.Slice: void setByte(int,int)> ==> <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>
Global flow here: <org.iq80.leveldb.util.Slice: void setBytes(int,byte[],int,int)> calls: <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i7, $i2, $i1) in <org.iq80.leveldb.util.Slice: void setBytes(int,byte[],int,int)> ==> <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>
Global flow here: <org.iq80.leveldb.util.Slice: void setBytes(int,byte[],int,int)> calls: <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i3, $i5, $i4) in <org.iq80.leveldb.util.Slice: void setBytes(int,byte[],int,int)> ==> <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>
Source here: <org.iq80.leveldb.util.Slice: int setBytes(int,java.io.InputStream,int)>
Global flow here: <org.iq80.leveldb.util.Slice: int setBytes(int,java.nio.channels.ScatteringByteChannel,int)> calls: <sun.nio.ch.FileChannelImpl: int read(java.nio.ByteBuffer)> via: INTERFACE edge: i7 = interfaceinvoke r3.<java.nio.channels.ScatteringByteChannel: int read(java.nio.ByteBuffer)>($r2) in <org.iq80.leveldb.util.Slice: int setBytes(int,java.nio.channels.ScatteringByteChannel,int)> ==> <sun.nio.ch.FileChannelImpl: int read(java.nio.ByteBuffer)>
Global flow here: <org.iq80.leveldb.util.Slice: int setBytes(int,java.nio.channels.ScatteringByteChannel,int)> calls: <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i4, $i2, $i1) in <org.iq80.leveldb.util.Slice: int setBytes(int,java.nio.channels.ScatteringByteChannel,int)> ==> <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>
Global flow here: <org.iq80.leveldb.util.Slice: org.iq80.leveldb.util.Slice copySlice(int,int)> calls: <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i4, $i2, $i1) in <org.iq80.leveldb.util.Slice: org.iq80.leveldb.util.Slice copySlice(int,int)> ==> <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>
Global flow here: <org.iq80.leveldb.util.Slice: org.iq80.leveldb.util.Slice slice(int,int)> calls: <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i0, $i3, $i2) in <org.iq80.leveldb.util.Slice: org.iq80.leveldb.util.Slice slice(int,int)> ==> <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>
Global flow here: <org.iq80.leveldb.util.Slice: java.nio.ByteBuffer toByteBuffer(int,int)> calls: <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i4, $i2, $i1) in <org.iq80.leveldb.util.Slice: java.nio.ByteBuffer toByteBuffer(int,int)> ==> <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>
Global flow here: <org.iq80.leveldb.util.Slice: java.lang.String toString(int,int,java.nio.charset.Charset)> calls: <org.iq80.leveldb.util.Slices: java.lang.String decodeString(java.nio.ByteBuffer,java.nio.charset.Charset)> via: STATIC edge: $r3 = staticinvoke <org.iq80.leveldb.util.Slices: java.lang.String decodeString(java.nio.ByteBuffer,java.nio.charset.Charset)>($r1, r2) in <org.iq80.leveldb.util.Slice: java.lang.String toString(int,int,java.nio.charset.Charset)> ==> <org.iq80.leveldb.util.Slices: java.lang.String decodeString(java.nio.ByteBuffer,java.nio.charset.Charset)>
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: setBytes
2: writeBytes
3: ensureSize
Flows from source is finished.
Start traversal for source: <org.iq80.leveldb.util.Slice: int setBytes(int,java.io.InputStream,int)>...
Starting from source: 
0: setBytes
1: writeBytes
2: ensureSize
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: setBytes
2: writeBytes
3: ensureSize
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: setBytes
2: writeBytes
3: ensureSize
Flows from source is finished.
Start traversal for source: <com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream: int available()>...
Starting from source: 
0: available
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int read()>...
Starting from source: 
0: read
1: setBytes
2: writeBytes
3: ensureSize
Flows from source is finished.
Start traversal for source: <com.google.common.io.MultiInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: setBytes
2: writeBytes
3: ensureSize
Flows from source is finished.
Start traversal for source: <com.google.common.io.CountingInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: setBytes
2: writeBytes
3: ensureSize
Flows from source is finished.
Start traversal for source: <java.io.ObjectInputStream: int readInt()>...
Starting from source: 
0: readInt
Flows from source is finished.
Start traversal for source: <com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream: int read()>...
Starting from source: 
0: read
1: setBytes
2: writeBytes
3: ensureSize
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int available()>...
Starting from source: 
0: available
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: setBytes
2: writeBytes
3: ensureSize
Flows from source is finished.
Start traversal for source: <com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: setBytes
2: writeBytes
3: ensureSize
Flows from source is finished.
Start traversal for source: <com.google.common.io.GwtWorkarounds$1: int read()>...
Starting from source: 
0: read
1: setBytes
2: writeBytes
3: ensureSize
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int available()>...
Starting from source: 
0: available
Flows from source is finished.
Start traversal for source: <com.google.common.io.MultiInputStream: int available()>...
Starting from source: 
0: available
Flows from source is finished.
Now we build call graphs for class: com.google.common.io.ByteStreams$LimitedInputStream
Source here: <com.google.common.io.ByteStreams$LimitedInputStream: int available()>
Source here: <com.google.common.io.ByteStreams$LimitedInputStream: int read(byte[],int,int)>
Now we build call graphs for class: com.google.common.io.MultiReader
Source here: <com.google.common.io.MultiReader: int read(char[],int,int)>
Now we build call graphs for class: com.google.protobuf.ByteString
Source here: <com.google.protobuf.ByteString: com.google.protobuf.ByteString readChunk(java.io.InputStream,int)>
Global flow here: <com.google.protobuf.ByteString: void copyTo(byte[],int,int,int)> calls: <com.google.protobuf.LiteralByteString: int size()> via: VIRTUAL edge: $i4 = virtualinvoke r0.<com.google.protobuf.ByteString: int size()>() in <com.google.protobuf.ByteString: void copyTo(byte[],int,int,int)> ==> <com.google.protobuf.LiteralByteString: int size()>
Global flow here: <com.google.protobuf.ByteString: byte[] toByteArray()> calls: <com.google.protobuf.LiteralByteString: int size()> via: VIRTUAL edge: $i0 = virtualinvoke r0.<com.google.protobuf.ByteString: int size()>() in <com.google.protobuf.ByteString: byte[] toByteArray()> ==> <com.google.protobuf.LiteralByteString: int size()>
Global flow here: <com.google.protobuf.ByteString: java.lang.String toStringUtf8()> calls: <com.google.protobuf.LiteralByteString: java.lang.String toString(java.lang.String)> via: VIRTUAL edge: $r1 = virtualinvoke r0.<com.google.protobuf.ByteString: java.lang.String toString(java.lang.String)>("UTF-8") in <com.google.protobuf.ByteString: java.lang.String toStringUtf8()> ==> <com.google.protobuf.LiteralByteString: java.lang.String toString(java.lang.String)>
Global flow here: <com.google.protobuf.ByteString: java.lang.String toString()> calls: <com.google.protobuf.LiteralByteString: int size()> via: VIRTUAL edge: $i1 = virtualinvoke r1.<com.google.protobuf.ByteString: int size()>() in <com.google.protobuf.ByteString: java.lang.String toString()> ==> <com.google.protobuf.LiteralByteString: int size()>
Start traversal for source: <com.google.common.io.FileBackedOutputStream: void update(int)>...
Starting from source: 
0: update
Flows from source is finished.
Now we build call graphs for class: com.google.common.collect.ArrayListMultimap
Source here: <com.google.common.collect.ArrayListMultimap: void readObject(java.io.ObjectInputStream)>
Global flow here: <com.google.common.collect.ArrayListMultimap: java.util.Map asMap()> calls: <com.google.common.collect.AbstractListMultimap: java.util.Map asMap()> via: SPECIAL edge: $r1 = specialinvoke r0.<com.google.common.collect.AbstractListMultimap: java.util.Map asMap()>() in <com.google.common.collect.ArrayListMultimap: java.util.Map asMap()> ==> <com.google.common.collect.AbstractListMultimap: java.util.Map asMap()>
Global flow here: <com.google.common.collect.ArrayListMultimap: boolean put(java.lang.Object,java.lang.Object)> calls: <com.google.common.collect.AbstractListMultimap: boolean put(java.lang.Object,java.lang.Object)> via: SPECIAL edge: $z0 = specialinvoke r0.<com.google.common.collect.AbstractListMultimap: boolean put(java.lang.Object,java.lang.Object)>(r1, r2) in <com.google.common.collect.ArrayListMultimap: boolean put(java.lang.Object,java.lang.Object)> ==> <com.google.common.collect.AbstractListMultimap: boolean put(java.lang.Object,java.lang.Object)>
Global flow here: <com.google.common.collect.ArrayListMultimap: void clear()> calls: <com.google.common.collect.AbstractMapBasedMultimap: void clear()> via: SPECIAL edge: specialinvoke r0.<com.google.common.collect.AbstractListMultimap: void clear()>() in <com.google.common.collect.ArrayListMultimap: void clear()> ==> <com.google.common.collect.AbstractMapBasedMultimap: void clear()>
Global flow here: <com.google.common.collect.ArrayListMultimap: int size()> calls: <com.google.common.collect.AbstractMapBasedMultimap: int size()> via: SPECIAL edge: $i0 = specialinvoke r0.<com.google.common.collect.AbstractListMultimap: int size()>() in <com.google.common.collect.ArrayListMultimap: int size()> ==> <com.google.common.collect.AbstractMapBasedMultimap: int size()>
Global flow here: <com.google.common.collect.ArrayListMultimap: boolean putAll(com.google.common.collect.Multimap)> calls: <com.google.common.collect.AbstractMultimap: boolean putAll(com.google.common.collect.Multimap)> via: SPECIAL edge: $z0 = specialinvoke r0.<com.google.common.collect.AbstractListMultimap: boolean putAll(com.google.common.collect.Multimap)>(r1) in <com.google.common.collect.ArrayListMultimap: boolean putAll(com.google.common.collect.Multimap)> ==> <com.google.common.collect.AbstractMultimap: boolean putAll(com.google.common.collect.Multimap)>
Global flow here: <com.google.common.collect.ArrayListMultimap: boolean isEmpty()> calls: <com.google.common.collect.AbstractMultimap: boolean isEmpty()> via: SPECIAL edge: $z0 = specialinvoke r0.<com.google.common.collect.AbstractListMultimap: boolean isEmpty()>() in <com.google.common.collect.ArrayListMultimap: boolean isEmpty()> ==> <com.google.common.collect.AbstractMultimap: boolean isEmpty()>
Now we build call graphs for class: com.google.common.collect.ImmutableSetMultimap
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Set entrySet()> via: INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>() in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Set entrySet()>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.collect.AbstractMultimap: java.util.Map asMap()> via: INTERFACE edge: $r2 = interfaceinvoke r0.<com.google.common.collect.Multimap: java.util.Map asMap()>() in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.collect.AbstractMultimap: java.util.Map asMap()>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.collect.AbstractMultimap: boolean isEmpty()> via: INTERFACE edge: $z0 = interfaceinvoke r0.<com.google.common.collect.Multimap: boolean isEmpty()>() in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.collect.AbstractMultimap: boolean isEmpty()>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.collect.EmptyImmutableSortedSet: int size()> via: VIRTUAL edge: $i0 = virtualinvoke $r13.<com.google.common.collect.ImmutableSet: int size()>() in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.collect.EmptyImmutableSortedSet: int size()>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.collect.EmptyImmutableSortedSet: boolean isEmpty()> via: VIRTUAL edge: $z2 = virtualinvoke $r13.<com.google.common.collect.ImmutableSet: boolean isEmpty()>() in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.collect.EmptyImmutableSortedSet: boolean isEmpty()>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.collect.RegularImmutableSortedSet: int size()> via: VIRTUAL edge: $i0 = virtualinvoke $r13.<com.google.common.collect.ImmutableSet: int size()>() in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.collect.RegularImmutableSortedSet: int size()>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.collect.RegularImmutableSortedSet: boolean isEmpty()> via: VIRTUAL edge: $z2 = virtualinvoke $r13.<com.google.common.collect.ImmutableSet: boolean isEmpty()>() in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.collect.RegularImmutableSortedSet: boolean isEmpty()>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.collect.ImmutableEnumSet: int size()> via: VIRTUAL edge: $i0 = virtualinvoke $r13.<com.google.common.collect.ImmutableSet: int size()>() in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.collect.ImmutableEnumSet: int size()>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.collect.ImmutableEnumSet: boolean isEmpty()> via: VIRTUAL edge: $z2 = virtualinvoke $r13.<com.google.common.collect.ImmutableSet: boolean isEmpty()>() in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.collect.ImmutableEnumSet: boolean isEmpty()>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.collect.EmptyImmutableSet: int size()> via: VIRTUAL edge: $i0 = virtualinvoke $r13.<com.google.common.collect.ImmutableSet: int size()>() in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.collect.EmptyImmutableSet: int size()>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.collect.EmptyImmutableSet: boolean isEmpty()> via: VIRTUAL edge: $z2 = virtualinvoke $r13.<com.google.common.collect.ImmutableSet: boolean isEmpty()>() in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.collect.EmptyImmutableSet: boolean isEmpty()>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.collect.RegularImmutableSet: int size()> via: VIRTUAL edge: $i0 = virtualinvoke $r13.<com.google.common.collect.ImmutableSet: int size()>() in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.collect.RegularImmutableSet: int size()>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.collect.SingletonImmutableSet: int size()> via: VIRTUAL edge: $i0 = virtualinvoke $r13.<com.google.common.collect.ImmutableSet: int size()>() in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.collect.SingletonImmutableSet: int size()>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.collect.SingletonImmutableSet: boolean isEmpty()> via: VIRTUAL edge: $z2 = virtualinvoke $r13.<com.google.common.collect.ImmutableSet: boolean isEmpty()>() in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.collect.SingletonImmutableSet: boolean isEmpty()>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()> via: VIRTUAL edge: $r6 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>() in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r1.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r10, $r13) in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0) in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> calls: <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()> via: STATIC edge: $r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>() in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator)> ==> <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSet valueSet(java.util.Comparator,java.util.Collection)> calls: <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)> via: STATIC edge: $r2 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>(r1) in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSet valueSet(java.util.Comparator,java.util.Collection)> ==> <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSet valueSet(java.util.Comparator,java.util.Collection)> calls: <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Collection)> via: STATIC edge: $r2 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Collection)>(r0, r1) in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSet valueSet(java.util.Comparator,java.util.Collection)> ==> <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Collection)>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSet emptySet(java.util.Comparator)> calls: <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()> via: STATIC edge: $r1 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>() in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSet emptySet(java.util.Comparator)> ==> <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>
Global flow here: <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSet emptySet(java.util.Comparator)> calls: <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet emptySet(java.util.Comparator)> via: STATIC edge: $r1 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet emptySet(java.util.Comparator)>(r0) in <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSet emptySet(java.util.Comparator)> ==> <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet emptySet(java.util.Comparator)>
Source here: <com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>
Now we build call graphs for class: SchedLayer.UI.MachinePool
Source here: <SchedLayer.UI.MachinePool: void loadMachinesFromFile()>
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: loadMachinesFromFile
Flows from source is finished.
Start traversal for source: <SchedLayer.UI.MachinePool: void loadMachinesFromFile()>...
Starting from source: 
0: loadMachinesFromFile
Flows from source is finished.
Now we build call graphs for class: com.google.common.io.CharSource
Global flow here: <com.google.common.io.CharSource: java.lang.String read()> calls: <com.google.common.io.ByteSource$AsCharSource: java.io.Reader openStream()> via: VIRTUAL edge: $r2 = virtualinvoke r1.<com.google.common.io.CharSource: java.io.Reader openStream()>() in <com.google.common.io.CharSource: java.lang.String read()> ==> <com.google.common.io.ByteSource$AsCharSource: java.io.Reader openStream()>
Global flow here: <com.google.common.io.CharSource: java.lang.String read()> calls: <com.google.common.io.Closer: void close()> via: VIRTUAL edge: virtualinvoke $r0.<com.google.common.io.Closer: void close()>() in <com.google.common.io.CharSource: java.lang.String read()> ==> <com.google.common.io.Closer: void close()>
Global flow here: <com.google.common.io.CharSource: java.lang.String read()> calls: <com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)> via: VIRTUAL edge: $r7 = virtualinvoke $r0.<com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>($r6) in <com.google.common.io.CharSource: java.lang.String read()> ==> <com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>
Global flow here: <com.google.common.io.CharSource: java.lang.String read()> calls: <com.google.common.io.Closer: void close()> via: VIRTUAL edge: virtualinvoke $r0.<com.google.common.io.Closer: void close()>() in <com.google.common.io.CharSource: java.lang.String read()> ==> <com.google.common.io.Closer: void close()>
Global flow here: <com.google.common.io.CharSource: java.lang.String read()> calls: <com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)> via: VIRTUAL edge: $r3 = virtualinvoke $r0.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r2) in <com.google.common.io.CharSource: java.lang.String read()> ==> <com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>
Global flow here: <com.google.common.io.CharSource: java.lang.String read()> calls: <com.google.common.io.Closer: com.google.common.io.Closer create()> via: STATIC edge: $r0 = staticinvoke <com.google.common.io.Closer: com.google.common.io.Closer create()>() in <com.google.common.io.CharSource: java.lang.String read()> ==> <com.google.common.io.Closer: com.google.common.io.Closer create()>
Global flow here: <com.google.common.io.CharSource: java.lang.String read()> calls: <com.google.common.io.CharStreams: java.lang.String toString(java.lang.Readable)> via: STATIC edge: $r4 = staticinvoke <com.google.common.io.CharStreams: java.lang.String toString(java.lang.Readable)>(r8) in <com.google.common.io.CharSource: java.lang.String read()> ==> <com.google.common.io.CharStreams: java.lang.String toString(java.lang.Readable)>
Source here: <com.google.common.io.CharSource: java.lang.String readFirstLine()>
Source here: <com.google.common.io.CharSource: com.google.common.collect.ImmutableList readLines()>
Source here: <com.google.common.io.CharSource: boolean isEmpty()>
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: toString
Flows from source is finished.
Start traversal for source: <com.google.common.io.MultiReader: int read(char[],int,int)>...
Starting from source: 
0: read
1: toString
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: toString
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: toString
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int read()>...
Starting from source: 
0: read
1: toString
Flows from source is finished.
Start traversal for source: <com.google.common.io.MultiInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: toString
Flows from source is finished.
Start traversal for source: <com.google.common.io.CountingInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: toString
Flows from source is finished.
Start traversal for source: <com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream: int read()>...
Starting from source: 
0: read
1: toString
Flows from source is finished.
Start traversal for source: <com.google.common.io.ByteStreams$LimitedInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: toString
Flows from source is finished.
Start traversal for source: <java.net.URL: java.io.InputStream openStream()>...
Starting from source: 
0: openStream
1: read
2: toString
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: toString
Flows from source is finished.
Start traversal for source: <com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: toString
Flows from source is finished.
Start traversal for source: <com.google.common.io.GwtWorkarounds$1: int read()>...
Starting from source: 
0: read
1: toString
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[],int,int)>...
Starting from source: 
0: read
1: toString
Flows from source is finished.
Start traversal for source: <com.google.common.io.Resources$UrlByteSource: java.io.InputStream openStream()>...
Starting from source: 
0: openStream
1: read
2: toString
Flows from source is finished.
Now we build call graphs for class: com.google.protobuf.CodedInputStream
Global flow here: <com.google.protobuf.CodedInputStream: int readTag()> calls: <com.google.protobuf.WireFormat: int getTagFieldNumber(int)> via: STATIC edge: $i2 = staticinvoke <com.google.protobuf.WireFormat: int getTagFieldNumber(int)>($i1) in <com.google.protobuf.CodedInputStream: int readTag()> ==> <com.google.protobuf.WireFormat: int getTagFieldNumber(int)>
Global flow here: <com.google.protobuf.CodedInputStream: int readTag()> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException invalidTag()> via: STATIC edge: $r1 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException invalidTag()>() in <com.google.protobuf.CodedInputStream: int readTag()> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException invalidTag()>
Global flow here: <com.google.protobuf.CodedInputStream: void checkLastTagWas(int)> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException invalidEndTag()> via: STATIC edge: $r1 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException invalidEndTag()>() in <com.google.protobuf.CodedInputStream: void checkLastTagWas(int)> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException invalidEndTag()>
Global flow here: <com.google.protobuf.CodedInputStream: void readGroup(int,com.google.protobuf.MessageLite$Builder,com.google.protobuf.ExtensionRegistryLite)> calls: <com.google.protobuf.UnknownFieldSet$Builder: com.google.protobuf.UnknownFieldSet$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)> via: INTERFACE edge: interfaceinvoke r1.<com.google.protobuf.MessageLite$Builder: com.google.protobuf.MessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r0, r2) in <com.google.protobuf.CodedInputStream: void readGroup(int,com.google.protobuf.MessageLite$Builder,com.google.protobuf.ExtensionRegistryLite)> ==> <com.google.protobuf.UnknownFieldSet$Builder: com.google.protobuf.UnknownFieldSet$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>
Global flow here: <com.google.protobuf.CodedInputStream: void readGroup(int,com.google.protobuf.MessageLite$Builder,com.google.protobuf.ExtensionRegistryLite)> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException recursionLimitExceeded()> via: STATIC edge: $r3 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException recursionLimitExceeded()>() in <com.google.protobuf.CodedInputStream: void readGroup(int,com.google.protobuf.MessageLite$Builder,com.google.protobuf.ExtensionRegistryLite)> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException recursionLimitExceeded()>
Global flow here: <com.google.protobuf.CodedInputStream: void readGroup(int,com.google.protobuf.MessageLite$Builder,com.google.protobuf.ExtensionRegistryLite)> calls: <com.google.protobuf.WireFormat: int makeTag(int,int)> via: STATIC edge: $i5 = staticinvoke <com.google.protobuf.WireFormat: int makeTag(int,int)>(i4, 4) in <com.google.protobuf.CodedInputStream: void readGroup(int,com.google.protobuf.MessageLite$Builder,com.google.protobuf.ExtensionRegistryLite)> ==> <com.google.protobuf.WireFormat: int makeTag(int,int)>
Global flow here: <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$Node$1: CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$Node parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)> via: INTERFACE edge: $r3 = interfaceinvoke r1.<com.google.protobuf.Parser: java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r0, r2) in <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$Node$1: CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$Node parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>
Global flow here: <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$BuilderNode$1: CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$BuilderNode parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)> via: INTERFACE edge: $r3 = interfaceinvoke r1.<com.google.protobuf.Parser: java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r0, r2) in <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$BuilderNode$1: CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$BuilderNode parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>
Global flow here: <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyResponseMessage$1: CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyResponseMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)> via: INTERFACE edge: $r3 = interfaceinvoke r1.<com.google.protobuf.Parser: java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r0, r2) in <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyResponseMessage$1: CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyResponseMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>
Global flow here: <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyRequestMessage$1: CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyRequestMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)> via: INTERFACE edge: $r3 = interfaceinvoke r1.<com.google.protobuf.Parser: java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r0, r2) in <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyRequestMessage$1: CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyRequestMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>
Global flow here: <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceResponseMessage$1: CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceResponseMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)> via: INTERFACE edge: $r3 = interfaceinvoke r1.<com.google.protobuf.Parser: java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r0, r2) in <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceResponseMessage$1: CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceResponseMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>
Global flow here: <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceRequestMessage$1: CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceRequestMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)> via: INTERFACE edge: $r3 = interfaceinvoke r1.<com.google.protobuf.Parser: java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r0, r2) in <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceRequestMessage$1: CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceRequestMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>
Global flow here: <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataRegMessage$1: CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataRegMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)> via: INTERFACE edge: $r3 = interfaceinvoke r1.<com.google.protobuf.Parser: java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r0, r2) in <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataRegMessage$1: CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataRegMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>
Global flow here: <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$Location$1: CommLayer.Messages.AvalancheMessages$Message$Location parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)> via: INTERFACE edge: $r3 = interfaceinvoke r1.<com.google.protobuf.Parser: java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r0, r2) in <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$Location$1: CommLayer.Messages.AvalancheMessages$Message$Location parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>
Global flow here: <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$1: CommLayer.Messages.AvalancheMessages$Message$TopologyMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)> via: INTERFACE edge: $r3 = interfaceinvoke r1.<com.google.protobuf.Parser: java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r0, r2) in <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$1: CommLayer.Messages.AvalancheMessages$Message$TopologyMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>
Global flow here: <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$1: CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)> via: INTERFACE edge: $r3 = interfaceinvoke r1.<com.google.protobuf.Parser: java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r0, r2) in <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$1: CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>
Global flow here: <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataHandlerMessage$1: CommLayer.Messages.AvalancheMessages$Message$DataHandlerMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)> via: INTERFACE edge: $r3 = interfaceinvoke r1.<com.google.protobuf.Parser: java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r0, r2) in <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataHandlerMessage$1: CommLayer.Messages.AvalancheMessages$Message$DataHandlerMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>
Global flow here: <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage$1: CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)> via: INTERFACE edge: $r3 = interfaceinvoke r1.<com.google.protobuf.Parser: java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r0, r2) in <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage$1: CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>
Global flow here: <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TaskStatusMessage$1: CommLayer.Messages.AvalancheMessages$Message$TaskStatusMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)> via: INTERFACE edge: $r3 = interfaceinvoke r1.<com.google.protobuf.Parser: java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r0, r2) in <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TaskStatusMessage$1: CommLayer.Messages.AvalancheMessages$Message$TaskStatusMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>
Global flow here: <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TaskInitMessage$1: CommLayer.Messages.AvalancheMessages$Message$TaskInitMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)> via: INTERFACE edge: $r3 = interfaceinvoke r1.<com.google.protobuf.Parser: java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r0, r2) in <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TaskInitMessage$1: CommLayer.Messages.AvalancheMessages$Message$TaskInitMessage parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>
Global flow here: <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException recursionLimitExceeded()> via: STATIC edge: $r5 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException recursionLimitExceeded()>() in <com.google.protobuf.CodedInputStream: com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser,com.google.protobuf.ExtensionRegistryLite)> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException recursionLimitExceeded()>
Global flow here: <com.google.protobuf.CodedInputStream: com.google.protobuf.ByteString readBytes()> calls: <com.google.protobuf.ByteString: com.google.protobuf.ByteString copyFrom(byte[],int,int)> via: STATIC edge: $r4 = staticinvoke <com.google.protobuf.ByteString: com.google.protobuf.ByteString copyFrom(byte[],int,int)>($r3, $i4, $i0) in <com.google.protobuf.CodedInputStream: com.google.protobuf.ByteString readBytes()> ==> <com.google.protobuf.ByteString: com.google.protobuf.ByteString copyFrom(byte[],int,int)>
Global flow here: <com.google.protobuf.CodedInputStream: com.google.protobuf.ByteString readBytes()> calls: <com.google.protobuf.ByteString: com.google.protobuf.ByteString copyFrom(byte[])> via: STATIC edge: $r2 = staticinvoke <com.google.protobuf.ByteString: com.google.protobuf.ByteString copyFrom(byte[])>($r1) in <com.google.protobuf.CodedInputStream: com.google.protobuf.ByteString readBytes()> ==> <com.google.protobuf.ByteString: com.google.protobuf.ByteString copyFrom(byte[])>
Global flow here: <com.google.protobuf.CodedInputStream: int readRawVarint32()> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException malformedVarint()> via: STATIC edge: $r1 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException malformedVarint()>() in <com.google.protobuf.CodedInputStream: int readRawVarint32()> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException malformedVarint()>
Global flow here: <com.google.protobuf.CodedInputStream: int readRawVarint32(int,java.io.InputStream)> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()> via: STATIC edge: $r3 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>() in <com.google.protobuf.CodedInputStream: int readRawVarint32(int,java.io.InputStream)> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>
Global flow here: <com.google.protobuf.CodedInputStream: int readRawVarint32(int,java.io.InputStream)> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()> via: STATIC edge: $r2 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>() in <com.google.protobuf.CodedInputStream: int readRawVarint32(int,java.io.InputStream)> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>
Global flow here: <com.google.protobuf.CodedInputStream: int readRawVarint32(int,java.io.InputStream)> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException malformedVarint()> via: STATIC edge: $r0 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException malformedVarint()>() in <com.google.protobuf.CodedInputStream: int readRawVarint32(int,java.io.InputStream)> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException malformedVarint()>
Global flow here: <com.google.protobuf.CodedInputStream: long readRawVarint64()> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException malformedVarint()> via: STATIC edge: $r0 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException malformedVarint()>() in <com.google.protobuf.CodedInputStream: long readRawVarint64()> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException malformedVarint()>
Global flow here: <com.google.protobuf.CodedInputStream: int pushLimit(int)> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException negativeSize()> via: STATIC edge: $r2 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException negativeSize()>() in <com.google.protobuf.CodedInputStream: int pushLimit(int)> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException negativeSize()>
Global flow here: <com.google.protobuf.CodedInputStream: int pushLimit(int)> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()> via: STATIC edge: $r1 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>() in <com.google.protobuf.CodedInputStream: int pushLimit(int)> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>
Source here: <com.google.protobuf.CodedInputStream: boolean refillBuffer(boolean)>
Global flow here: <com.google.protobuf.CodedInputStream: boolean refillBuffer(boolean)> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()> via: STATIC edge: $r12 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>() in <com.google.protobuf.CodedInputStream: boolean refillBuffer(boolean)> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>
Global flow here: <com.google.protobuf.CodedInputStream: boolean refillBuffer(boolean)> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()> via: STATIC edge: $r11 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>() in <com.google.protobuf.CodedInputStream: boolean refillBuffer(boolean)> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>
Global flow here: <com.google.protobuf.CodedInputStream: boolean refillBuffer(boolean)> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException sizeLimitExceeded()> via: STATIC edge: $r10 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException sizeLimitExceeded()>() in <com.google.protobuf.CodedInputStream: boolean refillBuffer(boolean)> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException sizeLimitExceeded()>
Source here: <com.google.protobuf.CodedInputStream: byte[] readRawBytes(int)>
Global flow here: <com.google.protobuf.CodedInputStream: byte[] readRawBytes(int)> calls: <com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream: int read(byte[],int,int)> via: VIRTUAL edge: $i46 = virtualinvoke $r7.<java.io.InputStream: int read(byte[],int,int)>(r17, i45, $i19) in <com.google.protobuf.CodedInputStream: byte[] readRawBytes(int)> ==> <com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream: int read(byte[],int,int)>
Global flow here: <com.google.protobuf.CodedInputStream: byte[] readRawBytes(int)> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException negativeSize()> via: STATIC edge: $r14 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException negativeSize()>() in <com.google.protobuf.CodedInputStream: byte[] readRawBytes(int)> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException negativeSize()>
Global flow here: <com.google.protobuf.CodedInputStream: byte[] readRawBytes(int)> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()> via: STATIC edge: $r13 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>() in <com.google.protobuf.CodedInputStream: byte[] readRawBytes(int)> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>
Global flow here: <com.google.protobuf.CodedInputStream: byte[] readRawBytes(int)> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()> via: STATIC edge: $r8 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>() in <com.google.protobuf.CodedInputStream: byte[] readRawBytes(int)> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>
Global flow here: <com.google.protobuf.CodedInputStream: void skipRawBytes(int)> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException negativeSize()> via: STATIC edge: $r2 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException negativeSize()>() in <com.google.protobuf.CodedInputStream: void skipRawBytes(int)> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException negativeSize()>
Global flow here: <com.google.protobuf.CodedInputStream: void skipRawBytes(int)> calls: <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()> via: STATIC edge: $r1 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>() in <com.google.protobuf.CodedInputStream: void skipRawBytes(int)> ==> <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: readRawBytes
2: readBytes
3: mergeFieldFrom
4: refillBuffer
5: skipRawBytes
6: readRawByte
7: readRawLittleEndian64
8: readFixed64
9: readRawLittleEndian32
10: readFixed32
11: readRawVarint64
12: readInt64
13: readRawVarint32
14: parsePartialDelimitedFrom
15: readEnum
16: readMessage
17: readInt32
18: readTag
19: mergeFrom
20: readGroup
21: isAtEnd
Flows from source is finished.
Start traversal for source: <com.google.common.io.MultiReader: int read(char[],int,int)>...
Starting from source: 
0: read
1: readRawBytes
2: readBytes
3: mergeFieldFrom
4: refillBuffer
5: skipRawBytes
6: readRawByte
7: readRawLittleEndian64
8: readFixed64
9: readRawLittleEndian32
10: readFixed32
11: readRawVarint64
12: readInt64
13: readRawVarint32
14: parsePartialDelimitedFrom
15: readEnum
16: readMessage
17: readInt32
18: readTag
19: mergeFrom
20: readGroup
21: isAtEnd
Flows from source is finished.
Start traversal for source: <com.google.protobuf.CodedInputStream: byte[] readRawBytes(int)>...
Starting from source: 
0: readRawBytes
1: readBytes
2: mergeFieldFrom
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: readRawBytes
2: readBytes
3: mergeFieldFrom
4: refillBuffer
5: skipRawBytes
6: readRawByte
7: readRawLittleEndian64
8: readFixed64
9: readRawLittleEndian32
10: readFixed32
11: readRawVarint64
12: readInt64
13: readRawVarint32
14: parsePartialDelimitedFrom
15: readEnum
16: readMessage
17: readInt32
18: readTag
19: mergeFrom
20: readGroup
21: isAtEnd
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: readRawBytes
2: readBytes
3: mergeFieldFrom
4: refillBuffer
5: skipRawBytes
6: readRawByte
7: readRawLittleEndian64
8: readFixed64
9: readRawLittleEndian32
10: readFixed32
11: readRawVarint64
12: readInt64
13: readRawVarint32
14: parsePartialDelimitedFrom
15: readEnum
16: readMessage
17: readInt32
18: readTag
19: mergeFrom
20: readGroup
21: isAtEnd
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int read()>...
Starting from source: 
0: read
1: readRawBytes
2: readBytes
3: mergeFieldFrom
4: refillBuffer
5: skipRawBytes
6: readRawByte
7: readRawLittleEndian64
8: readFixed64
9: readRawLittleEndian32
10: readFixed32
11: readRawVarint64
12: readInt64
13: readRawVarint32
14: parsePartialDelimitedFrom
15: readEnum
16: readMessage
17: readInt32
18: readTag
19: mergeFrom
20: readGroup
21: isAtEnd
Flows from source is finished.
Start traversal for source: <com.google.common.io.MultiInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: readRawBytes
2: readBytes
3: mergeFieldFrom
4: refillBuffer
5: skipRawBytes
6: readRawByte
7: readRawLittleEndian64
8: readFixed64
9: readRawLittleEndian32
10: readFixed32
11: readRawVarint64
12: readInt64
13: readRawVarint32
14: parsePartialDelimitedFrom
15: readEnum
16: readMessage
17: readInt32
18: readTag
19: mergeFrom
20: readGroup
21: isAtEnd
Flows from source is finished.
Start traversal for source: <com.google.common.io.CountingInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: readRawBytes
2: readBytes
3: mergeFieldFrom
4: refillBuffer
5: skipRawBytes
6: readRawByte
7: readRawLittleEndian64
8: readFixed64
9: readRawLittleEndian32
10: readFixed32
11: readRawVarint64
12: readInt64
13: readRawVarint32
14: parsePartialDelimitedFrom
15: readEnum
16: readMessage
17: readInt32
18: readTag
19: mergeFrom
20: readGroup
21: isAtEnd
Flows from source is finished.
Start traversal for source: <com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream: int read()>...
Starting from source: 
0: read
1: readRawBytes
2: readBytes
3: mergeFieldFrom
4: refillBuffer
5: skipRawBytes
6: readRawByte
7: readRawLittleEndian64
8: readFixed64
9: readRawLittleEndian32
10: readFixed32
11: readRawVarint64
12: readInt64
13: readRawVarint32
14: parsePartialDelimitedFrom
15: readEnum
16: readMessage
17: readInt32
18: readTag
19: mergeFrom
20: readGroup
21: isAtEnd
Flows from source is finished.
Start traversal for source: <com.google.common.io.ByteStreams$LimitedInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: readRawBytes
2: readBytes
3: mergeFieldFrom
4: refillBuffer
5: skipRawBytes
6: readRawByte
7: readRawLittleEndian64
8: readFixed64
9: readRawLittleEndian32
10: readFixed32
11: readRawVarint64
12: readInt64
13: readRawVarint32
14: parsePartialDelimitedFrom
15: readEnum
16: readMessage
17: readInt32
18: readTag
19: mergeFrom
20: readGroup
21: isAtEnd
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: readRawBytes
2: readBytes
3: mergeFieldFrom
4: refillBuffer
5: skipRawBytes
6: readRawByte
7: readRawLittleEndian64
8: readFixed64
9: readRawLittleEndian32
10: readFixed32
11: readRawVarint64
12: readInt64
13: readRawVarint32
14: parsePartialDelimitedFrom
15: readEnum
16: readMessage
17: readInt32
18: readTag
19: mergeFrom
20: readGroup
21: isAtEnd
Flows from source is finished.
Start traversal for source: <com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: readRawBytes
2: readBytes
3: mergeFieldFrom
4: refillBuffer
5: skipRawBytes
6: readRawByte
7: readRawLittleEndian64
8: readFixed64
9: readRawLittleEndian32
10: readFixed32
11: readRawVarint64
12: readInt64
13: readRawVarint32
14: parsePartialDelimitedFrom
15: readEnum
16: readMessage
17: readInt32
18: readTag
19: mergeFrom
20: readGroup
21: isAtEnd
Flows from source is finished.
Start traversal for source: <com.google.protobuf.CodedInputStream: boolean refillBuffer(boolean)>...
Starting from source: 
0: refillBuffer
1: readRawBytes
2: readBytes
3: mergeFieldFrom
4: skipRawBytes
5: readRawByte
6: readRawLittleEndian64
7: readFixed64
8: readRawLittleEndian32
9: readFixed32
10: readRawVarint64
11: readInt64
12: readRawVarint32
13: parsePartialDelimitedFrom
14: readEnum
15: readMessage
16: readInt32
17: readTag
18: mergeFrom
19: readGroup
20: isAtEnd
Flows from source is finished.
Start traversal for source: <com.google.common.io.GwtWorkarounds$1: int read()>...
Starting from source: 
0: read
1: readRawBytes
2: readBytes
3: mergeFieldFrom
4: refillBuffer
5: skipRawBytes
6: readRawByte
7: readRawLittleEndian64
8: readFixed64
9: readRawLittleEndian32
10: readFixed32
11: readRawVarint64
12: readInt64
13: readRawVarint32
14: parsePartialDelimitedFrom
15: readEnum
16: readMessage
17: readInt32
18: readTag
19: mergeFrom
20: readGroup
21: isAtEnd
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[],int,int)>...
Starting from source: 
0: read
1: readRawBytes
2: readBytes
3: mergeFieldFrom
4: refillBuffer
5: skipRawBytes
6: readRawByte
7: readRawLittleEndian64
8: readFixed64
9: readRawLittleEndian32
10: readFixed32
11: readRawVarint64
12: readInt64
13: readRawVarint32
14: parsePartialDelimitedFrom
15: readEnum
16: readMessage
17: readInt32
18: readTag
19: mergeFrom
20: readGroup
21: isAtEnd
Flows from source is finished.
Now we build call graphs for class: com.google.common.io.LineReader
Source here: <com.google.common.io.LineReader: java.lang.String readLine()>
Now we build call graphs for class: com.google.common.hash.HashingInputStream
Source here: <com.google.common.hash.HashingInputStream: int read(byte[],int,int)>
Now we build call graphs for class: com.google.common.collect.ImmutableListMultimap
Global flow here: <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> calls: <com.google.common.collect.ArrayListMultimap: java.util.Map asMap()> via: INTERFACE edge: $r2 = interfaceinvoke r0.<com.google.common.collect.Multimap: java.util.Map asMap()>() in <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> ==> <com.google.common.collect.ArrayListMultimap: java.util.Map asMap()>
Global flow here: <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> calls: <com.google.common.collect.ArrayListMultimap: boolean isEmpty()> via: INTERFACE edge: $z0 = interfaceinvoke r0.<com.google.common.collect.Multimap: boolean isEmpty()>() in <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> ==> <com.google.common.collect.ArrayListMultimap: boolean isEmpty()>
Global flow here: <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> calls: <com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Set entrySet()> via: INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>() in <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> ==> <com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Set entrySet()>
Global flow here: <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> calls: <com.google.common.collect.AbstractMultimap: java.util.Map asMap()> via: INTERFACE edge: $r2 = interfaceinvoke r0.<com.google.common.collect.Multimap: java.util.Map asMap()>() in <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> ==> <com.google.common.collect.AbstractMultimap: java.util.Map asMap()>
Global flow here: <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> calls: <com.google.common.collect.AbstractMultimap: boolean isEmpty()> via: INTERFACE edge: $z0 = interfaceinvoke r0.<com.google.common.collect.Multimap: boolean isEmpty()>() in <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> ==> <com.google.common.collect.AbstractMultimap: boolean isEmpty()>
Global flow here: <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> calls: <com.google.common.collect.RegularImmutableList: int size()> via: VIRTUAL edge: $i0 = virtualinvoke $r11.<com.google.common.collect.ImmutableList: int size()>() in <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> ==> <com.google.common.collect.RegularImmutableList: int size()>
Global flow here: <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> calls: <com.google.common.collect.SingletonImmutableList: int size()> via: VIRTUAL edge: $i0 = virtualinvoke $r11.<com.google.common.collect.ImmutableList: int size()>() in <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> ==> <com.google.common.collect.SingletonImmutableList: int size()>
Global flow here: <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> calls: <com.google.common.collect.SingletonImmutableList: boolean isEmpty()> via: VIRTUAL edge: $z2 = virtualinvoke $r11.<com.google.common.collect.ImmutableList: boolean isEmpty()>() in <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> ==> <com.google.common.collect.SingletonImmutableList: boolean isEmpty()>
Global flow here: <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> calls: <com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()> via: VIRTUAL edge: $r6 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>() in <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> ==> <com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>
Global flow here: <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> calls: <com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r1.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r12, $r11) in <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> ==> <com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>
Global flow here: <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> calls: <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()> via: STATIC edge: $r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>() in <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> ==> <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>
Global flow here: <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> calls: <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)> via: STATIC edge: $r11 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r10) in <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)> ==> <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>
Source here: <com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>
Start traversal for source: <com.google.common.io.CharSource: boolean isEmpty()>...
Starting from source: 
0: isEmpty
1: copyOf
Flows from source is finished.
Now we build call graphs for class: com.google.common.util.concurrent.AtomicDouble
Source here: <com.google.common.util.concurrent.AtomicDouble: void readObject(java.io.ObjectInputStream)>
Now we build call graphs for class: com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy
Source here: <com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: com.google.common.collect.MapMaker readMapMaker(java.io.ObjectInputStream)>
Now we build call graphs for class: org.iq80.leveldb.impl.Filename
Global flow here: <org.iq80.leveldb.impl.Filename: java.lang.String descriptorFileName(long)> calls: <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "number is negative") in <org.iq80.leveldb.impl.Filename: java.lang.String descriptorFileName(long)> ==> <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>
Source here: <org.iq80.leveldb.impl.Filename: org.iq80.leveldb.impl.Filename$FileInfo parseFileName(java.io.File)>
Global flow here: <org.iq80.leveldb.impl.Filename: boolean setCurrentFile(java.io.File,long)> calls: <com.google.common.io.Files: void write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)> via: STATIC edge: staticinvoke <com.google.common.io.Files: void write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)>($r7, $r2, $r8) in <org.iq80.leveldb.impl.Filename: boolean setCurrentFile(java.io.File,long)> ==> <com.google.common.io.Files: void write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)>
Global flow here: <org.iq80.leveldb.impl.Filename: boolean setCurrentFile(java.io.File,long)> calls: <com.google.common.io.Files: void write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)> via: STATIC edge: staticinvoke <com.google.common.io.Files: void write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)>($r14, $r9, $r15) in <org.iq80.leveldb.impl.Filename: boolean setCurrentFile(java.io.File,long)> ==> <com.google.common.io.Files: void write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)>
Source here: <org.iq80.leveldb.impl.Filename: java.util.List listFiles(java.io.File)>
Global flow here: <org.iq80.leveldb.impl.Filename: java.util.List listFiles(java.io.File)> calls: <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()> via: STATIC edge: $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>() in <org.iq80.leveldb.impl.Filename: java.util.List listFiles(java.io.File)> ==> <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>
Global flow here: <org.iq80.leveldb.impl.Filename: java.util.List listFiles(java.io.File)> calls: <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])> via: STATIC edge: $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])>($r1) in <org.iq80.leveldb.impl.Filename: java.util.List listFiles(java.io.File)> ==> <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])>
Global flow here: <org.iq80.leveldb.impl.Filename: java.lang.String makeFileName(long,java.lang.String)> calls: <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "number is negative") in <org.iq80.leveldb.impl.Filename: java.lang.String makeFileName(long,java.lang.String)> ==> <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>
Global flow here: <org.iq80.leveldb.impl.Filename: java.lang.String makeFileName(long,java.lang.String)> calls: <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "suffix is null") in <org.iq80.leveldb.impl.Filename: java.lang.String makeFileName(long,java.lang.String)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
Start traversal for source: <java.io.File: java.io.File[] listFiles()>...
Starting from source: 
0: listFiles
Flows from source is finished.
Start traversal for source: <org.iq80.leveldb.impl.Filename: org.iq80.leveldb.impl.Filename$FileInfo parseFileName(java.io.File)>...
Starting from source: 
0: parseFileName
Flows from source is finished.
Start traversal for source: <org.iq80.leveldb.util.FileUtils: com.google.common.collect.ImmutableList listFiles(java.io.File)>...
Starting from source: 
0: listFiles
Flows from source is finished.
Start traversal for source: <org.iq80.leveldb.impl.Filename: java.util.List listFiles(java.io.File)>...
Starting from source: 
0: listFiles
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: parseFileName
Flows from source is finished.
Now we build call graphs for class: org.apache.commons.lang.SystemUtils
Source here: <org.apache.commons.lang.SystemUtils: java.io.File getJavaHome()>
Source here: <org.apache.commons.lang.SystemUtils: java.io.File getJavaIoTmpDir()>
Source here: <org.apache.commons.lang.SystemUtils: java.lang.String getSystemProperty(java.lang.String)>
Source here: <org.apache.commons.lang.SystemUtils: java.io.File getUserDir()>
Source here: <org.apache.commons.lang.SystemUtils: java.io.File getUserHome()>
Global flow here: <org.apache.commons.lang.SystemUtils: int[] toJavaVersionIntArray(java.lang.String,int)> calls: <org.apache.commons.lang.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)> via: STATIC edge: $r1 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>(r0, "._- ") in <org.apache.commons.lang.SystemUtils: int[] toJavaVersionIntArray(java.lang.String,int)> ==> <org.apache.commons.lang.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getSystemProperty
Flows from source is finished.
Start traversal for source: <org.apache.commons.lang.SystemUtils: java.lang.String getSystemProperty(java.lang.String)>...
Starting from source: 
0: getSystemProperty
Flows from source is finished.
Now we build call graphs for class: com.google.common.io.LittleEndianDataInputStream
Source here: <com.google.common.io.LittleEndianDataInputStream: java.lang.String readUTF()>
Now we build call graphs for class: com.google.common.io.CharSink
Global flow here: <com.google.common.io.CharSink: void write(java.lang.CharSequence)> calls: <com.google.common.io.ByteSink$AsCharSink: java.io.Writer openStream()> via: VIRTUAL edge: $r3 = virtualinvoke r2.<com.google.common.io.CharSink: java.io.Writer openStream()>() in <com.google.common.io.CharSink: void write(java.lang.CharSequence)> ==> <com.google.common.io.ByteSink$AsCharSink: java.io.Writer openStream()>
Global flow here: <com.google.common.io.CharSink: void write(java.lang.CharSequence)> calls: <com.google.common.io.Closer: void close()> via: VIRTUAL edge: virtualinvoke $r1.<com.google.common.io.Closer: void close()>() in <com.google.common.io.CharSink: void write(java.lang.CharSequence)> ==> <com.google.common.io.Closer: void close()>
Global flow here: <com.google.common.io.CharSink: void write(java.lang.CharSequence)> calls: <com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)> via: VIRTUAL edge: $r7 = virtualinvoke $r1.<com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>($r6) in <com.google.common.io.CharSink: void write(java.lang.CharSequence)> ==> <com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>
Global flow here: <com.google.common.io.CharSink: void write(java.lang.CharSequence)> calls: <com.google.common.io.Closer: void close()> via: VIRTUAL edge: virtualinvoke $r1.<com.google.common.io.Closer: void close()>() in <com.google.common.io.CharSink: void write(java.lang.CharSequence)> ==> <com.google.common.io.Closer: void close()>
Global flow here: <com.google.common.io.CharSink: void write(java.lang.CharSequence)> calls: <com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)> via: VIRTUAL edge: $r4 = virtualinvoke $r1.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r3) in <com.google.common.io.CharSink: void write(java.lang.CharSequence)> ==> <com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>
Global flow here: <com.google.common.io.CharSink: void write(java.lang.CharSequence)> calls: <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)> via: STATIC edge: staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0) in <com.google.common.io.CharSink: void write(java.lang.CharSequence)> ==> <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
Global flow here: <com.google.common.io.CharSink: void write(java.lang.CharSequence)> calls: <com.google.common.io.Closer: com.google.common.io.Closer create()> via: STATIC edge: $r1 = staticinvoke <com.google.common.io.Closer: com.google.common.io.Closer create()>() in <com.google.common.io.CharSink: void write(java.lang.CharSequence)> ==> <com.google.common.io.Closer: com.google.common.io.Closer create()>
Source here: <com.google.common.io.CharSink: void writeLines(java.lang.Iterable)>
Start traversal for source: <java.net.URL: java.io.InputStream openStream()>...
Starting from source: 
0: openStream
1: write
Flows from source is finished.
Start traversal for source: <com.google.common.io.Resources$UrlByteSource: java.io.InputStream openStream()>...
Starting from source: 
0: openStream
1: write
Flows from source is finished.
Now we build call graphs for class: com.google.common.base.StandardSystemProperty
Source here: <com.google.common.base.StandardSystemProperty: java.lang.String value()>
Now we build call graphs for class: com.google.common.cache.LongAdder
Source here: <com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>
Now we build call graphs for class: com.google.common.reflect.ClassPath
Source here: <com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableMap getClassPathEntries(java.lang.ClassLoader)>
Now we build call graphs for class: com.google.common.collect.LinkedHashMultimap
Global flow here: <com.google.common.collect.LinkedHashMultimap: void succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry)> calls: <com.google.common.collect.LinkedHashMultimap$ValueEntry: void setPredecessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)> via: VIRTUAL edge: virtualinvoke r1.<com.google.common.collect.LinkedHashMultimap$ValueEntry: void setPredecessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)>(r0) in <com.google.common.collect.LinkedHashMultimap: void succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry)> ==> <com.google.common.collect.LinkedHashMultimap$ValueEntry: void setPredecessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)>
Global flow here: <com.google.common.collect.LinkedHashMultimap: void succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry)> calls: <com.google.common.collect.LinkedHashMultimap$ValueEntry: void setSuccessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)> via: VIRTUAL edge: virtualinvoke r0.<com.google.common.collect.LinkedHashMultimap$ValueEntry: void setSuccessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)>(r1) in <com.google.common.collect.LinkedHashMultimap: void succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry)> ==> <com.google.common.collect.LinkedHashMultimap$ValueEntry: void setSuccessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)>
Source here: <com.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)>
Now we build call graphs for class: com.google.common.util.concurrent.AtomicDoubleArray
Source here: <com.google.common.util.concurrent.AtomicDoubleArray: void readObject(java.io.ObjectInputStream)>
Now we build call graphs for class: SchedLayer.UI.Topology
Source here: <SchedLayer.UI.Topology: void loadTopologyFromFile()>
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: loadTopologyFromFile
Flows from source is finished.
Start traversal for source: <com.google.common.io.LineReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: loadTopologyFromFile
Flows from source is finished.
Start traversal for source: <SchedLayer.UI.Topology: void loadTopologyFromFile()>...
Starting from source: 
0: loadTopologyFromFile
Flows from source is finished.
Now we build call graphs for class: org.iq80.leveldb.impl.DbImpl
Source here: <org.iq80.leveldb.impl.DbImpl: void makeRoomForWrite(boolean)>
Now we build call graphs for class: com.google.common.util.concurrent.MoreExecutors
Source here: <com.google.common.util.concurrent.MoreExecutors: boolean isAppEngine()>
Start traversal for source: <Core.Impl.BuilderTaskImpl: void run()>...
Starting from source: 
0: run
Flows from source is finished.
Now we build call graphs for class: org.fusesource.hawtjni.runtime.Library
Source here: <org.fusesource.hawtjni.runtime.Library: java.lang.String getOperatingSystem()>
Source here: <org.fusesource.hawtjni.runtime.Library: int getBitModel()>
Source here: <org.fusesource.hawtjni.runtime.Library: void doLoad()>
Source here: <org.fusesource.hawtjni.runtime.Library: boolean exractAndLoad(java.util.ArrayList,java.lang.String,java.lang.String,java.lang.String)>
Source here: <org.fusesource.hawtjni.runtime.Library: java.io.File extract(java.util.ArrayList,java.net.URL,java.lang.String,java.lang.String,java.io.File)>
Global flow here: <org.fusesource.hawtjni.runtime.Library: java.io.File extract(java.util.ArrayList,java.net.URL,java.lang.String,java.lang.String,java.io.File)> calls: <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()> via: VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String getMessage()>() in <org.fusesource.hawtjni.runtime.Library: java.io.File extract(java.util.ArrayList,java.net.URL,java.lang.String,java.lang.String,java.io.File)> ==> <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
Global flow here: <org.fusesource.hawtjni.runtime.Library: java.io.File extract(java.util.ArrayList,java.net.URL,java.lang.String,java.lang.String,java.io.File)> calls: <sun.nio.fs.WindowsException: java.lang.String getMessage()> via: VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String getMessage()>() in <org.fusesource.hawtjni.runtime.Library: java.io.File extract(java.util.ArrayList,java.net.URL,java.lang.String,java.lang.String,java.io.File)> ==> <sun.nio.fs.WindowsException: java.lang.String getMessage()>
Source here: <org.fusesource.hawtjni.runtime.Library: void chmod(java.lang.String,java.io.File)>
Source here: <org.fusesource.hawtjni.runtime.Library: boolean load(java.util.ArrayList,java.io.File)>
Start traversal for source: <org.fusesource.hawtjni.runtime.Library: java.io.File extract(java.util.ArrayList,java.net.URL,java.lang.String,java.lang.String,java.io.File)>...
Starting from source: 
0: extract
1: exractAndLoad
2: doLoad
3: load
Flows from source is finished.
Start traversal for source: <org.fusesource.hawtjni.runtime.Library: int getBitModel()>...
Starting from source: 
0: getBitModel
1: exractAndLoad
2: doLoad
3: load
4: getPlatform
5: chmod
6: extract
7: getPlatformSpecifcResourcePath
8: getOperatingSystemSpecifcResourcePath
Flows from source is finished.
Start traversal for source: <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>...
Starting from source: 
0: createTempFile
1: extract
2: exractAndLoad
3: doLoad
4: load
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getPath()>...
Starting from source: 
0: getPath
1: load
2: exractAndLoad
3: doLoad
Flows from source is finished.
Start traversal for source: <org.fusesource.hawtjni.runtime.Library: boolean exractAndLoad(java.util.ArrayList,java.lang.String,java.lang.String,java.lang.String)>...
Starting from source: 
0: exractAndLoad
1: doLoad
2: load
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: exractAndLoad
2: doLoad
3: load
4: getBitModel
5: getPlatform
6: chmod
7: extract
8: getPlatformSpecifcResourcePath
9: getOperatingSystemSpecifcResourcePath
10: getOperatingSystem
Flows from source is finished.
Start traversal for source: <org.fusesource.hawtjni.runtime.Library: void chmod(java.lang.String,java.io.File)>...
Starting from source: 
0: chmod
1: extract
2: exractAndLoad
3: doLoad
4: load
Flows from source is finished.
Start traversal for source: <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>...
Starting from source: 
0: createTempFile
1: extract
2: exractAndLoad
3: doLoad
4: load
Flows from source is finished.
Start traversal for source: <org.fusesource.hawtjni.runtime.Library: java.lang.String getOperatingSystem()>...
Starting from source: 
0: getOperatingSystem
1: getPlatform
2: chmod
3: extract
4: exractAndLoad
5: doLoad
6: load
7: getPlatformSpecifcResourcePath
8: getOperatingSystemSpecifcResourcePath
Flows from source is finished.
Start traversal for source: <org.fusesource.hawtjni.runtime.Library: void doLoad()>...
Starting from source: 
0: doLoad
1: load
2: exractAndLoad
Flows from source is finished.
Start traversal for source: <org.fusesource.hawtjni.runtime.Library: boolean load(java.util.ArrayList,java.io.File)>...
Starting from source: 
0: load
1: exractAndLoad
2: doLoad
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getCanonicalPath()>...
Starting from source: 
0: getCanonicalPath
1: chmod
2: extract
3: exractAndLoad
4: doLoad
5: load
Flows from source is finished.
Now we build call graphs for class: com.google.common.io.ByteStreams
Source here: <com.google.common.io.ByteStreams: long copy(java.io.InputStream,java.io.OutputStream)>
Source here: <com.google.common.io.ByteStreams: byte[] toByteArray(java.io.InputStream,int)>
Source here: <com.google.common.io.ByteStreams: java.lang.Object readBytes(java.io.InputStream,com.google.common.io.ByteProcessor)>
Source here: <com.google.common.io.ByteStreams: int read(java.io.InputStream,byte[],int,int)>
Now we build call graphs for class: com.google.common.reflect.ClassPath$Scanner
Source here: <com.google.common.reflect.ClassPath$Scanner: void scanDirectory(java.io.File,java.lang.ClassLoader,java.lang.String,com.google.common.collect.ImmutableSet)>
Source here: <com.google.common.reflect.ClassPath$Scanner: java.net.URI getClassPathEntry(java.io.File,java.lang.String)>
Now we build call graphs for class: com.google.protobuf.CodedOutputStream
Global flow here: <com.google.protobuf.CodedOutputStream: void writeGroupNoTag(com.google.protobuf.MessageLite)> calls: <com.google.protobuf.UnknownFieldSet: void writeTo(com.google.protobuf.CodedOutputStream)> via: INTERFACE edge: interfaceinvoke r0.<com.google.protobuf.MessageLite: void writeTo(com.google.protobuf.CodedOutputStream)>(r1) in <com.google.protobuf.CodedOutputStream: void writeGroupNoTag(com.google.protobuf.MessageLite)> ==> <com.google.protobuf.UnknownFieldSet: void writeTo(com.google.protobuf.CodedOutputStream)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TaskInitMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r1.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TaskInitMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$Node: void writeTo(com.google.protobuf.CodedOutputStream)> via: INTERFACE edge: interfaceinvoke r1.<com.google.protobuf.MessageLite: void writeTo(com.google.protobuf.CodedOutputStream)>(r0) in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$Node: void writeTo(com.google.protobuf.CodedOutputStream)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$Node: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r1.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$Node: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$BuilderNode: void writeTo(com.google.protobuf.CodedOutputStream)> via: INTERFACE edge: interfaceinvoke r1.<com.google.protobuf.MessageLite: void writeTo(com.google.protobuf.CodedOutputStream)>(r0) in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$BuilderNode: void writeTo(com.google.protobuf.CodedOutputStream)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$BuilderNode: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r1.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$BuilderNode: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <com.google.protobuf.UnknownFieldSet: void writeTo(com.google.protobuf.CodedOutputStream)> via: INTERFACE edge: interfaceinvoke r1.<com.google.protobuf.MessageLite: void writeTo(com.google.protobuf.CodedOutputStream)>(r0) in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <com.google.protobuf.UnknownFieldSet: void writeTo(com.google.protobuf.CodedOutputStream)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <com.google.protobuf.UnknownFieldSet: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r1.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <com.google.protobuf.UnknownFieldSet: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$Location: void writeTo(com.google.protobuf.CodedOutputStream)> via: INTERFACE edge: interfaceinvoke r1.<com.google.protobuf.MessageLite: void writeTo(com.google.protobuf.CodedOutputStream)>(r0) in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$Location: void writeTo(com.google.protobuf.CodedOutputStream)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$Location: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r1.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$Location: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyResponseMessage: void writeTo(com.google.protobuf.CodedOutputStream)> via: INTERFACE edge: interfaceinvoke r1.<com.google.protobuf.MessageLite: void writeTo(com.google.protobuf.CodedOutputStream)>(r0) in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyResponseMessage: void writeTo(com.google.protobuf.CodedOutputStream)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyResponseMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r1.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyResponseMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyRequestMessage: void writeTo(com.google.protobuf.CodedOutputStream)> via: INTERFACE edge: interfaceinvoke r1.<com.google.protobuf.MessageLite: void writeTo(com.google.protobuf.CodedOutputStream)>(r0) in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyRequestMessage: void writeTo(com.google.protobuf.CodedOutputStream)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyRequestMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r1.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyRequestMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceResponseMessage: void writeTo(com.google.protobuf.CodedOutputStream)> via: INTERFACE edge: interfaceinvoke r1.<com.google.protobuf.MessageLite: void writeTo(com.google.protobuf.CodedOutputStream)>(r0) in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceResponseMessage: void writeTo(com.google.protobuf.CodedOutputStream)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceResponseMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r1.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceResponseMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceRequestMessage: void writeTo(com.google.protobuf.CodedOutputStream)> via: INTERFACE edge: interfaceinvoke r1.<com.google.protobuf.MessageLite: void writeTo(com.google.protobuf.CodedOutputStream)>(r0) in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceRequestMessage: void writeTo(com.google.protobuf.CodedOutputStream)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceRequestMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r1.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceRequestMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataRegMessage: void writeTo(com.google.protobuf.CodedOutputStream)> via: INTERFACE edge: interfaceinvoke r1.<com.google.protobuf.MessageLite: void writeTo(com.google.protobuf.CodedOutputStream)>(r0) in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataRegMessage: void writeTo(com.google.protobuf.CodedOutputStream)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataRegMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r1.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataRegMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage: void writeTo(com.google.protobuf.CodedOutputStream)> via: INTERFACE edge: interfaceinvoke r1.<com.google.protobuf.MessageLite: void writeTo(com.google.protobuf.CodedOutputStream)>(r0) in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage: void writeTo(com.google.protobuf.CodedOutputStream)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r1.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage: void writeTo(com.google.protobuf.CodedOutputStream)> via: INTERFACE edge: interfaceinvoke r1.<com.google.protobuf.MessageLite: void writeTo(com.google.protobuf.CodedOutputStream)>(r0) in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage: void writeTo(com.google.protobuf.CodedOutputStream)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r1.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataHandlerMessage: void writeTo(com.google.protobuf.CodedOutputStream)> via: INTERFACE edge: interfaceinvoke r1.<com.google.protobuf.MessageLite: void writeTo(com.google.protobuf.CodedOutputStream)>(r0) in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataHandlerMessage: void writeTo(com.google.protobuf.CodedOutputStream)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataHandlerMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r1.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataHandlerMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage: void writeTo(com.google.protobuf.CodedOutputStream)> via: INTERFACE edge: interfaceinvoke r1.<com.google.protobuf.MessageLite: void writeTo(com.google.protobuf.CodedOutputStream)>(r0) in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage: void writeTo(com.google.protobuf.CodedOutputStream)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r1.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TaskStatusMessage: void writeTo(com.google.protobuf.CodedOutputStream)> via: INTERFACE edge: interfaceinvoke r1.<com.google.protobuf.MessageLite: void writeTo(com.google.protobuf.CodedOutputStream)>(r0) in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TaskStatusMessage: void writeTo(com.google.protobuf.CodedOutputStream)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TaskStatusMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r1.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TaskStatusMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TaskInitMessage: void writeTo(com.google.protobuf.CodedOutputStream)> via: INTERFACE edge: interfaceinvoke r1.<com.google.protobuf.MessageLite: void writeTo(com.google.protobuf.CodedOutputStream)>(r0) in <com.google.protobuf.CodedOutputStream: void writeMessageNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TaskInitMessage: void writeTo(com.google.protobuf.CodedOutputStream)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeBytesNoTag(com.google.protobuf.ByteString)> calls: <com.google.protobuf.LiteralByteString: int size()> via: VIRTUAL edge: $i0 = virtualinvoke r1.<com.google.protobuf.ByteString: int size()>() in <com.google.protobuf.CodedOutputStream: void writeBytesNoTag(com.google.protobuf.ByteString)> ==> <com.google.protobuf.LiteralByteString: int size()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeGroupSizeNoTag(com.google.protobuf.MessageLite)> calls: <com.google.protobuf.UnknownFieldSet: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r0.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: int computeGroupSizeNoTag(com.google.protobuf.MessageLite)> ==> <com.google.protobuf.UnknownFieldSet: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$Node: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r0.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$Node: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$BuilderNode: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r0.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage$BuilderNode: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> calls: <com.google.protobuf.UnknownFieldSet: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r0.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> ==> <com.google.protobuf.UnknownFieldSet: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$Location: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r0.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$Location: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataRegMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r0.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataRegMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceRequestMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r0.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceRequestMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceResponseMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r0.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataSourceResponseMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyRequestMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r0.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyRequestMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyResponseMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r0.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage$DataCopyResponseMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TaskInitMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r0.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TaskInitMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TaskStatusMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r0.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TaskStatusMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r0.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TaskSetStateMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataHandlerMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r0.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataHandlerMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r0.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$DataManagerMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> calls: <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage: int getSerializedSize()> via: INTERFACE edge: $i0 = interfaceinvoke r0.<com.google.protobuf.MessageLite: int getSerializedSize()>() in <com.google.protobuf.CodedOutputStream: int computeMessageSizeNoTag(com.google.protobuf.MessageLite)> ==> <CommLayer.Messages.AvalancheMessages$Message$TopologyMessage: int getSerializedSize()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeBytesSizeNoTag(com.google.protobuf.ByteString)> calls: <com.google.protobuf.LiteralByteString: int size()> via: VIRTUAL edge: $i2 = virtualinvoke r0.<com.google.protobuf.ByteString: int size()>() in <com.google.protobuf.CodedOutputStream: int computeBytesSizeNoTag(com.google.protobuf.ByteString)> ==> <com.google.protobuf.LiteralByteString: int size()>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeBytesSizeNoTag(com.google.protobuf.ByteString)> calls: <com.google.protobuf.LiteralByteString: int size()> via: VIRTUAL edge: $i0 = virtualinvoke r0.<com.google.protobuf.ByteString: int size()>() in <com.google.protobuf.CodedOutputStream: int computeBytesSizeNoTag(com.google.protobuf.ByteString)> ==> <com.google.protobuf.LiteralByteString: int size()>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeRawBytes(com.google.protobuf.ByteString)> calls: <com.google.protobuf.LiteralByteString: int size()> via: VIRTUAL edge: $i0 = virtualinvoke r1.<com.google.protobuf.ByteString: int size()>() in <com.google.protobuf.CodedOutputStream: void writeRawBytes(com.google.protobuf.ByteString)> ==> <com.google.protobuf.LiteralByteString: int size()>
Source here: <com.google.protobuf.CodedOutputStream: void writeRawBytes(com.google.protobuf.ByteString,int,int)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeRawBytes(com.google.protobuf.ByteString,int,int)> calls: <com.google.protobuf.LiteralByteString: java.io.InputStream newInput()> via: VIRTUAL edge: $r3 = virtualinvoke r1.<com.google.protobuf.ByteString: java.io.InputStream newInput()>() in <com.google.protobuf.CodedOutputStream: void writeRawBytes(com.google.protobuf.ByteString,int,int)> ==> <com.google.protobuf.LiteralByteString: java.io.InputStream newInput()>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeRawBytes(com.google.protobuf.ByteString,int,int)> calls: <com.google.protobuf.ByteString: void copyTo(byte[],int,int,int)> via: VIRTUAL edge: virtualinvoke r1.<com.google.protobuf.ByteString: void copyTo(byte[],int,int,int)>($r9, i21, 0, i22) in <com.google.protobuf.CodedOutputStream: void writeRawBytes(com.google.protobuf.ByteString,int,int)> ==> <com.google.protobuf.ByteString: void copyTo(byte[],int,int,int)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeRawBytes(com.google.protobuf.ByteString,int,int)> calls: <com.google.protobuf.ByteString: void copyTo(byte[],int,int,int)> via: VIRTUAL edge: virtualinvoke r1.<com.google.protobuf.ByteString: void copyTo(byte[],int,int,int)>($r2, i19, $i6, i5) in <com.google.protobuf.CodedOutputStream: void writeRawBytes(com.google.protobuf.ByteString,int,int)> ==> <com.google.protobuf.ByteString: void copyTo(byte[],int,int,int)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeRawBytes(com.google.protobuf.ByteString,int,int)> calls: <com.google.protobuf.ByteString: void copyTo(byte[],int,int,int)> via: VIRTUAL edge: virtualinvoke r1.<com.google.protobuf.ByteString: void copyTo(byte[],int,int,int)>($r10, i19, $i16, i20) in <com.google.protobuf.CodedOutputStream: void writeRawBytes(com.google.protobuf.ByteString,int,int)> ==> <com.google.protobuf.ByteString: void copyTo(byte[],int,int,int)>
Global flow here: <com.google.protobuf.CodedOutputStream: void writeTag(int,int)> calls: <com.google.protobuf.WireFormat: int makeTag(int,int)> via: STATIC edge: $i2 = staticinvoke <com.google.protobuf.WireFormat: int makeTag(int,int)>(i0, i1) in <com.google.protobuf.CodedOutputStream: void writeTag(int,int)> ==> <com.google.protobuf.WireFormat: int makeTag(int,int)>
Global flow here: <com.google.protobuf.CodedOutputStream: int computeTagSize(int)> calls: <com.google.protobuf.WireFormat: int makeTag(int,int)> via: STATIC edge: $i1 = staticinvoke <com.google.protobuf.WireFormat: int makeTag(int,int)>(i0, 0) in <com.google.protobuf.CodedOutputStream: int computeTagSize(int)> ==> <com.google.protobuf.WireFormat: int makeTag(int,int)>
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: writeRawBytes
2: writeBytesNoTag
3: writeBytes
4: writeTo
5: writeMessageNoTag
6: writeMessage
7: writeGroupNoTag
8: writeGroup
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: writeRawBytes
2: writeBytesNoTag
3: writeBytes
4: writeTo
5: writeMessageNoTag
6: writeMessage
7: writeGroupNoTag
8: writeGroup
Flows from source is finished.
Start traversal for source: <com.google.common.io.MultiInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: writeRawBytes
2: writeBytesNoTag
3: writeBytes
4: writeTo
5: writeMessageNoTag
6: writeMessage
7: writeGroupNoTag
8: writeGroup
Flows from source is finished.
Start traversal for source: <com.google.common.io.CountingInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: writeRawBytes
2: writeBytesNoTag
3: writeBytes
4: writeTo
5: writeMessageNoTag
6: writeMessage
7: writeGroupNoTag
8: writeGroup
Flows from source is finished.
Start traversal for source: <com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream: int read()>...
Starting from source: 
0: read
1: writeRawBytes
2: writeBytesNoTag
3: writeBytes
4: writeTo
5: writeMessageNoTag
6: writeMessage
7: writeGroupNoTag
8: writeGroup
Flows from source is finished.
Start traversal for source: <com.google.common.hash.HashingInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: writeRawBytes
2: writeBytesNoTag
3: writeBytes
4: writeTo
5: writeMessageNoTag
6: writeMessage
7: writeGroupNoTag
8: writeGroup
Flows from source is finished.
Start traversal for source: <com.google.common.io.ByteStreams$LimitedInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: writeRawBytes
2: writeBytesNoTag
3: writeBytes
4: writeTo
5: writeMessageNoTag
6: writeMessage
7: writeGroupNoTag
8: writeGroup
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: writeRawBytes
2: writeBytesNoTag
3: writeBytes
4: writeTo
5: writeMessageNoTag
6: writeMessage
7: writeGroupNoTag
8: writeGroup
Flows from source is finished.
Start traversal for source: <com.google.common.io.MultiReader: int read(char[],int,int)>...
Starting from source: 
0: read
1: writeRawBytes
2: writeBytesNoTag
3: writeBytes
4: writeTo
5: writeMessageNoTag
6: writeMessage
7: writeGroupNoTag
8: writeGroup
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: writeRawBytes
2: writeBytesNoTag
3: writeBytes
4: writeTo
5: writeMessageNoTag
6: writeMessage
7: writeGroupNoTag
8: writeGroup
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int read()>...
Starting from source: 
0: read
1: writeRawBytes
2: writeBytesNoTag
3: writeBytes
4: writeTo
5: writeMessageNoTag
6: writeMessage
7: writeGroupNoTag
8: writeGroup
Flows from source is finished.
Start traversal for source: <com.google.common.io.ByteStreams: int read(java.io.InputStream,byte[],int,int)>...
Starting from source: 
0: read
1: writeRawBytes
2: writeBytesNoTag
3: writeBytes
4: writeTo
5: writeMessageNoTag
6: writeMessage
7: writeGroupNoTag
8: writeGroup
Flows from source is finished.
Start traversal for source: <com.google.protobuf.CodedOutputStream: void writeRawBytes(com.google.protobuf.ByteString,int,int)>...
Starting from source: 
0: writeRawBytes
1: writeBytesNoTag
2: writeBytes
3: writeTo
4: writeMessageNoTag
5: writeMessage
6: writeGroupNoTag
7: writeGroup
Flows from source is finished.
Start traversal for source: <com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: writeRawBytes
2: writeBytesNoTag
3: writeBytes
4: writeTo
5: writeMessageNoTag
6: writeMessage
7: writeGroupNoTag
8: writeGroup
Flows from source is finished.
Start traversal for source: <com.google.common.io.GwtWorkarounds$1: int read()>...
Starting from source: 
0: read
1: writeRawBytes
2: writeBytesNoTag
3: writeBytes
4: writeTo
5: writeMessageNoTag
6: writeMessage
7: writeGroupNoTag
8: writeGroup
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[],int,int)>...
Starting from source: 
0: read
1: writeRawBytes
2: writeBytesNoTag
3: writeBytes
4: writeTo
5: writeMessageNoTag
6: writeMessage
7: writeGroupNoTag
8: writeGroup
Flows from source is finished.
Loaded 22063 methods from JAR files. 

Found 111 Source Methods.
Found 39 Sink Methods.
Sources and Sinks collected. 

Methods extraction finished.
All finished.
