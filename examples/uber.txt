***** Loading java classes ***** 

Start reading BOM and BIM...
BOM is loaded with 169 methods.
BIM is loaded with 352 methods.
EOM is loaded with 286 methods.
EIM is loaded with 365 methods.
Start looking for sources and sinks: 
[spark] Starting analysis ...
[main] ERROR soot.jimple.toolkits.typing.fast.TypePromotionUseVisitor - Failed Typing in <java.awt.image.ComponentColorModel: int getRGBComponent(int,int)> at statement opixel#1 = $r0: Is not cast compatible: null_type <-- java.lang.Object
[main] ERROR soot.jimple.toolkits.typing.fast.TypePromotionUseVisitor - Failed Typing in <com.sun.imageio.plugins.tiff.TIFFIFD: int readFieldValue(javax.imageio.stream.ImageInputStream,int,int,java.lang.Object[])> at statement obj#10 = $r0: Is not cast compatible: null_type <-- java.lang.Object
[spark] Done!
Now we build call graphs for class: org.apache.cxf.transport.http.ChunkedUtil
Source here: <org.apache.cxf.transport.http.ChunkedUtil: java.io.InputStream getPartialResponse(java.net.HttpURLConnection,int)>
Source here: <org.apache.cxf.transport.http.ChunkedUtil: java.io.InputStream getNonEmptyContent(java.net.HttpURLConnection)>
Now we build call graphs for class: org.apache.geronimo.osgi.locator.ProviderLocator
Source here: <org.apache.geronimo.osgi.locator.ProviderLocator: java.lang.String lookupByJREPropertyFile(java.lang.String,java.lang.String)>
Now we build call graphs for class: org.eclipse.jetty.server.handler.ContextHandler$Context
Source here: <org.eclipse.jetty.server.handler.ContextHandler$Context: java.lang.String getRealPath(java.lang.String)>
Source here: <org.eclipse.jetty.server.handler.ContextHandler$Context: java.io.InputStream getResourceAsStream(java.lang.String)>
Now we build call graphs for class: org.eclipse.jetty.server.Request
Source here: <org.eclipse.jetty.server.Request: void recycle()>
Global flow here: <org.eclipse.jetty.server.Request: void setConnection(org.eclipse.jetty.server.HttpConnection)> calls: <org.eclipse.jetty.server.AsyncContinuation: void setConnection(org.eclipse.jetty.server.HttpConnection)> via: VIRTUAL edge: virtualinvoke $r2.<org.eclipse.jetty.server.AsyncContinuation: void setConnection(org.eclipse.jetty.server.HttpConnection)>(r1) in <org.eclipse.jetty.server.Request: void setConnection(org.eclipse.jetty.server.HttpConnection)> ==> <org.eclipse.jetty.server.AsyncContinuation: void setConnection(org.eclipse.jetty.server.HttpConnection)>
Global flow here: <org.eclipse.jetty.server.Request: void setConnection(org.eclipse.jetty.server.HttpConnection)> calls: <org.eclipse.jetty.server.HttpConnection: boolean getResolveNames()> via: VIRTUAL edge: $z0 = virtualinvoke r1.<org.eclipse.jetty.server.HttpConnection: boolean getResolveNames()>() in <org.eclipse.jetty.server.Request: void setConnection(org.eclipse.jetty.server.HttpConnection)> ==> <org.eclipse.jetty.server.HttpConnection: boolean getResolveNames()>
Global flow here: <org.eclipse.jetty.server.Request: void setConnection(org.eclipse.jetty.server.HttpConnection)> calls: <org.eclipse.jetty.io.AbstractConnection: org.eclipse.jetty.io.EndPoint getEndPoint()> via: VIRTUAL edge: $r3 = virtualinvoke r1.<org.eclipse.jetty.server.HttpConnection: org.eclipse.jetty.io.EndPoint getEndPoint()>() in <org.eclipse.jetty.server.Request: void setConnection(org.eclipse.jetty.server.HttpConnection)> ==> <org.eclipse.jetty.io.AbstractConnection: org.eclipse.jetty.io.EndPoint getEndPoint()>
Now we build call graphs for class: com.ctc.wstx.util.URLUtil
Source here: <com.ctc.wstx.util.URLUtil: java.net.URL urlFromSystemId(java.lang.String)>
Source here: <com.ctc.wstx.util.URLUtil: java.net.URI uriFromSystemId(java.lang.String)>
Source here: <com.ctc.wstx.util.URLUtil: java.net.URL urlFromCurrentDir()>
Source here: <com.ctc.wstx.util.URLUtil: java.io.InputStream inputStreamFromURL(java.net.URL)>
Source here: <com.ctc.wstx.util.URLUtil: java.io.OutputStream outputStreamFromURL(java.net.URL)>
Now we build call graphs for class: org.apache.cxf.transport.http_jetty.JettyHTTPDestination
Source here: <org.apache.cxf.transport.http_jetty.JettyHTTPDestination: void retrieveEngine()>
Source here: <org.apache.cxf.transport.http_jetty.JettyHTTPDestination: java.lang.String getBasePathForFullAddress(java.lang.String)>
Now we build call graphs for class: com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$5
Source here: <com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$5: java.lang.String print(java.io.File)>
Now we build call graphs for class: javax.mail.internet.MimeMessage
Source here: <javax.mail.internet.MimeMessage: void parse(java.io.InputStream)>
Source here: <javax.mail.internet.MimeMessage: int getSize()>
Source here: <javax.mail.internet.MimeMessage: void writeTo(java.io.OutputStream,java.lang.String[])>
Now we build call graphs for class: org.apache.cxf.jaxrs.provider.MultipartProvider
Source here: <org.apache.cxf.jaxrs.provider.MultipartProvider: org.apache.cxf.jaxrs.ext.multipart.Attachment createDataHandler(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[],java.lang.String,java.lang.String,int)>
Now we build call graphs for class: org.apache.cxf.wsdl.EndpointReferenceUtils
Global flow here: <org.apache.cxf.wsdl.EndpointReferenceUtils: void setServiceAndPortName(org.apache.cxf.ws.addressing.EndpointReferenceType,javax.xml.namespace.QName,java.lang.String)> calls: <org.apache.cxf.ws.addressing.MetadataType: java.util.List getAny()> via: VIRTUAL edge: $r5 = virtualinvoke $r4.<org.apache.cxf.ws.addressing.MetadataType: java.util.List getAny()>() in <org.apache.cxf.wsdl.EndpointReferenceUtils: void setServiceAndPortName(org.apache.cxf.ws.addressing.EndpointReferenceType,javax.xml.namespace.QName,java.lang.String)> ==> <org.apache.cxf.ws.addressing.MetadataType: java.util.List getAny()>
Global flow here: <org.apache.cxf.wsdl.EndpointReferenceUtils: void setServiceAndPortName(org.apache.cxf.ws.addressing.EndpointReferenceType,javax.xml.namespace.QName,java.lang.String)> calls: <org.apache.cxf.wsdl.WSAEndpointReferenceUtils: org.apache.cxf.ws.addressing.MetadataType getSetMetadata(org.apache.cxf.ws.addressing.EndpointReferenceType)> via: STATIC edge: $r4 = staticinvoke <org.apache.cxf.wsdl.WSAEndpointReferenceUtils: org.apache.cxf.ws.addressing.MetadataType getSetMetadata(org.apache.cxf.ws.addressing.EndpointReferenceType)>(r3) in <org.apache.cxf.wsdl.EndpointReferenceUtils: void setServiceAndPortName(org.apache.cxf.ws.addressing.EndpointReferenceType,javax.xml.namespace.QName,java.lang.String)> ==> <org.apache.cxf.wsdl.WSAEndpointReferenceUtils: org.apache.cxf.ws.addressing.MetadataType getSetMetadata(org.apache.cxf.ws.addressing.EndpointReferenceType)>
Global flow here: <org.apache.cxf.wsdl.EndpointReferenceUtils: javax.xml.bind.JAXBElement getServiceNameType(javax.xml.namespace.QName,java.lang.String)> calls: <org.apache.cxf.ws.addressing.wsdl.ServiceNameType: java.util.Map getOtherAttributes()> via: VIRTUAL edge: $r6 = virtualinvoke $r1.<org.apache.cxf.ws.addressing.wsdl.ServiceNameType: java.util.Map getOtherAttributes()>() in <org.apache.cxf.wsdl.EndpointReferenceUtils: javax.xml.bind.JAXBElement getServiceNameType(javax.xml.namespace.QName,java.lang.String)> ==> <org.apache.cxf.ws.addressing.wsdl.ServiceNameType: java.util.Map getOtherAttributes()>
Global flow here: <org.apache.cxf.wsdl.EndpointReferenceUtils: javax.xml.bind.JAXBElement getServiceNameType(javax.xml.namespace.QName,java.lang.String)> calls: <org.apache.cxf.ws.addressing.wsdl.ServiceNameType: java.util.Map getOtherAttributes()> via: VIRTUAL edge: $r4 = virtualinvoke $r1.<org.apache.cxf.ws.addressing.wsdl.ServiceNameType: java.util.Map getOtherAttributes()>() in <org.apache.cxf.wsdl.EndpointReferenceUtils: javax.xml.bind.JAXBElement getServiceNameType(javax.xml.namespace.QName,java.lang.String)> ==> <org.apache.cxf.ws.addressing.wsdl.ServiceNameType: java.util.Map getOtherAttributes()>
Global flow here: <org.apache.cxf.wsdl.EndpointReferenceUtils: javax.xml.bind.JAXBElement getServiceNameType(javax.xml.namespace.QName,java.lang.String)> calls: <org.apache.cxf.ws.addressing.wsdl.ServiceNameType: void setEndpointName(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r1.<org.apache.cxf.ws.addressing.wsdl.ServiceNameType: void setEndpointName(java.lang.String)>(r3) in <org.apache.cxf.wsdl.EndpointReferenceUtils: javax.xml.bind.JAXBElement getServiceNameType(javax.xml.namespace.QName,java.lang.String)> ==> <org.apache.cxf.ws.addressing.wsdl.ServiceNameType: void setEndpointName(java.lang.String)>
Global flow here: <org.apache.cxf.wsdl.EndpointReferenceUtils: javax.xml.bind.JAXBElement getServiceNameType(javax.xml.namespace.QName,java.lang.String)> calls: <org.apache.cxf.ws.addressing.wsdl.ServiceNameType: void setValue(javax.xml.namespace.QName)> via: VIRTUAL edge: virtualinvoke $r1.<org.apache.cxf.ws.addressing.wsdl.ServiceNameType: void setValue(javax.xml.namespace.QName)>(r2) in <org.apache.cxf.wsdl.EndpointReferenceUtils: javax.xml.bind.JAXBElement getServiceNameType(javax.xml.namespace.QName,java.lang.String)> ==> <org.apache.cxf.ws.addressing.wsdl.ServiceNameType: void setValue(javax.xml.namespace.QName)>
Global flow here: <org.apache.cxf.wsdl.EndpointReferenceUtils: javax.xml.bind.JAXBElement getServiceNameType(javax.xml.namespace.QName,java.lang.String)> calls: <org.apache.cxf.ws.addressing.wsdl.ObjectFactory: org.apache.cxf.ws.addressing.wsdl.ServiceNameType createServiceNameType()> via: VIRTUAL edge: $r1 = virtualinvoke $r0.<org.apache.cxf.ws.addressing.wsdl.ObjectFactory: org.apache.cxf.ws.addressing.wsdl.ServiceNameType createServiceNameType()>() in <org.apache.cxf.wsdl.EndpointReferenceUtils: javax.xml.bind.JAXBElement getServiceNameType(javax.xml.namespace.QName,java.lang.String)> ==> <org.apache.cxf.ws.addressing.wsdl.ObjectFactory: org.apache.cxf.ws.addressing.wsdl.ServiceNameType createServiceNameType()>
Global flow here: <org.apache.cxf.wsdl.EndpointReferenceUtils: javax.xml.bind.JAXBElement getServiceNameType(javax.xml.namespace.QName,java.lang.String)> calls: <org.apache.cxf.ws.addressing.wsdl.ObjectFactory: javax.xml.bind.JAXBElement createServiceName(org.apache.cxf.ws.addressing.wsdl.ServiceNameType)> via: VIRTUAL edge: $r15 = virtualinvoke $r14.<org.apache.cxf.ws.addressing.wsdl.ObjectFactory: javax.xml.bind.JAXBElement createServiceName(org.apache.cxf.ws.addressing.wsdl.ServiceNameType)>($r1) in <org.apache.cxf.wsdl.EndpointReferenceUtils: javax.xml.bind.JAXBElement getServiceNameType(javax.xml.namespace.QName,java.lang.String)> ==> <org.apache.cxf.ws.addressing.wsdl.ObjectFactory: javax.xml.bind.JAXBElement createServiceName(org.apache.cxf.ws.addressing.wsdl.ServiceNameType)>
Source here: <org.apache.cxf.wsdl.EndpointReferenceUtils: javax.xml.validation.Schema createSchema(org.apache.cxf.service.model.ServiceInfo,org.apache.cxf.Bus)>
Now we build call graphs for class: org.apache.geronimo.mail.util.ASCIIUtil
Source here: <org.apache.geronimo.mail.util.ASCIIUtil: java.lang.String getTextTransferEncoding(java.io.InputStream)>
Source here: <org.apache.geronimo.mail.util.ASCIIUtil: java.lang.String getBinaryTransferEncoding(java.io.InputStream)>
Start traversal for source: <org.apache.geronimo.mail.util.ASCIIUtil: java.lang.String getTextTransferEncoding(java.io.InputStream)>...
Starting from source: 
0: getTextTransferEncoding
1: encodeWord
Flows from source is finished.
Now we build call graphs for class: org.apache.log4j.lf5.viewer.configure.MRUFileManager
Source here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.bcel.internal.generic.Instruction: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.bcel.internal.generic.Instruction: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.font.StandardGlyphVector: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.font.StandardGlyphVector: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.calendar.LocalGregorianCalendar$Date: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.calendar.CalendarDate: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.calendar.CalendarDate: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.BuddhistCalendar: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.BuddhistCalendar: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.font.AttributeValues: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.font.AttributeValues: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.krb5.PrincipalName: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.krb5.PrincipalName: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.jca.ProviderList: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.jca.ProviderList: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.rmi.server.LoaderHandler$Loader: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.rmi.server.LoaderHandler$Loader: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.cxf.jaxrs.impl.MetadataMap: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.cxf.jaxrs.impl.MetadataMap: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.cxf.jaxrs.impl.PathSegmentImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.cxf.jaxrs.impl.PathSegmentImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.font.TrueTypeFont: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.font.TrueTypeFont: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.log4j.lf5.LogRecord: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.log4j.lf5.LogRecord: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.font.FontStrikeDesc: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.font.FontStrikeDesc: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.pkcs.SignerInfo: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.pkcs.SignerInfo: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.locale.LocaleExtensions: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.locale.LocaleExtensions: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.font.ExtendedTextSourceLabel: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.font.ExtendedTextSourceLabel: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.font.GraphicComponent: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.font.GraphicComponent: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.calendar.Era: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.calendar.Era: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.xml.bind.v2.model.'annotation'.LocatableAnnotation: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.Extension: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.Extension: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.eclipse.jetty.util.resource.BadResource: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.eclipse.jetty.util.resource.BadResource: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.eclipse.jetty.util.resource.URLResource: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.eclipse.jetty.util.resource.URLResource: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.log4j.lf5.LogLevel: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.log4j.lf5.LogLevel: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.rmi.transport.ObjectEndpoint: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.rmi.transport.ObjectEndpoint: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.rmi.transport.GC$LatencyRequest: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.rmi.transport.GC$LatencyRequest: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.springframework.core.io.support.EncodedResource: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.springframework.core.io.support.EncodedResource: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.xml.bind.v2.model.nav.ParameterizedTypeImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.xml.bind.v2.model.nav.ParameterizedTypeImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.xml.bind.v2.model.nav.GenericArrayTypeImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.xml.bind.v2.model.nav.GenericArrayTypeImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.xml.bind.v2.model.'annotation'.Quick: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.xml.bind.v2.model.'annotation'.Quick: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.krb5.internal.rcache.AuthList: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.krb5.internal.rcache.AuthList: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.nio.fs.WindowsUserPrincipals$User: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.nio.fs.WindowsUserPrincipals$User: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.krb5.internal.PAData: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.krb5.internal.PAData: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.jgss.ProviderList$PreferencesEntry: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.jgss.ProviderList$PreferencesEntry: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.ws.commons.schema.XmlSchemaNotation: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.ws.commons.schema.XmlSchemaNotation: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.cxf.service.model.SchemaInfo: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.cxf.service.model.SchemaInfo: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.cxf.service.model.OperationInfo: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.cxf.service.model.OperationInfo: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.cxf.service.model.MessagePartInfo: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.cxf.service.model.MessagePartInfo: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.cxf.service.model.BindingOperationInfo: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.cxf.service.model.BindingOperationInfo: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.cxf.service.model.EndpointInfo: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.cxf.service.model.EndpointInfo: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.cxf.service.model.BindingInfo: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.cxf.service.model.BindingInfo: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.cxf.bus.extension.Extension: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.cxf.bus.extension.Extension: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.springframework.beans.BeanMetadataAttribute: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor$6: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor$6: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor$5: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor$5: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.bcel.internal.generic.ElementValuePairGen: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.bcel.internal.generic.ElementValuePairGen: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.xpath.regex.Token: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.xpath.regex.Token: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralExpr: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.LiteralExpr: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.AbstractDateTimeDV$DateTimeData: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.AbstractDateTimeDV$DateTimeData: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.PrecisionDecimalDV$XPrecisionDecimal: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.PrecisionDecimalDV$XPrecisionDecimal: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.QNameDV$XQName: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.QNameDV$XQName: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.Base64BinaryDV$XBase64: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.Base64BinaryDV$XBase64: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.HexBinaryDV$XHex: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.HexBinaryDV$XHex: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.DoubleDV$XDouble: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.DoubleDV$XDouble: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.FloatDV$XFloat: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.FloatDV$XFloat: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.DecimalDV$XDecimal: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.DecimalDV$XDecimal: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.dv.xs.ListDV$ListData: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.dv.xs.ListDV$ListData: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xpath.internal.objects.XObject: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xpath.internal.objects.XObject: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xpath.internal.patterns.StepPattern: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xpath.internal.patterns.StepPattern: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xpath.internal.functions.FuncExtFunction: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xpath.internal.functions.FuncExtFunction: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.xml.internal.stream.events.AttributeImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.xml.internal.stream.events.AttributeImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.xml.sax.SAXException: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.xml.sax.SAXException: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.ws.commons.schema.XmlSchemaType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.ws.commons.schema.XmlSchemaType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.cxf.helpers.LoadingByteArrayOutputStream$1: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.cxf.helpers.LoadingByteArrayOutputStream$1: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.pkcs.PKCS9Attribute: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.pkcs.PKCS9Attribute: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.RDN: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.RDN: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.net.www.MimeEntry: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.net.www.MimeEntry: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.provider.PolicyFile$SelfPermission: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.provider.PolicyParser$KeyStoreEntry: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.provider.PolicyFile$PolicyEntry: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.net.ProgressSource: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.net.ProgressSource: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.eclipse.jetty.util.log.StdErrLog: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.eclipse.jetty.util.log.StdErrLog: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.springframework.beans.factory.BeanCreationException: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.X509CertImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.X509CertImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.AppContext: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.AppContext: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.windows.WComponentPeer: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.windows.WComponentPeer: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xerces.internal.impl.xpath.regex.RegularExpression: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xerces.internal.impl.xpath.regex.RegularExpression: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.eclipse.jetty.util.StringMap$NullEntry: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.eclipse.jetty.util.StringMap$NullEntry: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.springframework.core.convert.support.GenericConversionService$MatchableConverters: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.springframework.core.convert.support.GenericConversionService$MatchableConverters: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.calendar.ZoneInfo: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.calendar.ZoneInfo: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.reflect.'annotation'.EnumConstantNotPresentExceptionProxy: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.reflect.'annotation'.EnumConstantNotPresentExceptionProxy: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.reflect.'annotation'.TypeNotPresentExceptionProxy: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.reflect.'annotation'.TypeNotPresentExceptionProxy: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.reflect.'annotation'.AnnotationTypeMismatchExceptionProxy: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.reflect.'annotation'.AnnotationTypeMismatchExceptionProxy: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.bcel.internal.classfile.ConstantUtf8: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.bcel.internal.classfile.ConstantUtf8: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.image.IntegerInterleavedRaster: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.image.IntegerInterleavedRaster: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.image.ShortInterleavedRaster: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.image.ShortInterleavedRaster: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.image.ByteInterleavedRaster: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.image.ByteInterleavedRaster: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.beans.WildcardTypeImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.beans.WildcardTypeImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.eclipse.jetty.http.HttpStatus$Code: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.eclipse.jetty.http.HttpStatus$Code: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.util.NamedCurve: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.util.NamedCurve: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.cxf.jaxrs.model.URITemplate$UriChunk: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.cxf.jaxrs.model.URITemplate$UriChunk: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.SunHints$Value: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.SunHints$Value: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.SunHints$Key: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.SunHints$Key: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.font.Decoration$DecorationImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.font.Decoration$DecorationImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.font.EAttribute: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.font.EAttribute: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.OSInfo$WindowsVersion: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.OSInfo$WindowsVersion: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.ietf.jgss.Oid: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.ietf.jgss.Oid: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.bcel.internal.generic.Type: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.bcel.internal.generic.Type: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.bcel.internal.classfile.Unknown: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.bcel.internal.classfile.Unknown: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.NodeType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.NodeType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.VoidType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.VoidType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.ReferenceType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.ReferenceType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.ResultTreeType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.ResultTreeType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.StringType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.StringType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.NodeSetType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.NodeSetType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.BooleanType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.BooleanType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.RealType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.RealType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.org.apache.xalan.internal.xsltc.compiler.util.IntType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.org.apache.xalan.internal.xsltc.compiler.util.IntType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.log4j.Priority: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.log4j.Priority: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.util.ObjectIdentifier: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.util.ObjectIdentifier: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.codehaus.stax2.ri.evt.BaseEventImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.codehaus.stax2.ri.evt.BaseEventImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.ctc.wstx.sax.SAXFeature: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.ctc.wstx.sax.SAXFeature: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.ctc.wstx.sax.SAXProperty: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.ctc.wstx.sax.SAXProperty: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.xml.bind.v2.model.impl.LeafInfoImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.xml.bind.v2.model.impl.LeafInfoImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.springframework.asm.Type: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.springframework.asm.Type: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.springframework.core.convert.TypeDescriptor: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.springframework.core.convert.TypeDescriptor: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.management.MappedMXBeanType$InProgress: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.management.MappedMXBeanType$InProgress: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.jca.ProviderList$PreferredEntry: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.jca.ProviderList$PreferredEntry: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.PolicyInformation: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.PolicyInformation: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.CertificatePolicyMap: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.CertificatePolicyMap: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.DistributionPoint: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.DistributionPoint: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.GeneralName: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.GeneralName: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.AccessDescription: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.AccessDescription: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.GeneralSubtree: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.GeneralSubtree: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.ws.commons.schema.XmlSchemaCollection$SchemaKey: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.ws.commons.schema.XmlSchemaCollection$SchemaKey: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.ws.commons.schema.XmlSchema: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.ws.commons.schema.XmlSchema: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.cxf.common.security.SimplePrincipal: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.cxf.common.security.SimplePrincipal: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.springframework.beans.PropertyValue: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.springframework.beans.PropertyValue: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.springframework.core.NamedThreadLocal: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.springframework.core.NamedThreadLocal: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.krb5.internal.HostAddress: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.krb5.internal.HostAddress: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.krb5.internal.AuthorizationDataEntry: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.krb5.internal.AuthorizationDataEntry: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.ietf.jgss.GSSException: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.ietf.jgss.GSSException: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.krb5.KrbException: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.krb5.KrbException: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.eclipse.jetty.util.StringMap$Node: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.eclipse.jetty.util.StringMap$Node: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.CertificatePolicyId: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.CertificatePolicyId: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.codehaus.jettison.json.JSONObject: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.codehaus.jettison.json.JSONObject: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.codehaus.jettison.json.JSONArray: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.codehaus.jettison.json.JSONArray: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.codehaus.jettison.Node: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.codehaus.jettison.Node: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <com.sun.xml.bind.v2.runtime.IllegalAnnotationException: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <com.sun.xml.bind.v2.runtime.IllegalAnnotationException: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.springframework.http.MediaType: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.springframework.http.MediaType: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.locale.BaseLocale: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.locale.BaseLocale: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.cxf.common.commands.ForkedCommand: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.cxf.common.commands.ForkedCommand: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.ws.commons.schema.XmlSchemaAnnotated: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.ws.commons.schema.XmlSchemaAnnotated: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.krb5.internal.rcache.AuthTimeWithHash: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.krb5.internal.rcache.AuthTimeWithHash: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.jgss.TokenTracker$Entry: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.jgss.TokenTracker$Entry: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.X509CRLEntryImpl: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.X509CRLEntryImpl: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.UnparseableExtension: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.UnparseableExtension: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.provider.PolicyParser$DomainEntry: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.provider.PolicyParser$PrincipalEntry: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <jdk.internal.jimage.ImageReader$Node: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <jdk.internal.jimage.ImageReader$Node: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.geom.Edge: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.geom.Edge: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.util.DerValue: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.util.DerValue: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.eclipse.jetty.io.AbstractBuffer: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.eclipse.jetty.io.AbstractBuffer: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <org.apache.log4j.NameValue: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <org.apache.log4j.NameValue: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.nio.fs.WindowsPath: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.nio.fs.WindowsPath: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.jca.ProviderConfig: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.jca.ProviderConfig: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.awt.geom.Curve: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.awt.geom.Curve: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.rmi.transport.tcp.TCPEndpoint: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.rmi.transport.tcp.TCPEndpoint: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.locale.UnicodeLocaleExtension: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.util.locale.Extension: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.util.locale.Extension: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> calls: <sun.security.x509.AVA: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> ==> <sun.security.x509.AVA: java.lang.String toString()>
Source here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void createConfigurationDirectory()>
Source here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void load()> calls: <sun.awt.util.IdentityLinkedList$ListItr: void remove()> via: INTERFACE edge: interfaceinvoke $r9.<java.util.Iterator: void remove()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void load()> ==> <sun.awt.util.IdentityLinkedList$ListItr: void remove()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void load()> calls: <sun.awt.util.IdentityLinkedList$ListItr: java.lang.Object next()> via: INTERFACE edge: $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void load()> ==> <sun.awt.util.IdentityLinkedList$ListItr: java.lang.Object next()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void load()> calls: <sun.awt.util.IdentityLinkedList$ListItr: boolean hasNext()> via: INTERFACE edge: $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>() in <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void load()> ==> <sun.awt.util.IdentityLinkedList$ListItr: boolean hasNext()>
Source here: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String getFilename()>
Start traversal for source: <java.net.URL: java.io.InputStream openStream()>...
Starting from source: 
0: openStream
1: getInputStream
2: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()>...
Starting from source: 
0: getMRUFileList
1: createMRUFileListMI
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getFilename
2: load
3: save
4: requestExit
5: createConfigurationDirectory
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void createConfigurationDirectory()>...
Starting from source: 
0: createConfigurationDirectory
1: load
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String getFilename()>...
Starting from source: 
0: getFilename
1: load
2: save
3: requestExit
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getAbsolutePath()>...
Starting from source: 
0: getAbsolutePath
1: getMRUFileList
2: createMRUFileListMI
Flows from source is finished.
Now we build call graphs for class: org.apache.commons.logging.LogFactory$5
Source here: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>
Global flow here: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> calls: <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()> via: STATIC edge: $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>() in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>
Global flow here: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> calls: <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)>($r9) in <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> ==> <org.apache.commons.logging.LogFactory: void access$000(java.lang.String)>
Start traversal for source: <java.net.URL: java.io.InputStream openStream()>...
Starting from source: 
0: openStream
1: run
2: executePrivileged
3: getProperties
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
2: getProperties
Flows from source is finished.
Now we build call graphs for class: org.apache.commons.logging.LogFactory$6
Source here: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
3: getSystemProperty
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
2: getSystemProperty
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
3: getSystemProperty
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
2: getSystemProperty
Flows from source is finished.
Now we build call graphs for class: org.apache.log4j.lf5.util.StreamUtils
Source here: <org.apache.log4j.lf5.util.StreamUtils: void copy(java.io.InputStream,java.io.OutputStream,int)>
Now we build call graphs for class: org.eclipse.jetty.http.security.Password
Source here: <org.eclipse.jetty.http.security.Password: org.eclipse.jetty.http.security.Password getPassword(java.lang.String,java.lang.String,java.lang.String)>
Now we build call graphs for class: javax.mail.search.MessageNumberTerm
Source here: <javax.mail.search.MessageNumberTerm: boolean match(javax.mail.Message)>
Now we build call graphs for class: org.springframework.web.util.WebUtils
Source here: <org.springframework.web.util.WebUtils: void setWebAppRootSystemProperty(javax.servlet.ServletContext)>
Source here: <org.springframework.web.util.WebUtils: void removeWebAppRootSystemProperty(javax.servlet.ServletContext)>
Global flow here: <org.springframework.web.util.WebUtils: java.util.Map getParametersStartingWith(javax.servlet.ServletRequest,java.lang.String)> calls: <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)> via: STATIC edge: staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Request must not be null") in <org.springframework.web.util.WebUtils: java.util.Map getParametersStartingWith(javax.servlet.ServletRequest,java.lang.String)> ==> <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>
Now we build call graphs for class: org.eclipse.jetty.security.PropertyUserStore
Source here: <org.eclipse.jetty.security.PropertyUserStore: void doStart()>
Now we build call graphs for class: org.apache.cxf.tools.validator.AbstractValidator
Source here: <org.apache.cxf.tools.validator.AbstractValidator: java.lang.String getErrorMessage()>
Now we build call graphs for class: org.springframework.core.io.UrlResource
Source here: <org.springframework.core.io.UrlResource: java.io.InputStream getInputStream()>
Source here: <org.springframework.core.io.UrlResource: java.lang.String getFilename()>
Now we build call graphs for class: org.apache.log4j.FileAppender
Source here: <org.apache.log4j.FileAppender: void setFile(java.lang.String,boolean,boolean,int)>
Now we build call graphs for class: org.apache.cxf.common.util.SystemPropertyAction
Source here: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: getKeystoreProvider
2: getKeystoreType
3: createSystemProxyConfiguration
4: getKeystorePassword
5: isWindows
6: getDefaultTempDir
7: getKeystore
8: run
9: getPropertyOrNull
10: getBusFactoryClass
11: tryFileSystem
12: executePrivileged
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getKeystoreProvider
2: getKeystoreType
3: createSystemProxyConfiguration
4: getKeystorePassword
5: isWindows
6: getDefaultTempDir
7: getKeystore
8: run
9: getPropertyOrNull
10: getBusFactoryClass
11: tryFileSystem
12: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: getPropertyOrNull
2: createSystemProxyConfiguration
3: getBusFactoryClass
4: tryFileSystem
5: getDefaultTempDir
6: executePrivileged
7: getProperty
8: getKeystoreProvider
9: getKeystoreType
10: getKeystorePassword
11: isWindows
12: getKeystore
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: getPropertyOrNull
2: createSystemProxyConfiguration
3: getBusFactoryClass
4: tryFileSystem
5: getDefaultTempDir
6: executePrivileged
7: getProperty
8: getKeystoreProvider
9: getKeystoreType
10: getKeystorePassword
11: isWindows
12: getKeystore
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: getPropertyOrNull
2: createSystemProxyConfiguration
3: getBusFactoryClass
4: tryFileSystem
5: getDefaultTempDir
6: executePrivileged
7: getProperty
8: getKeystoreProvider
9: getKeystoreType
10: getKeystorePassword
11: isWindows
12: getKeystore
Flows from source is finished.
Now we build call graphs for class: com.ibm.wsdl.util.IOUtils
Source here: <com.ibm.wsdl.util.IOUtils: java.lang.String getStringFromReader(java.io.Reader)>
Now we build call graphs for class: org.springframework.beans.propertyeditors.FileEditor
Source here: <org.springframework.beans.propertyeditors.FileEditor: java.lang.String getAsText()>
Now we build call graphs for class: org.apache.cxf.jaxrs.ext.xml.XMLSource
Global flow here: <org.apache.cxf.jaxrs.ext.xml.XMLSource: void setBuffering(boolean)> calls: <org.apache.cxf.common.i18n.Message: java.lang.String toString()> via: VIRTUAL edge: $r9 = virtualinvoke $r5.<org.apache.cxf.common.i18n.Message: java.lang.String toString()>() in <org.apache.cxf.jaxrs.ext.xml.XMLSource: void setBuffering(boolean)> ==> <org.apache.cxf.common.i18n.Message: java.lang.String toString()>
Global flow here: <org.apache.cxf.jaxrs.ext.xml.XMLSource: void setBuffering(boolean)> calls: <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> via: STATIC edge: $r3 = staticinvoke <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)>($r2) in <org.apache.cxf.jaxrs.ext.xml.XMLSource: void setBuffering(boolean)> ==> <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)>
Source here: <org.apache.cxf.jaxrs.ext.xml.XMLSource: org.xml.sax.InputSource getSource()>
Now we build call graphs for class: org.eclipse.jetty.io.AbstractBuffer
Global flow here: <org.eclipse.jetty.io.AbstractBuffer: byte[] asArray()> calls: <org.eclipse.jetty.io.ByteArrayBuffer: int peek(int,byte[],int,int)> via: VIRTUAL edge: virtualinvoke r0.<org.eclipse.jetty.io.AbstractBuffer: int peek(int,byte[],int,int)>($i1, r1, 0, $i2) in <org.eclipse.jetty.io.AbstractBuffer: byte[] asArray()> ==> <org.eclipse.jetty.io.ByteArrayBuffer: int peek(int,byte[],int,int)>
Global flow here: <org.eclipse.jetty.io.AbstractBuffer: byte[] asArray()> calls: <org.eclipse.jetty.io.ByteArrayBuffer: byte[] array()> via: VIRTUAL edge: $r2 = virtualinvoke r0.<org.eclipse.jetty.io.AbstractBuffer: byte[] array()>() in <org.eclipse.jetty.io.AbstractBuffer: byte[] asArray()> ==> <org.eclipse.jetty.io.ByteArrayBuffer: byte[] array()>
Global flow here: <org.eclipse.jetty.io.AbstractBuffer: void setPutIndex(int)> calls: <org.eclipse.jetty.io.ByteArrayBuffer: int capacity()> via: VIRTUAL edge: $i4 = virtualinvoke r0.<org.eclipse.jetty.io.AbstractBuffer: int capacity()>() in <org.eclipse.jetty.io.AbstractBuffer: void setPutIndex(int)> ==> <org.eclipse.jetty.io.ByteArrayBuffer: int capacity()>
Global flow here: <org.eclipse.jetty.io.AbstractBuffer: void setPutIndex(int)> calls: <org.eclipse.jetty.io.ByteArrayBuffer: int capacity()> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.eclipse.jetty.io.AbstractBuffer: int capacity()>() in <org.eclipse.jetty.io.AbstractBuffer: void setPutIndex(int)> ==> <org.eclipse.jetty.io.ByteArrayBuffer: int capacity()>
Global flow here: <org.eclipse.jetty.io.AbstractBuffer: void setPutIndex(int)> calls: <org.eclipse.jetty.io.View: int capacity()> via: VIRTUAL edge: $i4 = virtualinvoke r0.<org.eclipse.jetty.io.AbstractBuffer: int capacity()>() in <org.eclipse.jetty.io.AbstractBuffer: void setPutIndex(int)> ==> <org.eclipse.jetty.io.View: int capacity()>
Global flow here: <org.eclipse.jetty.io.AbstractBuffer: void setPutIndex(int)> calls: <org.eclipse.jetty.io.View: int capacity()> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.eclipse.jetty.io.AbstractBuffer: int capacity()>() in <org.eclipse.jetty.io.AbstractBuffer: void setPutIndex(int)> ==> <org.eclipse.jetty.io.View: int capacity()>
Source here: <org.eclipse.jetty.io.AbstractBuffer: int readFrom(java.io.InputStream,int)>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()>...
Starting from source: 
0: getMRUFileList
Flows from source is finished.
Now we build call graphs for class: org.eclipse.jetty.util.UrlEncoded
Source here: <org.eclipse.jetty.util.UrlEncoded: void decodeUtf16To(java.io.InputStream,org.eclipse.jetty.util.MultiMap,int)>
Now we build call graphs for class: org.apache.log4j.varia.HUPNode
Source here: <org.apache.log4j.varia.HUPNode: void run()>
Now we build call graphs for class: org.apache.commons.logging.impl.LogFactoryImpl$2
Source here: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>
Now we build call graphs for class: org.eclipse.jetty.util.Scanner
Source here: <org.eclipse.jetty.util.Scanner: void scanFiles()>
Source here: <org.eclipse.jetty.util.Scanner: void scanFile(java.io.File,java.util.Map,int)>
Now we build call graphs for class: org.apache.log4j.PropertyConfigurator
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: org.apache.log4j.Level getThreshold()> via: INTERFACE edge: $r10 = interfaceinvoke r1.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Level getThreshold()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: org.apache.log4j.Level getThreshold()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: void setThreshold(org.apache.log4j.Level)> via: INTERFACE edge: interfaceinvoke r1.<org.apache.log4j.spi.LoggerRepository: void setThreshold(org.apache.log4j.Level)>($r7) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: void setThreshold(org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: void resetConfiguration()> via: INTERFACE edge: interfaceinvoke r1.<org.apache.log4j.spi.LoggerRepository: void resetConfiguration()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: void resetConfiguration()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Level getThreshold()> via: INTERFACE edge: $r10 = interfaceinvoke r1.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Level getThreshold()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Level getThreshold()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.spi.NOPLoggerRepository: void setThreshold(org.apache.log4j.Level)> via: INTERFACE edge: interfaceinvoke r1.<org.apache.log4j.spi.LoggerRepository: void setThreshold(org.apache.log4j.Level)>($r7) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.spi.NOPLoggerRepository: void setThreshold(org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.spi.NOPLoggerRepository: void resetConfiguration()> via: INTERFACE edge: interfaceinvoke r1.<org.apache.log4j.spi.LoggerRepository: void resetConfiguration()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.spi.NOPLoggerRepository: void resetConfiguration()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("[log4j.configDebug] is deprecated. Use [log4j.debug] instead.") in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)> via: STATIC edge: $z1 = staticinvoke <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>(r15, 1) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void setInternalDebugging(boolean)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void setInternalDebugging(boolean)>($z1) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void setInternalDebugging(boolean)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)> via: STATIC edge: $z0 = staticinvoke <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>($r4, 0) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r16 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>("log4j.threshold", r2) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> via: STATIC edge: $r7 = staticinvoke <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>($r16, $r6) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r13) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>("Finished configuring.") in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Source here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke r25.<java.io.InputStream: void close()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke r25.<java.io.InputStream: void close()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke $r7.<java.io.InputStream: void close()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <sun.net.www.protocol.file.FileURLConnection: java.io.InputStream getInputStream()> via: VIRTUAL edge: $r7 = virtualinvoke $r6.<java.net.URLConnection: java.io.InputStream getInputStream()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <sun.net.www.protocol.file.FileURLConnection: java.io.InputStream getInputStream()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()> via: VIRTUAL edge: virtualinvoke $r13.<java.lang.Thread: void interrupt()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()> via: VIRTUAL edge: virtualinvoke $r18.<java.lang.Thread: void interrupt()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()> via: VIRTUAL edge: virtualinvoke $r20.<java.lang.Thread: void interrupt()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()> via: VIRTUAL edge: virtualinvoke $r24.<java.lang.Thread: void interrupt()>() in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r5) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r30, $r19) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r35) in <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r1 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>("log4j.loggerFactory", r0) in <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r6) in <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> via: STATIC edge: $r10 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>($r1, $r13, $r9) in <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)> calls: <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>($r12, r0, "log4j.factory.") in <org.apache.log4j.PropertyConfigurator: void configureLoggerFactory(java.util.Properties)> ==> <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getRootLogger()> via: INTERFACE edge: $r3 = interfaceinvoke r2.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getRootLogger()>() in <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getRootLogger()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getRootLogger()> via: INTERFACE edge: $r3 = interfaceinvoke r2.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getRootLogger()>() in <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getRootLogger()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r1 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>("log4j.rootLogger", r0) in <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: r7 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>("log4j.rootCategory", r0) in <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>("Could not find root logger information. Is this OK?") in <org.apache.log4j.PropertyConfigurator: void configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: void setThrowableRenderer(org.apache.log4j.spi.ThrowableRenderer)> via: INTERFACE edge: interfaceinvoke $r11.<org.apache.log4j.spi.ThrowableRendererSupport: void setThrowableRenderer(org.apache.log4j.spi.ThrowableRenderer)>($r12) in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: void setThrowableRenderer(org.apache.log4j.spi.ThrowableRenderer)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)> via: INTERFACE edge: $r21 = interfaceinvoke r4.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>(r18, $r20) in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)> via: INTERFACE edge: $r21 = interfaceinvoke r4.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>(r18, $r20) in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)> via: VIRTUAL edge: virtualinvoke $r10.<org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>(r0, "log4j.throwableRenderer.") in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.config.PropertySetter: void setProperties(java.util.Properties,java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r19 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>(r3, r0) in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r15 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>(r3, r0) in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>($r16, $r14, $r15) in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.or.RendererMap: void addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)> via: STATIC edge: $r9 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>(r0, "log4j.throwableRenderer", $r22, null) in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>("Could not instantiate throwableRenderer.") in <org.apache.log4j.PropertyConfigurator: void parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> calls: <org.apache.log4j.Category: void setAdditivity(boolean)> via: VIRTUAL edge: virtualinvoke r20.<org.apache.log4j.Logger: void setAdditivity(boolean)>($z1) in <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> ==> <org.apache.log4j.Category: void setAdditivity(boolean)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r6 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>($r4, r5) in <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r13) in <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> calls: <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)> via: STATIC edge: $z1 = staticinvoke <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>($r6, 1) in <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> ==> <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r19) in <org.apache.log4j.PropertyConfigurator: void parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.spi.RootLogger: void setLevel(org.apache.log4j.Level)> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r30) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.spi.RootLogger: void setLevel(org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.spi.RootLogger: void setLevel(org.apache.log4j.Level)> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>(null) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.spi.RootLogger: void setLevel(org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.Category: void addAppender(org.apache.log4j.Appender)> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r20) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Category: void addAppender(org.apache.log4j.Appender)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.Category: void removeAllAppenders()> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void removeAllAppenders()>() in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Category: void removeAllAppenders()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.Category: void setLevel(org.apache.log4j.Level)> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r30) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Category: void setLevel(org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.Category: void setLevel(org.apache.log4j.Level)> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>(null) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Category: void setLevel(org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void addAppender(org.apache.log4j.Appender)> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>($r20) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void addAppender(org.apache.log4j.Appender)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void removeAllAppenders()> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void removeAllAppenders()>() in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void removeAllAppenders()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.Category: org.apache.log4j.Level getLevel()> via: VIRTUAL edge: $r36 = virtualinvoke r10.<org.apache.log4j.Logger: org.apache.log4j.Level getLevel()>() in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.Category: org.apache.log4j.Level getLevel()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void setLevel(org.apache.log4j.Level)> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>($r30) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void setLevel(org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.spi.NOPLogger: void setLevel(org.apache.log4j.Level)> via: VIRTUAL edge: virtualinvoke r10.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>(null) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.spi.NOPLogger: void setLevel(org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r8) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r26) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("The root logger cannot be set to null.") in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> via: STATIC edge: $r30 = staticinvoke <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>($r21, $r29) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r38) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r17) in <org.apache.log4j.PropertyConfigurator: void parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.cxf.attachment.LazyAttachmentCollection$1: org.apache.cxf.message.Attachment next()> via: INTERFACE edge: $r50 = interfaceinvoke $r40.<java.util.Iterator: java.lang.Object next()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.cxf.attachment.LazyAttachmentCollection$1: org.apache.cxf.message.Attachment next()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.cxf.attachment.LazyAttachmentCollection$1: boolean hasNext()> via: INTERFACE edge: $z2 = interfaceinvoke $r40.<java.util.Iterator: boolean hasNext()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.cxf.attachment.LazyAttachmentCollection$1: boolean hasNext()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.WeakIdentityHashMap$1$1: java.lang.Object next()> via: INTERFACE edge: $r50 = interfaceinvoke $r40.<java.util.Iterator: java.lang.Object next()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.WeakIdentityHashMap$1$1: java.lang.Object next()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.WeakIdentityHashMap$1$1: boolean hasNext()> via: INTERFACE edge: $z2 = interfaceinvoke $r40.<java.util.Iterator: boolean hasNext()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.WeakIdentityHashMap$1$1: boolean hasNext()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.WeakIdentityHashMap$2$1: java.util.Map$Entry next()> via: INTERFACE edge: $r50 = interfaceinvoke $r40.<java.util.Iterator: java.lang.Object next()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.WeakIdentityHashMap$2$1: java.util.Map$Entry next()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.WeakIdentityHashMap$2$1: boolean hasNext()> via: INTERFACE edge: $z2 = interfaceinvoke $r40.<java.util.Iterator: boolean hasNext()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.WeakIdentityHashMap$2$1: boolean hasNext()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.WeakIdentityHashMap$2$1$1: java.lang.Object getValue()> via: INTERFACE edge: $r53 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getValue()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.WeakIdentityHashMap$2$1$1: java.lang.Object getValue()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.WeakIdentityHashMap$2$1$1: java.lang.Object getKey()> via: INTERFACE edge: $r52 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getKey()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.WeakIdentityHashMap$2$1$1: java.lang.Object getKey()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.WeakIdentityHashMap$2$1$1: java.lang.Object getKey()> via: INTERFACE edge: $r55 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getKey()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.WeakIdentityHashMap$2$1$1: java.lang.Object getKey()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.eclipse.jetty.util.StringMap$NullEntry: java.lang.Object getValue()> via: INTERFACE edge: $r53 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getValue()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.eclipse.jetty.util.StringMap$NullEntry: java.lang.Object getValue()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.eclipse.jetty.util.StringMap$NullEntry: java.lang.Object getKey()> via: INTERFACE edge: $r52 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getKey()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.eclipse.jetty.util.StringMap$NullEntry: java.lang.Object getKey()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.eclipse.jetty.util.StringMap$NullEntry: java.lang.Object getKey()> via: INTERFACE edge: $r55 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getKey()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.eclipse.jetty.util.StringMap$NullEntry: java.lang.Object getKey()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.eclipse.jetty.util.StringMap$Node: java.lang.Object getValue()> via: INTERFACE edge: $r53 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getValue()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.eclipse.jetty.util.StringMap$Node: java.lang.Object getValue()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.eclipse.jetty.util.StringMap$Node: java.lang.Object getKey()> via: INTERFACE edge: $r52 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getKey()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.eclipse.jetty.util.StringMap$Node: java.lang.Object getKey()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.eclipse.jetty.util.StringMap$Node: java.lang.Object getKey()> via: INTERFACE edge: $r55 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getKey()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.eclipse.jetty.util.StringMap$Node: java.lang.Object getKey()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.util.IdentityLinkedList$ListItr: java.lang.Object next()> via: INTERFACE edge: $r50 = interfaceinvoke $r40.<java.util.Iterator: java.lang.Object next()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.util.IdentityLinkedList$ListItr: java.lang.Object next()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <sun.awt.util.IdentityLinkedList$ListItr: boolean hasNext()> via: INTERFACE edge: $z2 = interfaceinvoke $r40.<java.util.Iterator: boolean hasNext()>() in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <sun.awt.util.IdentityLinkedList$ListItr: boolean hasNext()>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r84) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)> via: STATIC edge: $r13 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>(r11, $r6, $r85, null) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r78) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)> via: STATIC edge: $r58 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>(r11, $r10, $r86, null) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r63) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>($r73, r11, $r67) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r72) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r91 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>($r90, r11) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)> via: STATIC edge: $r15 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>(r11, $r90, $r92, null) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r20) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>($r56, $r22, $r44) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r49) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>($r79, r11, $r96) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.config.PropertySetter: void setProperties(java.lang.Object,java.util.Properties,java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r101) in <org.apache.log4j.PropertyConfigurator: org.apache.log4j.Appender parseAppender(java.util.Properties,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)> via: INTERFACE edge: $r19 = interfaceinvoke r16.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>($r11, $r17) in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String)> via: INTERFACE edge: $r19 = interfaceinvoke r16.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String)>($r11) in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getRootLogger()> via: INTERFACE edge: $r18 = interfaceinvoke r16.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getRootLogger()>() in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.Hierarchy: org.apache.log4j.Logger getRootLogger()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)> via: INTERFACE edge: $r19 = interfaceinvoke r16.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>($r11, $r17) in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String)> via: INTERFACE edge: $r19 = interfaceinvoke r16.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String)>($r11) in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getLogger(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getRootLogger()> via: INTERFACE edge: $r18 = interfaceinvoke r16.<org.apache.log4j.spi.LoggerRepository: org.apache.log4j.Logger getRootLogger()>() in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.spi.NOPLoggerRepository: org.apache.log4j.Logger getRootLogger()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r6 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>($r4, r5) in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)> via: STATIC edge: $z0 = staticinvoke <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>($r6, 0) in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r11 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>($r10, r5) in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r24 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>($r23, r5) in <org.apache.log4j.PropertyConfigurator: void parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.SortedKeyEnumeration: java.lang.Object nextElement()> via: INTERFACE edge: $r10 = interfaceinvoke $r65.<java.util.Enumeration: java.lang.Object nextElement()>() in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.SortedKeyEnumeration: java.lang.Object nextElement()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.SortedKeyEnumeration: boolean hasMoreElements()> via: INTERFACE edge: $z1 = interfaceinvoke $r65.<java.util.Enumeration: boolean hasMoreElements()>() in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.SortedKeyEnumeration: boolean hasMoreElements()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.config.PropertySetter: void activate()> via: VIRTUAL edge: virtualinvoke $r67.<org.apache.log4j.config.PropertySetter: void activate()>() in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.config.PropertySetter: void activate()>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)> via: VIRTUAL edge: virtualinvoke $r67.<org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>($r46, $r45) in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.config.PropertySetter: void setProperty(java.lang.String,java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> via: STATIC edge: $r50 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>(r56, r7) in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r26) in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> via: STATIC edge: $r28 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>($r11, $r60, null) in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r42) in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r16) in <org.apache.log4j.PropertyConfigurator: void parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: parseAppenderFilters
2: parseAppender
3: parseErrorHandler
4: parseCategory
5: parseCatsAndRenderers
6: doConfigure
7: selectAndConfigure
8: configureRootCategory
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: parseAppenderFilters
2: parseAppender
3: parseErrorHandler
4: parseCategory
5: parseCatsAndRenderers
6: doConfigure
7: selectAndConfigure
8: configureRootCategory
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: doConfigure
2: selectAndConfigure
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: doConfigure
2: selectAndConfigure
Flows from source is finished.
Start traversal for source: <org.springframework.core.io.UrlResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: doConfigure
2: selectAndConfigure
Flows from source is finished.
Start traversal for source: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>...
Starting from source: 
0: doConfigure
1: selectAndConfigure
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.test.TestUtilities
Source here: <org.apache.cxf.test.TestUtilities: void setKeepAliveSystemProperty(boolean)>
Source here: <org.apache.cxf.test.TestUtilities: java.lang.String getBasedir()>
Now we build call graphs for class: org.apache.cxf.common.logging.JDKBugHacks
Source here: <org.apache.cxf.common.logging.JDKBugHacks: boolean skipHack(java.lang.String)>
Global flow here: <org.apache.cxf.common.logging.JDKBugHacks: boolean skipHack(java.lang.String)> calls: <org.apache.cxf.common.logging.JDKBugHacks$1: java.lang.String run()> via: GENERIC_FAKE edge: $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.cxf.common.logging.JDKBugHacks: boolean skipHack(java.lang.String)> ==> <org.apache.cxf.common.logging.JDKBugHacks$1: java.lang.String run()>
Global flow here: <org.apache.cxf.common.logging.JDKBugHacks: boolean skipHack(java.lang.String)> calls: <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)> via: STATIC edge: $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r19) in <org.apache.cxf.common.logging.JDKBugHacks: boolean skipHack(java.lang.String)> ==> <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>
Global flow here: <org.apache.cxf.common.logging.JDKBugHacks: void doHacks()> calls: <org.apache.cxf.common.classloader.ClassLoaderUtils$ClassLoaderHolder: void reset()> via: VIRTUAL edge: virtualinvoke $r1.<org.apache.cxf.common.classloader.ClassLoaderUtils$ClassLoaderHolder: void reset()>() in <org.apache.cxf.common.logging.JDKBugHacks: void doHacks()> ==> <org.apache.cxf.common.classloader.ClassLoaderUtils$ClassLoaderHolder: void reset()>
Global flow here: <org.apache.cxf.common.logging.JDKBugHacks: void doHacks()> calls: <org.apache.cxf.common.classloader.ClassLoaderUtils$ClassLoaderHolder: void reset()> via: VIRTUAL edge: virtualinvoke $r1.<org.apache.cxf.common.classloader.ClassLoaderUtils$ClassLoaderHolder: void reset()>() in <org.apache.cxf.common.logging.JDKBugHacks: void doHacks()> ==> <org.apache.cxf.common.classloader.ClassLoaderUtils$ClassLoaderHolder: void reset()>
Global flow here: <org.apache.cxf.common.logging.JDKBugHacks: void doHacks()> calls: <org.apache.cxf.common.classloader.ClassLoaderUtils: org.apache.cxf.common.classloader.ClassLoaderUtils$ClassLoaderHolder setThreadContextClassloader(java.lang.ClassLoader)> via: STATIC edge: $r1 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: org.apache.cxf.common.classloader.ClassLoaderUtils$ClassLoaderHolder setThreadContextClassloader(java.lang.ClassLoader)>($r0) in <org.apache.cxf.common.logging.JDKBugHacks: void doHacks()> ==> <org.apache.cxf.common.classloader.ClassLoaderUtils: org.apache.cxf.common.classloader.ClassLoaderUtils$ClassLoaderHolder setThreadContextClassloader(java.lang.ClassLoader)>
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
1: skipHack
2: doHacks
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: skipHack
2: doHacks
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: skipHack
2: doHacks
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: skipHack
2: doHacks
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.logging.JDKBugHacks: boolean skipHack(java.lang.String)>...
Starting from source: 
0: skipHack
1: doHacks
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
1: skipHack
2: doHacks
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: skipHack
2: doHacks
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.handler.ContextHandler$Context: java.io.InputStream getResourceAsStream(java.lang.String)>...
Starting from source: 
0: getResourceAsStream
1: skipHack
2: doHacks
Flows from source is finished.
Now we build call graphs for class: org.springframework.http.client.SimpleClientHttpRequest
Source here: <org.springframework.http.client.SimpleClientHttpRequest: java.net.URI getURI()>
Source here: <org.springframework.http.client.SimpleClientHttpRequest: org.springframework.http.client.ClientHttpResponse executeInternal(org.springframework.http.HttpHeaders,byte[])>
Now we build call graphs for class: org.apache.cxf.bus.extension.ExtensionManagerImpl
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void load(java.lang.String[])> calls: <org.apache.cxf.bus.extension.ExtensionRegistry: java.util.Map getRegisteredExtensions()> via: STATIC edge: $r1 = staticinvoke <org.apache.cxf.bus.extension.ExtensionRegistry: java.util.Map getRegisteredExtensions()>() in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void load(java.lang.String[])> ==> <org.apache.cxf.bus.extension.ExtensionRegistry: java.util.Map getRegisteredExtensions()>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void activateAllByType(java.lang.Class)> calls: <org.apache.cxf.bus.extension.Extension: java.lang.Class getClassObject(java.lang.ClassLoader)> via: VIRTUAL edge: $r9 = virtualinvoke r5.<org.apache.cxf.bus.extension.Extension: java.lang.Class getClassObject(java.lang.ClassLoader)>($r8) in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void activateAllByType(java.lang.Class)> ==> <org.apache.cxf.bus.extension.Extension: java.lang.Class getClassObject(java.lang.ClassLoader)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void activateAllByType(java.lang.Class)> calls: <org.apache.cxf.bus.extension.Extension: java.lang.Object getLoadedObject()> via: VIRTUAL edge: $r6 = virtualinvoke r5.<org.apache.cxf.bus.extension.Extension: java.lang.Object getLoadedObject()>() in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void activateAllByType(java.lang.Class)> ==> <org.apache.cxf.bus.extension.Extension: java.lang.Object getLoadedObject()>
Source here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void load(java.lang.String,java.lang.ClassLoader)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void load(java.lang.String,java.lang.ClassLoader)> calls: <org.apache.cxf.bus.extension.Extension: java.lang.String getName()> via: VIRTUAL edge: $r13 = virtualinvoke r9.<org.apache.cxf.bus.extension.Extension: java.lang.String getName()>() in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void load(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.cxf.bus.extension.Extension: java.lang.String getName()>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void load(java.lang.String,java.lang.ClassLoader)> calls: <org.apache.cxf.bus.extension.ExtensionFragmentParser: java.util.List getExtensionsFromXML(java.io.InputStream)> via: VIRTUAL edge: r21 = virtualinvoke $r17.<org.apache.cxf.bus.extension.ExtensionFragmentParser: java.util.List getExtensionsFromXML(java.io.InputStream)>($r5) in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void load(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.cxf.bus.extension.ExtensionFragmentParser: java.util.List getExtensionsFromXML(java.io.InputStream)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void load(java.lang.String,java.lang.ClassLoader)> calls: <org.apache.cxf.bus.extension.ExtensionFragmentParser: java.util.List getExtensionsFromText(java.io.InputStream)> via: VIRTUAL edge: r21 = virtualinvoke $r6.<org.apache.cxf.bus.extension.ExtensionFragmentParser: java.util.List getExtensionsFromText(java.io.InputStream)>($r5) in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void load(java.lang.String,java.lang.ClassLoader)> ==> <org.apache.cxf.bus.extension.ExtensionFragmentParser: java.util.List getExtensionsFromText(java.io.InputStream)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> calls: <org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()> via: VIRTUAL edge: $r9 = virtualinvoke r0.<org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()>() in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> ==> <org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> calls: <org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()> via: VIRTUAL edge: $r8 = virtualinvoke r0.<org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()>() in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> ==> <org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> calls: <org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()> via: VIRTUAL edge: $r4 = virtualinvoke r0.<org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()>() in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> ==> <org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> calls: <org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()> via: VIRTUAL edge: $r11 = virtualinvoke r0.<org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()>() in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> ==> <org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> calls: <org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()> via: VIRTUAL edge: $r3 = virtualinvoke r0.<org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()>() in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> ==> <org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> calls: <org.apache.cxf.bus.extension.Extension: java.lang.Object load(java.lang.ClassLoader,org.apache.cxf.Bus)> via: VIRTUAL edge: $r24 = virtualinvoke r0.<org.apache.cxf.bus.extension.Extension: java.lang.Object load(java.lang.ClassLoader,org.apache.cxf.Bus)>($r22, $r23) in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> ==> <org.apache.cxf.bus.extension.Extension: java.lang.Object load(java.lang.ClassLoader,org.apache.cxf.Bus)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> calls: <org.apache.cxf.bus.extension.Extension: java.lang.Class loadInterface(java.lang.ClassLoader)> via: VIRTUAL edge: r20 = virtualinvoke r0.<org.apache.cxf.bus.extension.Extension: java.lang.Class loadInterface(java.lang.ClassLoader)>($r17) in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> ==> <org.apache.cxf.bus.extension.Extension: java.lang.Class loadInterface(java.lang.ClassLoader)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> calls: <org.apache.cxf.bus.extension.Extension: java.lang.String getInterfaceName()> via: VIRTUAL edge: $r16 = virtualinvoke r0.<org.apache.cxf.bus.extension.Extension: java.lang.String getInterfaceName()>() in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> ==> <org.apache.cxf.bus.extension.Extension: java.lang.String getInterfaceName()>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> calls: <org.apache.cxf.bus.extension.Extension: java.lang.String getInterfaceName()> via: VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.cxf.bus.extension.Extension: java.lang.String getInterfaceName()>() in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> ==> <org.apache.cxf.bus.extension.Extension: java.lang.String getInterfaceName()>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> calls: <org.apache.cxf.configuration.NullConfigurer: void configureBean(java.lang.Object)> via: INTERFACE edge: interfaceinvoke $r28.<org.apache.cxf.configuration.Configurer: void configureBean(java.lang.Object)>($r24) in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> ==> <org.apache.cxf.configuration.NullConfigurer: void configureBean(java.lang.Object)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> calls: <org.apache.cxf.resource.DefaultResourceManager: void addResourceResolver(org.apache.cxf.resource.ResourceResolver)> via: INTERFACE edge: interfaceinvoke $r12.<org.apache.cxf.resource.ResourceManager: void addResourceResolver(org.apache.cxf.resource.ResourceResolver)>($r10) in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> ==> <org.apache.cxf.resource.DefaultResourceManager: void addResourceResolver(org.apache.cxf.resource.ResourceResolver)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> calls: <org.apache.cxf.resource.DefaultResourceManager: void removeResourceResolver(org.apache.cxf.resource.ResourceResolver)> via: INTERFACE edge: interfaceinvoke $r7.<org.apache.cxf.resource.ResourceManager: void removeResourceResolver(org.apache.cxf.resource.ResourceResolver)>(r29) in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> ==> <org.apache.cxf.resource.DefaultResourceManager: void removeResourceResolver(org.apache.cxf.resource.ResourceResolver)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> calls: <org.apache.cxf.resource.DefaultResourceManager: void removeResourceResolver(org.apache.cxf.resource.ResourceResolver)> via: INTERFACE edge: interfaceinvoke $r19.<org.apache.cxf.resource.ResourceManager: void removeResourceResolver(org.apache.cxf.resource.ResourceResolver)>(r29) in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> ==> <org.apache.cxf.resource.DefaultResourceManager: void removeResourceResolver(org.apache.cxf.resource.ResourceResolver)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> calls: <org.apache.cxf.common.injection.ResourceInjector: void construct(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r30.<org.apache.cxf.common.injection.ResourceInjector: void construct(java.lang.Object)>($r24) in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> ==> <org.apache.cxf.common.injection.ResourceInjector: void construct(java.lang.Object)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> calls: <org.apache.cxf.common.injection.ResourceInjector: void inject(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r30.<org.apache.cxf.common.injection.ResourceInjector: void inject(java.lang.Object)>($r24) in <org.apache.cxf.bus.extension.ExtensionManagerImpl: void loadAndRegister(org.apache.cxf.bus.extension.Extension)> ==> <org.apache.cxf.common.injection.ResourceInjector: void inject(java.lang.Object)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: java.lang.Object getExtension(java.lang.String,java.lang.Class)> calls: <org.apache.cxf.bus.extension.Extension: java.lang.Object getLoadedObject()> via: VIRTUAL edge: $r9 = virtualinvoke r4.<org.apache.cxf.bus.extension.Extension: java.lang.Object getLoadedObject()>() in <org.apache.cxf.bus.extension.ExtensionManagerImpl: java.lang.Object getExtension(java.lang.String,java.lang.Class)> ==> <org.apache.cxf.bus.extension.Extension: java.lang.Object getLoadedObject()>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: java.lang.Object getExtension(java.lang.String,java.lang.Class)> calls: <org.apache.cxf.bus.extension.Extension: java.lang.Object getLoadedObject()> via: VIRTUAL edge: $r8 = virtualinvoke r4.<org.apache.cxf.bus.extension.Extension: java.lang.Object getLoadedObject()>() in <org.apache.cxf.bus.extension.ExtensionManagerImpl: java.lang.Object getExtension(java.lang.String,java.lang.Class)> ==> <org.apache.cxf.bus.extension.Extension: java.lang.Object getLoadedObject()>
Global flow here: <org.apache.cxf.bus.extension.ExtensionManagerImpl: java.lang.Object getExtension(java.lang.String,java.lang.Class)> calls: <org.apache.cxf.bus.extension.Extension: java.lang.Class getClassObject(java.lang.ClassLoader)> via: VIRTUAL edge: $r7 = virtualinvoke r4.<org.apache.cxf.bus.extension.Extension: java.lang.Class getClassObject(java.lang.ClassLoader)>($r6) in <org.apache.cxf.bus.extension.ExtensionManagerImpl: java.lang.Object getExtension(java.lang.String,java.lang.Class)> ==> <org.apache.cxf.bus.extension.Extension: java.lang.Class getClassObject(java.lang.ClassLoader)>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: load
2: loadAndRegister
3: getExtension
4: resolve
5: activateAllByType
Flows from source is finished.
Start traversal for source: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void load(java.lang.String,java.lang.ClassLoader)>...
Starting from source: 
0: load
1: loadAndRegister
2: getExtension
3: resolve
4: activateAllByType
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.BusFactory
Global flow here: <org.apache.cxf.BusFactory: org.apache.cxf.BusFactory newInstance(java.lang.String)> calls: <org.apache.cxf.common.classloader.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> via: STATIC edge: $r0 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>(r15, class "Lorg/apache/cxf/BusFactory;") in <org.apache.cxf.BusFactory: org.apache.cxf.BusFactory newInstance(java.lang.String)> ==> <org.apache.cxf.common.classloader.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>
Global flow here: <org.apache.cxf.BusFactory: org.apache.cxf.BusFactory newInstance(java.lang.String)> calls: <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, $r12, "BUS_FACTORY_INSTANTIATION_EXC", $r11) in <org.apache.cxf.BusFactory: org.apache.cxf.BusFactory newInstance(java.lang.String)> ==> <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable)>
Source here: <org.apache.cxf.BusFactory: java.lang.String getBusFactoryClass(java.lang.ClassLoader)>
Global flow here: <org.apache.cxf.BusFactory: java.lang.String getBusFactoryClass(java.lang.ClassLoader)> calls: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)> via: STATIC edge: $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>("org.apache.cxf.bus.factory") in <org.apache.cxf.BusFactory: java.lang.String getBusFactoryClass(java.lang.ClassLoader)> ==> <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>
Global flow here: <org.apache.cxf.BusFactory: java.lang.String getBusFactoryClass(java.lang.ClassLoader)> calls: <org.apache.cxf.common.classloader.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)> via: STATIC edge: $r1 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>(r18, class "Lorg/apache/cxf/BusFactory;") in <org.apache.cxf.BusFactory: java.lang.String getBusFactoryClass(java.lang.ClassLoader)> ==> <org.apache.cxf.common.classloader.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>
Global flow here: <org.apache.cxf.BusFactory: java.lang.String getBusFactoryClass(java.lang.ClassLoader)> calls: <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, $r12, "FAILED_TO_DETERMINE_BUS_FACTORY_EXC", $r11) in <org.apache.cxf.BusFactory: java.lang.String getBusFactoryClass(java.lang.ClassLoader)> ==> <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable)>
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: getBusFactoryClass
2: newInstance
3: getDefaultBus
4: createThreadBus
5: getThreadDefaultBus
6: getBus
Flows from source is finished.
Start traversal for source: <org.apache.cxf.BusFactory: java.lang.String getBusFactoryClass(java.lang.ClassLoader)>...
Starting from source: 
0: getBusFactoryClass
1: newInstance
2: getDefaultBus
3: createThreadBus
4: getThreadDefaultBus
5: getBus
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.handler.ContextHandler$Context: java.io.InputStream getResourceAsStream(java.lang.String)>...
Starting from source: 
0: getResourceAsStream
1: getBusFactoryClass
2: newInstance
3: getDefaultBus
4: createThreadBus
5: getThreadDefaultBus
6: getBus
Flows from source is finished.
Now we build call graphs for class: org.apache.log4j.EnhancedThrowableRenderer
Source here: <org.apache.log4j.EnhancedThrowableRenderer: java.lang.String formatElement(java.lang.Object,java.util.Map)>
Now we build call graphs for class: org.apache.cxf.transport.http.auth.SpnegoAuthSupplier
Source here: <org.apache.cxf.transport.http.auth.SpnegoAuthSupplier: java.lang.String getAuthorization(org.apache.cxf.configuration.security.AuthorizationPolicy,java.net.URL,org.apache.cxf.message.Message,java.lang.String)>
Now we build call graphs for class: org.apache.log4j.jdbc.JDBCAppender
Source here: <org.apache.log4j.jdbc.JDBCAppender: void execute(java.lang.String)>
Now we build call graphs for class: org.apache.commons.logging.LogFactory
Source here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <com.sun.org.apache.xpath.internal.XPathException: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <com.sun.org.apache.xpath.internal.XPathException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <org.xml.sax.SAXException: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.xml.sax.SAXException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <com.sun.org.apache.xerces.internal.impl.dv.DatatypeException: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <com.sun.org.apache.xerces.internal.impl.dv.DatatypeException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <org.apache.log4j.config.PropertySetterException: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.log4j.config.PropertySetterException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <sun.nio.fs.WindowsException: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <sun.nio.fs.WindowsException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <org.apache.cxf.interceptor.Fault: java.lang.String getMessage()> via: VIRTUAL edge: $r53 = virtualinvoke $r50.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.cxf.interceptor.Fault: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <org.apache.cxf.common.i18n.UncheckedException: java.lang.String getMessage()> via: VIRTUAL edge: $r53 = virtualinvoke $r50.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.cxf.common.i18n.UncheckedException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <org.springframework.core.NestedRuntimeException: java.lang.String getMessage()> via: VIRTUAL edge: $r53 = virtualinvoke $r50.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <org.apache.cxf.interceptor.Fault: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.cxf.interceptor.Fault: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <org.apache.cxf.common.i18n.UncheckedException: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.cxf.common.i18n.UncheckedException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <org.apache.cxf.common.i18n.Exception: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.apache.cxf.common.i18n.Exception: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <sun.security.jgss.GSSExceptionImpl: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <sun.security.jgss.GSSExceptionImpl: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <org.ietf.jgss.GSSException: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.ietf.jgss.GSSException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <sun.security.krb5.KrbException: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <sun.security.krb5.KrbException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> calls: <org.springframework.core.NestedRuntimeException: java.lang.String getMessage()> via: VIRTUAL edge: $r42 = virtualinvoke $r39.<java.lang.Throwable: java.lang.String getMessage()>() in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> ==> <org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
Global flow here: <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoaderInternal()> calls: <org.apache.commons.logging.LogFactory$1: java.lang.Object run()> via: GENERIC_FAKE edge: $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoaderInternal()> ==> <org.apache.commons.logging.LogFactory$1: java.lang.Object run()>
Global flow here: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> calls: <org.apache.commons.logging.LogFactory$2: java.lang.Object run()> via: GENERIC_FAKE edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)> ==> <org.apache.commons.logging.LogFactory$2: java.lang.Object run()>
Global flow here: <org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)> calls: <org.apache.commons.logging.LogFactory$3: java.lang.Object run()> via: GENERIC_FAKE edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory$3: java.lang.Object run()>
Global flow here: <org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)> calls: <org.apache.commons.logging.LogFactory$4: java.lang.Object run()> via: GENERIC_FAKE edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)> ==> <org.apache.commons.logging.LogFactory$4: java.lang.Object run()>
Global flow here: <org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)> calls: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()> via: GENERIC_FAKE edge: $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)> ==> <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>
Global flow here: <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> calls: <jdk.internal.loader.Loader$3: java.net.URL nextElement()> via: INTERFACE edge: $r15 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <jdk.internal.loader.Loader$3: java.net.URL nextElement()>
Global flow here: <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> calls: <jdk.internal.loader.Loader$3: boolean hasMoreElements()> via: INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <jdk.internal.loader.Loader$3: boolean hasMoreElements()>
Global flow here: <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> calls: <jdk.internal.loader.URLClassPath$1: java.net.URL nextElement()> via: INTERFACE edge: $r15 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <jdk.internal.loader.URLClassPath$1: java.net.URL nextElement()>
Global flow here: <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> calls: <jdk.internal.loader.URLClassPath$1: boolean hasMoreElements()> via: INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>() in <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)> ==> <jdk.internal.loader.URLClassPath$1: boolean hasMoreElements()>
Global flow here: <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)> calls: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()> via: GENERIC_FAKE edge: $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.LogFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)> ==> <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>
Source here: <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: objectId
2: logHierarchy
3: logClassLoaderEnvironment
4: implementsLogFactory
5: createFactory
6: run
7: getSystemProperty
8: getFactory
9: getLog
10: createFactoryStore
11: getProperties
12: getConfigurationFile
13: getResources
14: getResourceAsStream
15: newFactory
16: getContextClassLoaderInternal
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>...
Starting from source: 
0: getFactory
1: getLog
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: logClassLoaderEnvironment
2: getConfigurationFile
3: getFactory
4: getLog
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: logClassLoaderEnvironment
2: getConfigurationFile
3: getFactory
4: getLog
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getParent()>...
Starting from source: 
0: getParent
1: logHierarchy
2: logClassLoaderEnvironment
3: implementsLogFactory
4: createFactory
5: run
6: getSystemProperty
7: getFactory
8: getLog
9: createFactoryStore
10: getProperties
11: getConfigurationFile
12: getResources
13: getResourceAsStream
14: newFactory
15: getContextClassLoaderInternal
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
1: getSystemProperty
2: getFactory
3: getLog
4: createFactoryStore
5: getProperties
6: getConfigurationFile
7: getResources
8: getResourceAsStream
9: newFactory
10: getContextClassLoaderInternal
Flows from source is finished.
Start traversal for source: <java.lang.System: java.util.Properties getProperties()>...
Starting from source: 
0: getProperties
1: getConfigurationFile
2: getFactory
3: getLog
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: getSystemProperty
2: getFactory
3: getLog
4: createFactoryStore
5: getProperties
6: getConfigurationFile
7: getResources
8: getResourceAsStream
9: newFactory
10: getContextClassLoaderInternal
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>...
Starting from source: 
0: logClassLoaderEnvironment
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: getFactory
2: getLog
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: getSystemProperty
2: getFactory
3: getLog
4: createFactoryStore
5: getProperties
6: getConfigurationFile
7: getResources
8: getResourceAsStream
9: newFactory
10: getContextClassLoaderInternal
Flows from source is finished.
Start traversal for source: <com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$5: java.lang.String print(java.io.File)>...
Starting from source: 
0: print
1: logDiagnostic
2: logClassLoaderEnvironment
3: logHierarchy
4: implementsLogFactory
5: createFactory
6: run
7: getSystemProperty
8: getFactory
9: getLog
10: createFactoryStore
11: getProperties
12: getConfigurationFile
13: getResources
14: getResourceAsStream
15: newFactory
16: getContextClassLoaderInternal
17: access$000
18: getClassLoader
19: directGetContextClassLoader
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
1: getSystemProperty
2: getFactory
3: getLog
4: createFactoryStore
5: getProperties
6: getConfigurationFile
7: getResources
8: getResourceAsStream
9: newFactory
10: getContextClassLoaderInternal
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: getSystemProperty
2: getFactory
3: getLog
4: createFactoryStore
5: getProperties
6: getConfigurationFile
7: getResources
8: getResourceAsStream
9: newFactory
10: getContextClassLoaderInternal
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.handler.ContextHandler$Context: java.io.InputStream getResourceAsStream(java.lang.String)>...
Starting from source: 
0: getResourceAsStream
1: getFactory
2: getLog
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.transport.https.HttpsURLConnectionFactory
Source here: <org.apache.cxf.transport.https.HttpsURLConnectionFactory: java.net.HttpURLConnection createConnection(org.apache.cxf.configuration.jsse.TLSClientParameters,java.net.Proxy,java.net.URL)>
Now we build call graphs for class: org.apache.cxf.transport.https.SSLUtils
Source here: <org.apache.cxf.transport.https.SSLUtils: javax.net.ssl.KeyManager[] getKeyStoreManagers(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.logging.Logger)>
Source here: <org.apache.cxf.transport.https.SSLUtils: byte[] loadClientCredential(java.lang.String)>
Source here: <org.apache.cxf.transport.https.SSLUtils: byte[] loadCACert(java.lang.String)>
Global flow here: <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystore(java.lang.String,java.util.logging.Logger)> calls: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)> via: STATIC edge: $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStore") in <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystore(java.lang.String,java.util.logging.Logger)> ==> <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>
Global flow here: <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystore(java.lang.String,java.util.logging.Logger)> calls: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)> via: STATIC edge: $r2 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>("user.home") in <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystore(java.lang.String,java.util.logging.Logger)> ==> <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>
Global flow here: <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystore(java.lang.String,java.util.logging.Logger)> calls: <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)> via: STATIC edge: staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r5, $r8, r7, r6) in <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystore(java.lang.String,java.util.logging.Logger)> ==> <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>
Global flow here: <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystoreType(java.lang.String,java.util.logging.Logger,java.lang.String)> calls: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String,java.lang.String)> via: STATIC edge: $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String,java.lang.String)>("javax.net.ssl.keyStoreType", null) in <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystoreType(java.lang.String,java.util.logging.Logger,java.lang.String)> ==> <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String,java.lang.String)>
Global flow here: <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystoreType(java.lang.String,java.util.logging.Logger,java.lang.String)> calls: <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)> via: STATIC edge: staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r1, $r5, r4, r3) in <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystoreType(java.lang.String,java.util.logging.Logger,java.lang.String)> ==> <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>
Global flow here: <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystoreProvider(java.lang.String,java.util.logging.Logger)> calls: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String,java.lang.String)> via: STATIC edge: $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String,java.lang.String)>("javax.net.ssl.keyStoreProvider", null) in <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystoreProvider(java.lang.String,java.util.logging.Logger)> ==> <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String,java.lang.String)>
Global flow here: <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystoreProvider(java.lang.String,java.util.logging.Logger)> calls: <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)> via: STATIC edge: staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>(r1, $r4, r3, r2) in <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystoreProvider(java.lang.String,java.util.logging.Logger)> ==> <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object)>
Global flow here: <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystorePassword(java.lang.String,java.util.logging.Logger)> calls: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)> via: STATIC edge: $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStorePassword") in <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystorePassword(java.lang.String,java.util.logging.Logger)> ==> <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>
Global flow here: <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystorePassword(java.lang.String,java.util.logging.Logger)> calls: <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)> via: STATIC edge: staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)>(r1, $r5, r3) in <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystorePassword(java.lang.String,java.util.logging.Logger)> ==> <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String)>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: getKeystorePassword
2: getKeyStore
3: getKeystoreProvider
4: getKeystoreType
5: getKeystore
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getKeystorePassword
2: getKeyStore
3: getKeystoreProvider
4: getKeystoreType
5: getKeystore
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.jaxrs.ext.codegen.CodeGeneratorProvider
Source here: <org.apache.cxf.jaxrs.ext.codegen.CodeGeneratorProvider: javax.ws.rs.core.Response doHandleRequest(org.apache.cxf.message.Message,org.apache.cxf.jaxrs.model.ClassResourceInfo)>
Source here: <org.apache.cxf.jaxrs.ext.codegen.CodeGeneratorProvider: void zipSource(java.io.File,java.io.File)>
Source here: <org.apache.cxf.jaxrs.ext.codegen.CodeGeneratorProvider: javax.ws.rs.core.Response getSource(java.io.File)>
Source here: <org.apache.cxf.jaxrs.ext.codegen.CodeGeneratorProvider: javax.ws.rs.core.Response getLink(java.io.File,org.apache.cxf.message.Message)>
Now we build call graphs for class: org.apache.geronimo.mail.util.Base64DecoderStream
Source here: <org.apache.geronimo.mail.util.Base64DecoderStream: int available()>
Now we build call graphs for class: com.ibm.wsdl.util.StringUtils
Source here: <com.ibm.wsdl.util.StringUtils: java.io.InputStream getContentAsInputStream(java.net.URL)>
Now we build call graphs for class: org.eclipse.jetty.util.TypeUtil
Source here: <org.eclipse.jetty.util.TypeUtil: byte[] readLine(java.io.InputStream)>
Now we build call graphs for class: org.apache.cxf.jaxb.JAXBContextCache
Source here: <org.apache.cxf.jaxb.JAXBContextCache: void addPackage(java.util.Set,java.lang.String,java.lang.ClassLoader)>
Now we build call graphs for class: javax.mail.Service
Source here: <javax.mail.Service: void connect(java.lang.String,int,java.lang.String,java.lang.String)>
Now we build call graphs for class: org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory
Source here: <org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory: java.lang.String readAll(java.io.InputStream,java.lang.String)>
Now we build call graphs for class: org.apache.cxf.bus.extension.ExtensionFragmentParser
Global flow here: <org.apache.cxf.bus.extension.ExtensionFragmentParser: java.util.List getExtensionsFromXML(java.io.InputStream)> calls: <org.apache.cxf.staxutils.StaxUtils: org.w3c.dom.Document read(java.io.InputStream)> via: STATIC edge: $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: org.w3c.dom.Document read(java.io.InputStream)>(r0) in <org.apache.cxf.bus.extension.ExtensionFragmentParser: java.util.List getExtensionsFromXML(java.io.InputStream)> ==> <org.apache.cxf.staxutils.StaxUtils: org.w3c.dom.Document read(java.io.InputStream)>
Source here: <org.apache.cxf.bus.extension.ExtensionFragmentParser: java.util.List getExtensionsFromText(java.io.InputStream)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionFragmentParser: org.apache.cxf.bus.extension.Extension getExtensionFromTextLine(java.lang.String)> calls: <org.apache.cxf.bus.extension.Extension: void setDeferred(boolean)> via: VIRTUAL edge: virtualinvoke $r10.<org.apache.cxf.bus.extension.Extension: void setDeferred(boolean)>($z0) in <org.apache.cxf.bus.extension.ExtensionFragmentParser: org.apache.cxf.bus.extension.Extension getExtensionFromTextLine(java.lang.String)> ==> <org.apache.cxf.bus.extension.Extension: void setDeferred(boolean)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionFragmentParser: org.apache.cxf.bus.extension.Extension getExtensionFromTextLine(java.lang.String)> calls: <org.apache.cxf.bus.extension.Extension: void setInterfaceName(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r10.<org.apache.cxf.bus.extension.Extension: void setInterfaceName(java.lang.String)>(r9) in <org.apache.cxf.bus.extension.ExtensionFragmentParser: org.apache.cxf.bus.extension.Extension getExtensionFromTextLine(java.lang.String)> ==> <org.apache.cxf.bus.extension.Extension: void setInterfaceName(java.lang.String)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionFragmentParser: org.apache.cxf.bus.extension.Extension getExtensionFromTextLine(java.lang.String)> calls: <org.apache.cxf.bus.extension.Extension: java.lang.String getClassname()> via: VIRTUAL edge: $r4 = virtualinvoke $r10.<org.apache.cxf.bus.extension.Extension: java.lang.String getClassname()>() in <org.apache.cxf.bus.extension.ExtensionFragmentParser: org.apache.cxf.bus.extension.Extension getExtensionFromTextLine(java.lang.String)> ==> <org.apache.cxf.bus.extension.Extension: java.lang.String getClassname()>
Global flow here: <org.apache.cxf.bus.extension.ExtensionFragmentParser: org.apache.cxf.bus.extension.Extension getExtensionFromTextLine(java.lang.String)> calls: <org.apache.cxf.bus.extension.Extension: void setClassname(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r10.<org.apache.cxf.bus.extension.Extension: void setClassname(java.lang.String)>($r3) in <org.apache.cxf.bus.extension.ExtensionFragmentParser: org.apache.cxf.bus.extension.Extension getExtensionFromTextLine(java.lang.String)> ==> <org.apache.cxf.bus.extension.Extension: void setClassname(java.lang.String)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionFragmentParser: java.util.List deserialiseExtensions(org.w3c.dom.Document)> calls: <org.apache.cxf.bus.extension.Extension: void setDeferred(boolean)> via: VIRTUAL edge: virtualinvoke $r5.<org.apache.cxf.bus.extension.Extension: void setDeferred(boolean)>($z3) in <org.apache.cxf.bus.extension.ExtensionFragmentParser: java.util.List deserialiseExtensions(org.w3c.dom.Document)> ==> <org.apache.cxf.bus.extension.Extension: void setDeferred(boolean)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionFragmentParser: java.util.List deserialiseExtensions(org.w3c.dom.Document)> calls: <org.apache.cxf.bus.extension.Extension: void setInterfaceName(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r5.<org.apache.cxf.bus.extension.Extension: void setInterfaceName(java.lang.String)>($r8) in <org.apache.cxf.bus.extension.ExtensionFragmentParser: java.util.List deserialiseExtensions(org.w3c.dom.Document)> ==> <org.apache.cxf.bus.extension.Extension: void setInterfaceName(java.lang.String)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionFragmentParser: java.util.List deserialiseExtensions(org.w3c.dom.Document)> calls: <org.apache.cxf.bus.extension.Extension: void setClassname(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r5.<org.apache.cxf.bus.extension.Extension: void setClassname(java.lang.String)>($r7) in <org.apache.cxf.bus.extension.ExtensionFragmentParser: java.util.List deserialiseExtensions(org.w3c.dom.Document)> ==> <org.apache.cxf.bus.extension.Extension: void setClassname(java.lang.String)>
Global flow here: <org.apache.cxf.bus.extension.ExtensionFragmentParser: void deserialiseNamespaces(org.w3c.dom.Element,org.apache.cxf.bus.extension.Extension)> calls: <org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()> via: VIRTUAL edge: $r4 = virtualinvoke r3.<org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()>() in <org.apache.cxf.bus.extension.ExtensionFragmentParser: void deserialiseNamespaces(org.w3c.dom.Element,org.apache.cxf.bus.extension.Extension)> ==> <org.apache.cxf.bus.extension.Extension: java.util.Collection getNamespaces()>
Start traversal for source: <java.io.BufferedReader: int read()>...
Starting from source: 
0: read
1: getExtensionsFromXML
2: load
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: getExtensionsFromText
2: load
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: getExtensionsFromXML
2: load
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int read()>...
Starting from source: 
0: read
1: getExtensionsFromXML
2: load
Flows from source is finished.
Start traversal for source: <java.io.FileInputStream: int read(byte[])>...
Starting from source: 
0: read
1: getExtensionsFromXML
2: load
Flows from source is finished.
Start traversal for source: <java.io.InputStreamReader: int read()>...
Starting from source: 
0: read
1: getExtensionsFromXML
2: load
Flows from source is finished.
Start traversal for source: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void load(java.lang.String,java.lang.ClassLoader)>...
Starting from source: 
0: load
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: getExtensionsFromXML
2: load
Flows from source is finished.
Start traversal for source: <org.apache.cxf.bus.extension.ExtensionFragmentParser: java.util.List getExtensionsFromText(java.io.InputStream)>...
Starting from source: 
0: getExtensionsFromText
1: load
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.TypeUtil: byte[] readLine(java.io.InputStream)>...
Starting from source: 
0: readLine
1: getExtensionsFromText
2: load
Flows from source is finished.
Start traversal for source: <java.io.PushbackInputStream: int read()>...
Starting from source: 
0: read
1: getExtensionsFromXML
2: load
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.common.util.ReflectionUtil
Global flow here: <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)> calls: <org.apache.cxf.common.util.ReflectionUtil$4: java.lang.reflect.Method[] run()> via: GENERIC_FAKE edge: $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)> ==> <org.apache.cxf.common.util.ReflectionUtil$4: java.lang.reflect.Method[] run()>
Global flow here: <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)> calls: <org.apache.cxf.common.util.ReflectionUtil$5: java.lang.reflect.Field[] run()> via: GENERIC_FAKE edge: $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)> ==> <org.apache.cxf.common.util.ReflectionUtil$5: java.lang.reflect.Field[] run()>
Global flow here: <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject)> calls: <org.apache.cxf.common.util.ReflectionUtil$6: java.lang.reflect.AccessibleObject run()> via: GENERIC_FAKE edge: $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject)> ==> <org.apache.cxf.common.util.ReflectionUtil$6: java.lang.reflect.AccessibleObject run()>
Global flow here: <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject,boolean)> calls: <org.apache.cxf.common.util.ReflectionUtil$7: java.lang.reflect.AccessibleObject run()> via: GENERIC_FAKE edge: $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject,boolean)> ==> <org.apache.cxf.common.util.ReflectionUtil$7: java.lang.reflect.AccessibleObject run()>
Source here: <org.apache.cxf.common.util.ReflectionUtil: void getPackageNamesFromDir(java.io.File,java.io.File,java.util.List)>
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
1: setAccessible
2: invokePostConstruct
3: invokeSetter
4: injectField
5: processable
6: getDeclaredFields
7: processFields
8: getDeclaredMethods
9: processMethods
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: setAccessible
2: invokePostConstruct
3: invokeSetter
4: injectField
5: processable
6: getDeclaredFields
7: processFields
8: getDeclaredMethods
9: processMethods
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: setAccessible
2: invokePostConstruct
3: invokeSetter
4: injectField
5: processable
6: getDeclaredFields
7: processFields
8: getDeclaredMethods
9: processMethods
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: setAccessible
2: invokePostConstruct
3: invokeSetter
4: injectField
5: processable
6: getDeclaredFields
7: processFields
8: getDeclaredMethods
9: processMethods
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
1: setAccessible
2: invokePostConstruct
3: invokeSetter
4: injectField
5: processable
6: getDeclaredFields
7: processFields
8: getDeclaredMethods
9: processMethods
Flows from source is finished.
Now we build call graphs for class: org.apache.geronimo.mail.util.Base64Encoder
Source here: <org.apache.geronimo.mail.util.Base64Encoder: void encode(java.io.InputStream,java.lang.StringBuffer,int)>
Now we build call graphs for class: org.apache.cxf.helpers.ServiceUtils
Source here: <org.apache.cxf.helpers.ServiceUtils: java.lang.String makePackageName(java.lang.String)>
Now we build call graphs for class: org.apache.cxf.common.util.Compiler
Source here: <org.apache.cxf.common.util.Compiler: void setOutputDir(java.io.File)>
Source here: <org.apache.cxf.common.util.Compiler: void addArgs(java.util.List)>
Source here: <org.apache.cxf.common.util.Compiler: boolean compileFiles(java.io.File[])>
Source here: <org.apache.cxf.common.util.Compiler: boolean compileFiles(java.util.List)>
Now we build call graphs for class: org.springframework.remoting.rmi.RmiClientInterceptor
Source here: <org.springframework.remoting.rmi.RmiClientInterceptor: java.rmi.Remote lookupStub()>
Now we build call graphs for class: org.eclipse.jetty.util.ajax.JSON$ReaderSource
Source here: <org.eclipse.jetty.util.ajax.JSON$ReaderSource: void getNext()>
Now we build call graphs for class: org.apache.cxf.common.util.StringUtils
Source here: <org.apache.cxf.common.util.StringUtils: java.net.URL getURL(java.lang.String)>
Source here: <org.apache.cxf.common.util.StringUtils: java.lang.String addDefaultPortIfMissing(java.lang.String,java.lang.String)>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.StringUtils: java.lang.String addDefaultPortIfMissing(java.lang.String,java.lang.String)>...
Starting from source: 
0: addDefaultPortIfMissing
1: getAddressValue
Flows from source is finished.
Start traversal for source: <java.net.URL: int getPort()>...
Starting from source: 
0: getPort
1: addDefaultPortIfMissing
2: getAddressValue
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.logging.JDKBugHacks: boolean skipHack(java.lang.String)>...
Starting from source: 
0: skipHack
Flows from source is finished.
Now we build call graphs for class: org.apache.log4j.varia.Roller
Source here: <org.apache.log4j.varia.Roller: void roll()>
Now we build call graphs for class: org.springframework.util.Log4jConfigurer
Source here: <org.springframework.util.Log4jConfigurer: void setWorkingDirSystemProperty(java.lang.String)>
Now we build call graphs for class: org.springframework.util.DefaultPropertiesPersister
Source here: <org.springframework.util.DefaultPropertiesPersister: void doLoad(java.util.Properties,java.io.Reader)>
Now we build call graphs for class: com.ctc.wstx.io.MergedReader
Source here: <com.ctc.wstx.io.MergedReader: int read()>
Source here: <com.ctc.wstx.io.MergedReader: int read(char[],int,int)>
Now we build call graphs for class: org.apache.cxf.attachment.QuotedPrintableDecoderStream
Source here: <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int decodeNonspaceChar(int)>
Global flow here: <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int decodeNonspaceChar(int)> calls: <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[])> via: VIRTUAL edge: $i1 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>(r0) in <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int decodeNonspaceChar(int)> ==> <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[])>
Global flow here: <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int read()> calls: <org.apache.cxf.attachment.DelegatingInputStream: int read()> via: VIRTUAL edge: $i3 = virtualinvoke $r2.<java.io.InputStream: int read()>() in <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int read()> ==> <org.apache.cxf.attachment.DelegatingInputStream: int read()>
Global flow here: <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int read()> calls: <sun.nio.ch.ChannelInputStream: int read()> via: VIRTUAL edge: $i2 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int read()> ==> <sun.nio.ch.ChannelInputStream: int read()>
Global flow here: <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int read()> calls: <sun.net.www.MeteredStream: int read()> via: VIRTUAL edge: $i2 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int read()> ==> <sun.net.www.MeteredStream: int read()>
Global flow here: <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int read()> calls: <sun.nio.ch.ChannelInputStream: int read()> via: VIRTUAL edge: $i3 = virtualinvoke $r2.<java.io.InputStream: int read()>() in <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int read()> ==> <sun.nio.ch.ChannelInputStream: int read()>
Global flow here: <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int read()> calls: <sun.net.www.MeteredStream: int read()> via: VIRTUAL edge: $i3 = virtualinvoke $r2.<java.io.InputStream: int read()>() in <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int read()> ==> <sun.net.www.MeteredStream: int read()>
Global flow here: <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int read()> calls: <org.apache.cxf.attachment.DelegatingInputStream: int read()> via: VIRTUAL edge: $i2 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int read()> ==> <org.apache.cxf.attachment.DelegatingInputStream: int read()>
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read(char[],int,int)>...
Starting from source: 
0: read
1: consume
2: decodeNonspaceChar
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: int read()>...
Starting from source: 
0: read
1: consume
2: decodeNonspaceChar
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read()>...
Starting from source: 
0: read
1: consume
2: decodeNonspaceChar
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: consume
2: decodeNonspaceChar
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int read()>...
Starting from source: 
0: read
1: consume
2: decodeNonspaceChar
Flows from source is finished.
Start traversal for source: <java.io.FileInputStream: int read(byte[])>...
Starting from source: 
0: read
1: consume
2: decodeNonspaceChar
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[],int,int)>...
Starting from source: 
0: read
1: consume
2: decodeNonspaceChar
Flows from source is finished.
Start traversal for source: <java.io.InputStreamReader: int read()>...
Starting from source: 
0: read
1: consume
2: decodeNonspaceChar
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int decodeNonspaceChar(int)>...
Starting from source: 
0: decodeNonspaceChar
1: read
2: consume
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: consume
2: decodeNonspaceChar
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: consume
2: decodeNonspaceChar
Flows from source is finished.
Start traversal for source: <java.io.PushbackInputStream: int read()>...
Starting from source: 
0: read
1: consume
2: decodeNonspaceChar
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine
Source here: <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: void addServant(java.net.URL,org.apache.cxf.transport.http_jetty.JettyHTTPHandler)>
Source here: <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: void removeServant(java.net.URL)>
Source here: <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: org.eclipse.jetty.server.Handler getServant(java.net.URL)>
Source here: <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: org.eclipse.jetty.server.handler.ContextHandler getContextHandler(java.net.URL)>
Now we build call graphs for class: org.apache.ws.commons.schema.resolver.DefaultURIResolver
Source here: <org.apache.ws.commons.schema.resolver.DefaultURIResolver: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String)>
Source here: <org.apache.ws.commons.schema.resolver.DefaultURIResolver: java.net.URL getURL(java.net.URL,java.lang.String)>
Source here: <org.apache.ws.commons.schema.resolver.DefaultURIResolver: java.net.URL getFileURL(java.net.URL,java.lang.String)>
Start traversal for source: <org.apache.ws.commons.schema.resolver.DefaultURIResolver: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String)>...
Starting from source: 
0: resolveEntity
1: resolveXmlSchema
Flows from source is finished.
Start traversal for source: <java.io.File: java.net.URI toURI()>...
Starting from source: 
0: toURI
1: resolveEntity
2: resolveXmlSchema
Flows from source is finished.
Now we build call graphs for class: org.eclipse.jetty.util.resource.JarResource
Global flow here: <org.eclipse.jetty.util.resource.JarResource: void release()> calls: <org.eclipse.jetty.util.resource.URLResource: void release()> via: SPECIAL edge: specialinvoke r0.<org.eclipse.jetty.util.resource.URLResource: void release()>() in <org.eclipse.jetty.util.resource.JarResource: void release()> ==> <org.eclipse.jetty.util.resource.URLResource: void release()>
Global flow here: <org.eclipse.jetty.util.resource.JarResource: boolean exists()> calls: <org.eclipse.jetty.util.resource.URLResource: boolean exists()> via: SPECIAL edge: $z1 = specialinvoke r0.<org.eclipse.jetty.util.resource.URLResource: boolean exists()>() in <org.eclipse.jetty.util.resource.JarResource: boolean exists()> ==> <org.eclipse.jetty.util.resource.URLResource: boolean exists()>
Global flow here: <org.eclipse.jetty.util.resource.JarResource: boolean exists()> calls: <org.eclipse.jetty.util.resource.URLResource: boolean checkConnection()> via: VIRTUAL edge: $z2 = virtualinvoke r0.<org.eclipse.jetty.util.resource.JarResource: boolean checkConnection()>() in <org.eclipse.jetty.util.resource.JarResource: boolean exists()> ==> <org.eclipse.jetty.util.resource.URLResource: boolean checkConnection()>
Source here: <org.eclipse.jetty.util.resource.JarResource: java.io.InputStream getInputStream()>
Source here: <org.eclipse.jetty.util.resource.JarResource: void copyTo(java.io.File)>
Now we build call graphs for class: org.apache.cxf.common.util.StreamPrinter
Source here: <org.apache.cxf.common.util.StreamPrinter: void run()>
Now we build call graphs for class: com.sun.xml.bind.v2.bytecode.ClassTailor
Source here: <com.sun.xml.bind.v2.bytecode.ClassTailor: byte[] tailor(java.io.InputStream,java.lang.String,java.lang.String,java.lang.String[])>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: toVMTypeName
2: toVMClassName
3: get
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read(char[],int,int)>...
Starting from source: 
0: read
1: tailor
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: int read()>...
Starting from source: 
0: read
1: tailor
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read()>...
Starting from source: 
0: read
1: tailor
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: tailor
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: short readShort()>...
Starting from source: 
0: readShort
1: tailor
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int read()>...
Starting from source: 
0: read
1: tailor
Flows from source is finished.
Start traversal for source: <java.io.FileInputStream: int read(byte[])>...
Starting from source: 
0: read
1: tailor
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[],int,int)>...
Starting from source: 
0: read
1: tailor
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: byte readByte()>...
Starting from source: 
0: readByte
1: tailor
Flows from source is finished.
Start traversal for source: <java.io.InputStreamReader: int read()>...
Starting from source: 
0: read
1: tailor
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: int read(byte[])>...
Starting from source: 
0: read
1: tailor
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: java.lang.String readUTF()>...
Starting from source: 
0: readUTF
1: tailor
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: tailor
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: tailor
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: long readLong()>...
Starting from source: 
0: readLong
1: tailor
Flows from source is finished.
Start traversal for source: <com.sun.xml.bind.v2.bytecode.ClassTailor: byte[] tailor(java.io.InputStream,java.lang.String,java.lang.String,java.lang.String[])>...
Starting from source: 
0: tailor
Flows from source is finished.
Start traversal for source: <java.io.PushbackInputStream: int read()>...
Starting from source: 
0: read
1: tailor
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream
Source here: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void onFirstWrite()>
Source here: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void handleHeadersTrustCaching()>
Source here: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>
Source here: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void handleRetransmits()>
Source here: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void handleResponseInternal()>
Now we build call graphs for class: org.apache.cxf.attachment.AttachmentUtil
Global flow here: <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> calls: <org.apache.cxf.message.MessageImpl: java.lang.Object getContextualProperty(java.lang.String)> via: INTERFACE edge: $r13 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>("attachment-max-size") in <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> ==> <org.apache.cxf.message.MessageImpl: java.lang.Object getContextualProperty(java.lang.String)>
Global flow here: <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> calls: <org.apache.cxf.message.MessageImpl: java.lang.Object getContextualProperty(java.lang.String)> via: INTERFACE edge: $r12 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>("attachment-memory-threshold") in <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> ==> <org.apache.cxf.message.MessageImpl: java.lang.Object getContextualProperty(java.lang.String)>
Global flow here: <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> calls: <org.apache.cxf.message.MessageImpl: java.lang.Object getContextualProperty(java.lang.String)> via: INTERFACE edge: $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>("attachment-directory") in <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> ==> <org.apache.cxf.message.MessageImpl: java.lang.Object getContextualProperty(java.lang.String)>
Global flow here: <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> calls: <org.apache.cxf.io.CachedOutputStream: void setMaxSize(long)> via: VIRTUAL edge: virtualinvoke r2.<org.apache.cxf.io.CachedOutputStream: void setMaxSize(long)>($l0) in <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> ==> <org.apache.cxf.io.CachedOutputStream: void setMaxSize(long)>
Global flow here: <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> calls: <org.apache.cxf.io.CachedOutputStream: void setMaxSize(long)> via: VIRTUAL edge: virtualinvoke r2.<org.apache.cxf.io.CachedOutputStream: void setMaxSize(long)>($l1) in <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> ==> <org.apache.cxf.io.CachedOutputStream: void setMaxSize(long)>
Global flow here: <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> calls: <org.apache.cxf.io.CachedOutputStream: void setThreshold(long)> via: VIRTUAL edge: virtualinvoke r2.<org.apache.cxf.io.CachedOutputStream: void setThreshold(long)>(102400L) in <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> ==> <org.apache.cxf.io.CachedOutputStream: void setThreshold(long)>
Global flow here: <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> calls: <org.apache.cxf.io.CachedOutputStream: void setThreshold(long)> via: VIRTUAL edge: virtualinvoke r2.<org.apache.cxf.io.CachedOutputStream: void setThreshold(long)>($l2) in <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> ==> <org.apache.cxf.io.CachedOutputStream: void setThreshold(long)>
Global flow here: <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> calls: <org.apache.cxf.io.CachedOutputStream: void setThreshold(long)> via: VIRTUAL edge: virtualinvoke r2.<org.apache.cxf.io.CachedOutputStream: void setThreshold(long)>($l3) in <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> ==> <org.apache.cxf.io.CachedOutputStream: void setThreshold(long)>
Global flow here: <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> calls: <org.apache.cxf.io.CachedOutputStream: void setOutputDir(java.io.File)> via: VIRTUAL edge: virtualinvoke r2.<org.apache.cxf.io.CachedOutputStream: void setOutputDir(java.io.File)>($r9) in <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> ==> <org.apache.cxf.io.CachedOutputStream: void setOutputDir(java.io.File)>
Global flow here: <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> calls: <org.apache.cxf.io.CachedOutputStream: void setOutputDir(java.io.File)> via: VIRTUAL edge: virtualinvoke r2.<org.apache.cxf.io.CachedOutputStream: void setOutputDir(java.io.File)>($r11) in <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> ==> <org.apache.cxf.io.CachedOutputStream: void setOutputDir(java.io.File)>
Source here: <org.apache.cxf.attachment.AttachmentUtil: java.lang.String createContentID(java.lang.String)>
Global flow here: <org.apache.cxf.attachment.AttachmentUtil: org.apache.cxf.message.Attachment createAttachment(java.io.InputStream,javax.mail.internet.InternetHeaders)> calls: <org.apache.cxf.attachment.AttachmentImpl: void setDataHandler(javax.activation.DataHandler)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.cxf.attachment.AttachmentImpl: void setDataHandler(javax.activation.DataHandler)>($r7) in <org.apache.cxf.attachment.AttachmentUtil: org.apache.cxf.message.Attachment createAttachment(java.io.InputStream,javax.mail.internet.InternetHeaders)> ==> <org.apache.cxf.attachment.AttachmentImpl: void setDataHandler(javax.activation.DataHandler)>
Global flow here: <org.apache.cxf.attachment.AttachmentUtil: org.apache.cxf.message.Attachment createAttachment(java.io.InputStream,javax.mail.internet.InternetHeaders)> calls: <org.apache.cxf.attachment.AttachmentImpl: void setDataHandler(javax.activation.DataHandler)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.cxf.attachment.AttachmentImpl: void setDataHandler(javax.activation.DataHandler)>($r10) in <org.apache.cxf.attachment.AttachmentUtil: org.apache.cxf.message.Attachment createAttachment(java.io.InputStream,javax.mail.internet.InternetHeaders)> ==> <org.apache.cxf.attachment.AttachmentImpl: void setDataHandler(javax.activation.DataHandler)>
Global flow here: <org.apache.cxf.attachment.AttachmentUtil: org.apache.cxf.message.Attachment createAttachment(java.io.InputStream,javax.mail.internet.InternetHeaders)> calls: <org.apache.cxf.attachment.AttachmentImpl: void setHeader(java.lang.String,java.lang.String)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.cxf.attachment.AttachmentImpl: void setHeader(java.lang.String,java.lang.String)>($r17, $r18) in <org.apache.cxf.attachment.AttachmentUtil: org.apache.cxf.message.Attachment createAttachment(java.io.InputStream,javax.mail.internet.InternetHeaders)> ==> <org.apache.cxf.attachment.AttachmentImpl: void setHeader(java.lang.String,java.lang.String)>
Global flow here: <org.apache.cxf.attachment.AttachmentUtil: org.apache.cxf.message.Attachment createAttachment(java.io.InputStream,javax.mail.internet.InternetHeaders)> calls: <org.apache.cxf.attachment.AttachmentImpl: void setXOP(boolean)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.cxf.attachment.AttachmentImpl: void setXOP(boolean)>(1) in <org.apache.cxf.attachment.AttachmentUtil: org.apache.cxf.message.Attachment createAttachment(java.io.InputStream,javax.mail.internet.InternetHeaders)> ==> <org.apache.cxf.attachment.AttachmentImpl: void setXOP(boolean)>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: createAttachment
2: createAttachments
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.Compiler: void setOutputDir(java.io.File)>...
Starting from source: 
0: setOutputDir
1: setStreamedAttachmentProperties
2: cache
Flows from source is finished.
Now we build call graphs for class: com.sun.xml.bind.v2.util.ByteArrayOutputStreamEx
Source here: <com.sun.xml.bind.v2.util.ByteArrayOutputStreamEx: void readFrom(java.io.InputStream)>
Now we build call graphs for class: org.apache.cxf.jaxrs.client.ClientProxyImpl
Source here: <org.apache.cxf.jaxrs.client.ClientProxyImpl: java.lang.Object handleResponse(org.apache.cxf.message.Message)>
Now we build call graphs for class: org.apache.cxf.jaxrs.ext.codegen.SourceGenerator
Source here: <org.apache.cxf.jaxrs.ext.codegen.SourceGenerator: void createJavaSourceFile(java.io.File,javax.xml.namespace.QName,java.lang.StringBuilder,java.lang.StringBuilder,boolean)>
Source here: <org.apache.cxf.jaxrs.ext.codegen.SourceGenerator: org.w3c.dom.Element readIncludedDocument(java.lang.String)>
Now we build call graphs for class: org.apache.cxf.helpers.FileUtils
Source here: <org.apache.cxf.helpers.FileUtils: java.io.File getDefaultTempDir()>
Global flow here: <org.apache.cxf.helpers.FileUtils: java.io.File getDefaultTempDir()> calls: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)> via: STATIC edge: $r7 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>($r6) in <org.apache.cxf.helpers.FileUtils: java.io.File getDefaultTempDir()> ==> <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>
Global flow here: <org.apache.cxf.helpers.FileUtils: java.io.File getDefaultTempDir()> calls: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)> via: STATIC edge: $r9 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir") in <org.apache.cxf.helpers.FileUtils: java.io.File getDefaultTempDir()> ==> <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>
Source here: <org.apache.cxf.helpers.FileUtils: void mkDir(java.io.File)>
Source here: <org.apache.cxf.helpers.FileUtils: void removeDir(java.io.File,boolean)>
Global flow here: <org.apache.cxf.helpers.FileUtils: boolean isWindows()> calls: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)> via: STATIC edge: $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>("os.name") in <org.apache.cxf.helpers.FileUtils: boolean isWindows()> ==> <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>
Source here: <org.apache.cxf.helpers.FileUtils: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File,boolean)>
Source here: <org.apache.cxf.helpers.FileUtils: java.lang.String normalizeCRLF(java.io.InputStream)>
Source here: <org.apache.cxf.helpers.FileUtils: java.util.List getFilesRecurse(java.io.File,java.util.regex.Pattern,java.io.File,boolean,java.util.List)>
Source here: <org.apache.cxf.helpers.FileUtils: java.util.List readLines(java.io.File)>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: getDefaultTempDir
2: createTempFile
3: createFileOutputStream
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: isWindows
2: delete
3: deleteTempFile
4: removeDir
5: access$000
6: run
7: getDefaultTempDir
8: createTempFile
9: createFileOutputStream
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.FileUtils: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File,boolean)>...
Starting from source: 
0: createTempFile
1: createFileOutputStream
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: isWindows
2: delete
3: deleteTempFile
4: removeDir
5: access$000
6: run
7: getDefaultTempDir
8: createTempFile
9: createFileOutputStream
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getAbsolutePath()>...
Starting from source: 
0: getAbsolutePath
1: getDefaultTempDir
2: createTempFile
3: createFileOutputStream
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.FileUtils: void removeDir(java.io.File,boolean)>...
Starting from source: 
0: removeDir
1: access$000
2: run
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.FileUtils: java.io.File getDefaultTempDir()>...
Starting from source: 
0: getDefaultTempDir
1: createTempFile
2: createFileOutputStream
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>...
Starting from source: 
0: createTempFile
1: createFileOutputStream
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String[] list()>...
Starting from source: 
0: list
1: removeDir
2: access$000
3: run
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.StreamPrinter: void run()>...
Starting from source: 
0: run
Flows from source is finished.
Now we build call graphs for class: org.apache.log4j.net.SocketServer
Source here: <org.apache.log4j.net.SocketServer: org.apache.log4j.spi.LoggerRepository configureHierarchy(java.net.InetAddress)>
Source here: <org.apache.log4j.net.SocketServer: org.apache.log4j.spi.LoggerRepository genericHierarchy()>
Now we build call graphs for class: org.eclipse.jetty.util.resource.URLResource
Global flow here: <org.eclipse.jetty.util.resource.URLResource: boolean checkConnection()> calls: <org.eclipse.jetty.util.log.StdErrLog: void ignore(java.lang.Throwable)> via: INTERFACE edge: interfaceinvoke $r6.<org.eclipse.jetty.util.log.Logger: void ignore(java.lang.Throwable)>($r5) in <org.eclipse.jetty.util.resource.URLResource: boolean checkConnection()> ==> <org.eclipse.jetty.util.log.StdErrLog: void ignore(java.lang.Throwable)>
Global flow here: <org.eclipse.jetty.util.resource.URLResource: void release()> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <org.eclipse.jetty.util.resource.URLResource: void release()> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.eclipse.jetty.util.resource.URLResource: void release()> calls: <org.eclipse.jetty.util.log.StdErrLog: void ignore(java.lang.Throwable)> via: INTERFACE edge: interfaceinvoke $r4.<org.eclipse.jetty.util.log.Logger: void ignore(java.lang.Throwable)>($r3) in <org.eclipse.jetty.util.resource.URLResource: void release()> ==> <org.eclipse.jetty.util.log.StdErrLog: void ignore(java.lang.Throwable)>
Source here: <org.eclipse.jetty.util.resource.URLResource: boolean exists()>
Global flow here: <org.eclipse.jetty.util.resource.URLResource: boolean exists()> calls: <sun.net.www.protocol.file.FileURLConnection: java.io.InputStream getInputStream()> via: VIRTUAL edge: $r4 = virtualinvoke $r3.<java.net.URLConnection: java.io.InputStream getInputStream()>() in <org.eclipse.jetty.util.resource.URLResource: boolean exists()> ==> <sun.net.www.protocol.file.FileURLConnection: java.io.InputStream getInputStream()>
Global flow here: <org.eclipse.jetty.util.resource.URLResource: boolean exists()> calls: <org.eclipse.jetty.util.log.StdErrLog: void ignore(java.lang.Throwable)> via: INTERFACE edge: interfaceinvoke $r6.<org.eclipse.jetty.util.log.Logger: void ignore(java.lang.Throwable)>($r5) in <org.eclipse.jetty.util.resource.URLResource: boolean exists()> ==> <org.eclipse.jetty.util.log.StdErrLog: void ignore(java.lang.Throwable)>
Global flow here: <org.eclipse.jetty.util.resource.URLResource: boolean isDirectory()> calls: <org.eclipse.jetty.util.resource.JarResource: boolean exists()> via: VIRTUAL edge: $z0 = virtualinvoke r0.<org.eclipse.jetty.util.resource.URLResource: boolean exists()>() in <org.eclipse.jetty.util.resource.URLResource: boolean isDirectory()> ==> <org.eclipse.jetty.util.resource.JarResource: boolean exists()>
Global flow here: <org.eclipse.jetty.util.resource.URLResource: boolean isDirectory()> calls: <org.eclipse.jetty.util.resource.JarFileResource: boolean exists()> via: VIRTUAL edge: $z0 = virtualinvoke r0.<org.eclipse.jetty.util.resource.URLResource: boolean exists()>() in <org.eclipse.jetty.util.resource.URLResource: boolean isDirectory()> ==> <org.eclipse.jetty.util.resource.JarFileResource: boolean exists()>
Global flow here: <org.eclipse.jetty.util.resource.URLResource: boolean isDirectory()> calls: <org.eclipse.jetty.util.resource.BadResource: boolean exists()> via: VIRTUAL edge: $z0 = virtualinvoke r0.<org.eclipse.jetty.util.resource.URLResource: boolean exists()>() in <org.eclipse.jetty.util.resource.URLResource: boolean isDirectory()> ==> <org.eclipse.jetty.util.resource.BadResource: boolean exists()>
Global flow here: <org.eclipse.jetty.util.resource.URLResource: boolean isDirectory()> calls: <org.eclipse.jetty.util.resource.FileResource: boolean exists()> via: VIRTUAL edge: $z0 = virtualinvoke r0.<org.eclipse.jetty.util.resource.URLResource: boolean exists()>() in <org.eclipse.jetty.util.resource.URLResource: boolean isDirectory()> ==> <org.eclipse.jetty.util.resource.FileResource: boolean exists()>
Source here: <org.eclipse.jetty.util.resource.URLResource: java.io.File getFile()>
Global flow here: <org.eclipse.jetty.util.resource.URLResource: java.io.File getFile()> calls: <sun.net.www.protocol.file.FileURLConnection: java.security.Permission getPermission()> via: VIRTUAL edge: $r5 = virtualinvoke $r4.<java.net.URLConnection: java.security.Permission getPermission()>() in <org.eclipse.jetty.util.resource.URLResource: java.io.File getFile()> ==> <sun.net.www.protocol.file.FileURLConnection: java.security.Permission getPermission()>
Global flow here: <org.eclipse.jetty.util.resource.URLResource: java.io.File getFile()> calls: <sun.net.www.protocol.file.UNCFileURLConnection: java.security.Permission getPermission()> via: VIRTUAL edge: $r5 = virtualinvoke $r4.<java.net.URLConnection: java.security.Permission getPermission()>() in <org.eclipse.jetty.util.resource.URLResource: java.io.File getFile()> ==> <sun.net.www.protocol.file.UNCFileURLConnection: java.security.Permission getPermission()>
Global flow here: <org.eclipse.jetty.util.resource.URLResource: java.io.File getFile()> calls: <org.eclipse.jetty.util.log.StdErrLog: void ignore(java.lang.Throwable)> via: INTERFACE edge: interfaceinvoke $r9.<org.eclipse.jetty.util.log.Logger: void ignore(java.lang.Throwable)>($r8) in <org.eclipse.jetty.util.resource.URLResource: java.io.File getFile()> ==> <org.eclipse.jetty.util.log.StdErrLog: void ignore(java.lang.Throwable)>
Source here: <org.eclipse.jetty.util.resource.URLResource: java.io.InputStream getInputStream()>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: getFile
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()>...
Starting from source: 
0: getMRUFileList
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: exists
2: isDirectory
Flows from source is finished.
Start traversal for source: <java.net.URL: java.lang.String getFile()>...
Starting from source: 
0: getFile
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: exists
2: isDirectory
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: boolean exists()>...
Starting from source: 
0: exists
1: isDirectory
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: exists
2: isDirectory
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.JarResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: exists
2: isDirectory
Flows from source is finished.
Start traversal for source: <org.springframework.core.io.UrlResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: exists
2: isDirectory
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: java.io.File getFile()>...
Starting from source: 
0: getFile
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>...
Starting from source: 
0: close
1: release
2: finalize
Flows from source is finished.
Now we build call graphs for class: org.codehaus.stax2.io.Stax2FileSource
Source here: <org.codehaus.stax2.io.Stax2FileSource: java.net.URL getReference()>
Now we build call graphs for class: org.springframework.util.SystemPropertyUtils$SystemPropertyPlaceholderResolver
Source here: <org.springframework.util.SystemPropertyUtils$SystemPropertyPlaceholderResolver: java.lang.String resolvePlaceholder(java.lang.String)>
Now we build call graphs for class: org.apache.cxf.io.CachedOutputStream
Source here: <org.apache.cxf.io.CachedOutputStream: void writeCacheTo(java.lang.StringBuilder,java.lang.String,long)>
Source here: <org.apache.cxf.io.CachedOutputStream: void writeCacheTo(java.lang.StringBuilder,java.lang.String)>
Global flow here: <org.apache.cxf.io.CachedOutputStream: void createFileOutputStream()> calls: <org.apache.cxf.helpers.FileUtils: java.io.File createTempFile(java.lang.String,java.lang.String)> via: STATIC edge: $r12 = staticinvoke <org.apache.cxf.helpers.FileUtils: java.io.File createTempFile(java.lang.String,java.lang.String)>("cos", "tmp") in <org.apache.cxf.io.CachedOutputStream: void createFileOutputStream()> ==> <org.apache.cxf.helpers.FileUtils: java.io.File createTempFile(java.lang.String,java.lang.String)>
Global flow here: <org.apache.cxf.io.CachedOutputStream: void createFileOutputStream()> calls: <org.apache.cxf.helpers.FileUtils: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File,boolean)> via: STATIC edge: $r5 = staticinvoke <org.apache.cxf.helpers.FileUtils: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File,boolean)>("cos", "tmp", $r4, 0) in <org.apache.cxf.io.CachedOutputStream: void createFileOutputStream()> ==> <org.apache.cxf.helpers.FileUtils: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File,boolean)>
Global flow here: <org.apache.cxf.io.CachedOutputStream: java.io.InputStream getInputStream()> calls: <org.apache.cxf.helpers.LoadingByteArrayOutputStream: java.io.ByteArrayInputStream createInputStream()> via: VIRTUAL edge: $r16 = virtualinvoke $r15.<org.apache.cxf.helpers.LoadingByteArrayOutputStream: java.io.ByteArrayInputStream createInputStream()>() in <org.apache.cxf.io.CachedOutputStream: java.io.InputStream getInputStream()> ==> <org.apache.cxf.helpers.LoadingByteArrayOutputStream: java.io.ByteArrayInputStream createInputStream()>
Global flow here: <org.apache.cxf.io.CachedOutputStream: java.io.InputStream getInputStream()> calls: <org.apache.cxf.helpers.LoadingByteArrayOutputStream: byte[] toByteArray()> via: VIRTUAL edge: $r13 = virtualinvoke $r12.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() in <org.apache.cxf.io.CachedOutputStream: java.io.InputStream getInputStream()> ==> <org.apache.cxf.helpers.LoadingByteArrayOutputStream: byte[] toByteArray()>
Global flow here: <org.apache.cxf.io.CachedOutputStream: void deleteTempFile()> calls: <org.apache.cxf.helpers.FileUtils: void delete(java.io.File)> via: STATIC edge: staticinvoke <org.apache.cxf.helpers.FileUtils: void delete(java.io.File)>(r2) in <org.apache.cxf.io.CachedOutputStream: void deleteTempFile()> ==> <org.apache.cxf.helpers.FileUtils: void delete(java.io.File)>
Start traversal for source: <org.apache.cxf.helpers.FileUtils: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File,boolean)>...
Starting from source: 
0: createTempFile
1: createFileOutputStream
2: enforceLimits
3: write
4: copy
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cache
Flows from source is finished.
Start traversal for source: <javax.mail.internet.MimeMessage: void writeTo(java.io.OutputStream,java.lang.String[])>...
Starting from source: 
0: writeTo
1: createFileOutputStream
2: enforceLimits
3: write
4: copy
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cache
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.Compiler: void setOutputDir(java.io.File)>...
Starting from source: 
0: setOutputDir
1: setStreamedAttachmentProperties
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.util.StreamUtils: void copy(java.io.InputStream,java.io.OutputStream,int)>...
Starting from source: 
0: copy
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: cache
Flows from source is finished.
Start traversal for source: <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>...
Starting from source: 
0: createTempFile
1: createFileOutputStream
2: enforceLimits
3: write
4: copy
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.JarResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cache
Flows from source is finished.
Start traversal for source: <org.springframework.core.io.UrlResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cache
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>...
Starting from source: 
0: close
1: maybeDeleteTempFile
2: access$000
3: createFileOutputStream
4: enforceLimits
5: write
6: copy
7: cache
Flows from source is finished.
Now we build call graphs for class: com.ctc.wstx.io.MergedStream
Source here: <com.ctc.wstx.io.MergedStream: int available()>
Source here: <com.ctc.wstx.io.MergedStream: int read(byte[],int,int)>
Now we build call graphs for class: javax.mail.internet.MimeBodyPart
Source here: <javax.mail.internet.MimeBodyPart: int getSize()>
Source here: <javax.mail.internet.MimeBodyPart: void saveFile(java.io.File)>
Now we build call graphs for class: org.apache.cxf.transport.http.HTTPConduit
Source here: <org.apache.cxf.transport.http.HTTPConduit: void close(org.apache.cxf.message.Message)>
Source here: <org.apache.cxf.transport.http.HTTPConduit: java.net.HttpURLConnection redirectRetransmit(java.net.HttpURLConnection,org.apache.cxf.message.Message,org.apache.cxf.io.CacheAndWriteOutputStream)>
Source here: <org.apache.cxf.transport.http.HTTPConduit: java.net.HttpURLConnection authorizationRetransmit(java.net.HttpURLConnection,org.apache.cxf.message.Message,org.apache.cxf.io.CacheAndWriteOutputStream)>
Source here: <org.apache.cxf.transport.http.HTTPConduit: java.net.HttpURLConnection retransmit(java.net.URL,org.apache.cxf.message.Message,org.apache.cxf.io.CacheAndWriteOutputStream)>
Source here: <org.apache.cxf.transport.http.HTTPConduit: void handleHttpRetryException(java.net.HttpRetryException,java.net.HttpURLConnection)>
Now we build call graphs for class: org.apache.neethi.util.Service
Source here: <org.apache.neethi.util.Service: java.util.List providers(java.lang.Class)>
Global flow here: <org.apache.neethi.util.Service: java.util.List providers(java.lang.Class)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke r33.<java.io.InputStream: void close()>() in <org.apache.neethi.util.Service: java.util.List providers(java.lang.Class)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.apache.neethi.util.Service: java.util.List providers(java.lang.Class)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke r33.<java.io.InputStream: void close()>() in <org.apache.neethi.util.Service: java.util.List providers(java.lang.Class)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.apache.neethi.util.Service: java.util.List providers(java.lang.Class)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke r33.<java.io.InputStream: void close()>() in <org.apache.neethi.util.Service: java.util.List providers(java.lang.Class)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.apache.neethi.util.Service: java.util.List providers(java.lang.Class)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke $r14.<java.io.InputStream: void close()>() in <org.apache.neethi.util.Service: java.util.List providers(java.lang.Class)> ==> <sun.net.www.MeteredStream: void close()>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: providers
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit: void close(org.apache.cxf.message.Message)>...
Starting from source: 
0: close
1: providers
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: providers
Flows from source is finished.
Start traversal for source: <org.apache.neethi.util.Service: java.util.List providers(java.lang.Class)>...
Starting from source: 
0: providers
Flows from source is finished.
Start traversal for source: <java.net.URL: java.io.InputStream openStream()>...
Starting from source: 
0: openStream
1: providers
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>...
Starting from source: 
0: close
1: providers
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.TypeUtil: byte[] readLine(java.io.InputStream)>...
Starting from source: 
0: readLine
1: providers
Flows from source is finished.
Now we build call graphs for class: com.ctc.wstx.stax.WstxInputFactory
Source here: <com.ctc.wstx.stax.WstxInputFactory: org.codehaus.stax2.XMLStreamReader2 createSR(java.io.File,boolean,boolean)>
Now we build call graphs for class: org.apache.ws.commons.schema.XmlSchemaCollection$1
Source here: <org.apache.ws.commons.schema.XmlSchemaCollection$1: java.lang.String run()>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
3: getSystemProperty
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
3: getSystemProperty
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
2: getSystemProperty
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
2: getSystemProperty
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: executePrivileged
2: getSystemProperty
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
2: getSystemProperty
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.XmlSchemaCollection$1: java.lang.String run()>...
Starting from source: 
0: run
1: executePrivileged
2: getSystemProperty
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
1: executePrivileged
2: getSystemProperty
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.StreamPrinter: void run()>...
Starting from source: 
0: run
1: executePrivileged
2: getSystemProperty
Flows from source is finished.
Now we build call graphs for class: org.apache.log4j.lf5.util.LogFileParser
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: void run()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JFrame getBaseFrame()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JFrame getBaseFrame()>() in <org.apache.log4j.lf5.util.LogFileParser: void run()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JFrame getBaseFrame()>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: void run()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addMessage(org.apache.log4j.lf5.LogRecord)> via: VIRTUAL edge: virtualinvoke $r14.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addMessage(org.apache.log4j.lf5.LogRecord)>($r12) in <org.apache.log4j.lf5.util.LogFileParser: void run()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addMessage(org.apache.log4j.lf5.LogRecord)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: void run()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addMessage(org.apache.log4j.lf5.LogRecord)> via: VIRTUAL edge: virtualinvoke $r10.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addMessage(org.apache.log4j.lf5.LogRecord)>($r9) in <org.apache.log4j.lf5.util.LogFileParser: void run()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addMessage(org.apache.log4j.lf5.LogRecord)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: void displayError(java.lang.String)> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JFrame getBaseFrame()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JFrame getBaseFrame()>() in <org.apache.log4j.lf5.util.LogFileParser: void displayError(java.lang.String)> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JFrame getBaseFrame()>
Source here: <org.apache.log4j.lf5.util.LogFileParser: java.lang.String loadLogFile(java.io.InputStream)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogLevel parsePriority(java.lang.String)> calls: <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)> via: STATIC edge: $r4 = staticinvoke <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)>($r2) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogLevel parsePriority(java.lang.String)> ==> <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: void setThrownStackTrace(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setThrownStackTrace(java.lang.String)>($r10) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: void setThrownStackTrace(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: void setMessage(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setMessage(java.lang.String)>($r9) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: void setMessage(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: void setNDC(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setNDC(java.lang.String)>($r8) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: void setNDC(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: void setThreadDescription(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setThreadDescription(java.lang.String)>($r7) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: void setThreadDescription(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: void setLocation(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setLocation(java.lang.String)>($r6) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: void setLocation(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: void setCategory(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setCategory(java.lang.String)>($r5) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: void setCategory(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: void setLevel(org.apache.log4j.lf5.LogLevel)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setLevel(org.apache.log4j.lf5.LogLevel)>($r4) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: void setLevel(org.apache.log4j.lf5.LogLevel)>
Global flow here: <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: void setMillis(long)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setMillis(long)>($l1) in <org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: void setMillis(long)>
Start traversal for source: <com.ctc.wstx.io.MergedStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read(char[],int,int)>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: int read()>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read()>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <javax.mail.internet.MimeMessage: void parse(java.io.InputStream)>...
Starting from source: 
0: parse
1: parseDate
2: createLogRecord
3: run
4: loadLogFile
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
1: parse
2: parseDate
3: createLogRecord
4: loadLogFile
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit: void close(org.apache.cxf.message.Message)>...
Starting from source: 
0: close
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: parse
2: parseDate
3: createLogRecord
4: loadLogFile
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int read()>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: parse
2: parseDate
3: createLogRecord
4: loadLogFile
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.FileInputStream: int read(byte[])>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[],int,int)>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.InputStreamReader: int read()>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: int read(byte[])>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedStream: int available()>...
Starting from source: 
0: available
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int available()>...
Starting from source: 
0: available
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: parse
2: parseDate
3: createLogRecord
4: loadLogFile
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.Base64DecoderStream: int available()>...
Starting from source: 
0: available
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int available()>...
Starting from source: 
0: available
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.XmlSchemaCollection$1: java.lang.String run()>...
Starting from source: 
0: run
1: parse
2: parseDate
3: createLogRecord
4: loadLogFile
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int available()>...
Starting from source: 
0: available
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
1: parse
2: parseDate
3: createLogRecord
4: loadLogFile
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.StreamPrinter: void run()>...
Starting from source: 
0: run
1: parse
2: parseDate
3: createLogRecord
4: loadLogFile
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.util.LogFileParser: java.lang.String loadLogFile(java.io.InputStream)>...
Starting from source: 
0: loadLogFile
1: run
2: parse
3: parseDate
4: createLogRecord
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>...
Starting from source: 
0: close
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Start traversal for source: <java.io.PushbackInputStream: int read()>...
Starting from source: 
0: read
1: loadLogFile
2: run
3: parse
4: parseDate
5: createLogRecord
6: requestOpenMRU
Flows from source is finished.
Now we build call graphs for class: org.apache.log4j.chainsaw.Main
Source here: <org.apache.log4j.chainsaw.Main: void setupReceiver(org.apache.log4j.chainsaw.MyTableModel)>
Now we build call graphs for class: org.eclipse.jetty.server.session.JDBCSessionIdManager
Source here: <org.eclipse.jetty.server.session.JDBCSessionIdManager: void prepareTables()>
Now we build call graphs for class: javax.mail.search.SentDateTerm
Source here: <javax.mail.search.SentDateTerm: boolean match(javax.mail.Message)>
Now we build call graphs for class: org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor
Source here: <org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor: void writeRequestBody(org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration,java.net.HttpURLConnection,java.io.ByteArrayOutputStream)>
Source here: <org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor: java.io.InputStream readResponseBody(org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration,java.net.HttpURLConnection)>
Now we build call graphs for class: org.apache.cxf.common.classloader.ClassLoaderUtils
Global flow here: <org.apache.cxf.common.classloader.ClassLoaderUtils: org.apache.cxf.common.classloader.ClassLoaderUtils$ClassLoaderHolder setThreadContextClassloader(java.lang.ClassLoader)> calls: <org.apache.cxf.common.classloader.ClassLoaderUtils$1: org.apache.cxf.common.classloader.ClassLoaderUtils$ClassLoaderHolder run()> via: GENERIC_FAKE edge: $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.cxf.common.classloader.ClassLoaderUtils: org.apache.cxf.common.classloader.ClassLoaderUtils$ClassLoaderHolder setThreadContextClassloader(java.lang.ClassLoader)> ==> <org.apache.cxf.common.classloader.ClassLoaderUtils$1: org.apache.cxf.common.classloader.ClassLoaderUtils$ClassLoaderHolder run()>
Global flow here: <org.apache.cxf.common.classloader.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> calls: <jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)> via: VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r2) in <org.apache.cxf.common.classloader.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)>
Global flow here: <org.apache.cxf.common.classloader.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> calls: <jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)> via: VIRTUAL edge: r15 = virtualinvoke $r13.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($r14) in <org.apache.cxf.common.classloader.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> ==> <jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)>
Source here: <org.apache.cxf.common.classloader.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>
Start traversal for source: <org.apache.cxf.common.classloader.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>...
Starting from source: 
0: getResourceAsStream
1: getKeyStore
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: setThreadContextClassloader
2: reset
3: create
4: doHacks
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.handler.ContextHandler$Context: java.io.InputStream getResourceAsStream(java.lang.String)>...
Starting from source: 
0: getResourceAsStream
1: getKeyStore
Flows from source is finished.
Start traversal for source: <org.apache.cxf.BusFactory: java.lang.String getBusFactoryClass(java.lang.ClassLoader)>...
Starting from source: 
0: getBusFactoryClass
Flows from source is finished.
Start traversal for source: <java.net.URL: java.io.InputStream openStream()>...
Starting from source: 
0: openStream
1: getResourceAsStream
2: getKeyStore
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
1: setThreadContextClassloader
2: reset
3: create
4: doHacks
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
1: setThreadContextClassloader
2: reset
3: create
4: doHacks
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: setThreadContextClassloader
2: reset
3: create
4: doHacks
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: setThreadContextClassloader
2: reset
3: create
4: doHacks
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.XmlSchemaCollection$1: java.lang.String run()>...
Starting from source: 
0: run
1: setThreadContextClassloader
2: reset
3: create
4: doHacks
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.StreamPrinter: void run()>...
Starting from source: 
0: run
1: setThreadContextClassloader
2: reset
3: create
4: doHacks
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.transport.http.ProxyFactory
Global flow here: <org.apache.cxf.transport.http.ProxyFactory: org.apache.cxf.transports.http.configuration.HTTPClientPolicy createSystemProxyConfiguration()> calls: <org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setNonProxyHosts(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setNonProxyHosts(java.lang.String)>($r5) in <org.apache.cxf.transport.http.ProxyFactory: org.apache.cxf.transports.http.configuration.HTTPClientPolicy createSystemProxyConfiguration()> ==> <org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setNonProxyHosts(java.lang.String)>
Global flow here: <org.apache.cxf.transport.http.ProxyFactory: org.apache.cxf.transports.http.configuration.HTTPClientPolicy createSystemProxyConfiguration()> calls: <org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setProxyServerPort(int)> via: VIRTUAL edge: virtualinvoke $r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setProxyServerPort(int)>($i0) in <org.apache.cxf.transport.http.ProxyFactory: org.apache.cxf.transports.http.configuration.HTTPClientPolicy createSystemProxyConfiguration()> ==> <org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setProxyServerPort(int)>
Global flow here: <org.apache.cxf.transport.http.ProxyFactory: org.apache.cxf.transports.http.configuration.HTTPClientPolicy createSystemProxyConfiguration()> calls: <org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setProxyServerType(org.apache.cxf.transports.http.configuration.ProxyServerType)> via: VIRTUAL edge: virtualinvoke $r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setProxyServerType(org.apache.cxf.transports.http.configuration.ProxyServerType)>($r2) in <org.apache.cxf.transport.http.ProxyFactory: org.apache.cxf.transports.http.configuration.HTTPClientPolicy createSystemProxyConfiguration()> ==> <org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setProxyServerType(org.apache.cxf.transports.http.configuration.ProxyServerType)>
Global flow here: <org.apache.cxf.transport.http.ProxyFactory: org.apache.cxf.transports.http.configuration.HTTPClientPolicy createSystemProxyConfiguration()> calls: <org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setProxyServer(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r1.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setProxyServer(java.lang.String)>($r0) in <org.apache.cxf.transport.http.ProxyFactory: org.apache.cxf.transports.http.configuration.HTTPClientPolicy createSystemProxyConfiguration()> ==> <org.apache.cxf.transports.http.configuration.HTTPClientPolicy: void setProxyServer(java.lang.String)>
Global flow here: <org.apache.cxf.transport.http.ProxyFactory: org.apache.cxf.transports.http.configuration.HTTPClientPolicy createSystemProxyConfiguration()> calls: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)> via: STATIC edge: $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>("http.proxyHost") in <org.apache.cxf.transport.http.ProxyFactory: org.apache.cxf.transports.http.configuration.HTTPClientPolicy createSystemProxyConfiguration()> ==> <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>
Global flow here: <org.apache.cxf.transport.http.ProxyFactory: org.apache.cxf.transports.http.configuration.HTTPClientPolicy createSystemProxyConfiguration()> calls: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String,java.lang.String)> via: STATIC edge: $r3 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String,java.lang.String)>("http.proxyPort", "8080") in <org.apache.cxf.transport.http.ProxyFactory: org.apache.cxf.transports.http.configuration.HTTPClientPolicy createSystemProxyConfiguration()> ==> <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String,java.lang.String)>
Global flow here: <org.apache.cxf.transport.http.ProxyFactory: org.apache.cxf.transports.http.configuration.HTTPClientPolicy createSystemProxyConfiguration()> calls: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)> via: STATIC edge: $r5 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>("http.nonProxyHosts") in <org.apache.cxf.transport.http.ProxyFactory: org.apache.cxf.transports.http.configuration.HTTPClientPolicy createSystemProxyConfiguration()> ==> <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>
Global flow here: <org.apache.cxf.transport.http.ProxyFactory: org.apache.cxf.transports.http.configuration.HTTPClientPolicy createSystemProxyConfiguration()> calls: <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)> via: STATIC edge: $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r5) in <org.apache.cxf.transport.http.ProxyFactory: org.apache.cxf.transports.http.configuration.HTTPClientPolicy createSystemProxyConfiguration()> ==> <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>
Source here: <org.apache.cxf.transport.http.ProxyFactory: java.net.Proxy createProxy(org.apache.cxf.transports.http.configuration.HTTPClientPolicy,java.net.URL)>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: createSystemProxyConfiguration
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: createSystemProxyConfiguration
Flows from source is finished.
Now we build call graphs for class: org.eclipse.jetty.io.ByteArrayBuffer
Global flow here: <org.eclipse.jetty.io.ByteArrayBuffer: boolean equalsIgnoreCase(org.eclipse.jetty.io.Buffer)> calls: <org.eclipse.jetty.io.AbstractBuffer: int length()> via: INTERFACE edge: $i0 = interfaceinvoke r0.<org.eclipse.jetty.io.Buffer: int length()>() in <org.eclipse.jetty.io.ByteArrayBuffer: boolean equalsIgnoreCase(org.eclipse.jetty.io.Buffer)> ==> <org.eclipse.jetty.io.AbstractBuffer: int length()>
Global flow here: <org.eclipse.jetty.io.ByteArrayBuffer: boolean equalsIgnoreCase(org.eclipse.jetty.io.Buffer)> calls: <org.eclipse.jetty.io.AbstractBuffer: int putIndex()> via: VIRTUAL edge: i22 = virtualinvoke r1.<org.eclipse.jetty.io.ByteArrayBuffer: int putIndex()>() in <org.eclipse.jetty.io.ByteArrayBuffer: boolean equalsIgnoreCase(org.eclipse.jetty.io.Buffer)> ==> <org.eclipse.jetty.io.AbstractBuffer: int putIndex()>
Global flow here: <org.eclipse.jetty.io.ByteArrayBuffer: boolean equalsIgnoreCase(org.eclipse.jetty.io.Buffer)> calls: <org.eclipse.jetty.io.AbstractBuffer: int putIndex()> via: VIRTUAL edge: i19 = virtualinvoke r1.<org.eclipse.jetty.io.ByteArrayBuffer: int putIndex()>() in <org.eclipse.jetty.io.ByteArrayBuffer: boolean equalsIgnoreCase(org.eclipse.jetty.io.Buffer)> ==> <org.eclipse.jetty.io.AbstractBuffer: int putIndex()>
Global flow here: <org.eclipse.jetty.io.ByteArrayBuffer: boolean equalsIgnoreCase(org.eclipse.jetty.io.Buffer)> calls: <org.eclipse.jetty.io.AbstractBuffer: int getIndex()> via: VIRTUAL edge: $i17 = virtualinvoke r1.<org.eclipse.jetty.io.ByteArrayBuffer: int getIndex()>() in <org.eclipse.jetty.io.ByteArrayBuffer: boolean equalsIgnoreCase(org.eclipse.jetty.io.Buffer)> ==> <org.eclipse.jetty.io.AbstractBuffer: int getIndex()>
Global flow here: <org.eclipse.jetty.io.ByteArrayBuffer: boolean equalsIgnoreCase(org.eclipse.jetty.io.Buffer)> calls: <org.eclipse.jetty.io.AbstractBuffer: int length()> via: VIRTUAL edge: $i1 = virtualinvoke r1.<org.eclipse.jetty.io.ByteArrayBuffer: int length()>() in <org.eclipse.jetty.io.ByteArrayBuffer: boolean equalsIgnoreCase(org.eclipse.jetty.io.Buffer)> ==> <org.eclipse.jetty.io.AbstractBuffer: int length()>
Global flow here: <org.eclipse.jetty.io.ByteArrayBuffer: boolean equalsIgnoreCase(org.eclipse.jetty.io.Buffer)> calls: <org.eclipse.jetty.io.AbstractBuffer: int putIndex()> via: INTERFACE edge: i18 = interfaceinvoke r0.<org.eclipse.jetty.io.Buffer: int putIndex()>() in <org.eclipse.jetty.io.ByteArrayBuffer: boolean equalsIgnoreCase(org.eclipse.jetty.io.Buffer)> ==> <org.eclipse.jetty.io.AbstractBuffer: int putIndex()>
Global flow here: <org.eclipse.jetty.io.ByteArrayBuffer: int hashCode()> calls: <org.eclipse.jetty.io.AbstractBuffer: int getIndex()> via: VIRTUAL edge: $i10 = virtualinvoke r0.<org.eclipse.jetty.io.ByteArrayBuffer: int getIndex()>() in <org.eclipse.jetty.io.ByteArrayBuffer: int hashCode()> ==> <org.eclipse.jetty.io.AbstractBuffer: int getIndex()>
Global flow here: <org.eclipse.jetty.io.ByteArrayBuffer: int hashCode()> calls: <org.eclipse.jetty.io.AbstractBuffer: int putIndex()> via: VIRTUAL edge: i11 = virtualinvoke r0.<org.eclipse.jetty.io.ByteArrayBuffer: int putIndex()>() in <org.eclipse.jetty.io.ByteArrayBuffer: int hashCode()> ==> <org.eclipse.jetty.io.AbstractBuffer: int putIndex()>
Source here: <org.eclipse.jetty.io.ByteArrayBuffer: int readFrom(java.io.InputStream,int)>
Now we build call graphs for class: org.apache.log4j.DefaultThrowableRenderer
Source here: <org.apache.log4j.DefaultThrowableRenderer: java.lang.String[] render(java.lang.Throwable)>
Now we build call graphs for class: org.eclipse.jetty.server.handler.ContextHandler$CLDump
Source here: <org.eclipse.jetty.server.handler.ContextHandler$CLDump: void dump(java.lang.Appendable,java.lang.String)>
Now we build call graphs for class: javax.mail.internet.MimeMultipart$MimeBodyPartInputStream
Source here: <javax.mail.internet.MimeMultipart$MimeBodyPartInputStream: int read()>
Now we build call graphs for class: org.springframework.core.io.FileSystemResource
Source here: <org.springframework.core.io.FileSystemResource: java.net.URL getURL()>
Source here: <org.springframework.core.io.FileSystemResource: java.net.URI getURI()>
Source here: <org.springframework.core.io.FileSystemResource: java.lang.String getFilename()>
Source here: <org.springframework.core.io.FileSystemResource: java.lang.String getDescription()>
Now we build call graphs for class: org.eclipse.jetty.util.RolloverFileOutputStream
Source here: <org.eclipse.jetty.util.RolloverFileOutputStream: void setFile()>
Source here: <org.eclipse.jetty.util.RolloverFileOutputStream: void removeOldFiles()>
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.XmlSchemaCollection$1: java.lang.String run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.StreamPrinter: void run()>...
Starting from source: 
0: run
Flows from source is finished.
Now we build call graphs for class: org.eclipse.jetty.server.handler.ContextHandler
Source here: <org.eclipse.jetty.server.handler.ContextHandler: java.lang.String getClassPath()>
Now we build call graphs for class: org.eclipse.jetty.io.nio.DirectNIOBuffer
Source here: <org.eclipse.jetty.io.nio.DirectNIOBuffer: int readFrom(java.io.InputStream,int)>
Now we build call graphs for class: org.apache.cxf.common.util.ClassReader
Source here: <org.apache.cxf.common.util.ClassReader: byte[] getBytes(java.lang.Class)>
Source here: <org.apache.cxf.common.util.ClassReader: int readShort()>
Source here: <org.apache.cxf.common.util.ClassReader: int readInt()>
Source here: <org.apache.cxf.common.util.ClassReader: void readCpool()>
Start traversal for source: <org.apache.cxf.common.util.ClassReader: byte[] getBytes(java.lang.Class)>...
Starting from source: 
0: getBytes
Flows from source is finished.
Now we build call graphs for class: javax.mail.internet.MimeUtility
Global flow here: <javax.mail.internet.MimeUtility: java.lang.String encodeWord(java.lang.String,java.lang.String,java.lang.String,boolean)> calls: <org.apache.geronimo.mail.util.ASCIIUtil: java.lang.String getTextTransferEncoding(java.lang.String)> via: STATIC edge: $r1 = staticinvoke <org.apache.geronimo.mail.util.ASCIIUtil: java.lang.String getTextTransferEncoding(java.lang.String)>(r0) in <javax.mail.internet.MimeUtility: java.lang.String encodeWord(java.lang.String,java.lang.String,java.lang.String,boolean)> ==> <org.apache.geronimo.mail.util.ASCIIUtil: java.lang.String getTextTransferEncoding(java.lang.String)>
Global flow here: <javax.mail.internet.MimeUtility: java.lang.String encodeWord(java.lang.String,java.lang.String,java.lang.String,boolean)> calls: <org.apache.geronimo.mail.util.SessionUtil: boolean getBooleanProperty(java.lang.String,boolean)> via: STATIC edge: $z3 = staticinvoke <org.apache.geronimo.mail.util.SessionUtil: boolean getBooleanProperty(java.lang.String,boolean)>("mail.mime.foldencodedwords", 0) in <javax.mail.internet.MimeUtility: java.lang.String encodeWord(java.lang.String,java.lang.String,java.lang.String,boolean)> ==> <org.apache.geronimo.mail.util.SessionUtil: boolean getBooleanProperty(java.lang.String,boolean)>
Global flow here: <javax.mail.internet.MimeUtility: java.lang.String encodeWord(java.lang.String,java.lang.String,java.lang.String,boolean)> calls: <org.apache.geronimo.mail.util.SessionUtil: boolean getBooleanProperty(java.lang.String,boolean)> via: STATIC edge: $z1 = staticinvoke <org.apache.geronimo.mail.util.SessionUtil: boolean getBooleanProperty(java.lang.String,boolean)>("mail.mime.foldencodedwords", 0) in <javax.mail.internet.MimeUtility: java.lang.String encodeWord(java.lang.String,java.lang.String,java.lang.String,boolean)> ==> <org.apache.geronimo.mail.util.SessionUtil: boolean getBooleanProperty(java.lang.String,boolean)>
Global flow here: <javax.mail.internet.MimeUtility: void encodeBase64(java.lang.String,java.lang.StringBuffer,int,java.lang.String,org.apache.geronimo.mail.util.Base64Encoder,boolean,boolean)> calls: <org.apache.geronimo.mail.util.Base64Encoder: void encodeWord(byte[],java.lang.StringBuffer,java.lang.String)> via: VIRTUAL edge: virtualinvoke r4.<org.apache.geronimo.mail.util.Base64Encoder: void encodeWord(byte[],java.lang.StringBuffer,java.lang.String)>($r3, r5, r1) in <javax.mail.internet.MimeUtility: void encodeBase64(java.lang.String,java.lang.StringBuffer,int,java.lang.String,org.apache.geronimo.mail.util.Base64Encoder,boolean,boolean)> ==> <org.apache.geronimo.mail.util.Base64Encoder: void encodeWord(byte[],java.lang.StringBuffer,java.lang.String)>
Global flow here: <javax.mail.internet.MimeUtility: void encodeBase64(java.lang.String,java.lang.StringBuffer,int,java.lang.String,org.apache.geronimo.mail.util.Base64Encoder,boolean,boolean)> calls: <org.apache.geronimo.mail.util.Base64Encoder: int estimateEncodedLength(byte[])> via: VIRTUAL edge: $i0 = virtualinvoke r4.<org.apache.geronimo.mail.util.Base64Encoder: int estimateEncodedLength(byte[])>($r3) in <javax.mail.internet.MimeUtility: void encodeBase64(java.lang.String,java.lang.StringBuffer,int,java.lang.String,org.apache.geronimo.mail.util.Base64Encoder,boolean,boolean)> ==> <org.apache.geronimo.mail.util.Base64Encoder: int estimateEncodedLength(byte[])>
Global flow here: <javax.mail.internet.MimeUtility: void encodeQuotedPrintable(java.lang.String,java.lang.StringBuffer,int,java.lang.String,org.apache.geronimo.mail.util.QuotedPrintableEncoder,boolean,boolean,java.lang.String)> calls: <org.apache.geronimo.mail.util.QuotedPrintableEncoder: void encodeWord(byte[],java.lang.StringBuffer,java.lang.String,java.lang.String)> via: VIRTUAL edge: virtualinvoke r4.<org.apache.geronimo.mail.util.QuotedPrintableEncoder: void encodeWord(byte[],java.lang.StringBuffer,java.lang.String,java.lang.String)>($r3, r6, r1, r5) in <javax.mail.internet.MimeUtility: void encodeQuotedPrintable(java.lang.String,java.lang.StringBuffer,int,java.lang.String,org.apache.geronimo.mail.util.QuotedPrintableEncoder,boolean,boolean,java.lang.String)> ==> <org.apache.geronimo.mail.util.QuotedPrintableEncoder: void encodeWord(byte[],java.lang.StringBuffer,java.lang.String,java.lang.String)>
Global flow here: <javax.mail.internet.MimeUtility: void encodeQuotedPrintable(java.lang.String,java.lang.StringBuffer,int,java.lang.String,org.apache.geronimo.mail.util.QuotedPrintableEncoder,boolean,boolean,java.lang.String)> calls: <org.apache.geronimo.mail.util.QuotedPrintableEncoder: int estimateEncodedLength(byte[],java.lang.String)> via: VIRTUAL edge: $i0 = virtualinvoke r4.<org.apache.geronimo.mail.util.QuotedPrintableEncoder: int estimateEncodedLength(byte[],java.lang.String)>($r3, r5) in <javax.mail.internet.MimeUtility: void encodeQuotedPrintable(java.lang.String,java.lang.StringBuffer,int,java.lang.String,org.apache.geronimo.mail.util.QuotedPrintableEncoder,boolean,boolean,java.lang.String)> ==> <org.apache.geronimo.mail.util.QuotedPrintableEncoder: int estimateEncodedLength(byte[],java.lang.String)>
Global flow here: <javax.mail.internet.MimeUtility: java.lang.String getDefaultJavaCharset()> calls: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String)> via: STATIC edge: $r0 = staticinvoke <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String)>("mail.mime.charset") in <javax.mail.internet.MimeUtility: java.lang.String getDefaultJavaCharset()> ==> <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String)>
Global flow here: <javax.mail.internet.MimeUtility: java.lang.String getDefaultJavaCharset()> calls: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String,java.lang.String)> via: STATIC edge: $r1 = staticinvoke <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String,java.lang.String)>("file.encoding", "8859_1") in <javax.mail.internet.MimeUtility: java.lang.String getDefaultJavaCharset()> ==> <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String,java.lang.String)>
Global flow here: <javax.mail.internet.MimeUtility: java.lang.String getDefaultMIMECharset()> calls: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String)> via: STATIC edge: $r0 = staticinvoke <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String)>("mail.mime.charset") in <javax.mail.internet.MimeUtility: java.lang.String getDefaultMIMECharset()> ==> <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String)>
Global flow here: <javax.mail.internet.MimeUtility: java.lang.String getDefaultMIMECharset()> calls: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String,java.lang.String)> via: STATIC edge: $r1 = staticinvoke <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String,java.lang.String)>("file.encoding", "8859_1") in <javax.mail.internet.MimeUtility: java.lang.String getDefaultMIMECharset()> ==> <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String,java.lang.String)>
Source here: <javax.mail.internet.MimeUtility: void readMappings(java.io.BufferedReader,java.util.Map)>
Global flow here: <javax.mail.internet.MimeUtility: java.lang.String fold(int,java.lang.String)> calls: <org.apache.geronimo.mail.util.SessionUtil: boolean getBooleanProperty(java.lang.String,boolean)> via: STATIC edge: $z0 = staticinvoke <org.apache.geronimo.mail.util.SessionUtil: boolean getBooleanProperty(java.lang.String,boolean)>("mail.mime.foldtext", 1) in <javax.mail.internet.MimeUtility: java.lang.String fold(int,java.lang.String)> ==> <org.apache.geronimo.mail.util.SessionUtil: boolean getBooleanProperty(java.lang.String,boolean)>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: getDefaultMIMECharset
2: encodeWord
3: encodeQuotedPrintable
4: encodeBase64
5: getEncodedPersonal
6: setPersonal
7: getDefaultJavaCharset
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.classloader.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>...
Starting from source: 
0: getResourceAsStream
1: loadCharacterSetMappings
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.handler.ContextHandler$Context: java.io.InputStream getResourceAsStream(java.lang.String)>...
Starting from source: 
0: getResourceAsStream
1: loadCharacterSetMappings
Flows from source is finished.
Start traversal for source: <java.io.LineNumberReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: readMappings
2: loadCharacterSetMappings
Flows from source is finished.
Start traversal for source: <javax.mail.internet.MimeUtility: void readMappings(java.io.BufferedReader,java.util.Map)>...
Starting from source: 
0: readMappings
1: loadCharacterSetMappings
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getDefaultMIMECharset
2: encodeWord
3: encodeQuotedPrintable
4: encodeBase64
5: getEncodedPersonal
6: setPersonal
7: getDefaultJavaCharset
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.ASCIIUtil: java.lang.String getTextTransferEncoding(java.io.InputStream)>...
Starting from source: 
0: getTextTransferEncoding
1: encodeWord
2: encodeQuotedPrintable
3: encodeBase64
4: getEncodedPersonal
5: setPersonal
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: readMappings
2: loadCharacterSetMappings
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.ClassReader: byte[] getBytes(java.lang.Class)>...
Starting from source: 
0: getBytes
1: encodeQuotedPrintable
2: encodeWord
3: encodeBase64
4: getEncodedPersonal
5: setPersonal
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.TypeUtil: byte[] readLine(java.io.InputStream)>...
Starting from source: 
0: readLine
1: readMappings
2: loadCharacterSetMappings
Flows from source is finished.
Now we build call graphs for class: javax.xml.bind.helpers.AbstractUnmarshallerImpl
Source here: <javax.xml.bind.helpers.AbstractUnmarshallerImpl: java.lang.Object unmarshal(java.io.File)>
Now we build call graphs for class: org.eclipse.jetty.io.nio.RandomAccessFileBuffer
Source here: <org.eclipse.jetty.io.nio.RandomAccessFileBuffer: byte peek()>
Source here: <org.eclipse.jetty.io.nio.RandomAccessFileBuffer: byte peek(int)>
Source here: <org.eclipse.jetty.io.nio.RandomAccessFileBuffer: int peek(int,byte[],int,int)>
Now we build call graphs for class: org.apache.cxf.attachment.AttachmentDeserializer
Source here: <org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String findBoundaryFromInputStream()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String findBoundaryFromInputStream()> calls: <org.apache.cxf.message.MessageImpl: java.lang.Object getContent(java.lang.Class)> via: INTERFACE edge: $r2 = interfaceinvoke $r1.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/io/InputStream;") in <org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String findBoundaryFromInputStream()> ==> <org.apache.cxf.message.MessageImpl: java.lang.Object getContent(java.lang.Class)>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String findBoundaryFromInputStream()> calls: <org.apache.cxf.message.MessageImpl: void setContent(java.lang.Class,java.lang.Object)> via: INTERFACE edge: interfaceinvoke $r7.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/io/InputStream;", $r4) in <org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String findBoundaryFromInputStream()> ==> <org.apache.cxf.message.MessageImpl: void setContent(java.lang.Class,java.lang.Object)>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String findBoundaryFromInputStream()> calls: <org.apache.cxf.helpers.IOUtils: java.lang.String newStringFromBytes(byte[],int,int)> via: STATIC edge: $r6 = staticinvoke <org.apache.cxf.helpers.IOUtils: java.lang.String newStringFromBytes(byte[],int,int)>(r5, 0, $i0) in <org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String findBoundaryFromInputStream()> ==> <org.apache.cxf.helpers.IOUtils: java.lang.String newStringFromBytes(byte[],int,int)>
Source here: <org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.attachment.AttachmentImpl readNext()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> calls: <org.apache.cxf.attachment.AttachmentDataSource: void cache(org.apache.cxf.message.Message)> via: VIRTUAL edge: virtualinvoke r9.<org.apache.cxf.attachment.AttachmentDataSource: void cache(org.apache.cxf.message.Message)>($r10) in <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> ==> <org.apache.cxf.attachment.AttachmentDataSource: void cache(org.apache.cxf.message.Message)>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> calls: <org.apache.cxf.attachment.AttachmentDataSource: boolean isCached()> via: VIRTUAL edge: $z3 = virtualinvoke r9.<org.apache.cxf.attachment.AttachmentDataSource: boolean isCached()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> ==> <org.apache.cxf.attachment.AttachmentDataSource: boolean isCached()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> calls: <org.apache.cxf.attachment.AttachmentDataSource: java.io.InputStream getInputStream()> via: INTERFACE edge: $r7 = interfaceinvoke $r5.<javax.activation.DataSource: java.io.InputStream getInputStream()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> ==> <org.apache.cxf.attachment.AttachmentDataSource: java.io.InputStream getInputStream()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> calls: <org.apache.cxf.attachment.AttachmentDataSource: java.io.InputStream getInputStream()> via: INTERFACE edge: $r6 = interfaceinvoke $r5.<javax.activation.DataSource: java.io.InputStream getInputStream()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> ==> <org.apache.cxf.attachment.AttachmentDataSource: java.io.InputStream getInputStream()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> calls: <org.apache.cxf.jaxrs.ext.multipart.InputStreamDataSource: java.io.InputStream getInputStream()> via: INTERFACE edge: $r7 = interfaceinvoke $r5.<javax.activation.DataSource: java.io.InputStream getInputStream()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> ==> <org.apache.cxf.jaxrs.ext.multipart.InputStreamDataSource: java.io.InputStream getInputStream()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> calls: <org.apache.cxf.jaxrs.ext.multipart.InputStreamDataSource: java.io.InputStream getInputStream()> via: INTERFACE edge: $r6 = interfaceinvoke $r5.<javax.activation.DataSource: java.io.InputStream getInputStream()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> ==> <org.apache.cxf.jaxrs.ext.multipart.InputStreamDataSource: java.io.InputStream getInputStream()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> calls: <org.apache.cxf.attachment.AttachmentImpl: javax.activation.DataHandler getDataHandler()> via: INTERFACE edge: $r4 = interfaceinvoke r3.<org.apache.cxf.message.Attachment: javax.activation.DataHandler getDataHandler()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> ==> <org.apache.cxf.attachment.AttachmentImpl: javax.activation.DataHandler getDataHandler()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> calls: <org.apache.cxf.attachment.DelegatingInputStream: boolean isClosed()> via: VIRTUAL edge: $z4 = virtualinvoke $r12.<org.apache.cxf.attachment.DelegatingInputStream: boolean isClosed()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> ==> <org.apache.cxf.attachment.DelegatingInputStream: boolean isClosed()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> calls: <org.apache.cxf.attachment.LazyAttachmentCollection: java.util.List getLoadedAttachments()> via: VIRTUAL edge: $r17 = virtualinvoke $r16.<org.apache.cxf.attachment.LazyAttachmentCollection: java.util.List getLoadedAttachments()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cacheStreamedAttachments()> ==> <org.apache.cxf.attachment.LazyAttachmentCollection: java.util.List getLoadedAttachments()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> calls: <sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()> via: VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> ==> <sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> calls: <sun.nio.ch.ChannelInputStream: void close()> via: VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> ==> <sun.nio.ch.ChannelInputStream: void close()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> calls: <org.apache.cxf.attachment.DelegatingInputStream: void close()> via: VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> ==> <org.apache.cxf.attachment.DelegatingInputStream: void close()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> calls: <org.apache.cxf.io.CachedOutputStream$1: void close()> via: VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> ==> <org.apache.cxf.io.CachedOutputStream$1: void close()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> calls: <org.apache.cxf.attachment.MimeBodyPartInputStream: void close()> via: VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> ==> <org.apache.cxf.attachment.MimeBodyPartInputStream: void close()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> calls: <org.apache.cxf.attachment.DelegatingInputStream: void setInputStream(java.io.InputStream)> via: VIRTUAL edge: virtualinvoke r1.<org.apache.cxf.attachment.DelegatingInputStream: void setInputStream(java.io.InputStream)>($r7) in <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> ==> <org.apache.cxf.attachment.DelegatingInputStream: void setInputStream(java.io.InputStream)>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> calls: <org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream getInputStream()> via: VIRTUAL edge: $r4 = virtualinvoke r1.<org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream getInputStream()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> ==> <org.apache.cxf.attachment.DelegatingInputStream: java.io.InputStream getInputStream()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> calls: <org.apache.cxf.io.CachedOutputStream: void close()> via: VIRTUAL edge: virtualinvoke r9.<org.apache.cxf.io.CachedOutputStream: void close()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> ==> <org.apache.cxf.io.CachedOutputStream: void close()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> calls: <org.apache.cxf.io.CachedOutputStream: void close()> via: VIRTUAL edge: virtualinvoke $r5.<org.apache.cxf.io.CachedOutputStream: void close()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> ==> <org.apache.cxf.io.CachedOutputStream: void close()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> calls: <org.apache.cxf.io.CachedOutputStream: java.io.InputStream getInputStream()> via: VIRTUAL edge: $r7 = virtualinvoke $r5.<org.apache.cxf.io.CachedOutputStream: java.io.InputStream getInputStream()>() in <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> ==> <org.apache.cxf.io.CachedOutputStream: java.io.InputStream getInputStream()>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> calls: <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)> via: STATIC edge: staticinvoke <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)>($r6, $r5) in <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> ==> <org.apache.cxf.attachment.AttachmentUtil: void setStreamedAttachmentProperties(org.apache.cxf.message.Message,org.apache.cxf.io.CachedOutputStream)>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> calls: <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)> via: STATIC edge: staticinvoke <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r1, $r5) in <org.apache.cxf.attachment.AttachmentDeserializer: void cache(org.apache.cxf.attachment.DelegatingInputStream,boolean)> ==> <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>
Source here: <org.apache.cxf.attachment.AttachmentDeserializer: boolean readTillFirstBoundary(java.io.PushbackInputStream,byte[])>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.message.Attachment createAttachment(javax.mail.internet.InternetHeaders)> calls: <org.apache.cxf.attachment.AttachmentUtil: org.apache.cxf.message.Attachment createAttachment(java.io.InputStream,javax.mail.internet.InternetHeaders)> via: STATIC edge: $r6 = staticinvoke <org.apache.cxf.attachment.AttachmentUtil: org.apache.cxf.message.Attachment createAttachment(java.io.InputStream,javax.mail.internet.InternetHeaders)>($r0, r5) in <org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.message.Attachment createAttachment(javax.mail.internet.InternetHeaders)> ==> <org.apache.cxf.attachment.AttachmentUtil: org.apache.cxf.message.Attachment createAttachment(java.io.InputStream,javax.mail.internet.InternetHeaders)>
Source here: <org.apache.cxf.attachment.AttachmentDeserializer: void markClosed(org.apache.cxf.attachment.DelegatingInputStream)>
Global flow here: <org.apache.cxf.attachment.AttachmentDeserializer: void markClosed(org.apache.cxf.attachment.DelegatingInputStream)> calls: <org.apache.cxf.attachment.LazyAttachmentCollection: boolean hasNext(boolean)> via: VIRTUAL edge: $z0 = virtualinvoke $r1.<org.apache.cxf.attachment.LazyAttachmentCollection: boolean hasNext(boolean)>(0) in <org.apache.cxf.attachment.AttachmentDeserializer: void markClosed(org.apache.cxf.attachment.DelegatingInputStream)> ==> <org.apache.cxf.attachment.LazyAttachmentCollection: boolean hasNext(boolean)>
Source here: <org.apache.cxf.attachment.AttachmentDeserializer: boolean hasNext()>
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read(char[],int,int)>...
Starting from source: 
0: read
1: hasNext
2: markClosed
3: close
4: cache
5: cacheStreamedAttachments
6: readNext
7: loadAll
8: readTillFirstBoundary
9: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.AttachmentDeserializer: boolean readTillFirstBoundary(java.io.PushbackInputStream,byte[])>...
Starting from source: 
0: readTillFirstBoundary
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit: void close(org.apache.cxf.message.Message)>...
Starting from source: 
0: close
1: markClosed
2: cache
3: cacheStreamedAttachments
4: hasNext
5: readNext
6: loadAll
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: hasNext
2: markClosed
3: close
4: cache
5: cacheStreamedAttachments
6: readNext
7: loadAll
8: readTillFirstBoundary
9: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String findBoundaryFromInputStream()>...
Starting from source: 
0: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cache
2: cacheStreamedAttachments
3: hasNext
4: markClosed
5: close
6: readNext
7: loadAll
Flows from source is finished.
Start traversal for source: <java.io.RandomAccessFile: int read(byte[],int,int)>...
Starting from source: 
0: read
1: hasNext
2: markClosed
3: close
4: cache
5: cacheStreamedAttachments
6: readNext
7: loadAll
8: readTillFirstBoundary
9: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <java.io.FileInputStream: int read(byte[])>...
Starting from source: 
0: read
1: hasNext
2: markClosed
3: close
4: cache
5: cacheStreamedAttachments
6: readNext
7: loadAll
8: readTillFirstBoundary
9: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.AttachmentDeserializer: boolean hasNext()>...
Starting from source: 
0: hasNext
1: markClosed
2: close
3: cache
4: cacheStreamedAttachments
5: readNext
6: loadAll
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: int read(byte[])>...
Starting from source: 
0: read
1: hasNext
2: markClosed
3: close
4: cache
5: cacheStreamedAttachments
6: readNext
7: loadAll
8: readTillFirstBoundary
9: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: cache
2: cacheStreamedAttachments
3: hasNext
4: markClosed
5: close
6: readNext
7: loadAll
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: hasNext
2: markClosed
3: close
4: cache
5: cacheStreamedAttachments
6: readNext
7: loadAll
8: readTillFirstBoundary
9: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <java.io.ByteArrayInputStream: int read()>...
Starting from source: 
0: read
1: hasNext
2: markClosed
3: close
4: cache
5: cacheStreamedAttachments
6: readNext
7: loadAll
8: readTillFirstBoundary
9: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <java.io.PushbackInputStream: int read()>...
Starting from source: 
0: read
1: hasNext
2: markClosed
3: close
4: cache
5: cacheStreamedAttachments
6: readNext
7: loadAll
8: readTillFirstBoundary
9: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.AttachmentDeserializer: org.apache.cxf.attachment.AttachmentImpl readNext()>...
Starting from source: 
0: readNext
1: loadAll
2: hasNext
3: markClosed
4: close
5: cache
6: cacheStreamedAttachments
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: hasNext
2: markClosed
3: close
4: cache
5: cacheStreamedAttachments
6: readNext
7: loadAll
8: readTillFirstBoundary
9: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: int read()>...
Starting from source: 
0: read
1: hasNext
2: markClosed
3: close
4: cache
5: cacheStreamedAttachments
6: readNext
7: loadAll
8: readTillFirstBoundary
9: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read()>...
Starting from source: 
0: read
1: hasNext
2: markClosed
3: close
4: cache
5: cacheStreamedAttachments
6: readNext
7: loadAll
8: readTillFirstBoundary
9: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cache
2: cacheStreamedAttachments
3: hasNext
4: markClosed
5: close
6: readNext
7: loadAll
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.AttachmentDeserializer: void markClosed(org.apache.cxf.attachment.DelegatingInputStream)>...
Starting from source: 
0: markClosed
1: close
2: cache
3: cacheStreamedAttachments
4: hasNext
5: readNext
6: loadAll
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int read()>...
Starting from source: 
0: read
1: hasNext
2: markClosed
3: close
4: cache
5: cacheStreamedAttachments
6: readNext
7: loadAll
8: readTillFirstBoundary
9: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <javax.mail.internet.MimeMultipart$MimeBodyPartInputStream: int read()>...
Starting from source: 
0: read
1: hasNext
2: markClosed
3: close
4: cache
5: cacheStreamedAttachments
6: readNext
7: loadAll
8: readTillFirstBoundary
9: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[],int,int)>...
Starting from source: 
0: read
1: hasNext
2: markClosed
3: close
4: cache
5: cacheStreamedAttachments
6: readNext
7: loadAll
8: readTillFirstBoundary
9: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int read(byte[])>...
Starting from source: 
0: read
1: hasNext
2: markClosed
3: close
4: cache
5: cacheStreamedAttachments
6: readNext
7: loadAll
8: readTillFirstBoundary
9: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <java.io.InputStreamReader: int read()>...
Starting from source: 
0: read
1: hasNext
2: markClosed
3: close
4: cache
5: cacheStreamedAttachments
6: readNext
7: loadAll
8: readTillFirstBoundary
9: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.util.StreamUtils: void copy(java.io.InputStream,java.io.OutputStream,int)>...
Starting from source: 
0: copy
1: cache
2: cacheStreamedAttachments
3: hasNext
4: markClosed
5: close
6: readNext
7: loadAll
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.JarResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cache
2: cacheStreamedAttachments
3: hasNext
4: markClosed
5: close
6: readNext
7: loadAll
Flows from source is finished.
Start traversal for source: <org.springframework.core.io.UrlResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cache
2: cacheStreamedAttachments
3: hasNext
4: markClosed
5: close
6: readNext
7: loadAll
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: hasNext
2: markClosed
3: close
4: cache
5: cacheStreamedAttachments
6: readNext
7: loadAll
8: readTillFirstBoundary
9: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>...
Starting from source: 
0: close
1: markClosed
2: cache
3: cacheStreamedAttachments
4: hasNext
5: readNext
6: loadAll
Flows from source is finished.
Now we build call graphs for class: org.eclipse.jetty.server.Response
Source here: <org.eclipse.jetty.server.Response: java.lang.String toString()>
Now we build call graphs for class: org.springframework.beans.factory.config.PropertyPlaceholderConfigurer
Source here: <org.springframework.beans.factory.config.PropertyPlaceholderConfigurer: java.lang.String resolveSystemProperty(java.lang.String)>
Now we build call graphs for class: org.apache.cxf.jaxrs.provider.XMLBeanStreamSerializer
Source here: <org.apache.cxf.jaxrs.provider.XMLBeanStreamSerializer: void serialize(org.apache.xmlbeans.XmlObject,javax.xml.stream.XMLStreamWriter)>
Now we build call graphs for class: javax.xml.bind.JAXB
Source here: <javax.xml.bind.JAXB: javax.xml.transform.Result toResult(java.lang.Object)>
Now we build call graphs for class: org.eclipse.jetty.server.session.HashedSession
Source here: <org.eclipse.jetty.server.session.HashedSession: void deIdle()>
Now we build call graphs for class: org.codehaus.stax2.validation.XMLValidationSchemaFactory
Source here: <org.codehaus.stax2.validation.XMLValidationSchemaFactory: org.codehaus.stax2.validation.XMLValidationSchemaFactory newInstance(java.lang.String,java.lang.ClassLoader)>
Now we build call graphs for class: org.eclipse.jetty.util.log.Log$1
Source here: <org.eclipse.jetty.util.log.Log$1: java.lang.Object run()>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.log.Log$1: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.XmlSchemaCollection$1: java.lang.String run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.StreamPrinter: void run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.resource.ExtendedURIResolver
Source here: <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)>
Global flow here: <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> calls: <org.apache.cxf.resource.URIResolver: void resolve(java.lang.String,java.lang.String,java.lang.Class)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.cxf.resource.URIResolver: void resolve(java.lang.String,java.lang.String,java.lang.Class)>(r1, r21, $r3) in <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> ==> <org.apache.cxf.resource.URIResolver: void resolve(java.lang.String,java.lang.String,java.lang.Class)>
Global flow here: <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> calls: <org.apache.cxf.resource.URIResolver: boolean isResolved()> via: VIRTUAL edge: $z0 = virtualinvoke $r4.<org.apache.cxf.resource.URIResolver: boolean isResolved()>() in <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> ==> <org.apache.cxf.resource.URIResolver: boolean isResolved()>
Global flow here: <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> calls: <org.apache.cxf.resource.URIResolver: java.net.URI getURI()> via: VIRTUAL edge: $r6 = virtualinvoke $r5.<org.apache.cxf.resource.URIResolver: java.net.URI getURI()>() in <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> ==> <org.apache.cxf.resource.URIResolver: java.net.URI getURI()>
Global flow here: <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> calls: <org.apache.cxf.resource.URIResolver: java.net.URI getURI()> via: VIRTUAL edge: $r16 = virtualinvoke $r15.<org.apache.cxf.resource.URIResolver: java.net.URI getURI()>() in <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> ==> <org.apache.cxf.resource.URIResolver: java.net.URI getURI()>
Global flow here: <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> calls: <org.apache.cxf.resource.URIResolver: java.net.URI getURI()> via: VIRTUAL edge: $r18 = virtualinvoke $r17.<org.apache.cxf.resource.URIResolver: java.net.URI getURI()>() in <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> ==> <org.apache.cxf.resource.URIResolver: java.net.URI getURI()>
Global flow here: <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> calls: <org.apache.cxf.resource.URIResolver: boolean isFile()> via: VIRTUAL edge: $z2 = virtualinvoke $r22.<org.apache.cxf.resource.URIResolver: boolean isFile()>() in <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> ==> <org.apache.cxf.resource.URIResolver: boolean isFile()>
Global flow here: <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> calls: <org.apache.cxf.resource.URIResolver: java.io.File getFile()> via: VIRTUAL edge: $r12 = virtualinvoke $r11.<org.apache.cxf.resource.URIResolver: java.io.File getFile()>() in <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> ==> <org.apache.cxf.resource.URIResolver: java.io.File getFile()>
Global flow here: <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> calls: <org.apache.cxf.resource.URIResolver: java.io.InputStream getInputStream()> via: VIRTUAL edge: $r8 = virtualinvoke $r7.<org.apache.cxf.resource.URIResolver: java.io.InputStream getInputStream()>() in <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> ==> <org.apache.cxf.resource.URIResolver: java.io.InputStream getInputStream()>
Global flow here: <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> calls: <org.xml.sax.InputSource: void setPublicId(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r10.<org.xml.sax.InputSource: void setPublicId(java.lang.String)>(r21) in <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> ==> <org.xml.sax.InputSource: void setPublicId(java.lang.String)>
Global flow here: <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> calls: <org.xml.sax.InputSource: void setSystemId(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r10.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>(r21) in <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)> ==> <org.xml.sax.InputSource: void setSystemId(java.lang.String)>
Start traversal for source: <java.net.URL: java.lang.String getFile()>...
Starting from source: 
0: getFile
1: resolve
Flows from source is finished.
Start traversal for source: <java.io.File: java.io.File getAbsoluteFile()>...
Starting from source: 
0: getAbsoluteFile
1: resolve
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: resolve
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: resolve
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: java.io.File getFile()>...
Starting from source: 
0: getFile
1: resolve
Flows from source is finished.
Start traversal for source: <org.springframework.http.client.SimpleClientHttpRequest: java.net.URI getURI()>...
Starting from source: 
0: getURI
1: resolve
Flows from source is finished.
Start traversal for source: <org.springframework.core.io.FileSystemResource: java.net.URI getURI()>...
Starting from source: 
0: getURI
1: resolve
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: resolve
Flows from source is finished.
Start traversal for source: <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)>...
Starting from source: 
0: resolve
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.JarResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: resolve
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: resolve
Flows from source is finished.
Start traversal for source: <org.springframework.core.io.UrlResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: resolve
Flows from source is finished.
Start traversal for source: <java.io.File: java.net.URI toURI()>...
Starting from source: 
0: toURI
1: resolve
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.configuration.jsse.spring.TLSParameterJaxBUtils
Source here: <org.apache.cxf.configuration.jsse.spring.TLSParameterJaxBUtils: java.security.KeyStore getKeyStore(org.apache.cxf.configuration.security.KeyStoreType)>
Global flow here: <org.apache.cxf.configuration.jsse.spring.TLSParameterJaxBUtils: java.security.KeyStore getKeyStore(org.apache.cxf.configuration.security.KeyStoreType)> calls: <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystoreType(java.lang.String,java.util.logging.Logger,java.lang.String)> via: STATIC edge: $r3 = staticinvoke <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystoreType(java.lang.String,java.util.logging.Logger,java.lang.String)>($r28, $r1, $r2) in <org.apache.cxf.configuration.jsse.spring.TLSParameterJaxBUtils: java.security.KeyStore getKeyStore(org.apache.cxf.configuration.security.KeyStoreType)> ==> <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystoreType(java.lang.String,java.util.logging.Logger,java.lang.String)>
Global flow here: <org.apache.cxf.configuration.jsse.spring.TLSParameterJaxBUtils: java.security.KeyStore getKeyStore(org.apache.cxf.configuration.security.KeyStoreType)> calls: <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystorePassword(java.lang.String,java.util.logging.Logger)> via: STATIC edge: $r26 = staticinvoke <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystorePassword(java.lang.String,java.util.logging.Logger)>(null, $r25) in <org.apache.cxf.configuration.jsse.spring.TLSParameterJaxBUtils: java.security.KeyStore getKeyStore(org.apache.cxf.configuration.security.KeyStoreType)> ==> <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystorePassword(java.lang.String,java.util.logging.Logger)>
Global flow here: <org.apache.cxf.configuration.jsse.spring.TLSParameterJaxBUtils: java.security.KeyStore getKeyStore(org.apache.cxf.configuration.security.KeyStoreType)> calls: <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystoreProvider(java.lang.String,java.util.logging.Logger)> via: STATIC edge: $r5 = staticinvoke <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystoreProvider(java.lang.String,java.util.logging.Logger)>($r31, $r4) in <org.apache.cxf.configuration.jsse.spring.TLSParameterJaxBUtils: java.security.KeyStore getKeyStore(org.apache.cxf.configuration.security.KeyStoreType)> ==> <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystoreProvider(java.lang.String,java.util.logging.Logger)>
Global flow here: <org.apache.cxf.configuration.jsse.spring.TLSParameterJaxBUtils: java.security.KeyStore getKeyStore(org.apache.cxf.configuration.security.KeyStoreType)> calls: <org.apache.cxf.common.classloader.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)> via: STATIC edge: $r15 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>($r13, $r14) in <org.apache.cxf.configuration.jsse.spring.TLSParameterJaxBUtils: java.security.KeyStore getKeyStore(org.apache.cxf.configuration.security.KeyStoreType)> ==> <org.apache.cxf.common.classloader.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>
Global flow here: <org.apache.cxf.configuration.jsse.spring.TLSParameterJaxBUtils: java.security.KeyStore getKeyStore(org.apache.cxf.configuration.security.KeyStoreType)> calls: <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystore(java.lang.String,java.util.logging.Logger)> via: STATIC edge: $r8 = staticinvoke <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystore(java.lang.String,java.util.logging.Logger)>(null, $r7) in <org.apache.cxf.configuration.jsse.spring.TLSParameterJaxBUtils: java.security.KeyStore getKeyStore(org.apache.cxf.configuration.security.KeyStoreType)> ==> <org.apache.cxf.transport.https.SSLUtils: java.lang.String getKeystore(java.lang.String,java.util.logging.Logger)>
Source here: <org.apache.cxf.configuration.jsse.spring.TLSParameterJaxBUtils: java.security.KeyStore getKeyStore(org.apache.cxf.configuration.security.CertStoreType)>
Global flow here: <org.apache.cxf.configuration.jsse.spring.TLSParameterJaxBUtils: java.security.KeyStore getKeyStore(org.apache.cxf.configuration.security.CertStoreType)> calls: <org.apache.cxf.common.classloader.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)> via: STATIC edge: $r7 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>($r5, $r6) in <org.apache.cxf.configuration.jsse.spring.TLSParameterJaxBUtils: java.security.KeyStore getKeyStore(org.apache.cxf.configuration.security.CertStoreType)> ==> <org.apache.cxf.common.classloader.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>
Start traversal for source: <org.apache.cxf.common.classloader.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>...
Starting from source: 
0: getResourceAsStream
1: getKeyStore
2: getKeyManagers
3: getTrustManagers
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.handler.ContextHandler$Context: java.io.InputStream getResourceAsStream(java.lang.String)>...
Starting from source: 
0: getResourceAsStream
1: getKeyStore
2: getKeyManagers
3: getTrustManagers
Flows from source is finished.
Start traversal for source: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void load(java.lang.String,java.lang.ClassLoader)>...
Starting from source: 
0: load
1: createTrustStore
2: getKeyStore
3: getKeyManagers
4: getTrustManagers
Flows from source is finished.
Start traversal for source: <org.apache.cxf.configuration.jsse.spring.TLSParameterJaxBUtils: java.security.KeyStore getKeyStore(org.apache.cxf.configuration.security.CertStoreType)>...
Starting from source: 
0: getKeyStore
1: getKeyManagers
2: getTrustManagers
Flows from source is finished.
Start traversal for source: <java.net.URL: java.io.InputStream openStream()>...
Starting from source: 
0: openStream
1: getKeyStore
2: getKeyManagers
3: getTrustManagers
Flows from source is finished.
Start traversal for source: <org.apache.cxf.configuration.jsse.spring.TLSParameterJaxBUtils: java.security.KeyStore getKeyStore(org.apache.cxf.configuration.security.KeyStoreType)>...
Starting from source: 
0: getKeyStore
1: getKeyManagers
2: getTrustManagers
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: getKeyStore
2: getKeyManagers
3: getTrustManagers
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.interceptor.LoggingOutInterceptor$LoggingCallback
Source here: <org.apache.cxf.interceptor.LoggingOutInterceptor$LoggingCallback: void onClose(org.apache.cxf.io.CachedOutputStream)>
Now we build call graphs for class: org.apache.ws.commons.schema.utils.CollectionFactory$1
Source here: <org.apache.ws.commons.schema.utils.CollectionFactory$1: java.lang.Boolean run()>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.utils.CollectionFactory$1: java.lang.Boolean run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.log.Log$1: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.XmlSchemaCollection$1: java.lang.String run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.StreamPrinter: void run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Now we build call graphs for class: com.ctc.wstx.io.StreamBootstrapper
Source here: <com.ctc.wstx.io.StreamBootstrapper: boolean ensureLoaded(int)>
Source here: <com.ctc.wstx.io.StreamBootstrapper: void loadMore()>
Now we build call graphs for class: javax.mail.internet.MimeMultipart
Source here: <javax.mail.internet.MimeMultipart: byte[] readLine(java.io.BufferedInputStream)>
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: getBoundary
Flows from source is finished.
Now we build call graphs for class: org.apache.log4j.pattern.LogEvent
Source here: <org.apache.log4j.pattern.LogEvent: void readLevel(java.io.ObjectInputStream)>
Now we build call graphs for class: javax.activation.FileDataSource
Source here: <javax.activation.FileDataSource: java.lang.String getName()>
Now we build call graphs for class: javax.activation.URLDataSource
Source here: <javax.activation.URLDataSource: java.lang.String getName()>
Source here: <javax.activation.URLDataSource: java.io.InputStream getInputStream()>
Source here: <javax.activation.URLDataSource: java.io.OutputStream getOutputStream()>
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cacheStreamedAttachments
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: cacheStreamedAttachments
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cacheStreamedAttachments
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.JarResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cacheStreamedAttachments
Flows from source is finished.
Start traversal for source: <org.springframework.core.io.UrlResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cacheStreamedAttachments
Flows from source is finished.
Start traversal for source: <javax.activation.URLDataSource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cacheStreamedAttachments
Flows from source is finished.
Now we build call graphs for class: org.springframework.util.ResourceUtils
Source here: <org.springframework.util.ResourceUtils: java.net.URL getURL(java.lang.String)>
Source here: <org.springframework.util.ResourceUtils: java.io.File getFile(java.net.URL,java.lang.String)>
Source here: <org.springframework.util.ResourceUtils: boolean isFileURL(java.net.URL)>
Source here: <org.springframework.util.ResourceUtils: boolean isJarURL(java.net.URL)>
Source here: <org.springframework.util.ResourceUtils: java.net.URL extractJarFileURL(java.net.URL)>
Now we build call graphs for class: javax.ws.rs.ext.FactoryFinder
Source here: <javax.ws.rs.ext.FactoryFinder: java.lang.Object find(java.lang.String,java.lang.String)>
Start traversal for source: <javax.mail.internet.MimeMultipart: byte[] readLine(java.io.BufferedInputStream)>...
Starting from source: 
0: readLine
1: find
2: findDelegate
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: find
2: findDelegate
Flows from source is finished.
Start traversal for source: <org.codehaus.stax2.validation.XMLValidationSchemaFactory: org.codehaus.stax2.validation.XMLValidationSchemaFactory newInstance(java.lang.String,java.lang.ClassLoader)>...
Starting from source: 
0: newInstance
1: find
2: findDelegate
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit: void close(org.apache.cxf.message.Message)>...
Starting from source: 
0: close
1: find
2: findDelegate
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.classloader.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>...
Starting from source: 
0: getResourceAsStream
1: find
2: findDelegate
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.utils.CollectionFactory$1: java.lang.Boolean run()>...
Starting from source: 
0: run
1: getContextClassLoader
2: find
3: findDelegate
Flows from source is finished.
Start traversal for source: <javax.ws.rs.ext.FactoryFinder: java.lang.Object find(java.lang.String,java.lang.String)>...
Starting from source: 
0: find
1: findDelegate
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: getContextClassLoader
2: find
3: findDelegate
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.handler.ContextHandler$Context: java.io.InputStream getResourceAsStream(java.lang.String)>...
Starting from source: 
0: getResourceAsStream
1: find
2: findDelegate
Flows from source is finished.
Start traversal for source: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void load(java.lang.String,java.lang.ClassLoader)>...
Starting from source: 
0: load
1: find
2: findDelegate
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: boolean exists()>...
Starting from source: 
0: exists
1: find
2: findDelegate
Flows from source is finished.
Start traversal for source: <java.io.LineNumberReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: find
2: findDelegate
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
1: getContextClassLoader
2: find
3: findDelegate
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: find
2: findDelegate
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
1: getContextClassLoader
2: find
3: findDelegate
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: find
2: findDelegate
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: getContextClassLoader
2: find
3: findDelegate
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: getContextClassLoader
2: find
3: findDelegate
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.log.Log$1: java.lang.Object run()>...
Starting from source: 
0: run
1: getContextClassLoader
2: find
3: findDelegate
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.XmlSchemaCollection$1: java.lang.String run()>...
Starting from source: 
0: run
1: getContextClassLoader
2: find
3: findDelegate
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: find
2: findDelegate
3: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.StreamPrinter: void run()>...
Starting from source: 
0: run
1: getContextClassLoader
2: find
3: findDelegate
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>...
Starting from source: 
0: close
1: find
2: findDelegate
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.TypeUtil: byte[] readLine(java.io.InputStream)>...
Starting from source: 
0: readLine
1: find
2: findDelegate
Flows from source is finished.
Now we build call graphs for class: org.eclipse.jetty.util.resource.FileResource
Source here: <org.eclipse.jetty.util.resource.FileResource: java.net.URL getAlias()>
Source here: <org.eclipse.jetty.util.resource.FileResource: java.lang.String getName()>
Source here: <org.eclipse.jetty.util.resource.FileResource: java.lang.String[] list()>
Source here: <org.eclipse.jetty.util.resource.FileResource: int hashCode()>
Global flow here: <org.eclipse.jetty.util.resource.FileResource: int hashCode()> calls: <org.eclipse.jetty.util.resource.URLResource: int hashCode()> via: SPECIAL edge: $i0 = specialinvoke r0.<org.eclipse.jetty.util.resource.URLResource: int hashCode()>() in <org.eclipse.jetty.util.resource.FileResource: int hashCode()> ==> <org.eclipse.jetty.util.resource.URLResource: int hashCode()>
Start traversal for source: <javax.ws.rs.ext.FactoryFinder: java.lang.Object find(java.lang.String,java.lang.String)>...
Starting from source: 
0: find
Flows from source is finished.
Start traversal for source: <java.io.File: int hashCode()>...
Starting from source: 
0: hashCode
1: toString
2: containsKey
3: putVal
4: replaceNode
5: get
6: put
7: addEntry
8: remove
9: contains
10: hashCodeRange
11: hashCodeOfRange
12: hash
13: probe
14: printHashCode
15: deepHashCode
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: boolean exists()>...
Starting from source: 
0: exists
1: isDirectory
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.FileResource: int hashCode()>...
Starting from source: 
0: hashCode
1: toString
2: containsKey
3: putVal
4: replaceNode
5: get
6: put
7: addEntry
8: remove
9: contains
10: hashCodeRange
11: hashCodeOfRange
12: hash
13: probe
14: printHashCode
15: deepHashCode
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
Flows from source is finished.
Now we build call graphs for class: org.apache.log4j.spi.LoggingEvent
Source here: <org.apache.log4j.spi.LoggingEvent: void readLevel(java.io.ObjectInputStream)>
Now we build call graphs for class: org.apache.commons.logging.impl.SimpleLog
Source here: <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>
Global flow here: <org.apache.commons.logging.impl.SimpleLog: java.io.InputStream getResourceAsStream(java.lang.String)> calls: <org.apache.commons.logging.impl.SimpleLog$1: java.lang.Object run()> via: GENERIC_FAKE edge: $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0) in <org.apache.commons.logging.impl.SimpleLog: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <org.apache.commons.logging.impl.SimpleLog$1: java.lang.Object run()>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: getStringProperty
2: getBooleanProperty
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.classloader.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>...
Starting from source: 
0: getResourceAsStream
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.utils.CollectionFactory$1: java.lang.Boolean run()>...
Starting from source: 
0: run
1: getResourceAsStream
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: getResourceAsStream
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.handler.ContextHandler$Context: java.io.InputStream getResourceAsStream(java.lang.String)>...
Starting from source: 
0: getResourceAsStream
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
1: getResourceAsStream
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getStringProperty
2: getBooleanProperty
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
1: getResourceAsStream
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: getResourceAsStream
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>...
Starting from source: 
0: getStringProperty
1: getBooleanProperty
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: getResourceAsStream
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.log.Log$1: java.lang.Object run()>...
Starting from source: 
0: run
1: getResourceAsStream
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.XmlSchemaCollection$1: java.lang.String run()>...
Starting from source: 
0: run
1: getResourceAsStream
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.StreamPrinter: void run()>...
Starting from source: 
0: run
1: getResourceAsStream
Flows from source is finished.
Now we build call graphs for class: com.ctc.wstx.io.BaseReader
Source here: <com.ctc.wstx.io.BaseReader: int read()>
Source here: <com.ctc.wstx.io.BaseReader: int readBytes()>
Source here: <com.ctc.wstx.io.BaseReader: int readBytesAt(int)>
Now we build call graphs for class: org.apache.cxf.transport.servlet.CXFServlet
Source here: <org.apache.cxf.transport.servlet.CXFServlet: void loadBus(javax.servlet.ServletConfig)>
Now we build call graphs for class: javax.mail.Session
Source here: <javax.mail.Session: javax.mail.Session$ProviderInfo loadProviders(java.lang.ClassLoader)>
Source here: <javax.mail.Session: void loadProviders(javax.mail.Session$ProviderInfo,java.io.InputStream)>
Source here: <javax.mail.Session: java.util.Map loadAddressMap(java.lang.ClassLoader)>
Now we build call graphs for class: org.springframework.util.FileSystemUtils
Source here: <org.springframework.util.FileSystemUtils: boolean deleteRecursively(java.io.File)>
Source here: <org.springframework.util.FileSystemUtils: void doCopyRecursively(java.io.File,java.io.File)>
Now we build call graphs for class: org.apache.cxf.common.commands.ForkedCommandStreamHandler
Source here: <org.apache.cxf.common.commands.ForkedCommandStreamHandler: void run()>
Now we build call graphs for class: org.apache.cxf.jaxrs.utils.ResourceUtils
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.ClassResourceInfo createClassResourceInfo(java.lang.Class,java.lang.Class,boolean,boolean)> calls: <org.apache.cxf.jaxrs.model.ClassResourceInfo: void setURITemplate(org.apache.cxf.jaxrs.model.URITemplate)> via: VIRTUAL edge: virtualinvoke $r0.<org.apache.cxf.jaxrs.model.ClassResourceInfo: void setURITemplate(org.apache.cxf.jaxrs.model.URITemplate)>($r4) in <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.ClassResourceInfo createClassResourceInfo(java.lang.Class,java.lang.Class,boolean,boolean)> ==> <org.apache.cxf.jaxrs.model.ClassResourceInfo: void setURITemplate(org.apache.cxf.jaxrs.model.URITemplate)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.ClassResourceInfo createClassResourceInfo(java.lang.Class,java.lang.Class,boolean,boolean)> calls: <org.apache.cxf.jaxrs.model.ClassResourceInfo: javax.ws.rs.Path getPath()> via: VIRTUAL edge: $r3 = virtualinvoke $r0.<org.apache.cxf.jaxrs.model.ClassResourceInfo: javax.ws.rs.Path getPath()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.ClassResourceInfo createClassResourceInfo(java.lang.Class,java.lang.Class,boolean,boolean)> ==> <org.apache.cxf.jaxrs.model.ClassResourceInfo: javax.ws.rs.Path getPath()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.ClassResourceInfo createClassResourceInfo(java.lang.Class,java.lang.Class,boolean,boolean)> calls: <org.apache.cxf.jaxrs.model.URITemplate: org.apache.cxf.jaxrs.model.URITemplate createTemplate(javax.ws.rs.Path)> via: STATIC edge: $r4 = staticinvoke <org.apache.cxf.jaxrs.model.URITemplate: org.apache.cxf.jaxrs.model.URITemplate createTemplate(javax.ws.rs.Path)>($r3) in <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.ClassResourceInfo createClassResourceInfo(java.lang.Class,java.lang.Class,boolean,boolean)> ==> <org.apache.cxf.jaxrs.model.URITemplate: org.apache.cxf.jaxrs.model.URITemplate createTemplate(javax.ws.rs.Path)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> calls: <org.apache.cxf.jaxrs.model.ClassResourceInfo: void setMethodDispatcher(org.apache.cxf.jaxrs.model.MethodDispatcher)> via: VIRTUAL edge: virtualinvoke r1.<org.apache.cxf.jaxrs.model.ClassResourceInfo: void setMethodDispatcher(org.apache.cxf.jaxrs.model.MethodDispatcher)>($r0) in <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> ==> <org.apache.cxf.jaxrs.model.ClassResourceInfo: void setMethodDispatcher(org.apache.cxf.jaxrs.model.MethodDispatcher)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> calls: <org.apache.cxf.jaxrs.model.ClassResourceInfo: void addSubClassResourceInfo(org.apache.cxf.jaxrs.model.ClassResourceInfo)> via: VIRTUAL edge: virtualinvoke r1.<org.apache.cxf.jaxrs.model.ClassResourceInfo: void addSubClassResourceInfo(org.apache.cxf.jaxrs.model.ClassResourceInfo)>(r14) in <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> ==> <org.apache.cxf.jaxrs.model.ClassResourceInfo: void addSubClassResourceInfo(org.apache.cxf.jaxrs.model.ClassResourceInfo)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> calls: <org.apache.cxf.jaxrs.model.AbstractResourceInfo: java.lang.Class getServiceClass()> via: VIRTUAL edge: $r13 = virtualinvoke r1.<org.apache.cxf.jaxrs.model.ClassResourceInfo: java.lang.Class getServiceClass()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> ==> <org.apache.cxf.jaxrs.model.AbstractResourceInfo: java.lang.Class getServiceClass()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> calls: <org.apache.cxf.jaxrs.model.ClassResourceInfo: org.apache.cxf.jaxrs.model.ClassResourceInfo findResource(java.lang.Class,java.lang.Class)> via: VIRTUAL edge: $r12 = virtualinvoke r1.<org.apache.cxf.jaxrs.model.ClassResourceInfo: org.apache.cxf.jaxrs.model.ClassResourceInfo findResource(java.lang.Class,java.lang.Class)>($r11, $r11) in <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> ==> <org.apache.cxf.jaxrs.model.ClassResourceInfo: org.apache.cxf.jaxrs.model.ClassResourceInfo findResource(java.lang.Class,java.lang.Class)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> calls: <org.apache.cxf.jaxrs.model.AbstractResourceInfo: java.lang.Class getServiceClass()> via: VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.cxf.jaxrs.model.ClassResourceInfo: java.lang.Class getServiceClass()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> ==> <org.apache.cxf.jaxrs.model.AbstractResourceInfo: java.lang.Class getServiceClass()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> calls: <org.apache.cxf.jaxrs.model.MethodDispatcher: void bind(org.apache.cxf.jaxrs.model.OperationResourceInfo,java.lang.reflect.Method[])> via: VIRTUAL edge: virtualinvoke $r0.<org.apache.cxf.jaxrs.model.MethodDispatcher: void bind(org.apache.cxf.jaxrs.model.OperationResourceInfo,java.lang.reflect.Method[])>($r9, $r10) in <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> ==> <org.apache.cxf.jaxrs.model.MethodDispatcher: void bind(org.apache.cxf.jaxrs.model.OperationResourceInfo,java.lang.reflect.Method[])>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> calls: <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.reflect.Method getAnnotatedMethod(java.lang.reflect.Method)> via: STATIC edge: $r5 = staticinvoke <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.reflect.Method getAnnotatedMethod(java.lang.reflect.Method)>(r4) in <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> ==> <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.reflect.Method getAnnotatedMethod(java.lang.reflect.Method)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> calls: <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.String getHttpMethodValue(java.lang.reflect.Method)> via: STATIC edge: $r6 = staticinvoke <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.String getHttpMethodValue(java.lang.reflect.Method)>($r5) in <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> ==> <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.String getHttpMethodValue(java.lang.reflect.Method)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> calls: <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.'annotation'.Annotation getMethodAnnotation(java.lang.reflect.Method,java.lang.Class)> via: STATIC edge: $r7 = staticinvoke <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.'annotation'.Annotation getMethodAnnotation(java.lang.reflect.Method,java.lang.Class)>($r5, class "Ljavax/ws/rs/Path;") in <org.apache.cxf.jaxrs.utils.ResourceUtils: void evaluateResourceClass(org.apache.cxf.jaxrs.model.ClassResourceInfo,boolean)> ==> <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.'annotation'.Annotation getMethodAnnotation(java.lang.reflect.Method,java.lang.Class)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: java.lang.reflect.Constructor findResourceConstructor(java.lang.Class,boolean)> calls: <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)> via: STATIC edge: $r10 = staticinvoke <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>($r9, class "Ljavax/ws/rs/core/Context;") in <org.apache.cxf.jaxrs.utils.ResourceUtils: java.lang.reflect.Constructor findResourceConstructor(java.lang.Class,boolean)> ==> <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: java.lang.reflect.Constructor findResourceConstructor(java.lang.Class,boolean)> calls: <org.apache.cxf.jaxrs.utils.AnnotationUtils: boolean isContextClass(java.lang.Class)> via: STATIC edge: $z2 = staticinvoke <org.apache.cxf.jaxrs.utils.AnnotationUtils: boolean isContextClass(java.lang.Class)>($r11) in <org.apache.cxf.jaxrs.utils.ResourceUtils: java.lang.reflect.Constructor findResourceConstructor(java.lang.Class,boolean)> ==> <org.apache.cxf.jaxrs.utils.AnnotationUtils: boolean isContextClass(java.lang.Class)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: java.lang.reflect.Constructor findResourceConstructor(java.lang.Class,boolean)> calls: <org.apache.cxf.jaxrs.utils.AnnotationUtils: boolean isValidParamAnnotations(java.lang.'annotation'.Annotation[])> via: STATIC edge: $z1 = staticinvoke <org.apache.cxf.jaxrs.utils.AnnotationUtils: boolean isValidParamAnnotations(java.lang.'annotation'.Annotation[])>($r8) in <org.apache.cxf.jaxrs.utils.ResourceUtils: java.lang.reflect.Constructor findResourceConstructor(java.lang.Class,boolean)> ==> <org.apache.cxf.jaxrs.utils.AnnotationUtils: boolean isValidParamAnnotations(java.lang.'annotation'.Annotation[])>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: java.util.List getParameters(java.lang.reflect.Method)> calls: <org.apache.cxf.helpers.CastUtils: java.util.List cast(java.util.List,java.lang.Class)> via: STATIC edge: $r8 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.List cast(java.util.List,java.lang.Class)>($r7, class "Lorg/apache/cxf/jaxrs/model/Parameter;") in <org.apache.cxf.jaxrs.utils.ResourceUtils: java.util.List getParameters(java.lang.reflect.Method)> ==> <org.apache.cxf.helpers.CastUtils: java.util.List cast(java.util.List,java.lang.Class)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> calls: <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)> via: STATIC edge: $r1 = staticinvoke <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>(r0, class "Ljavax/ws/rs/core/Context;") in <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> ==> <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> calls: <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)> via: STATIC edge: $r3 = staticinvoke <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>(r0, class "Ljavax/ws/rs/Encoded;") in <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> ==> <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> calls: <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.String getDefaultParameterValue(java.lang.'annotation'.Annotation[])> via: STATIC edge: $r4 = staticinvoke <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.String getDefaultParameterValue(java.lang.'annotation'.Annotation[])>(r0) in <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> ==> <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.String getDefaultParameterValue(java.lang.'annotation'.Annotation[])>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> calls: <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)> via: STATIC edge: $r5 = staticinvoke <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>(r0, class "Ljavax/ws/rs/PathParam;") in <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> ==> <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> calls: <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)> via: STATIC edge: $r27 = staticinvoke <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>(r0, class "Ljavax/ws/rs/QueryParam;") in <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> ==> <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> calls: <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)> via: STATIC edge: $r6 = staticinvoke <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>(r0, class "Ljavax/ws/rs/MatrixParam;") in <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> ==> <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> calls: <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)> via: STATIC edge: $r7 = staticinvoke <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>(r0, class "Ljavax/ws/rs/FormParam;") in <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> ==> <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> calls: <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)> via: STATIC edge: $r9 = staticinvoke <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>(r0, class "Ljavax/ws/rs/HeaderParam;") in <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> ==> <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> calls: <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)> via: STATIC edge: $r11 = staticinvoke <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>(r0, class "Ljavax/ws/rs/CookieParam;") in <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.Parameter getParameter(int,java.lang.'annotation'.Annotation[],java.lang.Class)> ==> <org.apache.cxf.jaxrs.utils.AnnotationUtils: java.lang.Object getAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.OperationResourceInfo createOperationInfo(java.lang.reflect.Method,java.lang.reflect.Method,org.apache.cxf.jaxrs.model.ClassResourceInfo,javax.ws.rs.Path,java.lang.String)> calls: <org.apache.cxf.jaxrs.model.URITemplate: org.apache.cxf.jaxrs.model.URITemplate createTemplate(javax.ws.rs.Path)> via: STATIC edge: $r5 = staticinvoke <org.apache.cxf.jaxrs.model.URITemplate: org.apache.cxf.jaxrs.model.URITemplate createTemplate(javax.ws.rs.Path)>(r4) in <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.OperationResourceInfo createOperationInfo(java.lang.reflect.Method,java.lang.reflect.Method,org.apache.cxf.jaxrs.model.ClassResourceInfo,javax.ws.rs.Path,java.lang.String)> ==> <org.apache.cxf.jaxrs.model.URITemplate: org.apache.cxf.jaxrs.model.URITemplate createTemplate(javax.ws.rs.Path)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.OperationResourceInfo createOperationInfo(java.lang.reflect.Method,java.lang.reflect.Method,org.apache.cxf.jaxrs.model.ClassResourceInfo,javax.ws.rs.Path,java.lang.String)> calls: <org.apache.cxf.jaxrs.model.OperationResourceInfo: void setHttpMethod(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r0.<org.apache.cxf.jaxrs.model.OperationResourceInfo: void setHttpMethod(java.lang.String)>(r6) in <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.OperationResourceInfo createOperationInfo(java.lang.reflect.Method,java.lang.reflect.Method,org.apache.cxf.jaxrs.model.ClassResourceInfo,javax.ws.rs.Path,java.lang.String)> ==> <org.apache.cxf.jaxrs.model.OperationResourceInfo: void setHttpMethod(java.lang.String)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.OperationResourceInfo createOperationInfo(java.lang.reflect.Method,java.lang.reflect.Method,org.apache.cxf.jaxrs.model.ClassResourceInfo,javax.ws.rs.Path,java.lang.String)> calls: <org.apache.cxf.jaxrs.model.OperationResourceInfo: void setURITemplate(org.apache.cxf.jaxrs.model.URITemplate)> via: VIRTUAL edge: virtualinvoke $r0.<org.apache.cxf.jaxrs.model.OperationResourceInfo: void setURITemplate(org.apache.cxf.jaxrs.model.URITemplate)>($r5) in <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.OperationResourceInfo createOperationInfo(java.lang.reflect.Method,java.lang.reflect.Method,org.apache.cxf.jaxrs.model.ClassResourceInfo,javax.ws.rs.Path,java.lang.String)> ==> <org.apache.cxf.jaxrs.model.OperationResourceInfo: void setURITemplate(org.apache.cxf.jaxrs.model.URITemplate)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: boolean checkMethodDispatcher(org.apache.cxf.jaxrs.model.ClassResourceInfo)> calls: <org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Set getOperationResourceInfos()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Set getOperationResourceInfos()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: boolean checkMethodDispatcher(org.apache.cxf.jaxrs.model.ClassResourceInfo)> ==> <org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Set getOperationResourceInfos()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: boolean checkMethodDispatcher(org.apache.cxf.jaxrs.model.ClassResourceInfo)> calls: <org.apache.cxf.jaxrs.model.AbstractResourceInfo: java.lang.Class getServiceClass()> via: VIRTUAL edge: $r7 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.ClassResourceInfo: java.lang.Class getServiceClass()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: boolean checkMethodDispatcher(org.apache.cxf.jaxrs.model.ClassResourceInfo)> ==> <org.apache.cxf.jaxrs.model.AbstractResourceInfo: java.lang.Class getServiceClass()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: boolean checkMethodDispatcher(org.apache.cxf.jaxrs.model.ClassResourceInfo)> calls: <org.apache.cxf.jaxrs.model.ClassResourceInfo: org.apache.cxf.jaxrs.model.MethodDispatcher getMethodDispatcher()> via: VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.ClassResourceInfo: org.apache.cxf.jaxrs.model.MethodDispatcher getMethodDispatcher()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: boolean checkMethodDispatcher(org.apache.cxf.jaxrs.model.ClassResourceInfo)> ==> <org.apache.cxf.jaxrs.model.ClassResourceInfo: org.apache.cxf.jaxrs.model.MethodDispatcher getMethodDispatcher()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: boolean checkMethodDispatcher(org.apache.cxf.jaxrs.model.ClassResourceInfo)> calls: <org.apache.cxf.common.i18n.Message: java.lang.String toString()> via: VIRTUAL edge: $r9 = virtualinvoke $r3.<org.apache.cxf.common.i18n.Message: java.lang.String toString()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: boolean checkMethodDispatcher(org.apache.cxf.jaxrs.model.ClassResourceInfo)> ==> <org.apache.cxf.common.i18n.Message: java.lang.String toString()>
Source here: <org.apache.cxf.jaxrs.utils.ResourceUtils: java.io.InputStream getResourceStream(java.lang.String,org.apache.cxf.Bus)>
Source here: <org.apache.cxf.jaxrs.utils.ResourceUtils: java.net.URL getResourceURL(java.lang.String,org.apache.cxf.Bus)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> calls: <org.apache.cxf.jaxrs.model.Parameter: int getIndex()> via: VIRTUAL edge: $i1 = virtualinvoke r16.<org.apache.cxf.jaxrs.model.Parameter: int getIndex()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> ==> <org.apache.cxf.jaxrs.model.Parameter: int getIndex()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> calls: <org.apache.cxf.jaxrs.model.Parameter: int getIndex()> via: VIRTUAL edge: $i0 = virtualinvoke r16.<org.apache.cxf.jaxrs.model.Parameter: int getIndex()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> ==> <org.apache.cxf.jaxrs.model.Parameter: int getIndex()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> calls: <org.apache.cxf.jaxrs.model.Parameter: org.apache.cxf.jaxrs.model.ParameterType getType()> via: VIRTUAL edge: $r17 = virtualinvoke r16.<org.apache.cxf.jaxrs.model.Parameter: org.apache.cxf.jaxrs.model.ParameterType getType()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> ==> <org.apache.cxf.jaxrs.model.Parameter: org.apache.cxf.jaxrs.model.ParameterType getType()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> calls: <org.apache.cxf.jaxrs.model.OperationResourceInfo: java.lang.reflect.Method getMethodToInvoke()> via: VIRTUAL edge: $r22 = virtualinvoke r26.<org.apache.cxf.jaxrs.model.OperationResourceInfo: java.lang.reflect.Method getMethodToInvoke()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> ==> <org.apache.cxf.jaxrs.model.OperationResourceInfo: java.lang.reflect.Method getMethodToInvoke()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> calls: <org.apache.cxf.jaxrs.model.OperationResourceInfo: java.lang.reflect.Method getMethodToInvoke()> via: VIRTUAL edge: $r19 = virtualinvoke r26.<org.apache.cxf.jaxrs.model.OperationResourceInfo: java.lang.reflect.Method getMethodToInvoke()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> ==> <org.apache.cxf.jaxrs.model.OperationResourceInfo: java.lang.reflect.Method getMethodToInvoke()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> calls: <org.apache.cxf.jaxrs.model.OperationResourceInfo: java.util.List getParameters()> via: VIRTUAL edge: $r13 = virtualinvoke r26.<org.apache.cxf.jaxrs.model.OperationResourceInfo: java.util.List getParameters()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> ==> <org.apache.cxf.jaxrs.model.OperationResourceInfo: java.util.List getParameters()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> calls: <org.apache.cxf.jaxrs.model.OperationResourceInfo: java.lang.reflect.Method getMethodToInvoke()> via: VIRTUAL edge: $r11 = virtualinvoke r26.<org.apache.cxf.jaxrs.model.OperationResourceInfo: java.lang.reflect.Method getMethodToInvoke()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> ==> <org.apache.cxf.jaxrs.model.OperationResourceInfo: java.lang.reflect.Method getMethodToInvoke()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> calls: <org.apache.cxf.jaxrs.model.OperationResourceInfo: java.lang.reflect.Method getMethodToInvoke()> via: VIRTUAL edge: $r25 = virtualinvoke r26.<org.apache.cxf.jaxrs.model.OperationResourceInfo: java.lang.reflect.Method getMethodToInvoke()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> ==> <org.apache.cxf.jaxrs.model.OperationResourceInfo: java.lang.reflect.Method getMethodToInvoke()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> calls: <org.apache.cxf.jaxrs.model.OperationResourceInfo: java.lang.reflect.Method getMethodToInvoke()> via: VIRTUAL edge: $r9 = virtualinvoke r26.<org.apache.cxf.jaxrs.model.OperationResourceInfo: java.lang.reflect.Method getMethodToInvoke()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> ==> <org.apache.cxf.jaxrs.model.OperationResourceInfo: java.lang.reflect.Method getMethodToInvoke()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> calls: <org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Set getOperationResourceInfos()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Set getOperationResourceInfos()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> ==> <org.apache.cxf.jaxrs.model.MethodDispatcher: java.util.Set getOperationResourceInfos()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> calls: <org.apache.cxf.jaxrs.model.ClassResourceInfo: java.util.Collection getSubResources()> via: VIRTUAL edge: $r4 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.ClassResourceInfo: java.util.Collection getSubResources()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> ==> <org.apache.cxf.jaxrs.model.ClassResourceInfo: java.util.Collection getSubResources()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> calls: <org.apache.cxf.jaxrs.model.ClassResourceInfo: org.apache.cxf.jaxrs.model.MethodDispatcher getMethodDispatcher()> via: VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.ClassResourceInfo: org.apache.cxf.jaxrs.model.MethodDispatcher getMethodDispatcher()>() in <org.apache.cxf.jaxrs.utils.ResourceUtils: void getAllTypesForResource(org.apache.cxf.jaxrs.model.ClassResourceInfo,java.util.Map,boolean)> ==> <org.apache.cxf.jaxrs.model.ClassResourceInfo: org.apache.cxf.jaxrs.model.MethodDispatcher getMethodDispatcher()>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void checkJaxbType(java.lang.Class,java.util.Map)> calls: <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean isReadable(java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[],javax.ws.rs.core.MediaType)> via: VIRTUAL edge: $z2 = virtualinvoke $r0.<org.apache.cxf.jaxrs.provider.JAXBElementProvider: boolean isReadable(java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[],javax.ws.rs.core.MediaType)>(r1, r1, $r4, $r3) in <org.apache.cxf.jaxrs.utils.ResourceUtils: void checkJaxbType(java.lang.Class,java.util.Map)> ==> <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean isReadable(java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[],javax.ws.rs.core.MediaType)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: void checkJaxbType(java.lang.Class,java.util.Map)> calls: <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isPrimitive(java.lang.Class)> via: STATIC edge: $z0 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isPrimitive(java.lang.Class)>(r1) in <org.apache.cxf.jaxrs.utils.ResourceUtils: void checkJaxbType(java.lang.Class,java.util.Map)> ==> <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isPrimitive(java.lang.Class)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: java.lang.Object[] createConstructorArguments(java.lang.reflect.Constructor,org.apache.cxf.message.Message)> calls: <org.apache.cxf.jaxrs.utils.AnnotationUtils: boolean isContextClass(java.lang.Class)> via: STATIC edge: $z0 = staticinvoke <org.apache.cxf.jaxrs.utils.AnnotationUtils: boolean isContextClass(java.lang.Class)>($r7) in <org.apache.cxf.jaxrs.utils.ResourceUtils: java.lang.Object[] createConstructorArguments(java.lang.reflect.Constructor,org.apache.cxf.message.Message)> ==> <org.apache.cxf.jaxrs.utils.AnnotationUtils: boolean isContextClass(java.lang.Class)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: java.lang.Object[] createConstructorArguments(java.lang.reflect.Constructor,org.apache.cxf.message.Message)> calls: <org.apache.cxf.jaxrs.utils.JAXRSUtils: java.lang.Object createContextValue(org.apache.cxf.message.Message,java.lang.reflect.Type,java.lang.Class)> via: STATIC edge: $r17 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXRSUtils: java.lang.Object createContextValue(org.apache.cxf.message.Message,java.lang.reflect.Type,java.lang.Class)>(r4, $r16, $r15) in <org.apache.cxf.jaxrs.utils.ResourceUtils: java.lang.Object[] createConstructorArguments(java.lang.reflect.Constructor,org.apache.cxf.message.Message)> ==> <org.apache.cxf.jaxrs.utils.JAXRSUtils: java.lang.Object createContextValue(org.apache.cxf.message.Message,java.lang.reflect.Type,java.lang.Class)>
Global flow here: <org.apache.cxf.jaxrs.utils.ResourceUtils: java.lang.Object[] createConstructorArguments(java.lang.reflect.Constructor,org.apache.cxf.message.Message)> calls: <org.apache.cxf.jaxrs.utils.JAXRSUtils: java.lang.Object createHttpParameterValue(org.apache.cxf.jaxrs.model.Parameter,java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[],org.apache.cxf.message.Message,javax.ws.rs.core.MultivaluedMap,org.apache.cxf.jaxrs.model.OperationResourceInfo)> via: STATIC edge: $r14 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXRSUtils: java.lang.Object createHttpParameterValue(org.apache.cxf.jaxrs.model.Parameter,java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[],org.apache.cxf.message.Message,javax.ws.rs.core.MultivaluedMap,org.apache.cxf.jaxrs.model.OperationResourceInfo)>($r10, $r13, $r12, $r11, r4, r6, null) in <org.apache.cxf.jaxrs.utils.ResourceUtils: java.lang.Object[] createConstructorArguments(java.lang.reflect.Constructor,org.apache.cxf.message.Message)> ==> <org.apache.cxf.jaxrs.utils.JAXRSUtils: java.lang.Object createHttpParameterValue(org.apache.cxf.jaxrs.model.Parameter,java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[],org.apache.cxf.message.Message,javax.ws.rs.core.MultivaluedMap,org.apache.cxf.jaxrs.model.OperationResourceInfo)>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: checkMethodDispatcher
2: createClassResourceInfo
3: evaluateResourceClass
4: createResourceInfo
Flows from source is finished.
Start traversal for source: <javax.activation.URLDataSource: java.lang.String getName()>...
Starting from source: 
0: getName
1: checkMethodDispatcher
2: createClassResourceInfo
3: evaluateResourceClass
4: createResourceInfo
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getPath()>...
Starting from source: 
0: getPath
1: createClassResourceInfo
2: evaluateResourceClass
3: createResourceInfo
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.AttachmentDeserializer: boolean hasNext()>...
Starting from source: 
0: hasNext
1: getAllTypesForResource
2: getAllRequestResponseTypes
3: setDataBindingProvider
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.FileResource: java.lang.String getName()>...
Starting from source: 
0: getName
1: checkMethodDispatcher
2: createClassResourceInfo
3: evaluateResourceClass
4: createResourceInfo
Flows from source is finished.
Start traversal for source: <java.net.URL: java.lang.String getPath()>...
Starting from source: 
0: getPath
1: createClassResourceInfo
2: evaluateResourceClass
3: createResourceInfo
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: checkMethodDispatcher
2: createClassResourceInfo
3: evaluateResourceClass
4: createResourceInfo
Flows from source is finished.
Start traversal for source: <javax.activation.FileDataSource: java.lang.String getName()>...
Starting from source: 
0: getName
1: checkMethodDispatcher
2: createClassResourceInfo
3: evaluateResourceClass
4: createResourceInfo
Flows from source is finished.
Now we build call graphs for class: com.ctc.wstx.io.ReaderBootstrapper
Source here: <com.ctc.wstx.io.ReaderBootstrapper: void loadMore()>
Now we build call graphs for class: org.eclipse.jetty.http.HttpParser
Source here: <org.eclipse.jetty.http.HttpParser: int available()>
Now we build call graphs for class: org.apache.cxf.transport.servlet.servicelist.ServiceListGeneratorServlet
Source here: <org.apache.cxf.transport.servlet.servicelist.ServiceListGeneratorServlet: void renderStyleSheet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
Now we build call graphs for class: javax.mail.util.SharedFileInputStream$SharedFileSource
Source here: <javax.mail.util.SharedFileInputStream$SharedFileSource: int read(long,byte[],int,int)>
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit: void close(org.apache.cxf.message.Message)>...
Starting from source: 
0: close
1: finalize
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>...
Starting from source: 
0: close
1: finalize
Flows from source is finished.
Now we build call graphs for class: com.sun.xml.bind.Util
Source here: <com.sun.xml.bind.Util: java.lang.String getSystemProperty(java.lang.String)>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: getSystemProperty
Flows from source is finished.
Start traversal for source: <com.sun.xml.bind.Util: java.lang.String getSystemProperty(java.lang.String)>...
Starting from source: 
0: getSystemProperty
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getSystemProperty
Flows from source is finished.
Now we build call graphs for class: org.springframework.web.multipart.commons.CommonsMultipartFile
Source here: <org.springframework.web.multipart.commons.CommonsMultipartFile: void transferTo(java.io.File)>
Source here: <org.springframework.web.multipart.commons.CommonsMultipartFile: java.lang.String getStorageDescription()>
Now we build call graphs for class: javax.mail.search.SubjectTerm
Source here: <javax.mail.search.SubjectTerm: boolean match(javax.mail.Message)>
Now we build call graphs for class: org.apache.cxf.transport.servlet.ServletContextResourceResolver
Source here: <org.apache.cxf.transport.servlet.ServletContextResourceResolver: java.io.InputStream getAsStream(java.lang.String)>
Source here: <org.apache.cxf.transport.servlet.ServletContextResourceResolver: java.lang.Object resolve(java.lang.String,java.lang.Class)>
Now we build call graphs for class: org.springframework.http.client.SimpleClientHttpResponse
Source here: <org.springframework.http.client.SimpleClientHttpResponse: java.io.InputStream getBody()>
Now we build call graphs for class: org.apache.log4j.xml.DOMConfigurator$2
Source here: <org.apache.log4j.xml.DOMConfigurator$2: org.w3c.dom.Document parse(javax.xml.parsers.DocumentBuilder)>
Now we build call graphs for class: org.springframework.util.FileCopyUtils
Source here: <org.springframework.util.FileCopyUtils: int copy(java.io.InputStream,java.io.OutputStream)>
Source here: <org.springframework.util.FileCopyUtils: int copy(java.io.Reader,java.io.Writer)>
Now we build call graphs for class: org.eclipse.jetty.server.session.HashSessionManager
Source here: <org.eclipse.jetty.server.session.HashSessionManager: void restoreSessions()>
Source here: <org.eclipse.jetty.server.session.HashSessionManager: void saveSessions(boolean)>
Source here: <org.eclipse.jetty.server.session.HashSessionManager: org.eclipse.jetty.server.session.HashedSession restoreSession(java.io.InputStream,org.eclipse.jetty.server.session.HashedSession)>
Now we build call graphs for class: org.apache.cxf.catalog.OASISCatalogManager
Global flow here: <org.apache.cxf.catalog.OASISCatalogManager: org.xml.sax.EntityResolver getResolver()> calls: <org.apache.xml.resolver.CatalogManager: void setIgnoreMissingProperties(boolean)> via: VIRTUAL edge: virtualinvoke $r6.<org.apache.xml.resolver.CatalogManager: void setIgnoreMissingProperties(boolean)>(1) in <org.apache.cxf.catalog.OASISCatalogManager: org.xml.sax.EntityResolver getResolver()> ==> <org.apache.xml.resolver.CatalogManager: void setIgnoreMissingProperties(boolean)>
Global flow here: <org.apache.cxf.catalog.OASISCatalogManager: org.xml.sax.EntityResolver getResolver()> calls: <org.apache.xml.resolver.CatalogManager: void setUseStaticCatalog(boolean)> via: VIRTUAL edge: virtualinvoke $r6.<org.apache.xml.resolver.CatalogManager: void setUseStaticCatalog(boolean)>(0) in <org.apache.cxf.catalog.OASISCatalogManager: org.xml.sax.EntityResolver getResolver()> ==> <org.apache.xml.resolver.CatalogManager: void setUseStaticCatalog(boolean)>
Global flow here: <org.apache.cxf.catalog.OASISCatalogManager: void loadCatalogs(java.lang.ClassLoader,java.lang.String)> calls: <jdk.internal.loader.Loader$3: java.net.URL nextElement()> via: INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>() in <org.apache.cxf.catalog.OASISCatalogManager: void loadCatalogs(java.lang.ClassLoader,java.lang.String)> ==> <jdk.internal.loader.Loader$3: java.net.URL nextElement()>
Global flow here: <org.apache.cxf.catalog.OASISCatalogManager: void loadCatalogs(java.lang.ClassLoader,java.lang.String)> calls: <jdk.internal.loader.Loader$3: boolean hasMoreElements()> via: INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>() in <org.apache.cxf.catalog.OASISCatalogManager: void loadCatalogs(java.lang.ClassLoader,java.lang.String)> ==> <jdk.internal.loader.Loader$3: boolean hasMoreElements()>
Global flow here: <org.apache.cxf.catalog.OASISCatalogManager: void loadCatalogs(java.lang.ClassLoader,java.lang.String)> calls: <jdk.internal.loader.Loader: java.util.Enumeration getResources(java.lang.String)> via: VIRTUAL edge: $r4 = virtualinvoke r0.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r3) in <org.apache.cxf.catalog.OASISCatalogManager: void loadCatalogs(java.lang.ClassLoader,java.lang.String)> ==> <jdk.internal.loader.Loader: java.util.Enumeration getResources(java.lang.String)>
Source here: <org.apache.cxf.catalog.OASISCatalogManager: void loadCatalog(java.net.URL)>
Start traversal for source: <org.apache.ws.commons.schema.resolver.DefaultURIResolver: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String)>...
Starting from source: 
0: resolveEntity
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.servlet.ServletContextResourceResolver: java.lang.Object resolve(java.lang.String,java.lang.Class)>...
Starting from source: 
0: resolve
Flows from source is finished.
Start traversal for source: <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)>...
Starting from source: 
0: resolve
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: loadCatalogs
2: loadContextCatalogs
3: getContextCatalog
4: getCatalogManager
5: resolveEntity
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.staxutils.StaxUtils
Global flow here: <org.apache.cxf.staxutils.StaxUtils: org.w3c.dom.Document read(javax.xml.stream.XMLStreamReader,boolean)> calls: <org.apache.cxf.helpers.DOMUtils: org.w3c.dom.Document createDocument()> via: STATIC edge: $r0 = staticinvoke <org.apache.cxf.helpers.DOMUtils: org.w3c.dom.Document createDocument()>() in <org.apache.cxf.staxutils.StaxUtils: org.w3c.dom.Document read(javax.xml.stream.XMLStreamReader,boolean)> ==> <org.apache.cxf.helpers.DOMUtils: org.w3c.dom.Document createDocument()>
Global flow here: <org.apache.cxf.staxutils.StaxUtils: boolean isDeclared(org.w3c.dom.Element,java.lang.String,java.lang.String)> calls: <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)> via: STATIC edge: $z1 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r0) in <org.apache.cxf.staxutils.StaxUtils: boolean isDeclared(org.w3c.dom.Element,java.lang.String,java.lang.String)> ==> <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>
Global flow here: <org.apache.cxf.staxutils.StaxUtils: boolean isDeclared(org.w3c.dom.Element,java.lang.String,java.lang.String)> calls: <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)> via: STATIC edge: $z2 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r2) in <org.apache.cxf.staxutils.StaxUtils: boolean isDeclared(org.w3c.dom.Element,java.lang.String,java.lang.String)> ==> <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>
Global flow here: <org.apache.cxf.staxutils.StaxUtils: void readDocElements(org.w3c.dom.Document,org.w3c.dom.Node,javax.xml.stream.XMLStreamReader,boolean,boolean,boolean)> calls: <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)> via: STATIC edge: $z2 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r18) in <org.apache.cxf.staxutils.StaxUtils: void readDocElements(org.w3c.dom.Document,org.w3c.dom.Node,javax.xml.stream.XMLStreamReader,boolean,boolean,boolean)> ==> <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>
Source here: <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamReader createXMLStreamReader(org.xml.sax.InputSource)>
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read(char[],int,int)>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.BaseReader: int read()>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamReader createXMLStreamReader(org.xml.sax.InputSource)>...
Starting from source: 
0: createXMLStreamReader
1: read
2: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <org.codehaus.stax2.validation.XMLValidationSchemaFactory: org.codehaus.stax2.validation.XMLValidationSchemaFactory newInstance(java.lang.String,java.lang.ClassLoader)>...
Starting from source: 
0: newInstance
1: createXMLInputFactory
2: getXMLInputFactory
3: createXMLStreamReader
4: read
5: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <java.io.RandomAccessFile: int read(byte[],int,int)>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <java.io.FileInputStream: int read(byte[])>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: int read(byte[])>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[])>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <java.io.ByteArrayInputStream: int read()>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <java.io.PushbackInputStream: int read()>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: int read()>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read()>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int read()>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <javax.mail.internet.MimeMultipart$MimeBodyPartInputStream: int read()>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[],int,int)>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int read(byte[])>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <java.io.InputStreamReader: int read()>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: declare
2: readDocElements
3: read
4: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Start traversal for source: <javax.mail.util.SharedFileInputStream$SharedFileSource: int read(long,byte[],int,int)>...
Starting from source: 
0: read
1: getExtensionsFromXML
Flows from source is finished.
Now we build call graphs for class: javax.mail.Transport
Source here: <javax.mail.Transport: void send(javax.mail.Message)>
Now we build call graphs for class: javax.xml.bind.ContextFinder
Source here: <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext find(java.lang.String,java.lang.String,java.lang.ClassLoader,java.util.Map)>
Source here: <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext find(java.lang.Class[],java.util.Map)>
Global flow here: <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext find(java.lang.Class[],java.util.Map)> calls: <jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)> via: VIRTUAL edge: r68 = virtualinvoke $r19.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($r17) in <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext find(java.lang.Class[],java.util.Map)> ==> <jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)>
Source here: <javax.xml.bind.ContextFinder: java.util.Properties loadJAXBProperties(java.lang.ClassLoader,java.lang.String)>
Global flow here: <javax.xml.bind.ContextFinder: java.util.Properties loadJAXBProperties(java.lang.ClassLoader,java.lang.String)> calls: <jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)> via: VIRTUAL edge: r16 = virtualinvoke r0.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1) in <javax.xml.bind.ContextFinder: java.util.Properties loadJAXBProperties(java.lang.ClassLoader,java.lang.String)> ==> <jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)>
Global flow here: <javax.xml.bind.ContextFinder: java.util.Properties loadJAXBProperties(java.lang.ClassLoader,java.lang.String)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke $r5.<java.io.InputStream: void close()>() in <javax.xml.bind.ContextFinder: java.util.Properties loadJAXBProperties(java.lang.ClassLoader,java.lang.String)> ==> <sun.net.www.MeteredStream: void close()>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: which
2: newInstance
3: find
4: handleClassCastException
Flows from source is finished.
Start traversal for source: <javax.mail.internet.MimeMultipart: byte[] readLine(java.io.BufferedInputStream)>...
Starting from source: 
0: readLine
1: find
2: newInstance
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: find
2: newInstance
Flows from source is finished.
Start traversal for source: <org.codehaus.stax2.validation.XMLValidationSchemaFactory: org.codehaus.stax2.validation.XMLValidationSchemaFactory newInstance(java.lang.String,java.lang.ClassLoader)>...
Starting from source: 
0: newInstance
1: find
Flows from source is finished.
Start traversal for source: <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext find(java.lang.Class[],java.util.Map)>...
Starting from source: 
0: find
1: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit: void close(org.apache.cxf.message.Message)>...
Starting from source: 
0: close
1: loadJAXBProperties
2: find
3: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.utils.CollectionFactory$1: java.lang.Boolean run()>...
Starting from source: 
0: run
1: find
2: newInstance
Flows from source is finished.
Start traversal for source: <javax.ws.rs.ext.FactoryFinder: java.lang.Object find(java.lang.String,java.lang.String)>...
Starting from source: 
0: find
1: newInstance
Flows from source is finished.
Start traversal for source: <javax.activation.URLDataSource: java.lang.String getName()>...
Starting from source: 
0: getName
1: which
2: newInstance
3: find
4: handleClassCastException
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: find
2: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void load(java.lang.String,java.lang.ClassLoader)>...
Starting from source: 
0: load
1: loadJAXBProperties
2: find
3: newInstance
Flows from source is finished.
Start traversal for source: <java.io.LineNumberReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: find
2: newInstance
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.FileResource: java.lang.String getName()>...
Starting from source: 
0: getName
1: which
2: newInstance
3: find
4: handleClassCastException
Flows from source is finished.
Start traversal for source: <java.net.URL: java.io.InputStream openStream()>...
Starting from source: 
0: openStream
1: loadJAXBProperties
2: find
3: newInstance
Flows from source is finished.
Start traversal for source: <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext find(java.lang.String,java.lang.String,java.lang.ClassLoader,java.util.Map)>...
Starting from source: 
0: find
1: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
1: find
2: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.commands.ForkedCommandStreamHandler: void run()>...
Starting from source: 
0: run
1: find
2: newInstance
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: find
2: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
1: find
2: newInstance
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: find
2: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: find
2: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: find
2: newInstance
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.log.Log$1: java.lang.Object run()>...
Starting from source: 
0: run
1: find
2: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.XmlSchemaCollection$1: java.lang.String run()>...
Starting from source: 
0: run
1: find
2: newInstance
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: which
2: newInstance
3: find
4: handleClassCastException
5: loadJAXBProperties
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.StreamPrinter: void run()>...
Starting from source: 
0: run
1: find
2: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>...
Starting from source: 
0: close
1: loadJAXBProperties
2: find
3: newInstance
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.TypeUtil: byte[] readLine(java.io.InputStream)>...
Starting from source: 
0: readLine
1: find
2: newInstance
Flows from source is finished.
Start traversal for source: <javax.xml.bind.ContextFinder: java.util.Properties loadJAXBProperties(java.lang.ClassLoader,java.lang.String)>...
Starting from source: 
0: loadJAXBProperties
1: find
2: newInstance
Flows from source is finished.
Start traversal for source: <javax.activation.FileDataSource: java.lang.String getName()>...
Starting from source: 
0: getName
1: which
2: newInstance
3: find
4: handleClassCastException
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.common.util.JarResource
Source here: <org.apache.cxf.common.util.JarResource: java.util.List getJarContents(java.net.URL)>
Now we build call graphs for class: javax.mail.internet.InternetAddress
Source here: <javax.mail.internet.InternetAddress: javax.mail.internet.InternetAddress getLocalAddress(javax.mail.Session)>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()>...
Starting from source: 
0: getMRUFileList
Flows from source is finished.
Start traversal for source: <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext find(java.lang.Class[],java.util.Map)>...
Starting from source: 
0: find
Flows from source is finished.
Start traversal for source: <javax.ws.rs.ext.FactoryFinder: java.lang.Object find(java.lang.String,java.lang.String)>...
Starting from source: 
0: find
Flows from source is finished.
Start traversal for source: <javax.activation.URLDataSource: java.lang.String getName()>...
Starting from source: 
0: getName
Flows from source is finished.
Start traversal for source: <java.io.File: int hashCode()>...
Starting from source: 
0: hashCode
1: putVal
2: toString
3: formatAddress
4: valueToString
5: getMatchingKey
6: lambda$toString$0
7: getName
8: getNamespaceURI
9: get
10: getMRUFileList
11: getKeyNames
12: objectToString
13: valueOf
14: notifyAction
15: verifyManifestMainAttrs
16: verifyManifestHash
17: verifySection
18: setEntry
19: subformat
20: isTrue
21: compare
22: deepToString
23: putClientProperty
24: getStepLocalName
25: writeOrdinaryObject
26: valueChanged
27: getStringValueAt
28: getColumnName
29: getTableCellRendererComponent
30: setValue
31: convertValueToText
32: printString
33: equals
34: getLocalAttribute
35: findTreeNode
36: find
37: getNode
38: valEquals
39: indexOf
40: isGroup
41: indexOfRange
42: matches
43: deepEquals0
44: containsAttributes
45: removeAttributes
46: drawString
47: replaceNode
48: postRemoveUpdate
49: insertUpdate
50: handleInsertString
51: insertString
52: addFont
53: union
54: firePropertyChange
55: eq
56: probe
57: putIfAbsent
58: removeNode
59: containsValue
60: contains
61: remove
62: containsKey
63: put
64: propertyChange
65: addToVector
66: getSelectedIndex
67: valuesMatch
68: contentsChanged
69: setSelectedItem
70: putTreeVal
71: accept
72: hash
73: addEntry
74: hashCodeRange
75: deepHashCode
76: printHashCode
77: hashCodeOfRange
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.FileResource: java.lang.String getName()>...
Starting from source: 
0: getName
Flows from source is finished.
Start traversal for source: <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext find(java.lang.String,java.lang.String,java.lang.ClassLoader,java.util.Map)>...
Starting from source: 
0: find
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.FileResource: int hashCode()>...
Starting from source: 
0: hashCode
1: putVal
2: toString
3: formatAddress
4: valueToString
5: getMatchingKey
6: lambda$toString$0
7: getName
8: getNamespaceURI
9: get
10: getMRUFileList
11: getKeyNames
12: objectToString
13: valueOf
14: notifyAction
15: verifyManifestMainAttrs
16: verifyManifestHash
17: verifySection
18: setEntry
19: subformat
20: isTrue
21: compare
22: deepToString
23: putClientProperty
24: getStepLocalName
25: writeOrdinaryObject
26: valueChanged
27: getStringValueAt
28: getColumnName
29: getTableCellRendererComponent
30: setValue
31: convertValueToText
32: printString
33: equals
34: getLocalAttribute
35: findTreeNode
36: find
37: getNode
38: valEquals
39: indexOf
40: isGroup
41: indexOfRange
42: matches
43: deepEquals0
44: containsAttributes
45: removeAttributes
46: drawString
47: replaceNode
48: postRemoveUpdate
49: insertUpdate
50: handleInsertString
51: insertString
52: addFont
53: union
54: firePropertyChange
55: eq
56: probe
57: putIfAbsent
58: removeNode
59: containsValue
60: contains
61: remove
62: containsKey
63: put
64: propertyChange
65: addToVector
66: getSelectedIndex
67: valuesMatch
68: contentsChanged
69: setSelectedItem
70: putTreeVal
71: accept
72: hash
73: addEntry
74: hashCodeRange
75: deepHashCode
76: printHashCode
77: hashCodeOfRange
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: formatAddress
2: valueToString
3: getMatchingKey
4: lambda$toString$0
5: getName
6: getNamespaceURI
7: get
8: getMRUFileList
9: getKeyNames
10: objectToString
11: valueOf
12: notifyAction
13: verifyManifestMainAttrs
14: verifyManifestHash
15: verifySection
16: setEntry
17: subformat
18: isTrue
19: compare
20: deepToString
21: putClientProperty
22: getStepLocalName
23: writeOrdinaryObject
24: valueChanged
25: getStringValueAt
26: getColumnName
27: getTableCellRendererComponent
28: setValue
29: convertValueToText
30: printString
31: equals
32: getLocalAttribute
33: findTreeNode
34: find
35: getNode
36: putVal
37: valEquals
38: indexOf
39: isGroup
40: indexOfRange
41: matches
42: deepEquals0
43: containsAttributes
44: removeAttributes
45: drawString
46: replaceNode
47: postRemoveUpdate
48: insertUpdate
49: handleInsertString
50: insertString
51: addFont
52: union
53: firePropertyChange
54: eq
55: probe
56: putIfAbsent
57: removeNode
58: containsValue
59: contains
60: remove
61: containsKey
62: put
63: propertyChange
64: addToVector
65: getSelectedIndex
66: valuesMatch
67: contentsChanged
68: setSelectedItem
69: putTreeVal
70: accept
Flows from source is finished.
Start traversal for source: <javax.activation.FileDataSource: java.lang.String getName()>...
Starting from source: 
0: getName
Flows from source is finished.
Now we build call graphs for class: javax.mail.Message
Source here: <javax.mail.Message: javax.mail.Address[] getAllRecipients()>
Source here: <javax.mail.Message: java.lang.String getSubject()>
Source here: <javax.mail.Message: java.util.Date getSentDate()>
Source here: <javax.mail.Message: int getMessageNumber()>
Source here: <javax.mail.Message: javax.mail.Folder getFolder()>
Now we build call graphs for class: org.apache.neethi.PolicyReference
Source here: <org.apache.neethi.PolicyReference: org.apache.neethi.Policy getRemoteReferencedPolicy(java.lang.String)>
Now we build call graphs for class: org.apache.cxf.attachment.DelegatingInputStream
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: void close()> calls: <sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()> via: VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <org.apache.cxf.attachment.DelegatingInputStream: void close()> ==> <sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()>
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: void close()> calls: <sun.nio.ch.ChannelInputStream: void close()> via: VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <org.apache.cxf.attachment.DelegatingInputStream: void close()> ==> <sun.nio.ch.ChannelInputStream: void close()>
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: void close()> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <org.apache.cxf.attachment.DelegatingInputStream: void close()> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: void close()> calls: <org.apache.cxf.io.CachedOutputStream$1: void close()> via: VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <org.apache.cxf.attachment.DelegatingInputStream: void close()> ==> <org.apache.cxf.io.CachedOutputStream$1: void close()>
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: void close()> calls: <org.apache.cxf.attachment.MimeBodyPartInputStream: void close()> via: VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <org.apache.cxf.attachment.DelegatingInputStream: void close()> ==> <org.apache.cxf.attachment.MimeBodyPartInputStream: void close()>
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: void close()> calls: <org.apache.cxf.attachment.AttachmentDeserializer: void markClosed(org.apache.cxf.attachment.DelegatingInputStream)> via: VIRTUAL edge: virtualinvoke $r4.<org.apache.cxf.attachment.AttachmentDeserializer: void markClosed(org.apache.cxf.attachment.DelegatingInputStream)>(r0) in <org.apache.cxf.attachment.DelegatingInputStream: void close()> ==> <org.apache.cxf.attachment.AttachmentDeserializer: void markClosed(org.apache.cxf.attachment.DelegatingInputStream)>
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: void close()> calls: <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> via: STATIC edge: staticinvoke <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)>($r1) in <org.apache.cxf.attachment.DelegatingInputStream: void close()> ==> <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)>
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: int read()> calls: <org.apache.cxf.attachment.MimeBodyPartInputStream: int read()> via: VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.cxf.attachment.DelegatingInputStream: int read()> ==> <org.apache.cxf.attachment.MimeBodyPartInputStream: int read()>
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: int read()> calls: <sun.nio.ch.ChannelInputStream: int read()> via: VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.cxf.attachment.DelegatingInputStream: int read()> ==> <sun.nio.ch.ChannelInputStream: int read()>
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: int read()> calls: <sun.net.www.MeteredStream: int read()> via: VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.cxf.attachment.DelegatingInputStream: int read()> ==> <sun.net.www.MeteredStream: int read()>
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: int read()> calls: <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int read()> via: VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <org.apache.cxf.attachment.DelegatingInputStream: int read()> ==> <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int read()>
Source here: <org.apache.cxf.attachment.DelegatingInputStream: int available()>
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: int available()> calls: <sun.nio.ch.ChannelInputStream: int available()> via: VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.apache.cxf.attachment.DelegatingInputStream: int available()> ==> <sun.nio.ch.ChannelInputStream: int available()>
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: int available()> calls: <sun.net.www.MeteredStream: int available()> via: VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>() in <org.apache.cxf.attachment.DelegatingInputStream: int available()> ==> <sun.net.www.MeteredStream: int available()>
Source here: <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[],int,int)>
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[],int,int)> calls: <org.apache.cxf.attachment.MimeBodyPartInputStream: int read(byte[],int,int)> via: VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[],int,int)> ==> <org.apache.cxf.attachment.MimeBodyPartInputStream: int read(byte[],int,int)>
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[],int,int)> calls: <sun.nio.ch.ChannelInputStream: int read(byte[],int,int)> via: VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[],int,int)> ==> <sun.nio.ch.ChannelInputStream: int read(byte[],int,int)>
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[],int,int)> calls: <sun.net.www.MeteredStream: int read(byte[],int,int)> via: VIRTUAL edge: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1) in <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[],int,int)> ==> <sun.net.www.MeteredStream: int read(byte[],int,int)>
Source here: <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[])>
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: long skip(long)> calls: <sun.nio.ch.ChannelInputStream: long skip(long)> via: VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.apache.cxf.attachment.DelegatingInputStream: long skip(long)> ==> <sun.nio.ch.ChannelInputStream: long skip(long)>
Global flow here: <org.apache.cxf.attachment.DelegatingInputStream: long skip(long)> calls: <sun.net.www.MeteredStream: long skip(long)> via: VIRTUAL edge: $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0) in <org.apache.cxf.attachment.DelegatingInputStream: long skip(long)> ==> <sun.net.www.MeteredStream: long skip(long)>
Start traversal for source: <javax.mail.internet.MimeMultipart: byte[] readLine(java.io.BufferedInputStream)>...
Starting from source: 
0: readLine
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read(char[],int,int)>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.BaseReader: int read()>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit: void close(org.apache.cxf.message.Message)>...
Starting from source: 
0: close
1: loadIntoBAIS
2: read
3: decodeNonspaceChar
4: readLine
5: copy
6: readNBytes
7: skip
8: skipBytes
9: fill
10: read1
11: readFully
12: readBytes
13: consume
14: readBoolean
15: readUnsignedByte
16: readChar
17: readUnsignedShort
18: readShort
19: readInt
20: readByte
21: getRequiredData
22: getIconBytes
23: fillProperties
24: getInputStream
25: cache
26: closeAll
27: getApplicationResources
28: loadProperties
29: createRules
30: loadPropertyResourceBundle
31: findFactoryImplName
32: activateDeferredProfile
33: getInstance
34: nextStream
35: implClose
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cache
Flows from source is finished.
Start traversal for source: <java.io.ObjectInputStream: int readInt()>...
Starting from source: 
0: readInt
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.DelegatingInputStream: int available()>...
Starting from source: 
0: available
1: inReady
2: copy
3: consume
4: close
5: loadIntoBAIS
6: read
7: decodeNonspaceChar
8: readLine
9: readNBytes
10: skip
11: skipBytes
12: fill
13: read1
14: readFully
15: readBytes
16: readBoolean
17: readUnsignedByte
18: readChar
19: readUnsignedShort
20: readShort
21: readInt
22: readByte
23: getRequiredData
24: getIconBytes
25: fillProperties
26: getInputStream
27: cache
28: closeAll
29: getApplicationResources
30: loadProperties
31: createRules
32: loadPropertyResourceBundle
33: findFactoryImplName
34: activateDeferredProfile
35: getInstance
36: nextStream
37: implClose
38: toString
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[])>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <java.io.RandomAccessFile: int read(byte[],int,int)>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <java.io.FileInputStream: int read(byte[])>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: int read(byte[])>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <java.io.LineNumberReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.BaseReader: int readBytes()>...
Starting from source: 
0: readBytes
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int available()>...
Starting from source: 
0: available
1: inReady
2: copy
3: consume
4: close
5: loadIntoBAIS
6: read
7: decodeNonspaceChar
8: readLine
9: readNBytes
10: skip
11: skipBytes
12: fill
13: read1
14: readFully
15: readBytes
16: readBoolean
17: readUnsignedByte
18: readChar
19: readUnsignedShort
20: readShort
21: readInt
22: readByte
23: getRequiredData
24: getIconBytes
25: fillProperties
26: getInputStream
27: cache
28: closeAll
29: getApplicationResources
30: loadProperties
31: createRules
32: loadPropertyResourceBundle
33: findFactoryImplName
34: activateDeferredProfile
35: getInstance
36: nextStream
37: implClose
38: toString
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[])>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: cache
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.Base64DecoderStream: int available()>...
Starting from source: 
0: available
1: inReady
2: copy
3: consume
4: close
5: loadIntoBAIS
6: read
7: decodeNonspaceChar
8: readLine
9: readNBytes
10: skip
11: skipBytes
12: fill
13: read1
14: readFully
15: readBytes
16: readBoolean
17: readUnsignedByte
18: readChar
19: readUnsignedShort
20: readShort
21: readInt
22: readByte
23: getRequiredData
24: getIconBytes
25: fillProperties
26: getInputStream
27: cache
28: closeAll
29: getApplicationResources
30: loadProperties
31: createRules
32: loadPropertyResourceBundle
33: findFactoryImplName
34: activateDeferredProfile
35: getInstance
36: nextStream
37: implClose
38: toString
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int available()>...
Starting from source: 
0: available
1: inReady
2: copy
3: consume
4: close
5: loadIntoBAIS
6: read
7: decodeNonspaceChar
8: readLine
9: readNBytes
10: skip
11: skipBytes
12: fill
13: read1
14: readFully
15: readBytes
16: readBoolean
17: readUnsignedByte
18: readChar
19: readUnsignedShort
20: readShort
21: readInt
22: readByte
23: getRequiredData
24: getIconBytes
25: fillProperties
26: getInputStream
27: cache
28: closeAll
29: getApplicationResources
30: loadProperties
31: createRules
32: loadPropertyResourceBundle
33: findFactoryImplName
34: activateDeferredProfile
35: getInstance
36: nextStream
37: implClose
38: toString
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <java.io.RandomAccessFile: byte readByte()>...
Starting from source: 
0: readByte
Flows from source is finished.
Start traversal for source: <java.io.ByteArrayInputStream: int read()>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <java.io.PushbackInputStream: int read()>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.http.HttpParser: int available()>...
Starting from source: 
0: available
1: inReady
2: copy
3: consume
4: close
5: loadIntoBAIS
6: read
7: decodeNonspaceChar
8: readLine
9: readNBytes
10: skip
11: skipBytes
12: fill
13: read1
14: readFully
15: readBytes
16: readBoolean
17: readUnsignedByte
18: readChar
19: readUnsignedShort
20: readShort
21: readInt
22: readByte
23: getRequiredData
24: getIconBytes
25: fillProperties
26: getInputStream
27: cache
28: closeAll
29: getApplicationResources
30: loadProperties
31: createRules
32: loadPropertyResourceBundle
33: findFactoryImplName
34: activateDeferredProfile
35: getInstance
36: nextStream
37: implClose
38: toString
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: int read()>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read()>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cache
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.AttachmentDeserializer: void markClosed(org.apache.cxf.attachment.DelegatingInputStream)>...
Starting from source: 
0: markClosed
1: close
2: loadIntoBAIS
3: read
4: decodeNonspaceChar
5: readLine
6: copy
7: readNBytes
8: skip
9: skipBytes
10: fill
11: read1
12: readFully
13: readBytes
14: consume
15: readBoolean
16: readUnsignedByte
17: readChar
18: readUnsignedShort
19: readShort
20: readInt
21: readByte
22: getRequiredData
23: getIconBytes
24: fillProperties
25: getInputStream
26: cache
27: closeAll
28: getApplicationResources
29: loadProperties
30: createRules
31: loadPropertyResourceBundle
32: findFactoryImplName
33: activateDeferredProfile
34: getInstance
35: nextStream
36: implClose
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.ClassReader: int readShort()>...
Starting from source: 
0: readShort
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: short readShort()>...
Starting from source: 
0: readShort
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int read()>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <javax.mail.internet.MimeMultipart$MimeBodyPartInputStream: int read()>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[],int,int)>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int read(byte[])>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: byte readByte()>...
Starting from source: 
0: readByte
Flows from source is finished.
Start traversal for source: <java.io.InputStreamReader: int read()>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int decodeNonspaceChar(int)>...
Starting from source: 
0: decodeNonspaceChar
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedStream: int available()>...
Starting from source: 
0: available
1: inReady
2: copy
3: consume
4: close
5: loadIntoBAIS
6: read
7: decodeNonspaceChar
8: readLine
9: readNBytes
10: skip
11: skipBytes
12: fill
13: read1
14: readFully
15: readBytes
16: readBoolean
17: readUnsignedByte
18: readChar
19: readUnsignedShort
20: readShort
21: readInt
22: readByte
23: getRequiredData
24: getIconBytes
25: fillProperties
26: getInputStream
27: cache
28: closeAll
29: getApplicationResources
30: loadProperties
31: createRules
32: loadPropertyResourceBundle
33: findFactoryImplName
34: activateDeferredProfile
35: getInstance
36: nextStream
37: implClose
38: toString
Flows from source is finished.
Start traversal for source: <org.springframework.util.FileCopyUtils: int copy(java.io.Reader,java.io.Writer)>...
Starting from source: 
0: copy
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.util.StreamUtils: void copy(java.io.InputStream,java.io.OutputStream,int)>...
Starting from source: 
0: copy
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int available()>...
Starting from source: 
0: available
1: inReady
2: copy
3: consume
4: close
5: loadIntoBAIS
6: read
7: decodeNonspaceChar
8: readLine
9: readNBytes
10: skip
11: skipBytes
12: fill
13: read1
14: readFully
15: readBytes
16: readBoolean
17: readUnsignedByte
18: readChar
19: readUnsignedShort
20: readShort
21: readInt
22: readByte
23: getRequiredData
24: getIconBytes
25: fillProperties
26: getInputStream
27: cache
28: closeAll
29: getApplicationResources
30: loadProperties
31: createRules
32: loadPropertyResourceBundle
33: findFactoryImplName
34: activateDeferredProfile
35: getInstance
36: nextStream
37: implClose
38: toString
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.JarResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cache
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
Flows from source is finished.
Start traversal for source: <org.springframework.core.io.UrlResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cache
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <javax.activation.URLDataSource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: cache
Flows from source is finished.
Start traversal for source: <org.springframework.util.FileCopyUtils: int copy(java.io.InputStream,java.io.OutputStream)>...
Starting from source: 
0: copy
Flows from source is finished.
Start traversal for source: <javax.mail.util.SharedFileInputStream$SharedFileSource: int read(long,byte[],int,int)>...
Starting from source: 
0: read
1: decodeNonspaceChar
2: readLine
3: copy
4: readNBytes
5: skip
6: skipBytes
7: fill
8: read1
9: readFully
10: readBytes
11: consume
12: close
13: loadIntoBAIS
14: getIconBytes
15: fillProperties
16: getInputStream
17: cache
18: closeAll
19: getApplicationResources
20: loadProperties
21: createRules
22: loadPropertyResourceBundle
23: findFactoryImplName
24: getRequiredData
25: activateDeferredProfile
26: getInstance
27: nextStream
28: implClose
29: readBoolean
30: readUnsignedByte
31: readChar
32: readUnsignedShort
33: readShort
34: readInt
35: readByte
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>...
Starting from source: 
0: close
1: loadIntoBAIS
2: read
3: decodeNonspaceChar
4: readLine
5: copy
6: readNBytes
7: skip
8: skipBytes
9: fill
10: read1
11: readFully
12: readBytes
13: consume
14: readBoolean
15: readUnsignedByte
16: readChar
17: readUnsignedShort
18: readShort
19: readInt
20: readByte
21: getRequiredData
22: getIconBytes
23: fillProperties
24: getInputStream
25: cache
26: closeAll
27: getApplicationResources
28: loadProperties
29: createRules
30: loadPropertyResourceBundle
31: findFactoryImplName
32: activateDeferredProfile
33: getInstance
34: nextStream
35: implClose
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.TypeUtil: byte[] readLine(java.io.InputStream)>...
Starting from source: 
0: readLine
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.ClassReader: int readInt()>...
Starting from source: 
0: readInt
Flows from source is finished.
Now we build call graphs for class: javax.activation.MailcapCommandMap
Source here: <javax.activation.MailcapCommandMap: void parseMailcap(java.io.Reader)>
Global flow here: <javax.activation.MailcapCommandMap: void addCommand(java.util.Map,java.lang.String,javax.activation.CommandInfo)> calls: <org.apache.cxf.jaxrs.impl.MetadataMap: java.lang.Object put(java.lang.Object,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r3) in <javax.activation.MailcapCommandMap: void addCommand(java.util.Map,java.lang.String,javax.activation.CommandInfo)> ==> <org.apache.cxf.jaxrs.impl.MetadataMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
Global flow here: <javax.activation.MailcapCommandMap: void addCommand(java.util.Map,java.lang.String,javax.activation.CommandInfo)> calls: <sun.awt.WeakIdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r3) in <javax.activation.MailcapCommandMap: void addCommand(java.util.Map,java.lang.String,javax.activation.CommandInfo)> ==> <sun.awt.WeakIdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
Start traversal for source: <javax.mail.internet.MimeMultipart: byte[] readLine(java.io.BufferedInputStream)>...
Starting from source: 
0: readLine
1: parseMailcap
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.AttachmentDeserializer: boolean hasNext()>...
Starting from source: 
0: hasNext
1: addCommands
2: addMailcap
3: parseMailcap
Flows from source is finished.
Start traversal for source: <java.io.LineNumberReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: parseMailcap
Flows from source is finished.
Start traversal for source: <javax.activation.MailcapCommandMap: void parseMailcap(java.io.Reader)>...
Starting from source: 
0: parseMailcap
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: parseMailcap
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: addMailcap
2: parseMailcap
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.TypeUtil: byte[] readLine(java.io.InputStream)>...
Starting from source: 
0: readLine
1: parseMailcap
Flows from source is finished.
Now we build call graphs for class: org.springframework.context.support.AbstractApplicationContext
Source here: <org.springframework.context.support.AbstractApplicationContext: void prepareBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>
Now we build call graphs for class: org.apache.log4j.helpers.OptionConverter
Source here: <org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r8) in <org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r10) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()> via: VIRTUAL edge: virtualinvoke $r44.<java.lang.Thread: void interrupt()>() in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <sun.nio.ch.PipeImpl$Initializer$1: void interrupt()>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> via: STATIC edge: $r21 = staticinvoke <org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>($r0, r1) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r12) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)> via: STATIC edge: $r13 = staticinvoke <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>($r2) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r58) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r52, $r46) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r68, $r42) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r41, $r36) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r35, $r30) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> calls: <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r29, $r22) in <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)> ==> <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r9, $r4) in <org.apache.log4j.helpers.OptionConverter: java.lang.String findAndSubst(java.lang.String,java.util.Properties)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)> via: STATIC edge: $r2 = staticinvoke <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>(r0) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r12) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r18) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r24) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r33) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r57, $r52) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r51, $r46) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r45, $r40) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r39, $r34) in <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>
Source here: <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)> via: INTERFACE edge: interfaceinvoke r19.<org.apache.log4j.spi.Configurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>(r0, r3) in <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r7) in <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>
Global flow here: <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)> calls: <org.apache.log4j.helpers.LogLog: void error(java.lang.String)> via: STATIC edge: staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r14) in <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)> ==> <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: instantiateByClassName
2: configureLoggerFactory
3: addRenderer
4: convertArg
5: parseAppenderFilters
6: selectAndConfigure
7: instantiateByKey
8: setProperties
9: parseAppender
10: parseCatsAndRenderers
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: substVars
2: findAndSubst
3: configureRootCategory
4: configureLoggerFactory
5: parseCatsAndRenderers
6: setProperties
7: parseAdditivityForLogger
8: parseAppender
9: parseErrorHandler
10: parseAppenderFilters
11: doConfigure
12: selectAndConfigure
13: instantiateByKey
14: getSystemProperty
Flows from source is finished.
Start traversal for source: <java.net.URL: java.lang.String getFile()>...
Starting from source: 
0: getFile
1: selectAndConfigure
Flows from source is finished.
Start traversal for source: <org.springframework.util.ResourceUtils: java.io.File getFile(java.net.URL,java.lang.String)>...
Starting from source: 
0: getFile
1: selectAndConfigure
Flows from source is finished.
Start traversal for source: <javax.activation.URLDataSource: java.lang.String getName()>...
Starting from source: 
0: getName
1: instantiateByClassName
2: configureLoggerFactory
3: addRenderer
4: convertArg
5: parseAppenderFilters
6: selectAndConfigure
7: instantiateByKey
8: setProperties
9: parseAppender
10: parseCatsAndRenderers
Flows from source is finished.
Start traversal for source: <com.sun.xml.bind.Util: java.lang.String getSystemProperty(java.lang.String)>...
Starting from source: 
0: getSystemProperty
1: substVars
2: findAndSubst
3: configureRootCategory
4: configureLoggerFactory
5: parseCatsAndRenderers
6: setProperties
7: parseAdditivityForLogger
8: parseAppender
9: parseErrorHandler
10: parseAppenderFilters
11: doConfigure
12: selectAndConfigure
13: instantiateByKey
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.FileResource: java.lang.String getName()>...
Starting from source: 
0: getName
1: instantiateByClassName
2: configureLoggerFactory
3: addRenderer
4: convertArg
5: parseAppenderFilters
6: selectAndConfigure
7: instantiateByKey
8: setProperties
9: parseAppender
10: parseCatsAndRenderers
Flows from source is finished.
Start traversal for source: <org.apache.log4j.helpers.OptionConverter: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getSystemProperty
1: substVars
2: findAndSubst
3: configureRootCategory
4: configureLoggerFactory
5: parseCatsAndRenderers
6: setProperties
7: parseAdditivityForLogger
8: parseAppender
9: parseErrorHandler
10: parseAppenderFilters
11: doConfigure
12: selectAndConfigure
13: instantiateByKey
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: java.io.File getFile()>...
Starting from source: 
0: getFile
1: selectAndConfigure
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: substVars
2: findAndSubst
3: configureRootCategory
4: configureLoggerFactory
5: parseCatsAndRenderers
6: setProperties
7: parseAdditivityForLogger
8: parseAppender
9: parseErrorHandler
10: parseAppenderFilters
11: doConfigure
12: selectAndConfigure
13: instantiateByKey
14: getSystemProperty
Flows from source is finished.
Start traversal for source: <org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>...
Starting from source: 
0: doConfigure
1: selectAndConfigure
Flows from source is finished.
Start traversal for source: <org.apache.log4j.helpers.OptionConverter: void selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)>...
Starting from source: 
0: selectAndConfigure
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: selectAndConfigure
2: substVars
3: findAndSubst
4: configureRootCategory
5: configureLoggerFactory
6: parseCatsAndRenderers
7: setProperties
8: parseAdditivityForLogger
9: parseAppender
10: parseErrorHandler
11: parseAppenderFilters
12: doConfigure
13: instantiateByKey
14: instantiateByClassName
15: addRenderer
16: convertArg
17: toLevel
18: parseCategory
19: getSystemProperty
Flows from source is finished.
Start traversal for source: <javax.activation.FileDataSource: java.lang.String getName()>...
Starting from source: 
0: getName
1: instantiateByClassName
2: configureLoggerFactory
3: addRenderer
4: convertArg
5: parseAppenderFilters
6: selectAndConfigure
7: instantiateByKey
8: setProperties
9: parseAppender
10: parseCatsAndRenderers
Flows from source is finished.
Now we build call graphs for class: org.springframework.core.io.support.PathMatchingResourcePatternResolver
Global flow here: <org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.lang.ClassLoader getClassLoader()> calls: <org.springframework.core.io.DefaultResourceLoader: java.lang.ClassLoader getClassLoader()> via: INTERFACE edge: $r2 = interfaceinvoke $r1.<org.springframework.core.io.ResourceLoader: java.lang.ClassLoader getClassLoader()>() in <org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.lang.ClassLoader getClassLoader()> ==> <org.springframework.core.io.DefaultResourceLoader: java.lang.ClassLoader getClassLoader()>
Source here: <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource[] findPathMatchingResources(java.lang.String)>
Source here: <org.springframework.core.io.support.PathMatchingResourcePatternResolver: org.springframework.core.io.Resource resolveRootDirResource(org.springframework.core.io.Resource)>
Source here: <org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.util.Set doFindPathMatchingJarResources(org.springframework.core.io.Resource,java.lang.String)>
Source here: <org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.util.Set doFindPathMatchingFileResources(org.springframework.core.io.Resource,java.lang.String)>
Source here: <org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.util.Set doFindMatchingFileSystemResources(java.io.File,java.lang.String)>
Source here: <org.springframework.core.io.support.PathMatchingResourcePatternResolver: java.util.Set retrieveMatchingFiles(java.io.File,java.lang.String)>
Source here: <org.springframework.core.io.support.PathMatchingResourcePatternResolver: void doRetrieveMatchingFiles(java.lang.String,java.io.File,java.util.Set)>
Now we build call graphs for class: org.apache.cxf.jaxb.JAXBUtils
Global flow here: <org.apache.cxf.jaxb.JAXBUtils: boolean isJavaKeyword(java.lang.String)> calls: <org.apache.cxf.helpers.JavaUtils: boolean isJavaKeyword(java.lang.String)> via: STATIC edge: $z0 = staticinvoke <org.apache.cxf.helpers.JavaUtils: boolean isJavaKeyword(java.lang.String)>(r0) in <org.apache.cxf.jaxb.JAXBUtils: boolean isJavaKeyword(java.lang.String)> ==> <org.apache.cxf.helpers.JavaUtils: boolean isJavaKeyword(java.lang.String)>
Source here: <org.apache.cxf.jaxb.JAXBUtils: java.lang.ClassLoader getXJCClassLoader()>
Source here: <org.apache.cxf.jaxb.JAXBUtils: void scanPackages(java.util.Set,java.lang.Class[],java.util.Map)>
Start traversal for source: <java.io.File: java.lang.String getPath()>...
Starting from source: 
0: getPath
1: nameSpaceURIToPackage
2: namespaceURIToPackage
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.AttachmentDeserializer: boolean hasNext()>...
Starting from source: 
0: hasNext
1: makeConventionalIdentifier
2: nameToIdentifier
Flows from source is finished.
Start traversal for source: <java.net.URL: java.lang.String getPath()>...
Starting from source: 
0: getPath
1: nameSpaceURIToPackage
2: namespaceURIToPackage
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: makeConventionalIdentifier
2: nameToIdentifier
3: normalizePackageNamePart
4: nameSpaceURIToPackage
5: namespaceURIToPackage
Flows from source is finished.
Now we build call graphs for class: org.codehaus.stax2.io.Stax2URLSource
Source here: <org.codehaus.stax2.io.Stax2URLSource: java.io.InputStream constructInputStream()>
Now we build call graphs for class: org.apache.cxf.service.factory.AbstractServiceFactoryBean
Global flow here: <org.apache.cxf.service.factory.AbstractServiceFactoryBean: void sendEvent(org.apache.cxf.service.factory.FactoryBeanListener$Event,java.lang.Object[])> calls: <org.apache.cxf.service.factory.AnnotationsFactoryBeanListener: void handleEvent(org.apache.cxf.service.factory.FactoryBeanListener$Event,org.apache.cxf.service.factory.AbstractServiceFactoryBean,java.lang.Object[])> via: INTERFACE edge: interfaceinvoke r4.<org.apache.cxf.service.factory.FactoryBeanListener: void handleEvent(org.apache.cxf.service.factory.FactoryBeanListener$Event,org.apache.cxf.service.factory.AbstractServiceFactoryBean,java.lang.Object[])>(r5, r0, r6) in <org.apache.cxf.service.factory.AbstractServiceFactoryBean: void sendEvent(org.apache.cxf.service.factory.FactoryBeanListener$Event,java.lang.Object[])> ==> <org.apache.cxf.service.factory.AnnotationsFactoryBeanListener: void handleEvent(org.apache.cxf.service.factory.FactoryBeanListener$Event,org.apache.cxf.service.factory.AbstractServiceFactoryBean,java.lang.Object[])>
Global flow here: <org.apache.cxf.service.factory.AbstractServiceFactoryBean: void setBus(org.apache.cxf.Bus)> calls: <org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: boolean addAll(java.util.Collection)> via: INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r5) in <org.apache.cxf.service.factory.AbstractServiceFactoryBean: void setBus(org.apache.cxf.Bus)> ==> <org.apache.cxf.common.util.ModCountCopyOnWriteArrayList: boolean addAll(java.util.Collection)>
Source here: <org.apache.cxf.service.factory.AbstractServiceFactoryBean: void fillDataBindingSchemas()>
Start traversal for source: <org.apache.cxf.attachment.AttachmentDeserializer: boolean hasNext()>...
Starting from source: 
0: hasNext
1: sendEvent
2: createEndpointInfo
3: createEndpoint
4: create
5: getCreatedFromModel
6: createBindingInfo
Flows from source is finished.
Now we build call graphs for class: org.apache.log4j.net.SMTPAppender
Source here: <org.apache.log4j.net.SMTPAppender: javax.mail.Session createSession()>
Now we build call graphs for class: org.apache.cxf.bus.spring.BusApplicationContext
Source here: <org.apache.cxf.bus.spring.BusApplicationContext: org.springframework.core.io.Resource[] getConfigResources()>
Now we build call graphs for class: org.springframework.util.xml.XmlValidationModeDetector
Source here: <org.springframework.util.xml.XmlValidationModeDetector: int detectValidationMode(java.io.InputStream)>
Global flow here: <org.springframework.util.xml.XmlValidationModeDetector: int detectValidationMode(java.io.InputStream)> calls: <org.springframework.util.StringUtils: boolean hasText(java.lang.String)> via: STATIC edge: $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r4) in <org.springframework.util.xml.XmlValidationModeDetector: int detectValidationMode(java.io.InputStream)> ==> <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>
Start traversal for source: <javax.mail.internet.MimeMultipart: byte[] readLine(java.io.BufferedInputStream)>...
Starting from source: 
0: readLine
1: detectValidationMode
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit: void close(org.apache.cxf.message.Message)>...
Starting from source: 
0: close
1: detectValidationMode
Flows from source is finished.
Start traversal for source: <java.io.LineNumberReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: detectValidationMode
Flows from source is finished.
Start traversal for source: <org.springframework.util.xml.XmlValidationModeDetector: int detectValidationMode(java.io.InputStream)>...
Starting from source: 
0: detectValidationMode
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: detectValidationMode
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>...
Starting from source: 
0: close
1: detectValidationMode
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.TypeUtil: byte[] readLine(java.io.InputStream)>...
Starting from source: 
0: readLine
1: detectValidationMode
Flows from source is finished.
Now we build call graphs for class: org.apache.geronimo.mail.util.UUDecoderStream
Source here: <org.apache.geronimo.mail.util.UUDecoderStream: int available()>
Now we build call graphs for class: javax.mail.search.ReceivedDateTerm
Source here: <javax.mail.search.ReceivedDateTerm: boolean match(javax.mail.Message)>
Now we build call graphs for class: org.apache.cxf.helpers.IOUtils
Source here: <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)>
Global flow here: <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)> calls: <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[])> via: VIRTUAL edge: i3 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>($r3) in <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)> ==> <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[])>
Global flow here: <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)> calls: <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[])> via: VIRTUAL edge: i3 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>($r3) in <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)> ==> <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[])>
Global flow here: <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)> calls: <org.apache.cxf.attachment.DelegatingInputStream: int available()> via: VIRTUAL edge: $i0 = virtualinvoke r0.<java.io.InputStream: int available()>() in <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)> ==> <org.apache.cxf.attachment.DelegatingInputStream: int available()>
Global flow here: <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)> calls: <org.apache.cxf.io.CachedOutputStream: void write(byte[],int,int)> via: VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, i3) in <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)> ==> <org.apache.cxf.io.CachedOutputStream: void write(byte[],int,int)>
Global flow here: <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)> calls: <sun.nio.ch.ChannelInputStream: int available()> via: VIRTUAL edge: $i0 = virtualinvoke r0.<java.io.InputStream: int available()>() in <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)> ==> <sun.nio.ch.ChannelInputStream: int available()>
Global flow here: <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)> calls: <sun.net.www.MeteredStream: int available()> via: VIRTUAL edge: $i0 = virtualinvoke r0.<java.io.InputStream: int available()>() in <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)> ==> <sun.net.www.MeteredStream: int available()>
Source here: <org.apache.cxf.helpers.IOUtils: void copy(java.io.Reader,java.io.Writer,int)>
Source here: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.InputStream,int,java.lang.String)>
Global flow here: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.InputStream,int,java.lang.String)> calls: <org.apache.cxf.attachment.DelegatingInputStream: int available()> via: VIRTUAL edge: $i0 = virtualinvoke r0.<java.io.InputStream: int available()>() in <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.InputStream,int,java.lang.String)> ==> <org.apache.cxf.attachment.DelegatingInputStream: int available()>
Source here: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.Reader,int)>
Source here: <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)>
Global flow here: <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> calls: <org.apache.cxf.io.CachedOutputStream$1: void close()> via: VIRTUAL edge: virtualinvoke r0.<java.io.InputStream: void close()>() in <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> ==> <org.apache.cxf.io.CachedOutputStream$1: void close()>
Global flow here: <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> calls: <org.apache.cxf.attachment.DelegatingInputStream: void close()> via: VIRTUAL edge: virtualinvoke r0.<java.io.InputStream: void close()>() in <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> ==> <org.apache.cxf.attachment.DelegatingInputStream: void close()>
Global flow here: <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> calls: <org.apache.cxf.attachment.DelegatingInputStream: int available()> via: VIRTUAL edge: $i0 = virtualinvoke r0.<java.io.InputStream: int available()>() in <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> ==> <org.apache.cxf.attachment.DelegatingInputStream: int available()>
Global flow here: <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> calls: <sun.nio.ch.ChannelInputStream: void close()> via: VIRTUAL edge: virtualinvoke r0.<java.io.InputStream: void close()>() in <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> ==> <sun.nio.ch.ChannelInputStream: void close()>
Global flow here: <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> calls: <sun.nio.ch.ChannelInputStream: int available()> via: VIRTUAL edge: $i0 = virtualinvoke r0.<java.io.InputStream: int available()>() in <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> ==> <sun.nio.ch.ChannelInputStream: int available()>
Global flow here: <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> calls: <sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()> via: VIRTUAL edge: virtualinvoke r0.<java.io.InputStream: void close()>() in <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> ==> <sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()>
Global flow here: <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke r0.<java.io.InputStream: void close()>() in <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> calls: <sun.net.www.MeteredStream: int available()> via: VIRTUAL edge: $i0 = virtualinvoke r0.<java.io.InputStream: int available()>() in <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> ==> <sun.net.www.MeteredStream: int available()>
Global flow here: <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> calls: <org.apache.cxf.helpers.LoadingByteArrayOutputStream: java.io.ByteArrayInputStream createInputStream()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.cxf.helpers.LoadingByteArrayOutputStream: java.io.ByteArrayInputStream createInputStream()>() in <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)> ==> <org.apache.cxf.helpers.LoadingByteArrayOutputStream: java.io.ByteArrayInputStream createInputStream()>
Source here: <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)>
Global flow here: <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> calls: <sun.nio.ch.ChannelInputStream: int available()> via: VIRTUAL edge: i2 = virtualinvoke r0.<java.io.InputStream: int available()>() in <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> ==> <sun.nio.ch.ChannelInputStream: int available()>
Global flow here: <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> calls: <sun.nio.ch.ChannelInputStream: int read()> via: VIRTUAL edge: $i1 = virtualinvoke r0.<java.io.InputStream: int read()>() in <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> ==> <sun.nio.ch.ChannelInputStream: int read()>
Global flow here: <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> calls: <sun.nio.ch.ChannelInputStream: int available()> via: VIRTUAL edge: $i0 = virtualinvoke r0.<java.io.InputStream: int available()>() in <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> ==> <sun.nio.ch.ChannelInputStream: int available()>
Global flow here: <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> calls: <sun.net.www.MeteredStream: int available()> via: VIRTUAL edge: i2 = virtualinvoke r0.<java.io.InputStream: int available()>() in <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> ==> <sun.net.www.MeteredStream: int available()>
Global flow here: <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> calls: <sun.net.www.MeteredStream: int read()> via: VIRTUAL edge: $i1 = virtualinvoke r0.<java.io.InputStream: int read()>() in <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> ==> <sun.net.www.MeteredStream: int read()>
Global flow here: <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> calls: <sun.net.www.MeteredStream: int available()> via: VIRTUAL edge: $i0 = virtualinvoke r0.<java.io.InputStream: int available()>() in <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> ==> <sun.net.www.MeteredStream: int available()>
Global flow here: <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> calls: <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[])> via: VIRTUAL edge: $i3 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>($r1) in <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> ==> <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[])>
Global flow here: <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> calls: <org.apache.cxf.attachment.DelegatingInputStream: int available()> via: VIRTUAL edge: i2 = virtualinvoke r0.<java.io.InputStream: int available()>() in <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> ==> <org.apache.cxf.attachment.DelegatingInputStream: int available()>
Global flow here: <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> calls: <org.apache.cxf.attachment.DelegatingInputStream: int read()> via: VIRTUAL edge: $i1 = virtualinvoke r0.<java.io.InputStream: int read()>() in <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> ==> <org.apache.cxf.attachment.DelegatingInputStream: int read()>
Global flow here: <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> calls: <org.apache.cxf.attachment.DelegatingInputStream: int available()> via: VIRTUAL edge: $i0 = virtualinvoke r0.<java.io.InputStream: int available()>() in <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> ==> <org.apache.cxf.attachment.DelegatingInputStream: int available()>
Global flow here: <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> calls: <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int read()> via: VIRTUAL edge: $i1 = virtualinvoke r0.<java.io.InputStream: int read()>() in <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> ==> <org.apache.cxf.attachment.QuotedPrintableDecoderStream: int read()>
Global flow here: <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> calls: <org.apache.cxf.attachment.MimeBodyPartInputStream: int read()> via: VIRTUAL edge: $i1 = virtualinvoke r0.<java.io.InputStream: int read()>() in <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)> ==> <org.apache.cxf.attachment.MimeBodyPartInputStream: int read()>
Source here: <org.apache.cxf.helpers.IOUtils: byte[] readBytesFromStream(java.io.InputStream)>
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read(char[],int,int)>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.BaseReader: int read()>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.InputStream,int,java.lang.String)>...
Starting from source: 
0: toString
1: populateMapFromMultipart
2: newStringFromBytes
3: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit: void close(org.apache.cxf.message.Message)>...
Starting from source: 
0: close
1: loadIntoBAIS
2: resolveEntity
3: setBuffering
4: toString
5: populateMapFromMultipart
6: newStringFromBytes
7: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)>...
Starting from source: 
0: consume
1: close
2: loadIntoBAIS
3: resolveEntity
4: setBuffering
5: toString
6: populateMapFromMultipart
7: newStringFromBytes
8: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.AttachmentDeserializer: java.lang.String findBoundaryFromInputStream()>...
Starting from source: 
0: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.DelegatingInputStream: int available()>...
Starting from source: 
0: available
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[])>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <java.io.RandomAccessFile: int read(byte[],int,int)>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <java.io.FileInputStream: int read(byte[])>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.io.ByteArrayInputStream loadIntoBAIS(java.io.InputStream)>...
Starting from source: 
0: loadIntoBAIS
1: resolveEntity
2: setBuffering
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: int read(byte[])>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: void copy(java.io.Reader,java.io.Writer,int)>...
Starting from source: 
0: copy
1: readBody
2: tryRemote
3: cache
4: loadIntoBAIS
5: resolveEntity
6: setBuffering
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int available()>...
Starting from source: 
0: available
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[])>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.Base64DecoderStream: int available()>...
Starting from source: 
0: available
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.resolver.DefaultURIResolver: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String)>...
Starting from source: 
0: resolveEntity
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int available()>...
Starting from source: 
0: available
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <java.io.ByteArrayInputStream: int read()>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)>...
Starting from source: 
0: copy
1: readBody
2: tryRemote
3: cache
4: loadIntoBAIS
5: resolveEntity
6: setBuffering
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.Reader,int)>...
Starting from source: 
0: toString
1: populateMapFromMultipart
2: newStringFromBytes
3: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <java.io.PushbackInputStream: int read()>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.http.HttpParser: int available()>...
Starting from source: 
0: available
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: int read()>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read()>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.UUDecoderStream: int available()>...
Starting from source: 
0: available
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int read()>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <javax.mail.internet.MimeMultipart$MimeBodyPartInputStream: int read()>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[],int,int)>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int read(byte[])>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <java.io.InputStreamReader: int read()>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedStream: int available()>...
Starting from source: 
0: available
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <org.springframework.util.FileCopyUtils: int copy(java.io.Reader,java.io.Writer)>...
Starting from source: 
0: copy
1: readBody
2: tryRemote
3: cache
4: loadIntoBAIS
5: resolveEntity
6: setBuffering
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.util.StreamUtils: void copy(java.io.InputStream,java.io.OutputStream,int)>...
Starting from source: 
0: copy
1: readBody
2: tryRemote
3: cache
4: loadIntoBAIS
5: resolveEntity
6: setBuffering
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int available()>...
Starting from source: 
0: available
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: populateMapFromMultipart
2: newStringFromBytes
3: findBoundaryFromInputStream
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <org.springframework.util.FileCopyUtils: int copy(java.io.InputStream,java.io.OutputStream)>...
Starting from source: 
0: copy
1: readBody
2: tryRemote
3: cache
4: loadIntoBAIS
5: resolveEntity
6: setBuffering
Flows from source is finished.
Start traversal for source: <javax.mail.util.SharedFileInputStream$SharedFileSource: int read(long,byte[],int,int)>...
Starting from source: 
0: read
1: consume
2: close
3: loadIntoBAIS
4: resolveEntity
5: setBuffering
6: toString
7: populateMapFromMultipart
8: newStringFromBytes
9: findBoundaryFromInputStream
10: copy
11: readBody
12: tryRemote
13: cache
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>...
Starting from source: 
0: close
1: loadIntoBAIS
2: resolveEntity
3: setBuffering
4: toString
5: populateMapFromMultipart
6: newStringFromBytes
7: findBoundaryFromInputStream
Flows from source is finished.
Now we build call graphs for class: javax.mail.PasswordAuthentication
Source here: <javax.mail.PasswordAuthentication: java.lang.String getUserName()>
Source here: <javax.mail.PasswordAuthentication: java.lang.String getPassword()>
Now we build call graphs for class: org.eclipse.jetty.util.resource.Resource
Global flow here: <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.net.URL,boolean)> calls: <org.xml.sax.SAXException: java.lang.String toString()> via: VIRTUAL edge: $r9 = virtualinvoke $r6.<java.lang.Exception: java.lang.String toString()>() in <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.net.URL,boolean)> ==> <org.xml.sax.SAXException: java.lang.String toString()>
Global flow here: <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.net.URL,boolean)> calls: <jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()> via: VIRTUAL edge: $r9 = virtualinvoke $r6.<java.lang.Exception: java.lang.String toString()>() in <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.net.URL,boolean)> ==> <jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
Global flow here: <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.net.URL,boolean)> calls: <org.springframework.beans.factory.BeanCreationException: java.lang.String toString()> via: VIRTUAL edge: $r9 = virtualinvoke $r6.<java.lang.Exception: java.lang.String toString()>() in <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.net.URL,boolean)> ==> <org.springframework.beans.factory.BeanCreationException: java.lang.String toString()>
Global flow here: <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.net.URL,boolean)> calls: <org.eclipse.jetty.util.log.StdErrLog: void debug(java.lang.String,java.lang.Throwable)> via: INTERFACE edge: interfaceinvoke $r7.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Throwable)>("EXCEPTION ", $r6) in <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.net.URL,boolean)> ==> <org.eclipse.jetty.util.log.StdErrLog: void debug(java.lang.String,java.lang.Throwable)>
Global flow here: <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.net.URL,boolean)> calls: <org.ietf.jgss.GSSException: java.lang.String toString()> via: VIRTUAL edge: $r9 = virtualinvoke $r6.<java.lang.Exception: java.lang.String toString()>() in <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.net.URL,boolean)> ==> <org.ietf.jgss.GSSException: java.lang.String toString()>
Global flow here: <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.net.URL,boolean)> calls: <sun.security.krb5.KrbException: java.lang.String toString()> via: VIRTUAL edge: $r9 = virtualinvoke $r6.<java.lang.Exception: java.lang.String toString()>() in <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.net.URL,boolean)> ==> <sun.security.krb5.KrbException: java.lang.String toString()>
Global flow here: <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.net.URL,boolean)> calls: <com.sun.xml.bind.v2.runtime.IllegalAnnotationException: java.lang.String toString()> via: VIRTUAL edge: $r9 = virtualinvoke $r6.<java.lang.Exception: java.lang.String toString()>() in <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.net.URL,boolean)> ==> <com.sun.xml.bind.v2.runtime.IllegalAnnotationException: java.lang.String toString()>
Source here: <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.lang.String,boolean)>
Global flow here: <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.lang.String,boolean)> calls: <org.eclipse.jetty.util.log.StdErrLog: void debug(java.lang.String,java.lang.Throwable)> via: INTERFACE edge: interfaceinvoke $r8.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Throwable)>("EXCEPTION ", $r7) in <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.lang.String,boolean)> ==> <org.eclipse.jetty.util.log.StdErrLog: void debug(java.lang.String,java.lang.Throwable)>
Global flow here: <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.lang.String,boolean)> calls: <org.eclipse.jetty.util.log.StdErrLog: void warn(java.lang.String,java.lang.Object[])> via: INTERFACE edge: interfaceinvoke $r16.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.String,java.lang.Object[])>($r20, $r21) in <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.lang.String,boolean)> ==> <org.eclipse.jetty.util.log.StdErrLog: void warn(java.lang.String,java.lang.Object[])>
Source here: <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.io.File)>
Global flow here: <org.eclipse.jetty.util.resource.Resource: void finalize()> calls: <org.eclipse.jetty.util.resource.URLResource: void release()> via: VIRTUAL edge: virtualinvoke r0.<org.eclipse.jetty.util.resource.Resource: void release()>() in <org.eclipse.jetty.util.resource.Resource: void finalize()> ==> <org.eclipse.jetty.util.resource.URLResource: void release()>
Global flow here: <org.eclipse.jetty.util.resource.Resource: void finalize()> calls: <org.eclipse.jetty.util.resource.JarFileResource: void release()> via: VIRTUAL edge: virtualinvoke r0.<org.eclipse.jetty.util.resource.Resource: void release()>() in <org.eclipse.jetty.util.resource.Resource: void finalize()> ==> <org.eclipse.jetty.util.resource.JarFileResource: void release()>
Global flow here: <org.eclipse.jetty.util.resource.Resource: void finalize()> calls: <org.eclipse.jetty.util.resource.JarResource: void release()> via: VIRTUAL edge: virtualinvoke r0.<org.eclipse.jetty.util.resource.Resource: void release()>() in <org.eclipse.jetty.util.resource.Resource: void finalize()> ==> <org.eclipse.jetty.util.resource.JarResource: void release()>
Source here: <org.eclipse.jetty.util.resource.Resource: java.net.URL toURL(java.io.File)>
Start traversal for source: <org.eclipse.jetty.util.resource.Resource: java.net.URL toURL(java.io.File)>...
Starting from source: 
0: toURL
1: newResource
2: exists
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.InputStream,int,java.lang.String)>...
Starting from source: 
0: toString
1: newResource
2: exists
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: boolean exists()>...
Starting from source: 
0: exists
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.Reader,int)>...
Starting from source: 
0: toString
1: newResource
2: exists
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.lang.String,boolean)>...
Starting from source: 
0: newResource
1: exists
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.Resource: org.eclipse.jetty.util.resource.Resource newResource(java.io.File)>...
Starting from source: 
0: newResource
1: exists
Flows from source is finished.
Start traversal for source: <java.io.File: java.io.File getCanonicalFile()>...
Starting from source: 
0: getCanonicalFile
1: newResource
2: exists
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: newResource
2: exists
Flows from source is finished.
Start traversal for source: <java.io.File: java.net.URI toURI()>...
Starting from source: 
0: toURI
1: toURL
2: newResource
3: exists
Flows from source is finished.
Now we build call graphs for class: org.eclipse.jetty.server.handler.jmx.AbstractHandlerMBean
Source here: <org.eclipse.jetty.server.handler.jmx.AbstractHandlerMBean: java.lang.String getContextName(org.eclipse.jetty.server.handler.ContextHandler)>
Now we build call graphs for class: org.springframework.core.io.support.PropertiesLoaderUtils
Global flow here: <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> calls: <org.apache.cxf.io.CachedOutputStream$1: void close()> via: VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> ==> <org.apache.cxf.io.CachedOutputStream$1: void close()>
Global flow here: <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> calls: <org.apache.cxf.io.CachedOutputStream$1: void close()> via: VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> ==> <org.apache.cxf.io.CachedOutputStream$1: void close()>
Global flow here: <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> calls: <org.apache.cxf.attachment.DelegatingInputStream: void close()> via: VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> ==> <org.apache.cxf.attachment.DelegatingInputStream: void close()>
Global flow here: <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> calls: <org.apache.cxf.attachment.DelegatingInputStream: void close()> via: VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> ==> <org.apache.cxf.attachment.DelegatingInputStream: void close()>
Global flow here: <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> calls: <sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()> via: VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> ==> <sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()>
Global flow here: <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> calls: <sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()> via: VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> ==> <sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()>
Global flow here: <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> calls: <sun.nio.ch.ChannelInputStream: void close()> via: VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> ==> <sun.nio.ch.ChannelInputStream: void close()>
Global flow here: <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> calls: <sun.nio.ch.ChannelInputStream: void close()> via: VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> ==> <sun.nio.ch.ChannelInputStream: void close()>
Global flow here: <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> calls: <org.springframework.core.io.ClassPathResource: java.io.InputStream getInputStream()> via: INTERFACE edge: $r1 = interfaceinvoke r0.<org.springframework.core.io.Resource: java.io.InputStream getInputStream()>() in <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)> ==> <org.springframework.core.io.ClassPathResource: java.io.InputStream getInputStream()>
Source here: <org.springframework.core.io.support.PropertiesLoaderUtils: java.util.Properties loadAllProperties(java.lang.String,java.lang.ClassLoader)>
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit: void close(org.apache.cxf.message.Message)>...
Starting from source: 
0: close
1: fillProperties
2: loadProperties
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: fillProperties
2: loadProperties
Flows from source is finished.
Start traversal for source: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void load(java.lang.String,java.lang.ClassLoader)>...
Starting from source: 
0: load
1: fillProperties
2: loadProperties
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: fillProperties
2: loadProperties
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: fillProperties
2: loadProperties
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.JarResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: fillProperties
2: loadProperties
Flows from source is finished.
Start traversal for source: <org.springframework.core.io.UrlResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: fillProperties
2: loadProperties
Flows from source is finished.
Start traversal for source: <javax.activation.URLDataSource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: fillProperties
2: loadProperties
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>...
Starting from source: 
0: close
1: fillProperties
2: loadProperties
Flows from source is finished.
Now we build call graphs for class: org.apache.log4j.lf5.viewer.LogBrokerMonitor
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setMaxNumberOfLogRecords(int)> calls: <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setMaxNumberOfLogRecords(int)> ==> <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setMaxNumberOfLogRecords(int)> calls: <org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setMaxNumberOfLogRecords(int)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setMaxNumberOfLogRecords(int)>(i0) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setMaxNumberOfLogRecords(int)> ==> <org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setMaxNumberOfLogRecords(int)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setFrameSize(int,int)> calls: <sun.awt.SunToolkit: java.awt.Dimension getScreenSize()> via: VIRTUAL edge: $r1 = virtualinvoke $r0.<java.awt.Toolkit: java.awt.Dimension getScreenSize()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setFrameSize(int,int)> ==> <sun.awt.SunToolkit: java.awt.Dimension getScreenSize()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setFrameSize(int,int)> calls: <sun.awt.HeadlessToolkit: java.awt.Dimension getScreenSize()> via: VIRTUAL edge: $r1 = virtualinvoke $r0.<java.awt.Toolkit: java.awt.Dimension getScreenSize()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setFrameSize(int,int)> ==> <sun.awt.HeadlessToolkit: java.awt.Dimension getScreenSize()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setNDCLogRecordFilter(java.lang.String)> calls: <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setNDCLogRecordFilter(java.lang.String)> ==> <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setNDCLogRecordFilter(java.lang.String)> calls: <org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setLogRecordFilter(org.apache.log4j.lf5.LogRecordFilter)> via: VIRTUAL edge: virtualinvoke $r2.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setLogRecordFilter(org.apache.log4j.lf5.LogRecordFilter)>($r4) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setNDCLogRecordFilter(java.lang.String)> ==> <org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setLogRecordFilter(org.apache.log4j.lf5.LogRecordFilter)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void sortByNDC()> calls: <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void sortByNDC()> ==> <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void sortByNDC()> calls: <org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setLogRecordFilter(org.apache.log4j.lf5.LogRecordFilter)> via: VIRTUAL edge: virtualinvoke $r3.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setLogRecordFilter(org.apache.log4j.lf5.LogRecordFilter)>($r4) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void sortByNDC()> ==> <org.apache.log4j.lf5.viewer.FilteredLogTableModel: void setLogRecordFilter(org.apache.log4j.lf5.LogRecordFilter)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void findSearchText()> calls: <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void findSearchText()> ==> <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void findSearchText()> calls: <org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List getFilteredRecords()> via: VIRTUAL edge: $r4 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List getFilteredRecords()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void findSearchText()> ==> <org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List getFilteredRecords()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void selectRow(int)> calls: <org.apache.log4j.lf5.viewer.LF5SwingUtils: void selectRow(int,javax.swing.JTable,javax.swing.JScrollPane)> via: STATIC edge: staticinvoke <org.apache.log4j.lf5.viewer.LF5SwingUtils: void selectRow(int,javax.swing.JTable,javax.swing.JScrollPane)>(i0, $r2, $r1) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void selectRow(int)> ==> <org.apache.log4j.lf5.viewer.LF5SwingUtils: void selectRow(int,javax.swing.JTable,javax.swing.JScrollPane)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean matches(org.apache.log4j.lf5.LogRecord,java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: java.lang.String getNDC()> via: VIRTUAL edge: $r2 = virtualinvoke r0.<org.apache.log4j.lf5.LogRecord: java.lang.String getNDC()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean matches(org.apache.log4j.lf5.LogRecord,java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: java.lang.String getNDC()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean matches(org.apache.log4j.lf5.LogRecord,java.lang.String)> calls: <org.apache.log4j.lf5.LogRecord: java.lang.String getMessage()> via: VIRTUAL edge: $r1 = virtualinvoke r0.<org.apache.log4j.lf5.LogRecord: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean matches(org.apache.log4j.lf5.LogRecord,java.lang.String)> ==> <org.apache.log4j.lf5.LogRecord: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setFontSize(java.awt.Component,int)> calls: <org.apache.log4j.lf5.viewer.LogTable: void setFont(java.awt.Font)> via: VIRTUAL edge: virtualinvoke r0.<java.awt.Component: void setFont(java.awt.Font)>($r2) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setFontSize(java.awt.Component,int)> ==> <org.apache.log4j.lf5.viewer.LogTable: void setFont(java.awt.Font)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getRecordsDisplayedMessage()> calls: <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getRecordsDisplayedMessage()> ==> <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getRecordsDisplayedMessage()> calls: <org.apache.log4j.lf5.viewer.FilteredLogTableModel: int getTotalRowCount()> via: VIRTUAL edge: $i1 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: int getTotalRowCount()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getRecordsDisplayedMessage()> ==> <org.apache.log4j.lf5.viewer.FilteredLogTableModel: int getTotalRowCount()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getRecordsDisplayedMessage()> calls: <org.apache.log4j.lf5.viewer.FilteredLogTableModel: int getRowCount()> via: VIRTUAL edge: $i0 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: int getRowCount()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getRecordsDisplayedMessage()> ==> <org.apache.log4j.lf5.viewer.FilteredLogTableModel: int getRowCount()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addTableModelProperties()> calls: <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addTableModelProperties()> ==> <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void makeLogTableListenToCategoryExplorer()> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void makeLogTableListenToCategoryExplorer()> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void makeLogTableListenToCategoryExplorer()> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: void addActionListener(java.awt.event.ActionListener)> via: VIRTUAL edge: virtualinvoke $r3.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: void addActionListener(java.awt.event.ActionListener)>($r0) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void makeLogTableListenToCategoryExplorer()> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: void addActionListener(java.awt.event.ActionListener)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JMenuItem createSubMenuItem(org.apache.log4j.lf5.LogLevel)> calls: <org.apache.log4j.lf5.LogLevel: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke r1.<org.apache.log4j.lf5.LogLevel: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JMenuItem createSubMenuItem(org.apache.log4j.lf5.LogLevel)> ==> <org.apache.log4j.lf5.LogLevel: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JMenuItem createSubMenuItem(org.apache.log4j.lf5.LogLevel)> calls: <org.apache.log4j.lf5.LogLevel: java.lang.String toString()> via: VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.log4j.lf5.LogLevel: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JMenuItem createSubMenuItem(org.apache.log4j.lf5.LogLevel)> ==> <org.apache.log4j.lf5.LogLevel: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void showLogLevelColorChangeDialog(javax.swing.JMenuItem,org.apache.log4j.lf5.LogLevel)> calls: <org.apache.log4j.lf5.LogLevel: void setLogLevelColorMap(org.apache.log4j.lf5.LogLevel,java.awt.Color)> via: VIRTUAL edge: virtualinvoke r5.<org.apache.log4j.lf5.LogLevel: void setLogLevelColorMap(org.apache.log4j.lf5.LogLevel,java.awt.Color)>(r5, $r4) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void showLogLevelColorChangeDialog(javax.swing.JMenuItem,org.apache.log4j.lf5.LogLevel)> ==> <org.apache.log4j.lf5.LogLevel: void setLogLevelColorMap(org.apache.log4j.lf5.LogLevel,java.awt.Color)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void showLogLevelColorChangeDialog(javax.swing.JMenuItem,org.apache.log4j.lf5.LogLevel)> calls: <org.apache.log4j.lf5.viewer.FilteredLogTableModel: void refresh()> via: VIRTUAL edge: virtualinvoke $r7.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: void refresh()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void showLogLevelColorChangeDialog(javax.swing.JMenuItem,org.apache.log4j.lf5.LogLevel)> ==> <org.apache.log4j.lf5.viewer.FilteredLogTableModel: void refresh()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void showLogLevelColorChangeDialog(javax.swing.JMenuItem,org.apache.log4j.lf5.LogLevel)> calls: <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()> via: VIRTUAL edge: $r7 = virtualinvoke $r6.<org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void showLogLevelColorChangeDialog(javax.swing.JMenuItem,org.apache.log4j.lf5.LogLevel)> ==> <org.apache.log4j.lf5.viewer.LogTable: org.apache.log4j.lf5.viewer.FilteredLogTableModel getFilteredLogTableModel()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem createMenuItem(org.apache.log4j.lf5.LogLevel)> calls: <org.apache.log4j.lf5.LogLevel: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke r1.<org.apache.log4j.lf5.LogLevel: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem createMenuItem(org.apache.log4j.lf5.LogLevel)> ==> <org.apache.log4j.lf5.LogLevel: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem createMenuItem(org.apache.log4j.lf5.LogLevel)> calls: <org.apache.log4j.lf5.LogLevel: java.lang.String toString()> via: VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.log4j.lf5.LogLevel: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem createMenuItem(org.apache.log4j.lf5.LogLevel)> ==> <org.apache.log4j.lf5.LogLevel: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem createLogTableColumnMenuItem(org.apache.log4j.lf5.viewer.LogTableColumn)> calls: <org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String toString()> via: VIRTUAL edge: $r3 = virtualinvoke r1.<org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem createLogTableColumnMenuItem(org.apache.log4j.lf5.viewer.LogTableColumn)> ==> <org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem createLogTableColumnMenuItem(org.apache.log4j.lf5.viewer.LogTableColumn)> calls: <org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String toString()> via: VIRTUAL edge: $r2 = virtualinvoke r1.<org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String toString()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem createLogTableColumnMenuItem(org.apache.log4j.lf5.viewer.LogTableColumn)> ==> <org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String toString()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void createMRUFileListMI(javax.swing.JMenu)> calls: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void createMRUFileListMI(javax.swing.JMenu)> ==> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void saveConfiguration()> calls: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> via: VIRTUAL edge: virtualinvoke $r1.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void saveConfiguration()> ==> <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void resetConfiguration()> calls: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void reset()> via: VIRTUAL edge: virtualinvoke $r1.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void reset()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void resetConfiguration()> ==> <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void reset()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setMaxRecordConfiguration()> calls: <org.apache.log4j.lf5.viewer.LogFactor5InputDialog: java.lang.String getText()> via: VIRTUAL edge: $r3 = virtualinvoke $r0.<org.apache.log4j.lf5.viewer.LogFactor5InputDialog: java.lang.String getText()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setMaxRecordConfiguration()> ==> <org.apache.log4j.lf5.viewer.LogFactor5InputDialog: java.lang.String getText()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JToolBar createToolBar()> calls: <sun.awt.SunToolkit: java.lang.String[] getFontList()> via: VIRTUAL edge: r23 = virtualinvoke $r10.<java.awt.Toolkit: java.lang.String[] getFontList()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JToolBar createToolBar()> ==> <sun.awt.SunToolkit: java.lang.String[] getFontList()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JToolBar createToolBar()> calls: <sun.awt.HeadlessToolkit: java.lang.String[] getFontList()> via: VIRTUAL edge: r23 = virtualinvoke $r10.<java.awt.Toolkit: java.lang.String[] getFontList()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JToolBar createToolBar()> ==> <sun.awt.HeadlessToolkit: java.lang.String[] getFontList()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setView(java.lang.String,org.apache.log4j.lf5.viewer.LogTable)> calls: <org.apache.log4j.lf5.viewer.LogTable: void setDetailedView()> via: VIRTUAL edge: virtualinvoke r7.<org.apache.log4j.lf5.viewer.LogTable: void setDetailedView()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setView(java.lang.String,org.apache.log4j.lf5.viewer.LogTable)> ==> <org.apache.log4j.lf5.viewer.LogTable: void setDetailedView()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void centerFrame(javax.swing.JFrame)> calls: <sun.awt.SunToolkit: java.awt.Dimension getScreenSize()> via: VIRTUAL edge: $r1 = virtualinvoke $r0.<java.awt.Toolkit: java.awt.Dimension getScreenSize()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void centerFrame(javax.swing.JFrame)> ==> <sun.awt.SunToolkit: java.awt.Dimension getScreenSize()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void centerFrame(javax.swing.JFrame)> calls: <sun.awt.HeadlessToolkit: java.awt.Dimension getScreenSize()> via: VIRTUAL edge: $r1 = virtualinvoke $r0.<java.awt.Toolkit: java.awt.Dimension getScreenSize()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void centerFrame(javax.swing.JFrame)> ==> <sun.awt.HeadlessToolkit: java.awt.Dimension getScreenSize()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpen()> calls: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void set(java.io.File)> via: VIRTUAL edge: virtualinvoke $r7.<org.apache.log4j.lf5.viewer.configure.MRUFileManager: void set(java.io.File)>($r5) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpen()> ==> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void set(java.io.File)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()> calls: <org.apache.log4j.lf5.viewer.LogFactor5InputDialog: java.lang.String getText()> via: VIRTUAL edge: $r3 = virtualinvoke $r13.<org.apache.log4j.lf5.viewer.LogFactor5InputDialog: java.lang.String getText()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()> ==> <org.apache.log4j.lf5.viewer.LogFactor5InputDialog: java.lang.String getText()>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()> calls: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void set(java.net.URL)> via: VIRTUAL edge: virtualinvoke $r5.<org.apache.log4j.lf5.viewer.configure.MRUFileManager: void set(java.net.URL)>($r15) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()> ==> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void set(java.net.URL)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)> calls: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(int)> via: VIRTUAL edge: $r8 = virtualinvoke $r7.<org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(int)>(i1) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)> ==> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(int)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)> calls: <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)> via: VIRTUAL edge: virtualinvoke $r9.<org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>(r6) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)> ==> <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)> calls: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void moveToTop(int)> via: VIRTUAL edge: virtualinvoke $r10.<org.apache.log4j.lf5.viewer.configure.MRUFileManager: void moveToTop(int)>(i1) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenMRU(java.awt.event.ActionEvent)> ==> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void moveToTop(int)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestExit()> calls: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void save()> via: VIRTUAL edge: virtualinvoke $r1.<org.apache.log4j.lf5.viewer.configure.MRUFileManager: void save()>() in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestExit()> ==> <org.apache.log4j.lf5.viewer.configure.MRUFileManager: void save()>
Source here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)> calls: <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)> via: VIRTUAL edge: virtualinvoke $r0.<org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>(r2) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)> ==> <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>
Source here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>
Global flow here: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)> calls: <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)> via: VIRTUAL edge: virtualinvoke $r0.<org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>(r3) in <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)> ==> <org.apache.log4j.lf5.util.LogFileParser: void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor)>
Start traversal for source: <java.io.File: java.lang.String getName()>...
Starting from source: 
0: getName
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String[] getMRUFileList()>...
Starting from source: 
0: getMRUFileList
1: createMRUFileListMI
2: updateMRUList
3: requestOpenMRU
4: actionPerformed
5: requestOpenURL
6: requestOpen
7: createFileMenu
8: createMenuBar
Flows from source is finished.
Start traversal for source: <javax.mail.internet.MimeMessage: void parse(java.io.InputStream)>...
Starting from source: 
0: parse
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.InputStream,int,java.lang.String)>...
Starting from source: 
0: toString
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
5: closeAfterConfirm
6: requestExit
7: requestClose
8: requestOpenMRU
9: setView
10: setMaxRecordConfiguration
11: createMRUFileListMI
12: updateMRUList
13: createFileMenu
14: createMenuBar
15: createLogTableColumnMenuItem
16: getLogTableColumnMenuItem
17: updateView
18: selectAllLogTableColumns
19: createViewMenu
20: getTableColumnMenuItem
21: processLogTableColumns
22: createMenuItem
23: getMenuItem
24: passes
25: selectAllLogLevels
26: createLogLevelMenu
27: createSubMenuItem
28: createLogLevelColorMenu
29: getStatusText
30: getRecordsDisplayedMessage
31: updateStatusLabel
32: run
33: selectRow
34: setFontSizeSilently
35: findSearchText
Flows from source is finished.
Start traversal for source: <java.net.URL: java.lang.String getFile()>...
Starting from source: 
0: getFile
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.utils.CollectionFactory$1: java.lang.Boolean run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.springframework.util.ResourceUtils: java.io.File getFile(java.net.URL,java.lang.String)>...
Starting from source: 
0: getFile
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: requestOpenMRU
2: actionPerformed
Flows from source is finished.
Start traversal for source: <javax.activation.URLDataSource: java.lang.String getName()>...
Starting from source: 
0: getName
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.AttachmentDeserializer: boolean hasNext()>...
Starting from source: 
0: hasNext
1: selectAllLogTableColumns
2: actionPerformed
3: updateView
4: createViewMenu
5: createMenuBar
6: selectAllLogLevels
7: createLogLevelColorMenu
8: createLogLevelMenu
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.FileResource: java.lang.String getName()>...
Starting from source: 
0: getName
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
Flows from source is finished.
Start traversal for source: <org.apache.log4j.xml.DOMConfigurator$2: org.w3c.dom.Document parse(javax.xml.parsers.DocumentBuilder)>...
Starting from source: 
0: parse
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
5: requestOpenMRU
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: requestOpenMRU
2: actionPerformed
Flows from source is finished.
Start traversal for source: <java.net.URL: java.io.InputStream openStream()>...
Starting from source: 
0: openStream
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: java.io.File getFile()>...
Starting from source: 
0: getFile
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
Flows from source is finished.
Start traversal for source: <javax.mail.internet.MimeBodyPart: int getSize()>...
Starting from source: 
0: getSize
1: centerFrame
2: updateFrameSize
3: setFrameSize
4: getDefaultInstance
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.Reader,int)>...
Starting from source: 
0: toString
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
5: closeAfterConfirm
6: requestExit
7: requestClose
8: requestOpenMRU
9: setView
10: setMaxRecordConfiguration
11: createMRUFileListMI
12: updateMRUList
13: createFileMenu
14: createMenuBar
15: createLogTableColumnMenuItem
16: getLogTableColumnMenuItem
17: updateView
18: selectAllLogTableColumns
19: createViewMenu
20: getTableColumnMenuItem
21: processLogTableColumns
22: createMenuItem
23: getMenuItem
24: passes
25: selectAllLogLevels
26: createLogLevelMenu
27: createSubMenuItem
28: createLogLevelColorMenu
29: getStatusText
30: getRecordsDisplayedMessage
31: updateStatusLabel
32: run
33: selectRow
34: setFontSizeSilently
35: findSearchText
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.io.File)>...
Starting from source: 
0: loadLogFile
1: requestOpenURL
2: actionPerformed
3: requestOpen
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.commands.ForkedCommandStreamHandler: void run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <javax.mail.internet.MimeMessage: int getSize()>...
Starting from source: 
0: getSize
1: centerFrame
2: updateFrameSize
3: setFrameSize
4: getDefaultInstance
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: requestOpenMRU
2: actionPerformed
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>...
Starting from source: 
0: loadLogFile
1: requestOpenURL
2: actionPerformed
3: requestOpen
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.log.Log$1: java.lang.Object run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.XmlSchemaCollection$1: java.lang.String run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.JarResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: requestOpenMRU
2: actionPerformed
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
5: closeAfterConfirm
6: requestExit
7: requestClose
8: requestOpenMRU
9: setView
10: setMaxRecordConfiguration
11: createMRUFileListMI
12: updateMRUList
13: createFileMenu
14: createMenuBar
15: createLogTableColumnMenuItem
16: getLogTableColumnMenuItem
17: updateView
18: selectAllLogTableColumns
19: createViewMenu
20: getTableColumnMenuItem
21: processLogTableColumns
22: createMenuItem
23: getMenuItem
24: passes
25: selectAllLogLevels
26: createLogLevelMenu
27: createSubMenuItem
28: createLogLevelColorMenu
29: getStatusText
30: getRecordsDisplayedMessage
31: updateStatusLabel
32: run
33: selectRow
34: setFontSizeSilently
35: findSearchText
Flows from source is finished.
Start traversal for source: <org.springframework.core.io.UrlResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: requestOpenMRU
2: actionPerformed
Flows from source is finished.
Start traversal for source: <javax.activation.URLDataSource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: requestOpenMRU
2: actionPerformed
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.StreamPrinter: void run()>...
Starting from source: 
0: run
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.util.LogFileParser: java.lang.String loadLogFile(java.io.InputStream)>...
Starting from source: 
0: loadLogFile
1: requestOpenURL
2: actionPerformed
3: requestOpen
Flows from source is finished.
Start traversal for source: <javax.activation.FileDataSource: java.lang.String getName()>...
Starting from source: 
0: getName
1: loadLogFile
2: requestOpenURL
3: actionPerformed
4: requestOpen
Flows from source is finished.
Now we build call graphs for class: javax.activation.DataHandler
Global flow here: <javax.activation.DataHandler: java.io.InputStream getInputStream()> calls: <org.apache.cxf.attachment.AttachmentDataSource: java.io.InputStream getInputStream()> via: INTERFACE edge: $r2 = interfaceinvoke $r1.<javax.activation.DataSource: java.io.InputStream getInputStream()>() in <javax.activation.DataHandler: java.io.InputStream getInputStream()> ==> <org.apache.cxf.attachment.AttachmentDataSource: java.io.InputStream getInputStream()>
Global flow here: <javax.activation.DataHandler: java.io.InputStream getInputStream()> calls: <org.apache.cxf.jaxrs.ext.multipart.InputStreamDataSource: java.io.InputStream getInputStream()> via: INTERFACE edge: $r2 = interfaceinvoke $r1.<javax.activation.DataSource: java.io.InputStream getInputStream()>() in <javax.activation.DataHandler: java.io.InputStream getInputStream()> ==> <org.apache.cxf.jaxrs.ext.multipart.InputStreamDataSource: java.io.InputStream getInputStream()>
Source here: <javax.activation.DataHandler: void writeTo(java.io.OutputStream)>
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: populateMapFromMultipart
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: populateMapFromMultipart
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: populateMapFromMultipart
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.JarResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: populateMapFromMultipart
Flows from source is finished.
Start traversal for source: <org.springframework.core.io.UrlResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: populateMapFromMultipart
Flows from source is finished.
Start traversal for source: <javax.activation.URLDataSource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: populateMapFromMultipart
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.transport.http.auth.DigestAuthSupplier
Source here: <org.apache.cxf.transport.http.auth.DigestAuthSupplier: java.lang.String getAuthorization(org.apache.cxf.configuration.security.AuthorizationPolicy,java.net.URL,org.apache.cxf.message.Message,java.lang.String)>
Now we build call graphs for class: org.apache.cxf.bus.spring.TunedDocumentLoader
Source here: <org.apache.cxf.bus.spring.TunedDocumentLoader: org.w3c.dom.Document loadFastinfosetDocument(java.net.URL)>
Now we build call graphs for class: com.ctc.wstx.io.ReaderSource
Source here: <com.ctc.wstx.io.ReaderSource: int readInto(com.ctc.wstx.io.WstxInputData)>
Source here: <com.ctc.wstx.io.ReaderSource: boolean readMore(com.ctc.wstx.io.WstxInputData,int)>
Now we build call graphs for class: org.apache.log4j.chainsaw.LoadXMLAction
Source here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.Category: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r0.<org.apache.log4j.Logger: void info(java.lang.Object)>("load file called") in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.Category: void info(java.lang.Object)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r0.<org.apache.log4j.Logger: void info(java.lang.Object)>("load file called") in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.Category: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r4.<org.apache.log4j.Logger: void info(java.lang.Object)>("Need to load a file") in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.Category: void info(java.lang.Object)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r4.<org.apache.log4j.Logger: void info(java.lang.Object)>("Need to load a file") in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.Category: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r8.<org.apache.log4j.Logger: void info(java.lang.Object)>($r12) in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.Category: void info(java.lang.Object)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)> via: VIRTUAL edge: virtualinvoke $r8.<org.apache.log4j.Logger: void info(java.lang.Object)>($r12) in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.spi.NOPLogger: void info(java.lang.Object)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <com.sun.org.apache.xpath.internal.XPathException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <com.sun.org.apache.xpath.internal.XPathException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.xml.sax.SAXException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.xml.sax.SAXException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <com.sun.org.apache.xerces.internal.impl.dv.DatatypeException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <com.sun.org.apache.xerces.internal.impl.dv.DatatypeException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.config.PropertySetterException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.config.PropertySetterException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <sun.nio.fs.WindowsException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <sun.nio.fs.WindowsException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.cxf.interceptor.Fault: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.cxf.interceptor.Fault: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.cxf.common.i18n.UncheckedException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.cxf.common.i18n.UncheckedException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.cxf.common.i18n.Exception: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.cxf.common.i18n.Exception: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <sun.security.jgss.GSSExceptionImpl: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <sun.security.jgss.GSSExceptionImpl: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.ietf.jgss.GSSException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.ietf.jgss.GSSException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <sun.security.krb5.KrbException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <sun.security.krb5.KrbException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.springframework.core.NestedRuntimeException: java.lang.String getMessage()> via: VIRTUAL edge: $r25 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.Category: void warn(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r21.<org.apache.log4j.Logger: void warn(java.lang.Object,java.lang.Throwable)>("caught an exception loading the file", $r20) in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.Category: void warn(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> calls: <org.apache.log4j.spi.NOPLogger: void warn(java.lang.Object,java.lang.Throwable)> via: VIRTUAL edge: virtualinvoke $r21.<org.apache.log4j.Logger: void warn(java.lang.Object,java.lang.Throwable)>("caught an exception loading the file", $r20) in <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)> ==> <org.apache.log4j.spi.NOPLogger: void warn(java.lang.Object,java.lang.Throwable)>
Global flow here: <org.apache.log4j.chainsaw.LoadXMLAction: int loadFile(java.lang.String)> calls: <org.apache.log4j.chainsaw.XMLFileHandler: int getNumEvents()> via: VIRTUAL edge: $i0 = virtualinvoke $r8.<org.apache.log4j.chainsaw.XMLFileHandler: int getNumEvents()>() in <org.apache.log4j.chainsaw.LoadXMLAction: int loadFile(java.lang.String)> ==> <org.apache.log4j.chainsaw.XMLFileHandler: int getNumEvents()>
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.InputStream,int,java.lang.String)>...
Starting from source: 
0: toString
1: loadFile
2: actionPerformed
3: fireActionPerformed
4: fireActionEvent
5: notifyAction
Flows from source is finished.
Start traversal for source: <org.apache.log4j.chainsaw.LoadXMLAction: void actionPerformed(java.awt.event.ActionEvent)>...
Starting from source: 
0: actionPerformed
1: fireActionPerformed
2: fireActionEvent
3: notifyAction
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.Reader,int)>...
Starting from source: 
0: toString
1: loadFile
2: actionPerformed
3: fireActionPerformed
4: fireActionEvent
5: notifyAction
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getAbsolutePath()>...
Starting from source: 
0: getAbsolutePath
1: actionPerformed
2: fireActionPerformed
3: fireActionEvent
4: notifyAction
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: loadFile
2: actionPerformed
3: fireActionPerformed
4: fireActionEvent
5: notifyAction
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.common.i18n.Message
Source here: <org.apache.cxf.common.i18n.Message: void readObject(java.io.ObjectInputStream)>
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.InputStream,int,java.lang.String)>...
Starting from source: 
0: toString
1: setBuffering
2: checkForWrapped
3: addOperation
4: addFault
5: reportServerError
6: checkResources
7: checkMethodDispatcher
8: evaluateFactoryMethod
9: handleParameter
10: processFormParam
11: getMessage
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.Reader,int)>...
Starting from source: 
0: toString
1: setBuffering
2: checkForWrapped
3: addOperation
4: addFault
5: reportServerError
6: checkResources
7: checkMethodDispatcher
8: evaluateFactoryMethod
9: handleParameter
10: processFormParam
11: getMessage
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: setBuffering
2: checkForWrapped
3: addOperation
4: addFault
5: reportServerError
6: checkResources
7: checkMethodDispatcher
8: evaluateFactoryMethod
9: handleParameter
10: processFormParam
11: getMessage
Flows from source is finished.
Now we build call graphs for class: javax.activation.MimetypesFileTypeMap
Source here: <javax.activation.MimetypesFileTypeMap: void loadStream(java.io.InputStream)>
Source here: <javax.activation.MimetypesFileTypeMap: java.lang.String getContentType(java.io.File)>
Now we build call graphs for class: org.apache.geronimo.mail.util.SessionUtil
Source here: <org.apache.geronimo.mail.util.SessionUtil: boolean getBooleanProperty(java.lang.String,boolean)>
Source here: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String,java.lang.String)>
Source here: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String)>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: getDefaultMIMECharset
2: getDefaultJavaCharset
3: getBooleanProperty
4: getInitialProperties
5: encodeWord
6: fold
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.SessionUtil: boolean getBooleanProperty(java.lang.String,boolean)>...
Starting from source: 
0: getBooleanProperty
1: getInitialProperties
2: encodeWord
3: fold
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: getDefaultMIMECharset
2: getDefaultJavaCharset
3: getBooleanProperty
4: getInitialProperties
5: encodeWord
6: fold
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getDefaultMIMECharset
2: getDefaultJavaCharset
3: getBooleanProperty
4: getInitialProperties
5: encodeWord
6: fold
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getDefaultMIMECharset
2: getDefaultJavaCharset
3: getBooleanProperty
4: getInitialProperties
5: encodeWord
6: fold
Flows from source is finished.
Now we build call graphs for class: org.codehaus.jettison.AbstractXMLInputFactory
Source here: <org.codehaus.jettison.AbstractXMLInputFactory: java.lang.String readAll(java.io.InputStream,java.lang.String)>
Source here: <org.codehaus.jettison.AbstractXMLInputFactory: java.lang.String readAll(java.io.Reader)>
Now we build call graphs for class: org.apache.log4j.lf5.viewer.configure.ConfigurationManager
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode getRootCategoryNode()> via: VIRTUAL edge: $r4 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode getRootCategoryNode()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode getRootCategoryNode()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getNDCTextFilter()> via: VIRTUAL edge: $r7 = virtualinvoke $r6.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getNDCTextFilter()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getNDCTextFilter()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()> via: VIRTUAL edge: $r9 = virtualinvoke $r8.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()> via: VIRTUAL edge: $r11 = virtualinvoke $r10.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> calls: <org.apache.log4j.lf5.LogLevel: java.util.Map getLogLevelColorMap()> via: STATIC edge: $r12 = staticinvoke <org.apache.log4j.lf5.LogLevel: java.util.Map getLogLevelColorMap()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> ==> <org.apache.log4j.lf5.LogLevel: java.util.Map getLogLevelColorMap()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> calls: <org.apache.log4j.lf5.viewer.LogTableColumn: java.util.List getLogTableColumns()> via: STATIC edge: $r13 = staticinvoke <org.apache.log4j.lf5.viewer.LogTableColumn: java.util.List getLogTableColumns()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void save()> ==> <org.apache.log4j.lf5.viewer.LogTableColumn: java.util.List getLogTableColumns()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String treePathToString(javax.swing.tree.TreePath)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String getTitle()> via: VIRTUAL edge: $r5 = virtualinvoke r6.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String getTitle()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String treePathToString(javax.swing.tree.TreePath)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String getTitle()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <com.sun.org.apache.xpath.internal.XPathException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <com.sun.org.apache.xpath.internal.XPathException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.xml.sax.SAXException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.xml.sax.SAXException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <com.sun.org.apache.xerces.internal.impl.dv.DatatypeException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <com.sun.org.apache.xerces.internal.impl.dv.DatatypeException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.apache.log4j.config.PropertySetterException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.apache.log4j.config.PropertySetterException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <sun.nio.fs.WindowsException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <sun.nio.fs.WindowsException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.apache.cxf.interceptor.Fault: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.apache.cxf.interceptor.Fault: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.apache.cxf.common.i18n.UncheckedException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.apache.cxf.common.i18n.UncheckedException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.apache.cxf.common.i18n.Exception: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.apache.cxf.common.i18n.Exception: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <sun.security.jgss.GSSExceptionImpl: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <sun.security.jgss.GSSExceptionImpl: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.ietf.jgss.GSSException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.ietf.jgss.GSSException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <sun.security.krb5.KrbException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <sun.security.krb5.KrbException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> calls: <org.springframework.core.NestedRuntimeException: java.lang.String getMessage()> via: VIRTUAL edge: $r13 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()> ==> <org.springframework.core.NestedRuntimeException: java.lang.String getMessage()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processRecordFilter(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setNDCLogRecordFilter(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r6.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setNDCLogRecordFilter(java.lang.String)>($r5) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processRecordFilter(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setNDCLogRecordFilter(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: void setSelected(boolean)> via: VIRTUAL edge: virtualinvoke $r13.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: void setSelected(boolean)>($z5) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: void setSelected(boolean)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: javax.swing.tree.TreePath getTreePathToRoot(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode)> via: VIRTUAL edge: $r16 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: javax.swing.tree.TreePath getTreePathToRoot(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode)>($r13) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: javax.swing.tree.TreePath getTreePathToRoot(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode addCategory(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryPath)> via: VIRTUAL edge: $r13 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode addCategory(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryPath)>($r17) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode addCategory(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryPath)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevels(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()> via: VIRTUAL edge: $r4 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevels(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevels(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)> via: STATIC edge: $r8 = staticinvoke <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)>($r7) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevels(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.LogLevel: void setLogLevelColorMap(org.apache.log4j.lf5.LogLevel,java.awt.Color)> via: VIRTUAL edge: virtualinvoke $r6.<org.apache.log4j.lf5.LogLevel: void setLogLevelColorMap(org.apache.log4j.lf5.LogLevel,java.awt.Color)>($r6, $r10) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.LogLevel: void setLogLevelColorMap(org.apache.log4j.lf5.LogLevel,java.awt.Color)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.LogLevel: java.util.Map getLogLevelColorMap()> via: STATIC edge: staticinvoke <org.apache.log4j.lf5.LogLevel: java.util.Map getLogLevelColorMap()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.LogLevel: java.util.Map getLogLevelColorMap()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)> via: STATIC edge: $r6 = staticinvoke <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)>($r5) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogTableColumnMenuItems()> via: VIRTUAL edge: $r4 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogTableColumnMenuItems()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogTableColumnMenuItems()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.LogTable: void setDetailedView()> via: VIRTUAL edge: virtualinvoke $r14.<org.apache.log4j.lf5.viewer.LogTable: void setDetailedView()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.LogTable: void setDetailedView()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.LogTable: void setView(java.util.List)> via: VIRTUAL edge: virtualinvoke $r13.<org.apache.log4j.lf5.viewer.LogTable: void setView(java.util.List)>($r5) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.LogTable: void setView(java.util.List)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(org.w3c.dom.Document)> calls: <org.apache.log4j.lf5.viewer.LogTableColumn: org.apache.log4j.lf5.viewer.LogTableColumn valueOf(java.lang.String)> via: STATIC edge: $r9 = staticinvoke <org.apache.log4j.lf5.viewer.LogTableColumn: org.apache.log4j.lf5.viewer.LogTableColumn valueOf(java.lang.String)>($r8) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(org.w3c.dom.Document)> ==> <org.apache.log4j.lf5.viewer.LogTableColumn: org.apache.log4j.lf5.viewer.LogTableColumn valueOf(java.lang.String)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void collapseTree()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void collapseTree()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void selectAllNodes()> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void selectAllNodes()> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void selectAllNodes()> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: void setSelected(boolean)> via: VIRTUAL edge: virtualinvoke r7.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: void setSelected(boolean)>(1) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void selectAllNodes()> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: void setSelected(boolean)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void selectAllNodes()> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode getRootCategoryNode()> via: VIRTUAL edge: $r4 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode getRootCategoryNode()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void selectAllNodes()> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode getRootCategoryNode()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void selectAllNodes()> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void selectAllNodes()> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>
Source here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getFilename()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processConfigurationNode(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processConfigurationNode(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processConfigurationNode(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: javax.swing.tree.TreePath getTreePathToRoot(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode)> via: VIRTUAL edge: $r7 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: javax.swing.tree.TreePath getTreePathToRoot(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode)>(r9) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processConfigurationNode(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: javax.swing.tree.TreePath getTreePathToRoot(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processConfigurationNode(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processConfigurationNode(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevels(java.util.Map,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.LogLevel: java.lang.String getLabel()> via: VIRTUAL edge: $r9 = virtualinvoke r5.<org.apache.log4j.lf5.LogLevel: java.lang.String getLabel()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevels(java.util.Map,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.LogLevel: java.lang.String getLabel()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(java.util.Map,java.util.Map,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.LogLevel: java.lang.String getLabel()> via: VIRTUAL edge: $r10 = virtualinvoke r5.<org.apache.log4j.lf5.LogLevel: java.lang.String getLabel()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(java.util.Map,java.util.Map,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.LogLevel: java.lang.String getLabel()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(java.util.List,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem getTableColumnMenuItem(org.apache.log4j.lf5.viewer.LogTableColumn)> via: VIRTUAL edge: $r7 = virtualinvoke $r6.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem getTableColumnMenuItem(org.apache.log4j.lf5.viewer.LogTableColumn)>(r4) in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(java.util.List,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem getTableColumnMenuItem(org.apache.log4j.lf5.viewer.LogTableColumn)>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(java.util.List,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String getLabel()> via: VIRTUAL edge: $r8 = virtualinvoke r4.<org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String getLabel()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(java.util.List,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String getLabel()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void exportXMLElement(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,javax.swing.tree.TreePath,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: boolean isSelected()> via: VIRTUAL edge: $z1 = virtualinvoke r8.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: boolean isSelected()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void exportXMLElement(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,javax.swing.tree.TreePath,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: boolean isSelected()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void exportXMLElement(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,javax.swing.tree.TreePath,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String getTitle()> via: VIRTUAL edge: $r9 = virtualinvoke r8.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String getTitle()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void exportXMLElement(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,javax.swing.tree.TreePath,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String getTitle()>
Global flow here: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void exportXMLElement(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,javax.swing.tree.TreePath,java.lang.StringBuffer)> calls: <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()> via: VIRTUAL edge: $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>() in <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void exportXMLElement(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,javax.swing.tree.TreePath,java.lang.StringBuffer)> ==> <org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: getFilename
2: deleteConfigurationFile
3: reset
4: resetConfiguration
5: store
6: save
7: saveConfiguration
8: load
Flows from source is finished.
Start traversal for source: <org.codehaus.stax2.validation.XMLValidationSchemaFactory: org.codehaus.stax2.validation.XMLValidationSchemaFactory newInstance(java.lang.String,java.lang.ClassLoader)>...
Starting from source: 
0: newInstance
1: load
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.InputStream,int,java.lang.String)>...
Starting from source: 
0: toString
1: getFilename
2: deleteConfigurationFile
3: reset
4: resetConfiguration
5: store
6: save
7: saveConfiguration
8: load
9: treePathToString
10: exportXMLElement
11: processConfigurationNode
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit: void close(org.apache.cxf.message.Message)>...
Starting from source: 
0: close
1: store
2: save
3: saveConfiguration
Flows from source is finished.
Start traversal for source: <com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$5: java.lang.String print(java.io.File)>...
Starting from source: 
0: print
1: store
2: save
3: saveConfiguration
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: getFilename
2: deleteConfigurationFile
3: reset
4: resetConfiguration
5: store
6: save
7: saveConfiguration
8: load
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getPath()>...
Starting from source: 
0: getPath
1: treePathToString
2: exportXMLElement
3: processConfigurationNode
4: save
5: saveConfiguration
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.AttachmentDeserializer: boolean hasNext()>...
Starting from source: 
0: hasNext
1: processLogTableColumns
2: load
3: save
4: saveConfiguration
5: processLogLevelColors
6: processLogLevels
Flows from source is finished.
Start traversal for source: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void load(java.lang.String,java.lang.ClassLoader)>...
Starting from source: 
0: load
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: boolean exists()>...
Starting from source: 
0: exists
1: deleteConfigurationFile
2: reset
3: resetConfiguration
4: load
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.lang.String getFilename()>...
Starting from source: 
0: getFilename
1: deleteConfigurationFile
2: reset
3: resetConfiguration
4: store
5: save
6: saveConfiguration
7: load
Flows from source is finished.
Start traversal for source: <java.net.URL: java.lang.String getPath()>...
Starting from source: 
0: getPath
1: treePathToString
2: exportXMLElement
3: processConfigurationNode
4: save
5: saveConfiguration
Flows from source is finished.
Start traversal for source: <org.springframework.core.io.FileSystemResource: java.lang.String getFilename()>...
Starting from source: 
0: getFilename
1: deleteConfigurationFile
2: reset
3: resetConfiguration
4: store
5: save
6: saveConfiguration
7: load
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.Reader,int)>...
Starting from source: 
0: toString
1: getFilename
2: deleteConfigurationFile
3: reset
4: resetConfiguration
5: store
6: save
7: saveConfiguration
8: load
9: treePathToString
10: exportXMLElement
11: processConfigurationNode
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getFilename
2: deleteConfigurationFile
3: reset
4: resetConfiguration
5: store
6: save
7: saveConfiguration
8: load
Flows from source is finished.
Start traversal for source: <org.springframework.core.io.UrlResource: java.lang.String getFilename()>...
Starting from source: 
0: getFilename
1: deleteConfigurationFile
2: reset
3: resetConfiguration
4: store
5: save
6: saveConfiguration
7: load
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getFilename
2: deleteConfigurationFile
3: reset
4: resetConfiguration
5: store
6: save
7: saveConfiguration
8: load
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: getFilename
2: deleteConfigurationFile
3: reset
4: resetConfiguration
5: store
6: save
7: saveConfiguration
8: load
9: treePathToString
10: exportXMLElement
11: processConfigurationNode
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>...
Starting from source: 
0: close
1: store
2: save
3: saveConfiguration
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getFilename()>...
Starting from source: 
0: getFilename
1: deleteConfigurationFile
2: reset
3: resetConfiguration
4: store
5: save
6: saveConfiguration
7: load
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.jaxrs.utils.schemas.SchemaHandler
Source here: <org.apache.cxf.jaxrs.utils.schemas.SchemaHandler: javax.xml.validation.Schema createSchema(java.util.List,org.apache.cxf.Bus)>
Now we build call graphs for class: javax.wsdl.factory.WSDLFactory
Source here: <javax.wsdl.factory.WSDLFactory: java.lang.String findFactoryImplName()>
Global flow here: <javax.wsdl.factory.WSDLFactory: java.lang.String findFactoryImplName()> calls: <org.apache.cxf.io.CachedOutputStream$1: void close()> via: VIRTUAL edge: virtualinvoke r14.<java.io.InputStream: void close()>() in <javax.wsdl.factory.WSDLFactory: java.lang.String findFactoryImplName()> ==> <org.apache.cxf.io.CachedOutputStream$1: void close()>
Global flow here: <javax.wsdl.factory.WSDLFactory: java.lang.String findFactoryImplName()> calls: <org.apache.cxf.attachment.DelegatingInputStream: void close()> via: VIRTUAL edge: virtualinvoke r14.<java.io.InputStream: void close()>() in <javax.wsdl.factory.WSDLFactory: java.lang.String findFactoryImplName()> ==> <org.apache.cxf.attachment.DelegatingInputStream: void close()>
Global flow here: <javax.wsdl.factory.WSDLFactory: java.lang.String findFactoryImplName()> calls: <sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()> via: VIRTUAL edge: virtualinvoke r14.<java.io.InputStream: void close()>() in <javax.wsdl.factory.WSDLFactory: java.lang.String findFactoryImplName()> ==> <sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()>
Global flow here: <javax.wsdl.factory.WSDLFactory: java.lang.String findFactoryImplName()> calls: <sun.nio.ch.ChannelInputStream: void close()> via: VIRTUAL edge: virtualinvoke r14.<java.io.InputStream: void close()>() in <javax.wsdl.factory.WSDLFactory: java.lang.String findFactoryImplName()> ==> <sun.nio.ch.ChannelInputStream: void close()>
Global flow here: <javax.wsdl.factory.WSDLFactory: java.lang.String findFactoryImplName()> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke r14.<java.io.InputStream: void close()>() in <javax.wsdl.factory.WSDLFactory: java.lang.String findFactoryImplName()> ==> <sun.net.www.MeteredStream: void close()>
Source here: <javax.wsdl.factory.WSDLFactory: java.lang.String getFullPropertyFileName()>
Start traversal for source: <javax.mail.internet.MimeMultipart: byte[] readLine(java.io.BufferedInputStream)>...
Starting from source: 
0: readLine
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: getFullPropertyFileName
2: findFactoryImplName
3: newInstance
Flows from source is finished.
Start traversal for source: <org.codehaus.stax2.validation.XMLValidationSchemaFactory: org.codehaus.stax2.validation.XMLValidationSchemaFactory newInstance(java.lang.String,java.lang.ClassLoader)>...
Starting from source: 
0: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.InputStream,int,java.lang.String)>...
Starting from source: 
0: toString
1: getMetaInfFullPropertyFileName
2: findFactoryImplName
3: newInstance
4: getFullPropertyFileName
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit: void close(org.apache.cxf.message.Message)>...
Starting from source: 
0: close
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.utils.CollectionFactory$1: java.lang.Boolean run()>...
Starting from source: 
0: run
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: getFullPropertyFileName
2: findFactoryImplName
3: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.cxf.bus.extension.ExtensionManagerImpl: void load(java.lang.String,java.lang.ClassLoader)>...
Starting from source: 
0: load
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Start traversal for source: <java.io.LineNumberReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.Reader,int)>...
Starting from source: 
0: toString
1: getMetaInfFullPropertyFileName
2: findFactoryImplName
3: newInstance
4: getFullPropertyFileName
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.commands.ForkedCommandStreamHandler: void run()>...
Starting from source: 
0: run
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getFullPropertyFileName
2: findFactoryImplName
3: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getFullPropertyFileName
2: findFactoryImplName
3: newInstance
Flows from source is finished.
Start traversal for source: <javax.wsdl.factory.WSDLFactory: java.lang.String getFullPropertyFileName()>...
Starting from source: 
0: getFullPropertyFileName
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.log.Log$1: java.lang.Object run()>...
Starting from source: 
0: run
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Start traversal for source: <javax.wsdl.factory.WSDLFactory: java.lang.String findFactoryImplName()>...
Starting from source: 
0: findFactoryImplName
1: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.XmlSchemaCollection$1: java.lang.String run()>...
Starting from source: 
0: run
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: getMetaInfFullPropertyFileName
2: findFactoryImplName
3: newInstance
4: getFullPropertyFileName
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.StreamPrinter: void run()>...
Starting from source: 
0: run
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>...
Starting from source: 
0: close
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.TypeUtil: byte[] readLine(java.io.InputStream)>...
Starting from source: 
0: readLine
1: findFactoryImplName
2: newInstance
Flows from source is finished.
Now we build call graphs for class: org.apache.geronimo.mail.util.QuotedPrintableEncoder
Source here: <org.apache.geronimo.mail.util.QuotedPrintableEncoder: int encode(java.io.PushbackInputStream,java.lang.StringBuffer,java.lang.String,int)>
Now we build call graphs for class: org.apache.geronimo.specs.activation.CommandMapBundleTrackerCustomizer
Source here: <org.apache.geronimo.specs.activation.CommandMapBundleTrackerCustomizer: void rebuildCommandMap()>
Now we build call graphs for class: javax.xml.stream.FactoryLocator
Source here: <javax.xml.stream.FactoryLocator: java.lang.Object locate(java.lang.String,java.lang.String,java.lang.ClassLoader)>
Now we build call graphs for class: org.apache.cxf.transport.http.AbstractHTTPDestination
Source here: <org.apache.cxf.transport.http.AbstractHTTPDestination: java.lang.String getBasePath(java.lang.String)>
Global flow here: <org.apache.cxf.transport.http.AbstractHTTPDestination: org.apache.cxf.service.model.EndpointInfo getAddressValue(org.apache.cxf.service.model.EndpointInfo,boolean)> calls: <org.apache.cxf.common.util.StringUtils: java.lang.String addDefaultPortIfMissing(java.lang.String)> via: STATIC edge: $r3 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String addDefaultPortIfMissing(java.lang.String)>($r2) in <org.apache.cxf.transport.http.AbstractHTTPDestination: org.apache.cxf.service.model.EndpointInfo getAddressValue(org.apache.cxf.service.model.EndpointInfo,boolean)> ==> <org.apache.cxf.common.util.StringUtils: java.lang.String addDefaultPortIfMissing(java.lang.String)>
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.InputStream,int,java.lang.String)>...
Starting from source: 
0: toString
1: getAddressValue
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit: void close(org.apache.cxf.message.Message)>...
Starting from source: 
0: close
1: getAddressValue
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.Reader,int)>...
Starting from source: 
0: toString
1: getAddressValue
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.StringUtils: java.lang.String addDefaultPortIfMissing(java.lang.String,java.lang.String)>...
Starting from source: 
0: addDefaultPortIfMissing
1: getAddressValue
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: getAddressValue
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>...
Starting from source: 
0: close
1: getAddressValue
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.common.util.PropertiesLoaderUtils
Source here: <org.apache.cxf.common.util.PropertiesLoaderUtils: java.util.Properties loadAllProperties(java.lang.String,java.lang.ClassLoader,java.util.logging.Logger,java.util.logging.Level,java.lang.String)>
Now we build call graphs for class: org.apache.cxf.bus.osgi.CXFExtensionBundleListener
Source here: <org.apache.cxf.bus.osgi.CXFExtensionBundleListener: void register(org.osgi.framework.Bundle)>
Now we build call graphs for class: org.apache.cxf.common.logging.LogUtils$1
Source here: <org.apache.cxf.common.logging.LogUtils$1: java.lang.String run()>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.utils.CollectionFactory$1: java.lang.Boolean run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.commands.ForkedCommandStreamHandler: void run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.logging.LogUtils$1: java.lang.String run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.log.Log$1: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.XmlSchemaCollection$1: java.lang.String run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.StreamPrinter: void run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.jaxrs.client.AbstractClient
Source here: <org.apache.cxf.jaxrs.client.AbstractClient: javax.ws.rs.core.Response$ResponseBuilder setResponseBuilder(org.apache.cxf.message.Message,org.apache.cxf.message.Exchange)>
Now we build call graphs for class: org.springframework.core.io.AbstractFileResolvingResource
Source here: <org.springframework.core.io.AbstractFileResolvingResource: java.io.File getFile()>
Source here: <org.springframework.core.io.AbstractFileResolvingResource: java.io.File getFileForLastModifiedCheck()>
Now we build call graphs for class: org.springframework.asm.ClassReader
Source here: <org.springframework.asm.ClassReader: byte[] a(java.io.InputStream)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.commons.EmptyVisitor: void visitEnd()> via: INTERFACE edge: interfaceinvoke $r61.<org.springframework.asm.AnnotationVisitor: void visitEnd()>() in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.commons.EmptyVisitor: void visitEnd()>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitEnd()> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitEnd()>() in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitEnd()>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitMaxs(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitMaxs(int,int)>($i12, $i14) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitMaxs(int,int)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitAttribute(org.springframework.asm.Attribute)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitAttribute(org.springframework.asm.Attribute)>(r109) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitAttribute(org.springframework.asm.Attribute)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.springframework.asm.Label,org.springframework.asm.Label,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.springframework.asm.Label,org.springframework.asm.Label,int)>($r118, $r119, r117, $r120, $r121, $i25) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.springframework.asm.Label,org.springframework.asm.Label,int)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitLabel(org.springframework.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitLabel(org.springframework.asm.Label)>(r115) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitLabel(org.springframework.asm.Label)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitMultiANewArrayInsn(java.lang.String,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)>($r25, $i415) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitMultiANewArrayInsn(java.lang.String,int)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitIincInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitIincInsn(int,int)>($i412, $i413) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitIincInsn(int,int)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitTypeInsn(int,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>($i410, $r24) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitTypeInsn(int,java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>($i408, $r20, $r22, $r23) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>($i407, $r20, $r22, $r23) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitLdcInsn(java.lang.Object)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r15) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitLdcInsn(java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitLdcInsn(java.lang.Object)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r16) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitLdcInsn(java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitIntInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitIntInsn(int,int)>($i402, $i403) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitIntInsn(int,int)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitIntInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitIntInsn(int,int)>($i400, $i401) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitIntInsn(int,int)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitVarInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitVarInsn(int,int)>($i398, $i399) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitVarInsn(int,int)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitLookupSwitchInsn(org.springframework.asm.Label,int[],org.springframework.asm.Label[])> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitLookupSwitchInsn(org.springframework.asm.Label,int[],org.springframework.asm.Label[])>($r11, r113, r114) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitLookupSwitchInsn(org.springframework.asm.Label,int[],org.springframework.asm.Label[])>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitTableSwitchInsn(int,int,org.springframework.asm.Label,org.springframework.asm.Label[])> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitTableSwitchInsn(int,int,org.springframework.asm.Label,org.springframework.asm.Label[])>($i56, $i57, $r13, r112) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitTableSwitchInsn(int,int,org.springframework.asm.Label,org.springframework.asm.Label[])>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitVarInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitVarInsn(int,int)>($i396, $i40) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitVarInsn(int,int)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitIincInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitIincInsn(int,int)>($i42, $i395) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitIincInsn(int,int)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitJumpInsn(int,org.springframework.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitJumpInsn(int,org.springframework.asm.Label)>($i74, $r17) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitJumpInsn(int,org.springframework.asm.Label)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitJumpInsn(int,org.springframework.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitJumpInsn(int,org.springframework.asm.Label)>($i391, $r18) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitJumpInsn(int,org.springframework.asm.Label)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitVarInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitVarInsn(int,int)>($i88, $i87) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitVarInsn(int,int)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitVarInsn(int,int)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitVarInsn(int,int)>($i91, $i90) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitVarInsn(int,int)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitInsn(int)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitInsn(int)>($i382) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitInsn(int)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitLineNumber(int,org.springframework.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitLineNumber(int,org.springframework.asm.Label)>($i104, r110) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitLineNumber(int,org.springframework.asm.Label)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitLabel(org.springframework.asm.Label)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitLabel(org.springframework.asm.Label)>(r110) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitLabel(org.springframework.asm.Label)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitTryCatchBlock(org.springframework.asm.Label,org.springframework.asm.Label,org.springframework.asm.Label,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitTryCatchBlock(org.springframework.asm.Label,org.springframework.asm.Label,org.springframework.asm.Label,java.lang.String)>(r106, r107, r108, $r40) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitTryCatchBlock(org.springframework.asm.Label,org.springframework.asm.Label,org.springframework.asm.Label,java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitTryCatchBlock(org.springframework.asm.Label,org.springframework.asm.Label,org.springframework.asm.Label,java.lang.String)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitTryCatchBlock(org.springframework.asm.Label,org.springframework.asm.Label,org.springframework.asm.Label,java.lang.String)>(r106, r107, r108, null) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitTryCatchBlock(org.springframework.asm.Label,org.springframework.asm.Label,org.springframework.asm.Label,java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitCode()> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitCode()>() in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitCode()>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: void visitAttribute(org.springframework.asm.Attribute)> via: INTERFACE edge: interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: void visitAttribute(org.springframework.asm.Attribute)>(r102) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: void visitAttribute(org.springframework.asm.Attribute)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.core.type.classreading.MethodMetadataReadingVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)> via: INTERFACE edge: $r60 = interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r59, $z40) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.core.type.classreading.MethodMetadataReadingVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.MethodAdapter: org.springframework.asm.AnnotationVisitor visitAnnotationDefault()> via: INTERFACE edge: $r61 = interfaceinvoke $r9.<org.springframework.asm.MethodVisitor: org.springframework.asm.AnnotationVisitor visitAnnotationDefault()>() in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.MethodAdapter: org.springframework.asm.AnnotationVisitor visitAnnotationDefault()>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.commons.EmptyVisitor: void visitEnd()> via: INTERFACE edge: interfaceinvoke $r71.<org.springframework.asm.FieldVisitor: void visitEnd()>() in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.commons.EmptyVisitor: void visitEnd()>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.commons.EmptyVisitor: void visitAttribute(org.springframework.asm.Attribute)> via: INTERFACE edge: interfaceinvoke $r71.<org.springframework.asm.FieldVisitor: void visitAttribute(org.springframework.asm.Attribute)>(r98) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.commons.EmptyVisitor: void visitAttribute(org.springframework.asm.Attribute)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.asm.commons.EmptyVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)> via: INTERFACE edge: $r73 = interfaceinvoke $r71.<org.springframework.asm.FieldVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r72, $z37) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.asm.commons.EmptyVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.core.type.classreading.ClassMetadataReadingVisitor: void visitEnd()> via: INTERFACE edge: interfaceinvoke r6.<org.springframework.asm.ClassVisitor: void visitEnd()>() in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.core.type.classreading.ClassMetadataReadingVisitor: void visitEnd()>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor: org.springframework.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> via: INTERFACE edge: $r9 = interfaceinvoke r6.<org.springframework.asm.ClassVisitor: org.springframework.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i240, $r7, $r8, r101, r103) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor: org.springframework.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.core.type.classreading.ClassMetadataReadingVisitor: org.springframework.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)> via: INTERFACE edge: $r71 = interfaceinvoke r6.<org.springframework.asm.ClassVisitor: org.springframework.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(i224, $r69, $r70, r97, $r99) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.core.type.classreading.ClassMetadataReadingVisitor: org.springframework.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.core.type.classreading.ClassMetadataReadingVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)> via: INTERFACE edge: interfaceinvoke r6.<org.springframework.asm.ClassVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>($r94, $r95, $r96, $i221) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.core.type.classreading.ClassMetadataReadingVisitor: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.core.type.classreading.ClassMetadataReadingVisitor: void visitAttribute(org.springframework.asm.Attribute)> via: INTERFACE edge: interfaceinvoke r6.<org.springframework.asm.ClassVisitor: void visitAttribute(org.springframework.asm.Attribute)>(r85) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.core.type.classreading.ClassMetadataReadingVisitor: void visitAttribute(org.springframework.asm.Attribute)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)> via: INTERFACE edge: $r77 = interfaceinvoke r6.<org.springframework.asm.ClassVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r76, $z36) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.core.type.classreading.ClassMetadataReadingVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke r6.<org.springframework.asm.ClassVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)>(r90, r91, r92) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.core.type.classreading.ClassMetadataReadingVisitor: void visitOuterClass(java.lang.String,java.lang.String,java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.core.type.classreading.ClassMetadataReadingVisitor: void visitSource(java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke r6.<org.springframework.asm.ClassVisitor: void visitSource(java.lang.String,java.lang.String)>(r88, r89) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.core.type.classreading.ClassMetadataReadingVisitor: void visitSource(java.lang.String,java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> calls: <org.springframework.core.type.classreading.ClassMetadataReadingVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> via: INTERFACE edge: interfaceinvoke r6.<org.springframework.asm.ClassVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>($i6, i193, $r3, r87, r5, $r84) in <org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,org.springframework.asm.Attribute[],boolean)> ==> <org.springframework.core.type.classreading.ClassMetadataReadingVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>
Global flow here: <org.springframework.asm.ClassReader: void a(int,char[],boolean,org.springframework.asm.MethodVisitor)> calls: <org.springframework.asm.MethodAdapter: org.springframework.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)> via: INTERFACE edge: $r5 = interfaceinvoke r4.<org.springframework.asm.MethodVisitor: org.springframework.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>(i4, $r3, z0) in <org.springframework.asm.ClassReader: void a(int,char[],boolean,org.springframework.asm.MethodVisitor)> ==> <org.springframework.asm.MethodAdapter: org.springframework.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visitEnd()> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visitEnd()>() in <org.springframework.asm.ClassReader: int a(int,char[],org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visitEnd()>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visitEnd()> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visitEnd()>() in <org.springframework.asm.ClassReader: int a(int,char[],org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visitEnd()>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)> via: INTERFACE edge: $r25 = interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)>(r2) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r19) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r17) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r13) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r15) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r21) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r11) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r9) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r23) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)> via: INTERFACE edge: $r26 = interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)>(r2) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)> via: INTERFACE edge: $r36 = interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)>(r2, $r35) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r8) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visitEnum(java.lang.String,java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>(r2, $r5, $r6) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r4) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r40) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r39) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r37) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r38) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r30) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visitEnd()> via: INTERFACE edge: interfaceinvoke $r25.<org.springframework.asm.AnnotationVisitor: void visitEnd()>() in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visitEnd()>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visitEnd()> via: INTERFACE edge: interfaceinvoke $r25.<org.springframework.asm.AnnotationVisitor: void visitEnd()>() in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visitEnd()>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visitEnd()> via: INTERFACE edge: interfaceinvoke $r26.<org.springframework.asm.AnnotationVisitor: void visitEnd()>() in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visitEnd()>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visitEnd()> via: INTERFACE edge: interfaceinvoke $r26.<org.springframework.asm.AnnotationVisitor: void visitEnd()>() in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor$1: void visitEnd()>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)> via: INTERFACE edge: $r25 = interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)>(r2) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r19) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r17) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r13) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r15) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r21) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r11) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r9) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r23) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)> via: INTERFACE edge: $r26 = interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)>(r2) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)> via: INTERFACE edge: $r36 = interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)>(r2, $r35) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r8) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>(r2, $r5, $r6) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r4) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r40) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r39) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r37) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r38) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r30) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.commons.EmptyVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)> via: INTERFACE edge: $r25 = interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)>(r2) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r19) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r17) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r13) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r15) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r21) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r11) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r9) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, r23) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)> via: INTERFACE edge: $r26 = interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)>(r2) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: org.springframework.asm.AnnotationVisitor visitArray(java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)> via: INTERFACE edge: $r36 = interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)>(r2, $r35) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: org.springframework.asm.AnnotationVisitor visitAnnotation(java.lang.String,java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r8) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>(r2, $r5, $r6) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r4) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r40) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r39) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r37) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r38) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)> via: INTERFACE edge: interfaceinvoke r1.<org.springframework.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>(r2, $r30) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor: void visit(java.lang.String,java.lang.Object)>
Global flow here: <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> calls: <org.springframework.asm.Type: org.springframework.asm.Type getType(java.lang.String)> via: STATIC edge: $r8 = staticinvoke <org.springframework.asm.Type: org.springframework.asm.Type getType(java.lang.String)>($r7) in <org.springframework.asm.ClassReader: int a(int,char[],java.lang.String,org.springframework.asm.AnnotationVisitor)> ==> <org.springframework.asm.Type: org.springframework.asm.Type getType(java.lang.String)>
Global flow here: <org.springframework.asm.ClassReader: org.springframework.asm.Attribute a(org.springframework.asm.Attribute[],java.lang.String,int,int,char[],int,org.springframework.asm.Label[])> calls: <org.springframework.asm.Attribute: org.springframework.asm.Attribute read(org.springframework.asm.ClassReader,int,int,char[],int,org.springframework.asm.Label[])> via: VIRTUAL edge: $r4 = virtualinvoke $r11.<org.springframework.asm.Attribute: org.springframework.asm.Attribute read(org.springframework.asm.ClassReader,int,int,char[],int,org.springframework.asm.Label[])>(r3, i1, i2, null, $i6, null) in <org.springframework.asm.ClassReader: org.springframework.asm.Attribute a(org.springframework.asm.Attribute[],java.lang.String,int,int,char[],int,org.springframework.asm.Label[])> ==> <org.springframework.asm.Attribute: org.springframework.asm.Attribute read(org.springframework.asm.ClassReader,int,int,char[],int,org.springframework.asm.Label[])>
Global flow here: <org.springframework.asm.ClassReader: java.lang.Object readConst(int,char[])> calls: <org.springframework.asm.Type: org.springframework.asm.Type getType(java.lang.String)> via: STATIC edge: $r9 = staticinvoke <org.springframework.asm.Type: org.springframework.asm.Type getType(java.lang.String)>($r15) in <org.springframework.asm.ClassReader: java.lang.Object readConst(int,char[])> ==> <org.springframework.asm.Type: org.springframework.asm.Type getType(java.lang.String)>
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read(char[],int,int)>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.BaseReader: int read()>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.InputStream,int,java.lang.String)>...
Starting from source: 
0: toString
1: readConst
2: a
3: readUTF8
4: readClass
5: accept
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <java.io.ObjectInputStream: int readInt()>...
Starting from source: 
0: readInt
1: readLong
2: readConst
3: a
4: readUTF8
5: readClass
6: accept
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[])>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <java.io.RandomAccessFile: int read(byte[],int,int)>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <java.io.FileInputStream: int read(byte[])>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: int read(byte[])>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[])>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <java.io.RandomAccessFile: byte readByte()>...
Starting from source: 
0: readByte
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <java.io.ByteArrayInputStream: int read()>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.Reader,int)>...
Starting from source: 
0: toString
1: readConst
2: a
3: readUTF8
4: readClass
5: accept
Flows from source is finished.
Start traversal for source: <java.io.PushbackInputStream: int read()>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: int read()>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read()>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.ClassReader: int readShort()>...
Starting from source: 
0: readShort
1: accept
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: short readShort()>...
Starting from source: 
0: readShort
1: accept
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int read()>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <javax.mail.internet.MimeMultipart$MimeBodyPartInputStream: int read()>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[],int,int)>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int read(byte[])>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: byte readByte()>...
Starting from source: 
0: readByte
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <java.io.InputStreamReader: int read()>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: readConst
2: a
3: readUTF8
4: readClass
5: accept
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <org.springframework.asm.ClassReader: byte[] a(java.io.InputStream)>...
Starting from source: 
0: a
1: readUTF8
2: readConst
3: accept
4: readClass
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: long readLong()>...
Starting from source: 
0: readLong
1: readConst
2: a
3: readUTF8
4: readClass
5: accept
Flows from source is finished.
Start traversal for source: <javax.mail.util.SharedFileInputStream$SharedFileSource: int read(long,byte[],int,int)>...
Starting from source: 
0: read
1: a
2: readUTF8
3: readConst
4: accept
5: readClass
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.ClassReader: int readInt()>...
Starting from source: 
0: readInt
1: readLong
2: readConst
3: a
4: readUTF8
5: readClass
6: accept
Flows from source is finished.
Now we build call graphs for class: com.ctc.wstx.util.StringUtil
Source here: <com.ctc.wstx.util.StringUtil: java.lang.String getLF()>
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.InputStream,int,java.lang.String)>...
Starting from source: 
0: toString
1: trimEncoding
2: normalize
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.Reader,int)>...
Starting from source: 
0: toString
1: trimEncoding
2: normalize
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: trimEncoding
2: normalize
Flows from source is finished.
Now we build call graphs for class: org.apache.log4j.Level
Source here: <org.apache.log4j.Level: void readObject(java.io.ObjectInputStream)>
Now we build call graphs for class: org.springframework.context.support.AbstractApplicationContext$1
Source here: <org.springframework.context.support.AbstractApplicationContext$1: java.lang.String getSystemAttribute(java.lang.String)>
Now we build call graphs for class: org.springframework.context.support.AbstractApplicationContext$2
Source here: <org.springframework.context.support.AbstractApplicationContext$2: java.lang.String getSystemAttribute(java.lang.String)>
Now we build call graphs for class: com.sun.xml.bind.v2.ContextFactory
Source here: <com.sun.xml.bind.v2.ContextFactory: java.util.List loadIndexedClasses(java.lang.String,java.lang.ClassLoader)>
Now we build call graphs for class: javax.xml.bind.GetPropertyAction
Source here: <javax.xml.bind.GetPropertyAction: java.lang.String run()>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: find
3: executePrivileged
Flows from source is finished.
Start traversal for source: <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext find(java.lang.Class[],java.util.Map)>...
Starting from source: 
0: find
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.utils.CollectionFactory$1: java.lang.Boolean run()>...
Starting from source: 
0: run
1: find
2: executePrivileged
Flows from source is finished.
Start traversal for source: <javax.ws.rs.ext.FactoryFinder: java.lang.Object find(java.lang.String,java.lang.String)>...
Starting from source: 
0: find
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: find
3: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: find
2: executePrivileged
Flows from source is finished.
Start traversal for source: <javax.xml.bind.GetPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: find
2: executePrivileged
Flows from source is finished.
Start traversal for source: <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext find(java.lang.String,java.lang.String,java.lang.ClassLoader,java.util.Map)>...
Starting from source: 
0: find
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
1: find
2: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.commands.ForkedCommandStreamHandler: void run()>...
Starting from source: 
0: run
1: find
2: executePrivileged
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: find
3: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.logging.LogUtils$1: java.lang.String run()>...
Starting from source: 
0: run
1: find
2: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
1: find
2: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: find
2: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: find
3: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: find
2: executePrivileged
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.log.Log$1: java.lang.Object run()>...
Starting from source: 
0: run
1: find
2: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.XmlSchemaCollection$1: java.lang.String run()>...
Starting from source: 
0: run
1: find
2: executePrivileged
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.StreamPrinter: void run()>...
Starting from source: 
0: run
1: find
2: executePrivileged
Flows from source is finished.
Now we build call graphs for class: javax.servlet.http.HttpUtils
Source here: <javax.servlet.http.HttpUtils: java.util.Hashtable parsePostData(int,javax.servlet.ServletInputStream)>
Now we build call graphs for class: org.eclipse.jetty.io.bio.StringEndPoint
Source here: <org.eclipse.jetty.io.bio.StringEndPoint: boolean hasMore()>
Now we build call graphs for class: org.eclipse.jetty.util.IO
Source here: <org.eclipse.jetty.util.IO: void copy(java.io.InputStream,java.io.OutputStream,long)>
Source here: <org.eclipse.jetty.util.IO: void copy(java.io.Reader,java.io.Writer,long)>
Source here: <org.eclipse.jetty.util.IO: void copyDir(java.io.File,java.io.File)>
Source here: <org.eclipse.jetty.util.IO: boolean delete(java.io.File)>
Start traversal for source: <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)>...
Starting from source: 
0: copy
1: readBytes
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.util.StreamUtils: void copy(java.io.InputStream,java.io.OutputStream,int)>...
Starting from source: 
0: copy
1: readBytes
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.IO: void copy(java.io.InputStream,java.io.OutputStream,long)>...
Starting from source: 
0: copy
1: readBytes
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: void copy(java.io.Reader,java.io.Writer,int)>...
Starting from source: 
0: copy
1: readBytes
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.BaseReader: int readBytes()>...
Starting from source: 
0: readBytes
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.IO: void copy(java.io.Reader,java.io.Writer,long)>...
Starting from source: 
0: copy
1: readBytes
Flows from source is finished.
Start traversal for source: <org.springframework.util.FileCopyUtils: int copy(java.io.Reader,java.io.Writer)>...
Starting from source: 
0: copy
1: readBytes
Flows from source is finished.
Start traversal for source: <org.springframework.util.FileCopyUtils: int copy(java.io.InputStream,java.io.OutputStream)>...
Starting from source: 
0: copy
1: readBytes
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.common.logging.JDKBugHacks$1
Source here: <org.apache.cxf.common.logging.JDKBugHacks$1: java.lang.String run()>
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
3: skipHack
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.utils.CollectionFactory$1: java.lang.Boolean run()>...
Starting from source: 
0: run
1: executePrivileged
2: skipHack
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String,java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
3: skipHack
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: executePrivileged
2: skipHack
Flows from source is finished.
Start traversal for source: <org.apache.log4j.varia.HUPNode: void run()>...
Starting from source: 
0: run
1: executePrivileged
2: skipHack
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.commands.ForkedCommandStreamHandler: void run()>...
Starting from source: 
0: run
1: executePrivileged
2: skipHack
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
3: skipHack
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.logging.LogUtils$1: java.lang.String run()>...
Starting from source: 
0: run
1: executePrivileged
2: skipHack
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
2: skipHack
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$5: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
2: skipHack
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.SessionUtil: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
3: skipHack
Flows from source is finished.
Start traversal for source: <org.apache.commons.logging.LogFactory$6: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
2: skipHack
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.logging.JDKBugHacks$1: java.lang.String run()>...
Starting from source: 
0: run
1: executePrivileged
2: skipHack
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.logging.JDKBugHacks: boolean skipHack(java.lang.String)>...
Starting from source: 
0: skipHack
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.StreamPrinter: void run()>...
Starting from source: 
0: run
1: executePrivileged
2: skipHack
Flows from source is finished.
Start traversal for source: <javax.xml.bind.GetPropertyAction: java.lang.String run()>...
Starting from source: 
0: run
1: executePrivileged
2: skipHack
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.log.Log$1: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
2: skipHack
Flows from source is finished.
Start traversal for source: <org.apache.ws.commons.schema.XmlSchemaCollection$1: java.lang.String run()>...
Starting from source: 
0: run
1: executePrivileged
2: skipHack
Flows from source is finished.
Now we build call graphs for class: org.apache.geronimo.mail.handlers.TextHandler
Source here: <org.apache.geronimo.mail.handlers.TextHandler: java.lang.Object getContent(javax.activation.DataSource)>
Now we build call graphs for class: org.apache.cxf.resource.URIResolver
Source here: <org.apache.cxf.resource.URIResolver: void tryFileSystem(java.lang.String,java.lang.String)>
Global flow here: <org.apache.cxf.resource.URIResolver: void tryFileSystem(java.lang.String,java.lang.String)> calls: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)> via: STATIC edge: $r47 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>("http.proxyHost") in <org.apache.cxf.resource.URIResolver: void tryFileSystem(java.lang.String,java.lang.String)> ==> <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>
Global flow here: <org.apache.cxf.resource.URIResolver: void tryFileSystem(java.lang.String,java.lang.String)> calls: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)> via: STATIC edge: $r48 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>("http.proxy.user") in <org.apache.cxf.resource.URIResolver: void tryFileSystem(java.lang.String,java.lang.String)> ==> <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>
Global flow here: <org.apache.cxf.resource.URIResolver: void tryFileSystem(java.lang.String,java.lang.String)> calls: <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)> via: STATIC edge: $r49 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>("http.proxy.password") in <org.apache.cxf.resource.URIResolver: void tryFileSystem(java.lang.String,java.lang.String)> ==> <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>
Global flow here: <org.apache.cxf.resource.URIResolver: void tryFileSystem(java.lang.String,java.lang.String)> calls: <org.apache.cxf.common.util.Base64Utility: java.lang.String encode(byte[])> via: STATIC edge: $r56 = staticinvoke <org.apache.cxf.common.util.Base64Utility: java.lang.String encode(byte[])>($r55) in <org.apache.cxf.resource.URIResolver: void tryFileSystem(java.lang.String,java.lang.String)> ==> <org.apache.cxf.common.util.Base64Utility: java.lang.String encode(byte[])>
Global flow here: <org.apache.cxf.resource.URIResolver: void tryFileSystem(java.lang.String,java.lang.String)> calls: <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)> via: STATIC edge: $z2 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r6) in <org.apache.cxf.resource.URIResolver: void tryFileSystem(java.lang.String,java.lang.String)> ==> <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>
Source here: <org.apache.cxf.resource.URIResolver: java.lang.String getFilePathFromUri(java.lang.String)>
Source here: <org.apache.cxf.resource.URIResolver: void tryArchive(java.lang.String)>
Source here: <org.apache.cxf.resource.URIResolver: void tryClasspath(java.lang.String)>
Global flow here: <org.apache.cxf.resource.URIResolver: void tryClasspath(java.lang.String)> calls: <org.apache.cxf.common.classloader.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)> via: STATIC edge: $r2 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)>(r27, $r1) in <org.apache.cxf.resource.URIResolver: void tryClasspath(java.lang.String)> ==> <org.apache.cxf.common.classloader.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)>
Source here: <org.apache.cxf.resource.URIResolver: void tryRemote(java.lang.String)>
Global flow here: <org.apache.cxf.resource.URIResolver: void tryRemote(java.lang.String)> calls: <org.apache.cxf.helpers.LoadingByteArrayOutputStream: java.io.ByteArrayInputStream createInputStream()> via: VIRTUAL edge: $r8 = virtualinvoke r18.<org.apache.cxf.helpers.LoadingByteArrayOutputStream: java.io.ByteArrayInputStream createInputStream()>() in <org.apache.cxf.resource.URIResolver: void tryRemote(java.lang.String)> ==> <org.apache.cxf.helpers.LoadingByteArrayOutputStream: java.io.ByteArrayInputStream createInputStream()>
Global flow here: <org.apache.cxf.resource.URIResolver: void tryRemote(java.lang.String)> calls: <sun.net.www.protocol.file.FileURLConnection: java.io.InputStream getInputStream()> via: VIRTUAL edge: $r11 = virtualinvoke $r10.<java.net.URLConnection: java.io.InputStream getInputStream()>() in <org.apache.cxf.resource.URIResolver: void tryRemote(java.lang.String)> ==> <sun.net.www.protocol.file.FileURLConnection: java.io.InputStream getInputStream()>
Global flow here: <org.apache.cxf.resource.URIResolver: void tryRemote(java.lang.String)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke $r14.<java.io.InputStream: void close()>() in <org.apache.cxf.resource.URIResolver: void tryRemote(java.lang.String)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.apache.cxf.resource.URIResolver: void tryRemote(java.lang.String)> calls: <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)> via: STATIC edge: staticinvoke <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r13, $r12) in <org.apache.cxf.resource.URIResolver: void tryRemote(java.lang.String)> ==> <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>
Start traversal for source: <org.apache.cxf.resource.URIResolver: void tryFileSystem(java.lang.String,java.lang.String)>...
Starting from source: 
0: tryFileSystem
1: tryArchive
2: resolve
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.InputStream,int,java.lang.String)>...
Starting from source: 
0: toString
1: tryRemote
2: tryClasspath
3: tryArchive
4: resolve
5: tryFileSystem
Flows from source is finished.
Start traversal for source: <java.net.URL: java.lang.String getFile()>...
Starting from source: 
0: getFile
1: resolve
2: tryArchive
3: tryFileSystem
Flows from source is finished.
Start traversal for source: <java.io.File: java.io.File getAbsoluteFile()>...
Starting from source: 
0: getAbsoluteFile
1: tryFileSystem
2: tryArchive
3: resolve
Flows from source is finished.
Start traversal for source: <org.springframework.util.ResourceUtils: java.io.File getFile(java.net.URL,java.lang.String)>...
Starting from source: 
0: getFile
1: resolve
2: tryArchive
3: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.apache.cxf.resource.URIResolver: void tryArchive(java.lang.String)>...
Starting from source: 
0: tryArchive
1: resolve
2: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>...
Starting from source: 
0: getInputStream
1: resolve
2: tryArchive
3: tryFileSystem
4: tryRemote
5: tryClasspath
Flows from source is finished.
Start traversal for source: <org.apache.cxf.resource.URIResolver: void tryRemote(java.lang.String)>...
Starting from source: 
0: tryRemote
1: tryClasspath
2: tryArchive
3: resolve
4: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.servlet.ServletContextResourceResolver: java.lang.Object resolve(java.lang.String,java.lang.Class)>...
Starting from source: 
0: resolve
1: tryArchive
2: tryFileSystem
Flows from source is finished.
Start traversal for source: <java.net.URL: java.io.InputStream openStream()>...
Starting from source: 
0: openStream
1: tryClasspath
2: tryArchive
3: resolve
4: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream,int)>...
Starting from source: 
0: copy
1: tryRemote
2: tryClasspath
3: tryArchive
4: resolve
5: tryFileSystem
Flows from source is finished.
Start traversal for source: <java.net.URL: java.lang.String getPath()>...
Starting from source: 
0: getPath
1: getFilePathFromUri
2: tryFileSystem
3: tryArchive
4: resolve
Flows from source is finished.
Start traversal for source: <org.springframework.core.io.AbstractFileResolvingResource: java.io.File getFile()>...
Starting from source: 
0: getFile
1: resolve
2: tryArchive
3: tryFileSystem
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getAbsolutePath()>...
Starting from source: 
0: getAbsolutePath
1: tryFileSystem
2: tryArchive
3: resolve
Flows from source is finished.
Start traversal for source: <org.apache.log4j.lf5.util.StreamUtils: void copy(java.io.InputStream,java.io.OutputStream,int)>...
Starting from source: 
0: copy
1: tryRemote
2: tryClasspath
3: tryArchive
4: resolve
5: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.server.Response: java.lang.String toString()>...
Starting from source: 
0: toString
1: tryRemote
2: tryClasspath
3: tryArchive
4: resolve
5: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.springframework.core.io.UrlResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: resolve
2: tryArchive
3: tryFileSystem
4: tryRemote
5: tryClasspath
Flows from source is finished.
Start traversal for source: <java.io.File: java.net.URI toURI()>...
Starting from source: 
0: toURI
1: tryClasspath
2: tryArchive
3: resolve
4: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.Resource: java.net.URL toURL(java.io.File)>...
Starting from source: 
0: toURL
1: tryArchive
2: resolve
3: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit: void close(org.apache.cxf.message.Message)>...
Starting from source: 
0: close
1: tryRemote
2: tryClasspath
3: tryArchive
4: resolve
5: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: resolve
2: tryArchive
3: tryFileSystem
4: tryRemote
5: tryClasspath
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.IO: void copy(java.io.InputStream,java.io.OutputStream,long)>...
Starting from source: 
0: copy
1: tryRemote
2: tryClasspath
3: tryArchive
4: resolve
5: tryFileSystem
Flows from source is finished.
Start traversal for source: <java.io.File: java.lang.String getPath()>...
Starting from source: 
0: getPath
1: getFilePathFromUri
2: tryFileSystem
3: tryArchive
4: resolve
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: boolean exists()>...
Starting from source: 
0: exists
1: isFile
2: resolve
3: tryArchive
4: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: void copy(java.io.Reader,java.io.Writer,int)>...
Starting from source: 
0: copy
1: tryRemote
2: tryClasspath
3: tryArchive
4: resolve
5: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.QuotedPrintableEncoder: int encode(java.io.PushbackInputStream,java.lang.StringBuffer,java.lang.String,int)>...
Starting from source: 
0: encode
1: tryFileSystem
2: tryArchive
3: resolve
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.URLResource: java.io.File getFile()>...
Starting from source: 
0: getFile
1: resolve
2: tryArchive
3: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.apache.cxf.helpers.IOUtils: java.lang.String toString(java.io.Reader,int)>...
Starting from source: 
0: toString
1: tryRemote
2: tryClasspath
3: tryArchive
4: resolve
5: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.springframework.http.client.SimpleClientHttpRequest: java.net.URI getURI()>...
Starting from source: 
0: getURI
1: resolve
2: tryArchive
3: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.springframework.core.io.FileSystemResource: java.net.URI getURI()>...
Starting from source: 
0: getURI
1: resolve
2: tryArchive
3: tryFileSystem
Flows from source is finished.
Start traversal for source: <java.net.URLConnection: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: resolve
2: tryArchive
3: tryFileSystem
4: tryRemote
5: tryClasspath
Flows from source is finished.
Start traversal for source: <org.apache.cxf.resource.URIResolver: void tryClasspath(java.lang.String)>...
Starting from source: 
0: tryClasspath
1: tryArchive
2: resolve
3: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.IO: void copy(java.io.Reader,java.io.Writer,long)>...
Starting from source: 
0: copy
1: tryRemote
2: tryClasspath
3: tryArchive
4: resolve
5: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.apache.cxf.common.util.ClassReader: byte[] getBytes(java.lang.Class)>...
Starting from source: 
0: getBytes
1: tryFileSystem
2: tryArchive
3: resolve
Flows from source is finished.
Start traversal for source: <org.apache.geronimo.mail.util.Base64Encoder: void encode(java.io.InputStream,java.lang.StringBuffer,int)>...
Starting from source: 
0: encode
1: tryFileSystem
2: tryArchive
3: resolve
Flows from source is finished.
Start traversal for source: <org.springframework.util.FileCopyUtils: int copy(java.io.Reader,java.io.Writer)>...
Starting from source: 
0: copy
1: tryRemote
2: tryClasspath
3: tryArchive
4: resolve
5: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.apache.cxf.resource.ExtendedURIResolver: org.xml.sax.InputSource resolve(java.lang.String,java.lang.String)>...
Starting from source: 
0: resolve
1: tryArchive
2: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.apache.cxf.resource.URIResolver: java.lang.String getFilePathFromUri(java.lang.String)>...
Starting from source: 
0: getFilePathFromUri
1: tryFileSystem
2: tryArchive
3: resolve
Flows from source is finished.
Start traversal for source: <org.eclipse.jetty.util.resource.JarResource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: resolve
2: tryArchive
3: tryFileSystem
4: tryRemote
5: tryClasspath
Flows from source is finished.
Start traversal for source: <javax.activation.URLDataSource: java.io.InputStream getInputStream()>...
Starting from source: 
0: getInputStream
1: resolve
2: tryArchive
3: tryFileSystem
4: tryRemote
5: tryClasspath
Flows from source is finished.
Start traversal for source: <org.springframework.util.FileCopyUtils: int copy(java.io.InputStream,java.io.OutputStream)>...
Starting from source: 
0: copy
1: tryRemote
2: tryClasspath
3: tryArchive
4: resolve
5: tryFileSystem
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>...
Starting from source: 
0: close
1: tryRemote
2: tryClasspath
3: tryArchive
4: resolve
5: tryFileSystem
Flows from source is finished.
Now we build call graphs for class: org.apache.cxf.interceptor.LoggingInInterceptor
Source here: <org.apache.cxf.interceptor.LoggingInInterceptor: void logging(java.util.logging.Logger,org.apache.cxf.message.Message)>
Now we build call graphs for class: org.apache.cxf.attachment.MimeBodyPartInputStream
Source here: <org.apache.cxf.attachment.MimeBodyPartInputStream: int read(byte[],int,int)>
Source here: <org.apache.cxf.attachment.MimeBodyPartInputStream: boolean hasData(byte[],int,int,int,int)>
Source here: <org.apache.cxf.attachment.MimeBodyPartInputStream: int read()>
Start traversal for source: <org.apache.cxf.helpers.IOUtils: void consume(java.io.InputStream)>...
Starting from source: 
0: consume
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[])>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <java.io.RandomAccessFile: int read(byte[],int,int)>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <java.io.FileInputStream: int read(byte[])>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.MimeBodyPartInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <java.io.ByteArrayInputStream: int read()>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.MimeBodyPartInputStream: int read()>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <java.io.PushbackInputStream: int read()>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.DelegatingInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: int read()>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read()>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int read()>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedReader: int read(char[],int,int)>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.BaseReader: int read()>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit: void close(org.apache.cxf.message.Message)>...
Starting from source: 
0: close
1: cache
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <org.apache.cxf.attachment.MimeBodyPartInputStream: boolean hasData(byte[],int,int,int,int)>...
Starting from source: 
0: hasData
1: processBuffer
2: read
3: consume
4: skip
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: int read(byte[])>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[])>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <com.ctc.wstx.io.MergedStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <javax.mail.internet.MimeMultipart$MimeBodyPartInputStream: int read()>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read(char[],int,int)>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int read(byte[])>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <java.io.InputStreamReader: int read()>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <java.io.PushbackInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <java.io.Reader: int read()>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <javax.mail.util.SharedFileInputStream$SharedFileSource: int read(long,byte[],int,int)>...
Starting from source: 
0: read
1: consume
2: hasData
3: processBuffer
4: skip
Flows from source is finished.
Start traversal for source: <org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void close()>...
Starting from source: 
0: close
1: cache
Flows from source is finished.
Loaded 43811 methods from JAR files. 

Found 399 Source Methods.
Found 466 Sink Methods.
Sources and Sinks collected. 

Methods extraction finished.
All finished.
