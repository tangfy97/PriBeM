***** Loading java classes ***** 

Start reading BOM and BIM...
BOM is loaded with 169 methods.
BIM is loaded with 352 methods.
EOM is loaded with 286 methods.
EIM is loaded with 365 methods.
Start looking for sources and sinks: 
[spark] Starting analysis ...
[main] ERROR soot.jimple.toolkits.typing.fast.TypePromotionUseVisitor - Failed Typing in <java.awt.image.ComponentColorModel: int getRGBComponent(int,int)> at statement opixel#1 = $r0: Is not cast compatible: null_type <-- java.lang.Object
[main] ERROR soot.jimple.toolkits.typing.fast.TypePromotionUseVisitor - Failed Typing in <com.sun.imageio.plugins.tiff.TIFFIFD: int readFieldValue(javax.imageio.stream.ImageInputStream,int,int,java.lang.Object[])> at statement obj#10 = $r0: Is not cast compatible: null_type <-- java.lang.Object
[spark] Done!
Now we build call graphs for class: org.joda.time.DateTimeZone
Source here: <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>
Global flow here: <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)> calls: <org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)> via: INTERFACE edge: $r1 = interfaceinvoke $r0.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>(r12) in <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)> ==> <org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>
Global flow here: <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)> calls: <org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)> via: INTERFACE edge: $r1 = interfaceinvoke $r0.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>(r12) in <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)> ==> <org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>
Global flow here: <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)> calls: <org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)> via: INTERFACE edge: r17 = interfaceinvoke $r14.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>($r2) in <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)> ==> <org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>
Global flow here: <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)> calls: <org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)> via: INTERFACE edge: r17 = interfaceinvoke $r14.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>($r2) in <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)> ==> <org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>
Global flow here: <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)> calls: <org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)> via: INTERFACE edge: r17 = interfaceinvoke $r13.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>($r1) in <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)> ==> <org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>
Global flow here: <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)> calls: <org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)> via: INTERFACE edge: r17 = interfaceinvoke $r13.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>($r1) in <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)> ==> <org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>
Global flow here: <org.joda.time.DateTimeZone: void setProvider0(org.joda.time.tz.Provider)> calls: <org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)> via: INTERFACE edge: $r3 = interfaceinvoke r6.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>("UTC") in <org.joda.time.DateTimeZone: void setProvider0(org.joda.time.tz.Provider)> ==> <org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>
Global flow here: <org.joda.time.DateTimeZone: void setProvider0(org.joda.time.tz.Provider)> calls: <org.joda.time.tz.UTCProvider: java.util.Set getAvailableIDs()> via: INTERFACE edge: $r0 = interfaceinvoke r6.<org.joda.time.tz.Provider: java.util.Set getAvailableIDs()>() in <org.joda.time.DateTimeZone: void setProvider0(org.joda.time.tz.Provider)> ==> <org.joda.time.tz.UTCProvider: java.util.Set getAvailableIDs()>
Global flow here: <org.joda.time.DateTimeZone: void setProvider0(org.joda.time.tz.Provider)> calls: <org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)> via: INTERFACE edge: $r3 = interfaceinvoke r6.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>("UTC") in <org.joda.time.DateTimeZone: void setProvider0(org.joda.time.tz.Provider)> ==> <org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>
Global flow here: <org.joda.time.DateTimeZone: void setProvider0(org.joda.time.tz.Provider)> calls: <org.joda.time.tz.ZoneInfoProvider: java.util.Set getAvailableIDs()> via: INTERFACE edge: $r0 = interfaceinvoke r6.<org.joda.time.tz.Provider: java.util.Set getAvailableIDs()>() in <org.joda.time.DateTimeZone: void setProvider0(org.joda.time.tz.Provider)> ==> <org.joda.time.tz.ZoneInfoProvider: java.util.Set getAvailableIDs()>
Global flow here: <org.joda.time.DateTimeZone: void setProvider0(org.joda.time.tz.Provider)> calls: <org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)> via: VIRTUAL edge: $z1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r3) in <org.joda.time.DateTimeZone: void setProvider0(org.joda.time.tz.Provider)> ==> <org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>
Source here: <org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>
Source here: <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>
Global flow here: <org.joda.time.DateTimeZone: int parseOffset(java.lang.String)> calls: <org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)> via: VIRTUAL edge: $l0 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>(r4) in <org.joda.time.DateTimeZone: int parseOffset(java.lang.String)> ==> <org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>
Global flow here: <org.joda.time.DateTimeZone: int parseOffset(java.lang.String)> calls: <org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r5) in <org.joda.time.DateTimeZone: int parseOffset(java.lang.String)> ==> <org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>
Global flow here: <org.joda.time.DateTimeZone: int parseOffset(java.lang.String)> calls: <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()> via: STATIC edge: r5 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() in <org.joda.time.DateTimeZone: int parseOffset(java.lang.String)> ==> <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String printOffset(int)> calls: <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)> via: STATIC edge: staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>($r4, $i4, 2) in <org.joda.time.DateTimeZone: java.lang.String printOffset(int)> ==> <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String printOffset(int)> calls: <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)> via: STATIC edge: staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>($r4, $i6, 2) in <org.joda.time.DateTimeZone: java.lang.String printOffset(int)> ==> <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String printOffset(int)> calls: <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)> via: STATIC edge: staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>($r4, i2, 2) in <org.joda.time.DateTimeZone: java.lang.String printOffset(int)> ==> <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String printOffset(int)> calls: <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)> via: STATIC edge: staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>($r4, i9, 3) in <org.joda.time.DateTimeZone: java.lang.String printOffset(int)> ==> <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>
Global flow here: <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter offsetFormatter()> calls: <org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()> via: VIRTUAL edge: $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() in <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter offsetFormatter()> ==> <org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>
Global flow here: <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter offsetFormatter()> calls: <org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)> via: VIRTUAL edge: $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>(null, 1, 2, 4) in <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter offsetFormatter()> ==> <org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> calls: <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) in <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> ==> <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> calls: <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)> via: VIRTUAL edge: $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0) in <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> ==> <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> calls: <org.joda.time.tz.CachedDateTimeZone: int getOffset(long)> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) in <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> ==> <org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> calls: <org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)> via: VIRTUAL edge: $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0) in <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> ==> <org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> calls: <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) in <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> ==> <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> calls: <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)> via: VIRTUAL edge: $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0) in <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> ==> <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> calls: <org.joda.time.tz.FixedDateTimeZone: int getOffset(long)> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) in <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> ==> <org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> calls: <org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)> via: VIRTUAL edge: $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0) in <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> ==> <org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> calls: <org.joda.time.tz.DefaultNameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String)> via: INTERFACE edge: $r4 = interfaceinvoke $r3.<org.joda.time.tz.NameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String)>(r7, $r2, $r1) in <org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)> ==> <org.joda.time.tz.DefaultNameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> calls: <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) in <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> ==> <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> calls: <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)> via: VIRTUAL edge: $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0) in <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> ==> <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> calls: <org.joda.time.tz.CachedDateTimeZone: int getOffset(long)> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) in <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> ==> <org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> calls: <org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)> via: VIRTUAL edge: $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0) in <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> ==> <org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> calls: <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) in <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> ==> <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> calls: <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)> via: VIRTUAL edge: $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0) in <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> ==> <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> calls: <org.joda.time.tz.FixedDateTimeZone: int getOffset(long)> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) in <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> ==> <org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> calls: <org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)> via: VIRTUAL edge: $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0) in <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> ==> <org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>
Global flow here: <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> calls: <org.joda.time.tz.DefaultNameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String)> via: INTERFACE edge: $r4 = interfaceinvoke $r3.<org.joda.time.tz.NameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String)>(r7, $r2, $r1) in <org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)> ==> <org.joda.time.tz.DefaultNameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String)>
Global flow here: <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> calls: <org.joda.time.tz.FixedDateTimeZone: int getOffset(long)> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) in <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> ==> <org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> calls: <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)> via: VIRTUAL edge: $l11 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l10) in <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> ==> <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>
Global flow here: <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> calls: <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)> via: VIRTUAL edge: $l8 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l7) in <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> ==> <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>
Global flow here: <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> calls: <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)> via: VIRTUAL edge: $i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l3) in <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> ==> <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> calls: <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) in <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> ==> <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> calls: <org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)> via: VIRTUAL edge: $l11 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l10) in <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> ==> <org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>
Global flow here: <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> calls: <org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)> via: VIRTUAL edge: $l8 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l7) in <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> ==> <org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>
Global flow here: <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> calls: <org.joda.time.tz.CachedDateTimeZone: int getOffset(long)> via: VIRTUAL edge: $i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l3) in <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> ==> <org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> calls: <org.joda.time.tz.CachedDateTimeZone: int getOffset(long)> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) in <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> ==> <org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> calls: <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)> via: VIRTUAL edge: $l11 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l10) in <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> ==> <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>
Global flow here: <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> calls: <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)> via: VIRTUAL edge: $l8 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l7) in <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> ==> <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>
Global flow here: <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> calls: <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)> via: VIRTUAL edge: $i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l3) in <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> ==> <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> calls: <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) in <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> ==> <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> calls: <org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)> via: VIRTUAL edge: $l11 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l10) in <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> ==> <org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)>
Global flow here: <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> calls: <org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)> via: VIRTUAL edge: $l8 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l7) in <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> ==> <org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)>
Global flow here: <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> calls: <org.joda.time.tz.FixedDateTimeZone: int getOffset(long)> via: VIRTUAL edge: $i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l3) in <org.joda.time.DateTimeZone: int getOffsetFromLocal(long)> ==> <org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)> calls: <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) in <org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)> ==> <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)> calls: <org.joda.time.tz.CachedDateTimeZone: int getOffset(long)> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) in <org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)> ==> <org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)> calls: <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) in <org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)> ==> <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)> calls: <org.joda.time.tz.FixedDateTimeZone: int getOffset(long)> via: VIRTUAL edge: $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) in <org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)> ==> <org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>
Global flow here: <org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)> calls: <org.joda.time.tz.FixedDateTimeZone: int getOffsetFromLocal(long)> via: VIRTUAL edge: $i4 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l3) in <org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)> ==> <org.joda.time.tz.FixedDateTimeZone: int getOffsetFromLocal(long)>
Start traversal for source: <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>...
Starting from source: 
0: getDefaultNameProvider
1: setNameProvider0
Flows from source is finished.
Start traversal for source: <org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>...
Starting from source: 
0: getDefaultProvider
1: setProvider0
Flows from source is finished.
Start traversal for source: <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>...
Starting from source: 
0: getDefault
1: getName
2: print
3: getShortName
4: forTimeZone
5: getChronology
6: forID
7: getMillisKeepLocal
8: setZoneRetainFields
9: getZone
10: setProvider0
11: withZone
12: getInstance
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: getDefaultNameProvider
2: setNameProvider0
3: getDefaultProvider
4: setProvider0
Flows from source is finished.
Now we build call graphs for class: org.jsoup.helper.DataUtil
Source here: <org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream)>
Now we build call graphs for class: org.hibernate.validator.constraints.impl.URLValidator
Source here: <org.hibernate.validator.constraints.impl.URLValidator: boolean isValid(java.lang.String,javax.validation.ConstraintValidatorContext)>
Now we build call graphs for class: org.jsoup.Jsoup
Source here: <org.jsoup.Jsoup: org.jsoup.nodes.Document parse(java.io.File,java.lang.String)>
Now we build call graphs for class: org.joda.time.DateTimeZone$Stub
Source here: <org.joda.time.DateTimeZone$Stub: void readObject(java.io.ObjectInputStream)>
Now we build call graphs for class: org.jsoup.helper.HttpConnection$Response
Source here: <org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)>
Source here: <org.jsoup.helper.HttpConnection$Response: void setupFromConnection(java.net.HttpURLConnection,org.jsoup.Connection$Response)>
Source here: <org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)>
Now we build call graphs for class: javax.validation.Validation$DefaultValidationProviderResolver
Source here: <javax.validation.Validation$DefaultValidationProviderResolver: java.util.List getValidationProviders()>
Now we build call graphs for class: org.joda.time.tz.ZoneInfoCompiler
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()> calls: <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()> via: STATIC edge: $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() in <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()> ==> <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()> calls: <org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)> via: STATIC edge: $r3 = staticinvoke <org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>($r2) in <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()> ==> <org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)> calls: <org.joda.time.DateTimeZone: java.lang.String getID()> via: VIRTUAL edge: $r25 = virtualinvoke $r24.<org.joda.time.DateTimeZone: java.lang.String getID()>() in <org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)> ==> <org.joda.time.DateTimeZone: java.lang.String getID()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)> calls: <org.joda.time.DateTimeZone: java.lang.String getID()> via: VIRTUAL edge: $r16 = virtualinvoke $r15.<org.joda.time.DateTimeZone: java.lang.String getID()>() in <org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)> ==> <org.joda.time.DateTimeZone: java.lang.String getID()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)> calls: <org.joda.time.field.UnsupportedDateTimeField: int get(long)> via: VIRTUAL edge: $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0) in <org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)> ==> <org.joda.time.field.UnsupportedDateTimeField: int get(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)> calls: <org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)> via: VIRTUAL edge: $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>(0L, r2, $r3) in <org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)> ==> <org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)> calls: <org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()> via: VIRTUAL edge: $r1 = virtualinvoke $r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField monthOfYear()>() in <org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)> ==> <org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)> calls: <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()> via: STATIC edge: $r0 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() in <org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)> ==> <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)> calls: <org.joda.time.field.UnsupportedDateTimeField: int get(long)> via: VIRTUAL edge: $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0) in <org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)> ==> <org.joda.time.field.UnsupportedDateTimeField: int get(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)> calls: <org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)> via: VIRTUAL edge: $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>(0L, r2, $r3) in <org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)> ==> <org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)> calls: <org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()> via: VIRTUAL edge: $r1 = virtualinvoke $r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField dayOfWeek()>() in <org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)> ==> <org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)> calls: <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()> via: STATIC edge: $r0 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() in <org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)> ==> <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)> calls: <org.joda.time.base.BaseDateTime: long getMillis()> via: VIRTUAL edge: $l2 = virtualinvoke $r5.<org.joda.time.MutableDateTime: long getMillis()>() in <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)> ==> <org.joda.time.base.BaseDateTime: long getMillis()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)> calls: <org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)> via: VIRTUAL edge: $i0 = virtualinvoke $r0.<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>($r5, r3, b4) in <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)> ==> <org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)> calls: <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()> via: STATIC edge: $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>() in <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)> ==> <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)> via: VIRTUAL edge: $l5 = virtualinvoke r1.<org.joda.time.DateTimeZone: long previousTransition(long)>(l17) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)> via: VIRTUAL edge: $r28 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l2) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)> via: VIRTUAL edge: $i13 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>($l2) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)> via: VIRTUAL edge: $l2 = virtualinvoke r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l15) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)> via: VIRTUAL edge: r53 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l0) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)> via: VIRTUAL edge: i16 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>($l0) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.FixedDateTimeZone: long previousTransition(long)> via: VIRTUAL edge: $l5 = virtualinvoke r1.<org.joda.time.DateTimeZone: long previousTransition(long)>(l17) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.FixedDateTimeZone: long previousTransition(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)> via: VIRTUAL edge: $r28 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l2) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.FixedDateTimeZone: int getOffset(long)> via: VIRTUAL edge: $i13 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>($l2) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)> via: VIRTUAL edge: $l2 = virtualinvoke r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l15) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)> via: VIRTUAL edge: r53 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l0) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.FixedDateTimeZone: int getOffset(long)> via: VIRTUAL edge: i16 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>($l0) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.CachedDateTimeZone: long previousTransition(long)> via: VIRTUAL edge: $l5 = virtualinvoke r1.<org.joda.time.DateTimeZone: long previousTransition(long)>(l17) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.CachedDateTimeZone: long previousTransition(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)> via: VIRTUAL edge: $r28 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l2) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.CachedDateTimeZone: int getOffset(long)> via: VIRTUAL edge: $i13 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>($l2) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)> via: VIRTUAL edge: $l2 = virtualinvoke r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l15) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)> via: VIRTUAL edge: r53 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l0) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.CachedDateTimeZone: int getOffset(long)> via: VIRTUAL edge: i16 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>($l0) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.DateTimeZone: java.lang.String getID()> via: VIRTUAL edge: $r17 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>() in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.DateTimeZone: java.lang.String getID()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)> via: VIRTUAL edge: $l5 = virtualinvoke r1.<org.joda.time.DateTimeZone: long previousTransition(long)>(l17) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.DateTimeZone: java.lang.String getID()> via: VIRTUAL edge: $r32 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>() in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.DateTimeZone: java.lang.String getID()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.DateTimeZone: java.lang.String getID()> via: VIRTUAL edge: $r46 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>() in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.DateTimeZone: java.lang.String getID()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)> via: VIRTUAL edge: $r28 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l2) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)> via: VIRTUAL edge: $i13 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>($l2) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)> via: VIRTUAL edge: $l2 = virtualinvoke r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l15) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)> via: VIRTUAL edge: r53 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l0) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)> via: VIRTUAL edge: i16 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>($l0) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.DateTimeZone: java.lang.String getID()> via: VIRTUAL edge: $r2 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>() in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.DateTimeZone: java.lang.String getID()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.field.UnsupportedDateTimeField: long set(long,int)> via: VIRTUAL edge: $l4 = virtualinvoke $r11.<org.joda.time.DateTimeField: long set(long,int)>(0L, 1850) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()> via: VIRTUAL edge: $r11 = virtualinvoke $r10.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>() in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.field.UnsupportedDateTimeField: long set(long,int)> via: VIRTUAL edge: l17 = virtualinvoke $r9.<org.joda.time.DateTimeField: long set(long,int)>(0L, 2050) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()> via: VIRTUAL edge: $r9 = virtualinvoke $r8.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>() in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.field.UnsupportedDateTimeField: long set(long,int)> via: VIRTUAL edge: $l1 = virtualinvoke $r6.<org.joda.time.DateTimeField: long set(long,int)>(0L, 2050) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()> via: VIRTUAL edge: $r6 = virtualinvoke $r5.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>() in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.field.UnsupportedDateTimeField: long set(long,int)> via: VIRTUAL edge: $l0 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(0L, 1850) in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()> via: VIRTUAL edge: $r4 = virtualinvoke $r3.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>() in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()> via: STATIC edge: $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()> via: STATIC edge: $r5 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()> via: STATIC edge: $r50 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()> via: STATIC edge: $r36 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()> via: STATIC edge: $r8 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()> via: STATIC edge: $r10 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()> via: STATIC edge: $r21 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> calls: <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()> via: STATIC edge: $r25 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() in <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)> ==> <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>
Source here: <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> calls: <org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)> via: VIRTUAL edge: virtualinvoke r70.<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>($r28, $r29) in <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> ==> <org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> calls: <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)> via: VIRTUAL edge: $z3 = virtualinvoke $r31.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r47) in <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> ==> <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> calls: <org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)> via: VIRTUAL edge: $z3 = virtualinvoke $r31.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r47) in <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> ==> <org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> calls: <org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)> via: VIRTUAL edge: $z3 = virtualinvoke $r31.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r47) in <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> ==> <org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> calls: <org.joda.time.DateTimeZone: java.lang.String getID()> via: VIRTUAL edge: $r51 = virtualinvoke $r31.<org.joda.time.DateTimeZone: java.lang.String getID()>() in <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> ==> <org.joda.time.DateTimeZone: java.lang.String getID()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> calls: <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)> via: VIRTUAL edge: $z3 = virtualinvoke $r31.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r47) in <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> ==> <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> calls: <org.joda.time.DateTimeZone: java.lang.String getID()> via: VIRTUAL edge: $r46 = virtualinvoke $r31.<org.joda.time.DateTimeZone: java.lang.String getID()>() in <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> ==> <org.joda.time.DateTimeZone: java.lang.String getID()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> calls: <org.joda.time.DateTimeZone: java.lang.String getID()> via: VIRTUAL edge: $r41 = virtualinvoke $r31.<org.joda.time.DateTimeZone: java.lang.String getID()>() in <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> ==> <org.joda.time.DateTimeZone: java.lang.String getID()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> calls: <org.joda.time.DateTimeZone: java.lang.String getID()> via: VIRTUAL edge: $r37 = virtualinvoke $r31.<org.joda.time.DateTimeZone: java.lang.String getID()>() in <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> ==> <org.joda.time.DateTimeZone: java.lang.String getID()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> calls: <org.joda.time.DateTimeZone: java.lang.String getID()> via: VIRTUAL edge: $r33 = virtualinvoke $r31.<org.joda.time.DateTimeZone: java.lang.String getID()>() in <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> ==> <org.joda.time.DateTimeZone: java.lang.String getID()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> calls: <org.joda.time.DateTimeZone: java.lang.String getID()> via: VIRTUAL edge: $r32 = virtualinvoke $r31.<org.joda.time.DateTimeZone: java.lang.String getID()>() in <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> ==> <org.joda.time.DateTimeZone: java.lang.String getID()>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> calls: <org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)> via: VIRTUAL edge: virtualinvoke $r28.<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>($r44, $r43) in <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> ==> <org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> calls: <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)> via: VIRTUAL edge: $r31 = virtualinvoke $r28.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>($r30, 1) in <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> ==> <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> calls: <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)> via: STATIC edge: $r47 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>($r45, $r46) in <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> ==> <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>
Source here: <org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader)> calls: <org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)> via: VIRTUAL edge: virtualinvoke r27.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>($r29) in <org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader)> ==> <org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>
Global flow here: <org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader)> calls: <org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)> via: VIRTUAL edge: virtualinvoke r24.<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>($r28) in <org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader)> ==> <org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>
Start traversal for source: <java.io.File: java.io.File getParentFile()>...
Starting from source: 
0: getParentFile
1: compile
2: main
Flows from source is finished.
Start traversal for source: <org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>...
Starting from source: 
0: compile
1: main
Flows from source is finished.
Start traversal for source: <java.io.BufferedReader: java.lang.String readLine()>...
Starting from source: 
0: readLine
1: parseDataFile
2: compile
3: main
Flows from source is finished.
Start traversal for source: <org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader)>...
Starting from source: 
0: parseDataFile
1: compile
2: main
Flows from source is finished.
Now we build call graphs for class: org.jsoup.nodes.Node
Source here: <org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>
Global flow here: <org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)> calls: <org.jsoup.helper.Validate: void isTrue(boolean)> via: STATIC edge: staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean)>($z0) in <org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)> ==> <org.jsoup.helper.Validate: void isTrue(boolean)>
Global flow here: <org.jsoup.nodes.Node: org.jsoup.nodes.Node nextSibling()> calls: <org.jsoup.helper.Validate: void notNull(java.lang.Object)> via: STATIC edge: staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r4) in <org.jsoup.nodes.Node: org.jsoup.nodes.Node nextSibling()> ==> <org.jsoup.helper.Validate: void notNull(java.lang.Object)>
Global flow here: <org.jsoup.nodes.Node: void outerHtml(java.lang.StringBuilder)> calls: <org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)> via: VIRTUAL edge: virtualinvoke $r0.<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>(r3) in <org.jsoup.nodes.Node: void outerHtml(java.lang.StringBuilder)> ==> <org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>
Global flow here: <org.jsoup.nodes.Node: org.jsoup.nodes.Document$OutputSettings getOutputSettings()> calls: <org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()> via: VIRTUAL edge: $r4 = virtualinvoke $r3.<org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()>() in <org.jsoup.nodes.Node: org.jsoup.nodes.Document$OutputSettings getOutputSettings()> ==> <org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()>
Global flow here: <org.jsoup.nodes.Node: org.jsoup.nodes.Document$OutputSettings getOutputSettings()> calls: <org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()> via: VIRTUAL edge: $r4 = virtualinvoke $r2.<org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()>() in <org.jsoup.nodes.Node: org.jsoup.nodes.Document$OutputSettings getOutputSettings()> ==> <org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()>
Global flow here: <org.jsoup.nodes.Node: void indent(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings)> calls: <org.jsoup.nodes.Document$OutputSettings: int indentAmount()> via: VIRTUAL edge: $i1 = virtualinvoke r2.<org.jsoup.nodes.Document$OutputSettings: int indentAmount()>() in <org.jsoup.nodes.Node: void indent(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings)> ==> <org.jsoup.nodes.Document$OutputSettings: int indentAmount()>
Global flow here: <org.jsoup.nodes.Node: void indent(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings)> calls: <org.jsoup.helper.StringUtil: java.lang.String padding(int)> via: STATIC edge: $r3 = staticinvoke <org.jsoup.helper.StringUtil: java.lang.String padding(int)>($i2) in <org.jsoup.nodes.Node: void indent(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings)> ==> <org.jsoup.helper.StringUtil: java.lang.String padding(int)>
Global flow here: <org.jsoup.nodes.Node: int hashCode()> calls: <org.jsoup.nodes.Element: int hashCode()> via: VIRTUAL edge: $i2 = virtualinvoke $r4.<org.jsoup.nodes.Node: int hashCode()>() in <org.jsoup.nodes.Node: int hashCode()> ==> <org.jsoup.nodes.Element: int hashCode()>
Global flow here: <org.jsoup.nodes.Node: int hashCode()> calls: <org.jsoup.nodes.Attributes: int hashCode()> via: VIRTUAL edge: $i3 = virtualinvoke $r3.<org.jsoup.nodes.Attributes: int hashCode()>() in <org.jsoup.nodes.Node: int hashCode()> ==> <org.jsoup.nodes.Attributes: int hashCode()>
Now we build call graphs for class: org.joda.time.tz.ZoneInfoProvider
Global flow here: <org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke r12.<java.io.InputStream: void close()>() in <org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke r12.<java.io.InputStream: void close()>() in <org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)> calls: <sun.net.www.MeteredStream: void close()> via: VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)> ==> <sun.net.www.MeteredStream: void close()>
Global flow here: <org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)> calls: <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)> via: STATIC edge: $r3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>($r2, r1) in <org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)> ==> <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>
Source here: <org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>
Start traversal for source: <java.io.ObjectInputStream: java.lang.String readUTF()>...
Starting from source: 
0: readUTF
1: readZoneInfoMap
2: loadZoneInfoMap
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: int readUnsignedShort()>...
Starting from source: 
0: readUnsignedShort
1: readZoneInfoMap
2: loadZoneInfoMap
Flows from source is finished.
Start traversal for source: <org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>...
Starting from source: 
0: readZoneInfoMap
1: loadZoneInfoMap
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: java.lang.String readUTF()>...
Starting from source: 
0: readUTF
1: readZoneInfoMap
2: loadZoneInfoMap
Flows from source is finished.
Loaded 6927 methods from JAR files. 

Found 33 Source Methods.
Found 26 Sink Methods.
Sources and Sinks collected. 

Methods extraction finished.
All finished.
