***** Loading java classes ***** 

Start reading BOM and BIM...
BOM is loaded with 169 methods.
BIM is loaded with 352 methods.
EOM is loaded with 286 methods.
EIM is loaded with 365 methods.
Start looking for sources and sinks: 
[spark] Starting analysis ...
[spark] Done!
Now we build call graphs for class: com.wowza.wms.mediacaster.rtp.RTPSessionDescriptionDataProviderBasic
Source here: <com.wowza.wms.mediacaster.rtp.RTPSessionDescriptionDataProviderBasic: com.wowza.wms.mediacaster.rtp.RTPSessionDescriptionData getSessionDescriptionData(com.wowza.wms.application.IApplicationInstance,java.lang.String,int,com.wowza.wms.mediacaster.rtp.IRTPSessionDescriptionSessionHandler,com.wowza.wms.mediacaster.IMediaCaster)>
Source here: <com.wowza.wms.mediacaster.rtp.RTPSessionDescriptionDataProviderBasic: boolean doIdle(com.wowza.wms.mediacaster.MediaCaster)>
Now we build call graphs for class: com.wowza.util.HTTPUtils
Source here: <com.wowza.util.HTTPUtils: boolean HTTPRequestToFile(java.io.File,java.lang.String,java.lang.String,java.lang.String,java.util.List)>
Source here: <com.wowza.util.HTTPUtils: byte[] HTTPRequestToByteArray(java.lang.String,java.lang.String,java.lang.String,java.util.Map,java.util.Map,long)>
Now we build call graphs for class: com.wowza.wms.util.ApplicationUtils
Source here: <com.wowza.wms.util.ApplicationUtils: void gs(java.lang.String)>
Source here: <com.wowza.wms.util.ApplicationUtils: void loadConfigFile(com.wowza.wms.application.IApplicationInstance,java.lang.String)>
Now we build call graphs for class: com.wowza.io.HTTPRandomAccessFile
Source here: <com.wowza.io.HTTPRandomAccessFile: void open(java.lang.String)>
Source here: <com.wowza.io.HTTPRandomAccessFile: com.wowza.io.HTTPRandomAccessFile$SendResult sendRequest(byte[],byte[],int,int,boolean)>
Now we build call graphs for class: com.wowza.wms.application.ApplicationInstance
Source here: <com.wowza.wms.application.ApplicationInstance: void validateStoragePath(java.lang.String)>
Now we build call graphs for class: com.wowza.io.DirectRandomAccessReader
Source here: <com.wowza.io.DirectRandomAccessReader: int read(byte[],int,int)>
Now we build call graphs for class: com.wowza.util.FLVUtils
Source here: <com.wowza.util.FLVUtils: com.wowza.wms.amf.AMFPacket readChunk(java.io.InputStream)>
Source here: <com.wowza.util.FLVUtils: boolean readHeader(java.io.InputStream)>
Source here: <com.wowza.util.FLVUtils: long getLastTC(java.io.File)>
Now we build call graphs for class: com.wowza.util.AUUtils
Source here: <com.wowza.util.AUUtils: boolean readHeader(java.io.InputStream)>
Source here: <com.wowza.util.AUUtils: byte[] readSample(java.io.InputStream,int)>
Source here: <com.wowza.util.AUUtils: boolean readSamples(java.io.InputStream,byte[],int,int)>
Now we build call graphs for class: com.wowza.util.FileCache
Source here: <com.wowza.util.FileCache: void cacheURL(java.net.URL)>
Now we build call graphs for class: com.wowza.wms.http.streammanager.HTTPStreamManager
Source here: <com.wowza.wms.http.streammanager.HTTPStreamManager: void onHTTPRequest(com.wowza.wms.vhost.IVHost,com.wowza.wms.http.IHTTPRequest,com.wowza.wms.http.IHTTPResponse)>
Now we build call graphs for class: com.amazon.thirdparty.Base64
Source here: <com.amazon.thirdparty.Base64: byte[] decode(java.lang.String)>
Now we build call graphs for class: com.amazon.s3.GetResponse
Source here: <com.amazon.s3.GetResponse: byte[] slurpInputStream(java.io.InputStream)>
Start traversal for source: <com.amazon.s3.GetResponse: byte[] slurpInputStream(java.io.InputStream)>...
Starting from source: 
0: slurpInputStream
Flows from source is finished.
Now we build call graphs for class: com.wowza.util.Base64
Source here: <com.wowza.util.Base64: byte[] decode(java.lang.String,int)>
Global flow here: <com.wowza.util.Base64: byte[] decodeFromFile(java.lang.String)> calls: <com.wowza.util.Base64$InputStream: int read(byte[],int,int)> via: VIRTUAL edge: $i4 = virtualinvoke $r29.<com.wowza.util.Base64$InputStream: int read(byte[],int,int)>(r24, i6, 4096) in <com.wowza.util.Base64: byte[] decodeFromFile(java.lang.String)> ==> <com.wowza.util.Base64$InputStream: int read(byte[],int,int)>
Global flow here: <com.wowza.util.Base64: java.lang.String encodeFromFile(java.lang.String)> calls: <com.wowza.util.Base64$InputStream: int read(byte[],int,int)> via: VIRTUAL edge: $i3 = virtualinvoke $r3.<com.wowza.util.Base64$InputStream: int read(byte[],int,int)>(r2, i4, 4096) in <com.wowza.util.Base64: java.lang.String encodeFromFile(java.lang.String)> ==> <com.wowza.util.Base64$InputStream: int read(byte[],int,int)>
Start traversal for source: <java.io.InputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: encodeFromFile
2: encodeFileToFile
3: main
4: decodeFromFile
5: decodeFileToFile
Flows from source is finished.
Start traversal for source: <java.io.RandomAccessFile: int read(byte[],int,int)>...
Starting from source: 
0: read
1: encodeFromFile
2: encodeFileToFile
3: main
4: decodeFromFile
5: decodeFileToFile
Flows from source is finished.
Start traversal for source: <com.wowza.io.DirectRandomAccessReader: int read(byte[],int,int)>...
Starting from source: 
0: read
1: encodeFromFile
2: encodeFileToFile
3: main
4: decodeFromFile
5: decodeFileToFile
Flows from source is finished.
Start traversal for source: <java.io.BufferedInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: encodeFromFile
2: encodeFileToFile
3: main
4: decodeFromFile
5: decodeFileToFile
Flows from source is finished.
Start traversal for source: <java.io.DataInputStream: int read(byte[],int,int)>...
Starting from source: 
0: read
1: encodeFromFile
2: encodeFileToFile
3: main
4: decodeFromFile
5: decodeFileToFile
Flows from source is finished.
Start traversal for source: <java.io.InputStream: int read(byte[])>...
Starting from source: 
0: read
1: encodeFromFile
2: encodeFileToFile
3: main
4: decodeFromFile
5: decodeFileToFile
Flows from source is finished.
Start traversal for source: <java.io.FilterInputStream: int read(byte[])>...
Starting from source: 
0: read
1: encodeFromFile
2: encodeFileToFile
3: main
4: decodeFromFile
5: decodeFileToFile
Flows from source is finished.
Now we build call graphs for class: com.wowza.wms.sharedobject.SharedObjects$FileProcessor
Source here: <com.wowza.wms.sharedobject.SharedObjects$FileProcessor: void onFile(java.io.File)>
Now we build call graphs for class: com.wowza.wms.authentication.file.AuthenticationPasswordFile
Source here: <com.wowza.wms.authentication.file.AuthenticationPasswordFile: void load()>
Now we build call graphs for class: com.wowza.wms.authentication.file.AuthenticationPasswordFiles
Source here: <com.wowza.wms.authentication.file.AuthenticationPasswordFiles: com.wowza.wms.authentication.file.AuthenticationPasswordFile getPasswordFile(java.io.File)>
Now we build call graphs for class: com.wowza.wms.module.ModuleMediaWriterFileMover
Source here: <com.wowza.wms.module.ModuleMediaWriterFileMover: void onWriteComplete(com.wowza.wms.stream.IMediaStream,java.io.File)>
Now we build call graphs for class: com.wowza.wms.vhost.VHost
Source here: <com.wowza.wms.vhost.VHost: java.util.List getApplicationFolderNames()>
Global flow here: <com.wowza.wms.vhost.VHost: void setByteArrayOutputStreamBaseClassPath(java.lang.String)> calls: <com.sun.org.apache.xerces.internal.xni.parser.XMLParseException: java.lang.String toString()> via: VIRTUAL edge: $r9 = virtualinvoke $r3.<java.lang.Exception: java.lang.String toString()>() in <com.wowza.wms.vhost.VHost: void setByteArrayOutputStreamBaseClassPath(java.lang.String)> ==> <com.sun.org.apache.xerces.internal.xni.parser.XMLParseException: java.lang.String toString()>
Global flow here: <com.wowza.wms.vhost.VHost: void setByteArrayOutputStreamBaseClassPath(java.lang.String)> calls: <jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()> via: VIRTUAL edge: $r9 = virtualinvoke $r3.<java.lang.Exception: java.lang.String toString()>() in <com.wowza.wms.vhost.VHost: void setByteArrayOutputStreamBaseClassPath(java.lang.String)> ==> <jdk.internal.org.xml.sax.SAXParseException: java.lang.String toString()>
Global flow here: <com.wowza.wms.vhost.VHost: void setByteArrayOutputStreamBaseClassPath(java.lang.String)> calls: <org.xml.sax.SAXParseException: java.lang.String toString()> via: VIRTUAL edge: $r9 = virtualinvoke $r3.<java.lang.Exception: java.lang.String toString()>() in <com.wowza.wms.vhost.VHost: void setByteArrayOutputStreamBaseClassPath(java.lang.String)> ==> <org.xml.sax.SAXParseException: java.lang.String toString()>
Global flow here: <com.wowza.wms.vhost.VHost: void setByteArrayOutputStreamBaseClassPath(java.lang.String)> calls: <org.xml.sax.SAXException: java.lang.String toString()> via: VIRTUAL edge: $r9 = virtualinvoke $r3.<java.lang.Exception: java.lang.String toString()>() in <com.wowza.wms.vhost.VHost: void setByteArrayOutputStreamBaseClassPath(java.lang.String)> ==> <org.xml.sax.SAXException: java.lang.String toString()>
Global flow here: <com.wowza.wms.vhost.VHost: void setByteArrayOutputStreamBaseClassPath(java.lang.String)> calls: <com.wowza.wms.logging.WMSLogger: void error(java.lang.String)> via: VIRTUAL edge: virtualinvoke $r4.<com.wowza.wms.logging.WMSLogger: void error(java.lang.String)>($r11) in <com.wowza.wms.vhost.VHost: void setByteArrayOutputStreamBaseClassPath(java.lang.String)> ==> <com.wowza.wms.logging.WMSLogger: void error(java.lang.String)>
Global flow here: <com.wowza.wms.vhost.VHost: void setByteArrayOutputStreamBaseClassPath(java.lang.String)> calls: <com.wowza.wms.logging.WMSLoggerFactory: com.wowza.wms.logging.WMSLogger getLogger(java.lang.Class)> via: STATIC edge: $r4 = staticinvoke <com.wowza.wms.logging.WMSLoggerFactory: com.wowza.wms.logging.WMSLogger getLogger(java.lang.Class)>(null) in <com.wowza.wms.vhost.VHost: void setByteArrayOutputStreamBaseClassPath(java.lang.String)> ==> <com.wowza.wms.logging.WMSLoggerFactory: com.wowza.wms.logging.WMSLogger getLogger(java.lang.Class)>
Source here: <com.wowza.wms.vhost.VHost: java.util.List getApplicationNamesStatic()>
Now we build call graphs for class: com.wowza.wms.http.HTTPClientAccessPolicyHandler
Source here: <com.wowza.wms.http.HTTPClientAccessPolicyHandler: boolean handleClientAccessPolicyRequest(com.wowza.wms.vhost.IVHost,com.wowza.wms.http.IHTTPRequest,com.wowza.wms.http.IHTTPResponse)>
Now we build call graphs for class: com.wowza.wms.logging.UDPAppender
Source here: <com.wowza.wms.logging.UDPAppender: void activateOptions()>
Now we build call graphs for class: com.wowza.io.HTTPByteReader
Source here: <com.wowza.io.HTTPByteReader: com.wowza.io.HTTPByteReader$SendResult sendRequest(byte[],int,boolean)>
Now we build call graphs for class: com.wowza.util.SystemUtils
Source here: <com.wowza.util.SystemUtils: java.lang.String expandEnvironmentVariables(java.lang.String,java.util.Map)>
Now we build call graphs for class: com.amazon.s3.AWSAuthConnection
Source here: <com.amazon.s3.AWSAuthConnection: com.amazon.s3.Response createBucket(java.lang.String,java.lang.String,java.util.Map)>
Source here: <com.amazon.s3.AWSAuthConnection: com.amazon.s3.Response put(java.lang.String,java.lang.String,com.amazon.s3.S3Object,java.util.Map)>
Source here: <com.amazon.s3.AWSAuthConnection: com.amazon.s3.Response verifyCopy(com.amazon.s3.Response)>
Source here: <com.amazon.s3.AWSAuthConnection: com.amazon.s3.Response putBucketRequestPayment(java.lang.String,java.lang.String,java.util.Map)>
Source here: <com.amazon.s3.AWSAuthConnection: com.amazon.s3.Response putBucketLogging(java.lang.String,java.lang.String,java.util.Map)>
Source here: <com.amazon.s3.AWSAuthConnection: com.amazon.s3.Response putACL(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
Source here: <com.amazon.s3.AWSAuthConnection: void addAuthHeader(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>
Now we build call graphs for class: edu.emory.mathcs.backport.java.util.concurrent.helpers.WMSUtils$1
Source here: <edu.emory.mathcs.backport.java.util.concurrent.helpers.WMSUtils$1: java.lang.Object run()>
Start traversal for source: <edu.emory.mathcs.backport.java.util.concurrent.helpers.WMSUtils$1: java.lang.Object run()>...
Starting from source: 
0: run
1: executePrivileged
Flows from source is finished.
Start traversal for source: <java.lang.System: java.lang.String getProperty(java.lang.String)>...
Starting from source: 
0: getProperty
1: run
2: executePrivileged
Flows from source is finished.
Now we build call graphs for class: com.wowza.wms.request.RequestProcessSO
Source here: <com.wowza.wms.request.RequestProcessSO: void execute(com.wowza.wms.vhost.IVHost,com.wowza.wms.client.IClient,com.wowza.wms.request.RequestFunction)>
Now we build call graphs for class: com.wowza.util.FileUtils
Source here: <com.wowza.util.FileUtils: boolean deleteDirectory(java.io.File)>
Source here: <com.wowza.util.FileUtils: java.io.File versionFile(java.io.File)>
Source here: <com.wowza.util.FileUtils: void traverseDirectory(java.io.File,com.wowza.util.IFileProcess)>
Now we build call graphs for class: com.wowza.wms.server.SubCL
Source here: <com.wowza.wms.server.SubCL: byte[] hrtba(java.lang.String,java.lang.String,byte[],java.util.Map,java.util.Map)>
Source here: <com.wowza.wms.server.SubCL: int clo(java.lang.String,com.wowza.wms.server.SubSes)>
Source here: <com.wowza.wms.server.SubCL: int csm()>
Now we build call graphs for class: com.wowza.wms.server.Server
Source here: <com.wowza.wms.server.Server: byte[] httpRequestToByteArray(java.lang.String,java.lang.String,java.lang.String,java.util.Map,java.util.Map,long)>
Source here: <com.wowza.wms.server.Server: void startServer()>
Global flow here: <com.wowza.wms.server.Server: void updateLoggingDuration()> calls: <com.wowza.util.ElapsedTimer: long getTime()> via: VIRTUAL edge: $l0 = virtualinvoke $r2.<com.wowza.util.ElapsedTimer: long getTime()>() in <com.wowza.wms.server.Server: void updateLoggingDuration()> ==> <com.wowza.util.ElapsedTimer: long getTime()>
Global flow here: <com.wowza.wms.server.Server: void updateLoggingDuration()> calls: <com.wowza.wms.logging.WMSLoggerFactory: void putGlobalLogValue(java.lang.String,java.lang.Object)> via: STATIC edge: staticinvoke <com.wowza.wms.logging.WMSLoggerFactory: void putGlobalLogValue(java.lang.String,java.lang.Object)>("x-duration", $r0) in <com.wowza.wms.server.Server: void updateLoggingDuration()> ==> <com.wowza.wms.logging.WMSLoggerFactory: void putGlobalLogValue(java.lang.String,java.lang.Object)>
Source here: <com.wowza.wms.server.Server: java.lang.String getGUID()>
Source here: <com.wowza.wms.server.Server: long getCurrentHeapSize()>
Now we build call graphs for class: com.wowza.wms.util.MediaCasterUtils
Source here: <com.wowza.wms.util.MediaCasterUtils: java.lang.String handlePlayAliasFile(com.wowza.wms.application.IApplicationInstance,java.lang.String)>
Source here: <com.wowza.wms.util.MediaCasterUtils: java.lang.String handleStreamAliasFile(com.wowza.wms.application.IApplicationInstance,java.lang.String)>
Source here: <com.wowza.wms.util.MediaCasterUtils: java.lang.String handleRepeatAliasFile(com.wowza.wms.application.IApplicationInstance,java.lang.String)>
Loaded 8266 methods from JAR files. 

Found 78 Source Methods.
Found 43 Sink Methods.
Sources and Sinks collected. 

Methods extraction finished.
All finished.
