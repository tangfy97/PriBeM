<org.apache.derby.impl.load.ExportWriteData: java.lang.String writeBinaryColumnToExternalFile(java.io.InputStream)> -> _SINK_
<org.apache.derby.impl.io.VFMemoryStorageFactory: java.lang.String normalizePath(java.lang.String)> -> _SINK_
<org.apache.commons.codec.cli.Digest: void run(java.lang.String,java.security.MessageDigest,java.io.File[])> -> _SINK_
<org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)> -> _SINK_
<org.apache.commons.io.FileCleaner: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> -> _SINK_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: int readUnsignedByte()> -> _SINK_
<org.apache.derby.impl.io.vfmem.DataStore: boolean deleteAll(java.lang.String)> -> _SINK_
<org.apache.http.client.entity.LazyDecompressingInputStream: int read(byte[],int,int)> -> _SINK_
<org.apache.http.entity.BasicHttpEntity: void writeTo(java.io.OutputStream)> -> _SINK_
<org.apache.derby.impl.load.ImportReadData: boolean readNextFixedRow(java.lang.String[])> -> _SINK_
<org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> -> _SINK_
<com.mchange.v2.c3p0.JndiRefForwardingDataSource: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.commons.mail.HtmlEmail: java.lang.String embed(java.io.File,java.lang.String)> -> _SINK_
<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File)> -> _SINK_
<org.apache.derby.iapi.types.SQLBinary: void readFromStream(java.io.InputStream)> -> _SINK_
<java.net.URL: java.io.InputStream openStream()> -> _SINK_
<org.apache.commons.text.TextStringBuilder: int readFrom(java.io.Reader,int)> -> _SINK_
<org.apache.commons.collections4.map.LRUMap: void doReadObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.derby.impl.load.ImportReadData: boolean readTokensUntilEndOfRecord()> -> _SINK_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: java.lang.String readLine()> -> _SINK_
<org.apache.derby.iapi.services.io.FileUtil: boolean copyFile(org.apache.derby.io.WritableStorageFactory,java.io.File,org.apache.derby.io.StorageFile,byte[])> -> _SINK_
<org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile: byte readByte()> -> _SINK_
<com.mchange.v2.c3p0.impl.DbAuth: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.derby.iapi.services.io.CloseFilterInputStream: int available()> -> _SINK_
<java.io.DataInputStream: int readUnsignedShort()> -> _SINK_
<org.apache.commons.collections4.properties.AbstractPropertiesFactory: java.util.Properties load(java.net.URL)> -> _SINK_
<org.apache.derby.impl.store.raw.data.BaseDataFileFactory$4: java.lang.String[] run()> -> _SINK_
<org.apache.http.client.entity.DecompressingEntity: void writeTo(java.io.OutputStream)> -> _SINK_
<org.apache.derby.iapi.types.SQLBinary: void writeBlob(java.io.ObjectOutput)> -> _SINK_
<java.io.DataInputStream: java.lang.String readLine()> -> _SINK_
<java.io.DataInputStream: java.lang.String readUTF()> -> _SINK_
<org.apache.derby.security.DatabasePermission: void initLocation(java.lang.String)> -> _SINK_
<org.apache.derby.iapi.services.io.LimitInputStream: int read()> -> _SINK_
<org.apache.derby.impl.io.VFMemoryStorageFactory: java.lang.String normalizePath(java.lang.String,java.lang.String)> -> _SINK_
<java.util.Calendar: java.util.TimeZone getTimeZone()> -> _SINK_
<java.io.DataInputStream: byte readByte()> -> _SINK_
<org.apache.derby.iapi.services.io.FileUtil: boolean copyDirectory(org.apache.derby.io.WritableStorageFactory,java.io.File,org.apache.derby.io.StorageFile,byte[],java.lang.String[])> -> _SINK_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: java.lang.String readUTF()> -> _SINK_
<org.apache.derby.iapi.services.io.InputStreamUtil: void readFully(java.io.InputStream,byte[],int,int)> -> _SINK_
<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)> -> _SINK_
<org.apache.derby.impl.io.vfmem.DataStore: org.apache.derby.impl.io.vfmem.DataStoreEntry getEntry(java.lang.String)> -> _SINK_
<org.apache.commons.text.StrBuilder: int readFrom(java.lang.Readable)> -> _SINK_
<org.apache.derby.impl.load.ImportLobFile: long getClobDataLength(long,long)> -> _SINK_
<org.apache.derby.iapi.services.classfile.ClassInvestigator: org.apache.derby.iapi.services.classfile.ConstantPoolEntry getConstant(org.apache.derby.iapi.services.classfile.ClassInput)> -> _SINK_
<org.apache.commons.codec.language.bm.Rule: java.util.Map parseRules(java.util.Scanner,java.lang.String)> -> _SINK_
<org.apache.http.client.entity.DeflateInputStream: void <init>(java.io.InputStream)> -> _SINK_
<org.apache.commons.io.output.LockableFileWriter: void createLock()> -> _SINK_
<org.apache.commons.collections4.map.AbstractReferenceMap: void doReadObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.http.impl.conn.LoggingInputStream: int available()> -> _SINK_
<org.apache.http.conn.EofSensorInputStream: int available()> -> _SINK_
<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest updateDigest(java.security.MessageDigest,java.io.InputStream)> -> _SINK_
<org.apache.derby.impl.store.raw.data.RememberBytesInputStream: int read()> -> _SINK_
<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> -> _SINK_
<org.apache.derby.impl.load.ImportFileInputStream: int read(byte[],int,int)> -> _SINK_
<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)> -> _SINK_
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,org.apache.http.entity.ContentType)> -> _SINK_
<java.io.RandomAccessFile: int read()> -> _SINK_
<org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File)> -> _SINK_
<org.apache.derby.impl.load.ExportWriteData: java.lang.String writeCharColumnToExternalFile(java.io.Reader)> -> _SINK_
<org.apache.http.impl.conn.LoggingInputStream: int read(byte[],int,int)> -> _SINK_
<org.apache.commons.collections4.bidimap.TreeBidiMap: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.derby.impl.jdbc.ClobUpdatableReader: int read()> -> _SINK_
<org.apache.commons.io.input.SwappedDataInputStream: void readFully(byte[],int,int)> -> _SINK_
<java.io.FilterInputStream: int read()> -> _SINK_
<java.io.Reader: int read(char[])> -> _SINK_
<org.apache.derby.impl.services.monitor.StorageFactoryService: void resolveServicePropertiesFiles(org.apache.derby.io.StorageFactory,org.apache.derby.io.StorageFile)> -> _SINK_
<java.io.File: java.lang.String getPath()> -> _SINK_
<java.io.FilterInputStream: int read(byte[],int,int)> -> _SINK_
<org.apache.derby.impl.load.ImportFileInputStream: int read()> -> _SINK_
<org.apache.commons.io.CopyUtils: void copy(java.lang.String,java.io.OutputStream)> -> _SINK_
<org.apache.derby.impl.io.vfmem.DataStore: java.lang.String[] listChildren(java.lang.String)> -> _SINK_
<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)> -> _SINK_
<java.io.DataInputStream: int readUnsignedByte()> -> _SINK_
<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)> -> _SINK_
<java.io.ObjectInputStream: int read()> -> _SINK_
<org.apache.commons.collections4.multimap.AbstractMultiValuedMap: void doReadObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.derby.impl.jdbc.EmbedClob: java.lang.String getSubString(long,int)> -> _SINK_
<org.apache.commons.io.input.CountingInputStream: int read(byte[])> -> _SINK_
<org.apache.commons.mail.ByteArrayDataSource: void byteArrayDataSource(java.io.InputStream)> -> _SINK_
<org.apache.derby.diag.ErrorLogReader: java.lang.String getString(int)> -> _SINK_
<com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.derby.impl.io.DirStorageFactory: void doInit()> -> _SINK_
<org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Lang loadFromResource(java.lang.String,org.apache.commons.codec.language.bm.Languages)> -> _SINK_
<org.apache.http.impl.io.AbstractSessionInputBuffer: int read(byte[],int,int)> -> _SINK_
<org.apache.http.conn.util.PublicSuffixMatcherLoader: org.apache.http.conn.util.PublicSuffixMatcher load(java.net.URL)> -> _SINK_
<java.io.File: java.lang.String getParent()> -> _SINK_
<org.apache.commons.io.CopyUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)> -> _SINK_
<org.apache.derby.impl.io.BaseStorageFactory: org.apache.derby.io.StorageFile createTemporaryFile(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.derby.impl.services.reflect.JarLoader: byte[] readData(java.util.jar.JarEntry,java.io.InputStream,java.lang.String)> -> _SINK_
<org.apache.http.client.entity.LazyDecompressingInputStream: int read(byte[])> -> _SINK_
<org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages getInstance(java.lang.String)> -> _SINK_
<org.apache.commons.collections4.trie.AbstractPatriciaTrie: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.derby.iapi.services.io.LimitInputStream: int available()> -> _SINK_
<org.apache.derby.impl.io.vfmem.DataStore: boolean move(org.apache.derby.io.StorageFile,org.apache.derby.io.StorageFile)> -> _SINK_
<org.apache.mina.filter.stream.StreamWriteFilter: org.apache.mina.core.buffer.IoBuffer getNextBuffer(java.io.InputStream)> -> _SINK_
<org.apache.commons.collections4.queue.CircularFifoQueue: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: byte readByte()> -> _SINK_
<org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> -> _SINK_
<org.apache.http.client.entity.DeflateInputStream: int read(byte[],int,int)> -> _SINK_
<java.io.DataInputStream: char readChar()> -> _SINK_
<com.mchange.v2.c3p0.DriverManagerDataSource: void readObject(java.io.ObjectInputStream)> -> _SINK_
<java.io.File: java.lang.String getCanonicalPath()> -> _SINK_
<org.apache.commons.collections4.map.AbstractHashedMap: void doReadObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.commons.io.LineIterator: boolean hasNext()> -> _SINK_
<java.io.BufferedReader: int read()> -> _SINK_
<org.apache.mina.filter.ssl.KeyStoreFactory: void setDataUrl(java.net.URL)> -> _SINK_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: int readUnsignedShort()> -> _SINK_
<org.apache.derby.iapi.services.io.FileUtil: boolean copyFile(org.apache.derby.io.StorageFactory,org.apache.derby.io.StorageFile,java.io.File,byte[])> -> _SINK_
<org.apache.http.entity.InputStreamEntity: void writeTo(java.io.OutputStream)> -> _SINK_
<org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File)> -> _SINK_
<org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)> -> _SINK_
<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File)> -> _SINK_
<java.io.DataInputStream: short readShort()> -> _SINK_
<org.apache.derby.impl.store.raw.data.RFResource: long add(java.lang.String,java.io.InputStream)> -> _SINK_
<org.apache.http.impl.auth.RFC2617Scheme: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.derby.impl.io.DirFile: boolean deleteAll()> -> _SINK_
<org.apache.derby.impl.load.ImportLobFile: java.lang.String getString(long,int)> -> _SINK_
<org.apache.derby.impl.jdbc.LOBStreamControl: long copyUtf8Data(java.io.InputStream,long)> -> _SINK_
<org.apache.http.util.EntityUtils: byte[] toByteArray(org.apache.http.HttpEntity)> -> _SINK_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: int read()> -> _SINK_
<org.apache.derby.impl.load.ImportReadData: boolean skipDoubleDelimiters(char[])> -> _SINK_
<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])> -> _SINK_
<org.apache.commons.collections4.multiset.AbstractMapMultiSet: void doReadObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.derby.impl.io.vfmem.DataStore: org.apache.derby.impl.io.vfmem.DataStoreEntry createEntry(java.lang.String,boolean)> -> _SINK_
<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object)> -> _SINK_
<org.apache.commons.mail.HtmlEmail: java.lang.String embed(java.net.URL,java.lang.String)> -> _SINK_
<java.io.DataInputStream: double readDouble()> -> _SINK_
<org.apache.commons.collections4.map.Flat3Map: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,boolean)> -> _SINK_
<org.apache.commons.collections4.bag.AbstractMapBag: void doReadObject(java.util.Map,java.io.ObjectInputStream)> -> _SINK_
<org.apache.commons.io.input.ProxyInputStream: int read(byte[])> -> _SINK_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: char readChar()> -> _SINK_
<org.apache.mina.core.file.FilenameFileRegion: java.lang.String getFilename()> -> _SINK_
<org.apache.derby.iapi.services.io.FileUtil: boolean copyFile(org.apache.derby.io.WritableStorageFactory,org.apache.derby.io.StorageFile,org.apache.derby.io.StorageFile)> -> _SINK_
<org.joda.time.DateTimeZone$Stub: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.commons.mail.util.MimeMessageParser: byte[] getContent(java.io.InputStream)> -> _SINK_
<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> -> _SINK_
<org.apache.derby.impl.jdbc.ReaderToAscii: int read(byte[],int,int)> -> _SINK_
<org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile: char readChar()> -> _SINK_
<org.apache.derby.iapi.types.HarmonySerialClob: void <init>(java.sql.Clob)> -> _SINK_
<org.apache.derby.iapi.services.io.InputStreamUtil: int readLoop(java.io.InputStream,byte[],int,int)> -> _SINK_
<org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream: void readFrom(java.io.InputStream)> -> _SINK_
<org.apache.derby.iapi.services.io.LimitReader: int read(char[],int,int)> -> _SINK_
<com.mchange.v2.c3p0.test.FreezableDriverManagerDataSource: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.derby.impl.io.vfmem.DataStore: java.lang.String[] getParentList(java.lang.String)> -> _SINK_
<org.apache.derby.iapi.services.io.LimitReader: int read()> -> _SINK_
<org.apache.commons.logging.LogFactory$5: java.lang.Object run()> -> _SINK_
<org.apache.commons.collections4.list.AbstractLinkedList: void doReadObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.http.ssl.SSLContextBuilder: org.apache.http.ssl.SSLContextBuilder loadKeyMaterial(java.net.URL,char[],char[],org.apache.http.ssl.PrivateKeyStrategy)> -> _SINK_
<org.apache.derby.diag.StatementDuration: java.lang.String setupColumn(int)> -> _SINK_
<org.apache.derby.impl.store.raw.RawStore: java.lang.String getFilePath(java.io.File)> -> _SINK_
<org.apache.derby.iapi.services.classfile.ClassInput: int getU2()> -> _SINK_
<org.apache.derby.impl.store.raw.data.RememberBytesInputStream: int read(byte[],int,int)> -> _SINK_
<org.apache.http.client.entity.DeflateInputStream: int read(byte[])> -> _SINK_
<com.mchange.v2.c3p0.debug.ConstructionLoggingComboPooledDataSource: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.derby.impl.services.monitor.BaseMonitor: java.util.Properties getDefaultModuleProperties()> -> _SINK_
<org.apache.derby.diag.ErrorLogReader: boolean next()> -> _SINK_
<org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File)> -> _SINK_
<org.apache.commons.mail.MultiPartEmail: org.apache.commons.mail.MultiPartEmail attach(java.net.URL,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.mina.filter.stream.StreamWriteFilter: org.apache.mina.core.buffer.IoBuffer getNextBuffer(java.lang.Object)> -> _SINK_
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> -> _SINK_
<org.apache.derby.impl.sql.execute.JarUtil$1: java.io.InputStream run()> -> _SINK_
<org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File)> -> _SINK_
<org.apache.derby.impl.store.raw.data.BaseDataFileFactory: void backupDataFiles(org.apache.derby.iapi.store.raw.Transaction,java.io.File)> -> _SINK_
<java.io.ObjectInputStream: short readShort()> -> _SINK_
<org.apache.commons.io.input.ProxyInputStream: int available()> -> _SINK_
<org.apache.derby.impl.load.ImportReadData: void omitLineFeed()> -> _SINK_
<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)> -> _SINK_
<org.apache.derby.vti.XmlVTI$2: java.io.InputStream run()> -> _SINK_
<org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile: double readDouble()> -> _SINK_
<org.apache.derby.impl.jdbc.PositionedStoreStream: int read(byte[],int,int)> -> _SINK_
<java.net.URLConnection: java.io.InputStream getInputStream()> -> _SINK_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: double readDouble()> -> _SINK_
<com.mchange.v2.c3p0.AbstractComboPooledDataSource: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.http.client.entity.LazyDecompressingInputStream: int available()> -> _SINK_
<org.apache.derby.impl.store.raw.RawStore: void backup(org.apache.derby.iapi.store.raw.Transaction,java.io.File)> -> _SINK_
<org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile: short readShort()> -> _SINK_
<org.apache.commons.codec.digest.HmacUtils: javax.crypto.Mac updateHmac(javax.crypto.Mac,java.io.InputStream)> -> _SINK_
<java.io.Reader: int read(char[],int,int)> -> _SINK_
<org.apache.http.ssl.SSLContextBuilder: org.apache.http.ssl.SSLContextBuilder loadTrustMaterial(java.net.URL,char[],org.apache.http.ssl.TrustStrategy)> -> _SINK_
<org.apache.http.conn.util.PublicSuffixListParser: org.apache.http.conn.util.PublicSuffixList parse(java.io.Reader)> -> _SINK_
<org.apache.derby.iapi.services.classfile.ClassInput: int getU1()> -> _SINK_
<java.io.BufferedInputStream: int read()> -> _SINK_
<org.apache.derby.impl.io.BaseStorageFactory: java.lang.String readOnlyTempRoot()> -> _SINK_
<org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File)> -> _SINK_
<org.apache.mina.util.Transform: java.lang.String[] getThrowableStrRep(java.lang.Throwable)> -> _SINK_
<org.apache.http.client.utils.URLEncodedUtils: java.util.List parse(org.apache.http.HttpEntity)> -> _SINK_
<com.mchange.v2.c3p0.debug.CloseLoggingComboPooledDataSource: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.derby.impl.load.ImportReadData: void realOpenFile()> -> _SINK_
<com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase: void readObject(java.io.ObjectInputStream)> -> _SINK_
<java.io.BufferedReader: int read(char[],int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.derby.iapi.services.io.CloseFilterInputStream: int read()> -> _SINK_
<java.io.ObjectInputStream: int readInt()> -> _SINK_
<org.apache.commons.io.input.ProxyReader: int read()> -> _SINK_
<org.apache.commons.io.CopyUtils: void copy(java.io.Reader,java.io.OutputStream)> -> _SINK_
<org.apache.derby.iapi.services.io.FileUtil: boolean copyFile(java.io.File,java.io.File,byte[])> -> _SINK_
<java.io.File: java.lang.String getName()> -> _SINK_
<java.io.File: java.lang.String[] list()> -> _SINK_
<com.mchange.v2.c3p0.impl.JndiRefDataSourceBase: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.derby.impl.services.monitor.BaseMonitor: void dumpTempWriter(boolean)> -> _SINK_
<org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile: int readUnsignedShort()> -> _SINK_
<org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)> -> _SINK_
<org.apache.derby.impl.io.VFMemoryStorageFactory: void dbDropCleanupInDummy(java.lang.String)> -> _SINK_
<org.apache.derby.impl.jdbc.UpdatableBlobStream: int read(byte[],int,int)> -> _SINK_
<java.util.Scanner: java.lang.String next()> -> _SINK_
<java.io.PushbackInputStream: int read()> -> _SINK_
<org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile: java.lang.String readUTF()> -> _SINK_
<org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile: long readLong()> -> _SINK_
<org.apache.derby.iapi.services.io.FileUtil: boolean removeDirectory(java.io.File)> -> _SINK_
<java.io.FileInputStream: int read(byte[])> -> _SINK_
<org.apache.derby.impl.services.monitor.StorageFactoryService$1: java.lang.Object run()> -> _SINK_
<org.apache.derby.impl.jdbc.ClobUpdatableReader: int read(char[],int,int)> -> _SINK_
<org.apache.mina.proxy.handlers.http.ntlm.NTLMUtilities: byte[] getOsVersion()> -> _SINK_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: short readShort()> -> _SINK_
<org.apache.derby.impl.jdbc.EmbedClob: long position(java.lang.String,long)> -> _SINK_
<java.io.FilterInputStream: int available()> -> _SINK_
<org.apache.commons.codec.binary.BaseNCodecInputStream: int read(byte[],int,int)> -> _SINK_
<org.apache.http.conn.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)> -> _SINK_
<java.io.InputStream: int read(byte[])> -> _SINK_
<org.apache.derby.impl.store.raw.log.LogToFile: java.lang.Object run()> -> _SINK_
<com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.derby.impl.services.stream.SingleStream: org.apache.derby.shared.common.stream.HeaderPrintWriter PBmakeFileHPW(java.lang.String,org.apache.derby.shared.common.stream.PrintWriterGetHeader)> -> _SINK_
<org.apache.derby.impl.io.URLFile: java.io.InputStream getInputStream()> -> _SINK_
<org.apache.mina.util.Log4jXmlFormatter: java.lang.String format(java.util.logging.LogRecord)> -> _SINK_
<org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)> -> _SINK_
<org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)> -> _SINK_
<org.apache.derby.impl.store.raw.log.LogToFile: long readControlFile(org.apache.derby.io.StorageFile,java.util.Properties)> -> _SINK_
<org.apache.http.entity.FileEntity: void writeTo(java.io.OutputStream)> -> _SINK_
<org.apache.commons.collections4.multiset.AbstractMultiSet: void doReadObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.derby.impl.load.ImportLobFile: void openLobFile(java.io.File)> -> _SINK_
<org.apache.derby.impl.io.DirFile: org.apache.derby.io.StorageFile getParentDir()> -> _SINK_
<java.io.LineNumberReader: java.lang.String readLine()> -> _SINK_
<org.apache.derby.impl.io.JarStorageFactory: void doInit()> -> _SINK_
<java.io.ObjectInputStream: float readFloat()> -> _SINK_
<java.io.FilterInputStream: int read(byte[])> -> _SINK_
<org.apache.http.conn.EofSensorInputStream: int read(byte[],int,int)> -> _SINK_
<org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> -> _SINK_
<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(java.io.InputStream)> -> _SINK_
<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> -> _SINK_
<java.io.File: java.lang.String getAbsolutePath()> -> _SINK_
<java.io.InputStream: int available()> -> _SINK_
<org.apache.commons.codec.language.DaitchMokotoffSoundex: void parseRules(java.util.Scanner,java.lang.String,java.util.Map,java.util.Map)> -> _SINK_
<java.io.InputStream: int read(byte[],int,int)> -> _SINK_
<org.apache.commons.io.input.ProxyReader: int read(char[],int,int)> -> _SINK_
<org.apache.derby.impl.store.raw.data.MemByteHolder: long write(java.io.InputStream,long)> -> _SINK_
<org.apache.commons.io.CopyUtils: void copy(java.io.InputStream,java.io.Writer)> -> _SINK_
<org.apache.derby.impl.store.raw.RawStore: java.lang.Object run()> -> _SINK_
<org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream,java.lang.String)> -> _SINK_
<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)> -> _SINK_
<java.io.ObjectInputStream: java.lang.String readUTF()> -> _SINK_
<org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)> -> _SINK_
<org.apache.commons.mail.resolver.DataSourceFileResolver: javax.activation.DataSource resolve(java.lang.String,boolean)> -> _SINK_
<org.apache.derby.iapi.types.SQLClob: void readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream)> -> _SINK_
<org.apache.derby.iapi.services.io.FormatIdInputStream: java.lang.Object readObject()> -> _SINK_
<org.apache.derby.iapi.util.IdUtil: void verifyEmpty(java.io.Reader)> -> _SINK_
<org.apache.derby.impl.jdbc.EmbedBlob: int handleStreamValue(java.io.InputStream,org.apache.derby.impl.jdbc.EmbedConnection)> -> _SINK_
<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()> -> _SINK_
<org.apache.derby.impl.store.raw.data.DecryptInputStream: void fillByteHolder()> -> _SINK_
<org.apache.derby.impl.load.ImportReadData: boolean readNextToken(char[],int,int,boolean)> -> _SINK_
<org.apache.derby.iapi.types.SQLClob: org.apache.derby.iapi.jdbc.CharacterStreamDescriptor getStreamWithDescriptor()> -> _SINK_
<java.io.DataInputStream: long readLong()> -> _SINK_
<java.io.RandomAccessFile: int read(byte[],int,int)> -> _SINK_
<org.apache.mina.core.buffer.AbstractIoBuffer$3: java.io.ObjectStreamClass readClassDescriptor()> -> _SINK_
<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> -> _SINK_
<org.apache.derby.iapi.services.io.CloseFilterInputStream: int read(byte[])> -> _SINK_
<org.apache.commons.io.LineIterator: java.lang.String nextLine()> -> _SINK_
<org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)> -> _SINK_
<org.apache.derby.impl.jdbc.LOBStreamControl: void copyData(java.io.InputStream,long)> -> _SINK_
<org.apache.http.client.entity.DeflateInputStream: int available()> -> _SINK_
<com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.derby.impl.jdbc.EmbedClob: long position(java.sql.Clob,long)> -> _SINK_
<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)> -> _SINK_
<org.apache.derby.impl.store.raw.data.StreamFileContainer: void writeColumn(java.lang.Object)> -> _SINK_
<org.apache.http.impl.conn.LoggingInputStream: int read(byte[])> -> _SINK_
<java.util.Scanner: java.lang.String nextLine()> -> _SINK_
<org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)> -> _SINK_
<org.apache.http.impl.io.SessionInputBufferImpl: int streamRead(byte[],int,int)> -> _SINK_
<org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile: int readUnsignedByte()> -> _SINK_
<org.apache.derby.iapi.types.SQLChar: void writeUTF(java.io.ObjectOutput,int,boolean,java.io.Reader)> -> _SINK_
<org.apache.commons.text.lookup.UrlStringLookup: java.lang.String lookup(java.lang.String)> -> _SINK_
<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)> -> _SINK_
<org.apache.commons.io.FileUtils: boolean contentEquals(java.io.File,java.io.File)> -> _SINK_
<java.io.Reader: int read()> -> _SINK_
<java.io.BufferedReader: java.lang.String readLine()> -> _SINK_
<org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)> -> _SINK_
<org.apache.http.conn.util.PublicSuffixListParser: java.util.List parseByType(java.io.Reader)> -> _SINK_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: long readLong()> -> _SINK_
<com.mchange.v2.c3p0.ComboPooledDataSource: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.apache.derby.impl.jdbc.ReaderToAscii: int read()> -> _SINK_
<org.apache.derby.iapi.services.io.CloseFilterInputStream: int read(byte[],int,int)> -> _SINK_
<org.apache.derby.impl.io.vfmem.DataStore: boolean deleteEntry(java.lang.String)> -> _SINK_
<org.apache.derby.impl.io.VFMemoryStorageFactory: void init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.derby.impl.sql.compile.UCode_CharStream: void FillBuff()> -> _SINK_
<org.apache.derby.iapi.services.io.LimitInputStream: int read(byte[],int,int)> -> _SINK_
<org.apache.derby.impl.db.BasicDatabase$2: java.lang.Boolean run()> -> _SINK_
<com.mchange.v2.c3p0.codegen.JdbcProxyGenerator: void genclass(com.mchange.v2.codegen.intfc.DelegatorGenerator,java.lang.Class,java.lang.String,java.io.File)> -> _SINK_
<org.apache.http.client.utils.URLEncodedUtils: void parse(java.util.List,java.util.Scanner,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.commons.mail.MultiPartEmail: org.apache.commons.mail.MultiPartEmail attach(java.io.File)> -> _SINK_
<org.apache.derby.impl.io.vfmem.DataStore: boolean createAllParents(java.lang.String)> -> _SINK_
<org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)> -> _SINK_
<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)> -> _SINK_
<org.apache.commons.io.input.ProxyReader: int read(char[])> -> _SINK_
<org.apache.commons.io.input.CountingInputStream: int read(byte[],int,int)> -> _SINK_
<org.apache.commons.text.TextStringBuilder: int readFrom(java.io.Reader)> -> _SINK_
<org.apache.derby.diag.StatementDuration: boolean next()> -> _SINK_
<org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream)> -> _SINK_
