<groovy.util.IndentPrinter: void printIndent()>
<org.codehaus.groovy.tools.FileSystemCompiler: void deleteRecursive(java.io.File)>
<org.apache.log4j.ConsoleAppender$SystemOutStream: void write(int)>
<org.codehaus.groovy.runtime.EncodingGroovyMethods$1: java.io.Writer writeTo(java.io.Writer)>
<bsh.Interpreter: void print(java.lang.Object)>
<com.sun.codemodel.util.UnicodeEscapeWriter: void write(int)>
<com.google.gson.stream.JsonWriter: void string(java.lang.String)>
<org.apache.commons.io.output.FileWriterWithEncoding: void write(char[])>
<org.modelmapper.internal.objenesis.instantiator.basic.ObjectInputStreamInstantiator$MockStream: void <init>(java.lang.Class)>
<org.codehaus.groovy.runtime.IOGroovyMethods$4: java.io.Writer writeTo(java.io.Writer)>
<com.sun.codemodel.writer.PrologCodeWriter: java.io.Writer openSource(com.sun.codemodel.JPackage,java.lang.String)>
<org.codehaus.groovy.runtime.ResourceGroovyMethods: void eachByte(java.net.URL,int,groovy.lang.Closure)>
<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>
<com.sun.org.apache.xml.internal.resolver.readers.DOMCatalogReader: void readCatalog(com.sun.org.apache.xml.internal.resolver.Catalog,java.lang.String)>
<org.apache.commons.io.output.FileWriterWithEncoding: void write(java.lang.String)>
<org.apache.commons.lang.StringEscapeUtils: void unescapeCsv(java.io.Writer,java.lang.String)>
<org.antlr.v4.runtime.tree.Trees: void writePS(org.antlr.v4.runtime.tree.Tree,java.util.List,java.lang.String,java.lang.String,int)>
<com.sun.xml.txw2.output.XMLWriter: void comment(char[],int,int)>
<org.apache.commons.io.input.XmlStreamReader: void <init>(java.net.URL)>
<org.apache.log4j.xml.DOMConfigurator$2: org.w3c.dom.Document parse(javax.xml.parsers.DocumentBuilder)>
<org.codehaus.groovy.transform.stc.SignatureCodecVersion1: java.lang.String encode(org.codehaus.groovy.ast.ClassNode)>
<org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer,java.nio.charset.Charset)>
<org.apache.log4j.helpers.QuietWriter: void write(java.lang.String)>
<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _appendCharacterEscape(char,int)>
<com.zack6849.alphabot.Utils: java.lang.String google(java.lang.String)>
<groovy.util.IndentPrinter: void print(char)>
<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>
<org.apache.commons.io.output.LockableFileWriter: void write(char[])>
<com.google.common.collect.LinkedHashMultimap: void writeObject(java.io.ObjectOutputStream)>
<dk.dma.ais.tracker.targetTracker.TargetInfoToAisTarget$1: void accept(dk.dma.ais.tracker.targetTracker.TargetTracker$MmsiTarget)>
<org.apache.commons.lang.Entities: void escape(java.io.Writer,java.lang.String)>
<org.codehaus.groovy.antlr.treewalker.SourcePrinter: void print(org.codehaus.groovy.antlr.GroovySourceAST,int,java.lang.String)>
<com.sun.codemodel.writer.FileCodeWriter: java.io.File getFile(com.sun.codemodel.JPackage,java.lang.String)>
<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>
<org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>
<com.google.common.cache.CacheBuilder: void checkWeightWithWeigher()>
<org.apache.commons.lang3.SerializationUtils: byte[] serialize(java.io.Serializable)>
<groovy.io.GroovyPrintStream: void print(java.lang.Object)>
<org.apache.commons.io.IOUtils: void write(char[],java.io.Writer)>
<org.codehaus.groovy.control.ClassNodeResolver: boolean isSourceNewer(java.net.URL,java.lang.Class)>
<org.apache.log4j.net.TelnetAppender$SocketHandler: void run()>
<com.fasterxml.jackson.module.jaxb.ser.DataHandlerJsonSerializer: void serialize(javax.activation.DataHandler,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>
<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>
<org.apache.commons.io.output.FileWriterWithEncoding: void write(int)>
<dk.dma.commons.app.OneInstanceGuard: void <init>(java.lang.String)>
<org.apache.commons.io.FileDeleteStrategy: boolean doDelete(java.io.File)>
<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void store(java.lang.String)>
<com.google.gson.stream.JsonWriter: void beforeName()>
<com.google.common.io.FileBackedOutputStream: void reset()>
<org.codehaus.groovy.runtime.IOGroovyMethods: void transformLine(java.io.Reader,java.io.Writer,groovy.lang.Closure)>
<groovyjarjarasm.asm.commons.SerialVersionUIDAdder: long computeSVUID()>
<groovyjarjarantlr.BaseAST: void xmlSerializeNode(java.io.Writer)>
<org.modelmapper.internal.objenesis.instantiator.basic.ObjectInputStreamInstantiator$MockStream: void initialize()>
<org.apache.commons.io.output.XmlStreamWriter: void close()>
<org.antlr.v4.runtime.Parser: void dumpDFA()>
<org.apache.log4j.ConsoleAppender$SystemErrStream: void write(byte[],int,int)>
<com.sun.tools.xjc.reader.xmlschema.ClassSelector: void addSchemaFragmentJavadoc(com.sun.tools.xjc.model.CClassInfo,com.sun.xml.xsom.XSComponent)>
<com.google.common.base.internal.Finalizer: java.lang.reflect.Field getInheritableThreadLocalsField()>
<org.apache.log4j.ConsoleAppender$SystemErrStream: void write(int)>
<com.sun.tools.xjc.writer.SignatureWriter: void printIndent()>
<com.sun.tools.jxc.SchemaGenerator: int run(java.lang.String[],java.lang.ClassLoader)>
<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>
<groovyjarjarantlr.PrintWriterWithSMAP: void write(int)>
<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(int,java.lang.String)>
<org.objectweb.asm.util.CheckClassAdapter: void printAnalyzerResult(org.objectweb.asm.tree.MethodNode,org.objectweb.asm.tree.analysis.Analyzer,java.io.PrintWriter)>
<org.apache.http.entity.SerializableEntity: void createBytes(java.io.Serializable)>
<com.sun.codemodel.util.JavadocEscapeWriter: void write(int)>
<org.codehaus.groovy.tools.javac.JavacJavaCompiler: void compile(java.util.List,org.codehaus.groovy.control.CompilationUnit)>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printGenericsBounds(java.io.PrintWriter,org.codehaus.groovy.ast.GenericsType[])>
<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>
<org.apache.commons.lang3.text.translate.NumericEntityEscaper: boolean translate(int,java.io.Writer)>
<com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: com.sun.xml.bind.v2.runtime.reflect.Accessor get(java.lang.reflect.Field)>
<org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printSpecialConstructorArgs(java.io.PrintWriter,org.codehaus.groovy.ast.ConstructorNode,org.codehaus.groovy.ast.expr.ConstructorCallExpression)>
<org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,long)>
<com.sun.xml.bind.marshaller.XMLWriter: void write(java.lang.String)>
<org.apache.commons.codec.net.URLCodec: byte[] decodeUrl(byte[])>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printModifiers(java.io.PrintWriter,int)>
<org.codehaus.groovy.runtime.ResourceGroovyMethods: byte[] getBytes(java.net.URL)>
<org.codehaus.groovy.runtime.WritableFile: java.io.Writer writeTo(java.io.Writer)>
<com.sun.xml.bind.v2.bytecode.ClassTailor: byte[] tailor(java.io.InputStream,java.lang.String,java.lang.String,java.lang.String[])>
<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: void writeObject(java.io.ObjectOutputStream)>
<com.sun.codemodel.JFormatter: com.sun.codemodel.JFormatter p(java.lang.String)>
<com.sun.xml.bind.marshaller.XMLWriter: void write(char)>
<org.apache.log4j.ConsoleAppender$SystemOutStream: void write(byte[],int,int)>
<com.google.inject.internal.util.$MapMaker$StrategyImpl: void writeObject(java.io.ObjectOutputStream)>
<com.codahale.metrics.LongAdder: void writeObject(java.io.ObjectOutputStream)>
<org.apache.commons.io.CopyUtils: void copy(java.lang.String,java.io.Writer)>
<org.custommonkey.xmlunit.NodeInputStream: int read()>
<groovy.inspect.Inspector: void print(java.io.PrintStream,java.lang.Object[])>
<org.parboiled.common.FileUtils: char[] readAllChars(java.io.InputStream,java.nio.charset.Charset)>
<com.sun.tools.jxc.gen.config.NGCCRuntime: void trace(java.lang.String)>
<com.sun.tools.xjc.api.util.APTClassLoader: java.lang.Class findClass(java.lang.String)>
<groovyjarjarantlr.PrintWriterWithSMAP: void write(char[],int,int)>
<org.codehaus.groovy.antlr.treewalker.SourcePrinter: void printNewlineAndIndent(org.codehaus.groovy.antlr.GroovySourceAST,int)>
<bsh.CommandLineReader: void main(java.lang.String[])>
<com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: com.sun.xml.bind.v2.runtime.reflect.Accessor get(java.lang.reflect.Method,java.lang.reflect.Method)>
<groovy.lang.TracingInterceptor: void write(java.lang.Object,java.lang.String,java.lang.Object[],java.lang.String)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _prependOrWriteCharacterEscape(char,int)>
<com.sun.xml.bind.marshaller.NioEscapeHandler: void escape(char[],int,int,boolean,java.io.Writer)>
<org.apache.log4j.jdbc.JDBCAppender: void execute(java.lang.String)>
<com.sun.xml.txw2.output.DumbEscapeHandler: void escape(char[],int,int,boolean,java.io.Writer)>
<org.codehaus.groovy.runtime.DefaultGroovyMethods: java.io.StringWriter createStringWriter(java.lang.String)>
<com.sun.codemodel.JFormatter: void spaceIfNeeded(char)>
<org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>
<org.apache.log4j.helpers.CountingQuietWriter: void write(java.lang.String)>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printParams(java.io.PrintWriter,org.codehaus.groovy.ast.MethodNode)>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void clean()>
<org.apache.commons.lang3.StringEscapeUtils$CsvEscaper: int translate(java.lang.CharSequence,int,java.io.Writer)>
<org.apache.commons.lang.StringEscapeUtils: void unescapeJava(java.io.Writer,java.lang.String)>
<groovy.lang.GroovyCodeSource: void <init>(java.net.URL)>
<groovyjarjarantlr.DumpASTVisitor: void tabs()>
<org.apache.log4j.lf5.util.StreamUtils: byte[] getBytes(java.io.InputStream)>
<org.apache.log4j.net.TelnetAppender$SocketHandler: void send(java.lang.String)>
<org.apache.commons.logging.LogFactory$5: java.lang.Object run()>
<org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String)>
<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>
<groovyjarjarantlr.CppCodeGenerator: void _print(java.lang.String)>
<org.apache.log4j.DailyRollingFileAppender: void rollOver()>
<org.parboiled.common.FileUtils: byte[] readAllBytes(java.io.InputStream)>
<org.codehaus.groovy.runtime.FlushingStreamWriter: void write(java.lang.String,int,int)>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printReturn(java.io.PrintWriter,org.codehaus.groovy.ast.ClassNode)>
<groovyjarjarantlr.PythonCodeGenerator: void printTabs()>
<org.apache.commons.io.output.XmlStreamWriter: void detectEncoding(char[],int,int)>
<org.antlr.v4.runtime.misc.LogManager: void save(java.lang.String)>
<org.codehaus.groovy.antlr.java.Java2GroovyProcessor: java.lang.String mindmap(java.lang.String)>
<org.apache.commons.lang3.text.translate.NumericEntityUnescaper: int translate(java.lang.CharSequence,int,java.io.Writer)>
<com.google.common.io.ByteStreams: byte[] toByteArray(java.io.InputStream)>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printTypeName(java.io.PrintWriter,org.codehaus.groovy.ast.ClassNode)>
<groovy.lang.GroovyClassLoader: boolean isSourceNewer(java.net.URL,java.lang.Class)>
<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>
<org.apache.log4j.helpers.MDCKeySetExtractor: java.util.Set getPropertyKeySet(org.apache.log4j.spi.LoggingEvent)>
<org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>
<dk.dma.ais.packet.AisPacketKMZOutputSink: void main(java.lang.String[])>
<org.codehaus.groovy.runtime.ResourceGroovyMethods: java.io.InputStream configuredInputStream(java.util.Map,java.net.URL)>
<groovyjarjarantlr.PrintWriterWithSMAP: void println()>
<groovy.util.GroovyScriptEngine: void main(java.lang.String[])>
<org.codehaus.groovy.runtime.ResourceGroovyMethods: boolean deleteDir(java.io.File)>
<org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper: int translate(java.lang.CharSequence,int,java.io.Writer)>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printType(java.io.PrintWriter,org.codehaus.groovy.ast.ClassNode)>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printMethod(java.io.PrintWriter,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.MethodNode)>
<org.apache.commons.configuration.DefaultFileSystem: java.io.OutputStream getOutputStream(java.net.URL)>
<org.pircbotx.DccChat: void sendLine(java.lang.String)>
<com.sun.org.apache.xml.internal.resolver.readers.TextCatalogReader: void readCatalog(com.sun.org.apache.xml.internal.resolver.Catalog,java.lang.String)>
<com.codahale.metrics.ConsoleReporter: void printWithBanner(java.lang.String,char)>
<com.sun.xml.dtdparser.Resolver: org.xml.sax.InputSource createInputSource(java.net.URL,boolean)>
<org.codehaus.groovy.syntax.CSTNode: void write(java.io.PrintWriter,java.lang.String)>
<groovyjarjarantlr.CodeGenerator: void _print(java.lang.String)>
<javax.xml.bind.JAXB: javax.xml.transform.Result toResult(java.lang.Object)>
<org.codehaus.groovy.control.messages.WarningMessage: void write(java.io.PrintWriter,org.codehaus.groovy.control.Janitor)>
<org.apache.commons.lang3.text.translate.UnicodeEscaper: boolean translate(int,java.io.Writer)>
<org.apache.commons.io.FileSystemUtils: java.lang.Process openProcess(java.lang.String[])>
<com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedTransducedAccessorFactory: com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor get(com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo)>
<org.apache.log4j.net.SMTPAppender: javax.mail.internet.InternetAddress[] parseAddress(java.lang.String)>
<groovyjarjarantlr.CodeGenerator: void printTabs()>
<groovyjarjarantlr.build.Tool: void system(java.lang.String)>
<org.codehaus.groovy.vmplugin.v5.JUnit4Utils: java.lang.Object realRunJUnit4Test(java.lang.Class,groovy.lang.GroovyClassLoader)>
<org.jsoup.helper.HttpConnection$Response: void writePost(java.util.Collection,java.io.OutputStream)>
<org.codehaus.groovy.runtime.ResourceGroovyMethods: void write(java.io.File,java.lang.String,java.lang.String)>
<groovyjarjarantlr.PythonCodeGenerator: void _printAction(java.lang.String)>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printConstructor(java.io.PrintWriter,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ConstructorNode)>
<org.apache.log4j.RollingFileAppender: void rollOver()>
<groovyjarjarantlr.CodeGenerator: void _printAction(java.lang.String)>
<org.apache.log4j.jdbc.JDBCAppender: java.sql.Connection getConnection()>
<org.codehaus.groovy.runtime.DefaultGroovyMethods: void printf(java.io.Writer,java.lang.String,java.lang.Object)>
<org.apache.commons.io.IOUtils: void <clinit>()>
<dk.dma.commons.util.io.IoUtil: void writeObject(java.io.DataOutputStream,java.lang.Object)>
<groovy.lang.Script: void println()>
<groovyjarjarantlr.BaseAST: void xmlSerializeRootClose(java.io.Writer)>
<groovyjarjarantlr.PrintWriterWithSMAP: void write(java.lang.String,int,int)>
<groovyjarjarantlr.Parser: void traceIndent()>
<groovyjarjarantlr.TreeParser: void traceIndent()>
<org.codehaus.groovy.runtime.ResourceGroovyMethods: java.lang.Object withReader(java.net.URL,groovy.lang.Closure)>
<org.pircbotx.DccFileTransfer: void doSend(boolean)>
<org.apache.commons.lang3.text.translate.OctalUnescaper: int translate(java.lang.CharSequence,int,java.io.Writer)>
<com.sun.xml.txw2.output.XMLWriter: void write(java.lang.String)>
<org.apache.commons.lang3.text.translate.LookupTranslator: int translate(java.lang.CharSequence,int,java.io.Writer)>
<com.google.gson.ParameterizedTypeHandlerMap: void register(java.lang.reflect.Type,java.lang.Object)>
<groovyjarjarantlr.PythonCodeGenerator: void _printJavadoc(java.lang.String)>
<com.sun.codemodel.JFormatter: com.sun.codemodel.JFormatter nl()>
<com.sun.codemodel.fmt.JTextFile: void build(java.io.OutputStream)>
<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>
<org.codehaus.groovy.runtime.DefaultGroovyMethods: void printf(java.io.PrintStream,java.lang.String,java.lang.Object)>
<com.sun.xml.txw2.output.DumpSerializer: void endStartTag(java.lang.String,java.lang.String,java.lang.String)>
<com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: void writeMapTo(java.io.ObjectOutputStream)>
<org.apache.http.entity.EntityTemplate: java.io.InputStream getContent()>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printValue(java.io.PrintWriter,org.codehaus.groovy.ast.expr.Expression,boolean)>
<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>
<com.sun.xml.xsom.impl.parser.state.NGCCRuntime: void printIndent()>
<org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream,int)>
<groovyjarjarantlr.CodeGenerator: void print(java.lang.String)>
<org.apache.commons.configuration.ConfigurationUtils: void dump(org.apache.commons.configuration.Configuration,java.io.PrintWriter)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: int _prependOrWriteCharacterEscape(char[],int,int,char,int)>
<org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)>
<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.StringBuffer,java.io.Writer,long,org.joda.time.Chronology)>
<com.sun.tools.xjc.ConsoleErrorReporter: void print(java.lang.String,org.xml.sax.SAXParseException)>
<com.fasterxml.jackson.databind.util.LRUMap: void writeObject(java.io.ObjectOutputStream)>
<groovy.lang.TracingInterceptor: void writeInfo(java.lang.Class,java.lang.String,java.lang.Object[])>
<org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File,int,int)>
<com.sun.org.apache.xml.internal.resolver.readers.SAXCatalogReader: void readCatalog(com.sun.org.apache.xml.internal.resolver.Catalog,java.lang.String)>
<org.apache.commons.io.IOUtils: char[] toCharArray(java.io.InputStream,java.nio.charset.Charset)>
<org.joda.time.format.DateTimeFormatterBuilder: void printUnknownString(java.io.Writer,int)>
<groovy.util.IndentPrinter: void println(java.lang.String)>
<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(int,int,java.lang.String)>
<org.apache.log4j.pattern.LogEvent: void writeLevel(java.io.ObjectOutputStream)>
<org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,int)>
<org.apache.commons.lang.StringEscapeUtils: void escapeJavaStyleString(java.io.Writer,java.lang.String,boolean,boolean)>
<org.apache.commons.lang.exception.NestableDelegate: void printStackTrace(java.io.PrintWriter)>
<org.codehaus.groovy.antlr.treewalker.NodeAsHTMLPrinter: void visitDefault(org.codehaus.groovy.antlr.GroovySourceAST,int)>
<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>
<com.google.gson.stream.JsonWriter: void newline()>
<org.apache.commons.beanutils.DynaProperty: void writeAnyClass(java.lang.Class,java.io.ObjectOutputStream)>
<com.google.common.collect.LinkedListMultimap: void writeObject(java.io.ObjectOutputStream)>
<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,long,int)>
<org.codehaus.groovy.runtime.ProcessGroovyMethods: java.lang.Process execute(java.lang.String)>
<dk.dma.commons.app.OneInstanceGuard: void unlockFile()>
<groovyjarjarantlr.BaseAST: void xmlSerializeRootOpen(java.io.Writer)>
<org.apache.log4j.spi.LoggingEvent: void writeLevel(java.io.ObjectOutputStream)>
<org.apache.commons.io.output.FileWriterWithEncoding: void write(java.lang.String,int,int)>
<org.codehaus.groovy.runtime.ProcessGroovyMethods: java.lang.Process execute(java.util.List,java.util.List,java.io.File)>
<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: void visitDefault(org.codehaus.groovy.antlr.GroovySourceAST,int)>
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)>
<org.apache.commons.io.output.ProxyWriter: void write(int)>
<com.sun.org.apache.xml.internal.resolver.Resolver: com.sun.org.apache.xml.internal.resolver.Resolver queryResolver(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<org.parboiled.common.ConsoleSink: void receive(java.lang.String)>
<groovyjarjarantlr.LLkParser: void trace(java.lang.String,java.lang.String)>
<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: byte[] toByteArray()>
<org.apache.commons.configuration.PropertiesConfiguration$PropertiesWriter: void writeProperty(java.lang.String,java.lang.Object,boolean)>
<org.codehaus.groovy.runtime.ResourceGroovyMethods: java.lang.Object withReader(java.net.URL,java.lang.String,groovy.lang.Closure)>
<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void deleteConfigurationFile()>
<com.sun.tools.xjc.XJC2Task: void _doXJC()>
<com.sun.tools.jxc.gen.config.NGCCRuntime: void printIndent()>
<com.google.common.collect.Serialization: void writeMultimap(com.google.common.collect.Multimap,java.io.ObjectOutputStream)>
<com.google.common.io.Files: void move(java.io.File,java.io.File)>
<org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>
<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.io.Writer,int)>
<org.apache.commons.lang.Entities: void doUnescape(java.io.Writer,java.lang.String,int)>
<org.apache.commons.io.output.LockableFileWriter: void write(int)>
<org.pircbotx.OutputThread: void sendRawLineNow(java.lang.String)>
<org.pircbotx.IdentServer: void run()>
<org.apache.commons.lang3.text.translate.CharSequenceTranslator: void translate(java.lang.CharSequence,java.io.Writer)>
<org.apache.commons.io.output.LockableFileWriter: void close()>
<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printField(java.io.PrintWriter,org.codehaus.groovy.ast.FieldNode,boolean)>
<org.codehaus.groovy.runtime.DefaultGroovyMethods: void println(java.lang.Object)>
<org.codehaus.groovy.runtime.FlushingStreamWriter: void write(int)>
<org.codehaus.groovy.runtime.ProcessGroovyMethods: java.lang.Process execute(java.lang.String[],java.lang.String[],java.io.File)>
<dk.dma.ais.utils.filter.AisFilter: void accept(dk.dma.ais.packet.AisPacket)>
<groovyjarjarasm.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>
<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(long)>
<com.google.common.collect.Serialization: void writeMap(java.util.Map,java.io.ObjectOutputStream)>
<dk.dma.ais.lib.AisGapsToCSV: void run(com.google.inject.Injector)>
<groovy.lang.GString: java.io.Writer writeTo(java.io.Writer)>
<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>
<groovyjarjarantlr.PreservingFileWriter: void close()>
<org.codehaus.groovy.antlr.java.Java2GroovyProcessor: java.lang.String convert(java.lang.String,java.lang.String,boolean,boolean)>
<org.aopalliance.aop.AspectException: void printStackTrace(java.io.PrintWriter)>
<groovyjarjarantlr.DumpASTVisitor: void visit(groovyjarjarantlr.collections.AST)>
<org.codehaus.groovy.control.messages.ExceptionMessage: void write(java.io.PrintWriter,org.codehaus.groovy.control.Janitor)>
<org.codehaus.groovy.runtime.StringGroovyMethods: java.io.StringWriter createStringWriter(java.lang.String)>
<org.apache.log4j.Level: void writeObject(java.io.ObjectOutputStream)>
<groovy.util.FactoryBuilderSupport: java.lang.Object createNode(java.lang.Object,java.util.Map,java.lang.Object)>
<org.codehaus.groovy.runtime.ResourceGroovyMethods: void eachByte(java.net.URL,groovy.lang.Closure)>
<com.zack6849.alphabot.Utils: java.lang.String checkServerStatus(java.net.InetAddress,int)>
<org.pircbotx.DccFileTransfer: void doReceive(boolean)>
<com.sun.codemodel.JFormatter: com.sun.codemodel.JFormatter p(char)>
<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>
<org.apache.log4j.net.SMTPAppender: void sendBuffer()>
<org.codehaus.groovy.runtime.EncodingGroovyMethods$2: java.io.Writer writeTo(java.io.Writer)>
<com.google.common.util.concurrent.AtomicDoubleArray: void writeObject(java.io.ObjectOutputStream)>
<com.sun.xml.bind.marshaller.DumbEscapeHandler: void escape(char[],int,int,boolean,java.io.Writer)>
<com.zack6849.alphabot.Utils: java.lang.String getWebpageTitle(java.lang.String)>
<groovy.ui.GroovyMain: void processFile(groovy.lang.Script,java.io.File)>
<com.google.gson.Gson: com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer)>
<com.google.common.collect.ArrayListMultimap: void writeObject(java.io.ObjectOutputStream)>
<org.objectweb.asm.util.Printer: void printList(java.io.PrintWriter,java.util.List)>
<org.codehaus.groovy.antlr.treewalker.NodePrinter: void visitDefault(org.codehaus.groovy.antlr.GroovySourceAST,int)>
<groovy.util.IndentPrinter: void print(java.lang.String)>
<org.codehaus.groovy.runtime.IOGroovyMethods: byte[] getBytes(java.io.InputStream)>
<com.zack6849.alphabot.LoggingListener: void log(java.lang.String,java.lang.String)>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printAnnotation(java.io.PrintWriter,org.codehaus.groovy.ast.AnnotationNode)>
<dk.dma.ais.packet.AisPacketKMZOutputSink: void footer(java.io.OutputStream,long)>
<org.apache.commons.io.output.ProxyWriter: void write(char[])>
<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(boolean)>
<org.apache.commons.io.output.ProxyWriter: void write(java.lang.String,int,int)>
<groovyjarjarantlr.preprocessor.Tool: void main(java.lang.String[])>
<org.codehaus.groovy.runtime.ProcessGroovyMethods: java.lang.Process execute(java.lang.String[])>
<com.sun.xml.bind.v2.ContextFactory: javax.xml.bind.JAXBContext createContext(java.lang.Class[],java.util.Map)>
<org.aopalliance.aop.AspectException: void printStackTrace()>
<com.sun.xml.bind.v2.runtime.JaxBeanInfo: void setLifecycleFlags()>
<com.sun.istack.tools.ParallelWorldClassLoader: java.lang.Class findClass(java.lang.String)>
<org.apache.commons.lang3.text.translate.UnicodeUnescaper: int translate(java.lang.CharSequence,int,java.io.Writer)>
<dk.dma.enav.model.geometry.grid.Grid: void main(java.lang.String[])>
<groovy.util.GroovyScriptEngine: java.net.URLConnection openConnection(java.net.URL)>
<com.beust.jcommander.internal.JDK6Console: void print(java.lang.String)>
<groovyjarjarantlr.CharScanner: void traceIndent()>
<org.codehaus.groovy.runtime.DefaultGroovyMethods: void print(java.io.PrintStream,java.lang.Object)>
<org.antlr.v4.runtime.misc.Utils: void writeFile(java.lang.String,java.lang.String)>
<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printEnumFields(java.io.PrintWriter,java.util.List)>
<org.apache.commons.io.IOUtils: byte[] toByteArray(java.net.URL)>
<org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printImports(java.io.PrintWriter,org.codehaus.groovy.ast.ClassNode)>
<org.codehaus.groovy.runtime.ResourceGroovyMethods: java.lang.Object eachLine(java.net.URL,int,groovy.lang.Closure)>
<org.codehaus.groovy.runtime.FlushingStreamWriter: void write(char[],int,int)>
<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>
<org.codehaus.groovy.runtime.DefaultGroovyStaticMethods: java.io.File createTempDir(java.io.File,java.lang.String,java.lang.String)>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printClassContents(java.io.PrintWriter,org.codehaus.groovy.ast.ClassNode)>
<com.sun.codemodel.fmt.JBinaryFile: void build(java.io.OutputStream)>
<groovy.util.IndentPrinter: void println()>
<com.sun.xml.xsom.impl.util.SchemaWriter: void println(java.lang.String)>
<org.codehaus.groovy.runtime.DefaultGroovyMethods: void print(java.lang.Object,java.io.PrintWriter)>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printTypeWithoutBounds(java.io.PrintWriter,org.codehaus.groovy.ast.ClassNode)>
<org.codehaus.groovy.antlr.java.Java2GroovyProcessor: java.lang.String nodePrinter(java.lang.String)>
<com.google.common.collect.HashMultimap: void writeObject(java.io.ObjectOutputStream)>
<org.apache.log4j.ConsoleAppender$SystemOutStream: void write(byte[])>
<org.codehaus.groovy.runtime.DefaultGroovyMethods: void print(java.io.PrintWriter,java.lang.Object)>
<org.apache.commons.lang.StringEscapeUtils: void escapeCsv(java.io.Writer,java.lang.String)>
<com.beust.jcommander.internal.DefaultConsole: void print(java.lang.String)>
<org.codehaus.groovy.runtime.ProcessGroovyMethods: java.lang.Process execute(java.lang.String[],java.util.List,java.io.File)>
<groovy.io.GroovyPrintWriter: void print(java.lang.Object)>
<org.codehaus.groovy.control.messages.SyntaxErrorMessage: void write(java.io.PrintWriter,org.codehaus.groovy.control.Janitor)>
<org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.Writer)>
<org.apache.log4j.ConsoleAppender$SystemErrStream: void write(byte[])>
<org.codehaus.groovy.runtime.ProcessGroovyMethods: java.lang.Process execute(java.util.List,java.lang.String[],java.io.File)>
<org.codehaus.groovy.control.MultipleCompilationErrorsException: java.lang.String getMessage()>
<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.io.Writer,int)>
<org.codehaus.groovy.runtime.DefaultGroovyMethods: void print(java.lang.Object,java.lang.Object)>
<org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.Writer)>
<org.apache.commons.lang.Entities: void unescape(java.io.Writer,java.lang.String)>
<com.google.gson.MappedObjectConstructor: void register(java.lang.reflect.Type,com.google.gson.InstanceCreator)>
<org.codehaus.groovy.runtime.ProcessGroovyMethods: java.lang.Process execute(java.lang.String,java.lang.String[],java.io.File)>
<com.sun.xml.txw2.output.XMLWriter: void write(char)>
<com.sun.tools.xjc.Driver: int run(java.lang.String[],com.sun.tools.xjc.XJCListener)>
<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>
<org.codehaus.groovy.runtime.metaclass.ConcurrentReaderHashMap: void writeObject(java.io.ObjectOutputStream)>
<org.codehaus.groovy.control.ErrorCollector: void write(java.io.PrintWriter,org.codehaus.groovy.control.Janitor,java.util.List,java.lang.String)>
<com.sun.tools.xjc.Driver: void _main(java.lang.String[])>
<com.sun.xml.dtdparser.DTDParser: void parseInternal(org.xml.sax.InputSource)>
<org.codehaus.groovy.runtime.IOGroovyMethods: void transformChar(java.io.Reader,java.io.Writer,groovy.lang.Closure)>
<com.google.common.collect.Serialization: void writeMultiset(com.google.common.collect.Multiset,java.io.ObjectOutputStream)>
<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>
<com.sun.xml.dtdparser.Resolver: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>
<org.codehaus.groovy.runtime.InvokerHelper: void write(java.io.Writer,java.lang.Object)>
<org.apache.commons.configuration.PropertiesConfiguration$PropertiesWriter: void writeln(java.lang.String)>
<org.codehaus.groovy.runtime.ResourceGroovyMethods: void write(java.io.File,java.lang.String)>
<com.google.common.cache.LongAdder: void writeObject(java.io.ObjectOutputStream)>
<org.custommonkey.xmlunit.DoctypeInputStream: java.lang.String getContent(java.lang.String)>
<com.sun.xml.bind.marshaller.MinimumEscapeHandler: void escape(char[],int,int,boolean,java.io.Writer)>
<com.sun.tools.xjc.writer.SignatureWriter: void println(java.lang.String)>
<groovyjarjarantlr.debug.misc.ASTFrame$MyTreeSelectionListener: void valueChanged(javax.swing.event.TreeSelectionEvent)>
<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.Hasher putBytes(byte[],int,int)>
<org.codehaus.groovy.tools.javac.JavaStubGenerator: void printDefaultValue(java.io.PrintWriter,org.codehaus.groovy.ast.ClassNode)>
<org.apache.commons.codec.net.QuotedPrintableCodec: byte[] decodeQuotedPrintable(byte[])>
<org.codehaus.groovy.runtime.IOGroovyMethods: void filterLine(java.io.Reader,java.io.Writer,groovy.lang.Closure)>
<org.codehaus.groovy.runtime.IOGroovyMethods: void writeLine(java.io.BufferedWriter,java.lang.String)>
<org.apache.commons.io.IOUtils: char[] toCharArray(java.io.Reader)>
<com.sun.xml.xsom.impl.parser.state.NGCCRuntime: void trace(java.lang.String)>
<org.apache.commons.codec.net.QuotedPrintableCodec: byte[] encodeQuotedPrintable(java.util.BitSet,byte[])>
<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>
<com.codahale.metrics.ConsoleReporter: void report(java.util.SortedMap,java.util.SortedMap,java.util.SortedMap,java.util.SortedMap,java.util.SortedMap)>
<groovy.io.PlatformLineWriter: void write(char[],int,int)>
<groovyjarjarantlr.PythonCodeGenerator: void od(java.lang.String,int,int,java.lang.String)>
<org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String,int,int)>
