<com.sforce.soap.enterprise.sobject.Milestone1_Log__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setNull(int,int,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateObject(int,java.lang.Object)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory: java.lang.String getDatabaseName()> -> _SINK_
<org.hibernate.engine.query.ParameterMetadata: org.hibernate.type.Type getOrdinalParameterExpectedType(int)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.Map extractOutputParameters(java.sql.CallableStatement,java.util.List)> -> _SINK_
<org.postgresql.core.QueryExecutor: org.postgresql.core.Query createParameterizedQuery(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementType: org.hibernate.type.Type getSelectType()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXAConnection: void end(javax.transaction.xa.Xid,int)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: java.lang.String getTableName(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.util.ColumnHelper: void generateScalarColumns(org.hibernate.hql.ast.tree.HqlSqlWalkerNode,java.lang.String[],int)> -> _SINK_
<org.postgresql.core.v2.ProtocolConnectionImpl: org.postgresql.util.HostSpec getHostSpec()> -> _SINK_
<org.castor.jdo.util.JDOConfFactory: org.castor.jdo.conf.Database createDatabase(java.lang.String,java.lang.String,org.castor.jdo.conf.DataSource,org.castor.jdo.conf.Mapping)> -> _SINK_
<com.mysql.jdbc.Statement$1: void run()> -> _SINK_
<org.hibernate.cfg.Mappings: void checkQueryExist(java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiStatement: java.sql.SQLWarning getWarnings()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.ParameterMetaData getParameterMetaData()> -> _SINK_
<org.mongodb.morphia.mapping.ReferenceMapper: boolean exists(java.lang.Class,java.lang.Object,org.mongodb.morphia.mapping.cache.EntityCache,org.mongodb.morphia.mapping.Mapper,boolean)> -> _SINK_
<org.apache.ibatis.type.ByteTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.postgresql.core.Field: void <init>(java.lang.String,int)> -> _SINK_
<org.hibernate.event.FlushEntityEvent: java.lang.Object[] getDatabaseSnapshot()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Time getTime(int,java.util.Calendar)> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: org.exolab.castor.mapping.xml.Sql unmarshal(java.io.Reader)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.classic.ClauseParser: void endChild(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: java.lang.Object uniqueElement(java.util.List)> -> _SINK_
<org.exolab.castor.jdo.engine.JDOMappingLoader$1: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsDataManipulationTransactionsOnly()> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$SetAssignment: void <init>(java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.hql.classic.Parser: void start(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: void close()> -> _SINK_
<java.sql.ResultSet: void refreshRow()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: boolean execute(java.lang.String,int[])> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: java.sql.Connection getConnection()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsSubqueriesInIns()> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteria: gov.nih.nci.system.query.nestedcriteria.NestedCriteria getInternalNestedCriteria()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.utils.Key selectTriggerToAcquire(java.sql.Connection,long,long)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position__c: void setTasks(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.copy.CopyManager: org.postgresql.copy.CopyIn copyIn(java.lang.String)> -> _SINK_
<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setMaxRows(int)> -> _SINK_
<org.hibernate.type.BlobType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setNull(int,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxColumnsInIndex()> -> _SINK_
<org.springframework.orm.hibernate3.HibernateInterceptor: org.hibernate.Session getSession()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: double getDouble(int)> -> _SINK_
<gov.nih.nci.system.util.ClassCache: boolean isCollection(java.lang.String,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Lead: void setEmailStatuses(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.type.ClobType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.Query: org.mongodb.morphia.query.Query cloneQuery()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement$BindValue: java.lang.String toString()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsTransactionIsolationLevel(int)> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: org.mongodb.morphia.query.UpdateOperations remove(java.lang.String,boolean)> -> _SINK_
<org.hibernate.sql.InFragment: org.hibernate.sql.InFragment setFormula(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.v2.SimpleParameterList: void setStringParameter(int,java.lang.String,int)> -> _SINK_
<org.castor.jdo.conf.DatabaseChoiceDescriptor: void <init>()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getDefaultFetchSize()> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.DimValIdList getNavExposedRefinements()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getTcpKeepAlive()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.lang.String getDriverVersion()> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: org.hibernate.ScrollableResults scroll(org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.Field: long getLength()> -> _SINK_
<org.postgresql.geometric.PGlseg: boolean equals(java.lang.Object)> -> _SINK_
<org.exolab.castor.jdo.drivers.SapDbQueryExpression: void <init>(org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean doesMaxRowSizeIncludeBlobs()> -> _SINK_
<com.sforce.soap.enterprise.sobject.EmailServicesFunction: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.endeca.navigation.analytics.AnalyticsQuery: int size()> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: org.mmbase.storage.search.Constraint getCompositeConstraint(org.w3c.dom.Element,org.mmbase.bridge.util.xml.query.QueryDefinition)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateDate(int,java.sql.Date)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setNClob(int,java.sql.NClob)> -> _SINK_
<org.exolab.castor.jdo.engine.JDOClassDescriptor: void <init>(org.exolab.castor.mapping.ClassDescriptor,org.exolab.castor.jdo.engine.KeyGeneratorDescriptor)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean othersUpdatesAreVisible(int)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setString(java.lang.String,java.lang.String)> -> _SINK_
<java.sql.SQLException: java.lang.String getSQLState()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.String getConnectionCollation()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateNCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<org.hibernate.hql.ast.SqlASTFactory: antlr.collections.AST createUsingCtor(antlr.Token,java.lang.String)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setInteger(java.lang.String,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Blob getBlob(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contract: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.CharacterizationServiceHelper: gov.nih.nci.cananolab.domain.common.Protocol findProtocolByCharacterizationId(java.lang.String)> -> _SINK_
<org.hibernate.sql.Delete: java.lang.String toStatementString()> -> _SINK_
<org.springframework.jdbc.object.SqlOperation: org.springframework.jdbc.core.PreparedStatementCreator newPreparedStatementCreator(java.lang.String,java.lang.Object[])> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void aggregate(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: byte getByte(int)> -> _SINK_
<java.sql.CallableStatement: java.lang.Object getObject(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.StringBuilder appendSet(java.util.Set,java.lang.StringBuilder)> -> _SINK_
<java.sql.ResultSet: void insertRow()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: void setCatalog(java.lang.String)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.Query createQuery(java.lang.Class,com.mongodb.DBObject)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Time__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.storage.search.implementation.ModifiableQuery: java.util.List getSortOrders()> -> _SINK_
<org.exolab.castor.xml.handlers.SQLTimeFieldHandler: java.lang.Object newInstance(java.lang.Object)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: java.sql.NClob getNClob(int)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean: void removeQuery(gov.nih.nci.cananolab.dto.BaseQueryBean)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$3: void handleCompletion()> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$ErrorTrackingResultHandler: void handleCompletion()> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: void setBytea(int,byte[],int,int)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLQuery: void <init>(org.exolab.castor.jdo.engine.SQLEngine,org.exolab.castor.persist.spi.PersistenceFactory,java.lang.String,java.lang.Class[],boolean)> -> _SINK_
<org.hibernate.type.CollectionType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setNCharacterStream(int,java.io.Reader)> -> _SINK_
<com.mysql.jdbc.ResultSet: short getShort(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Clause: java.lang.Object firstValue()> -> _SINK_
<org.mongodb.morphia.query.AbstractCriteria: void setAttachedTo(org.mongodb.morphia.query.CriteriaContainerImpl)> -> _SINK_
<org.castor.persist.AbstractTransactionContext: org.exolab.castor.jdo.DbMetaInfo getConnectionInfo(org.exolab.castor.persist.LockEngine)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setDimSearchNumDimValues(int)> -> _SINK_
<org.exolab.castor.jdo.oql.ParamInfo: void <init>(java.lang.String,java.lang.String,org.exolab.castor.jdo.engine.JDOFieldDescriptor,java.lang.ClassLoader)> -> _SINK_
<org.springframework.orm.jpa.JpaTransactionManager: java.lang.Object doSuspend(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getProcedureTerm()> -> _SINK_
<org.hibernate.sql.DerbyCaseFragment: void <init>()> -> _SINK_
<com.mysql.jdbc.Security: java.lang.String longToHex(long)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setPGobject(int,org.postgresql.util.PGobject)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.String getSql(java.lang.Object)> -> _SINK_
<java.sql.SQLWarning: void setNextWarning(java.sql.SQLWarning)> -> _SINK_
<org.castor.persist.AbstractTransactionContext: java.lang.Object load(org.exolab.castor.persist.spi.Identity,org.castor.persist.ProposedEntity,org.exolab.castor.mapping.AccessMode,org.exolab.castor.persist.QueryResults)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsSchemasInPrivilegeDefinitions()> -> _SINK_
<com.endeca.navigation.AuthHttpENEConnection: java.lang.String formatGroups()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: java.sql.Clob createClob()> -> _SINK_
<org.hibernate.hql.ast.tree.DotNode: org.hibernate.type.Type getDataType()> -> _SINK_
<org.postgresql.core.Logger: boolean logDebug()> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementFactory: org.hibernate.hql.ast.tree.FromElement createCollectionJoin(org.hibernate.engine.JoinSequence,java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.lang.String getConstraintDefinition(org.mmbase.core.CoreField)> -> _SINK_
<com.mysql.jdbc.Field: boolean isNativeNumericType()> -> _SINK_
<org.hibernate.hql.ast.ParameterTranslationsImpl: int getOrdinalParameterSqlLocation(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getProfileSql()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.Object[] getNaturalIdentifierSnapshot(java.io.Serializable,org.hibernate.engine.SessionImplementor)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.impl.SampleServiceLocalImpl: java.util.SortedSet getAllOrganizationNames()> -> _SINK_
<org.postgresql.geometric.PGpoint: boolean equals(java.lang.Object)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void fromFragmentSeparator(antlr.collections.AST)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int)> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeQuery: void <init>(org.mmbase.bridge.Cloud)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: java.nio.ByteBuffer[] getValues()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Update update(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.util.PGobject: java.lang.String getType()> -> _SINK_
<org.hibernate.criterion.Junction: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int insertCronTrigger(java.sql.Connection,org.quartz.CronTrigger)> -> _SINK_
<com.mysql.jdbc.util.BaseBugReport: void runTest()> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$2: void <init>(org.exolab.castor.mapping.xml.SqlDescriptor)> -> _SINK_
<org.postgresql.geometric.PGcircle: java.lang.Object clone()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.ResultSet getResultSet()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Options: com.datastax.driver.core.policies.RetryPolicy getRetryPolicy()> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfo: com.mysql.jdbc.CallableStatement$CallableStatementParam getParameter(int)> -> _SINK_
<org.hibernate.engine.query.ParameterMetadata: org.hibernate.engine.query.OrdinalParameterDescriptor getOrdinalParameterDescriptor(int)> -> _SINK_
<org.springframework.orm.toplink.LocalSessionFactory: oracle.toplink.sessions.DatabaseSession loadDatabaseSession(java.lang.String,java.lang.String,java.lang.ClassLoader)> -> _SINK_
<org.apache.ibatis.executor.parameter.DefaultParameterHandler: void setParameters(java.sql.PreparedStatement)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void removeUserFromProtectionGroup(java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.jdbc.datasource.WebSphereDataSourceAdapter: java.sql.Connection doGetConnection(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateByte(java.lang.String,byte)> -> _SINK_
<au.com.bytecode.opencsv.ResultSetHelperService: java.lang.String handleTimestamp(java.sql.Timestamp)> -> _SINK_
<com.mysql.jdbc.Buffer: void dumpHeader()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateDouble(int,double)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseFastIntParsing()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsGetGeneratedKeys()> -> _SINK_
<org.hibernate.cfg.Settings: void setQueryCacheEnabled(boolean)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setRef(int,java.sql.Ref)> -> _SINK_
<com.mysql.jdbc.Connection: boolean isClientTzUTC()> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder regex(java.util.regex.Pattern)> -> _SINK_
<gov.nih.nci.security.authorization.instancelevel.InstanceLevelSecurityHelper: java.lang.String optimiseFilterQuery(java.lang.Boolean,java.lang.String)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationService: java.util.List query(java.lang.Object,java.lang.Integer,java.lang.String)> -> _SINK_
<org.jboss.resource.adapter.jdbc.vendor.MySQLExceptionSorter: void <init>()> -> _SINK_
<com.mysql.jdbc.ResultSet: short getShort(java.lang.String)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: void <init>(java.lang.String,org.hibernate.engine.SessionImplementor,org.hibernate.engine.query.ParameterMetadata)> -> _SINK_
<org.apache.ibatis.builder.xml.XMLStatementBuilder$SelectKeyHandler: void handleNode(org.apache.ibatis.parsing.XNode,java.util.List)> -> _SINK_
<gov.nih.nci.system.query.cql.CQLPredicate: java.lang.String getValue()> -> _SINK_
<com.mysql.jdbc.Connection: void registerQueryExecutionTime(long)> -> _SINK_
<org.exolab.castor.jdo.QueryResults: java.lang.Object next()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int selectNumTriggers(java.sql.Connection)> -> _SINK_
<org.mongodb.morphia.query.UpdateResults: boolean getHadError()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String[] getSubclassPropertyColumnAliases(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: java.sql.ParameterMetaData getParameterMetaData()> -> _SINK_
<org.postgresql.ssl.jdbc4.LazyKeyManager: void <init>(java.lang.String,java.lang.String,javax.security.auth.callback.CallbackHandler,boolean)> -> _SINK_
<org.postgresql.util.PGtokenizer: void removeBox()> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: void validateResultMapsCount(java.sql.ResultSet,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: int getResultSetType()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void bindBytes(int,byte[],int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: int getMaxFieldSize()> -> _SINK_
<org.hibernate.sql.ForUpdateFragment: java.lang.String toFragmentString()> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.ParamTagSupport: int doEndTag()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setOpenActivities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.CallableStatement: boolean getBoolean(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.IndexNode: void prepareForDot(java.lang.String)> -> _SINK_
<org.mmbase.module.corebuilders.InsRel: java.util.List getRelationNodes(int,int,boolean)> -> _SINK_
<org.acegisecurity.acls.jdbc.JdbcMutableAclService: java.lang.Long retrieveObjectIdentityPrimaryKey(org.acegisecurity.acls.objectidentity.ObjectIdentity)> -> _SINK_
<org.hibernate.sql.ConditionFragment: org.hibernate.sql.ConditionFragment setCondition(java.lang.String[],java.lang.String)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.TransactionTagSupport: void release()> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DataSourceUtil: javax.sql.DataSource getDataSource(java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxColumnsInIndex()> -> _SINK_
<org.hibernate.lob.SerializableClob: int setString(long,java.lang.String,int,int)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNtx(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: int getResultSetConcurrency()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setURL(java.lang.String,java.net.URL)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<org.mongodb.morphia.dao.BasicDAO: org.mongodb.morphia.query.UpdateResults updateFirst(org.mongodb.morphia.query.Query,org.mongodb.morphia.query.UpdateOperations)> -> _SINK_
<org.postgresql.core.types.PGString: org.postgresql.core.types.PGType castToServerType(java.lang.String,int)> -> _SINK_
<org.postgresql.jdbc2.ResultWrapper: org.postgresql.jdbc2.ResultWrapper getNext()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Interview__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.StringUtils: byte[] getBytes(java.lang.String,com.mysql.jdbc.SingleByteCharsetConverter,java.lang.String,java.lang.String,int,int,boolean)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: int getBackendPID()> -> _SINK_
<org.castor.jdo.util.JDOConfFactory: org.castor.jdo.conf.JdoConf createJdoConf(org.castor.jdo.conf.Database[],org.castor.jdo.conf.TransactionDemarcation)> -> _SINK_
<org.hibernate.persister.entity.JoinedSubclassEntityPersister: java.lang.String filterFragment(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setTasks(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.engine.QueryParameters: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: void <init>(org.mmbase.storage.search.SearchQuery)> -> _SINK_
<gov.nih.nci.cananolab.system.dao.CaNanoLabORMDAO: java.util.List directSQL(java.lang.String,java.lang.String[],java.lang.Object[])> -> _SINK_
<org.mongodb.morphia.query.CriteriaContainerImpl: void setChildren(java.util.List)> -> _SINK_
<org.hibernate.hql.QuerySplitter: java.lang.Class class$(java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsSchemasInProcedureCalls()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setFetchSize(int)> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: void handleResultSet(java.sql.ResultSet,org.apache.ibatis.mapping.ResultMap,java.util.List)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void initialize(org.quartz.spi.ClassLoadHelper,org.quartz.spi.SchedulerSignaler)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl startsWith(java.lang.String)> -> _SINK_
<org.hibernate.sql.CaseFragment: void <init>()> -> _SINK_
<org.exolab.castor.mapping.xml.FieldMapping: org.exolab.castor.mapping.xml.Sql getSql()> -> _SINK_
<org.hibernate.hql.ast.tree.QueryNode: void setScalarColumnText(int)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String fromJoinFragment(java.lang.String,boolean,boolean)> -> _SINK_
<org.exolab.castor.xml.handlers.SQLTimestampFieldHandler: void <init>()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateBlob(int,java.sql.Blob)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: java.util.Map getTokenReplacements()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: boolean wasNull()> -> _SINK_
<org.hibernate.engine.query.NativeSQLQueryPlan: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: int getMaxRows()> -> _SINK_
<org.hibernate.persister.entity.NamedQueryLoader: java.lang.Object load(java.io.Serializable,java.lang.Object,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: int getCascadeDeleteOption(java.lang.String)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.engine.QueryParameters getQueryParameters(java.util.Map)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: java.util.List findFunctionsBy(java.lang.String,gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setNull(int,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: long getLong(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: com.datastax.driver.core.Statement setRetryPolicy(com.datastax.driver.core.policies.RetryPolicy)> -> _SINK_
<org.mmbase.module.database.MultiPool: void checkTime()> -> _SINK_
<org.apache.axis.types.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.jdbc.object.UpdatableSqlQuery$RowMapperImpl: void <init>(org.springframework.jdbc.object.UpdatableSqlQuery,java.util.Map)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: org.hibernate.hql.ast.util.LiteralProcessor getLiteralProcessor()> -> _SINK_
<org.springframework.jdbc.support.lob.AbstractLobHandler: byte[] getBlobAsBytes(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Buffer: byte readByte()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: void setNetworkTimeout(java.util.concurrent.Executor,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void cleanupStatementResultSets(java.sql.Statement)> -> _SINK_
<org.castor.jdo.conf.Database: java.lang.String getName()> -> _SINK_
<com.datastax.driver.core.querybuilder.Clause: java.lang.String name()> -> _SINK_
<org.postgresql.core.v3.CompositeParameterList: void convertFunctionOutParameters()> -> _SINK_
<com.datastax.driver.core.querybuilder.Select: com.datastax.driver.core.querybuilder.Select$Where where(com.datastax.driver.core.querybuilder.Clause)> -> _SINK_
<org.apache.ibatis.builder.xml.XMLStatementBuilder$OtherwiseHandler: void handleNode(org.apache.ibatis.parsing.XNode,java.util.List)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setAsciiStream(int,java.io.InputStream)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: void setFetchSize(int)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Object: int hashCode()> -> _SINK_
<org.apache.ibatis.mapping.BoundSql: void <init>(org.apache.ibatis.session.Configuration,java.lang.String,java.util.List,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl hasNoneOf(java.lang.Iterable)> -> _SINK_
<org.hibernate.criterion.CriteriaQuery: org.hibernate.type.Type getType(org.hibernate.Criteria,java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: java.lang.String getAllowedValue(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.Object executeInNonManagedTXLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: boolean getBoolean(java.lang.String)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNrc(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<org.postgresql.core.BaseConnection: org.postgresql.core.Logger getLogger()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.lang.Object getObject(java.lang.String,java.util.Map)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean deleteJobAndChildren(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String,java.lang.String)> -> _SINK_
<java.sql.Statement: int getMaxRows()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: java.lang.Object getArrayImpl(long,int,java.util.Map)> -> _SINK_
<org.postgresql.core.Parser: int parseDoubleQuotes(char[],int)> -> _SINK_
<org.apache.ibatis.type.TypeHandler: void setParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setNull(int,int,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: org.exolab.castor.jdo.engine.JDOFieldDescriptor checkField(org.exolab.castor.jdo.oql.ParseTreeNode)> -> _SINK_
<org.postgresql.core.v3.Portal: java.lang.String getPortalName()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: java.lang.String[] selectCalendars(java.sql.Connection)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mongodb.morphia.query.UpdateResults: void <init>(com.mongodb.WriteResult)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsSubqueriesInIns()> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateArray(java.lang.String,java.sql.Array)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxColumnsInTable()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setFetchSize(int)> -> _SINK_
<gov.nih.nci.security.authentication.helper.RDBMSHelper: boolean executeQuery(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateBytes(int,byte[])> -> _SINK_
<com.gmail.spraetz.plugin.Engine: void onEnable()> -> _SINK_
<org.hibernate.criterion.CriteriaQuery: java.lang.String generateSQLAlias()> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: org.hibernate.SQLQuery addEntity(java.lang.String,java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryResult: void setCount(java.lang.Integer)> -> _SINK_
<com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource: void <init>()> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQueryRootReturn: java.lang.String getReturnEntityName()> -> _SINK_
<org.hibernate.hql.ast.tree.JavaConstantNode: java.lang.String resolveToLiteralString(org.hibernate.type.Type)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion ltAll(java.lang.Object,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.utils.Key[] selectTriggerNamesForJob(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<com.fasterxml.jackson.databind.ser.std.SqlDateSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: java.util.List getFields()> -> _SINK_
<org.mmbase.cache.ReleaseStrategy: org.mmbase.cache.ReleaseStrategy$StrategyResult evaluate(org.mmbase.core.event.RelationEvent,org.mmbase.storage.search.SearchQuery,java.util.List)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void decoratePropertyMapping(java.lang.String,org.hibernate.persister.entity.PropertyMapping)> -> _SINK_
<org.springframework.orm.jpa.JpaTransactionManager: void doCleanupAfterCompletion(java.lang.Object)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setObject(int,java.lang.Object,int)> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper: com.amazonaws.services.dynamodbv2.datamodeling.QueryResultPage queryPage(java.lang.Class,com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.SortOrder addSortOrder(org.mmbase.storage.search.StepField,int)> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: int bindNamedParameters(java.sql.PreparedStatement,java.util.Map,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool: void <init>(javax.sql.ConnectionPoolDataSource,com.mchange.v2.c3p0.impl.DbAuth,int,int,int,int,int,boolean,int,int,int,boolean,boolean,com.mchange.v2.c3p0.stmt.GooGooStatementCache,com.mchange.v2.c3p0.ConnectionTester,java.lang.String,com.mchange.v2.resourcepool.ResourcePoolFactory)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: void setEscapeProcessing(boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$32: void execute(java.sql.Connection)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Builder: void <init>()> -> _SINK_
<org.springframework.jdbc.datasource.DriverManagerDataSource: java.sql.Connection getConnection()> -> _SINK_
<org.eclipse.acceleo.engine.internal.evaluation.AcceleoEvaluationVisitor: void delegateCacheResult(org.eclipse.acceleo.model.mtl.Query,java.util.List,java.lang.Object)> -> _SINK_
<org.postgresql.fastpath.FastpathArg: void <init>(java.lang.String)> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: java.lang.Object getResultColumnOrRow(java.lang.Object[],org.hibernate.transform.ResultTransformer,java.sql.ResultSet,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.bridge.Query cloneWithoutFields()> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void popFromClause()> -> _SINK_
<org.springframework.jdbc.object.SqlCall: void compileInternal()> -> _SINK_
<org.hibernate.cfg.ResultSetMappingBinder: org.hibernate.engine.query.sql.NativeSQLQueryRootReturn bindReturn(org.dom4j.Element,org.hibernate.cfg.Mappings,int)> -> _SINK_
<org.hibernate.hql.ast.ParameterTranslationsImpl$ParameterInfo: int[] getSqlLocations()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Time getTime(int,java.util.Calendar)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: void setOptionalObject(java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setMaxFieldSize(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.QuoteFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void cancel()> -> _SINK_
<org.exolab.castor.xml.descriptors.SQLTimeClassDescriptor: void <init>()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void removeOwnerForProtectionElement(java.lang.String,java.lang.String[])> -> _SINK_
<org.exolab.castor.util.SqlBindParser: int getParamNumber()> -> _SINK_
<com.mysql.jdbc.MysqlParameterMetadata: boolean isSigned(int)> -> _SINK_
<test.gov.nih.nci.security.threadsafe.CSMAPIMySQLDeadLockTest: void addOwners()> -> _SINK_
<java.sql.ResultSetMetaData: boolean isCaseSensitive(int)> -> _SINK_
<org.springframework.orm.jdo.PersistenceManagerFactoryUtils: org.springframework.jdbc.support.SQLExceptionTranslator newJdbcExceptionTranslator(java.lang.Object)> -> _SINK_
<org.apache.axis.types.URI: void setQueryString(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: int getResultSetConcurrency()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: boolean update(java.io.Serializable,java.lang.Object[],java.lang.Object[],java.lang.Object,boolean[],int,java.lang.Object,java.lang.Object,java.lang.String,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.hibernate.engine.QueryParameters: org.hibernate.type.Type[] getFilteredPositionalParameterTypes()> -> _SINK_
<org.mmbase.module.database.MultiPool: void <init>(org.mmbase.module.database.DatabaseSupport,java.lang.String,java.lang.String,java.lang.String,int)> -> _SINK_
<org.apache.ibatis.datasource.pooled.PooledDataSource: java.io.PrintWriter getLogWriter()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void setDistinct(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.utils.Key selectTriggerToAcquire(java.sql.Connection,long,long)> -> _SINK_
<java.sql.ResultSet: int getConcurrency()> -> _SINK_
<org.springframework.jdbc.datasource.DelegatingDataSource: javax.sql.DataSource getTargetDataSource()> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void <init>(org.hibernate.hql.ast.QueryTranslatorImpl,org.hibernate.engine.SessionFactoryImplementor,org.hibernate.hql.ast.HqlParser,java.util.Map,java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.ui.sample.SearchSampleAction: org.apache.struts.action.ActionForward search(org.apache.struts.action.ActionMapping,org.apache.struts.action.ActionForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DataSourceWrapper: void setUserName(java.lang.String)> -> _SINK_
<com.fasterxml.jackson.databind.deser.std.DateDeserializers$SqlDateDeserializer: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateAsciiStream(int,java.io.InputStream)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl$3: void handleError(java.sql.SQLException)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setDimSearchRefinementConfigs(com.endeca.navigation.DimSearchRefinementConfigList)> -> _SINK_
<java.sql.ResultSet: void updateFloat(int,float)> -> _SINK_
<org.hibernate.engine.SessionImplementor: org.hibernate.ScrollableResults scroll(org.hibernate.engine.query.sql.NativeSQLQuerySpecification,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.hibernate.hql.classic.WhereParser: void doToken(java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Blob: void <init>(org.postgresql.core.BaseConnection,long)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Timestamp getTimestamp(int)> -> _SINK_
<org.postgresql.core.BaseStatement: boolean executeWithFlags(int)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator: org.springframework.dao.DataAccessException translate(java.lang.String,java.lang.String,java.sql.SQLException)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion propertyGtAll(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<gov.nih.nci.cananolab.service.protocol.helper.ProtocolServiceHelper: gov.nih.nci.cananolab.domain.common.File findFileByProtocolId(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: void <clinit>()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.sql.Timestamp getTimestamp(java.lang.String)> -> _SINK_
<org.hibernate.impl.CriteriaImpl: java.lang.Object uniqueResult()> -> _SINK_
<org.apache.axis.transport.http.AxisServlet: boolean processQuery(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.io.PrintWriter)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: void detach()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Asset: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.core.v3.CompositeParameterList: void setIntParameter(int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateDouble(int,double)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: java.lang.String getTableName()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: float getFloat(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: int getServerMinorVersion()> -> _SINK_
<org.springframework.jdbc.core.support.JdbcDaoSupport: org.springframework.jdbc.core.JdbcTemplate createJdbcTemplate(javax.sql.DataSource)> -> _SINK_
<com.mongodb.InUseConnectionBean: void <init>(com.mongodb.DBPort,long)> -> _SINK_
<org.springframework.orm.ibatis.support.AbstractLobTypeHandler: void setParameterInternal(java.sql.PreparedStatement,int,java.lang.Object,java.lang.String,org.springframework.jdbc.support.lob.LobCreator)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CollaborationGroup: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mongodb.QueryOpBuilder: com.mongodb.DBObject get()> -> _SINK_
<org.postgresql.jdbc2.ArrayAssistant: java.lang.Object buildElement(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void close(java.lang.Throwable)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getNumericFunctions()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$1ProxyCallableStatement: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsLimitedOuterJoins()> -> _SINK_
<java.sql.Connection: int getHoldability()> -> _SINK_
<org.hibernate.tool.hbm2ddl.DatabaseMetadata: void <clinit>()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.utils.TriggerStatus selectTriggerStatus(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode: org.apache.ibatis.session.Configuration access$300(org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode)> -> _SINK_
<org.hibernate.QueryParameterException: void <init>(java.lang.String,java.lang.Throwable)> -> _SINK_
<org.postgresql.core.PGStream: void Send(byte[],int)> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringDecoder: boolean addParam(java.util.Map,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String,int)> -> _SINK_
<org.exolab.castor.jdo.keygen.MaxKeyGenerator: void supportsSqlType(int)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$66: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLQuery: void close()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.lang.Object rawConnectionOperation(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])> -> _SINK_
<com.sforce.soap.enterprise.QueryMore_element: void write(javax.xml.namespace.QName,com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: java.lang.String getKeyspace()> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: java.util.Map access$200(org.hibernate.loader.custom.sql.SQLQueryReturnProcessor)> -> _SINK_
<com.mysql.jdbc.NonRegisteringDriver: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.WrapperConnectionPoolDataSource: int getLoginTimeout()> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate: java.lang.Object read(java.lang.Class,oracle.toplink.queryframework.Call)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: antlr.collections.AST generateNamedParameter(antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<java.sql.ResultSet: void updateBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<org.hibernate.lob.SerializableBlob: void truncate(long)> -> _SINK_
<entities.descriptor.ViewDescriptor: void <init>(java.lang.Object,java.lang.String)> -> _SINK_
<com.mysql.jdbc.log.Log4JLogger: void logDebug(java.lang.Object,java.lang.Throwable)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.WrapperBase: void <init>()> -> _SINK_
<com.mysql.jdbc.util.ServerController: void forceStop()> -> _SINK_
<com.sforce.soap.enterprise.Query_element: void load(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.type.Type: int[] sqlTypes(org.hibernate.engine.Mapping)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Where: com.datastax.driver.core.querybuilder.Delete$Where and(com.datastax.driver.core.querybuilder.Clause)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: void setExtends(org.exolab.castor.jdo.engine.SQLEngine)> -> _SINK_
<com.mysql.jdbc.Connection: void setInGlobalTx(boolean)> -> _SINK_
<com.mysql.jdbc.util.ServerController: java.util.Properties getServerProps()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setDouble(java.lang.String,double)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.RoleNameResolver: void <init>(gov.nih.nci.cagrid.metadata.dataservice.DomainModel)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.Util: boolean nanoTimeAvailable()> -> _SINK_
<com.endeca.navigation.analytics.ExprBinary: java.lang.String toWire()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: int getInt(int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setClob(int,java.io.Reader)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsTableCorrelationNames()> -> _SINK_
<org.springframework.web.servlet.view.jasperreports.AbstractJasperReportsView: void setJdbcDataSource(javax.sql.DataSource)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: int getResultSetType()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateRef(int,java.sql.Ref)> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression: java.util.Map getExclusiveStartKey()> -> _SINK_
<org.postgresql.core.v2.V2Query: java.lang.String toString(org.postgresql.core.ParameterList)> -> _SINK_
<java.sql.CallableStatement: long getLong(java.lang.String)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setRetrieveGeneratedKeys(boolean)> -> _SINK_
<java.sql.ResultSet: java.lang.String getCursorName()> -> _SINK_
<org.springframework.jdbc.support.lob.DefaultLobHandler$DefaultLobCreator: void setClobAsString(java.sql.PreparedStatement,int,java.lang.String)> -> _SINK_
<com.amazonaws.services.cloudfront.model.ForwardedValues: java.lang.String toString()> -> _SINK_
<com.mysql.jdbc.SingleByteCharsetConverter: com.mysql.jdbc.SingleByteCharsetConverter getInstance(java.lang.String,com.mysql.jdbc.Connection)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: boolean execute()> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getDimSearchNavRecordStructureExpr()> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.CompareFieldsConstraint createConstraint(org.mmbase.storage.search.StepField,int,org.mmbase.storage.search.StepField)> -> _SINK_
<org.hibernate.dialect.Sybase11Dialect: org.hibernate.sql.JoinFragment createOuterJoinFragment()> -> _SINK_
<com.mysql.jdbc.StringUtils: java.lang.String toAsciiString(byte[])> -> _SINK_
<org.apache.ibatis.executor.statement.SimpleStatementHandler: int update(java.sql.Statement)> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateSchedulerState(java.sql.Connection,java.lang.String,long)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateRef(int,java.sql.Ref)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: boolean checkPermissionForUserAndGroup(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.sql.ResultSet: boolean wasNull()> -> _SINK_
<org.hibernate.persister.collection.BasicCollectionPersister: int doUpdateRows(java.io.Serializable,org.hibernate.collection.PersistentCollection,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.exolab.castor.jdo.engine.SimpleQueryExecutor$SimpleQueryResults: java.lang.Object next()> -> _SINK_
<org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource: javax.sql.DataSource resolveSpecifiedDataSource(java.lang.Object)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsMixedCaseQuotedIdentifiers()> -> _SINK_
<org.eclipse.acceleo.engine.service.AcceleoEvaluationTask: org.eclipse.acceleo.common.interpreter.EvaluationResult call()> -> _SINK_
<org.hibernate.persister.collection.CollectionPersister: java.lang.Object readIndex(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Using ttl(int)> -> _SINK_
<org.hibernate.exception.SQLExceptionConverterFactory: org.hibernate.exception.SQLExceptionConverter buildSQLExceptionConverter(org.hibernate.dialect.Dialect,java.util.Properties)> -> _SINK_
<org.mmbase.storage.search.implementation.database.HSqlSqlHandler: void <clinit>()> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: java.lang.String toString()> -> _SINK_
<javax.servlet.jsp.jstl.sql.ResultSupport: javax.servlet.jsp.jstl.sql.Result toResult(java.sql.ResultSet,int)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Timestamp getTimestamp(java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.NamedQueryLoader: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void <init>(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object sizeEq(int)> -> _SINK_
<org.postgresql.Driver$ConnectThread: void run()> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: int getInParameterCount()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$StringConnectionProperty: void <init>(com.mysql.jdbc.ConnectionProperties,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.RangeFilterList getAggrERecNavRangeFilters()> -> _SINK_
<org.postgresql.geometric.PGline: java.lang.Object clone()> -> _SINK_
<com.mysql.jdbc.Connection: void clearWarnings()> -> _SINK_
<org.postgresql.core.v3.ConnectionFactoryImpl$UnsupportedProtocolException: void <init>(org.postgresql.core.v3.ConnectionFactoryImpl$1)> -> _SINK_
<org.hibernate.cfg.Settings: java.util.Map getQuerySubstitutions()> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceUtils: java.sql.Connection doGetConnection(javax.sql.DataSource)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: java.lang.StringBuffer appendSortOrderDirection(java.lang.StringBuffer,org.mmbase.storage.search.SortOrder)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: com.datastax.driver.core.Statement enableTracing()> -> _SINK_
<org.mmbase.module.database.Naming$NamingMultiConnection: void close()> -> _SINK_
<com.endeca.navigation.analytics.ExprConstant: java.lang.String toString()> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLTransientConnectionException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: void convertToJdbcProcedureList(boolean,java.lang.String,java.sql.ResultSet,boolean,java.lang.String,java.util.Map,int)> -> _SINK_
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int[])> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setDate(java.lang.String,java.sql.Date,java.util.Calendar)> -> _SINK_
<org.postgresql.ds.common.PGObjectFactory: java.lang.Object loadBaseDataSource(org.postgresql.ds.common.BaseDataSource,javax.naming.Reference)> -> _SINK_
<com.mysql.jdbc.Statement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Date getDate(java.lang.String,java.util.Calendar)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void clearParameters()> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy: long[] access$000(com.mysql.jdbc.LoadBalancingConnectionProxy)> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$ListPrependAssignment: void <init>(java.lang.String,java.lang.Object)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.util.ByteConverter: void float4(byte[],int,float)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<org.apache.ibatis.jdbc.SqlRunner: void setParameters(java.sql.PreparedStatement,java.lang.Object[])> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: gov.nih.nci.security.authorization.domainobjects.ProtectionGroup getProtectionGroup(java.lang.String)> -> _SINK_
<com.mysql.jdbc.TimeUtil: java.sql.Timestamp changeTimezone(com.mysql.jdbc.Connection,java.util.Calendar,java.util.Calendar,java.sql.Timestamp,java.util.TimeZone,java.util.TimeZone,boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean triggerExists(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void addUserRoleToProtectionGroup(java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<org.apache.ibatis.datasource.unpooled.UnpooledDataSource$DriverProxy: boolean acceptsURL(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setBytes(int,byte[])> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxSchemaNameLength()> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateObject(int,java.lang.Object)> -> _SINK_
<org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String getNewSql()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Asset: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mongodb.morphia.query.MorphiaIterator: long getDriverTime()> -> _SINK_
<com.mysql.jdbc.Connection: boolean isReadInfoMsgEnabled()> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlmonthname(java.util.List)> -> _SINK_
<com.sforce.soap.enterprise.Query_element: void write(javax.xml.namespace.QName,com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.exolab.castor.mapping.xml.types.SqlDirtyType: java.lang.Object readResolve()> -> _SINK_
<org.springframework.orm.hibernate3.support.HibernateDaoSupport: org.hibernate.Session getSession(boolean)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void storeBinding(com.mysql.jdbc.Buffer,com.mysql.jdbc.ServerPreparedStatement$BindValue,com.mysql.jdbc.MysqlIO)> -> _SINK_
<org.mmbase.storage.search.implementation.ModifiableQuery: int getMaxNumber()> -> _SINK_
<org.mmbase.cache.QueryResultCache: void notify(org.mmbase.core.event.NodeEvent)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4DatabaseMetaData: java.sql.ResultSet getSchemas(java.lang.String,java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.CriteriaContainerImpl: org.mongodb.morphia.query.CriteriaContainer collect(org.mongodb.morphia.query.CriteriaJoin,org.mongodb.morphia.query.Criteria[])> -> _SINK_
<com.amazonaws.services.datapipeline.model.Query: com.amazonaws.services.datapipeline.model.Query withSelectors(com.amazonaws.services.datapipeline.model.Selector[])> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateSQLXML(java.lang.String,java.sql.SQLXML)> -> _SINK_
<org.hibernate.type.ManyToOneType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,boolean[],org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSessionFactory: org.apache.ibatis.session.SqlSession openSession(org.apache.ibatis.session.ExecutorType)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlPooledConnection: java.sql.Connection getConnection(boolean,boolean)> -> _SINK_
<org.springframework.jdbc.core.SqlTypeValue: void setTypeValue(java.sql.PreparedStatement,int,int,java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.admin.impl.AdminServiceJDBCImpl$SitePreferenceMapper: java.lang.Object mapRow(java.sql.ResultSet,int)> -> _SINK_
<com.mysql.jdbc.Security: byte[] createKeyFromOldPassword(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.BinaryArithmeticOperatorNode: org.hibernate.type.Type getDataType()> -> _SINK_
<org.postgresql.util.Base64: java.lang.String encodeBytes(byte[],int)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNtk(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: int getQueryTimeout()> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion notIn(java.lang.Object,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimeLocaleConverter: void <init>(boolean)> -> _SINK_
<org.apache.ibatis.type.DateTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: com.mongodb.WriteResult delete(java.lang.String,java.lang.Class,java.lang.Object)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.net.URL getURL(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool: int getNumIdleConnections()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateRef(int,java.sql.Ref)> -> _SINK_
<org.hibernate.engine.QueryParameters: java.lang.String getFilteredSQL()> -> _SINK_
<com.sforce.soap.enterprise.QueryMoreResponse_element: void writeFields(com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: org.mongodb.morphia.query.FieldEnd field(java.lang.String,boolean)> -> _SINK_
<com.endeca.navigation.DisabledRefinementsConfig: void parseBaseDimId(java.lang.String)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void addNamedParameter(java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$88: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Log__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.jdbc.Expectation: void verifyOutcome(int,java.sql.PreparedStatement,int)> -> _SINK_
<org.mongodb.morphia.query.CriteriaContainerImpl: org.mongodb.morphia.query.FieldEnd criteria(java.lang.String,boolean)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void clearBatch()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: boolean isCurrency(int)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$3: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void serverLongData(int,com.mysql.jdbc.ServerPreparedStatement$BindValue)> -> _SINK_
<gov.nih.nci.system.dao.orm.ORMDAOImpl: gov.nih.nci.system.dao.Response query(gov.nih.nci.system.dao.Request)> -> _SINK_
<com.mongodb.QueryOpBuilder: void addToQueryObject(com.mongodb.DBObject,java.lang.String,com.mongodb.DBObject,boolean)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.Statement createStatement(int,int)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: java.sql.Struct createStruct(java.lang.String,java.lang.Object[])> -> _SINK_
<org.eclipse.acceleo.engine.generation.IAcceleoEngine2: java.lang.Object evaluate(org.eclipse.acceleo.model.mtl.Query,java.util.List,org.eclipse.acceleo.engine.generation.strategy.IAcceleoGenerationStrategy,org.eclipse.emf.common.util.Monitor)> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceTransactionManager: javax.sql.DataSource getDataSource()> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: java.util.Map access$400(org.hibernate.loader.custom.sql.SQLQueryReturnProcessor)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavRecordStructureExpr(java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String[] getSQLUpdateByRowIdStrings()> -> _SINK_
<org.hibernate.hql.ast.tree.HqlSqlWalkerNode: org.hibernate.hql.ast.util.SessionFactoryHelper getSessionFactoryHelper()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNao(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<gov.nih.nci.system.webservice.WSQueryImpl: java.util.List alterResultSet(java.util.List)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.Constraint setInverse(org.mmbase.storage.search.Constraint,boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Job_Application__c: void setR00N30000002hX16EAE__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool: void checkinPooledConnection(javax.sql.PooledConnection)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void delete(org.mmbase.module.core.MMObjectNode,org.mmbase.module.core.MMObjectBuilder,java.util.List,java.lang.String)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate: java.lang.Object read(java.lang.Class,oracle.toplink.queryframework.Call,boolean)> -> _SINK_
<org.castor.jdo.conf.DatabaseDescriptor$2: void <init>(org.castor.jdo.conf.DatabaseDescriptor)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setDate(java.lang.String,java.sql.Date,java.util.Calendar)> -> _SINK_
<org.hibernate.engine.query.QueryPlanCache: org.hibernate.engine.query.NativeSQLQueryPlan getNativeSQLQueryPlan(org.hibernate.engine.query.sql.NativeSQLQuerySpecification)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: int executeUpdate(java.lang.String)> -> _SINK_
<org.hibernate.cache.StandardQueryCache: boolean isUpToDate(java.util.Set,java.lang.Long)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getNoAccessToProcedureBodies()> -> _SINK_
<org.hibernate.type.ClobType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.filter.FilterDataSource: void setLogWriter(java.io.PrintWriter)> -> _SINK_
<org.postgresql.util.ByteConverter: short int2(byte[],int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Blob makeBlob(long)> -> _SINK_
<org.hibernate.hql.ast.tree.SqlNode: java.lang.String getOriginalText()> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser$ParserContext: org.hibernate.persister.collection.SQLLoadableCollection getCollectionPersisterByAlias(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.SampleServiceHelper: gov.nih.nci.cananolab.domain.common.PointOfContact findPrimaryPointOfContactBySampleId(java.lang.String)> -> _SINK_
<java.sql.CallableStatement: java.lang.String getString(int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: long getIdleFor()> -> _SINK_
<org.mongodb.morphia.query.FilterOperator: java.lang.String val()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void registerOutParameter(java.lang.String,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Expense__c: void setProject_Logs__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateTime(int,java.sql.Time)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean doesMaxRowSizeIncludeBlobs()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setRef(int,java.sql.Ref)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.DatabaseMetaData getMetaData()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Options: com.datastax.driver.core.Statement enableTracing()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.Integer)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int selectNumCalendars(java.sql.Connection)> -> _SINK_
<org.exolab.castor.jdo.engine.GlobalDatabaseImpl: void setTxMap(org.exolab.castor.jdo.engine.TxDatabaseMap)> -> _SINK_
<org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore: void executeSQL(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.sql.Time getTime(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setNoAccessToProcedureBodies(boolean)> -> _SINK_
<org.hibernate.type.NullableType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<org.hibernate.dialect.function.ClassicCountFunction: void <init>()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void addType(java.lang.String,java.lang.String)> -> _SINK_
<entities.dao.AbstractDAO: java.util.List query()> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$5: java.lang.Object doInSqlMapClient(com.ibatis.sqlmap.client.SqlMapExecutor)> -> _SINK_
<java.sql.Driver: boolean acceptsURL(java.lang.String)> -> _SINK_
<org.postgresql.core.types.PGFloat: void <init>(java.lang.Float)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setLoadBalanceStrategy(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$1: void handleError(java.sql.SQLException)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueBetweenConstraint createDatetimeConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.Field,long,long)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: int getProtocolVersion()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.lang.String getString(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: void setAutoCommit(boolean)> -> _SINK_
<org.mmbase.bridge.util.Queries: org.mmbase.bridge.NodeQuery addRelationFields(org.mmbase.bridge.NodeQuery,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setAllowNanAndInf(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: int getResultSetHoldability()> -> _SINK_
<org.mmbase.module.database.MultiPoolHandler: void <init>(org.mmbase.module.database.DatabaseSupport,int,int)> -> _SINK_
<java.sql.ResultSet: java.sql.Ref getRef(int)> -> _SINK_
<com.mysql.jdbc.SQLError: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setPrepStmtCacheSqlLimit(int)> -> _SINK_
<com.mysql.jdbc.Util: java.lang.String newCrypt(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.QueryException: void setQueryString(java.lang.String)> -> _SINK_
<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.ResultSet getResultSet(com.mysql.jdbc.Statement,long,int,int,int,boolean,java.lang.String,boolean,boolean,com.mysql.jdbc.Field[])> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNmpt(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.Connection getConnection()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean usesLocalFilePerTable()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setDate(java.lang.String,java.sql.Date)> -> _SINK_
<java.sql.ResultSet: void updateTime(java.lang.String,java.sql.Time)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.Object forceVersionIncrement(java.io.Serializable,java.lang.Object,org.hibernate.engine.SessionImplementor)> -> _SINK_
<java.sql.CallableStatement: short getShort(int)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void orderExprs(antlr.collections.AST)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateByte(java.lang.String,byte)> -> _SINK_
<org.hibernate.hql.classic.ClassicQueryTranslatorFactory: org.hibernate.hql.QueryTranslator createQueryTranslator(java.lang.String,java.lang.String,java.util.Map,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.postgresql.core.Encoding: boolean hasAsciiNumbers()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateBytes(java.lang.String,byte[])> -> _SINK_
<org.apache.ibatis.executor.loader.ResultLoader: org.apache.ibatis.executor.Executor newExecutor()> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: javax.naming.Reference createReference()> -> _SINK_
<org.hibernate.engine.query.NamedParameterDescriptor: int[] getSourceLocations()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateTimestamp(int,java.sql.Timestamp)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean nullsAreSortedLow()> -> _SINK_
<org.hibernate.engine.QueryParameters: java.io.Serializable getOptionalId()> -> _SINK_
<com.mysql.jdbc.CallableStatement: float getFloat(int)> -> _SINK_
<com.datastax.driver.core.QueryTrace: long getStartedAt()> -> _SINK_
<com.sforce.soap.enterprise.sobject.NewsFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.Statement: int executeUpdate(java.lang.String,int[])> -> _SINK_
<org.exolab.castor.xml.descriptors.SQLTimestampClassDescriptor$1: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsCatalogsInIndexDefinitions()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void registerOutParameter(int,int,int)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory: java.lang.String getBinaryFileBasePath()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: int getResultSetType()> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.transform.QueryRequestMarshaller: com.amazonaws.Request marshall(com.amazonaws.services.dynamodbv2.model.QueryRequest)> -> _SINK_
<org.postgresql.largeobject.LargeObjectManager: org.postgresql.largeobject.LargeObject open(int,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsSchemasInIndexDefinitions()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$IterateBlock: void forEach(java.lang.Object)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setFetchDirection(int)> -> _SINK_
<com.mysql.jdbc.log.Log: void logTrace(java.lang.Object)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: java.util.List getSortOrders()> -> _SINK_
<com.mysql.jdbc.Clob: java.io.Writer setCharacterStream(long)> -> _SINK_
<org.apache.ibatis.mapping.MappedStatement: org.apache.ibatis.mapping.BoundSql getBoundSql(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateLong(int,long)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: org.hibernate.engine.query.sql.NativeSQLQueryReturn[] getQueryReturns()> -> _SINK_
<org.hibernate.mapping.Collection: void setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Date getDate(int)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: void <clinit>()> -> _SINK_
<net.sf.ehcache.constructs.web.filter.SimplePageCachingFilter: java.lang.String calculateKey(javax.servlet.http.HttpServletRequest)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setTreatUtilDateAsTimestamp(boolean)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Clob: java.io.OutputStream setAsciiStream(long)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet$CursorResultHandler: void handleWarning(java.sql.SQLWarning)> -> _SINK_
<org.exolab.castor.jdo.engine.LocalDatabaseImpl: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setByte(java.lang.String,byte)> -> _SINK_
<org.hibernate.type.TimestampType: java.lang.Object deepCopyNotNull(java.lang.Object)> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getProcedures(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: boolean isReadOnly()> -> _SINK_
<com.datastax.driver.core.ControlConnection: com.datastax.driver.core.Connection reconnectInternal()> -> _SINK_
<org.apache.ibatis.mapping.Environment: javax.sql.DataSource getDataSource()> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.amazonaws.auth.QueryStringSigner: void addSessionCredentials(com.amazonaws.Request,com.amazonaws.auth.AWSSessionCredentials)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: boolean checkPermissionForGroup(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean getBoolean(int)> -> _SINK_
<com.mysql.jdbc.CallableStatement: boolean execute()> -> _SINK_
<com.sforce.soap.enterprise.sobject.RestExplorerConfig__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.Clob: void streamClosed(com.mysql.jdbc.WatchableOutputStream)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser: java.util.Map getNamedParameters()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: int getInt(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateShort(java.lang.String,short)> -> _SINK_
<com.datastax.driver.core.querybuilder.Clause: void <init>(java.lang.String,com.datastax.driver.core.querybuilder.Clause$1)> -> _SINK_
<com.endeca.navigation.ENEQueryResults: void <init>()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setContractContactRoles(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.criterion.Projections: org.hibernate.criterion.Projection sqlProjection(java.lang.String,java.lang.String[],org.hibernate.type.Type[])> -> _SINK_
<org.postgresql.util.StreamWrapper: void <init>(byte[],int,int)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.lang.String getFieldDefinition(org.mmbase.core.CoreField)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: int setOneBatchedParameterSet(java.sql.PreparedStatement,int,java.lang.Object)> -> _SINK_
<org.hibernate.hql.ast.exec.AbstractStatementExecutor: java.lang.String generateIdSubselect(org.hibernate.persister.entity.Queryable)> -> _SINK_
<org.springframework.jdbc.object.RdbmsOperation: void setSql(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: boolean first()> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils$1: java.lang.Object initialValue()> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void out(java.lang.String)> -> _SINK_
<com.endeca.navigation.analytics.AnalyticsQuery: java.lang.Object get(int)> -> _SINK_
<org.apache.ibatis.migration.commands.DownCommand: void deleteChange(org.apache.ibatis.migration.Change)> -> _SINK_
<org.hibernate.mapping.Column: java.lang.String getSqlType(org.hibernate.dialect.Dialect,org.hibernate.engine.Mapping)> -> _SINK_
<org.mmbase.bridge.util.xml.query.FieldDefinition: void <init>()> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSessionFactory: org.apache.ibatis.session.SqlSession openSession(boolean)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageLookup: void <clinit>()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: boolean first()> -> _SINK_
<org.apache.ibatis.executor.BatchExecutor: java.util.List doFlushStatements()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.JobDetail selectJobDetail(java.sql.Connection,java.lang.String,java.lang.String,org.quartz.spi.ClassLoadHelper)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: boolean isBeforeFirst()> -> _SINK_
<org.postgresql.util.PGJDBCMain: void main(java.lang.String[])> -> _SINK_
<com.datastax.driver.core.exceptions.QueryTimeoutException: com.datastax.driver.core.ConsistencyLevel getConsistencyLevel()> -> _SINK_
<org.mmbase.bridge.implementation.BasicNode: org.mmbase.bridge.StringList getAliases()> -> _SINK_
<org.eclipse.ocl.ecore.OCL: org.eclipse.ocl.ecore.OCL$Query createQuery(org.eclipse.ocl.expressions.OCLExpression)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsCoreSQLGrammar()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean allProceduresAreCallable()> -> _SINK_
<java.net.URI: java.lang.String getQuery()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getPinGlobalTxToPhysicalConnection()> -> _SINK_
<org.mongodb.morphia.query.CriteriaContainerImpl: void <init>(org.mongodb.morphia.query.QueryImpl,org.mongodb.morphia.query.CriteriaJoin)> -> _SINK_
<java.sql.CallableStatement: void registerOutParameter(int,int,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Blob getBlob(int)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.lang.Object getObject(java.lang.String,java.util.Map)> -> _SINK_
<com.datastax.driver.core.exceptions.AlreadyExistsException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.criterion.ExistsSubqueryExpression: void <init>(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.mmbase.module.core.MMBase: org.mmbase.storage.search.SearchQueryHandler getSearchQueryHandler()> -> _SINK_
<org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter: org.springframework.orm.jpa.vendor.Database getDatabase()> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: void setAutoCommit(boolean)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationService: java.util.List query(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void sqlToken(antlr.collections.AST)> -> _SINK_
<org.postgresql.core.ParameterList: java.lang.String toString(int)> -> _SINK_
<org.springframework.jdbc.core.namedparam.ParsedSql: void <init>(java.lang.String)> -> _SINK_
<org.hibernate.persister.collection.CollectionPropertyMapping: void <init>(org.hibernate.persister.collection.QueryableCollection)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateFloat(java.lang.String,float)> -> _SINK_
<com.mysql.jdbc.MysqlIO: long getLastPacketSentTimeMs()> -> _SINK_
<org.hibernate.type.CustomType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.util.BaseBugReport: java.sql.Connection getConnection()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: boolean execute(java.lang.String,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: byte[] getBytes(int)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: java.sql.Time toTimeBin(java.util.TimeZone,byte[])> -> _SINK_
<com.mysql.jdbc.Statement: boolean execute(java.lang.String,java.lang.String[])> -> _SINK_
<org.postgresql.core.v2.ProtocolConnectionImpl: void close()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void <init>(java.lang.String,java.util.Map,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void refreshRow(com.mysql.jdbc.PreparedStatement,java.lang.Object[])> -> _SINK_
<javax.persistence.EntityManager: javax.persistence.Query createNamedQuery(java.lang.String)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection: boolean access$000(org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateByte(int,byte)> -> _SINK_
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[])> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: void addAssociation(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.SQLWarning getWarnings()> -> _SINK_
<org.hibernate.loader.custom.ColumnCollectionAliases: void <init>(java.util.Map,org.hibernate.persister.collection.SQLLoadableCollection)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateNClob(java.lang.String,java.sql.NClob)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: float getFloat(int)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: java.lang.String[] getReturnAliases()> -> _SINK_
<org.hibernate.impl.CollectionFilterImpl: java.util.Iterator iterate()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$1ProxyPreparedStatement: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ParameterMetaData: boolean isSigned(int)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String getSQLDeleteString()> -> _SINK_
<com.mysql.jdbc.log.CommonsLogger: void logDebug(java.lang.Object,java.lang.Throwable)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.io.InputStream getUnicodeStream(java.lang.String)> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: java.lang.Object createPrimitiveResultObject(java.sql.ResultSet,org.apache.ibatis.mapping.ResultMap)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateClob(int,java.sql.Clob)> -> _SINK_
<entities.dao.AbstractDAO: java.util.List query(java.lang.String,java.lang.Object[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: void <clinit>()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void beforeFirst()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.net.URL getURL(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.net.URL getURL(int)> -> _SINK_
<org.apache.ibatis.session.SqlSession: java.util.List selectList(java.lang.String,java.lang.Object,org.apache.ibatis.session.RowBounds)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setShort(int,short)> -> _SINK_
<org.postgresql.geometric.PGpoint: int hashCode()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: byte getByte(int)> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean isBeforeFirst()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setMaxReconnects(int)> -> _SINK_
<com.datastax.driver.core.QueryTrace: java.util.Map getParameters()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Clob getClob(java.lang.String)> -> _SINK_
<org.hibernate.criterion.CriteriaQuery: java.lang.String getEntityName(org.hibernate.Criteria)> -> _SINK_
<org.hibernate.cfg.HbmBinder: void bindCollection(org.dom4j.Element,org.hibernate.mapping.Collection,java.lang.String,java.lang.String,org.hibernate.cfg.Mappings,java.util.Map)> -> _SINK_
<com.mysql.jdbc.DocsConnectionPropsHelper: void main(java.lang.String[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: org.postgresql.core.Encoding getEncoding()> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: void addRow(byte[][])> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: int executeUpdate(java.lang.String,int)> -> _SINK_
<org.postgresql.core.types.PGInteger: org.postgresql.core.types.PGType castToServerType(java.lang.Integer,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: byte getByte(int)> -> _SINK_
<org.hibernate.engine.QueryParameters: void traceParameters(org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<com.amazonaws.services.cloudfront.model.ForwardedValues: java.lang.Boolean isQueryString()> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryResult: com.amazonaws.services.dynamodb.model.QueryResult withItems(java.util.Map[])> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsUnionAll()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object near(double,double,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: int getResultSetType()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: java.util.List findNanomaterialEntitiesBy(java.lang.String,gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.lang.Object getObject(java.lang.String,java.util.Map)> -> _SINK_
<org.springframework.orm.jdo.JdoTransactionManager: java.lang.Object doSuspend(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.Connection: long getIdleFor()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setAsciiStream(int,java.io.InputStream,long)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.PreparedStatement prepareStatement(java.lang.String)> -> _SINK_
<org.springframework.orm.jdo.JdoTransactionManager: void doBegin(java.lang.Object,org.springframework.transaction.TransactionDefinition)> -> _SINK_
<org.hibernate.persister.collection.SQLLoadableCollection: java.lang.String[] getCollectionPropertyColumnAliases(java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.SDK4QueryProcessor: void initializeCqlToHqlTranslator()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsConvert(int,int)> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: void setPortalDescribed(boolean)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setTime(int,java.sql.Time,java.util.Calendar)> -> _SINK_
<org.exolab.castor.jdo.JDOManager: void loadConfiguration(org.castor.jdo.conf.JdoConf,org.xml.sax.EntityResolver,java.lang.ClassLoader,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean nullsAreSortedAtStart()> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.sql.Savepoint setSavepoint(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.SqlASTFactory: void initializeSqlNode(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void clearBatch()> -> _SINK_
<org.hibernate.hql.antlr.HqlBaseLexer: antlr.Token nextToken()> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils$FCall: java.lang.Object[] access$100(com.datastax.driver.core.querybuilder.Utils$FCall)> -> _SINK_
<org.postgresql.util.ByteConverter: float float4(byte[],int)> -> _SINK_
<org.mmbase.storage.implementation.database.InformixStorageManager: void releaseActiveConnection()> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimestampLocaleConverter: java.lang.Object parse(java.lang.Object,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.GlobalDatabaseImpl: java.sql.Connection getJdbcConnection()> -> _SINK_
<org.springframework.jdbc.core.RowMapperResultSetExtractor: java.lang.Object extractData(java.sql.ResultSet)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$36: void execute(java.sql.Connection)> -> _SINK_
<com.datastax.driver.core.Cluster$Builder: com.datastax.driver.core.Configuration getConfiguration()> -> _SINK_
<java.sql.CallableStatement: java.lang.Object getObject(java.lang.String,java.util.Map)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: java.util.Map filter(java.util.Map)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contract: void setActivityHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23ConnectionPoolDataSource: javax.sql.PooledConnection getPooledConnection()> -> _SINK_
<java.sql.Clob: long position(java.lang.String,long)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setCursorName(java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: org.mmbase.storage.search.Constraint getTypeConstraint(org.w3c.dom.Element,org.mmbase.bridge.util.xml.query.QueryDefinition)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$3: void handleResultRows(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)> -> _SINK_
<org.eclipse.ocl.ecore.OCL$Query: org.eclipse.ocl.EvaluationEnvironment getEvaluationEnvironment()> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator: void initType(java.lang.String)> -> _SINK_
<org.mmbase.servlet.BridgeServlet$QueryParts: void setFileName(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.JndiRefForwardingDataSource: java.io.PrintWriter getLogWriter()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setShort(int,short)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Ref getRef(java.lang.String)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion eq(java.lang.Object,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setDx(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void addBatch()> -> _SINK_
<org.hibernate.sql.ForUpdateFragment: org.hibernate.sql.ForUpdateFragment addTableAlias(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: boolean rowDeleted()> -> _SINK_
<java.sql.CallableStatement: void setFloat(java.lang.String,float)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.lang.String getUserName()> -> _SINK_
<org.hibernate.hql.ast.util.SessionFactoryHelper: boolean hasPhysicalDiscriminatorColumn(org.hibernate.persister.entity.Queryable)> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.ERecSearchList getNavERecSearches()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Milestone__Feed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.io.Reader getNCharacterStream(java.lang.String)> -> _SINK_
<com.endeca.navigation.analytics.CoalesceList: void validateSyntax()> -> _SINK_
<org.hibernate.impl.SessionImpl: java.util.Iterator iterateFilter(java.lang.Object,java.lang.String,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: void processGeneratedProperties(java.io.Serializable,java.lang.Object,java.lang.Object[],org.hibernate.engine.SessionImplementor,java.lang.String,boolean[])> -> _SINK_
<org.springframework.jdbc.support.CustomSQLErrorCodesTranslation: java.lang.String[] getErrorCodes()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: long getLogStartTime()> -> _SINK_
<org.postgresql.geometric.PGpoint: void setLocation(java.awt.Point)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: boolean execute(java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: float getFloat(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)> -> _SINK_
<org.hibernate.dialect.Dialect$1: void <init>(java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.LogicalOperator: gov.nih.nci.cagrid.cqlquery.LogicalOperator fromValue(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.net.URL getURL(int)> -> _SINK_
<com.mysql.jdbc.StringUtils: boolean startsWithIgnoreCaseAndNonAlphaNumeric(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getAllowMultiQueries()> -> _SINK_
<org.hibernate.dialect.HSQLDialect: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.sql.PreparedStatement getStatement()> -> _SINK_
<org.postgresql.core.PGStream: void flush()> -> _SINK_
<com.sforce.soap.enterprise.fault.MalformedSearchFault: void <init>()> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimestampLocaleConverter: void <init>(java.lang.Object,java.util.Locale,boolean)> -> _SINK_
<com.mysql.jdbc.Connection: boolean shouldFallBack()> -> _SINK_
<com.endeca.navigation.VersionMismatchException: void <init>()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.DomainType: gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.TypeAttribute[] getTypeAttribute()> -> _SINK_
<org.postgresql.core.types.PGNumber: void <init>(java.lang.Number)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: byte[] getBytes(java.lang.String)> -> _SINK_
<org.hibernate.type.DoubleType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mysql.jdbc.StringUtils: int indexOfIgnoreCaseRespectQuotes(int,java.lang.String,java.lang.String,char,boolean)> -> _SINK_
<org.apache.ibatis.type.ByteArrayTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<entities.descriptor.PropertyDescriptorWrapper: void <init>(java.lang.Class,java.beans.PropertyDescriptor)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setParameter(java.lang.String,java.lang.Object,org.hibernate.type.Type)> -> _SINK_
<com.mysql.jdbc.CursorRowProvider: void notSupported()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: double getDouble(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.ProtocolConnectionImpl: boolean getStandardConformingStrings()> -> _SINK_
<org.mmbase.util.DBQuery: void <init>(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.util.LiteralProcessor: void lookupConstant(org.hibernate.hql.ast.tree.DotNode)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: long queryForLong(java.lang.String,java.lang.Object[],int[])> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: void setTypeMap(java.util.Map)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: boolean wasNull()> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: java.lang.Object insert(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: boolean isNonQualifiedPropertyRef(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsGroupByBeyondSelect()> -> _SINK_
<com.mysql.jdbc.RowData: void setOwner(com.mysql.jdbc.ResultSet)> -> _SINK_
<org.springframework.orm.hibernate3.LocalSessionFactoryBean: void executeSchemaStatement(java.sql.Statement,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: boolean isTracing()> -> _SINK_
<java.sql.DatabaseMetaData: boolean insertsAreDetected(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Array getArray(java.lang.String)> -> _SINK_
<org.mmbase.bridge.implementation.BasicCloud: boolean setSecurityConstraint(org.mmbase.bridge.Query)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.SQLWarning getWarnings()> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder size(java.lang.Object)> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.CQLResultsCreationUtil: gov.nih.nci.cagrid.cqlresultset.CQLQueryResults createCountResults(long,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean byteArrayToBoolean(int)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.net.URL getURL(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: org.mmbase.module.core.MMObjectNode getNode(org.mmbase.module.core.MMObjectBuilder,int)> -> _SINK_
<org.mongodb.morphia.query.MorphiaIterator: java.lang.String getKind()> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int)> -> _SINK_
<com.endeca.navigation.ENEQuery: long getNavERecsOffset()> -> _SINK_
<org.mmbase.cache.RelatedNodesCache: void clear()> -> _SINK_
<java.sql.SQLWarning: void <init>()> -> _SINK_
<org.hibernate.loader.criteria.CriteriaLoader: java.util.List getResultList(java.util.List,org.hibernate.transform.ResultTransformer)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: com.datastax.driver.core.ConsistencyLevel getConsistencyLevel()> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapExecutor: java.util.List queryForList(java.lang.String,java.lang.Object)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: int queryForInt(java.lang.String,java.lang.Object[],int[])> -> _SINK_
<org.springframework.jdbc.object.SqlUpdate: int update(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: int executeUpdate(java.lang.String,int[])> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlrtrim(java.util.List)> -> _SINK_
<org.hibernate.dialect.Oracle9Dialect: java.sql.ResultSet getResultSet(java.sql.CallableStatement)> -> _SINK_
<org.quartz.impl.jdbcjobstore.AttributeRestoringConnectionInvocationHandler: void close()> -> _SINK_
<com.mysql.jdbc.Connection: void <clinit>()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: long getLong(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.SQLWarning getWarnings()> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$SelectionOrAlias: com.datastax.driver.core.querybuilder.Select$SelectionOrAlias ttl(java.lang.String)> -> _SINK_
<org.apache.ibatis.jdbc.SqlRunner: void run(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.lang.String getCursorName()> -> _SINK_
<org.hibernate.hql.ast.tree.BinaryLogicOperatorNode: void mutateRowValueConstructorSyntaxesIfNecessary(org.hibernate.type.Type,org.hibernate.type.Type)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: org.hibernate.SQLQuery addEntity(java.lang.String,java.lang.Class)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: void <init>(java.lang.String)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: java.util.Map queryForMap(java.lang.String,java.lang.Object,java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getVersionColumns(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.servlet.BridgeServlet$QueryParts: java.lang.String getSessionName()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean usesLocalFiles()> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: void setTransactionIsolation(int)> -> _SINK_
<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<org.hibernate.sql.CaseFragment: org.hibernate.sql.CaseFragment setReturnColumnName(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ConnectionManager: void openConnection()> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode$FilteredDynamicContext: void <init>(org.apache.ibatis.session.Configuration,org.apache.ibatis.builder.xml.dynamic.DynamicContext,java.lang.String,int)> -> _SINK_
<org.hibernate.impl.AbstractSessionImpl: org.hibernate.Query getNamedSQLQuery(java.lang.String)> -> _SINK_
<com.amazonaws.auth.AbstractAWSSigner: java.lang.String getCanonicalizedQueryString(com.amazonaws.Request)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: org.hibernate.hql.ast.exec.StatementExecutor buildAppropriateStatementExecutor(org.hibernate.hql.ast.HqlSqlWalker)> -> _SINK_
<org.mmbase.module.database.MultiStatement: java.sql.Statement checkAfterException()> -> _SINK_
<com.mysql.jdbc.Connection: void unregisterStatement(com.mysql.jdbc.Statement)> -> _SINK_
<org.hibernate.engine.NamedQueryDefinition: void <init>(java.lang.String,boolean,java.lang.String,java.lang.Integer,java.lang.Integer,org.hibernate.FlushMode,org.hibernate.CacheMode,boolean,java.lang.String,java.util.Map)> -> _SINK_
<org.hibernate.mapping.Index: java.lang.String buildSqlCreateIndexString(org.hibernate.dialect.Dialect,java.lang.String,org.hibernate.mapping.Table,java.util.Iterator,boolean,java.lang.String,java.lang.String)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$MainFrame: void execute_actionPerformed(java.awt.event.ActionEvent)> -> _SINK_
<org.apache.ibatis.executor.SimpleExecutor: java.util.List doQuery(org.apache.ibatis.mapping.MappedStatement,java.lang.Object,org.apache.ibatis.session.RowBounds,org.apache.ibatis.session.ResultHandler)> -> _SINK_
<com.endeca.navigation.ENEQuery: void <init>()> -> _SINK_
<org.hibernate.type.StringType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateLong(java.lang.String,long)> -> _SINK_
<java.sql.ResultSet: boolean previous()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void compile(java.util.Map,boolean)> -> _SINK_
<org.hibernate.stat.QueryStatistics: void executed(long,long)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateBytes(java.lang.String,byte[])> -> _SINK_
<org.hibernate.hql.ast.tree.BetweenOperatorNode: void check(org.hibernate.hql.ast.tree.Node,org.hibernate.hql.ast.tree.Node,org.hibernate.hql.ast.tree.Node)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int insertTrigger(java.sql.Connection,org.quartz.Trigger,java.lang.String,org.quartz.JobDetail)> -> _SINK_
<org.apache.ibatis.mapping.BoundSql: java.lang.Object getAdditionalParameter(java.lang.String)> -> _SINK_
<org.postgresql.geometric.PGpolygon: void <init>()> -> _SINK_
<org.postgresql.PGConnection: org.postgresql.largeobject.LargeObjectManager getLargeObjectAPI()> -> _SINK_
<com.mysql.jdbc.Buffer: java.lang.String dump(int)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlpower(java.util.List)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: int getTriggerState(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.CharacterizationQueryBean: java.lang.String getDatumValue()> -> _SINK_
<org.postgresql.core.TypeInfo: java.util.Iterator getPGTypeNamesWithSQLTypes()> -> _SINK_
<org.postgresql.core.v3.CompositeParameterList: void <init>(org.postgresql.core.v3.SimpleParameterList[],int[])> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.Object readIndex(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter: void <init>(java.lang.Object,java.util.Locale,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Array getArray(java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addFeatures(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.Node,java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<javax.sql.PooledConnection: void close()> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.UpdateTagSupport: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.criterion.SubqueryExpression$1: java.lang.String generateRootAlias(java.lang.String)> -> _SINK_
<org.postgresql.core.UTF8Encoding: void checkMinimal(int,int)> -> _SINK_
<org.postgresql.core.v3.V3Query: org.postgresql.core.v3.SimpleQuery[] getSubqueries()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.SQLError: java.sql.SQLWarning convertShowWarningsToSQLWarnings(com.mysql.jdbc.Connection,int,boolean)> -> _SINK_
<org.springframework.jdbc.support.lob.DefaultLobHandler$DefaultLobCreator: void setBlobAsBinaryStream(java.sql.PreparedStatement,int,java.io.InputStream,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateBlob(int,java.sql.Blob)> -> _SINK_
<org.hibernate.impl.QueryImpl: java.util.Iterator iterate()> -> _SINK_
<java.sql.Connection: java.sql.CallableStatement prepareCall(java.lang.String,int,int,int)> -> _SINK_
<org.mmbase.security.Authorization$QueryCheck: org.mmbase.storage.search.Constraint getConstraint()> -> _SINK_
<org.mmbase.module.core.ClusterBuilder: void addField(org.mmbase.storage.search.implementation.BasicSearchQuery,org.mmbase.storage.search.implementation.BasicStep,java.lang.String,java.util.Map)> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.QueryResultPage: void <init>()> -> _SINK_
<gov.nih.nci.system.query.cql.CQLAssociation: java.lang.String getSourceRoleName()> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: void checkFromPart(org.exolab.castor.jdo.oql.ParseTreeNode)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeDrc(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setPinGlobalTxToPhysicalConnection(boolean)> -> _SINK_
<org.postgresql.xa.PGXAConnection: void start(javax.transaction.xa.Xid,int)> -> _SINK_
<org.postgresql.core.BaseStatement: boolean executeWithFlags(java.lang.String,int)> -> _SINK_
<org.postgresql.util.GT: java.lang.String translate(java.lang.String,java.lang.Object[])> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlchar(java.util.List)> -> _SINK_
<org.exolab.castor.persist.SQLRelationLoader: void deleteRelation(java.sql.Connection,org.exolab.castor.persist.spi.Identity,org.exolab.castor.persist.spi.Identity)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection$ConnectionHandler: void setProxy(java.sql.Connection)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.util.Map getTypeMap()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Where: java.util.List access$100(com.datastax.driver.core.querybuilder.Delete$Where)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: java.lang.String getKeyspace()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: void setInGlobalTx(boolean)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.CQL2ParameterizedHQL: void processAssociation(gov.nih.nci.cagrid.cqlquery.Association,java.lang.StringBuilder,java.util.List,java.util.Stack,gov.nih.nci.cagrid.cqlquery.Object,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.math.BigDecimal getBigDecimal(java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void dumpPacketRingBuffer()> -> _SINK_
<java.sql.CallableStatement: float getFloat(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Clause$InClause: boolean containsBindMarker()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: boolean getBoolean(java.lang.String)> -> _SINK_
<org.hibernate.hql.CollectionSubqueryFactory: java.lang.String createCollectionSubquery(org.hibernate.engine.JoinSequence,java.util.Map,java.lang.String[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Ref getRef(int)> -> _SINK_
<org.hibernate.hql.classic.SelectParser: void token(java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.exolab.castor.persist.FieldMolder: void <init>(org.exolab.castor.persist.DatingService,org.exolab.castor.persist.ClassMolder,org.exolab.castor.mapping.xml.FieldMapping,java.lang.String,java.lang.String[],int[],org.exolab.castor.mapping.TypeConvertor[],org.exolab.castor.mapping.TypeConvertor[],java.lang.String[],java.lang.String[],int[],org.exolab.castor.mapping.TypeConvertor[],org.exolab.castor.mapping.TypeConvertor[],java.lang.String[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void registerOutParameter(java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.Connection: void createInitialHistogram(long[],long,long)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4SQLXML: void <init>(org.postgresql.core.BaseConnection,java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object queryForObject(java.lang.String,org.springframework.jdbc.core.RowMapper)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsTransactions()> -> _SINK_
<java.sql.ResultSet: void updateTimestamp(java.lang.String,java.sql.Timestamp)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void bindLiteral(int,java.lang.String,int)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.Step getStep(java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.Queryable: java.lang.String[] getIdentifierColumnNames()> -> _SINK_
<org.springframework.jdbc.core.support.AbstractInterruptibleBatchPreparedStatementSetter: boolean setValuesIfAvailable(java.sql.PreparedStatement,int)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSessionFactory: org.apache.ibatis.session.SqlSession openSession(org.apache.ibatis.session.TransactionIsolationLevel)> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsResult: java.lang.String getMarker()> -> _SINK_
<org.hibernate.util.GetGeneratedKeysHelper: java.sql.ResultSet getGeneratedKey(java.sql.PreparedStatement)> -> _SINK_
<org.exolab.castor.jdo.drivers.PostgreSQLQueryExpression: java.lang.String getStatement(boolean)> -> _SINK_
<gov.nih.nci.system.query.hql.InsertHQLQuery: void <init>(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: java.lang.String getTableName(org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: boolean wasNull()> -> _SINK_
<org.postgresql.core.Parser: int parseDollarQuotes(char[],int)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: com.mongodb.DBObject getFieldsObject()> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$5: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<org.hibernate.dialect.DerbyDialect: void <init>()> -> _SINK_
<org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy: void afterPropertiesSet()> -> _SINK_
<com.datastax.driver.core.RegularStatement: java.lang.String getQueryString()> -> _SINK_
<org.hibernate.impl.SessionImpl: org.hibernate.ScrollableResults scrollCustomQuery(org.hibernate.loader.custom.CustomQuery,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.mongodb.morphia.query.CriteriaContainerImpl: void <init>(org.mongodb.morphia.query.CriteriaJoin)> -> _SINK_
<org.postgresql.core.v2.ProtocolConnectionImpl: void addWarning(java.sql.SQLWarning)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.Trigger[] selectTriggersForRecoveringJobs(java.sql.Connection)> -> _SINK_
<com.sforce.soap.enterprise.QueryMore_element: void writeFields(com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.datastax.driver.core.KeyspaceMetadata: java.lang.String asCQLQuery()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsExpressionsInOrderBy()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setArray(int,java.sql.Array)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.apache.ibatis.executor.BatchExecutorException: java.lang.String getFailingSqlStatement()> -> _SINK_
<com.datastax.driver.core.ControlConnection: void refreshNodeInfo(com.datastax.driver.core.Host)> -> _SINK_
<org.hibernate.connection.C3P0ConnectionProvider: void configure(java.util.Properties)> -> _SINK_
<org.postgresql.geometric.PGlseg: int hashCode()> -> _SINK_
<gov.nih.nci.cagrid.data.QueryProcessingException: void <init>(java.lang.String,java.lang.Exception)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: void setMaxFieldSize(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean othersInsertsAreVisible(int)> -> _SINK_
<org.hibernate.loader.Loader: java.lang.String prependComment(java.lang.String,org.hibernate.engine.QueryParameters)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setDefaultFetchSize(int)> -> _SINK_
<com.mysql.jdbc.RowData: void moveRowRelative(int)> -> _SINK_
<gov.nih.nci.system.query.cql.CQLLogicalOperator: java.lang.String toString()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void detach()> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: java.util.List selectList(java.lang.String,java.lang.Object)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl$1: void handleError(java.sql.SQLException)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$IterateBlock: void <init>(com.mysql.jdbc.DatabaseMetaData,com.mysql.jdbc.DatabaseMetaData$IteratorWithCleanup)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.SQLWarning getWarnings()> -> _SINK_
<org.hibernate.persister.collection.BasicCollectionPersister: java.lang.String generateDeleteString()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeArs(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.postgresql.core.v3.Portal: void setCleanupRef(java.lang.ref.PhantomReference)> -> _SINK_
<com.mchange.v2.c3p0.mbean.C3P0PooledDataSource: java.lang.String getPreferredTestQuery()> -> _SINK_
<org.hibernate.hql.ast.exec.AbstractStatementExecutor$1: void <init>(org.hibernate.hql.ast.exec.AbstractStatementExecutor,org.hibernate.persister.entity.Queryable)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.io.InputStream getBinaryStream(int)> -> _SINK_
<org.mongodb.morphia.Datastore: java.lang.Object findAndModify(org.mongodb.morphia.query.Query,org.mongodb.morphia.query.UpdateOperations)> -> _SINK_
<org.hibernate.impl.SessionImpl: java.sql.Connection close()> -> _SINK_
<org.postgresql.core.v3.CopyOutImpl: byte[] readFromCopy()> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy: com.mysql.jdbc.Connection createConnectionForHost(java.lang.String)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: java.util.Set getProtectionGroups(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: java.lang.String getBaseTableName(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: byte getByte(int)> -> _SINK_
<com.datastax.driver.core.exceptions.TruncateException: void <init>(java.lang.String,java.lang.Throwable)> -> _SINK_
<java.sql.DatabaseMetaData: boolean deletesAreDetected(int)> -> _SINK_
<org.springframework.jdbc.object.SqlFunction: int run(java.lang.Object[])> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Group: boolean equals(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setDouble(int,double)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Blob getBlob(int)> -> _SINK_
<gov.nih.nci.cananolab.service.admin.impl.OwnershipTransferServiceImpl: gov.nih.nci.cananolab.domain.particle.Sample findFullyLoadedSampleById(java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setDimSearchOpts(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Where: java.nio.ByteBuffer getRoutingKey()> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.SampleQueryBean: void <init>()> -> _SINK_
<gov.nih.nci.cananolab.service.security.SecurityService: java.util.List getAllUserAccessibleData()> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.SetDataSourceTagSupport: void release()> -> _SINK_
<com.mysql.jdbc.MysqlDataTruncation: void <init>(java.lang.String,int,boolean,boolean,int,int)> -> _SINK_
<org.apache.axis.types.URI: void initialize(org.apache.axis.types.URI)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: boolean isFirst()> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: void setIndexName(java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setDate(java.lang.String,java.sql.Date,java.util.Calendar)> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.validation.CQLQueryResultsValidator: void validateCQLResultSet(gov.nih.nci.cagrid.cqlresultset.CQLQueryResults)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String filterFragment(java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: int dehydrate(java.io.Serializable,java.lang.Object[],boolean[],boolean[][],int,java.sql.PreparedStatement,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlquarter(java.util.List)> -> _SINK_
<org.hibernate.criterion.ProjectionList: java.lang.String toSqlString(org.hibernate.Criteria,int,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$2: void <init>(org.springframework.orm.ibatis.SqlMapClientTemplate,java.lang.String,java.lang.Object,java.lang.Object)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiStatement: void addBatch(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void methodCall(antlr.collections.AST)> -> _SINK_
<org.postgresql.gss.GssAction: void <init>(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.postgresql.core.Logger,boolean)> -> _SINK_
<org.springframework.jdbc.core.SqlParameter: void <init>(java.lang.String,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: void access$800(com.mysql.jdbc.DatabaseMetaData,java.lang.String,java.sql.ResultSet,boolean,java.lang.String,java.util.Map,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: float toFloat(java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.SDK4QueryProcessor: java.lang.String getRemoteApplicationUrl()> -> _SINK_
<org.hibernate.persister.collection.QueryableCollection: java.lang.String getManyToManyOrderByString(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setTime(java.lang.String,java.sql.Time,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.Clob: void truncate(long)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void pathAsIdent(antlr.collections.AST)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void unlock(java.lang.Object)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addEqualConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.loader.Loader: org.hibernate.ScrollableResults scroll(org.hibernate.engine.QueryParameters,org.hibernate.type.Type[],org.hibernate.hql.HolderInstantiator,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: void verifyParameters()> -> _SINK_
<org.quartz.impl.jdbcjobstore.PointbaseDelegate: int updateTrigger(java.sql.Connection,org.quartz.Trigger,java.lang.String,org.quartz.JobDetail)> -> _SINK_
<java.sql.PreparedStatement: int executeUpdate()> -> _SINK_
<org.hibernate.persister.collection.CollectionPropertyMapping: java.lang.String[] toColumns(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementType: java.lang.String renderIdentifierSelect(int,int)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: org.mongodb.morphia.query.QueryImpl cloneQuery()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: int getFetchSize()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position__c: void setR00N30000002hX1BEAU__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setDate(int,java.util.Date)> -> _SINK_
<org.mmbase.util.xml.applicationdata.FullBackupDataWriter: void writeNodes(java.lang.String,org.mmbase.module.core.MMBase,org.mmbase.util.logging.Logger)> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcDaoImpl: void initMappingSqlQueries()> -> _SINK_
<org.hibernate.persister.collection.QueryableCollection: java.lang.String[] getElementColumnNames(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getStringFunctions()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setRef(int,java.sql.Ref)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setLocatorFetchBufferSize(java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.PaginatedQueryList: void <init>(com.amazonaws.services.dynamodb.datamodeling.DynamoDBMapper,java.lang.Class,com.amazonaws.services.dynamodb.AmazonDynamoDB,com.amazonaws.services.dynamodb.model.QueryRequest,com.amazonaws.services.dynamodb.model.QueryResult)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void checkParameterIndexBounds(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Job_Application__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: int writeElement(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateObject(java.lang.String,java.lang.Object)> -> _SINK_
<org.exolab.castor.jdo.drivers.InformixQueryExpression: void addSelectClause(java.lang.StringBuffer)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete: void <init>(java.lang.String,java.lang.String,java.util.List)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$ConnectionProperty: java.lang.String[] getAllowableValues()> -> _SINK_
<com.mysql.jdbc.StringUtils: byte[] stripEnclosure(byte[],java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.util.transformers.Sql: java.io.Writer transform(java.io.Reader,java.io.Writer)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsTransactionIsolationLevel(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: int executeUpdate(java.lang.String)> -> _SINK_
<com.mysql.jdbc.StringUtils: java.lang.String toAsciiString(byte[],int,int)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: com.mongodb.WriteResult delete(org.mongodb.morphia.query.Query)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setBlob(int,java.sql.Blob)> -> _SINK_
<com.enhype.db.PostgresDB: java.sql.ResultSet execSelect(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getElideSetAutoCommits()> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: void showHqlAst(antlr.collections.AST)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.io.Reader getNCharacterStream(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: boolean getBoolean(int)> -> _SINK_
<org.hibernate.persister.entity.SingleTableEntityPersister: java.lang.String discriminatorFilterFragment(java.lang.String)> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl: void initDao()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSetMetaData: void <init>(org.postgresql.core.BaseConnection,org.postgresql.core.Field[])> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.TrimSqlNode: java.util.List access$100(org.apache.ibatis.builder.xml.dynamic.TrimSqlNode)> -> _SINK_
<org.hibernate.jdbc.ConnectionManager: void closeConnection()> -> _SINK_
<org.castor.persist.AbstractTransactionContext: boolean markUpdate(org.exolab.castor.persist.ClassMolder,java.lang.Object,org.exolab.castor.persist.OID)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setAllowUrlInLocalInfile(boolean)> -> _SINK_
<org.postgresql.PGResultSetMetaData: java.lang.String getBaseColumnName(int)> -> _SINK_
<java.sql.Connection: java.lang.String nativeSQL(java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavRollupKey(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: byte[] getBytes(int)> -> _SINK_
<org.mmbase.storage.search.implementation.database.SqlHandler: int getSupportLevel(int,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.postgresql.core.v3.ProtocolConnectionImpl: void setServerVersion(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: java.lang.String[] getReturnAliases()> -> _SINK_
<org.postgresql.largeobject.BlobInputStream: void <init>(org.postgresql.largeobject.LargeObject,int)> -> _SINK_
<test.gov.nih.nci.logging.api.persistence.TestSQLInserts: void main(java.lang.String[])> -> _SINK_
<java.sql.ResultSet: java.sql.Clob getClob(java.lang.String)> -> _SINK_
<com.mysql.jdbc.log.CommonsLogger: void logInfo(java.lang.Object)> -> _SINK_
<org.hibernate.type.NullableType: int[] sqlTypes(org.hibernate.engine.Mapping)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Timestamp getTimestamp(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.ResultSet executeQuery()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: int getFetchDirection()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsSelectForUpdate()> -> _SINK_
<org.hibernate.engine.query.ParameterParser$Recognizer: void namedParameter(java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.Field: boolean isUnsigned()> -> _SINK_
<org.postgresql.geometric.PGpolygon: void <init>(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.QueryOptions_element: void load(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setLong(int,long)> -> _SINK_
<java.sql.PreparedStatement: void setTime(int,java.sql.Time)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: int joinType(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateFloat(java.lang.String,float)> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch$Options: com.datastax.driver.core.querybuilder.Batch$Options and(com.datastax.driver.core.querybuilder.Using)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: int executeUpdate()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<org.apache.ibatis.type.BaseTypeHandler: void setParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<com.mysql.jdbc.Statement: int[] executeBatch()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: float getFloat(int)> -> _SINK_
<org.postgresql.core.types.PGBigDecimal: org.postgresql.core.types.PGType castToServerType(java.math.BigDecimal,int)> -> _SINK_
<org.castor.jdo.conf.DatabaseDescriptor$1: java.lang.Object getValue(java.lang.Object)> -> _SINK_
<com.datastax.driver.core.PreparedStatement: java.lang.String getQueryString()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: com.mongodb.WriteResult tryVersionedUpdate(com.mongodb.DBCollection,java.lang.Object,com.mongodb.DBObject,java.lang.Object,com.mongodb.WriteConcern,com.mongodb.DB,org.mongodb.morphia.mapping.MappedClass)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean nullsAreSortedHigh()> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$17: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<org.springframework.jdbc.core.support.JdbcDaoSupport: void setDataSource(javax.sql.DataSource)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.CompositionServiceHelper: gov.nih.nci.cananolab.domain.particle.ChemicalAssociation findChemicalAssociationById(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Expense__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.geometric.PGbox: int lengthInBytes()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Job_Application__c: void setInterviews__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ResultSet: void buildIndexMapping()> -> _SINK_
<org.postgresql.util.PGtokenizer: java.lang.String remove(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getTableTypes()> -> _SINK_
<org.springframework.jdbc.object.SqlFunction: void <init>(javax.sql.DataSource,java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.data.enumeration.stubs.EnumerationQueryRequest: void setCqlQuery(gov.nih.nci.cagrid.data.enumeration.stubs.EnumerationQueryRequestCqlQuery)> -> _SINK_
<org.hibernate.sql.Update: org.hibernate.sql.Update addColumn(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.ibatis.executor.keygen.KeyGenerator: void processAfter(org.apache.ibatis.executor.Executor,org.apache.ibatis.mapping.MappedStatement,java.sql.Statement,java.lang.Object)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.impl.DataAvailabilityServiceJDBCImpl: java.util.Set findDataAvailabilityBySampleId(java.lang.String,gov.nih.nci.cananolab.service.security.SecurityService)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.EtxSqlHandler: java.lang.String toBuilderField(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.sql.CallableStatement prepareCall(java.lang.String,int,int)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientFactoryBean: org.springframework.jdbc.support.lob.LobHandler getConfigTimeLobHandler()> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.NestedCriteria2HQL: void solveScenario3(java.lang.StringBuffer,gov.nih.nci.system.query.nestedcriteria.NestedCriteria)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterUtils: java.lang.Object[] buildValueArray(org.springframework.jdbc.core.namedparam.ParsedSql,org.springframework.jdbc.core.namedparam.SqlParameterSource)> -> _SINK_
<com.mysql.jdbc.ResultSet: float getNativeFloat(int)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void initializeFromParseInfo()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void killTimer()> -> _SINK_
<org.postgresql.core.TypeInfo: int getScale(int,int)> -> _SINK_
<org.castor.jdo.conf.DatabaseChoice: void validate()> -> _SINK_
<org.springframework.jdbc.support.DatabaseMetaDataCallback: java.lang.Object processMetaData(java.sql.DatabaseMetaData)> -> _SINK_
<com.amazonaws.services.dynamodb.model.transform.QueryRequestMarshaller: void <init>()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.Junction getCompositionJunction(gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setTime(int,java.sql.Time,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.CursorRowProvider: java.lang.Object[] next()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setTimeInternal(int,java.sql.Time,java.util.Calendar,java.util.TimeZone,boolean)> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsRequest: java.lang.Integer getLimit()> -> _SINK_
<com.mysql.jdbc.StringUtils: java.lang.String consistentToString(java.math.BigDecimal)> -> _SINK_
<org.springframework.orm.hibernate3.SessionFactoryUtils: void applyTransactionTimeout(org.hibernate.Query,org.hibernate.SessionFactory)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationServiceFacade: java.util.List query(gov.nih.nci.system.query.hibernate.HQLCriteria)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$MainFrame: void loadHistory()> -> _SINK_
<com.sforce.soap.enterprise.sobject.QuoteFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateBoolean(java.lang.String,boolean)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: void close(boolean)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setCallableStatementCacheSize(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: java.lang.String getBaseTypeName()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection: void removeConnectionEventListener(javax.sql.ConnectionEventListener)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.PreparedStatement clientPrepare(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: antlr.collections.AST generatePositionalParameter(antlr.collections.AST)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DateParamTagSupport: void convertValue()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setObject(int,java.lang.Object,int)> -> _SINK_
<org.mmbase.storage.implementation.database.GenericDataSource: java.sql.Connection getDirectConnection()> -> _SINK_
<com.mchange.v2.c3p0.filter.FilterDataSource: java.io.PrintWriter getLogWriter()> -> _SINK_
<org.postgresql.Driver: java.lang.String database(java.util.Properties)> -> _SINK_
<org.springframework.jdbc.object.BatchSqlUpdate: java.util.LinkedList access$000(org.springframework.jdbc.object.BatchSqlUpdate)> -> _SINK_
<org.hibernate.engine.query.ParamLocationRecognizer$NamedParameterDescription: void <init>(boolean)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$37: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.mapping.Collection: java.lang.String getCustomSQLDeleteAll()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[])> -> _SINK_
<com.amazonaws.services.dynamodbv2.AmazonDynamoDBAsyncClient: java.util.concurrent.Future queryAsync(com.amazonaws.services.dynamodbv2.model.QueryRequest)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: java.sql.Connection getConnection()> -> _SINK_
<org.apache.ibatis.session.SqlSession: int delete(java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.loader.Loader: java.util.List getResultFromQueryCache(org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters,java.util.Set,org.hibernate.type.Type[],org.hibernate.cache.QueryCache,org.hibernate.cache.QueryKey)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode: void applyOpen(org.apache.ibatis.builder.xml.dynamic.DynamicContext)> -> _SINK_
<com.datastax.driver.core.querybuilder.Truncate: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.web.servlet.view.RedirectView: java.util.Map queryProperties(java.util.Map)> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: boolean isActive()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void <clinit>()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Statement: void <init>(org.postgresql.jdbc4.Jdbc4Connection,java.lang.String,boolean,int,int,int)> -> _SINK_
<org.hibernate.engine.QueryParameters: void <init>(org.hibernate.type.Type,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxIndexLength()> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<org.hibernate.dialect.MimerSQLDialect: void <init>()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Date getDate(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateInt(java.lang.String,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: int executeUpdate(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Statement: void checkForDml(java.lang.String,char)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: int executeUpdate(java.lang.String,int)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLCustomQuery$ParserContext: java.lang.String getCollectionSuffixByAlias(java.lang.String)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String[] getKeyColumnAliases(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.JDBCContext: java.sql.Connection connection()> -> _SINK_
<org.hibernate.dialect.Dialect: org.hibernate.exception.SQLExceptionConverter buildSQLExceptionConverter()> -> _SINK_
<gov.nih.nci.cananolab.service.curation.impl.CurationServiceJDBCImpl$1: java.lang.Object mapRow(java.sql.ResultSet,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean nullsAreSortedLow()> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: org.hibernate.engine.query.sql.NativeSQLQuerySpecification generateQuerySpecification(java.util.Map)> -> _SINK_
<org.castor.jdo.engine.SQLTypeInfos: java.lang.Object getValue(java.sql.ResultSet,int,int)> -> _SINK_
<org.springframework.jdbc.core.RowCountCallbackHandler: void processRow(java.sql.ResultSet)> -> _SINK_
<java.sql.PreparedStatement: void setURL(int,java.net.URL)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)> -> _SINK_
<org.springframework.orm.hibernate3.AbstractSessionFactoryBean: org.springframework.dao.DataAccessException convertHibernateAccessException(org.hibernate.HibernateException)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.io.InputStream getAsciiStream(java.lang.String)> -> _SINK_
<com.mysql.jdbc.util.ServerController: void stop(boolean)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setComment(java.lang.String)> -> _SINK_
<org.hibernate.loader.custom.CustomLoader: org.hibernate.ScrollableResults scroll(org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.hibernate.hql.ast.tree.LiteralNode: void setScalarColumnText(int)> -> _SINK_
<com.mysql.jdbc.ResultSet: double getDoubleInternal(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean rowUpdated()> -> _SINK_
<org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String[] getParameterNames()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: int getFetchSize()> -> _SINK_
<org.quartz.impl.jdbcjobstore.MSSQLDelegate: java.lang.Object getJobDetailFromBlob(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setFloat(int,float)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.sql.ResultSetMetaData createMetaData()> -> _SINK_
<com.mchange.v2.c3p0.DataSources: javax.sql.DataSource pooledDataSource(javax.sql.DataSource,int)> -> _SINK_
<org.exolab.castor.dtx.DTXQuery: void execute()> -> _SINK_
<org.postgresql.core.v3.ConnectionFactoryImpl: org.postgresql.core.PGStream enableSSL(org.postgresql.core.PGStream,boolean,java.util.Properties,org.postgresql.core.Logger)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String getSQLUpdateRowString()> -> _SINK_
<org.mmbase.storage.search.implementation.database.SqlHandler: java.lang.String getAllowedValue(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.TxDatabaseMap: boolean containsTx(javax.transaction.Transaction)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: byte getByte(int)> -> _SINK_
<org.exolab.castor.jdo.QueryResults: boolean hasMore()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSetMetaData: java.lang.Object unwrap(java.lang.Class)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void streamToBytes(com.mysql.jdbc.Buffer,java.io.InputStream,boolean,int,boolean)> -> _SINK_
<com.sforce.soap.enterprise.DescribeSObjectResult: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.exolab.castor.persist.LockEngine: org.exolab.castor.persist.OID load(org.castor.persist.TransactionContext,org.exolab.castor.persist.OID,org.castor.persist.ProposedEntity,org.exolab.castor.mapping.AccessMode,int,org.exolab.castor.persist.QueryResults)> -> _SINK_
<gov.nih.nci.cagrid.data.bdt.common.BDTDataServiceI: gov.nih.nci.cagrid.bdt.client.BulkDataHandlerClient bdtQuery(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<org.mmbase.bridge.Query: void setAlias(org.mmbase.storage.search.Step,java.lang.String)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: org.hibernate.persister.entity.PropertyMapping getPropertyMapping(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean getBooleanFromString(java.lang.String,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet$NullObject: void <init>(java.lang.String)> -> _SINK_
<org.hibernate.criterion.NaturalIdentifier: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setDate(int,java.sql.Date,java.util.Calendar)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: java.lang.Boolean isCount()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: java.sql.ParameterMetaData getParameterMetaData()> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: java.util.List getResultList(java.util.List,org.hibernate.transform.ResultTransformer)> -> _SINK_
<org.mmbase.module.database.Naming: void init()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setString(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.VisibleBufferedInputStream: int getIndex()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setDouble(int,double)> -> _SINK_
<com.mysql.jdbc.MysqlIO: java.lang.String getHost()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: java.lang.Object findAndModify(org.mongodb.morphia.query.Query,org.mongodb.morphia.query.UpdateOperations,boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch$Options: java.lang.String toString()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.util.Iterator iterate(org.hibernate.engine.QueryParameters,org.hibernate.event.EventSource)> -> _SINK_
<org.postgresql.geometric.PGpath: void setValue(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: void streamBytea(org.postgresql.core.PGStream,org.postgresql.util.StreamWrapper)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: int getHoldability()> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: javax.naming.Reference getReference()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.utils.Key[] selectMisfiredTriggersInState(java.sql.Connection,java.lang.String,long)> -> _SINK_
<org.exolab.castor.dtx.DTXEngine: org.exolab.castor.dtx.DTXQuery prepareQuery(java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: boolean locatorsUpdateCopy()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateBlob(java.lang.String,java.sql.Blob)> -> _SINK_
<org.hibernate.impl.IteratorImpl: void close()> -> _SINK_
<org.hibernate.cfg.HbmBinder: void bindNamedSQLQuery(org.dom4j.Element,java.lang.String,org.hibernate.cfg.Mappings)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: java.sql.Struct createStruct(java.lang.String,java.lang.Object[])> -> _SINK_
<org.postgresql.ssl.jdbc4.LibPQFactory: boolean verify(java.lang.String,javax.net.ssl.SSLSession)> -> _SINK_
<org.hibernate.dialect.Dialect: org.hibernate.sql.JoinFragment createOuterJoinFragment()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: java.lang.Object uniqueResult()> -> _SINK_
<com.mysql.jdbc.ResultSet: void setWrapperStatement(java.sql.Statement)> -> _SINK_
<gov.nih.nci.cananolab.service.security.SecurityService: boolean isPublic(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.incrementer.HsqlMaxValueIncrementer: long getNextKey()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$LongConnectionProperty: void <init>(com.mysql.jdbc.ConnectionProperties,java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.Field,java.lang.String)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate: java.util.List findByNamedQueryAndNamedParam(java.lang.String,java.lang.String[],java.lang.Object[])> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsTransactions()> -> _SINK_
<org.hibernate.hql.ast.tree.DotNode: void checkLhsIsNotCollection()> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: void postInstantiate()> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: void <init>(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.Connection: java.util.Map getTypeMap()> -> _SINK_
<org.postgresql.Driver: java.lang.String user(java.util.Properties)> -> _SINK_
<com.mysql.jdbc.Connection: void dumpTestcaseQuery(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: short getShort(java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateBoolean(int,boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$StatementProxyingSetManagedResultSet: void setProxyStatement(java.sql.Statement)> -> _SINK_
<org.mmbase.cache.QueryResultCache: void <init>(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsAlterTableWithAddColumn()> -> _SINK_
<org.hibernate.engine.ActionQueue: void afterTransactionCompletion(boolean)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setLong(java.lang.String,long)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: int executeUpdate(java.lang.String,java.lang.String[])> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Selection: com.datastax.driver.core.querybuilder.Delete$Selection listElt(java.lang.String,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTrigger(java.sql.Connection,org.quartz.Trigger,java.lang.String,org.quartz.JobDetail)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate$3: java.lang.Object doInPreparedStatement(java.sql.PreparedStatement)> -> _SINK_
<org.hibernate.sql.Update: org.hibernate.sql.Update setComment(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateString(int,java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode: void applyIndex(org.apache.ibatis.builder.xml.dynamic.DynamicContext,int)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: long toJavaSecs(long)> -> _SINK_
<com.mysql.jdbc.Connection: boolean versionMeetsMinimum(int,int,int)> -> _SINK_
<org.hibernate.criterion.CountProjection: java.lang.String toSqlString(org.hibernate.Criteria,int,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<java.sql.CallableStatement: java.math.BigDecimal getBigDecimal(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setAu(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.namedparam.ParsedSql: void setUnnamedParameterCount(int)> -> _SINK_
<org.hibernate.sql.InFragment: void <init>()> -> _SINK_
<com.mysql.jdbc.log.StandardLogger: void <init>(java.lang.String,boolean)> -> _SINK_
<org.postgresql.largeobject.LargeObjectManager: void delete(long)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSessionFactory: void <init>(org.apache.ibatis.session.Configuration)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setNumericObject(int,java.lang.Object,int,int)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: java.util.List getValues()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setTime(java.lang.String,java.sql.Time)> -> _SINK_
<org.hibernate.type.ComponentType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsPositionedUpdate()> -> _SINK_
<java.sql.Connection: java.sql.Savepoint setSavepoint(java.lang.String)> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.QueryImpl: int totalResultSize()> -> _SINK_
<com.mysql.jdbc.EscapeTokenizer: void <init>(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.RelationalDatabaseStorageManager: void <init>()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getNoDatetimeStringSync()> -> _SINK_
<org.postgresql.copy.CopyOperation: int getFieldCount()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setDate(java.lang.String,java.sql.Date)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: boolean haveMinimumCompatibleVersion(java.lang.String)> -> _SINK_
<com.endeca.navigation.Navigation: void setAnalyticsQueryError(java.lang.String)> -> _SINK_
<org.hibernate.impl.SessionImpl: org.hibernate.Query getNamedQuery(java.lang.String)> -> _SINK_
<org.hibernate.mapping.Collection: java.lang.String getCustomSQLInsert()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.math.BigDecimal getBigDecimal(int)> -> _SINK_
<java.sql.ResultSet: void updateLong(int,long)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: void commit()> -> _SINK_
<gov.nih.nci.logging.api.appender.jdbc.JDBCExecutor: void insert()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsSubqueriesInExists()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.lang.String getType(java.lang.String)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLCustomQuery$ParserContext: void <init>(org.hibernate.loader.custom.sql.SQLQueryReturnProcessor$ResultAliasContext)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementFactory: antlr.collections.AST createFromElement(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void logicalExpr(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Time getTime(java.lang.String,java.util.Calendar)> -> _SINK_
<org.mmbase.module.corebuilders.RelDef: boolean readCache()> -> _SINK_
<java.sql.CallableStatement: java.sql.Date getDate(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateTimestamp(int,java.sql.Timestamp)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: int update(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,org.springframework.jdbc.support.KeyHolder,java.lang.String[])> -> _SINK_
<org.hibernate.jdbc.Batcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)> -> _SINK_
<org.hibernate.type.NullableType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.endeca.navigation.ENEConnectionException: void <init>()> -> _SINK_
<org.postgresql.core.QueryExecutor: org.postgresql.core.ParameterList createFastpathParameters(int)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setObject(int,java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setDate(int,java.sql.Date)> -> _SINK_
<com.sforce.soap.enterprise.fault.InvalidQueryLocatorFault: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsANSI92FullSQL()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateObject(java.lang.String,java.lang.Object)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: void ensureIndex(java.lang.Class,java.lang.String,java.lang.String,boolean,boolean)> -> _SINK_
<org.postgresql.largeobject.LargeObject: void seek(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseServerPrepStmts(boolean)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: org.exolab.castor.persist.spi.Identity create(org.exolab.castor.jdo.Database,java.lang.Object,org.castor.persist.ProposedEntity,org.exolab.castor.persist.spi.Identity)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void calculateSlowQueryThreshold()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: boolean execute(java.lang.String,int[])> -> _SINK_
<org.springframework.jdbc.support.lob.DefaultLobHandler: java.lang.String getClobAsString(java.sql.ResultSet,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: int getResultSetHoldability()> -> _SINK_
<org.postgresql.core.BaseConnection: boolean getStandardConformingStrings()> -> _SINK_
<org.hibernate.hql.QuerySplitter: boolean isJavaIdentifier(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.JndiRefForwardingDataSource: void setLogWriter(java.io.PrintWriter)> -> _SINK_
<org.hibernate.jdbc.ConnectionManager: boolean isAutoCommit()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Asset: void setActivityHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.core.v3.CopyInImpl: void <init>()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.lang.String getAliasName(java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateClob(int,java.sql.Clob)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void createFromJoinElement(antlr.collections.AST,antlr.collections.AST,int,antlr.collections.AST,antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.DynamoDBQueryExpression: boolean isScanIndexForward()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void setBooleanValue(java.sql.PreparedStatement,int,java.lang.Object,org.mmbase.core.CoreField,org.mmbase.module.core.MMObjectNode)> -> _SINK_
<org.postgresql.largeobject.BlobInputStream: void reset()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: int getInsertedOID()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementCreate: int bindFields(org.castor.persist.ProposedEntity,java.sql.PreparedStatement,int)> -> _SINK_
<org.postgresql.core.v3.V3ParameterList: org.postgresql.core.v3.SimpleParameterList[] getSubparams()> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder$SelectSQL: void <init>(org.apache.ibatis.jdbc.SelectBuilder$1)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsMultipleResultSets()> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.DataServiceHandle: java.util.Iterator query(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: int getMaxRows()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: int getFetchSize()> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator: void setDataSource(javax.sql.DataSource)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl: org.exolab.castor.jdo.QueryResults execute(boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: boolean isCounterOp()> -> _SINK_
<org.exolab.castor.xml.handlers.SQLTimestampFieldHandler: java.lang.Class getFieldType()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: int executeUpdate(java.lang.String,int)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion propertyLeAll(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.mmbase.storage.search.implementation.database.SqlHandler: void appendConstraintToSql(java.lang.StringBuffer,org.mmbase.storage.search.Constraint,org.mmbase.storage.search.SearchQuery,boolean,boolean)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.sql.RowId getRowId(java.lang.String)> -> _SINK_
<com.ibatis.sqlmap.engine.type.BaseTypeHandler: void <init>()> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: void setStatementTypes(int[])> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: boolean hasUnresolvedTypes()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$BatchResultHandler: void handleError(java.sql.SQLException)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxColumnsInTable()> -> _SINK_
<org.postgresql.core.Field: int getOID()> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.Savepoint setSavepoint(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void assignment(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.math.BigDecimal getBigDecimal(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.JdbcOperations: java.lang.Object queryForObject(java.lang.String,org.springframework.jdbc.core.RowMapper)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$ConnectionProperty: void <init>(com.mysql.jdbc.ConnectionProperties,java.lang.String,java.lang.Object,java.lang.String[],int,int,java.lang.String,java.lang.String,java.lang.String,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2Feed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<au.com.bytecode.opencsv.ResultSetHelperService: java.lang.String handleTime(java.sql.Time)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNso(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setDouble(int,double)> -> _SINK_
<org.hibernate.engine.SessionImplementor: java.util.List list(org.hibernate.engine.query.sql.NativeSQLQuerySpecification,org.hibernate.engine.QueryParameters)> -> _SINK_
<entities.RepositoryAtomic: java.util.List query(java.lang.String)> -> _SINK_
<org.postgresql.xa.PGXAConnection: void rollback(javax.transaction.xa.Xid)> -> _SINK_
<org.postgresql.core.v2.FastpathParameterList: void writeV2FastpathValue(int,org.postgresql.core.PGStream)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.io.Reader getCharacterStream(java.lang.String)> -> _SINK_
<org.hibernate.criterion.Distinct: org.hibernate.type.Type[] getTypes(java.lang.String,org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator: java.lang.StringBuffer access$100(org.hibernate.hql.ast.SqlGenerator)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setMetadataCacheSize(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DB2v6Delegate: int selectNumJobs(java.sql.Connection)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryResult: void setConsumedCapacity(com.amazonaws.services.dynamodbv2.model.ConsumedCapacity)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: int executeUpdate(java.lang.String,int)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: java.util.Set getProtectionElementPrivilegeContextForGroup(java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.lang.Object getObject(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setBlob(int,java.sql.Blob)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.bridge.NodeList findRelatedNodeList(org.mmbase.bridge.Node,java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.ui.sample.DWRSampleManager: gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean addCharacterizationQuery(gov.nih.nci.cananolab.dto.particle.CharacterizationQueryBean)> -> _SINK_
<com.mysql.jdbc.Field: boolean isSingleBit()> -> _SINK_
<org.exolab.castor.util.SqlBindParser: void <clinit>()> -> _SINK_
<org.castor.jdo.conf.JdoConf: void setDatabase(org.castor.jdo.conf.Database[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean isFirst()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Ref getRef(int)> -> _SINK_
<org.hibernate.sql.SelectFragment: org.hibernate.sql.SelectFragment addColumn(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: org.hibernate.type.Type[] getReturnTypes(java.lang.String)> -> _SINK_
<org.mongodb.morphia.utils.Helper: com.mongodb.DBObject getSort(org.mongodb.morphia.query.Query)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementFactory: org.hibernate.hql.ast.tree.FromElement addFromElement()> -> _SINK_
<org.apache.ibatis.datasource.unpooled.UnpooledDataSource$DriverProxy: java.sql.DriverPropertyInfo[] getPropertyInfo(java.lang.String,java.util.Properties)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Where: void <init>(com.datastax.driver.core.querybuilder.Delete)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: java.sql.Array createArrayOf(java.lang.String,java.lang.Object[])> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.lang.Object getStringValue(java.sql.ResultSet,int,org.mmbase.core.CoreField,boolean)> -> _SINK_
<test.gov.nih.nci.security.threadsafe.CSMAPIMySQLDeadLockTest: void addGroupsToUser()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Idea: void setVotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection: void removeConnectionEventListener(javax.sql.ConnectionEventListener)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: boolean isClosed()> -> _SINK_
<com.mysql.jdbc.Connection: boolean serverSupportsConvertFn()> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.sql.ResultSet: void updateBoolean(java.lang.String,boolean)> -> _SINK_
<org.springframework.jdbc.object.StoredProcedure: void <init>(org.springframework.jdbc.core.JdbcTemplate,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setBlob(int,java.sql.Blob)> -> _SINK_
<org.postgresql.core.Field: void setColumnName(java.lang.String)> -> _SINK_
<com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.sql.Time getTime(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void unloadShortedFields(org.mmbase.module.core.MMObjectNode,org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: void <init>(java.lang.String,java.util.List,java.util.Collection,org.hibernate.FlushMode,boolean,org.hibernate.engine.SessionImplementor,org.hibernate.engine.query.ParameterMetadata)> -> _SINK_
<org.mmbase.servlet.BridgeServlet$QueryParts: javax.servlet.http.HttpServletResponse getResponse()> -> _SINK_
<com.endeca.navigation.ENEQueryResults: void setRecords(com.endeca.navigation.ERecList)> -> _SINK_
<com.datastax.driver.core.exceptions.SyntaxError: void <init>(java.lang.String)> -> _SINK_
<oracle.toplink.sessions.Session: java.lang.Object executeQuery(java.lang.String,java.lang.Class,java.util.Vector)> -> _SINK_
<com.mysql.jdbc.EscapeProcessor: java.lang.Object escapeSQL(java.lang.String,boolean,com.mysql.jdbc.Connection)> -> _SINK_
<org.postgresql.copy.CopyManager: long copyIn(java.lang.String,java.io.Reader)> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.ERecIdList getERecs()> -> _SINK_
<org.mmbase.module.database.MultiConnection: java.sql.Statement createStatement()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: byte getByte(java.lang.String)> -> _SINK_
<com.amazonaws.auth.QueryStringSigner: java.lang.String getCanonicalizedResourcePath(com.amazonaws.Request)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: void testSetCriteriaNotNull()> -> _SINK_
<com.endeca.navigation.analytics.FilterOr: void validateSyntax()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLColumnInfo: java.lang.Object toSQL(java.lang.Object)> -> _SINK_
<org.hibernate.criterion.AbstractEmptinessExpression: org.hibernate.persister.collection.QueryableCollection getQueryableCollection(java.lang.String,java.lang.String,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<test.gov.nih.nci.security.hibernate.annotations.AtFilterAnnotationsTest: void displayUsers(org.hibernate.Session)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: int size(org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseSSL()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void assignPrivilegesToRole(java.lang.String,java.lang.String[])> -> _SINK_
<com.mysql.jdbc.SingleByteCharsetConverter: byte[] toBytes(java.lang.String)> -> _SINK_
<org.hibernate.util.JDBCExceptionReporter: void logExceptions(java.sql.SQLException)> -> _SINK_
<org.postgresql.util.ServerErrorMessage: int getPosition()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.lang.String[] quotelessTableName(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.drivers.ReturnedRSCallQuery: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.springframework.jdbc.object.BatchSqlUpdate: void <init>(javax.sql.DataSource,java.lang.String)> -> _SINK_
<org.hibernate.engine.query.NativeSQLQueryPlan: void coordinateSharedCacheCleanup(org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.springframework.jdbc.support.JdbcAccessor: void afterPropertiesSet()> -> _SINK_
<com.mchange.v2.c3p0.stmt.DoubleMaxStatementCache: boolean prepareAssimilateNewStatement(java.sql.Connection)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeSessionID(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.mmbase.module.corebuilders.OAlias: int getNumber(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setTime(int,java.sql.Time,java.util.Calendar)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: java.lang.StringBuilder buildQueryString(java.util.List)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: boolean execute(java.lang.String,int)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.DomainTypesInformationUtil: void internalGetSubclasses(java.lang.String,java.util.List)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<org.hibernate.sql.Alias: java.lang.String[] toUnquotedAliasStrings(java.lang.String[])> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: void addManyKey(java.lang.String)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: java.sql.ResultSet executeQuery()> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection: void <init>(java.sql.Connection,boolean,boolean)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.io.Reader getCharacterStream(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void literal(antlr.collections.AST)> -> _SINK_
<gov.nih.nci.cananolab.service.common.LookupService: void saveOtherType(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList: boolean atEndOfResults()> -> _SINK_
<com.mchange.v2.c3p0.DriverManagerDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.system.query.cql.CQLAssociation: void <init>(gov.nih.nci.system.query.cql.CQLAssociation,gov.nih.nci.system.query.cql.CQLAttribute,gov.nih.nci.system.query.cql.CQLGroup,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.cfg.Settings: void setSQLExceptionConverter(org.hibernate.exception.SQLExceptionConverter)> -> _SINK_
<entities.dao.IDAO: long queryCount(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void cancel()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: boolean getStandardConformingStrings()> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder start()> -> _SINK_
<com.datastax.driver.core.querybuilder.Clause$InClause: void <init>(java.lang.String,java.util.List)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsIntegrityEnhancementFacility()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: java.util.List findSampleIdsByAdvancedSearch(gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void cancel()> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void useSelectClause(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Date getDate(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<java.sql.ResultSet: java.sql.Array getArray(java.lang.String)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: java.util.Collection getPrivilegeMap(java.lang.String,java.util.Collection)> -> _SINK_
<org.mmbase.module.corebuilders.OAlias: java.lang.String getAlias(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.lang.String getCursorName()> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator: void setDatabaseProductName(java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.lang.Object getObject(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: void clearWarnings()> -> _SINK_
<com.mysql.jdbc.StringUtils: byte[] getBytes(char[],java.lang.String,java.lang.String,boolean,com.mysql.jdbc.Connection)> -> _SINK_
<org.springframework.jdbc.support.JdbcUtils: void closeStatement(java.sql.Statement)> -> _SINK_
<com.mysql.jdbc.CompressedInputStream: int readFully(byte[],int,int)> -> _SINK_
<com.mysql.jdbc.TimeUtil: java.sql.Date fastDateCreate(boolean,java.util.Calendar,java.util.Calendar,int,int,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void registerOutParameter(int,int,int)> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: java.lang.Object clone()> -> _SINK_
<org.hibernate.type.CharacterType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementFactory: org.hibernate.engine.JoinSequence createJoinSequence(java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setPadCharsWithSpace(boolean)> -> _SINK_
<org.hibernate.mapping.Collection: org.hibernate.engine.ExecuteUpdateResultCheckStyle getCustomSQLInsertCheckStyle()> -> _SINK_
<org.mmbase.bridge.Cloud: org.mmbase.bridge.NodeQuery createNodeQuery()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setPreparedStatementCacheSqlLimit(int)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl$JavaConstantConverter: void visit(antlr.collections.AST)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.util.List access$000(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateObject(int,java.lang.Object)> -> _SINK_
<org.hibernate.dialect.HSQLDialect$ReadUncommittedLockingStrategy: void <init>(org.hibernate.persister.entity.Lockable,org.hibernate.LockMode)> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: void addParameter(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$ListPrependAssignment: void appendTo(java.lang.StringBuilder,java.util.List)> -> _SINK_
<org.acegisecurity.securechannel.RetryWithHttpsEntryPoint: void commence(javax.servlet.ServletRequest,javax.servlet.ServletResponse)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: void setUser(java.lang.String)> -> _SINK_
<gov.nih.nci.system.webservice.WSQueryImpl: java.lang.String getSearchClassName(java.lang.String)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setBoolean(java.lang.String,boolean)> -> _SINK_
<org.hibernate.hql.classic.WhereParser: void openExpression(org.hibernate.hql.classic.QueryTranslatorImpl,java.lang.String)> -> _SINK_
<org.apache.ibatis.metadata.Database: org.apache.ibatis.metadata.Table getTable(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateTime(int,java.sql.Time)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: java.lang.String toString()> -> _SINK_
<org.hibernate.id.GUIDGenerator: java.io.Serializable generate(org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<org.hibernate.persister.collection.CollectionPersister: java.lang.Object readElement(java.sql.ResultSet,java.lang.Object,java.lang.String[],org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void simpleExpr(antlr.collections.AST)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: void appendFlatValue(java.lang.Object,java.lang.StringBuilder,boolean)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: int getResultSetType()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Blob getBlob(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.OrderByClause: void addOrderFragment(java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeQuery: void <init>(org.mmbase.bridge.implementation.BasicNodeManager)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: long getLong(java.lang.String)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: org.hibernate.SQLQuery addScalar(java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsPositionedDelete()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Quote: void setActivityHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Date getDate(java.lang.String,java.util.Calendar)> -> _SINK_
<org.hibernate.tool.hbm2ddl.SchemaExport: void <init>(org.hibernate.cfg.Configuration,org.hibernate.cfg.Settings)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4DatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxColumnsInGroupBy()> -> _SINK_
<gov.nih.nci.cananolab.service.publication.helper.PublicationServiceHelper: java.util.List findPublicationsBySampleName(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void booleanExpr(antlr.collections.AST,boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setObject(int,java.lang.Object,int)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTransactionManager: org.springframework.dao.DataAccessException convertHibernateAccessException(org.hibernate.HibernateException)> -> _SINK_
<java.sql.DatabaseMetaData: boolean storesMixedCaseIdentifiers()> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: org.hibernate.SQLQuery addJoin(java.lang.String,java.lang.String,org.hibernate.LockMode)> -> _SINK_
<org.postgresql.core.v2.ProtocolConnectionImpl: void setServerVersion(java.lang.String)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.CQL2HQL: java.lang.String getDataType(java.lang.String,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$SetAssignment: boolean containsBindMarker()> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: float getFloat(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.PointbaseDelegate: int updateJobData(java.sql.Connection,org.quartz.JobDetail)> -> _SINK_
<org.hibernate.type.AnyType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseStreamLengthsInPrepStmts()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateInt(int,int)> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<java.sql.Statement: boolean getMoreResults(int)> -> _SINK_
<org.apache.ibatis.executor.resultset.NestedResultSetHandler: java.lang.Object getRowValue(java.sql.ResultSet,org.apache.ibatis.mapping.ResultMap,org.apache.ibatis.cache.CacheKey)> -> _SINK_
<org.springframework.jdbc.support.JdbcAccessor: org.springframework.jdbc.support.SQLExceptionTranslator getExceptionTranslator()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Statement getStatement()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsCatalogsInProcedureCalls()> -> _SINK_
<org.postgresql.Driver: org.postgresql.util.HostSpec[] hostSpecs(java.util.Properties)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setMaxFieldSize(int)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setFloat(java.lang.String,float)> -> _SINK_
<org.exolab.castor.jdo.drivers.PostgreSQLFactory: org.exolab.castor.persist.spi.PersistenceQuery getCallQuery(java.lang.String,java.lang.Class[],java.lang.Class,java.lang.String[],int[])> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapExecutor: java.lang.Object queryForObject(java.lang.String,java.lang.Object,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getHighAvailability()> -> _SINK_
<com.mysql.jdbc.CallableStatement: int[] access$000(com.mysql.jdbc.CallableStatement)> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: int getCurrentRowNumber()> -> _SINK_
<org.hibernate.lob.SerializableClob: int setString(long,java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.IdentNode: boolean resolveAsNakedComponentPropertyRefRHS(org.hibernate.hql.ast.tree.DotNode)> -> _SINK_
<org.mmbase.core.util.StorageConnector: java.util.List getNodes()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: java.lang.Object getObject(java.lang.String,java.lang.Class)> -> _SINK_
<org.hibernate.criterion.SubqueryExpression: org.hibernate.engine.TypedValue[] getTypedValues(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getQueriesBeforeRetryMaster()> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.QueryImpl: java.lang.String addObjectAttributes(gov.nih.nci.logging.api.domain.LogMessage)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DBSemaphore: void releaseLock(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setBytes(int,byte[])> -> _SINK_
<com.endeca.navigation.RefinementConfig: com.endeca.navigation.RefinementConfig parse(java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxCursorNameLength()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void checkUpdateable()> -> _SINK_
<java.sql.Statement: void clearWarnings()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: int executeUpdate()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.lang.Object rawStatementOperation(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateTimestamp(java.lang.String,java.sql.Timestamp)> -> _SINK_
<org.exolab.castor.jdo.engine.ClobImpl: java.lang.String getSubString(long,int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setNClob(int,java.io.Reader)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateRow()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLQuery: java.lang.Object loadMultiField(int,org.castor.jdo.engine.CounterRef,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getClobberStreamingResults()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: boolean isLast()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Attribute: gov.nih.nci.cagrid.cqlquery.Predicate getPredicate()> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringDecoder: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: void createPreparedStatementCaches()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object doesNotExist()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlPooledConnection: void close()> -> _SINK_
<org.hibernate.exception.JDBCExceptionHelper: int extractErrorCode(java.sql.SQLException)> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: void addConstraint(org.w3c.dom.Element,org.mmbase.bridge.util.xml.query.QueryDefinition,org.mmbase.storage.search.CompositeConstraint)> -> _SINK_
<org.postgresql.core.PGStream: java.io.Writer getEncodingWriter()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setMaxRows(int)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateNull(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setQueryTimeout(int)> -> _SINK_
<org.hibernate.dialect.function.NoArgSQLFunction: void <init>(java.lang.String,org.hibernate.type.Type)> -> _SINK_
<test.gov.nih.nci.security.hibernate.annotations.HibernateUtil: void closeDatabaseConnection()> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: org.postgresql.copy.CopyOperation startCopy(java.lang.String,boolean)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: byte[] getBytes(java.lang.String)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate$5: void <init>(org.springframework.orm.toplink.TopLinkTemplate,boolean,java.lang.Class,oracle.toplink.queryframework.Call)> -> _SINK_
<com.mysql.jdbc.Blob: void setBinaryData(byte[])> -> _SINK_
<org.hibernate.engine.query.FilterQueryPlan: void <init>(java.lang.String,java.lang.String,boolean,java.util.Map,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.postgresql.core.v3.CopyOperationImpl: void handleCommandStatus(java.lang.String)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl$3: void handleResultRows(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)> -> _SINK_
<org.castor.persist.TransactionContext: java.lang.Object load(org.exolab.castor.persist.spi.Identity,org.castor.persist.ProposedEntity,org.exolab.castor.mapping.AccessMode,org.exolab.castor.persist.QueryResults)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.datastax.driver.core.Requests$Query: void <init>(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.sql.RowId getRowId(int)> -> _SINK_
<javax.sql.ConnectionEventListener: void connectionErrorOccurred(javax.sql.ConnectionEvent)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.lang.String getURL()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setString(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: java.lang.String getBaseSchemaName(int)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.Object getObject(int,java.util.Map)> -> _SINK_
<org.apache.ibatis.type.DateOnlyTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.hibernate.dialect.InformixDialect$1: java.lang.String extractConstraintName(java.sql.SQLException)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setTime(int,java.sql.Time)> -> _SINK_
<gov.nih.nci.system.query.example.UpdateExampleQuery: void <init>(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void dumpExecuteForTestcase()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$ConnectionProperty: int getOrder()> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache: java.lang.Object checkoutStatement(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: byte[] encodeString(java.lang.String)> -> _SINK_
<org.hibernate.sql.Delete: org.hibernate.sql.Delete setPrimaryKeyColumnNames(java.lang.String[])> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: boolean execute(java.lang.String,int)> -> _SINK_
<org.exolab.castor.persist.ClassMolder: org.exolab.castor.persist.spi.Identity create(org.castor.persist.TransactionContext,org.exolab.castor.persist.OID,org.exolab.castor.persist.DepositBox,java.lang.Object)> -> _SINK_
<org.apache.ibatis.builder.StaticSqlSource: org.apache.ibatis.mapping.BoundSql getBoundSql(java.lang.Object)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void beforeFirst()> -> _SINK_
<org.hibernate.criterion.InExpression: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.sforce.soap.enterprise.EnterpriseConnection: com.sforce.soap.enterprise.QueryResult query(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseOldUTF8Behavior(boolean)> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.Savepoint setSavepoint()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: boolean execute(java.lang.String)> -> _SINK_
<org.hibernate.sql.JoinFragment: java.lang.String toFromFragmentString()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getSearchStringEscape()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.SDK4QueryProcessor: void <init>()> -> _SINK_
<java.sql.DatabaseMetaData: boolean dataDefinitionIgnoredInTransactions()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.util.Map getTypeMap()> -> _SINK_
<org.springframework.jdbc.core.SqlOutParameter: org.springframework.jdbc.core.SqlReturnType getSqlReturnType()> -> _SINK_
<org.exolab.castor.jdo.drivers.PostgreSQLFactory: java.lang.Class adjustSqlType(java.lang.Class)> -> _SINK_
<org.postgresql.ssl.jdbc4.LazyKeyManager: void throwKeyManagerException()> -> _SINK_
<com.endeca.navigation.ENEQuery: void validate()> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: java.lang.Object getDiscriminatorValue(java.sql.ResultSet,org.apache.ibatis.mapping.Discriminator)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.Disjunction getPointOfContactDisjunction(gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Statement: void close()> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementType: void setQueryableCollection(org.hibernate.persister.collection.QueryableCollection)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Timestamp getTimestamp(int)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: void setTableName(java.lang.String)> -> _SINK_
<org.hibernate.exception.SQLStateConverter: org.hibernate.JDBCException handledNonSpecificException(java.sql.SQLException,java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.datatypes.BasicDataType$UniqueRestriction: boolean simpleValid(java.lang.Object,org.mmbase.bridge.Node,org.mmbase.bridge.Field)> -> _SINK_
<com.sforce.soap.enterprise.sobject.RestExplorerConfig__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.stmt.StatementCacheKey: com.mchange.v2.c3p0.stmt.StatementCacheKey find(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<com.mysql.jdbc.log.StandardLogger: void logError(java.lang.Object,java.lang.Throwable)> -> _SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcTemplate: int queryForInt(java.lang.String,java.lang.Object[])> -> _SINK_
<org.postgresql.core.types.PGString: void <init>(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setBytes(int,byte[])> -> _SINK_
<org.mmbase.module.database.DatabaseSupportInformix: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.hibernate.type.TimestampType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<org.hibernate.cfg.Mappings: void addQuery(java.lang.String,org.hibernate.engine.NamedQueryDefinition)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<java.sql.Driver: int getMinorVersion()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.sql.Statement createStatement(int,int)> -> _SINK_
<org.postgresql.core.types.PGDouble: void <init>(java.lang.Double)> -> _SINK_
<org.hibernate.hql.ast.tree.BinaryLogicOperatorNode: void mutateRowValueConstructorSyntax(int)> -> _SINK_
<com.sforce.soap.enterprise.QueryAllResponse_element: void load(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavRecordFilter(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: org.mongodb.morphia.query.UpdateOperations removeAll(java.lang.String,java.util.List)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: void setCatalog(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: void createQueryExpression()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNo(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractorAdapter: java.sql.Connection getNativeConnection(java.sql.Connection)> -> _SINK_
<org.mmbase.bridge.implementation.BasicCloud: org.mmbase.bridge.NodeList getResultNodeList(org.mmbase.bridge.Query)> -> _SINK_
<com.mysql.jdbc.Buffer: long readFieldLength()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setFloat(int,float)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean isTriggerGroupPaused(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateTime(int,java.sql.Time)> -> _SINK_
<com.mysql.jdbc.Statement: int getRecordCountFromInfo(java.lang.String)> -> _SINK_
<org.hibernate.sql.Update: org.hibernate.sql.Update setPrimaryKeyColumnNames(java.lang.String[])> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: int getMaxNumber()> -> _SINK_
<org.postgresql.copy.CopyManager: long copyIn(java.lang.String,java.io.InputStream,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateDate(java.lang.String,java.sql.Date)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void storeJob(java.sql.Connection,org.quartz.core.SchedulingContext,org.quartz.JobDetail,boolean)> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcDaoImpl: org.acegisecurity.acl.basic.BasicAclEntry[] getAcls(org.acegisecurity.acl.basic.AclObjectIdentity)> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator: void out(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.OutputStreamWatcher: void streamClosed(com.mysql.jdbc.WatchableOutputStream)> -> _SINK_
<java.sql.PreparedStatement: void setString(int,java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.support.SqlLobValue: void <init>(java.lang.String)> -> _SINK_
<org.hibernate.hql.QueryTranslator: java.util.List collectSqlStrings()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Recruiting_Tracker__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Time getTime(java.lang.String)> -> _SINK_
<org.hibernate.sql.Insert: void <init>(org.hibernate.dialect.Dialect)> -> _SINK_
<org.postgresql.xa.PGXAConnection: int prepare(javax.transaction.xa.Xid)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: byte[] access$000(com.mysql.jdbc.DatabaseMetaData,java.lang.String)> -> _SINK_
<java.sql.Statement: boolean execute(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: int getResultSetConcurrency()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: short getShort(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.Criterion getSampleNameCriterion(gov.nih.nci.cananolab.dto.particle.SampleQueryBean)> -> _SINK_
<java.sql.Connection: java.sql.Statement createStatement(int,int)> -> _SINK_
<org.mmbase.storage.search.legacy.ConstraintParser: org.mmbase.storage.search.StepField getField(java.lang.String,java.util.List)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNty(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mysql.jdbc.WatchableOutputStream: void setWatcher(com.mysql.jdbc.OutputStreamWatcher)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: java.lang.Object findAndModify(org.mongodb.morphia.query.Query,org.mongodb.morphia.query.UpdateOperations,boolean,boolean)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate$2: java.lang.Object doInPreparedStatement(java.sql.PreparedStatement)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: boolean isValid(int)> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: java.lang.Object prepareParameterForNestedQuery(java.sql.ResultSet,org.apache.ibatis.mapping.ResultMapping,java.lang.Class)> -> _SINK_
<org.castor.jdo.conf.DatabaseDescriptor$4: void <init>(org.castor.jdo.conf.DatabaseDescriptor)> -> _SINK_
<org.hibernate.sql.Sybase11JoinFragment: void <init>()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.Query queryByExample(com.mongodb.DBCollection,java.lang.Object)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: java.lang.Object[] valueArray()> -> _SINK_
<com.mysql.jdbc.MysqlIO: void unpackNativeEncodedColumn(com.mysql.jdbc.Buffer,com.mysql.jdbc.Field[],int,java.lang.Object[])> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean prev()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,int[])> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Using timestamp(long)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void refreshRow()> -> _SINK_
<com.mysql.jdbc.CallableStatement: void registerOutParameter(java.lang.String,int,java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Array: void <clinit>()> -> _SINK_
<org.springframework.jdbc.support.incrementer.OracleSequenceMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void <init>(java.lang.String,java.lang.String,java.util.Map,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.hibernate.tool.hbm2ddl.DatabaseMetadata: boolean isTable(java.lang.Object)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.bridge.Query aggregatingClone()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DB2v6Delegate: int selectNumTriggers(java.sql.Connection)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setShort(java.lang.String,short)> -> _SINK_
<org.apache.ibatis.executor.resultset.NestedResultSetHandler: void handleRowValues(java.sql.ResultSet,org.apache.ibatis.mapping.ResultMap,org.apache.ibatis.session.ResultHandler,org.apache.ibatis.session.RowBounds)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxBinaryLiteralLength()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setDate(int,java.sql.Date)> -> _SINK_
<org.postgresql.copy.PGCopyInputStream: boolean gotBuf()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: boolean isCurrency(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setString(int,java.lang.String)> -> _SINK_
<org.hibernate.Query: org.hibernate.Query setCacheRegion(java.lang.String)> -> _SINK_
<org.exolab.castor.persist.LockEngine: org.exolab.castor.persist.OID load(org.castor.persist.TransactionContext,org.exolab.castor.persist.OID,org.castor.persist.ProposedEntity,org.exolab.castor.mapping.AccessMode,int)> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: java.lang.String getColumnCharacterEncoding(int)> -> _SINK_
<org.hibernate.impl.ScrollableResultsImpl: void prepareCurrentRow(boolean)> -> _SINK_
<java.sql.Connection: boolean isClosed()> -> _SINK_
<gov.nih.nci.security.dao.Queries: java.sql.PreparedStatement getQueryForUserAndGroupForAttributeValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.sql.Connection)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: boolean isPersistent(java.lang.Object)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Array: void <init>(org.postgresql.core.BaseConnection,int,byte[])> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.SuspendableXAConnection: void <init>(com.mysql.jdbc.Connection)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select: com.datastax.driver.core.querybuilder.Select limit(com.datastax.driver.core.querybuilder.BindMarker)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.EtxSqlHandler: void <init>(org.mmbase.storage.search.implementation.database.SqlHandler)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setTcpKeepAlive(boolean)> -> _SINK_
<org.postgresql.ssl.jdbc4.AbstractJdbc4MakeSSL: void <init>()> -> _SINK_
<org.postgresql.core.v2.ConnectionFactoryImpl: void <init>()> -> _SINK_
<gov.nih.nci.system.query.cql.CQLLogicalOperator: boolean equals(java.lang.Object)> -> _SINK_
<gov.nih.nci.system.webservice.WSQueryImpl: gov.nih.nci.system.query.nestedcriteria.NestedCriteriaPath getNestedCriteriaPath(java.lang.String,java.lang.Object)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Timestamp getTimestamp(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$21: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Time getTime(int)> -> _SINK_
<org.mmbase.util.LocalizedEntryListFactory: void fillFromXml(org.w3c.dom.Element,java.lang.Class)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void rollbackConnection(java.sql.Connection)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimestampLocaleConverter: void <init>(java.lang.Object,java.util.Locale)> -> _SINK_
<com.datastax.driver.core.exceptions.AlreadyExistsException: void <init>(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: int getMaxFieldSize()> -> _SINK_
<com.datastax.driver.core.querybuilder.Clause$SimpleClause: void <init>(java.lang.String,java.lang.String,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.Buffer: java.lang.String readString(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.ComboPooledDataSource: java.sql.Connection getConnection()> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: void testQuery_MaxSize_NoResults()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: int getFetchDirection()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addEqualConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.Field,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxCharLiteralLength()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setTime(int,java.sql.Time,java.util.Calendar)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.JobDetail selectJobForTrigger(java.sql.Connection,java.lang.String,java.lang.String,org.quartz.spi.ClassLoadHelper)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.util.Calendar getCalendarInstanceForSessionOrNew()> -> _SINK_
<org.springframework.orm.ibatis.support.SqlMapClientDaoSupport: void checkDaoConfig()> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: org.hibernate.hql.ast.tree.SelectClause getSelectClause()> -> _SINK_
<org.springframework.jdbc.core.JdbcOperations: int queryForInt(java.lang.String,java.lang.Object[])> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setClob(int,java.sql.Clob)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.sql.CallableStatement prepareCall(java.lang.String,int,int)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void removeUserRoleFromProtectionGroup(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<org.hibernate.mapping.AbstractAuxiliaryDatabaseObject: void <init>()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: void clearWarnings()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setRef(int,java.sql.Ref)> -> _SINK_
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractorAdapter: java.sql.Connection doGetNativeConnection(java.sql.Connection)> -> _SINK_
<org.postgresql.util.PGtokenizer: void removeAngle()> -> _SINK_
<org.hibernate.JDBCException: java.lang.String getSQLState()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setTimestamp(java.lang.String,java.util.Date)> -> _SINK_
<org.mongodb.morphia.query.QueryResults: java.util.List asKeyList()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int insertBlobTrigger(java.sql.Connection,org.quartz.Trigger)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setDouble(java.lang.String,double)> -> _SINK_
<org.hibernate.sql.SelectFragment: org.hibernate.sql.SelectFragment setUsedAliases(java.lang.String[])> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: void queryWithRowHandler(java.lang.String,com.ibatis.sqlmap.client.event.RowHandler)> -> _SINK_
<org.hibernate.connection.ProxoolConnectionProvider: void closeConnection(java.sql.Connection)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.implementation.BasicSearchQuery getQuery()> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: void appendQueryBodyToSql(java.lang.StringBuffer,org.mmbase.storage.search.SearchQuery,org.mmbase.storage.search.implementation.database.SqlHandler)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void cancelRowUpdates()> -> _SINK_
<util.reflection.EntityHelper: java.lang.String[] extractNamedQueries(java.lang.Class)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsCatalogsInIndexDefinitions()> -> _SINK_
<org.hibernate.impl.SessionImpl: org.hibernate.Query createQuery(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<org.exolab.castor.jdo.drivers.InformixQueryExpression: boolean addJoinClause(java.lang.StringBuffer)> -> _SINK_
<org.mmbase.module.builders.MMServers: org.mmbase.module.core.MMObjectNode getMMServerNode(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void doSubprotocolBegin()> -> _SINK_
<com.sforce.soap.enterprise.sobject.User: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.web.servlet.view.jasperreports.JasperReportsViewResolver: org.springframework.web.servlet.view.AbstractUrlBasedView buildView(java.lang.String)> -> _SINK_
<org.postgresql.ssl.jdbc4.AbstractJdbc4MakeSSL: void convert(org.postgresql.core.PGStream,java.util.Properties,org.postgresql.core.Logger)> -> _SINK_
<org.apache.taglibs.standard.tlv.JstlSqlTLV: org.xml.sax.helpers.DefaultHandler getHandler()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateShort(java.lang.String,short)> -> _SINK_
<org.hibernate.mapping.Join: void setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> -> _SINK_
<com.mysql.jdbc.Statement: java.sql.SQLWarning getWarnings()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: void setPortNumber(int)> -> _SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcTemplate: java.util.List query(java.lang.String,org.springframework.jdbc.core.simple.ParameterizedRowMapper,java.lang.Object[])> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setEscapeProcessing(boolean)> -> _SINK_
<com.mysql.jdbc.Connection: void addToPerformanceHistogram(long,int)> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: byte[] getEncodedStatementName()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: gov.nih.nci.security.authorization.domainobjects.User getLightWeightUser(java.lang.String)> -> _SINK_
<java.sql.Connection: java.lang.String getCatalog()> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch$Options: boolean isTracing()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setRef(int,java.sql.Ref)> -> _SINK_
<org.mmbase.util.functions.IndexFunction$3: java.lang.Object getFunctionValue(org.mmbase.bridge.Node,org.mmbase.util.functions.Parameters)> -> _SINK_
<java.sql.Connection: java.sql.SQLWarning getWarnings()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createLikeConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.Field,java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.WhereSqlNode: void <init>(org.apache.ibatis.session.Configuration,org.apache.ibatis.builder.xml.dynamic.SqlNode)> -> _SINK_
<com.endeca.navigation.analytics.FilterCompare: java.lang.String toWire()> -> _SINK_
<com.mysql.jdbc.Statement: java.util.Calendar getCalendarInstanceForSessionOrNew()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl within(org.mongodb.morphia.query.Shape)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getInteractiveClient()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsANSI92FullSQL()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.persister.entity.Loadable: java.lang.Object[] hydrate(java.sql.ResultSet,java.io.Serializable,java.lang.Object,org.hibernate.persister.entity.Loadable,java.lang.String[][],boolean,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: java.lang.String getEventCreationPointAsString()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setBytes(int,byte[])> -> _SINK_
<org.castor.jdo.engine.DataSourceConnectionFactory: javax.sql.DataSource loadDataSource(org.castor.jdo.conf.Database,java.lang.ClassLoader)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.core.BaseConnection: java.lang.Object getObject(java.lang.String,java.lang.String,byte[])> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.TrimSqlNode: java.lang.String access$400(org.apache.ibatis.builder.xml.dynamic.TrimSqlNode)> -> _SINK_
<org.postgresql.core.Parser: int parseLineComment(char[],int)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: com.datastax.driver.core.ConsistencyLevel getConsistencyLevel()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.type.Type guessType(java.lang.Class)> -> _SINK_
<com.mysql.jdbc.CursorRowProvider: boolean isAfterLast()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List queryForList(java.lang.String,java.lang.Object[])> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void refreshRow()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLHelper: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void delete(org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getVersionColumns(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.SelectClause: void initializeDerivedSelectClause(org.hibernate.hql.ast.tree.FromClause)> -> _SINK_
<com.mysql.jdbc.Field: java.lang.String getOriginalTableName()> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: boolean isRawValue(java.lang.Object)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: long selectNextFireTime(java.sql.Connection)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.Statement createStatement()> -> _SINK_
<org.exolab.castor.persist.ClassMolder: java.lang.Object load(org.castor.persist.TransactionContext,org.exolab.castor.persist.OID,org.exolab.castor.persist.DepositBox,org.castor.persist.ProposedEntity,org.exolab.castor.mapping.AccessMode)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.io.InputStream getAsciiStream(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.drivers.DerbyQueryExpression: java.lang.String getStatement(boolean)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateObject(java.lang.String,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: boolean first()> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder: void WHERE(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Date getDate(int)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void postProcessUpdate(antlr.collections.AST)> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.Query: void setCriteria(gov.nih.nci.logging.api.applicationservice.SearchCriteria)> -> _SINK_
<org.postgresql.core.types.PGUnknown: void <init>(java.lang.Object)> -> _SINK_
<org.mongodb.morphia.query.MorphiaIterator: void close()> -> _SINK_
<org.postgresql.util.PSQLState: void <init>(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Solution: void setOpenActivities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setDate(java.lang.String,java.sql.Date)> -> _SINK_
<org.hibernate.mapping.Constraint: java.lang.String sqlCreateString(org.hibernate.dialect.Dialect,org.hibernate.engine.Mapping,java.lang.String,java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl near(double,double,double,boolean)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean: java.lang.Boolean getHasNanomaterial()> -> _SINK_
<org.apache.ibatis.type.IntegerTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<org.mongodb.morphia.utils.Helper: com.mongodb.DBCollection getCollection(org.mongodb.morphia.query.Query)> -> _SINK_
<org.hibernate.engine.SessionImplementor: java.util.Iterator iterateFilter(java.lang.Object,java.lang.String,org.hibernate.engine.QueryParameters)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.io.InputStream getAsciiStream(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select: void <init>(java.lang.String,java.lang.String,java.util.List,boolean)> -> _SINK_
<org.hibernate.impl.FetchingScrollableResultsImpl: void beforeFirst()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getSchemaTerm()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: float getFloat(java.lang.String)> -> _SINK_
<java.sql.Timestamp: void <init>(long)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: java.lang.String truncateQueryToLog(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.incrementer.HsqlMaxValueIncrementer: int getCacheSize()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: java.lang.Object get(java.lang.Class,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: void setEscapeProcessing(boolean)> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: boolean hasTransient()> -> _SINK_
<org.postgresql.ds.PGSimpleDataSource: void <init>()> -> _SINK_
<com.mysql.jdbc.Connection: void <init>(java.lang.String,int,java.util.Properties,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler: java.lang.String extractJdbcType(java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQueryInfo: java.lang.String getQueryIdentifier()> -> _SINK_
<org.exolab.castor.persist.ClassMolder: void delete(org.castor.persist.TransactionContext,org.exolab.castor.persist.OID)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Clob getClob(java.lang.String)> -> _SINK_
<com.mysql.jdbc.StringUtils: java.lang.String dumpAsHex(byte[],int)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DataSourceWrapper: void setLogWriter(java.io.PrintWriter)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: java.sql.SQLWarning getWarnings()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.LogicalOperator: java.lang.Object readResolve()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.MapreduceResults mapReduce(org.mongodb.morphia.MapreduceType,org.mongodb.morphia.query.Query,java.lang.String,java.lang.String,java.lang.String,java.util.Map,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.Security: int[] getSaltFromPassword(java.lang.String)> -> _SINK_
<org.mmbase.cache.ConstraintsMatchingStrategy: void logResult(java.lang.String,org.mmbase.storage.search.SearchQuery,org.mmbase.core.event.Event,org.mmbase.module.core.MMObjectNode)> -> _SINK_
<org.springframework.orm.jdo.JdoTransactionManager: javax.sql.DataSource getDataSource()> -> _SINK_
<org.hibernate.criterion.PropertyExpression: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$8: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: short getShort(int)> -> _SINK_
<org.exolab.castor.jdo.engine.JDOFieldDescriptor: int[] getSQLType()> -> _SINK_
<org.postgresql.core.Logger: void <init>()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.List selectInstancesFiredTriggerRecords(java.sql.Connection,java.lang.String)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: java.util.Set getProtectionElements(java.lang.String)> -> _SINK_
<org.apache.ibatis.type.SqlTimestampTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<com.sun.jersey.api.client.AsyncViewResource: com.sun.jersey.api.client.AsyncViewResource queryParams(javax.ws.rs.core.MultivaluedMap)> -> _SINK_
<test.gov.nih.nci.security.dialect.CSMMySQLInnoDBDialectTest: void testInstanceLevelSecurityForUser()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: java.lang.String[] selectTriggersInGroup(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setDate(java.lang.String,java.sql.Date,java.util.Calendar)> -> _SINK_
<org.apache.ibatis.type.LongTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.math.BigInteger convertLongToUlong(long)> -> _SINK_
<org.hibernate.stat.StatisticsImpl: org.hibernate.stat.QueryStatistics getQueryStatistics(java.lang.String)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.lang.String getSQLString()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void beforeStatement(java.lang.String,int)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: long getLong(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CUstom_Setting_1__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ParameterMetaData: int getParameterMode(int)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.lang.Object getObject(int,java.util.Map)> -> _SINK_
<org.mmbase.bridge.util.Queries: org.mmbase.bridge.Query createQuery(org.mmbase.bridge.Cloud,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void <init>(com.mysql.jdbc.jdbc2.optional.ConnectionWrapper,com.mysql.jdbc.jdbc2.optional.MysqlPooledConnection,java.sql.PreparedStatement)> -> _SINK_
<com.fasterxml.jackson.databind.deser.std.DateDeserializers$SqlDateDeserializer: com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer withDateFormat(java.text.DateFormat,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: java.lang.String toString()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.utils.Key[] selectMisfiredTriggersInGroupInState(java.sql.Connection,java.lang.String,java.lang.String,long)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: void removeSecurityConstraintFromClone(org.mmbase.storage.search.implementation.BasicSearchQuery)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.lang.Object getObject(java.lang.String,java.util.Map)> -> _SINK_
<org.apache.ibatis.executor.statement.BaseStatementHandler: void <init>(org.apache.ibatis.executor.Executor,org.apache.ibatis.mapping.MappedStatement,java.lang.Object,org.apache.ibatis.session.RowBounds,org.apache.ibatis.session.ResultHandler)> -> _SINK_
<java.sql.Connection: void setTransactionIsolation(int)> -> _SINK_
<org.mmbase.storage.search.implementation.database.MySqlSqlHandler: void <clinit>()> -> _SINK_
<com.mysql.jdbc.ResultSet: void setServerInfo(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<org.springframework.jdbc.core.StatementCreatorUtils: void cleanupParameters(java.util.Collection)> -> _SINK_
<org.mmbase.util.transformers.GoogleHighlighterFactory: org.mmbase.util.transformers.Transformer createTransformer(org.mmbase.util.functions.Parameters)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setNull(int,int)> -> _SINK_
<com.fasterxml.jackson.databind.deser.std.DateDeserializers$SqlDateDeserializer: com.fasterxml.jackson.databind.deser.std.DateDeserializers$SqlDateDeserializer withDateFormat(java.text.DateFormat,java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxColumnsInTable()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: java.lang.Object store(java.lang.Object,org.exolab.castor.persist.spi.Identity,org.castor.persist.ProposedEntity,org.castor.persist.ProposedEntity)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.EtxIndexCreator: void <init>(java.lang.String)> -> _SINK_
<org.springframework.orm.jpa.JpaTransactionManager: void afterPropertiesSet()> -> _SINK_
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor: java.lang.Class getJavaClass()> -> _SINK_
<org.hibernate.criterion.CriteriaQuery: org.hibernate.engine.SessionFactoryImplementor getFactory()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.type.Type determineType(int,java.lang.Object,org.hibernate.type.Type)> -> _SINK_
<org.exolab.castor.util.SqlBindParser: void bindJdbcValues(java.sql.PreparedStatement,java.lang.String,java.lang.Object[])> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavDescriptors(com.endeca.navigation.DimValIdList)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: void query(java.lang.String,java.util.Map,org.springframework.jdbc.core.RowCallbackHandler)> -> _SINK_
<com.mysql.jdbc.ResultSet: void setStatementUsedForFetchingRows(com.mysql.jdbc.PreparedStatement)> -> _SINK_
<org.hibernate.loader.custom.CustomQuery: java.util.Map getNamedParameterBindPoints()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void markInactiveResultSetForStatement(java.sql.Statement,java.sql.ResultSet)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$MainFrame: void saveHistory()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.lang.String getString(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Array getArray(int)> -> _SINK_
<com.mysql.jdbc.Connection: void commit()> -> _SINK_
<org.springframework.jdbc.core.JdbcOperations: java.util.List queryForList(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setContractsSigned(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean getBoolean(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: int getServerMajorVersion()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: boolean last()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getCacheServerConfiguration()> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$MainFrame: void FillTableHeader(java.util.Vector,javax.swing.table.DefaultTableModel)> -> _SINK_
<java.sql.ResultSetMetaData: int getColumnCount()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean rowInserted()> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: boolean isValidatingTypes()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: boolean next()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: boolean getMoreResults(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: java.sql.ResultSet executeQuery()> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: int getSupportLevel(int,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<com.mysql.jdbc.ResultSet: void setNextResultSet(com.mysql.jdbc.ResultSet)> -> _SINK_
<com.mysql.jdbc.Connection: void releaseSavepoint(java.sql.Savepoint)> -> _SINK_
<org.postgresql.core.Encoding: java.io.Reader getDecodingReader(java.io.InputStream)> -> _SINK_
<com.mysql.jdbc.Connection: void realClose(boolean,boolean,boolean,java.lang.Throwable)> -> _SINK_
<org.hibernate.id.insert.AbstractSelectingDelegate: java.io.Serializable performInsert(java.lang.String,org.hibernate.engine.SessionImplementor,org.hibernate.id.insert.Binder)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setNull(java.lang.String,int,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: boolean isClosed()> -> _SINK_
<org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator: void setBlobAsBinaryStream(java.sql.PreparedStatement,int,java.io.InputStream,int)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: javax.sql.DataSource getDataSource()> -> _SINK_
<com.mysql.jdbc.log.StandardLogger: void logFatal(java.lang.Object)> -> _SINK_
<org.mmbase.bridge.util.TreeList: void main(java.lang.String[])> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: boolean isActive()> -> _SINK_
<org.hibernate.type.Type: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String,org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<com.endeca.navigation.analytics.AnalyticsQuery: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: int[] executeBatch()> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsRequest: java.lang.String getSphere()> -> _SINK_
<org.mmbase.cache.QueryResultCache: void evaluate(org.mmbase.core.event.Event,java.util.Set,java.util.Set,java.util.Map)> -> _SINK_
<com.sun.jersey.api.uri.UriComponent: void decodeQueryParam(javax.ws.rs.core.MultivaluedMap,java.lang.String,boolean,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: void rollback()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setBlob(int,java.io.InputStream,long)> -> _SINK_
<org.acegisecurity.userdetails.jdbc.JdbcDaoImpl$UsersByUsernameMapping: void <init>(org.acegisecurity.userdetails.jdbc.JdbcDaoImpl,javax.sql.DataSource)> -> _SINK_
<com.mysql.jdbc.log.CommonsLogger: void logFatal(java.lang.Object)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean isUpdateable()> -> _SINK_
<org.apache.ibatis.type.EnumTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: java.lang.Object createQueryObject(java.lang.Class)> -> _SINK_
<java.sql.SQLWarning: void <init>(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getNullCatalogMeansCurrent()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment discard(java.lang.String,java.lang.Object)> -> _SINK_
<org.postgresql.core.v3.CompositeQuery: org.postgresql.core.ParameterList createParameterList()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean insertsAreDetected(int)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateBinaryStream(int,java.io.InputStream)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void conditionList(antlr.collections.AST)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: void change(org.mmbase.module.core.MMObjectNode,org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<org.mmbase.bridge.util.Queries: void copySortOrders(java.util.List,org.mmbase.storage.search.Step,org.mmbase.bridge.Query,org.mmbase.storage.search.Step)> -> _SINK_
<com.mysql.jdbc.Connection: boolean isServerTzUTC()> -> _SINK_
<java.sql.Blob: long length()> -> _SINK_
<org.postgresql.xa.jdbc4.AbstractJdbc4XADataSource: void <init>()> -> _SINK_
<org.hibernate.loader.Loader: java.util.List listUsingQueryCache(org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters,java.util.Set,org.hibernate.type.Type[])> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getCatalogTerm()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<org.springframework.jdbc.object.RdbmsOperation: void declareParameter(org.springframework.jdbc.core.SqlParameter)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate: java.lang.String getQueryCacheRegion()> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSource: void setLoginTimeout(int)> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringEncoder: java.net.URI toUri()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object lessThan(java.lang.Object)> -> _SINK_
<org.hibernate.loader.Loader: java.lang.String getInstanceClass(java.sql.ResultSet,int,org.hibernate.persister.entity.Loadable,java.io.Serializable,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.Query: com.mongodb.DBCollection getCollection()> -> _SINK_
<gov.nih.nci.cagrid.data.bdt.stubs.BDTDataServicePortType: gov.nih.nci.cagrid.data.bdt.stubs.BdtQueryResponse bdtQuery(gov.nih.nci.cagrid.data.bdt.stubs.BdtQueryRequest)> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.TransactionTag: void <init>()> -> _SINK_
<com.datastax.driver.core.Requests$Query$1: int encodedSize(com.datastax.driver.core.Requests$Query)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.ResultSet getTarget()> -> _SINK_
<util.reflection.EntityHelper: java.lang.String getNamedQuery(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateRow()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerGroupStateFromOtherState(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryResult: boolean equals(java.lang.Object)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getImportedExportedKeys(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.sql.Timestamp: void setTime(long)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: java.lang.Object access$000(org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteTriggerListeners(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.StringUtils: int indexOfIgnoreCaseRespectMarker(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsGroupByUnrelated()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$8: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: java.util.List access$100(com.datastax.driver.core.querybuilder.Update$Assignments)> -> _SINK_
<org.hibernate.engine.NamedQueryDefinition: org.hibernate.FlushMode getFlushMode()> -> _SINK_
<org.bouncycastle.i18n.filter.SQLFilter: java.lang.String doFilterUrl(java.lang.String)> -> _SINK_
<gov.nih.nci.system.query.hibernate.HQLCriteria: void <init>(java.lang.String)> -> _SINK_
<com.enhype.db.PostgresDB: int execUpdate(java.lang.String)> -> _SINK_
<org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider: javax.sql.DataSource getDataSource()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateObject(int,java.lang.Object,int)> -> _SINK_
<com.mysql.jdbc.Connection: com.mysql.jdbc.ResultSet execSQL(com.mysql.jdbc.Statement,java.lang.String,int,com.mysql.jdbc.Buffer,int,int,boolean,java.lang.String,boolean,boolean)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void handleWithFragment(org.hibernate.hql.ast.tree.FromElement,antlr.collections.AST)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsNamedParameters()> -> _SINK_
<org.postgresql.util.Base64: byte[] decode(java.lang.String)> -> _SINK_
<org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy: void <init>(javax.sql.DataSource)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setClosed(boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position__c: void setHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.ast.tree.SelectClause: org.hibernate.type.Type[] getQueryReturnTypes()> -> _SINK_
<org.springframework.jdbc.object.SqlFunction: java.lang.Object runGeneric(java.lang.Object[])> -> _SINK_
<org.hibernate.sql.SimpleSelect: org.hibernate.sql.SimpleSelect addColumns(java.lang.String[])> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.String toRawString(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.Buffer: int getBufLength()> -> _SINK_
<org.apache.commons.beanutils.converters.SqlDateConverter: java.lang.Class getDefaultType()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean nullsAreSortedAtEnd()> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementFactory: org.hibernate.hql.ast.tree.FromElement createElementJoin(org.hibernate.persister.collection.QueryableCollection)> -> _SINK_
<com.sforce.soap.enterprise.sobject.QuantityForecast: void setQuantityForecastHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsMultipleTransactions()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$68: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateNCharacterStream(int,java.io.Reader,long)> -> _SINK_
<com.sforce.soap.enterprise.sobject.TaskJunction__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setBlob(int,java.sql.Blob)> -> _SINK_
<com.mongodb.DBPort$SaslAuthenticator: com.mongodb.DB getDatabase()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateBinaryStream(int,java.io.InputStream)> -> _SINK_
<org.apache.ibatis.datasource.pooled.PooledDataSource: void setLogWriter(java.io.PrintWriter)> -> _SINK_
<org.mmbase.security.Authorization$QueryCheck: void <init>(boolean,org.mmbase.storage.search.Constraint)> -> _SINK_
<org.hibernate.hql.antlr.HqlBaseParser: void fromRange()> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.TextSqlNode: void <init>(java.lang.String)> -> _SINK_
<org.mmbase.bridge.implementation.BasicCloud: org.mmbase.bridge.NodeQuery createNodeQuery()> -> _SINK_
<org.hibernate.criterion.SimpleSubqueryExpression: void <init>(java.lang.Object,java.lang.String,java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: java.lang.StringBuffer getStandardStatement(boolean,boolean)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: boolean execute()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNo(java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsSelectForUpdate()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setInteractiveClient(boolean)> -> _SINK_
<org.postgresql.core.v3.CompositeQuery: void close()> -> _SINK_
<org.hibernate.mapping.Collection: void setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceUtils: int access$000(javax.sql.DataSource)> -> _SINK_
<org.postgresql.xa.RecoveredXid: java.lang.String xidToString(javax.transaction.xa.Xid)> -> _SINK_
<org.hibernate.type.BlobType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,boolean[],org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapExecutor: void queryWithRowHandler(java.lang.String,java.lang.Object,com.ibatis.sqlmap.client.event.RowHandler)> -> _SINK_
<org.hibernate.engine.query.QueryPlanCache: void <clinit>()> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqldayofyear(java.util.List)> -> _SINK_
<com.sforce.soap.enterprise.QueryAllResponse_element: void write(javax.xml.namespace.QName,com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxIndexLength()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setURL(java.lang.String,java.net.URL)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: int getQueryTimeout()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Milestone__c: void setProject_Logs__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean isTriggerGroupPaused(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsSchemasInPrivilegeDefinitions()> -> _SINK_
<org.postgresql.util.PGobject: void setValue(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsCorrelatedSubqueries()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$20: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.hql.ast.tree.InsertStatement: org.hibernate.hql.ast.tree.SelectClause getSelectClause()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.Criterion getFunctionCriterion(gov.nih.nci.cananolab.dto.particle.CompositionQueryBean,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsSubqueriesInComparisons()> -> _SINK_
<java.sql.ResultSet: void updateArray(int,java.sql.Array)> -> _SINK_
<org.hibernate.impl.AbstractSessionImpl: org.hibernate.Query createQuery(java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.CQL2ParameterizedHQL: void processGroup(gov.nih.nci.cagrid.cqlquery.Group,java.lang.StringBuilder,java.util.List,java.util.Stack,gov.nih.nci.cagrid.cqlquery.Object,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<java.sql.Statement: boolean execute(java.lang.String,int)> -> _SINK_
<org.apache.ibatis.datasource.unpooled.UnpooledDataSource: void initializeDriver()> -> _SINK_
<org.postgresql.util.ServerErrorMessage: void <init>(java.lang.String,int)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: org.mmbase.storage.search.Constraint getConstraint()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Milestone__Feed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateDate(int,java.sql.Date)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: int getMaxRows()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$15: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: java.sql.SQLXML createSQLXML()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Time getTime(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: int getFetchSize()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.lang.Object getObject(java.lang.String,java.util.Map)> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: void addJoin(java.lang.String,org.hibernate.type.AssociationType,java.lang.String[])> -> _SINK_
<org.hibernate.persister.entity.UnionSubclassEntityPersister: java.lang.String generateSubquery(org.hibernate.mapping.PersistentClass,org.hibernate.engine.Mapping)> -> _SINK_
<org.hibernate.hql.ast.tree.MethodNode: org.hibernate.dialect.function.SQLFunction getSQLFunction()> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementType: org.hibernate.persister.collection.QueryableCollection getQueryableCollection()> -> _SINK_
<org.postgresql.jdbc3g.AbstractJdbc3gStatement: void setUuid(int,java.util.UUID)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimeLocaleConverter: void <init>()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$30: void execute(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: void setAutoCommit(boolean)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setArray(int,java.sql.Array)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CustomEmail__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.QueryTranslator: java.util.Iterator iterate(org.hibernate.engine.QueryParameters,org.hibernate.event.EventSource)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object hasThisOne(java.lang.Object)> -> _SINK_
<java.sql.ResultSet: java.io.InputStream getBinaryStream(int)> -> _SINK_
<org.hibernate.loader.Loader: java.util.List listIgnoreQueryCache(org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.hibernate.sql.SelectFragment: org.hibernate.sql.SelectFragment setSuffix(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void clearWarnings()> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void orderDirection(antlr.collections.AST)> -> _SINK_
<org.exolab.castor.jdo.Database: boolean isClosed()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.core.Encoding: boolean testAsciiNumbers()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: boolean isReadOnly()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$ConnectionProperty: void setValueAsObject(java.lang.Object)> -> _SINK_
<org.springframework.jdbc.core.namedparam.ParsedSql: void setTotalParameterCount(int)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationService: java.util.List query(gov.nih.nci.system.query.hibernate.HQLCriteria)> -> _SINK_
<org.hibernate.Query: int executeUpdate()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsPositionedUpdate()> -> _SINK_
<gov.nih.nci.security.authorization.domainobjects.ApplicationContext: java.lang.String getDatabaseURL()> -> _SINK_
<org.castor.jdo.engine.DatabaseRegistry: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.EtxIndexCreator: boolean etxIndexExists(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.JDOMappingLoader$1: void <init>(org.exolab.castor.jdo.engine.JDOMappingLoader,java.lang.Class,java.lang.Class)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Quote: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: java.lang.Object checkoutStatement(java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void appendWhereToken(java.lang.String)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeDi(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: void <init>(org.mongodb.morphia.query.QueryImpl,java.lang.String,org.mongodb.morphia.query.CriteriaContainerImpl,boolean)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: byte[] access$900()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: void afterLast()> -> _SINK_
<org.hibernate.type.CompositeCustomType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,boolean[],org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: int getDefaultTransactionIsolation()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getSystemFunctions()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsSchemasInIndexDefinitions()> -> _SINK_
<com.sforce.soap.enterprise.QueryAll_element: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: java.util.Stack access$100(org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: boolean execute(java.lang.String,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String selectTriggerState(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Campaign: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<test.gov.nih.nci.security.instancelevel.InstanceLevelSecurityTest: void testInstanceLevelSecurityForGroups()> -> _SINK_
<java.sql.ResultSet: long getLong(int)> -> _SINK_
<util.jsf.BackBeanError: void fillStackTrace(java.lang.Throwable,java.io.PrintWriter)> -> _SINK_
<org.mmbase.module.database.JDBCProbe: void run()> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: int getColumnType(int)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementLookup: void <clinit>()> -> _SINK_
<org.hibernate.hql.ast.exec.AbstractStatementExecutor: void coordinateSharedCacheCleanup(org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeDrs(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsNonNullableColumns()> -> _SINK_
<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addSpecialFields(com.mongodb.DBObject)> -> _SINK_
<org.hibernate.persister.entity.Queryable: java.lang.String propertySelectFragment(java.lang.String,java.lang.String,boolean)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientCallback: java.lang.Object doInSqlMapClient(com.ibatis.sqlmap.client.SqlMapExecutor)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: java.util.Set getUsers(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.stmt.ValueIdentityStatementCacheKey: com.mchange.v2.c3p0.stmt.StatementCacheKey _find(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Connection: int getHoldability()> -> _SINK_
<org.hibernate.mapping.Constraint: java.lang.String sqlConstraintString(org.hibernate.dialect.Dialect,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.endeca.navigation.analytics.FilterNot: java.lang.String toWire()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.QueryModifier: java.lang.String getAttributeNames(int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: byte[] getBytes(int)> -> _SINK_
<org.springframework.jdbc.object.BatchSqlUpdate: int[] flush()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void registerOutParameter(java.lang.String,int,int)> -> _SINK_
<org.hibernate.engine.query.NativeSQLQueryPlan: org.hibernate.loader.custom.sql.SQLCustomQuery getCustomQuery()> -> _SINK_
<org.mmbase.module.database.MultiConnection: boolean checkAfterException()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setDouble(int,double)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Clob getClob(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.SampleQueryBean: java.lang.String getNameType()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Date getDate(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Task__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.StringBuilder appendFlatValue(java.lang.Object,java.lang.StringBuilder)> -> _SINK_
<org.mmbase.module.database.Naming: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.IdentNode: java.lang.String getDisplayText()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void close()> -> _SINK_
<org.postgresql.largeobject.BlobOutputStream: void <init>(org.postgresql.largeobject.LargeObject)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.SQLWarning getWarnings()> -> _SINK_
<javax.persistence.Query: javax.persistence.Query setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Clause gte(java.lang.String,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: byte getByte(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setElideSetAutoCommits(boolean)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void afterLast()> -> _SINK_
<com.mysql.jdbc.StandardSocketFactory: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.hibernate.mapping.SimpleAuxiliaryDatabaseObject: void <init>(java.lang.String,java.lang.String,java.util.HashSet)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean dataDefinitionIgnoredInTransactions()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: java.sql.PreparedStatement newPreparedStatementProxy(java.sql.PreparedStatement,java.lang.String,java.sql.Connection)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$22: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateLong(int,long)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2BlobClob: void assertPosition(long)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean locatorsUpdateCopy()> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: void setReadOnly(boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.BlogForce_Blog__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void aliasedSelectExpr(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean allTablesAreSelectable()> -> _SINK_
<org.hibernate.hql.ast.tree.IdentNode: boolean resolveAsAlias()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.encoding.SDK40EncodingUtils: org.exolab.castor.mapping.Mapping getMapping(org.apache.axis.MessageContext,java.lang.String)> -> _SINK_
<java.sql.Statement: int executeUpdate(java.lang.String,int)> -> _SINK_
<org.postgresql.core.v2.FastpathParameterList: void setIntParameter(int,int)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void addBatch(java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.data.stubs.QueryRequestCqlQuery: void <init>()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: int getInt(java.lang.String)> -> _SINK_
<org.postgresql.core.v2.ConnectionFactoryImpl: org.postgresql.core.ProtocolConnection openConnectionImpl(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties,org.postgresql.core.Logger)> -> _SINK_
<org.hibernate.sql.SelectFragment: org.hibernate.sql.SelectFragment addColumn(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ResultSet: void updateClob(java.lang.String,java.sql.Clob)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Statement getStatement()> -> _SINK_
<org.eclipse.acceleo.engine.internal.evaluation.AcceleoEvaluationVisitor: java.lang.Object switchExpression(org.eclipse.ocl.expressions.OCLExpression)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Profile: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.hql.ast.tree.SqlNode: void setDataType(org.hibernate.type.Type)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String constantToDatePart(java.lang.String)> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.Query: java.lang.String toXML(java.util.Collection)> -> _SINK_
<java.sql.Clob: java.lang.String getSubString(long,int)> -> _SINK_
<org.castor.jdo.util.JDOConfFactory: org.castor.jdo.conf.Database createDatabase(java.lang.String,java.lang.String,org.castor.jdo.conf.Driver,org.castor.jdo.conf.Mapping)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContentDocumentFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: void setHoldability(int)> -> _SINK_
<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.SocketFactory createSocketFactory()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setArray(int,java.sql.Array)> -> _SINK_
<org.hibernate.hql.ast.tree.UnaryLogicOperatorNode: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsOpenStatementsAcrossCommit()> -> _SINK_
<com.mysql.jdbc.Connection: void checkClosed()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateSchedulerState(java.sql.Connection,java.lang.String,long)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLCustomQuery: void <init>(java.lang.String,org.hibernate.engine.query.sql.NativeSQLQueryReturn[],java.util.Collection,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.hibernate.engine.QueryParameters: boolean isCallable()> -> _SINK_
<org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter: java.lang.String determineDatabaseDictionary(org.springframework.orm.jpa.vendor.Database)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: int getOutParameterCount()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Object: java.lang.String getName()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void updateStatement(antlr.collections.AST)> -> _SINK_
<java.sql.ResultSet: boolean absolute(int)> -> _SINK_
<com.mysql.jdbc.NonRegisteringDriver: int getMinorVersionInternal()> -> _SINK_
<org.hibernate.hql.ast.tree.FromElement: boolean hasCacheablePersister()> -> _SINK_
<gov.nih.nci.cananolab.ui.sample.DWRSampleManager: gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean deleteCharacterizationQuery(gov.nih.nci.cananolab.dto.particle.CharacterizationQueryBean)> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: org.hibernate.engine.NamedSQLQueryDefinition getNamedSQLQuery(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: boolean execute(java.lang.String,int)> -> _SINK_
<org.mongodb.morphia.query.QueryResults: java.lang.Iterable fetch()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsMixedCaseIdentifiers()> -> _SINK_
<com.mysql.jdbc.CallableStatement: com.mysql.jdbc.CallableStatement$CallableStatementParam checkIsOutputParam(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: float getFloat(int)> -> _SINK_
<org.hibernate.jdbc.Batcher: void cancelLastQuery()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: void close()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setShort(int,short)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.SortOrder addSortOrder(org.mmbase.storage.search.StepField,int,boolean,int)> -> _SINK_
<org.hibernate.engine.query.QueryPlanCache$HQLQueryPlanKey: void <init>(java.lang.String,boolean,java.util.Map)> -> _SINK_
<org.hibernate.sql.Insert: org.hibernate.sql.Insert addColumn(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.hql.QuerySplitter: java.lang.String[] concreteQueries(java.lang.String,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setAsciiStream(java.lang.String,java.io.InputStream)> -> _SINK_
<org.mmbase.bridge.util.TreeList$TreeItr: int currentDepth()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Ref getRef(int)> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringEncoder$Param: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: boolean wasNull()> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: boolean equals(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setURL(int,java.net.URL)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(java.lang.Object[],java.util.Map)> -> _SINK_
<org.postgresql.jdbc3.PSQLSavepoint: java.lang.String getSavepointName()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$1ProxyCallableStatement: java.sql.ResultSet executeQuery()> -> _SINK_
<com.datastax.driver.core.QueryTrace$Event: void <init>(java.lang.String,long,java.net.InetAddress,int,java.lang.String,com.datastax.driver.core.QueryTrace$1)> -> _SINK_
<org.mmbase.util.functions.ExampleBuilder$4: java.lang.Object getFunctionValue(org.mmbase.util.functions.Parameters)> -> _SINK_
<org.hibernate.type.ByteType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsSubqueriesInIns()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.Statement createStatement(int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection: void addConnectionEventListener(javax.sql.ConnectionEventListener)> -> _SINK_
<org.hibernate.loader.Loader: java.util.List loadEntity(org.hibernate.engine.SessionImplementor,java.lang.Object,java.lang.Object,org.hibernate.type.Type,org.hibernate.type.Type,org.hibernate.persister.entity.EntityPersister)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.AggregatedField addAggregatedField(org.mmbase.storage.search.Step,org.mmbase.bridge.Field,int)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addEqualConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.Boolean)> -> _SINK_
<org.apache.commons.beanutils.ResultSetDynaClass: java.lang.Class loadClass(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void setNumericValue(java.sql.PreparedStatement,int,java.lang.Object,org.mmbase.core.CoreField,org.mmbase.module.core.MMObjectNode)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void closeConnection(java.sql.Connection)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: java.sql.NClob getNClob(java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.Queries: java.util.List addPath(org.mmbase.bridge.Query,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ChooseSqlNode: boolean apply(org.apache.ibatis.builder.xml.dynamic.DynamicContext)> -> _SINK_
<org.mmbase.cache.QueryResultCache: org.mmbase.cache.ChainedReleaseStrategy getReleaseStrategy()> -> _SINK_
<org.mongodb.morphia.query.Shape$Point: com.mongodb.DBObject toDBObject()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementLoad: java.lang.Class class$(java.lang.String)> -> _SINK_
<javax.persistence.NamedQuery: java.lang.String name()> -> _SINK_
<java.sql.Statement: int getUpdateCount()> -> _SINK_
<org.postgresql.core.v3.ProtocolConnectionImpl: void setBackendKeyData(int,int)> -> _SINK_
<com.mysql.jdbc.util.ServerController: boolean runningOnWindows()> -> _SINK_
<org.exolab.castor.xml.Introspector: org.exolab.castor.xml.XMLClassDescriptor generateClassDescriptor(java.lang.Class,java.io.PrintWriter)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.io.Reader getCharacterStream(int)> -> _SINK_
<org.springframework.jdbc.datasource.ConnectionHolder: void setConnection(java.sql.Connection)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsOrderByUnrelated()> -> _SINK_
<org.springframework.jdbc.support.lob.AbstractLobHandler: java.lang.String getClobAsString(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl: org.exolab.castor.jdo.QueryResults execute(org.exolab.castor.mapping.AccessMode,boolean)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: java.lang.String path(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getJdbcCompliantTruncation()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: boolean previous()> -> _SINK_
<com.sforce.soap.enterprise.sobject.BlogForce_Blog__c: void setComments__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: void testQuery_NoResults()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getSchemaTerm()> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: void setReadOnly(boolean)> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder: void GROUP_BY(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setObject(java.lang.String,java.lang.Object,int,int)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: java.util.List getAttributesToGet()> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: org.hibernate.ScrollableResults scroll(org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.String getLogger()> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: antlr.collections.AST createFromFilterElement(antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<org.exolab.castor.persist.spi.AbstractCallQuery: void <init>(java.lang.String,java.lang.Class[],java.lang.Class,int[])> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQuerySpecification: java.util.Set getQuerySpaces()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: boolean absolute(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void registerOutParameter(int,int,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection$TransactionCommandHandler: void <init>(org.postgresql.jdbc2.AbstractJdbc2Connection,org.postgresql.jdbc2.AbstractJdbc2Connection$1)> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapExecutor: java.lang.Object queryForObject(java.lang.String,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setObject(int,java.lang.Object,int,int)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateObject(int,java.lang.Object)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void registerOutParameter(int,int,java.lang.String)> -> _SINK_
<org.mmbase.util.ResourceLoader$NodeConnection: org.mmbase.bridge.Node getResourceNode()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: java.lang.String getNString(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.PushTopic: void setQuery(java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<org.apache.ibatis.type.ShortTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: void close()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.KellyDataLoader: void erase()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Ordering desc(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void clearParameters()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsStatementPooling()> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor$ResultAliasContext: java.lang.String getOwnerAlias(java.lang.String)> -> _SINK_
<org.hibernate.impl.SessionImpl: void afterOperation(boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch$Options: com.datastax.driver.core.RegularStatement setForceNoValues(boolean)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Ref getRef(java.lang.String)> -> _SINK_
<org.hibernate.hql.classic.PreprocessingParser: void end(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void addGroupRoleToProtectionGroup(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<org.apache.http.client.utils.URIUtils: java.net.URI removeDotSegments(java.net.URI)> -> _SINK_
<org.mmbase.bridge.implementation.BasicCloud: java.util.List getClusterNodes(org.mmbase.bridge.Query)> -> _SINK_
<com.mysql.jdbc.Connection: java.util.Calendar getSessionLockedCalendar()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: java.sql.RowId getRowId(java.lang.String)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: int delete(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$1WrapperStatementHelper: void doClose()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: int getFormat(int)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: java.sql.SQLWarning getWarnings()> -> _SINK_
<org.hibernate.hql.QueryTranslator: org.hibernate.ScrollableResults scroll(org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.CompositionQueryBean: java.lang.String getCompositionType()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: com.mysql.jdbc.ResultSet serverExecute(int,boolean,boolean,com.mysql.jdbc.Field[])> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.QueryImpl: void validate(gov.nih.nci.logging.api.applicationservice.SearchCriteria)> -> _SINK_
<org.acegisecurity.acls.jdbc.BasicLookupStrategy: void access$000(org.acegisecurity.acls.jdbc.BasicLookupStrategy,java.util.Map,java.sql.ResultSet)> -> _SINK_
<org.apache.ibatis.type.ClobTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<org.quartz.impl.jdbcjobstore.SimpleSemaphore: void releaseLock(java.sql.Connection,java.lang.String)> -> _SINK_
<org.hibernate.id.IdentityGenerator$InsertSelectDelegate: java.sql.PreparedStatement prepare(java.lang.String,org.hibernate.engine.SessionImplementor)> -> _SINK_
<gov.nih.nci.cagrid.data.stubs.QueryRequestCqlQuery: void setCQLQuery(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<com.amazonaws.services.datapipeline.DataPipelineAsyncClient: java.util.concurrent.Future queryObjectsAsync(com.amazonaws.services.datapipeline.model.QueryObjectsRequest)> -> _SINK_
<gov.nih.nci.system.web.HTTPQuery: org.jdom.Document XSLTTransformer(org.jdom.Document,java.io.InputStream)> -> _SINK_
<org.postgresql.core.v2.SimpleParameterList: int getParameterCount()> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: void addJoinsForPathExpression(java.util.Vector)> -> _SINK_
<java.sql.ResultSet: boolean last()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$StatementResultHandler: org.postgresql.jdbc2.ResultWrapper getResults()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setOpenActivities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: boolean wasNull()> -> _SINK_
<org.mmbase.util.LocalizedEntryListFactory: void addQuery(java.util.Locale,org.w3c.dom.Document)> -> _SINK_
<com.mysql.jdbc.CharsetMapping: boolean isAliasForSjis(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementFactory: void initializeAndAddFromElement(org.hibernate.hql.ast.tree.FromElement,java.lang.String,java.lang.String,org.hibernate.persister.entity.EntityPersister,org.hibernate.type.EntityType,java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: boolean storesUpperCaseIdentifiers()> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.EtxSqlHandler: boolean hasEtxIndex(org.mmbase.storage.search.StepField)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLTimeoutException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.type.CompositeCustomType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String,org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlleft(java.util.List)> -> _SINK_
<org.springframework.jdbc.object.MappingSqlQuery: java.lang.Object mapRow(java.sql.ResultSet,int,java.lang.Object[],java.util.Map)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate$32: java.lang.Object doInHibernate(org.hibernate.Session)> -> _SINK_
<org.hibernate.hql.classic.WhereParser: void end(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: void write(byte[])> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Predicate: java.lang.Object readResolve()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: boolean execute()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteFiredTriggers(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.String getLoadBalanceStrategy()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setNull(java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.MysqlIO: int getServerMinorVersion()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: void getResultsImpl(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.lang.String,boolean)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object equal(java.lang.Object)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: boolean isDistinct()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: java.lang.String getUser()> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: void checkForBindMarkers(com.datastax.driver.core.querybuilder.Utils$Appendeable)> -> _SINK_
<org.exolab.castor.persist.ClassMolder: java.lang.Object load(org.castor.persist.TransactionContext,org.exolab.castor.persist.OID,org.exolab.castor.persist.DepositBox,org.castor.persist.ProposedEntity,org.exolab.castor.mapping.AccessMode,org.exolab.castor.persist.QueryResults)> -> _SINK_
<com.mysql.jdbc.Connection: com.mysql.jdbc.PreparedStatement clientPrepareStatement(java.lang.String)> -> _SINK_
<org.hibernate.exception.JDBCExceptionHelper: org.hibernate.JDBCException convert(org.hibernate.exception.SQLExceptionConverter,java.sql.SQLException,java.lang.String)> -> _SINK_
<org.postgresql.core.ProtocolConnection: void close()> -> _SINK_
<org.mmbase.bridge.util.HugeNodeListIterator: void <init>(org.mmbase.bridge.Query)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsSubqueriesInComparisons()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl$2: int[] getNamedParameterSqlLocations(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JTANonClusteredSemaphore: boolean obtainLock(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: boolean getMoreResults(int)> -> _SINK_
<com.mysql.jdbc.Field: void setBlobTypeBasedOnLength()> -> _SINK_
<com.mysql.jdbc.StringUtils: char firstNonWsCharUc(java.lang.String,int)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$31: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: void setBytea(int,java.io.InputStream,int)> -> _SINK_
<java.sql.ResultSetMetaData: java.lang.String getColumnTypeName(int)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void resolve(antlr.collections.AST)> -> _SINK_
<org.hibernate.hql.ast.tree.DotNode: void dereferenceCollection(org.hibernate.type.CollectionType,boolean,boolean,java.lang.String,antlr.collections.AST)> -> _SINK_
<org.springframework.jdbc.support.lob.AbstractLobHandler: java.io.InputStream getBlobAsBinaryStream(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: java.lang.String toString()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void prepareArithmeticOperator(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: boolean relative(int)> -> _SINK_
<org.mmbase.servlet.BridgeServlet: org.mmbase.servlet.BridgeServlet$QueryParts readQuery(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void cancel()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.DomainType: java.lang.String[] getSubclassName()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void intoClause(antlr.collections.AST)> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapSession: void setUserConnection(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean relative(int)> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: void setManyTable(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.SearchQuery: int getOffset()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: com.datastax.driver.core.querybuilder.Update$Options using(com.datastax.driver.core.querybuilder.Using)> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator: void nestedFromFragment(antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void scanForAndThrowDataTruncation()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxTablesInSelect()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseUnbufferedInput()> -> _SINK_
<org.hibernate.stat.Statistics: long getQueryCacheHitCount()> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryConfigurer: org.mmbase.bridge.util.xml.query.QueryDefinition getQueryDefinition()> -> _SINK_
<org.mmbase.cache.BetterStrategy: boolean doEvaluate(org.mmbase.core.event.RelationEvent,org.mmbase.storage.search.SearchQuery,java.util.List)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: int getMaxStatementLength()> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQueryNonScalarReturn: java.util.Map getPropertyResultsMap()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateCharacterStream(int,java.io.Reader,long)> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteria: java.lang.String getTargetObjectName()> -> _SINK_
<org.postgresql.core.ParameterList: void setBinaryParameter(int,byte[],int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert: com.datastax.driver.core.querybuilder.Insert value(java.lang.String,java.lang.Object)> -> _SINK_
<gov.nih.nci.system.query.example.ExampleQuery: void <init>(java.lang.Object)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlright(java.util.List)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$64: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl$1: void <init>(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.mmbase.storage.search.implementation.database.MSSqlSqlHandler: void <init>()> -> _SINK_
<org.hibernate.engine.QueryParameters: void <clinit>()> -> _SINK_
<org.mmbase.module.database.DatabaseSupportInformix: void initConnection(java.sql.Connection)> -> _SINK_
<org.mongodb.morphia.query.MorphiaKeyIterator: org.mongodb.morphia.Key convertItem(com.mongodb.DBObject)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.exception.ViolatedConstraintNameExtracter: java.lang.String extractConstraintName(java.sql.SQLException)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl notEqual(java.lang.Object)> -> _SINK_
<org.hibernate.connection.DatasourceConnectionProvider: java.sql.Connection getConnection()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Candidate__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Time getTime(java.lang.String,java.util.Calendar)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: com.amazonaws.services.dynamodbv2.model.QueryRequest withIndexName(java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiConnection: void setAutoCommit(boolean)> -> _SINK_
<org.mongodb.morphia.query.MorphiaIterator: long getMapperTime()> -> _SINK_
<org.hibernate.mapping.Table: java.lang.String sqlDropString(org.hibernate.dialect.Dialect,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: boolean absolute(int)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate$1: java.lang.Object readFromSession(oracle.toplink.sessions.Session)> -> _SINK_
<com.mysql.jdbc.MysqlParameterMetadata: void <init>(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.JobDetail selectJobDetail(java.sql.Connection,java.lang.String,java.lang.String,org.quartz.spi.ClassLoadHelper)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: char charAt(char[],int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.math.BigDecimal getBigDecimal(java.lang.String)> -> _SINK_
<com.amazonaws.services.cloudfront.model.transform.CreateDistributionRequestMarshaller: com.amazonaws.Request marshall(com.amazonaws.services.cloudfront.model.CreateDistributionRequest)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: org.hibernate.sql.JoinFragment createJoin(int[],java.lang.String)> -> _SINK_
<org.hibernate.criterion.SimpleProjection: java.lang.String toGroupSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<java.sql.ResultSet: void afterLast()> -> _SINK_
<org.hibernate.loader.Loader: void readCollectionElements(java.lang.Object[],java.sql.ResultSet,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: int getMaxFieldSize()> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: void writeV3Value(int,org.postgresql.core.PGStream)> -> _SINK_
<org.apache.ibatis.logging.jdbc.ResultSetLogger: java.sql.ResultSet newInstance(java.sql.ResultSet)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Time getTimeFromString(java.lang.String,java.util.Calendar,int,java.util.TimeZone,boolean)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Array getArray(int)> -> _SINK_
<org.hibernate.engine.query.OrdinalParameterDescriptor: void <init>(int,org.hibernate.type.Type,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void prepareVersioned(antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<org.hibernate.hql.ast.util.SessionFactoryHelper: org.hibernate.persister.entity.Queryable findQueryableUsingImports(org.hibernate.engine.SessionFactoryImplementor,java.lang.String)> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$3: void <init>(org.exolab.castor.mapping.xml.SqlDescriptor)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setDf(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<org.castor.jdo.util.JDOUtils: void closeConnection(java.sql.Connection)> -> _SINK_
<org.hibernate.persister.collection.QueryableCollection: java.lang.String selectFragment(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.sql.Select: org.hibernate.sql.Select setFromClause(java.lang.String)> -> _SINK_
<com.mysql.jdbc.util.ReadAheadInputStream: int readFromUnderlyingStreamIfNecessary(byte[],int,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: com.datastax.driver.core.RegularStatement setForceNoValues(boolean)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<org.hibernate.engine.query.QueryPlanCache: void <init>(org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<com.mysql.jdbc.util.BaseBugReport: java.sql.Connection getNewConnection()> -> _SINK_
<com.mysql.jdbc.NonRegisteringDriver: int getMajorVersionInternal()> -> _SINK_
<org.springframework.jdbc.core.support.SqlLobValue: void <init>(byte[],org.springframework.jdbc.support.lob.LobHandler)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: void close()> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl: org.exolab.castor.jdo.QueryResults execute()> -> _SINK_
<org.springframework.jdbc.support.lob.DefaultLobHandler: java.io.InputStream getBlobAsBinaryStream(java.sql.ResultSet,int)> -> _SINK_
<org.castor.jdo.engine.DatabaseRegistry: void loadDatabase(org.castor.jdo.conf.JdoConf,org.xml.sax.EntityResolver,java.lang.ClassLoader,java.lang.String)> -> _SINK_
<org.springframework.jdbc.object.SqlCall: boolean isFunction()> -> _SINK_
<com.datastax.driver.core.Requests$Query: void <init>(java.lang.String,com.datastax.driver.core.Requests$QueryProtocolOptions)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void caseExpr(antlr.collections.AST)> -> _SINK_
<org.springframework.jdbc.object.SqlUpdate: int update(long)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void addBatch()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Time getTime(int,java.util.Calendar)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Project__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.engine.query.HQLQueryPlan: java.util.Set getQuerySpaces()> -> _SINK_
<com.mchange.v2.sql.SqlUtils: java.sql.SQLException toSQLException(java.lang.Throwable)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.sql.Sybase11JoinFragment: org.hibernate.sql.JoinFragment copy()> -> _SINK_
<org.springframework.jdbc.core.SqlRowSetResultSetExtractor: org.springframework.jdbc.support.rowset.SqlRowSet createSqlRowSet(java.sql.ResultSet)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateNull(java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: java.lang.String getAttribute(org.w3c.dom.Element,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int deleteCronTrigger(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: org.hibernate.hql.ast.HqlSqlWalker getWalker()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.io.Reader getCharacterStream(java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: boolean isLast()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNso(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.net.URL getURL(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.JobDetail retrieveJob(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.PointbaseDelegate: java.lang.Object getJobDetailFromBlob(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: void closeQueryStatement(java.sql.PreparedStatement)> -> _SINK_
<org.hibernate.persister.entity.SingleTableEntityPersister: void addDiscriminatorToSelect(org.hibernate.sql.SelectFragment,java.lang.String,java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setDimSearchNavRecordStructureExpr(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Options: boolean isTracing()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setURL(int,java.net.URL)> -> _SINK_
<org.hibernate.engine.query.ParameterMetadata: void <init>(org.hibernate.engine.query.OrdinalParameterDescriptor[],java.util.Map)> -> _SINK_
<org.postgresql.util.PGmoney: void <init>(double)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate: java.lang.Object executeNamedQuery(java.lang.Class,java.lang.String)> -> _SINK_
<org.hibernate.sql.MckoiCaseFragment: void <init>()> -> _SINK_
<org.hibernate.hql.classic.WhereParser: boolean continuePathExpression(java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.apache.commons.beanutils.converters.SqlDateConverter: void <init>()> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringDecoder: void <init>(java.net.URI)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setDate(int,java.sql.Date,java.util.Calendar)> -> _SINK_
<org.springframework.jdbc.datasource.JdbcTransactionObjectSupport: void releaseSavepoint(java.lang.Object)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLHelper: int numberOfExtendingClassDescriptors(org.exolab.castor.jdo.engine.JDOClassDescriptor)> -> _SINK_
<java.sql.PreparedStatement: void setClob(int,java.sql.Clob)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$11: void <init>(org.springframework.orm.ibatis.SqlMapClientTemplate,java.lang.String,java.lang.Object)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeAn(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Group: gov.nih.nci.cagrid.cqlquery.Attribute getAttribute(int)> -> _SINK_
<org.mmbase.module.corebuilders.InsRel: org.mmbase.module.core.MMObjectNode getRelationNode(int,int,int)> -> _SINK_
<org.hibernate.hql.classic.SelectParser: boolean aggregateFuncNoArgsHasParenthesis(java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getDriverMinorVersion()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNrcs(java.lang.String)> -> _SINK_
<java.sql.Timestamp: int getNanos()> -> _SINK_
<org.hibernate.persister.collection.QueryableCollection: java.lang.String[] getIndexColumnNames(java.lang.String)> -> _SINK_
<com.mysql.jdbc.util.ReadAheadInputStream: int available()> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: void commit()> -> _SINK_
<org.apache.ibatis.jdbc.SqlRunner: int delete(java.lang.String,java.lang.Object[])> -> _SINK_
<org.mmbase.module.database.MultiPool: void finalize()> -> _SINK_
<com.endeca.navigation.ENEQueryResults: void setNavigation(com.endeca.navigation.Navigation)> -> _SINK_
<org.postgresql.largeobject.BlobOutputStream: void write(byte[],int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: void setQueryTimeout(int)> -> _SINK_
<org.mongodb.morphia.query.CriteriaContainerImpl: void setQuery(org.mongodb.morphia.query.QueryImpl)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Quote: void setTasks(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.acegisecurity.acls.jdbc.JdbcMutableAclService$1: void setValues(java.sql.PreparedStatement,int)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationService: java.util.List query(gov.nih.nci.system.query.hibernate.HQLCriteria,java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: int getFetchDirection()> -> _SINK_
<gov.nih.nci.cagrid.cqlresultset.CQLQueryResults: gov.nih.nci.cagrid.cqlresultset.CQLObjectResult[] getObjectResult()> -> _SINK_
<org.hibernate.cfg.HbmBinder: void bindJoin(org.dom4j.Element,org.hibernate.mapping.Join,org.hibernate.cfg.Mappings,java.util.Map)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.math.BigDecimal getBigDecimal(java.lang.String)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion propertyLt(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.postgresql.jdbc2.ResultWrapper: void <init>(int,long)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.UpdateResults update(org.mongodb.morphia.query.Query,org.mongodb.morphia.query.UpdateOperations,boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsOrderByUnrelated()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: double getDouble(java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.'annotation'.ProviderSqlSource: void <init>(org.apache.ibatis.session.Configuration,java.lang.Object)> -> _SINK_
<org.postgresql.fastpath.Fastpath: void <init>(org.postgresql.core.BaseConnection)> -> _SINK_
<org.apache.ibatis.type.IntegerTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate: void prepareCriteria(org.hibernate.Criteria)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void setCursorName(java.lang.String)> -> _SINK_
<org.postgresql.core.VisibleBufferedInputStream: int scanCStringLength()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: int getInt(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void registerOutParameter(int,int,int)> -> _SINK_
<org.springframework.scheduling.quartz.LocalDataSourceJobStore$2: java.sql.Connection getConnection()> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: com.amazonaws.services.dynamodb.model.Condition getRangeKeyCondition()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: int getParameterIndexOffset()> -> _SINK_
<org.apache.ibatis.session.SqlSessionFactoryBuilder: org.apache.ibatis.session.SqlSessionFactory build(java.io.Reader,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean usesLocalFiles()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setObject(int,java.lang.Object)> -> _SINK_
<org.quartz.impl.jdbcjobstore.MSSQLDelegate: java.lang.Object getObjectFromBlob(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.hibernate.loader.OuterJoinableAssociation: void addJoins(org.hibernate.sql.JoinFragment)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: int getStatementType()> -> _SINK_
<com.mysql.jdbc.BlobFromLocator$LocatorInputStream: void <init>(com.mysql.jdbc.BlobFromLocator)> -> _SINK_
<org.castor.jdo.conf.DatabaseDescriptor$3: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setProfileSql(boolean)> -> _SINK_
<com.mysql.jdbc.SQLError: java.lang.String mysqlToSqlState(int,boolean)> -> _SINK_
<java.sql.Date: java.sql.Date valueOf(java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.data.bdt.client.BDTDataServiceClient: gov.nih.nci.cagrid.bdt.client.BulkDataHandlerClient bdtQuery(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationServiceFacade: java.util.List executeBatchQuery(java.util.List)> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator: java.util.Iterator getIterator()> -> _SINK_
<org.hibernate.event.FlushEntityEvent: boolean hasDatabaseSnapshot()> -> _SINK_
<com.mysql.jdbc.ResultSet: int getInt(int)> -> _SINK_
<org.hibernate.criterion.CriteriaQuery: java.lang.String[] getColumnsUsingProjection(org.hibernate.Criteria,java.lang.String)> -> _SINK_
<com.datastax.driver.core.RequestHandler: void <init>(com.datastax.driver.core.SessionManager,com.datastax.driver.core.RequestHandler$Callback,com.datastax.driver.core.Statement)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: boolean getBoolean(int)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void clearBatch()> -> _SINK_
<org.hibernate.type.CharBooleanType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.hibernate.collection.PersistentSet: java.lang.Object readFrom(java.sql.ResultSet,org.hibernate.persister.collection.CollectionPersister,org.hibernate.loader.CollectionAliases,java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection: java.sql.Connection getCreateNewConnection()> -> _SINK_
<com.sforce.soap.enterprise.sobject.User: void setProject_Expenses_Incurred__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.Connection: void incrementNumberOfPrepares()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsSchemasInProcedureCalls()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean isResultSetClosed()> -> _SINK_
<org.exolab.castor.jdo.JDOManager: void setDatabasePooling(boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool: void close()> -> _SINK_
<org.hibernate.loader.Loader: void readCollectionElement(java.lang.Object,java.io.Serializable,org.hibernate.persister.collection.CollectionPersister,org.hibernate.loader.CollectionAliases,java.sql.ResultSet,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0ImplUtils: com.mchange.v2.c3p0.impl.DbAuth findAuth(java.lang.Object)> -> _SINK_
<org.hibernate.sql.ANSIJoinFragment: void addJoin(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],int)> -> _SINK_
<org.apache.ibatis.migration.commands.BaseCommand: java.lang.String generateAppliedTimeStampAsString()> -> _SINK_
<org.hibernate.mapping.Join: void createPrimaryKey()> -> _SINK_
<gov.nih.nci.security.dao.Queries: java.sql.PreparedStatement getQueryForAccessibleGroupsWithAttribute(java.lang.String,java.lang.String,java.lang.String,int,java.sql.Connection)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateTriggerStatesFromOtherStates(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.orm.hibernate3.LocalSessionFactoryBean: void executeSchemaScript(java.sql.Connection,java.lang.String[])> -> _SINK_
<java.sql.ResultSet: java.sql.Time getTime(int)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLTransientException: void <init>(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.BlogForce_Comment__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet$PrimaryKey: void <init>(org.postgresql.jdbc2.AbstractJdbc2ResultSet,int,java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: void appendRelationConstraints(java.lang.StringBuffer,org.mmbase.storage.search.RelationStep,boolean)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setCharacter(int,char)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: void execute(org.postgresql.core.v2.V2Query,org.postgresql.core.v2.SimpleParameterList,org.postgresql.core.ResultHandler,int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: boolean getMoreResults()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2BlobClob$LOIterator: byte next()> -> _SINK_
<org.postgresql.core.v2.ConnectionFactoryImpl: org.postgresql.core.PGStream enableSSL(org.postgresql.core.PGStream,boolean,java.util.Properties,org.postgresql.core.Logger)> -> _SINK_
<org.mmbase.storage.search.SearchQuery: java.util.List getSortOrders()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: boolean isSigned(int)> -> _SINK_
<org.hibernate.hql.ast.tree.SelectClause: void renderScalarSelects(org.hibernate.hql.ast.tree.SelectExpression[],org.hibernate.hql.ast.tree.FromClause)> -> _SINK_
<org.springframework.jdbc.core.namedparam.AbstractSqlParameterSource: void registerSqlType(java.lang.String,int)> -> _SINK_
<org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.Query: org.exolab.castor.jdo.QueryResults execute(org.exolab.castor.mapping.AccessMode)> -> _SINK_
<org.acegisecurity.acls.jdbc.BasicLookupStrategy$2: void setValues(java.sql.PreparedStatement)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: boolean checkPermission(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.CQLResultsCreationUtil: gov.nih.nci.cagrid.cqlresultset.CQLQueryResults createObjectResults(java.util.List,java.lang.String,gov.nih.nci.cagrid.data.mapping.Mappings)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: void setCatalog(java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: void setSelect(com.amazonaws.services.dynamodbv2.model.Select)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: void setPortNumber(int)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: java.util.Stack access$200(org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource)> -> _SINK_
<org.exolab.castor.persist.spi.AbstractCallQuery: void execute(java.lang.Object,org.exolab.castor.mapping.AccessMode)> -> _SINK_
<gov.nih.nci.logging.api.persistence.LogMessageDAOImpl: java.util.Collection retrieveServer()> -> _SINK_
<com.mysql.jdbc.Statement: boolean execute(java.lang.String,int[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setFloat(java.lang.String,float)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxIndexLength()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setClob(int,java.sql.Clob)> -> _SINK_
<gov.nih.nci.security.authentication.helper.RDBMSHelper: boolean authenticateAndObtainSubject(java.sql.Connection,java.util.Hashtable,java.lang.String,java.lang.String,javax.security.auth.Subject)> -> _SINK_
<org.postgresql.ssl.jdbc4.LibPQFactory: void throwKeyManagerException()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setOpportunityLineItems(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateAccessor: org.springframework.dao.DataAccessException convertJdbcAccessException(java.sql.SQLException)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateObject(int,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.Connection: void setSessionVariables()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: int findColumn(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Where: com.datastax.driver.core.Statement setConsistencyLevel(com.datastax.driver.core.ConsistencyLevel)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxColumnsInSelect()> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: org.hibernate.classic.Session openSession(java.sql.Connection)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setDate(java.lang.String,java.sql.Date,java.util.Calendar)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLCustomQuery$ParserContext: org.hibernate.persister.entity.SQLLoadable getEntityPersisterByAlias(java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: boolean isAfterLast()> -> _SINK_
<org.postgresql.core.v3.V3ParameterList: void convertFunctionOutParameters()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: org.mongodb.morphia.DatastoreImpl getDatastore()> -> _SINK_
<com.endeca.navigation.analytics.AnalyticsQuery: java.lang.String escape(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: boolean getBoolean(int)> -> _SINK_
<org.exolab.castor.persist.ClassMolderHelper: boolean isEquals(java.lang.Object,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ResultSet: double getDoubleInternal(java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfo: void checkBounds(int)> -> _SINK_
<org.mongodb.morphia.query.MorphiaKeyIterator: void <init>(com.mongodb.DBCursor,org.mongodb.morphia.mapping.Mapper,java.lang.Class,java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$6: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int selectNumTriggersForJob(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.stat.Statistics: long getQueryCachePutCount()> -> _SINK_
<org.postgresql.core.VisibleBufferedInputStream: long skip(long)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: boolean isValidatingNames()> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$7: java.lang.Object getValue(java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Log__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsOpenCursorsAcrossCommit()> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.transform.QueryRequestMarshaller: java.lang.Object marshall(java.lang.Object)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.SQLWarning getWarnings()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Array getArray(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$IntegerConnectionProperty: void <init>(com.mysql.jdbc.ConnectionProperties,java.lang.String,int,int,int,java.lang.String,java.lang.String,java.lang.String,int)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLQuery: void execute(java.lang.Object,org.exolab.castor.mapping.AccessMode,boolean)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.CQL2ParameterizedHQL: void processTarget(gov.nih.nci.cagrid.cqlquery.Object,java.lang.StringBuilder,java.util.List,boolean)> -> _SINK_
<org.mmbase.module.database.MultiConnection: int getUsage()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setEvents(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.type.AnyType: int[] sqlTypes(org.hibernate.engine.Mapping)> -> _SINK_
<org.postgresql.jdbc2.ResultWrapper: java.sql.ResultSet getResultSet()> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.sql.CallableStatement getCallableStatement(java.sql.Connection,java.lang.String,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getDatabaseMajorVersion()> -> _SINK_
<org.postgresql.core.Parser: int parseBlockComment(char[],int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: void commit()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DB2v7Delegate: void setBoolean(java.sql.PreparedStatement,int,boolean)> -> _SINK_
<gov.nih.nci.cananolab.service.protocol.helper.ProtocolServiceHelper: gov.nih.nci.cananolab.domain.common.Protocol findProtocolById(java.lang.String)> -> _SINK_
<org.castor.jdo.conf.DatabaseChoiceDescriptor$1: void <init>(org.castor.jdo.conf.DatabaseChoiceDescriptor)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setURL(int,java.net.URL)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void registerOutParameter(int,int,java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSetMetaData: boolean isWrapperFor(java.lang.Class)> -> _SINK_
<org.castor.persist.AbstractTransactionContext: void walkObjectsToBeCreated()> -> _SINK_
<org.apache.ibatis.executor.resultset.NestedResultSetHandler: org.apache.ibatis.mapping.ResultMap getNestedResultMap(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mysql.jdbc.util.ServerController: java.util.Properties getSystemProperties()> -> _SINK_
<org.postgresql.geometric.PGbox: boolean equals(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setNull(java.lang.String,int,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setFloat(java.lang.String,float)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.io.InputStream getBinaryStream(java.lang.String)> -> _SINK_
<gov.nih.nci.security.dao.Queries: java.sql.PreparedStatement getQueryForCheckPermissionForOnlyGroup(java.lang.String,java.lang.String,java.lang.String,int,java.sql.Connection)> -> _SINK_
<org.postgresql.core.PGStream: byte[] Receive(int)> -> _SINK_
<com.endeca.navigation.ENEQueryResults: void setTotalNetworkAndComputeTime(double)> -> _SINK_
<org.mmbase.util.LocalizedEntryListFactory$2: void findNext()> -> _SINK_
<org.postgresql.core.v3.ProtocolConnectionImpl: org.postgresql.util.HostSpec getHostSpec()> -> _SINK_
<org.mmbase.storage.implementation.database.InformixStorageManager: void <clinit>()> -> _SINK_
<org.apache.ibatis.executor.statement.RoutingStatementHandler: org.apache.ibatis.mapping.BoundSql getBoundSql()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager$InputStreamBlob: byte[] getBytes(long,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setByte(java.lang.String,byte)> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator$SqlWriter: void clause(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setByte(int,byte)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Builder: com.datastax.driver.core.querybuilder.Select 'from'(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSource: java.io.PrintWriter getLogWriter()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Date getDateFromString(java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: java.lang.Throwable getEventCreationPoint()> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: void compile(java.lang.String,java.util.Map,boolean)> -> _SINK_
<org.hibernate.sql.SelectFragment: org.hibernate.sql.SelectFragment addColumns(java.lang.String,java.lang.String[])> -> _SINK_
<org.postgresql.copy.CopyManager: void <init>(org.postgresql.core.BaseConnection)> -> _SINK_
<com.mysql.jdbc.Statement: int executeUpdate(java.lang.String)> -> _SINK_
<javax.persistence.spi.PersistenceUnitInfo: javax.sql.DataSource getNonJtaDataSource()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setTime(int,java.sql.Time,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<org.exolab.castor.jdo.oql.InvalidCharException: void <init>(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setClob(int,java.sql.Clob)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void registerOutParameter(java.lang.String,int,java.lang.String)> -> _SINK_
<org.mmbase.bridge.implementation.BasicCloud: void checkNodes(org.mmbase.bridge.implementation.BasicNodeList,org.mmbase.bridge.Query)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position__c: void setR00N30000002btlAEAQ__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: int calcRemainingDataLength(int[],int,int,int)> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder: void OR()> -> _SINK_
<org.hibernate.jdbc.JDBCContext: java.sql.Connection borrowConnection()> -> _SINK_
<com.amazonaws.services.dynamodbv2.AmazonDynamoDBAsyncClient$18: com.amazonaws.services.dynamodbv2.model.QueryResult call()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addSortOrder(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.Driver: long timeout(java.util.Properties)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: int getInt(java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.UnionSubclassEntityPersister: void <init>(org.hibernate.mapping.PersistentClass,org.hibernate.cache.CacheConcurrencyStrategy,org.hibernate.engine.SessionFactoryImplementor,org.hibernate.engine.Mapping)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: void enableStreamingResults()> -> _SINK_
<org.postgresql.core.UTF8Encoding: java.lang.String decode(byte[],int,int)> -> _SINK_
<org.mongodb.morphia.query.CriteriaContainerImpl: void addTo(com.mongodb.DBObject)> -> _SINK_
<com.mysql.jdbc.Blob: long position(byte[],long)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.lang.String getCursorName()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ParameterMetaData: void <init>(org.postgresql.core.BaseConnection,int[])> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: java.util.Set getProtectionElementPrivilegeContextForUser(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.User: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.mapping.UniqueKey: java.lang.String sqlCreateString(org.hibernate.dialect.Dialect,org.hibernate.engine.Mapping,java.lang.String,java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQuery: boolean getNavAllRefinements()> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContentDocumentFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addEqualConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.Field,java.lang.Integer)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection: java.sql.SQLException cleanupUncachedActiveStatements()> -> _SINK_
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int)> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.ERecSortKeyList getAggrERecActiveSortKeys()> -> _SINK_
<org.postgresql.core.Field: java.lang.String toString()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setCachePreparedStatements(boolean)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.lang.Object getObjectImpl(int,java.util.Map)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeN(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.hibernate.engine.NamedSQLQueryDefinition: java.util.List getQuerySpaces()> -> _SINK_
<org.castor.jdo.engine.DataSourceConnectionFactory: java.sql.Connection createConnection()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateLong(java.lang.String,long)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setFetchDirection(int)> -> _SINK_
<org.hibernate.loader.custom.CustomLoader$Metadata: int getColumnCount()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Where: java.lang.String toString()> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationServiceFacade: java.util.List getObjects(java.lang.Object)> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: void addInnerJoin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: void setUser(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setServerTimezone(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.CriteriaContainerImpl: org.mongodb.morphia.query.CriteriaContainer or(org.mongodb.morphia.query.Criteria[])> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Predicate: void <clinit>()> -> _SINK_
<org.hibernate.impl.SessionImpl: java.util.List find(java.lang.String,java.lang.Object[],org.hibernate.type.Type[])> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl$OQLEnumeration: int size()> -> _SINK_
<org.postgresql.core.v2.FastpathParameterList: void checkAllParametersSet()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setBlob(int,java.sql.Blob)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.math.BigDecimal getBigDecimal(java.lang.String,int)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementStore: void <clinit>()> -> _SINK_
<org.acegisecurity.userdetails.jdbc.JdbcDaoImpl: org.acegisecurity.userdetails.UserDetails loadUserByUsername(java.lang.String)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: void deleteRows(org.hibernate.collection.PersistentCollection,java.io.Serializable,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.apache.commons.beanutils.ResultSetIterator: void advance()> -> _SINK_
<org.hibernate.type.MetaType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String,org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<org.postgresql.largeobject.LargeObject: void truncate(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getSchemaTerm()> -> _SINK_
<org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy: void checkDefaultConnectionProperties(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setNull(java.lang.String,int)> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: int getSQLType(java.lang.String)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl$2: void handleError(java.sql.SQLException)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.castor.jdo.conf.DatabaseDescriptor$1: void <init>(org.castor.jdo.conf.DatabaseDescriptor)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String[] getCollectionPropertyColumnAliases(java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTransactionManager: boolean isLazyDatabaseTransaction()> -> _SINK_
<org.apache.ibatis.builder.MapperBuilderAssistant: org.apache.ibatis.mapping.ResultMapping assembleResultMapping(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class,org.apache.ibatis.type.JdbcType,java.lang.String,java.lang.String,java.lang.Class,java.util.List)> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: void unprepare()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void identifier(antlr.collections.AST)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl$3: void <init>(org.postgresql.core.v2.QueryExecutorImpl,org.postgresql.core.ResultHandler)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String generateUpdateString(boolean[],int,java.lang.Object[],boolean)> -> _SINK_
<java.sql.PreparedStatement: void setArray(int,java.sql.Array)> -> _SINK_
<net.sf.ehcache.constructs.web.filter.Filter: void logThrowable(java.lang.Throwable,javax.servlet.http.HttpServletRequest)> -> _SINK_
<org.springframework.jdbc.core.ParameterMapper: java.util.Map createMap(java.sql.Connection)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLFieldInfo: java.lang.String getTableName()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: int[] getForeignKeyActions(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void execSQLUpdate(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Where: java.lang.String getKeyspace()> -> _SINK_
<org.exolab.castor.persist.spi.PersistenceFactory: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: org.hibernate.classic.Session openSession(java.sql.Connection,org.hibernate.Interceptor)> -> _SINK_
<com.endeca.navigation.PartialENEQueryException: void <init>(java.lang.String)> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapExecutor: java.lang.Object insert(java.lang.String,java.lang.Object)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: int getHoldability()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: int getFastInt(int)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimestampLocaleConverter: void <init>(java.util.Locale)> -> _SINK_
<org.apache.ibatis.jdbc.ScriptRunner: void executeLineByLine(java.io.Reader)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: java.lang.String toString()> -> _SINK_
<org.exolab.castor.jdo.engine.TxDatabaseMap: org.exolab.castor.jdo.engine.GlobalDatabaseImpl get(javax.transaction.Transaction)> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.QueryResultPage: void setLastEvaluatedKey(com.amazonaws.services.dynamodb.model.Key)> -> _SINK_
<java.sql.Clob: void truncate(long)> -> _SINK_
<org.mmbase.module.database.MultiStatement: void setEscapeProcessing(boolean)> -> _SINK_
<org.hibernate.tool.hbm2ddl.TableMetadata: void <init>(java.sql.ResultSet,java.sql.DatabaseMetaData,boolean)> -> _SINK_
<org.postgresql.util.PGInterval: void add(java.util.Calendar)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: void unregisterSynchronizables()> -> _SINK_
<org.hibernate.persister.entity.Queryable: java.lang.String[] getConstraintOrderedTableNameClosure()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseTimezone(boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$18: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<org.hibernate.engine.JoinSequence: org.hibernate.sql.JoinFragment toJoinFragment()> -> _SINK_
<org.hibernate.sql.Insert: java.lang.String toStatementString()> -> _SINK_
<gov.nih.nci.security.authorization.domainobjects.FilterClause: java.lang.String getGeneratedSQLForGroup()> -> _SINK_
<gov.nih.nci.cananolab.service.security.SecurityService: java.lang.String getGroupRole(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: short getShort(java.lang.String)> -> _SINK_
<org.hibernate.engine.SessionFactoryImplementor: org.hibernate.dialect.function.SQLFunctionRegistry getSqlFunctionRegistry()> -> _SINK_
<com.mysql.jdbc.Buffer: void writeLong(long)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$ProxyConnectionInvocationHandler: java.lang.Object doRawConnectionOperation(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.Candidate__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.io.InputStream getBinaryStream(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateObject(java.lang.String,java.lang.Object)> -> _SINK_
<gov.nih.nci.cananolab.service.admin.impl.OwnershipTransferServiceImpl: java.util.List loadCharacterizations(java.lang.String)> -> _SINK_
<org.hibernate.criterion.ProjectionList: org.hibernate.type.Type[] getTypes(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.mmbase.cache.QueryResultCache: int nodeChanged(org.mmbase.core.event.Event)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$1ProxyCallableStatement: void <init>(com.mchange.v2.c3p0.impl.C3P0PooledConnection,java.sql.CallableStatement,java.sql.Statement,com.mchange.v2.c3p0.impl.C3P0PooledConnection$StatementProxyingSetManagedResultSet,java.util.Set,boolean,java.sql.Connection)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.CharacterizationQueryBean: void <init>()> -> _SINK_
<com.endeca.navigation.analytics.ExprConstant: java.lang.String toWire()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.math.BigDecimal getBigDecimal(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setTime(java.lang.String,java.sql.Time,java.util.Calendar)> -> _SINK_
<au.com.bytecode.opencsv.ResultSetHelper: java.lang.String[] getColumnNames(java.sql.ResultSet)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.lang.String getString(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsSelectForUpdate()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void addBatch(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsOpenStatementsAcrossRollback()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: float getFloat(int)> -> _SINK_
<org.postgresql.core.BaseConnection: java.sql.ResultSet execSQLQuery(java.lang.String,int,int)> -> _SINK_
<org.apache.commons.beanutils.JDBCDynaClass: java.lang.Class loadClass(java.lang.String)> -> _SINK_
<org.hibernate.loader.collection.SubselectCollectionLoader: void <init>(org.hibernate.persister.collection.QueryableCollection,java.lang.String,java.util.Collection,org.hibernate.engine.QueryParameters,java.util.Map,org.hibernate.engine.SessionFactoryImplementor,java.util.Map)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: int getUpdateCount()> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void processNotifies()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: short getShort(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator: void <init>(org.springframework.jdbc.support.SQLErrorCodes)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.Map extractReturnedResultSets(java.sql.CallableStatement,java.util.List,int)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: byte getByte(java.lang.String)> -> _SINK_
<org.hibernate.loader.collection.SubselectOneToManyLoader: void <init>(org.hibernate.persister.collection.QueryableCollection,java.lang.String,java.util.Collection,org.hibernate.engine.QueryParameters,java.util.Map,org.hibernate.engine.SessionFactoryImplementor,java.util.Map)> -> _SINK_
<javax.jdo.PersistenceManager: javax.jdo.Query newQuery(java.lang.Class)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String generateSelectSizeString(boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxTableNameLength()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2: void setPricebookEntries(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.lang.Object getObject(int)> -> _SINK_
<org.hibernate.impl.SessionImpl: java.util.Iterator iterate(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.SearchQuery: int getMaxNumber()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.math.BigDecimal getBigDecimal(int,int)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setURL(java.lang.String,java.net.URL)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimeLocaleConverter: void <init>(java.lang.Object,java.util.Locale,boolean)> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeQuery: void addFields(java.util.Collection)> -> _SINK_
<org.postgresql.core.types.PGFloat: org.postgresql.core.types.PGType castToServerType(java.lang.Float,int)> -> _SINK_
<org.mongodb.morphia.query.Shape: org.mongodb.morphia.query.Shape centerSphere(org.mongodb.morphia.query.Shape$Point,double)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getEmulateLocators()> -> _SINK_
<com.mysql.jdbc.ConnectionFeatureNotAvailableException: void <init>(com.mysql.jdbc.Connection,long,java.lang.Exception)> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: int readInt(byte[],int)> -> _SINK_
<org.mmbase.storage.implementation.database.InformixStorageManager: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.hibernate.loader.Loader: org.hibernate.engine.EntityKey getOptionalObjectKey(org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.sun.jersey.api.uri.UriComponent: javax.ws.rs.core.MultivaluedMap decodeQuery(java.lang.String,boolean,boolean)> -> _SINK_
<com.datastax.driver.core.QueryTrace$Event: void <init>(java.lang.String,long,java.net.InetAddress,int,java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.io.File getLegacyBinaryFile(org.mmbase.module.core.MMObjectNode,java.lang.String)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate: java.util.List readAll(java.lang.Class,oracle.toplink.queryframework.Call)> -> _SINK_
<org.mmbase.module.database.JDBC: org.mmbase.module.database.MultiConnection getConnection(java.lang.String)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.UpdateTagSupport: java.lang.Class class$(java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.DomainTypesInformationUtil: java.lang.String getAttributeJavaType(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.Statement createStatement(int,int,int)> -> _SINK_
<org.hibernate.id.insert.AbstractReturningDelegate: java.sql.PreparedStatement prepare(java.lang.String,org.hibernate.engine.SessionImplementor)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Object: boolean equals(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: void rollback(java.sql.Savepoint)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: java.util.Map queryForMap(java.lang.String,java.lang.Object,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: org.hibernate.cache.QueryCache getQueryCache(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.OpportunityFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: java.sql.ResultSet getResultSet()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void constant(antlr.collections.AST)> -> _SINK_
<org.postgresql.core.PGStream: void SendInteger2(int)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementCreate: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.hibernate.dialect.IngresDialect: void <init>()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Options: com.datastax.driver.core.querybuilder.Delete$Options and(com.datastax.driver.core.querybuilder.Using)> -> _SINK_
<org.mmbase.storage.search.implementation.database.SqlHandler: java.lang.String toSql(org.mmbase.storage.search.SearchQuery,org.mmbase.storage.search.implementation.database.SqlHandler)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: boolean execute(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setAccountContactRoles(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.sql.QueryJoinFragment: void addJoin(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],int)> -> _SINK_
<java.sql.ResultSet: void moveToCurrentRow()> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: void doCompile(java.util.Map,boolean,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.lang.String getString(java.lang.String)> -> _SINK_
<com.mysql.jdbc.StringUtils: byte[] getBytes(char[],com.mysql.jdbc.SingleByteCharsetConverter,java.lang.String,java.lang.String,boolean)> -> _SINK_
<org.mmbase.storage.search.implementation.database.MSSqlSqlHandler: void <clinit>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<java.sql.Driver: java.sql.DriverPropertyInfo[] getPropertyInfo(java.lang.String,java.util.Properties)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setEscapeProcessing(boolean)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager$InputStreamBlob: void <init>(java.io.InputStream)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: org.hibernate.SQLQuery addEntity(java.lang.String)> -> _SINK_
<org.hibernate.type.BigDecimalType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.sforce.soap.enterprise.QueryAllResponse_element: void setResult(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: gov.nih.nci.security.authorization.domainobjects.ProtectionElement getProtectionElement(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.SessionFactory: org.hibernate.classic.Session openSession(java.sql.Connection,org.hibernate.Interceptor)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.io.InputStream getUnicodeStream(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxColumnsInSelect()> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryResult: void <init>()> -> _SINK_
<com.mysql.jdbc.Statement: int executeUpdate(java.lang.String,java.lang.String[])> -> _SINK_
<org.hibernate.type.Type: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CUstom_Setting_1__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.xa.PGXAException: void <init>(java.lang.String,java.lang.Throwable,int)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.CQL2ParameterizedHQL: java.lang.String getAssociationAlias(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Lead: void setHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.Connection: void initializeResultsMetadataFromCache(java.lang.String,com.mysql.jdbc.CachedResultSetMetaData,com.mysql.jdbc.ResultSet)> -> _SINK_
<org.hibernate.engine.ParameterBinder: int bindPositionalParameters(java.sql.PreparedStatement,org.hibernate.engine.QueryParameters,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.postgresql.core.v3.ProtocolConnectionImpl: void setStandardConformingStrings(boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Where: java.nio.ByteBuffer[] getValues()> -> _SINK_
<com.sforce.soap.enterprise.sobject.OpportunityFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.apache.ibatis.executor.statement.BaseStatementHandler: void rebindGeneratedKey()> -> _SINK_
<com.mysql.jdbc.Statement: void setFetchSize(int)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryResult: java.lang.Integer getCount()> -> _SINK_
<org.castor.jdo.engine.SQLTypeInfos: java.lang.Class sqlTypeNum2javaType(int)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodes: java.lang.String[] getCannotSerializeTransactionCodes()> -> _SINK_
<org.hibernate.cfg.Settings: void setFormatSqlEnabled(boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int insertFiredTrigger(java.sql.Connection,org.quartz.Trigger,java.lang.String,org.quartz.JobDetail)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: void errorIfDML()> -> _SINK_
<com.sforce.soap.enterprise.sobject.CUstom_Setting_1__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.xa.RecoveredXid: java.lang.String toString()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.lang.String getString(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: java.sql.Connection getConnection()> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator: void supportsSqlType(int)> -> _SINK_
<java.sql.Time: java.sql.Time valueOf(java.lang.String)> -> _SINK_
<entities.gui.jsf.AutoEntityBackBean: javax.faces.component.UIData getAutoDataTable()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$CallableBatchResultHandler: void <init>(org.postgresql.jdbc2.AbstractJdbc2Statement,org.postgresql.core.Query[],org.postgresql.core.ParameterList[],int[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: int getUpdateCount()> -> _SINK_
<org.springframework.jdbc.support.lob.AbstractLobHandler: java.io.Reader getClobAsCharacterStream(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.net.URL getURL(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Recruiting_Tracker__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.castor.jdo.conf.DatabaseChoice: org.castor.jdo.conf.DataSource getDataSource()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void markActiveResultSetForStatement(java.sql.Statement,java.sql.ResultSet)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.type.Type determineType(java.lang.String,java.lang.Class)> -> _SINK_
<org.postgresql.util.PSQLWarning: java.lang.String getSQLState()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void clearWarnings()> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQueryCollectionReturn: java.lang.String getOwnerProperty()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void addBatch(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void skipMessage()> -> _SINK_
<org.exolab.castor.jdo.Database: void close()> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: long[] mk_tokenSet_5()> -> _SINK_
<com.sforce.soap.enterprise.QueryResponse_element: void write(javax.xml.namespace.QName,com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setURL(int,java.net.URL)> -> _SINK_
<java.sql.PreparedStatement: void setObject(int,java.lang.Object,int)> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: java.lang.String encodeColumn(java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodes: java.lang.String[] getBadSqlGrammarCodes()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setTime(int,java.sql.Time,java.util.Calendar)> -> _SINK_
<org.springframework.orm.jpa.vendor.Database: void <init>(java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void registerOutParameter(java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setClobberStreamingResults(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getAttributes(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTransactionManager: javax.sql.DataSource getDataSource()> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.bridge.Query setMaxNumber(int)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl endsWithIgnoreCase(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void statement(antlr.collections.AST)> -> _SINK_
<org.mmbase.module.builders.ImageCaches: org.mmbase.module.core.MMObjectNode getLegacyCachedNode(int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: float getFloat(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: int getQueryTimeout()> -> _SINK_
<org.postgresql.jdbc3g.AbstractJdbc3gStatement: void setObject(int,java.lang.Object)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.TrimSqlNode: void <init>(org.apache.ibatis.session.Configuration,org.apache.ibatis.builder.xml.dynamic.SqlNode,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setBinaryStream(java.lang.String,java.io.InputStream,long)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setNull(java.lang.String,int,java.lang.String)> -> _SINK_
<java.sql.PreparedStatement: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<com.amazonaws.services.dynamodb.AmazonDynamoDBAsyncClient$4: java.lang.Object call()> -> _SINK_
<java.sql.CallableStatement: double getDouble(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.BlogForce_Comment__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.ParameterMetaData getParameterMetaData()> -> _SINK_
<org.mongodb.morphia.query.UpdateResults: int getInsertedCount()> -> _SINK_
<org.hibernate.sql.Update: org.hibernate.sql.Update addColumn(java.lang.String)> -> _SINK_
<javax.persistence.Query: java.util.List getResultList()> -> _SINK_
<org.hibernate.persister.entity.Queryable: boolean isVersionPropertyInsertable()> -> _SINK_
<org.hibernate.impl.SessionImpl: java.util.List listFilter(java.lang.Object,java.lang.String,org.hibernate.engine.QueryParameters)> -> _SINK_
<com.mysql.jdbc.Connection: boolean supportsIsolationLevel()> -> _SINK_
<org.hibernate.tool.hbm2ddl.ManagedProviderConnectionHelper: void prepare(boolean)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: java.lang.String toString(java.util.Calendar,java.sql.Timestamp)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void removeUserFromGroup(java.lang.String,java.lang.String)> -> _SINK_
<java.sql.ResultSet: boolean next()> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: org.postgresql.core.Field[] receiveFields()> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: boolean equals(java.lang.Object)> -> _SINK_
<org.hibernate.engine.QueryParameters: java.util.Map getNamedParameters()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4DatabaseMetaData: void <init>(org.postgresql.jdbc4.Jdbc4Connection)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: org.postgresql.core.types.PGType createInternalType(java.lang.Object,int)> -> _SINK_
<com.mysql.jdbc.NotUpdatable: void <init>()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXADataSource: javax.sql.XAConnection getXAConnection()> -> _SINK_
<com.mchange.v2.c3p0.util.TestUtils: int physicalConnectionIdentityHashCode(com.mchange.v2.c3p0.C3P0ProxyConnection)> -> _SINK_
<org.hibernate.engine.NamedQueryDefinition: java.lang.String getQueryString()> -> _SINK_
<org.apache.ibatis.builder.xml.XMLStatementBuilder$IncludeNodeHandler: void handleNode(org.apache.ibatis.parsing.XNode,java.util.List)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setCharacterStream(int,java.io.Reader,int)> -> _SINK_
<org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator: void setBlobAsBytes(java.sql.PreparedStatement,int,byte[])> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.MapreduceResults mapReduce(org.mongodb.morphia.MapreduceType,org.mongodb.morphia.query.Query,java.lang.Class,com.mongodb.MapReduceCommand)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setFetchDirection(int)> -> _SINK_
<com.mysql.jdbc.ResultSet: byte getNativeByte(int,boolean)> -> _SINK_
<java.net.URL: java.lang.String getQuery()> -> _SINK_
<org.postgresql.largeobject.BlobOutputStream: void flush()> -> _SINK_
<org.hibernate.Query: org.hibernate.Query setTimeout(int)> -> _SINK_
<org.springframework.jdbc.core.PreparedStatementCallback: java.lang.Object doInPreparedStatement(java.sql.PreparedStatement)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: void setFetchSize(int)> -> _SINK_
<org.hibernate.engine.QueryParameters: void processFilters(java.lang.String,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.postgresql.core.BaseConnection: int getTransactionState()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setPacketDebugBufferSize(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Time getTime(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Clause in(java.lang.String,java.lang.Object[])> -> _SINK_
<com.sun.jersey.api.client.AsyncViewResource: com.sun.jersey.api.client.AsyncViewResource uri(java.net.URI)> -> _SINK_
<org.hibernate.impl.AbstractSessionImpl: void initQuery(org.hibernate.Query,org.hibernate.engine.NamedQueryDefinition)> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator$PostgresqlType: void <init>(org.exolab.castor.jdo.keygen.IdentityKeyGenerator,org.exolab.castor.jdo.keygen.IdentityKeyGenerator$1)> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: boolean shouldProcessMoreRows(java.sql.ResultSet,org.apache.ibatis.session.ResultContext,org.apache.ibatis.session.RowBounds)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.util.Base64: byte[] encode3to4(byte[],byte[],int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setFailOverReadOnly(boolean)> -> _SINK_
<org.mmbase.module.database.Naming$NamingMultiConnection: void <init>(org.mmbase.module.database.Naming,java.sql.Connection)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion propertyLtSome(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.utils.Key[] selectTriggersInState(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateByte(java.lang.String,byte)> -> _SINK_
<org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager: void preparePersistenceUnitInfos()> -> _SINK_
<com.mysql.jdbc.RowData: void removeRow(int)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void appendGroupByToken(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Clob: int setString(long,java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: boolean exists(org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void <init>(org.postgresql.core.Query,org.postgresql.core.BaseStatement,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor,int,int,int,int,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Timestamp getTimestamp(java.lang.String)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$3: java.lang.Object doInSqlMapClient(com.ibatis.sqlmap.client.SqlMapExecutor)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setFloat(int,float)> -> _SINK_
<org.eclipse.acceleo.engine.internal.evaluation.AcceleoEvaluationVisitorDecorator: java.lang.Object getCachedResult(org.eclipse.acceleo.model.mtl.Query,java.util.List)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: java.lang.String getColumnTypeName(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: com.amazonaws.services.dynamodbv2.model.QueryRequest withScanIndexForward(java.lang.Boolean)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: void escapeArrayElement(java.lang.StringBuffer,java.lang.String)> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteria: java.util.List getSourceObjectList()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getAllowLoadLocalInfile()> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder: void OUTER_JOIN(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Date getDate(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.sql.Date getDate(int)> -> _SINK_
<org.postgresql.ds.jdbc4.AbstractJdbc4ConnectionPoolDataSource: void <init>()> -> _SINK_
<org.postgresql.ds.PGPooledConnection: void <init>(java.sql.Connection,boolean,boolean)> -> _SINK_
<com.mysql.jdbc.Connection: void ping()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Task__c: void setX123321__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.jdbc.object.SqlOperation: org.springframework.jdbc.core.PreparedStatementSetter newPreparedStatementSetter(java.lang.Object[])> -> _SINK_
<org.hibernate.engine.QueryParameters: org.hibernate.transform.ResultTransformer getResultTransformer()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Date getDate(int,java.util.Calendar)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsSchemasInProcedureCalls()> -> _SINK_
<com.amazonaws.services.s3.internal.S3QueryStringSigner: void addSessionCredentials(com.amazonaws.Request,com.amazonaws.auth.AWSSessionCredentials)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.Map queryForMap(java.lang.String,java.lang.Object[],int[])> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setCursorName(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsSubqueriesInExists()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: java.lang.Object getObject(int,java.lang.Class)> -> _SINK_
<org.hibernate.impl.SessionImpl: int executeUpdate(java.lang.String,org.hibernate.engine.QueryParameters)> -> _SINK_
<com.mysql.jdbc.Statement$CancelTask: void run()> -> _SINK_
<com.mysql.jdbc.ResultSet: long getUpdateCount()> -> _SINK_
<org.hibernate.type.BlobType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String,org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsMultipleResultSets()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: boolean isAfterLast()> -> _SINK_
<org.eclipse.acceleo.engine.internal.evaluation.AcceleoEvaluationVisitor: void <init>(org.eclipse.ocl.EvaluationVisitor,org.eclipse.acceleo.engine.internal.evaluation.AcceleoEvaluationContext)> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator$DefaultWriter: void commaBetweenParameters(java.lang.String)> -> _SINK_
<org.postgresql.util.PGInterval: void setMonths(int)> -> _SINK_
<org.hibernate.sql.Template: boolean isNamedParameter(java.lang.String)> -> _SINK_
<org.postgresql.geometric.PGcircle: void setValue(java.lang.String)> -> _SINK_
<org.hibernate.lob.SerializableClob: java.io.Reader getCharacterStream()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3DatabaseMetaData: boolean supportsGetGeneratedKeys()> -> _SINK_
<org.postgresql.Driver: void <clinit>()> -> _SINK_
<org.postgresql.largeobject.LargeObject: org.postgresql.largeobject.LargeObject copy()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Statement getStatement()> -> _SINK_
<com.mchange.v1.db.sql.ConnectionUtils: boolean attemptRollback(java.sql.Connection)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: void setTypeMap(java.util.Map)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementLookup: void buildStatement()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object startsWithIgnoreCase(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateBoolean(int,boolean)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: com.mysql.jdbc.DatabaseMetaData$LocalAndReferencedColumns access$200(com.mysql.jdbc.DatabaseMetaData,java.lang.String)> -> _SINK_
<org.hibernate.Query: org.hibernate.Query setCacheMode(org.hibernate.CacheMode)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsColumnAliasing()> -> _SINK_
<com.datastax.driver.core.Cluster$Manager: void prepareAllQueries(com.datastax.driver.core.Host)> -> _SINK_
<org.postgresql.core.BaseConnection: void execSQLUpdate(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void attach(com.mchange.v2.c3p0.impl.NewPooledConnection)> -> _SINK_
<org.springframework.jdbc.datasource.ConnectionHandle: void releaseConnection(java.sql.Connection)> -> _SINK_
<com.amazonaws.services.dynamodb.AmazonDynamoDBAsyncClient$3: com.amazonaws.services.dynamodb.model.QueryResult call()> -> _SINK_
<org.hibernate.criterion.AliasedProjection: java.lang.String toSqlString(org.hibernate.Criteria,int,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodes: java.lang.String[] getDataIntegrityViolationCodes()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: int getUpdateCount()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: int getFetchDirection()> -> _SINK_
<gov.nih.nci.cananolab.system.applicationservice.impl.CaNanoLabApplicationServiceImpl: java.util.List directSQL(java.lang.String,java.lang.String[],java.lang.Object[])> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: void rollback()> -> _SINK_
<org.postgresql.ssl.WrappedFactory: void <init>()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Connection: java.sql.CallableStatement prepareCall(java.lang.String,int,int,int)> -> _SINK_
<org.mmbase.storage.StorageManagerFactory: org.mmbase.storage.search.SearchQueryHandler getSearchQueryHandler()> -> _SINK_
<com.mysql.jdbc.NonRegisteringDriver: java.lang.String host(java.util.Properties)> -> _SINK_
<org.hibernate.hql.ast.tree.AssignmentSpecification: java.lang.String getSqlAssignmentFragment()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateLong(int,long)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: java.lang.StringBuffer appendSortOrders(java.lang.StringBuffer,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: org.hibernate.engine.SessionFactoryImplementor getFactory()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void refreshRow()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Time getTime(java.lang.String,java.util.Calendar)> -> _SINK_
<org.exolab.castor.jdo.Database: void rollback()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setString(int,java.lang.String)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.QueryTagSupport: int doEndTag()> -> _SINK_
<org.hibernate.impl.QueryImpl: int executeUpdate()> -> _SINK_
<org.springframework.jdbc.object.StoredProcedure: void <init>()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<java.sql.CallableStatement: void setString(java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.TreeList$Branch: org.mmbase.bridge.NodeQuery getLeafQuery()> -> _SINK_
<org.acegisecurity.acls.jdbc.JdbcMutableAclService: java.lang.Long createOrRetrieveSidPrimaryKey(org.acegisecurity.acls.sid.Sid,boolean)> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateNCharacterStream(int,java.io.Reader,int)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateBytes(int,byte[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.Pricebook2: void setQuotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNrs(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLQuery: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.lang.String getDBVersionNumber()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: java.io.Reader getNCharacterStream(int)> -> _SINK_
<net.sf.ehcache.constructs.web.filter.SimplePageFragmentCachingFilter: java.lang.String calculateKey(javax.servlet.http.HttpServletRequest)> -> _SINK_
<java.sql.CallableStatement: java.lang.Object getObject(int,java.util.Map)> -> _SINK_
<org.hibernate.hql.ParameterTranslations: int[] getNamedParameterSqlLocations(java.lang.String)> -> _SINK_
<org.hibernate.dialect.function.SQLFunction: java.lang.String render(java.util.List,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.mmbase.storage.search.implementation.database.PostgreSqlSqlHandler: void <init>()> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfo: java.util.Iterator iterator()> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String[] getColumns(java.lang.String,org.hibernate.Criteria)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int deleteFiredTrigger(java.sql.Connection,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.sql.ResultSet executeQuery()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: boolean execute(java.lang.String,java.lang.String[])> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.Object getJobDetailFromBlob(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.SqlNode: boolean apply(org.apache.ibatis.builder.xml.dynamic.DynamicContext)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsCorrelatedSubqueries()> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void constant(antlr.collections.AST)> -> _SINK_
<org.hibernate.hql.ast.tree.QueryNode: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Statement: void <init>(com.mysql.jdbc.Connection,java.lang.String)> -> _SINK_
<org.apache.commons.beanutils.ConvertUtilsBean: void registerOther(boolean)> -> _SINK_
<com.mysql.jdbc.ResultSet: long parseLongAsDouble(int,java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: byte[] getBytes(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setGatherPerfMetrics(boolean)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.Path2NestedCriteria: java.lang.String getRoleName(gov.nih.nci.system.query.nestedcriteria.NestedCriteria,java.lang.Class,java.lang.Object,gov.nih.nci.system.util.ClassCache)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: boolean getBoolean(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getTcpNoDelay()> -> _SINK_
<com.mysql.jdbc.Field: boolean isNativeDateTimeType()> -> _SINK_
<org.springframework.jdbc.object.StoredProcedure: java.util.Map execute(org.springframework.jdbc.core.ParameterMapper)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void clearWarnings()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setEscapeProcessing(boolean)> -> _SINK_
<org.postgresql.core.ResultHandler: void handleResultRows(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: boolean getMoreResults()> -> _SINK_
<java.sql.DatabaseMetaData: boolean othersInsertsAreVisible(int)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl sizeEq(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int selectNumTriggersForJob(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.admin.impl.AdminServiceJDBCImpl: gov.nih.nci.cananolab.dto.admin.SitePreferenceBean getSitePreference()> -> _SINK_
<oracle.toplink.sessions.DatabaseLogin: void setConnector(oracle.toplink.sessions.Connector)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsMultipleResultSets()> -> _SINK_
<com.mysql.jdbc.StringUtils: java.lang.String stripComments(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: org.postgresql.ds.PGPoolingDataSource getDataSource(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int deleteFiredTriggers(java.sql.Connection,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: void <init>(org.postgresql.core.BaseConnection,org.postgresql.core.Field[])> -> _SINK_
<org.apache.ibatis.executor.ReuseExecutor: boolean hasStatementFor(java.lang.String)> -> _SINK_
<org.hibernate.impl.FetchingScrollableResultsImpl: boolean last()> -> _SINK_
<org.postgresql.core.Query: org.postgresql.core.ParameterList createParameterList()> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterUtils: org.springframework.jdbc.core.namedparam.ParsedSql parseSqlStatement(java.lang.String)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: int delete(java.lang.String,java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getSchemas()> -> _SINK_
<com.endeca.navigation.analytics.ExprFunction: void validateSyntax()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: int executeUpdate(java.lang.String,int[])> -> _SINK_
<org.quartz.utils.ConnectionProvider: java.sql.Connection getConnection()> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void addColumn(java.lang.String,java.lang.String)> -> _SINK_
<au.com.bytecode.opencsv.ResultSetHelperService: java.lang.String handleLong(java.sql.ResultSet,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: double getDouble(int)> -> _SINK_
<org.mmbase.module.corebuilders.InsRel: org.mmbase.storage.search.implementation.BasicFieldValueConstraint getNumberConstraint(org.mmbase.storage.search.implementation.NodeSearchQuery,java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy$BalanceStrategy: com.mysql.jdbc.Connection pickConnection()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setLong(int,long)> -> _SINK_
<com.sforce.soap.enterprise.QueryResult: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.apache.axis.utils.JavaUtils: java.lang.Object convert(java.lang.Object,java.lang.Class)> -> _SINK_
<org.mmbase.module.builders.ImageCaches: org.mmbase.module.core.MMObjectNode getCachedNode(int,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Date getDate(java.lang.String,java.util.Calendar)> -> _SINK_
<org.hibernate.engine.query.ParamLocationRecognizer: java.util.Map getNamedParameterDescriptionMap()> -> _SINK_
<org.hibernate.cache.QueryCache: java.util.List get(org.hibernate.cache.QueryKey,org.hibernate.type.Type[],boolean,java.util.Set,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.c3p0.util.TestUtils: boolean samePhysicalConnection(com.mchange.v2.c3p0.C3P0ProxyConnection,com.mchange.v2.c3p0.C3P0ProxyConnection)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateClob(java.lang.String,java.io.Reader)> -> _SINK_
<com.endeca.navigation.ENEQueryResults: boolean containsERecs()> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.sql.Statement createStatement()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setShares(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void beforeStatementCompletion(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: boolean isPartOfBuilderDefinition(org.mmbase.core.CoreField)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: void query(java.lang.String,org.springframework.jdbc.core.PreparedStatementSetter,org.springframework.jdbc.core.RowCallbackHandler)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: java.util.List queryForList(java.lang.String,java.lang.Object,int,int)> -> _SINK_
<org.hibernate.loader.Loader: void putResultInQueryCache(org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters,org.hibernate.type.Type[],org.hibernate.cache.QueryCache,org.hibernate.cache.QueryKey,java.util.List)> -> _SINK_
<gov.nih.nci.cananolab.service.publication.helper.PublicationServiceHelper: java.util.List findPublicationIdsByOwner(java.lang.String)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DataSourceWrapper: java.sql.Connection getConnection()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: boolean absolute(int)> -> _SINK_
<org.hibernate.hql.antlr.HqlBaseParser: void quantifiedExpression()> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: java.util.List asList()> -> _SINK_
<com.amazonaws.services.datapipeline.DataPipelineAsyncClient$12: com.amazonaws.services.datapipeline.model.QueryObjectsResult call()> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: void setStatementFetchSize(java.sql.PreparedStatement)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setERec(long)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.net.URL getURL(int)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: java.sql.SQLException receiveErrorResponse()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.CallableStatement prepareCall(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: java.lang.String getCatalog()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> -> _SINK_
<gov.nih.nci.security.dao.Queries: java.sql.PreparedStatement getQueryforUserAttributeMap(java.lang.String,java.lang.String,java.lang.String,int,java.sql.Connection)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.sql.Statement createStatement(int,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$StatementResultHandler: void handleCommandStatus(java.lang.String,int,long)> -> _SINK_
<com.sforce.soap.enterprise.sobject.UserProfileFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: java.sql.DatabaseMetaData getMetaData()> -> _SINK_
<org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader: org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo parsePersistenceUnitInfo(org.w3c.dom.Element)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Array: java.sql.ResultSet getResultSet(java.util.Map)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.StringBuilder appendList(java.util.List,java.lang.StringBuilder,boolean)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$6: void <init>(org.springframework.orm.ibatis.SqlMapClientTemplate,java.lang.String,java.lang.Object,int)> -> _SINK_
<org.springframework.jdbc.core.JdbcOperations: int queryForInt(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getEnableQueryTimeouts()> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion in(java.lang.Object,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection$TransactionCommandHandler: void <init>(org.postgresql.jdbc2.AbstractJdbc2Connection)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getYearIsDateType()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUltraDevHack()> -> _SINK_
<org.exolab.castor.jdo.Database: void commit()> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: void receiveAsyncNotify()> -> _SINK_
<java.sql.Blob: java.io.OutputStream setBinaryStream(long)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXAConnection: javax.transaction.xa.XAException mapXAExceptionFromSQLException(java.sql.SQLException)> -> _SINK_
<org.mmbase.storage.implementation.database.GenericDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.ibatis.session.SqlSessionFactoryBuilder: org.apache.ibatis.session.SqlSessionFactory build(java.io.Reader,java.lang.String,java.util.Properties)> -> _SINK_
<org.apache.ibatis.type.TimeOnlyTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: int update(java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.tool.hbm2ddl.SuppliedConnectionHelper: void release()> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int)> -> _SINK_
<com.mysql.jdbc.Connection$1: boolean removeEldestEntry(java.util.Map$Entry)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateTime(int,java.sql.Time)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxColumnNameLength()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Recruiting_Tracker__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.dialect.MySQLDialect: java.sql.ResultSet getResultSet(java.sql.CallableStatement)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void <clinit>()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsDifferentTableCorrelationNames()> -> _SINK_
<com.mysql.jdbc.Connection: void unsetMaxRows(com.mysql.jdbc.Statement)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: org.hibernate.SQLQuery addJoin(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: long readLong(byte[],int)> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsRequest: java.lang.String toString()> -> _SINK_
<org.hibernate.tool.hbm2ddl.TableMetadata: void addColumn(java.sql.ResultSet)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateByte(int,byte)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$2: java.lang.Object doInSqlMapClient(com.ibatis.sqlmap.client.SqlMapExecutor)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Ref getRef(int)> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder nearSphere(double,double)> -> _SINK_
<com.mysql.jdbc.Buffer: void writeFieldLength(long)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setDimSearchDimensions(com.endeca.navigation.DimValIdList)> -> _SINK_
<org.castor.jdo.engine.DataSourceConnectionFactory: void setParameters(javax.sql.DataSource,org.castor.jdo.conf.Param[])> -> _SINK_
<com.mysql.jdbc.MysqlIO: void doHandshake(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<test.gov.nih.nci.security.hibernate.annotations.HibernateAnnotationsTest: void testAnnotated()> -> _SINK_
<org.hibernate.sql.SelectFragment: org.hibernate.sql.SelectFragment setExtraSelectList(java.lang.String)> -> _SINK_
<org.hibernate.type.AdaptedImmutableType: int sqlType()> -> _SINK_
<javax.jdo.PersistenceManager: javax.jdo.Query newNamedQuery(java.lang.Class,java.lang.String)> -> _SINK_
<com.endeca.navigation.EmptyENEQueryException: void <init>(java.lang.String)> -> _SINK_
<java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory: java.lang.String getBinaryFileBasePath(boolean)> -> _SINK_
<test.gov.nih.nci.security.threadsafe.CSMAPIMySQLDeadLockTest: void addUsersToGroup()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeRecIdList(java.lang.String,com.endeca.navigation.ERecIdList,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.SimpleQueryExecutor: java.sql.PreparedStatement access$102(org.exolab.castor.jdo.engine.SimpleQueryExecutor,java.sql.PreparedStatement)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Time getTime(int)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: org.postgresql.copy.CopyOperation startCopy(java.lang.String,boolean)> -> _SINK_
<org.hibernate.hql.classic.WhereParser: void token(java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment removeAll(java.lang.String,java.util.Set)> -> _SINK_
<com.mysql.jdbc.ResultSet: byte getByte(java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.PSQLSavepoint: int getSavepointId()> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.amazonaws.services.datapipeline.model.transform.QueryObjectsResultJsonUnmarshaller: com.amazonaws.services.datapipeline.model.transform.QueryObjectsResultJsonUnmarshaller getInstance()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int deleteJobListeners(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.eclipse.acceleo.common.preference.AcceleoPreferences: boolean isQueryCacheEnabled()> -> _SINK_
<entities.Repository: long size(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment incr(java.lang.String,com.datastax.driver.core.querybuilder.BindMarker)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<com.mchange.v2.c3p0.WrapperConnectionPoolDataSource: javax.sql.PooledConnection getPooledConnection(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: void getCallStmtParameterTypes(java.lang.String,java.lang.String,java.lang.String,java.util.List)> -> _SINK_
<test.gov.nih.nci.security.threadsafe.CSMAPIMySQLDeadLockTest: void assignProtectionElement()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean calendarExists(java.sql.Connection,java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.Query: com.mongodb.DBObject getQueryObject()> -> _SINK_
<com.sforce.soap.enterprise.sobject.DashboardComponent: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment putAll(java.lang.String,com.datastax.driver.core.querybuilder.BindMarker)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getStrictUpdates()> -> _SINK_
<org.hibernate.hql.ast.tree.BinaryLogicOperatorNode: void <init>()> -> _SINK_
<org.mmbase.module.database.JDBC: java.lang.String makeUrl(java.lang.String,int,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$1ProxyPreparedStatement: void <init>(com.mchange.v2.c3p0.impl.C3P0PooledConnection,java.sql.PreparedStatement,java.sql.Statement,com.mchange.v2.c3p0.impl.C3P0PooledConnection$StatementProxyingSetManagedResultSet,java.util.Set,boolean,java.sql.Connection)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: java.nio.ByteBuffer getRoutingKey()> -> _SINK_
<org.apache.ibatis.type.ByteArrayTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean storesMixedCaseIdentifiers()> -> _SINK_
<javax.sql.CommonDataSource: int getLoginTimeout()> -> _SINK_
<org.hibernate.exception.ExceptionUtils: java.lang.Throwable getCauseUsingWellKnownTypes(java.lang.Throwable)> -> _SINK_
<org.mongodb.morphia.query.QueryResults: long countAll()> -> _SINK_
<org.mmbase.bridge.util.GrowingTreeList: void <init>(org.mmbase.bridge.util.TreeList,int)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void handleClauseStart(int)> -> _SINK_
<javax.sql.ConnectionEvent: void <init>(javax.sql.PooledConnection)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setObject(int,java.lang.Object)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: int parseSql(java.lang.String,int,java.lang.StringBuffer,boolean,boolean)> -> _SINK_
<org.mmbase.storage.search.implementation.database.MySqlSqlHandler: int getSupportLevel(int,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: boolean getMoreResults()> -> _SINK_
<org.mmbase.bridge.util.Queries: org.mmbase.bridge.NodeQuery createNodeQuery(org.mmbase.bridge.Node)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryResult: com.amazonaws.services.dynamodbv2.model.ConsumedCapacity getConsumedCapacity()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsExtendedSQLGrammar()> -> _SINK_
<org.apache.axis.transport.http.AbstractQueryStringHandler: int getHttpServletResponseStatus(org.apache.axis.AxisFault)> -> _SINK_
<com.mysql.jdbc.MysqlParameterMetadata: int getPrecision(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int selectJobExecutionCount(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.util.ColumnHelper: void generateSingleScalarColumn(org.hibernate.hql.ast.tree.HqlSqlWalkerNode,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getDatabaseProductName()> -> _SINK_
<org.mmbase.module.core.MMObjectBuilder: int setUniqueValue(org.mmbase.module.core.MMObjectNode,java.lang.String,int)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: java.util.Set getPrivileges(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.SqlParameter: java.util.List sqlTypesToAnonymousParameterList(int[])> -> _SINK_
<org.apache.ibatis.transaction.jdbc.JdbcTransaction: void rollback()> -> _SINK_
<org.postgresql.core.SetupQueryRunner: byte[][] run(org.postgresql.core.ProtocolConnection,java.lang.String,boolean)> -> _SINK_
<org.apache.ibatis.type.SqlTimeTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<com.mchange.v2.c3p0.impl.SnatchFromSetResultSet: void <init>(java.util.Set)> -> _SINK_
<org.mmbase.storage.search.implementation.database.ChainedSqlHandler: int getSupportLevel(int,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.apache.ibatis.datasource.unpooled.UnpooledDataSource: java.io.PrintWriter getLogWriter()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsDataDefinitionAndDataManipulationTransactions()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setTime(int,java.sql.Time,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setResultSetType(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$19: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void appendOrderByToken(java.lang.String)> -> _SINK_
<com.datastax.driver.core.Requests$QueryProtocolOptions$Flag: int serialize(java.util.EnumSet)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: void setLimit(java.lang.Integer)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.sql.DatabaseMetaData getMetaData()> -> _SINK_
<org.hibernate.cfg.Configuration: void validateSchema(org.hibernate.dialect.Dialect,org.hibernate.tool.hbm2ddl.DatabaseMetadata)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: java.util.Map getKeyConditions()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Where: com.datastax.driver.core.policies.RetryPolicy getRetryPolicy()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Time getTime(int,java.util.Calendar)> -> _SINK_
<org.postgresql.core.v3.ProtocolConnectionImpl: void addWarning(java.sql.SQLWarning)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.Junction getNanomaterialEntityJunction(gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<java.sql.Connection: java.sql.Statement createStatement(int,int,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: com.datastax.driver.core.Statement setRetryPolicy(com.datastax.driver.core.policies.RetryPolicy)> -> _SINK_
<com.mysql.jdbc.StringUtils: int getInt(byte[],int,int)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: java.lang.String expandParameterLists(java.util.Map)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getDriverVersion()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4CallableStatement: java.lang.Object getObject(int,java.util.Map)> -> _SINK_
<test.gov.nih.nci.security.hibernate.annotations.HibernateUtil: void closeSession()> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteria: void setTargetObjectName(java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$24: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.exolab.castor.jdo.engine.SimpleQueryExecutor: void <init>(org.exolab.castor.jdo.Database)> -> _SINK_
<java.sql.PreparedStatement: void setDouble(int,double)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: int executeUpdate(java.lang.String,int)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: void testSetCriteriaNotNull()> -> _SINK_
<org.springframework.orm.ibatis.support.BlobSerializableTypeHandler: void setParameterInternal(java.sql.PreparedStatement,int,java.lang.Object,java.lang.String,org.springframework.jdbc.support.lob.LobCreator)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setFloat(int,float)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeLong(java.lang.String,long,long,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: com.datastax.driver.core.policies.RetryPolicy getRetryPolicy()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setByte(int,byte)> -> _SINK_
<org.mmbase.module.database.MultiConnection: java.lang.String getStateString()> -> _SINK_
<org.springframework.jdbc.core.SqlOutParameter: void <init>(java.lang.String,int,java.lang.String,org.springframework.jdbc.core.SqlReturnType)> -> _SINK_
<com.mysql.jdbc.NonRegisteringDriver: java.util.Properties parseURL(java.lang.String,java.util.Properties)> -> _SINK_
<org.hibernate.sql.SimpleSelect: org.hibernate.sql.SimpleSelect addCondition(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean storesLowerCaseIdentifiers()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getCatalogs()> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: org.mongodb.morphia.query.Query where(org.bson.types.CodeWScope)> -> _SINK_
<org.hibernate.sql.InsertSelect: void <init>(org.hibernate.dialect.Dialect)> -> _SINK_
<org.apache.ibatis.type.BaseTypeHandler: java.lang.Object getResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.EtxSqlHandler: int getSupportLevel(org.mmbase.storage.search.Constraint,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void registerOpenPortal(org.postgresql.core.v3.Portal)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: org.postgresql.core.Query parseQuery(java.lang.String,boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: boolean rowUpdated()> -> _SINK_
<org.exolab.castor.jdo.QueryResults: void close()> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$1: void <init>(org.exolab.castor.gui.QueryAnalyser$MainFrame)> -> _SINK_
<org.apache.ibatis.builder.xml.XMLStatementBuilder$TrimHandler: void handleNode(org.apache.ibatis.parsing.XNode,java.util.List)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void close()> -> _SINK_
<com.datastax.driver.core.ExecutionInfo: void <init>(java.util.List)> -> _SINK_
<org.exolab.castor.jdo.engine.LocalDatabaseImpl: void <init>(java.lang.String,int,org.exolab.castor.persist.spi.CallbackInterceptor,org.exolab.castor.persist.spi.InstanceFactory,java.lang.ClassLoader,boolean)> -> _SINK_
<org.mongodb.morphia.query.QueryResults: org.mongodb.morphia.Key getKey()> -> _SINK_
<com.mysql.jdbc.Security: void passwordCrypt(byte[],byte[],byte[],int)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setClob(int,java.sql.Clob)> -> _SINK_
<com.mongodb.OutMessage: com.mongodb.DBObject getQuery()> -> _SINK_
<org.hibernate.sql.CaseFragment: org.hibernate.sql.CaseFragment setReturnColumnName(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode: void <init>(org.apache.ibatis.session.Configuration,org.apache.ibatis.builder.xml.dynamic.SqlNode,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils$Alias: java.lang.Object access$300(com.datastax.driver.core.querybuilder.Utils$Alias)> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteriaPath: void <init>(java.lang.String,java.util.List)> -> _SINK_
<org.springframework.scheduling.quartz.LocalDataSourceJobStore: javax.sql.DataSource access$000(org.springframework.scheduling.quartz.LocalDataSourceJobStore)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateFloat(java.lang.String,float)> -> _SINK_
<com.mysql.jdbc.Security: byte[] scramble411(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateBinaryStream(int,java.io.InputStream,long)> -> _SINK_
<org.hibernate.hql.ast.tree.IndexNode: void resolve(boolean,boolean,java.lang.String,antlr.collections.AST)> -> _SINK_
<java.sql.ResultSet: java.math.BigDecimal getBigDecimal(int,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setEvents(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTransactionManager: void doCleanupAfterCompletion(java.lang.Object)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.lang.Object getObject(java.lang.String,java.lang.Class)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete: java.lang.StringBuilder buildQueryString(java.util.List)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$MainFrame: void btnNext_actionPerformed(java.awt.event.ActionEvent)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: void setTypeMap(java.util.Map)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.CQL2ParameterizedHQL: java.lang.Object valueToObject(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.loader.collection.OneToManyJoinWalker: void initStatementString(org.hibernate.persister.entity.OuterJoinLoadable,java.lang.String,int,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)> -> _SINK_
<com.sforce.soap.enterprise.QueryResult: void write(javax.xml.namespace.QName,com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsDataManipulationTransactionsOnly()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.DetachedCriteria getFunctionalizingEntitySubquery(gov.nih.nci.cananolab.dto.particle.CompositionQueryBean,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setParameter(int,java.lang.Object,org.hibernate.type.Type)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: boolean getMoreResults()> -> _SINK_
<org.apache.ibatis.type.NStringTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateAsciiStream(int,java.io.InputStream,long)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setClob(int,java.sql.Clob)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$SelectionOrAlias: com.datastax.driver.core.querybuilder.Select$Builder countAll()> -> _SINK_
<org.hibernate.type.TimestampType: java.lang.String objectToSQLString(java.lang.Object,org.hibernate.dialect.Dialect)> -> _SINK_
<com.endeca.navigation.ENEQueryException: void <init>(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxSchemaNameLength()> -> _SINK_
<com.amazonaws.services.s3.internal.S3QueryStringSigner: void <init>(java.lang.String,java.lang.String,java.util.Date)> -> _SINK_
<org.hibernate.hql.ast.tree.MethodNode: void resolveCollectionProperty(antlr.collections.AST)> -> _SINK_
<org.hibernate.engine.query.OrdinalParameterDescriptor: int getSourceLocation()> -> _SINK_
<java.sql.ResultSet: java.sql.Date getDate(int,java.util.Calendar)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementType: void <init>(org.hibernate.hql.ast.tree.FromElement,org.hibernate.persister.entity.EntityPersister,org.hibernate.type.EntityType)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getVersionColumns(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void close()> -> _SINK_
<com.mysql.jdbc.log.Log: void logWarn(java.lang.Object)> -> _SINK_
<org.hibernate.dialect.Dialect: void <init>()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$12: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: java.lang.String generateBatchedInsertSQL(java.lang.String,int)> -> _SINK_
<test.gov.nih.nci.security.threadsafe.CSMAPIMySQLDeadLockTest: void doWork()> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl: void close()> -> _SINK_
<org.apache.axis.transport.http.AbstractQueryStringHandler: void <init>()> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: java.util.List access$000(com.datastax.driver.core.querybuilder.Select$Where)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$23: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementStore: int nextParameter(boolean,java.lang.StringBuffer,int)> -> _SINK_
<org.hibernate.hql.ast.util.LiteralProcessor: boolean isAlias(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageLookup: boolean startMatch(org.w3c.dom.Element,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setByte(int,byte)> -> _SINK_
<com.mysql.jdbc.Field: boolean isReadOnly()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.math.BigDecimal getBigDecimal(int,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setURL(int,java.net.URL)> -> _SINK_
<org.hibernate.impl.StatelessSessionImpl: int executeNativeUpdate(org.hibernate.engine.query.sql.NativeSQLQuerySpecification,org.hibernate.engine.QueryParameters)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Campaign: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.Buffer: void setWasMultiPacket(boolean)> -> _SINK_
<java.sql.SQLException: void setNextException(java.sql.SQLException)> -> _SINK_
<com.sun.jersey.api.client.WebResource: com.sun.jersey.api.client.WebResource uri(java.net.URI)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void serverResetStatement()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.transform.QueryResultJsonUnmarshaller: com.amazonaws.services.dynamodbv2.model.QueryResult unmarshall(com.amazonaws.transform.JsonUnmarshallerContext)> -> _SINK_
<org.postgresql.largeobject.LargeObject: java.io.InputStream getInputStream()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode$FilteredDynamicContext: java.lang.String access$000(org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode$FilteredDynamicContext)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateObject(int,java.lang.Object,int)> -> _SINK_
<com.mysql.jdbc.PreparedStatement$BatchParams: void <init>(com.mysql.jdbc.PreparedStatement,byte[][],java.io.InputStream[],boolean[],int[],boolean[])> -> _SINK_
<com.mysql.jdbc.Connection: boolean lowerCaseTableNames()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Timestamp getTimestampInternal(int,java.util.Calendar,java.util.TimeZone,boolean)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: org.mmbase.storage.search.implementation.BasicRelationStep addRelationStep(org.mmbase.module.corebuilders.InsRel,org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.String getPropertiesTransform()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean nullsAreSortedAtStart()> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String getPathEntityName(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.QuerySyntaxException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteria: void setRoleName(java.lang.String)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23ConnectionPoolDataSource: void <init>()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setBoolean(java.lang.String,boolean)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl within(double,double,double,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setInt(int,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setFetchDirection(int)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: void <init>(javax.sql.DataSource)> -> _SINK_
<org.mmbase.module.builders.MMServers: java.util.List getActiveServers()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Group: void setDelegatedUsers(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.criterion.AggregateProjection: java.lang.String toSqlString(org.hibernate.Criteria,int,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: boolean isReadOnly()> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion propertyGeAll(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void execute(org.postgresql.core.Query,org.postgresql.core.ParameterList,int)> -> _SINK_
<org.mongodb.morphia.query.CriteriaJoin: void <init>(java.lang.String,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<org.mmbase.cache.BetterStrategy: void logResult(java.lang.String,org.mmbase.storage.search.SearchQuery,org.mmbase.core.event.Event)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void finalize()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.sql.Statement createStatement()> -> _SINK_
<org.springframework.jdbc.core.ResultSetSupportingSqlParameter: void <init>(java.lang.String,int,java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: antlr.collections.AST lookupProperty(antlr.collections.AST,boolean,boolean)> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: java.lang.String getColumnLabel(int)> -> _SINK_
<org.castor.jdo.engine.SQLTypeInfos$TypeInfo: int access$000(org.castor.jdo.engine.SQLTypeInfos$TypeInfo)> -> _SINK_
<org.springframework.web.util.WebUtils: void exposeForwardRequestAttributes(javax.servlet.http.HttpServletRequest)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser$ParameterSubstitutionRecognizer: void addNamedParameter(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate$SimpleCallableStatementCreator: java.sql.CallableStatement createCallableStatement(java.sql.Connection)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl mod(long,long)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: boolean isAutoIncrement(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch$Options: com.datastax.driver.core.ConsistencyLevel getConsistencyLevel()> -> _SINK_
<org.mongodb.morphia.query.AbstractCriteria: void <init>()> -> _SINK_
<org.acegisecurity.util.UrlUtils: java.lang.String getRequestUrl(org.acegisecurity.intercept.web.FilterInvocation)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: antlr.collections.AST lookupNonQualifiedProperty(antlr.collections.AST)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: int getColumnType(int)> -> _SINK_
<com.datastax.driver.core.QueryOptions: void <init>()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.DatabaseMetaData getMetaData()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: int getUpdateCount()> -> _SINK_
<org.mmbase.module.core.ClusterBuilder: java.util.List getClusterNodes(org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: java.lang.String toString()> -> _SINK_
<java.sql.Clob: java.io.OutputStream setAsciiStream(long)> -> _SINK_
<java.sql.Blob: java.io.InputStream getBinaryStream()> -> _SINK_
<org.mmbase.storage.search.implementation.ModifiableQuery: java.util.List getFields()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$StringConnectionProperty: java.lang.String getValueAsString()> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: void addLimitClause(java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Connection: java.sql.CallableStatement prepareCall(java.lang.String,int,int)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: void rollback()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.Set getPausedTriggerGroups(java.sql.Connection,org.quartz.core.SchedulingContext)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$42: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Date getDate(java.lang.String)> -> _SINK_
<org.mmbase.cache.BetterStrategy: boolean checkChangedFieldsMatch(org.mmbase.core.event.NodeEvent,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.EnumDataServiceHandle: java.util.Iterator query(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setDate(int,java.sql.Date)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: int getMaxRows()> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: int getPGArrayElement(int)> -> _SINK_
<org.springframework.jdbc.core.SqlOutParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.RowCallbackHandler)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void logQuery(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.context.ThreadLocalSessionContext: org.hibernate.classic.Session buildOrObtainSession()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setBinary(int,byte[])> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: boolean isCounterOp()> -> _SINK_
<org.hibernate.criterion.Projection: java.lang.String toSqlString(org.hibernate.Criteria,int,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.hibernate.dialect.MySQLInnoDBDialect: void <init>()> -> _SINK_
<org.postgresql.util.GT: void <init>()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: int getColumnCount()> -> _SINK_
<org.postgresql.ds.PGConnectionPoolDataSource: void <init>()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void change(org.mmbase.core.CoreField)> -> _SINK_
<com.mysql.jdbc.ResultSet: void setFetchDirection(int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void <init>(org.postgresql.jdbc4.Jdbc4Connection,java.lang.String,boolean,int,int,int)> -> _SINK_
<org.postgresql.geometric.PGlseg: void <init>(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.String getStringInternal(int,boolean)> -> _SINK_
<org.springframework.jdbc.object.RdbmsOperation: void validateParameters(java.lang.Object[])> -> _SINK_
<com.mysql.jdbc.Connection: void setAutoCommit(boolean)> -> _SINK_
<java.sql.Clob: java.io.InputStream getAsciiStream()> -> _SINK_
<java.sql.Blob: int setBytes(long,byte[],int,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean isBeforeFirst()> -> _SINK_
<org.apache.ibatis.jdbc.SqlRunner: java.util.List selectAll(java.lang.String,java.lang.Object[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setCharacterStreamPost71(int,java.io.InputStream,int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateObject(int,java.lang.Object,int)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: void sendQuery(org.postgresql.core.v2.V2Query,org.postgresql.core.v2.SimpleParameterList,java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement: int[] executeBatch()> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getDriverName()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: void query(java.lang.String,java.lang.Object[],int[],org.springframework.jdbc.core.RowCallbackHandler)> -> _SINK_
<java.sql.ResultSet: boolean isFirst()> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: void <init>()> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: java.util.Map getExclusiveStartKey()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.lang.String getString(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: boolean isValid(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<java.sql.SQLException: void <init>(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment put(java.lang.String,java.lang.Object,java.lang.Object)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.lang.Object getUUID(byte[])> -> _SINK_
<org.exolab.castor.jdo.DbMetaInfo: void init()> -> _SINK_
<org.mmbase.storage.StorageManagerFactory: org.mmbase.storage.search.SearchQueryHandler instantiateQueryHandler(java.lang.Object)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationServiceFacade: java.util.List query(org.hibernate.criterion.DetachedCriteria,java.lang.String)> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void addLimitClause(java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.PSQLSavepoint: java.lang.String getPGName()> -> _SINK_
<org.postgresql.geometric.PGpoint: void setByteValue(byte[],int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Event: void setEventAttendees(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.sql.Connection getConnection()> -> _SINK_
<org.mmbase.cache.BetterStrategy: boolean checkAggregationCount(org.mmbase.core.event.NodeEvent,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: java.lang.Object load(java.lang.Class,java.lang.Object,java.lang.Object,org.exolab.castor.mapping.AccessMode)> -> _SINK_
<com.endeca.navigation.DisabledRefinementsConfig: boolean parseBool(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.log.StandardLogger: void logDebug(java.lang.Object)> -> _SINK_
<org.springframework.jdbc.core.namedparam.ParsedSql: void setParameterNames(java.lang.String[])> -> _SINK_
<org.castor.jdo.conf.DatabaseChoiceDescriptor$1: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.StringUtils: boolean startsWith(byte[],java.lang.String)> -> _SINK_
<org.apache.ibatis.type.ByteArrayTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.sql.Statement createStatement()> -> _SINK_
<org.postgresql.core.v3.CompositeParameterList: void setBinaryParameter(int,byte[],int)> -> _SINK_
<org.hibernate.criterion.IdentifierEqExpression: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setCaseComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<test.gov.nih.nci.security.instancelevel.InstanceLevelSecurityTest: void testInstanceANDAttributeLevelSecurityForUser()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$48: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.hql.classic.WhereParser: java.lang.String getElementName(org.hibernate.hql.classic.PathExpressionParser$CollectionElement,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.mongodb.morphia.dao.BasicDAO: java.lang.Object findOne(org.mongodb.morphia.query.Query)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: void setClientInfo(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.lang.Object getObjectImpl(java.lang.String,java.util.Map)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$IteratorWithCleanup: void close()> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression: java.lang.Integer getLimit()> -> _SINK_
<com.endeca.navigation.ENEQueryResults: com.endeca.navigation.ERecList getERecs()> -> _SINK_
<com.sforce.soap.enterprise.QueryResponse_element: void <init>()> -> _SINK_
<org.postgresql.core.v3.CompositeParameterList: void setNull(int,int)> -> _SINK_
<com.mysql.jdbc.Field: java.lang.String getFullName()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setSocketTimeout(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CustomEmail__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.MysqlIO: boolean isVersion(int,int,int)> -> _SINK_
<org.postgresql.util.ByteConverter: void int8(byte[],int,long)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: boolean isAfterLast()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setLong(int,long)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void escapeblockFast(byte[],java.io.ByteArrayOutputStream,int)> -> _SINK_
<org.apache.ibatis.type.TypeHandler: java.lang.Object getResult(java.sql.CallableStatement,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean isReadOnly()> -> _SINK_
<org.mmbase.module.database.MultiPool: java.util.Iterator getBusyPool()> -> _SINK_
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.Object toDate(java.lang.Class,long)> -> _SINK_
<org.exolab.castor.jdo.oql.InvalidCharException: void <init>(java.lang.String,java.lang.Throwable)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementCreate: void <init>(org.exolab.castor.jdo.engine.SQLEngine,org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.TrimSqlNode$1: void <init>(org.apache.ibatis.builder.xml.dynamic.TrimSqlNode,java.util.StringTokenizer)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setHighAvailability(boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateInt(int,int)> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: void <clinit>()> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.NestedCriteria2HQL: java.lang.String getCountQuery(java.lang.String)> -> _SINK_
<org.hibernate.type.DateType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<java.sql.Blob: long position(java.sql.Blob,long)> -> _SINK_
<org.hibernate.criterion.Expression: org.hibernate.criterion.Criterion sql(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.lang.String getCatalog()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.UpdateResults update(org.mongodb.morphia.query.Query,org.mongodb.morphia.query.UpdateOperations,boolean,boolean,com.mongodb.WriteConcern)> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: void notSupported()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setBytes(java.lang.String,byte[])> -> _SINK_
<org.exolab.castor.jdo.engine.SQLQuery: java.lang.Object fetchRaw()> -> _SINK_
<org.hibernate.mapping.PersistentClass: void createPrimaryKey()> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion propertyLe(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.postgresql.fastpath.FastpathArg: void <init>(byte[])> -> _SINK_
<javax.ws.rs.core.UriBuilder: javax.ws.rs.core.UriBuilder replaceQuery(java.lang.String)> -> _SINK_
<org.hibernate.hql.classic.FromPathExpressionParser: void setExpectingCollectionIndex()> -> _SINK_
<org.springframework.scheduling.quartz.LocalDataSourceJobStore: void closeConnection(java.sql.Connection)> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl$LookupPermissionIdMapping: void <init>(org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl,javax.sql.DataSource)> -> _SINK_
<org.hibernate.dialect.HSQLDialect: void <init>()> -> _SINK_
<org.postgresql.core.v3.V3ParameterList: void checkAllParametersSet()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update: com.datastax.driver.core.querybuilder.Update$Assignments 'with'(com.datastax.driver.core.querybuilder.Assignment)> -> _SINK_
<com.fasterxml.jackson.databind.deser.std.DateDeserializers$TimestampDeserializer: java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)> -> _SINK_
<org.springframework.jdbc.datasource.JdbcTransactionObjectSupport: void rollbackToSavepoint(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setBoolean(int,boolean)> -> _SINK_
<java.sql.Statement: int getQueryTimeout()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ResultSet: void updateArray(int,java.sql.Array)> -> _SINK_
<org.hibernate.engine.query.NamedParameterDescriptor: org.hibernate.type.Type getExpectedType()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: int getUpdateCount()> -> _SINK_
<com.endeca.navigation.OptiBackend: com.endeca.navigation.OptiBackendRequest requestAggrRecord(com.endeca.navigation.ENEQuery)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getJDBCMinorVersion()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void setTransactionIsolation(int)> -> _SINK_
<org.postgresql.core.TypeInfo: int getPGType(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: void setQueryTimeout(int)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters: int access$500()> -> _SINK_
<org.hibernate.persister.entity.Queryable: java.lang.String getMappedSuperclass()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: void sortStringArray(java.lang.String[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.CampaignFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.amazonaws.services.dynamodb.model.transform.QueryResultJsonUnmarshaller: void <init>()> -> _SINK_
<org.hibernate.Query: org.hibernate.Query setFetchSize(int)> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: int writeLong(long,byte[],int)> -> _SINK_
<org.hibernate.mapping.Selectable: java.lang.String getTemplate(org.hibernate.dialect.Dialect,org.hibernate.dialect.function.SQLFunctionRegistry)> -> _SINK_
<org.mmbase.storage.implementation.database.GenericDataSource: void <init>(org.mmbase.module.core.MMBase,java.lang.String)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: int direction(int)> -> _SINK_
<org.hibernate.hql.classic.Parser: void token(java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void serverPrepare(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateRef(java.lang.String,java.sql.Ref)> -> _SINK_
<gov.nih.nci.system.dao.orm.ORMDAOImpl: int getResultCountPerQuery()> -> _SINK_
<org.hibernate.engine.query.HQLQueryPlan: java.util.List performList(org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.hibernate.SessionFactory: org.hibernate.classic.Session openSession(java.sql.Connection)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNrk(java.lang.String)> -> _SINK_
<org.apache.taglibs.standard.tag.rt.sql.ParamTag: void <init>()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet extractForeignKeyFromCreateTable(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void enableDriverManagerLogging()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsCatalogsInTableDefinitions()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean selectMisfiredTriggersInStates(java.sql.Connection,java.lang.String,java.lang.String,long,int,java.util.List)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.EtxSqlHandler: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.hibernate.impl.CollectionFilterImpl: org.hibernate.type.Type[] typeArray()> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfoJDBC3: void <init>(com.mysql.jdbc.CallableStatement,java.sql.ResultSet)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$1: void run()> -> _SINK_
<com.mysql.jdbc.CallableStatement: int executeUpdate()> -> _SINK_
<java.sql.Driver: int getMajorVersion()> -> _SINK_
<java.sql.Time: void <init>(long)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.io.InputStream getUnicodeStream(int)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: void setRowsExpected(int)> -> _SINK_
<org.exolab.castor.jdo.CacheManager: void testForOpenDatabase()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: com.datastax.driver.core.querybuilder.Update$Assignments and(com.datastax.driver.core.querybuilder.Assignment)> -> _SINK_
<org.hibernate.impl.SessionImpl: java.util.Collection filter(java.lang.Object,java.lang.String,java.lang.Object,org.hibernate.type.Type)> -> _SINK_
<org.exolab.castor.xml.descriptors.SQLTimestampClassDescriptor: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection: java.sql.Connection getConnection()> -> _SINK_
<org.springframework.jdbc.object.UpdatableSqlQuery: java.lang.Object updateRow(java.sql.ResultSet,int,java.util.Map)> -> _SINK_
<org.hibernate.cfg.NamedSQLQuerySecondPass: void <clinit>()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsIntegrityEnhancementFacility()> -> _SINK_
<org.springframework.jdbc.support.incrementer.PostgreSQLSequenceMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.CQL2HQL: void processAttribute(java.lang.StringBuffer,java.util.List,java.lang.String,gov.nih.nci.system.query.cql.CQLAttribute,boolean,boolean)> -> _SINK_
<org.postgresql.core.PGStream: java.lang.String ReceiveString(int)> -> _SINK_
<freemarker.ext.dom.NodeModel: freemarker.template.TemplateModel get(java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryResult: void setLastEvaluatedKey(java.util.Map)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void clearParametersInternal(boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContentVersion: void setHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.orm.hibernate3.LocalSessionFactoryBean: void setDataSource(javax.sql.DataSource)> -> _SINK_
<org.hibernate.engine.SubselectFetch: org.hibernate.engine.QueryParameters getQueryParameters()> -> _SINK_
<org.hibernate.loader.criteria.CriteriaLoader: java.lang.String applyLocks(java.lang.String,java.util.Map,org.hibernate.dialect.Dialect)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: int getResultSetHoldability()> -> _SINK_
<com.mchange.v2.c3p0.stmt.StatementCacheBenchmark: void drop(javax.sql.DataSource)> -> _SINK_
<org.postgresql.core.PGStream: void SendInteger4(int)> -> _SINK_
<org.mmbase.storage.search.implementation.database.InformixSqlHandler: void closeInformix(org.mmbase.module.database.MultiConnection)> -> _SINK_
<java.sql.DataTruncation: void <init>(int,boolean,boolean,int,int)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSessionFactory: org.apache.ibatis.session.SqlSession openSessionFromConnection(org.apache.ibatis.session.ExecutorType,java.sql.Connection)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Campaign: void setChildCampaigns(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String[] selectTriggerListeners(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.PointbaseDelegate: java.lang.Object getObjectFromBlob(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase: void setNestedDataSource(javax.sql.DataSource)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getLogXaCommands()> -> _SINK_
<org.hibernate.loader.custom.sql.SQLCustomQuery$ParserContext: boolean isEntityAlias(java.lang.String)> -> _SINK_
<org.apache.taglibs.standard.tag.rt.sql.UpdateTag: void <init>()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setCharacterStream(int,java.io.Reader,int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setBlob(java.lang.String,java.io.InputStream)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: void clear()> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: int insert(java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void binaryComparisonExpression(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Time getTime(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int countMisfiredTriggersInStates(java.sql.Connection,java.lang.String,java.lang.String,long)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.StepField addField(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsMixedCaseQuotedIdentifiers()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setEscapeProcessing(boolean)> -> _SINK_
<org.hibernate.engine.query.NativeSQLQueryPlan: int bindPositionalParameters(java.sql.PreparedStatement,org.hibernate.engine.QueryParameters,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimestampLocaleConverter: void <init>(java.lang.Object)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: boolean checkPermissionForGroup(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo: javax.sql.DataSource getNonJtaDataSource()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy$ConnectionErrorFiringInvocationHandler: void <init>(com.mysql.jdbc.LoadBalancingConnectionProxy,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.NonRegisteringDriver: void <init>()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void expr(antlr.collections.AST)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Project_Snapshot__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<java.sql.PreparedStatement: void setObject(int,java.lang.Object)> -> _SINK_
<gov.nih.nci.system.query.hql.InsertHQLQuery: void <init>(java.lang.String,java.util.List)> -> _SINK_
<org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback: java.lang.Object doInPreparedStatement(java.sql.PreparedStatement)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: org.mongodb.morphia.query.Query order(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.SearchQuery: boolean isDistinct()> -> _SINK_
<org.apache.ibatis.mapping.BoundSql: boolean hasAdditionalParameter(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqllog(java.util.List)> -> _SINK_
<org.hibernate.hql.ast.ASTQueryTranslatorFactory: org.hibernate.hql.FilterTranslator createFilterTranslator(java.lang.String,java.lang.String,java.util.Map,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setString(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.util.PGInterval: int getHours()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void setHolderClass(java.lang.Class)> -> _SINK_
<com.mysql.jdbc.Blob: void <init>(byte[],com.mysql.jdbc.ResultSet,int)> -> _SINK_
<org.castor.jdo.engine.SQLTypeInfos$TypeInfo: java.lang.String access$200(org.castor.jdo.engine.SQLTypeInfos$TypeInfo)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position_Tracker__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.bridge.NodeQuery: org.mmbase.storage.search.Step setNodeStep(org.mmbase.storage.search.Step)> -> _SINK_
<com.mysql.jdbc.Buffer: java.nio.ByteBuffer getNioBuffer()> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setByte(java.lang.String,byte)> -> _SINK_
<java.sql.ResultSet: int getRow()> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: int getResultSetType()> -> _SINK_
<org.apache.axis.transport.http.QSWSDLHandler: void reportNoWSDL(javax.servlet.http.HttpServletResponse,java.io.PrintWriter,java.lang.String,org.apache.axis.AxisFault)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void storeTime(com.mysql.jdbc.Buffer,java.sql.Time)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void moveToCurrentRow()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void releaseLock(java.sql.Connection,java.lang.String,boolean)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String getSQLAlias(org.hibernate.Criteria,java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateLong(java.lang.String,long)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: void clearWarnings()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setURL(java.lang.String,java.net.URL)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.io.InputStream getUnicodeStream(int)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setDouble(java.lang.String,double)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateBytes(java.lang.String,byte[])> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setDate(int,java.sql.Date,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseUnicode()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseHostsInPrivileges(boolean)> -> _SINK_
<org.hibernate.mapping.Column: void setSqlTypeCode(java.lang.Integer)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: boolean getMoreResults()> -> _SINK_
<com.mysql.jdbc.Buffer: int readIntAsLong()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: int getResultSetConcurrency()> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String getSQLAlias(org.hibernate.Criteria)> -> _SINK_
<org.springframework.jdbc.object.MappingSqlQueryWithParameters$RowMapperImpl: java.lang.Object mapRow(java.sql.ResultSet,int)> -> _SINK_
<org.springframework.orm.jpa.EntityManagerFactoryInfo: javax.sql.DataSource getDataSource()> -> _SINK_
<org.hibernate.engine.query.NamedParameterDescriptor: void <init>(java.lang.String,org.hibernate.type.Type,int[],boolean)> -> _SINK_
<org.mongodb.morphia.query.FieldCriteria: void <init>(org.mongodb.morphia.query.QueryImpl,java.lang.String,org.mongodb.morphia.query.FilterOperator,java.lang.Object,boolean,boolean)> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl$AclPermissionInsert: void <init>(org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl,javax.sql.DataSource)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void storeTrigger(java.sql.Connection,org.quartz.core.SchedulingContext,org.quartz.Trigger,org.quartz.JobDetail,boolean,java.lang.String,boolean,boolean)> -> _SINK_
<org.hibernate.hql.ast.HqlLexer: void panic(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setCallableStmtCacheSize(int)> -> _SINK_
<au.com.bytecode.opencsv.ResultSetHelperService: java.lang.String handleInteger(java.sql.ResultSet,int)> -> _SINK_
<org.springframework.jdbc.datasource.DelegatingDataSource: void setLogWriter(java.io.PrintWriter)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: java.sql.ResultSet getResultSet()> -> _SINK_
<org.postgresql.jdbc3.PSQLSavepoint: void <init>(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.math.BigDecimal getBigDecimal(java.lang.String)> -> _SINK_
<org.hibernate.criterion.LikeExpression: org.hibernate.engine.TypedValue[] getTypedValues(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: java.util.List getTypes()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: java.sql.SQLWarning getWarnings()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0ImplUtils: void resetTxnState(java.sql.Connection,boolean,boolean,boolean)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseReadAheadInput(boolean)> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsResult: boolean equals(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: byte[] pack()> -> _SINK_
<com.ibatis.sqlmap.engine.impl.ExtendedSqlMapClient: com.ibatis.sqlmap.engine.impl.SqlMapExecutorDelegate getDelegate()> -> _SINK_
<org.hibernate.criterion.LikeExpression: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<gov.nih.nci.cananolab.service.security.SecurityService: java.util.Map getAllUserAccessibleDataAndRole()> -> _SINK_
<org.hibernate.type.TimeType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void setRefCursor(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getURL()> -> _SINK_
<com.mysql.jdbc.PreparedStatement$ParseInfo: void <init>(com.mysql.jdbc.PreparedStatement,java.lang.String,com.mysql.jdbc.Connection,java.sql.DatabaseMetaData,java.lang.String,com.mysql.jdbc.SingleByteCharsetConverter)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseCompression(boolean)> -> _SINK_
<com.mysql.jdbc.Statement: java.sql.ResultSet getResultSet()> -> _SINK_
<com.sforce.soap.enterprise.sobject.TaskJunction__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: byte[] getBytes(java.lang.String)> -> _SINK_
<org.hibernate.dialect.SybaseDialect: void <init>()> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.DynamoDBMapper: int count(java.lang.Class,com.amazonaws.services.dynamodb.datamodeling.DynamoDBQueryExpression,com.amazonaws.services.dynamodb.datamodeling.DynamoDBMapperConfig)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: int getConcurrency()> -> _SINK_
<com.mysql.jdbc.MysqlDefs: void <clinit>()> -> _SINK_
<org.hibernate.jmx.SessionFactoryStub: org.hibernate.StatelessSession openStatelessSession(java.sql.Connection)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl$OQLEnumeration: java.lang.Object next(boolean)> -> _SINK_
<org.postgresql.largeobject.LargeObject: void <init>(org.postgresql.fastpath.Fastpath,long,int)> -> _SINK_
<org.mmbase.module.database.Naming: org.mmbase.module.database.MultiConnection getConnection(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsSavepoints()> -> _SINK_
<org.apache.ibatis.type.SqlDateTypeHandler: void <init>()> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate$2: void <init>(org.springframework.orm.toplink.TopLinkTemplate,boolean,java.lang.Object[],oracle.toplink.queryframework.DatabaseQuery)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setOpportunityPartnersTo(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl: void bind(double)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateRowId(int,java.sql.RowId)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: void <init>(java.lang.String,java.lang.String,java.util.Map,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.hibernate.type.SpecialOneToOneType: java.lang.Object hydrate(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.sobject.User: void setProject_Tasks_Assigned__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.engine.query.ParameterMetadata: java.util.Set getNamedParameterNames()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getReconnectAtTxEnd()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: int executeUpdate(java.lang.String,int[])> -> _SINK_
<org.castor.jdo.drivers.PointbaseQueryExpression: java.lang.String getStatement(boolean)> -> _SINK_
<org.hibernate.jdbc.BorrowedConnectionProxy: java.sql.Connection generateProxy(org.hibernate.jdbc.ConnectionManager)> -> _SINK_
<com.endeca.navigation.analytics.Select: java.lang.String toString()> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: void setIntParameter(int,int)> -> _SINK_
<org.exolab.castor.jdo.engine.BaseFactory: org.exolab.castor.persist.spi.PersistenceQuery getCallQuery(java.lang.String,java.lang.Class[],java.lang.Class,java.lang.String[],int[])> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.util.List list(org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.hibernate.impl.SessionImpl: java.util.List find(java.lang.String)> -> _SINK_
<com.mysql.jdbc.MysqlIO: int alignPacketSize(int,int)> -> _SINK_
<org.apache.ibatis.executor.BatchResult: java.lang.String getSql()> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: java.sql.Connection getPooledConnection()> -> _SINK_
<org.apache.ibatis.builder.'annotation'.MapperAnnotationBuilder: java.lang.Class getSqlAnnotationType(java.lang.reflect.Method)> -> _SINK_
<org.postgresql.copy.CopyOperation: void cancelCopy()> -> _SINK_
<java.sql.Clob: java.io.Writer setCharacterStream(long)> -> _SINK_
<com.sforce.soap.enterprise.fault.InvalidFieldFault: void <init>()> -> _SINK_
<org.springframework.orm.jpa.JpaTemplate: java.util.List findByNamedQuery(java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet buildResultSet(com.mysql.jdbc.Field[],java.util.ArrayList)> -> _SINK_
<org.hibernate.Query: org.hibernate.Query setProperties(java.lang.Object)> -> _SINK_
<java.sql.Statement: int executeUpdate(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: int findColumnIndex(java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.cqlresultset.CQLQueryResults: int hashCode()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setDouble(int,double)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection: java.sql.SQLException access$100(com.mchange.v2.c3p0.impl.C3P0PooledConnection)> -> _SINK_
<com.mysql.jdbc.SingleByteCharsetConverter: com.mysql.jdbc.SingleByteCharsetConverter initCharset(java.lang.String)> -> _SINK_
<org.postgresql.core.Encoding: byte[] encode(java.lang.String)> -> _SINK_
<org.springframework.orm.jpa.vendor.HibernateJpaDialect: org.springframework.jdbc.datasource.ConnectionHandle getJdbcConnection(javax.persistence.EntityManager,boolean)> -> _SINK_
<com.mysql.jdbc.Connection: void reportNumberOfTablesAccessed(int)> -> _SINK_
<org.exolab.castor.dtx.DTXQuery: java.lang.String parseOQL(java.lang.String)> -> _SINK_
<org.springframework.orm.ibatis.support.AbstractLobTypeHandler: void <init>(org.springframework.jdbc.support.lob.LobHandler)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4DatabaseMetaData: java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: int executeUpdate(java.lang.String,int[])> -> _SINK_
<org.hibernate.hql.QueryTranslator: java.lang.String getSQLString()> -> _SINK_
<com.datastax.driver.core.PreparedStatement: java.lang.String getQueryKeyspace()> -> _SINK_
<oracle.toplink.sessions.DatabaseLogin: void setUsesExternalConnectionPooling(boolean)> -> _SINK_
<org.exolab.castor.jdo.engine.TxDatabaseMap: boolean isEmpty()> -> _SINK_
<com.mysql.jdbc.StringUtils: byte[] s2b(java.lang.String,com.mysql.jdbc.Connection)> -> _SINK_
<org.hibernate.id.insert.AbstractSelectingDelegate: java.lang.String getSelectSQL()> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String[] toColumns(java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$64: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Clob makeClob(long)> -> _SINK_
<org.postgresql.copy.PGCopyInputStream: int read(byte[])> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryResult: void setLastEvaluatedKey(com.amazonaws.services.dynamodb.model.Key)> -> _SINK_
<org.postgresql.core.SetupQueryRunner$SimpleResultHandler: java.util.List getResults()> -> _SINK_
<org.exolab.castor.mapping.xml.FieldMappingDescriptor$17: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<org.mongodb.morphia.query.Query: org.mongodb.morphia.query.Query disableValidation()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void setAlias(antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<org.springframework.jdbc.support.nativejdbc.JBossNativeJdbcExtractor: java.sql.CallableStatement getNativeCallableStatement(java.sql.CallableStatement)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsOrderByUnrelated()> -> _SINK_
<org.postgresql.geometric.PGline: int hashCode()> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodesFactory: org.springframework.core.io.Resource loadResource(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void <clinit>()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setA(java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.String getServerInfo()> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: void addName(java.lang.String)> -> _SINK_
<java.sql.ResultSet: void updateObject(int,java.lang.Object,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.sql.ResultSet getResultSet()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: int executeUpdate(java.lang.String,int[])> -> _SINK_
<org.postgresql.xa.PGXAConnection: void <init>(org.postgresql.core.BaseConnection)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: int executeUpdate(java.lang.String,java.lang.String[])> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStatesForJob(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.persister.collection.OneToManyPersister: java.lang.String generateInsertRowString()> -> _SINK_
<com.mongodb.DBCursor: void _check()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.ResultSetMetaData createMetaData()> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl$AclPermissionUpdate: void <init>(org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl,javax.sql.DataSource)> -> _SINK_
<org.hibernate.type.CurrencyType: java.lang.String objectToSQLString(java.lang.Object,org.hibernate.dialect.Dialect)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.jdbc2.ResultWrapper: void append(org.postgresql.jdbc2.ResultWrapper)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setClobCharacterEncoding(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate$SimplePreparedStatementCreator: java.sql.PreparedStatement createPreparedStatement(java.sql.Connection)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: void clearWarnings()> -> _SINK_
<org.apache.ibatis.jdbc.ScriptRunner: void closeConnection()> -> _SINK_
<org.springframework.orm.jpa.vendor.TopLinkJpaDialect: org.springframework.jdbc.datasource.ConnectionHandle getJdbcConnection(javax.persistence.EntityManager,boolean)> -> _SINK_
<com.mysql.jdbc.MiniAdmin: void <init>(java.lang.String,java.util.Properties)> -> _SINK_
<org.mmbase.servlet.BridgeServlet$QueryParts: void setNode(org.mmbase.bridge.Node)> -> _SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcTemplate: long queryForLong(java.lang.String,java.lang.Object[])> -> _SINK_
<org.hibernate.hql.ast.tree.MethodNode: void setScalarColumnText(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.AssetFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateClob(java.lang.String,java.io.Reader,long)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Log__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.dialect.SQLServerDialect: void <init>()> -> _SINK_
<org.castor.jdo.engine.SQLTypeInfos$1: void <init>()> -> _SINK_
<org.apache.ibatis.type.BaseTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxColumnsInIndex()> -> _SINK_
<org.hibernate.type.BigIntegerType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<gov.nih.nci.system.query.cql.CQLGroup: java.util.Collection getGroupCollection()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment putAll(java.lang.String,java.util.Map)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Where: com.datastax.driver.core.Statement setRetryPolicy(com.datastax.driver.core.policies.RetryPolicy)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void postProcessDelete(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseDynamicCharsetInfo(boolean)> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder withinPolygon(java.util.List)> -> _SINK_
<com.mchange.v2.c3p0.stmt.PerConnectionMaxOnlyStatementCache: boolean prepareAssimilateNewStatement(java.sql.Connection)> -> _SINK_
<org.hibernate.id.IncrementGenerator: void getNext(org.hibernate.engine.SessionImplementor)> -> _SINK_
<test.gov.nih.nci.security.threadsafe.UserSession: void run()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void markActiveRawConnectionResultSet(java.sql.ResultSet)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$SelectionOrAlias: com.datastax.driver.core.querybuilder.Select$SelectionOrAlias fcall(java.lang.String,java.lang.Object[])> -> _SINK_
<com.sun.jersey.core.spi.scanning.PackageNamesScanner: java.lang.String toExternalForm(java.net.URL)> -> _SINK_
<com.amazonaws.services.cloudfront.model.transform.UpdateDistributionRequestMarshaller: com.amazonaws.Request marshall(com.amazonaws.services.cloudfront.model.UpdateDistributionRequest)> -> _SINK_
<org.hibernate.type.LocaleType: int sqlType()> -> _SINK_
<java.sql.CallableStatement: boolean getBoolean(int)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTransactionManager: org.springframework.dao.DataAccessException convertTopLinkAccessException(oracle.toplink.exceptions.TopLinkException)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setFlushMode(org.hibernate.FlushMode)> -> _SINK_
<org.exolab.castor.jdo.JDOManager: java.lang.String getDatabaseName()> -> _SINK_
<org.hibernate.cfg.Configuration: java.util.Map getSqlFunctions()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeValIdList(java.lang.String,com.endeca.navigation.DimValIdList,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean isBinary(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array$PgArrayList: void <init>()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.utils.Key[] selectVolatileTriggers(java.sql.Connection)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: int executeUpdate(java.lang.String,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.math.BigDecimal getFastBigDecimal(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsMultipleOpenResults()> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: boolean isSecure()> -> _SINK_
<gov.nih.nci.cananolab.service.security.SecurityService: void main(java.lang.String[])> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate: java.lang.Object executeQuery(oracle.toplink.queryframework.DatabaseQuery,boolean)> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void addInnerJoin(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.ibatis.migration.commands.BaseCommand: org.apache.ibatis.jdbc.SqlRunner getSqlRunner()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateString(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.v2.SimpleParameterList: void streamBytea(org.postgresql.util.StreamWrapper,java.io.Writer)> -> _SINK_
<java.sql.ResultSet: java.math.BigDecimal getBigDecimal(int)> -> _SINK_
<com.mysql.jdbc.ResultSet: void setOwningStatement(com.mysql.jdbc.Statement)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setEmulateUnsupportedPstmts(boolean)> -> _SINK_
<org.mongodb.morphia.dao.BasicDAO: org.mongodb.morphia.query.QueryResults find()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setRowId(java.lang.String,java.sql.RowId)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setDumpMetadataOnColumnNotFound(boolean)> -> _SINK_
<org.hibernate.hql.ast.tree.MethodNode: void collectionProperty(antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void renderPropertiesSelect(org.hibernate.sql.QuerySelect)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getExtraNameCharacters()> -> _SINK_
<org.postgresql.xa.PGXAConnection: void commitPrepared(javax.transaction.xa.Xid)> -> _SINK_
<org.mongodb.morphia.query.MorphiaKeyIterator: java.lang.Object convertItem(com.mongodb.DBObject)> -> _SINK_
<org.hibernate.hql.ast.exec.AbstractStatementExecutor$2: void <init>(org.hibernate.hql.ast.exec.AbstractStatementExecutor,org.hibernate.persister.entity.Queryable)> -> _SINK_
<org.hibernate.engine.query.QueryPlanCache$FilterQueryPlanKey: void <init>(java.lang.String,java.lang.String,boolean,java.util.Map)> -> _SINK_
<com.amazonaws.services.s3.internal.S3QueryStringSigner: void sign(com.amazonaws.Request,com.amazonaws.auth.AWSCredentials)> -> _SINK_
<org.apache.ibatis.executor.resultset.NestedResultSetHandler: void createRowKeyForMappedProperties(java.sql.ResultSet,org.apache.ibatis.cache.CacheKey,java.util.List)> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: boolean isCaseSensitive(int)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setInternal(int,byte[])> -> _SINK_
<org.postgresql.largeobject.LargeObjectManager: org.postgresql.largeobject.LargeObject open(long,int)> -> _SINK_
<java.sql.ResultSet: java.sql.Time getTime(java.lang.String)> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$1: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateClob(java.lang.String,java.sql.Clob)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateBytes(java.lang.String,byte[])> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean triggerExists(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.CriteriaContainerImpl: org.mongodb.morphia.query.FieldEnd criteria(java.lang.String)> -> _SINK_
<com.amazonaws.services.datapipeline.DataPipelineAsyncClient$12: void <init>(com.amazonaws.services.datapipeline.DataPipelineAsyncClient,com.amazonaws.services.datapipeline.model.QueryObjectsRequest,com.amazonaws.handlers.AsyncHandler)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: int getResultSetHoldability()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$79: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.lob.SerializableBlob: long position(java.sql.Blob,long)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Job_Application__c: void setActivityHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: boolean previous()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSourceFactory: java.lang.String nullSafeRefAddrStringGet(java.lang.String,javax.naming.Reference)> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeQuery: org.mmbase.bridge.NodeList getList()> -> _SINK_
<org.postgresql.core.PGStream: java.net.Socket getSocket()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.sql.DatabaseMetaData getMetaData()> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<java.sql.ResultSet: int getInt(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.io.InputStream getAsciiStream(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setCharacterEncoding(java.lang.String)> -> _SINK_
<org.hibernate.loader.Loader: int bindLimitParameters(java.sql.PreparedStatement,int,org.hibernate.engine.RowSelection)> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsRequest: com.amazonaws.services.datapipeline.model.Query getQuery()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addEqualConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.Field,java.lang.Boolean)> -> _SINK_
<org.hibernate.loader.Loader: org.hibernate.jdbc.ColumnNameCache retreiveColumnNameToIndexCache(java.sql.ResultSet)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.sql.ResultSet createDriverResultSet(org.postgresql.core.Field[],java.util.List)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Expense__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<java.sql.PreparedStatement: void setFloat(int,float)> -> _SINK_
<org.hibernate.engine.QueryParameters: java.lang.String getOptionalEntityName()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Lead: void setEvents(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.SQLError: void <clinit>()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.sql.Blob getBlobValue(java.sql.ResultSet,int,org.mmbase.core.CoreField,boolean)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$1: void handleCommandStatus(java.lang.String,int,long)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: org.postgresql.core.ParameterList createFastpathParameters(int)> -> _SINK_
<org.springframework.orm.jdo.JdoTransactionManager: java.lang.Object doGetTransaction()> -> _SINK_
<org.hibernate.criterion.CriteriaQuery: org.hibernate.engine.TypedValue getTypedIdentifierValue(org.hibernate.Criteria,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: byte[] access$1000()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateCharacterStream(int,java.io.Reader,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: void setTypeMap(java.util.Map)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.UpdateResults update(org.mongodb.morphia.query.Query,org.mongodb.morphia.query.UpdateOperations,boolean,com.mongodb.WriteConcern)> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getDimSearchTerms()> -> _SINK_
<org.mmbase.servlet.HandleServlet: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<org.hibernate.sql.Template: java.lang.String renderWhereStringTemplate(java.lang.String,org.hibernate.dialect.Dialect,org.hibernate.dialect.function.SQLFunctionRegistry)> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: java.lang.String toString()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxSchemaNameLength()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4SQLXML: javax.xml.transform.Result setResult(java.lang.Class)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setTcpNoDelay(boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getProcedures(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLInvalidAuthorizationSpecException: void <init>()> -> _SINK_
<org.postgresql.core.QueryExecutor: void fetch(org.postgresql.core.ResultCursor,org.postgresql.core.ResultHandler,int)> -> _SINK_
<org.exolab.castor.dtx.DTXQuery: void bind(int,boolean)> -> _SINK_
<org.postgresql.copy.CopyIn: long endCopy()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Timestamp getTimestamp(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: int getMaxFieldSize()> -> _SINK_
<com.mysql.jdbc.Buffer: void writeLenString(java.lang.String,java.lang.String,java.lang.String,com.mysql.jdbc.SingleByteCharsetConverter,boolean,com.mysql.jdbc.Connection)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.math.BigDecimal getBigDecimal(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: int getResultSetConcurrency()> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl$OQLEnumeration: boolean absolute(int)> -> _SINK_
<org.hibernate.sql.Select: org.hibernate.sql.Select setFromClause(java.lang.String,java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.FieldCriteria: void <init>(org.mongodb.morphia.query.QueryImpl,java.lang.String,org.mongodb.morphia.query.FilterOperator,java.lang.Object,boolean,boolean,boolean)> -> _SINK_
<org.hibernate.jdbc.NonBatchingBatcher: void addToBatch(org.hibernate.jdbc.Expectation)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$54: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Project__Feed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.BlobFromLocator: int setBytes(long,byte[])> -> _SINK_
<gov.nih.nci.system.dao.DAO: gov.nih.nci.system.dao.Response query(gov.nih.nci.system.dao.Request)> -> _SINK_
<org.mmbase.module.database.MultiStatement: int getResultSetType()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.util.List tokenize(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setRef(int,java.sql.Ref)> -> _SINK_
<org.hibernate.impl.ScrollableResultsImpl: boolean previous()> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.QueryImpl: boolean validTimeFormat(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: int getMaxFieldSize()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl lessThanOrEq(java.lang.Object)> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.validation.CQLQueryResultsValidator: void initializeRestrictedXSD()> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: void interpretCommandStatus(java.lang.String,org.postgresql.core.ResultHandler)> -> _SINK_
<org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter: java.sql.Connection doGetConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.ProtocolConnection: java.lang.String getDatabase()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: org.exolab.castor.persist.spi.PersistenceQuery createCall(java.lang.String,java.lang.Class[])> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: void verifyParameters()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.List clusterCheckIn(java.sql.Connection)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setDouble(int,double)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: java.lang.String[] getFragments()> -> _SINK_
<com.mysql.jdbc.log.Log: void logInfo(java.lang.Object)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: void registerSynchronizables()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setDate(int,java.sql.Date)> -> _SINK_
<org.hibernate.persister.collection.BasicCollectionPersister: java.lang.String generateUpdateRowString()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.lang.String unalias(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.lang.Object getObject(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateFloat(java.lang.String,float)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void recoverJobs(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: int executeUpdate(java.lang.String,int)> -> _SINK_
<org.postgresql.core.PGStream: void SendChar(int)> -> _SINK_
<org.hibernate.sql.InFragment: org.hibernate.sql.InFragment setColumn(java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.database.InformixSqlHandler: boolean isUnionQuery(org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.hibernate.engine.query.ParameterParser$Recognizer: void ordinalParameter(int)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Timestamp getTimestamp(int)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void sendDescribeStatement(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,boolean)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setDate(int,java.sql.Date,java.util.Calendar)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void checkinAllCachedStatements(java.util.List)> -> _SINK_
<org.mmbase.cache.QueryResultCache: boolean containsType(org.mmbase.core.event.RelationEvent)> -> _SINK_
<org.springframework.jdbc.datasource.ConnectionHolder: boolean supportsSavepoints()> -> _SINK_
<com.datastax.driver.core.querybuilder.Using$WithMarker: void <init>(java.lang.String,com.datastax.driver.core.querybuilder.BindMarker)> -> _SINK_
<org.mmbase.cache.RelatedNodesCache: void <init>(int)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.Constraint getCleanConstraint()> -> _SINK_
<org.hibernate.engine.transaction.Isolater$JdbcDelegate: void delegateWork(org.hibernate.engine.transaction.IsolatedWork,boolean)> -> _SINK_
<com.mchange.v2.c3p0.PoolConfig: void setPreferredTestQuery(java.lang.String)> -> _SINK_
<org.hibernate.dialect.function.ClassicAvgFunction: org.hibernate.type.Type getReturnType(org.hibernate.type.Type,org.hibernate.engine.Mapping)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils$Appendeable: void appendTo(java.lang.StringBuilder,java.util.List)> -> _SINK_
<org.hibernate.mapping.PrimaryKey: java.lang.String sqlConstraintString(org.hibernate.dialect.Dialect)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setPedantic(boolean)> -> _SINK_
<org.exolab.castor.persist.SQLRelationLoader: java.lang.Object idToSQL(int,java.lang.Object)> -> _SINK_
<java.sql.CallableStatement: byte getByte(int)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.UpdateResults updateFirst(org.mongodb.morphia.query.Query,org.mongodb.morphia.query.UpdateOperations)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setPropertiesTransform(java.lang.String)> -> _SINK_
<org.apache.log4j.jdbc.JDBCAppender: void closeConnection(java.sql.Connection)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: void createAssociationPathCriteriaMap()> -> _SINK_
<org.springframework.orm.ibatis.support.AbstractLobTypeHandler: java.lang.Object getResult(java.sql.ResultSet,int)> -> _SINK_
<org.mmbase.bridge.Query: java.lang.String toSql()> -> _SINK_
<com.mysql.jdbc.MysqlIO: int getServerStatus()> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void parameter(antlr.collections.AST)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Time__c: void setProject_Logs__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.jdbc.core.support.JdbcBeanDefinitionReader$1: void processRow(java.sql.ResultSet)> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: org.mongodb.morphia.query.UpdateOperations inc(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[])> -> _SINK_
<org.hibernate.hql.ast.tree.DotNode: void dereferenceEntity(org.hibernate.type.EntityType,boolean,java.lang.String,boolean,antlr.collections.AST)> -> _SINK_
<org.hibernate.criterion.Example: void appendComponentCondition(java.lang.String,java.lang.Object,org.hibernate.type.AbstractComponentType,org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery,java.lang.StringBuffer)> -> _SINK_
<com.endeca.navigation.ENEQuery: long getNavNumAggrERecs()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setCachePrepStmts(boolean)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLQuery: java.lang.Object loadSingleField(int,org.castor.jdo.engine.CounterRef)> -> _SINK_
<org.mmbase.module.database.MultiStatement: void setFetchSize(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getNullNamePatternMatchesAll()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: java.lang.String toString(org.postgresql.jdbc2.AbstractJdbc2Array$PgArrayList)> -> _SINK_
<org.postgresql.core.VisibleBufferedInputStream: int available()> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion propertyGeSome(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQueryJoinReturn: java.lang.String getOwnerProperty()> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.DynamicContext: void appendSql(java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsExpressionsInOrderBy()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setObject(int,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setBytes(int,byte[])> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: void <clinit>()> -> _SINK_
<java.sql.PreparedStatement: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<com.amazonaws.services.datapipeline.DataPipelineAsyncClient$11: java.lang.Object call()> -> _SINK_
<org.springframework.jdbc.object.RdbmsOperation: void setTypes(int[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.Campaign: void setShares(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapSession: java.sql.Connection getCurrentConnection()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsPositionedDelete()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.SampleServiceHelper: java.util.List findSampleIdsBy(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[])> -> _SINK_
<org.postgresql.util.HStoreConverter: byte[] toBytes(java.util.Map,org.postgresql.core.Encoding)> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.QueryImpl: java.util.Collection query()> -> _SINK_
<org.mmbase.module.tools.MMAdmin: java.util.Vector getDatabasesList()> -> _SINK_
<org.hibernate.loader.criteria.CriteriaLoader: void <init>(org.hibernate.persister.entity.OuterJoinLoadable,org.hibernate.engine.SessionFactoryImplementor,org.hibernate.impl.CriteriaImpl,java.lang.String,java.util.Map)> -> _SINK_
<org.springframework.orm.jdo.JdoDialect: void applyQueryTimeout(javax.jdo.Query,int)> -> _SINK_
<org.hibernate.id.SequenceIdentityGenerator$Delegate: org.hibernate.id.insert.IdentifierGeneratingInsert prepareIdentifierGeneratingInsert()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$TypeDescriptor: void <init>(com.mysql.jdbc.DatabaseMetaData,java.lang.String,java.lang.String)> -> _SINK_
<org.castor.jdo.engine.AbstractConnectionFactory: void initializeMapping()> -> _SINK_
<org.postgresql.largeobject.LargeObject: void seek(int,int)> -> _SINK_
<org.apache.ibatis.executor.loader.ResultLoader: java.util.List selectList()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseConfigs(java.lang.String)> -> _SINK_
<org.eclipse.acceleo.engine.generation.AcceleoEngine: void checkEvaluation(org.eclipse.acceleo.model.mtl.ModuleElement,java.util.List)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void selectColumn(antlr.collections.AST)> -> _SINK_
<com.sforce.soap.enterprise.sobject.EmailTemplate: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.springframework.jdbc.core.JdbcOperations: java.util.Map queryForMap(java.lang.String,java.lang.Object[])> -> _SINK_
<org.mmbase.module.core.MMTable: java.util.Vector searchVector(java.lang.String)> -> _SINK_
<org.postgresql.geometric.PGbox: void <init>(org.postgresql.geometric.PGpoint,org.postgresql.geometric.PGpoint)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int deleteCalendar(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Field: int getSQLType()> -> _SINK_
<com.mchange.v2.c3p0.DriverManagerDataSource: void setLoginTimeout(int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateNCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<org.apache.ibatis.type.BaseTypeHandler: java.lang.Object getResult(java.sql.CallableStatement,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: void rollback()> -> _SINK_
<com.sforce.soap.enterprise.fault.MalformedQueryFault: void write(javax.xml.namespace.QName,com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.DomainTypesInformationUtil: java.util.List getSubclasses(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.EtxIndexCreator: void createEtxIndex(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.nativejdbc.JBossNativeJdbcExtractor: java.sql.PreparedStatement getNativePreparedStatement(java.sql.PreparedStatement)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$35: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.sql.Delete: org.hibernate.sql.Delete addWhereFragment(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setIgnoreNonTxTables(boolean)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Blob: void <init>(org.postgresql.core.BaseConnection,long)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setResultSetConcurrency(int)> -> _SINK_
<org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setQueryTimeout(int)> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsRequest: java.lang.String getPipelineId()> -> _SINK_
<org.exolab.castor.jdo.drivers.HsqlQueryExpression: java.lang.StringBuffer getStandardStatement(boolean,boolean)> -> _SINK_
<com.mchange.v1.db.sql.StatementUtils: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.hibernate.sql.ConditionFragment: org.hibernate.sql.ConditionFragment setCondition(java.lang.String[],java.lang.String[])> -> _SINK_
<org.apache.ibatis.binding.MapperMethod: void setupCommandType()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Profile: void setUsers(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getAccessControlFilter()> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLDataException: void <init>(java.lang.String,java.lang.String,int)> -> _SINK_
<org.hibernate.QueryException: java.lang.String getMessage()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.Set selectPausedTriggerGroups(java.sql.Connection)> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: void checkOrderClause(org.exolab.castor.jdo.oql.ParseTreeNode)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.StepField createStepField(org.mmbase.storage.search.Step,java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.cqlresultset.CQLQueryResults: void <init>()> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder is(java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsCatalogsInProcedureCalls()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void joinElement(antlr.collections.AST)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setBigInteger(java.lang.String,java.math.BigInteger)> -> _SINK_
<org.quartz.utils.DBConnectionManager: void shutdown(java.lang.String)> -> _SINK_
<org.apache.ibatis.migration.commands.BaseCommand: org.apache.ibatis.jdbc.ScriptRunner getScriptRunner()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setBlob(int,java.sql.Blob)> -> _SINK_
<com.mysql.jdbc.Connection: boolean canHandleAsServerPreparedStatementNoCache(java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: java.lang.String getQuotedIdChar()> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.SortOrder addSortOrder(org.mmbase.storage.search.StepField,int,boolean,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsGetGeneratedKeys()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxProcedureNameLength()> -> _SINK_
<org.hibernate.dialect.InterbaseDialect: void <init>()> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: void testQuery_MaxSize_NoResults()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLFieldInfo: org.exolab.castor.mapping.FieldDescriptor getFieldDescriptor()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: java.sql.ResultSet executeQuery()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.util.Map getEnabledFilters()> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void filters(antlr.collections.AST)> -> _SINK_
<org.apache.commons.beanutils.JDBCDynaClass: org.apache.commons.beanutils.DynaProperty createDynaProperty(java.sql.ResultSetMetaData,int)> -> _SINK_
<org.hibernate.engine.query.NativeSQLQueryPlan: void <clinit>()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String checkBlockedState(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.core.Encoding: java.lang.String decode(byte[])> -> _SINK_
<com.sforce.soap.enterprise.QueryResult: void setDone(boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateCronTrigger(java.sql.Connection,org.quartz.CronTrigger)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: void <init>(org.hibernate.engine.query.sql.NativeSQLQueryReturn[],org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryResult: int hashCode()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsUnion()> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: int getV3Length(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.CloudscapeDelegate: java.lang.Object getObjectFromBlob(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: void beforeFirst()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void detach()> -> _SINK_
<org.apache.ibatis.type.SqlDateTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void registerOutParameter(int,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$5: void execute(java.sql.Connection)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: boolean hasLock(java.lang.Object)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setNClob(java.lang.String,java.sql.NClob)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfo: java.lang.String getParameterTypeName(int)> -> _SINK_
<com.datastax.driver.core.exceptions.InvalidConfigurationInQueryException: void <init>(java.lang.String)> -> _SINK_
<org.hibernate.sql.Alias: java.lang.String getUnquotedAliasString(java.lang.String,int)> -> _SINK_
<org.mmbase.core.util.StorageConnector: void verifyBuilderQuery(org.mmbase.storage.search.SearchQuery)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: com.datastax.driver.core.Statement disableTracing()> -> _SINK_
<org.postgresql.jdbc3g.AbstractJdbc3gResultSet: java.lang.Object getUUID(java.lang.String)> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: boolean isFirst()> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean: java.lang.String getQueryDisplayName(java.util.List,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.fault.MalformedSearchFault: void writeFields(com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.engine.QueryParameters: boolean isReadOnly()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.lang.String getStringValue(org.mmbase.module.core.MMObjectNode,org.mmbase.core.CoreField)> -> _SINK_
<java.sql.ResultSet: java.math.BigDecimal getBigDecimal(java.lang.String,int)> -> _SINK_
<org.hibernate.hql.ast.tree.DotNode: void initText()> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion exists(org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.postgresql.largeobject.LargeObjectManager: org.postgresql.largeobject.LargeObject open(int,int,boolean)> -> _SINK_
<org.exolab.castor.persist.spi.AbstractCallQuery: boolean nextRow()> -> _SINK_
<gov.nih.nci.system.applicationservice.WritableApplicationService: java.util.List executeBatchQuery(java.util.List)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.gridCQL.RoleNameResolver: java.lang.String getRoleName(java.lang.String,gov.nih.nci.cagrid.cqlquery.Association)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateArray(int,java.sql.Array)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Time getTime(int)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.transform.QueryResultJsonUnmarshaller: void <init>()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData$1: void connectionClosed(javax.sql.ConnectionEvent)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: double getDouble(int)> -> _SINK_
<com.mysql.jdbc.Buffer: byte[] getBytes(int)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: java.util.Set getQuerySpaces()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: boolean getMoreResults()> -> _SINK_
<com.sforce.soap.enterprise.sobject.CustomEmail__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$StatementResultHandler: void handleResultRows(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)> -> _SINK_
<java.sql.ResultSet: java.sql.Date getDate(java.lang.String,java.util.Calendar)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: java.lang.String handleId(java.lang.String)> -> _SINK_
<org.postgresql.util.HostSpec: int getPort()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: short getShort(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setQueryTimeout(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setObject(int,java.lang.Object,int,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch$Options: java.util.List access$000(com.datastax.driver.core.querybuilder.Batch$Options)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Group: gov.nih.nci.cagrid.cqlquery.Association[] getAssociation()> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$MainFrame: void exit()> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator: void beginFunctionTemplate(antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl lessThan(java.lang.Object)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object near(double,double,double,boolean)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Array getArray(int)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.CompositionQueryBean: java.lang.String getChemicalName()> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: java.util.Map executeWithMapResult(org.springframework.orm.ibatis.SqlMapClientCallback)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean triggerExists(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.loader.Loader: void createSubselects(java.util.List,org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Date getDate(java.lang.String,java.util.Calendar)> -> _SINK_
<org.mmbase.servlet.BridgeServlet: org.mmbase.bridge.Cloud findCloud(org.mmbase.bridge.Cloud,java.lang.String,org.mmbase.servlet.BridgeServlet$QueryParts)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setMaxRows(int)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.Constraint createANDConstraint(org.mmbase.bridge.Query,org.mmbase.storage.search.Constraint,org.mmbase.storage.search.Constraint)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Solution: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setFetchSize(int)> -> _SINK_
<org.mmbase.storage.search.implementation.database.MySqlSqlHandler: java.lang.StringBuffer appendSortOrderField(java.lang.StringBuffer,org.mmbase.storage.search.SortOrder,boolean)> -> _SINK_
<org.springframework.orm.hibernate3.support.ClobStringType: void nullSafeSetInternal(java.sql.PreparedStatement,int,java.lang.Object,org.springframework.jdbc.support.lob.LobCreator)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setNClob(java.lang.String,java.io.Reader)> -> _SINK_
<org.hibernate.Session: java.sql.Connection close()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.net.URL getURL(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: int executeUpdate()> -> _SINK_
<org.apache.ibatis.builder.StaticSqlSource: void <init>(org.apache.ibatis.session.Configuration,java.lang.String,java.util.List)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getDriverMajorVersion()> -> _SINK_
<org.exolab.castor.jdo.drivers.DerbyQueryExpression: void <init>(org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<java.sql.ResultSetMetaData: java.lang.String getSchemaName(int)> -> _SINK_
<java.sql.Time: void setTime(long)> -> _SINK_
<org.hibernate.persister.entity.NamedQueryLoader: void <init>(java.lang.String,org.hibernate.persister.entity.EntityPersister)> -> _SINK_
<org.exolab.castor.jdo.Database: java.lang.String getDatabaseName()> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: long getEventDuration()> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: java.lang.String getJavaClass(int)> -> _SINK_
<org.mmbase.module.database.MultiStatement: boolean execute(java.lang.String,int[])> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: org.hibernate.type.Type[] getReturnTypes()> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.CQLResultsCreationUtil: gov.nih.nci.cagrid.cqlresultset.CQLQueryResults createAttributeResults(java.util.List,java.lang.String,java.lang.String[])> -> _SINK_
<org.postgresql.util.PGtokenizer: void remove(java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiPool: int getTotalConnectionsCreated()> -> _SINK_
<org.castor.jdo.conf.DatabaseDescriptor: void <init>()> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getDriverVersion()> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void <clinit>()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: int executeUpdate(java.lang.String)> -> _SINK_
<org.postgresql.geometric.PGpoint: int lengthInBytes()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: void addBatch(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: java.sql.RowId getRowId(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int selectNumJobs(java.sql.Connection)> -> _SINK_
<org.hibernate.stat.StatisticsImpl: void queryExecuted(java.lang.String,int,long)> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: void <init>(com.mysql.jdbc.MysqlIO,int,com.mysql.jdbc.Field[],boolean)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: org.exolab.castor.jdo.OQLQuery getOQLQuery(java.lang.String)> -> _SINK_
<org.hibernate.sql.ANSICaseFragment: void <init>()> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.RangeFilterList getDimSearchNavRangeFilters()> -> _SINK_
<org.hibernate.persister.collection.ElementPropertyMapping: java.lang.String[] toColumns(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.ibatis.type.LongTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.sql.Statement createStatement(int,int,int)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setCharacterStream(int,java.io.Reader,int)> -> _SINK_
<org.hibernate.util.JDBCExceptionReporter: void logExceptions(java.sql.SQLException,java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4DatabaseMetaData: java.sql.ResultSet getProcedures(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.bouncycastle.x509.util.LDAPStoreHelper: void addToCache(java.lang.String,java.util.List)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: java.lang.String timeToString(java.util.Date)> -> _SINK_
<org.hibernate.engine.ParameterBinder: int bindNamedParameters(java.sql.PreparedStatement,java.util.Map,int,org.hibernate.engine.ParameterBinder$NamedParameterSource,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavExposedRefinements(com.endeca.navigation.DimValIdList)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DataSourceWrapper: void setPassword(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void beforeFirst()> -> _SINK_
<com.sforce.soap.enterprise.sobject.SolutionFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getDriverMajorVersion()> -> _SINK_
<org.hibernate.mapping.Table: java.lang.String sqlTemporaryTableCreateString(org.hibernate.dialect.Dialect,org.hibernate.engine.Mapping)> -> _SINK_
<gov.nih.nci.cagrid.data.enumeration.stubs.EnumerationQueryResponse: gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer getEnumerationResponseContainer()> -> _SINK_
<org.hibernate.engine.query.HQLQueryPlan: void <init>(java.lang.String,java.lang.String,boolean,java.util.Map,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void <clinit>()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: java.nio.ByteBuffer[] getValues()> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean: void <init>()> -> _SINK_
<org.apache.ibatis.mapping.ResultMapping: java.lang.String getNestedQueryId()> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy$BestResponseTimeBalanceStrategy: com.mysql.jdbc.Connection pickConnection()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateDouble(java.lang.String,double)> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder: void INNER_JOIN(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setDouble(int,double)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getSuperTables(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.ConnectionTester: int activeCheckConnection(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int)> -> _SINK_
<javax.sql.PooledConnection: void removeConnectionEventListener(javax.sql.ConnectionEventListener)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setDouble(int,double)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setTime(java.lang.String,java.sql.Time)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxRowSize()> -> _SINK_
<org.mmbase.module.database.MultiStatement: java.sql.ResultSet getResultSet()> -> _SINK_
<org.hibernate.Session: java.sql.Connection connection()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setByte(int,byte)> -> _SINK_
<java.sql.SQLWarning: void <init>(java.lang.String,java.lang.String,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: boolean getBoolean(java.lang.String)> -> _SINK_
<org.apache.taglibs.standard.tag.rt.sql.TransactionTag: void <init>()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Expense__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<java.sql.ResultSet: boolean getBoolean(int)> -> _SINK_
<org.hibernate.dialect.SAPDBDialect: void <init>()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection: void <init>(java.sql.Connection,com.mchange.v2.c3p0.ConnectionTester,boolean,boolean)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.SDK4QueryProcessor: java.util.List queryCoreService(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: void loadMappedAndUnmappedColumnNames(java.sql.ResultSet,org.apache.ibatis.mapping.ResultMap,java.util.List,java.util.List)> -> _SINK_
<org.hibernate.dialect.Dialect: org.hibernate.sql.CaseFragment createCaseFragment()> -> _SINK_
<au.com.bytecode.opencsv.ResultSetHelperService: java.lang.String[] getColumnValues(java.sql.ResultSet)> -> _SINK_
<org.exolab.castor.jdo.oql.OQLSyntaxException: void <init>(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: java.sql.SQLXML getSQLXML(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: void clearWarnings()> -> _SINK_
<com.amazonaws.util.HttpUtils: boolean usePayloadForQueryParameters(com.amazonaws.Request)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory: boolean checkBinaryFileBasePath(java.lang.String)> -> _SINK_
<org.hibernate.event.def.DefaultRefreshEventListener: void onRefresh(org.hibernate.event.RefreshEvent,java.util.Map)> -> _SINK_
<java.sql.ResultSet: void updateRow()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.lang.Object getObject(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: boolean exists(org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<java.sql.DatabaseMetaData: boolean isReadOnly()> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: java.lang.Integer getAlias(org.mmbase.bridge.Cloud,java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateFloat(int,float)> -> _SINK_
<org.hibernate.type.NullableType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[])> -> _SINK_
<org.postgresql.core.Encoding: java.io.Writer getEncodingWriter(java.io.OutputStream)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateBoolean(java.lang.String,boolean)> -> _SINK_
<org.mmbase.bridge.util.HugeNodeListIterator: void executeNextQuery(org.mmbase.bridge.Query)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$23: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.ResultSet executeQuery()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.io.InputStream getBinaryStream(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.FromClause$3: boolean include(antlr.collections.AST)> -> _SINK_
<org.springframework.jdbc.core.CallableStatementCreator: java.sql.CallableStatement createCallableStatement(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getPreparedStatementCacheSize()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4SQLXML: java.io.OutputStream setBinaryStream()> -> _SINK_
<org.hibernate.hql.QuerySplitter: java.lang.String getImportedClass(java.lang.String,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setGenerateSimpleParameterMetadata(boolean)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addEqualConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.Field,java.lang.Boolean)> -> _SINK_
<org.castor.jdo.conf.Database: void <init>()> -> _SINK_
<org.springframework.orm.hibernate3.SessionFactoryUtils: org.hibernate.Session doGetSession(org.hibernate.SessionFactory,org.hibernate.Interceptor,org.springframework.jdbc.support.SQLExceptionTranslator,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean storesUpperCaseIdentifiers()> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: long queryForLong(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Date getDate(java.lang.String,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.Field unpackField(com.mysql.jdbc.Buffer,boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Investor_Account__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.param.ParameterSpecification: int bind(java.sql.PreparedStatement,org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor,int)> -> _SINK_
<java.sql.SQLXML: java.lang.String getString()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateNString(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setDynamicCalendars(boolean)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void checkScrollable()> -> _SINK_
<org.mongodb.morphia.dao.BasicDAO: java.util.List findIds(org.mongodb.morphia.query.Query)> -> _SINK_
<com.mysql.jdbc.profiler.ProfileEventSink: void removeInstance(com.mysql.jdbc.Connection)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Lead: void setShares(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.List queryForList(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource)> -> _SINK_
<org.hibernate.engine.StatefulPersistenceContext: java.lang.Object[] getNaturalIdSnapshot(java.io.Serializable,org.hibernate.persister.entity.EntityPersister)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setTasks(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean rowInserted()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: gov.nih.nci.security.authorization.domainobjects.Group getGroup(java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$2: void <init>(com.mysql.jdbc.DatabaseMetaData,com.mysql.jdbc.DatabaseMetaData$IteratorWithCleanup,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.sql.Statement,java.util.ArrayList)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: java.lang.String getDescription()> -> _SINK_
<com.mysql.jdbc.Connection: int getServerSubMinorVersion()> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator: void <init>(gov.nih.nci.cagrid.cqlresultset.CQLQueryResults,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean storesLowerCaseQuotedIdentifiers()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setCursorName(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.SqlASTFactory: void <init>(org.hibernate.hql.ast.HqlSqlWalker)> -> _SINK_
<org.postgresql.core.types.PGInteger: void <init>(java.lang.Integer)> -> _SINK_
<java.sql.CallableStatement: java.sql.Array getArray(java.lang.String)> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQueryCollectionReturn: java.lang.String getOwnerEntityName()> -> _SINK_
<org.hibernate.type.Type: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,boolean[],org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.io.Reader getCharacterStream(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getVersionColumns(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: com.amazonaws.services.dynamodbv2.model.QueryRequest withExclusiveStartKey(java.util.Map)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: boolean execute(java.lang.String,int)> -> _SINK_
<org.mongodb.morphia.query.Shape: com.mongodb.DBObject toDBObject()> -> _SINK_
<org.hibernate.loader.custom.sql.SQLCustomQuery: void <clinit>()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.lang.String getPGType(int)> -> _SINK_
<org.mmbase.bridge.util.GrowingTreeList: org.mmbase.bridge.NodeQuery getTemplate()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getDefaultTransactionIsolation()> -> _SINK_
<org.exolab.castor.jdo.drivers.HsqlFactory: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<org.hibernate.criterion.NotExpression: org.hibernate.engine.TypedValue[] getTypedValues(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.hibernate.mapping.SimpleAuxiliaryDatabaseObject: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: int getMaxRows()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Task__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.id.insert.InsertSelectIdentityInsert: java.lang.String toStatementString()> -> _SINK_
<org.springframework.web.servlet.view.jasperreports.AbstractJasperReportsView: net.sf.jasperreports.engine.JasperPrint fillReport(java.util.Map)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Time getTime(java.lang.String)> -> _SINK_
<com.mysql.jdbc.BlobFromLocator$LocatorInputStream: int read(byte[])> -> _SINK_
<org.exolab.castor.persist.spi.AbstractCallQuery: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setObject(java.lang.String,java.lang.Object,int,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setRewriteBatchedStatements(boolean)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.ResultSet executeQuery()> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: java.util.List queryForList(java.lang.String,int,int)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setAggrERecStructureExpr(java.lang.String)> -> _SINK_
<org.hibernate.QueryParameterException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void addFromClass(java.lang.String,org.hibernate.persister.entity.Queryable)> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.Query: java.util.Collection query(int,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Milestone__c: void setChild_Milestones__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.Clob: long position(java.lang.String,long)> -> _SINK_
<org.hibernate.dialect.PostgreSQLDialect: java.lang.String getSequenceNextValString(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Job_Application__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.stat.StatisticsImplementor: void queryCacheHit(java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.security.authentication.helper.RDBMSHelper: boolean authenticate(java.util.Hashtable,java.lang.String,char[],javax.security.auth.Subject)> -> _SINK_
<oracle.toplink.internal.databaseaccess.DatabaseAccessor: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.engine.SubselectFetch: void <init>(java.lang.String,org.hibernate.persister.entity.Loadable,org.hibernate.engine.QueryParameters,java.util.Set,java.util.Map)> -> _SINK_
<org.hibernate.engine.ParameterBinder: int bindNamedParameters(java.sql.PreparedStatement,org.hibernate.engine.QueryParameters,int,org.hibernate.engine.ParameterBinder$NamedParameterSource,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.amazonaws.auth.AbstractAWSSigner: java.io.InputStream getBinaryRequestPayloadStreamWithoutQueryParams(com.amazonaws.Request)> -> _SINK_
<org.springframework.jdbc.object.SqlCall: boolean isSqlReadyForUse()> -> _SINK_
<org.hibernate.hql.ast.tree.AggregateNode: void setScalarColumnText(int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setClob(int,java.sql.Clob)> -> _SINK_
<org.hibernate.dialect.PostgreSQLDialect$1: java.lang.String extractConstraintName(java.sql.SQLException)> -> _SINK_
<com.mysql.jdbc.log.StandardLogger: void logInfo(java.lang.Object)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete: com.datastax.driver.core.querybuilder.Delete$Where where(com.datastax.driver.core.querybuilder.Clause)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean storesLowerCaseQuotedIdentifiers()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DB2v6Delegate: int selectNumTriggersForJob(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<java.sql.CallableStatement: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> -> _SINK_
<java.sql.Statement: void cancel()> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy: com.mysql.jdbc.Connection access$300(com.mysql.jdbc.LoadBalancingConnectionProxy,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$14: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<org.apache.ibatis.session.Configuration: java.lang.Object getMapper(java.lang.Class,org.apache.ibatis.session.SqlSession)> -> _SINK_
<org.mmbase.module.database.MultiPool: void setMaxLifeTime(long)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Array makeArray(int,java.lang.String)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientFactoryBean: java.lang.Class class$(java.lang.String)> -> _SINK_
<javax.sql.DataSource: java.sql.Connection getConnection()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: int executeUpdate(java.lang.String,java.lang.String[])> -> _SINK_
<org.mmbase.bridge.util.HugeNodeListIterator: org.mmbase.bridge.Node previousNode()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$49: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void clearBatch()> -> _SINK_
<org.springframework.jdbc.support.JdbcAccessor: void setDataSource(javax.sql.DataSource)> -> _SINK_
<org.hibernate.id.IdentityGenerator$BasicDelegate: java.io.Serializable getResult(org.hibernate.engine.SessionImplementor,java.sql.ResultSet,java.lang.Object)> -> _SINK_
<org.mmbase.bridge.util.Queries: org.mmbase.storage.search.Constraint copyConstraint(org.mmbase.storage.search.Constraint,org.mmbase.storage.search.Step,org.mmbase.bridge.Query,org.mmbase.storage.search.Step)> -> _SINK_
<org.postgresql.Driver: int getLogLevel()> -> _SINK_
<org.springframework.jdbc.core.StatementCreatorUtils: void setParameterValue(java.sql.PreparedStatement,int,int,java.lang.String,java.lang.Object)> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder notIn(java.lang.Object)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: org.exolab.castor.jdo.engine.SQLEngine getExtends()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.bridge.NodeQuery createRelatedNodeListQuery(org.mmbase.bridge.Node,java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXADataSource: javax.sql.XAConnection getXAConnection(java.lang.String,java.lang.String)> -> _SINK_
<java.sql.Statement: int getMaxFieldSize()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Project__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.jmx.StatisticsService: long getQueryExecutionMaxTime()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setClob(int,java.sql.Clob)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: void abortBatch(java.sql.SQLException)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.math.BigDecimal getBigDecimal(int,int)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setString(int,java.lang.String)> -> _SINK_
<org.hibernate.sql.Template: java.lang.String renderWhereStringTemplate(java.lang.String,java.lang.String,org.hibernate.dialect.Dialect)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getURL()> -> _SINK_
<org.apache.ibatis.datasource.unpooled.UnpooledDataSource: void setLoginTimeout(int)> -> _SINK_
<com.datastax.driver.core.QueryTrace: int getDurationMicros()> -> _SINK_
<org.postgresql.core.TypeInfo: boolean isSigned(int)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate: java.util.List findByNamedQueryAndNamedParam(java.lang.String,java.lang.String,java.lang.Object)> -> _SINK_
<org.postgresql.util.PGtokenizer: java.lang.String removePara(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean storesUpperCaseIdentifiers()> -> _SINK_
<com.datastax.driver.core.querybuilder.Using$WithValue: void <init>(java.lang.String,long)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setArray(int,java.sql.Array)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Blob getBlob(int)> -> _SINK_
<org.postgresql.core.ParameterList: org.postgresql.core.ParameterList copy()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateDouble(int,double)> -> _SINK_
<com.amazonaws.services.datapipeline.DataPipelineAsyncClient$11: void <init>(com.amazonaws.services.datapipeline.DataPipelineAsyncClient,com.amazonaws.services.datapipeline.model.QueryObjectsRequest)> -> _SINK_
<org.castor.persist.resolver.ManyToManyRelationResolver: org.castor.persist.UpdateFlags preStore(org.castor.persist.TransactionContext,org.exolab.castor.persist.OID,java.lang.Object,int,java.lang.Object)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Blob: void <init>(org.postgresql.core.BaseConnection,long)> -> _SINK_
<java.sql.ResultSet: java.sql.Blob getBlob(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: double toDouble(java.lang.String)> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy: void pickNewConnection()> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: void putShortLength(java.nio.ByteBuffer,int)> -> _SINK_
<com.mysql.jdbc.ResultSet: void setBinaryEncoded()> -> _SINK_
<org.exolab.castor.mapping.xml.FieldMappingDescriptor$17: java.lang.Object newInstance(java.lang.Object)> -> _SINK_
<gov.nih.nci.cananolab.system.applicationservice.impl.CaNanoLabApplicationServiceImpl: java.util.List getAllPublicData()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.QueryModifier: java.lang.String getDistinctAttribute()> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$4: java.lang.Object doInSqlMapClient(com.ibatis.sqlmap.client.SqlMapExecutor)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: int delete(java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: org.hibernate.hql.ast.util.ASTPrinter getASTPrinter()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$13: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: int getInt(java.lang.String)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: void processResults(org.postgresql.core.Query,org.postgresql.core.ResultHandler,int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: java.lang.Object rawStatementOperation(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])> -> _SINK_
<org.hibernate.criterion.CriteriaQuery: java.lang.String getPropertyName(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.ComboPooledDataSource: java.lang.String getPreferredTestQuery()> -> _SINK_
<com.mysql.jdbc.TimeUtil: long jdbcCompliantZoneShift(java.util.Calendar,java.util.Calendar,java.util.Date)> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.ApplicationServiceImpl: java.lang.Integer getQueryRowCount(java.lang.Object,java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Time getTime(int,java.util.Calendar)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: java.util.List selectList(java.lang.String,java.lang.Object,org.apache.ibatis.session.RowBounds)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: void close()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setTime(int,java.util.Date)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void checkRowPos()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.sql.Time getTime(int,java.util.Calendar)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: org.hibernate.persister.collection.QueryableCollection getCollectionPersister(java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.sql.Ref getRef(java.lang.String)> -> _SINK_
<gov.nih.nci.system.web.HTTPQuery: java.lang.String getQuerySyntax()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int deleteJobDetail(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.lang.String addReturning(org.postgresql.core.BaseConnection,java.lang.String,java.lang.String[],boolean)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setInt(java.lang.String,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean nullsAreSortedHigh()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.util.List extractForeignKeyForTable(java.util.ArrayList,java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: void setExclusiveStartKey(java.util.Map)> -> _SINK_
<com.sforce.soap.enterprise.sobject.NewsFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2: void setOpportunityLineItems(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.QueryException: void <init>(java.lang.Exception)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: int getFetchDirection()> -> _SINK_
<com.mysql.jdbc.ResultSet: void moveToInsertRow()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateBytes(int,byte[])> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource$1: void connectionErrorOccurred(javax.sql.ConnectionEvent)> -> _SINK_
<com.mysql.jdbc.Connection: boolean isClosed()> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.ApplicationServiceImpl: void <init>(gov.nih.nci.system.util.ClassCache)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getGenerateSimpleParameterMetadata()> -> _SINK_
<com.mysql.jdbc.Buffer: void <init>(byte[])> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setBytes(int,byte[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.math.BigDecimal getBigDecimal(int,int)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateFloat(int,float)> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceTransactionManager: void setDataSource(javax.sql.DataSource)> -> _SINK_
<com.amazonaws.services.dynamodbv2.AmazonDynamoDBAsyncClient$17: java.lang.Object call()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void setOwnerForProtectionElement(java.lang.String,java.lang.String[])> -> _SINK_
<org.hibernate.connection.C3P0ConnectionProvider: void closeConnection(java.sql.Connection)> -> _SINK_
<org.apache.http.client.utils.URLEncodedUtils: java.util.List parse(java.net.URI,java.lang.String)> -> _SINK_
<org.hibernate.impl.SessionImpl: java.util.Iterator iterate(java.lang.String,org.hibernate.engine.QueryParameters)> -> _SINK_
<com.mysql.jdbc.Statement: long getLastInsertID()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$IteratorWithCleanup: boolean hasNext()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: boolean rollback()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateBlob(java.lang.String,java.sql.Blob)> -> _SINK_
<org.hibernate.engine.query.ParamLocationRecognizer$NamedParameterDescription: void add(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: byte[] getBytes(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: com.datastax.driver.core.policies.RetryPolicy getRetryPolicy()> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: int getParameterCount()> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator$MySqlType: void <init>(org.exolab.castor.jdo.keygen.IdentityKeyGenerator,org.exolab.castor.jdo.keygen.IdentityKeyGenerator$1)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: boolean isInFrom()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.math.BigDecimal getBigDecimal(int,int)> -> _SINK_
<org.springframework.jdbc.datasource.DriverManagerDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: int getScale(int)> -> _SINK_
<org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler: void <init>(org.apache.ibatis.session.Configuration,java.lang.Class)> -> _SINK_
<org.castor.jdo.conf.DatabaseDescriptor$1: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate: java.util.List findByNamedQuery(java.lang.String,java.lang.Object[])> -> _SINK_
<org.hibernate.criterion.AggregateProjection: org.hibernate.type.Type[] getTypes(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.postgresql.core.v3.CopyInImpl: void flushCopy()> -> _SINK_
<org.hibernate.dialect.SybaseDialect: java.sql.ResultSet getResultSet(java.sql.CallableStatement)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void addBatch(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Asset: void setOpenActivities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanupConnection(java.sql.Connection)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: void <init>(java.sql.DatabaseMetaData)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: boolean getBoolean(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setShort(int,short)> -> _SINK_
<com.datastax.driver.core.exceptions.InvalidQueryException: com.datastax.driver.core.exceptions.DriverException copy()> -> _SINK_
<org.exolab.castor.jdo.DatabaseNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> -> _SINK_
<org.hibernate.type.BlobType: void set(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.sql.Array makeArray(int,byte[])> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ParameterMetaData: int getScale(int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXAConnection: int prepare(javax.transaction.xa.Xid)> -> _SINK_
<org.mmbase.module.corebuilders.RelDef: void removeNode(org.mmbase.module.core.MMObjectNode)> -> _SINK_
<com.mysql.jdbc.CallableStatement: long getLong(int)> -> _SINK_
<gov.nih.nci.system.webservice.WSQueryImpl: java.lang.String getTargetClassName(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.RowCountCallbackHandler: void processRow(java.sql.ResultSet,int)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl addCriteria(org.mongodb.morphia.query.FilterOperator,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: void setReadOnly(boolean)> -> _SINK_
<org.hibernate.jmx.StatisticsService: java.lang.String getQueryExecutionMaxTimeQueryString()> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.StringBuilder joinAndAppend(java.lang.StringBuilder,java.lang.String,java.util.List,java.util.List)> -> _SINK_
<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.Buffer compressPacket(com.mysql.jdbc.Buffer,int,int,int)> -> _SINK_
<org.postgresql.core.PGStream: void Send(byte[],int,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.Calendar selectCalendar(java.sql.Connection,java.lang.String)> -> _SINK_
<org.postgresql.core.Logger: void log(java.lang.String,java.lang.Throwable)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setIncludeInnodbStatusInDeadlockExceptions(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: int executeUpdate(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateBlobTrigger(java.sql.Connection,org.quartz.Trigger)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: java.lang.String getQueryString()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void syncUpdate()> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: java.lang.String glueAlias(java.lang.String,java.lang.Integer)> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSourceFactory: javax.sql.DataSource create(java.lang.String,java.lang.String,java.lang.String,int,int,int,int,int)> -> _SINK_
<gov.nih.nci.cagrid.data.bdt.stubs.BdtQueryRequest: void setCqlQuery(gov.nih.nci.cagrid.data.bdt.stubs.BdtQueryRequestCqlQuery)> -> _SINK_
<com.mysql.jdbc.Buffer: int readnBytes()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Task: void setRecurringTasks(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.Savepoint setSavepoint(java.lang.String)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setAf(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$1: void handleCompletion()> -> _SINK_
<org.bouncycastle.i18n.filter.SQLFilter: java.lang.String doFilter(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setBytes(java.lang.String,byte[])> -> _SINK_
<com.sforce.soap.enterprise.fault.MalformedSearchFault: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.springframework.jdbc.core.RowMapper: java.lang.Object mapRow(java.sql.ResultSet,int)> -> _SINK_
<org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl: void setValues(java.sql.PreparedStatement)> -> _SINK_
<org.postgresql.util.PGInterval: double nullSafeDoubleGet(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: java.sql.ResultSet getResultSet()> -> _SINK_
<org.springframework.jdbc.core.SqlParameter: int getSqlType()> -> _SINK_
<test.gov.nih.nci.security.hibernate.annotations.HibernateUtil: void checkData(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.io.InputStream getBinaryStream(java.lang.String)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: void setMaxConnections(int)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void close()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: int executeUpdate()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsOpenStatementsAcrossRollback()> -> _SINK_
<com.mysql.jdbc.CallableStatement: float getFloat(java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryResult: com.amazonaws.services.dynamodbv2.model.QueryResult withLastEvaluatedKey(java.util.Map)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.io.InputStream getBinaryStream(java.lang.String)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: void processRootReturn(org.hibernate.engine.query.sql.NativeSQLQueryRootReturn)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: java.sql.Timestamp toTimestamp(java.util.Calendar,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: float getFloat(java.lang.String)> -> _SINK_
<org.postgresql.core.PGStream: org.postgresql.core.Encoding getEncoding()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$30: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.hql.classic.WhereParser: void doPathExpression(java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: boolean isLast()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager$InputStreamBlob: void getBytes()> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression: boolean isConsistentRead()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getCatalogs()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: int getType()> -> _SINK_
<org.hibernate.type.LiteralType: java.lang.String objectToSQLString(java.lang.Object,org.hibernate.dialect.Dialect)> -> _SINK_
<util.reflection.EntityHelper: java.lang.String getNamedQuery(java.lang.Class,java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateShort(int,short)> -> _SINK_
<com.mysql.jdbc.CallableStatement: boolean getBoolean(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int selectNumTriggers(java.sql.Connection)> -> _SINK_
<org.acegisecurity.acls.jdbc.BasicLookupStrategy$ProcessResultSet: java.lang.Object extractData(java.sql.ResultSet)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: double getDouble(int)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNtpr(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$IntegerConnectionProperty: int getUpperBound()> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: void mapField(org.mmbase.core.CoreField,org.mmbase.storage.search.StepField)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateInt(java.lang.String,int)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: java.lang.String toString(int)> -> _SINK_
<org.springframework.orm.hibernate3.SessionFactoryUtils: org.hibernate.Session getJtaSynchronizedSession(org.springframework.orm.hibernate3.SessionHolder,org.hibernate.SessionFactory,org.springframework.jdbc.support.SQLExceptionTranslator)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void arithmeticExpr(antlr.collections.AST)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void <init>(org.postgresql.core.Query,org.postgresql.core.BaseStatement,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor,int,int,int,int,int)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setShort(int,short)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void create(org.mmbase.core.CoreField)> -> _SINK_
<java.sql.Connection: void close()> -> _SINK_
<oracle.toplink.sessions.DatabaseSession: void logout()> -> _SINK_
<org.mmbase.storage.search.implementation.NodeSearchQuery: org.mmbase.module.core.MMObjectBuilder getBuilder()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxTablesInSelect()> -> _SINK_
<org.apache.ibatis.executor.resultset.NestedResultSetHandler: void createRowKeyForUnmappedProperties(org.apache.ibatis.mapping.ResultMap,java.sql.ResultSet,org.apache.ibatis.cache.CacheKey)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$CallableBatchResultHandler: void handleWarning(java.sql.SQLWarning)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterUtils: java.lang.Object[] buildValueArray(java.lang.String,java.util.Map)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Task__c: void setProject_Times__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void initializeFromRef(javax.naming.Reference)> -> _SINK_
<org.springframework.scheduling.quartz.SchedulerFactoryBean: javax.sql.DataSource getConfigTimeNonTransactionalDataSource()> -> _SINK_
<java.sql.Connection: boolean getAutoCommit()> -> _SINK_
<org.hibernate.criterion.SubqueryExpression: org.hibernate.engine.SessionFactoryImplementor extractSessionFactoryImplementor(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement$BindValue: void reset()> -> _SINK_
<org.mmbase.cache.AggregatedResultCache: void <init>(int)> -> _SINK_
<org.hibernate.criterion.SubqueryExpression: java.lang.String toLeftSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.lang.String getString(java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavSortKey(java.lang.String)> -> _SINK_
<org.hibernate.engine.QueryParameters: java.lang.String getComment()> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean rowDeleted()> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSessionFactory: org.apache.ibatis.session.SqlSession openSessionFromDataSource(org.apache.ibatis.session.ExecutorType,org.apache.ibatis.session.TransactionIsolationLevel,boolean)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsMixedCaseQuotedIdentifiers()> -> _SINK_
<com.mchange.v2.sql.filter.RecreatePackage: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateBlob(int,java.sql.Blob)> -> _SINK_
<java.sql.SQLException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource: java.lang.String getPreferredTestQuery()> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter: void <init>(java.util.Locale)> -> _SINK_
<com.mysql.jdbc.MysqlIO: boolean hadWarnings()> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: void <init>(org.postgresql.core.BaseConnection,int)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: int readblock(java.io.InputStream,byte[],int)> -> _SINK_
<org.hibernate.impl.AbstractScrollableResults: void close()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: void <init>(org.postgresql.core.BaseConnection,int)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementLookup: void <init>(org.exolab.castor.jdo.engine.SQLEngine,org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: java.sql.Connection getConnection()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setObject(int,java.lang.Object,int,int)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setLocale(int,java.util.Locale)> -> _SINK_
<org.hibernate.hql.classic.Parser: void end(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.postgresql.ds.PGPoolingDataSource: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: float getFloat(int)> -> _SINK_
<com.mysql.jdbc.ResultSet: int parseIntAsDouble(int,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void addBatch(java.lang.String)> -> _SINK_
<org.postgresql.core.BaseConnection: void cancelQuery()> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: void recreate(org.hibernate.collection.PersistentCollection,java.io.Serializable,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.hibernate.mapping.PersistentClass: void setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateTime(int,java.sql.Time)> -> _SINK_
<org.hibernate.type.CustomType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateDate(java.lang.String,java.sql.Date)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$72: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.mmbase.module.database.JDBC: java.lang.String makeUrl(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.oql.Parser: org.exolab.castor.jdo.oql.ParseTreeNode offsetClause()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: void setCursorName(java.lang.String)> -> _SINK_
<org.hibernate.dialect.lock.UpdateLockingStrategy: java.lang.String generateLockString()> -> _SINK_
<org.hibernate.hql.classic.WhereParser: void start(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position_Tracker__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.ast.tree.AssignmentSpecification: void <init>(antlr.collections.AST,org.hibernate.persister.entity.Queryable)> -> _SINK_
<org.quartz.impl.jdbcjobstore.WebLogicDelegate: java.lang.Object getJobDetailFromBlob(java.sql.ResultSet,java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.SampleServiceHelper: gov.nih.nci.cananolab.domain.particle.Sample findSampleById(java.lang.String)> -> _SINK_
<org.postgresql.copy.PGCopyInputStream: int getFieldCount()> -> _SINK_
<com.mysql.jdbc.CursorRowProvider: void fetchMoreRows()> -> _SINK_
<java.sql.DatabaseMetaData: boolean updatesAreDetected(int)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.StepField createStepField(org.mmbase.storage.search.Step,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Array getArray(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.drivers.SybaseFactory: org.exolab.castor.persist.spi.PersistenceQuery getCallQuery(java.lang.String,java.lang.Class[],java.lang.Class,java.lang.String[],int[])> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$6: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<org.mongodb.morphia.utils.Helper: com.mongodb.DBCursor getCursor(java.lang.Iterable)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateBoolean(java.lang.String,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,int[])> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: void <init>(com.mysql.jdbc.Field[],boolean)> -> _SINK_
<org.springframework.orm.jdo.JdoTemplate$22: java.lang.Object doInJdo(javax.jdo.PersistenceManager)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateDouble(java.lang.String,double)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setD(java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.TreeList: org.mmbase.bridge.Node getRealNode(int,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: long getLong(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator: void <init>(org.exolab.castor.persist.spi.PersistenceFactory,int)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.TransactionTagSupport: void init()> -> _SINK_
<test.gov.nih.nci.security.dialect.MySQLPerformanceTest: void main(java.lang.String[])> -> _SINK_
<org.postgresql.Driver$ConnectThread: java.sql.Connection getResult(long)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: long getLong(int)> -> _SINK_
<org.castor.jdo.engine.JNDIConnectionFactory: void initializeFactory()> -> _SINK_
<org.postgresql.fastpath.Fastpath: int getInteger(java.lang.String,org.postgresql.fastpath.FastpathArg[])> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: void <clinit>()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.lang.Object getObject(java.lang.String)> -> _SINK_
<org.hibernate.mapping.Constraint: java.lang.String sqlDropString(org.hibernate.dialect.Dialect,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: void setServerName(java.lang.String)> -> _SINK_
<org.hibernate.mapping.PersistentClass: org.hibernate.engine.ExecuteUpdateResultCheckStyle getCustomSQLInsertCheckStyle()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setInt(java.lang.String,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setURL(int,java.net.URL)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageLookup: void <init>()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setLong(int,long)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.Calendar retrieveCalendar(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setUnicodeStream(int,java.io.InputStream,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getSchemas()> -> _SINK_
<com.mysql.jdbc.log.Log4JLogger: void logError(java.lang.Object,java.lang.Throwable)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$44: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: org.mongodb.morphia.query.UpdateOperations removeFirst(java.lang.String)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: java.util.List getSteps()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.lang.Object internalGetObject(int,org.postgresql.core.Field)> -> _SINK_
<org.springframework.orm.jdo.JdoTemplate$26: java.lang.Object doInJdo(javax.jdo.PersistenceManager)> -> _SINK_
<java.sql.ResultSet: void updateBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: boolean useBinary(org.postgresql.core.Field)> -> _SINK_
<com.endeca.navigation.ENEConnectionException: void <init>(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setEscapeProcessing(boolean)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Array getArray(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: boolean execute(java.lang.String,int[])> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: long getLong(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.drivers.ReturnedRSCallQuery: void <clinit>()> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: void setDatabaseName(java.lang.String)> -> _SINK_
<org.hibernate.persister.collection.QueryableCollection: java.lang.String[] getElementColumnNames()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Date getDate(int,java.util.Calendar)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: gov.nih.nci.security.authorization.domainobjects.Application getApplicationByName(java.lang.String)> -> _SINK_
<org.hibernate.type.AbstractCharArrayType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateCalendar(java.sql.Connection,java.lang.String,org.quartz.Calendar)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: void createObject(org.mmbase.module.core.MMObjectNode,org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$2: void forEach(java.lang.Object)> -> _SINK_
<org.springframework.jdbc.core.support.SqlLobValue: void <init>(byte[])> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: org.hibernate.hql.ast.tree.FromClause getCurrentFromClause()> -> _SINK_
<org.hibernate.sql.ForUpdateFragment: void <init>(org.hibernate.dialect.Dialect)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.StepField createStepField(org.mmbase.storage.search.Step,org.mmbase.bridge.Field)> -> _SINK_
<org.mmbase.storage.search.implementation.ModifiableQuery: org.mmbase.storage.search.implementation.ModifiableQuery setFields(java.util.List)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.utils.TriggerStatus selectTriggerStatus(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.bridge.implementation.BasicNode: org.mmbase.bridge.NodeList getRelatedNodes(org.mmbase.bridge.NodeManager,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.Field: void setTableName(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Statement: void checkNullOrEmptyQuery(java.lang.String)> -> _SINK_
<org.hibernate.exception.SQLExceptionConverterFactory: org.hibernate.exception.SQLExceptionConverter constructConverter(java.lang.String,org.hibernate.exception.ViolatedConstraintNameExtracter)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsCatalogsInProcedureCalls()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Candidate__c: void setR00N30000002hX17EAE__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.loader.Loader: void loadCollectionSubselect(org.hibernate.engine.SessionImplementor,java.io.Serializable[],java.lang.Object[],org.hibernate.type.Type[],java.util.Map,org.hibernate.type.Type)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$19: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.hql.ast.tree.IdentNode: void resolveIndex(antlr.collections.AST)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void resolve(antlr.collections.AST)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection$StatementHandler: void <init>(org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection,org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection$ConnectionHandler,java.sql.Statement)> -> _SINK_
<com.mysql.jdbc.ConnectionPropertiesTransform: java.util.Properties transformProperties(java.util.Properties)> -> _SINK_
<com.mysql.jdbc.Field: boolean isZeroFill()> -> _SINK_
<org.postgresql.core.QueryExecutor: org.postgresql.copy.CopyOperation startCopy(java.lang.String,boolean)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setLong(java.lang.String,long)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setFloat(java.lang.String,float)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: void appendTime(java.lang.StringBuffer,java.util.Calendar,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Options: com.datastax.driver.core.Statement setRetryPolicy(com.datastax.driver.core.policies.RetryPolicy)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$5: void forEach(java.lang.Object)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsBatchUpdates()> -> _SINK_
<org.mmbase.servlet.BridgeServlet$QueryParts: org.mmbase.bridge.Node getNode()> -> _SINK_
<org.hibernate.jdbc.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)> -> _SINK_
<org.hibernate.type.AnyType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,boolean[],org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.util.ReadAheadInputStream: void <init>(java.io.InputStream,boolean,com.mysql.jdbc.log.Log)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxCatalogNameLength()> -> _SINK_
<com.mysql.jdbc.Buffer: void writeBytesNoNull(byte[],int,int)> -> _SINK_
<org.hibernate.persister.collection.BasicCollectionPersister: org.hibernate.loader.collection.CollectionInitializer createCollectionInitializer(java.util.Map)> -> _SINK_
<org.hibernate.hql.ast.tree.FromReferenceNode: java.lang.String getPath()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Event: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.sobject.SolutionFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void setDbMetaInfo(org.exolab.castor.jdo.DbMetaInfo)> -> _SINK_
<org.exolab.castor.jdo.DatabaseNotFoundException: void <init>(java.lang.Throwable)> -> _SINK_
<java.sql.DatabaseMetaData: int getDriverMajorVersion()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getCacheCallableStmts()> -> _SINK_
<gov.nih.nci.system.query.example.DeleteExampleQuery: void <init>(java.lang.Object)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryResult: java.lang.Integer getCount()> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: void setReadOnly(boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.List findOrphanedFailedInstances(java.sql.Connection,java.util.List)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: boolean execute()> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: void setDirty(org.exolab.castor.mapping.xml.types.SqlDirtyType)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: com.amazonaws.services.dynamodb.model.QueryRequest withAttributesToGet(java.lang.String[])> -> _SINK_
<org.apache.ibatis.type.BigDecimalTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: int getNetworkTimeout()> -> _SINK_
<gov.nih.nci.security.dialect.CSMMySQLInnoDBDialect: void <init>()> -> _SINK_
<org.hibernate.persister.entity.JoinedSubclassEntityPersister: void <init>(org.hibernate.mapping.PersistentClass,org.hibernate.cache.CacheConcurrencyStrategy,org.hibernate.engine.SessionFactoryImplementor,org.hibernate.engine.Mapping)> -> _SINK_
<com.mysql.jdbc.Buffer: void writeFloat(float)> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringDecoder: java.util.Map getParameters()> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeQuery: void removeFields()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.Query newQuery(java.lang.Class,com.mongodb.DBCollection)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getURL()> -> _SINK_
<javax.persistence.NamedQuery: java.lang.String query()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Array getArray(java.lang.String)> -> _SINK_
<com.endeca.navigation.DisabledRefinementsConfig: com.endeca.navigation.DisabledRefinementsConfig parse(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils$1: void <init>()> -> _SINK_
<org.hibernate.impl.SessionImpl: java.util.List list(org.hibernate.impl.CriteriaImpl)> -> _SINK_
<org.exolab.castor.jdo.drivers.SybaseFactory: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: int executeUpdate()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsResultSetType(int)> -> _SINK_
<org.postgresql.util.PGInterval: int getMinutes()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Time getTime(int,java.util.Calendar)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void mergeJoins(org.hibernate.sql.JoinFragment)> -> _SINK_
<java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.util.Properties)> -> _SINK_
<org.springframework.orm.hibernate3.support.BlobSerializableType: java.lang.Object nullSafeGetInternal(java.sql.ResultSet,java.lang.String[],java.lang.Object,org.springframework.jdbc.support.lob.LobHandler)> -> _SINK_
<org.hibernate.hql.ast.ASTQueryTranslatorFactory: void <clinit>()> -> _SINK_
<test.gov.nih.nci.security.hibernate.annotations.AtFilterAnnotationsTest: void mainCardsAnnotated()> -> _SINK_
<org.springframework.jdbc.object.SqlUpdate: int updateByNamedParam(java.util.Map,org.springframework.jdbc.support.KeyHolder)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List queryForList(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.CompositionServiceHelper: gov.nih.nci.cananolab.domain.particle.FunctionalizingEntity findFunctionalizingEntityById(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Date getDate(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getIncludeInnodbStatusInDeadlockExceptions()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int[])> -> _SINK_
<org.mmbase.module.database.MultiPool: void shutdown()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setQueryTimeout(int)> -> _SINK_
<org.postgresql.largeobject.LargeObject: void <init>(org.postgresql.fastpath.Fastpath,long,int,org.postgresql.core.BaseConnection,boolean)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: java.sql.ParameterMetaData getParameterMetaData()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void deAssignProtectionElements(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsStatementPooling()> -> _SINK_
<org.hibernate.mapping.Join: void <clinit>()> -> _SINK_
<java.sql.CallableStatement: java.sql.Time getTime(java.lang.String,java.util.Calendar)> -> _SINK_
<org.mmbase.module.database.MultiPoolHandler: void checkTime()> -> _SINK_
<com.amazonaws.services.dynamodb.AmazonDynamoDB: com.amazonaws.services.dynamodb.model.QueryResult query(com.amazonaws.services.dynamodb.model.QueryRequest)> -> _SINK_
<org.mongodb.morphia.query.UpdateResults: java.lang.Object getNewId()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate$1: java.lang.Object doInPreparedStatement(java.sql.PreparedStatement)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: org.mmbase.storage.search.implementation.BasicAggregatedField addAggregatedField(org.mmbase.storage.search.Step,org.mmbase.core.CoreField,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$1: void <init>()> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: void select(java.lang.String,java.lang.Object,org.apache.ibatis.session.ResultHandler)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: void releaseSavepoint(java.sql.Savepoint)> -> _SINK_
<org.hibernate.connection.DriverManagerConnectionProvider: void closeConnection(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setRunningCTS13(boolean)> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.SetDataSourceTag: void <init>()> -> _SINK_
<org.hibernate.criterion.CriteriaQuery: java.lang.String[] getIdentifierColumns(org.hibernate.Criteria)> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapClientBuilder: com.ibatis.sqlmap.client.SqlMapClient buildSqlMapClient(java.io.Reader,java.util.Properties)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: boolean relative(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.lang.String getCatalog()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: int executeUpdate()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setFloat(int,float)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void addBatch()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$7: void forEach(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: org.exolab.castor.jdo.OQLQuery getOQLQuery()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsSchemasInTableDefinitions()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$43: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void bindString(int,java.lang.String,int)> -> _SINK_
<org.apache.ibatis.type.ShortTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<com.fasterxml.jackson.databind.deser.std.DateDeserializers$TimestampDeserializer: java.sql.Timestamp deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateString(int,java.lang.String)> -> _SINK_
<gov.nih.nci.system.query.cql.CQLAttribute: java.lang.String getName()> -> _SINK_
<org.exolab.castor.jdo.oql.OQLSyntaxException: void <init>(java.lang.String,java.lang.Throwable)> -> _SINK_
<org.postgresql.util.PGobject: void setType(java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeInfos: java.util.Calendar getCalendar()> -> _SINK_
<org.mmbase.storage.search.implementation.database.MySqlSqlHandler: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsUnion()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsDataDefinitionAndDataManipulationTransactions()> -> _SINK_
<org.hibernate.criterion.Projection: org.hibernate.type.Type[] getTypes(java.lang.String,org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.mongodb.morphia.query.QueryResults: java.util.List asList()> -> _SINK_
<com.mysql.jdbc.util.ErrorMappingsDocGenerator: void main(java.lang.String[])> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setObject(int,java.lang.Object,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxColumnsInOrderBy()> -> _SINK_
<gov.nih.nci.cananolab.dto.BaseQueryBean: void <init>()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean allProceduresAreCallable()> -> _SINK_
<org.mmbase.servlet.BridgeServlet$QueryParts: void setRequest(javax.servlet.http.HttpServletRequest)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: void <init>(org.mmbase.bridge.Cloud,org.mmbase.storage.search.implementation.BasicSearchQuery)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int)> -> _SINK_
<org.hibernate.id.SelectGenerator$SelectGeneratorDelegate: void bindParameters(org.hibernate.engine.SessionImplementor,java.sql.PreparedStatement,java.lang.Object)> -> _SINK_
<java.sql.CallableStatement: short getShort(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setTimestamp(int,java.sql.Timestamp)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: void clearWarnings()> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate$31: java.lang.Object doInHibernate(org.hibernate.Session)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: int getMaxFieldSize()> -> _SINK_
<org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: void loadSynchronizables()> -> _SINK_
<com.mysql.jdbc.Connection: void configureCharsetProperties()> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: char getArrayDelimiter(int)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: java.util.Map access$000(org.hibernate.loader.custom.sql.SQLQueryReturnProcessor)> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: void setCurrentRow(int)> -> _SINK_
<com.mysql.jdbc.StringUtils: boolean endsWith(byte[],java.lang.String)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: boolean checkPermissionForUser(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.geometric.PGpoint: void translate(int,int)> -> _SINK_
<org.hibernate.loader.custom.CustomLoader$ResultRowProcessor: java.lang.Object buildResultRow(java.lang.Object[],java.sql.ResultSet,boolean,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean usesLocalFilePerTable()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int insertTrigger(java.sql.Connection,org.quartz.Trigger,java.lang.String,org.quartz.JobDetail)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.SampleServiceHelper: java.util.List findPointOfContactsBySampleId(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.Expectations$BasicParamExpectation: java.sql.CallableStatement toCallableStatement(java.sql.PreparedStatement)> -> _SINK_
<org.mmbase.module.database.JDBC: void reload()> -> _SINK_
<com.sforce.soap.enterprise.sobject.User: void setInterviews__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.ast.tree.DotNode: void resolveSelectExpression()> -> _SINK_
<com.mysql.jdbc.Connection: com.mysql.jdbc.SingleByteCharsetConverter getCharsetConverter(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.MorphiaIterator: com.mongodb.DBCursor getCursor()> -> _SINK_
<org.hibernate.dialect.DialectFactory$DatabaseDialectMapper: java.lang.String getDialectClass(int)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Predicate: void <init>(java.lang.String)> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQuerySpecification: org.hibernate.engine.query.sql.NativeSQLQueryReturn[] getQueryReturns()> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: org.springframework.jdbc.core.RowMapper newRowMapper(java.lang.Object[],java.util.Map)> -> _SINK_
<test.gov.nih.nci.security.instancelevel.InstanceLevelSecurityTest42: void testInstanceLevelSecurityForUser()> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator: void optionalSpace()> -> _SINK_
<entities.descriptor.ViewDescriptor: java.lang.String getNamedQuery()> -> _SINK_
<org.springframework.web.servlet.view.RedirectView: void renderMergedOutputModel(java.util.Map,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: boolean isAfterLast()> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTransactionManager: org.springframework.jdbc.support.SQLExceptionTranslator getDefaultJdbcExceptionTranslator()> -> _SINK_
<org.hibernate.hql.ast.tree.MethodNode: void prepareAnyImplicitJoins(org.hibernate.hql.ast.tree.DotNode)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: com.datastax.driver.core.querybuilder.Update$Assignments 'with'(com.datastax.driver.core.querybuilder.Assignment)> -> _SINK_
<com.sforce.soap.enterprise.sobject.User: void setPositions__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: boolean isClosed()> -> _SINK_
<org.postgresql.core.v3.ProtocolConnectionImpl: int getTransactionState()> -> _SINK_
<org.exolab.castor.jdo.drivers.SapDbFactory: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.DomainTypesInformation: gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.DomainType[] getDomainType()> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.sql.CallableStatement prepareCall(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setBlob(java.lang.String,java.sql.Blob)> -> _SINK_
<java.sql.PreparedStatement: void setLong(int,long)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.Junction getFunctionJunction(gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.exolab.castor.dtx.DTXEngine: void setDatabase(java.lang.String)> -> _SINK_
<gov.nih.nci.system.query.cql.CQLObject: java.lang.String getName()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: java.lang.String getSelectWithLockSQL()> -> _SINK_
<org.apache.ibatis.type.IntegerTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Job_Application__c: void setOpenActivities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.system.query.SDKQueryResult: java.lang.Object getObjectResult()> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.StringBuilder appendSet(java.util.Set,java.lang.StringBuilder,boolean)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.RelationStep addRelationStep(org.mmbase.bridge.NodeManager,java.lang.String,java.lang.String,boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: java.lang.String getKeyspace()> -> _SINK_
<com.endeca.navigation.ENEQuery: void setAccessControlFilter(java.lang.String)> -> _SINK_
<org.hibernate.mapping.PersistentClass: void <clinit>()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$61: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setClob(int,java.sql.Clob)> -> _SINK_
<com.mysql.jdbc.ResultSet: void issueConversionViaParsingWarning(java.lang.String,int,java.lang.Object,com.mysql.jdbc.Field,int[])> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: boolean execute(java.lang.String,int)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: com.amazonaws.services.dynamodb.model.AttributeValue getHashKeyValue()> -> _SINK_
<org.hibernate.hql.ast.tree.SelectClause: void renderNonScalarProperties(org.hibernate.hql.ast.util.ASTAppender,org.hibernate.hql.ast.tree.FromElement,int,int)> -> _SINK_
<com.mysql.jdbc.CompressedInputStream: void getNextPacketFromServer()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Project_Snapshot__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser: java.lang.String substituteParams(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.Query: org.mongodb.morphia.query.Query filter(java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setProperties(java.lang.Object)> -> _SINK_
<org.mmbase.storage.search.implementation.ModifiableQuery: boolean isAggregating()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getAttributes(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<oracle.toplink.sessions.DatabaseSession: void setSessionLog(oracle.toplink.sessions.SessionLog)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void <init>(com.mysql.jdbc.Connection,java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.SqlParameter: void <init>(int)> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean previous()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.Calendar selectCalendar(java.sql.Connection,java.lang.String)> -> _SINK_
<org.hibernate.persister.collection.OneToManyPersister: java.lang.String generateDeleteRowString()> -> _SINK_
<org.apache.ibatis.jdbc.SqlRunner: int insert(java.lang.String,java.lang.Object[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData$1: void <init>(com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.sql.DriverPropertyInfo[] exposeAsDriverPropertyInfoInternal(java.util.Properties,int)> -> _SINK_
<com.datastax.driver.core.exceptions.UnauthorizedException: void <init>(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodesFactory: org.springframework.jdbc.support.SQLErrorCodesFactory getInstance()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getUDTs(java.lang.String,java.lang.String,java.lang.String,int[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.TestObj1__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.ast.util.SessionFactoryHelper: org.hibernate.persister.collection.QueryableCollection requireQueryableCollection(java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$65: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.exolab.castor.jdo.Database: void begin()> -> _SINK_
<org.postgresql.core.PGStream$1: void <init>(org.postgresql.core.PGStream,java.io.OutputStream)> -> _SINK_
<org.postgresql.util.PGobject: java.lang.Object clone()> -> _SINK_
<org.postgresql.core.TypeInfo: boolean requiresQuoting(int)> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteria: boolean isSourceCollection()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.io.Reader getCharacterStreamFromString(java.lang.String,int)> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: void addInnerJoin(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[])> -> _SINK_
<java.sql.Time: java.lang.String toString()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean selectMisfiredTriggersInStates(java.sql.Connection,java.lang.String,java.lang.String,long,int,java.util.List)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$85: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: void <init>()> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache: void addStatementToDeathmarches(java.lang.Object,java.sql.Connection)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.util.Set getQuerySpaces()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getDriverMinorVersion()> -> _SINK_
<java.sql.PreparedStatement: void setBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4SQLXML: void checkFreed()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateNClob(int,java.sql.NClob)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: boolean checkPermissionForUserGroup(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.engine.query.ParameterParser$Recognizer: void jpaPositionalParameter(java.lang.String,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: boolean isBeforeFirst()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Ref getRef(int)> -> _SINK_
<com.sforce.soap.enterprise.fault.InvalidFieldFault: void writeFields(com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$29: void execute(java.sql.Connection)> -> _SINK_
<org.mmbase.util.functions.ExampleBuilder$1: java.lang.Object getFunctionValue(org.mmbase.util.functions.Parameters)> -> _SINK_
<org.hibernate.connection.DatasourceConnectionProvider: void closeConnection(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void <init>(com.mysql.jdbc.Connection,java.lang.String,java.lang.String,int,int)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.Statement createStatement()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementRemove: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Clause$SimpleClause: void appendTo(java.lang.StringBuilder,java.util.List)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setProcessEscapeCodesForPrepStmts(boolean)> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: boolean isStatementDescribed()> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.lang.Object getObject(int,java.util.Map)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void moveToCurrentRow()> -> _SINK_
<org.postgresql.core.v3.CopyOperationImpl: boolean isActive()> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: void setSqlMapClient(com.ibatis.sqlmap.client.SqlMapClient)> -> _SINK_
<org.springframework.orm.hibernate3.SessionFactoryUtils: javax.sql.DataSource getDataSource(org.hibernate.SessionFactory)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int)> -> _SINK_
<org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource: void <init>(java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.sobject.User: void setPermissionSetAssignments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.orm.ibatis.support.ClobStringTypeHandler: void setParameterInternal(java.sql.PreparedStatement,int,java.lang.Object,java.lang.String,org.springframework.jdbc.support.lob.LobCreator)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setCursorName(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: int isNullable(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateTimestamp(java.lang.String,java.sql.Timestamp)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback: void <init>(org.springframework.jdbc.core.JdbcTemplate,java.lang.String,org.springframework.jdbc.core.ResultSetExtractor)> -> _SINK_
<org.hibernate.cfg.Settings: void setQueryCacheFactory(org.hibernate.cache.QueryCacheFactory)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setFetchDirection(int)> -> _SINK_
<com.mysql.jdbc.StringUtils: byte[] getBytes(java.lang.String,java.lang.String,java.lang.String,boolean,com.mysql.jdbc.Connection)> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxTableNameLength()> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: void <init>(com.datastax.driver.core.TableMetadata)> -> _SINK_
<org.hibernate.loader.Loader: java.lang.Object loadSequentialRowsForward(java.sql.ResultSet,org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters,boolean)> -> _SINK_
<org.exolab.castor.persist.spi.Persistence: org.exolab.castor.persist.spi.Identity create(org.exolab.castor.jdo.Database,java.lang.Object,org.castor.persist.ProposedEntity,org.exolab.castor.persist.spi.Identity)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addSortOrder(org.mmbase.bridge.NodeQuery,org.mmbase.storage.search.StepField,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: java.lang.String toString()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: com.datastax.driver.core.policies.RetryPolicy getRetryPolicy()> -> _SINK_
<org.mongodb.morphia.query.FieldCriteria: java.lang.String toString()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsOpenStatementsAcrossCommit()> -> _SINK_
<org.hibernate.lob.SerializableClob: java.lang.String getSubString(long,int)> -> _SINK_
<org.apache.ibatis.mapping.BoundSql: java.lang.Object getParameterObject()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: java.lang.String getColumnClassName(int)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: boolean isFirst()> -> _SINK_
<org.postgresql.fastpath.Fastpath: org.postgresql.fastpath.FastpathArg createOIDArg(long)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxUserNameLength()> -> _SINK_
<org.exolab.castor.dtx.DTXQuery: void addField(org.exolab.castor.mapping.xml.ClassMapping,java.util.StringTokenizer,org.exolab.castor.persist.spi.QueryExpression)> -> _SINK_
<org.hibernate.persister.entity.Queryable: java.lang.String generateFilterConditionAlias(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: boolean execute(java.lang.String,int[])> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void registerOutParameter(java.lang.String,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.User: void setUserPreferences(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void propertyName(antlr.collections.AST)> -> _SINK_
<org.mmbase.module.database.MultiPoolHandler: java.util.Set keySet()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$5: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: boolean rowDeleted()> -> _SINK_
<com.mysql.jdbc.CallableStatement: void <init>(com.mysql.jdbc.Connection,com.mysql.jdbc.CallableStatement$CallableStatementParamInfo)> -> _SINK_
<com.mysql.jdbc.SingleByteCharsetConverter: byte[] toBytes(char[],int,int)> -> _SINK_
<org.postgresql.ds.common.PGObjectFactory: java.lang.String getProperty(javax.naming.Reference,java.lang.String)> -> _SINK_
<org.hibernate.sql.Select: org.hibernate.sql.Select setComment(java.lang.String)> -> _SINK_
<com.endeca.navigation.analytics.CoalesceList: java.lang.String toWire()> -> _SINK_
<org.postgresql.core.Query: void close()> -> _SINK_
<com.endeca.navigation.ENEQueryInfo: java.lang.String GenerateUID()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.CharacterizationServiceHelper: java.util.List findCharacterizationsBySampleId(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setDouble(int,double)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: int integerPart(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String[] getColumnNames()> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: java.lang.String getTableName()> -> _SINK_
<org.hibernate.cfg.HbmBinder: void handleCustomSQL(org.dom4j.Element,org.hibernate.mapping.Collection)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Time getTime(int,java.util.Calendar)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsMixedCaseQuotedIdentifiers()> -> _SINK_
<com.mysql.jdbc.MysqlIO: int getMaxBuf()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateTime(int,java.sql.Time)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: java.lang.String getClientInfo(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils$ParsedTimestamp: void <init>(org.postgresql.jdbc2.TimestampUtils$1)> -> _SINK_
<entities.RepositoryAtomic: long queryCount(java.lang.String,java.lang.Object[])> -> _SINK_
<org.mmbase.security.implementation.context.ContextAuthorization: org.mmbase.security.Authorization$QueryCheck check(org.mmbase.security.UserContext,org.mmbase.bridge.Query,org.mmbase.security.Operation)> -> _SINK_
<org.hibernate.cfg.NamedSQLQuerySecondPass: void doSecondPass(java.util.Map)> -> _SINK_
<com.amazonaws.services.simpledb.model.InvalidQueryExpressionException: void setBoxUsage(java.lang.Float)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getMaxQuerySizeToLog()> -> _SINK_
<org.hibernate.cache.QueryCacheFactory: org.hibernate.cache.QueryCache getQueryCache(java.lang.String,org.hibernate.cache.UpdateTimestampsCache,org.hibernate.cfg.Settings,java.util.Properties)> -> _SINK_
<org.postgresql.xa.RecoveredXid: javax.transaction.xa.Xid stringToXid(java.lang.String)> -> _SINK_
<org.springframework.jdbc.object.SqlCall: void <init>(javax.sql.DataSource,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.UserFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void quantified(antlr.collections.AST)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void rollback()> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.lang.String getCatalog()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setMaxRows(int)> -> _SINK_
<java.sql.ResultSetMetaData: java.lang.String getCatalogName(int)> -> _SINK_
<org.hibernate.hql.ast.exec.AbstractStatementExecutor: org.hibernate.hql.ast.HqlSqlWalker getWalker()> -> _SINK_
<org.postgresql.core.UTF8Encoding: void <init>(java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$4: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void addBatch()> -> _SINK_
<java.sql.Timestamp: long getTime()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setTraceProtocol(boolean)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addEqualConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.Integer)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.SampleServiceHelper: gov.nih.nci.cananolab.domain.particle.Sample findSampleByName(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.SQLExceptionTranslator: org.springframework.dao.DataAccessException translate(java.lang.String,java.lang.String,java.sql.SQLException)> -> _SINK_
<com.mysql.jdbc.log.LogFactory: com.mysql.jdbc.log.Log getLogger(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.NamedPipeSocketFactory$NamedPipeSocket: java.io.OutputStream getOutputStream()> -> _SINK_
<java.sql.Connection: void commit()> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: org.postgresql.jdbc2.TimestampUtils$ParsedTimestamp loadCalendar(java.util.Calendar,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.ibatis.type.SqlTimestampTypeHandler: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.sql.CallableStatement prepareCall(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: java.io.Reader getCharacterStream(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils$FCall: void <init>(java.lang.String,java.lang.Object[])> -> _SINK_
<org.hibernate.jdbc.Batcher: java.sql.ResultSet getResultSet(java.sql.CallableStatement,org.hibernate.dialect.Dialect)> -> _SINK_
<org.postgresql.core.TypeInfo: int getMaximumPrecision(int)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: boolean isBinary(int)> -> _SINK_
<org.springframework.jdbc.object.MappingSqlQuery: void <init>(javax.sql.DataSource,java.lang.String)> -> _SINK_
<org.springframework.orm.ibatis.support.AbstractLobTypeHandler: void <init>()> -> _SINK_
<com.mysql.jdbc.Buffer: int fastSkipLenString()> -> _SINK_
<org.exolab.castor.jdo.drivers.InstantDBFactory: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<org.castor.jdo.conf.DatabaseChoice: org.castor.jdo.conf.Jndi getJndi()> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: int getFormat()> -> _SINK_
<org.quartz.impl.jdbcjobstore.PointbaseDelegate: int insertCalendar(java.sql.Connection,java.lang.String,org.quartz.Calendar)> -> _SINK_
<org.springframework.jdbc.datasource.DelegatingDataSource: void afterPropertiesSet()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.CallableStatement prepareCall(java.lang.String,int,int)> -> _SINK_
<org.hibernate.dialect.function.CastFunction: java.lang.String render(java.util.List,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Task__Feed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void comparisonExpr(antlr.collections.AST,boolean)> -> _SINK_
<org.postgresql.core.types.PGUnknown: org.postgresql.core.types.PGType castToServerType(java.lang.Object,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: void <init>(com.datastax.driver.core.querybuilder.Insert)> -> _SINK_
<org.castor.persist.GlobalTransactionContext: void commitConnections()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Date getDate(int,java.util.Calendar)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: void setEscapeProcessing(boolean)> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl$AclPermissionUpdate: void update(java.lang.Long,java.lang.Integer)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: int getFetchDirection()> -> _SINK_
<java.net.URI: java.lang.String getRawQuery()> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: long queryForLong(java.lang.String,java.util.Map)> -> _SINK_
<com.mysql.jdbc.log.StandardLogger: void logWarn(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.log.Jdk14Logger: void logDebug(java.lang.Object,java.lang.Throwable)> -> _SINK_
<org.mmbase.module.database.MultiStatement: int executeUpdate(java.lang.String,int[])> -> _SINK_
<com.mysql.jdbc.MysqlIO: void explainSlowQuery(byte[],java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setNoDatetimeStringSync(boolean)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4DatabaseMetaData: void <init>(org.postgresql.jdbc4.AbstractJdbc4Connection)> -> _SINK_
<org.springframework.jdbc.datasource.lookup.DataSourceLookup: javax.sql.DataSource getDataSource(java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Timestamp getTimestamp(java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Clob: int setString(long,java.lang.String,int,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: int executeUpdate()> -> _SINK_
<org.postgresql.core.BaseConnection: boolean haveMinimumServerVersion(java.lang.String)> -> _SINK_
<org.hibernate.dialect.function.SQLFunction: org.hibernate.type.Type getReturnType(org.hibernate.type.Type,org.hibernate.engine.Mapping)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsAlterTableWithAddColumn()> -> _SINK_
<org.hibernate.id.insert.AbstractSelectingDelegate: java.io.Serializable getResult(org.hibernate.engine.SessionImplementor,java.sql.ResultSet,java.lang.Object)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void setClause(antlr.collections.AST)> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$2: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String generateDetectRowByElementString()> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryResult: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: float getFloat(java.lang.String)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.util.Map access$100(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.mysql.jdbc.CallableStatement: com.mysql.jdbc.ResultSet getOutputParameters(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Time getTime(java.lang.String,java.util.Calendar)> -> _SINK_
<com.endeca.navigation.analytics.AnalyticsParser: com.endeca.navigation.analytics.AnalyticsQuery parseAnalyticsQuery()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void setXMLValue(java.sql.PreparedStatement,int,java.lang.Object,org.mmbase.core.CoreField,org.mmbase.module.core.MMObjectNode)> -> _SINK_
<com.mysql.jdbc.Driver: void <clinit>()> -> _SINK_
<com.endeca.navigation.OptiBackend: com.endeca.navigation.OptiBackendRequest requestDimensionSearch(com.endeca.navigation.ENEQuery)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.Constraint getConstraint()> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode$FilteredDynamicContext$1: java.lang.String handleToken(java.lang.String)> -> _SINK_
<org.hibernate.sql.QuerySelect: java.lang.String toQueryString()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSetMetaData: java.lang.Object unwrap(java.lang.Class)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: java.sql.NClob getNClob(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.stmt.PerConnectionMaxOnlyStatementCache: void removeStatementFromDeathmarches(java.lang.Object,java.sql.Connection)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void registerOutParameter(java.lang.String,int,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Clob getClob(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setObject(int,java.lang.Object,int,int)> -> _SINK_
<org.hibernate.id.SelectGenerator$SelectGeneratorDelegate: java.io.Serializable getResult(org.hibernate.engine.SessionImplementor,java.sql.ResultSet,java.lang.Object)> -> _SINK_
<org.exolab.castor.persist.spi.AbstractCallQuery: void close()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4SQLXML: java.io.InputStream getBinaryStream()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Settings__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.system.webservice.WSQueryImpl: java.util.List getAssociation(java.lang.Object,java.lang.String,int)> -> _SINK_
<com.endeca.navigation.OptiBinaryInterp: com.endeca.navigation.Navigation ParseBinaryNode(com.endeca.navigation.OptiInputBuffer)> -> _SINK_
<com.mysql.jdbc.Buffer: void dump()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: void setMaxFieldSize(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: int getMaxFieldSize()> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementType: java.lang.String[] toColumns(java.lang.String,java.lang.String,boolean,boolean)> -> _SINK_
<com.mysql.jdbc.util.ReadAheadInputStream: void checkClosed()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void orderClause(antlr.collections.AST)> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: void addSortOrder(org.w3c.dom.Element,org.mmbase.bridge.util.xml.query.QueryDefinition)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void receiveAsyncNotify()> -> _SINK_
<org.hibernate.dialect.Dialect$2: void <init>(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object hasThisElement(java.lang.Object)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.TypeAttribute: java.lang.String getAttributeName()> -> _SINK_
<org.exolab.castor.jdo.drivers.OracleFactory: org.exolab.castor.persist.spi.PersistenceQuery getCallQuery(java.lang.String,java.lang.Class[],java.lang.Class,java.lang.String[],int[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getSchemas(int,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean dataDefinitionIgnoredInTransactions()> -> _SINK_
<org.hibernate.type.FloatType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void secureAuth411(com.mysql.jdbc.Buffer,int,java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SINK_
<org.mmbase.module.core.MMObjectNode: java.util.Vector getRelatedNodes(java.lang.String,java.lang.String,int)> -> _SINK_
<java.sql.DatabaseMetaData: boolean dataDefinitionCausesTransactionCommit()> -> _SINK_
<org.postgresql.core.v3.ConnectionFactoryImpl: void sendStartupPacket(org.postgresql.core.PGStream,java.lang.String[][],org.postgresql.core.Logger)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setCapitalizeDBMDTypes(boolean)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: boolean execute(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: void rollbackNoChecks()> -> _SINK_
<org.castor.jdo.conf.Database: java.util.Enumeration enumerateMapping()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getInitialTimeout()> -> _SINK_
<java.sql.ResultSet: java.lang.Object getObject(int)> -> _SINK_
<com.sforce.soap.enterprise.QueryAll_element: void write(javax.xml.namespace.QName,com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int deleteAllPausedTriggerGroups(java.sql.Connection)> -> _SINK_
<java.sql.CallableStatement: byte getByte(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Util: java.lang.Object readObject(java.sql.ResultSet,int)> -> _SINK_
<java.sql.Statement: boolean getMoreResults()> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$3: void handleError(java.sql.SQLException)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: byte getByte(int)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateNull(int)> -> _SINK_
<org.mmbase.module.builders.DayMarkers: int getAge(int)> -> _SINK_
<com.mysql.jdbc.RowData: boolean isBeforeFirst()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void create()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: void clearWarnings()> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlminute(java.util.List)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.ResultSet executeQuery()> -> _SINK_
<org.apache.ibatis.logging.jdbc.StatementLogger: java.sql.Statement newInstance(java.sql.Statement)> -> _SINK_
<org.apache.ibatis.builder.xml.XMLStatementBuilder: void parseStatementNode(org.apache.ibatis.parsing.XNode)> -> _SINK_
<org.hibernate.sql.OracleJoinFragment: org.hibernate.sql.JoinFragment copy()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateDate(java.lang.String,java.sql.Date)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Attribute: java.lang.String getName()> -> _SINK_
<org.hibernate.sql.SelectFragment: org.hibernate.sql.SelectFragment setExtraSelectList(org.hibernate.sql.CaseFragment,java.lang.String)> -> _SINK_
<org.postgresql.core.Utils: java.lang.StringBuffer appendEscapedLiteral(java.lang.StringBuffer,java.lang.String,boolean)> -> _SINK_
<org.hibernate.dialect.DerbyDialect$DerbyTrimFunctionEmulation: java.lang.String render(java.util.List,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: void insert(java.io.Serializable,java.lang.Object[],boolean[],int,java.lang.String,java.lang.Object,org.hibernate.engine.SessionImplementor)> -> _SINK_
<java.sql.Connection: java.util.Map getTypeMap()> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.WritableApplicationServiceImpl: gov.nih.nci.system.dao.Request prepareRequest(gov.nih.nci.system.query.SDKQuery,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: int executeUpdate(java.lang.String)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLNonTransientConnectionException: void <init>(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.ui.sample.AdvancedSampleSearchAction: org.apache.struts.action.ActionForward search(org.apache.struts.action.ActionMapping,org.apache.struts.action.ActionForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setAggrERecNavRecordFilter(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.AbstractSelectExpression: boolean isScalar()> -> _SINK_
<org.postgresql.copy.CopyManager: long copyOut(java.lang.String,java.io.Writer)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: java.lang.String toString()> -> _SINK_
<org.exolab.castor.persist.spi.KeyGenerator: void supportsSqlType(int)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ParameterMetaData: int getPrecision(int)> -> _SINK_
<org.exolab.castor.jdo.keygen.MaxKeyGenerator: void <init>(org.exolab.castor.persist.spi.PersistenceFactory,int)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: java.util.Iterator iterate(org.hibernate.engine.QueryParameters,org.hibernate.event.EventSource)> -> _SINK_
<com.sforce.soap.enterprise.sobject.AccountFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: com.mongodb.DBObject getQueryObject()> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementType: org.hibernate.persister.entity.PropertyMapping getPropertyMapping(java.lang.String)> -> _SINK_
<org.hibernate.id.SequenceGenerator: java.io.Serializable generate(org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<org.mmbase.cache.QueryResultCache: java.lang.Object remove(java.lang.Object)> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$6: void <init>(org.exolab.castor.mapping.xml.SqlDescriptor)> -> _SINK_
<com.endeca.navigation.analytics.GroupBy: java.lang.String toWire()> -> _SINK_
<com.endeca.navigation.ENEQuery: boolean isMerchDebugOn()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void evaluateAssignment(antlr.collections.AST)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsConvert(int,int)> -> _SINK_
<au.com.bytecode.opencsv.ResultSetHelper: java.lang.String[] getColumnValues(java.sql.ResultSet)> -> _SINK_
<org.hibernate.persister.collection.NamedQueryCollectionInitializer: void initialize(java.io.Serializable,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.postgresql.core.Notification: void <init>(java.lang.String,int,java.lang.String)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: void after()> -> _SINK_
<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.ResultSet readAllResults(com.mysql.jdbc.Statement,int,int,int,boolean,java.lang.String,com.mysql.jdbc.Buffer,boolean,long,boolean,com.mysql.jdbc.Field[])> -> _SINK_
<org.apache.ibatis.builder.'annotation'.ProviderSqlSource: org.apache.ibatis.mapping.BoundSql getBoundSql(java.lang.Object)> -> _SINK_
<java.sql.PreparedStatement: void setCharacterStream(int,java.io.Reader,int)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: java.util.List selectList(java.lang.String)> -> _SINK_
<org.postgresql.ds.jdbc4.AbstractJdbc4SimpleDataSource: java.lang.Object unwrap(java.lang.Class)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void createIndex(org.mmbase.storage.util.Index,java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void refreshRow()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete: com.datastax.driver.core.querybuilder.Delete$Options using(com.datastax.driver.core.querybuilder.Using)> -> _SINK_
<com.mysql.jdbc.CursorRowProvider: void addRow(byte[][])> -> _SINK_
<com.endeca.navigation.RefinementConfig: void parseDynamicRanking(java.lang.String)> -> _SINK_
<org.apache.ibatis.executor.resultset.NestedResultSetHandler: org.apache.ibatis.cache.CacheKey createRowKey(org.apache.ibatis.mapping.ResultMap,java.sql.ResultSet)> -> _SINK_
<com.mysql.jdbc.Buffer: long readLong()> -> _SINK_
<com.datastax.driver.core.Requests$Query$1: void encode(com.datastax.driver.core.Requests$Query,org.jboss.netty.buffer.ChannelBuffer)> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQueryScalarReturn: java.lang.String getColumnAlias()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.CharacterizationServiceHelper: gov.nih.nci.cananolab.domain.particle.Characterization findCharacterizationById(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getCachePrepStmts()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.utils.Key[] selectVolatileJobs(java.sql.Connection)> -> _SINK_
<java.sql.CallableStatement: java.net.URL getURL(java.lang.String)> -> _SINK_
<org.postgresql.core.v2.ProtocolConnectionImpl: void addNotification(org.postgresql.PGNotification)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setQueryTimeout(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsMixedCaseIdentifiers()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: double getDouble(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.HqlParser: antlr.collections.AST processIsEmpty(antlr.collections.AST,boolean)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void <init>(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties,java.lang.String)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String getSelect()> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceTransactionManager: void <init>(javax.sql.DataSource)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: int executeUpdate()> -> _SINK_
<org.springframework.jdbc.support.lob.LobHandler: java.lang.String getClobAsString(java.sql.ResultSet,int)> -> _SINK_
<gov.nih.nci.security.dao.Queries: java.lang.String getQueryForObjectMap_user()> -> _SINK_
<java.sql.ResultSet: void updateLong(java.lang.String,long)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.UpdateResults update(org.mongodb.morphia.query.Query,com.mongodb.DBObject,boolean,boolean,com.mongodb.WriteConcern)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: org.hibernate.SQLQuery addEntity(java.lang.String,java.lang.String,org.hibernate.LockMode)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: int getFetchDirection()> -> _SINK_
<com.sforce.soap.enterprise.sobject.SiteFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.util.Set getOidSet(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSource: javax.sql.ConnectionPoolDataSource assertCpds()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: int executeUpdate(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.Criterion getNanomaterialEntityCriterion(gov.nih.nci.cananolab.dto.particle.CompositionQueryBean,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateTimestamp(java.lang.String,java.sql.Timestamp)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Job_Application__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: short getShort(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: java.util.Set getQuerySpaces()> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: void compile(java.util.Map,boolean)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.lang.String getSQL(java.lang.String)> -> _SINK_
<org.hibernate.cache.StandardQueryCache: void <init>(org.hibernate.cfg.Settings,java.util.Properties,org.hibernate.cache.UpdateTimestampsCache,java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.AbstractStatement: void <init>()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.PreparedStatement prepareStatement(java.lang.String,int)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: gov.nih.nci.security.authorization.domainobjects.User getUser(java.lang.String)> -> _SINK_
<org.hibernate.type.CompositeCustomType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<test.gov.nih.nci.logging.api.persistence.TestSQLInserts: gov.nih.nci.logging.api.domain.LogMessage getLogMessage_NonObjectState()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: int getCascadeUpdateOption(java.lang.String)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: org.hibernate.engine.TypedValue getTypedIdentifierValue(org.hibernate.Criteria,java.lang.Object)> -> _SINK_
<org.hibernate.mapping.PersistentClass: void setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: short getShort(int)> -> _SINK_
<com.mysql.jdbc.ResultSet: short getShortFromString(java.lang.String,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateTrigger(java.sql.Connection,org.quartz.Trigger,java.lang.String,org.quartz.JobDetail)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate$CloseSuppressingInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSourceFactory: javax.sql.DataSource create(javax.sql.DataSource)> -> _SINK_
<org.apache.ibatis.builder.xml.XMLMapperBuilder: org.apache.ibatis.parsing.XNode getSqlFragment(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void endFunctionTemplate(antlr.collections.AST)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void registerOutParameter(int,int)> -> _SINK_
<com.mysql.jdbc.log.Log4JLogger: void logWarn(java.lang.Object)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setMaxFieldSize(int)> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: boolean getTransient()> -> _SINK_
<java.sql.ResultSet: void updateString(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.ds.PGPooledConnection: void <init>(java.sql.Connection,boolean)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.lang.String fixParameterName(java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.ERecRank getNavRelRankERecRank()> -> _SINK_
<org.exolab.castor.persist.DatingService: boolean pairExtends(org.exolab.castor.persist.ClassMolder,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache$ConnectionStatementManager: int getNumStatementsForConnection(java.sql.Connection)> -> _SINK_
<oracle.toplink.sessions.Session: java.lang.Object readObject(java.lang.Class,oracle.toplink.queryframework.Call)> -> _SINK_
<gov.nih.nci.system.query.cql.CQLAttribute: java.lang.String getValue()> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getAggrERecSpec()> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: org.mmbase.storage.search.implementation.BasicSearchQuery setOffset(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setLong(int,long)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor$ResultAliasContext: java.lang.String getEntitySuffix(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void setFetchSize(int)> -> _SINK_
<java.sql.CallableStatement: java.sql.Blob getBlob(java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Association: java.lang.String getRoleName()> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceTransactionManager: void doRollback(org.springframework.transaction.support.DefaultTransactionStatus)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.JobDataMap selectTriggerJobDataMap(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean calendarIsReferenced(java.sql.Connection,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void <init>(org.postgresql.jdbc2.AbstractJdbc2Connection,java.lang.String,boolean,int,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean storesMixedCaseIdentifiers()> -> _SINK_
<com.mysql.jdbc.Security: int charVal(char)> -> _SINK_
<org.mmbase.bridge.implementation.BasicCloud: org.mmbase.bridge.Query createQuery()> -> _SINK_
<org.postgresql.core.ProtocolConnection: org.postgresql.core.QueryExecutor getQueryExecutor()> -> _SINK_
<org.hibernate.sql.SimpleSelect: org.hibernate.sql.SimpleSelect addColumns(java.lang.String[],java.lang.String[])> -> _SINK_
<gov.nih.nci.cananolab.service.publication.EndNoteXMLHandler: int savePublications(gov.nih.nci.cananolab.service.security.UserBean)> -> _SINK_
<org.mmbase.module.database.MultiStatement: void setCursorName(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateDouble(java.lang.String,double)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getDriverVersion()> -> _SINK_
<org.mmbase.storage.search.SearchQueryException: void <init>(java.lang.String,java.lang.Throwable)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageLookup: boolean match(org.w3c.dom.Element,java.lang.String)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNa(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Field: java.lang.String getTableName()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNu(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.hibernate.impl.ScrollableResultsImpl: boolean first()> -> _SINK_
<org.hibernate.criterion.IdentifierProjection: java.lang.String toGroupSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.hibernate.persister.entity.Queryable: java.lang.String getTemporaryIdTableName()> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getExtraNameCharacters()> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: void access$500(com.mysql.jdbc.DatabaseMetaData,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.lang.String)> -> _SINK_
<java.sql.Savepoint: java.lang.String getSavepointName()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void addBatch()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: boolean hasNamedParameters()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxStatementLength()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setBoolean(java.lang.String,boolean)> -> _SINK_
<com.endeca.navigation.analytics.AnalyticsParser: void main(java.lang.String[])> -> _SINK_
<org.springframework.orm.jpa.vendor.TopLinkJpaVendorAdapter$1: void <clinit>()> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: void addNode(org.mmbase.storage.search.Step,org.mmbase.bridge.Node)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Timestamp getTimestamp(java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiPool: org.mmbase.module.database.MultiConnection getFree()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateDouble(java.lang.String,double)> -> _SINK_
<com.mysql.jdbc.Blob: byte[] getBytes(long,int)> -> _SINK_
<org.postgresql.core.TypeInfo: void addCoreType(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Integer)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: boolean equals(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseStreamLengthsInPrepStmts(boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void markActiveUncachedStatement(java.sql.Statement)> -> _SINK_
<org.exolab.castor.jdo.oql.ParamInfo: void check(java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.sql.Statement createStatement(int,int,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: byte[] toBytes()> -> _SINK_
<org.exolab.castor.jdo.DatabaseNotFoundException: void <init>(java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsSubqueriesInQuantifieds()> -> _SINK_
<org.postgresql.util.PGobject: java.lang.String toString()> -> _SINK_
<com.sforce.soap.enterprise.sobject.RevenueForecast: void setRevenueForecastHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$1ProxyStatement: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXAConnection: java.sql.Connection getConnection()> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodes: boolean isUseSqlStateForTranslation()> -> _SINK_
<org.acegisecurity.ui.savedrequest.SavedRequest: boolean doesRequestMatch(javax.servlet.http.HttpServletRequest,org.acegisecurity.util.PortResolver)> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringDecoder: java.lang.String decodeComponent(java.lang.String,java.nio.charset.Charset)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Clob: java.io.InputStream getAsciiStream()> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: void log(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: int executeUpdate(java.lang.String,int[])> -> _SINK_
<org.hibernate.hql.ast.tree.SelectExpressionList: void <init>()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLColumnInfo: java.lang.Object toJava(java.lang.Object)> -> _SINK_
<org.springframework.jdbc.core.ResultSetSupportingSqlParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.RowMapper)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsSchemasInDataManipulation()> -> _SINK_
<org.hibernate.criterion.Restrictions: org.hibernate.criterion.Criterion sqlRestriction(java.lang.String,java.lang.Object[],org.hibernate.type.Type[])> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$6: void <init>(com.mysql.jdbc.DatabaseMetaData,com.mysql.jdbc.DatabaseMetaData$IteratorWithCleanup,java.lang.String,java.sql.Statement,boolean,java.util.ArrayList)> -> _SINK_
<org.hibernate.sql.QuerySelect: void appendTokens(java.lang.StringBuffer,java.util.Iterator)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: com.datastax.driver.core.querybuilder.Update$Conditions onlyIf(com.datastax.driver.core.querybuilder.Clause)> -> _SINK_
<org.hibernate.dialect.Oracle9Dialect$1: java.lang.String extractConstraintName(java.sql.SQLException)> -> _SINK_
<org.mmbase.bridge.util.TreeList$TreeItr: org.mmbase.bridge.Node getNextLeafNode()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: antlr.collections.AST createFromElement(java.lang.String,antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<org.hibernate.dialect.Dialect: void registerFunction(java.lang.String,org.hibernate.dialect.function.SQLFunction)> -> _SINK_
<org.mmbase.module.database.MultiStatement: int getMaxRows()> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationServiceFacade: java.util.List query(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Project__c: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.sql.Array getArray(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.DatabaseStartupValidator: void afterPropertiesSet()> -> _SINK_
<org.hibernate.exception.SQLStateConverter: org.hibernate.JDBCException convert(java.sql.SQLException,java.lang.String,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: int executeUpdate(java.lang.String,java.lang.String[])> -> _SINK_
<java.sql.ResultSet: void updateDate(java.lang.String,java.sql.Date)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.io.Reader getCharacterStream(int)> -> _SINK_
<org.postgresql.util.GT: java.lang.String tr(java.lang.String,java.lang.Object[])> -> _SINK_
<org.postgresql.jdbc3g.AbstractJdbc3gResultSet: void <init>(org.postgresql.core.Query,org.postgresql.core.BaseStatement,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor,int,int,int,int,int)> -> _SINK_
<com.mongodb.QueryOpBuilder: void addToQueryObject(com.mongodb.DBObject,java.lang.String,java.lang.Object)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.Step getStep(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: java.lang.String getColumnName(int)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void registerOutParameter(java.lang.String,int,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: void clearBatch()> -> _SINK_
<com.sforce.soap.enterprise.sobject.AssetFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.jdbc.Expectations$BasicParamExpectation: int prepare(java.sql.PreparedStatement)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateFloat(int,float)> -> _SINK_
<org.mongodb.morphia.query.UpdateOperations: org.mongodb.morphia.query.UpdateOperations set(java.lang.String,java.lang.Object)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int insertCronTrigger(java.sql.Connection,org.quartz.CronTrigger)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: org.exolab.castor.jdo.engine.SQLColumnInfo[] getColumnInfoForIdentities()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateCharacterStream(int,java.io.Reader,int)> -> _SINK_
<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.Buffer sendCommand(int,java.lang.String,com.mysql.jdbc.Buffer,boolean,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlmonth(java.util.List)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: void setUrl(java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueInConstraint createInConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.Field,java.util.SortedSet)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setFloat(java.lang.String,float)> -> _SINK_
<org.exolab.castor.jdo.engine.LocalDatabaseImpl: void begin()> -> _SINK_
<org.mmbase.storage.search.implementation.database.SqlHandler: int getSupportLevel(org.mmbase.storage.search.Constraint,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: void rollback(java.sql.Savepoint)> -> _SINK_
<org.postgresql.geometric.PGpoint: void <init>(double,double)> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.ParamTag: int doStartTag()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void insertRow()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Group: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.postgresql.core.BaseConnection: byte[] encodeString(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSourceFactory: java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CustomEmail__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression: com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression withRangeKeyConditions(java.util.Map)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: boolean execute(java.lang.String,java.lang.String[])> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.PaginatedQueryList: boolean atEndOfResults()> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.NestedCriteria2HQL: void processNestedCriteria(java.lang.StringBuffer,gov.nih.nci.system.query.nestedcriteria.NestedCriteria)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNp(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.hibernate.sql.SimpleSelect: java.lang.String toWhereClause()> -> _SINK_
<java.sql.PreparedStatement: void setByte(int,byte)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateRef(int,java.sql.Ref)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.NestedCriteria2HQL: boolean condition2(gov.nih.nci.system.query.nestedcriteria.NestedCriteria)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: boolean getMoreResults(int)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: java.lang.StringBuffer appendSortOrderField(java.lang.StringBuffer,org.mmbase.storage.search.SortOrder,boolean)> -> _SINK_
<java.sql.Timestamp: java.lang.String toString()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.io.InputStream getAsciiStream(int)> -> _SINK_
<org.postgresql.core.ParameterList: void setNull(int,int)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNrr(java.lang.String)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: void <init>(org.hibernate.engine.NamedSQLQueryDefinition,org.hibernate.engine.SessionImplementor,org.hibernate.engine.query.ParameterMetadata)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setEscapeProcessing(boolean)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$IntegerConnectionProperty: void initializeFrom(java.lang.String)> -> _SINK_
<com.mysql.jdbc.MiniAdmin: void <init>(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$StatementProxyingSetManagedResultSet: java.sql.Statement getStatement()> -> _SINK_
<org.hibernate.type.DateType: java.lang.String objectToSQLString(java.lang.Object,org.hibernate.dialect.Dialect)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setDouble(int,double)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: float getFloat(int)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Array: void <init>(org.postgresql.core.BaseConnection,int,java.lang.String)> -> _SINK_
<org.postgresql.util.StreamWrapper: java.io.InputStream getStream()> -> _SINK_
<com.datastax.driver.core.SessionManager: com.datastax.driver.core.ResultSetFuture executeAsync(com.datastax.driver.core.Statement)> -> _SINK_
<com.mysql.jdbc.log.StandardLogger: void logFatal(java.lang.Object,java.lang.Throwable)> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.DatabaseMetaData getMetaData()> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.List query(java.lang.String,java.util.Map,org.springframework.jdbc.core.RowMapper)> -> _SINK_
<com.amazonaws.auth.AWS4Signer: java.lang.String getCanonicalRequest(com.amazonaws.Request,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: boolean execute(java.lang.String,java.lang.String[])> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator: java.lang.Object prepareLob(java.sql.Connection,java.lang.Class)> -> _SINK_
<org.mmbase.bridge.util.Queries: org.mmbase.storage.search.Constraint createConstraint(org.mmbase.bridge.Query,java.lang.String,int,java.lang.Object,java.lang.Object,boolean)> -> _SINK_
<org.springframework.orm.jdo.JdoTemplate$27: java.lang.Object doInJdo(javax.jdo.PersistenceManager)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateString(int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.net.URL getURL(java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQueryResults: void setAggrRecord(com.endeca.navigation.AggrERec)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLQuery: int loadRow(java.lang.Object[],int,boolean)> -> _SINK_
<oracle.toplink.exceptions.QueryException: java.lang.String getMessage()> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: java.lang.String[] getImplementors(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsGetGeneratedKeys()> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder: void JOIN(java.lang.String)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: org.hibernate.engine.QueryParameters getQueryParameters()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String[] getJobGroupNames(java.sql.Connection,org.quartz.core.SchedulingContext)> -> _SINK_
<com.sforce.soap.enterprise.Query_element: void setQueryString(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.ResultSet getResultSet()> -> _SINK_
<java.sql.CallableStatement: void setBytes(java.lang.String,byte[])> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl: void createCall(java.lang.String)> -> _SINK_
<com.endeca.navigation.OptiBackend: com.endeca.navigation.OptiBackendRequest requestRecord(java.lang.String,com.endeca.navigation.ENEQueryInfo,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: boolean execute(java.lang.String,java.lang.String[])> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.net.URL getURL(int)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<org.hibernate.dialect.function.NoArgSQLFunction: java.lang.String render(java.util.List,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<com.mysql.jdbc.MysqlIO: java.util.List fetchRowsViaCursor(java.util.List,long,com.mysql.jdbc.Field[],int)> -> _SINK_
<org.exolab.castor.gui.QueryHistory: java.lang.String GetCurrentQuery()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setTime(int,java.sql.Time)> -> _SINK_
<org.mmbase.storage.search.implementation.database.MySqlSqlHandler: java.lang.String toSql(org.mmbase.storage.search.SearchQuery,org.mmbase.storage.search.implementation.database.SqlHandler)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void markClosedProxyConnection(com.mchange.v2.c3p0.impl.NewProxyConnection,boolean)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: void testQuery_OffSet_0_RecordCount_Not0()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: boolean rowInserted()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.FieldValueConstraint createConstraint(org.mmbase.storage.search.StepField,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.CompressedInputStream: void <init>(com.mysql.jdbc.Connection,java.io.InputStream)> -> _SINK_
<org.mmbase.storage.search.legacy.ConstraintParser: org.mmbase.storage.search.StepField getField(java.lang.String)> -> _SINK_
<com.endeca.navigation.DimSearchRefinementConfig: com.endeca.navigation.DimSearchRefinementConfig parse(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Statement getStatement()> -> _SINK_
<org.mmbase.bridge.util.TreeList$TreeItr: org.mmbase.bridge.Node getNextNode()> -> _SINK_
<java.sql.DriverManager: java.io.PrintWriter getLogWriter()> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void whereClauseExpr(antlr.collections.AST)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Clob: java.io.Reader getCharacterStream(long,long)> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator: void <init>(gov.nih.nci.cagrid.cqlresultset.CQLQueryResults)> -> _SINK_
<org.postgresql.largeobject.LargeObject: void close()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$77: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNk(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getAutoReconnectForPools()> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.RefinementConfigList getNavRefinementConfigs()> -> _SINK_
<com.fasterxml.jackson.databind.deser.std.DateDeserializers$SqlDateDeserializer: void <init>()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateBinaryStream(int,java.io.InputStream,long)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLTransientConnectionException: void <init>(java.lang.String,java.lang.String,int)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.IfSqlNode: boolean apply(org.apache.ibatis.builder.xml.dynamic.DynamicContext)> -> _SINK_
<org.hibernate.sql.JoinFragment: org.hibernate.sql.JoinFragment copy()> -> _SINK_
<java.sql.ResultSet: void updateDate(int,java.sql.Date)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void finalize()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int insertCalendar(java.sql.Connection,java.lang.String,org.quartz.Calendar)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.CharacterizationQueryBean: java.lang.String getCharacterizationName()> -> _SINK_
<org.apache.ibatis.executor.resultset.ResultSetHandler: java.util.List handleResultSets(java.sql.Statement)> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.UpdateTag: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object exists()> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Builder: com.datastax.driver.core.querybuilder.Select 'from'(java.lang.String,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: com.datastax.driver.core.Statement setRetryPolicy(com.datastax.driver.core.policies.RetryPolicy)> -> _SINK_
<org.springframework.orm.toplink.LocalSessionFactory: org.springframework.orm.toplink.SessionFactory newSessionFactory(oracle.toplink.sessions.DatabaseSession)> -> _SINK_
<org.castor.jdo.util.JDOUtils: void closeResultSet(java.sql.ResultSet)> -> _SINK_
<org.postgresql.core.ProtocolConnection: java.sql.SQLWarning getWarnings()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setBytesNoEscape(int,byte[])> -> _SINK_
<com.mysql.jdbc.util.VersionFSHierarchyMaker: java.lang.String removeWhitespaceChars(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.DatabaseMetaData getMetaData()> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void evaluateAssignment(antlr.collections.AST,org.hibernate.persister.entity.Queryable,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Using: void <init>(java.lang.String)> -> _SINK_
<org.springframework.orm.hibernate3.support.BlobStringType: java.lang.Object nullSafeGetInternal(java.sql.ResultSet,java.lang.String[],java.lang.Object,org.springframework.jdbc.support.lob.LobHandler)> -> _SINK_
<test.gov.nih.nci.security.threadsafe.CSMAPIMySQLDeadLockTest: void addToProtectionGroups()> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator: void <init>(java.lang.String)> -> _SINK_
<org.apache.ibatis.datasource.unpooled.UnpooledDataSource$DriverProxy: boolean jdbcCompliant()> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateRef(java.lang.String,java.sql.Ref)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavERecsOffset(long)> -> _SINK_
<org.hibernate.lob.SerializableBlob: int setBytes(long,byte[])> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$60: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.mmbase.bridge.util.HugeNodeListIterator: int compares(org.mmbase.bridge.Node,org.mmbase.bridge.Node)> -> _SINK_
<org.hibernate.impl.SessionImpl: void reconnect(java.sql.Connection)> -> _SINK_
<org.apache.ibatis.datasource.pooled.PooledDataSource: java.sql.Connection unwrapConnection(java.sql.Connection)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position_Tracker__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void addWarning(java.sql.SQLWarning)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimestampLocaleConverter: void <init>(java.lang.Object,java.util.Locale,java.lang.String,boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DBSemaphore: void executeSQL(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: long[] computeMaxParameterSetSizeAndBatchSize(int)> -> _SINK_
<com.mysql.jdbc.NonRegisteringDriver: int safeIntParse(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean nullsAreSortedAtStart()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String[] selectJobGroups(java.sql.Connection)> -> _SINK_
<org.mongodb.morphia.query.Query: int getOffset()> -> _SINK_
<org.postgresql.Driver: java.sql.SQLFeatureNotSupportedException notImplemented(java.lang.Class,java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$76: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: int executeUpdate()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.io.InputStream getInputStreamValue(org.mmbase.module.core.MMObjectNode,org.mmbase.core.CoreField)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsANSI92IntermediateSQL()> -> _SINK_
<gov.nih.nci.security.authorization.domainobjects.ApplicationContext: void setDatabaseDialect(java.lang.String)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DataSourceWrapper: int getLoginTimeout()> -> _SINK_
<org.apache.ibatis.executor.CachingExecutor: java.util.List query(org.apache.ibatis.mapping.MappedStatement,java.lang.Object,org.apache.ibatis.session.RowBounds,org.apache.ibatis.session.ResultHandler)> -> _SINK_
<org.mmbase.bridge.util.TreeList$Branch: void <init>(org.mmbase.bridge.util.TreeList,org.mmbase.bridge.NodeQuery)> -> _SINK_
<org.springframework.web.servlet.tags.form.FormTag: java.lang.String resolveAction()> -> _SINK_
<com.mysql.jdbc.ResultSet: void initializeWithMetadata()> -> _SINK_
<com.mysql.jdbc.Buffer: void writeDouble(double)> -> _SINK_
<com.amazonaws.services.datapipeline.model.Query: boolean equals(java.lang.Object)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$50: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<gov.nih.nci.system.query.SDKQueryResult: void <init>(java.util.Collection)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.Object readIdentifier(java.sql.ResultSet,java.lang.String,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: boolean isOffsetClauseSupported()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3DatabaseMetaData: java.sql.ResultSet getAttributes(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: int getFetchSize()> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: org.mongodb.morphia.query.UpdateOperations addAll(java.lang.String,java.util.List,boolean)> -> _SINK_
<com.mysql.jdbc.Buffer: java.lang.String toSuperString()> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: com.mysql.jdbc.profiler.ProfilerEvent unpack(byte[])> -> _SINK_
<org.hibernate.type.TimeType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNrs(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.castor.persist.GlobalTransactionContext: java.sql.Connection createConnection(org.exolab.castor.persist.LockEngine)> -> _SINK_
<org.hibernate.hql.ast.tree.FromClause: boolean isSubQuery()> -> _SINK_
<org.exolab.castor.persist.DatingService: void close()> -> _SINK_
<org.hibernate.dialect.MySQL5Dialect: void <init>()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment discardAll(java.lang.String,java.util.List)> -> _SINK_
<java.sql.DatabaseMetaData: boolean nullsAreSortedAtStart()> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder greaterThan(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Time getTime(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setDate(java.lang.String,java.sql.Date)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Date getDate(int)> -> _SINK_
<org.mmbase.storage.search.implementation.database.PostgreSqlSqlHandler: int getSupportLevel(int,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection: boolean closeAndRemoveResultSets(java.util.Set)> -> _SINK_
<org.postgresql.util.PGInterval: void add(java.util.Date)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNtpc(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getTypeInfo()> -> _SINK_
<org.mmbase.storage.search.implementation.database.MSSqlSqlHandler: java.lang.StringBuffer appendSortOrderField(java.lang.StringBuffer,org.mmbase.storage.search.SortOrder,boolean)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.sql.SQLWarning getWarnings()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: int getResultSetType()> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: void <init>(org.postgresql.copy.CopyIn,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$RecoverMisfiredJobsResult recoverMisfiredJobs(java.sql.Connection,boolean)> -> _SINK_
<org.mmbase.bridge.util.Queries: org.mmbase.bridge.NodeQuery createRelatedNodesQuery(org.mmbase.bridge.Node,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.geometric.PGcircle: void <init>()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.SuspendableXAConnection: void commit(javax.transaction.xa.Xid,boolean)> -> _SINK_
<org.hibernate.jmx.StatisticsService: long getQueryCachePutCount()> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.EtxSqlHandler: void appendConstraintToSql(java.lang.StringBuffer,org.mmbase.storage.search.Constraint,org.mmbase.storage.search.SearchQuery,boolean,boolean)> -> _SINK_
<org.hibernate.dialect.Dialect: java.lang.String getCurrentTimestampSQLFunctionName()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateDouble(java.lang.String,double)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: int getInt(java.lang.String)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void closeStreamer(com.mysql.jdbc.RowData)> -> _SINK_
<com.sun.jersey.api.uri.UriComponent: javax.ws.rs.core.MultivaluedMap decodeQuery(java.lang.String,boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils$CName: void <init>(java.lang.String)> -> _SINK_
<com.mysql.jdbc.StringUtils: char firstNonWsCharUc(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: java.lang.String getSchema()> -> _SINK_
<com.mysql.jdbc.Field: java.lang.String getFullOriginalName()> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: void setConstraint(org.mmbase.storage.search.Constraint)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: java.lang.String[] selectJobsInGroup(java.sql.Connection,java.lang.String)> -> _SINK_
<org.mmbase.cache.QueryResultCache: java.lang.Object put(org.mmbase.storage.search.SearchQuery,java.util.List)> -> _SINK_
<org.hibernate.impl.ScrollableResultsImpl: boolean next()> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: void addJoin(java.lang.String,org.hibernate.type.AssociationType)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: com.datastax.driver.core.Statement disableTracing()> -> _SINK_
<org.hibernate.engine.NamedQueryDefinition: boolean isReadOnly()> -> _SINK_
<org.hibernate.type.TimeZoneType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.encoding.SDK40EncodingUtils: org.exolab.castor.mapping.Mapping getUnmarshallerMapping(org.apache.axis.MessageContext)> -> _SINK_
<org.postgresql.core.SetupQueryRunner$SimpleResultHandler: void handleError(java.sql.SQLException)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String generateIdentityInsertString(boolean[])> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryDefinition: java.lang.String toString()> -> _SINK_
<org.castor.jdo.util.JDOUtils: void closeStatement(java.sql.Statement)> -> _SINK_
<com.mongodb.QueryBuilder$NullObject: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: void <init>(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,int)> -> _SINK_
<gov.nih.nci.security.authorization.domainobjects.ApplicationContext: void setDatabaseURL(java.lang.String)> -> _SINK_
<org.postgresql.xa.PGXAConnection: void commitOnePhase(javax.transaction.xa.Xid)> -> _SINK_
<org.exolab.castor.dtx.DTXEngine: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.orm.jpa.JpaTransactionManager: javax.sql.DataSource getDataSource()> -> _SINK_
<org.mmbase.cache.QueryResultCache: void addReleaseStrategy(org.mmbase.cache.ReleaseStrategy)> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getLanguageId()> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateDate(int,java.sql.Date)> -> _SINK_
<org.mmbase.bridge.util.Queries: org.mmbase.storage.search.Constraint addConstraints(org.mmbase.bridge.Query,java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setDimSearchNavRangeFilters(com.endeca.navigation.RangeFilterList)> -> _SINK_
<org.hibernate.sql.ForUpdateFragment: org.hibernate.sql.ForUpdateFragment setNowaitEnabled(boolean)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.NestedCriteria2HQL: gov.nih.nci.system.query.hibernate.HQLCriteria translate()> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.sql.Statement createStatement()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getDatabaseProductVersion()> -> _SINK_
<gov.nih.nci.security.dao.Queries: java.sql.PreparedStatement getQueryForCheckPermissionForGroup(java.lang.String,java.lang.String,java.lang.String,int,java.sql.Connection)> -> _SINK_
<org.hibernate.sql.JoinFragment: void addJoin(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void addRows(java.util.List)> -> _SINK_
<org.postgresql.core.VisibleBufferedInputStream: void compact()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: boolean getBoolean(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment set(java.lang.String,java.lang.Object)> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression$Join: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SINK_
<java.sql.Statement: int executeUpdate(java.lang.String,java.lang.String[])> -> _SINK_
<org.hibernate.event.def.DefaultFlushEntityEventListener: boolean handleInterception(org.hibernate.event.FlushEntityEvent)> -> _SINK_
<org.mmbase.bridge.util.Queries: java.util.List addFields(org.mmbase.bridge.Query,java.lang.String)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: java.util.Map access$500(org.hibernate.loader.custom.sql.SQLQueryReturnProcessor,java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: int getQueryTimeout()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment addAll(java.lang.String,com.datastax.driver.core.querybuilder.BindMarker)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: java.lang.String token(java.lang.String[])> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter: void <init>(java.util.Locale,java.lang.String)> -> _SINK_
<org.springframework.orm.jdo.JdoTemplate$25: java.lang.Object doInJdo(javax.jdo.PersistenceManager)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXAConnection: java.sql.ResultSet dispatchCommand(java.lang.String)> -> _SINK_
<org.hibernate.impl.ScrollableResultsImpl: void beforeFirst()> -> _SINK_
<com.endeca.navigation.ENEQuery: void setAggrERecNavDescriptors(com.endeca.navigation.DimValIdList)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: byte[] getBytes(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: int getFetchSize()> -> _SINK_
<com.datastax.driver.core.querybuilder.Ordering: void appendTo(java.lang.StringBuilder,java.util.List)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: void addCollection(java.lang.String,java.lang.String,java.util.Map)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: org.postgresql.core.Query createParameterizedQuery(java.lang.String)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: void <init>(javax.sql.DataSource,com.ibatis.sqlmap.client.SqlMapClient)> -> _SINK_
<org.springframework.jdbc.core.support.SqlLobValue: void <init>(java.io.InputStream,int)> -> _SINK_
<org.mmbase.module.tools.ApplicationInstaller: java.util.List getSyncnodes(org.mmbase.module.core.MMObjectBuilder,java.lang.String,int)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientFactoryBean: void setTransactionConfigClass(java.lang.Class)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setDate(int,java.sql.Date)> -> _SINK_
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor: java.sql.Statement getNativeStatement(java.sql.Statement)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<org.springframework.orm.ibatis.support.BlobByteArrayTypeHandler: void setParameterInternal(java.sql.PreparedStatement,int,java.lang.Object,java.lang.String,org.springframework.jdbc.support.lob.LobCreator)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$1: void forEach(java.lang.Object)> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: org.apache.ibatis.mapping.ResultMap resolveDiscriminatedResultMap(java.sql.ResultSet,org.apache.ibatis.mapping.ResultMap)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String identifierSelectFragment(java.lang.String,java.lang.String)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: void ensureIndex(java.lang.Class,java.lang.String,java.lang.String,boolean,boolean,boolean)> -> _SINK_
<org.mmbase.module.database.DatabaseSupport: void init()> -> _SINK_
<org.hibernate.dialect.DataDirectOracle9Dialect: java.sql.ResultSet getResultSet(java.sql.CallableStatement)> -> _SINK_
<org.mmbase.module.database.MultiConnection: long getStartTimeMillis()> -> _SINK_
<entities.dao.AbstractDAO: java.util.List query(java.lang.String,int,int,java.lang.Object[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.EmailServicesFunction: void setAddresses(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setDimSearchTerms(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setDate(int,java.sql.Date)> -> _SINK_
<org.castor.persist.TransactionContext: org.exolab.castor.jdo.Database getDatabase()> -> _SINK_
<org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00: org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)> -> _SINK_
<org.hibernate.sql.Template: java.lang.String renderWhereStringTemplate(java.lang.String,java.lang.String,org.hibernate.dialect.Dialect,org.hibernate.dialect.function.SQLFunctionRegistry)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.lang.Object getObject(int,java.util.Map)> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder put(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsOpenStatementsAcrossCommit()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Date getNativeDateViaParseConversion(int)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> -> _SINK_
<org.mmbase.module.database.MultiStatement: int executeUpdate(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setFetchDirection(int)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLNonTransientException: void <init>(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSourceFactory: javax.sql.DataSource create(javax.sql.DataSource,int,int,int,int,int)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: void create(java.lang.Object)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$41: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter$1: void <clinit>()> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavERecSearchDidYouMean(boolean)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.EtxIndexCreator: void execute()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.sql.NClob getNClob(int)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.UpdateTagSupport: void init()> -> _SINK_
<com.datastax.driver.core.TableMetadata: java.lang.String exportAsString()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Timestamp getNativeTimestamp(int,java.util.Calendar,java.util.TimeZone,boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Clause eq(java.lang.String,java.lang.Object)> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.DynamoDBQueryExpression: java.lang.Integer getLimit()> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.DynamoDBMapper: int count(java.lang.Class,com.amazonaws.services.dynamodb.datamodeling.DynamoDBQueryExpression)> -> _SINK_
<org.hibernate.jdbc.BorrowedConnectionProxy: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setFetchSize(int)> -> _SINK_
<org.springframework.jdbc.support.lob.OracleLobHandler: byte[] getBlobAsBytes(java.sql.ResultSet,int)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: void setDatabaseName(java.lang.String)> -> _SINK_
<org.postgresql.core.Parser: boolean isOperatorChar(char)> -> _SINK_
<com.mysql.jdbc.CursorRowProvider: boolean hasNext()> -> _SINK_
<com.mysql.jdbc.Connection: boolean isInGlobalTx()> -> _SINK_
<com.mchange.v2.sql.SqlUtils: java.sql.SQLException toSQLException(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<org.exolab.castor.jdo.engine.JDOCallback: void creating(java.lang.Object,org.exolab.castor.jdo.Database)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsLimitedOuterJoins()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: boolean getMoreResults(int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setBytes(java.lang.String,byte[])> -> _SINK_
<org.hibernate.type.BigDecimalType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringEncoder: void <init>(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setCharacterStream(int,java.io.Reader,long)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: int getFetchDirection()> -> _SINK_
<org.apache.ibatis.executor.statement.CallableStatementHandler: int update(java.sql.Statement)> -> _SINK_
<org.postgresql.core.v2.ProtocolConnectionImpl: int getTransactionState()> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession$2: void <init>(org.apache.ibatis.session.defaults.DefaultSqlSession,java.lang.Object)> -> _SINK_
<org.springframework.jdbc.core.support.AbstractSqlTypeValue: void setTypeValue(java.sql.PreparedStatement,int,int,java.lang.String)> -> _SINK_
<org.postgresql.largeobject.LargeObjectManager: long createLO(int)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$29: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: short getShort(int)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.PreparedStatement prepareStatement(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.ComboPooledDataSource: void setPreferredTestQuery(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXAException: void <init>(int,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setBlob(int,java.sql.Blob)> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl$AclObjectIdentityInsert: void insert(java.lang.String,java.lang.Long,java.lang.String)> -> _SINK_
<javax.sql.XADataSource: javax.sql.XAConnection getXAConnection()> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl$3: void handleWarning(java.sql.SQLWarning)> -> _SINK_
<com.amazonaws.services.dynamodbv2.AmazonDynamoDBAsyncClient$17: void <init>(com.amazonaws.services.dynamodbv2.AmazonDynamoDBAsyncClient,com.amazonaws.services.dynamodbv2.model.QueryRequest)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Clob: void <init>(org.postgresql.core.BaseConnection,long)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$71: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.impl.SessionImpl: org.hibernate.Query createSQLQuery(java.lang.String,java.lang.String[],java.lang.Class[])> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.Object getObject(java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.data.stubs.QueryRequest: void setCqlQuery(gov.nih.nci.cagrid.data.stubs.QueryRequestCqlQuery)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void resetInserter()> -> _SINK_
<org.postgresql.util.StreamWrapper: int getLength()> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection: org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection$ConnectionHandler access$102(org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection,org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection$ConnectionHandler)> -> _SINK_
<org.springframework.orm.hibernate3.support.AbstractLobType: java.lang.Object nullSafeGetInternal(java.sql.ResultSet,java.lang.String[],java.lang.Object,org.springframework.jdbc.support.lob.LobHandler)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: byte[] getBytes(int)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: long[] mk_tokenSet_2()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: int getTransactionIsolation()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Blob getNativeBlob(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: java.sql.Connection getConnection()> -> _SINK_
<org.postgresql.core.ConnectionFactory: void <clinit>()> -> _SINK_
<org.hibernate.hql.ast.tree.CountNode: org.hibernate.type.Type getDataType()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Truncate truncate(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void processDeadParsedQueries()> -> _SINK_
<au.com.bytecode.opencsv.ResultSetHelperService: java.lang.String getColumnValue(java.sql.ResultSet,int,int)> -> _SINK_
<com.mysql.jdbc.util.LRUCache: void <init>(int)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: long toPgSecs(long)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsIntegrityEnhancementFacility()> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: void <init>(javax.sql.DataSource,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Where: com.datastax.driver.core.ConsistencyLevel getConsistencyLevel()> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: void maybeAddRoutingKey(java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.Session: org.hibernate.SQLQuery createSQLQuery(java.lang.String)> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: java.lang.String applyLocks(java.lang.String,java.util.Map,org.hibernate.dialect.Dialect)> -> _SINK_
<java.sql.ResultSet: java.net.URL getURL(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Asset: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: void setDataSourceName(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.NodeSearchQuery: org.mmbase.storage.search.implementation.BasicStepField getField(org.mmbase.core.CoreField)> -> _SINK_
<org.postgresql.copy.CopyOperation: long getHandledRowCount()> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: java.lang.String getColumnTypeName(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void moveToCurrentRow()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment addAll(java.lang.String,java.util.Set)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Milestone__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.lang.String getCatalog()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.core.v3.CompositeParameterList: void setBytea(int,byte[],int,int)> -> _SINK_
<com.mysql.jdbc.Statement: void getBatchedGeneratedKeys()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsBatchUpdates()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getJDBCMinorVersion()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setCharacterStream(int,java.io.Reader,int)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: void rollback(boolean)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: java.lang.String toQueryString(com.endeca.navigation.ENEQuery,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)> -> _SINK_
<org.hibernate.mapping.Column: java.lang.Object clone()> -> _SINK_
<com.mysql.jdbc.RowData: boolean isAfterLast()> -> _SINK_
<com.mysql.jdbc.NonRegisteringDriver: java.lang.String[] parseHostPortPair(java.lang.String)> -> _SINK_
<org.mmbase.servlet.BridgeServlet$QueryParts: java.lang.String getFileName()> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: int getTransactionIsolation()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: int[] executeBatch()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void <init>()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Quote: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Project__Feed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.Query: org.hibernate.Query setFlushMode(org.hibernate.FlushMode)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void logQuery(java.lang.String,long)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setGatherPerformanceMetrics(boolean)> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<java.sql.ResultSet: java.sql.Statement getStatement()> -> _SINK_
<org.hibernate.hql.ast.util.LiteralProcessor: void processConstant(antlr.collections.AST,boolean)> -> _SINK_
<org.postgresql.geometric.PGline: boolean equals(java.lang.Object)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.Query find(java.lang.Class)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: org.hibernate.Criteria getAliasedCriteria(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.lang.String getString(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$73: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<java.sql.Driver: java.sql.Connection connect(java.lang.String,java.util.Properties)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: java.sql.SQLWarning getWarnings()> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicQueryHandler: void <init>(org.mmbase.storage.search.implementation.database.SqlHandler)> -> _SINK_
<java.sql.ResultSet: java.lang.Object getObject(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: short getShort(int)> -> _SINK_
<com.endeca.navigation.ENEQuery: long getDimSearchDimension()> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Date getDate(java.lang.String,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setObject(int,java.lang.Object,int,int)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLCustomQuery: java.lang.String getSQL()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: boolean execute(java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<org.apache.ibatis.session.SqlSession: int update(java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setCharacter(java.lang.String,char)> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: void validateScrollability()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: int findColumn(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: void <init>()> -> _SINK_
<oracle.toplink.sessions.DatabaseSession: void setLogin(oracle.toplink.sessions.DatabaseLogin)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: boolean isClosed()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate$4: java.lang.Object doInPreparedStatement(java.sql.PreparedStatement)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$StatementResultHandler: void append(org.postgresql.jdbc2.ResultWrapper)> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl$LookupPermissionIdMapping: java.lang.Object mapRow(java.sql.ResultSet,int)> -> _SINK_
<org.hibernate.jdbc.ColumnNameCache: int getIndexForColumnName(java.lang.String,org.hibernate.jdbc.ResultSetWrapper)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: java.sql.Connection getConnection(java.util.Properties)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void insertRow()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<gov.nih.nci.cagrid.data.enumeration.stubs.EnumerationQueryRequestCqlQuery: void <init>()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: short getShort(int)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: org.hibernate.Criteria getCriteria(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setQueryTimeout(int)> -> _SINK_
<org.springframework.jdbc.support.incrementer.MySQLMaxValueIncrementer: long getNextKey()> -> _SINK_
<org.hibernate.sql.SimpleSelect: org.hibernate.sql.SimpleSelect addColumn(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser: java.lang.String resolveCollectionProperties(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateBlob(java.lang.String,java.sql.Blob)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: com.datastax.driver.core.querybuilder.Update$Where where(com.datastax.driver.core.querybuilder.Clause)> -> _SINK_
<com.sforce.soap.enterprise.QueryAll_element: void writeFields(com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.mongodb.morphia.query.GeoFieldCriteria: void <init>(org.mongodb.morphia.query.QueryImpl,java.lang.String,org.mongodb.morphia.query.FilterOperator,java.lang.Object,boolean,boolean,java.util.Map)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Solution: void setTasks(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType: void <init>()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: boolean relative(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: java.lang.String toString()> -> _SINK_
<org.mmbase.cache.QueryResultCache: void <clinit>()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void cancel()> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringDecoder: void <init>(java.net.URI,java.nio.charset.Charset,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Lead: void setActivityHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setCharacterStream(int,java.io.Reader,int)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeBoolean(java.lang.String,boolean,boolean,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setByte(int,byte)> -> _SINK_
<org.hibernate.criterion.CriteriaQuery: org.hibernate.type.Type getIdentifierType(org.hibernate.Criteria)> -> _SINK_
<com.enhype.db.PostgresDB: void execScript(java.io.Reader)> -> _SINK_
<com.mysql.jdbc.ResultSet: com.mysql.jdbc.ResultSet getNextResultSet()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void deleteRow()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsSchemasInIndexDefinitions()> -> _SINK_
<org.castor.jdo.engine.DatabaseRegistry: void <clinit>()> -> _SINK_
<gov.nih.nci.system.webservice.WSQueryImpl: java.util.List query(java.lang.String,java.lang.Object,int)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: int getQueryTimeout()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void deleteRow()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4PreparedStatement: void <init>(org.postgresql.jdbc4.Jdbc4Connection,java.lang.String,boolean,int,int,int)> -> _SINK_
<entities.dao.hibernate.DAOHibernateNestedTransaction: java.util.List query(java.lang.String,int,int,java.lang.Object[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<au.com.bytecode.opencsv.CSVWriter: void writeColumnNames(java.sql.ResultSet)> -> _SINK_
<org.hibernate.criterion.ProjectionList: java.lang.String toGroupSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$37: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.Statement: void closeAllOpenResults()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: boolean isCaseSensitive(int)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimeLocaleConverter: java.lang.Object parse(java.lang.Object,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getDatabaseMinorVersion()> -> _SINK_
<org.hibernate.mapping.PersistentClass: java.lang.String getCustomSQLDelete()> -> _SINK_
<test.gov.nih.nci.security.hibernate.annotations.HibernateAnnotationsTest: void testNonAnnotated()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: long getLong(java.lang.String)> -> _SINK_
<com.datastax.driver.core.QueryTrace: java.lang.String toString()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateNCharacterStream(java.lang.String,java.io.Reader,long)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void registerOutParameter(int,int,int)> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl: org.acegisecurity.acl.basic.jdbc.JdbcDaoImpl$AclDetailsHolder lookupAclDetailsHolder(org.acegisecurity.acl.basic.AclObjectIdentity)> -> _SINK_
<org.postgresql.ssl.MakeSSL: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: boolean rowDeleted()> -> _SINK_
<com.endeca.navigation.ENEQuery: void setDimSearchRankResults(boolean)> -> _SINK_
<com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource: javax.sql.PooledConnection getPooledConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String getPropertyName(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Clause: void <init>(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: java.util.List findPointOfContactsBy(gov.nih.nci.cananolab.domain.particle.Sample,gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean)> -> _SINK_
<org.hibernate.loader.Loader: java.util.List doList(org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: java.lang.String toQueryString(com.endeca.navigation.ENEQuery)> -> _SINK_
<com.endeca.navigation.analytics.ExprFunction: java.lang.String toWire()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setOpportunityPartnersFrom(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.loader.JoinWalker: org.hibernate.sql.JoinFragment mergeOuterJoins(java.util.List)> -> _SINK_
<org.mmbase.util.transformers.Sql: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean nullsAreSortedAtEnd()> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.sql.CallableStatement prepareCall(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: boolean isTracing()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: com.datastax.driver.core.Statement disableTracing()> -> _SINK_
<com.endeca.navigation.ENEQuery: boolean getNavERecSearchComputeAlternativePhrasings()> -> _SINK_
<org.castor.jdo.drivers.PointbaseQueryExpression: void <init>(org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<gov.nih.nci.logging.api.util.HibernateUtil: org.hibernate.SessionFactory createSessionFactory()> -> _SINK_
<org.postgresql.core.ResultHandler: void handleCommandStatus(java.lang.String,int,long)> -> _SINK_
<oracle.toplink.queryframework.ReadObjectQuery: void <init>(java.lang.Class)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setAggrERecNavRangeFilters(com.endeca.navigation.RangeFilterList)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$1: java.lang.Object doInSqlMapClient(com.ibatis.sqlmap.client.SqlMapExecutor)> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache: java.lang.Object acquireStatement(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setOpportunityContactRoles(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: float getFloat(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreCMT: java.lang.Object executeInLock(java.lang.String,org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback)> -> _SINK_
<org.postgresql.util.PSQLWarning: void <init>(org.postgresql.util.ServerErrorMessage)> -> _SINK_
<com.amazonaws.services.s3.AmazonS3Client: void presignRequest(com.amazonaws.Request,com.amazonaws.HttpMethod,java.lang.String,java.lang.String,java.util.Date,java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: boolean previous()> -> _SINK_
<org.postgresql.core.v3.ConnectionFactoryImpl: org.postgresql.core.ProtocolConnection openConnectionImpl(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties,org.postgresql.core.Logger)> -> _SINK_
<org.mmbase.bridge.util.TreeList: org.mmbase.storage.search.RelationStep grow(org.mmbase.bridge.NodeManager,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.tool.hbm2ddl.TableMetadata: void initIndexes(java.sql.DatabaseMetaData)> -> _SINK_
<org.hibernate.engine.ParameterBinder: int bindQueryParameters(java.sql.PreparedStatement,org.hibernate.engine.QueryParameters,int,org.hibernate.engine.ParameterBinder$NamedParameterSource,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void closeForNextExecution()> -> _SINK_
<org.hibernate.loader.Loader: java.util.List loadEntityBatch(org.hibernate.engine.SessionImplementor,java.io.Serializable[],org.hibernate.type.Type,java.lang.Object,java.lang.String,java.io.Serializable,org.hibernate.persister.entity.EntityPersister)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Date getDate(int,java.util.Calendar)> -> _SINK_
<org.mmbase.module.corebuilders.TypeDef: void testBuilderRemovable(org.mmbase.module.core.MMObjectBuilder,org.mmbase.module.core.MMObjectNode)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: void releaseSavepoint(java.sql.Savepoint)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateClob(java.lang.String,java.io.Reader,long)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateBytes(java.lang.String,byte[])> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Blob getBlob(int)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setTime(java.lang.String,java.sql.Time,java.util.Calendar)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: int getInt(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsResultSetConcurrency(int,int)> -> _SINK_
<org.hibernate.lob.SerializableBlob: byte[] getBytes(long,int)> -> _SINK_
<org.hibernate.impl.SessionImpl: org.hibernate.Query createFilter(java.lang.Object,java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void nestedFromFragment(antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<gov.nih.nci.system.query.hql.DeleteHQLQuery: void <init>(java.lang.String,java.util.List)> -> _SINK_
<org.apache.ibatis.mapping.MappedStatement$Builder: org.apache.ibatis.mapping.MappedStatement build()> -> _SINK_
<org.apache.ibatis.datasource.unpooled.UnpooledDataSource$DriverProxy: int getMajorVersion()> -> _SINK_
<com.sforce.soap.enterprise.fault.InvalidQueryLocatorFault: void write(javax.xml.namespace.QName,com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor: java.sql.ResultSet getNativeResultSet(java.sql.ResultSet)> -> _SINK_
<org.apache.ibatis.metadata.DatabaseFactory: org.apache.ibatis.metadata.Database newDatabase(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsSchemasInProcedureCalls()> -> _SINK_
<org.postgresql.largeobject.LargeObject: void write(byte[])> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: void query(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,org.springframework.jdbc.core.RowCallbackHandler)> -> _SINK_
<org.hibernate.impl.QueryImpl: void <init>(java.lang.String,org.hibernate.engine.SessionImplementor,org.hibernate.engine.query.ParameterMetadata)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void parenSelect(antlr.collections.AST)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource$1: void connectionClosed(javax.sql.ConnectionEvent)> -> _SINK_
<org.exolab.castor.persist.FieldMolder: void <init>(org.exolab.castor.persist.DatingService,org.exolab.castor.persist.ClassMolder,org.exolab.castor.mapping.xml.FieldMapping)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqllog10(java.util.List)> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getCatalogs()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectFiredTriggerRecordsByJob(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.SimpleQueryExecutor$SimpleQueryResults: boolean absolute(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void registerOutParameter(int,int)> -> _SINK_
<org.postgresql.core.TypeInfo: void addDataType(java.lang.String,java.lang.Class)> -> _SINK_
<org.springframework.orm.jdo.DefaultJdoDialect: javax.jdo.Query newNamedQuery(javax.jdo.PersistenceManager,java.lang.Class,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void checkColumnIndex(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setLocale(java.lang.String,java.util.Locale)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: org.springframework.jdbc.support.rowset.SqlRowSet queryForRowSet(java.lang.String,java.util.Map)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: org.hibernate.type.Type[] getProjectedTypes()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void checkClosed()> -> _SINK_
<org.hibernate.loader.collection.OneToManyLoader: void <init>(org.hibernate.persister.collection.QueryableCollection,int,java.lang.String,org.hibernate.engine.SessionFactoryImplementor,java.util.Map)> -> _SINK_
<org.exolab.castor.jdo.drivers.SQLServerFactory: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: long getFastLong(int)> -> _SINK_
<org.apache.ibatis.transaction.Transaction: java.sql.Connection getConnection()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void insertRow()> -> _SINK_
<org.springframework.jdbc.core.SingleColumnRowMapper: java.lang.Object getColumnValue(java.sql.ResultSet,int)> -> _SINK_
<org.hibernate.type.IntegerType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.postgresql.core.types.PGBigDecimal: void <init>(java.math.BigDecimal)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.lang.Object getObject(int)> -> _SINK_
<org.exolab.castor.jdo.drivers.ReturnedRSCallQuery: void <init>(java.lang.String,java.lang.Class[],java.lang.Class,java.lang.String[],int[])> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void generateStatements()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Interview__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.datastax.driver.core.policies.TokenAwarePolicy$1: com.datastax.driver.core.Host computeNext()> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: org.postgresql.core.Query createSimpleQuery(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setSlowQueryThresholdNanos(long)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Blob: int setBytes(long,byte[])> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate: java.lang.Object executeNamedQuery(java.lang.Class,java.lang.String,boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position__c: void setActivityHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.sql.Update: org.hibernate.sql.Update setVersionColumnName(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: void <init>(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties,java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void change(org.mmbase.module.core.MMObjectNode,org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<com.datastax.driver.core.querybuilder.Clause$InClause: void appendTo(java.lang.StringBuilder,java.util.List)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Statement getStatement()> -> _SINK_
<org.mongodb.morphia.MapreduceResults: java.util.Iterator getInlineResults()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Array getArray(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CustomEmail__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getUserName()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: byte getByte(int)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.math.BigDecimal getBigDecimal(java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList: java.util.List fetchNextPage()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Object: gov.nih.nci.cagrid.cqlquery.Group getGroup()> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void groupExprs(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsExpressionsInOrderBy()> -> _SINK_
<com.mysql.jdbc.log.CommonsLogger: void logTrace(java.lang.Object)> -> _SINK_
<org.hibernate.type.Type: java.lang.Object hydrate(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<org.hibernate.engine.QueryParameters: org.hibernate.engine.QueryParameters createCopyUsing(org.hibernate.engine.RowSelection)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion propertyNotIn(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Location__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.sql.Sybase11JoinFragment: void addJoin(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: double getNativeDouble(int)> -> _SINK_
<org.hibernate.engine.QueryParameters: java.lang.Object[] getFilteredPositionalParameterValues()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Task__c: void setProject_Expenses__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Group: gov.nih.nci.cagrid.cqlquery.Association getAssociation(int)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: antlr.collections.AST generateSyntheticDotNodeForNonQualifiedPropertyRef(antlr.collections.AST,org.hibernate.hql.ast.tree.FromElement)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setActivityHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.hibernate.loader.Loader: void setMaxRows(java.sql.PreparedStatement,org.hibernate.engine.RowSelection)> -> _SINK_
<org.hibernate.connection.ProxoolConnectionProvider: java.sql.Connection getConnection()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.jdbc.object.SqlOperation: void onCompileInternal()> -> _SINK_
<org.hibernate.engine.NamedQueryDefinition: boolean isCacheable()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsDataDefinitionAndDataManipulationTransactions()> -> _SINK_
<org.hibernate.hql.ast.exec.StatementExecutor: java.lang.String[] getSqlStatements()> -> _SINK_
<org.exolab.castor.jdo.drivers.MultiRSCallQuery: void <init>(java.lang.String,java.lang.Class[],java.lang.Class,java.lang.String[],int[])> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeQuery: org.mmbase.storage.search.StepField getStepField(org.mmbase.bridge.Field)> -> _SINK_
<org.mmbase.storage.search.implementation.database.InformixSqlHandler: void appendQueryBodyToSql(java.lang.StringBuffer,org.mmbase.storage.search.SearchQuery,org.mmbase.storage.search.implementation.database.SqlHandler)> -> _SINK_
<org.exolab.castor.jdo.drivers.HsqlQueryExpression: java.lang.String getStatement(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setShort(int,short)> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void fromClause(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.lang.Object getObject(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.SQLWarning getWarnings()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List query(java.lang.String,java.lang.Object[],org.springframework.jdbc.core.RowMapper)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment discardAll(java.lang.String,com.datastax.driver.core.querybuilder.BindMarker)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSessionFactory: org.apache.ibatis.session.SqlSession openSession(org.apache.ibatis.session.ExecutorType,org.apache.ibatis.session.TransactionIsolationLevel)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setPartners(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.exolab.castor.jdo.drivers.InformixQueryExpression: void <init>(org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<com.mysql.jdbc.Connection: boolean isCursorFetchEnabled()> -> _SINK_
<org.mmbase.module.database.JDBC: void <clinit>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<org.hibernate.hql.classic.WhereParser: void closeExpression(org.hibernate.hql.classic.QueryTranslatorImpl,java.lang.String)> -> _SINK_
<java.sql.ResultSet: java.sql.Time getTime(java.lang.String,java.util.Calendar)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Dashboard: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: boolean getBoolean(java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateShort(int,short)> -> _SINK_
<java.sql.ResultSetMetaData: java.lang.String getTableName(int)> -> _SINK_
<org.hibernate.loader.custom.CustomLoader$ScalarResultColumnProcessor: java.lang.Object extract(java.lang.Object[],java.sql.ResultSet,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.endeca.navigation.VersionMismatchException: void <init>(java.lang.String)> -> _SINK_
<com.sun.jersey.api.client.AsyncWebResource: com.sun.jersey.api.client.AsyncWebResource uri(java.net.URI)> -> _SINK_
<com.mysql.jdbc.StringUtils: boolean startsWithIgnoreCaseAndWs(java.lang.String,java.lang.String,int)> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.PaginatedQueryList: java.util.List fetchNextPage()> -> _SINK_
<com.mysql.jdbc.TimeUtil: java.lang.String getCanoncialTimezone(java.lang.String)> -> _SINK_
<javax.ws.rs.core.UriBuilder: javax.ws.rs.core.UriBuilder queryParam(java.lang.String,java.lang.Object[])> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: void setScanIndexForward(java.lang.Boolean)> -> _SINK_
<org.exolab.castor.jdo.drivers.InformixQueryExpression: java.lang.String quoteTableAndColumn(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateLong(java.lang.String,long)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setFloat(int,float)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setN(java.lang.String)> -> _SINK_
<com.mysql.jdbc.NonRegisteringDriver: java.sql.Connection connectLoadBalanced(java.lang.String,java.util.Properties)> -> _SINK_
<org.apache.ibatis.mapping.BoundSql: java.util.List getParameterMappings()> -> _SINK_
<com.mysql.jdbc.Connection: void registerStatement(com.mysql.jdbc.Statement)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: long readLongValue(byte[],int,long,long,java.lang.String)> -> _SINK_
<org.hibernate.context.JTASessionContext: org.hibernate.classic.Session buildOrObtainSession()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseUnicode(boolean)> -> _SINK_
<org.springframework.jdbc.object.MappingSqlQueryWithParameters: void <init>(javax.sql.DataSource,java.lang.String)> -> _SINK_
<org.hibernate.hql.QuerySplitter: boolean isPossiblyClassName(java.lang.String,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void resumeTriggerGroup(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.lang.Object getObject(int,java.lang.Class)> -> _SINK_
<org.exolab.castor.persist.SQLRelationLoader: void createRelation(java.sql.Connection,org.exolab.castor.persist.spi.Identity,org.exolab.castor.persist.spi.Identity)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23ConnectionPoolDataSource: void readObject(java.io.ObjectInputStream)> -> _SINK_
<org.exolab.castor.jdo.drivers.InterbaseQueryExpression: void <init>(org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<org.hibernate.loader.Loader: void advance(java.sql.ResultSet,org.hibernate.engine.RowSelection)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$IntegerConnectionProperty: void <init>(com.mysql.jdbc.ConnectionProperties,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: java.nio.ByteBuffer[] getValues()> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder elemMatch(com.mongodb.DBObject)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: boolean hasText(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setTimestamp(int,java.sql.Timestamp)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setInt(int,int)> -> _SINK_
<org.hibernate.cfg.Settings: org.hibernate.cache.QueryCacheFactory getQueryCacheFactory()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> -> _SINK_
<org.postgresql.gss.GssAction: boolean hasSpnegoSupport(org.ietf.jgss.GSSManager)> -> _SINK_
<com.sforce.soap.enterprise.sobject.TaskFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool: int getNumUnclosedOrphanedConnections()> -> _SINK_
<org.hibernate.loader.criteria.CriteriaLoader: org.hibernate.ScrollableResults scroll(org.hibernate.engine.SessionImplementor,org.hibernate.ScrollMode)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void query(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy$ConnectionErrorFiringInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setLong(java.lang.String,long)> -> _SINK_
<java.sql.CallableStatement: void setDate(java.lang.String,java.sql.Date)> -> _SINK_
<com.mysql.jdbc.Statement: void clearWarnings()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Statement: java.sql.ParameterMetaData createParameterMetaData(org.postgresql.core.BaseConnection,int[])> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: java.lang.Object internalGetObject(int,org.postgresql.core.Field)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String generateInsertString(boolean,boolean[],int)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.type.Type determineType(java.lang.String,java.lang.Object,org.hibernate.type.Type)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2BlobClob: java.io.OutputStream setBinaryStream(long)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment decr(java.lang.String,long)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: java.nio.ByteBuffer getRoutingKey()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$69: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setTimestamp(java.lang.String,java.sql.Timestamp)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Time__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.stat.Statistics: long getQueryExecutionMaxTime()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contract: void setContractContactRoles(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.v3.CompositeQuery: boolean isStatementDescribed()> -> _SINK_
<org.springframework.jdbc.core.namedparam.ParsedSql: void setNamedParameterCount(int)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int)> -> _SINK_
<org.postgresql.core.v3.ProtocolConnectionImpl: java.lang.String getServerVersion()> -> _SINK_
<gov.nih.nci.cagrid.cqlresultset.CQLQueryResults: gov.nih.nci.cagrid.cqlresultset.CQLIdentifierResult[] getIdentifierResult()> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.QueryResultPage: void setResults(java.util.List)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateTime(java.lang.String,java.sql.Time)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.net.URL getURL(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Timestamp getTimestamp(java.lang.String)> -> _SINK_
<entities.gui.jsf.AutoEntityBackBean: java.util.List getSelectItems(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: boolean characterSetNamesMatches(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setBytes(int,byte[])> -> _SINK_
<com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase: void setConnectionPoolDataSource(javax.sql.ConnectionPoolDataSource)> -> _SINK_
<com.mysql.jdbc.Field: boolean isBlob()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.Boolean)> -> _SINK_
<org.postgresql.geometric.PGlseg: java.lang.Object clone()> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.FieldConstraint setCaseSensitive(org.mmbase.storage.search.FieldConstraint,boolean)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void registerOutParameter(int,int,int,boolean)> -> _SINK_
<com.mysql.jdbc.Clob: int setString(long,java.lang.String,int,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getProcedures(int,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void initRowBuffer()> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: void swapConnections(com.mysql.jdbc.Connection,com.mysql.jdbc.Connection)> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: void token(java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: java.lang.Class getEntityClass()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: boolean getBoolean(int)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNs(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.datastax.driver.core.QueryOptions: int getFetchSize()> -> _SINK_
<org.hibernate.hql.ast.QuerySyntaxException: org.hibernate.hql.ast.QuerySyntaxException convert(antlr.RecognitionException,java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.QueryModifier: int hashCode()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: java.util.Map getLockModes()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: short getShort(java.lang.String)> -> _SINK_
<org.hibernate.engine.query.QueryPlanCache: org.hibernate.engine.query.ParameterMetadata getSQLParameterMetadata(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: int executeUpdate(java.lang.String,int[])> -> _SINK_
<com.mysql.jdbc.ResultSet: void checkClosed()> -> _SINK_
<org.springframework.jdbc.core.PreparedStatementCreatorFactory: void setSqlToUse(java.lang.String)> -> _SINK_
<com.mysql.jdbc.PacketTooBigException: void <init>(long,long)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: com.datastax.driver.core.ConsistencyLevel getConsistencyLevel()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: boolean isCaseSensitive(int)> -> _SINK_
<org.mmbase.servlet.BridgeServlet: org.mmbase.servlet.BridgeServlet$QueryParts readQuery(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<com.endeca.navigation.analytics.AnalyticsQuery: java.lang.String toWire()> -> _SINK_
<org.castor.persist.AbstractTransactionContext: java.lang.Object load(org.exolab.castor.persist.spi.Identity,org.castor.persist.ProposedEntity,org.exolab.castor.mapping.AccessMode)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void afterStatementCompletion(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getCatalogSeparator()> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: int getResultSetId()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setTimestamp(java.lang.String,java.sql.Timestamp)> -> _SINK_
<org.exolab.castor.xml.descriptors.SQLDateClassDescriptor: java.lang.Class getJavaClass()> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.EtxSqlHandler: void init()> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementFactory: org.hibernate.hql.ast.tree.FromElement createCollectionElementsJoin(org.hibernate.persister.collection.QueryableCollection,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch$Options: com.datastax.driver.core.Statement setConsistencyLevel(com.datastax.driver.core.ConsistencyLevel)> -> _SINK_
<com.mysql.jdbc.ResultSet: void deleteRow()> -> _SINK_
<org.springframework.jdbc.core.namedparam.AbstractSqlParameterSource: void <init>()> -> _SINK_
<com.mysql.jdbc.Connection$1: void <init>(com.mysql.jdbc.Connection,int)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlsecond(java.util.List)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: boolean isVerified(org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<org.apache.ibatis.jdbc.ScriptRunner: void setAutoCommit()> -> _SINK_
<org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo: void setJtaDataSource(javax.sql.DataSource)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodes: java.lang.String[] getDeadlockLoserCodes()> -> _SINK_
<org.springframework.jdbc.support.lob.LobCreator: void setClobAsCharacterStream(java.sql.PreparedStatement,int,java.io.Reader,int)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.lang.String getString(int)> -> _SINK_
<org.hibernate.type.AdaptedImmutableType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: void checkForBindMarkers(java.lang.Object)> -> _SINK_
<org.hibernate.mapping.Join: java.lang.String getCustomSQLDelete()> -> _SINK_
<org.mmbase.module.database.JDBC: org.mmbase.module.database.MultiConnection getConnection(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.mapping.RelationalModel: java.lang.String sqlCreateString(org.hibernate.dialect.Dialect,org.hibernate.engine.Mapping,java.lang.String,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)> -> _SINK_
<java.sql.CallableStatement: java.sql.Time getTime(java.lang.String)> -> _SINK_
<com.endeca.navigation.analytics.AnalyticsQuery: java.lang.String backslashEscape(java.lang.String,char)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.math.BigDecimal getBigDecimal(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setURL(int,java.net.URL)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Ref getRef(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: com.datastax.driver.core.querybuilder.Update$Conditions and(com.datastax.driver.core.querybuilder.Clause)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: com.datastax.driver.core.Statement setRetryPolicy(com.datastax.driver.core.policies.RetryPolicy)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.UpdateTagSupport: void setParameters(java.sql.PreparedStatement,java.util.List)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate$1BatchUpdateStatementCallback: java.lang.Object doInStatement(java.sql.Statement)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: int getResultSetHoldability()> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: void <init>(org.hibernate.cfg.Configuration,org.hibernate.engine.Mapping,org.hibernate.cfg.Settings,org.hibernate.event.EventListeners)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void cancel()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.SuspendableXAConnection: void removeXAConnectionMapping(javax.transaction.xa.Xid)> -> _SINK_
<org.postgresql.xa.PGXAConnection: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.Query: org.hibernate.Query setCacheable(boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils$1: java.text.SimpleDateFormat initialValue()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: void close()> -> _SINK_
<freemarker.ext.dom.NodeListModel: freemarker.template.TemplateModel get(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getDynamicCalendars()> -> _SINK_
<org.hibernate.criterion.PropertyProjection: java.lang.String toGroupSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<java.sql.Statement: int getFetchSize()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateInt(java.lang.String,int)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: void logStaticSQL()> -> _SINK_
<org.hibernate.cfg.Configuration: java.util.Map getNamedSQLQueries()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: java.nio.ByteBuffer[] getValues()> -> _SINK_
<org.mmbase.bridge.util.Queries: org.mmbase.bridge.Query addSortedFields(org.mmbase.bridge.Query)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateLong(int,long)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: void setTypeMap(java.util.Map)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.String getSocketFactoryClassName()> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: java.lang.String toSqlString(java.lang.String)> -> _SINK_
<org.springframework.orm.hibernate3.support.AbstractLobType: void nullSafeSetInternal(java.sql.PreparedStatement,int,java.lang.Object,org.springframework.jdbc.support.lob.LobCreator)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DBSemaphore: void setExpandedSQL()> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression: java.util.Map getRangeKeyConditions()> -> _SINK_
<gov.nih.nci.cananolab.service.security.SecurityService: java.util.Map getAllGroupRoles(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CollaborationGroup: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean nullsAreSortedLow()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setRoundRobinLoadBalance(boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Quote: void setOpenActivities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser: java.lang.String process()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void change(org.mmbase.module.core.MMObjectNode,org.mmbase.module.core.MMObjectBuilder,java.lang.String,java.util.Collection)> -> _SINK_
<com.mysql.jdbc.Statement: void setResultSetConcurrency(int)> -> _SINK_
<com.mysql.jdbc.Buffer: void writeString(java.lang.String)> -> _SINK_
<java.sql.ResultSet: java.sql.Timestamp getTimestamp(java.lang.String)> -> _SINK_
<org.hibernate.sql.QueryJoinFragment: boolean addCondition(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.SimpleQueryExecutor: java.sql.ResultSet access$000(org.exolab.castor.jdo.engine.SimpleQueryExecutor)> -> _SINK_
<java.sql.CallableStatement: java.math.BigDecimal getBigDecimal(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setClob(int,java.sql.Clob)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLInvalidAuthorizationSpecException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.copy.PGCopyInputStream: byte[] readFromCopy()> -> _SINK_
<org.hibernate.hql.classic.SelectParser: org.hibernate.type.Type aggregateType(java.util.List,org.hibernate.type.Type,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: java.lang.String getParamTypeForComparison(org.exolab.castor.jdo.oql.ParseTreeNode)> -> _SINK_
<javax.sql.XAConnection: javax.transaction.xa.XAResource getXAResource()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addEqualConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.Field,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getUserName()> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(int,java.util.Map)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodes: java.lang.String[] getCannotAcquireLockCodes()> -> _SINK_
<com.mysql.jdbc.log.Jdk14Logger: void logInfo(java.lang.Object,java.lang.Throwable)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateArray(java.lang.String,java.sql.Array)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void fromElement(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSourceFactory: javax.sql.DataSource createSerializable(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,int,int,int)> -> _SINK_
<org.hibernate.sql.JoinFragment: boolean hasFilterCondition()> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: boolean hasSelectNew()> -> _SINK_
<org.mmbase.storage.search.implementation.NodeSearchQuery: org.mmbase.storage.search.implementation.BasicStepField addField(org.mmbase.storage.search.Step,org.mmbase.core.CoreField)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: boolean getAutoCommit()> -> _SINK_
<java.sql.DatabaseMetaData: boolean nullsAreSortedLow()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateBlobTrigger(java.sql.Connection,org.quartz.Trigger)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Blob: java.io.InputStream getBinaryStream(long,long)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setObject(java.lang.String,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: int getDatabaseMajorVersion()> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLNonTransientConnectionException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.eclipse.acceleo.engine.internal.evaluation.AcceleoEvaluationVisitorDecorator: void cacheResult(org.eclipse.acceleo.model.mtl.Query,java.util.List,java.lang.Object)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$MainFrame: void btnPrevious_actionPerformed(java.awt.event.ActionEvent)> -> _SINK_
<org.springframework.orm.jpa.JpaTemplate$10: java.lang.Object doInJpa(javax.persistence.EntityManager)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateDate(java.lang.String,java.sql.Date)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void sendCloseStatement(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.String getString(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: int getFetchSize()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: boolean first()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setNull(int,int,java.lang.String)> -> _SINK_
<org.quartz.utils.PoolingConnectionProvider: java.sql.Connection getConnection()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: boolean isNull(int)> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.WritableApplicationServiceImpl: java.util.List executeBatchQuery(java.util.List)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: java.lang.String asSql(boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$CounterAssignment: void <init>(java.lang.String,java.lang.Object,boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CampaignFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.bridge.implementation.BasicCloud: org.mmbase.bridge.NodeList getList(org.mmbase.bridge.Query)> -> _SINK_
<org.hibernate.type.MetaType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,boolean[],org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.hibernate.persister.entity.Queryable: java.lang.String[][] getContraintOrderedTableKeyColumnClosure()> -> _SINK_
<org.exolab.castor.jdo.drivers.PostgreSQLQueryExpression: void <init>(org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: void <clinit>()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXAConnection: javax.transaction.xa.Xid[] recover(java.sql.Connection,int)> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.FieldList getSelection()> -> _SINK_
<gov.nih.nci.system.query.hql.SearchHQLQuery: void <init>(java.lang.String,java.util.List)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$IteratorWithCleanup: void <init>(com.mysql.jdbc.DatabaseMetaData)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void <init>(long,long,com.mysql.jdbc.Connection,com.mysql.jdbc.Statement)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: java.sql.ParameterMetaData getParameterMetaData()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateTime(int,java.sql.Time)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: int getMaxCatalogNameLength()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.util.Calendar getGmtCalendar()> -> _SINK_
<com.mysql.jdbc.log.Jdk14Logger: void logWarn(java.lang.Object)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsCatalogsInProcedureCalls()> -> _SINK_
<org.hibernate.util.FilterHelper: void <init>(java.util.Map,org.hibernate.dialect.Dialect,org.hibernate.dialect.function.SQLFunctionRegistry)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setLong(java.lang.String,long)> -> _SINK_
<org.hibernate.sql.SimpleSelect: org.hibernate.sql.SimpleSelect addColumn(java.lang.String)> -> _SINK_
<org.hibernate.sql.Update: org.hibernate.sql.Update addWhereColumns(java.lang.String[],java.lang.String)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.lang.String[][] getColumnNames()> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void count(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy: void <clinit>()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: void detach()> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringDecoder: char decodeHexNibble(char)> -> _SINK_
<org.hibernate.type.ManyToOneType: int[] sqlTypes(org.hibernate.engine.Mapping)> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: void write(byte[],int,int)> -> _SINK_
<org.mmbase.bridge.Query: void addNode(org.mmbase.storage.search.Step,int)> -> _SINK_
<org.mmbase.servlet.BridgeServlet: org.mmbase.servlet.BridgeServlet$QueryParts readServletPath(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void checkIndex(int,int,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: int getPGArrayType(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Blob: java.io.InputStream getBinaryStream()> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void receiveRFQ()> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: java.lang.String getSQLString()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: boolean isAfterLast()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: int getInt(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: com.datastax.driver.core.RegularStatement setForceNoValues(boolean)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: int size()> -> _SINK_
<org.apache.ibatis.session.SqlSessionFactoryBuilder: org.apache.ibatis.session.SqlSessionFactory build(java.io.Reader,java.util.Properties)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setText(int,java.lang.String)> -> _SINK_
<org.apache.http.client.utils.URIBuilder: java.net.URI build()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.lang.String getURL()> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: int executeUpdate(org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.ResultSet: int parseIntWithOverflowCheck(int,byte[],java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer: javax.sql.DataSource getDataSource()> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: void addSelectFromJoins()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNdr(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Timestamp getTimestamp(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.List selectSchedulerStateRecords(java.sql.Connection,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contract: void setHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void cleanupAllStatementResultSets(java.util.List)> -> _SINK_
<com.datastax.driver.core.Requests$Query: void <clinit>()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4SQLXML: javax.xml.transform.Source getSource(java.lang.Class)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Time getTime(int)> -> _SINK_
<org.castor.persist.AbstractTransactionContext: java.sql.Connection createConnection(org.exolab.castor.persist.LockEngine)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setDimSearchNavRecordFilter(java.lang.String)> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsResult: java.util.List getIds()> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryDefinition: void configure(org.w3c.dom.Element)> -> _SINK_
<org.hibernate.tool.hbm2ddl.SuppliedConnectionHelper: void prepare(boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update: void <init>(com.datastax.driver.core.TableMetadata)> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: void dereferenceCollection(java.lang.String,java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: int getMaxRows()> -> _SINK_
<com.sun.jersey.api.client.AsyncViewResource: com.sun.jersey.api.client.AsyncViewResource queryParam(java.lang.String,java.lang.String)> -> _SINK_
<com.mongodb.DBPort: com.mongodb.Response findOne(com.mongodb.DB,java.lang.String,com.mongodb.DBObject)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateNull(int)> -> _SINK_
<javax.sql.PooledConnection: java.sql.Connection getConnection()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Campaign: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.TransactionTagSupport: void setIsolation(java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setURL(int,java.net.URL)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$LongConnectionProperty: long getValueAsLong()> -> _SINK_
<org.mongodb.morphia.MapreduceResults: void setQuery(org.mongodb.morphia.query.Query)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: void setTransactionIsolation(int)> -> _SINK_
<org.postgresql.util.ByteConverter: void int2(byte[],int,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: void setMaxRows(int)> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.validation.CQLQueryResultsValidator: void <init>(org.apache.axis.message.addressing.EndpointReferenceType)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationServiceFacade: java.lang.Object createObject(java.lang.Object)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodesFactory: void <clinit>()> -> _SINK_
<org.hibernate.cache.StandardQueryCache: void <clinit>()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: boolean execute(java.lang.String,int[])> -> _SINK_
<org.hibernate.loader.JoinWalker: void walkCompositeElementTree(org.hibernate.type.AbstractComponentType,java.lang.String[],org.hibernate.persister.collection.QueryableCollection,java.lang.String,java.lang.String,int)> -> _SINK_
<java.sql.ResultSet: java.sql.Blob getBlob(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: boolean execute(java.lang.String)> -> _SINK_
<org.postgresql.util.ServerErrorMessage: java.lang.String getSQLState()> -> _SINK_
<java.sql.ResultSetMetaData: int getColumnType(int)> -> _SINK_
<org.hibernate.dialect.Oracle9Dialect: int registerResultSetOutParameter(java.sql.CallableStatement,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: boolean getAutoCommit()> -> _SINK_
<org.springframework.jdbc.datasource.DelegatingDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.system.query.cql.CQLPredicate: boolean equals(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: java.lang.String getTableName(int)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.bridge.Query cloneWithoutFields()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateDouble(int,double)> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy$RandomBalanceStrategy: com.mysql.jdbc.Connection pickConnection()> -> _SINK_
<org.springframework.orm.toplink.support.CommonsLoggingSessionLog904: java.lang.String getMessageString(oracle.toplink.sessions.SessionLogEntry)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$9: java.lang.Object doInSqlMapClient(com.ibatis.sqlmap.client.SqlMapExecutor)> -> _SINK_
<org.exolab.castor.persist.QueryResults: org.exolab.castor.persist.spi.PersistenceQuery getQuery()> -> _SINK_
<org.hibernate.sql.OracleJoinFragment: void addLeftOuterJoinCondition(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setArray(int,java.sql.Array)> -> _SINK_
<org.hibernate.persister.collection.BasicCollectionPersister: java.lang.String manyToManySelectFragment(org.hibernate.persister.entity.Joinable,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void retrieveOutParams()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[])> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.math.BigDecimal getBigDecimal(int,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch$Options: com.datastax.driver.core.policies.RetryPolicy getRetryPolicy()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Clob getClob(java.lang.String)> -> _SINK_
<org.exolab.castor.mapping.xml.types.SqlDirtyType: java.util.Hashtable init()> -> _SINK_
<org.springframework.jdbc.support.lob.LobHandler: java.io.InputStream getBlobAsBinaryStream(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQuery: boolean getNavERecSearchRewriteQueryWithAnAlternativePhrasing()> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String getWhereCondition()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getSchemas()> -> _SINK_
<org.hibernate.hql.ast.tree.FromClause: void <init>()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Campaign: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.largeobject.BlobOutputStream: void write(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getOverrideSupportsIntegrityEnhancementFacility()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Builder: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsTransactionIsolationLevel(int)> -> _SINK_
<com.mysql.jdbc.StringUtils: boolean startsWithIgnoreCase(java.lang.String,java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.ENEQueryInfo getQueryInfo()> -> _SINK_
<org.hibernate.cfg.Settings: org.hibernate.exception.SQLExceptionConverter getSQLExceptionConverter()> -> _SINK_
<org.hibernate.persister.entity.EntityPersister: java.lang.Object[] getDatabaseSnapshot(java.io.Serializable,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: int[] executeBatchedInserts()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Select$Selection select()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$1ProxyStatement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: void removeFields()> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: void setPassword(java.lang.String)> -> _SINK_
<com.mysql.jdbc.log.StandardLogger: void logInfo(java.lang.Object,java.lang.Throwable)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: void testRetrieveServer()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Lead: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseDynamicCharsetInfo()> -> _SINK_
<org.hibernate.collection.PersistentArrayHolder: java.lang.Object readFrom(java.sql.ResultSet,org.hibernate.persister.collection.CollectionPersister,org.hibernate.loader.CollectionAliases,java.lang.Object)> -> _SINK_
<com.datastax.driver.core.Requests$QueryProtocolOptions: void encode(org.jboss.netty.buffer.ChannelBuffer)> -> _SINK_
<com.datastax.driver.core.Requests$QueryProtocolOptions: void <init>(com.datastax.driver.core.ConsistencyLevel,java.util.List,boolean,int,java.nio.ByteBuffer,com.datastax.driver.core.ConsistencyLevel)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateDate(int,java.sql.Date)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: com.ibatis.common.util.PaginatedList queryForPaginatedList(java.lang.String,java.lang.Object,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsCatalogsInDataManipulation()> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: void checkQuery(org.hibernate.engine.QueryParameters)> -> _SINK_
<org.apache.ibatis.mapping.SqlSource: org.apache.ibatis.mapping.BoundSql getBoundSql(java.lang.Object)> -> _SINK_
<com.datastax.driver.core.exceptions.UnauthorizedException: void <init>(java.lang.String,java.lang.Throwable)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: int getRow()> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setObject(java.lang.String,java.lang.Object)> -> _SINK_
<java.sql.ResultSet: double getDouble(java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$21: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getDriverMajorVersion()> -> _SINK_
<com.mysql.jdbc.Buffer: void setBufLength(int)> -> _SINK_
<com.ibatis.sqlmap.engine.transaction.TransactionConfig: void initialize(java.util.Properties)> -> _SINK_
<com.amazonaws.services.datapipeline.model.transform.QueryObjectsResultJsonUnmarshaller: com.amazonaws.services.datapipeline.model.QueryObjectsResult unmarshall(com.amazonaws.transform.JsonUnmarshallerContext)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setObject(int,java.lang.Object,int,int)> -> _SINK_
<org.exolab.castor.xml.handlers.SQLTimeFieldHandler: java.lang.Class getFieldType()> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: void beforeLast()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$SingleStringIterator: void <init>(com.mysql.jdbc.DatabaseMetaData,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.String getSocketFactory()> -> _SINK_
<org.mmbase.module.builders.PropertiesProbe: void doExpire()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNp(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: com.datastax.driver.core.querybuilder.Select$Where and(com.datastax.driver.core.querybuilder.Clause)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: int getBaseType()> -> _SINK_
<org.hibernate.mapping.PersistentClass: java.lang.String getCustomSQLInsert()> -> _SINK_
<org.postgresql.core.v2.ProtocolConnectionImpl: org.postgresql.core.Encoding getEncoding()> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: void testQuery_MaxSize_WithResults()> -> _SINK_
<org.springframework.jdbc.core.ResultSetSupportingSqlParameter: org.springframework.jdbc.core.RowCallbackHandler getRowCallbackHandler()> -> _SINK_
<java.sql.Statement: int executeUpdate(java.lang.String,int[])> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsRequest: java.lang.String getMarker()> -> _SINK_
<com.sforce.soap.enterprise.fault.InvalidSObjectFault: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.type.TimestampType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.springframework.jdbc.datasource.SingleConnectionDataSource: void prepareConnection(java.sql.Connection)> -> _SINK_
<com.sforce.soap.enterprise.sobject.TaskJunction__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.bridge.util.HugeNodeListIterator: void init(org.mmbase.bridge.Query)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLNonTransientException: void <init>(java.lang.String,java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getDontTrackOpenResources()> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator: void fromFragmentSeparator(antlr.collections.AST)> -> _SINK_
<com.amazonaws.services.simpledb.model.transform.InvalidQueryExpressionExceptionUnmarshaller: java.lang.Object unmarshall(java.lang.Object)> -> _SINK_
<gov.nih.nci.cananolab.service.curation.impl.CurationServiceJDBCImpl: java.util.List findDataPendingReview(gov.nih.nci.cananolab.service.security.SecurityService)> -> _SINK_
<org.postgresql.ssl.jdbc4.AbstractJdbc4MakeSSL: java.lang.Object instantiate(java.lang.String,java.util.Properties,boolean,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setTasks(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapClientBuilder: com.ibatis.sqlmap.client.SqlMapClient buildSqlMapClient(java.io.InputStream)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl within(double,double,double,double)> -> _SINK_
<com.endeca.navigation.analytics.ExprLookup: java.lang.String toWire()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.Query find(java.lang.String,java.lang.Class,java.lang.String,java.lang.Object,int,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setOpportunities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setDate(java.lang.String,java.sql.Date)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqllocate(java.util.List)> -> _SINK_
<org.hibernate.engine.query.QueryPlanCache: org.hibernate.engine.query.FilterQueryPlan getFilterQueryPlan(java.lang.String,java.lang.String,boolean,java.util.Map)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setFetchDirection(int)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Ref getRef(java.lang.String)> -> _SINK_
<org.postgresql.core.VisibleBufferedInputStream: boolean readMore(int)> -> _SINK_
<org.castor.jdo.conf.DatabaseChoice: org.castor.jdo.conf.DatabaseChoice unmarshal(java.io.Reader)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: void showString(java.lang.String,java.util.Calendar,java.util.Date,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: byte[] getBytes(java.lang.String)> -> _SINK_
<org.postgresql.core.QueryExecutor: void execute(org.postgresql.core.Query[],org.postgresql.core.ParameterList[],org.postgresql.core.ResultHandler,int,int,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean updatesAreDetected(int)> -> _SINK_
<org.hibernate.loader.OuterJoinLoader: java.lang.String getSQLString()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateDate(int,java.sql.Date)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<gov.nih.nci.cananolab.service.publication.helper.PublicationServiceHelper: java.util.Set findPublicationsBySampleComposition(java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[])> -> _SINK_
<org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator: java.lang.Object createLob(java.sql.PreparedStatement,boolean,org.springframework.jdbc.support.lob.OracleLobHandler$LobCallback)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Asset: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.BlobFromLocator: java.sql.PreparedStatement createGetBytesStatement()> -> _SINK_
<java.sql.ResultSetMetaData: java.lang.String getColumnLabel(int)> -> _SINK_
<com.mysql.jdbc.MysqlIO: boolean versionMeetsMinimum(int,int,int)> -> _SINK_
<org.postgresql.core.Field: void setAutoIncrement(boolean)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLInvalidAuthorizationSpecException: void <init>(java.lang.String,java.lang.String,int)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DateParamTagSupport: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setDate(java.lang.String,java.sql.Date,java.util.Calendar)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Object: gov.nih.nci.cagrid.cqlquery.Attribute getAttribute()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getDefaultTransactionIsolation()> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryConfigurer: org.mmbase.bridge.util.xml.query.FieldDefinition getFieldDefinition()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$1ProxyCallableStatement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<org.eclipse.acceleo.engine.service.AcceleoEvaluationTask: java.lang.Object evaluateQuery(org.eclipse.acceleo.engine.service.EvaluationContext)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setTime(int,java.sql.Time)> -> _SINK_
<org.mmbase.module.database.MultiPoolHandler: void setMaxLifeTime(long)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: org.hibernate.persister.entity.Queryable getEntityPersisterForName(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getTypeInfo()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsUnionAll()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setCacheServerConfiguration(boolean)> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator$SapDbType: java.lang.Object getValue(java.sql.Connection,java.lang.String)> -> _SINK_
<java.sql.ResultSetMetaData: int getColumnDisplaySize(int)> -> _SINK_
<com.mysql.jdbc.Connection: java.util.TimeZone getDefaultTimeZone()> -> _SINK_
<com.mysql.jdbc.Connection: boolean useAnsiQuotedIdentifiers()> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion ge(java.lang.Object,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<test.gov.nih.nci.logging.api.persistence.TestSpringLocationSessionFactoryBean: void main(java.lang.String[])> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String concretePropertySelectFragment(java.lang.String,boolean[])> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateDouble(java.lang.String,double)> -> _SINK_
<org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo: void setNonJtaDataSource(javax.sql.DataSource)> -> _SINK_
<com.mchange.v2.c3p0.impl.DefaultConnectionTester: int activeCheckConnection(java.sql.Connection)> -> _SINK_
<org.mmbase.storage.search.ResultBuilder: void <init>(org.mmbase.module.core.MMBase,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Date getDate(int,java.util.Calendar)> -> _SINK_
<org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler: java.lang.String handleToken(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment prependAll(java.lang.String,com.datastax.driver.core.querybuilder.BindMarker)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession$1: void <init>(org.apache.ibatis.session.defaults.DefaultSqlSession,java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Task__Feed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.ResultSet getResultSet()> -> _SINK_
<org.acegisecurity.acls.jdbc.JdbcAclService: org.acegisecurity.acls.objectidentity.ObjectIdentity[] findChildren(org.acegisecurity.acls.objectidentity.ObjectIdentity)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateShort(int,short)> -> _SINK_
<org.hibernate.hql.antlr.HqlBaseParser: void union()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsGroupBy()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setCacheCallableStmts(boolean)> -> _SINK_
<org.springframework.orm.jpa.vendor.OpenJpaDialect: void releaseJdbcConnection(org.springframework.jdbc.datasource.ConnectionHandle,javax.persistence.EntityManager)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.lang.Object getObjectImpl(int,java.util.Map)> -> _SINK_
<org.hibernate.criterion.Criterion: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: void checkForBindMarkers(com.datastax.driver.core.querybuilder.Utils$Appendeable)> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean isFirst()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Array getArray(int)> -> _SINK_
<org.apache.taglibs.standard.tag.rt.sql.QueryTag: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: int getResultSetConcurrency()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ParameterMetaData: java.lang.Object unwrap(java.lang.Class)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsGroupByUnrelated()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setLong(int,long)> -> _SINK_
<org.exolab.castor.jdo.drivers.SybaseQueryExpression: java.lang.String getStatement(boolean)> -> _SINK_
<org.springframework.orm.jpa.JpaTransactionManager: void doResume(java.lang.Object,java.lang.Object)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: boolean isAfterLast()> -> _SINK_
<org.mongodb.morphia.query.MorphiaIterator: boolean hasNext()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Array getArray(int)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: void delete(java.io.Serializable,java.lang.Object,java.lang.Object,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: int getPortNumber()> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.StepField addField(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: org.mmbase.core.CoreField getNumberField()> -> _SINK_
<org.springframework.jdbc.object.UpdatableSqlQuery: org.springframework.jdbc.core.RowMapper newRowMapper(java.lang.Object[],java.util.Map)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: int insert(java.lang.String)> -> _SINK_
<com.mysql.jdbc.util.ReadAheadInputStream: int read()> -> _SINK_
<org.mmbase.module.database.MultiPoolHandler: void <init>(org.mmbase.module.database.DatabaseSupport,int)> -> _SINK_
<com.amazonaws.auth.AbstractAWSSigner: java.lang.String getCanonicalizedQueryString(java.util.Map)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.collection.PersistentElementHolder: java.lang.Object readFrom(java.sql.ResultSet,org.hibernate.persister.collection.CollectionPersister,org.hibernate.loader.CollectionAliases,java.lang.Object)> -> _SINK_
<org.exolab.castor.persist.spi.PersistenceQuery: java.lang.Object fetch(org.castor.persist.ProposedEntity)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: void testToXML()> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: void setKeyConditions(java.util.Map)> -> _SINK_
<org.postgresql.util.UnixCrypt: void PERM_OP(int,int,int,int,int[])> -> _SINK_
<com.mongodb.QueryBuilder: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: boolean execute(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsFullOuterJoins()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.lang.Object getResultColumnOrRow(java.lang.Object[],org.hibernate.transform.ResultTransformer,java.sql.ResultSet,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.mmbase.bridge.util.TreeList: org.mmbase.bridge.NodeList getList(int)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.lang.Object getObject(int)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateNClob(int,java.io.Reader)> -> _SINK_
<org.mmbase.storage.search.implementation.database.HSqlSqlHandler: void appendDateField(java.lang.StringBuffer,org.mmbase.storage.search.Step,java.lang.String,boolean,int)> -> _SINK_
<org.mmbase.module.database.MultiPool: void <clinit>()> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getNavOpts()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: int executeUpdate()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: java.lang.Object buildArray(org.postgresql.jdbc2.AbstractJdbc2Array$PgArrayList,int,int)> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder: void ORDER_BY(java.lang.String)> -> _SINK_
<org.apache.ibatis.type.NStringTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<gov.nih.nci.cananolab.ui.sample.AdvancedSampleSearchAction: java.util.List querySamples(org.apache.struts.action.ActionForm,javax.servlet.http.HttpServletRequest)> -> _SINK_
<org.hibernate.hql.ast.tree.IdentNode: org.hibernate.type.Type getNakedPropertyType(org.hibernate.hql.ast.tree.FromElement)> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator$FunctionArguments: void <init>(org.hibernate.hql.ast.SqlGenerator)> -> _SINK_
<org.mmbase.bridge.util.Queries: org.mmbase.bridge.Query sortUniquely(org.mmbase.bridge.Query)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.List queryForList(java.lang.String,java.util.Map,java.lang.Class)> -> _SINK_
<org.mongodb.morphia.query.DefaultQueryFactory: void <init>()> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: java.lang.String continueFromManyToMany(java.lang.String,java.lang.String[],org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Ref getRef(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.net.URL getURL(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$28: void execute(java.sql.Connection)> -> _SINK_
<org.hibernate.sql.QuerySelect: void addOrderBy(java.lang.String)> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceUtils$ConnectionSynchronization: void suspend()> -> _SINK_
<org.mmbase.servlet.BridgeServlet: org.mmbase.bridge.Cloud getCloud(org.mmbase.servlet.BridgeServlet$QueryParts)> -> _SINK_
<org.hibernate.tool.hbm2ddl.DatabaseMetadata: void <init>(java.sql.Connection,org.hibernate.dialect.Dialect)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsOpenCursorsAcrossRollback()> -> _SINK_
<org.hibernate.hql.ast.SqlASTFactory: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: java.lang.String selectTriggerState(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseCursorFetch()> -> _SINK_
<org.mongodb.morphia.query.FieldEnd: java.lang.Object equal(java.lang.Object)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: boolean isWrapperFor(java.lang.Class)> -> _SINK_
<org.hibernate.cache.QueryCache: org.hibernate.cache.Cache getCache()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.Trigger retrieveTrigger(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addConstraint(org.mmbase.bridge.Query,org.mmbase.storage.search.Constraint,int)> -> _SINK_
<org.hibernate.type.CompositeCustomType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimestampLocaleConverter: void <init>(java.util.Locale,boolean)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.TextSqlNode$BindingTokenParser: void <init>(org.apache.ibatis.builder.xml.dynamic.DynamicContext)> -> _SINK_
<org.postgresql.geometric.PGline: void <init>(java.lang.String)> -> _SINK_
<org.hibernate.sql.QuerySelect: void setOrderByTokens(java.util.Iterator)> -> _SINK_
<org.exolab.castor.jdo.drivers.DB2QueryExpression: void <init>(org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<org.hibernate.Query: org.hibernate.Query setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: double getDouble(java.lang.String)> -> _SINK_
<org.apache.commons.beanutils.converters.SqlTimestampConverter: java.lang.Class getDefaultType()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsFullOuterJoins()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setInt(java.lang.String,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean nullPlusNonNullIsNull()> -> _SINK_
<com.mysql.jdbc.Connection: boolean supportsTransactions()> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: java.util.Map getEnabledFilters()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$MemorySizeConnectionProperty: void initializeFrom(java.lang.String)> -> _SINK_
<org.mmbase.cache.BetterStrategy: boolean checkPathMatches(org.mmbase.core.event.RelationEvent,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.hibernate.impl.CollectionFilterImpl: java.lang.Object[] valueArray()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: void setClientInfo(java.util.Properties)> -> _SINK_
<javax.servlet.jsp.jstl.sql.ResultSupport: javax.servlet.jsp.jstl.sql.Result toResult(java.sql.ResultSet)> -> _SINK_
<com.sforce.soap.enterprise.sobject.FeedItem: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: void <init>(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setDontTrackOpenResources(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: boolean isFirst()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteFiredTriggers(java.sql.Connection)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate$5: java.lang.Object doInCallableStatement(java.sql.CallableStatement)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String[] getIdentifierAliases(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.StringBuilder appendValue(java.lang.Object,java.lang.StringBuilder,java.util.List)> -> _SINK_
<org.postgresql.util.PGBinaryObject: void setByteValue(byte[],int)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$MainFrame: void processWindowEvent(java.awt.event.WindowEvent)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<org.springframework.orm.toplink.SessionFactoryUtils: org.springframework.dao.DataAccessException convertTopLinkAccessException(oracle.toplink.exceptions.TopLinkException)> -> _SINK_
<org.apache.axis.transport.jms.JMSURLHelper: void <init>(java.net.URL,java.lang.String[])> -> _SINK_
<org.apache.log4j.jdbc.JDBCAppender: void execute(java.lang.String)> -> _SINK_
<java.sql.DriverManager: void setLoginTimeout(int)> -> _SINK_
<com.amazonaws.services.cloudfront.model.ForwardedValues: boolean equals(java.lang.Object)> -> _SINK_
<org.hibernate.exception.SQLGrammarException: void <init>(java.lang.String,java.sql.SQLException,java.lang.String)> -> _SINK_
<org.hibernate.engine.PersistenceContext: java.lang.Object[] getCachedDatabaseSnapshot(org.hibernate.engine.EntityKey)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setCharacterStream(java.lang.String,java.io.Reader)> -> _SINK_
<org.mmbase.util.DBQuery: org.mmbase.storage.search.Constraint toConstraint(org.mmbase.storage.search.implementation.BasicSearchQuery)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setObject(int,java.lang.Object,int,int)> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper: com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList query(java.lang.Class,com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: int getResultSetConcurrency()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema: java.sql.ResultSet getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.enhype.db.PostgresDB: java.sql.Connection getConnection()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setTime(int,java.sql.Time)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.impl.jdbcjobstore.JobStoreSupport$RecoverMisfiredJobsResult doRecoverMisfires()> -> _SINK_
<org.hibernate.loader.custom.CustomLoader: java.util.Set getQuerySpaces()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateByte(int,byte)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.sql.Blob getBlob(int)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateTimestamp(int,java.sql.Timestamp)> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: void addOffsetClause(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Quote: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.postgresql.core.v3.Portal: byte[] getEncodedPortalName()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.module.database.MultiStatement: int getMaxFieldSize()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean updateMisfiredTrigger(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: int[] executeBatch()> -> _SINK_
<com.mysql.jdbc.Statement$CancelTask: com.mysql.jdbc.Statement access$000(com.mysql.jdbc.Statement$CancelTask)> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy: void dealWithInvocationException(java.lang.reflect.InvocationTargetException)> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression: java.lang.Object getHashKeyValues()> -> _SINK_
<org.hibernate.id.SequenceIdentityGenerator$Delegate: java.sql.PreparedStatement prepare(java.lang.String,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl containsIgnoreCase(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxTableNameLength()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: byte getByte(java.lang.String)> -> _SINK_
<org.postgresql.core.types.PGShort: org.postgresql.core.types.PGType castToServerType(java.lang.Short,int)> -> _SINK_
<com.mysql.jdbc.Connection: boolean isMasterConnection()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.math.BigDecimal getBigDecimal(int)> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfo: int getParameterCount()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLColumnInfo: java.lang.String getName()> -> _SINK_
<org.apache.ibatis.datasource.pooled.PooledDataSource: org.apache.ibatis.datasource.pooled.PooledConnection popConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.keygen.HighLowKeyGenerator: void <init>(org.exolab.castor.persist.spi.PersistenceFactory,java.util.Properties,int)> -> _SINK_
<com.sforce.soap.enterprise.QueryMore_element: void setQueryLocator(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Clob getClob(java.lang.String)> -> _SINK_
<org.exolab.castor.persist.spi.PersistenceQuery: int size()> -> _SINK_
<com.mysql.jdbc.ResultSet: long getNativeLong(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setFetchDirection(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean last()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Options: java.util.List access$000(com.datastax.driver.core.querybuilder.Delete$Options)> -> _SINK_
<com.mysql.jdbc.Connection: boolean useMaxRows()> -> _SINK_
<org.springframework.orm.jpa.JpaTemplate$9: java.lang.Object doInJpa(javax.persistence.EntityManager)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: void setFetchDirection(int)> -> _SINK_
<org.apache.ibatis.type.EnumTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlifnull(java.util.List)> -> _SINK_
<java.sql.SQLFeatureNotSupportedException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void addBatch(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: void setFunctionAndCriteria(gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean,org.hibernate.criterion.DetachedCriteria,java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.TrimSqlNode: org.apache.ibatis.session.Configuration access$000(org.apache.ibatis.builder.xml.dynamic.TrimSqlNode)> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: java.lang.String[] currentColumns()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: java.sql.NClob getNClob(int)> -> _SINK_
<org.springframework.jdbc.core.JdbcOperations: java.lang.Object query(java.lang.String,java.lang.Object[],int[],org.springframework.jdbc.core.ResultSetExtractor)> -> _SINK_
<org.postgresql.util.ByteConverter: int int4(byte[],int)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.lang.String getString(java.lang.String)> -> _SINK_
<com.datastax.driver.core.Requests$QueryProtocolOptions$Flag: void <init>(java.lang.String,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateObject(java.lang.String,java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Candidate__c: void setEvents(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DateParamTagSupport: void init()> -> _SINK_
<com.mysql.jdbc.Connection: boolean parserKnowsUnicode()> -> _SINK_
<org.mmbase.module.database.DatabaseSupport: void initConnection(java.sql.Connection)> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringEncoder: java.lang.String encodeComponent(java.lang.String,java.nio.charset.Charset)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: boolean rowInserted()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setNull(int,int)> -> _SINK_
<org.apache.ibatis.jdbc.SqlRunner: int update(java.lang.String,java.lang.Object[])> -> _SINK_
<org.hibernate.stat.StatisticsImplementor: void queryCacheMiss(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ResultSet: java.net.URL getURL(java.lang.String)> -> _SINK_
<com.datastax.driver.core.policies.LoadBalancingPolicy: java.util.Iterator newQueryPlan(java.lang.String,com.datastax.driver.core.Statement)> -> _SINK_
<gov.nih.nci.cagrid.data.client.DataServiceClient: gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getCapitalizeTypeNames()> -> _SINK_
<org.hibernate.tool.hbm2ddl.SchemaExport: void execute(boolean,boolean,boolean,boolean)> -> _SINK_
<org.hibernate.hql.QueryTranslator: org.hibernate.type.Type[] getReturnTypes()> -> _SINK_
<org.hibernate.hql.ast.util.SessionFactoryHelper: org.hibernate.dialect.function.SQLFunction requireSQLFunction(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Ref getNativeRef(int)> -> _SINK_
<org.hibernate.type.CurrencyType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<org.hibernate.lob.SerializableClob: java.io.Writer setCharacterStream(long)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContactFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.transform.AliasToBeanConstructorResultTransformer: java.lang.Object transformTuple(java.lang.Object[],java.lang.String[])> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: void afterPropertiesSet()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateTime(java.lang.String,java.sql.Time)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateNClob(java.lang.String,java.io.Reader,long)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setTimestamp(int,java.sql.Timestamp)> -> _SINK_
<org.postgresql.largeobject.LargeObjectManager: org.postgresql.largeobject.LargeObject open(long,boolean)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: void delete(java.io.Serializable,java.lang.Object,int,java.lang.Object,java.lang.String,org.hibernate.engine.SessionImplementor,java.lang.Object[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.NewsFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: boolean getMoreResults(int)> -> _SINK_
<org.postgresql.ds.common.PGObjectFactory: java.lang.Object loadSimpleDataSource(javax.naming.Reference)> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceTransactionManager: void doCommit(org.springframework.transaction.support.DefaultTransactionStatus)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsSavepoints()> -> _SINK_
<org.apache.ibatis.executor.resultset.NestedResultSetHandler: void createRowKeyForMap(java.sql.ResultSet,org.apache.ibatis.cache.CacheKey)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: void abort(java.util.concurrent.Executor)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DateParamTagSupport: void <init>()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxStatements()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: java.sql.ResultSet executeQuery()> -> _SINK_
<org.mmbase.storage.search.implementation.ModifiableQuery: java.lang.String toString()> -> _SINK_
<org.postgresql.xa.PGXAConnection$ConnectionHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<gov.nih.nci.system.web.HTTPQuery: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<org.mmbase.module.database.MultiConnection: java.lang.String getLastSQL()> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: void setPropertiesViaRef(javax.naming.Reference)> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.DynamoDBMapper: com.amazonaws.services.dynamodb.model.QueryRequest createQueryRequestFromExpression(java.lang.Class,com.amazonaws.services.dynamodb.datamodeling.DynamoDBQueryExpression,com.amazonaws.services.dynamodb.datamodeling.DynamoDBMapperConfig)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: int getNumberOfJobs(java.sql.Connection,org.quartz.core.SchedulingContext)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: int getStringType()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.SampleServiceHelper: gov.nih.nci.cananolab.domain.common.Organization findOrganizationByName(java.lang.String)> -> _SINK_
<org.hibernate.util.NamedGeneratedKeysHelper: java.sql.ResultSet getGeneratedKey(java.sql.PreparedStatement)> -> _SINK_
<gov.nih.nci.cagrid.data.cql.CQLQueryProcessor: java.util.Set getPropertiesFromEtc()> -> _SINK_
<org.castor.jdo.engine.DatabaseRegistry: org.castor.jdo.engine.AbstractConnectionFactory createFactory(org.castor.jdo.conf.JdoConf,int,org.exolab.castor.mapping.Mapping)> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfoJDBC3: void <init>(com.mysql.jdbc.CallableStatement,com.mysql.jdbc.CallableStatement$CallableStatementParamInfo)> -> _SINK_
<com.sforce.soap.enterprise.sobject.LeadFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: java.lang.String getQueryString()> -> _SINK_
<gov.nih.nci.cagrid.data.bdt.stubs.BdtQueryRequestCqlQuery: void <init>()> -> _SINK_
<gov.nih.nci.cagrid.data.QueryProcessingException: void <init>(java.lang.Exception)> -> _SINK_
<org.exolab.castor.dtx.DTXQuery: void bind(int,int)> -> _SINK_
<com.mysql.jdbc.Statement: void setQueryTimeout(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.AttributeRestoringConnectionInvocationHandler: void setTransactionIsolation(int)> -> _SINK_
<org.mongodb.morphia.query.MorphiaIterator: com.mongodb.DBObject getNext()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: int getResultSetType()> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapExecutor: com.ibatis.common.util.PaginatedList queryForPaginatedList(java.lang.String,java.lang.Object,int)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.CharacterizationQueryBean: java.lang.String getQueryAsColumnName()> -> _SINK_
<org.exolab.castor.persist.QueryResults: java.lang.Class getResultType()> -> _SINK_
<com.mysql.jdbc.NonRegisteringDriver: boolean acceptsURL(java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setERecs(com.endeca.navigation.ERecIdList)> -> _SINK_
<org.springframework.jdbc.support.lob.DefaultLobHandler$DefaultLobCreator: void setBlobAsBytes(java.sql.PreparedStatement,int,byte[])> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void setAliasName(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.tool.hbm2ddl.SchemaExport: void execute(boolean,boolean,java.io.Writer,java.sql.Statement,java.lang.String)> -> _SINK_
<org.postgresql.util.PSQLWarning: java.lang.String getMessage()> -> _SINK_
<com.sforce.soap.enterprise.sobject.QuoteFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getDimSearchRollupKey()> -> _SINK_
<org.hibernate.sql.SelectFragment: org.hibernate.sql.SelectFragment addColumns(java.lang.String,java.lang.String[],java.lang.String[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: org.postgresql.core.TypeInfo createTypeInfo(org.postgresql.core.BaseConnection,int)> -> _SINK_
<com.mysql.jdbc.CharsetMapping: boolean isMultibyteCharset(java.lang.String)> -> _SINK_
<org.exolab.castor.persist.spi.AbstractCallQuery: org.exolab.castor.persist.spi.Identity nextIdentity(org.exolab.castor.persist.spi.Identity)> -> _SINK_
<java.sql.Blob: int setBytes(long,byte[])> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setDate(int,java.sql.Date)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateNull(int)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.CQLQuery: boolean equals(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.Security: java.lang.String makeScrambledPassword(java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.bridge.NodeQuery createRelatedNodeListQuery(org.mmbase.bridge.NodeList,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.Driver$1: void <init>(org.postgresql.Driver)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode: boolean apply(org.apache.ibatis.builder.xml.dynamic.DynamicContext)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: void setUp()> -> _SINK_
<org.postgresql.core.Field: void <init>(java.lang.String,java.lang.String,int,int,int,int,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Options: com.datastax.driver.core.Statement setConsistencyLevel(com.datastax.driver.core.ConsistencyLevel)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setBinaryStream(java.lang.String,java.io.InputStream)> -> _SINK_
<org.hibernate.sql.Update: org.hibernate.sql.Update appendAssignmentFragment(java.lang.String)> -> _SINK_
<org.apache.axis.transport.http.AbstractQueryStringHandler: void configureResponseFromAxisFault(javax.servlet.http.HttpServletResponse,org.apache.axis.AxisFault)> -> _SINK_
<org.hibernate.loader.Loader: java.lang.Object instanceNotYetLoaded(java.sql.ResultSet,int,org.hibernate.persister.entity.Loadable,java.lang.String,org.hibernate.engine.EntityKey,org.hibernate.LockMode,org.hibernate.engine.EntityKey,java.lang.Object,java.util.List,org.hibernate.engine.SessionImplementor)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.DomainType: int hashCode()> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSource: void setLogWriter(java.io.PrintWriter)> -> _SINK_
<org.hibernate.persister.collection.OneToManyPersister: org.hibernate.loader.collection.CollectionInitializer createSubselectInitializer(org.hibernate.engine.SubselectFetch,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setDate(java.lang.String,java.sql.Date)> -> _SINK_
<org.postgresql.jdbc3.PSQLSavepoint: void <init>(int)> -> _SINK_
<java.sql.ResultSet: void updateDouble(int,double)> -> _SINK_
<com.mysql.jdbc.log.Log4JLogger: void logFatal(java.lang.Object)> -> _SINK_
<java.sql.ResultSet: double getDouble(int)> -> _SINK_
<java.sql.DatabaseMetaData: boolean ownDeletesAreVisible(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean dataDefinitionCausesTransactionCommit()> -> _SINK_
<org.mmbase.module.database.MultiConnection: java.sql.Statement createStatement(int,int,int)> -> _SINK_
<org.hibernate.id.IdentityGenerator$InsertSelectDelegate: org.hibernate.id.insert.IdentifierGeneratingInsert prepareIdentifierGeneratingInsert()> -> _SINK_
<com.endeca.navigation.ENEQuery: long getDimSearchResultsOffset()> -> _SINK_
<org.springframework.jdbc.object.MappingSqlQuery: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Time getTime(int,java.util.Calendar)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void collectionFunction(antlr.collections.AST)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: org.springframework.jdbc.support.rowset.SqlRowSet queryForRowSet(java.lang.String,java.lang.Object[],int[])> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setNull(int,int,java.lang.String)> -> _SINK_
<org.apache.ibatis.transaction.jdbc.JdbcTransaction: void close()> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: java.sql.Date toDate(java.util.Calendar,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void detach()> -> _SINK_
<org.apache.axis.transport.http.AbstractQueryStringHandler: void processAxisFault(org.apache.axis.AxisFault)> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.TransactionTag: int doStartTag()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.SampleServiceHelper: java.util.Set findOtherSamplesFromSamePrimaryOrganization(java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.GrowingTreeList: void <init>(org.mmbase.bridge.NodeQuery,int)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void processQuery(antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<org.hibernate.id.insert.AbstractReturningDelegate: java.io.Serializable performInsert(java.lang.String,org.hibernate.engine.SessionImplementor,org.hibernate.id.insert.Binder)> -> _SINK_
<org.postgresql.core.v2.ProtocolConnectionImpl: void setTransactionState(int)> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: int convertArrayToBaseOid(int)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: java.lang.Object get(java.lang.String,java.lang.Class,java.lang.Object)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: java.util.Iterator tail(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setDate(int,java.sql.Date,java.util.Calendar)> -> _SINK_
<org.hibernate.criterion.CriteriaQuery: java.lang.String getSQLAlias(org.hibernate.Criteria,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.postgresql.core.types.PGShort: void <init>(java.lang.Short)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: int executeUpdate(java.lang.String,int[])> -> _SINK_
<org.hibernate.dialect.RDMSOS2200Dialect: void <init>()> -> _SINK_
<org.mmbase.module.database.JDBC: java.lang.String makeUrl()> -> _SINK_
<org.springframework.jdbc.object.BatchSqlUpdate: void <init>()> -> _SINK_
<org.postgresql.core.v2.SimpleParameterList: void writeV2Value(int,java.io.Writer)> -> _SINK_
<org.exolab.castor.jdo.drivers.InformixFactory: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<org.springframework.orm.toplink.TopLinkJdbcException: void <init>(oracle.toplink.exceptions.DatabaseException)> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxStatements()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: java.lang.String getKeyspace()> -> _SINK_
<com.mysql.jdbc.Connection: com.mysql.jdbc.Connection duplicate()> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: int getOffset()> -> _SINK_
<com.sforce.soap.enterprise.sobject.EventFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor: java.sql.PreparedStatement getNativePreparedStatement(java.sql.PreparedStatement)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: void setBinaryTransfer(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: void setHoldability(int)> -> _SINK_
<org.hibernate.type.LocaleType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<org.castor.jdo.conf.Database: org.castor.jdo.conf.DatabaseChoice getDatabaseChoice()> -> _SINK_
<org.hibernate.tool.hbm2ddl.SchemaExport: void create(boolean,boolean,java.io.Writer,java.sql.Statement)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: void rollback(java.sql.Savepoint)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: java.lang.Class class$(java.lang.String)> -> _SINK_
<java.sql.SQLException: void <init>()> -> _SINK_
<org.hibernate.type.SerializableType: int sqlType()> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: org.mmbase.storage.search.implementation.BasicStepField addFieldUnlessPresent(org.mmbase.storage.search.Step,org.mmbase.core.CoreField)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.lang.String getString(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void <init>(com.mysql.jdbc.jdbc2.optional.ConnectionWrapper,com.mysql.jdbc.jdbc2.optional.MysqlPooledConnection,java.sql.CallableStatement)> -> _SINK_
<org.hibernate.sql.Update: org.hibernate.sql.Update addColumns(java.lang.String[],java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$ListSetIdxAssignment: void appendTo(java.lang.StringBuilder,java.util.List)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setRef(int,java.sql.Ref)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsMultipleOpenResults()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getSuperTables(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.impl.DataAvailabilityServiceJDBCImpl$DataAvailabilityMapper: java.lang.Object mapRow(java.sql.ResultSet,int)> -> _SINK_
<com.mysql.jdbc.Connection: boolean isRunningOnJDK13()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void removeOwnerForProtectionElement(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: void commit()> -> _SINK_
<com.mysql.jdbc.Field: java.lang.String getNameNoAliases()> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsResult: void setHasMoreResults(java.lang.Boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: long getLong(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.Junction getFunctionalizingEntityJunction(gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: java.lang.String getPassword()> -> _SINK_
<org.hibernate.hql.ast.ErrorCounter: void throwQueryException()> -> _SINK_
<com.datastax.driver.core.exceptions.WriteTimeoutException: void <init>(com.datastax.driver.core.ConsistencyLevel,com.datastax.driver.core.WriteType,int,int)> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSourceFactory: javax.sql.DataSource createSerializable(javax.sql.DataSource,int,int,int,int,int)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void sendFastpathCall(int,org.postgresql.core.v3.SimpleParameterList)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: boolean getAutoCommit()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement$BindValue: void <init>()> -> _SINK_
<org.springframework.jdbc.datasource.ConnectionHandle: java.sql.Connection getConnection()> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteriaPath: java.util.List getParameters()> -> _SINK_
<com.sun.jersey.api.client.WebResource: com.sun.jersey.api.client.WebResource queryParams(javax.ws.rs.core.MultivaluedMap)> -> _SINK_
<org.exolab.castor.jdo.oql.Parser: org.exolab.castor.jdo.oql.ParseTreeNode primaryExpr()> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.ApplicationServiceImpl: java.util.List query(gov.nih.nci.system.query.cql.CQLQuery)> -> _SINK_
<org.hibernate.sql.HSQLCaseFragment: void <init>()> -> _SINK_
<org.springframework.jdbc.support.incrementer.AbstractSequenceMaxValueIncrementer: long getNextKey()> -> _SINK_
<org.hibernate.dialect.PostgreSQLDialect$1: void <init>()> -> _SINK_
<org.hibernate.sql.Select: org.hibernate.sql.Select setGroupByClause(java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiPoolHandler: void <clinit>()> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationServiceFacade: gov.nih.nci.system.query.SDKQueryResult executeQuery(gov.nih.nci.system.query.SDKQuery)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getProcedureColumns(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.protocol.helper.ProtocolServiceHelper: int getNumberOfPublicProtocols()> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser$ParserContext: java.lang.String getCollectionSuffixByAlias(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.SimpleSemaphore: boolean obtainLock(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void close()> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: java.util.Iterator iterate(org.hibernate.engine.QueryParameters,org.hibernate.event.EventSource)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate$7: java.lang.Object readFromSession(oracle.toplink.sessions.Session)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: byte getByte(int)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: void sendFastpathCall(int,org.postgresql.core.v2.FastpathParameterList)> -> _SINK_
<org.mongodb.morphia.query.UpdateOperator: org.mongodb.morphia.query.UpdateOperator[] values()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.SQLWarning getWarnings()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateCharacterStream(int,java.io.Reader,long)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Lead: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.jdbc.Batcher: void abortBatch(java.sql.SQLException)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.Key save(com.mongodb.DBCollection,java.lang.Object,com.mongodb.WriteConcern)> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: void handleRefCursorOutputParameter(java.sql.CallableStatement,org.apache.ibatis.mapping.ParameterMapping,int,org.apache.ibatis.reflection.MetaObject)> -> _SINK_
<com.mysql.jdbc.RowData: java.lang.Object[] getAt(int)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void checkStreamability()> -> _SINK_
<org.hibernate.hql.ast.tree.QueryNode: org.hibernate.hql.ast.tree.OrderByClause locateOrderByClause()> -> _SINK_
<java.sql.CallableStatement: void setBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<gov.nih.nci.cananolab.system.applicationservice.CaNanoLabApplicationService: java.util.List directSQL(java.lang.String,java.lang.String[],java.lang.Object[])> -> _SINK_
<org.apache.taglibs.standard.tlv.JstlSqlTLV$Handler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)> -> _SINK_
<org.postgresql.util.PSQLState: void <clinit>()> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: void create(org.mmbase.module.core.MMObjectNode,org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl$OQLEnumeration: boolean hasMore(boolean)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.math.BigDecimal getBigDecimal(int,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Delete$Builder delete(java.lang.String[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.LeadFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void afterLast()> -> _SINK_
<org.hibernate.lob.SerializableBlob: int setBytes(long,byte[],int,int)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.Constraint getCleanConstraint()> -> _SINK_
<javax.sql.rowset.CachedRowSet: void populate(java.sql.ResultSet)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: boolean execute()> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(int)> -> _SINK_
<org.hibernate.loader.entity.CascadeEntityLoader: void <init>(org.hibernate.persister.entity.OuterJoinLoadable,org.hibernate.engine.CascadingAction,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4SQLXML: void ensureInitialized()> -> _SINK_
<org.hibernate.hql.ast.tree.OrderByClause: void <init>()> -> _SINK_
<org.hibernate.cfg.ResultSetMappingBinder: org.hibernate.engine.ResultSetMappingDefinition buildResultSetMappingDefinition(org.dom4j.Element,java.lang.String,org.hibernate.cfg.Mappings)> -> _SINK_
<test.gov.nih.nci.security.attributelevel.GenericSecurityInterceptorTest: void testAttributeLevelSecurityForUser_Create()> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: void commit(boolean)> -> _SINK_
<org.apache.commons.beanutils.converters.SqlTimeConverter: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.postgresql.Driver: java.util.Properties getDefaultProperties()> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: int getPrecision(int,int)> -> _SINK_
<org.exolab.castor.dtx.DTXQuery: void <init>()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.Query queryByExample(java.lang.Object)> -> _SINK_
<org.postgresql.largeobject.LargeObject: void write(byte[],int,int)> -> _SINK_
<com.mysql.jdbc.Connection: boolean isReadOnly()> -> _SINK_
<org.apache.ibatis.builder.'annotation'.MapperAnnotationBuilder: java.lang.Class getSqlProviderAnnotationType(java.lang.reflect.Method)> -> _SINK_
<org.exolab.castor.jdo.JDO: org.exolab.castor.jdo.Database getDatabase()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: int getPrepareThreshold()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: void setFetchDirection(int)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setObject(int,java.lang.Object,int)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: org.hibernate.impl.CriteriaImpl getRootCriteria()> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl: void createAclObjectIdentityIfRequired(org.acegisecurity.acl.basic.BasicAclEntry)> -> _SINK_
<com.mysql.jdbc.Statement: com.mysql.jdbc.ResultSet getResultSetInternal()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setIsInteractiveClient(boolean)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: int getPrecision(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getSystemFunctions()> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringDecoder: void <init>(java.lang.String,java.nio.charset.Charset,boolean)> -> _SINK_
<org.apache.commons.beanutils.ResultSetDynaClass: java.lang.Object getObjectFromResultSet(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void afterLast()> -> _SINK_
<org.postgresql.util.GT: java.lang.String tr(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.String getString(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: int getInt(int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateNCharacterStream(int,java.io.Reader,long)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: void testRetrieveServer()> -> _SINK_
<com.datastax.driver.core.exceptions.ReadTimeoutException: com.datastax.driver.core.exceptions.DriverException copy()> -> _SINK_
<org.mmbase.module.corebuilders.RelDef: org.mmbase.module.core.MMObjectNode getDefaultForBuilder(org.mmbase.module.corebuilders.InsRel)> -> _SINK_
<com.mchange.v2.c3p0.stmt.StatementCacheBenchmark: void perform(javax.sql.DataSource,java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXAException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setObject(java.lang.String,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setFloat(int,float)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool: int getNumBusyConnections()> -> _SINK_
<org.castor.jdo.engine.SQLTypeInfos: int javaType2sqlTypeNum(java.lang.Class)> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor: void <init>()> -> _SINK_
<org.postgresql.ssl.NonValidatingFactory: void <init>(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.database.ChainedSqlHandler: org.mmbase.storage.search.implementation.database.SqlHandler getSuccessor()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void addToProtectionGroups(java.lang.String,java.lang.String[])> -> _SINK_
<org.postgresql.util.ByteConverter: void int4(byte[],int,int)> -> _SINK_
<com.amazonaws.services.datapipeline.model.Query: java.util.List getSelectors()> -> _SINK_
<org.hibernate.hql.ast.tree.AbstractRestrictableStatement: antlr.collections.AST getWhereClause()> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.TransactionTagSupport: int doStartTag()> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl$OQLEnumeration: void <init>(org.exolab.castor.jdo.engine.OQLQueryImpl,org.exolab.castor.persist.QueryResults,java.util.Vector,org.exolab.castor.jdo.engine.JDOClassDescriptor)> -> _SINK_
<gov.nih.nci.cananolab.ui.sample.DWRSampleManager: gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean addSampleQuery(gov.nih.nci.cananolab.dto.particle.SampleQueryBean)> -> _SINK_
<gov.nih.nci.logging.api.appender.jdbc.SQLGenerator: java.lang.String getObjectAttributeSQLStatement(gov.nih.nci.logging.api.domain.ObjectAttribute)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.util.Map,java.lang.Class)> -> _SINK_
<org.hibernate.type.CustomType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,boolean[],org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: java.lang.Object fcall(java.lang.String,java.lang.Object[])> -> _SINK_
<org.springframework.jdbc.object.SqlUpdate: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: boolean getMoreResults()> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateRow()> -> _SINK_
<org.hibernate.sql.QuerySelect: void <init>(org.hibernate.dialect.Dialect)> -> _SINK_
<org.hibernate.persister.entity.Queryable: int getSubclassPropertyTableNumber(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Quote: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.CharsetMapping: java.lang.String getMysqlEncodingForJavaEncoding(java.lang.String,com.mysql.jdbc.Connection)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setERecSpec(java.lang.String)> -> _SINK_
<org.hibernate.cfg.Environment: void <clinit>()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsLikeEscapeClause()> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: org.mmbase.bridge.util.xml.query.QueryDefinition parseQuery(org.w3c.dom.Element,org.mmbase.bridge.Cloud,java.lang.String)> -> _SINK_
<org.hibernate.engine.SessionImplementor: org.hibernate.ScrollableResults scrollCustomQuery(org.hibernate.loader.custom.CustomQuery,org.hibernate.engine.QueryParameters)> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.Statement createStatement(int,int,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setURL(java.lang.String,java.net.URL)> -> _SINK_
<org.apache.ibatis.builder.xml.XMLStatementBuilder$SetHandler: void handleNode(org.apache.ibatis.parsing.XNode,java.util.List)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object notEqual(java.lang.Object)> -> _SINK_
<org.hibernate.tool.hbm2ddl.ColumnMetadata: void <init>(java.sql.ResultSet)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position_Tracker__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.endeca.navigation.StratifiedDimVal: com.endeca.navigation.StratifiedDimVal parse(java.lang.String)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNttNtk(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: org.hibernate.persister.entity.Queryable getEntityPersister(java.lang.String)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTransactionManager: void setDataSource(javax.sql.DataSource)> -> _SINK_
<org.hibernate.criterion.CriteriaQuery: org.hibernate.type.Type getTypeUsingProjection(org.hibernate.Criteria,java.lang.String)> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsResult: int hashCode()> -> _SINK_
<org.springframework.orm.ibatis.support.BlobSerializableTypeHandler: java.lang.Object getResultInternal(java.sql.ResultSet,int,org.springframework.jdbc.support.lob.LobHandler)> -> _SINK_
<com.mysql.jdbc.Buffer: void writeByte(byte)> -> _SINK_
<org.springframework.jdbc.support.lob.LobCreator: void setBlobAsBinaryStream(java.sql.PreparedStatement,int,java.io.InputStream,int)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DriverTag: java.lang.String getJdbcURL()> -> _SINK_
<org.hibernate.hql.QueryTranslator: boolean isManipulationStatement()> -> _SINK_
<com.mysql.jdbc.BlobFromLocator: void notEnoughInformationInQuery()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.sql.SQLWarning getWarnings()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxStatements()> -> _SINK_
<org.eclipse.acceleo.engine.internal.evaluation.QueryCache: void cacheResult(org.eclipse.acceleo.model.mtl.Query,java.util.List,java.lang.Object)> -> _SINK_
<org.mmbase.storage.search.implementation.ModifiableQuery: org.mmbase.storage.search.implementation.ModifiableQuery setOffset(int)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.engine.SessionImplementor getSession()> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryConfigurer: void <clinit>()> -> _SINK_
<org.hibernate.hql.ast.tree.IntoClause: boolean isSuperclassProperty(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.PreparedStatementCreatorFactory: void <init>(java.lang.String,int[])> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean deletesAreDetected(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: java.nio.ByteBuffer getRoutingKey()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: boolean rowDeleted()> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicQueryHandler: java.util.List readNodes(org.mmbase.storage.search.ResultBuilder,org.mmbase.storage.search.StepField[],java.sql.ResultSet,boolean,int)> -> _SINK_
<org.mmbase.servlet.HandleServlet: boolean setContent(org.mmbase.servlet.BridgeServlet$QueryParts,org.mmbase.bridge.Node,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSourceFactory: javax.sql.DataSource create(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ProcessInstance: void setWorkitems(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.core.v3.CopyInImpl: void writeToCopy(byte[],int,int)> -> _SINK_
<gov.nih.nci.system.dao.orm.ORMDAOImpl: gov.nih.nci.system.dao.Response query(gov.nih.nci.system.dao.Request,gov.nih.nci.system.query.hibernate.HQLCriteria)> -> _SINK_
<gov.nih.nci.cananolab.ui.publication.SearchPublicationAction: java.util.List queryPublications(org.apache.struts.action.ActionForm,javax.servlet.http.HttpServletRequest)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean othersDeletesAreVisible(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.Trigger[] selectTriggersForCalendar(java.sql.Connection,java.lang.String)> -> _SINK_
<org.hibernate.sql.SimpleSelect: org.hibernate.sql.SimpleSelect addCondition(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.profiler.ProfileEventSink: void <init>(com.mysql.jdbc.Connection)> -> _SINK_
<gov.nih.nci.security.authorization.domainobjects.ApplicationContext: java.lang.String getDatabaseDriver()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl$2: java.util.Set getNamedParameterNames()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4SQLXML: void setString(java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$47: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.postgresql.core.v2.FastpathParameterList: void setBytea(int,java.io.InputStream,int)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.XmlEtxIndicesReader: java.lang.Class class$(java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsOpenCursorsAcrossRollback()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreTX: java.sql.Connection getNonManagedTXConnection()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: byte[] getBytes(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.SQLStateSQLExceptionTranslator: void <init>()> -> _SINK_
<org.postgresql.util.PGbytea: byte[] toBytesHexEscaped(byte[])> -> _SINK_
<org.castor.jdo.engine.DatabaseRegistry: void loadDatabase(org.xml.sax.InputSource,org.xml.sax.EntityResolver,java.lang.ClassLoader)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl hasAllOf(java.lang.Iterable)> -> _SINK_
<com.sforce.soap.enterprise.QueryResponse_element: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.sql.Blob getBlob(java.lang.String)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void enableMultiQueries()> -> _SINK_
<org.hibernate.jmx.StatisticsService: long getQueryExecutionCount()> -> _SINK_
<org.hibernate.mapping.SimpleAuxiliaryDatabaseObject: java.lang.String sqlCreateString(org.hibernate.dialect.Dialect,org.hibernate.engine.Mapping,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: void processReturn(org.hibernate.engine.query.sql.NativeSQLQueryReturn)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Time__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeA(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Field: boolean isAutoIncrement()> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator$AbstractType: java.lang.Object getValue(java.lang.String,java.sql.Connection)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.io.Reader getCharacterStream(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Asset: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(int,int)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setArray(int,java.sql.Array)> -> _SINK_
<com.mysql.jdbc.ResultSet: void setFirstCharOfQuery(char)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl greaterThan(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.Buffer: int getCapacity()> -> _SINK_
<org.hibernate.hql.ast.tree.SqlNode: org.hibernate.type.Type getDataType()> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion propertyLeSome(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.postgresql.core.Query: java.lang.String toString(org.postgresql.core.ParameterList)> -> _SINK_
<org.exolab.castor.jdo.drivers.PostgreSQLCallQuery: java.lang.Object fetch(org.castor.persist.ProposedEntity)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setEmulateLocators(boolean)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Ref getRef(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setYearIsDateType(boolean)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: void before()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateAsciiStream(java.lang.String,java.io.InputStream,long)> -> _SINK_
<java.sql.Clob: int setString(long,java.lang.String)> -> _SINK_
<org.hibernate.cfg.SettingsFactory: int getDatabaseMajorVersion(java.sql.DatabaseMetaData)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Expense__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setObject(int,java.lang.Object,int,int)> -> _SINK_
<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.ResultSet readResultsForQueryOrUpdate(com.mysql.jdbc.Statement,int,int,int,boolean,java.lang.String,com.mysql.jdbc.Buffer,boolean,long,boolean,com.mysql.jdbc.Field[])> -> _SINK_
<com.mysql.jdbc.PreparedStatement: int executeUpdate(boolean,boolean)> -> _SINK_
<com.amazonaws.auth.AbstractAWSSigner: byte[] getBinaryRequestPayload(com.amazonaws.Request)> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void addCondition(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void setReadOnly(boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: boolean isFirst()> -> _SINK_
<org.postgresql.core.v2.FastpathParameterList: int getParameterCount()> -> _SINK_
<org.hibernate.lob.SerializableClob: java.sql.Clob getWrappedClob()> -> _SINK_
<com.datastax.driver.core.Requests$Execute: void <init>(com.datastax.driver.core.MD5Digest,com.datastax.driver.core.Requests$QueryProtocolOptions)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementCreate: org.exolab.castor.persist.spi.KeyGenerator getKeyGenerator(org.exolab.castor.jdo.engine.SQLEngine,org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsSubqueriesInComparisons()> -> _SINK_
<org.postgresql.core.VisibleBufferedInputStream: void moveBufferTo(byte[])> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: boolean requiresQuoting(int)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.sql.Savepoint setSavepoint()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.lang.String getString(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setFloat(int,float)> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: int getMaximumPrecision(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: com.datastax.driver.core.policies.RetryPolicy getRetryPolicy()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeDk(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.hibernate.sql.SimpleSelect: org.hibernate.sql.SimpleSelect addCondition(java.lang.String[],java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.'annotation'.MapperAnnotationBuilder: org.apache.ibatis.mapping.SqlCommandType getSqlCommandType(java.lang.reflect.Method)> -> _SINK_
<org.hibernate.loader.JoinWalker: void addAssociationToJoinTree(org.hibernate.type.AssociationType,java.lang.String[],java.lang.String,java.lang.String,int,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DBSemaphore: void setTablePrefix(java.lang.String)> -> _SINK_
<entities.dao.IDAO: java.util.List query(java.lang.String,int,int)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Clob getClob(java.lang.String)> -> _SINK_
<org.exolab.castor.xml.descriptors.SQLDateClassDescriptor: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.hibernate.hql.QueryTranslator: boolean containsCollectionFetches()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: java.sql.RowId getRowId(int)> -> _SINK_
<com.mysql.jdbc.Field: boolean isBinary()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.Field,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: java.lang.String extractValuesClause()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: void ensureIndex(java.lang.String,java.lang.Class,java.lang.String,java.lang.String,boolean,boolean)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateLong(java.lang.String,long)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsSubqueriesInQuantifieds()> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: void <init>()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Blob getBlob(java.lang.String)> -> _SINK_
<org.springframework.jdbc.object.RdbmsOperation: void validateNamedParameters(java.util.Map)> -> _SINK_
<org.postgresql.util.GT: java.lang.String tr(java.lang.String,java.lang.Object)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsSchemasInTableDefinitions()> -> _SINK_
<org.mmbase.module.database.MultiPool: void <init>(org.mmbase.module.database.DatabaseSupport,java.lang.String,java.lang.String,java.lang.String,int,int)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Blob getBlob(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.lang.String nativeSQL(java.lang.String)> -> _SINK_
<org.hibernate.type.NullableType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<gov.nih.nci.system.query.example.InsertExampleQuery: void <init>(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setDate(java.lang.String,java.sql.Date)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void beginFunctionTemplate(antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteTrigger(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.type.DbTimestampType: java.sql.Timestamp getCurrentTimestamp(org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode$PrefixedContext: void <init>(org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode,org.apache.ibatis.builder.xml.dynamic.DynamicContext,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void registerOutParameter(java.lang.String,int,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setAccountPartnersTo(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.sql.QuerySelect: void addSelectFragmentString(java.lang.String)> -> _SINK_
<org.postgresql.core.BaseConnection: boolean getStringVarcharFlag()> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: int getMaxNumber()> -> _SINK_
<java.sql.Connection: void setReadOnly(boolean)> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeQuery: void <clinit>()> -> _SINK_
<org.mmbase.cache.ConstraintsMatchingStrategy: boolean doEvaluate(org.mmbase.core.event.RelationEvent,org.mmbase.storage.search.SearchQuery,java.util.List)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.lang.String createNameForCollection(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean calendarIsReferenced(java.sql.Connection,java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.CQL2ParameterizedHQL: void processAttribute(gov.nih.nci.cagrid.cqlquery.Attribute,java.lang.StringBuilder,java.util.List,gov.nih.nci.cagrid.cqlquery.Object,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setObject(int,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.NonRegisteringDriver: int getMinorVersion()> -> _SINK_
<gov.nih.nci.cagrid.data.cql.CQLQueryProcessor: void initialize(java.util.Properties,java.io.InputStream)> -> _SINK_
<org.hibernate.criterion.SubqueryExpression: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.apache.ibatis.type.EnumTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.namedparam.SqlParameterSource: int getSqlType(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.common.LookupService: java.util.SortedSet findLookupValues(java.lang.String,java.lang.String)> -> _SINK_
<java.sql.ResultSet: void updateBytes(java.lang.String,byte[])> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: boolean prev()> -> _SINK_
<org.exolab.castor.jdo.drivers.OracleFactory: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<com.mysql.jdbc.MysqlIO: void changeUser(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.TypeInfo: int getDisplaySize(int,int)> -> _SINK_
<org.springframework.jdbc.object.SqlUpdate: void <init>(javax.sql.DataSource,java.lang.String,int[],int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Array getArray(int)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimeLocaleConverter: void <init>(java.lang.Object,java.util.Locale,java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.CriteriaContainerImpl: void remove(org.mongodb.morphia.query.Criteria)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setNull(int,int)> -> _SINK_
<org.hibernate.type.ClobType: void set(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setHoldResultsOpenOverStatementClose(boolean)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: void setTypeMap(java.util.Map)> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void addOuterJoin(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.DriverManagerDataSourceFactory: javax.sql.DataSource create(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.data.cql.CQLQueryProcessor: java.util.Properties getConfiguredParameters()> -> _SINK_
<com.mysql.jdbc.Security: byte[] passwordHashStage1(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getTableName(int)> -> _SINK_
<org.hibernate.id.insert.AbstractSelectingDelegate: void bindParameters(org.hibernate.engine.SessionImplementor,java.sql.PreparedStatement,java.lang.Object)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavAggrERecsOffset(long)> -> _SINK_
<com.mysql.jdbc.RowData: int size()> -> _SINK_
<java.sql.PreparedStatement: void setObject(int,java.lang.Object,int,int)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: int writeIdentifier(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.springframework.orm.hibernate3.SessionFactoryUtils: org.springframework.jdbc.support.SQLExceptionTranslator newJdbcExceptionTranslator(org.hibernate.SessionFactory)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setDate(int,java.sql.Date,java.util.Calendar)> -> _SINK_
<com.datastax.driver.core.querybuilder.Truncate: void <init>(com.datastax.driver.core.TableMetadata)> -> _SINK_
<com.mysql.jdbc.Field: void setUseOldNameMetadata(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsANSI92IntermediateSQL()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsSubqueriesInExists()> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setLong(java.lang.String,long)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectFiredTriggerRecords(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateString(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: int getResultSetType()> -> _SINK_
<org.mmbase.module.database.MultiPool: long getMaxLifeTime()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Site: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: int getPrecision(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setDate(int,java.sql.Date)> -> _SINK_
<org.hibernate.engine.query.QueryPlanCache: org.hibernate.engine.query.HQLQueryPlan getHQLQueryPlan(java.lang.String,boolean,java.util.Map)> -> _SINK_
<org.mmbase.module.database.DatabaseSupportInformix: void setLockMode(java.sql.Connection,int)> -> _SINK_
<org.mmbase.bridge.implementation.VirtualNodeManager: void <init>(org.mmbase.bridge.Query,org.mmbase.bridge.Cloud)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTransactionManager: org.springframework.jdbc.support.SQLExceptionTranslator getJdbcExceptionTranslator()> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: byte getEventType()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNf(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: java.sql.SQLException handleThrowable(java.lang.Throwable)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.SQLWarning getWarnings()> -> _SINK_
<org.springframework.jdbc.datasource.DriverManagerDataSource: java.sql.Connection getConnectionFromDriverManager(java.lang.String,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementCreate: org.exolab.castor.persist.spi.Identity generateKey(org.exolab.castor.jdo.Database,java.sql.Connection,java.sql.PreparedStatement)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$59: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.postgresql.core.Field: java.lang.String getTableName()> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContactFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: boolean isJoin(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: boolean execute(java.lang.String)> -> _SINK_
<org.hibernate.cfg.SettingsFactory: org.hibernate.hql.QueryTranslatorFactory createQueryTranslatorFactory(java.util.Properties)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Time getTime(java.lang.String)> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.QueryTag: void <init>()> -> _SINK_
<com.amazonaws.services.datapipeline.DataPipelineAsyncClient: java.util.concurrent.Future queryObjectsAsync(com.amazonaws.services.datapipeline.model.QueryObjectsRequest,com.amazonaws.handlers.AsyncHandler)> -> _SINK_
<com.mysql.jdbc.EscapeTokenizer: java.lang.String nextToken()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsCatalogsInIndexDefinitions()> -> _SINK_
<org.springframework.jdbc.support.lob.OracleLobHandler: java.io.Reader getClobAsCharacterStream(java.sql.ResultSet,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment removeAll(java.lang.String,com.datastax.driver.core.querybuilder.BindMarker)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getContinueBatchOnError()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeInt(java.lang.String,int,int,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setBoolean(int,boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.AccountFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.cananolab.ui.sample.DWRSampleManager: gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean deleteSampleQuery(gov.nih.nci.cananolab.dto.particle.SampleQueryBean)> -> _SINK_
<org.mmbase.bridge.util.HugeNodeListIterator: org.mmbase.bridge.Node nextNode()> -> _SINK_
<org.postgresql.core.ProtocolConnection: void setBinaryReceiveOids(java.util.Set)> -> _SINK_
<com.mysql.jdbc.MysqlIO: boolean inTransactionOnServer()> -> _SINK_
<org.hibernate.dialect.DB2Dialect: void <init>()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean relative(int)> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.DynamoDBMapper: com.amazonaws.services.dynamodb.datamodeling.PaginatedQueryList query(java.lang.Class,com.amazonaws.services.dynamodb.datamodeling.DynamoDBQueryExpression,com.amazonaws.services.dynamodb.datamodeling.DynamoDBMapperConfig)> -> _SINK_
<com.mysql.jdbc.Statement: int[] executeBatchUsingMultiQueries(boolean,int)> -> _SINK_
<org.hibernate.mapping.Table: java.util.Iterator sqlAlterStrings(org.hibernate.dialect.Dialect,org.hibernate.engine.Mapping,org.hibernate.tool.hbm2ddl.TableMetadata,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: int executeUpdate(java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: int getPort()> -> _SINK_
<org.apache.http.client.utils.URIBuilder: void digestURI(java.net.URI)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.io.InputStream getUnicodeStream(java.lang.String)> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsResult: void setMarker(java.lang.String)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String[] toColumns(java.lang.String,java.lang.String)> -> _SINK_
<org.eclipse.acceleo.model.mtl.Query: org.eclipse.ocl.ecore.OCLExpression getExpression()> -> _SINK_
<java.sql.SQLException: int getErrorCode()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.bridge.NodeQuery createRelatedNodeListQuery(org.mmbase.bridge.NodeList,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.fastpath.FastpathArg: void <init>(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: short getShort(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.PermissionSet: void setAssignments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setBlob(int,java.sql.Blob)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: double getDouble(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getCatalogSeparator()> -> _SINK_
<com.fasterxml.jackson.databind.ser.std.SqlDateSerializer: void <init>()> -> _SINK_
<org.springframework.orm.jpa.JpaTemplate: java.util.List findByNamedQuery(java.lang.String,java.lang.Object[])> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: java.lang.String toString()> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String[] selectJobListeners(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: int getNodeType(int)> -> _SINK_
<com.mysql.jdbc.StandardSocketFactory: void <clinit>()> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void addOuterJoin(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[])> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: org.postgresql.core.ResultHandler sendQueryPreamble(org.postgresql.core.ResultHandler,int)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: void <init>(org.mongodb.morphia.query.QueryImpl,java.lang.String,org.mongodb.morphia.query.CriteriaContainerImpl,boolean,boolean)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: int[] access$400(com.mysql.jdbc.DatabaseMetaData,java.lang.String)> -> _SINK_
<org.hibernate.dialect.MySQLMyISAMDialect: void <init>()> -> _SINK_
<org.apache.ibatis.jdbc.SqlRunner: java.util.List getResults(java.sql.ResultSet)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void out(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsMixedCaseIdentifiers()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: int getSQLStateType()> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.DateParamTag: int doStartTag()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getMaintainTimeStats()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Blob: void <init>(org.postgresql.core.BaseConnection,long)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator: org.springframework.dao.DataAccessException createCustomException(java.lang.String,java.lang.String,java.sql.SQLException,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.lang.String getString(java.lang.String)> -> _SINK_
<org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean: void setDataSource(javax.sql.DataSource)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void postInitialization()> -> _SINK_
<org.springframework.orm.jdo.JdoTransactionManager: void doResume(java.lang.Object,java.lang.Object)> -> _SINK_
<org.hibernate.util.JDBCExceptionReporter: void logAndClearWarnings(java.sql.Connection)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void removeGroupFromProtectionGroup(java.lang.String,java.lang.String)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.UpdateOperations createUpdateOperations(java.lang.Class)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: java.lang.Object getArrayImpl(java.util.Map)> -> _SINK_
<org.hibernate.sql.QuerySelect: void addSelectColumn(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.StringUtils: boolean startsWithIgnoreCaseAndWs(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Field: boolean isOpaqueBinary()> -> _SINK_
<com.mysql.jdbc.CachedResultSetMetaData: void <init>()> -> _SINK_
<org.hibernate.sql.QuerySelect: void setHavingTokens(java.util.Iterator)> -> _SINK_
<org.springframework.jdbc.support.lob.LobHandler: java.io.InputStream getClobAsAsciiStream(java.sql.ResultSet,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: boolean next()> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode: void applyItem(org.apache.ibatis.builder.xml.dynamic.DynamicContext,java.lang.Object,int)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setByte(int,byte)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: org.mongodb.morphia.query.FieldEnd criteria(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: java.lang.String getNString(java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: boolean rowInserted()> -> _SINK_
<com.gmail.spraetz.plugin.Engine: boolean startDatabase()> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLTransientException: void <init>()> -> _SINK_
<com.sforce.soap.enterprise.QueryMore_element: void <init>()> -> _SINK_
<org.mmbase.storage.implementation.database.GenericDataSource: java.sql.Connection getConnection()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: int getMaxCursorNameLength()> -> _SINK_
<java.sql.DatabaseMetaData: int getDefaultTransactionIsolation()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: java.util.List getAccessibleGroups(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.v3.ConnectionFactoryImpl: void <init>()> -> _SINK_
<org.hibernate.type.MetaType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.postgresql.geometric.PGlseg: void setValue(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.net.URL getURL(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setString(int,java.lang.String)> -> _SINK_
<org.postgresql.util.PGbytea: byte gethex(byte)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void close()> -> _SINK_
<gov.nih.nci.cagrid.data.enumeration.stubs.EnumerationQueryRequest: void <init>()> -> _SINK_
<org.postgresql.core.types.PGLong: org.postgresql.core.types.PGType castToServerType(java.lang.Long,int)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: void update(java.lang.String,java.lang.Object,int)> -> _SINK_
<org.mongodb.morphia.query.Shape: org.mongodb.morphia.query.Shape$Point[] copy(org.mongodb.morphia.query.Shape$Point[])> -> _SINK_
<com.endeca.navigation.AuthHttpENEConnection: com.endeca.navigation.ENEQueryResults query(com.endeca.navigation.ENEQuery)> -> _SINK_
<org.apache.ibatis.jdbc.RuntimeSqlException: void <init>(java.lang.String,java.lang.Throwable)> -> _SINK_
<org.postgresql.ds.jdbc4.AbstractJdbc4PooledConnection: java.util.logging.Logger getParentLogger()> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLSyntaxErrorException: void <init>(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: void realClose(boolean)> -> _SINK_
<org.apache.ibatis.type.SqlTimeTypeHandler: void <init>()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setInteger(int,int)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$69: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateArray(java.lang.String,java.sql.Array)> -> _SINK_
<org.postgresql.core.v2.SimpleParameterList: void setBytea(int,byte[],int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean storesUpperCaseQuotedIdentifiers()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void close()> -> _SINK_
<com.mysql.jdbc.TimeUtil: java.sql.Timestamp fastTimestampCreate(boolean,java.util.Calendar,java.util.Calendar,int,int,int,int,int,int,int)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElement: org.hibernate.persister.collection.QueryableCollection getQueryableCollection()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl startsWithIgnoreCase(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: boolean getAutoCommit()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: boolean getBoolean(java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.Queryable: java.lang.String identifierSelectFragment(java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.cache.ReleaseStrategy: java.util.List getSortordersForField(java.lang.String,org.mmbase.module.core.MMObjectBuilder,java.util.List,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: com.datastax.driver.core.policies.RetryPolicy getRetryPolicy()> -> _SINK_
<org.hibernate.hql.ast.tree.HqlSqlWalkerNode: antlr.ASTFactory getASTFactory()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean insertsAreDetected(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: int getResultSetConcurrency()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateNClob(int,java.io.Reader)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.lang.String getStringFunctions()> -> _SINK_
<org.postgresql.util.PSQLException: void <init>(java.lang.String,org.postgresql.util.PSQLState)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: void <init>(java.sql.ResultSet)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: javax.naming.Reference getReference()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.spi.TriggerFiredBundle triggerFired(java.sql.Connection,org.quartz.core.SchedulingContext,org.quartz.Trigger)> -> _SINK_
<com.endeca.navigation.ENEQuery: boolean containsNavQuery()> -> _SINK_
<java.sql.SQLClientInfoException: void <init>(java.lang.String,java.lang.String,java.util.Map)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setString(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: boolean execute(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: java.util.logging.Logger getParentLogger()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.CompositionServiceHelper: java.util.List findFilesByCompositionInfoId(java.lang.String,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$10: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setCollectionKey(java.io.Serializable)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageLookup: java.lang.String getResourcePath(java.sql.DatabaseMetaData)> -> _SINK_
<gov.nih.nci.cagrid.cqlresultset.CQLQueryResults: void setTargetClassname(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void <init>(org.postgresql.core.v3.ProtocolConnectionImpl,org.postgresql.core.PGStream,java.util.Properties,org.postgresql.core.Logger)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: boolean isCommitOrRollbackRequired(boolean)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeString(java.lang.String,java.lang.String,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNrtNrkNrrNrm(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Clob: java.io.OutputStream setAsciiStream(long)> -> _SINK_
<com.mysql.jdbc.MysqlIO: java.lang.String getPacketDumpToLog(com.mysql.jdbc.Buffer,int)> -> _SINK_
<org.hibernate.mapping.Column: int getSqlTypeCode(org.hibernate.engine.Mapping)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: void setFetchSize(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Solution: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: boolean isShallowQuery()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateObject(int,java.lang.Object,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void setFetchDirection(int)> -> _SINK_
<org.hibernate.collection.PersistentBag: java.lang.Object readFrom(java.sql.ResultSet,org.hibernate.persister.collection.CollectionPersister,org.hibernate.loader.CollectionAliases,java.lang.Object)> -> _SINK_
<org.hibernate.sql.InsertSelect: org.hibernate.sql.InsertSelect setSelect(org.hibernate.sql.Select)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.StringUtils: boolean startsWithIgnoreCase(java.lang.String,int,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxUserNameLength()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.TypeAttribute: java.lang.String getJavaTypeName()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setParameterList(java.lang.String,java.lang.Object[],org.hibernate.type.Type)> -> _SINK_
<org.hibernate.tool.hbm2ddl.ConnectionHelper: java.sql.Connection getConnection()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2Feed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateRowId(int,java.sql.RowId)> -> _SINK_
<org.springframework.jdbc.object.SqlFunction: int run(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Expense__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLFieldInfo: void <init>(org.exolab.castor.jdo.engine.JDOClassDescriptor,org.exolab.castor.mapping.FieldDescriptor,java.lang.String,boolean)> -> _SINK_
<org.hibernate.cfg.HbmBinder: void bindNamedQuery(org.dom4j.Element,java.lang.String,org.hibernate.cfg.Mappings)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$CallableBatchResultHandler: void handleError(java.sql.SQLException)> -> _SINK_
<org.mmbase.module.builders.DayMarkers: void createMarker()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Candidate__c: void setR00N30000002btlBEAQ__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateNCharacterStream(int,java.io.Reader)> -> _SINK_
<entities.dao.hibernate.DAOHibernateTransaction: java.util.List query(java.lang.String,int,int,java.lang.Object[])> -> _SINK_
<org.mmbase.storage.search.SearchQuery: boolean isAggregating()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void cancel()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Blob getBlob(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateLong(int,long)> -> _SINK_
<org.exolab.castor.jdo.drivers.SapDbQueryExpression: java.lang.String getStatement(boolean)> -> _SINK_
<org.hibernate.loader.Loader: void loadCollection(org.hibernate.engine.SessionImplementor,java.io.Serializable,org.hibernate.type.Type)> -> _SINK_
<com.mysql.jdbc.MysqlIO: long getThreadId()> -> _SINK_
<test.gov.nih.nci.security.attributelevel.GenericSecurityInterceptorTest: void testAttributeLevelSecurityForUser_ReadOnly()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseReadAheadInput()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<org.hibernate.criterion.Junction: org.hibernate.engine.TypedValue[] getTypedValues(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.hibernate.jdbc.BatchingBatcher: void doExecuteBatch(java.sql.PreparedStatement)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.FieldValueInConstraint createConstraint(org.mmbase.storage.search.StepField,java.util.SortedSet)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: java.sql.CallableStatement prepareCall(java.lang.String,int,int,int)> -> _SINK_
<org.acegisecurity.acls.jdbc.BasicLookupStrategy$1: void setValues(java.sql.PreparedStatement)> -> _SINK_
<com.mchange.v2.c3p0.util.CloseReportingConnectionWrapper: void close()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: int executeUpdate(java.lang.String,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2BlobClob: void truncate(long)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$ConnectionProperty: void validateStringValues(java.lang.String)> -> _SINK_
<com.mysql.jdbc.log.LogUtils: java.lang.String findCallingClassAndMethod(java.lang.Throwable)> -> _SINK_
<org.mongodb.morphia.query.AbstractQueryFactory: org.mongodb.morphia.query.Query createQuery(org.mongodb.morphia.Datastore,com.mongodb.DBCollection,java.lang.Class)> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder in(java.lang.Object)> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder: void LEFT_OUTER_JOIN(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsSchemasInDataManipulation()> -> _SINK_
<com.mysql.jdbc.Statement: void setMaxFieldSize(int)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.lang.String getIdentifierQuoteString()> -> _SINK_
<com.mchange.v2.sql.SqlUtils: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.RelationStep addRelationStep(org.mmbase.bridge.NodeManager)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: void rollback()> -> _SINK_
<com.mysql.jdbc.ResultSet: byte[] getBytes(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: java.lang.Object load(java.lang.Class,java.lang.Object,org.exolab.castor.mapping.AccessMode)> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper: int count(java.lang.Class,com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.sql.NClob getNClob(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.JdbcOperations: long queryForLong(java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.Queryable: java.lang.String getTemporaryIdTableDDL()> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientFactoryBean: void applyTransactionConfig(com.ibatis.sqlmap.client.SqlMapClient,com.ibatis.sqlmap.engine.transaction.TransactionConfig)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getTableTypes()> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void orderExprs(antlr.collections.AST)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.SetDataSourceTagSupport: int doStartTag()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void registerOutParameter(int,int,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUltraDevHack(boolean)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Attribute: boolean equals(java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.QueryResult: void setQueryLocator(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.CompositionServiceHelper: gov.nih.nci.cananolab.domain.particle.ComposingElement findComposingElementById(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.io.InputStream getBinaryStream(int)> -> _SINK_
<org.hibernate.impl.AbstractScrollableResults: java.sql.ResultSet getResultSet()> -> _SINK_
<com.sforce.soap.enterprise.sobject.AccountFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Milestone__Feed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.postgresql.core.PGStream: void changeSocket(java.net.Socket)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: void getImportKeyResults(java.lang.String,java.lang.String,java.lang.String,java.util.List)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean isReadOnly()> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$6: java.lang.Object getValue(java.lang.Object)> -> _SINK_
<entities.dao.IDAO: java.util.List query(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.drivers.InstantDBQueryExpression: java.lang.String getStatement(boolean)> -> _SINK_
<java.sql.CallableStatement: java.sql.Date getDate(int,java.util.Calendar)> -> _SINK_
<com.datastax.driver.core.exceptions.QueryTimeoutException: void <init>(java.lang.String,java.lang.Throwable,com.datastax.driver.core.ConsistencyLevel,int,int)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema: java.sql.ResultSet getProcedures(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.SimpleQueryExecutor: java.sql.ResultSet access$002(org.exolab.castor.jdo.engine.SimpleQueryExecutor,java.sql.ResultSet)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeAr(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.postgresql.core.BaseConnection: boolean isColumnSanitiserDisabled()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: java.util.List access$300(com.datastax.driver.core.querybuilder.Update$Conditions)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.endeca.navigation.analytics.LookupList: java.lang.String toWire()> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceUtils: void applyTimeout(java.sql.Statement,javax.sql.DataSource,int)> -> _SINK_
<org.hibernate.hql.ast.tree.SqlFragment: org.hibernate.hql.ast.tree.FromElement getFromElement()> -> _SINK_
<com.sun.jersey.api.client.ViewResource: com.sun.jersey.api.client.ViewResource queryParams(javax.ws.rs.core.MultivaluedMap)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseServerPrepStmts()> -> _SINK_
<org.springframework.jdbc.datasource.DelegatingDataSource: void setLoginTimeout(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.BlogForce_Blog__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsSchemasInTableDefinitions()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: int getQueryTimeout()> -> _SINK_
<org.hibernate.engine.QueryParameters: java.util.Map getLockModes()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsGroupByBeyondSelect()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List query(java.lang.String,org.springframework.jdbc.core.PreparedStatementSetter,org.springframework.jdbc.core.RowMapper)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: com.mongodb.WriteResult delete(java.lang.Class,java.lang.Object,com.mongodb.WriteConcern)> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeManager: org.mmbase.bridge.NodeList getList(org.mmbase.bridge.NodeQuery)> -> _SINK_
<org.apache.taglibs.standard.tlv.JstlSqlTLV$Handler: void endElement(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.sql.Select: void <init>(org.hibernate.dialect.Dialect)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Date getDate(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.QueryNode: org.hibernate.hql.ast.tree.SelectClause getSelectClause()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setConnectionCollation(java.lang.String)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23ConnectionPoolDataSource: java.lang.String getDescription()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void cancelRowUpdates()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void <init>(java.lang.String,com.mysql.jdbc.Field[],com.mysql.jdbc.RowData,com.mysql.jdbc.Connection,com.mysql.jdbc.Statement)> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setInt(java.lang.String,int)> -> _SINK_
<com.datastax.driver.core.Requests$Execute$2: int encodedSize(com.datastax.driver.core.Requests$Execute)> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.QueryImpl: java.lang.String toXML(java.util.Collection)> -> _SINK_
<org.postgresql.core.Encoding: java.lang.String name()> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: int getHoldability()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.util.List parseACLArray(java.lang.String)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: void rollback(java.sql.Savepoint)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Association: boolean equals(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getCachePreparedStatements()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.math.BigDecimal getBigDecimal(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: float getFloat(java.lang.String)> -> _SINK_
<oracle.toplink.essentials.internal.databaseaccess.Accessor: java.sql.Connection getConnection()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Ref getRef(int)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: boolean setNullValue(java.sql.PreparedStatement,int,java.lang.Object,org.mmbase.core.CoreField,int)> -> _SINK_
<javax.servlet.jsp.jstl.sql.SQLExecutionTag: void addSQLParameter(java.lang.Object)> -> _SINK_
<org.postgresql.util.PGtokenizer: java.lang.String removeBox(java.lang.String)> -> _SINK_
<org.hibernate.JDBCException: java.lang.String getSQL()> -> _SINK_
<org.hibernate.engine.QueryParameters: void <init>(org.hibernate.type.Type[],java.lang.Object[])> -> _SINK_
<com.mchange.v2.c3p0.JndiRefForwardingDataSource: void setLoginTimeout(int)> -> _SINK_
<org.springframework.jdbc.core.JdbcOperations: java.util.List queryForList(java.lang.String,java.lang.Object[])> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object mod(long,long)> -> _SINK_
<org.mmbase.bridge.implementation.BasicNode: int countRelatedNodes(org.mmbase.bridge.NodeManager,java.lang.String,java.lang.String)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNr(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.stmt.PerConnectionMaxOnlyStatementCache: void addStatementToDeathmarches(java.lang.Object,java.sql.Connection)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean storesLowerCaseQuotedIdentifiers()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsConvert(int,int)> -> _SINK_
<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.Buffer checkErrorPacket()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: int getFetchDirection()> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate: void applyNamedParameterToQuery(org.hibernate.Query,java.lang.String,java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void clearBatch()> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getNavRecordStructureExpr()> -> _SINK_
<org.apache.ibatis.datasource.unpooled.UnpooledDataSource$DriverProxy: int getMinorVersion()> -> _SINK_
<org.postgresql.copy.PGCopyInputStream: void cancelCopy()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: int getRow()> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(int)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.type.Type guessType(java.lang.Object)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.TransactionTagSupport: java.sql.Connection getSharedConnection()> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryResult: void setItems(java.util.Collection)> -> _SINK_
<org.apache.ibatis.migration.commands.BaseCommand: boolean changelogExists()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool$1: void testPooledConnection(java.lang.Object)> -> _SINK_
<com.datastax.driver.core.querybuilder.Using: void <init>(java.lang.String,com.datastax.driver.core.querybuilder.Using$1)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(java.lang.String,java.util.Map)> -> _SINK_
<com.mysql.jdbc.Field: java.lang.String toString()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setDate(java.lang.String,java.sql.Date,java.util.Calendar)> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceUtils: java.sql.Connection getConnection(javax.sql.DataSource)> -> _SINK_
<org.hibernate.sql.Insert: org.hibernate.sql.Insert addColumns(java.lang.String[])> -> _SINK_
<org.apache.ibatis.executor.statement.BaseStatementHandler: java.sql.Statement instantiateStatement(java.sql.Connection)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getTableTypes()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsSubqueriesInExists()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Timestamp getTimestampFromBytes(int,java.util.Calendar,byte[],java.util.TimeZone,boolean)> -> _SINK_
<java.sql.ResultSet: void updateObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<org.hibernate.stat.StatisticsImpl: void queryCacheHit(java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.SqlParameter: void <init>(int,java.lang.String)> -> _SINK_
<org.postgresql.core.v3.CompositeParameterList: java.lang.String toString(int)> -> _SINK_
<org.hibernate.impl.StatelessSessionImpl: org.hibernate.ScrollableResults scrollCustomQuery(org.hibernate.loader.custom.CustomQuery,org.hibernate.engine.QueryParameters)> -> _SINK_
<test.gov.nih.nci.security.threadsafe.CSMAPIMySQLDeadLockTest: void <init>(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<org.exolab.castor.mapping.xml.types.SqlDirtyType: void <clinit>()> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.WritableApplicationServiceImpl: java.lang.String getTargetClassName(gov.nih.nci.system.query.SDKQuery)> -> _SINK_
<org.castor.jdo.util.JDOUtils: org.exolab.castor.mapping.ClassDescriptor getClassDescriptor(java.lang.String,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.Connection: boolean getAutoCommit()> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.CompositionQueryBean: java.lang.String getQueryAsColumnName()> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateBoolean(int,boolean)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: com.mysql.jdbc.ResultSet executeInternal(int,com.mysql.jdbc.Buffer,boolean,boolean,boolean,com.mysql.jdbc.Field[],boolean)> -> _SINK_
<org.hibernate.loader.custom.CustomLoader: java.util.List list(org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler: java.lang.String extractPropertyName(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.Query: org.mongodb.morphia.query.FieldEnd field(java.lang.String)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor$ResultAliasContext: org.hibernate.persister.entity.SQLLoadable getEntityPersister(java.lang.String)> -> _SINK_
<gov.nih.nci.security.dao.Queries: java.sql.PreparedStatement getQueryForCheckPermissionForOnlyGroup(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.sql.Connection)> -> _SINK_
<org.hibernate.cfg.Settings: void setQueryTranslatorFactory(org.hibernate.hql.QueryTranslatorFactory)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$26: void execute(java.sql.Connection)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.sql.PreparedStatement prepareStatement(java.lang.String)> -> _SINK_
<org.postgresql.core.Parser: boolean isDollarQuoteStartChar(char)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.io.InputStream getBinaryStream(java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Attribute: int hashCode()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.sql.Array makeArray(int,java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.SingleTableEntityPersister: java.lang.String filterFragment(java.lang.String)> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: java.util.List handleResultSets(java.sql.Statement)> -> _SINK_
<org.hibernate.hql.ast.exec.AbstractStatementExecutor: void dropTemporaryTableIfNecessary(org.hibernate.persister.entity.Queryable,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.hibernate.impl.ScrollableResultsImpl: boolean isLast()> -> _SINK_
<java.sql.CallableStatement: void setBoolean(java.lang.String,boolean)> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.Statement getMetadataSafeStatement()> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: void start(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void change(org.mmbase.module.core.MMObjectNode)> -> _SINK_
<org.castor.jdo.conf.DatabaseChoice: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.log.Log4JLogger: void logInfo(java.lang.Object)> -> _SINK_
<org.hibernate.engine.JoinSequence: org.hibernate.sql.JoinFragment toJoinFragment(java.util.Map,boolean)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setDk(java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.bridge.RelationList findRelations(org.mmbase.bridge.Node,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: java.util.Set getGroups(java.lang.String)> -> _SINK_
<java.sql.ResultSetMetaData: int getPrecision(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: com.datastax.driver.core.Statement enableTracing()> -> _SINK_
<gov.nih.nci.cananolab.dto.BaseQueryBean: java.lang.String getOperand()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setTcpSndBuf(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void addBatch(java.lang.String)> -> _SINK_
<org.hibernate.criterion.PropertyProjection: java.lang.String toSqlString(org.hibernate.Criteria,int,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: void <init>(org.mmbase.bridge.Cloud)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateTriggerState(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void count(antlr.collections.AST)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl: java.lang.String getSQL()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLQuery: int size()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Options: java.lang.String toString()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getSQLStateType()> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTransactionManager: org.springframework.dao.DataAccessException convertJdbcAccessException(org.hibernate.JDBCException,org.springframework.jdbc.support.SQLExceptionTranslator)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List executeByNamedParam(java.util.Map)> -> _SINK_
<gov.nih.nci.cananolab.service.common.LookupService: java.util.Map findAllLookups()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Ordering asc(java.lang.String)> -> _SINK_
<org.postgresql.util.PGmoney: void <init>(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicQueryHandler: java.util.List readNodes(org.mmbase.module.core.ClusterBuilder,org.mmbase.storage.search.StepField[],java.sql.ResultSet,boolean,int,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean storesUpperCaseQuotedIdentifiers()> -> _SINK_
<com.mysql.jdbc.log.Log: void logDebug(java.lang.Object)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: java.lang.Integer getLimit()> -> _SINK_
<org.hibernate.lob.ClobImpl: java.io.Reader getCharacterStream()> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(int,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$BatchResultHandler: void handleCommandStatus(java.lang.String,int,long)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$4: void <init>(org.exolab.castor.gui.QueryAnalyser$MainFrame)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: boolean execute(java.lang.String,java.lang.String[])> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getSlowQueryThresholdMillis()> -> _SINK_
<org.hibernate.loader.criteria.CriteriaJoinWalker: java.lang.String generateTableAlias(int,java.lang.String,org.hibernate.persister.entity.Joinable)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setBinaryStream(int,java.io.InputStream)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection: void fireConnectionFatalError(java.sql.SQLException)> -> _SINK_
<org.postgresql.util.PGInterval: void setSeconds(double)> -> _SINK_
<com.amazonaws.auth.QueryStringSigner: void sign(com.amazonaws.Request,com.amazonaws.auth.SignatureVersion,com.amazonaws.auth.SigningAlgorithm,com.amazonaws.auth.AWSCredentials)> -> _SINK_
<org.hibernate.hql.ast.tree.SqlFragment: void setFromElement(org.hibernate.hql.ast.tree.FromElement)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$87: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.context.JTASessionContext: org.hibernate.classic.Session currentSession()> -> _SINK_
<org.hibernate.hql.ast.tree.SelectClause: void renderNonScalarSelects(org.hibernate.hql.ast.tree.SelectExpression[],org.hibernate.hql.ast.tree.FromClause)> -> _SINK_
<org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource: void afterPropertiesSet()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment incr(java.lang.String)> -> _SINK_
<org.postgresql.geometric.PGline: void setValue(java.lang.String)> -> _SINK_
<com.datastax.driver.core.Requests$QueryProtocolOptions$Flag: com.datastax.driver.core.Requests$QueryProtocolOptions$Flag[] values()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setTime(java.lang.String,java.sql.Time,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: boolean getAutoCommit()> -> _SINK_
<org.postgresql.ds.jdbc4.AbstractJdbc4PoolingDataSource: java.util.logging.Logger getParentLogger()> -> _SINK_
<org.exolab.castor.jdo.JDOManager: org.exolab.castor.jdo.Database getDatabase()> -> _SINK_
<org.hibernate.cache.QueryCache: void destroy()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.Map queryForMap(java.lang.String,java.lang.Object[])> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$1WrapperStatementHelper: java.sql.ResultSet wrap(java.sql.ResultSet)> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: void <clinit>()> -> _SINK_
<java.sql.ResultSet: void updateBytes(int,byte[])> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache: void synchronousDestroyStatement(java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.fault.ApiQueryFault: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: void access$600(com.mysql.jdbc.DatabaseMetaData,java.lang.String,java.lang.String,java.lang.String,java.util.List)> -> _SINK_
<com.mysql.jdbc.ResultSet: void checkRowPos()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.lang.String getString(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Field: boolean isPrimaryKey()> -> _SINK_
<org.exolab.castor.mapping.xml.types.SqlDirtyType: org.exolab.castor.mapping.xml.types.SqlDirtyType valueOf(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.keygen.SequenceKeyGenerator: void supportsSqlType(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: java.sql.ResultSet getResultSetImpl(long,int,java.util.Map)> -> _SINK_
<java.sql.ResultSet: float getFloat(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.PricebookEntry: void setOpportunityLineItems(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: boolean getBoolean(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void checkIndex(int,boolean)> -> _SINK_
<com.mysql.jdbc.Buffer: void <init>(int)> -> _SINK_
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor: java.sql.CallableStatement getNativeCallableStatement(java.sql.CallableStatement)> -> _SINK_
<org.apache.commons.beanutils.ConvertUtilsBean: void registerArrays(boolean,int)> -> _SINK_
<org.exolab.castor.persist.spi.AbstractCallQuery: void execute(java.lang.Object,org.exolab.castor.mapping.AccessMode,boolean)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object endsWithIgnoreCase(java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ParameterMetaData: void checkParamIndex(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsANSI92EntryLevelSQL()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: void rollback(java.sql.Savepoint)> -> _SINK_
<com.sforce.soap.enterprise.fault.InvalidSObjectFault: void writeFields(com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mongodb.DBApiLayer$MyCollection: java.util.Iterator __find(com.mongodb.DBObject,com.mongodb.DBObject,int,int,int,int,com.mongodb.ReadPreference,com.mongodb.DBDecoder,com.mongodb.DBEncoder)> -> _SINK_
<org.mongodb.morphia.query.MorphiaIterator: java.lang.Object processItem(com.mongodb.DBObject)> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfo: int getScale(int)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateClob(int,java.io.Reader)> -> _SINK_
<org.postgresql.core.VisibleBufferedInputStream: void <init>(java.io.InputStream,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.util.Map getTypeMap()> -> _SINK_
<org.mmbase.bridge.util.Queries: java.util.List addSortOrders(org.mmbase.bridge.Query,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.Encoding: void <init>(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.lang.Object getXMLValue(java.sql.ResultSet,int,org.mmbase.core.CoreField,boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setArray(int,java.sql.Array)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getUDTs(java.lang.String,java.lang.String,java.lang.String,int[])> -> _SINK_
<org.postgresql.core.ProtocolConnection: int getTransactionState()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean isJobStateful(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.criterion.IdentifierProjection: java.lang.String toSqlString(org.hibernate.Criteria,int,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: int getLastChar()> -> _SINK_
<com.mysql.jdbc.Connection: int getTransactionIsolation()> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList: void <init>(com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper,java.lang.Class,com.amazonaws.services.dynamodbv2.AmazonDynamoDB,com.amazonaws.services.dynamodbv2.model.QueryRequest,com.amazonaws.services.dynamodbv2.model.QueryResult,com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig$PaginationLoadingStrategy,com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig)> -> _SINK_
<org.mongodb.morphia.mapping.Mapper: boolean canQueryPast(org.mongodb.morphia.mapping.MappedField)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void resolveSelectExpression(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: byte[] getBytesRepresentation(int)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void prepareFromClauseInputTree(antlr.collections.AST)> -> _SINK_
<org.hibernate.mapping.ForeignKey: java.lang.String sqlDropString(org.hibernate.dialect.Dialect,java.lang.String,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Selection: void <init>()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: java.lang.Object unwrap(java.lang.Class)> -> _SINK_
<org.hibernate.hql.ast.tree.DotNode: void checkForCorrelatedSubquery(java.lang.String)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: void <init>(org.apache.ibatis.session.Configuration,org.apache.ibatis.executor.Executor,boolean)> -> _SINK_
<org.postgresql.core.v2.SimpleParameterList: void checkAllParametersSet()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters: java.text.DecimalFormat access$300()> -> _SINK_
<com.sun.jersey.api.uri.UriComponent: java.lang.String decodeQueryParam(java.lang.String,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: int getMaxFieldSize()> -> _SINK_
<org.hibernate.hql.ast.tree.FromClause: org.hibernate.hql.ast.tree.FromElement getFromElement(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$StringConnectionProperty: void initializeFrom(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: int firstNonDigit(char[],int)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimestampLocaleConverter: void <init>(java.util.Locale,java.lang.String,boolean)> -> _SINK_
<com.mysql.jdbc.util.BaseBugReport: void run()> -> _SINK_
<org.hibernate.persister.entity.NamedQueryLoader: void <clinit>()> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.NestedCriteria2HQL: void <init>(gov.nih.nci.system.query.nestedcriteria.NestedCriteria,org.hibernate.cfg.Configuration,boolean)> -> _SINK_
<org.castor.jdo.engine.DatabaseRegistry: boolean isDatabaseRegistred(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsAlterTableWithDropColumn()> -> _SINK_
<com.mchange.v1.db.sql.ResultSetUtils: void <clinit>()> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: void setServerName(java.lang.String)> -> _SINK_
<org.postgresql.largeobject.BlobOutputStream: void checkClosed()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.RoleNameResolver: java.lang.String generateRoleNameKey(java.lang.String,gov.nih.nci.cagrid.cqlquery.Association)> -> _SINK_
<org.castor.jdo.engine.DatabaseRegistry: void loadDatabase(java.lang.String,java.lang.String,javax.sql.DataSource,org.exolab.castor.mapping.Mapping,javax.transaction.TransactionManager)> -> _SINK_
<com.mysql.jdbc.log.CommonsLogger: void logWarn(java.lang.Object,java.lang.Throwable)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setReportMetricsIntervalMillis(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseSqlStateCodes(boolean)> -> _SINK_
<org.hibernate.JDBCException: java.sql.SQLException getSQLException()> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.CharacterizationQueryBean: void setDatumValueUnit(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator: void commaBetweenParameters(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.Query: org.mongodb.morphia.query.Query limit(int)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: java.util.List getSortOrders()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void clearWarnings()> -> _SINK_
<org.hibernate.Session: java.sql.Connection disconnect()> -> _SINK_
<org.mmbase.bridge.util.HugeNodeListIterator: void executePreviousQuery(org.mmbase.bridge.Query)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setText(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void addrExprLhs(antlr.collections.AST)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavERecSearchRewriteQueryWithAnAlternativePhrasing(boolean)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseFastDateParsing()> -> _SINK_
<oracle.toplink.exceptions.DatabaseException: java.lang.String getMessage()> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: boolean addWhereClause(java.lang.StringBuffer,boolean)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseLocalSessionState()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: boolean isWritable(int)> -> _SINK_
<java.sql.ResultSet: boolean isAfterLast()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.QueryModifier: boolean equals(java.lang.Object)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: java.util.logging.Logger getParentLogger()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void close()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3DatabaseMetaData: java.sql.ResultSet getSuperTables(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: void access$700(com.mysql.jdbc.DatabaseMetaData,boolean,java.lang.String,java.sql.ResultSet,boolean,java.lang.String,java.util.Map,int)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.io.Reader getCharacterStream(java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: boolean storesLowerCaseIdentifiers()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int insertPausedTriggerGroup(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setURL(java.lang.String,java.net.URL)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: double getDouble(int)> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getCatalogSeparator()> -> _SINK_
<org.postgresql.util.HStoreConverter: int appendUntilQuote(java.lang.StringBuffer,java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean rowUpdated()> -> _SINK_
<com.sforce.soap.enterprise.fault.InvalidQueryLocatorFault: void writeFields(com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: int hashCode()> -> _SINK_
<org.postgresql.util.HStoreConverter: void appendEscaped(java.lang.StringBuffer,java.lang.Object)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: int getMaxColumnsInIndex()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.String exposeAsXml()> -> _SINK_
<gov.nih.nci.cananolab.service.admin.impl.AdminServiceJDBCImpl$VisiterCountMapper: java.lang.Object mapRow(java.sql.ResultSet,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBytes(java.sql.PreparedStatement,int,java.io.ByteArrayOutputStream)> -> _SINK_
<com.datastax.driver.core.exceptions.UnavailableException: void <init>(com.datastax.driver.core.ConsistencyLevel,int,int)> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder and(java.lang.String)> -> _SINK_
<org.springframework.orm.jpa.JpaTransactionManager: void setDataSource(javax.sql.DataSource)> -> _SINK_
<oracle.toplink.sessions.Session: java.lang.Object executeQuery(oracle.toplink.queryframework.DatabaseQuery)> -> _SINK_
<org.springframework.orm.ibatis.support.SqlMapClientDaoSupport: void setSqlMapClient(com.ibatis.sqlmap.client.SqlMapClient)> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getAttributes(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.sql.Connection: void clearWarnings()> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSource: int getLoginTimeout()> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder: void FROM(java.lang.String)> -> _SINK_
<org.eclipse.acceleo.engine.internal.evaluation.AcceleoEvaluationVisitor: java.lang.Object visitAcceleoQueryInvocation(org.eclipse.acceleo.model.mtl.QueryInvocation)> -> _SINK_
<com.datastax.driver.core.querybuilder.BindMarker: void <clinit>()> -> _SINK_
<org.castor.jdo.engine.AbstractConnectionFactory: void initialize()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateShort(java.lang.String,short)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Time getTime(int)> -> _SINK_
<org.hibernate.dialect.InformixDialect: void <init>()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl hasThisElement(java.lang.Object)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void addJoin(java.lang.String,org.hibernate.engine.JoinSequence)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean jobExists(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.castor.persist.GlobalTransactionContext: void rollbackConnections()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2Feed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.amazonaws.services.dynamodb.AmazonDynamoDBAsyncClient$4: com.amazonaws.services.dynamodb.model.QueryResult call()> -> _SINK_
<org.springframework.jdbc.support.incrementer.MySQLMaxValueIncrementer: int getCacheSize()> -> _SINK_
<com.mysql.jdbc.ResultSet: int getNativeInt(int,boolean)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: boolean exists(org.mmbase.storage.util.Index)> -> _SINK_
<org.exolab.castor.jdo.drivers.PostgreSQLCallQuery: org.exolab.castor.persist.spi.Identity nextIdentity(org.exolab.castor.persist.spi.Identity)> -> _SINK_
<org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor: java.sql.PreparedStatement getNativePreparedStatement(java.sql.PreparedStatement)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Job_Application__c: void setHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.sql.CallableStatement prepareCall(java.lang.String,int,int)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: void setPassword(java.lang.String)> -> _SINK_
<com.endeca.navigation.analytics.QueryNode: java.lang.String toWire()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean removeJob(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String,java.lang.String,boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setTeamTemplateRecords(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.datastax.driver.core.Configuration: void register(com.datastax.driver.core.Cluster$Manager)> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: int[] getStatementTypes()> -> _SINK_
<org.postgresql.core.v2.ConnectionFactoryImpl: void sendStartupPacket(org.postgresql.core.PGStream,java.lang.String,java.lang.String,org.postgresql.core.Logger)> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: int getFetchDirection()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getDriverVersion()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsLimitedOuterJoins()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: int getNetworkTimeout()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void refreshInstanceTables(boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Project__Feed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.sql.Alias: void <init>(int,java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodb.model.transform.QueryResultJsonUnmarshaller: com.amazonaws.services.dynamodb.model.transform.QueryResultJsonUnmarshaller getInstance()> -> _SINK_
<org.hibernate.hql.ast.ASTQueryTranslatorFactory: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: java.nio.ByteBuffer compose(java.nio.ByteBuffer[])> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.Junction getSampleNameJunction(gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodes: void <init>()> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getNavRollupKey()> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfo: int getParameterMode(int)> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder notEquals(java.lang.Object)> -> _SINK_
<org.mmbase.module.builders.MMEvents: void probeCall()> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl: void bind(long)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.bridge.Query aggregatingClone()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void addUsersToGroup(java.lang.String,java.lang.String[])> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper: com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList query(java.lang.Class,com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression,com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Where: com.datastax.driver.core.querybuilder.Delete$Options using(com.datastax.driver.core.querybuilder.Using)> -> _SINK_
<com.mysql.jdbc.log.Jdk14Logger: void logInternal(java.util.logging.Level,java.lang.Object,java.lang.Throwable)> -> _SINK_
<org.hibernate.dialect.H2Dialect: void <init>()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setDate(int,java.sql.Date)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean storesMixedCaseIdentifiers()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.lang.String getString(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void statement(antlr.collections.AST)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectSchedulerStateRecords(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsOrderByUnrelated()> -> _SINK_
<java.sql.DatabaseMetaData: boolean isCatalogAtStart()> -> _SINK_
<org.postgresql.copy.PGCopyInputStream: int getFieldFormat(int)> -> _SINK_
<java.sql.CallableStatement: void setURL(java.lang.String,java.net.URL)> -> _SINK_
<com.sun.jersey.api.uri.UriBuilderImpl: javax.ws.rs.core.UriBuilder uri(java.net.URI)> -> _SINK_
<org.hibernate.hql.classic.SelectParser: org.hibernate.dialect.function.SQLFunction getFunction(java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.hibernate.engine.NamedQueryDefinition: java.lang.String getCacheRegion()> -> _SINK_
<org.hibernate.hql.ast.tree.FromElement: void <init>()> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: org.exolab.castor.mapping.xml.types.SqlDirtyType getDirty()> -> _SINK_
<gov.nih.nci.system.query.cql.CQLPredicate: java.lang.String toString()> -> _SINK_
<com.sforce.soap.enterprise.fault.ApiQueryFault: void writeFields(com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSource: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.collection.PersistentIdentifierBag: java.lang.Object readFrom(java.sql.ResultSet,org.hibernate.persister.collection.CollectionPersister,org.hibernate.loader.CollectionAliases,java.lang.Object)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: boolean isTracing()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateBlob(int,java.io.InputStream)> -> _SINK_
<org.springframework.jdbc.object.UpdatableSqlQuery: void <init>(javax.sql.DataSource,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void compile(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.fasterxml.jackson.databind.ser.std.SqlDateSerializer: void serialize(java.sql.Date,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsDifferentTableCorrelationNames()> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: void setAlias(org.mmbase.storage.search.Step,java.lang.String)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.Query createQuery(java.lang.String,java.lang.Class)> -> _SINK_
<org.hibernate.hql.ast.tree.BinaryArithmeticOperatorNode: org.hibernate.type.Type resolveDataType()> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.List queryForList(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,java.lang.Class)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: int getResultSetHoldability()> -> _SINK_
<org.springframework.orm.toplink.LocalSessionFactoryBean: org.springframework.jdbc.support.SQLExceptionTranslator getJdbcExceptionTranslator()> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: antlr.collections.AST generateVersionPropertyNode(org.hibernate.persister.entity.Queryable)> -> _SINK_
<java.sql.ResultSet: java.lang.Object getObject(java.lang.String,java.util.Map)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<com.mchange.v1.db.sql.ConnectionUtils: boolean attemptClose(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.Statement: void cancel()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateBoolean(int,boolean)> -> _SINK_
<org.castor.jdo.engine.AbstractConnectionFactory: void <init>(org.castor.jdo.conf.JdoConf,int,org.exolab.castor.mapping.Mapping)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void nestedExpr(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setAutoReconnectForPools(boolean)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getPacketDebugBufferSize()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void clearRowBuffer(boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment prepend(java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.hql.ast.tree.SqlNode: void setText(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void whereClause(antlr.collections.AST)> -> _SINK_
<org.postgresql.geometric.PGcircle: int hashCode()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$34: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.persister.collection.BasicCollectionPersister: java.lang.String generateInsertRowString()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean ownUpdatesAreVisible(int)> -> _SINK_
<org.springframework.jdbc.object.SqlCall: org.springframework.jdbc.core.CallableStatementCreator newCallableStatementCreator(org.springframework.jdbc.core.ParameterMapper)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void processConstructor(antlr.collections.AST)> -> _SINK_
<org.hibernate.engine.QueryParameters: java.io.Serializable[] getCollectionKeys()> -> _SINK_
<com.mysql.jdbc.MysqlIO: long getSlowQueryThreshold()> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedResultSet: void setInner(java.sql.ResultSet)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void constructor(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsUnionAll()> -> _SINK_
<org.springframework.jdbc.core.SqlInOutParameter: void <init>(java.lang.String,int,java.lang.String)> -> _SINK_
<org.apache.ibatis.type.FloatTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<org.mongodb.morphia.dao.BasicDAO: java.util.List findIds(java.lang.String,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.log.CommonsLogger: void logWarn(java.lang.Object)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void registerOutParameter(int,int)> -> _SINK_
<org.hibernate.type.TextType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: boolean isEmpty()> -> _SINK_
<org.apache.ibatis.executor.statement.RoutingStatementHandler: int update(java.sql.Statement)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setByte(java.lang.String,byte)> -> _SINK_
<org.hibernate.impl.SessionImpl: java.util.Iterator iterate(java.lang.String,java.lang.Object[],org.hibernate.type.Type[])> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)> -> _SINK_
<org.postgresql.copy.PGCopyInputStream: int available()> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.TrimSqlNode$FilteredDynamicContext: void applyPrefix(java.lang.StringBuilder,java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateBlob(java.lang.String,java.sql.Blob)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ResultSet: java.net.URL getURL(int)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: org.hibernate.ScrollableResults scroll(org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Clob: void <init>(org.postgresql.core.BaseConnection,long)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: boolean isBeforeFirst()> -> _SINK_
<org.hibernate.persister.entity.Queryable: boolean isAbstract()> -> _SINK_
<org.exolab.castor.xml.descriptors.SQLDateClassDescriptor: void <init>()> -> _SINK_
<com.mysql.jdbc.Statement: boolean useServerFetch()> -> _SINK_
<com.fasterxml.jackson.databind.deser.std.DateDeserializers: com.fasterxml.jackson.databind.deser.std.StdDeserializer[] all()> -> _SINK_
<org.hibernate.cfg.HbmBinder: void bindAuxiliaryDatabaseObject(org.dom4j.Element,org.hibernate.cfg.Mappings)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$68: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.IfSqlNode: void <init>(org.apache.ibatis.builder.xml.dynamic.SqlNode,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsANSI92IntermediateSQL()> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<com.mysql.jdbc.BlobFromLocator$LocatorInputStream: void close()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.io.Serializable insert(java.lang.Object[],java.lang.Object,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: void setTransactionIsolation(int)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.math.BigDecimal getBigDecimal(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: java.lang.String getQueryString()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Time getNativeTimeViaParseConversion(int,java.util.Calendar,java.util.TimeZone,boolean)> -> _SINK_
<org.postgresql.Driver: void purgeTimerTasks()> -> _SINK_
<org.postgresql.geometric.PGpoint: void move(int,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: int getResultSetHoldability()> -> _SINK_
<org.springframework.jdbc.core.support.SqlLobValue: void <init>(java.lang.String,org.springframework.jdbc.support.lob.LobHandler)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String[] getColumnsUsingProjection(org.hibernate.Criteria,java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema: java.sql.ResultSet getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)> -> _SINK_
<gov.nih.nci.cananolab.service.publication.helper.PublicationServiceHelper: gov.nih.nci.cananolab.domain.common.Publication findNonPubMedNonDOIPublication(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: void checkAndCreateTablesAccessedHistogram()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: double getDouble(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.AccountFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<javax.persistence.NamedQueries: javax.persistence.NamedQuery[] value()> -> _SINK_
<com.datastax.driver.core.exceptions.QueryValidationException: void <init>(java.lang.String,java.lang.Throwable)> -> _SINK_
<com.sforce.soap.enterprise.sobject.FeedItem: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Campaign: void setOpenActivities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<oracle.toplink.essentials.internal.sessions.AbstractSession: oracle.toplink.essentials.internal.databaseaccess.Accessor getAccessor()> -> _SINK_
<org.hibernate.util.JDBCExceptionReporter: void logWarnings(java.sql.SQLWarning,java.lang.String)> -> _SINK_
<java.sql.ResultSet: boolean rowDeleted()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: void <init>(com.datastax.driver.core.querybuilder.Update)> -> _SINK_
<org.apache.ibatis.type.FloatTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Clob getClob(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean isAfterLast()> -> _SINK_
<com.mysql.jdbc.ReplicationDriver: void <clinit>()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: void setPort(int)> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringDecoder: void <init>(java.lang.String,java.nio.charset.Charset,boolean,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert: com.datastax.driver.core.querybuilder.Insert values(java.lang.String[],java.lang.Object[])> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setObject(int,java.lang.Object,int,int)> -> _SINK_
<gov.nih.nci.security.authorization.instancelevel.InstanceLevelSecurityHelper: java.util.List getFiltersForGroups(gov.nih.nci.security.AuthorizationManager)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: void <init>()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setBoolean(java.lang.String,boolean)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.String getNativeConvertToString(int,com.mysql.jdbc.Field)> -> _SINK_
<org.exolab.castor.xml.handlers.SQLTimeFieldHandler: void <init>()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Time getTime(int)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: java.util.List getAttributesToGet()> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate: java.util.List findByNamedQuery(java.lang.String)> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder: void AND()> -> _SINK_
<org.apache.ibatis.datasource.pooled.PooledDataSource: int getLoginTimeout()> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: void <init>()> -> _SINK_
<com.endeca.navigation.analytics.FilterNot: void validateSyntax()> -> _SINK_
<com.mysql.jdbc.util.BaseBugReport: java.sql.Connection getConnection(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache$3: void run()> -> _SINK_
<com.sforce.soap.enterprise.sobject.SolutionFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate$37: java.lang.Object doInHibernate(org.hibernate.Session)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: boolean execute()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.CharacterizationServiceHelper: java.util.List findFindingsByCharacterizationId(java.lang.String)> -> _SINK_
<com.mysql.jdbc.StringUtils: byte[] getBytes(java.lang.String,com.mysql.jdbc.SingleByteCharsetConverter,java.lang.String,java.lang.String,boolean)> -> _SINK_
<gov.nih.nci.cananolab.service.admin.impl.OwnershipTransferServiceImpl: gov.nih.nci.cananolab.domain.particle.SampleComposition loadComposition(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.common.LookupService: java.util.Map findSingleAttributeLookupMap(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void setFetchSize(int)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23ConnectionPoolDataSource: javax.sql.PooledConnection getPooledConnection(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean updatesAreDetected(int)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.lang.Object[] toResultRow(java.lang.Object[])> -> _SINK_
<org.hibernate.sql.ANSIJoinFragment: boolean addCondition(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contract: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void thetaJoins(antlr.collections.AST)> -> _SINK_
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor: java.sql.Connection getNativeConnectionFromStatement(java.sql.Statement)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setBoolean(java.lang.String,boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.User: void setContractsSigned(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.loader.OuterJoinableAssociation: void addManyToManyJoin(org.hibernate.sql.JoinFragment,org.hibernate.persister.collection.QueryableCollection)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: int getMaxProcedureNameLength()> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.QueryTagSupport: int doStartTag()> -> _SINK_
<org.mmbase.module.builders.DayMarkers: int getDayCount(int)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: void appendFieldValue(java.lang.StringBuffer,java.lang.Object,boolean,int)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String[] getSQLUpdateStrings()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: short getShort(int)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: int getColumnType(int)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl: void bind(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean nullsAreSortedLow()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setDouble(int,double)> -> _SINK_
<org.postgresql.util.PSQLState: java.lang.String getState()> -> _SINK_
<org.apache.ibatis.datasource.pooled.PooledDataSource: void pushConnection(org.apache.ibatis.datasource.pooled.PooledConnection)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.Query: int totalResultSize()> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: java.lang.String getColumnList()> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch$Options: com.datastax.driver.core.Statement disableTracing()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setShort(int,short)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: java.util.List getByKeys(java.lang.Class,java.lang.Iterable)> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteria: void <init>()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Date getDate(int,java.util.Calendar)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: com.datastax.driver.core.Statement setConsistencyLevel(com.datastax.driver.core.ConsistencyLevel)> -> _SINK_
<org.hibernate.jdbc.BatchingBatcher: void checkRowCounts(int[],java.sql.PreparedStatement)> -> _SINK_
<org.springframework.jdbc.core.ConnectionCallback: java.lang.Object doInConnection(java.sql.Connection)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: org.mongodb.morphia.query.Query retrievedFields(boolean,java.lang.String[])> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Options: java.nio.ByteBuffer[] getValues()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void prepareVersioned(antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<org.hibernate.sql.JoinFragment: void <init>()> -> _SINK_
<org.postgresql.geometric.PGpolygon: int hashCode()> -> _SINK_
<com.sforce.soap.enterprise.sobject.TaskFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<java.sql.BatchUpdateException: int[] getUpdateCounts()> -> _SINK_
<org.hibernate.id.PersistentIdentifierGenerator: java.lang.String[] sqlDropStrings(org.hibernate.dialect.Dialect)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.math.BigDecimal getBigDecimal(int,int)> -> _SINK_
<org.hibernate.jdbc.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String,boolean)> -> _SINK_
<com.sforce.soap.enterprise.QueryAllResponse_element: com.sforce.soap.enterprise.QueryResult getResult()> -> _SINK_
<org.apache.ibatis.executor.ReuseExecutor: java.sql.Statement getStatement(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int deleteBlobTrigger(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister$1: void bindValues(java.sql.PreparedStatement)> -> _SINK_
<org.mongodb.morphia.query.ValidationException: void <init>(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.ComboPooledDataSource: void <init>()> -> _SINK_
<gov.nih.nci.system.query.cql.CQLObject: void <init>()> -> _SINK_
<com.mysql.jdbc.MysqlIO: void <init>(java.lang.String,int,java.util.Properties,java.lang.String,com.mysql.jdbc.Connection,int)> -> _SINK_
<org.springframework.jdbc.core.namedparam.MapSqlParameterSource: org.springframework.jdbc.core.namedparam.MapSqlParameterSource addValues(java.util.Map)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Clob getClob(int)> -> _SINK_
<org.springframework.jdbc.support.incrementer.AbstractSequenceMaxValueIncrementer: java.lang.String getSequenceQuery()> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl$OQLEnumeration: boolean hasMore()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getDriverMinorVersion()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$2: void execute(java.sql.Connection)> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: void initialize(org.hibernate.hql.ast.tree.SelectClause)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsAlterTableWithDropColumn()> -> _SINK_
<org.mmbase.storage.implementation.database.InformixStorageManager: void <init>()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: int getInt(int)> -> _SINK_
<org.postgresql.util.PGInterval: void <init>(int,int,int,int,int,double)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void registerOutParameter(int,int,java.lang.String)> -> _SINK_
<java.sql.Statement: void setMaxRows(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setFetchDirection(int)> -> _SINK_
<java.sql.Connection: void rollback()> -> _SINK_
<org.hibernate.hql.ast.tree.FromElement: void setQueryableCollection(org.hibernate.persister.collection.QueryableCollection)> -> _SINK_
<org.hibernate.cfg.SettingsFactory: org.hibernate.cache.QueryCacheFactory createQueryCacheFactory(java.util.Properties)> -> _SINK_
<javax.sql.DataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.engine.StatefulPersistenceContext: void replaceDelayedEntityIdentityInsertKeys(org.hibernate.engine.EntityKey,java.io.Serializable)> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: int writeBytes(byte[],byte[],int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: java.nio.ByteBuffer[] getValues()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsStatementPooling()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$IntegerConnectionProperty: void setValue(int)> -> _SINK_
<com.datastax.driver.core.Requests$Query$1: void encode(com.datastax.driver.core.Message$Request,org.jboss.netty.buffer.ChannelBuffer)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean jobExists(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getAutoDeserialize()> -> _SINK_
<org.apache.ibatis.type.ClobTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$ProxyConnectionInvocationHandler: java.lang.Exception doSilentClose(java.lang.Object,boolean,boolean)> -> _SINK_
<com.mysql.jdbc.Statement: void setResultSetType(int)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void compile()> -> _SINK_
<org.postgresql.util.HStoreConverter: java.util.Map fromString(java.lang.String)> -> _SINK_
<org.postgresql.core.BaseConnection: org.postgresql.core.TypeInfo getTypeInfo()> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQueryScalarReturn: void <init>(java.lang.String,org.hibernate.type.Type)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: java.util.Map internalGetPropertyResultsMap(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4DatabaseMetaData: java.lang.Object unwrap(java.lang.Class)> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfo: int getPrecision(int)> -> _SINK_
<com.sforce.soap.enterprise.QueryResult: void writeFields(com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.hql.ast.tree.SelectClause: void initializeColumnNames()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$StatementResultHandler: void <init>(org.postgresql.jdbc2.AbstractJdbc2Statement)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: int getFetchDirection()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setRef(int,java.sql.Ref)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void deleteRow()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory: org.mmbase.storage.util.StorageReader getDocumentReader()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: boolean isMasterConnection()> -> _SINK_
<org.hibernate.QueryException: java.lang.String getQueryString()> -> _SINK_
<org.postgresql.core.v2.SimpleParameterList: void setLiteralParameter(int,java.lang.String,int)> -> _SINK_
<com.endeca.navigation.analytics.FilterOr: java.lang.String toWire()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void commitConnection(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void convertGetProcedureColumnsToInternalDescriptors(java.sql.ResultSet)> -> _SINK_
<org.hibernate.loader.Loader: java.lang.String getQueryIdentifier()> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: void closeStatements()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: boolean execute(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void clearWarnings()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: int[] executeBatch()> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.EtxIndexCreator: java.lang.String getOperatorClass(java.lang.String,java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.Criteria: void attach(org.mongodb.morphia.query.CriteriaContainerImpl)> -> _SINK_
<org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor: java.sql.CallableStatement getNativeCallableStatement(java.sql.CallableStatement)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$3: void execute(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void clearWarnings()> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: int update(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,org.springframework.jdbc.support.KeyHolder)> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator$MySqlType: void <init>(org.exolab.castor.jdo.keygen.IdentityKeyGenerator)> -> _SINK_
<org.hibernate.sql.Select: org.hibernate.sql.Select setWhereClause(java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.SqlSourceBuilder: org.apache.ibatis.mapping.SqlSource parse(java.lang.String,java.lang.Class)> -> _SINK_
<org.hibernate.loader.custom.CustomQuery: java.lang.String getSQL()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.CQL2ParameterizedHQL: void <init>(gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.DomainTypesInformation,gov.nih.nci.cagrid.sdkquery4.processor.RoleNameResolver,boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment decr(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getTcpTrafficClass()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Interview__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: void <init>(java.sql.Connection)> -> _SINK_
<org.apache.ibatis.metadata.Database: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.lang.String getSystemFunctions()> -> _SINK_
<entities.RepositoryAtomic: int executeUpdate(java.lang.String,java.lang.Object[])> -> _SINK_
<gov.nih.nci.logging.api.appender.jdbc.SQLGenerator: java.lang.String getLogMessageSQLStatement(gov.nih.nci.logging.api.domain.LogMessage)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.Query find(java.lang.String,java.lang.Class,java.lang.String,java.lang.Object,int,int,boolean)> -> _SINK_
<gov.nih.nci.system.dao.orm.ORMDAOImpl: org.springframework.orm.hibernate3.HibernateCallback getExecuteFindQueryHibernateCallback(java.lang.String,java.util.List,int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setByte(java.lang.String,byte)> -> _SINK_
<org.mmbase.bridge.util.HugeNodeListIterator: void main(java.lang.String[])> -> _SINK_
<org.apache.ibatis.executor.statement.BaseStatementHandler: java.sql.Statement prepare(java.sql.Connection)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.lang.Object getObject(java.lang.String)> -> _SINK_
<org.hibernate.hql.QueryTranslator: java.util.List list(org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.mmbase.servlet.ImageServlet: boolean setContent(org.mmbase.servlet.BridgeServlet$QueryParts,org.mmbase.bridge.Node,java.lang.String)> -> _SINK_
<org.hibernate.dialect.DialectFactory: org.hibernate.dialect.Dialect determineDialect(java.lang.String,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void moveToInsertRow()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment prependAll(java.lang.String,java.util.List)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Date getDate(int)> -> _SINK_
<com.mysql.jdbc.Clob: void <init>(java.lang.String)> -> _SINK_
<org.apache.ibatis.executor.statement.PreparedStatementHandler: void batch(java.sql.Statement)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: java.lang.StringBuffer getStringBuffer()> -> _SINK_
<org.hibernate.sql.DecodeCaseFragment: void <init>()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setDp(java.lang.String)> -> _SINK_
<org.hibernate.criterion.Expression: org.hibernate.criterion.Criterion sql(java.lang.String,java.lang.Object,org.hibernate.type.Type)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Asset: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<gov.nih.nci.system.webservice.WSQueryImpl: java.util.List getNestedCriteriaResultSet(java.lang.String,java.lang.Object,int)> -> _SINK_
<org.hibernate.mapping.Join: void setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters: java.text.SimpleDateFormat access$400()> -> _SINK_
<com.amazonaws.services.datapipeline.model.Query: java.lang.String toString()> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: java.lang.String getQueryString()> -> _SINK_
<com.mysql.jdbc.util.LRUCache: boolean removeEldestEntry(java.util.Map$Entry)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: java.lang.String getDatabaseName()> -> _SINK_
<org.apache.ibatis.executor.ReuseExecutor: java.sql.Statement prepareStatement(org.apache.ibatis.executor.statement.StatementHandler)> -> _SINK_
<org.postgresql.core.Query: boolean isStatementDescribed()> -> _SINK_
<com.mchange.v2.c3p0.DriverManagerDataSource: java.io.PrintWriter getLogWriter()> -> _SINK_
<org.springframework.orm.jdo.JdoDialect: javax.jdo.Query newNamedQuery(javax.jdo.PersistenceManager,java.lang.Class,java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void fromElementList(antlr.collections.AST)> -> _SINK_
<org.hibernate.hql.classic.WhereParser: void addToCurrentJoin(org.hibernate.hql.classic.PathExpressionParser$CollectionElement)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl$OQLEnumeration: java.lang.Object next()> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimeLocaleConverter: void <init>(java.util.Locale,boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsNonNullableColumns()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.SuspendableXAConnection: javax.transaction.xa.Xid[] recover(int)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateDate(java.lang.String,java.sql.Date)> -> _SINK_
<org.springframework.jdbc.core.support.JdbcDaoSupport: org.springframework.jdbc.support.SQLExceptionTranslator getExceptionTranslator()> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.NestedCriteria2HQL: void solveScenario1(java.lang.StringBuffer,gov.nih.nci.system.query.nestedcriteria.NestedCriteria)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.math.BigDecimal getNativeBigDecimal(int)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: double getDouble(java.lang.String)> -> _SINK_
<org.hibernate.mapping.Index: java.lang.String sqlCreateString(org.hibernate.dialect.Dialect,org.hibernate.engine.Mapping,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.ibatis.type.TimeOnlyTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setURL(int,java.net.URL)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: int getHoldability()> -> _SINK_
<org.postgresql.geometric.PGbox: int hashCode()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Investor_Account__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Connection: void rollback(java.sql.Savepoint)> -> _SINK_
<org.hibernate.QueryException: void <init>(java.lang.String,java.lang.Throwable)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void createObject(java.lang.Object)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: com.datastax.driver.core.querybuilder.Select limit(int)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: int getDriverMajorVersion()> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavSortOrder(int)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.TransactionTagSupport: void doFinally()> -> _SINK_
<org.postgresql.util.UnixCrypt: void intToFourBytes(int,byte[],int)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.impl.DataAvailabilityServiceJDBCImpl: java.util.List findSampleIdsWithDataAvailability(gov.nih.nci.cananolab.service.security.SecurityService)> -> _SINK_
<org.hibernate.loader.JoinWalker: void walkCollectionTree(org.hibernate.persister.collection.QueryableCollection,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getCallableStmtCacheSize()> -> _SINK_
<org.mmbase.storage.search.implementation.database.ChainedSqlHandler: int getSupportLevel(org.mmbase.storage.search.Constraint,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void <clinit>()> -> _SINK_
<com.mysql.jdbc.integration.jboss.MysqlValidConnectionChecker: java.sql.SQLException isValidConnection(java.sql.Connection)> -> _SINK_
<org.hibernate.persister.entity.AbstractPropertyMapping: void throwPropertyException(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Lead: void setOpenActivities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch$Options: java.nio.ByteBuffer getRoutingKey()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: double getDouble(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void refreshRow()> -> _SINK_
<org.exolab.castor.jdo.engine.LocalDatabaseImpl: java.sql.Connection getJdbcConnection()> -> _SINK_
<org.mmbase.module.database.MultiStatement: int getFetchSize()> -> _SINK_
<com.mysql.jdbc.ResultSet: int getIntFromString(java.lang.String,int)> -> _SINK_
<org.springframework.orm.hibernate3.support.AbstractLobType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Update update(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.StringBuilder appendValue(java.lang.Object,java.lang.StringBuilder,boolean)> -> _SINK_
<org.hibernate.mapping.Table: java.util.Iterator sqlCommentStrings(org.hibernate.dialect.Dialect,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.UnionSubclassEntityPersister: java.lang.String filterFragment(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContentDocument: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$91: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Task__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setPopulateInsertRowWithDefaultValues(boolean)> -> _SINK_
<org.hibernate.dialect.DB2Dialect: java.sql.ResultSet getResultSet(java.sql.CallableStatement)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setDouble(java.lang.String,double)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.lang.String getUserName()> -> _SINK_
<org.springframework.orm.hibernate3.LocalSessionFactoryBean: void afterSessionFactoryCreation()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setObject(int,java.lang.Object,int)> -> _SINK_
<org.mongodb.morphia.query.WhereCriteria: void addTo(com.mongodb.DBObject)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker$WithClauseVisitor: void visit(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean ownDeletesAreVisible(int)> -> _SINK_
<org.springframework.orm.hibernate3.SpringSessionSynchronization: void beforeCommit(boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore: void setUpdateLockRowSQL(java.lang.String)> -> _SINK_
<org.postgresql.copy.CopyOperation: int getFieldFormat(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setCursorName(java.lang.String)> -> _SINK_
<java.sql.CallableStatement: byte[] getBytes(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: com.datastax.driver.core.ConsistencyLevel getConsistencyLevel()> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.WritableApplicationServiceImpl: gov.nih.nci.system.query.SDKQueryResult prepareResult(gov.nih.nci.system.dao.Request,gov.nih.nci.system.dao.Response)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationService: java.util.List query(gov.nih.nci.system.query.cql.CQLQuery)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: int create(org.mmbase.module.core.MMObjectNode)> -> _SINK_
<org.hibernate.type.ClassType: int sqlType()> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSourceFactory: javax.sql.DataSource create(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,int,int,int,java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.lob.LobHandler: java.lang.String getClobAsString(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setBoolean(int,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<java.sql.ResultSetMetaData: boolean isCurrency(int)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void lookupAlias(antlr.collections.AST)> -> _SINK_
<org.hibernate.loader.Loader: java.lang.Object getResultColumnOrRow(java.lang.Object[],org.hibernate.transform.ResultTransformer,java.sql.ResultSet,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: boolean execute(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setMaxRows(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.io.InputStream getBinaryStream(int)> -> _SINK_
<org.castor.jdo.conf.DatabaseChoice: boolean isValid()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setObject(java.lang.String,java.lang.Object)> -> _SINK_
<org.castor.jdo.conf.DatabaseChoiceDescriptor$3: void <init>(org.castor.jdo.conf.DatabaseChoiceDescriptor)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Options: void <init>(com.datastax.driver.core.querybuilder.Delete)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Date getDate(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getDumpMetadataOnColumnNotFound()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.StepField getStepField(org.mmbase.bridge.Query,org.mmbase.bridge.Field)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setBlob(int,java.sql.Blob)> -> _SINK_
<org.springframework.jdbc.core.ColumnMapRowMapper: java.lang.Object mapRow(java.sql.ResultSet,int)> -> _SINK_
<org.mmbase.storage.search.implementation.ModifiableQuery: java.util.List getSteps()> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: void addWhereClause(org.exolab.castor.jdo.oql.ParseTreeNode)> -> _SINK_
<com.mysql.jdbc.log.StandardLogger: void logTrace(java.lang.Object,java.lang.Throwable)> -> _SINK_
<org.hibernate.type.TimeZoneType: int sqlType()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String getSelectByUniqueKeyString(java.lang.String)> -> _SINK_
<org.postgresql.geometric.PGpoint: void move(double,double)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlweek(java.util.List)> -> _SINK_
<org.castor.jdo.conf.DatabaseChoiceDescriptor$2: void <init>(org.castor.jdo.conf.DatabaseChoiceDescriptor)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsCatalogsInIndexDefinitions()> -> _SINK_
<org.springframework.orm.jdo.DefaultJdoDialect: java.lang.String extractSqlStringFromException(javax.jdo.JDOException)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: com.datastax.driver.core.querybuilder.Update$Where and(com.datastax.driver.core.querybuilder.Clause)> -> _SINK_
<org.hibernate.jdbc.ConnectionManager: java.sql.Connection close()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void createIndices(org.mmbase.core.CoreField)> -> _SINK_
<org.hibernate.dialect.HSQLDialect$1: java.lang.String extractConstraintName(java.sql.SQLException)> -> _SINK_
<org.hibernate.sql.SimpleSelect: void <init>(org.hibernate.dialect.Dialect)> -> _SINK_
<org.postgresql.core.ResultHandler: void handleWarning(java.sql.SQLWarning)> -> _SINK_
<org.exolab.castor.jdo.drivers.InstantDBQueryExpression: void <init>(org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<org.apache.taglibs.standard.tag.rt.sql.TransactionTag: int doStartTag()> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.StringBuilder appendValueString(java.lang.String,java.lang.StringBuilder)> -> _SINK_
<org.exolab.castor.jdo.engine.LocalDatabaseImpl: void commit()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.Object getObjectStoredProc(java.lang.String,int)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: void validateScrollability()> -> _SINK_
<org.hibernate.engine.query.OrdinalParameterDescriptor: org.hibernate.type.Type getExpectedType()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object notIn(java.lang.Iterable)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Location__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<java.sql.Statement: void close()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void rePrepare()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.lang.Class)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean storesLowerCaseIdentifiers()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setDouble(java.lang.String,double)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void selectStatement(antlr.collections.AST)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker$WithClauseVisitor: java.lang.String getJoinAlias()> -> _SINK_
<org.apache.ibatis.executor.ReuseExecutor: java.util.List doQuery(org.apache.ibatis.mapping.MappedStatement,java.lang.Object,org.apache.ibatis.session.RowBounds,org.apache.ibatis.session.ResultHandler)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void dumpPrepareForTestcase()> -> _SINK_
<com.sforce.soap.enterprise.sobject.CUstom_Setting_1__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.CallableStatement: double getDouble(int)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.lang.Object getObject(java.lang.String)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setBigInteger(int,java.math.BigInteger)> -> _SINK_
<com.datastax.driver.core.Requests$Query$2: void encode(com.datastax.driver.core.Message$Request,org.jboss.netty.buffer.ChannelBuffer)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.lang.String access$300(com.mysql.jdbc.DatabaseMetaData,java.lang.String)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: int getJoinType(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.BusinessHours: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.util.Map,org.springframework.jdbc.core.RowMapper)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: void clearWarnings()> -> _SINK_
<com.sforce.soap.enterprise.sobject.PushTopic: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.hql.ast.tree.MethodNode: void handleElements(org.hibernate.hql.ast.tree.FromReferenceNode,java.lang.String)> -> _SINK_
<com.mysql.jdbc.VersionedStringProperty: void <init>(java.lang.String)> -> _SINK_
<org.postgresql.core.PGStream: byte[][] ReceiveTupleV3()> -> _SINK_
<org.postgresql.util.PGInterval: void setValue(int,int,int,int,int,double)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void cancelRowUpdates()> -> _SINK_
<com.mysql.jdbc.CallableStatement: boolean access$100(com.mysql.jdbc.CallableStatement)> -> _SINK_
<org.hibernate.cfg.HbmBinder: void handleCustomSQL(org.dom4j.Element,org.hibernate.mapping.PersistentClass)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: int getTransactionIsolation()> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: java.lang.String getPGType(int)> -> _SINK_
<com.mysql.jdbc.NamedPipeSocketFactory$NamedPipeSocket: void <init>(com.mysql.jdbc.NamedPipeSocketFactory,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.EventFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.exolab.castor.jdo.drivers.ReturnedRSCallQuery: boolean nextRow()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateCharacterStream(java.lang.String,java.io.Reader,long)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)> -> _SINK_
<com.mysql.jdbc.AssertionFailedException: void <init>(java.lang.Exception)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimeLocaleConverter: void <init>(java.lang.Object,java.util.Locale,java.lang.String,boolean)> -> _SINK_
<com.mysql.jdbc.RowData: boolean isEmpty()> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTransactionManager: org.springframework.jdbc.support.SQLExceptionTranslator getJdbcExceptionTranslator()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void clearBatch()> -> _SINK_
<org.postgresql.util.PGInterval: void setDays(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateObject(int,java.lang.Object,int)> -> _SINK_
<org.hibernate.id.SequenceIdentityGenerator$Delegate: java.io.Serializable executeAndExtract(java.sql.PreparedStatement)> -> _SINK_
<org.springframework.jdbc.core.JdbcOperations: java.util.List query(java.lang.String,org.springframework.jdbc.core.RowMapper)> -> _SINK_
<org.hibernate.sql.OracleJoinFragment: void addCrossJoin(java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.module.builders.ImageCaches: void invalidate(org.mmbase.module.core.MMObjectNode)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void addQuerySpaces(java.io.Serializable[])> -> _SINK_
<org.hibernate.impl.SessionImpl: java.util.List listCustomQuery(org.hibernate.loader.custom.CustomQuery,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.hibernate.jdbc.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[])> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.sql.PreparedStatement prepareStatement(java.lang.String,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsFullOuterJoins()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.SampleServiceHelper: int getNumberOfPublicSamples()> -> _SINK_
<org.exolab.castor.mapping.xml.types.SqlDirtyType: void <init>(int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: void setReadOnly(boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.utils.Key[] selectMisfiredTriggers(java.sql.Connection,long)> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator: java.io.InputStream findConfigWsdd()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLColumnInfo: java.lang.String getConvertParam()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateNull(java.lang.String)> -> _SINK_
<org.postgresql.ds.jdbc4.AbstractJdbc4PooledConnection: void <init>(java.sql.Connection,boolean,boolean)> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator$MySqlType: java.lang.Object getValue(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfo: int numberOfParameters()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: void cancel()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$3: void forEach(java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache$2: void run()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setType(com.mysql.jdbc.ServerPreparedStatement$BindValue,int)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsSelectForUpdate()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: boolean isClosed()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object hasAnyOf(java.lang.Iterable)> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: org.mongodb.morphia.query.UpdateOperations dec(java.lang.String)> -> _SINK_
<org.exolab.castor.persist.QueryResults: java.lang.Object fetch()> -> _SINK_
<org.hibernate.hql.ast.util.SessionFactoryHelper: org.hibernate.dialect.function.SQLFunction findSQLFunction(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache: void checkinStatement(java.lang.Object)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void tableJoin(antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<com.mchange.v1.db.sql.ResultSetUtils: boolean attemptClose(java.sql.ResultSet)> -> _SINK_
<org.springframework.orm.jdo.JdoTransactionManager: void doCleanupAfterCompletion(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean dataDefinitionIgnoredInTransactions()> -> _SINK_
<org.hibernate.hql.classic.ClauseParser: void start(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl$OQLEnumeration: java.lang.Object nextElement()> -> _SINK_
<org.mongodb.morphia.query.QueryResults: java.lang.Object get()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Time getTime(java.lang.String,java.util.Calendar)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> -> _SINK_
<com.datastax.driver.core.SessionManager: com.datastax.driver.core.Message$Request makeRequestMessage(com.datastax.driver.core.Statement,java.nio.ByteBuffer)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Date getDate(int,java.util.Calendar)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicQueryHandler: void <clinit>()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: void postConstruct(org.hibernate.engine.Mapping)> -> _SINK_
<com.mysql.jdbc.Statement: int getMaxRows()> -> _SINK_
<com.sforce.soap.enterprise.sobject.ReportFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.core.TypeInfo: java.lang.Class getPGobject(java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.lang.String extractProcedureName()> -> _SINK_
<org.postgresql.largeobject.BlobInputStream: void checkClosed()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object in(java.lang.Iterable)> -> _SINK_
<org.mmbase.cache.QueryResultCache: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.lang.String getCatalog()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getTraceProtocol()> -> _SINK_
<org.mmbase.module.database.MultiConnection: void setLastSQL(java.lang.String)> -> _SINK_
<org.exolab.castor.mapping.xml.types.SqlDirtyTypeDescriptor: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.ParameterMetaData getParameterMetaData()> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContractFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.type.CalendarType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.math.BigDecimal getBigDecimal(int)> -> _SINK_
<java.sql.ResultSet: int getInt(int)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: byte[] streamToBytes(java.io.InputStream,boolean,int,boolean)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void createSelectClauseFromFromClause(org.hibernate.hql.ast.tree.QueryNode)> -> _SINK_
<com.mysql.jdbc.log.StandardLogger: void logInternal(int,java.lang.Object,java.lang.Throwable)> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: java.lang.String getMessage()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Pricebook2: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: void setClientInfo(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement: int getNamedParamIndex(java.lang.String,boolean)> -> _SINK_
<org.apache.ibatis.datasource.DataSourceFactory: javax.sql.DataSource getDataSource()> -> _SINK_
<com.mysql.jdbc.StringUtils: short getShort(byte[])> -> _SINK_
<com.fasterxml.jackson.databind.deser.std.DateDeserializers$SqlDateDeserializer: void <init>(com.fasterxml.jackson.databind.deser.std.DateDeserializers$SqlDateDeserializer,java.text.DateFormat,java.lang.String)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String getRootSQLALias()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3DatabaseMetaData: void <init>(org.postgresql.jdbc3.AbstractJdbc3Connection)> -> _SINK_
<org.hibernate.hql.ast.util.JoinProcessor: org.hibernate.hql.ast.QueryTranslatorImpl access$000(org.hibernate.hql.ast.util.JoinProcessor)> -> _SINK_
<org.apache.ibatis.type.DateTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLCustomQuery$ParserContext: org.hibernate.persister.collection.SQLLoadableCollection getCollectionPersisterByAlias(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object near(double,double,double)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String getColumn(org.hibernate.Criteria,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setByte(int,byte)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setShares(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$MainFrame: void clearTabs()> -> _SINK_
<com.mysql.jdbc.MysqlIO: boolean isDataAvailable()> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsResult: java.lang.String toString()> -> _SINK_
<com.sforce.soap.enterprise.fault.MalformedQueryFault: void load(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator: void logTranslation(java.lang.String,java.lang.String,java.sql.SQLException,boolean)> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getVersionColumns(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.orm.hibernate3.LocalSessionFactoryBean$2: java.lang.Object doInHibernate(org.hibernate.Session)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.CharacterizationQueryBean: java.lang.String getDatumName()> -> _SINK_
<org.springframework.jdbc.core.namedparam.ParsedSql: int getNamedParameterCount()> -> _SINK_
<org.springframework.orm.jpa.JpaTransactionManager: java.lang.Object doGetTransaction()> -> _SINK_
<org.hibernate.criterion.InExpression: org.hibernate.engine.TypedValue[] getTypedValues(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.postgresql.xa.PGXAException: void <init>(java.lang.String,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Builder: com.datastax.driver.core.querybuilder.Delete 'from'(com.datastax.driver.core.TableMetadata)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void registerRealStatement(java.sql.Statement)> -> _SINK_
<java.sql.ResultSetMetaData: java.lang.String getColumnClassName(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: int getSQLType(int)> -> _SINK_
<org.springframework.orm.toplink.TopLinkQueryException: void <init>(oracle.toplink.exceptions.QueryException)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: void processCollectionReturn(org.hibernate.engine.query.sql.NativeSQLQueryCollectionReturn)> -> _SINK_
<org.hibernate.type.LongType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate$30: java.lang.Object doInHibernate(org.hibernate.Session)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateCharacterStream(int,java.io.Reader,int)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion ne(java.lang.Object,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.mmbase.security.Authorization$QueryCheck: boolean isChecked()> -> _SINK_
<com.mysql.jdbc.Connection: void repartitionTablesAccessedHistogram()> -> _SINK_
<org.hibernate.cache.StandardQueryCache: java.util.List get(org.hibernate.cache.QueryKey,org.hibernate.type.Type[],boolean,java.util.Set,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet$PrimaryKey: java.lang.Object getValue()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setAutoDeserialize(boolean)> -> _SINK_
<org.mmbase.bridge.implementation.BasicCloud: org.mmbase.bridge.Query createAggregatedQuery()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsCatalogsInDataManipulation()> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection: void fireConnectionClosed()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void addBatch()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setBoolean(int,boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Where: boolean isTracing()> -> _SINK_
<org.apache.ibatis.migration.commands.BaseCommand: void insertChangelog(org.apache.ibatis.migration.Change)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setLong(java.lang.String,long)> -> _SINK_
<javax.sql.CommonDataSource: java.io.PrintWriter getLogWriter()> -> _SINK_
<org.apache.ibatis.mapping.Environment$Builder: org.apache.ibatis.mapping.Environment$Builder dataSource(javax.sql.DataSource)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$6: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.MiniAdmin: void shutdown()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(java.lang.String,java.lang.Object[],org.springframework.jdbc.core.ResultSetExtractor)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2BlobClob: java.io.InputStream getBinaryStream()> -> _SINK_
<org.hibernate.criterion.NotExpression: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: boolean execute(java.lang.String,java.lang.String[])> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsTransactions()> -> _SINK_
<org.apache.ibatis.executor.ReuseExecutor: int doUpdate(org.apache.ibatis.mapping.MappedStatement,java.lang.Object)> -> _SINK_
<java.sql.ResultSet: void beforeFirst()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: boolean canRewriteAsMultivalueInsertStatement()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void cleanupUncachedStatements(java.util.List)> -> _SINK_
<entities.RepositoryAtomic: java.util.List query(java.lang.String,int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void beforeFirst()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: int getRow()> -> _SINK_
<com.sforce.soap.enterprise.sobject.UserFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.core.v2.ProtocolConnectionImpl: boolean getStandardConformingStrings()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsFullOuterJoins()> -> _SINK_
<org.springframework.jdbc.core.namedparam.MapSqlParameterSource: org.springframework.jdbc.core.namedparam.MapSqlParameterSource addValue(java.lang.String,java.lang.Object,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getProcessEscapeCodesForPrepStmts()> -> _SINK_
<com.sforce.soap.enterprise.DescribeGlobalSObjectResult: void setQueryable(boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<org.exolab.castor.jdo.drivers.OracleQueryExpression: java.lang.String getStatement(boolean)> -> _SINK_
<gov.nih.nci.security.dao.Queries: java.sql.PreparedStatement getQueryForCheckPermissionForUserAndGroup(java.lang.String,java.lang.String,java.lang.String,int,java.sql.Connection)> -> _SINK_
<com.sforce.soap.enterprise.sobject.AssetFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: com.mongodb.DBCursor prepareCursor()> -> _SINK_
<org.hibernate.hql.ast.HqlParser: antlr.collections.AST createSubquery(antlr.collections.AST)> -> _SINK_
<com.datastax.driver.core.ExecutionInfo: com.datastax.driver.core.ExecutionInfo withTrace(com.datastax.driver.core.QueryTrace)> -> _SINK_
<com.mchange.v2.c3p0.WrapperConnectionPoolDataSource: java.lang.String getPassword()> -> _SINK_
<org.apache.ibatis.executor.statement.BaseStatementHandler: void setFetchSize(java.sql.Statement)> -> _SINK_
<com.mysql.jdbc.ResultSet: double getDoubleFromString(java.lang.String,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.PointbaseDelegate: int insertTrigger(java.sql.Connection,org.quartz.Trigger,java.lang.String,org.quartz.JobDetail)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Options: java.lang.String getKeyspace()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ParameterMetaData: void <init>(org.postgresql.core.BaseConnection,int[])> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Timestamp getTimestampFromString(int,java.util.Calendar,java.lang.String,java.util.TimeZone,boolean)> -> _SINK_
<org.hibernate.impl.SessionImpl: org.hibernate.ScrollableResults scroll(java.lang.String,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.apache.ibatis.executor.statement.RoutingStatementHandler: void parameterize(java.sql.Statement)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementLoad: void <clinit>()> -> _SINK_
<org.exolab.castor.jdo.drivers.OracleQueryExpression: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: int[] executeBatch()> -> _SINK_
<javax.sql.ConnectionEvent: void <init>(javax.sql.PooledConnection,java.sql.SQLException)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateAsciiStream(java.lang.String,java.io.InputStream)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: int getFetchSize()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getSuperTypes(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setPrepStmtCacheSize(int)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: java.sql.SQLWarning receiveNotification()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setAssets(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$28: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Connection getConnection()> -> _SINK_
<org.springframework.orm.jpa.JpaTemplate$12: java.lang.Object doInJpa(javax.persistence.EntityManager)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setString(int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: byte getByteFromString(java.lang.String,int)> -> _SINK_
<org.postgresql.geometric.PGbox: void <init>(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void <init>(org.postgresql.jdbc2.AbstractJdbc2Connection,int,int)> -> _SINK_
<com.endeca.navigation.analytics.Select: java.lang.String toWire()> -> _SINK_
<gov.nih.nci.system.query.example.SearchExampleQuery: void <init>(java.lang.Object)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: byte[] receiveFastpathResult()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.sql.Blob getBlobValue(org.mmbase.module.core.MMObjectNode,org.mmbase.core.CoreField)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean isCatalogAtStart()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getResultSetSizeThreshold()> -> _SINK_
<org.hibernate.type.NullableType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<org.apache.ibatis.executor.BaseExecutor: org.apache.ibatis.cache.CacheKey createCacheKey(org.apache.ibatis.mapping.MappedStatement,java.lang.Object,org.apache.ibatis.session.RowBounds)> -> _SINK_
<org.hibernate.engine.NamedSQLQueryDefinition: org.hibernate.engine.query.sql.NativeSQLQueryReturn[] getQueryReturns()> -> _SINK_
<com.mchange.v2.c3p0.DriverManagerDataSource: java.sql.Driver driver()> -> _SINK_
<com.mysql.jdbc.ResultSet: void checkColumnBounds(int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: int getInt(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setFloat(int,float)> -> _SINK_
<org.exolab.castor.persist.spi.AbstractCallQuery: void <clinit>()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setBytes(java.lang.String,byte[])> -> _SINK_
<com.mysql.jdbc.Connection: void setTransactionIsolation(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ReportFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Investor_Account__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<java.sql.ResultSet: int getType()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Task__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.criterion.NaturalIdentifier: org.hibernate.engine.TypedValue[] getTypedValues(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: com.datastax.driver.core.querybuilder.Update$Options and(com.datastax.driver.core.querybuilder.Using)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setInt(java.lang.String,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean calendarExists(java.sql.Connection,java.lang.String)> -> _SINK_
<org.exolab.castor.persist.SQLRelationLoader: void <init>(java.lang.String,java.lang.String[],int[],org.exolab.castor.mapping.TypeConvertor[],org.exolab.castor.mapping.TypeConvertor[],java.lang.String[],java.lang.String[],int[],org.exolab.castor.mapping.TypeConvertor[],org.exolab.castor.mapping.TypeConvertor[],java.lang.String[])> -> _SINK_
<com.mysql.jdbc.util.BaseBugReport: java.sql.Connection getConnection(java.lang.String,java.util.Properties)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.SampleServiceHelper: gov.nih.nci.cananolab.domain.common.PointOfContact findPointOfContactByNameAndOrg(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.NonRegisteringReplicationDriver: java.sql.Connection connect(java.lang.String,java.util.Properties)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: int getMaxNameLength()> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String[] getIdentifierColumns(org.hibernate.Criteria)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.sql.ResultSet getResultSet(java.sql.PreparedStatement)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl$OQLEnumeration: java.lang.Object followPath(java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.sql.CallableStatement prepareCall(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.TxDatabaseMap: org.exolab.castor.jdo.engine.GlobalDatabaseImpl remove(javax.transaction.Transaction)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxCharLiteralLength()> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: com.datastax.driver.core.Statement enableTracing()> -> _SINK_
<au.com.bytecode.opencsv.CSVWriter: void writeAll(java.sql.ResultSet,boolean)> -> _SINK_
<org.hibernate.type.TimeZoneType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Pricebook2: void setPricebookEntries(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsTableCorrelationNames()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void <init>(java.sql.ResultSet)> -> _SINK_
<com.datastax.driver.core.RequestHandler: void onSet(com.datastax.driver.core.Connection,com.datastax.driver.core.Message$Response,long)> -> _SINK_
<org.exolab.castor.xml.handlers.SQLTimeFieldHandler: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: long getNumericRepresentationOfSQLBitType(int)> -> _SINK_
<org.hibernate.stat.StatisticsImpl: void queryCacheMiss(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setInternal(int,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: long getLong(java.lang.String)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLCustomQuery$ParserContext: java.util.Map getPropertyResultsMapByAlias(java.lang.String)> -> _SINK_
<java.sql.Statement: int getResultSetHoldability()> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: java.lang.String createAlias(java.lang.String)> -> _SINK_
<java.sql.CallableStatement: float getFloat(java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String[] getSQLDeleteStrings()> -> _SINK_
<org.mmbase.module.database.JDBCProbe: void <init>(org.mmbase.module.database.JDBC,int)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: void getExportKeyResults(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: byte getByte(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: java.lang.Iterable fetchEmptyEntities()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void addFrom(java.lang.String,java.lang.String,org.hibernate.engine.JoinSequence)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavActiveSortKeys(com.endeca.navigation.ERecSortKeyList)> -> _SINK_
<com.mysql.jdbc.StandardSocketFactory: java.net.Socket connect(java.lang.String,int,java.util.Properties)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: void delete(java.lang.Object,org.exolab.castor.persist.spi.Identity)> -> _SINK_
<com.mysql.jdbc.Statement: void setFetchDirection(int)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.Query find(java.lang.Class,java.lang.String,java.lang.Object,int,int)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: com.mysql.jdbc.DatabaseMetaData$IteratorWithCleanup getCatalogIterator(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$2: void handleError(java.sql.SQLException)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setAccountPartnersFrom(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: void beforeFirst()> -> _SINK_
<org.mmbase.core.util.StorageConnector: void addSubResult(org.mmbase.storage.search.implementation.NodeSearchQuery,java.util.List,java.util.List)> -> _SINK_
<org.apache.log4j.jdbc.JDBCAppender: void close()> -> _SINK_
<java.sql.ResultSet: void updateRef(int,java.sql.Ref)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsResultSetHoldability(int)> -> _SINK_
<org.apache.ibatis.datasource.unpooled.UnpooledDataSource: java.sql.Connection getConnection()> -> _SINK_
<org.mongodb.morphia.query.MorphiaIterator: void <init>(java.util.Iterator,org.mongodb.morphia.mapping.Mapper,java.lang.Class,java.lang.String,org.mongodb.morphia.mapping.cache.EntityCache)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: java.lang.String getDateTimePattern(java.lang.String,boolean)> -> _SINK_
<org.hibernate.dialect.Dialect: java.lang.String getQuerySequencesString()> -> _SINK_
<org.hibernate.mapping.Formula: java.lang.String getTemplate(org.hibernate.dialect.Dialect,org.hibernate.dialect.function.SQLFunctionRegistry)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setBoolean(int,boolean)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setDimSearchRollupKey(java.lang.String)> -> _SINK_
<org.hibernate.Query: org.hibernate.Query setReadOnly(boolean)> -> _SINK_
<java.sql.CallableStatement: void setDate(java.lang.String,java.sql.Date,java.util.Calendar)> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.ApplicationServiceImpl: java.util.List query(gov.nih.nci.system.query.hibernate.HQLCriteria)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<org.exolab.castor.jdo.keygen.UUIDKeyGenerator: void supportsSqlType(int)> -> _SINK_
<com.mchange.v2.c3p0.WrapperConnectionPoolDataSource: javax.sql.PooledConnection getPooledConnection()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean removeCalendar(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: java.lang.Object getObject(java.lang.String,java.lang.Class)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: void close()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.Field,java.lang.String,boolean)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void generateParameterMap()> -> _SINK_
<org.apache.ibatis.executor.statement.PreparedStatementHandler: int update(java.sql.Statement)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void sendQuery(org.postgresql.core.v3.V3Query,org.postgresql.core.v3.V3ParameterList,int,int,int,org.postgresql.core.v3.QueryExecutorImpl$ErrorTrackingResultHandler)> -> _SINK_
<org.springframework.orm.ibatis.support.ClobStringTypeHandler: java.lang.Object getResultInternal(java.sql.ResultSet,int,org.springframework.jdbc.support.lob.LobHandler)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$LongConnectionProperty: void <init>(com.mysql.jdbc.ConnectionProperties,java.lang.String,long,long,long,java.lang.String,java.lang.String,java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: com.mysql.jdbc.PreparedStatement$ParseInfo getParseInfo()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: void <init>(com.mysql.jdbc.jdbc2.optional.MysqlPooledConnection,com.mysql.jdbc.Connection,boolean)> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.ApplicationServiceImpl: java.util.List query(gov.nih.nci.system.query.hibernate.HQLCriteria,java.lang.String)> -> _SINK_
<org.mmbase.servlet.BridgeServlet: org.mmbase.bridge.Node getServedNode(org.mmbase.servlet.BridgeServlet$QueryParts,org.mmbase.bridge.Node)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateShort(int,short)> -> _SINK_
<org.apache.ibatis.datasource.unpooled.UnpooledDataSource: int getLoginTimeout()> -> _SINK_
<org.mmbase.module.database.MultiStatement: boolean execute(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlcurtime(java.util.List)> -> _SINK_
<com.datastax.driver.core.Requests$QueryProtocolOptions: int encodedSize()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: boolean execute(java.lang.String)> -> _SINK_
<com.mysql.jdbc.BlobFromLocator: long length()> -> _SINK_
<org.hibernate.dialect.MckoiDialect: org.hibernate.sql.CaseFragment createCaseFragment()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Clob: java.io.Reader getCharacterStream()> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator: java.lang.Object next()> -> _SINK_
<org.apache.commons.beanutils.ResultSetIterator: void set(java.lang.String,java.lang.Object)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: int getHoldability()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void setFetchSize(int)> -> _SINK_
<org.hibernate.JDBCException: int getErrorCode()> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLTransientException: void <init>(java.lang.String,java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.ResultSet: void <init>(long,long,com.mysql.jdbc.Connection,com.mysql.jdbc.Statement)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsMultipleResultSets()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.Map getMapFromProperties(java.sql.ResultSet)> -> _SINK_
<org.hibernate.engine.QueryParameters: void <init>()> -> _SINK_
<com.endeca.navigation.RefinementConfigBase: void parseShowCounts(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: gov.nih.nci.cananolab.dto.particle.AdvancedSampleBean findAdvancedSampleByAdvancedSearch(java.lang.String,gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<com.datastax.driver.core.RegularStatement: java.lang.String toString()> -> _SINK_
<org.springframework.jdbc.core.ResultSetSupportingSqlParameter: void <init>(java.lang.String,int)> -> _SINK_
<org.postgresql.core.TypeInfo: java.lang.String getJavaClass(int)> -> _SINK_
<org.mmbase.servlet.BridgeServlet: org.mmbase.bridge.Node getNode(org.mmbase.servlet.BridgeServlet$QueryParts)> -> _SINK_
<com.mysql.jdbc.Field: boolean isNotNull()> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.SampleQueryBean: java.lang.String getName()> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: void close()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsCoreSQLGrammar()> -> _SINK_
<org.mmbase.module.tools.ApplicationInstaller: int doKeyMergeNode(org.mmbase.module.core.MMObjectBuilder,org.mmbase.module.core.MMObjectNode,java.lang.String,org.mmbase.module.tools.ApplicationResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void addDataType(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setInt(int,int)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsResultSetType(int)> -> _SINK_
<org.hibernate.tool.hbm2ddl.IndexMetadata: void <init>(java.sql.ResultSet)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: org.hibernate.SQLQuery addEntity(java.lang.Class)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: void closeQueryStatement(java.sql.PreparedStatement,java.sql.ResultSet)> -> _SINK_
<org.postgresql.util.HStoreConverter: java.util.Map fromBytes(byte[],org.postgresql.core.Encoding)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.io.InputStream getAsciiStream(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateBytes(int,byte[])> -> _SINK_
<com.mysql.jdbc.log.LogFactory: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.castor.jdo.engine.DatabaseRegistry: boolean hasDatabaseRegistries()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: boolean next()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setConnectTimeout(int)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: com.mysql.jdbc.ServerPreparedStatement$BindValue getBinding(int,boolean)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: java.lang.String getURL()> -> _SINK_
<org.mmbase.module.database.JDBCProbe: void <clinit>()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setUnicodeStream(int,java.io.InputStream,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: java.lang.String getUrl()> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getTableTypes()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsCatalogsInTableDefinitions()> -> _SINK_
<com.mysql.jdbc.ResultSet: long getLongFromString(java.lang.String,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contract: void setTasks(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mongodb.DBPort$SaslAuthenticator: com.mongodb.CommandResult sendSaslContinue(int,byte[])> -> _SINK_
<org.springframework.jdbc.core.CallableStatementCallback: java.lang.Object doInCallableStatement(java.sql.CallableStatement)> -> _SINK_
<java.sql.ResultSet: void updateTime(int,java.sql.Time)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: antlr.collections.AST createIntoClause(java.lang.String,antlr.collections.AST)> -> _SINK_
<com.sforce.soap.enterprise.sobject.DashboardFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.lang.Object getObject(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void <init>(java.sql.Connection,com.mchange.v2.c3p0.ConnectionTester,boolean,boolean)> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void setDistinct(boolean)> -> _SINK_
<org.quartz.utils.JNDIConnectionProvider: java.sql.Connection getConnection()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Time getTime(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getColumnName(int)> -> _SINK_
<com.mysql.jdbc.Connection: void initializePropsFromServer()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Connection: void <init>(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Clob getClob(int)> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: java.lang.String[] getSqlAliasSuffixes()> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor$ResultAliasContext: org.hibernate.persister.collection.SQLLoadableCollection getCollectionPersister(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: java.lang.Object getArray(long,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.sql.ResultSet execSQLQuery(java.lang.String)> -> _SINK_
<org.postgresql.util.PGobject: java.lang.String getValue()> -> _SINK_
<org.hibernate.loader.Loader: java.sql.ResultSet getResultSet(java.sql.PreparedStatement,boolean,boolean,org.hibernate.engine.RowSelection,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setNull(java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: void <init>(com.mysql.jdbc.Connection,java.lang.String)> -> _SINK_
<org.hibernate.criterion.Example: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.Object getCurrentVersion(java.io.Serializable,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate: java.lang.Object executeQuery(oracle.toplink.queryframework.DatabaseQuery)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setObject(int,java.lang.Object)> -> _SINK_
<com.amazonaws.services.datapipeline.model.transform.QueryObjectsResultJsonUnmarshaller: java.lang.Object unmarshall(java.lang.Object)> -> _SINK_
<org.castor.jdo.conf.Database: org.castor.jdo.conf.Database unmarshal(java.io.Reader)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Lead: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<java.sql.CallableStatement: boolean getBoolean(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.net.URL getURL(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Date getDate(java.lang.String,java.util.Calendar)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: org.exolab.castor.jdo.engine.SQLFieldInfo[] getInfo()> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.AggregatedField addAggregatedField(org.mmbase.storage.search.Step,org.mmbase.bridge.Field,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void cancelRowUpdates()> -> _SINK_
<org.hibernate.engine.QueryParameters: boolean isCacheable()> -> _SINK_
<org.postgresql.core.BaseStatement: java.sql.ResultSet createDriverResultSet(org.postgresql.core.Field[],java.util.List)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setBlob(int,java.sql.Blob)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.List selectFiredTriggerRecords(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.DomainType: java.lang.String getSuperclassName()> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationServiceFacade: java.util.List query(org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.hibernate.persister.entity.Queryable: boolean isMultiTable()> -> _SINK_
<org.postgresql.core.PGStream: void setEncoding(org.postgresql.core.Encoding)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void selectClause(antlr.collections.AST)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.lang.Boolean getBooleanValue(java.sql.ResultSet,int,org.mmbase.core.CoreField)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.sql.Statement createStatement(int,int,int)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: java.util.Set getOwners(java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression: com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression withHashKeyValues(java.lang.Object)> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: org.hibernate.impl.SessionImpl openSession(java.sql.Connection,boolean,long,org.hibernate.Interceptor)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: void <init>(java.sql.DatabaseMetaData)> -> _SINK_
<org.postgresql.copy.CopyOut: byte[] readFromCopy()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.DisabledRefinementsConfig getNavDisabledRefinementsConfig()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsSchemasInTableDefinitions()> -> _SINK_
<org.apache.ibatis.type.BooleanTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: boolean isBeforeFirst()> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String constantToInterval(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.xa.jdbc3.AbstractJdbc3XADataSource: javax.sql.XAConnection getXAConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator: void setClobAsCharacterStream(java.sql.PreparedStatement,int,java.io.Reader,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<org.springframework.jdbc.core.namedparam.ParsedSql: int getTotalParameterCount()> -> _SINK_
<org.apache.ibatis.transaction.jdbc.JdbcTransaction: void commit()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: short getShort(java.lang.String)> -> _SINK_
<org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager: void setDefaultDataSource(javax.sql.DataSource)> -> _SINK_
<org.postgresql.core.v3.CopyOutImpl: void <init>()> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: org.hibernate.persister.entity.Loadable[] getEntityPersisters()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Location__c: void setHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateTime(java.lang.String,java.sql.Time)> -> _SINK_
<com.mysql.jdbc.MysqlDefs: int mysqlToJavaType(java.lang.String)> -> _SINK_
<org.postgresql.fastpath.Fastpath: void addFunctions(java.sql.ResultSet)> -> _SINK_
<org.exolab.castor.jdo.drivers.InformixQueryExpression: void addOrderByClause(java.lang.StringBuffer)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: void registerOutParameter(int,int)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void selectAtom(antlr.collections.AST)> -> _SINK_
<org.springframework.jdbc.support.lob.OracleLobHandler: java.io.InputStream getBlobAsBinaryStream(java.sql.ResultSet,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: void setHoldability(int)> -> _SINK_
<org.mmbase.util.ResourceLoader$NodeURLStreamHandler: java.util.Set getPaths(java.util.Set,java.util.regex.Pattern,boolean,boolean)> -> _SINK_
<org.apache.ibatis.jdbc.SqlRunner: void <init>(java.sql.Connection)> -> _SINK_
<com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase: void setPreferredTestQuery(java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ParameterMetaData: java.lang.String getParameterClassName(int)> -> _SINK_
<org.exolab.castor.persist.spi.CallbackInterceptor: void using(java.lang.Object,org.exolab.castor.jdo.Database)> -> _SINK_
<com.amazonaws.auth.AbstractAWSSigner: java.io.InputStream getBinaryRequestPayloadStream(com.amazonaws.Request)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: int getTransactionIsolation()> -> _SINK_
<org.postgresql.util.ByteConverter: double float8(byte[],int)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateBytes(int,byte[])> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: byte[] fastpathCall(int,org.postgresql.core.ParameterList,boolean)> -> _SINK_
<gov.nih.nci.system.dao.orm.ORMDAOImpl$2: java.lang.Object doInHibernate(org.hibernate.Session)> -> _SINK_
<javax.sql.CommonDataSource: void setLogWriter(java.io.PrintWriter)> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache: boolean prepareAssimilateNewStatement(java.sql.Connection)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(java.lang.Object[])> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void sendOneQuery(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,int,int,int)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void addSelectClass(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.SqlParameter: void <init>(java.lang.String,int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.Savepoint setSavepoint(java.lang.String)> -> _SINK_
<com.datastax.driver.core.QueryOptions: com.datastax.driver.core.ConsistencyLevel getConsistencyLevel()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.type.Type[] typeArray()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.math.BigDecimal getBigDecimal(java.lang.String)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLIntegrityConstraintViolationException: void <init>()> -> _SINK_
<com.mysql.jdbc.CompressedInputStream: int read()> -> _SINK_
<org.hibernate.engine.NamedSQLQueryDefinition: void <init>(java.lang.String,java.lang.String,java.util.List,boolean,java.lang.String,java.lang.Integer,java.lang.Integer,org.hibernate.FlushMode,org.hibernate.CacheMode,boolean,java.lang.String,java.util.Map,boolean)> -> _SINK_
<com.mysql.jdbc.log.CommonsLogger: void logDebug(java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager: void <init>(java.lang.String,javax.sql.ConnectionPoolDataSource,java.lang.String,int)> -> _SINK_
<org.mongodb.morphia.query.AbstractCriteria: void attach(org.mongodb.morphia.query.CriteriaContainerImpl)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: int executeUpdate()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: com.datastax.driver.core.querybuilder.Update$Options using(com.datastax.driver.core.querybuilder.Using)> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.QueryResultPage: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setObject(int,java.lang.Object)> -> _SINK_
<org.hibernate.stat.StatisticsImpl: void queryCachePut(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v1.db.sql.ResultSetUtils: java.lang.Class class$(java.lang.String)> -> _SINK_
<java.sql.CallableStatement: boolean wasNull()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$BatchResultHandler: void <init>(org.postgresql.jdbc2.AbstractJdbc2Statement,org.postgresql.core.Query[],org.postgresql.core.ParameterList[],int[],boolean)> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: void addInnerJoin(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: void cancelRowUpdates()> -> _SINK_
<com.mysql.jdbc.Connection: void checkAndCreatePerformanceHistogram()> -> _SINK_
<org.postgresql.core.PGStream: void ReceiveEOF()> -> _SINK_
<com.mysql.jdbc.CallableStatement: void <init>(com.mysql.jdbc.Connection,java.lang.String)> -> _SINK_
<org.hibernate.type.CustomType: java.lang.String objectToSQLString(java.lang.Object,org.hibernate.dialect.Dialect)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Date getDate(int)> -> _SINK_
<com.mysql.jdbc.Blob: java.io.OutputStream setBinaryStream(long)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: int computeBatchSize(int)> -> _SINK_
<org.apache.taglibs.standard.tag.rt.sql.DateParamTag: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: int executeUpdate()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: int getRow()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.Criterion getFunctionalizingEntityCriterion(gov.nih.nci.cananolab.dto.particle.CompositionQueryBean,java.lang.String)> -> _SINK_
<org.hibernate.loader.custom.CustomLoader: void <init>(org.hibernate.loader.custom.CustomQuery,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Statement: void <init>(org.postgresql.jdbc4.Jdbc4Connection,int,int,int)> -> _SINK_
<org.mongodb.morphia.query.UpdateResults: int getN()> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder: java.lang.String SQL()> -> _SINK_
<org.springframework.jdbc.object.SqlUpdate: int update(java.lang.Object[],org.springframework.jdbc.support.KeyHolder)> -> _SINK_
<org.springframework.jdbc.core.namedparam.MapSqlParameterSource: boolean hasValue(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.lob.DefaultLobHandler$DefaultLobCreator: void setClobAsCharacterStream(java.sql.PreparedStatement,int,java.io.Reader,int)> -> _SINK_
<org.apache.ibatis.builder.'annotation'.ProviderSqlSource: org.apache.ibatis.mapping.SqlSource createSqlSource(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.util.ServerController: java.lang.String buildOptionalCommandLine()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void insertStatement(antlr.collections.AST)> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder withinCenter(double,double,double)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setTimestamp(int,java.sql.Timestamp)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl within(double,double,double)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void closeOnCompletion()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$25: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: void query(org.springframework.jdbc.core.PreparedStatementCreator,org.springframework.jdbc.core.RowCallbackHandler)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: long getLong(int)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: short getShort(java.lang.String)> -> _SINK_
<org.postgresql.core.ParameterList: void clear()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void addWarning(java.sql.SQLWarning)> -> _SINK_
<org.apache.ibatis.datasource.unpooled.UnpooledDataSource$DriverProxy: java.sql.Connection connect(java.lang.String,java.util.Properties)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.sql.Date getDate(java.lang.String,java.util.Calendar)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.EtxSqlHandler: int getSupportLevel(int,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setNull(int,int,java.lang.String)> -> _SINK_
<org.apache.commons.lang.exception.ExceptionUtils: java.lang.Throwable getCauseUsingWellKnownTypes(java.lang.Throwable)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXADataSource: javax.sql.XAConnection wrapConnection(java.sql.Connection)> -> _SINK_
<entities.RepositoryAtomic: java.util.List query(java.lang.String,int,int,java.lang.Object[])> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Options: java.nio.ByteBuffer getRoutingKey()> -> _SINK_
<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.Buffer reuseAndReadPacket(com.mysql.jdbc.Buffer)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getLocatorFetchBufferSize()> -> _SINK_
<java.sql.ResultSet: void close()> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.CompositionQueryBean: void <init>()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Builder: void <init>(java.util.List)> -> _SINK_
<com.mchange.v2.c3p0.JndiRefForwardingDataSource: java.sql.Connection getConnection()> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLSyntaxErrorException: void <init>(java.lang.String,java.lang.String,int)> -> _SINK_
<org.hibernate.hql.ast.util.SessionFactoryHelper: org.hibernate.engine.JoinSequence createCollectionJoinSequence(org.hibernate.persister.collection.QueryableCollection,java.lang.String)> -> _SINK_
<org.apache.ibatis.mapping.MappedStatement: org.apache.ibatis.mapping.SqlCommandType getSqlCommandType()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateJobData(java.sql.Connection,org.quartz.JobDetail)> -> _SINK_
<org.springframework.jdbc.object.UpdatableSqlQuery: void <init>()> -> _SINK_
<org.hibernate.type.LongType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: java.lang.String getQueryString()> -> _SINK_
<com.datastax.driver.core.Requests$Query$2: void encode(com.datastax.driver.core.Requests$Query,org.jboss.netty.buffer.ChannelBuffer)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateRef(int,java.sql.Ref)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: int getType()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.net.URL getURL(int)> -> _SINK_
<org.postgresql.geometric.PGbox: void <init>(double,double,double,double)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String[] getTriggerNames(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: java.lang.String getFieldName(org.mmbase.core.CoreField)> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeManager: org.mmbase.bridge.NodeQuery createQuery()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setMaxFieldSize(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Clob: long position(java.sql.Clob,long)> -> _SINK_
<com.mysql.jdbc.ResultSet: int getFetchSize()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.DetachedCriteria getPointOfContactSubquery(gov.nih.nci.cananolab.dto.particle.SampleQueryBean,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseUsageAdvisor()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Dashboard: void setDashboardComponents(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.datastax.driver.core.querybuilder.BindMarker: java.lang.String toString()> -> _SINK_
<java.sql.ResultSet: void updateArray(java.lang.String,java.sql.Array)> -> _SINK_
<org.hibernate.type.AbstractBynaryType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLCustomQuery: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: long getLong(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void close()> -> _SINK_
<org.mmbase.module.database.MultiConnection: java.lang.String toString()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void commit()> -> _SINK_
<com.datastax.driver.core.exceptions.UnavailableException: void <init>(java.lang.String,java.lang.Throwable,com.datastax.driver.core.ConsistencyLevel,int,int)> -> _SINK_
<gov.nih.nci.security.authorization.domainobjects.ApplicationContext: java.lang.String getDatabasePassword()> -> _SINK_
<org.postgresql.fastpath.Fastpath: long getOID(java.lang.String,org.postgresql.fastpath.FastpathArg[])> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser$ParserContext: java.lang.String getEntitySuffixByAlias(java.lang.String)> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: void writeToCopy(byte[],int,int)> -> _SINK_
<org.hibernate.event.def.DefaultMergeEventListener: boolean isVersionChanged(java.lang.Object,org.hibernate.event.EventSource,org.hibernate.persister.entity.EntityPersister,java.lang.Object)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute()> -> _SINK_
<java.sql.Array: java.lang.String getBaseTypeName()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void <init>(java.sql.CallableStatement)> -> _SINK_
<com.sforce.soap.enterprise.QueryAll_element: void load(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.criterion.Example: org.hibernate.EntityMode getEntityMode(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Builder: com.datastax.driver.core.querybuilder.Delete 'from'(java.lang.String)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationService: java.util.List query(gov.nih.nci.system.query.cql.CQLQuery,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setNull(int,int)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: boolean rowUpdated()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void moveToInsertRow()> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqldayofweek(java.util.List)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setBytesNoEscapeNoQuotes(int,byte[])> -> _SINK_
<org.hibernate.criterion.PropertyProjection: org.hibernate.type.Type[] getTypes(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: java.sql.Connection getConnection()> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)> -> _SINK_
<gov.nih.nci.system.query.SDKQueryResult: java.lang.Boolean isObjectResult()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$IteratorWithCleanup: java.lang.Object next()> -> _SINK_
<org.hibernate.sql.InFragment: org.hibernate.sql.InFragment setColumn(java.lang.String)> -> _SINK_
<org.exolab.castor.persist.spi.PersistenceQuery: boolean absolute(int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setSQLXML(int,java.sql.SQLXML)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setObject(int,java.lang.Object,int,int)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: void bind(int,java.lang.Object,int,int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: java.sql.SQLXML getSQLXML(int)> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: org.hibernate.engine.NamedQueryDefinition getNamedQuery(java.lang.String)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23ConnectionPoolDataSource: void writeObject(java.io.ObjectOutputStream)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select: java.lang.StringBuilder buildQueryString(java.util.List)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: int executeUpdate(java.lang.String,java.lang.String[])> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.io.File getBinaryFile(org.mmbase.module.core.MMObjectNode,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.CacheManager: void <init>(org.exolab.castor.jdo.Database,org.castor.persist.TransactionContext,org.exolab.castor.persist.LockEngine)> -> _SINK_
<com.endeca.navigation.ENEQuery: boolean containsQuery()> -> _SINK_
<org.mongodb.morphia.query.Shape: org.mongodb.morphia.query.Shape$Point[] getPoints()> -> _SINK_
<org.hibernate.dialect.lock.UpdateLockingStrategy: void lock(java.io.Serializable,java.lang.Object,java.lang.Object,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setByte(java.lang.String,byte)> -> _SINK_
<entities.test.EntityTestCase: void setField(java.lang.Object,java.lang.reflect.Field,java.lang.Object[],int)> -> _SINK_
<com.mysql.jdbc.Buffer: int readLongInt()> -> _SINK_
<com.sforce.soap.enterprise.sobject.DashboardComponentFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setTime(java.lang.String,java.sql.Time)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: int getResultSetConcurrency()> -> _SINK_
<gov.nih.nci.cagrid.data.enumeration.stubs.EnumerationDataServicePortType: gov.nih.nci.cagrid.data.enumeration.stubs.EnumerationQueryResponse enumerationQuery(gov.nih.nci.cagrid.data.enumeration.stubs.EnumerationQueryRequest)> -> _SINK_
<org.hibernate.loader.JoinWalker: void walkCollectionTree(org.hibernate.persister.collection.QueryableCollection,java.lang.String,java.lang.String,int)> -> _SINK_
<org.postgresql.ds.common.PGObjectFactory: java.lang.Object loadConnectionPool(javax.naming.Reference)> -> _SINK_
<com.endeca.navigation.analytics.AnalyticsQuery: java.lang.String toString()> -> _SINK_
<org.postgresql.util.Base64: java.lang.String encodeBytes(byte[],int,int,int)> -> _SINK_
<org.hibernate.hql.ast.tree.DotNode: void dereferenceEntityIdentifier(java.lang.String,org.hibernate.hql.ast.tree.DotNode)> -> _SINK_
<org.hibernate.hql.QueryTranslator: org.hibernate.hql.ParameterTranslations getParameterTranslations()> -> _SINK_
<com.mysql.jdbc.MysqlIO: void skipPacket()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Event: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mysql.jdbc.RowData: boolean isDynamic()> -> _SINK_
<org.hibernate.loader.collection.CollectionLoader: void <init>(org.hibernate.persister.collection.QueryableCollection,org.hibernate.engine.SessionFactoryImplementor,java.util.Map)> -> _SINK_
<org.castor.jdo.conf.DatabaseDescriptor$3: void <init>(org.castor.jdo.conf.DatabaseDescriptor)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<com.endeca.navigation.ENEQuery: boolean containsERecsQuery()> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DataSourceWrapper: void setDriverClassName(java.lang.String)> -> _SINK_
<org.apache.ibatis.jdbc.RuntimeSqlException: void <init>(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Date getDate(int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.SuspendableXAConnection: java.sql.Connection getConnection()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.LogicalOperator: java.lang.String getValue()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setLong(int,long)> -> _SINK_
<org.springframework.jdbc.object.MappingSqlQueryWithParameters: org.springframework.jdbc.core.RowMapper newRowMapper(java.lang.Object[],java.util.Map)> -> _SINK_
<org.postgresql.core.Field: int getTableOid()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$9: void <init>(com.mysql.jdbc.DatabaseMetaData,com.mysql.jdbc.DatabaseMetaData$IteratorWithCleanup,java.sql.Statement,java.lang.String,java.lang.String[],java.util.ArrayList)> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.QueryImpl: void setCriteria(gov.nih.nci.logging.api.applicationservice.SearchCriteria)> -> _SINK_
<org.hibernate.dialect.H2Dialect$1: java.lang.String extractConstraintName(java.sql.SQLException)> -> _SINK_
<org.hibernate.dialect.function.SQLFunction: boolean hasParenthesesIfNoArguments()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void selectExpr(antlr.collections.AST)> -> _SINK_
<org.postgresql.core.v3.Portal: void close()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setDate(int,java.sql.Date,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseOldAliasMetadataBehavior()> -> _SINK_
<org.postgresql.geometric.PGlseg: void <init>()> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLSyntaxErrorException: void <init>()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl exists()> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch: void <init>(com.datastax.driver.core.RegularStatement[],boolean)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate: java.util.List findByNamedQuery(java.lang.String,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: void setDatabaseName(java.lang.String)> -> _SINK_
<org.mmbase.servlet.BridgeServlet$QueryParts: java.lang.String getNodeIdentifier()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List query(java.lang.String,java.lang.Object[],int[],org.springframework.jdbc.core.RowMapper)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.sql.Blob getBlobValue(org.mmbase.module.core.MMObjectNode,org.mmbase.core.CoreField,boolean)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Clob getClob(int)> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringEncoder: void addParam(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.axis.transport.http.QSWSDLHandler: void invoke(org.apache.axis.MessageContext)> -> _SINK_
<org.postgresql.PGConnection: org.postgresql.fastpath.Fastpath getFastpathAPI()> -> _SINK_
<com.mysql.jdbc.Buffer: void writeBytesNoNull(byte[])> -> _SINK_
<org.mongodb.morphia.converters.TimestampConverter: java.lang.Object encode(java.lang.Object,org.mongodb.morphia.mapping.MappedField)> -> _SINK_
<org.apache.ibatis.type.ObjectTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.drivers.InformixQueryExpression: void addJoin(java.lang.StringBuffer,org.exolab.castor.jdo.drivers.JDBCQueryExpression$Join)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setDate(int,java.sql.Date)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setShort(java.lang.String,short)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.lang.String getString(int)> -> _SINK_
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)> -> _SINK_
<com.sforce.soap.enterprise.QueryResult: void load(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.jdbc.ConnectionManager: void manualReconnect(java.sql.Connection)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: java.lang.String[][] getColumnNames()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.math.BigDecimal toBigDecimal(java.lang.String,int)> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteria: void setSourceObjectName(java.lang.String)> -> _SINK_
<org.hibernate.loader.collection.BasicCollectionJoinWalker: void <init>(org.hibernate.persister.collection.QueryableCollection,int,java.lang.String,org.hibernate.engine.SessionFactoryImplementor,java.util.Map)> -> _SINK_
<org.mmbase.bridge.Query: void setConstraint(org.mmbase.storage.search.Constraint)> -> _SINK_
<org.springframework.jdbc.datasource.DriverManagerDataSource: java.sql.Connection getConnectionFromDriverManager()> -> _SINK_
<org.hibernate.criterion.PropertySubqueryExpression: void <init>(java.lang.String,java.lang.String,java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: java.lang.Object readBinaryArray(int,int)> -> _SINK_
<org.hibernate.impl.CollectionFilterImpl: void <init>(java.lang.String,java.lang.Object,org.hibernate.engine.SessionImplementor,org.hibernate.engine.query.ParameterMetadata)> -> _SINK_
<com.ibatis.sqlmap.engine.transaction.TransactionConfig: void setDataSource(javax.sql.DataSource)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsMultipleTransactions()> -> _SINK_
<entities.dao.hibernate.DAOHibernateNestedTransactionSelectNew: java.util.List query(java.lang.String,int,int,java.lang.Object[])> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsResultSetHoldability(int)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateNCharacterStream(java.lang.String,java.io.Reader)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: java.lang.String getKeyspace()> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: void testQuery_WithResults()> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getNavMerchRuleFilter()> -> _SINK_
<org.hibernate.loader.Loader: java.lang.Object sequentialLoad(java.sql.ResultSet,org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters,boolean,org.hibernate.engine.EntityKey)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void clearWarnings()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setLong(int,long)> -> _SINK_
<org.hibernate.criterion.AliasedProjection: java.lang.String toGroupSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setPartnersFrom(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.QueryTagSupport: void setParameters(java.sql.PreparedStatement,java.util.List)> -> _SINK_
<org.exolab.castor.jdo.drivers.HsqlQueryExpression: void <init>(org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String[] getElementColumnAliases(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: int getQueryTimeout()> -> _SINK_
<org.postgresql.core.Parser: boolean isSpace(char)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean othersUpdatesAreVisible(int)> -> _SINK_
<javax.sql.CommonDataSource: void setLoginTimeout(int)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate: java.lang.Object executeNamedQuery(java.lang.Class,java.lang.String,java.lang.Object[],boolean)> -> _SINK_
<com.mysql.jdbc.CallableStatement: byte getByte(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Array getArray(java.lang.String)> -> _SINK_
<org.postgresql.core.v2.SimpleParameterList: void setNull(int,int)> -> _SINK_
<org.hibernate.type.BigIntegerType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void moveToCurrentRow()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseSqlStateCodes()> -> _SINK_
<com.sforce.soap.enterprise.QueryAllResponse_element: void writeFields(com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.hql.ast.tree.SqlFragment: boolean hasFilterCondition()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateDouble(int,double)> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: int[] getNamedParameterLocs(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.net.URL getURL(java.lang.String)> -> _SINK_
<org.apache.commons.dbcp.BasicDataSource: java.sql.Connection getConnection()> -> _SINK_
<org.castor.jdo.conf.Database: java.lang.String getEngine()> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: java.lang.String toSql(org.mmbase.storage.search.SearchQuery,org.mmbase.storage.search.implementation.database.SqlHandler)> -> _SINK_
<org.hibernate.sql.Insert: org.hibernate.dialect.Dialect getDialect()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsMultipleTransactions()> -> _SINK_
<org.apache.ibatis.logging.jdbc.ResultSetLogger: void printColumnValues(int)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$MainFrame: void <init>(org.exolab.castor.gui.QueryAnalyser,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationServiceFacade: java.util.List query(gov.nih.nci.system.query.hibernate.HQLCriteria,java.lang.String)> -> _SINK_
<java.sql.PreparedStatement: void setBlob(int,java.sql.Blob)> -> _SINK_
<com.mysql.jdbc.Connection: boolean canHandleAsServerPreparedStatement(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: boolean wasNull()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void registerOutParameter(java.lang.String,int,int)> -> _SINK_
<com.mysql.jdbc.Statement: void getBatchedGeneratedKeys(java.sql.Statement)> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: long getHandledRowCount()> -> _SINK_
<com.sforce.soap.enterprise.QueryMoreResponse_element: void setResult(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: java.io.Reader getNCharacterStream(int)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: org.hibernate.hql.ParameterTranslations getParameterTranslations()> -> _SINK_
<org.hibernate.sql.Update: org.hibernate.sql.Update addWhereColumn(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.StringUtils: byte[] escapeEasternUnicodeByteStream(byte[],java.lang.String,int,int)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryResult: java.lang.String toString()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setTime(java.lang.String,java.sql.Time,java.util.Calendar)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23SimpleDataSource: void <init>()> -> _SINK_
<org.postgresql.copy.PGCopyInputStream: boolean isActive()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: byte[] getBytes(int)> -> _SINK_
<org.hibernate.lob.SerializableClob: java.io.OutputStream setAsciiStream(long)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.io.Reader getCharacterStream(int)> -> _SINK_
<org.hibernate.hql.ast.tree.HqlSqlWalkerNode: void <init>()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment remove(java.lang.String,java.lang.Object)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate$7: void <init>(org.springframework.orm.toplink.TopLinkTemplate,boolean,java.lang.Class,oracle.toplink.queryframework.Call)> -> _SINK_
<org.hibernate.engine.ForeignKeys: boolean isTransient(java.lang.String,java.lang.Object,java.lang.Boolean,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.amazonaws.auth.QueryStringSigner: java.lang.String getFormattedTimestamp(int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: int executeUpdate(java.lang.String,int[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.UserProfileFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: java.lang.Object load(java.lang.Class,java.lang.Object,java.lang.Object)> -> _SINK_
<org.hibernate.cache.StandardQueryCache: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String[] selectJobsInGroup(java.sql.Connection,java.lang.String)> -> _SINK_
<org.mmbase.bridge.Query: boolean markUsed()> -> _SINK_
<org.springframework.orm.hibernate3.HibernateQueryException: void <init>(org.hibernate.QueryException)> -> _SINK_
<org.mongodb.morphia.query.UpdateException: void <init>(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.CompositionQueryBean: java.lang.String getEntityType()> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.FieldValueConstraint createConstraint(org.mmbase.storage.search.StepField,int,java.lang.Object,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$LongConnectionProperty: void setValue(long)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.net.URL getURL(int)> -> _SINK_
<org.postgresql.copy.PGCopyInputStream: long getHandledRowCount()> -> _SINK_
<gov.nih.nci.system.util.WritableApiApplicationServiceMethodHelper: java.util.Map getDomainObjectName(org.aopalliance.intercept.MethodInvocation)> -> _SINK_
<org.hibernate.impl.ScrollableResultsImpl: boolean scroll(int)> -> _SINK_
<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.Buffer readPacket()> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcDaoImpl$AclsByObjectIdentityMapping: java.lang.Object mapRow(java.sql.ResultSet,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getPreparedStatementCacheSqlLimit()> -> _SINK_
<com.mchange.v2.c3p0.WrapperConnectionPoolDataSource: java.lang.String getUser()> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.ERecSortKeyList getNavActiveSortKeys()> -> _SINK_
<com.mchange.v2.c3p0.stmt.MemoryCoalescedStatementCacheKey: com.mchange.v2.c3p0.stmt.StatementCacheKey _find(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$10: void <init>(org.springframework.orm.ibatis.SqlMapClientTemplate,java.lang.String,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.log.Jdk14Logger: void logTrace(java.lang.Object,java.lang.Throwable)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool: int getNumConnections()> -> _SINK_
<com.mysql.jdbc.Connection: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.SetDataSourceTag: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.hibernate.cache.QueryCache: void clear()> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.sql.CallableStatement prepareCallableStatement(java.lang.String)> -> _SINK_
<java.sql.SQLClientInfoException: void <init>(java.lang.String,java.lang.String,java.util.Map,java.lang.Throwable)> -> _SINK_
<org.hibernate.type.Type: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.hibernate.lob.SerializableClob: long position(java.sql.Clob,long)> -> _SINK_
<org.postgresql.largeobject.LargeObject: byte[] read(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: void releaseSavepoint(java.sql.Savepoint)> -> _SINK_
<com.amazonaws.auth.AbstractAWSSigner: java.lang.String getRequestPayloadWithoutQueryParams(com.amazonaws.Request)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean storesLowerCaseIdentifiers()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setSocketFactoryClassName(java.lang.String)> -> _SINK_
<org.springframework.jdbc.object.StoredProcedure: java.util.Map execute(java.util.Map)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.TypeAttribute: boolean equals(java.lang.Object)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.io.InputStream getUnicodeStream(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLFieldInfo: boolean isMulti()> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: org.postgresql.core.Field[] getFields()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setCharacterStream(int,java.io.Reader,int)> -> _SINK_
<com.datastax.driver.core.QueryTrace: java.util.List getEvents()> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementFactory: org.hibernate.hql.ast.tree.FromElement evaluateFromElementPath(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseInformationSchema()> -> _SINK_
<org.hibernate.criterion.IlikeExpression: org.hibernate.engine.TypedValue[] getTypedValues(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.TransactionTagSupport: void doCatch(java.lang.Throwable)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.lang.String escapeFunction(java.lang.String,java.lang.String,boolean)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void addGroupsToUser(java.lang.String,java.lang.String[])> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: int[] getNamedParameterLocs(java.lang.String)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.bridge.Query setDistinct(boolean)> -> _SINK_
<org.apache.ibatis.executor.Executor: java.util.List query(org.apache.ibatis.mapping.MappedStatement,java.lang.Object,org.apache.ibatis.session.RowBounds,org.apache.ibatis.session.ResultHandler)> -> _SINK_
<org.springframework.orm.ibatis.support.SqlMapClientDaoSupport: void setDataSource(javax.sql.DataSource)> -> _SINK_
<org.springframework.jdbc.support.incrementer.DB2SequenceMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String)> -> _SINK_
<org.postgresql.copy.CopyOperation: int getFormat()> -> _SINK_
<java.sql.Connection: boolean isReadOnly()> -> _SINK_
<org.springframework.jdbc.core.namedparam.MapSqlParameterSource: void <init>(java.lang.String,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setNullCatalogMeansCurrent(boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteSimpleTrigger(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DataSourceWrapper: void setLoginTimeout(int)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ParameterMetaData: int isNullable(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setCursorName(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateDouble(int,double)> -> _SINK_
<org.postgresql.core.v2.ConnectionFactoryImpl: void runInitialQueries(org.postgresql.core.v2.ProtocolConnectionImpl,java.util.Properties,org.postgresql.core.Logger)> -> _SINK_
<org.mmbase.storage.search.implementation.database.MSSqlSqlHandler: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getDumpQueriesOnException()> -> _SINK_
<org.postgresql.core.ParameterList: void setBytea(int,byte[],int,int)> -> _SINK_
<org.mmbase.cache.ReleaseStrategy: boolean doEvaluate(org.mmbase.core.event.NodeEvent,org.mmbase.storage.search.SearchQuery,java.util.List)> -> _SINK_
<com.mysql.jdbc.Connection: void addToTablesAccessedHistogram(long,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.lang.String getString(int)> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: java.lang.String[] getManyKey()> -> _SINK_
<org.hibernate.criterion.IlikeExpression: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsNonNullableColumns()> -> _SINK_
<org.postgresql.Driver: java.sql.Connection makeConnection(java.lang.String,java.util.Properties)> -> _SINK_
<org.springframework.jdbc.support.incrementer.HsqlMaxValueIncrementer: void afterPropertiesSet()> -> _SINK_
<com.endeca.navigation.ENEQuery: void setAnalyticsQuery(com.endeca.navigation.analytics.AnalyticsQuery)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationServiceFacade: java.util.List query(gov.nih.nci.system.query.cql.CQLQuery)> -> _SINK_
<test.gov.nih.nci.security.hibernate.annotations.AtFilterAnnotationsTest: void primeDatabase()> -> _SINK_
<java.sql.PreparedStatement: void setNull(int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setBoolean(int,boolean)> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: java.lang.Object getNestedQueryMappingValue(java.sql.ResultSet,org.apache.ibatis.reflection.MetaObject,org.apache.ibatis.mapping.ResultMapping,org.apache.ibatis.executor.loader.ResultLoaderMap)> -> _SINK_
<com.datastax.driver.core.exceptions.InvalidQueryException: void <init>(java.lang.String,java.lang.Throwable)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: void setFetchDirection(int)> -> _SINK_
<org.mongodb.morphia.query.UpdateResults: com.mongodb.WriteResult getWriteResult()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateNCharacterStream(java.lang.String,java.io.Reader,long)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Time getNativeTime(int,java.util.Calendar,java.util.TimeZone,boolean)> -> _SINK_
<java.sql.Statement: java.sql.SQLWarning getWarnings()> -> _SINK_
<org.postgresql.core.Oid: int valueOf(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Time getTime(java.lang.String,java.util.Calendar)> -> _SINK_
<org.postgresql.jdbc3.PSQLSavepoint: void invalidate()> -> _SINK_
<org.castor.persist.AbstractTransactionContext: void markCreate(org.exolab.castor.persist.ClassMolder,java.lang.Object,org.exolab.castor.persist.OID)> -> _SINK_
<com.mongodb.OutMessage: void writeQuery(com.mongodb.DBObject,int,int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setClob(java.lang.String,java.io.Reader,long)> -> _SINK_
<gov.nih.nci.cagrid.cqlresultset.CQLQueryResults: void setAttributeResult(gov.nih.nci.cagrid.cqlresultset.CQLAttributeResult[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.DashboardFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getDatabaseMinorVersion()> -> _SINK_
<org.postgresql.util.Base64: byte[] decode(byte[],int,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$StatementResultHandler: void handleWarning(java.sql.SQLWarning)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ReportFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.engine.query.HQLQueryPlan: org.hibernate.engine.query.ParameterMetadata getParameterMetadata()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: boolean previous()> -> _SINK_
<java.sql.Statement: int getFetchDirection()> -> _SINK_
<org.postgresql.core.ParameterList: void setLiteralParameter(int,java.lang.String,int)> -> _SINK_
<org.hibernate.dialect.function.AnsiTrimEmulationFunction: void <clinit>()> -> _SINK_
<org.jboss.resource.adapter.jdbc.vendor.MySQLExceptionSorter: boolean isExceptionFatal(java.sql.SQLException)> -> _SINK_
<org.springframework.jdbc.support.SQLStateSQLExceptionTranslator: org.springframework.dao.DataAccessException translate(java.lang.String,java.lang.String,java.sql.SQLException)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl addGeoCriteria(org.mongodb.morphia.query.FilterOperator,java.lang.Object,java.util.Map)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: boolean execute(java.lang.String,int[])> -> _SINK_
<org.exolab.castor.jdo.Database: org.exolab.castor.jdo.OQLQuery getOQLQuery(java.lang.String)> -> _SINK_
<org.apache.ibatis.type.ByteTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setBoolean(int,boolean)> -> _SINK_
<org.mmbase.module.database.MultiStatement: int getFetchDirection()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$33: void execute(java.sql.Connection)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeDp(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$73: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: boolean isIntegral(org.hibernate.type.Type)> -> _SINK_
<com.mysql.jdbc.RowData: boolean isLast()> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.UpdateTag: int doStartTag()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$51: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void clearParameters()> -> _SINK_
<com.sun.jersey.api.uri.UriBuilderImpl: void encodeQuery()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.SQLWarning getWarnings()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setAssets(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void assignProtectionElements(java.lang.String,java.lang.String[])> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory: java.lang.Object instantiateChainedHandler(java.lang.Class,java.lang.Object)> -> _SINK_
<com.endeca.navigation.ENEQuery: boolean containsERecQuery()> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.NestedCriteria2HQL: boolean condition3(gov.nih.nci.system.query.nestedcriteria.NestedCriteria)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setProfileSQL(boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.UserFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getStringFunctions()> -> _SINK_
<org.hibernate.exception.SQLStateConverter: void <init>(org.hibernate.exception.ViolatedConstraintNameExtracter)> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$CollectionAssignment: boolean containsBindMarker()> -> _SINK_
<org.mmbase.servlet.BridgeServlet$QueryParts: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: void afterLast()> -> _SINK_
<org.hibernate.tool.hbm2ddl.TableMetadata: void addIndex(java.sql.ResultSet)> -> _SINK_
<com.mysql.jdbc.SingleByteCharsetConverter: java.lang.String toString(byte[])> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSourceFactory: javax.sql.DataSource createReferenceable(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: int getFetchSize()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setQueryTimeout(int)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl$3: void handleCompletion()> -> _SINK_
<org.springframework.jdbc.datasource.DelegatingDataSource: void setTargetDataSource(javax.sql.DataSource)> -> _SINK_
<org.hibernate.sql.JoinFragment: boolean addCondition(java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DataSourceWrapper: void setJdbcURL(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsOuterJoins()> -> _SINK_
<org.mmbase.storage.search.SearchQuery: java.util.List getSteps()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: com.datastax.driver.core.Statement setConsistencyLevel(com.datastax.driver.core.ConsistencyLevel)> -> _SINK_
<org.postgresql.core.Field: java.lang.String getSchemaName()> -> _SINK_
<org.postgresql.copy.PGCopyInputStream: void <init>(org.postgresql.copy.CopyOut)> -> _SINK_
<com.mysql.jdbc.util.ServerController: void <init>(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CollaborationGroup: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<entities.Repository: java.util.List get(java.lang.String,int,int,java.lang.Object[])> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setDu(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlConnectionPoolDataSource: javax.sql.PooledConnection getPooledConnection()> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: void remove(java.io.Serializable,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.mmbase.storage.search.implementation.database.ChainedSqlHandler: void <init>(org.mmbase.storage.search.implementation.database.SqlHandler)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator: void <init>()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Report: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.postgresql.util.Base64: java.lang.String encodeBytes(byte[],int,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.sql.Statement createStatement(int,int,int)> -> _SINK_
<gov.nih.nci.system.dao.QueryException: void <init>(java.lang.String,java.lang.Throwable)> -> _SINK_
<org.springframework.jdbc.core.JdbcOperations: java.util.List query(java.lang.String,java.lang.Object[],org.springframework.jdbc.core.RowMapper)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void deleteRow()> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion gtAll(java.lang.Object,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void compile(java.lang.String,java.util.Map,boolean)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.CallableStatement prepareCall(java.lang.String)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: java.lang.String asSql()> -> _SINK_
<org.postgresql.core.ProtocolConnection: boolean getStandardConformingStrings()> -> _SINK_
<org.hibernate.engine.QueryParameters: boolean hasAutoDiscoverScalarTypes()> -> _SINK_
<com.mysql.jdbc.CharsetMapping: int getNumberOfCharsetsConfigured()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setFetchSize(int)> -> _SINK_
<org.mmbase.module.database.MultiPool: org.mmbase.module.database.MultiConnection getMultiConnection()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Group: void setQueueSobjects(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.cananolab.service.protocol.impl.ProtocolServiceLocalImpl: java.util.List findCharacterizationsByProtocolId(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setObject(int,java.lang.Object,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.QuantityForecast: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.dialect.function.SQLFunctionRegistry: void <init>(org.hibernate.dialect.Dialect,java.util.Map)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Location__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<java.sql.DatabaseMetaData: int getDriverMinorVersion()> -> _SINK_
<org.hibernate.engine.SessionFactoryImplementor: org.hibernate.classic.Session openSession(java.sql.Connection,boolean,boolean,org.hibernate.ConnectionReleaseMode)> -> _SINK_
<java.sql.CallableStatement: void setBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavDisabledRefinementsConfig(com.endeca.navigation.DisabledRefinementsConfig)> -> _SINK_
<com.mysql.jdbc.ExportControlled: boolean enabled()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: java.lang.Class elementOidToClass(int)> -> _SINK_
<com.mysql.jdbc.Util: java.lang.String stackTraceToString(java.lang.Throwable)> -> _SINK_
<org.exolab.castor.jdo.engine.LocalDatabaseImpl: void rollback()> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: void fetch(org.hibernate.hql.classic.QueryTranslatorImpl,java.lang.String)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: int writeIndex(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: byte[] getBytes(int)> -> _SINK_
<org.postgresql.core.Utils: byte[] encodeUTF8(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setMaxRows(int)> -> _SINK_
<entities.Repository: java.util.List get(java.lang.String,int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.DefaultConnectionTester: int activeCheckConnection(java.sql.Connection,java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.impl.SampleServiceLocalImpl: void updatePOCAssociatedWithCharacterizations(java.lang.String,java.lang.Long,java.lang.Long)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.FieldNullConstraint createConstraint(org.mmbase.storage.search.StepField)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Milestone__Feed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.core.v2.ConnectionFactoryImpl: void doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,org.postgresql.core.Logger)> -> _SINK_
<org.mmbase.bridge.util.Queries: org.mmbase.bridge.NodeQuery createRelationNodesQuery(org.mmbase.bridge.Node,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.RoleNameResolver: java.util.List getUmlAssociations(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getPrepStmtCacheSize()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementLoad: java.lang.String getLoadStatement()> -> _SINK_
<gov.nih.nci.cananolab.system.dao.orm.CaNanoLabORMDAOImpl: java.util.List directSQL(java.lang.String,java.lang.String[],java.lang.Object[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsUnion()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: java.lang.Object[] toResultRow(java.lang.Object[])> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: boolean wasNull()> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.AdvancedSampleBean: java.util.Map getAttributeMap()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.RoleNameResolver: java.lang.String getRoleName(java.lang.String,gov.nih.nci.cagrid.cqlquery.Association)> -> _SINK_
<com.mysql.jdbc.ResultSet: float getFloat(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int insertFiredTrigger(java.sql.Connection,org.quartz.Trigger,java.lang.String,org.quartz.JobDetail)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseNanosForElapsedTime()> -> _SINK_
<org.postgresql.core.ProtocolConnection: java.lang.String getUser()> -> _SINK_
<org.apache.ibatis.type.SqlTimeTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.FeedItem: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getDatabaseProductName()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxRowSize()> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setFloat(java.lang.String,float)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.lang.String getTimeDateFunctions()> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: void setReadOnly(boolean)> -> _SINK_
<org.hibernate.cfg.Settings: void setQuerySubstitutions(java.util.Map)> -> _SINK_
<org.hibernate.tool.hbm2ddl.SchemaExport: void importScript(java.io.Reader,java.sql.Statement)> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: int clampedGetLength(com.mysql.jdbc.Field)> -> _SINK_
<java.sql.DatabaseMetaData: boolean ownInsertsAreVisible(int)> -> _SINK_
<org.postgresql.core.Utils: java.lang.StringBuffer appendEscapedIdentifier(java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.springframework.orm.hibernate3.SessionFactoryUtils: org.hibernate.Session getNewSession(org.hibernate.SessionFactory,org.hibernate.Interceptor)> -> _SINK_
<com.mysql.jdbc.Connection: com.mysql.jdbc.PreparedStatement clientPrepareStatement(java.lang.String,int,int,boolean)> -> _SINK_
<org.postgresql.Driver: java.util.Properties parseURL(java.lang.String,java.util.Properties)> -> _SINK_
<org.hibernate.hql.ast.tree.BetweenOperatorNode: void <init>()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String generateSnapshotSelectString()> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean: void updateQueries()> -> _SINK_
<com.mysql.jdbc.Buffer: long readLength()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: void access$000(com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData)> -> _SINK_
<org.hibernate.type.BooleanType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXid: void <init>(byte[],byte[],int)> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl$AclPermissionDelete: void <init>(org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl,javax.sql.DataSource)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void setFetchDirection(int)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setInt(int,int)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.ResultImpl: void <init>(java.sql.ResultSet,int,int)> -> _SINK_
<org.castor.jdo.conf.JdoConf: org.castor.jdo.conf.Database getDatabase(int)> -> _SINK_
<org.hibernate.param.PositionalParameterSpecification: int bind(java.sql.PreparedStatement,org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor,int)> -> _SINK_
<org.apache.ibatis.type.ObjectTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<org.mmbase.module.database.JDBC: void checkTime()> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.TransactionTagSupport: int doEndTag()> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter: void <init>(java.util.Locale,java.lang.String,boolean)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setObject(int,java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxConnections()> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.Step addStep(org.mmbase.bridge.NodeManager)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void dumpCloseForTestcase()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateByte(int,byte)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodesFactory: void <init>()> -> _SINK_
<org.mmbase.bridge.util.TreeList: void doTest(java.io.Writer,org.mmbase.bridge.NodeQuery)> -> _SINK_
<com.sforce.soap.enterprise.QueryAll_element: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: int executeUpdate(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.lob.DefaultLobHandler: byte[] getBlobAsBytes(java.sql.ResultSet,int)> -> _SINK_
<org.apache.http.client.utils.URIBuilder: java.lang.String formatQuery(java.util.List,java.nio.charset.Charset)> -> _SINK_
<org.postgresql.core.v2.FastpathParameterList: void copyStream(org.postgresql.core.PGStream,org.postgresql.util.StreamWrapper)> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression: java.lang.String getIndexName()> -> _SINK_
<org.hibernate.sql.OracleJoinFragment: boolean addCondition(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean absolute(int)> -> _SINK_
<com.datastax.driver.core.QueryOptions: void register(com.datastax.driver.core.Cluster$Manager)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: long getLong(java.lang.String)> -> _SINK_
<org.postgresql.ds.common.PGObjectFactory: java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)> -> _SINK_
<com.mysql.jdbc.Statement: void setMaxRows(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsGroupByBeyondSelect()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4SQLXML: java.io.Writer setCharacterStream()> -> _SINK_
<org.hibernate.sql.Update: java.lang.String toStatementString()> -> _SINK_
<org.hibernate.hql.ast.util.JoinProcessor$1: boolean includeSubclasses(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: com.datastax.driver.core.Statement disableTracing()> -> _SINK_
<org.exolab.castor.jdo.engine.LocalDatabaseImpl: void close()> -> _SINK_
<org.springframework.jdbc.support.SQLStateSQLExceptionTranslator: java.lang.String getSqlState(java.sql.SQLException)> -> _SINK_
<org.hibernate.type.ManyToOneType: java.lang.Object hydrate(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<test.gov.nih.nci.logging.api.persistence.TestSQLInserts: gov.nih.nci.logging.api.domain.LogMessage getLogMessage_ObjectState()> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: int getPGType(java.lang.String)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNmpt(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.Query find(java.lang.String,java.lang.Class)> -> _SINK_
<org.springframework.jdbc.core.BatchPreparedStatementSetter: void setValues(java.sql.PreparedStatement,int)> -> _SINK_
<org.hibernate.tool.hbm2ddl.TableMetadata: void initColumns(java.sql.DatabaseMetaData)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setString(int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateCharacterStream(int,java.io.Reader,int)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addTypeConstraints(org.mmbase.bridge.NodeQuery,java.util.List)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateJobDetail(java.sql.Connection,org.quartz.JobDetail)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$ErrorTrackingResultHandler: boolean hasErrors()> -> _SINK_
<org.hibernate.id.insert.AbstractReturningDelegate: java.io.Serializable executeAndExtract(java.sql.PreparedStatement)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: boolean getMoreResults(int)> -> _SINK_
<org.hibernate.engine.query.ParamLocationRecognizer$NamedParameterDescription: int[] buildPositionsArray()> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: boolean isReadOnly()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(org.springframework.jdbc.core.PreparedStatementCreator,org.springframework.jdbc.core.PreparedStatementSetter,org.springframework.jdbc.core.ResultSetExtractor)> -> _SINK_
<org.eclipse.acceleo.engine.internal.evaluation.AcceleoEvaluationVisitor: void cacheResult(org.eclipse.acceleo.model.mtl.Query,java.util.List,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.SQLError: java.sql.SQLWarning convertShowWarningsToSQLWarnings(com.mysql.jdbc.Connection)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getAllowNanAndInf()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setShort(int,short)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.lang.Object getObject(java.lang.String,java.util.Map)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Milestone__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeDf(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: com.amazonaws.services.dynamodbv2.model.QueryRequest withKeyConditions(java.util.Map)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: byte[] getBytes(java.lang.String)> -> _SINK_
<org.hibernate.sql.InsertSelect: org.hibernate.sql.InsertSelect setTableName(java.lang.String)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: org.postgresql.core.Query createSimpleQuery(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.CriteriaContainerImpl: org.mongodb.morphia.query.CriteriaContainer and(org.mongodb.morphia.query.Criteria[])> -> _SINK_
<org.hibernate.sql.Select: java.lang.String toStatementString()> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: void create()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: boolean getMoreResults()> -> _SINK_
<com.enhype.db.PostgresDB: void closeResultSet(java.sql.ResultSet)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: java.util.Set getProtectionGroupRoleContextForGroup(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Statement: int executeUpdate(java.lang.String,boolean)> -> _SINK_
<org.hibernate.hql.classic.WhereParser: void addJoin(org.hibernate.engine.JoinSequence,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: java.lang.String getClientInfo(java.lang.String)> -> _SINK_
<org.hibernate.engine.NamedSQLQueryDefinition: void <init>(java.lang.String,org.hibernate.engine.query.sql.NativeSQLQueryReturn[],java.util.List,boolean,java.lang.String,java.lang.Integer,java.lang.Integer,org.hibernate.FlushMode,org.hibernate.CacheMode,boolean,java.lang.String,java.util.Map,boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch$Options: java.nio.ByteBuffer[] getValues()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setSessionVariables(java.lang.String)> -> _SINK_
<com.mysql.jdbc.OperationNotSupportedException: void <init>()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getFailOverReadOnly()> -> _SINK_
<org.springframework.orm.jdo.JdoTemplate$20: java.lang.Object doInJdo(javax.jdo.PersistenceManager)> -> _SINK_
<org.hibernate.jmx.StatisticsService: long getQueryCacheHitCount()> -> _SINK_
<java.sql.PreparedStatement: void setUnicodeStream(int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection$ConnectionHandler: java.sql.Connection getProxy()> -> _SINK_
<org.postgresql.Driver: java.sql.Connection access$100(java.lang.String,java.util.Properties)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsSchemasInPrivilegeDefinitions()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void cancel()> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl$AclPermissionDelete: void delete(java.lang.Long,java.lang.String)> -> _SINK_
<java.sql.CallableStatement: void setObject(java.lang.String,java.lang.Object,int,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getSocketTimeout()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setSerializable(int,java.io.Serializable)> -> _SINK_
<org.hibernate.connection.C3P0ConnectionProvider: java.sql.Connection getConnection()> -> _SINK_
<org.apache.ibatis.executor.resultset.NestedResultSetHandler: boolean applyNestedResultMappings(java.sql.ResultSet,org.apache.ibatis.mapping.ResultMap,org.apache.ibatis.reflection.MetaObject)> -> _SINK_
<com.mysql.jdbc.MysqlIO: long skipFully(java.io.InputStream,long)> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getURL()> -> _SINK_
<org.mmbase.module.database.MultiPool: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.TimeUtil: java.sql.Time fastTimeCreate(java.util.Calendar,int,int,int)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: void setPrepareThreshold(int)> -> _SINK_
<com.mongodb.DBPort: void checkAuth(com.mongodb.Mongo)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: void <init>(org.exolab.castor.jdo.engine.JDOClassDescriptor,org.exolab.castor.persist.spi.PersistenceFactory,java.lang.String)> -> _SINK_
<org.apache.commons.beanutils.RowSetDynaClass: void copy(java.sql.ResultSet)> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator$HsqlType: void <init>(org.exolab.castor.jdo.keygen.IdentityKeyGenerator,org.exolab.castor.jdo.keygen.IdentityKeyGenerator$1)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$36: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: void close()> -> _SINK_
<org.postgresql.copy.CopyManager: long copyIn(java.lang.String,java.io.Reader,int)> -> _SINK_
<org.postgresql.largeobject.BlobInputStream: void close()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void closeAll()> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: org.hibernate.type.Type getTypeUsingProjection(org.hibernate.Criteria,java.lang.String)> -> _SINK_
<org.apache.ibatis.type.DoubleTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.exec.MultiTableDeleteExecutor: void <init>(org.hibernate.hql.ast.HqlSqlWalker)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setInOutParamsOnServer()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setArray(int,java.sql.Array)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: void <init>(org.postgresql.core.BaseConnection,int,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.drivers.DB2Factory: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setTcpTrafficClass(int)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLNonTransientConnectionException: void <init>()> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getDimSearchOpts()> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: org.mongodb.morphia.query.FieldEnd criteria(java.lang.String,boolean)> -> _SINK_
<org.springframework.jdbc.support.incrementer.AbstractDataFieldMaxValueIncrementer: void setDataSource(javax.sql.DataSource)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: boolean wantsHoldableResultSet()> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: int getSize(java.io.Serializable,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setMaxRows(int)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLCustomQuery$ParserContext: boolean isCollectionAlias(java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addEqualConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.Boolean)> -> _SINK_
<org.mongodb.morphia.query.CriteriaContainerImpl: void add(org.mongodb.morphia.query.Criteria[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsSelectForUpdate()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void addWarning(java.sql.SQLWarning)> -> _SINK_
<org.hibernate.loader.collection.BasicCollectionLoader: void <init>(org.hibernate.persister.collection.QueryableCollection,org.hibernate.engine.SessionFactoryImplementor,java.util.Map)> -> _SINK_
<org.exolab.castor.dtx.DTXQuery: void bind(int,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: void addBatch(java.lang.String)> -> _SINK_
<com.endeca.navigation.analytics.LookupList: void validateSyntax()> -> _SINK_
<org.mongodb.morphia.query.UpdateResults: java.lang.String getError()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Clob getClob(int)> -> _SINK_
<org.hibernate.sql.SimpleSelect: org.hibernate.sql.SimpleSelect addColumns(java.lang.String[],java.lang.String[],boolean[])> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateCharacterStream(java.lang.String,java.io.Reader)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLDataException: void <init>()> -> _SINK_
<org.hibernate.id.IdentifierGeneratorFactory: java.io.Serializable getGeneratedIdentity(java.sql.ResultSet,org.hibernate.type.Type)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsCoreSQLGrammar()> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$1: void handleResultRows(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)> -> _SINK_
<org.hibernate.mapping.Column: void setSqlType(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: void rollback()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.lang.String getNString(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.GenericDataSource: void <clinit>()> -> _SINK_
<com.endeca.navigation.ENEQueryInfo: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.ibatis.logging.jdbc.ConnectionLogger: java.sql.Connection newInstance(java.sql.Connection)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: void addDiscriminatorToInsert(org.hibernate.sql.Insert)> -> _SINK_
<org.postgresql.util.HStoreConverter: java.lang.String toString(java.util.Map)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsConvert()> -> _SINK_
<org.hibernate.Hibernate: java.sql.Clob createClob(java.lang.String)> -> _SINK_
<java.sql.CallableStatement: void setDouble(java.lang.String,double)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.util.Map getTypeMap()> -> _SINK_
<com.endeca.navigation.analytics.ExprAggregate: java.lang.String toWire()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: boolean isDatabaseGeneratedTimestamp(org.hibernate.type.Type)> -> _SINK_
<com.mysql.jdbc.CharsetMapping: void populateMapWithKeyValuePairs(java.lang.String,java.util.Map,boolean,boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: int getHoldability()> -> _SINK_
<org.springframework.jdbc.object.SqlFunction: int run()> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl$AclPermissionInsert: void insert(java.lang.Long,java.lang.String,java.lang.Integer)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean dataDefinitionCausesTransactionCommit()> -> _SINK_
<org.hibernate.dialect.MySQL5InnoDBDialect: void <init>()> -> _SINK_
<test.gov.nih.nci.security.hibernate.annotations.AtFilterAnnotationsTest: void mainUsers()> -> _SINK_
<com.mchange.v2.c3p0.DataSources: javax.sql.DataSource unpooledDataSource(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.Shape$Center: com.mongodb.DBObject toDBObject()> -> _SINK_
<java.sql.ResultSet: int getFetchSize()> -> _SINK_
<com.ibatis.sqlmap.engine.impl.SqlMapExecutorDelegate: void setTxManager(com.ibatis.sqlmap.engine.transaction.TransactionManager)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.CQL2ParameterizedHQL: java.lang.String convertLogicalOperator(gov.nih.nci.cagrid.cqlquery.LogicalOperator)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$1ProxyCallableStatement: java.sql.ResultSet getResultSet()> -> _SINK_
<java.sql.DatabaseMetaData: boolean allTablesAreSelectable()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DB2v7Delegate: void setBytes(java.sql.PreparedStatement,int,java.io.ByteArrayOutputStream)> -> _SINK_
<org.postgresql.core.ResultCursor: void close()> -> _SINK_
<com.datastax.driver.core.RequestHandler: boolean access$000(com.datastax.driver.core.RequestHandler,com.datastax.driver.core.Host)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateTimestamp(int,java.sql.Timestamp)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Recruiting_Tracker__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void selectStatement(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.Connection: void maxRowsChanged(com.mysql.jdbc.Statement)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsStoredProcedures()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$71: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Project__c: void setProject_Milestones__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.module.database.MultiConnection: void claim()> -> _SINK_
<org.hibernate.hql.ast.exec.StatementExecutor: int execute(org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.PreparedStatement clientPrepare(java.lang.String,int,int)> -> _SINK_
<com.sun.jersey.api.client.AsyncWebResource: com.sun.jersey.api.client.AsyncWebResource queryParam(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.cache.QueryKey: int getHashCode()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseTimezone()> -> _SINK_
<org.hibernate.criterion.CriteriaQuery: java.lang.String getSQLAlias(org.hibernate.Criteria)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Solution: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateNString(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.xa.PGXAConnection: void commit(javax.transaction.xa.Xid,boolean)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String whereJoinFragment(java.lang.String,boolean,boolean)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateCharacterStream(int,java.io.Reader)> -> _SINK_
<org.hibernate.engine.query.ParameterParser: void parse(java.lang.String,org.hibernate.engine.query.ParameterParser$Recognizer)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Clob getClob(java.lang.String)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: void testSetCriteriaNull()> -> _SINK_
<java.sql.CallableStatement: void registerOutParameter(java.lang.String,int,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.utils.Key[] selectVolatileJobs(java.sql.Connection)> -> _SINK_
<com.endeca.navigation.analytics.FilterAnd: java.lang.String toWire()> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlspace(java.util.List)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean storesMixedCaseQuotedIdentifiers()> -> _SINK_
<org.springframework.jdbc.object.SqlFunction: java.lang.Object runGeneric(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Time getTime(java.lang.String)> -> _SINK_
<org.hibernate.engine.EntityEntry: boolean isExistsInDatabase()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.UpdateResults updateFirst(org.mongodb.morphia.query.Query,java.lang.Object,boolean)> -> _SINK_
<org.apache.ibatis.executor.statement.StatementHandler: void batch(java.sql.Statement)> -> _SINK_
<com.mysql.jdbc.log.Jdk14Logger: void logInfo(java.lang.Object)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSessionFactory: org.apache.ibatis.transaction.TransactionFactory getTransactionFactoryFromEnvironment(org.apache.ibatis.mapping.Environment)> -> _SINK_
<org.hibernate.hql.ast.tree.DotNode: java.lang.String getPath()> -> _SINK_
<org.apache.ibatis.datasource.pooled.PooledDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void registerOutParameter(int,int,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$SelectionOrAlias: com.datastax.driver.core.querybuilder.Select 'from'(com.datastax.driver.core.TableMetadata)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean isExistingTriggerGroup(java.sql.Connection,java.lang.String)> -> _SINK_
<org.apache.ibatis.type.ShortTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<org.springframework.jdbc.support.lob.DefaultLobHandler$DefaultLobCreator: void setClobAsAsciiStream(java.sql.PreparedStatement,int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.sql.Timestamp getTimestamp(int)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: java.lang.String toString()> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: void setCatalog(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: com.datastax.driver.core.Statement disableTracing()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setTime(int,java.sql.Time)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: long getLong(java.lang.String)> -> _SINK_
<com.mysql.jdbc.RowData: void afterLast()> -> _SINK_
<org.springframework.orm.hibernate3.SessionFactoryUtils: org.hibernate.Session getSession(org.hibernate.SessionFactory,org.hibernate.Interceptor,org.springframework.jdbc.support.SQLExceptionTranslator)> -> _SINK_
<com.sforce.soap.enterprise.QueryMoreResponse_element: void load(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: java.util.List findCharacterizationsBy(java.lang.String,gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean)> -> _SINK_
<org.postgresql.xa.PGXADataSourceFactory: java.lang.Object loadXADataSource(javax.naming.Reference)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void disableMultiQueries()> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator$DefaultWriter: void clause(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setClob(int,java.sql.Clob)> -> _SINK_
<org.mmbase.module.database.MultiConnection: void <clinit>()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setByte(int,byte)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator$NullIterator: void <init>(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: com.mysql.jdbc.ResultSet executeInternal(int,com.mysql.jdbc.Buffer,boolean,boolean,boolean,com.mysql.jdbc.Field[],boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setInt(int,int)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.CharacterizationQueryBean: java.lang.String getAssayType()> -> _SINK_
<org.mmbase.module.database.JDBC: void init()> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: boolean isCaseSensitive(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.lang.String getDatabaseProductVersion()> -> _SINK_
<org.mmbase.storage.search.implementation.database.PostgreSqlSqlHandler: void appendDateField(java.lang.StringBuffer,org.mmbase.storage.search.Step,java.lang.String,boolean,int)> -> _SINK_
<com.mchange.v1.db.sql.ConnectionUtils: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.UpdateTag: void <init>()> -> _SINK_
<org.apache.ibatis.mapping.MappedStatement: org.apache.ibatis.mapping.SqlCommandType access$802(org.apache.ibatis.mapping.MappedStatement,org.apache.ibatis.mapping.SqlCommandType)> -> _SINK_
<java.sql.ResultSet: boolean isLast()> -> _SINK_
<org.postgresql.core.SetupQueryRunner$SimpleResultHandler: void <init>(org.postgresql.core.ProtocolConnection)> -> _SINK_
<entities.dao.IDAO: java.util.List query(java.lang.String,java.lang.Object[])> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: void setOptionalEntityName(java.lang.String)> -> _SINK_
<org.hibernate.loader.collection.BatchingCollectionInitializer: org.hibernate.loader.collection.CollectionInitializer createBatchingOneToManyInitializer(org.hibernate.persister.collection.QueryableCollection,int,org.hibernate.engine.SessionFactoryImplementor,java.util.Map)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void storeCalendar(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String,org.quartz.Calendar,boolean,boolean)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageLookup: boolean match(org.w3c.dom.Element,java.sql.DatabaseMetaData)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.net.URL getURL(java.lang.String)> -> _SINK_
<org.hibernate.engine.NamedQueryDefinition: java.lang.Integer getFetchSize()> -> _SINK_
<oracle.toplink.logging.AbstractSessionLog: java.lang.String getConnectionString(oracle.toplink.internal.databaseaccess.Accessor)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: void createQueryLoader()> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringDecoder: java.lang.String getPath()> -> _SINK_
<org.hibernate.engine.query.ParameterMetadata: org.hibernate.type.Type getNamedParameterExpectedType(java.lang.String)> -> _SINK_
<org.hibernate.impl.QueryImpl: org.hibernate.ScrollableResults scroll(org.hibernate.ScrollMode)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setObject(int,java.lang.Object,int,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlConnectionPoolDataSource: void <init>()> -> _SINK_
<com.mysql.jdbc.MysqlIO: java.lang.String getServerVersion()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.lang.String getRole(java.lang.String)> -> _SINK_
<org.hibernate.usertype.EnhancedUserType: java.lang.String objectToSQLString(java.lang.Object)> -> _SINK_
<org.hibernate.Session: org.hibernate.Query createQuery(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection: void reset(boolean)> -> _SINK_
<org.exolab.castor.jdo.JDO: void setDatabasePooling(boolean)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setExplainSlowQueries(boolean)> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getProcedureTerm()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: int[] executeBatch()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: byte getByte(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Project__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.Buffer: java.lang.String readString()> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: com.datastax.driver.core.RegularStatement setForceNoValues(boolean)> -> _SINK_
<org.exolab.castor.persist.ClassMolder: boolean update(org.castor.persist.TransactionContext,org.exolab.castor.persist.OID,org.exolab.castor.persist.DepositBox,java.lang.Object,org.exolab.castor.mapping.AccessMode)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.DetachedCriteria getCharacterizationSubquery(gov.nih.nci.cananolab.dto.particle.CharacterizationQueryBean,java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$81: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.lang.Object getObject(java.lang.String,java.lang.String,byte[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position_Tracker__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void setCatalog(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: boolean execute()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.io.InputStream getAsciiStream(int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: void setSchema(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection: java.sql.Statement createProxyStatement(boolean,java.sql.Statement)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean updatesAreDetected(int)> -> _SINK_
<entities.dao.oql.OQL: void <init>(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxCatalogNameLength()> -> _SINK_
<com.sforce.soap.enterprise.sobject.BlogForce_Comment__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setDate(int,java.sql.Date,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean next()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.lang.String access$100(com.mysql.jdbc.DatabaseMetaData,java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodes: org.springframework.jdbc.support.CustomSQLErrorCodesTranslation[] getCustomTranslations()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getAttributes(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update: com.datastax.driver.core.querybuilder.Update$Options using(com.datastax.driver.core.querybuilder.Using)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: java.lang.String getNString(int)> -> _SINK_
<org.hibernate.engine.EntityEntry: boolean isNullifiable(boolean,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.WriterWatcher: void writerClosed(com.mysql.jdbc.WatchableWriter)> -> _SINK_
<org.mmbase.core.util.StorageConnector: java.util.List getRawNodes(org.mmbase.storage.search.SearchQuery,boolean)> -> _SINK_
<com.mysql.jdbc.MysqlParameterMetadata: void checkBounds(int)> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.DynamoDBQueryExpression: com.amazonaws.services.dynamodb.model.AttributeValue getHashKeyValue()> -> _SINK_
<com.mysql.jdbc.SQLError: void dumpSqlStatesMappingsAsXml()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void cleanVolatileTriggerAndJobs(java.sql.Connection)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: void create(org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<org.hibernate.hql.ast.tree.SelectClause: void renderNonScalarIdentifiers(org.hibernate.hql.ast.tree.FromElement,int,int,org.hibernate.hql.ast.tree.SelectExpression,org.hibernate.hql.ast.util.ASTAppender)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateInt(int,int)> -> _SINK_
<org.postgresql.core.PGStream: int ReceiveChar()> -> _SINK_
<org.mmbase.bridge.implementation.VirtualNodeManager: java.util.Map getFieldTypes()> -> _SINK_
<org.exolab.castor.gui.QueryHistory: java.lang.String getPreviousQuery()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int selectNumCalendars(java.sql.Connection)> -> _SINK_
<org.hibernate.loader.custom.CustomLoader: int[] getNamedParameterLocs(java.lang.String)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: java.lang.Object queryForObject(java.lang.String,java.lang.Object,java.lang.Object)> -> _SINK_
<org.exolab.castor.xml.handlers.DateFieldHandler: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<org.mongodb.morphia.query.WhereCriteria: void <init>(java.lang.String)> -> _SINK_
<org.apache.ibatis.transaction.jdbc.JdbcTransaction: void resetAutoCommit()> -> _SINK_
<org.hibernate.sql.Delete: org.hibernate.sql.Delete setTableName(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: long toLong(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getAutoGenerateTestcaseScript()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setObject(int,java.lang.Object,int,int)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl: void bind(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setDate(int,java.sql.Date)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: short getShort(java.lang.String)> -> _SINK_
<javax.persistence.Query: javax.persistence.Query setParameter(int,java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,int[])> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateBinaryStream(java.lang.String,java.io.InputStream)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.CQL2ParameterizedHQL: void handleQueryModifier(gov.nih.nci.cagrid.cqlquery.QueryModifier,java.lang.StringBuilder)> -> _SINK_
<java.sql.PreparedStatement: void setDate(int,java.sql.Date,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setRef(int,java.sql.Ref)> -> _SINK_
<javax.jdo.Query: java.lang.Object executeWithMap(java.util.Map)> -> _SINK_
<org.hibernate.cfg.ResultSetMappingBinder: org.hibernate.engine.query.sql.NativeSQLQueryJoinReturn bindReturnJoin(org.dom4j.Element,org.hibernate.cfg.Mappings)> -> _SINK_
<org.apache.ibatis.executor.statement.CallableStatementHandler: java.sql.Statement instantiateStatement(java.sql.Connection)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate: java.lang.Object readById(java.lang.Class,java.lang.Object[],boolean)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<org.hibernate.criterion.Example: void addComponentTypedValues(java.lang.String,java.lang.Object,org.hibernate.type.AbstractComponentType,java.util.List,org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.mmbase.cache.QueryResultCache: void addReleaseStrategies(java.util.List)> -> _SINK_
<org.hibernate.hql.ast.exec.AbstractStatementExecutor$2: void doWork(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: boolean isClosed()> -> _SINK_
<org.mmbase.cache.QueryResultCache: void decreaseCounters(org.mmbase.storage.search.SearchQuery,java.util.Map)> -> _SINK_
<com.mysql.jdbc.log.StandardLogger: void <init>(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: int getConcurrency()> -> _SINK_
<org.mmbase.module.database.MultiPool$ConnectionCloser: void <init>(org.mmbase.module.database.MultiConnection)> -> _SINK_
<org.apache.ibatis.type.BlobTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void markInactiveUncachedStatement(java.sql.Statement)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementType: java.lang.String renderValueCollectionSelectFragment(int,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: float getFloat(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setNString(int,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: com.datastax.driver.core.Statement setConsistencyLevel(com.datastax.driver.core.ConsistencyLevel)> -> _SINK_
<com.mysql.jdbc.Connection: void setSavepoint(com.mysql.jdbc.MysqlSavepoint)> -> _SINK_
<org.springframework.orm.jpa.vendor.Database: void <clinit>()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.lang.Object getObject(int,java.util.Map)> -> _SINK_
<org.springframework.jdbc.object.BatchSqlUpdate: void <init>(javax.sql.DataSource,java.lang.String,int[])> -> _SINK_
<org.hibernate.criterion.LogicalExpression: org.hibernate.engine.TypedValue[] getTypedValues(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.sforce.soap.enterprise.QueryMore_element: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.hql.classic.SelectParser: boolean aggregateHasArgs(java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateObject(int,java.lang.Object,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: int getFetchSize()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$80: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.ResultSet: double getDouble(java.lang.String)> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: void close()> -> _SINK_
<com.mysql.jdbc.Buffer: void ensureCapacity(int)> -> _SINK_
<java.sql.CallableStatement: void setLong(java.lang.String,long)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.math.BigDecimal getBigDecimal(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.XmlEtxIndicesReader: java.lang.String getEtxindexField(org.w3c.dom.Element)> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: java.util.SortedSet getAliases(org.mmbase.bridge.Cloud,java.util.List)> -> _SINK_
<java.sql.CallableStatement: java.sql.Timestamp getTimestamp(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Project_Snapshot__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String getGroupBy()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateNCharacterStream(int,java.io.Reader)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: java.lang.Object selectOne(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLQuery: org.exolab.castor.persist.spi.Identity loadIdentity()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsAlterTableWithAddColumn()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: org.hibernate.persister.entity.PropertyMapping getDecoratedPropertyMapping(java.lang.String)> -> _SINK_
<org.hibernate.loader.custom.CustomQuery: java.util.Set getQuerySpaces()> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator: java.lang.String buildMessage(java.lang.String,java.lang.String,java.sql.SQLException)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: boolean isReadOnly()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: org.hibernate.persister.entity.Queryable getEntityPersisterUsingImports(java.lang.String)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setFloat(int,float)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setCases(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void pushFromClause(antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<com.sforce.soap.enterprise.sobject.RestExplorerConfig__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mysql.jdbc.Field: void checkForImplicitTemporaryTable()> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: java.lang.Integer getLimit()> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.DateParamTag: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: boolean getMoreResults(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$MemorySizeConnectionProperty: void <init>(com.mysql.jdbc.ConnectionProperties,java.lang.String,int,int,int,java.lang.String,java.lang.String,java.lang.String,int)> -> _SINK_
<com.endeca.navigation.analytics.Statement: void validateSyntax()> -> _SINK_
<com.endeca.navigation.ENEQuery: boolean containsDimSearchQuery()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void arithmeticExpr(antlr.collections.AST)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Truncate truncate(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: java.sql.SQLXML getSQLXML(int)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimeLocaleConverter: void <init>(java.util.Locale)> -> _SINK_
<org.hibernate.hql.ast.tree.InLogicOperatorNode: void initialize()> -> _SINK_
<org.mmbase.core.util.StorageConnector: java.util.List getNodes(org.mmbase.storage.search.SearchQuery)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.SuspendableXAConnection: javax.sql.XAConnection findConnectionForXid(com.mysql.jdbc.Connection,javax.transaction.xa.Xid)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema: java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<gov.nih.nci.system.query.cql.CQLObject: gov.nih.nci.system.query.cql.CQLAssociation getAssociation()> -> _SINK_
<com.sforce.soap.enterprise.sobject.User: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: org.hibernate.SQLQuery addEntity(java.lang.String,java.lang.Class,org.hibernate.LockMode)> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcDaoImpl: void setObjectProperties(org.springframework.jdbc.object.MappingSqlQuery)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setFetchSize(int)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: byte[] getBinaryValue(org.mmbase.module.core.MMObjectNode,org.mmbase.core.CoreField)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: java.lang.String[] selectTriggerListeners(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JTANonClusteredSemaphore: boolean isLockOwner(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: boolean execute(java.lang.String,java.lang.String[])> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getCacheCallableStatements()> -> _SINK_
<org.hibernate.persister.collection.OneToManyPersister: java.lang.Object getElementByIndex(java.io.Serializable,java.lang.Object,org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.CursorRowProvider: boolean isEmpty()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Settings__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void appendHavingToken(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateByte(int,byte)> -> _SINK_
<org.hibernate.mapping.AuxiliaryDatabaseObject: void addDialectScope(java.lang.String)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.CQL2HQL: void processObject(java.lang.StringBuffer,java.util.List,gov.nih.nci.system.query.cql.CQLObject,boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.LeadFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: long getLong(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update: com.datastax.driver.core.querybuilder.Update$Where where(com.datastax.driver.core.querybuilder.Clause)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getResultSetHoldability()> -> _SINK_
<org.exolab.castor.gui.QueryHistory: java.lang.String getNextQuery()> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$CounterAssignment: void appendTo(java.lang.StringBuilder,java.util.List)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void storeDateTime(com.mysql.jdbc.Buffer,java.util.Date,com.mysql.jdbc.MysqlIO)> -> _SINK_
<com.mysql.jdbc.log.NullLogger: void <init>(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: boolean isAutoCommitNonDefaultOnServer()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: java.util.List getKeysByRefs(java.util.List)> -> _SINK_
<org.mmbase.module.tools.MMAdmin: java.util.Vector getList(org.mmbase.util.PageInfo,org.mmbase.util.StringTagger,java.lang.String)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: void processClassAnnotations(com.mongodb.DBCollection,org.mongodb.morphia.mapping.MappedClass,boolean)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: java.sql.Blob createBlob()> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: java.lang.String getStatementName()> -> _SINK_
<org.springframework.jdbc.support.JdbcAccessor: javax.sql.DataSource getDataSource()> -> _SINK_
<org.springframework.jdbc.support.lob.DefaultLobHandler: java.io.Reader getClobAsCharacterStream(java.sql.ResultSet,int)> -> _SINK_
<com.fasterxml.jackson.databind.ser.std.SqlTimeSerializer: void serialize(java.sql.Time,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<com.mysql.jdbc.Util: long oldHash(java.lang.String)> -> _SINK_
<org.castor.jdo.conf.Database: void validate()> -> _SINK_
<org.mmbase.bridge.util.Queries: org.mmbase.bridge.NodeList getRelatedNodes(org.mmbase.bridge.Node,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.io.InputStream getAsciiStream(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.JdbcOperations: java.util.Map queryForMap(java.lang.String)> -> _SINK_
<org.apache.ibatis.logging.jdbc.StatementLogger: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<com.mysql.jdbc.log.Log4JLogger: void logDebug(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$StringConnectionProperty: void <init>(com.mysql.jdbc.ConnectionProperties,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLTimeoutException: void <init>(java.lang.String,java.lang.String,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setTime(int,java.sql.Time,java.util.Calendar)> -> _SINK_
<org.exolab.castor.persist.spi.PersistenceQuery: void close()> -> _SINK_
<org.hibernate.loader.collection.BasicCollectionLoader: void <init>(org.hibernate.persister.collection.QueryableCollection,int,java.lang.String,org.hibernate.engine.SessionFactoryImplementor,java.util.Map)> -> _SINK_
<org.hibernate.impl.StatelessSessionImpl: java.util.List list(java.lang.String,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void addParameter(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4SQLXML: void <init>(org.postgresql.core.BaseConnection,java.lang.String,boolean)> -> _SINK_
<com.sun.jersey.api.uri.UriComponent: javax.ws.rs.core.MultivaluedMap decodeQuery(java.net.URI,boolean)> -> _SINK_
<com.mongodb.tools.ConnectionPoolStat: void print(java.io.PrintWriter)> -> _SINK_
<org.hibernate.hql.ast.tree.DotNode: void dereferenceEntityJoin(java.lang.String,org.hibernate.type.EntityType,boolean,antlr.collections.AST)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateObject(int,java.lang.Object)> -> _SINK_
<org.hibernate.hql.ast.tree.IntoClause: boolean areSqlTypesCompatible(int,int)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void prepareLogicOperator(antlr.collections.AST)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$89: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.ResultSet: long getLong(int)> -> _SINK_
<org.mmbase.module.database.MultiPool: boolean fillPool(boolean)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.Boolean)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryResult: void setCount(java.lang.Integer)> -> _SINK_
<com.mysql.jdbc.Connection: void changeUser(java.lang.String,java.lang.String)> -> _SINK_
<org.acegisecurity.acls.jdbc.JdbcAclService$1: java.lang.Object mapRow(java.sql.ResultSet,int)> -> _SINK_
<com.mysql.jdbc.ResultSet: float getFloat(java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement: double getDouble(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator$DefaultType: java.lang.Object getValue(java.sql.Connection,java.lang.String)> -> _SINK_
<org.hibernate.engine.query.HQLQueryPlan: org.hibernate.ScrollableResults performScroll(org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor)> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator$CountIterator: void <init>(gov.nih.nci.cagrid.cqlresultset.CQLCountResult,boolean)> -> _SINK_
<java.sql.ResultSetMetaData: int getScale(int)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: void setCount(java.lang.Boolean)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl near(double,double)> -> _SINK_
<com.mysql.jdbc.Connection: void closeAllOpenStatements()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.math.BigDecimal getBigDecimal(int,int)> -> _SINK_
<org.postgresql.Driver: java.sql.Connection connect(java.lang.String,java.util.Properties)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsCatalogsInDataManipulation()> -> _SINK_
<org.hibernate.engine.query.ParameterMetadata: org.hibernate.engine.query.NamedParameterDescriptor getNamedParameterDescriptor(java.lang.String)> -> _SINK_
<org.hibernate.engine.QueryParameters: void setScrollMode(org.hibernate.ScrollMode)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion propertyEqAll(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlPooledConnection: void <init>(com.mysql.jdbc.Connection)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: boolean isFilter()> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void addOrderClause(java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode$FilteredDynamicContext: int access$100(org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode$FilteredDynamicContext)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: org.mongodb.morphia.query.FieldEnd field(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void checkIndex(int,int,int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: int getTransactionIsolation()> -> _SINK_
<org.postgresql.core.Oid: java.lang.String toString(int)> -> _SINK_
<com.datastax.driver.core.SessionManager: com.datastax.driver.core.Message$Request makeRequestMessage(com.datastax.driver.core.Statement,com.datastax.driver.core.ConsistencyLevel,com.datastax.driver.core.ConsistencyLevel,java.nio.ByteBuffer)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Campaign: void setActivityHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.DescribeSObjectResult: void setQueryable(boolean)> -> _SINK_
<org.hibernate.cfg.Configuration: java.lang.String[] generateDropSchemaScript(org.hibernate.dialect.Dialect)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: com.datastax.driver.core.querybuilder.Insert values(java.lang.String[],java.lang.Object[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$2: void handleWarning(java.sql.SQLWarning)> -> _SINK_
<com.mysql.jdbc.log.StandardLogger: void logError(java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.CallableStatement prepareCall(java.lang.String,int,int)> -> _SINK_
<org.hibernate.engine.query.HQLQueryPlan: org.hibernate.engine.query.ReturnMetadata getReturnMetadata()> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavStratifiedDimVals(com.endeca.navigation.StratifiedDimValList)> -> _SINK_
<com.mysql.jdbc.log.Log4JLogger: void logWarn(java.lang.Object,java.lang.Throwable)> -> _SINK_
<org.postgresql.geometric.PGbox: java.lang.Object clone()> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: com.datastax.driver.core.Statement setConsistencyLevel(com.datastax.driver.core.ConsistencyLevel)> -> _SINK_
<java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<org.hibernate.cfg.HbmBinder: void handleCustomSQL(org.dom4j.Element,org.hibernate.mapping.Join)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ProcessInstance: void setSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: java.sql.SQLWarning receiveNoticeResponse()> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$CollectionAssignment: void appendTo(java.lang.StringBuilder,java.util.List)> -> _SINK_
<org.apache.ibatis.type.UnknownTypeHandler: org.apache.ibatis.type.TypeHandler resolveTypeHandler(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setLoggerClassName(java.lang.String)> -> _SINK_
<com.endeca.navigation.RefinementConfig: void parseExposed(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.ResultSetSupportingSqlParameter: boolean isResultSetSupported()> -> _SINK_
<org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor: void preHandle(org.springframework.web.context.request.WebRequest)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array$PgArrayList: void <init>(org.postgresql.jdbc2.AbstractJdbc2Array$1)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23SimpleDataSource: java.lang.String getDescription()> -> _SINK_
<com.mysql.jdbc.Connection: int getNextRoundRobinHostIndex(java.lang.String,java.util.List)> -> _SINK_
<org.postgresql.largeobject.BlobOutputStream: void close()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.SDK4QueryProcessor: boolean useStaticLogin()> -> _SINK_
<gov.nih.nci.system.query.cql.CQLPredicate: int hashCode()> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: long countAll()> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: void setTableName(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsColumnAliasing()> -> _SINK_
<org.hibernate.id.IdentityGenerator$InsertSelectDelegate: java.io.Serializable executeAndExtract(java.sql.PreparedStatement)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void nestedExprAfterMinusDiv(antlr.collections.AST)> -> _SINK_
<com.sforce.soap.enterprise.sobject.DashboardComponent: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.exolab.castor.jdo.drivers.GenericFactory: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<gov.nih.nci.cagrid.data.bdt.stubs.BdtQueryRequest: void <init>()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addInConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.Field,java.util.SortedSet)> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: java.lang.Object[] next()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void selectExprList(antlr.collections.AST)> -> _SINK_
<org.postgresql.core.BaseConnection: org.postgresql.jdbc2.TimestampUtils getTimestampUtils()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsCorrelatedSubqueries()> -> _SINK_
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor: java.sql.Connection getNativeConnection(java.sql.Connection)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateClob(java.lang.String,java.io.Reader)> -> _SINK_
<com.mysql.jdbc.integration.jboss.ExtendedMysqlExceptionSorter: void <init>()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: org.mmbase.util.logging.Logger access$000()> -> _SINK_
<gov.nih.nci.system.web.struts.action.Result: void setQuery(java.lang.String)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: void insertRows(org.hibernate.collection.PersistentCollection,java.io.Serializable,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.springframework.jdbc.core.namedparam.SqlParameterSource: java.lang.Object getValue(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Clob: long position(java.sql.Clob,long)> -> _SINK_
<com.amazonaws.services.datapipeline.DataPipelineAsyncClient$11: com.amazonaws.services.datapipeline.model.QueryObjectsResult call()> -> _SINK_
<com.mysql.jdbc.Blob: byte[] getBinaryData()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: int getMaxRows()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateAsciiStream(int,java.io.InputStream)> -> _SINK_
<com.mysql.jdbc.MysqlSavepoint: java.lang.String getSavepointName()> -> _SINK_
<org.castor.jdo.conf.DatabaseChoiceDescriptor$3: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.lang.String getFieldTypeDefinition(org.mmbase.core.CoreField)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$ConnectionProperty: java.lang.Object getValueAsObject()> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxColumnsInOrderBy()> -> _SINK_
<com.mongodb.Mongo: void dropDatabase(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.GeoFieldCriteria: void addTo(com.mongodb.DBObject)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: java.sql.ParameterMetaData getParameterMetaData()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: com.datastax.driver.core.Statement setConsistencyLevel(com.datastax.driver.core.ConsistencyLevel)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxColumnsInOrderBy()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: boolean isInCase()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: java.sql.ResultSet getResultSet()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Location__c: void setEvents(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$ErrorTrackingResultHandler: void handleWarning(java.sql.SQLWarning)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: int hashCode()> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSourceFactory: javax.sql.DataSource createReferenceable(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,int,int,int,java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object greaterThanOrEq(java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Time getTime(java.lang.String)> -> _SINK_
<com.mysql.jdbc.util.TimezoneDump: void main(java.lang.String[])> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: void setQueryTimeout(int)> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: java.lang.String getStatement(boolean)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: float getFloat(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.sql.PreparedStatement getPreparedStatement(java.sql.Connection,java.lang.String,boolean,boolean,java.lang.String[],org.hibernate.ScrollMode,boolean)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.sql.Connection openConnection()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxCharLiteralLength()> -> _SINK_
<com.mysql.jdbc.util.PropertiesDocGenerator: void <init>()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementFactory: org.hibernate.hql.ast.tree.FromElement createManyToMany(java.lang.String,java.lang.String,java.lang.String,org.hibernate.persister.entity.Queryable,org.hibernate.type.EntityType,int)> -> _SINK_
<org.springframework.jdbc.core.SqlOutParameter: boolean isInputValueProvided()> -> _SINK_
<org.mongodb.morphia.query.QueryException: void <init>(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4DatabaseMetaData: java.sql.ResultSet getClientInfoProperties()> -> _SINK_
<org.mongodb.morphia.query.MorphiaIterator: java.lang.Object convertItem(com.mongodb.DBObject)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsSubqueriesInQuantifieds()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: int getMaxUserNameLength()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlConnectionPoolDataSource: javax.sql.PooledConnection getPooledConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.ibatis.mapping.Environment: javax.sql.DataSource access$302(org.apache.ibatis.mapping.Environment,javax.sql.DataSource)> -> _SINK_
<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addHint(com.mongodb.DBObject)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setZeroDateTimeBehavior(java.lang.String)> -> _SINK_
<org.hibernate.type.ManyToOneType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.hibernate.engine.SessionImplementor: java.util.Iterator iterate(java.lang.String,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateTriggerGroupStateFromOtherState(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setString(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.Query: java.util.List list()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.BindMarker bindMarker(java.lang.String)> -> _SINK_
<org.mmbase.module.database.JDBC: java.lang.String makeUrl(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.util.UnixCrypt: int[] body(int[],int,int)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: void <init>(java.util.Properties,java.util.Properties)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: java.sql.Statement createStatement(int,int,int)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementFactory: org.hibernate.hql.ast.tree.FromElement createEntityJoin(java.lang.String,java.lang.String,org.hibernate.engine.JoinSequence,boolean,boolean,org.hibernate.type.EntityType)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStateFromOtherState(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.TypeAttribute: int hashCode()> -> _SINK_
<com.endeca.navigation.OptiBackend: com.endeca.navigation.OptiBackendRequest requestNavigation(com.endeca.navigation.ENEQuery)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.StepField addField(org.mmbase.storage.search.Step,org.mmbase.bridge.Field)> -> _SINK_
<java.sql.ResultSet: java.lang.Object getObject(int,java.util.Map)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: int getQueryTimeout()> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: java.util.List getSteps()> -> _SINK_
<gov.nih.nci.cananolab.dto.BaseQueryBean: void setOperand(java.lang.String)> -> _SINK_
<com.mysql.jdbc.EscapeTokenizer: boolean hasMoreTokens()> -> _SINK_
<org.hibernate.type.CollectionType: java.lang.String getAssociatedEntityName(org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.hibernate.hql.ast.util.SessionFactoryHelper: org.hibernate.type.Type findFunctionReturnType(java.lang.String,antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLTransactionRollbackException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.system.query.example.ExampleQuery: java.lang.Object getExample()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: org.postgresql.copy.CopyManager getCopyAPI()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.Query newQuery(java.lang.Class,com.mongodb.DBCollection,com.mongodb.DBObject)> -> _SINK_
<org.hibernate.mapping.RelationalModel: java.lang.String sqlDropString(org.hibernate.dialect.Dialect,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: boolean isWritable(int)> -> _SINK_
<org.hibernate.loader.Loader: java.lang.Object loadSequentialRowsReverse(java.sql.ResultSet,org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters,boolean,boolean)> -> _SINK_
<gov.nih.nci.security.authorization.instancelevel.InstanceLevelSecurityHelper: void addFiltersForGroups(gov.nih.nci.security.AuthorizationManager,org.hibernate.cfg.Configuration)> -> _SINK_
<org.hibernate.loader.collection.BatchingCollectionInitializer: org.hibernate.loader.collection.CollectionInitializer createBatchingCollectionInitializer(org.hibernate.persister.collection.QueryableCollection,int,org.hibernate.engine.SessionFactoryImplementor,java.util.Map)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void beforeFirst()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void registerOutParameter(java.lang.String,int,int)> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$1: void <init>(org.exolab.castor.mapping.xml.SqlDescriptor)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.impl.CharacterizationServiceLocalImpl: java.util.List findOtherCharacterizationByAssayCategory(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLFieldInfo: boolean isStore()> -> _SINK_
<gov.nih.nci.system.query.hql.DeleteHQLQuery: void <init>(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: void generate(antlr.collections.AST)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean getBoolean(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: void setHoldability(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void attach(com.mchange.v2.c3p0.impl.NewPooledConnection)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3DatabaseMetaData: int getDatabaseMinorVersion()> -> _SINK_
<com.mysql.jdbc.BlobFromLocator: byte[] getBytes(long,int)> -> _SINK_
<org.apache.ibatis.jdbc.ScriptRunner: void printResults(java.sql.Statement,boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Task: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLTimeoutException: int getErrorCode()> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: void maybeRebuildCache()> -> _SINK_
<org.exolab.castor.persist.QueryResults: java.lang.Object nextIdentity()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsGetGeneratedKeys()> -> _SINK_
<org.mmbase.storage.search.implementation.database.InformixSqlHandler: java.lang.String toSql(org.mmbase.storage.search.SearchQuery,org.mmbase.storage.search.implementation.database.SqlHandler)> -> _SINK_
<org.postgresql.ds.jdbc4.AbstractJdbc4ConnectionPoolDataSource: java.util.logging.Logger getParentLogger()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: com.datastax.driver.core.Statement setConsistencyLevel(com.datastax.driver.core.ConsistencyLevel)> -> _SINK_
<org.hibernate.sql.Update: org.hibernate.sql.Update setTableName(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getJDBCMajorVersion()> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.ParamTagSupport: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: int getHoldability()> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder lessThanEquals(java.lang.Object)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setTimestamp(int,java.util.Date)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: int executeUpdate(java.lang.String,java.lang.String[])> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters: java.text.SimpleDateFormat access$200()> -> _SINK_
<org.hibernate.QueryParameterException: void <init>(java.lang.String)> -> _SINK_
<org.postgresql.util.PGBinaryObject: void toBytes(byte[],int)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: java.lang.String[] copy()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.Set selectFiredTriggerInstanceNames(java.sql.Connection)> -> _SINK_
<com.datastax.driver.core.exceptions.QueryExecutionException: void <init>(java.lang.String,java.lang.Throwable)> -> _SINK_
<org.springframework.jdbc.core.namedparam.MapSqlParameterSource: org.springframework.jdbc.core.namedparam.MapSqlParameterSource addValue(java.lang.String,java.lang.Object)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterUtils: java.lang.String parseSqlStatementIntoString(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl: java.sql.PreparedStatement createPreparedStatement(java.sql.Connection)> -> _SINK_
<org.springframework.jdbc.object.SqlUpdate: void <init>(javax.sql.DataSource,java.lang.String,int[])> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: com.mongodb.WriteResult delete(java.lang.Class,java.lang.Iterable)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: int getResultSetType()> -> _SINK_
<org.hibernate.loader.Loader: org.hibernate.engine.EntityKey getKeyFromResultSet(int,org.hibernate.persister.entity.Loadable,java.io.Serializable,java.sql.ResultSet,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: int getResultSetConcurrency()> -> _SINK_
<org.hibernate.impl.AbstractSessionImpl: java.util.List list(org.hibernate.engine.query.sql.NativeSQLQuerySpecification,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.Statement createStatement(int,int,int)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void sendClosePortal(java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiStatement: int[] executeBatch()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: int getInt(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void panic()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementRemove: void buildStatement()> -> _SINK_
<org.exolab.castor.dtx.DTXQuery: void bind(int,float)> -> _SINK_
<java.sql.SQLException: java.sql.SQLException getNextException()> -> _SINK_
<org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter: java.lang.String getDatabasePlatform()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setDate(int,java.sql.Date)> -> _SINK_
<org.hibernate.engine.query.ReturnMetadata: org.hibernate.type.Type[] getReturnTypes()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: void <init>(java.sql.DatabaseMetaData,com.mchange.v2.c3p0.impl.NewPooledConnection,com.mchange.v2.c3p0.impl.NewProxyConnection)> -> _SINK_
<com.sforce.soap.enterprise.sobject.TaskFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateClob(java.lang.String,java.sql.Clob)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void beforeSelectClause()> -> _SINK_
<org.mmbase.module.database.JDBC: java.sql.Connection getDirectConnection(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CampaignFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<org.mmbase.cache.BetterStrategy: void <clinit>()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Job_Application__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.jmx.SessionFactoryStub: org.hibernate.classic.Session openSession(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXAConnection: void rollback(javax.transaction.xa.Xid)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setCharacterStream(int,java.io.Reader,int)> -> _SINK_
<org.exolab.castor.xml.handlers.SQLTimestampFieldHandler: java.lang.Object convertUponSet(java.lang.Object)> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator: void <init>(gov.nih.nci.cagrid.cqlresultset.CQLQueryResults,boolean,java.io.InputStream)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: boolean isClosed()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4CallableStatement: java.lang.Object getObject(java.lang.String,java.util.Map)> -> _SINK_
<com.sforce.soap.enterprise.EnterpriseConnection: void setQueryOptions(int)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: org.hibernate.exception.SQLExceptionConverter getSQLExceptionConverter()> -> _SINK_
<org.hibernate.sql.DisjunctionFragment: org.hibernate.sql.DisjunctionFragment addCondition(org.hibernate.sql.ConditionFragment)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: void appendArray(java.lang.StringBuffer,java.lang.Object,char)> -> _SINK_
<org.hibernate.tool.hbm2ddl.SchemaExport: void drop(boolean,boolean,java.io.Writer,java.sql.Statement)> -> _SINK_
<gov.nih.nci.cagrid.cqlresultset.CQLQueryResults: boolean equals(java.lang.Object)> -> _SINK_
<org.mmbase.module.database.MultiPool: void putBack(org.mmbase.module.database.MultiConnection)> -> _SINK_
<org.postgresql.geometric.PGlseg: void <init>(double,double,double,double)> -> _SINK_
<com.mchange.v1.db.sql.StatementUtils: boolean attemptClose(java.sql.Statement)> -> _SINK_
<org.hibernate.loader.collection.BasicCollectionLoader: void <init>(org.hibernate.persister.collection.QueryableCollection,int,org.hibernate.engine.SessionFactoryImplementor,java.util.Map)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter: void <init>(java.util.Locale,boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.utils.Key[] selectTriggerNamesForJob(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<java.sql.CallableStatement: void setShort(java.lang.String,short)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setQueryTimeout(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getParanoid()> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContractFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool: void reset()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object within(double,double,double,boolean)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setBlob(java.lang.String,java.io.InputStream,long)> -> _SINK_
<org.hibernate.hql.ast.tree.HqlSqlWalkerNode: org.hibernate.hql.ast.HqlSqlWalker getWalker()> -> _SINK_
<com.mysql.jdbc.WatchableWriter: void setWatcher(com.mysql.jdbc.WriterWatcher)> -> _SINK_
<org.mmbase.module.corebuilders.TypeDef: boolean readCache()> -> _SINK_
<org.castor.persist.LocalTransactionContext: void <init>(org.exolab.castor.jdo.Database)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.QueryTagSupport: void doFinally()> -> _SINK_
<org.hibernate.hql.ast.tree.MethodNode: void dialectFunction(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateClob(int,java.sql.Clob)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.lang.Object queryForObject(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,org.springframework.jdbc.core.RowMapper)> -> _SINK_
<org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider: void configure(java.util.Properties)> -> _SINK_
<org.exolab.castor.jdo.drivers.InformixQueryExpression: void addForUpdateClause(java.lang.StringBuffer,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: boolean rowInserted()> -> _SINK_
<org.castor.jdo.conf.Database: void setDatabaseChoice(org.castor.jdo.conf.DatabaseChoice)> -> _SINK_
<java.sql.CallableStatement: void setCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean nullsAreSortedHigh()> -> _SINK_
<com.mysql.jdbc.MysqlIO: void resetMaxBuf()> -> _SINK_
<org.hibernate.engine.SessionImplementor: java.util.List listFilter(java.lang.Object,java.lang.String,org.hibernate.engine.QueryParameters)> -> _SINK_
<java.sql.ResultSet: java.sql.SQLWarning getWarnings()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.PreparedStatement prepareStatement(java.lang.String,int[])> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.Object[] getDatabaseSnapshot(java.io.Serializable,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapClient: com.ibatis.sqlmap.client.SqlMapSession openSession()> -> _SINK_
<java.sql.CallableStatement: java.lang.Object getObject(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getPedantic()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: int getInt(java.lang.String)> -> _SINK_
<org.hibernate.engine.query.HQLQueryPlan: void <clinit>()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void moveToInsertRow()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$39: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: void commit()> -> _SINK_
<com.mysql.jdbc.StringUtils: int getInt(byte[])> -> _SINK_
<org.hibernate.criterion.Projections: org.hibernate.criterion.Projection sqlGroupProjection(java.lang.String,java.lang.String,java.lang.String[],org.hibernate.type.Type[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: void rollback()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsCatalogsInPrivilegeDefinitions()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update: com.datastax.driver.core.querybuilder.Update$Conditions onlyIf(com.datastax.driver.core.querybuilder.Clause)> -> _SINK_
<com.endeca.navigation.ENEQuery: boolean getNavERecSearchDidYouMean()> -> _SINK_
<java.sql.Statement: void clearBatch()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: java.util.Properties getClientInfo()> -> _SINK_
<org.hibernate.loader.custom.CustomLoader$ResultColumnProcessor: java.lang.Object extract(java.lang.Object[],java.sql.ResultSet,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.sforce.soap.enterprise.QueryMoreResponse_element: com.sforce.soap.enterprise.QueryResult getResult()> -> _SINK_
<gov.nih.nci.system.dao.orm.ORMDAOImpl: gov.nih.nci.system.dao.Response query(gov.nih.nci.system.dao.Request,gov.nih.nci.system.query.nestedcriteria.NestedCriteriaPath)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: int getResultSetType()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void addPrivilegesToRole(java.lang.String,java.lang.String[])> -> _SINK_
<org.exolab.castor.dtx.DTXQuery: void setEngine(org.exolab.castor.dtx.DTXEngine)> -> _SINK_
<org.hibernate.id.MultipleHiLoPerTableGenerator: java.io.Serializable doWorkInCurrentTransaction(java.sql.Connection,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2: void setActivityHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsAlterTableWithDropColumn()> -> _SINK_
<org.exolab.castor.persist.spi.PersistenceQuery: java.lang.Class getResultType()> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator: void endFunctionTemplate(antlr.collections.AST)> -> _SINK_
<org.hibernate.type.EntityType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: int endPositionOfParameterDeclaration(int,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$ResultSetIterator: void close()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setCharacterStream(int,java.io.Reader,int)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsSubqueriesInQuantifieds()> -> _SINK_
<org.mmbase.module.database.Naming: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.loader.Loader: int bindNamedParameters(java.sql.PreparedStatement,java.util.Map,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<util.convert.Convert: org.apache.commons.beanutils.ConvertUtilsBean getConverter(java.util.Locale)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: int getQueryTimeout()> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void initCopy(org.postgresql.core.v3.CopyOperationImpl)> -> _SINK_
<org.hibernate.loader.OuterJoinLoader: void initFromWalker(org.hibernate.loader.JoinWalker)> -> _SINK_
<test.gov.nih.nci.security.hibernate.annotations.HibernateUtil: void outputResultSet(java.sql.ResultSet)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setObject(int,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.sql.SQLWarning getWarnings()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JTANonClusteredSemaphore: void releaseLock(java.lang.String,boolean)> -> _SINK_
<org.springframework.jdbc.support.incrementer.HsqlMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Timestamp getNativeTimestampViaParseConversion(int,java.util.Calendar,java.util.TimeZone,boolean)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateShort(java.lang.String,short)> -> _SINK_
<gov.nih.nci.system.query.hibernate.HQLCriteria: void <init>(java.lang.String,java.lang.String,java.util.List)> -> _SINK_
<org.hibernate.hql.QueryTranslator: java.lang.String[][] getColumnNames()> -> _SINK_
<org.apache.ibatis.jdbc.ScriptRunner: void executeFullScript(java.io.Reader)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Dashboard: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.fault.MalformedQueryFault: java.lang.String toString()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Array getArray(java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiStatement: void clearBatch()> -> _SINK_
<org.apache.commons.beanutils.ResultSetDynaClass: void <init>(java.sql.ResultSet,boolean)> -> _SINK_
<org.postgresql.util.Base64: int decode4to3(byte[],int,byte[],int)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<java.sql.ResultSet: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<org.postgresql.util.ServerErrorMessage: java.lang.String toString()> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: java.lang.String toString(java.util.Calendar,java.sql.Time)> -> _SINK_
<org.hibernate.criterion.NotNullExpression: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: void appendCompositeConstraintToSql(java.lang.StringBuffer,org.mmbase.storage.search.CompositeConstraint,org.mmbase.storage.search.SearchQuery,boolean,boolean,org.mmbase.storage.search.implementation.database.SqlHandler)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void clearWarnings()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.lang.String getCursorName()> -> _SINK_
<test.gov.nih.nci.security.threadsafe.CSMAPIMySQLDeadLockTest: void assignUserToGroup()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.sql.Connection getActiveConnection()> -> _SINK_
<com.mysql.jdbc.Statement: boolean execute(java.lang.String,int)> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxUserNameLength()> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: void setHashKeyValue(com.amazonaws.services.dynamodb.model.AttributeValue)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: boolean getBoolean(java.lang.String)> -> _SINK_
<org.hibernate.criterion.Restrictions: org.hibernate.criterion.Criterion sqlRestriction(java.lang.String,java.lang.Object,org.hibernate.type.Type)> -> _SINK_
<org.hibernate.jdbc.Batcher: java.sql.PreparedStatement prepareSelectStatement(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void insertStatement(antlr.collections.AST)> -> _SINK_
<org.hibernate.hql.ast.ParseErrorHandler: void throwQueryException()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setAccountPartners(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.impl.SessionImpl: void cancelQuery()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<com.endeca.navigation.analytics.ExprKey: java.lang.String toString()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: void setCharacterizationAndCriteria(gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean,org.hibernate.criterion.DetachedCriteria,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Array getArray(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: java.lang.String extractSqlFromPacket(java.lang.String,com.mysql.jdbc.Buffer,int)> -> _SINK_
<gov.nih.nci.system.util.StringClobType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: int getUpdateCount()> -> _SINK_
<com.mysql.jdbc.MysqlIO: void enqueuePacketForDebugging(boolean,boolean,int,byte[],com.mysql.jdbc.Buffer)> -> _SINK_
<gov.nih.nci.cananolab.service.protocol.impl.ProtocolServiceLocalImpl: java.util.List findCharacterizationIdsByProtocolId(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.IdentNode: void setScalarColumnText(int)> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: java.lang.String getSQLExprForLimit(org.exolab.castor.jdo.oql.ParseTreeNode)> -> _SINK_
<org.acegisecurity.userdetails.jdbc.JdbcDaoImpl$UsersByUsernameMapping: java.lang.Object mapRow(java.sql.ResultSet,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$BooleanConnectionProperty: void <init>(com.mysql.jdbc.ConnectionProperties,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,int)> -> _SINK_
<org.postgresql.core.PGStream: int PeekChar()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getExtraNameCharacters()> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.QueryTagSupport: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateTime(java.lang.String,java.sql.Time)> -> _SINK_
<com.sforce.soap.enterprise.sobject.UserProfileFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mysql.jdbc.Connection: void initializeDriverProperties(java.util.Properties)> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getNavMerchPreviewTime()> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: void testQuery_OffSet_Not0_RecordCount_Not0_NoResults()> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection$ConnectionHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxColumnsInGroupBy()> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setString(java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.impl.SampleServiceLocalImpl: gov.nih.nci.cananolab.domain.particle.SampleComposition loadComposition(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: java.sql.Clob createClob()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void processBoolean(antlr.collections.AST)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.sql.ResultSet getResultSet(java.sql.CallableStatement,org.hibernate.dialect.Dialect)> -> _SINK_
<com.sun.jersey.api.uri.UriComponent: java.lang.String decode(java.lang.String,com.sun.jersey.api.uri.UriComponent$Type)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Batch batch(com.datastax.driver.core.RegularStatement[])> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DataSourceUtil: javax.sql.DataSource getDataSource(java.lang.Object,javax.servlet.jsp.PageContext)> -> _SINK_
<java.sql.Date: void setTime(long)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CollaborationGroupFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void groupClause(antlr.collections.AST)> -> _SINK_
<java.sql.ResultSet: java.sql.Clob getClob(int)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: boolean execute(java.lang.String,int[])> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setClob(int,java.io.Reader,long)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.Query createQuery(java.lang.String,java.lang.Class,com.mongodb.DBObject)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.math.BigDecimal getBigDecimal(java.lang.String)> -> _SINK_
<org.hibernate.engine.QueryParameters: void setCallable(boolean)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode$PrefixedContext: boolean isPrefixApplied()> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Array getArray(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: int getType()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void realClose(boolean,boolean)> -> _SINK_
<org.hibernate.tool.hbm2ddl.SchemaValidator: void validate()> -> _SINK_
<org.postgresql.geometric.PGlseg: void <init>(org.postgresql.geometric.PGpoint,org.postgresql.geometric.PGpoint)> -> _SINK_
<org.springframework.jdbc.object.SqlOperation: void compileInternal()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: java.nio.ByteBuffer[] getValues()> -> _SINK_
<org.postgresql.util.HostSpec: void <init>(java.lang.String,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet$CursorResultHandler: void handleCommandStatus(java.lang.String,int,long)> -> _SINK_
<com.mysql.jdbc.MysqlParameterMetadata: int getParameterType(int)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.String getCursorName()> -> _SINK_
<org.mmbase.bridge.implementation.BasicCloud: org.mmbase.bridge.NodeList getList(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SINK_
<org.castor.jdo.engine.DataSourceConnectionFactory: void initializeFactory()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateRowId(java.lang.String,java.sql.RowId)> -> _SINK_
<org.springframework.web.filter.AbstractRequestLoggingFilter: boolean isIncludeQueryString()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Blob getBlob(int)> -> _SINK_
<gov.nih.nci.system.query.cql.CQLGroup: java.util.Collection getAttributeCollection()> -> _SINK_
<com.mysql.jdbc.ResultSet: void setDefaultTimeZone(java.util.TimeZone)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateBlob(int,java.sql.Blob)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setByte(int,byte)> -> _SINK_
<org.mongodb.morphia.dao.BasicDAO: boolean exists(java.lang.String,java.lang.Object)> -> _SINK_
<org.postgresql.core.PGStream: void close()> -> _SINK_
<org.springframework.jdbc.datasource.WebSphereDataSourceAdapter: void afterPropertiesSet()> -> _SINK_
<com.mysql.jdbc.RowData: void addRow(byte[][])> -> _SINK_
<org.hibernate.hql.ast.SqlASTFactory: java.lang.Class getASTNodeType(int)> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceUtils$ConnectionSynchronization: void afterCompletion(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.sql.DriverPropertyInfo[] exposeAsDriverPropertyInfo(java.util.Properties,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.sql.Savepoint setSavepoint()> -> _SINK_
<org.hibernate.impl.ScrollableResultsImpl: void afterLast()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsMultipleTransactions()> -> _SINK_
<com.mysql.jdbc.CallableStatement: void fakeParameterTypes()> -> _SINK_
<org.mmbase.cache.QueryResultCache: void notify(org.mmbase.core.event.RelationEvent)> -> _SINK_
<org.springframework.scheduling.quartz.LocalDataSourceJobStore$1: java.sql.Connection getConnection()> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.ERecSearch getNavRelRankERecSearch()> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: void flush()> -> _SINK_
<org.exolab.castor.xml.descriptors.SQLDateClassDescriptor$1: void <init>(org.exolab.castor.xml.descriptors.SQLDateClassDescriptor)> -> _SINK_
<com.datastax.driver.core.ArrayBackedResultSet: com.google.common.util.concurrent.ListenableFuture fetchMoreResults()> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSessionFactory: org.apache.ibatis.session.SqlSession openSession(org.apache.ibatis.session.ExecutorType,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: int findColumn(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setString(int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setCacheCallableStatements(boolean)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: java.sql.Blob createBlob()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void close()> -> _SINK_
<com.mysql.jdbc.WatchableOutputStream: void close()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int insertCalendar(java.sql.Connection,java.lang.String,org.quartz.Calendar)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object within(double,double,double,double)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: int getQueryTimeout()> -> _SINK_
<org.apache.ibatis.metadata.Database: java.lang.String[] getTableNames()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: int getResultSetConcurrency()> -> _SINK_
<org.postgresql.core.v3.ProtocolConnectionImpl: void addNotification(org.postgresql.PGNotification)> -> _SINK_
<org.mongodb.morphia.query.MorphiaIterator: java.util.Iterator iterator()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.lang.String getCursorName()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setObject(java.lang.String,java.lang.Object)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: int[] getTypeOIDs()> -> _SINK_
<org.hibernate.hql.QueryTranslator: java.lang.String[] getReturnAliases()> -> _SINK_
<org.hibernate.tool.hbm2ddl.DatabaseMetadata: void <init>(java.sql.Connection,org.hibernate.dialect.Dialect,boolean)> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: boolean isReadOnly(int)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLTransientConnectionException: void <init>(java.lang.String)> -> _SINK_
<org.apache.axis.transport.http.AbstractQueryStringHandler: org.apache.axis.Message convertExceptionToAxisFault(java.lang.Exception,org.apache.axis.Message)> -> _SINK_
<java.sql.DatabaseMetaData: int getDatabaseMajorVersion()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsGroupByBeyondSelect()> -> _SINK_
<org.castor.persist.GlobalTransactionContext: void <init>(org.exolab.castor.jdo.Database)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void trackNamedParameterPositions(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void registerOutParameter(int,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setBoolean(int,boolean)> -> _SINK_
<org.mongodb.morphia.Datastore: org.mongodb.morphia.query.Query createQuery(java.lang.Class)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.sql.CallableStatement prepareCall(java.lang.String,int,int,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getCatalogTerm()> -> _SINK_
<java.sql.ResultSet: int findColumn(java.lang.String)> -> _SINK_
<java.sql.ResultSet: void updateRef(java.lang.String,java.sql.Ref)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setRef(int,java.sql.Ref)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Project__c: void setProject_Logs__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Candidate__c: void setTasks(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.impl.AbstractSessionImpl: org.hibernate.ScrollableResults scroll(org.hibernate.engine.query.sql.NativeSQLQuerySpecification,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementLoad: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<gov.nih.nci.system.query.cql.CQLPredicate: void <init>(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.Shape: org.mongodb.morphia.query.Shape polygon(org.mongodb.morphia.query.Shape$Point[])> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void addSelectScalar(org.hibernate.type.Type)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: int executeUpdate(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)> -> _SINK_
<org.mmbase.module.database.MultiConnection: void resetUsage()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setNull(int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase: javax.sql.ConnectionPoolDataSource getConnectionPoolDataSource()> -> _SINK_
<org.hibernate.criterion.BetweenExpression: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.util.List findFailedInstances(java.sql.Connection)> -> _SINK_
<org.hibernate.hql.ast.tree.QueryNode: org.hibernate.type.Type getDataType()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseOldAliasMetadataBehavior(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.lang.String getString(int)> -> _SINK_
<com.datastax.driver.core.Requests$Query$2: int encodedSize(com.datastax.driver.core.Requests$Query)> -> _SINK_
<org.springframework.orm.hibernate3.support.BlobStringType: void nullSafeSetInternal(java.sql.PreparedStatement,int,java.lang.Object,org.springframework.jdbc.support.lob.LobCreator)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setLong(int,long)> -> _SINK_
<com.mongodb.DBPort$SaslAuthenticator: com.mongodb.CommandResult sendSaslStart(byte[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsANSI92EntryLevelSQL()> -> _SINK_
<org.hibernate.mapping.PersistentClass: java.lang.String getCustomSQLUpdate()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getSQLStateType()> -> _SINK_
<org.hibernate.type.TimestampType: java.lang.Object seed(org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementStore: java.lang.Object executeStatement(java.sql.Connection,org.exolab.castor.persist.spi.Identity,org.castor.persist.ProposedEntity,org.castor.persist.ProposedEntity)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Timestamp getTimestamp(int)> -> _SINK_
<java.sql.Connection: java.sql.Statement createStatement()> -> _SINK_
<org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08: org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)> -> _SINK_
<com.mongodb.QueryOpBuilder: boolean hasSpecialQueryFields()> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceUtils: void releaseConnection(java.sql.Connection,javax.sql.DataSource)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(java.util.Map)> -> _SINK_
<com.mysql.jdbc.log.Jdk14Logger: void logFatal(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.NotUpdatable: void <init>(java.lang.String)> -> _SINK_
<org.apache.ibatis.datasource.unpooled.UnpooledDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.sql.PreparedStatement prepareQueryStatement(java.lang.String,boolean,org.hibernate.ScrollMode)> -> _SINK_
<java.sql.CallableStatement: java.sql.Date getDate(java.lang.String,java.util.Calendar)> -> _SINK_
<org.exolab.castor.jdo.engine.JDOFieldDescriptor: java.lang.String[] getSQLName()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: int getMaxStatementLength()> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementType: java.lang.String extractTableName()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void close()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setMaxQuerySizeToLog(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: int findColumn(java.lang.String)> -> _SINK_
<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addExplain(boolean)> -> _SINK_
<org.hibernate.hql.antlr.HqlBaseParser: void primaryExpression()> -> _SINK_
<org.hibernate.exception.JDBCExceptionHelper: java.lang.String extractSqlStateClassCode(java.sql.SQLException)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.gridCQL.DomainTypesInformationUtil: void <init>(gov.nih.nci.system.util.ClassCache)> -> _SINK_
<org.hibernate.hql.antlr.HqlBaseParser: void subQuery()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: int getMaxIndexKeys()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: byte[] getBytes(java.lang.String)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: boolean checkPermission(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: java.lang.String getQueryString()> -> _SINK_
<org.apache.ibatis.session.SqlSession: java.lang.Object selectOne(java.lang.String,java.lang.Object)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.Map queryForMap(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position_Tracker__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.fastpath.FastpathArg: void populateParameter(org.postgresql.core.ParameterList,int)> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getDatabaseProductName()> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy: void <init>(java.util.List,java.util.Properties)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.impl.SampleServiceLocalImpl: gov.nih.nci.cananolab.domain.particle.Sample findFullyLoadedSampleByName(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: int getOffset()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateFloat(java.lang.String,float)> -> _SINK_
<com.endeca.navigation.ENEQueryInfo: java.lang.String generateString()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Selection: com.datastax.driver.core.querybuilder.Delete$Selection column(java.lang.String)> -> _SINK_
<com.mysql.jdbc.CursorRowProvider: void beforeFirst()> -> _SINK_
<test.gov.nih.nci.security.threadsafe.CSMAPIMySQLDeadLockTest: void startSession()> -> _SINK_
<org.hibernate.dialect.function.VarArgsSQLFunction: void <init>(org.hibernate.type.Type,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void clearInputStream()> -> _SINK_
<org.apache.commons.beanutils.locale.LocaleConvertUtilsBean: org.apache.commons.collections.FastHashMap create(java.util.Locale)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: void close()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean locatorsUpdateCopy()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setContracts(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setSlowQueryThresholdMillis(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$11: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<java.sql.ResultSet: java.lang.String getString(java.lang.String)> -> _SINK_
<org.postgresql.core.v2.SimpleParameterList: void setIntParameter(int,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.lang.String oidsToString(java.util.Set)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.gridCQL.CQL2ParameterizedHQL: void <init>(gov.nih.nci.system.util.ClassCache,gov.nih.nci.cagrid.sdkquery4.processor.RoleNameResolver,boolean)> -> _SINK_
<com.datastax.driver.core.exceptions.QueryExecutionException: void <init>(java.lang.String)> -> _SINK_
<org.hibernate.criterion.SQLProjection: java.lang.String toSqlString(org.hibernate.Criteria,int,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseFastDateParsing(boolean)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.FieldValueInConstraint createConstraint(org.mmbase.storage.search.StepField,java.util.SortedSet)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean locatorsUpdateCopy()> -> _SINK_
<org.hibernate.tool.hbm2ddl.SchemaUpdate: void execute(boolean,boolean)> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.ApplicationServiceImpl: java.util.List privateQuery(java.lang.Object,java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: int convertLegacyBinaryFiles()> -> _SINK_
<com.datastax.driver.core.Requests$Query$1: int encodedSize(com.datastax.driver.core.Message$Request)> -> _SINK_
<org.apache.ibatis.binding.MapperRegistry: java.lang.Object getMapper(java.lang.Class,org.apache.ibatis.session.SqlSession)> -> _SINK_
<org.hibernate.Query: org.hibernate.Query setMaxResults(int)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: java.lang.String receiveCommandStatus()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$ConnectionProperty: java.lang.String getCategoryName()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Connection: java.sql.Statement createStatement(int,int)> -> _SINK_
<org.postgresql.core.Field: int getPositionInTable()> -> _SINK_
<com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean dataDefinitionCausesTransactionCommit()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getEnablePacketDebug()> -> _SINK_
<org.exolab.castor.persist.ClassMolder: java.lang.Object loadFields(org.castor.persist.TransactionContext,org.exolab.castor.persist.OID,org.exolab.castor.persist.DepositBox,org.castor.persist.ProposedEntity,org.exolab.castor.mapping.AccessMode,org.exolab.castor.persist.QueryResults)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryResult: boolean equals(java.lang.Object)> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.QueryTag: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.apache.ibatis.executor.BaseExecutor: java.util.List query(org.apache.ibatis.mapping.MappedStatement,java.lang.Object,org.apache.ibatis.session.RowBounds,org.apache.ibatis.session.ResultHandler)> -> _SINK_
<com.datastax.driver.core.BatchStatement: com.datastax.driver.core.BatchStatement$IdAndValues getIdAndValues()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.lang.Object getObject(java.lang.String)> -> _SINK_
<java.sql.ResultSet: boolean rowInserted()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: boolean isCloseOnCompletion()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: org.hibernate.sql.JoinFragment createJoin(java.lang.String,boolean,boolean)> -> _SINK_
<com.mysql.jdbc.RowData: boolean hasNext()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: boolean isShallowQuery()> -> _SINK_
<com.mchange.v2.c3p0.WrapperConnectionPoolDataSource: void setLoginTimeout(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CaseFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void countExpr(antlr.collections.AST)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: boolean isInheritedField(org.mmbase.core.CoreField)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4DatabaseMetaData: java.sql.ResultSet getPseudoColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.CQL2HQL: java.lang.String convertPredicate(gov.nih.nci.system.query.cql.CQLPredicate)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.NestedCriteria2HQL: boolean condition1(gov.nih.nci.system.query.nestedcriteria.NestedCriteria)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: void setSecurityConstraint(org.mmbase.security.Authorization$QueryCheck)> -> _SINK_
<org.hibernate.persister.collection.CollectionPropertyMapping: org.hibernate.type.Type toType(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: boolean isLocked(java.lang.Class,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.io.InputStream getNativeBinaryStream(int)> -> _SINK_
<org.hibernate.dialect.function.ClassicAvgFunction: void <init>()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXADataSource: void <init>()> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: void handleRowValues(java.sql.ResultSet,org.apache.ibatis.mapping.ResultMap,org.apache.ibatis.session.ResultHandler,org.apache.ibatis.session.RowBounds)> -> _SINK_
<com.mysql.jdbc.MysqlDefs: java.lang.String typeToName(int)> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: int getColumnDisplaySize(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.SQLWarning getWarnings()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setRef(int,java.sql.Ref)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2: void setAssets(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.cfg.Settings: org.hibernate.hql.QueryTranslatorFactory getQueryTranslatorFactory()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setShort(java.lang.String,short)> -> _SINK_
<org.postgresql.core.Field: java.lang.String getColumnLabel()> -> _SINK_
<org.springframework.orm.jdo.DefaultJdoDialect: void <init>(java.lang.Object)> -> _SINK_
<org.mmbase.cache.MultilevelCache: void <init>(int)> -> _SINK_
<org.springframework.jdbc.core.SqlRowSetResultSetExtractor: javax.sql.rowset.CachedRowSet newCachedRowSet()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: boolean getMoreResults(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection$TransactionCommandHandler: void handleWarning(java.sql.SQLWarning)> -> _SINK_
<com.mysql.jdbc.StringUtils: int wildCompare(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.SuspendableXAConnection: void close()> -> _SINK_
<com.mysql.jdbc.Connection: void rollback()> -> _SINK_
<org.hibernate.hql.QueryExecutionRequestException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Pricebook2: void setOpportunities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.engine.JoinSequence: org.hibernate.sql.JoinFragment toJoinFragment(java.util.Map,boolean,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$8: void <init>(com.mysql.jdbc.DatabaseMetaData,com.mysql.jdbc.DatabaseMetaData$IteratorWithCleanup,java.lang.String,boolean,java.util.Map,boolean,java.util.ArrayList)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlcurdate(java.util.List)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.CQLQuery: int hashCode()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: org.springframework.jdbc.support.rowset.SqlRowSet queryForRowSet(java.lang.String)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.CQL2HQL: void processAssociation(java.lang.StringBuffer,java.util.List,java.lang.String,gov.nih.nci.system.query.cql.CQLAssociation,boolean,boolean)> -> _SINK_
<com.sforce.soap.enterprise.QueryAllResponse_element: void <init>()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Clob getClob(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: java.lang.String[] selectJobListeners(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Time getTime(int,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void clearParameters()> -> _SINK_
<org.postgresql.core.ProtocolConnection: boolean isClosed()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setDouble(java.lang.String,double)> -> _SINK_
<com.mysql.jdbc.Util: double rnd(com.mysql.jdbc.Util$RandStructcture)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: float getFloat(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void fetch(org.postgresql.core.ResultCursor,org.postgresql.core.ResultHandler,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean isLast()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Clob getClob(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Timestamp fastTimestampCreate(java.util.Calendar,int,int,int,int,int,int,int)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement$BindValue: void <init>(com.mysql.jdbc.ServerPreparedStatement$BindValue)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setTcpRcvBuf(int)> -> _SINK_
<java.sql.ResultSet: void updateNull(int)> -> _SINK_
<org.hibernate.hql.ast.exec.AbstractStatementExecutor: org.hibernate.persister.entity.Queryable[] getAffectedQueryables()> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.bridge.Query setOffset(int)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setCharacterStream(int,java.io.Reader,int)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate$5: java.lang.Object readFromSession(oracle.toplink.sessions.Session)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsOuterJoins()> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: void evictQueries(java.lang.String)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLNonTransientException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.jdbc.datasource.SingleConnectionDataSource: void closeConnection()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.CharacterizationServiceHelper: gov.nih.nci.cananolab.domain.common.ExperimentConfig findExperimentConfigById(java.lang.String)> -> _SINK_
<org.hibernate.persister.collection.NamedQueryCollectionInitializer: void <clinit>()> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceUtils: boolean isConnectionTransactional(java.sql.Connection,javax.sql.DataSource)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLQuery: java.lang.Class getResultType()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getRunningCTS13()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl contains(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Project__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<java.sql.ResultSet: java.io.InputStream getBinaryStream(java.lang.String)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: void <init>(java.lang.String,java.lang.String[],java.lang.Class[],org.hibernate.engine.SessionImplementor,org.hibernate.engine.query.ParameterMetadata)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.math.BigDecimal getBigDecimal(int,int)> -> _SINK_
<org.postgresql.ssl.jdbc4.LazyKeyManager: java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.lang.Object getObject(int)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void reclaimLargeReusablePacket()> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: void dereferenceEntity(java.lang.String,org.hibernate.type.EntityType,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.mmbase.storage.search.implementation.ModifiableQuery: boolean isDistinct()> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: long[] mk_tokenSet_3()> -> _SINK_
<com.endeca.navigation.UrlENEQueryParseException: void <init>()> -> _SINK_
<java.sql.DriverPropertyInfo: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.engine.transaction.IsolatedWork: void doWork(java.sql.Connection)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateString(int,java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.SqlFragment: void setJoinFragment(org.hibernate.sql.JoinFragment)> -> _SINK_
<com.mysql.jdbc.Connection: int getServerMajorVersion()> -> _SINK_
<org.hibernate.engine.query.HQLQueryPlan: java.lang.String getSourceQuery()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.jdbc.Batcher: void closeConnection(java.sql.Connection)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: boolean relative(int)> -> _SINK_
<org.postgresql.core.types.PGBoolean: void <init>(java.lang.Boolean)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Clob getClob(int)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: void create(org.mmbase.storage.util.Index)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: void clearBatch()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateNString(int,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsSchemasInPrivilegeDefinitions()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<org.postgresql.core.TypeInfo: int getSQLType(int)> -> _SINK_
<com.mysql.jdbc.profiler.ProfileEventSink: com.mysql.jdbc.profiler.ProfileEventSink getInstance(com.mysql.jdbc.Connection)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getColumnClassName(int)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils$ParsedTimestamp: void <init>()> -> _SINK_
<entities.dao.EntityLazyList: int size()> -> _SINK_
<org.hibernate.dialect.function.AnsiTrimEmulationFunction: java.lang.String render(java.util.List,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<com.mysql.jdbc.ResultSet: void beforeFirst()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: long getLong(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Time__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor$ResultAliasContext: void <init>(org.hibernate.loader.custom.sql.SQLQueryReturnProcessor)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setDate(int,java.sql.Date,java.util.Calendar)> -> _SINK_
<test.gov.nih.nci.security.instancelevel.InstanceLevelSecurityTest: void testAttributeLevelSecurityForGroups()> -> _SINK_
<com.mysql.jdbc.Messages: void <clinit>()> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: void toBinDate(java.util.TimeZone,byte[],java.sql.Date)> -> _SINK_
<org.springframework.orm.toplink.TopLinkAccessor: org.springframework.jdbc.support.SQLExceptionTranslator getJdbcExceptionTranslator()> -> _SINK_
<com.sforce.soap.enterprise.sobject.CampaignFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void setCollectionToFetch(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.array.UUIDArrayAssistant: void <init>()> -> _SINK_
<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addSnapshot(boolean)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.net.URL getURL(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void registerOutParameter(java.lang.String,int)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String getSQLIdentityInsertString()> -> _SINK_
<org.hibernate.sql.InsertSelect: java.lang.String toStatementString()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: org.postgresql.core.ParameterList createParameterList()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: int dehydrate(java.io.Serializable,java.lang.Object[],java.lang.Object,boolean[],boolean[][],int,java.sql.PreparedStatement,org.hibernate.engine.SessionImplementor,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Blob getBlob(java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.Field,java.lang.Integer)> -> _SINK_
<com.mchange.v2.c3p0.JndiRefForwardingDataSource: int getLoginTimeout()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object lessThanOrEq(java.lang.Object)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: java.util.List getAttributeMapForGroup(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$86: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.apache.http.client.utils.URIUtils: java.net.URI resolve(java.net.URI,java.net.URI)> -> _SINK_
<com.datastax.driver.core.querybuilder.BindMarker: void <init>(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.optional.SimpleDataSource: void <init>()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementStore: void <init>(org.exolab.castor.jdo.engine.SQLEngine,org.exolab.castor.persist.spi.PersistenceFactory,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Util: void <init>()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Task__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setMaxFieldSize(int)> -> _SINK_
<org.apache.ibatis.type.BlobTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<org.mongodb.morphia.query.Shape: org.mongodb.morphia.query.Shape box(org.mongodb.morphia.query.Shape$Point,org.mongodb.morphia.query.Shape$Point)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setBlob(int,java.sql.Blob)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setCampaignMembers(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.loader.Loader: void loadFromResultSet(java.sql.ResultSet,int,java.lang.Object,java.lang.String,org.hibernate.engine.EntityKey,java.lang.String,org.hibernate.LockMode,org.hibernate.persister.entity.Loadable,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean ownInsertsAreVisible(int)> -> _SINK_
<org.postgresql.xa.PGXAConnection: int access$000(org.postgresql.xa.PGXAConnection)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int insertSchedulerState(java.sql.Connection,java.lang.String,long,long)> -> _SINK_
<com.sforce.soap.enterprise.fault.MalformedQueryFault: void <init>()> -> _SINK_
<org.springframework.jdbc.core.ResultSetSupportingSqlParameter: org.springframework.jdbc.core.ResultSetExtractor getResultSetExtractor()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getCatalogs()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.StepField findField(org.mmbase.bridge.Query,org.mmbase.bridge.Field)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: int findEndOfReturnsClause(java.lang.String,java.lang.String,int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: java.sql.Array createArrayOf(java.lang.String,java.lang.Object[])> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.SampleQueryBean: java.lang.String getDisplayName()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void registerOutParameter(java.lang.String,int)> -> _SINK_
<org.hibernate.hql.ast.ASTQueryTranslatorFactory: org.hibernate.hql.QueryTranslator createQueryTranslator(java.lang.String,java.lang.String,java.util.Map,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: java.lang.String getColumnCharacterSet(int)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setBytes(java.lang.String,byte[])> -> _SINK_
<org.postgresql.copy.PGCopyInputStream: void close()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: java.sql.ParameterMetaData getParameterMetaData()> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void multiplicativeExpr(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getTypeInfo()> -> _SINK_
<org.hibernate.hql.ast.SqlASTFactory: antlr.collections.AST create(java.lang.Class)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.sql.Statement createStatement(int,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Ref getRef(java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean nullsAreSortedAtStart()> -> _SINK_
<org.postgresql.util.PGInterval: void <init>(java.lang.String)> -> _SINK_
<org.hibernate.sql.SelectFragment: org.hibernate.sql.SelectFragment addFormula(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: void setTypeMap(java.util.Map)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateBytes(int,byte[])> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Clob getClob(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void moveToInsertRow()> -> _SINK_
<org.mmbase.storage.search.implementation.database.HSqlSqlHandler: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: int getMaxFieldSize()> -> _SINK_
<org.postgresql.core.TypeInfo: int getSQLType(java.lang.String)> -> _SINK_
<org.springframework.orm.jdo.JdoTemplate$24: java.lang.Object doInJdo(javax.jdo.PersistenceManager)> -> _SINK_
<org.hibernate.sql.SimpleSelect: org.hibernate.sql.SimpleSelect setLockMode(org.hibernate.LockMode)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: java.util.logging.Logger getParentLogger()> -> _SINK_
<org.exolab.castor.jdo.drivers.PostgreSQLCallQuery: void execute(java.lang.Object,org.exolab.castor.mapping.AccessMode,boolean)> -> _SINK_
<org.hibernate.dialect.Dialect: int registerResultSetOutParameter(java.sql.CallableStatement,int)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: boolean execute(java.lang.String,java.lang.String[])> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$IntegerConnectionProperty: void <init>(com.mysql.jdbc.ConnectionProperties,java.lang.String,java.lang.Object,java.lang.String[],int,int,java.lang.String,java.lang.String,java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void storeDateTime413AndNewer(com.mysql.jdbc.Buffer,java.util.Date)> -> _SINK_
<org.postgresql.core.v2.V2Query: org.postgresql.core.ParameterList createParameterList()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Options: com.datastax.driver.core.querybuilder.Delete$Where where(com.datastax.driver.core.querybuilder.Clause)> -> _SINK_
<org.hibernate.cache.QueryKey: void <init>(java.lang.String,org.hibernate.engine.QueryParameters,java.util.Set,org.hibernate.EntityMode)> -> _SINK_
<org.quartz.impl.jdbcjobstore.PostgreSQLDelegate: java.lang.Object getJobDetailFromBlob(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.hibernate.engine.query.HQLQueryPlan: int performExecuteUpdate(org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.springframework.scheduling.quartz.SchedulerFactoryBean: javax.sql.DataSource getConfigTimeDataSource()> -> _SINK_
<org.mongodb.morphia.query.FilterOperator: org.mongodb.morphia.query.FilterOperator fromString(java.lang.String)> -> _SINK_
<org.apache.commons.beanutils.JDBCDynaClass: void introspect(java.sql.ResultSet)> -> _SINK_
<org.hibernate.sql.SelectFragment: void <init>()> -> _SINK_
<util.reflection.ExceptionHelper: boolean ignoreSQLException(java.lang.String)> -> _SINK_
<org.mmbase.module.builders.Jumpers: java.lang.String getJumpByField(java.lang.String,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ReportFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: boolean execute(java.lang.String,java.lang.String[])> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: boolean shorten(org.mmbase.core.CoreField)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: boolean wasNull()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setObject(int,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: int getFetchDirection()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void propertyRefLhs(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setTimestampInternal(int,java.sql.Timestamp,java.util.Calendar,java.util.TimeZone,boolean)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters: java.text.SimpleDateFormat getParamDateFormat()> -> _SINK_
<org.hibernate.hql.ast.util.JoinProcessor: void <init>(antlr.ASTFactory,org.hibernate.hql.ast.QueryTranslatorImpl)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: gov.nih.nci.logging.api.applicationservice.SearchCriteria getSearchCriteriaThatGivesNoResults()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: boolean isSubQuery()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Campaign: void setOpportunities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getUDTs(java.lang.String,java.lang.String,java.lang.String,int[])> -> _SINK_
<org.hibernate.QueryException: void <init>(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Time__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<java.sql.PreparedStatement: void setTimestamp(int,java.sql.Timestamp)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String generateDetectRowByIndexString()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsResultSetHoldability(int)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: org.mmbase.storage.search.implementation.BasicSearchQuery setMaxNumber(int)> -> _SINK_
<org.hibernate.engine.QueryParameters: java.lang.Object getOptionalObject()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.Object getObject(int)> -> _SINK_
<gov.nih.nci.security.authorization.domainobjects.ApplicationContext: void setDatabaseDriver(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Candidate__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: void setBinaryTransferDisable(java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator: boolean hasNext()> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: org.hibernate.ScrollableResults scroll()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean useUnbufferedInput()> -> _SINK_
<org.hibernate.type.ComponentType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.exolab.castor.jdo.engine.BaseFactory: org.exolab.castor.persist.spi.Persistence getPersistence(org.exolab.castor.mapping.ClassDescriptor)> -> _SINK_
<java.sql.ResultSet: float getFloat(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: boolean getBoolean(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseOnlyServerErrorMessages()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Solution: void setVotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsGroupByBeyondSelect()> -> _SINK_
<org.directwebremoting.convert.DateConverter: java.lang.Object convertInbound(java.lang.Class,org.directwebremoting.extend.InboundVariable,org.directwebremoting.extend.InboundContext)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion leAll(java.lang.Object,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<com.mchange.v2.c3p0.JndiRefForwardingDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.util.QueryConvertor: java.lang.String altaVista2SQL(java.lang.String,org.mmbase.storage.StorageManagerFactory)> -> _SINK_
<java.sql.Connection: java.sql.CallableStatement prepareCall(java.lang.String,int,int)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: java.sql.ParameterMetaData getParameterMetaData()> -> _SINK_
<org.exolab.castor.jdo.drivers.DB2QueryExpression: java.lang.String getStatement(boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Where: com.datastax.driver.core.Statement enableTracing()> -> _SINK_
<org.mmbase.module.database.MultiStatement: void setMaxFieldSize(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$4: void execute(java.sql.Connection)> -> _SINK_
<gov.nih.nci.system.query.hql.UpdateHQLQuery: void <init>(java.lang.String,java.util.List)> -> _SINK_
<org.postgresql.core.ParameterList: void setBytea(int,java.io.InputStream,int)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void create(org.mmbase.module.core.MMObjectNode,org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: int getDayMark(org.mmbase.bridge.Cloud,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: void clearBatch()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean ownInsertsAreVisible(int)> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapClient: javax.sql.DataSource getDataSource()> -> _SINK_
<org.hibernate.stat.StatisticsImplementor: void queryCachePut(java.lang.String,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int deletePausedTriggerGroup(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Date getDate(java.lang.String)> -> _SINK_
<org.apache.axis.transport.http.AbstractQueryStringHandler: void logException(java.lang.Exception)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateTriggerStatesForJobFromOtherState(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: boolean execute(java.lang.String,int)> -> _SINK_
<org.springframework.jdbc.core.SqlParameter: java.lang.String getTypeName()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> -> _SINK_
<org.springframework.jdbc.datasource.ConnectionProxy: java.sql.Connection getTargetConnection()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void escapeblockFast(byte[],com.mysql.jdbc.Buffer,int)> -> _SINK_
<java.sql.PreparedStatement: void setBoolean(int,boolean)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(java.lang.String,java.util.Map)> -> _SINK_
<org.exolab.castor.jdo.engine.JDOMappingLoader: java.lang.String[] getSqlTypes(org.exolab.castor.mapping.xml.FieldMapping)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean nullsAreSortedAtEnd()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void afterLast()> -> _SINK_
<org.mmbase.storage.implementation.database.GenericDataSource: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsOpenStatementsAcrossRollback()> -> _SINK_
<com.amazonaws.auth.QueryStringSigner: java.lang.String calculateStringToSignV2(com.amazonaws.Request)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: void <init>()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: boolean wasNull()> -> _SINK_
<org.exolab.castor.persist.QueryResults: void <init>(org.castor.persist.TransactionContext,org.exolab.castor.persist.LockEngine,org.exolab.castor.persist.spi.PersistenceQuery,org.exolab.castor.mapping.AccessMode,org.exolab.castor.jdo.Database)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean removeTrigger(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void setTypeMapImpl(java.util.Map)> -> _SINK_
<com.datastax.driver.core.Responses$Error: com.datastax.driver.core.exceptions.DriverException asException(java.net.InetAddress)> -> _SINK_
<org.postgresql.util.PGmoney: void setValue(java.lang.String)> -> _SINK_
<org.hibernate.persister.collection.OneToManyPersister: java.lang.String generateDeleteString()> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator$HsqlType: void <init>(org.exolab.castor.jdo.keygen.IdentityKeyGenerator)> -> _SINK_
<org.springframework.jdbc.object.SqlCall: java.lang.String getCallString()> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObjectByNamedParam(java.util.Map,java.util.Map)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Array getArray(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean allProceduresAreCallable()> -> _SINK_
<org.castor.persist.AbstractTransactionContext: void <init>(org.exolab.castor.jdo.Database)> -> _SINK_
<com.mysql.jdbc.Buffer: byte readByte(int)> -> _SINK_
<org.exolab.castor.jdo.drivers.SybaseQueryExpression: void <init>(org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<gov.nih.nci.system.web.HTTPQuery: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<java.sql.ResultSet: void updateInt(java.lang.String,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getNumericFunctions()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Solution: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.apache.commons.dbcp.BasicDataSource: void setValidationQuery(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: void <init>(java.lang.String,int,org.exolab.castor.persist.spi.CallbackInterceptor,org.exolab.castor.persist.spi.InstanceFactory,java.lang.ClassLoader,boolean)> -> _SINK_
<com.endeca.navigation.PartialENEQueryException: void <init>()> -> _SINK_
<org.hibernate.persister.collection.QueryableCollection: org.hibernate.persister.entity.EntityPersister getElementPersister()> -> _SINK_
<org.mongodb.morphia.MapreduceResults: java.util.Iterator iterator()> -> _SINK_
<org.hibernate.jdbc.ConnectionManager: java.sql.Connection getConnection()> -> _SINK_
<org.apache.ibatis.executor.statement.RoutingStatementHandler: java.sql.Statement prepare(java.sql.Connection)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl in(java.lang.Iterable)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object hasNoneOf(java.lang.Iterable)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.lang.String getCatalog()> -> _SINK_
<com.mysql.jdbc.CallableStatement: long getLong(java.lang.String)> -> _SINK_
<org.hibernate.event.AutoFlushEvent: java.util.Set getQuerySpaces()> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxTablesInSelect()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$90: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: com.datastax.driver.core.querybuilder.Insert value(java.lang.String,java.lang.Object)> -> _SINK_
<com.amazonaws.services.simpledb.AmazonSimpleDBClient: void init()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getTypeInfo()> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavRangeFilters(com.endeca.navigation.RangeFilterList)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String[] getSQLLazyUpdateByRowIdStrings()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setEntity(java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.mapping.Join: void setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> -> _SINK_
<org.postgresql.core.TypeInfo: char getArrayDelimiter(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Solution: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: int createKey()> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: java.lang.Iterable fetchKeys()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setNCharacterStream(int,java.io.Reader,long)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void triggeredJobComplete(java.sql.Connection,org.quartz.core.SchedulingContext,org.quartz.Trigger,org.quartz.JobDetail,int)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: double getDouble(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: byte getByte(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setDouble(int,double)> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringEncoder: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.CharacterizationQueryBean: void setCharacterizationName(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: org.hibernate.hql.ParameterTranslations getParameterTranslations()> -> _SINK_
<org.mongodb.morphia.query.MorphiaIterator: java.lang.Object next()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getRequireSSL()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int deleteSchedulerState(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void closeAllCachedStatements()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection: void closeAll()> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void booleanOp(antlr.collections.AST,boolean)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void <init>(com.mysql.jdbc.Connection,java.lang.String,java.lang.String,boolean)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: java.lang.Object getMapper(java.lang.Class)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.Trigger[] selectTriggersForJob(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.Object getObjectStoredProc(int,int)> -> _SINK_
<org.mmbase.cache.ChainedReleaseStrategy: boolean doEvaluate(org.mmbase.core.event.RelationEvent,org.mmbase.storage.search.SearchQuery,java.util.List)> -> _SINK_
<org.hibernate.Query: java.lang.Object uniqueResult()> -> _SINK_
<org.castor.persist.TransactionContext: java.sql.Connection getConnection(org.exolab.castor.persist.LockEngine)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void clearParameters()> -> _SINK_
<com.mysql.jdbc.Statement: boolean createStreamingResultSet()> -> _SINK_
<org.mongodb.morphia.query.FieldCriteria: java.lang.Object getValue()> -> _SINK_
<org.apache.ibatis.type.ClobTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.postgresql.fastpath.Fastpath: java.lang.Object fastpath(java.lang.String,boolean,org.postgresql.fastpath.FastpathArg[])> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<org.hibernate.sql.JoinFragment: void setHasFilterCondition(boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Lead: void setTasks(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: java.lang.String getQueryString()> -> _SINK_
<org.springframework.jdbc.datasource.SingleConnectionDataSource: java.sql.Connection getCloseSuppressingConnectionProxy(java.sql.Connection)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setURL(java.lang.String,java.net.URL)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setBoolean(java.lang.String,boolean)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: int getInt(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: boolean nullSafeCompare(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Time getTime(int)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate$CloseSuppressingInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<java.sql.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: int getMaxFieldSize()> -> _SINK_
<org.eclipse.acceleo.engine.internal.evaluation.QueryCache: void <init>(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.math.BigDecimal getBigDecimalFromString(java.lang.String,int,int)> -> _SINK_
<java.sql.PreparedStatement: void setBytes(int,byte[])> -> _SINK_
<org.hibernate.engine.QueryParameters: void validateParameters()> -> _SINK_
<com.mysql.jdbc.MysqlIO: java.lang.Object[] nextRow(com.mysql.jdbc.Field[],int,boolean,int)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: void appendIdentifierColumns(org.hibernate.sql.SelectFragment,java.lang.String)> -> _SINK_
<org.hibernate.hql.classic.OrderByParser: void token(java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: java.lang.Object prepareSimpleKeyParameter(java.sql.ResultSet,org.apache.ibatis.mapping.ResultMapping,java.lang.Class)> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator$PostgresqlType: void <init>(org.exolab.castor.jdo.keygen.IdentityKeyGenerator)> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.DimValIdList getDimSearchDimensions()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,int)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: gov.nih.nci.logging.api.applicationservice.SearchCriteria getSearchCriteriaThatGivesNoResults()> -> _SINK_
<org.postgresql.core.Notification: void <init>(java.lang.String,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2: void setTasks(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setOpenActivities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.SQLWarning getWarnings()> -> _SINK_
<org.mmbase.module.database.MultiStatement: void close()> -> _SINK_
<javax.sql.ConnectionEventListener: void connectionClosed(javax.sql.ConnectionEvent)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.UpdateTagSupport: void doFinally()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: int getInt(int)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavERecsPerAggrERec(int)> -> _SINK_
<org.hibernate.loader.custom.CustomLoader: java.lang.Object getResultColumnOrRow(java.lang.Object[],org.hibernate.transform.ResultTransformer,java.sql.ResultSet,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.mmbase.storage.search.implementation.database.PostgreSqlSqlHandler: void <clinit>()> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: com.amazonaws.services.dynamodb.model.Key getExclusiveStartKey()> -> _SINK_
<com.sun.jersey.api.uri.UriBuilderImpl: java.lang.String create()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String generateGeneratedValuesSelectString(boolean[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.ProcessInstance: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode$FilteredDynamicContext$1: void <init>(org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode$FilteredDynamicContext)> -> _SINK_
<com.mysql.jdbc.LicenseConfiguration: void checkLicenseType(java.util.Map)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Timestamp getTimestamp(java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodbv2.AmazonDynamoDB: com.amazonaws.services.dynamodbv2.model.QueryResult query(com.amazonaws.services.dynamodbv2.model.QueryRequest)> -> _SINK_
<com.sun.jersey.api.uri.UriBuilderImpl: javax.ws.rs.core.UriBuilder replaceQueryParam(java.lang.String,java.lang.Object[])> -> _SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcTemplate: java.lang.Object queryForObject(java.lang.String,org.springframework.jdbc.core.simple.ParameterizedRowMapper,java.lang.Object[])> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsCatalogsInPrivilegeDefinitions()> -> _SINK_
<gov.nih.nci.cananolab.dto.BaseQueryBean: java.lang.String getDisplayName()> -> _SINK_
<org.postgresql.core.ProtocolConnection: org.postgresql.core.Encoding getEncoding()> -> _SINK_
<org.castor.jdo.engine.AbstractConnectionFactory: org.castor.jdo.conf.Database getDatabase()> -> _SINK_
<org.mmbase.module.database.MultiPoolHandler: org.mmbase.module.database.MultiConnection getConnection(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateTimestamp(int,java.sql.Timestamp)> -> _SINK_
<entities.RepositoryAtomic: java.util.List query(java.lang.String,java.lang.Object[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.FiscalYearSettings: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Campaign: void setEvents(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void beforeFirst()> -> _SINK_
<org.postgresql.util.MD5Digest: byte[] encode(byte[],byte[],byte[])> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setUnicodeStream(int,java.io.InputStream,int)> -> _SINK_
<org.hibernate.sql.DisjunctionFragment: void <init>()> -> _SINK_
<gov.nih.nci.system.util.StringClobType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],java.lang.Object)> -> _SINK_
<org.postgresql.core.v3.ProtocolConnectionImpl: void close()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: double getDouble(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: int getMaxRowSize()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: int getServerMinorVersion()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: java.sql.RowId getRowId(java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setShort(java.lang.String,short)> -> _SINK_
<org.apache.commons.beanutils.converters.SqlTimestampConverter: void <init>(java.lang.Object)> -> _SINK_
<org.postgresql.core.ParameterList: void setStringParameter(int,java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.util.VersionFSHierarchyMaker: void usage()> -> _SINK_
<com.mysql.jdbc.Buffer: void writeLongInt(int)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateBoolean(java.lang.String,boolean)> -> _SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcTemplate: java.util.Map queryForMap(java.lang.String,java.lang.Object[])> -> _SINK_
<org.mmbase.module.core.MMObjectBuilder: void removeSyncNodes(org.mmbase.module.core.MMObjectNode)> -> _SINK_
<org.hibernate.sql.Template: java.lang.String renderOrderByStringTemplate(java.lang.String,org.hibernate.dialect.Dialect,org.hibernate.dialect.function.SQLFunctionRegistry)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getSQLKeywords()> -> _SINK_
<org.springframework.orm.hibernate3.LocalSessionFactoryBean$1: java.lang.Object doInHibernate(org.hibernate.Session)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementLoad: java.lang.Object executeStatement(java.sql.Connection,org.exolab.castor.persist.spi.Identity,org.castor.persist.ProposedEntity,org.exolab.castor.mapping.AccessMode)> -> _SINK_
<org.mongodb.morphia.dao.BasicDAO: java.util.List findIds()> -> _SINK_
<org.hibernate.stat.Statistics: org.hibernate.stat.QueryStatistics getQueryStatistics(java.lang.String)> -> _SINK_
<org.apache.ibatis.mapping.MappedStatement$Builder: void <init>(org.apache.ibatis.session.Configuration,java.lang.String,org.apache.ibatis.mapping.SqlSource,org.apache.ibatis.mapping.SqlCommandType)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsSelectForUpdate()> -> _SINK_
<org.exolab.castor.jdo.engine.TxDatabaseMap: void <init>()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String[] selectCalendars(java.sql.Connection)> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxStatementLength()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateInt(java.lang.String,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: byte getByte(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsSubqueriesInQuantifieds()> -> _SINK_
<org.exolab.castor.persist.spi.PersistenceQuery: void execute(java.lang.Object,org.exolab.castor.mapping.AccessMode,boolean)> -> _SINK_
<java.sql.CallableStatement: void setTime(java.lang.String,java.sql.Time)> -> _SINK_
<org.mongodb.morphia.dao.BasicDAO: org.mongodb.morphia.query.UpdateResults update(org.mongodb.morphia.query.Query,org.mongodb.morphia.query.UpdateOperations)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setCalendar(int,java.util.Calendar)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateTriggerStateFromOtherStatesBeforeTime(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String,long)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4CallableStatement: void <init>(org.postgresql.jdbc4.Jdbc4Connection,java.lang.String,int,int,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Recruiting_Tracker__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.endeca.navigation.ENEQuery: long getNavNumBulkERecs()> -> _SINK_
<com.datastax.driver.core.Configuration: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Time getTime(int,java.util.Calendar)> -> _SINK_
<org.hibernate.persister.entity.JoinedSubclassEntityPersister: org.hibernate.sql.CaseFragment discriminatorFragment(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getUserName()> -> _SINK_
<org.hibernate.type.TextType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$22: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setNull(int,int)> -> _SINK_
<org.apache.ibatis.executor.keygen.Jdbc3KeyGenerator: void processAfter(org.apache.ibatis.executor.Executor,org.apache.ibatis.mapping.MappedStatement,java.sql.Statement,java.lang.Object)> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getTableTypes()> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: int update(java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.hql.ast.HqlParser: void panic()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setObject(java.lang.String,java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: double getDouble(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean storesMixedCaseIdentifiers()> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator$PostgresqlType: java.lang.Object getValue(java.sql.Connection,java.lang.String)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: void <init>(org.hibernate.mapping.Collection,org.hibernate.cache.CacheConcurrencyStrategy,org.hibernate.cfg.Configuration,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setTime(int,java.sql.Time,java.util.Calendar)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setAr(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setDetectServerPreparedStmts(boolean)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: org.postgresql.ds.PGConnectionPoolDataSource createConnectionPool()> -> _SINK_
<com.mysql.jdbc.SingleByteCharsetConverter: byte[] toBytes(char[])> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: void <clinit>()> -> _SINK_
<org.exolab.castor.jdo.engine.LocalDatabaseImpl: void finalize()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Candidate__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: int getResultSetHoldability()> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker$WithClauseVisitor: org.hibernate.hql.ast.tree.FromElement getReferencedFromElement()> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: java.sql.Date toDateBin(java.util.TimeZone,byte[])> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: int isNullable(int)> -> _SINK_
<org.apache.ibatis.type.TypeHandlerRegistry: void <init>()> -> _SINK_
<org.hibernate.type.CustomType: void <init>(java.lang.Class,java.util.Properties)> -> _SINK_
<org.postgresql.core.ProtocolConnection: java.lang.String getServerVersion()> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.SetDataSourceTag: void evaluateExpressions()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: java.lang.String urlDecode(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlBaseParser: void fromClassOrOuterQueryPath()> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$SelectionOrAlias: com.datastax.driver.core.querybuilder.Select$Selection as(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: java.nio.ByteBuffer[] getValues()> -> _SINK_
<com.datastax.driver.core.QueryTrace: java.net.InetAddress getCoordinator()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Statement: java.sql.ResultSet createResultSet(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)> -> _SINK_
<com.datastax.driver.core.QueryTrace: void <init>(java.util.UUID,com.datastax.driver.core.SessionManager)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void addBatch()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setTimestamp(int,java.sql.Timestamp)> -> _SINK_
<com.mysql.jdbc.ResultSet: byte getByte(int)> -> _SINK_
<java.sql.ResultSet: void updateBoolean(int,boolean)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLIntegrityConstraintViolationException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: byte getByte(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: boolean execute(java.lang.String)> -> _SINK_
<org.hibernate.sql.Alias: java.lang.String toAliasString(java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Array getArray(int)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setObject(int,java.lang.Object,int,int)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void quit()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void inRhs(antlr.collections.AST)> -> _SINK_
<org.apache.ibatis.type.UnknownTypeHandler: java.lang.Class safeGetClassForColumn(java.sql.ResultSetMetaData,java.lang.Integer)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$1: void actionPerformed(java.awt.event.ActionEvent)> -> _SINK_
<org.hibernate.sql.JoinFragment: void addJoins(java.lang.String,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContentDocument: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Array makeArray(int,byte[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: int getResultSetHoldability()> -> _SINK_
<org.mongodb.morphia.query.FieldCriteria: void addTo(com.mongodb.DBObject)> -> _SINK_
<com.sun.jersey.api.uri.UriBuilderImpl: java.net.URI _buildFromMap(boolean,java.util.Map)> -> _SINK_
<org.hibernate.lob.SerializableBlob: java.io.OutputStream setBinaryStream(long)> -> _SINK_
<org.mmbase.storage.search.implementation.database.ChainedSqlHandler: void appendQueryBodyToSql(java.lang.StringBuffer,org.mmbase.storage.search.SearchQuery,org.mmbase.storage.search.implementation.database.SqlHandler)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateNull(int)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementRemove: void <clinit>()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateInt(int,int)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: int getConcurrency()> -> _SINK_
<org.mmbase.storage.search.implementation.database.PostgreSqlSqlHandler: void appendTableName(java.lang.StringBuffer,org.mmbase.storage.search.Step)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setShort(int,short)> -> _SINK_
<com.endeca.navigation.ENEQuery: long getNavNumBulkAggrERecs()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: byte[] getBytes(int)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String getSQLWhereString(java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$75: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringEncoder: java.lang.String toString()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxStatementLength()> -> _SINK_
<com.mysql.jdbc.RowData: com.mysql.jdbc.ResultSet getOwner()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: boolean last()> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicQueryHandler: int getSupportLevel(org.mmbase.storage.search.Constraint,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<com.amazonaws.services.simpledb.model.transform.InvalidQueryExpressionExceptionUnmarshaller: com.amazonaws.AmazonServiceException unmarshall(org.w3c.dom.Node)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.math.BigDecimal getBigDecimal(int,int)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: void appendDateField(java.lang.StringBuffer,org.mmbase.storage.search.Step,java.lang.String,boolean,int)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void validateScrollability()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getSchemaName(int)> -> _SINK_
<com.mysql.jdbc.ResultSet: int getInt(java.lang.String)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void addOwners(java.lang.String,java.lang.String[])> -> _SINK_
<com.mysql.jdbc.Buffer: long newReadLength()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNrc(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getAutoClosePStmtStreams()> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setShort(java.lang.String,short)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: void commit()> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicQueryHandler: java.util.List readNodes(org.mmbase.module.core.MMObjectBuilder,org.mmbase.storage.search.StepField[],java.sql.ResultSet,boolean,int)> -> _SINK_
<org.hibernate.tool.hbm2ddl.TableMetadata: void addForeignKey(java.sql.ResultSet)> -> _SINK_
<org.springframework.jdbc.object.SqlFunction: void <init>()> -> _SINK_
<com.endeca.navigation.ENEQuery: int getDimSearchNumDimValues()> -> _SINK_
<org.mmbase.storage.search.implementation.database.MySqlSqlHandler: void <init>()> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateBlob(java.lang.String,java.sql.Blob)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Group: gov.nih.nci.cagrid.cqlquery.Group getGroup(int)> -> _SINK_
<org.castor.jdo.engine.SQLTypeInfos: void setValue(java.sql.PreparedStatement,int,java.lang.Object,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<org.mongodb.morphia.query.UpdateOperator: java.lang.String val()> -> _SINK_
<org.postgresql.core.v3.CompositeParameterList: void setBytea(int,java.io.InputStream,int)> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: org.mongodb.morphia.query.UpdateOperations add(java.lang.String,java.lang.Object)> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: void addInnerJoin(java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: java.util.List access$200(com.datastax.driver.core.querybuilder.Update$Where)> -> _SINK_
<com.mysql.jdbc.Blob: long position(java.sql.Blob,long)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)> -> _SINK_
<com.mchange.v2.c3p0.util.ConnectionEventSupport: void addConnectionEventListener(javax.sql.ConnectionEventListener)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setURL(int,java.net.URL)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: short getShort(java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsColumnAliasing()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void pauseTriggerGroup(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String)> -> _SINK_
<com.mysql.jdbc.log.Jdk14Logger: int findCallerStackDepth(java.lang.StackTraceElement[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsGroupBy()> -> _SINK_
<org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter: java.util.Map getJpaPropertyMap()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setInt(java.lang.String,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: boolean haveMinimumServerVersion(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.RowCallbackHandler: void processRow(java.sql.ResultSet)> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getSystemFunctions()> -> _SINK_
<org.castor.jdo.conf.DatabaseChoice: void setJndi(org.castor.jdo.conf.Jndi)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: com.datastax.driver.core.RegularStatement setForceNoValues(boolean)> -> _SINK_
<com.mchange.v2.c3p0.DriverManagerDataSourceFactory: javax.sql.DataSource create(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsNamedParameters()> -> _SINK_
<com.sforce.soap.enterprise.sobject.EventFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.apache.ibatis.executor.keygen.SelectKeyGenerator: void processGeneratedKeys(org.apache.ibatis.executor.Executor,org.apache.ibatis.mapping.MappedStatement,java.sql.Statement,java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setContacts(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.largeobject.LargeObject: int read(byte[],int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean usesLocalFiles()> -> _SINK_
<com.mysql.jdbc.CallableStatement: int getInt(int)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.sql.SQLXML getSQLXML(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean: java.lang.Boolean getHasAgentMaterial()> -> _SINK_
<org.exolab.castor.jdo.Database: boolean isActive()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsOrderByUnrelated()> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: void setQueryTimeout(int)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: void setAutoCommit(boolean)> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.Query: java.util.Collection query()> -> _SINK_
<com.mysql.jdbc.MysqlIO: long getCurrentTimeNanosOrMillis()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: boolean getBoolean(int)> -> _SINK_
<org.mmbase.cache.QueryResultCache: java.lang.Object remove(org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl$1: void handleCommandStatus(java.lang.String,int,long)> -> _SINK_
<org.postgresql.core.Field: int getMod()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: java.sql.SQLXML getSQLXML(java.lang.String)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$MainFrame: void jbInit()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: boolean isComparativeExpressionClause()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setCalendar(java.lang.String,java.util.Calendar)> -> _SINK_
<org.mongodb.morphia.query.DefaultQueryFactory: org.mongodb.morphia.query.Query createQuery(org.mongodb.morphia.Datastore,com.mongodb.DBCollection,java.lang.Class,com.mongodb.DBObject)> -> _SINK_
<org.postgresql.util.PGobject: boolean equals(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<org.mmbase.module.database.MultiStatement: int executeUpdate(java.lang.String,int)> -> _SINK_
<org.mmbase.servlet.ImageServlet: org.mmbase.bridge.Node desperatelyGetNode(org.mmbase.bridge.Cloud,java.lang.String)> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy: long getLocalTimeBestResolution()> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteria: void setSourceObjectList(java.util.List)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsCorrelatedSubqueries()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setLong(int,long)> -> _SINK_
<org.mmbase.cache.QueryResultCache: boolean containsType(org.mmbase.core.event.NodeEvent)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.SampleServiceHelper: java.util.List findOtherPointOfContactsBySampleId(java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.Queries: void addStartNodes(org.mmbase.bridge.Query,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.classic.PreprocessingParser: void start(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.hibernate.hql.ast.tree.IntoClause: void resetText()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.math.BigDecimal getBigDecimal(int,int)> -> _SINK_
<org.exolab.castor.util.SqlBindParser: void <init>(java.lang.String)> -> _SINK_
<org.hibernate.persister.collection.OneToManyPersister: org.hibernate.loader.collection.CollectionInitializer createCollectionInitializer(java.util.Map)> -> _SINK_
<com.fasterxml.jackson.databind.deser.std.DateDeserializers$SqlDateDeserializer: java.sql.Date deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setTime(java.lang.String,java.sql.Time)> -> _SINK_
<org.exolab.castor.dtx.DTXQuery: void initQuery(org.exolab.castor.mapping.xml.ClassMapping,org.exolab.castor.persist.spi.QueryExpression)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: boolean previous()> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: void checkForBindMarkers(java.lang.Object)> -> _SINK_
<org.hibernate.type.LocaleType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<com.amazonaws.services.dynamodb.AmazonDynamoDBAsyncClient: java.util.concurrent.Future queryAsync(com.amazonaws.services.dynamodb.model.QueryRequest)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateFloat(java.lang.String,float)> -> _SINK_
<org.hibernate.type.NullableType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,boolean[],org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: java.sql.SQLWarning getWarnings()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contract: void setEvents(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.mapping.Join: java.lang.String getCustomSQLUpdate()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: com.datastax.driver.core.ConsistencyLevel getConsistencyLevel()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.core.Utils: java.lang.String toHexString(byte[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean insertsAreDetected(int)> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: org.hibernate.type.Type getPropertyType()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLFieldInfo: org.exolab.castor.jdo.engine.SQLColumnInfo[] getColumnInfo()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: int getTransactionState()> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateBoolean(java.lang.String,boolean)> -> _SINK_
<entities.dao.AbstractDAO: java.util.List query(java.lang.String)> -> _SINK_
<org.exolab.castor.persist.ClassMolder: boolean isFieldTransient(org.exolab.castor.mapping.xml.FieldMapping)> -> _SINK_
<org.hibernate.engine.SessionImplementor: org.hibernate.Query getNamedQuery(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setLong(int,long)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryResult: java.util.Map getLastEvaluatedKey()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.math.BigDecimal getBigDecimal(int)> -> _SINK_
<org.springframework.jdbc.datasource.lookup.MapDataSourceLookup: void <init>(java.lang.String,javax.sql.DataSource)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: java.lang.Object column(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: org.postgresql.core.QueryExecutor getQueryExecutor()> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch$Options: void <init>(com.datastax.driver.core.querybuilder.Batch)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void markInactiveRawConnectionResultSet(java.sql.ResultSet)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$14: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.StringUtils: java.util.List split(java.lang.String,java.lang.String,boolean)> -> _SINK_
<gov.nih.nci.security.authorization.domainobjects.ApplicationContext: java.lang.String getDatabaseDialect()> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: void end(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Time getTime(int,java.util.Calendar)> -> _SINK_
<org.springframework.orm.jpa.vendor.TopLinkJpaVendorAdapter: java.lang.String determineTargetDatabaseName(org.springframework.orm.jpa.vendor.Database)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.String getEncoding()> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.lang.String mangleParameterName(java.lang.String)> -> _SINK_
<com.mysql.jdbc.MysqlIO: int adjustStartForFieldLength(int,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Project__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.lang.Object[],org.springframework.jdbc.core.RowMapper)> -> _SINK_
<org.apache.axis.management.ServiceAdmin: void setEngine(org.apache.axis.server.AxisServer,java.lang.String)> -> _SINK_
<org.hibernate.type.ClobType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: com.mysql.jdbc.Buffer fillSendPacket()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Array getArray(java.lang.String)> -> _SINK_
<org.hibernate.hql.QueryTranslatorFactory: org.hibernate.hql.FilterTranslator createFilterTranslator(java.lang.String,java.lang.String,java.util.Map,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.mongodb.morphia.query.FieldCriteria: java.lang.String getField()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsUnionAll()> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: java.util.SortedSet getOTypes(org.mmbase.bridge.Cloud,java.util.List,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setBytes(int,byte[])> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: java.lang.String getQueryString()> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlsubstring(java.util.List)> -> _SINK_
<com.endeca.navigation.analytics.AnalyticsQuery: void validateSyntax()> -> _SINK_
<com.endeca.navigation.ENEQuery: java.util.Set getProfiles()> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: boolean appendValueIfCollection(java.lang.Object,java.lang.StringBuilder,boolean)> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy$BestResponseTimeBalanceStrategy: void <init>(com.mysql.jdbc.LoadBalancingConnectionProxy)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setAutoGenerateTestcaseScript(boolean)> -> _SINK_
<com.mysql.jdbc.ResultSet: com.mysql.jdbc.ResultSet copy()> -> _SINK_
<com.mysql.jdbc.Util: com.mysql.jdbc.Util$RandStructcture randomInit(long,long)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateTime(java.lang.String,java.sql.Time)> -> _SINK_
<com.mysql.jdbc.util.ServerController: java.lang.String getFullExecutablePath()> -> _SINK_
<gov.nih.nci.system.query.cql.CQLLogicalOperator: void <clinit>()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.sql.Connection getNonManagedTXConnection()> -> _SINK_
<com.mysql.jdbc.Statement: int getFetchSize()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<java.sql.CallableStatement: java.sql.Time getTime(int)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void processFunction(antlr.collections.AST,boolean)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: org.postgresql.core.v3.CopyOperationImpl processCopyResults(org.postgresql.core.v3.CopyOperationImpl,boolean)> -> _SINK_
<com.mysql.jdbc.Util: long getCurrentTimeNanosOrMillis()> -> _SINK_
<java.sql.PreparedStatement: void addBatch()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void beginTransaction()> -> _SINK_
<javax.sql.ConnectionPoolDataSource: javax.sql.PooledConnection getPooledConnection()> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: java.sql.SQLException receiveErrorMessage()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Insert insertInto(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.type.NullableType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.postgresql.geometric.PGbox: void <init>()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$74: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<org.postgresql.core.Encoding: void <clinit>()> -> _SINK_
<gov.nih.nci.cananolab.dto.common.PublicationBean: void copyFromDatabase(gov.nih.nci.cananolab.dto.common.PublicationBean)> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.QueryTag: int doStartTag()> -> _SINK_
<org.mmbase.module.database.MultiStatement: boolean execute(java.lang.String,int)> -> _SINK_
<org.postgresql.core.VisibleBufferedInputStream: byte[] getBuffer()> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqllcase(java.util.List)> -> _SINK_
<org.exolab.castor.jdo.CacheManager: void expireCache(java.lang.Class,java.lang.Object[])> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: java.lang.StringBuilder maybeAddSemicolon(java.lang.StringBuilder)> -> _SINK_
<com.sforce.soap.enterprise.sobject.OpportunityFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<com.sforce.soap.enterprise.QueryResponse_element: com.sforce.soap.enterprise.QueryResult getResult()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Time getTime(java.lang.String,java.util.Calendar)> -> _SINK_
<entities.dao.IDAO: long queryCount(java.lang.String,java.lang.Object[])> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$ListPrependAssignment: boolean containsBindMarker()> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getStringFunctions()> -> _SINK_
<org.hibernate.event.def.DefaultFlushEntityEventListener: java.lang.Object[] getDatabaseSnapshot(org.hibernate.engine.SessionImplementor,org.hibernate.persister.entity.EntityPersister,java.io.Serializable)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.Field,java.lang.String,boolean)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Array: java.lang.Object getArray(long,int,java.util.Map)> -> _SINK_
<test.gov.nih.nci.security.dialect.MySQLPerformanceTest: void testUnSecured()> -> _SINK_
<org.postgresql.core.ParameterList: void registerOutParameter(int,int)> -> _SINK_
<org.mongodb.morphia.query.UpdateResults: boolean getUpdatedExisting()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.bridge.NodeQuery createRelatedNodeListQuery(org.mmbase.bridge.Node,java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.QueryImpl: boolean validDateFormat(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void clearWarnings()> -> _SINK_
<com.endeca.navigation.ENEQuery: void setAggrERecRollupKey(java.lang.String)> -> _SINK_
<org.springframework.jdbc.UncategorizedSQLException: void <init>(java.lang.String,java.lang.String,java.sql.SQLException)> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.enhype.db.PostgresDB: void closeConnection(java.sql.Connection)> -> _SINK_
<org.hibernate.hql.ast.tree.CaseNode: void setScalarColumnText(int)> -> _SINK_
<org.castor.jdo.conf.DatabaseChoiceDescriptor$2: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: com.mongodb.WriteResult delete(java.lang.String,java.lang.Class,java.lang.Object,com.mongodb.WriteConcern)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setLogger(java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.UnionSubclassEntityPersister: void addDiscriminatorToSelect(org.hibernate.sql.SelectFragment,java.lang.String,java.lang.String)> -> _SINK_
<com.amazonaws.services.simpledb.model.transform.InvalidQueryExpressionExceptionUnmarshaller: void <init>()> -> _SINK_
<com.mysql.jdbc.util.ServerController: void setDataDir(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils$Appendeable: boolean containsBindMarker()> -> _SINK_
<org.hibernate.loader.custom.sql.SQLCustomQuery: java.util.Map getNamedParameterBindPoints()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String[] getJobNames(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.Query_element: void writeFields(com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.castor.jdo.conf.DatabaseDescriptor: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiStatement: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<org.postgresql.largeobject.BlobInputStream: void mark(int)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void setListValue(java.sql.PreparedStatement,int,java.lang.Object,org.mmbase.core.CoreField,org.mmbase.module.core.MMObjectNode)> -> _SINK_
<org.hibernate.sql.ConditionFragment: org.hibernate.sql.ConditionFragment setTableAlias(java.lang.String)> -> _SINK_
<java.sql.PreparedStatement: void setInt(int,int)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsAlterTableWithAddColumn()> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodes: java.lang.String[] getPermissionDeniedCodes()> -> _SINK_
<org.hibernate.cfg.SettingsFactory: org.hibernate.cfg.Settings buildSettings(java.util.Properties)> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceUtils: boolean connectionEquals(org.springframework.jdbc.datasource.ConnectionHolder,java.sql.Connection)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: int getColumnDisplaySize(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: boolean getMoreResults()> -> _SINK_
<org.hibernate.hql.ast.tree.Case2Node: void setScalarColumnText(int)> -> _SINK_
<gov.nih.nci.security.authorization.domainobjects.ApplicationContext: java.lang.String getDatabaseUserName()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void close()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Time getTime(java.lang.String)> -> _SINK_
<org.hibernate.type.CharBooleanType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setArray(int,java.sql.Array)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$ErrorTrackingResultHandler: void <init>(org.postgresql.core.ResultHandler)> -> _SINK_
<com.sforce.soap.enterprise.sobject.TestObj1__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.String getStringForClob(int)> -> _SINK_
<org.hibernate.persister.collection.CollectionPersister: java.lang.Object readKey(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor)> -> _SINK_
<test.gov.nih.nci.security.instancelevel.InstanceLevelSecurityTest: void testInstanceANDAttributeLevelSecrityForGroups()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: byte[] getBytes(int)> -> _SINK_
<org.hibernate.jdbc.Batcher: java.sql.CallableStatement prepareCallableStatement(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.DataSources: javax.sql.DataSource unpooledDataSource(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: antlr.collections.AST createIntoClause(java.lang.String,antlr.collections.AST)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: boolean isShallowQuery()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void checkForOutstandingStreamingData()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.lang.Object getObject(java.lang.String,java.util.Map)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsSavepoints()> -> _SINK_
<com.datastax.driver.core.QueryOptions: com.datastax.driver.core.ConsistencyLevel getSerialConsistencyLevel()> -> _SINK_
<org.springframework.jdbc.core.support.JdbcDaoSupport: java.sql.Connection getConnection()> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean first()> -> _SINK_
<com.mysql.jdbc.util.PropertiesDocGenerator: void main(java.lang.String[])> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringDecoder: void decodeParams(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateFloat(java.lang.String,float)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.NestedCriteria2HQL: void solveScenario2(java.lang.StringBuffer,gov.nih.nci.system.query.nestedcriteria.NestedCriteria)> -> _SINK_
<org.quartz.impl.jdbcjobstore.Semaphore: void releaseLock(java.sql.Connection,java.lang.String)> -> _SINK_
<org.hibernate.loader.Loader: java.lang.String preprocessSQL(java.lang.String,org.hibernate.engine.QueryParameters,org.hibernate.dialect.Dialect)> -> _SINK_
<org.hibernate.collection.PersistentIndexedElementHolder: java.lang.Object readFrom(java.sql.ResultSet,org.hibernate.persister.collection.CollectionPersister,org.hibernate.loader.CollectionAliases,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: java.sql.SQLWarning getWarnings()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: int getScale(int)> -> _SINK_
<org.postgresql.geometric.PGline: void <init>(org.postgresql.geometric.PGpoint,org.postgresql.geometric.PGpoint)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int)> -> _SINK_
<org.mongodb.morphia.Datastore: org.mongodb.morphia.query.Query find(java.lang.Class,java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.engine.SessionImplementor: org.hibernate.Query getNamedSQLQuery(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.ConnectionTester: int statusOnException(java.sql.Connection,java.lang.Throwable)> -> _SINK_
<org.apache.ibatis.executor.statement.CallableStatementHandler: void registerOutputParameters(java.sql.CallableStatement)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Object: gov.nih.nci.cagrid.cqlquery.Association getAssociation()> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.TextSqlNode: boolean apply(org.apache.ibatis.builder.xml.dynamic.DynamicContext)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setShares(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.DriverManagerDataSourceFactory: javax.sql.DataSource create(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.exolab.castor.dtx.DTXQuery: void emitSaxEvents(java.sql.ResultSet)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate: java.util.List readAll(java.lang.Class,oracle.toplink.queryframework.Call,boolean)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void aggregateExpr(antlr.collections.AST)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setAggrERecSpec(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$IntegerConnectionProperty: int getLowerBound()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: void postInstantiate()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.sql.Savepoint setSavepoint(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateNull(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Time getTime(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: boolean rowUpdated()> -> _SINK_
<org.hibernate.loader.criteria.CriteriaLoader: java.util.List list(org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<gov.nih.nci.system.webservice.WSQueryImpl: java.util.List queryObject(java.lang.String,java.lang.Object)> -> _SINK_
<org.apache.commons.beanutils.converters.SqlDateConverter: void <init>(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateTime(java.lang.String,java.sql.Time)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DataSourceWrapper: void <init>()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addEqualConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.Field,java.lang.Integer)> -> _SINK_
<org.hibernate.impl.SessionImpl: java.util.List find(java.lang.String,java.lang.Object,org.hibernate.type.Type)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setMaintainTimeStats(boolean)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: void setOptionalId(java.io.Serializable)> -> _SINK_
<org.hibernate.sql.JoinFragment: boolean hasThetaJoins()> -> _SINK_
<org.hibernate.dialect.SQLServerDialect: java.lang.String getLimitString(java.lang.String,int,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: short getShort(java.lang.String)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: void processJoinReturn(org.hibernate.engine.query.sql.NativeSQLQueryJoinReturn)> -> _SINK_
<org.exolab.castor.jdo.drivers.PostgreSQLCallQuery: void <clinit>()> -> _SINK_
<org.postgresql.util.ServerErrorMessage: int getIntegerPart(java.lang.Character)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.SuspendableXAConnection: int prepare(javax.transaction.xa.Xid)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: boolean getBoolean(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.QueryFactory: org.mongodb.morphia.query.Query createQuery(org.mongodb.morphia.Datastore,com.mongodb.DBCollection,java.lang.Class,com.mongodb.DBObject)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.lang.String getString(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setByte(int,byte)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: long queryForLong(java.lang.String)> -> _SINK_
<java.sql.ResultSet: void clearWarnings()> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.ResultSet executeQuery()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsTransactions()> -> _SINK_
<org.hibernate.hql.ast.tree.Statement: org.hibernate.hql.ast.HqlSqlWalker getWalker()> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationServiceFacade: java.lang.Object updateObject(java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: void setCursorName(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Buffer: boolean isLastDataPacket()> -> _SINK_
<org.mongodb.morphia.query.CriteriaJoin: void <clinit>()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateByte(int,byte)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeAu(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: boolean execute(java.lang.String,int)> -> _SINK_
<org.springframework.jdbc.core.SingleColumnRowMapper: java.lang.Object getColumnValue(java.sql.ResultSet,int,java.lang.Class)> -> _SINK_
<oracle.toplink.publicinterface.Session: oracle.toplink.internal.databaseaccess.Accessor getAccessor()> -> _SINK_
<com.mysql.jdbc.Connection: void setReadInfoMsgEnabled(boolean)> -> _SINK_
<org.hibernate.persister.entity.EntityPersister: java.io.Serializable[] getQuerySpaces()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: boolean relative(int)> -> _SINK_
<org.postgresql.util.PSQLException: void <init>(org.postgresql.util.ServerErrorMessage)> -> _SINK_
<org.exolab.castor.jdo.engine.SimpleQueryExecutor$SimpleQueryResults: void finalize()> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$MapPutAssignment: boolean containsBindMarker()> -> _SINK_
<com.mysql.jdbc.CursorRowProvider: void beforeLast()> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: java.lang.Boolean isConsistentRead()> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: com.mongodb.BasicDBObject parseFieldsString(java.lang.String,java.lang.Class,org.mongodb.morphia.mapping.Mapper,boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Time getTime(int)> -> _SINK_
<com.mysql.jdbc.Buffer: int getPosition()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Time getTime(java.lang.String,java.util.Calendar)> -> _SINK_
<gov.nih.nci.system.webservice.WSQueryImpl: int getTotalNumberOfRecords(java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.engine.query.NativeSQLQueryPlan: int performExecuteUpdate(org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: java.lang.Object performEncrytionDecryption(java.lang.Object,boolean)> -> _SINK_
<org.mmbase.module.core.MMTable: java.util.List getNodes(org.mmbase.storage.search.implementation.NodeSearchQuery)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsConvert(int,int)> -> _SINK_
<org.apache.ibatis.type.UnknownTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: int getQueryTimeout()> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.CallableStatement prepareCall(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicQueryHandler: int getSupportLevel(int,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: void writeBaseObject(java.io.ObjectOutputStream)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: double getDouble(int)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: void <init>(java.lang.String,java.lang.String[],java.lang.Class[],org.hibernate.LockMode[],org.hibernate.engine.SessionImplementor,java.util.Collection,org.hibernate.FlushMode,org.hibernate.engine.query.ParameterMetadata)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: void testSetCriteriaNull()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: boolean isLast()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: boolean getMoreResults()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void registerOutParameter(int,int)> -> _SINK_
<com.mysql.jdbc.Connection: int getNetBufferLength()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void addFromJoinOnly(java.lang.String,org.hibernate.engine.JoinSequence)> -> _SINK_
<org.mmbase.bridge.implementation.BasicCloud: org.mmbase.bridge.NodeList getSecureList(org.mmbase.bridge.Query)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: void releaseSavepoint(java.sql.Savepoint)> -> _SINK_
<org.hibernate.engine.query.ParamLocationRecognizer: void jpaPositionalParameter(java.lang.String,int)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateAccessor: org.springframework.dao.DataAccessException convertHibernateAccessException(org.hibernate.HibernateException)> -> _SINK_
<org.postgresql.gss.GSSCallbackHandler: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.List selectInstancesFiredTriggerRecords(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: void setExclusiveStartKey(com.amazonaws.services.dynamodb.model.Key)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: boolean wasNull()> -> _SINK_
<com.mysql.jdbc.Connection: java.lang.Object getMutex()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setEscapeProcessing(boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: java.lang.String toString()> -> _SINK_
<com.mysql.jdbc.Statement: void setEscapeProcessing(boolean)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: void setAutoCommit(boolean)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode: java.lang.String itemizeItem(java.lang.String,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Lead: void setCampaignMembers(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.engine.SessionFactoryImplementor: org.hibernate.exception.SQLExceptionConverter getSQLExceptionConverter()> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setOutParams()> -> _SINK_
<org.hibernate.sql.JoinFragment: java.lang.String toWhereFragmentString()> -> _SINK_
<gov.nih.nci.cananolab.ui.publication.SearchPublicationAction: org.apache.struts.action.ActionForward search(org.apache.struts.action.ActionMapping,org.apache.struts.action.ActionForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<org.acegisecurity.acls.jdbc.BasicLookupStrategy: java.util.Map lookupObjectIdentities(org.acegisecurity.acls.objectidentity.ObjectIdentity[],org.acegisecurity.acls.sid.Sid[])> -> _SINK_
<org.postgresql.core.v3.ProtocolConnectionImpl: void <init>(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties,org.postgresql.core.Logger)> -> _SINK_
<com.sforce.soap.enterprise.fault.InvalidFieldFault: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.transaction.JDBCTransaction: void toggleAutoCommit()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.CallableStatement prepareCall(java.lang.String,int,int,int)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: void setConsistentRead(java.lang.Boolean)> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: java.lang.String getWhereColumn()> -> _SINK_
<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addReadPreference(com.mongodb.ReadPreference)> -> _SINK_
<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.ResultSet buildResultSetWithRows(com.mysql.jdbc.Statement,java.lang.String,com.mysql.jdbc.Field[],com.mysql.jdbc.RowData,int,int,boolean)> -> _SINK_
<gov.nih.nci.cananolab.dto.BaseQueryBean: boolean equals(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setLocalSocketAddress(java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.DynamoDBQueryExpression: com.amazonaws.services.dynamodb.model.Condition getRangeKeyCondition()> -> _SINK_
<org.castor.jdo.conf.DatabaseChoiceDescriptor: java.lang.Class getJavaClass()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Clob: void <init>(org.postgresql.core.BaseConnection,long)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.QueryTagSupport: java.sql.Connection getConnection()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object hasAllOf(java.lang.Iterable)> -> _SINK_
<java.sql.Statement: int getResultSetType()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNrm(java.lang.String)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: java.lang.Object insert(java.lang.String,java.lang.Object)> -> _SINK_
<org.exolab.castor.jdo.JDOManager: org.exolab.castor.jdo.JDOManager createInstance(java.lang.String)> -> _SINK_
<java.sql.ResultSet: int getFetchDirection()> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void waitOnLock()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setContinueBatchOnError(boolean)> -> _SINK_
<org.apache.ibatis.type.BigDecimalTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: void <init>(java.sql.DatabaseMetaData,com.mchange.v2.c3p0.impl.NewPooledConnection)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void setAutoCommit(boolean)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.sql.Connection createConnectionProxy(java.sql.Connection)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: void testQuery_WithResults()> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: com.datastax.driver.core.policies.RetryPolicy getRetryPolicy()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Settings__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void assignProtectionElement(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.ssl.jdbc4.LibPQFactory$ConsoleCallbackHandler: void <init>(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Task: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.NonRegisteringDriver: java.sql.Connection connect(java.lang.String,java.util.Properties)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: void setAutoCommit(boolean)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: int getUpdateCount()> -> _SINK_
<gov.nih.nci.system.query.cql.CQLLogicalOperator: int hashCode()> -> _SINK_
<org.mongodb.morphia.dao.BasicDAO: org.mongodb.morphia.query.UpdateOperations createUpdateOperations()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: int getFetchSize()> -> _SINK_
<com.amazonaws.services.dynamodb.model.transform.QueryResultJsonUnmarshaller: java.lang.Object unmarshall(java.lang.Object)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate$33: java.lang.Object doInHibernate(org.hibernate.Session)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setTime(java.lang.String,java.util.Date)> -> _SINK_
<org.apache.ibatis.session.SqlSession: org.apache.ibatis.session.Configuration getConfiguration()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateNull(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementFactory: org.hibernate.hql.ast.tree.FromElement createEntityAssociation(java.lang.String,java.lang.String,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteCronTrigger(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.exolab.castor.persist.spi.PersistenceQuery: org.exolab.castor.persist.spi.Identity nextIdentity(org.exolab.castor.persist.spi.Identity)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CollaborationGroupFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Investor_Account__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: int update(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource)> -> _SINK_
<org.exolab.castor.jdo.drivers.InformixQueryExpression: java.lang.String getStatement(boolean)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodes: java.lang.String[] getDatabaseProductNames()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsExpressionsInOrderBy()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void addFromCollection(java.lang.String,java.lang.String,org.hibernate.engine.JoinSequence)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setObject(int,java.lang.Object,int,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment add(java.lang.String,java.lang.Object)> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.Query: java.util.Collection retrieveServer()> -> _SINK_
<org.apache.axis.transport.http.AxisServlet: void initQueryStringHandlers()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.Field,java.lang.Boolean)> -> _SINK_
<org.springframework.jdbc.support.incrementer.MySQLMaxValueIncrementer: void <init>(javax.sql.DataSource,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.castor.jdo.conf.DatabaseChoice: void setDriver(org.castor.jdo.conf.Driver)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getSuperTypes(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.castor.jdo.conf.Database: boolean isValid()> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.StringBuilder joinAndAppendValues(java.lang.StringBuilder,java.lang.String,java.util.List,java.util.List)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLCustomQuery$ParserContext: java.lang.String getEntitySuffixByAlias(java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiPool$ConnectionCloser: void <clinit>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setBytes(java.lang.String,byte[])> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqllength(java.util.List)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contract: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2BlobClob: void <init>(org.postgresql.core.BaseConnection,long)> -> _SINK_
<org.mongodb.morphia.mapping.Mapper: boolean isCompatibleForOperator(java.lang.Class,org.mongodb.morphia.query.FilterOperator,java.lang.Object)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion eqAll(java.lang.Object,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.postgresql.xa.PGXAConnection: void debug(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Util$RandStructcture: void <init>(com.mysql.jdbc.Util)> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQueryNonScalarReturn: java.lang.String getAlias()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void setFetchSize(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.lang.Object getObject(java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQueryResults: void setDimensionSearchResult(com.endeca.navigation.DimensionSearchResult)> -> _SINK_
<org.mmbase.storage.search.implementation.database.HSqlSqlHandler: int getSupportLevel(int,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$38: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.mmbase.module.database.JDBC: java.sql.Connection getDirectConnection(java.lang.String)> -> _SINK_
<org.postgresql.util.PGInterval: void setValue(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: com.datastax.driver.core.Statement disableTracing()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$86: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters: java.text.DecimalFormat getDecimalFormat()> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: java.lang.String getDurationUnits()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: void clearWarnings()> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.utils.Key[] selectVolatileTriggers(java.sql.Connection)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setNull(java.lang.String,int,java.lang.String)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNx(java.lang.String)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl$3: void handleCommandStatus(java.lang.String,int,long)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLTimeoutException: void <init>()> -> _SINK_
<org.postgresql.core.v3.ProtocolConnectionImpl: org.postgresql.core.Encoding getEncoding()> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.Path2NestedCriteria: gov.nih.nci.system.query.nestedcriteria.NestedCriteria createNestedCriteria(java.lang.String,java.util.List,gov.nih.nci.system.util.ClassCache)> -> _SINK_
<org.hibernate.type.CurrencyType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: com.datastax.driver.core.Statement enableTracing()> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementType: org.hibernate.persister.entity.Queryable getQueryable()> -> _SINK_
<org.springframework.jdbc.core.namedparam.ParsedSql: java.lang.String getSql()> -> _SINK_
<org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler: java.util.List getParameterMappings()> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: int writeElementToWhere(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.mmbase.cache.CacheManager: void configure(org.mmbase.util.xml.DocumentReader,java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateNString(int,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.keygen.HighLowKeyGenerator: java.lang.Object generateKey(java.sql.Connection,java.lang.String,java.lang.String,java.util.Properties)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: byte[] stripBinaryPrefix(byte[])> -> _SINK_
<org.hibernate.persister.entity.Queryable: java.lang.String getDiscriminatorSQLValue()> -> _SINK_
<org.springframework.jdbc.core.ResultSetSupportingSqlParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.ResultSetExtractor)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setRollbackOnPooledClose(boolean)> -> _SINK_
<org.hibernate.exception.SQLExceptionConverterFactory: org.hibernate.exception.SQLExceptionConverter buildMinimalSQLExceptionConverter()> -> _SINK_
<org.springframework.orm.toplink.support.CommonsLoggingSessionLog904: java.lang.String getSessionName(oracle.toplink.sessions.Session)> -> _SINK_
<org.hibernate.sql.Sybase11JoinFragment: void addCrossJoin(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void attach(com.mchange.v2.c3p0.impl.NewPooledConnection)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: short getShort(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select: com.datastax.driver.core.querybuilder.Select limit(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.math.BigDecimal getBigDecimal(java.lang.String,int)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void deleteIndices(org.mmbase.core.CoreField)> -> _SINK_
<com.mysql.jdbc.ResultSet: long getLong(int,boolean)> -> _SINK_
<org.mongodb.morphia.query.CriteriaContainerImpl: java.util.List getChildren()> -> _SINK_
<org.hibernate.mapping.Join: org.hibernate.engine.ExecuteUpdateResultCheckStyle getCustomSQLDeleteCheckStyle()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.io.InputStream getAsciiStream(int)> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQueryNonScalarReturn: org.hibernate.LockMode getLockMode()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsCatalogsInPrivilegeDefinitions()> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodesFactory: org.springframework.jdbc.support.SQLErrorCodes getErrorCodes(javax.sql.DataSource)> -> _SINK_
<org.hibernate.sql.Delete: org.hibernate.sql.Delete setComment(java.lang.String)> -> _SINK_
<org.postgresql.copy.CopyIn: void flushCopy()> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.RelationStep addRelationStep(org.mmbase.bridge.NodeManager,java.lang.String,java.lang.String)> -> _SINK_
<com.datastax.driver.core.Requests$Query$1: void <init>()> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: org.hibernate.hql.ast.ParseErrorHandler getParseErrorHandler()> -> _SINK_
<org.springframework.jdbc.core.ArgPreparedStatementSetter: void setValues(java.sql.PreparedStatement)> -> _SINK_
<org.springframework.orm.hibernate3.SessionFactoryUtils: org.springframework.dao.DataAccessException convertHibernateAccessException(org.hibernate.HibernateException)> -> _SINK_
<org.apache.ibatis.builder.MapperBuilderAssistant: org.apache.ibatis.mapping.MappedStatement addMappedStatement(java.lang.String,org.apache.ibatis.mapping.SqlSource,org.apache.ibatis.mapping.StatementType,org.apache.ibatis.mapping.SqlCommandType,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Class,java.lang.String,java.lang.Class,org.apache.ibatis.mapping.ResultSetType,boolean,boolean,org.apache.ibatis.executor.keygen.KeyGenerator,java.lang.String)> -> _SINK_
<org.hibernate.sql.Insert: org.hibernate.sql.Insert addColumn(java.lang.String)> -> _SINK_
<org.hibernate.lob.SerializableClob: long position(java.lang.String,long)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean storesMixedCaseQuotedIdentifiers()> -> _SINK_
<org.hibernate.engine.query.ParameterParser$Recognizer: void other(char)> -> _SINK_
<org.hibernate.hql.ast.tree.DotNode: void setScalarColumnText(int)> -> _SINK_
<org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor: void streamData(java.sql.ResultSet)> -> _SINK_
<org.mmbase.module.database.Naming: java.sql.Connection getDirectConnection(java.lang.String)> -> _SINK_
<org.postgresql.core.ConnectionFactory: org.postgresql.core.ProtocolConnection openConnection(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties,org.postgresql.core.Logger)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean nullsAreSortedHigh()> -> _SINK_
<org.postgresql.xa.jdbc3.AbstractJdbc3XADataSource: javax.sql.XAConnection getXAConnection()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsAlterTableWithDropColumn()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$66: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.Statement createStatement(int,int)> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQueryScalarReturn: org.hibernate.type.Type getType()> -> _SINK_
<com.sforce.soap.enterprise.sobject.CUstom_Setting_1__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceUtils: void doReleaseConnection(java.sql.Connection,javax.sql.DataSource)> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: int getPrecision(int)> -> _SINK_
<java.sql.ResultSetMetaData: boolean isSigned(int)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.math.BigDecimal getBigDecimal(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Array: java.sql.ResultSet getResultSet(long,int,java.util.Map)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: java.util.List list(org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.hibernate.impl.StatelessSessionImpl: int executeUpdate(java.lang.String,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void create(org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<org.hibernate.impl.FetchingScrollableResultsImpl: boolean next()> -> _SINK_
<org.springframework.jdbc.support.CustomSQLErrorCodesTranslation: void setExceptionClass(java.lang.Class)> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getSuperTables(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean allTablesAreSelectable()> -> _SINK_
<org.apache.ibatis.type.SqlTimestampTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<java.sql.CallableStatement: java.sql.Blob getBlob(int)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setR(java.lang.String)> -> _SINK_
<org.postgresql.Driver: boolean acceptsURL(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.UpdateOperator: org.mongodb.morphia.query.UpdateOperator fromString(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getSchemas()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateBinaryStream(java.lang.String,java.io.InputStream,long)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: java.nio.ByteBuffer getRoutingKey()> -> _SINK_
<org.postgresql.core.Parser: int parseSingleQuotes(char[],int,boolean)> -> _SINK_
<java.sql.ResultSet: void updateBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<org.postgresql.core.v2.FastpathParameterList: org.postgresql.core.ParameterList copy()> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$CounterAssignment: boolean containsBindMarker()> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: void validate()> -> _SINK_
<java.sql.Clob: java.io.Reader getCharacterStream()> -> _SINK_
<org.hibernate.type.AbstractBynaryType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String getSQLDeleteRowString()> -> _SINK_
<com.mongodb.QueryOpBuilder: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: int getInt(java.lang.String)> -> _SINK_
<org.hibernate.type.ClassType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: void close()> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLDataException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.BlobFromLocator$LocatorInputStream: int read(byte[],int,int)> -> _SINK_
<org.mmbase.module.database.Naming: void reload()> -> _SINK_
<com.datastax.driver.core.policies.LatencyAwarePolicy: java.util.Iterator newQueryPlan(java.lang.String,com.datastax.driver.core.Statement)> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: void <init>(org.hibernate.hql.QueryTranslator,org.hibernate.engine.SessionFactoryImplementor,org.hibernate.hql.ast.tree.SelectClause)> -> _SINK_
<javax.sql.ConnectionPoolDataSource: javax.sql.PooledConnection getPooledConnection(java.lang.String,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContentVersion: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.postgresql.util.PGtokenizer: int tokenize(java.lang.String,char)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.io.Reader getNativeCharacterStream(int)> -> _SINK_
<org.hibernate.hql.ast.tree.IntoClause: void <init>()> -> _SINK_
<com.endeca.navigation.analytics.Statement: java.lang.String toString()> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.QueryImpl: void <init>()> -> _SINK_
<com.sforce.soap.enterprise.QueryResult: void setRecords(com.sforce.soap.enterprise.sobject.SObject[])> -> _SINK_
<org.hibernate.engine.query.ParamLocationRecognizer: org.hibernate.engine.query.ParamLocationRecognizer$NamedParameterDescription getOrBuildNamedParameterDescription(java.lang.String,boolean)> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: org.hibernate.exception.SQLExceptionConverter getSQLExceptionConverter()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: boolean execute(java.lang.String,java.lang.String[])> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setCursorName(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setString(int,java.lang.String)> -> _SINK_
<org.hibernate.sql.Insert: org.hibernate.sql.Insert addColumn(java.lang.String,java.lang.Object,org.hibernate.type.LiteralType)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void setFetchDirection(int)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$8: void <init>(org.springframework.orm.ibatis.SqlMapClientTemplate,java.lang.String,java.lang.Object,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: boolean isNull(int)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.DetachedCriteria getDatumSubquery(gov.nih.nci.cananolab.dto.particle.CharacterizationQueryBean,java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.ParameterMetaData getParameterMetaData()> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: void setCatalog(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setDate(int,java.sql.Date,java.util.Calendar)> -> _SINK_
<org.postgresql.core.PGStream: void Send(byte[])> -> _SINK_
<com.amazonaws.services.dynamodb.AmazonDynamoDBAsyncClient$4: void <init>(com.amazonaws.services.dynamodb.AmazonDynamoDBAsyncClient,com.amazonaws.services.dynamodb.model.QueryRequest,com.amazonaws.handlers.AsyncHandler)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.SuspendableXAConnection: void end(javax.transaction.xa.Xid,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateShort(java.lang.String,short)> -> _SINK_
<org.springframework.jdbc.datasource.ConnectionHolder: java.sql.Connection getConnection()> -> _SINK_
<com.mysql.jdbc.Connection: java.lang.String getCharsetNameForIndex(int)> -> _SINK_
<gov.nih.nci.security.dao.Queries: java.sql.PreparedStatement getQueryforGroupPEPrivilegeMap(java.lang.String,int,java.sql.Connection)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4SQLXML: void <init>(org.postgresql.core.BaseConnection)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryResult: void setConsumedCapacityUnits(java.lang.Double)> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch$Options: java.lang.String getQueryString()> -> _SINK_
<com.datastax.driver.core.exceptions.QueryTimeoutException: int getReceivedAcknowledgements()> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: java.lang.String generateEntitySuffix()> -> _SINK_
<com.mysql.jdbc.Statement: int findStartOfStatement(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: void insertRow()> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression: boolean isScanIndexForward()> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.StringBuilder joinAndAppendNames(java.lang.StringBuilder,java.lang.String,java.util.List)> -> _SINK_
<com.mysql.jdbc.WatchableWriter: void close()> -> _SINK_
<org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean: javax.sql.DataSource getDataSource()> -> _SINK_
<org.hibernate.impl.StatelessSessionImpl: void afterOperation(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: double getDouble(int)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: void processNotifies()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Ref getRef(int)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: void setFunctionalizingEntityAndCriteria(gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean,org.hibernate.criterion.DetachedCriteria,java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: void setSchema(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedResultSet: void <init>(java.sql.ResultSet,java.util.Set)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setObject(java.lang.String,java.lang.Object,int,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Task: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object endsWith(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: int getFetchSize()> -> _SINK_
<org.mmbase.storage.search.SearchQuery: org.mmbase.storage.search.Constraint getConstraint()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: int getResultSetType()> -> _SINK_
<java.sql.DatabaseMetaData: boolean storesUpperCaseQuotedIdentifiers()> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.DynamoDBMapper: com.amazonaws.services.dynamodb.datamodeling.QueryResultPage queryPage(java.lang.Class,com.amazonaws.services.dynamodb.datamodeling.DynamoDBQueryExpression)> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapClientBuilder: com.ibatis.sqlmap.client.SqlMapClient buildSqlMapClient(java.io.InputStream,java.util.Properties)> -> _SINK_
<org.postgresql.core.Logger: void <init>(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Options: com.datastax.driver.core.ConsistencyLevel getConsistencyLevel()> -> _SINK_
<org.hibernate.impl.SessionImpl: org.hibernate.SQLQuery createSQLQuery(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.database.ChainedSqlHandler: java.lang.String getAllowedValue(java.lang.String)> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringEncoder: void <init>(java.lang.String,java.nio.charset.Charset)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Date getDate(java.lang.String,java.util.Calendar)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Job_Application__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Date getDate(int,java.util.Calendar)> -> _SINK_
<gov.nih.nci.system.client.proxy.ListProxy: int size()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters: int getLobBufferSize()> -> _SINK_
<java.sql.CallableStatement: java.sql.Ref getRef(int)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void checkPacketSequencing(byte)> -> _SINK_
<org.hibernate.sql.Update: org.hibernate.sql.Update addWhereColumn(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.util.SessionFactoryHelper: org.hibernate.persister.entity.Queryable findQueryableUsingImports(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setFloat(int,float)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: com.datastax.driver.core.Statement setRetryPolicy(com.datastax.driver.core.policies.RetryPolicy)> -> _SINK_
<org.mmbase.module.database.MultiStatement: int getResultSetHoldability()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.net.URL getURL(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2BlobClob: long position(byte[],long)> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.QueryResultPage: void setResults(java.util.List)> -> _SINK_
<gov.nih.nci.cagrid.data.cql.CQLQueryProcessor: void <init>()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void close()> -> _SINK_
<org.exolab.castor.jdo.engine.GlobalDatabaseImpl: void afterCompletion(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Clob getClob(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.drivers.MySQLQueryExpression: void <init>(org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<org.hibernate.connection.C3P0ConnectionProvider: void close()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Campaign: void setTasks(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$MainFrame: java.util.Vector getProperties(java.lang.Object)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int insertTriggerListener(java.sql.Connection,org.quartz.Trigger,java.lang.String)> -> _SINK_
<org.postgresql.util.UnixCrypt: int HPERM_OP(int,int,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.lang.String nativeSQL(java.lang.String)> -> _SINK_
<org.mmbase.cache.RelatedNodesCache: java.lang.Object remove(java.lang.Object)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.QueryFactory getQueryFactory()> -> _SINK_
<org.hibernate.loader.Loader: java.util.Map buildNamedParameterLocMap(org.hibernate.engine.QueryParameters)> -> _SINK_
<org.hibernate.lob.ClobImpl: java.io.InputStream getAsciiStream()> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment: void <init>(java.lang.String,com.datastax.driver.core.querybuilder.Assignment$1)> -> _SINK_
<org.hibernate.impl.QueryImpl: void <init>(java.lang.String,org.hibernate.FlushMode,org.hibernate.engine.SessionImplementor,org.hibernate.engine.query.ParameterMetadata)> -> _SINK_
<org.hibernate.type.NullableType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLSyntaxErrorException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory: void main(java.lang.String[])> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: java.lang.String getIndexName()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$4: void forEach(java.lang.Object)> -> _SINK_
<org.hibernate.cfg.Mappings: void addSQLQuery(java.lang.String,org.hibernate.engine.NamedSQLQueryDefinition)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimestampLocaleConverter: void <init>(java.lang.Object,java.util.Locale,java.lang.String)> -> _SINK_
<java.sql.PreparedStatement: void setTime(int,java.sql.Time,java.util.Calendar)> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getSchemaTerm()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement$BindValue: long getBoundLength()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void checkIndex(int)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ResultSet: void <init>(org.postgresql.core.Query,org.postgresql.core.BaseStatement,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor,int,int,int,int,int)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.net.URL getURL(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getDatabaseMajorVersion()> -> _SINK_
<com.mysql.jdbc.Blob: void truncate(long)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Group: void setGroupMembers(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.module.core.ClusterBuilder: void addRelationDirections(org.mmbase.storage.search.implementation.BasicSearchQuery,java.util.List,java.util.Map)> -> _SINK_
<org.mmbase.bridge.util.Queries: java.lang.Object min(org.mmbase.bridge.Query,org.mmbase.storage.search.StepField)> -> _SINK_
<com.mysql.jdbc.Util: void <clinit>()> -> _SINK_
<java.sql.Statement: void addBatch(java.lang.String)> -> _SINK_
<com.datastax.driver.core.exceptions.ReadTimeoutException: void <init>(com.datastax.driver.core.ConsistencyLevel,int,int,boolean)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: void close()> -> _SINK_
<org.exolab.castor.xml.handlers.DefaultFieldHandlerFactory: org.exolab.castor.mapping.GeneralizedFieldHandler createFieldHandler(java.lang.Class)> -> _SINK_
<org.postgresql.util.UnixCrypt: int D_ENCRYPT(int,int,int,int,int,int[])> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.mmbase.bridge.util.TreeList$Branch: org.mmbase.bridge.NodeQuery access$000(org.mmbase.bridge.util.TreeList$Branch)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: boolean isBinary()> -> _SINK_
<com.mysql.jdbc.DocsConnectionPropsHelper: void <init>()> -> _SINK_
<java.sql.CallableStatement: java.net.URL getURL(int)> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager$InputStreamBlob: long length()> -> _SINK_
<org.castor.persist.AbstractTransactionContext: java.lang.ClassLoader getClassLoader()> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: java.util.List queryForList(java.lang.String)> -> _SINK_
<org.postgresql.core.types.PGLong: void <init>(java.lang.Long)> -> _SINK_
<com.datastax.driver.core.SessionManager$2: com.datastax.driver.core.PreparedStatement apply(com.datastax.driver.core.Message$Response)> -> _SINK_
<org.postgresql.core.Encoding: org.postgresql.core.Encoding defaultEncoding()> -> _SINK_
<com.mysql.jdbc.MysqlParameterMetadata: int getScale(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setFetchDirection(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: boolean getAutoCommit()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeResultSet(java.sql.ResultSet)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: void setBinaryTransferEnable(java.lang.String)> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: void write(int)> -> _SINK_
<com.mysql.jdbc.Statement: int getId()> -> _SINK_
<org.hibernate.sql.QuerySelect: org.hibernate.sql.JoinFragment getJoinFragment()> -> _SINK_
<java.sql.ResultSet: short getShort(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.Criteria: void addTo(com.mongodb.DBObject)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters: java.lang.String getFullDatePattern(java.lang.String)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: boolean checkOwnership(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema: java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.Queryable: java.lang.String getSubclassTableName(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: boolean execute()> -> _SINK_
<oracle.toplink.queryframework.ReadObjectQuery: void setSelectionKey(java.util.Vector)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqltimestampdiff(java.util.List)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.lang.String applyLocks(java.lang.String,java.util.Map,org.hibernate.dialect.Dialect)> -> _SINK_
<org.hibernate.jdbc.Expectations$BasicParamExpectation: int determineRowCount(int,java.sql.PreparedStatement)> -> _SINK_
<com.mysql.jdbc.ResultSet: short getNativeShort(int,boolean)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.SampleServiceHelper: int getNumberOfPublicSampleSources()> -> _SINK_
<com.mysql.jdbc.Statement: com.mysql.jdbc.ResultSet createResultSetUsingServerFetch(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.QueryNode: boolean hasOrderByClause()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.impl.SampleServiceLocalImpl: java.util.List loadCharacterizations(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Clob getClob(int)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.UpdateResults update(java.lang.Object,org.mongodb.morphia.query.UpdateOperations)> -> _SINK_
<org.acegisecurity.ui.savedrequest.SavedRequest: void <init>(javax.servlet.http.HttpServletRequest,org.acegisecurity.util.PortResolver)> -> _SINK_
<org.apache.ibatis.builder.xml.XMLMapperBuilder: void configurationElement(org.apache.ibatis.parsing.XNode)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<org.hibernate.dialect.DerbyDialect$DerbyTrimFunctionEmulation: void <clinit>()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void exprOrSubquery(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseCursorFetch(boolean)> -> _SINK_
<org.eclipse.acceleo.engine.internal.evaluation.AcceleoEvaluationVisitor: java.lang.Object delegateGetCachedResult(org.eclipse.acceleo.model.mtl.Query,java.util.List)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.math.BigDecimal getBigDecimal(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2BlobClob: byte[] getBytes(long,int)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: java.lang.String toString(java.util.Calendar,java.sql.Date)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Job_Application__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.geometric.PGpath: java.lang.Object clone()> -> _SINK_
<org.springframework.jdbc.object.SqlUpdate: int update()> -> _SINK_
<com.mysql.jdbc.StringUtils: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getProcedures(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider: java.sql.Connection getConnection()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setNull(int,int)> -> _SINK_
<org.postgresql.util.PGInterval: void setYears(int)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaJoinWalker: int getJoinType(org.hibernate.type.AssociationType,org.hibernate.FetchMode,java.lang.String,java.lang.String,java.lang.String[],boolean,int,org.hibernate.engine.CascadeStyle)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: java.util.List collectSqlStrings()> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: boolean isTracing()> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: void appendIndexColumns(org.hibernate.sql.SelectFragment,java.lang.String)> -> _SINK_
<gov.nih.nci.security.dao.Queries: java.sql.PreparedStatement getQueryforUserPEPrivilegeMap(java.lang.String,int,java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.util.ServerController: java.lang.String getCommandLine()> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: java.lang.StringBuffer appendSortOrderField(java.lang.StringBuffer,org.mmbase.storage.search.SortOrder,boolean,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsCorrelatedSubqueries()> -> _SINK_
<org.mmbase.cache.QueryResultCache: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<org.hibernate.dialect.HSQLDialect: org.hibernate.dialect.lock.LockingStrategy getLockingStrategy(org.hibernate.persister.entity.Lockable,org.hibernate.LockMode)> -> _SINK_
<org.springframework.jdbc.datasource.SingleConnectionDataSource: void <init>(java.sql.Connection,boolean)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientFactoryBean: void <clinit>()> -> _SINK_
<gov.nih.nci.cagrid.cqlresultset.CQLQueryResults: void setObjectResult(gov.nih.nci.cagrid.cqlresultset.CQLObjectResult[])> -> _SINK_
<org.postgresql.core.ParameterList: int[] getTypeOIDs()> -> _SINK_
<org.springframework.jdbc.core.ResultSetExtractor: java.lang.Object extractData(java.sql.ResultSet)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setNull(java.lang.String,int)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: long[] mk_tokenSet_0()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<com.mysql.jdbc.Buffer: long readLongLong()> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientFactoryBean: void afterPropertiesSet()> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: void commit()> -> _SINK_
<org.mmbase.module.core.MMTable: int count(org.mmbase.storage.search.implementation.NodeSearchQuery)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsStatementPooling()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseNanosForElapsedTime(boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Asset: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.apache.ibatis.type.UnknownTypeHandler: org.apache.ibatis.type.TypeHandler resolveTypeHandler(java.sql.ResultSetMetaData,java.lang.Integer)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: java.lang.Boolean isConsistentRead()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateAsciiStream(java.lang.String,java.io.InputStream,long)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$1: void <init>(com.mysql.jdbc.DatabaseMetaData,com.mysql.jdbc.DatabaseMetaData$IteratorWithCleanup,java.lang.String,java.sql.Statement,java.util.ArrayList)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.sql.Time getTime(java.lang.String,java.util.Calendar)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.lang.String escapeString(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.CharacterizationServiceHelper: gov.nih.nci.cananolab.domain.common.Finding findFindingById(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: org.exolab.castor.persist.LockEngine getLockEngine()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setAllowLoadLocalInfile(boolean)> -> _SINK_
<org.exolab.castor.dtx.DTXQuery: boolean emitSaxInt(java.sql.ResultSet,int)> -> _SINK_
<com.endeca.navigation.ENEQueryInfo: java.lang.String GenerateSID()> -> _SINK_
<com.endeca.navigation.analytics.OrderBy: java.lang.String toString()> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void addWhereClause(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.BooleanLiteralNode: java.lang.String getRenderText(org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<gov.nih.nci.system.dao.QueryException: void <init>(java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder all(java.lang.Object)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$40: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setBoolean(int,boolean)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.math.BigDecimal getBigDecimal(java.lang.String)> -> _SINK_
<com.mysql.jdbc.log.Jdk14Logger: void logTrace(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[])> -> _SINK_
<org.hibernate.cache.QueryCache: java.lang.String getRegionName()> -> _SINK_
<org.hibernate.engine.StatefulPersistenceContext: java.lang.Object[] getDatabaseSnapshot(java.io.Serializable,org.hibernate.persister.entity.EntityPersister)> -> _SINK_
<org.mongodb.morphia.query.Query: com.mongodb.DBObject getSortObject()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setTimestamp(java.lang.String,java.sql.Timestamp)> -> _SINK_
<com.sforce.soap.enterprise.sobject.BlogForce_Comment__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Candidate__c: void setOpenActivities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.storage.search.implementation.ModifiableQuery: void <init>(org.mmbase.storage.search.SearchQuery)> -> _SINK_
<com.mysql.jdbc.NonRegisteringDriver: java.sql.DriverPropertyInfo[] getPropertyInfo(java.lang.String,java.util.Properties)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void processResults(org.postgresql.core.ResultHandler,int)> -> _SINK_
<org.postgresql.jdbc2.ResultWrapper: long getInsertOID()> -> _SINK_
<com.mysql.jdbc.NamedPipeSocketFactory$NamedPipeSocket: java.io.InputStream getInputStream()> -> _SINK_
<com.mysql.jdbc.Connection: void checkTransactionIsolationLevel()> -> _SINK_
<org.apache.ibatis.datasource.pooled.PooledDataSource: void forceCloseAll()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory: org.mmbase.storage.search.SearchQueryHandler instantiateQueryHandler(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void clearWarnings()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteJobListeners(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Event: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.criterion.CriteriaQuery: java.lang.String getEntityName(org.hibernate.Criteria,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$7: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<org.springframework.jdbc.core.namedparam.SqlParameterSource: boolean hasValue(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.fault.ApiQueryFault: void load(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: boolean last()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setUnicodeStream(int,java.io.InputStream,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Ref getRef(java.lang.String)> -> _SINK_
<com.datastax.driver.core.KeyspaceMetadata: java.lang.String exportAsString()> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: int getStatementId()> -> _SINK_
<org.apache.taglibs.standard.tlv.JstlSqlTLV$Handler: void <init>(org.apache.taglibs.standard.tlv.JstlSqlTLV,org.apache.taglibs.standard.tlv.JstlSqlTLV$1)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: java.sql.ResultSet getResultSet()> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache: void checkinAll(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.Field: int getPrecisionAdjustFactor()> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void addInnerJoin(java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$91: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void processNumericLiteral(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.CallableStatement: short getShort(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils$FCall: java.lang.String access$000(com.datastax.driver.core.querybuilder.Utils$FCall)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setRetainStatementAfterResultSetClose(boolean)> -> _SINK_
<org.hibernate.impl.IteratorImpl: void postNext()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: com.endeca.navigation.ERecSortKey parseSortKey(java.lang.String)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion propertyGt(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<com.mysql.jdbc.Statement: void clearBatch()> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: void <clinit>()> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy$RandomBalanceStrategy: void <init>(com.mysql.jdbc.LoadBalancingConnectionProxy)> -> _SINK_
<org.hibernate.hql.antlr.HqlBaseLexer: void mSQL_NE(boolean)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection: java.sql.Connection getConnection()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateByte(java.lang.String,byte)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setFloat(int,float)> -> _SINK_
<gov.nih.nci.system.query.hibernate.HQLCriteria: void <init>(java.lang.String,java.util.List)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: int getInt(int)> -> _SINK_
<org.postgresql.geometric.PGpoint: void setValue(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Clob getClob(int)> -> _SINK_
<org.exolab.castor.jdo.Persistent: void jdoBeforeCreate(org.exolab.castor.jdo.Database)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$ResultSetIterator: boolean hasNext()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setPartnersTo(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.jdbc.object.BatchSqlUpdate: void <init>(javax.sql.DataSource,java.lang.String,int[],int)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String generateVersionIncrementUpdateString()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: java.sql.NClob createNClob()> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: void addLimitClause(org.exolab.castor.jdo.oql.ParseTreeNode)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: void setMaxRows(int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4DatabaseMetaData: java.sql.RowIdLifetime getRowIdLifetime()> -> _SINK_
<com.sforce.soap.enterprise.sobject.CUstom_Setting_1__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$12: void execute(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.Util: java.util.TimeZone getDefaultTimeZone()> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: org.mongodb.morphia.query.Query filter(java.lang.String,java.lang.Object)> -> _SINK_
<com.datastax.driver.core.ControlConnection: boolean waitForSchemaAgreement(com.datastax.driver.core.Connection,com.datastax.driver.core.Metadata)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateArray(int,java.sql.Array)> -> _SINK_
<org.springframework.jdbc.core.JdbcOperations: long queryForLong(java.lang.String,java.lang.Object[])> -> _SINK_
<com.mysql.jdbc.integration.c3p0.MysqlConnectionTester: int statusOnException(java.sql.Connection,java.lang.Throwable)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getTypeInfo()> -> _SINK_
<com.sforce.soap.enterprise.QueryMore_element: void load(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLFieldInfo: boolean isDirtyCheck()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$56: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getProceduresAndOrFunctions(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)> -> _SINK_
<com.sforce.soap.enterprise.QueryResponse_element: void writeFields(com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.lang.String escapeQuotes(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet$CursorResultHandler: void <init>(org.postgresql.jdbc2.AbstractJdbc2ResultSet)> -> _SINK_
<org.postgresql.jdbc2.ArrayAssistantRegistry: void register(int,org.postgresql.jdbc2.ArrayAssistant)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLNonTransientException: void <init>()> -> _SINK_
<com.amazonaws.services.cloudfront.model.transform.ForwardedValuesStaxUnmarshaller: com.amazonaws.services.cloudfront.model.ForwardedValues unmarshall(com.amazonaws.transform.StaxUnmarshallerContext)> -> _SINK_
<com.amazonaws.services.datapipeline.model.transform.QueryObjectsRequestMarshaller: java.lang.Object marshall(java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.fault.InvalidFieldFault: java.lang.String toString()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.CQLQuery: gov.nih.nci.cagrid.cqlquery.QueryModifier getQueryModifier()> -> _SINK_
<entities.RepositoryAtomic: long queryCount(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Time getTime(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: int getMaxRows()> -> _SINK_
<org.hibernate.engine.query.ParameterMetadata: int[] getNamedParameterSourceLocations(java.lang.String)> -> _SINK_
<java.sql.DriverManager: int getLoginTimeout()> -> _SINK_
<gov.nih.nci.system.util.ApplicationServiceMethodHelper: java.util.Map getDomainObjectName(org.aopalliance.intercept.MethodInvocation)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: void addFieldImplicit(org.mmbase.storage.search.Step,org.mmbase.bridge.Field)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: int[] executeBatch()> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.WritableApplicationServiceImpl: gov.nih.nci.system.query.SDKQueryResult executeQuery(gov.nih.nci.system.query.SDKQuery)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setStrictUpdates(boolean)> -> _SINK_
<java.sql.DriverManager: void setLogWriter(java.io.PrintWriter)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLFieldInfo: boolean isJoined()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setByte(java.lang.String,byte)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Array getArray(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.BlogForce_Comment__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.encoding.SDK40EncodingUtils: org.exolab.castor.mapping.Mapping getMarshallerMapping(org.apache.axis.MessageContext)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2BlobClob$LOIterator: void <init>(org.postgresql.jdbc2.AbstractJdbc2BlobClob,long)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setObject(java.lang.String,java.lang.Object)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DataSourceWrapper: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.sql.Update: org.hibernate.sql.Update addColumns(java.lang.String[])> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: boolean isLimitClauseSupported()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: void addACLPrivileges(java.lang.String,java.util.Map)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: int executeUpdate()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: java.lang.String toString()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: java.lang.String toString()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setTime(int,java.sql.Time)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.impl.DataAvailabilityServiceJDBCImpl$1: void setValues(java.sql.PreparedStatement,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: boolean isReadOnly(int)> -> _SINK_
<com.mysql.jdbc.log.CommonsLogger: void logError(java.lang.Object,java.lang.Throwable)> -> _SINK_
<org.postgresql.core.types.PGBoolean: org.postgresql.core.types.PGType castToServerType(java.lang.Boolean,int)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeAs(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Timestamp getTimestamp(java.lang.String)> -> _SINK_
<java.sql.Statement: void setFetchDirection(int)> -> _SINK_
<org.hibernate.engine.query.ParamLocationRecognizer: org.hibernate.engine.query.ParamLocationRecognizer parseLocations(java.lang.String)> -> _SINK_
<org.springframework.jdbc.object.UpdatableSqlQuery$RowMapperImpl: java.lang.Object mapRow(java.sql.ResultSet,int)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setDr(java.lang.String)> -> _SINK_
<org.hibernate.tool.hbm2ddl.DatabaseMetadata: boolean isSequence(java.lang.Object)> -> _SINK_
<org.apache.axis.transport.http.QSMethodHandler: void invokeEndpointFromGet(org.apache.axis.MessageContext,javax.servlet.http.HttpServletResponse,java.io.PrintWriter,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.impl.AbstractSessionImpl: org.hibernate.Query getNamedQuery(java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$76: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[])> -> _SINK_
<org.hibernate.hql.ast.exec.MultiTableUpdateExecutor: int execute(org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setObject(java.lang.String,java.lang.Object,int,int)> -> _SINK_
<org.postgresql.geometric.PGpath: void <init>(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$1: void <init>(org.postgresql.jdbc2.AbstractJdbc2Statement)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment incr(java.lang.String,long)> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: void skipRows(java.sql.ResultSet,org.apache.ibatis.session.RowBounds)> -> _SINK_
<org.hibernate.tool.hbm2ddl.SuppliedConnectionProviderConnectionHelper: void release()> -> _SINK_
<java.sql.ResultSet: void updateDouble(java.lang.String,double)> -> _SINK_
<org.postgresql.copy.PGCopyInputStream: int read(byte[],int,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void addBatch()> -> _SINK_
<org.hibernate.tool.hbm2ddl.DatabaseMetadata: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLHelper: java.lang.Object[] calculateNumberOfFields(java.util.Collection,int,int,int,java.sql.ResultSet)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String getEntityName(org.hibernate.Criteria)> -> _SINK_
<org.postgresql.util.PSQLException: void <init>(java.lang.String,org.postgresql.util.PSQLState,java.lang.Throwable)> -> _SINK_
<org.exolab.castor.jdo.engine.TxDatabaseMap: void put(javax.transaction.Transaction,org.exolab.castor.jdo.engine.GlobalDatabaseImpl)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setOpenActivities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ResultSet: void updateBlob(java.lang.String,java.sql.Blob)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Clause lt(java.lang.String,java.lang.Object)> -> _SINK_
<org.springframework.jdbc.core.namedparam.MapSqlParameterSource: java.lang.Object getValue(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setAutoClosePStmtStreams(boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Project__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mysql.jdbc.Connection: void buildCollationMapping()> -> _SINK_
<org.postgresql.core.QueryExecutor: byte[] fastpathCall(int,org.postgresql.core.ParameterList,boolean)> -> _SINK_
<org.postgresql.largeobject.LargeObjectManager: void unlink(long)> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: boolean needsFetchingScroll()> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: java.lang.String getSQLExpr(org.exolab.castor.jdo.oql.ParseTreeNode)> -> _SINK_
<org.exolab.castor.dtx.DTXQuery: void bind(int,double)> -> _SINK_
<javax.servlet.jsp.jstl.sql.ResultImpl: void <init>(java.sql.ResultSet,int,int)> -> _SINK_
<org.hibernate.sql.Update: org.hibernate.sql.Update addColumn(java.lang.String,java.lang.Object,org.hibernate.type.LiteralType)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: com.datastax.driver.core.RegularStatement setForceNoValues(boolean)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: void <init>(int,org.postgresql.core.v3.ProtocolConnectionImpl)> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: java.sql.ResultSet getNextResultSet(java.sql.Statement)> -> _SINK_
<org.postgresql.util.MD5Digest: void bytesToHex(byte[],byte[],int)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: void setTimeout(java.sql.PreparedStatement)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setSQLXML(java.lang.String,java.sql.SQLXML)> -> _SINK_
<com.mchange.v2.c3p0.DriverManagerDataSourceFactory: javax.sql.DataSource create(java.lang.String,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.Trigger[] getTriggersForJob(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElement: void setOrigin(org.hibernate.hql.ast.tree.FromElement,boolean)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: boolean isInGlobalTx()> -> _SINK_
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: int[] executeBatch()> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder withinBox(double,double,double,double)> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getNavKeyProperties()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setObject(java.lang.String,java.lang.Object,int,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.sql.Array getArray(int)> -> _SINK_
<com.mysql.jdbc.RowData: void beforeFirst()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: double readDoubleValue(byte[],int,java.lang.String)> -> _SINK_
<org.hibernate.sql.Delete: void <init>()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean toBoolean(java.lang.String)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: org.hibernate.SQLQuery setResultSetMapping(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.CallableStatementCreatorFactory$CallableStatementCreatorImpl: java.sql.CallableStatement createCallableStatement(java.sql.Connection)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.lang.Object getValue(java.sql.ResultSet,int,org.mmbase.core.CoreField,boolean)> -> _SINK_
<org.postgresql.core.QueryExecutor: void execute(org.postgresql.core.Query,org.postgresql.core.ParameterList,org.postgresql.core.ResultHandler,int,int,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CaseFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsCatalogsInPrivilegeDefinitions()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void removeConnectionEventListener(javax.sql.ConnectionEventListener)> -> _SINK_
<java.sql.CallableStatement: java.sql.Array getArray(int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: boolean isPoolable()> -> _SINK_
<org.postgresql.core.v3.CompositeParameterList: org.postgresql.core.ParameterList copy()> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void prepareFromClauseInputTree(antlr.collections.AST)> -> _SINK_
<gov.nih.nci.system.dao.orm.ORMDAOImpl: java.lang.String getCountQuery(java.lang.String)> -> _SINK_
<entities.dao.AbstractDAO: java.util.List query(java.lang.String,int,int)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: boolean execute()> -> _SINK_
<org.hibernate.criterion.SimpleExpression: org.hibernate.engine.TypedValue[] getTypedValues(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.mysql.jdbc.Field: java.lang.String getCharacterSet()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: void addDiscriminatorToSelect(org.hibernate.sql.SelectFragment,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setDate(java.lang.String,java.util.Date)> -> _SINK_
<com.endeca.navigation.ENEQuery: boolean getDimSearchCompound()> -> _SINK_
<org.apache.ibatis.type.StringTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<org.postgresql.jdbc2.ArrayAssistantRegistry: org.postgresql.jdbc2.ArrayAssistant getAssistant(int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXAConnection: boolean isSameRM(javax.transaction.xa.XAResource)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void setClause(antlr.collections.AST)> -> _SINK_
<org.hibernate.mapping.Join: org.hibernate.engine.ExecuteUpdateResultCheckStyle getCustomSQLUpdateCheckStyle()> -> _SINK_
<org.springframework.jdbc.object.MappingSqlQueryWithParameters: java.lang.Object mapRow(java.sql.ResultSet,int,java.lang.Object[],java.util.Map)> -> _SINK_
<org.springframework.jdbc.core.SqlOutParameter: void <init>(java.lang.String,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsGroupBy()> -> _SINK_
<com.mysql.jdbc.StringUtils: java.util.List split(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SINK_
<org.hibernate.hql.ast.tree.IdentNode: org.hibernate.type.Type getDataType()> -> _SINK_
<org.exolab.castor.jdo.JDO: boolean getDatabasePooling()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean isColumnTrimmable(int)> -> _SINK_
<org.mmbase.storage.search.implementation.database.InformixSqlHandler: int getSupportLevel(int,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.springframework.jdbc.support.JdbcUtils: void closeConnection(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.Buffer: int readInt()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: int getFetchDirection()> -> _SINK_
<com.mysql.jdbc.util.ReadAheadInputStream: long skip(long)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: int getMaxTableNameLength()> -> _SINK_
<org.postgresql.core.Field: void setFormat(int)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: java.lang.String getQueryString()> -> _SINK_
<org.eclipse.acceleo.engine.internal.evaluation.QueryCache: boolean isCachedResult(java.lang.Object)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$MainFrame: java.util.Vector fillRow(java.util.Vector,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setNull(int,int,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.DriverManagerDataSource: int getLoginTimeout()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean othersInsertsAreVisible(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateArray(java.lang.String,java.sql.Array)> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator$AbstractType: java.lang.Object getValue(java.sql.Connection,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2: void setOpenActivities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: void clearWarnings()> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: java.lang.String[] getName()> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.lang.String getString(int)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsMixedCaseIdentifiers()> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.bridge.Query setOffset(int)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3DatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.storage.search.legacy.ConstraintParser: org.mmbase.storage.search.StepField getField(java.lang.String,java.util.List,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsConvert()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void <init>(org.postgresql.jdbc3.AbstractJdbc3Connection,java.lang.String,boolean,int,int,int)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeDn(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getUDTs(java.lang.String,java.lang.String,java.lang.String,int[])> -> _SINK_
<org.hibernate.hql.classic.WhereParser: void preprocess(java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.eclipse.acceleo.engine.internal.evaluation.QueryCache: boolean isInvalid(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getTableTypes()> -> _SINK_
<org.postgresql.Driver$1: java.lang.Object run()> -> _SINK_
<org.postgresql.geometric.PGcircle: void <init>(java.lang.String)> -> _SINK_
<java.sql.CallableStatement: long getLong(int)> -> _SINK_
<com.mysql.jdbc.Connection: boolean isNoBackslashEscapesSet()> -> _SINK_
<org.mmbase.bridge.util.Queries: org.mmbase.storage.search.Constraint createConstraint(org.mmbase.bridge.Query,java.lang.String,int,java.lang.Object,java.lang.Object,boolean,int)> -> _SINK_
<org.apache.ibatis.datasource.pooled.PooledDataSource: java.sql.Connection getConnection()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getResultSetHoldability()> -> _SINK_
<org.hibernate.dialect.MckoiDialect: void <init>()> -> _SINK_
<org.hibernate.impl.SessionImpl: org.hibernate.Query createSQLQuery(java.lang.String,java.lang.String,java.lang.Class)> -> _SINK_
<org.postgresql.core.ConnectionFactory: void <init>()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DB2v8Delegate: void setBoolean(java.sql.PreparedStatement,int,boolean)> -> _SINK_
<com.datastax.driver.core.SessionManager: void setKeyspace(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void setBinaryValue(java.sql.PreparedStatement,int,java.lang.Object,org.mmbase.core.CoreField,org.mmbase.module.core.MMObjectNode)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: int update(java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiPoolHandler: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.GlobalDatabaseImpl: void <clinit>()> -> _SINK_
<org.postgresql.geometric.PGpolygon: void <init>(org.postgresql.geometric.PGpoint[])> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: boolean getBoolean(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl doesNotExist()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setSerializable(java.lang.String,java.io.Serializable)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getAttributes(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.sql.Insert: org.hibernate.sql.Insert setTableName(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.CountNode: void setScalarColumnText(int)> -> _SINK_
<org.apache.ibatis.logging.jdbc.ResultSetLogger: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateInt(java.lang.String,int)> -> _SINK_
<java.sql.DriverManager: java.sql.Driver getDriver(java.lang.String)> -> _SINK_
<org.exolab.castor.persist.SQLRelationLoader: java.lang.Object ridToSQL(int,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean allTablesAreSelectable()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setBinary(java.lang.String,byte[])> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsCatalogsInDataManipulation()> -> _SINK_
<org.exolab.castor.xml.descriptors.SQLTimeClassDescriptor: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setTimestamp(int,java.sql.Timestamp)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ChooseSqlNode: void <init>(java.util.List,org.apache.ibatis.builder.xml.dynamic.SqlNode)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<org.postgresql.util.PGtokenizer: java.lang.String getToken(int)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser$ParserContext: boolean isCollectionAlias(java.lang.String)> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcDaoImpl: void setAclsByObjectIdentity(org.springframework.jdbc.object.MappingSqlQuery)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateCronTrigger(java.sql.Connection,org.quartz.CronTrigger)> -> _SINK_
<org.springframework.orm.jpa.JpaTemplate$11: java.lang.Object doInJpa(javax.persistence.EntityManager)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void cancelRowUpdates()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Task__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: void appendDate(java.lang.StringBuffer,java.util.Calendar)> -> _SINK_
<org.springframework.jdbc.support.JdbcUtils: java.lang.Object extractDatabaseMetaData(javax.sql.DataSource,org.springframework.jdbc.support.DatabaseMetaDataCallback)> -> _SINK_
<org.mmbase.storage.search.implementation.database.MySqlSqlHandler: void appendDateField(java.lang.StringBuffer,org.mmbase.storage.search.Step,java.lang.String,boolean,int)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void parameter(antlr.collections.AST)> -> _SINK_
<org.mmbase.storage.search.implementation.database.SqlHandler: void appendQueryBodyToSql(java.lang.StringBuffer,org.mmbase.storage.search.SearchQuery,org.mmbase.storage.search.implementation.database.SqlHandler)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Clob: int setString(long,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Using timestamp(com.datastax.driver.core.querybuilder.BindMarker)> -> _SINK_
<org.mmbase.module.database.MultiStatement: void setMaxRows(int)> -> _SINK_
<org.hibernate.hql.ast.tree.IdentNode: org.hibernate.hql.ast.tree.FromElement locateSingleFromElement()> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: void testEstimatedResultSize_NoResults()> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Date getDate(int)> -> _SINK_
<org.hibernate.sql.QueryJoinFragment: void addCrossJoin(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.ibatis.executor.statement.StatementHandler: org.apache.ibatis.mapping.BoundSql getBoundSql()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.QueryModifier: boolean isCountOnly()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<java.sql.Clob: int setString(long,java.lang.String,int,int)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: java.lang.Object toJava(int,int,java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache: void removeStatementFromDeathmarches(java.lang.Object,java.sql.Connection)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementType: java.lang.String renderPropertySelect(int,int,boolean)> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.ApplicationServiceImpl: java.util.List query(org.hibernate.criterion.DetachedCriteria,java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void setDateTimeValue(java.sql.PreparedStatement,int,java.lang.Object,org.mmbase.core.CoreField,org.mmbase.module.core.MMObjectNode)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: void setReadOnly(boolean)> -> _SINK_
<org.exolab.castor.persist.FieldMolder: org.exolab.castor.persist.SQLRelationLoader getRelationLoader()> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.Savepoint setSavepoint()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: boolean execute(java.lang.String,int)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.Junction getSampleJunction(gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.io.InputStream getNativeAsciiStream(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int countMisfiredTriggersInStates(java.sql.Connection,java.lang.String,java.lang.String,long)> -> _SINK_
<entities.descriptor.ViewDescriptor: void applyTemplate(java.lang.String)> -> _SINK_
<org.hibernate.impl.SessionImpl: java.util.Collection filter(java.lang.Object,java.lang.String,java.lang.Object[],org.hibernate.type.Type[])> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.ResultSet getInner()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setEvents(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<test.gov.nih.nci.security.threadsafe.CSMAPIMySQLDeadLockTest: void addProtectionElements()> -> _SINK_
<org.exolab.castor.util.SqlBindParser: java.lang.String getLastExpr()> -> _SINK_
<java.sql.CallableStatement: void setNull(java.lang.String,int)> -> _SINK_
<org.apache.commons.beanutils.JDBCDynaClass: java.lang.Object getObject(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getJDBCMinorVersion()> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$3: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<org.exolab.castor.jdo.drivers.PostgreSQLCallQuery: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setQueryTimeout(int)> -> _SINK_
<org.hibernate.hql.ast.tree.AbstractStatement: java.lang.String getDisplayText()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: java.sql.ResultSet getResultSet()> -> _SINK_
<org.apache.ibatis.transaction.jdbc.JdbcTransaction: void setDesiredAutoCommit(boolean)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: int getNumberOfParametersInSetClause()> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: java.lang.Object getRowValue(java.sql.ResultSet,org.apache.ibatis.mapping.ResultMap,org.apache.ibatis.cache.CacheKey)> -> _SINK_
<com.mchange.v2.c3p0.DataSources: javax.sql.DataSource pooledDataSource(javax.sql.DataSource)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void send(com.mysql.jdbc.Buffer,int)> -> _SINK_
<com.mysql.jdbc.Field: java.lang.String getColumnLabel()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: boolean isFirst()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$58: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setTime(java.lang.String,java.sql.Time)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: com.datastax.driver.core.Statement setRetryPolicy(com.datastax.driver.core.policies.RetryPolicy)> -> _SINK_
<com.datastax.driver.core.exceptions.InvalidQueryException: void <init>(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Ref getRef(int)> -> _SINK_
<org.hibernate.stat.Statistics: long getQueryCacheMissCount()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: byte getByte(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void registerOutParameter(int,int,boolean)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setBoolean(int,boolean)> -> _SINK_
<org.postgresql.gss.MakeGSS: void authenticate(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.postgresql.core.Logger,boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Campaign: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.exolab.castor.util.SqlBindParser: java.lang.String getJdbcSql(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: int getNumberOfTriggers(java.sql.Connection,org.quartz.core.SchedulingContext)> -> _SINK_
<com.mysql.jdbc.Buffer: java.lang.String dumpClampedBytes(int)> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxCharLiteralLength()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getRewriteBatchedStatements()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementStore: java.lang.String getStoreStatement(org.castor.persist.ProposedEntity)> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.RangeFilterList getNavRangeFilters()> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: java.lang.String getOrderClause(org.exolab.castor.jdo.oql.ParseTreeNode)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: org.mongodb.morphia.query.Query cloneQuery()> -> _SINK_
<org.springframework.web.servlet.support.RequestContext: java.lang.String getQueryString()> -> _SINK_
<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsStoredProcedures()> -> _SINK_
<org.postgresql.core.v3.ProtocolConnectionImpl: void sendQueryCancel()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setInt(int,int)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void <init>()> -> _SINK_
<org.castor.jdo.engine.SQLTypeInfos: java.lang.Class sqlTypeName2javaType(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.UserProfileFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateShort(int,short)> -> _SINK_
<org.hibernate.hql.ast.exec.BasicExecutor: void <init>(org.hibernate.hql.ast.HqlSqlWalker,org.hibernate.persister.entity.Queryable)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsANSI92IntermediateSQL()> -> _SINK_
<org.springframework.web.filter.AbstractRequestLoggingFilter: java.lang.String createMessage(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setTime(java.lang.String,java.sql.Time,java.util.Calendar)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate: java.lang.Object execute(org.springframework.orm.hibernate3.HibernateCallback,boolean)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setBoolean(java.lang.String,boolean)> -> _SINK_
<org.springframework.orm.jdo.JdoTemplate$23: java.lang.Object doInJdo(javax.jdo.PersistenceManager)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: void lock(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: java.sql.Connection getConnection()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: java.util.Set resultSets(java.sql.Statement,boolean)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: void select(java.lang.String,java.lang.Object,org.apache.ibatis.session.RowBounds,org.apache.ibatis.session.ResultHandler)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Clob getClobFromString(java.lang.String,int)> -> _SINK_
<gov.nih.nci.system.webservice.WSQueryImpl: java.util.List getHQLResultSet(java.lang.String,java.lang.Object,int)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementFactory: org.hibernate.hql.ast.tree.FromElement createCollection(org.hibernate.persister.collection.QueryableCollection,java.lang.String,int,boolean,boolean)> -> _SINK_
<org.hibernate.type.DbTimestampType: java.lang.Object seed(org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.mmbase.util.transformers.Sql: java.io.Writer singleQuote(java.io.Reader,java.io.Writer)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setOpportunityContactRoles(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementLookup: java.lang.Class class$(java.lang.String)> -> _SINK_
<test.gov.nih.nci.security.threadsafe.CSMAPIMySQLDeadLockTest: void addUserRoleToProtectionGroup()> -> _SINK_
<org.postgresql.largeobject.BlobInputStream: void <init>(org.postgresql.largeobject.LargeObject)> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$MapPutAssignment: void appendTo(java.lang.StringBuilder,java.util.List)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void commitChange(org.mmbase.module.core.MMObjectNode,java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.PreparedStatement prepareStatement(java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeInfos: void <clinit>()> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: void <init>(boolean,boolean,boolean)> -> _SINK_
<com.mysql.jdbc.NonRegisteringDriver: java.sql.Connection connectReplicationConnection(java.lang.String,java.util.Properties)> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: java.lang.String getQueryIdentifier()> -> _SINK_
<com.mysql.jdbc.Statement: int getResultSetConcurrency()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setNull(int,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.lang.String toString()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Attribute: java.lang.String getValue()> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter: java.lang.Object parse(java.lang.Object,java.lang.String)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSessionFactory: javax.sql.DataSource getDataSourceFromEnvironment(org.apache.ibatis.mapping.Environment)> -> _SINK_
<org.hibernate.connection.ConnectionProvider: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion gtSome(java.lang.Object,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setTime(int,java.sql.Time,java.util.Calendar)> -> _SINK_
<org.mmbase.module.database.MultiPool: void replaceConnection(org.mmbase.module.database.MultiConnection)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(java.lang.String,org.springframework.jdbc.core.ResultSetExtractor)> -> _SINK_
<gov.nih.nci.cananolab.service.BaseServiceLocalImpl$FileUtils: gov.nih.nci.cananolab.domain.common.File findFileById(java.lang.String)> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceUtils: java.sql.Connection getTargetConnection(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getJdbcCompliantTruncationForReads()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: void setTransactionIsolation(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContractFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: org.hibernate.engine.JoinSequence getPathJoin(java.lang.String)> -> _SINK_
<org.hibernate.impl.AbstractSessionImpl: org.hibernate.engine.query.NativeSQLQueryPlan getNativeSQLQueryPlan(org.hibernate.engine.query.sql.NativeSQLQuerySpecification)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$53: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Date getDate(java.lang.String)> -> _SINK_
<org.apache.ibatis.type.DateOnlyTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<org.springframework.orm.ibatis.support.AbstractLobTypeHandler: java.lang.Object getResultInternal(java.sql.ResultSet,int,org.springframework.jdbc.support.lob.LobHandler)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: void setFetchDirection(int)> -> _SINK_
<org.mongodb.morphia.annotations.Entity: boolean queryNonPrimary()> -> _SINK_
<org.mongodb.morphia.dao.BasicDAO: org.mongodb.morphia.query.Query createQuery()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getIdentifierQuoteString()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateAsciiStream(int,java.io.InputStream,long)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Ref getRef(int)> -> _SINK_
<org.apache.ibatis.builder.xml.XMLStatementBuilder$WhereHandler: void handleNode(org.apache.ibatis.parsing.XNode,java.util.List)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void propertyRef(antlr.collections.AST)> -> _SINK_
<org.apache.ibatis.type.DoubleTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: float getFloat(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsPositionedDelete()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ResultSet: void updateArray(java.lang.String,java.sql.Array)> -> _SINK_
<java.sql.PreparedStatement: void setRef(int,java.sql.Ref)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void removeGroupRoleFromProtectionGroup(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<org.hibernate.cfg.HbmBinder: void bindPersistentClassCommonValues(org.dom4j.Element,org.hibernate.mapping.PersistentClass,org.hibernate.cfg.Mappings,java.util.Map)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNrt(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.CallableStatement prepareCall(java.lang.String,int,int)> -> _SINK_
<org.apache.commons.beanutils.RowSetDynaClass: void <init>(java.sql.ResultSet,boolean,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateCharacterStream(int,java.io.Reader,int)> -> _SINK_
<org.postgresql.core.v2.ProtocolConnectionImpl: void sendQueryCancel()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Candidate__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.Object getObjectStoredProc(java.lang.String,java.util.Map,int)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.TransactionTagSupport: void <init>()> -> _SINK_
<org.springframework.web.util.HtmlUtils: java.lang.String htmlEscapeQueryStringParameters(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: int executeUpdate(java.lang.String,java.lang.String[])> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: void setClientInfo(java.util.Properties)> -> _SINK_
<gov.nih.nci.system.query.cql.CQLObject: gov.nih.nci.system.query.cql.CQLAttribute getAttribute()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: void <init>(org.postgresql.core.BaseConnection,int,byte[])> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Date getDate(java.lang.String,java.util.Calendar)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsNamedParameters()> -> _SINK_
<org.acegisecurity.util.UrlUtils: java.lang.String getRequestUrl(org.acegisecurity.ui.savedrequest.SavedRequest)> -> _SINK_
<org.apache.axis.transport.http.AxisServlet: void init()> -> _SINK_
<org.castor.jdo.engine.ConnectionFactory: java.sql.Connection createConnection()> -> _SINK_
<com.sforce.soap.enterprise.sobject.TestObj1__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.log.CommonsLogger: void logError(java.lang.Object)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateClob(int,java.io.Reader,long)> -> _SINK_
<org.hibernate.hql.classic.ClassicQueryTranslatorFactory: org.hibernate.hql.FilterTranslator createFilterTranslator(java.lang.String,java.lang.String,java.util.Map,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.XmlEtxIndicesReader: java.lang.String getEtxindexValue(org.w3c.dom.Element)> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQueryJoinReturn: java.lang.String getOwnerAlias()> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicQueryHandler: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.hibernate.type.CalendarDateType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.mysql.jdbc.log.CommonsLogger: void logInfo(java.lang.Object,java.lang.Throwable)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLColumnInfo: void <init>(java.lang.String,int,org.exolab.castor.mapping.TypeConvertor,org.exolab.castor.mapping.TypeConvertor,java.lang.String)> -> _SINK_
<com.mysql.jdbc.AssertionFailedException: void shouldNotHappen(java.lang.Exception)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.StepField createStepField(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$1: void <init>(org.postgresql.core.v3.QueryExecutorImpl,org.postgresql.core.ResultHandler)> -> _SINK_
<org.hibernate.type.DateType: java.lang.Object deepCopyNotNull(java.lang.Object)> -> _SINK_
<org.apache.ibatis.builder.xml.XMLStatementBuilder$ForEachHandler: void handleNode(org.apache.ibatis.parsing.XNode,java.util.List)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setNClob(int,java.io.Reader,long)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String generateDeleteString(int)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateObject(int,java.lang.Object)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: java.lang.String getUrl()> -> _SINK_
<oracle.toplink.sessions.DatabaseLogin: void usePlatform(oracle.toplink.internal.databaseaccess.DatabasePlatform)> -> _SINK_
<com.mysql.jdbc.Field: void <init>(com.mysql.jdbc.Connection,byte[],int,int,int,int,int,int,short,int)> -> _SINK_
<org.hibernate.QueryParameterException: void <init>(java.lang.Exception)> -> _SINK_
<com.mysql.jdbc.Field: java.lang.String getTable()> -> _SINK_
<org.postgresql.geometric.PGpoint: void <init>(java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$7: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: void initializeFrom(org.postgresql.ds.common.BaseDataSource)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: org.hibernate.LockMode[] getLockModes(java.util.Map)> -> _SINK_
<org.exolab.castor.persist.QueryResults: boolean absolute(int)> -> _SINK_
<org.hibernate.sql.OracleJoinFragment: void addJoin(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: int getFetchSize()> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.analytics.AnalyticsQuery getAnalyticsQuery()> -> _SINK_
<org.postgresql.util.StreamWrapper: void <init>(java.io.InputStream,int)> -> _SINK_
<org.mongodb.morphia.query.WhereCriteria: java.lang.String getFieldName()> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: com.amazonaws.services.dynamodbv2.model.QueryRequest withExclusiveStartKey(java.util.Map$Entry,java.util.Map$Entry)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: java.lang.String quote(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression$Join: void <init>(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsMinimumSQLGrammar()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void registerOutParameter(java.lang.String,int,java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.XmlEtxIndicesReader: java.lang.String getSbspaceName(org.w3c.dom.Element)> -> _SINK_
<org.postgresql.core.v2.SimpleParameterList: void <init>(int,boolean)> -> _SINK_
<org.hibernate.id.IdentityGenerator$BasicDelegate: org.hibernate.id.insert.IdentifierGeneratingInsert prepareIdentifierGeneratingInsert()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.io.InputStream getBinaryStream(int)> -> _SINK_
<org.mongodb.morphia.Datastore: org.mongodb.morphia.query.UpdateOperations createUpdateOperations(java.lang.Class)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.SortOrder addSortOrder(org.mmbase.storage.search.StepField,int)> -> _SINK_
<org.postgresql.core.ResultHandler: void handleError(java.sql.SQLException)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String renderSelect(int[],int[],int[])> -> _SINK_
<org.acegisecurity.userdetails.jdbc.JdbcDaoImpl$AuthoritiesByUsernameMapping: java.lang.Object mapRow(java.sql.ResultSet,int)> -> _SINK_
<org.mongodb.morphia.utils.Helper: com.mongodb.DBObject getCriteria(org.mongodb.morphia.query.Query)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.sql.ResultSet: void updateShort(int,short)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getDriverName()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String getSelectWithLockSQL()> -> _SINK_
<org.exolab.castor.jdo.oql.ParamInfo: java.lang.Class getSQLType()> -> _SINK_
<org.apache.ibatis.executor.BaseExecutor: void closeStatement(java.sql.Statement)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateString(int,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Timestamp getTimestamp(java.lang.String)> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceUtils: void applyTransactionTimeout(java.sql.Statement,javax.sql.DataSource)> -> _SINK_
<java.sql.PreparedStatement: void setShort(int,short)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: void <init>(com.datastax.driver.core.querybuilder.BuiltStatement)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateTriggerStateFromOtherStates(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: boolean getMoreResults(int)> -> _SINK_
<org.castor.jdo.conf.DatabaseChoiceDescriptor$3: java.lang.Object getValue(java.lang.Object)> -> _SINK_
<java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxTableNameLength()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setCalendarDate(int,java.util.Calendar)> -> _SINK_
<javax.persistence.EntityManager: javax.persistence.Query createQuery(java.lang.String)> -> _SINK_
<org.hibernate.dialect.function.NoArgSQLFunction: void <init>(java.lang.String,org.hibernate.type.Type,boolean)> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: void addCondition(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.sql.ResultSet: byte getByte(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: int getSQLType(int)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addDayConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setShort(int,short)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void additiveExpr(antlr.collections.AST)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: org.postgresql.fastpath.Fastpath getFastpathAPI()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.lang.String getFixedString(int)> -> _SINK_
<org.exolab.castor.jdo.drivers.ReturnedRSCallQuery: void execute(java.lang.Object,org.exolab.castor.mapping.AccessMode)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int deleteTriggerListeners(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.id.insert.Binder: void bindValues(java.sql.PreparedStatement)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateTriggerGroupStateFromOtherStates(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.QueryExecutor: void processNotifies()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXAConnection: void start(javax.transaction.xa.Xid,int)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void modifyObject(java.lang.Object)> -> _SINK_
<org.apache.commons.beanutils.converters.SqlTimeConverter: java.lang.Class getDefaultType()> -> _SINK_
<com.mysql.jdbc.ResultSet: long getNativeLong(int,boolean,boolean)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$33: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.type.ClobType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,boolean[],org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setTimestamp(int,java.sql.Timestamp)> -> _SINK_
<org.apache.ibatis.executor.statement.CallableStatementHandler: void parameterize(java.sql.Statement)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: org.hibernate.loader.custom.sql.SQLQueryReturnProcessor$ResultAliasContext process()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection: void close(boolean)> -> _SINK_
<org.hibernate.persister.entity.SQLLoadable: java.lang.String[] getSubclassPropertyColumnAliases(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.ibatis.type.TimeOnlyTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<org.postgresql.core.v3.ProtocolConnectionImpl: void setIntegerDateTimes(boolean)> -> _SINK_
<org.hibernate.hql.classic.GroupByParser: void token(java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.hibernate.engine.query.NativeSQLQueryPlan: int[] getNamedParameterLocs(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch: java.lang.StringBuilder buildQueryString(java.util.List)> -> _SINK_
<org.springframework.jdbc.core.StatementCreatorUtils: void setParameterValue(java.sql.PreparedStatement,int,org.springframework.jdbc.core.SqlParameter,java.lang.Object)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: boolean isName(java.lang.String)> -> _SINK_
<java.sql.CallableStatement: java.sql.Time getTime(int,java.util.Calendar)> -> _SINK_
<entities.Repository: java.util.List get(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.optional.ConnectionPool: void <init>()> -> _SINK_
<com.mysql.jdbc.MysqlParameterMetadata: void checkAvailable()> -> _SINK_
<com.mysql.jdbc.NonRegisteringDriver: int getMajorVersion()> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils$CName: java.lang.String access$200(com.datastax.driver.core.querybuilder.Utils$CName)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTransactionManager: java.sql.Connection getJdbcConnection(oracle.toplink.sessions.Session)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNx(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.lang.String getCatalog()> -> _SINK_
<java.sql.ResultSet: java.sql.Time getTime(int,java.util.Calendar)> -> _SINK_
<com.sforce.soap.enterprise.sobject.QuoteFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.util.Map getTypeMap()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object containsIgnoreCase(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getSchemas()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: java.io.Reader getNCharacterStream(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void fireConnectionErrorOccurred(java.sql.SQLException)> -> _SINK_
<org.mmbase.bridge.util.TreeList: org.mmbase.bridge.NodeQuery getLeafQuery()> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicQueryHandler: java.lang.String createSqlString(org.mmbase.storage.search.SearchQuery,boolean,boolean)> -> _SINK_
<org.hibernate.loader.Loader: java.util.List doQuery(org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters,boolean)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int)> -> _SINK_
<gov.nih.nci.cagrid.data.stubs.QueryRequest: void <init>()> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimeLocaleConverter: void <init>(java.lang.Object,boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: java.lang.StringBuilder buildQueryString(java.util.List)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: boolean isTracing()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: boolean isSelectStatement()> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator: java.lang.String getSQL()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void renderSQL()> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.nio.ByteBuffer serializeValue(java.lang.Object)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateTriggerStateFromOtherState(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiPool: java.util.Iterator getPool()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Time fastTimeCreate(java.util.Calendar,int,int,int)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.QueryModifier: java.lang.String[] getAttributeNames()> -> _SINK_
<com.mysql.jdbc.RowData: java.lang.Object[] next()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: boolean getMoreResults(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: int getTransactionIsolation()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getDatabaseProductVersion()> -> _SINK_
<org.hibernate.jmx.SessionFactoryStub: org.hibernate.classic.Session openSession(java.sql.Connection,org.hibernate.Interceptor)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: org.hibernate.hql.ast.tree.FromClause getFinalFromClause()> -> _SINK_
<org.hibernate.exception.SQLExceptionConverterFactory$1: void <init>()> -> _SINK_
<org.springframework.jdbc.object.SqlUpdate: int update(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getSecondsBeforeRetryMaster()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNs(java.lang.String)> -> _SINK_
<org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07: org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.SuspendableXAConnection: void start(javax.transaction.xa.Xid,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.io.InputStream getUnicodeStream(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getDatabaseMinorVersion()> -> _SINK_
<gov.nih.nci.cananolab.service.PublicDataCountJob: void execute(org.quartz.JobExecutionContext)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: int executeUpdate(java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.Buffer: void writeStringNoNull(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.Junction getDatumJunction(gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<org.hibernate.tool.hbm2ddl.DatabaseMetadata: org.hibernate.tool.hbm2ddl.TableMetadata getTableMetadata(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.sql.CallableStatement: java.sql.Timestamp getTimestamp(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator: void out(java.lang.String)> -> _SINK_
<com.datastax.driver.core.QueryTrace: java.lang.String getRequestType()> -> _SINK_
<org.exolab.castor.persist.ClassMolder: void store(org.castor.persist.TransactionContext,org.exolab.castor.persist.OID,org.exolab.castor.persist.DepositBox,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void clearParameters()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateBlob(java.lang.String,java.io.InputStream,long)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Options: com.datastax.driver.core.RegularStatement setForceNoValues(boolean)> -> _SINK_
<org.hibernate.cfg.Configuration: java.util.Map getSqlResultSetMappings()> -> _SINK_
<gov.nih.nci.system.query.hql.UpdateHQLQuery: void <init>(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: short getShort(int)> -> _SINK_
<org.exolab.castor.jdo.drivers.InterbaseQueryExpression: void appendJoin(org.exolab.castor.jdo.drivers.JDBCQueryExpression$Join)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Clob: java.io.Writer setCharacterStream(long)> -> _SINK_
<org.acegisecurity.acls.jdbc.JdbcMutableAclService: void deleteObjectIdentityAndOptionallyClass(org.acegisecurity.acls.objectidentity.ObjectIdentity)> -> _SINK_
<com.mysql.jdbc.Connection: void setCatalog(java.lang.String)> -> _SINK_
<org.hibernate.hql.classic.ClauseParser: void token(java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.castor.jdo.conf.DatabaseChoiceDescriptor$2: java.lang.Object getValue(java.lang.Object)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimestampLocaleConverter: void <init>()> -> _SINK_
<org.mongodb.morphia.query.Criteria: java.lang.String getFieldName()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$80: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLTransactionRollbackException: void <init>()> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavRelRankERecRank(com.endeca.navigation.ERecRank)> -> _SINK_
<org.mmbase.storage.search.implementation.database.InformixSqlHandler: void <init>()> -> _SINK_
<java.sql.ResultSet: void updateByte(int,byte)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: void setStringParameter(int,java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getRelaxAutoCommit()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Predicate: gov.nih.nci.cagrid.cqlquery.Predicate fromString(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ProcessInstance: void setStepsAndWorkitems(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase: java.lang.String getPreferredTestQuery()> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapExecutor: java.util.List queryForList(java.lang.String,java.lang.Object,int,int)> -> _SINK_
<com.mysql.jdbc.SQLError: java.lang.String mysqlToSql99(int)> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.DateParamTag: void <init>()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void cancelRowUpdates()> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<com.mysql.jdbc.ResultSet: int getRow()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void <init>(org.postgresql.jdbc3.AbstractJdbc3Connection,int,int,int)> -> _SINK_
<org.hibernate.impl.CollectionFilterImpl: java.util.List list()> -> _SINK_
<org.mmbase.cache.ReleaseStrategy: boolean doEvaluate(org.mmbase.core.event.RelationEvent,org.mmbase.storage.search.SearchQuery,java.util.List)> -> _SINK_
<org.exolab.castor.jdo.drivers.MySQLFactory: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void extractDefaultValues()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Lead: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.Trigger[] selectTriggersForJob(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.ssl.jdbc4.LibPQFactory: void <init>(java.util.Properties)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getDatabaseProductVersion()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.lang.String nativeSQL(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: void doExecuteBatch(java.sql.PreparedStatement)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.EtxIndexCreator: void main(java.lang.String[])> -> _SINK_
<com.datastax.driver.core.querybuilder.Select: void <clinit>()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Array getArray(int)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void flushCopy(org.postgresql.core.v3.CopyInImpl)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: void <init>(com.datastax.driver.core.querybuilder.Update)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getLogSlowQueries()> -> _SINK_
<org.postgresql.core.PGStream: java.lang.String ReceiveString()> -> _SINK_
<com.sforce.soap.enterprise.sobject.OpportunityFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.core.v2.FastpathParameterList: void <init>(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsResultSetHoldability(int)> -> _SINK_
<org.mmbase.module.core.ClusterBuilder: org.mmbase.storage.search.implementation.BasicSearchQuery getMultiLevelSearchQuery(java.util.List,java.util.List,java.lang.String,java.util.List,java.lang.String,java.util.List,java.util.List,int)> -> _SINK_
<org.hibernate.hql.ast.exec.MultiTableUpdateExecutor: void <init>(org.hibernate.hql.ast.HqlSqlWalker)> -> _SINK_
<org.springframework.jdbc.support.lob.LobHandler: byte[] getBlobAsBytes(java.sql.ResultSet,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxProcedureNameLength()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema: java.sql.ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsNamedParameters()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.CallableStatement prepareCall(java.lang.String,int,int,int)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.lang.Object setStringValue(java.sql.PreparedStatement,int,java.lang.Object,org.mmbase.core.CoreField,org.mmbase.module.core.MMObjectNode)> -> _SINK_
<org.hibernate.impl.SessionImpl: java.util.List list(java.lang.String,org.hibernate.engine.QueryParameters)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: void attach(com.mchange.v2.c3p0.impl.NewPooledConnection)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl$AclObjectIdentityDelete: void delete(java.lang.Long)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void executeUpdateCheckConnection(java.lang.String,org.mmbase.module.core.MMObjectNode,java.util.List)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void resumeAll(java.sql.Connection,org.quartz.core.SchedulingContext)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getGatherPerformanceMetrics()> -> _SINK_
<org.hibernate.hql.antlr.HqlBaseParser: void compoundExpr()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: int[] executeBatch()> -> _SINK_
<org.hibernate.engine.query.ParamLocationRecognizer: void namedParameter(java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.SQLError: java.lang.String mysqlToXOpen(int)> -> _SINK_
<com.mysql.jdbc.Connection: void repartitionHistogram(int[],long[],long,long)> -> _SINK_
<gov.nih.nci.cananolab.service.curation.impl.CurationServiceJDBCImpl$1: gov.nih.nci.cananolab.dto.common.DataReviewStatusBean mapRow(java.sql.ResultSet,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateNull(java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.lang.Object getObjectImpl(java.lang.String,java.util.Map)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void registerOutParameter(java.lang.String,int,int)> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.sql.Alias: java.lang.String[] toAliasStrings(java.lang.String[])> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean deletesAreDetected(int)> -> _SINK_
<gov.nih.nci.system.web.util.HTTPUtils: java.lang.String getQueryType(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.QueryOptions_element: void setBatchSize(int)> -> _SINK_
<org.hibernate.sql.SelectFragment: org.hibernate.sql.SelectFragment addColumns(java.lang.String[])> -> _SINK_
<org.springframework.jdbc.support.JdbcUtils: java.lang.Object getResultSetValue(java.sql.ResultSet,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateRef(java.lang.String,java.sql.Ref)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: boolean tablesInheritFields()> -> _SINK_
<org.hibernate.SQLQuery: org.hibernate.SQLQuery addScalar(java.lang.String,org.hibernate.type.Type)> -> _SINK_
<org.exolab.castor.jdo.Persistent: void jdoPersistent(org.exolab.castor.jdo.Database)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(int,int,java.util.Map)> -> _SINK_
<org.springframework.orm.hibernate3.support.BlobByteArrayType: java.lang.Object nullSafeGetInternal(java.sql.ResultSet,java.lang.String[],java.lang.Object,org.springframework.jdbc.support.lob.LobHandler)> -> _SINK_
<org.hibernate.hql.ast.tree.BinaryArithmeticOperatorNode: void initialize()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Time getTime(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Update update(com.datastax.driver.core.TableMetadata)> -> _SINK_
<org.springframework.orm.ibatis.support.AbstractLobTypeHandler: java.lang.Object getResult(java.sql.CallableStatement,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.StringBuilder appendMap(java.util.Map,java.lang.StringBuilder)> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache$ConnectionStatementManager: java.util.Set statementSet(java.sql.Connection)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Asset: void setTasks(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.datastax.driver.core.exceptions.WriteTimeoutException: com.datastax.driver.core.exceptions.DriverException copy()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void storeDataTime412AndOlder(com.mysql.jdbc.Buffer,java.util.Date)> -> _SINK_
<com.datastax.driver.core.querybuilder.Truncate: java.lang.StringBuilder buildQueryString(java.util.List)> -> _SINK_
<org.hibernate.hql.ast.tree.IntoClause: boolean areCompatible(org.hibernate.type.Type,org.hibernate.type.Type)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: long getSlowQueryThresholdNanos()> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: void createNewQuery()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setNull(java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.Field: void <init>(com.mysql.jdbc.Connection,byte[],int,int,int,int,int,int,int,int,int,int,long,int,short,int,int,int,int)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.TrimSqlNode: java.util.List access$300(org.apache.ibatis.builder.xml.dynamic.TrimSqlNode)> -> _SINK_
<com.sforce.soap.enterprise.sobject.EmailTemplate: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: long getLong(int)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: int queryForInt(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource)> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void addOffsetClause(java.lang.String)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$5: void <init>(org.springframework.orm.ibatis.SqlMapClientTemplate,java.lang.String,java.lang.Object,com.ibatis.sqlmap.client.event.RowHandler)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$ConnectionProperty: java.lang.Object getDefaultValue()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setDate(int,java.sql.Date,java.util.Calendar)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: int getQueryTimeout()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Insert insertInto(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch: com.datastax.driver.core.querybuilder.Batch$Options using(com.datastax.driver.core.querybuilder.Using)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void exoticComparisonExpression(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.sql.filter.RecreatePackage: void main(java.lang.String[])> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setTime(java.lang.String,java.sql.Time)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.SetDataSourceTagSupport: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Timestamp getTimestamp(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.String getLocalSocketAddress()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<com.mongodb.DB: void dropDatabase()> -> _SINK_
<test.gov.nih.nci.security.instancelevel.InstanceLevelSecurityTest42: void testInstanceLevelSecurityForGroups()> -> _SINK_
<org.exolab.castor.util.SqlBindParser: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsDataManipulationTransactionsOnly()> -> _SINK_
<org.hibernate.criterion.Projection: org.hibernate.type.Type[] getTypes(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.hibernate.persister.collection.OneToManyPersister: int doUpdateRows(java.io.Serializable,org.hibernate.collection.PersistentCollection,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQueryNonScalarReturn: void <init>(java.lang.String,java.util.Map,org.hibernate.LockMode)> -> _SINK_
<org.mmbase.storage.search.implementation.database.InformixSqlHandler: void <clinit>()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setSolutions(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.Field: int getMysqlType()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: java.lang.String expandParameterList(java.lang.String,java.lang.String,org.hibernate.engine.TypedValue,java.util.Map)> -> _SINK_
<org.mmbase.cache.ReleaseStrategy: java.util.List getConstraintsForField(java.lang.String,org.mmbase.module.core.MMObjectBuilder,org.mmbase.storage.search.Constraint,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.postgresql.util.PGbytea: java.lang.String toPGString(byte[])> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void <init>()> -> _SINK_
<org.postgresql.util.ServerErrorMessage: int getInternalPosition()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void afterLast()> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: java.lang.String[] getReturnAliases(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: void convertFunctionOutParameters()> -> _SINK_
<com.mysql.jdbc.Connection: void checkServerEncoding()> -> _SINK_
<org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator: java.sql.Connection getOracleConnection(java.sql.PreparedStatement)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: void setAttributesToGet(java.util.Collection)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: boolean getBoolean(int)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Date getDate(int,java.util.Calendar)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.bridge.NodeList getList()> -> _SINK_
<org.postgresql.core.Logger: void setLogLevel(int)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion propertyGe(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<com.mysql.jdbc.CursorRowProvider: void <init>(com.mysql.jdbc.MysqlIO,com.mysql.jdbc.ServerPreparedStatement,com.mysql.jdbc.Field[])> -> _SINK_
<gov.nih.nci.security.authorization.instancelevel.InstanceLevelSecurityHelper: void addFilters(gov.nih.nci.security.AuthorizationManager,org.hibernate.cfg.Configuration)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.CharacterizationServiceHelper: java.util.List findExperimentConfigsByCharacterizationId(java.lang.String)> -> _SINK_
<com.endeca.navigation.analytics.FilterIn: java.lang.String toWire()> -> _SINK_
<com.mysql.jdbc.Connection: java.util.TimeZone getServerTimezoneTZ()> -> _SINK_
<java.sql.ResultSet: void deleteRow()> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.gridCQL.RoleNameResolver: void <init>(gov.nih.nci.system.util.ClassCache)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateRowId(java.lang.String,java.sql.RowId)> -> _SINK_
<com.fasterxml.jackson.databind.ser.std.SqlTimeSerializer: void <init>()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<org.apache.ibatis.session.SqlSessionFactoryBuilder: org.apache.ibatis.session.SqlSessionFactory build(org.apache.ibatis.session.Configuration)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: void copySortOrders(org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setDate(int,java.sql.Date,java.util.Calendar)> -> _SINK_
<org.postgresql.core.PGBindException: java.io.IOException getIOException()> -> _SINK_
<com.mysql.jdbc.CursorRowProvider: void removeRow(int)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: org.exolab.castor.persist.spi.QueryExpression getFinder()> -> _SINK_
<org.hibernate.loader.custom.sql.SQLCustomQuery: java.util.Set getQuerySpaces()> -> _SINK_
<com.datastax.driver.core.exceptions.ReadTimeoutException: void <init>(java.lang.String,java.lang.Throwable,com.datastax.driver.core.ConsistencyLevel,int,int,boolean)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.Object getObjectStoredProc(int,java.util.Map,int)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List query(org.springframework.jdbc.core.PreparedStatementCreator,org.springframework.jdbc.core.RowMapper)> -> _SINK_
<java.sql.ResultSet: java.io.InputStream getUnicodeStream(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: java.lang.Object idToJava(int,java.lang.Object)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.lang.String createNameFor(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void postProcessDML(org.hibernate.hql.ast.tree.RestrictableStatement)> -> _SINK_
<org.apache.ibatis.type.NClobTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.hibernate.criterion.LogicalExpression: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: gov.nih.nci.logging.api.applicationservice.SearchCriteria getSearchCriteriaThatGivesResults()> -> _SINK_
<com.mchange.v2.c3p0.filter.FilterDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.exception.SQLExceptionConverterFactory: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.springframework.jdbc.datasource.ConnectionHolder: java.lang.Object createSavepoint()> -> _SINK_
<org.acegisecurity.userdetails.jdbc.JdbcDaoImpl$AuthoritiesByUsernameMapping: void <init>(org.acegisecurity.userdetails.jdbc.JdbcDaoImpl,javax.sql.DataSource)> -> _SINK_
<com.mysql.jdbc.Connection$CompoundCacheKey: void <init>(com.mysql.jdbc.Connection,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: void setCursorName(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.SuspendableXAConnection: void switchToXid(javax.transaction.xa.Xid)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.sql.PreparedStatement prepareStatement(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void registerOutParameter(java.lang.String,int,java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getCatalogTerm()> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: java.nio.ByteBuffer getRoutingKey()> -> _SINK_
<org.hibernate.connection.ConnectionProvider: void closeConnection(java.sql.Connection)> -> _SINK_
<org.eclipse.acceleo.model.mtl.QueryInvocation: org.eclipse.acceleo.model.mtl.Query getDefinition()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.LogicalOperator: boolean equals(java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache$ConnectionStatementManager: boolean removeStatementForConnection(java.lang.Object,java.sql.Connection)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter: void <init>(java.lang.Object,java.util.Locale,boolean)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion propertyLtAll(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate$29: java.lang.Object doInHibernate(org.hibernate.Session)> -> _SINK_
<org.postgresql.util.PGbytea: byte[] toBytesOctalEscaped(byte[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContentDocument: void setHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int insertPausedTriggerGroup(java.sql.Connection,java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.JdbcUtils: java.lang.Object extractDatabaseMetaData(javax.sql.DataSource,java.lang.String)> -> _SINK_
<org.apache.ibatis.type.FloatTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.hibernate.usertype.UserType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.DimSearchRefinementConfigList getDimSearchRefinementConfigs()> -> _SINK_
<org.hibernate.hql.classic.FromPathExpressionParser: void end(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: void <init>(org.postgresql.copy.CopyIn)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.SQLWarning getWarnings()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsDifferentTableCorrelationNames()> -> _SINK_
<org.postgresql.core.ProtocolConnection: int getBackendPID()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: java.lang.String getBaseColumnName(int)> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int[])> -> _SINK_
<com.mysql.jdbc.util.BaseBugReport: void assertTrue(java.lang.String,boolean)> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfo: void addParametersFromDBMD(java.sql.ResultSet)> -> _SINK_
<org.hibernate.hql.ast.tree.IntoClause: void initialize(org.hibernate.persister.entity.Queryable)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: com.datastax.driver.core.Statement setConsistencyLevel(com.datastax.driver.core.ConsistencyLevel)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Time getTime(java.lang.String,java.util.Calendar)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: void execute(org.postgresql.core.Query,org.postgresql.core.ParameterList,org.postgresql.core.ResultHandler,int,int,int)> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator$HsqlType: java.lang.Object getValue(java.sql.Connection,java.lang.String)> -> _SINK_
<org.hibernate.dialect.function.SQLFunctionRegistry: org.hibernate.dialect.function.SQLFunction findSQLFunction(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.QueryAll_element: void setQueryString(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.CompositeParameterList: void setLiteralParameter(int,java.lang.String,int)> -> _SINK_
<org.mongodb.morphia.query.Query: com.mongodb.DBObject getFieldsObject()> -> _SINK_
<org.springframework.web.servlet.view.RedirectView: void appendQueryProperties(java.lang.StringBuffer,java.util.Map,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: java.util.List access$000(com.datastax.driver.core.querybuilder.Update$Options)> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: void add(org.mongodb.morphia.query.UpdateOperator,java.lang.String,java.lang.Object,boolean)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void determineParameterTypes()> -> _SINK_
<com.sun.jersey.api.client.AsyncWebResource: com.sun.jersey.api.client.AsyncWebResource queryParams(javax.ws.rs.core.MultivaluedMap)> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder withinCenterSphere(double,double,double)> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void addTable(java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.util.DBQuery: void sqlConversion(java.lang.StringBuffer)> -> _SINK_
<org.apache.commons.validator.UrlValidator: boolean isValid(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.PreparedStatementSetter: void setValues(java.sql.PreparedStatement)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void <init>(org.postgresql.jdbc4.Jdbc4Connection,int,int,int)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.sql.Date getDate(java.lang.String)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTransactionManager: javax.sql.DataSource getDataSource()> -> _SINK_
<org.castor.jdo.engine.DatabaseRegistry: org.castor.jdo.engine.AbstractConnectionFactory getConnectionFactory(java.lang.String)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setBoolean(int,boolean)> -> _SINK_
<org.exolab.castor.mapping.xml.types.SqlDirtyTypeDescriptor: java.lang.Class getJavaClass()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.JobDetail selectJobForTrigger(java.sql.Connection,java.lang.String,java.lang.String,org.quartz.spi.ClassLoadHelper)> -> _SINK_
<com.mysql.jdbc.MysqlIO: java.lang.String getQueryTimingUnits()> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl$AclObjectIdentityDelete: void <init>(org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl,javax.sql.DataSource)> -> _SINK_
<com.endeca.navigation.UrlENEQueryParseException: void <init>(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Selection: com.datastax.driver.core.querybuilder.Delete$Selection mapElt(java.lang.String,java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position__c: void setOpenActivities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.lang.Object getObject(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setObject(int,java.lang.Object,int)> -> _SINK_
<org.hibernate.loader.Loader: void autoDiscoverTypes(java.sql.ResultSet)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: java.util.List queryForList(java.lang.String,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.CallableStatement: byte[] getBytes(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: void setMaxRows(int)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.encoding.SDK40EncodingUtils: org.exolab.castor.mapping.Mapping loadMappingFromStream(java.lang.String,java.io.InputStream,org.xml.sax.EntityResolver)> -> _SINK_
<com.datastax.driver.core.TableMetadata: java.lang.String asCQLQuery()> -> _SINK_
<java.sql.ResultSet: void updateNull(java.lang.String)> -> _SINK_
<com.mysql.jdbc.MysqlDefs: int mysqlToJavaType(int)> -> _SINK_
<org.springframework.jdbc.object.SqlCall: org.springframework.jdbc.core.CallableStatementCreator newCallableStatementCreator(java.util.Map)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: void <init>(javax.sql.DataSource,boolean)> -> _SINK_
<com.datastax.driver.core.ArrayBackedResultSet: com.google.common.util.concurrent.ListenableFuture queryNextPage(java.nio.ByteBuffer,com.google.common.util.concurrent.SettableFuture)> -> _SINK_
<org.hibernate.engine.QueryParameters: org.hibernate.ScrollMode getScrollMode()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNe(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.String getString(int)> -> _SINK_
<org.hibernate.hql.ast.tree.DotNode: void resolve(boolean,boolean,java.lang.String,antlr.collections.AST)> -> _SINK_
<org.apache.ibatis.executor.statement.StatementHandler: void parameterize(java.sql.Statement)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getTimeDateFunctions()> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: void <clinit>()> -> _SINK_
<entities.dao.hibernate.PasswordType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Timestamp getTimestamp(int)> -> _SINK_
<entities.dao.hibernate.DAOHibernateSingleton: java.util.List query(java.lang.String,int,int,java.lang.Object[])> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: void setStatementName(java.lang.String)> -> _SINK_
<org.hibernate.sql.QueryJoinFragment: void addJoin(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],int,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getUDTs(java.lang.String,java.lang.String,java.lang.String,int[])> -> _SINK_
<org.hibernate.type.IntegerType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void startTimer()> -> _SINK_
<org.apache.ibatis.type.BlobTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateString(java.lang.String,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.sql.Connection getAttributeRestoringConnection(java.sql.Connection)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Truncate truncate(com.datastax.driver.core.TableMetadata)> -> _SINK_
<org.springframework.orm.jdo.JdoTemplate$21: java.lang.Object doInJdo(javax.jdo.PersistenceManager)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxColumnNameLength()> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: int getUpdateCount()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.CQL2ParameterizedHQL: gov.nih.nci.cagrid.sdkquery4.processor.ParameterizedHqlQuery convertToHql(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateTimestamp(int,java.sql.Timestamp)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: void testQuery_OffSet_0_RecordCount_0()> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimestampLocaleConverter: void <init>(java.lang.Object,boolean)> -> _SINK_
<org.hibernate.loader.JoinWalker: java.lang.StringBuffer whereString(java.lang.String,java.lang.String[],int)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: long[] mk_tokenSet_4()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void initObjectTypes(java.util.Properties)> -> _SINK_
<org.hibernate.dialect.HSQLDialect$ReadUncommittedLockingStrategy: void lock(java.io.Serializable,java.lang.Object,java.lang.Object,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int deleteSimpleTrigger(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<org.postgresql.copy.PGCopyInputStream: void <init>(org.postgresql.PGConnection,java.lang.String)> -> _SINK_
<com.mysql.jdbc.log.Log4JLogger: void logTrace(java.lang.Object,java.lang.Throwable)> -> _SINK_
<org.apache.commons.beanutils.converters.SqlTimeConverter: void <init>(java.lang.Object)> -> _SINK_
<org.hibernate.engine.NamedSQLQueryDefinition: void <init>(java.lang.String,java.lang.String,java.util.List,boolean,java.lang.String,java.lang.Integer,java.lang.Integer,org.hibernate.FlushMode,java.util.Map,boolean)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion geSome(java.lang.Object,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setTimestamp(int,java.sql.Timestamp)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setShort(int,short)> -> _SINK_
<org.mmbase.module.database.MultiStatement: int getUpdateCount()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: int getHoldability()> -> _SINK_
<org.eclipse.acceleo.engine.generation.AcceleoEngine: java.lang.Object evaluate(org.eclipse.acceleo.model.mtl.Query,java.util.List,org.eclipse.acceleo.engine.generation.strategy.IAcceleoGenerationStrategy,org.eclipse.emf.common.util.Monitor)> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQuerySpecification: void <init>(java.lang.String,org.hibernate.engine.query.sql.NativeSQLQueryReturn[],java.util.Collection)> -> _SINK_
<org.mmbase.storage.search.implementation.database.HSqlSqlHandler: void <init>()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Date getDate(int,java.util.Calendar)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateRef(java.lang.String,java.sql.Ref)> -> _SINK_
<org.mmbase.servlet.MMBaseServlet: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.QueryResultPage: void setLastEvaluatedKey(java.util.Map)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateBlob(java.lang.String,java.sql.Blob)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory: javax.sql.DataSource createDataSource(java.lang.String)> -> _SINK_
<java.sql.ResultSet: void updateBlob(java.lang.String,java.sql.Blob)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsCatalogsInTableDefinitions()> -> _SINK_
<java.sql.ResultSet: boolean getBoolean(java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode$FilteredDynamicContext: void appendSql(java.lang.String)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: void testEstimatedResultSize_WithResults()> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.SQLException appendMessageToException(java.sql.SQLException,java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: int executeUpdate(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setUnicodeStream(int,java.io.InputStream,int)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$9: void forEach(java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.util.TestUtils$StupidConnectionInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setAllowMultiQueries(boolean)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: byte[] getBytes(int)> -> _SINK_
<org.hibernate.jdbc.Batcher: java.sql.CallableStatement prepareCallableQueryStatement(java.lang.String,boolean,org.hibernate.ScrollMode)> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator$DerbyType: java.lang.Object getValue(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateDate(java.lang.String,java.sql.Date)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.sql.Clob getClob(java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: void setRangeKeyCondition(com.amazonaws.services.dynamodb.model.Condition)> -> _SINK_
<org.hibernate.loader.AbstractEntityJoinWalker: void initStatementString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.hibernate.LockMode)> -> _SINK_
<com.mysql.jdbc.ResultSet: void clearNextResult()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLInvalidAuthorizationSpecException: void <init>(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> -> _SINK_
<org.mmbase.util.xml.BuilderReader: org.mmbase.datatypes.DataType decodeDataType(org.mmbase.module.core.MMObjectBuilder,org.mmbase.datatypes.DataTypeCollector,java.lang.String,org.w3c.dom.Element,int,int,boolean)> -> _SINK_
<org.postgresql.core.BaseConnection: org.postgresql.core.Encoding getEncoding()> -> _SINK_
<org.postgresql.core.v2.V2Query: void <clinit>()> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.Step addStep(org.mmbase.bridge.NodeManager)> -> _SINK_
<java.sql.DatabaseMetaData: int getJDBCMajorVersion()> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.JoinedSubclassEntityPersister: java.lang.String[] toColumns(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.ibatis.session.Configuration: org.apache.ibatis.executor.resultset.ResultSetHandler newResultSetHandler(org.apache.ibatis.executor.Executor,org.apache.ibatis.mapping.MappedStatement,org.apache.ibatis.session.RowBounds,org.apache.ibatis.executor.parameter.ParameterHandler,org.apache.ibatis.session.ResultHandler,org.apache.ibatis.mapping.BoundSql)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: void copyFields(org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: int hashCode()> -> _SINK_
<org.hibernate.type.AbstractType: java.lang.Object hydrate(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<org.apache.taglibs.standard.tlv.JstlBaseTLV: boolean isSqlTag(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void interpretCommandStatus(java.lang.String,org.postgresql.core.ResultHandler)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: com.datastax.driver.core.querybuilder.Update$Assignments 'with'(com.datastax.driver.core.querybuilder.Assignment)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsSubqueriesInIns()> -> _SINK_
<org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter: java.sql.Connection doGetConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceUtils: int getConnectionSynchronizationOrder(javax.sql.DataSource)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: java.sql.ResultSet executeQuery()> -> _SINK_
<gov.nih.nci.system.dao.orm.ORMDAOImpl$1: java.lang.Object doInHibernate(org.hibernate.Session)> -> _SINK_
<com.mysql.jdbc.RowDataDynamic$OperationNotSupportedException: void <init>(com.mysql.jdbc.RowDataDynamic)> -> _SINK_
<org.springframework.jdbc.core.namedparam.ParsedSql: void setNewSql(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void postProcessDelete(antlr.collections.AST)> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteria: java.lang.String getRoleName()> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavMerchPreviewTime(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.SimpleQueryExecutor$SimpleQueryResults: int size()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Blob getBlob(int)> -> _SINK_
<com.mysql.jdbc.MysqlIO: int readFully(java.io.InputStream,byte[],int,int)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void removeObject(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$45: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter: java.lang.Class determineDatabaseDialectClass(org.springframework.orm.jpa.vendor.Database)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsOpenCursorsAcrossCommit()> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: java.util.ArrayList getParameters()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void parse(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: void setInitialConnections(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.Key exists(java.lang.Object)> -> _SINK_
<org.mmbase.bridge.implementation.BasicNode: org.mmbase.bridge.RelationList getRelations(java.lang.String,org.mmbase.bridge.NodeManager,java.lang.String)> -> _SINK_
<com.endeca.navigation.HttpENEConnection: com.endeca.navigation.ENEQueryResults query(com.endeca.navigation.ENEQuery)> -> _SINK_
<org.apache.ibatis.logging.jdbc.ConnectionLogger: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTransactionManager: void setDataSource(javax.sql.DataSource)> -> _SINK_
<org.mmbase.util.QueryConvertor: java.lang.String altaVista2SQL(java.lang.String)> -> _SINK_
<org.castor.jdo.conf.Database: void setEngine(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory: java.lang.String getDatabaseName(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: boolean execute(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateArray(int,java.sql.Array)> -> _SINK_
<org.acegisecurity.acls.jdbc.JdbcMutableAclService: java.lang.Long createOrRetrieveClassPrimaryKey(java.lang.Class,boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: java.lang.String[] selectTriggerGroups(java.sql.Connection)> -> _SINK_
<org.mmbase.module.database.MultiStatement: boolean execute(java.lang.String,java.lang.String[])> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.lang.String getNString(int)> -> _SINK_
<org.mmbase.module.database.JDBC: void getProps()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List query(java.lang.String,org.springframework.jdbc.core.RowMapper)> -> _SINK_
<com.mysql.jdbc.log.Jdk14Logger: void logWarn(java.lang.Object,java.lang.Throwable)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.datastax.driver.core.Cluster$Manager: com.datastax.driver.core.PreparedStatement addPrepared(com.datastax.driver.core.PreparedStatement)> -> _SINK_
<java.sql.Connection: java.sql.CallableStatement prepareCall(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void beforeSelectClause()> -> _SINK_
<org.hibernate.engine.query.ParameterParser$Recognizer: void outParameter(int)> -> _SINK_
<org.springframework.jdbc.datasource.SingleConnectionDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.engine.NamedQueryDefinition: org.hibernate.CacheMode getCacheMode()> -> _SINK_
<org.hibernate.type.AnyType: java.lang.Object hydrate(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<org.exolab.castor.jdo.drivers.SybaseQueryExpression: void addInnerJoin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.CursorRowProvider: void moveRowRelative(int)> -> _SINK_
<org.postgresql.core.v3.CopyOperationImpl: void init(org.postgresql.core.v3.QueryExecutorImpl,int,int[])> -> _SINK_
<com.mysql.jdbc.Connection: void resetServerState()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteCalendar(java.sql.Connection,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: int getResultSetType()> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.math.BigDecimal getBigDecimal(int)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsSchemasInDataManipulation()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.net.URL getURL(java.lang.String)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationServiceFacade: void removeObject(java.lang.Object)> -> _SINK_
<org.hibernate.type.BooleanType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.postgresql.util.ServerErrorMessage: int getLine()> -> _SINK_
<org.postgresql.util.PGbytea: byte[] toBytes(byte[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: org.postgresql.core.Logger getLogger()> -> _SINK_
<org.mmbase.bridge.util.GrowingTreeList: void addPathElement()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateBoolean(int,boolean)> -> _SINK_
<org.postgresql.core.PGStream: void <init>(org.postgresql.util.HostSpec)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Time getTime(int)> -> _SINK_
<org.hibernate.type.FloatType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<org.postgresql.core.ParameterList: int getParameterCount()> -> _SINK_
<org.hibernate.hql.ast.tree.FromElement: java.lang.String getIdentityColumn()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateClob(int,java.sql.Clob)> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.ParamTag: void <init>()> -> _SINK_
<org.hibernate.engine.NamedQueryDefinition: java.lang.Integer getTimeout()> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.TransactionTag: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.eclipse.acceleo.model.mtl.Query: org.eclipse.emf.ecore.EObject eContainer()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$82: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.postgresql.largeobject.LargeObjectManager: void <init>(org.postgresql.core.BaseConnection)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean ownUpdatesAreVisible(int)> -> _SINK_
<org.hibernate.hql.ast.tree.FromClause: boolean containsClassAlias(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: byte getByte(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4SQLXML: java.lang.String getString()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateNClob(int,java.sql.NClob)> -> _SINK_
<org.hibernate.mapping.AuxiliaryDatabaseObject: boolean appliesToDialect(org.hibernate.dialect.Dialect)> -> _SINK_
<org.springframework.jdbc.object.BatchSqlUpdate: int update(java.lang.Object[])> -> _SINK_
<org.apache.ibatis.executor.BatchExecutor: java.util.List doQuery(org.apache.ibatis.mapping.MappedStatement,java.lang.Object,org.apache.ibatis.session.RowBounds,org.apache.ibatis.session.ResultHandler)> -> _SINK_
<java.sql.DatabaseMetaData: boolean ownUpdatesAreVisible(int)> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: void deleteReadOnly()> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: void setBinaryParameter(int,byte[],int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseSSPSCompatibleTimezoneShift(boolean)> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getUserName()> -> _SINK_
<com.mysql.jdbc.ResultSet: short getNativeShort(int)> -> _SINK_
<org.postgresql.copy.CopyOperation: boolean isActive()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.net.URL getNativeURL(int)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Association: void <init>(java.lang.String)> -> _SINK_
<org.hibernate.loader.Loader: java.lang.String toString()> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeManager: org.mmbase.bridge.NodeList getList(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.v3.ConnectionFactoryImpl: void runInitialQueries(org.postgresql.core.ProtocolConnection,java.util.Properties,org.postgresql.core.Logger)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.lang.Object getObject(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setMaxFieldSize(int)> -> _SINK_
<org.mongodb.morphia.converters.TimestampConverter: java.lang.Object decode(java.lang.Class,java.lang.Object,org.mongodb.morphia.mapping.MappedField)> -> _SINK_
<org.postgresql.core.v3.ConnectionFactoryImpl$UnsupportedProtocolException: void <init>()> -> _SINK_
<org.apache.ibatis.binding.MapperProxy: java.lang.Object newMapperProxy(java.lang.Class,org.apache.ibatis.session.SqlSession)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void <init>()> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode$FilteredDynamicContext: java.lang.String getSql()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.SDK4QueryProcessor: boolean useServiceLogin()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementStore: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DriverTag: java.lang.String getPassword()> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateShort(java.lang.String,short)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: java.sql.ResultSet getResultSet()> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion propertyGtSome(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<com.endeca.navigation.ENEQueryResults: boolean containsERec()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl near(double,double,boolean)> -> _SINK_
<org.hibernate.Query: org.hibernate.Query setFirstResult(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setByte(int,byte)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setObject(int,java.lang.Object,int)> -> _SINK_
<org.exolab.castor.persist.spi.PersistenceQuery: void setParameter(int,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.log.CommonsLogger: void logTrace(java.lang.Object,java.lang.Throwable)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsResultSetConcurrency(int,int)> -> _SINK_
<org.postgresql.jdbc4.array.UUIDArrayAssistant: java.lang.Object buildElement(byte[],int,int)> -> _SINK_
<com.mysql.jdbc.Statement: int getUpdateCount()> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.lang.String nativeSQL(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: void setStatementDescribed(boolean)> -> _SINK_
<test.gov.nih.nci.security.threadsafe.CSMAPIMySQLDeadLockTest: void main(java.lang.String[])> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getNumericFunctions()> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContactFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.CompositeConstraint createLogicalConstraint(org.mmbase.bridge.Query,org.mmbase.storage.search.Constraint,org.mmbase.storage.search.Constraint,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: int getMaxRows()> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Time getTime(int)> -> _SINK_
<org.hibernate.impl.ScrollableResultsImpl: int getRowNumber()> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: void closePreparedStatement(java.sql.PreparedStatement)> -> _SINK_
<java.sql.ResultSet: void updateAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<java.sql.Statement: int[] executeBatch()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: boolean isBeforeFirst()> -> _SINK_
<gov.nih.nci.system.dao.orm.ORMDAOImpl: gov.nih.nci.system.dao.Response query(gov.nih.nci.system.dao.Request,gov.nih.nci.system.query.cql.CQLQuery)> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: void <init>(org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<org.mmbase.module.database.MultiConnection: void realclose()> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: java.lang.Boolean isScanIndexForward()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: int[] executeBatch()> -> _SINK_
<org.exolab.castor.jdo.keygen.MaxKeyGenerator: java.lang.Object generateKey(java.sql.Connection,java.lang.String,java.lang.String,java.util.Properties)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: org.postgresql.core.Field[] receiveFields()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateBinaryStream(java.lang.String,java.io.InputStream)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: int getFetchDirection()> -> _SINK_
<org.springframework.orm.toplink.TopLinkAccessor: org.springframework.dao.DataAccessException convertTopLinkAccessException(oracle.toplink.exceptions.TopLinkException)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String[] getCalendarNames(java.sql.Connection,org.quartz.core.SchedulingContext)> -> _SINK_
<org.hibernate.hql.ast.tree.UnaryArithmeticNode: org.hibernate.type.Type getDataType()> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObjectByNamedParam(java.util.Map)> -> _SINK_
<org.postgresql.util.UnixCrypt: int fourBytesToInt(byte[],int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: boolean getMoreResults()> -> _SINK_
<org.hibernate.criterion.Distinct: org.hibernate.type.Type[] getTypes(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: byte[] getBytes(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: double getDouble(java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.SDK4QueryProcessor: gov.nih.nci.cagrid.metadata.dataservice.DomainModel getDomainModel()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: long queryForLong(java.lang.String,java.lang.Object[])> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setAutoReconnectForConnectionPools(boolean)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$10: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl: org.exolab.castor.jdo.QueryResults execute(org.exolab.castor.mapping.AccessMode)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.lang.String getFieldList(org.mmbase.storage.util.Index)> -> _SINK_
<org.mmbase.bridge.NodeQuery: org.mmbase.bridge.NodeManager getNodeManager()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.DomainTypesInformation: int hashCode()> -> _SINK_
<java.sql.ResultSet: void moveToInsertRow()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setFloat(int,float)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.math.BigDecimal getBigDecimal(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: com.mysql.jdbc.MysqlIO createNewIO(boolean)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser: void <init>(java.lang.String,org.hibernate.loader.custom.sql.SQLQueryParser$ParserContext)> -> _SINK_
<org.mmbase.module.database.MultiPool$ConnectionCloser: void run()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: boolean isSubquery()> -> _SINK_
<org.springframework.jdbc.core.JdbcOperations: java.lang.Object queryForObject(java.lang.String,java.lang.Object[],java.lang.Class)> -> _SINK_
<org.hibernate.param.NamedParameterSpecification: int bind(java.sql.PreparedStatement,org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor,int)> -> _SINK_
<org.mmbase.module.builders.MMServers: java.util.List getNodes()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<com.endeca.navigation.ENEException: void <init>()> -> _SINK_
<com.mysql.jdbc.StandardSocketFactory: void configureSocket(java.net.Socket,java.util.Properties)> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getAggrERecNavRecordFilter()> -> _SINK_
<org.mmbase.servlet.ImageServlet: org.mmbase.bridge.Node getServedNode(org.mmbase.servlet.BridgeServlet$QueryParts,org.mmbase.bridge.Node)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateDate(int,java.sql.Date)> -> _SINK_
<com.endeca.navigation.RefinementConfig: void parseDynamicRankOrder(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory: void <clinit>()> -> _SINK_
<org.hibernate.loader.Loader: java.lang.String getSQLString()> -> _SINK_
<com.endeca.navigation.ENEQuery: boolean containsAggrERecQuery()> -> _SINK_
<org.postgresql.copy.PGCopyInputStream: int getFormat()> -> _SINK_
<org.springframework.jdbc.datasource.SingleConnectionDataSource: void initConnection()> -> _SINK_
<java.sql.ResultSet: java.io.InputStream getUnicodeStream(int)> -> _SINK_
<org.exolab.castor.jdo.drivers.SQLServerQueryExpression: java.lang.String getStatement(boolean)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Timestamp getTimestamp(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.math.BigDecimal getBigDecimal(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Location__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.cfg.NamedSQLQuerySecondPass: void <init>(org.dom4j.Element,java.lang.String,org.hibernate.cfg.Mappings)> -> _SINK_
<org.postgresql.largeobject.BlobOutputStream: void <init>(org.postgresql.largeobject.LargeObject,int)> -> _SINK_
<org.postgresql.core.v3.CopyOperationImpl: long getHandledRowCount()> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.sql.PreparedStatement prepareStatement(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: int executeUpdate(java.lang.String,int[])> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy: void invalidateCurrentConnection()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getBlobSendChunkSize()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setOverrideSupportsIntegrityEnhancementFacility(boolean)> -> _SINK_
<org.hibernate.jdbc.ConnectionManager: java.sql.Connection manualDisconnect()> -> _SINK_
<org.postgresql.xa.PGXADataSource: void <init>()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setFloat(int,float)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.math.BigDecimal getBigDecimal(int)> -> _SINK_
<org.mongodb.morphia.MapreduceResults: org.mongodb.morphia.query.Query createQuery()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setDo(java.lang.String)> -> _SINK_
<org.postgresql.core.Parser: boolean subArraysEqual(char[],int,int,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2BlobClob: void assertPosition(long,long)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DateParamTagSupport: int doEndTag()> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: void <init>(boolean)> -> _SINK_
<com.mysql.jdbc.Connection: java.lang.String getServerVariable(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Buffer: void setPosition(int)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: int delete(java.lang.String)> -> _SINK_
<org.hibernate.engine.QueryParameters: void <init>(org.hibernate.type.Type[],java.lang.Object[],java.io.Serializable[])> -> _SINK_
<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addQuery(com.mongodb.DBObject)> -> _SINK_
<org.exolab.castor.jdo.engine.SimpleQueryExecutor$SimpleQueryResults: java.lang.Object nextElement()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: void setMaxFieldSize(int)> -> _SINK_
<org.postgresql.core.v3.ConnectionFactoryImpl: java.lang.String createPostgresTimeZone()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void assignGroupRoleToProtectionGroup(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<gov.nih.nci.cananolab.ui.protocol.SearchProtocolAction: org.apache.struts.action.ActionForward search(org.apache.struts.action.ActionMapping,org.apache.struts.action.ActionForm,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void setFetchSize(int)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addRelationSortOrder(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.RelationManager,java.lang.String,java.lang.String)> -> _SINK_
<java.sql.ResultSetMetaData: java.lang.String getColumnName(int)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: boolean getBoolean(java.lang.String)> -> _SINK_
<org.castor.persist.GlobalTransactionContext: void closeConnections()> -> _SINK_
<com.datastax.driver.core.Requests$QueryProtocolOptions: void <clinit>()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Date getDate(int,java.util.Calendar)> -> _SINK_
<org.hibernate.dialect.lock.SelectLockingStrategy: java.lang.String generateLockString()> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteria: java.lang.String getSourceRoleName()> -> _SINK_
<com.mysql.jdbc.Connection: void closeStatement(java.sql.Statement)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setFetchSize(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxCursorNameLength()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setParameter(int,java.lang.Object)> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: void reset(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.hibernate.type.StringType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.hibernate.sql.SimpleSelect: org.hibernate.sql.SimpleSelect addCondition(java.lang.String[],java.lang.String,java.lang.String[])> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.bridge.Cloud getCloud()> -> _SINK_
<org.springframework.orm.hibernate3.SessionFactoryUtils: void registerJtaSynchronization(org.hibernate.Session,org.hibernate.SessionFactory,org.springframework.jdbc.support.SQLExceptionTranslator,org.springframework.orm.hibernate3.SessionHolder)> -> _SINK_
<org.hibernate.engine.query.QueryPlanCache: org.hibernate.engine.query.ParameterMetadata buildNativeSQLParameterMetadata(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.drivers.InterbaseQueryExpression: java.lang.String getStatement(boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setTimestamp(java.lang.String,java.sql.Timestamp)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$BatchResultHandler: void handleWarning(java.sql.SQLWarning)> -> _SINK_
<org.hibernate.hql.ast.util.LiteralProcessor: void setSQLValue(org.hibernate.hql.ast.tree.DotNode,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: int setOneBatchedParameterSet(java.sql.PreparedStatement,int,java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsColumnAliasing()> -> _SINK_
<org.hibernate.engine.ResultSetMappingDefinition: void addQueryReturn(org.hibernate.engine.query.sql.NativeSQLQueryReturn)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void setOwnerForProtectionElement(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getPadCharsWithSpace()> -> _SINK_
<org.springframework.jdbc.object.BatchSqlUpdate$1: void setValues(java.sql.PreparedStatement,int)> -> _SINK_
<com.mysql.jdbc.util.VersionFSHierarchyMaker: void main(java.lang.String[])> -> _SINK_
<org.castor.jdo.conf.Database: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: java.lang.String getViewName(java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.TrimSqlNode: java.lang.String access$200(org.apache.ibatis.builder.xml.dynamic.TrimSqlNode)> -> _SINK_
<com.mysql.jdbc.BlobFromLocator: void <init>(com.mysql.jdbc.ResultSet,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: int executeUpdate(java.lang.String,int)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl notIn(java.lang.Iterable)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContentDocumentFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.hql.ast.tree.BinaryArithmeticOperatorNode: void setScalarColumnText(int)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: void appendField(java.lang.StringBuffer,org.mmbase.storage.search.SortOrder,boolean)> -> _SINK_
<gov.nih.nci.cananolab.ui.protocol.SearchProtocolAction: java.util.List queryProtocols(org.apache.struts.action.ActionForm,javax.servlet.http.HttpServletRequest)> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: void <init>(java.lang.String[],org.postgresql.core.v3.ProtocolConnectionImpl)> -> _SINK_
<java.sql.Statement: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<com.datastax.driver.core.exceptions.QueryTimeoutException: int getRequiredAcknowledgements()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<org.hibernate.sql.Insert: org.hibernate.sql.Insert addIdentityColumn(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getSQLKeywords()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: int getFetchSize()> -> _SINK_
<com.mysql.jdbc.Buffer: byte[] readLenByteArray(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setOpportunities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.ParameterMetaData getParameterMetaData()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.UpdateResults updateFirst(org.mongodb.morphia.query.Query,org.mongodb.morphia.query.UpdateOperations,boolean)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getUDTs(java.lang.String,java.lang.String,java.lang.String,int[])> -> _SINK_
<org.postgresql.core.ProtocolConnection: void sendQueryCancel()> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: boolean exists(org.mmbase.storage.util.Index)> -> _SINK_
<org.mmbase.module.database.MultiPool$ConnectionCloser: void start()> -> _SINK_
<javax.jdo.Query: void setOrdering(java.lang.String)> -> _SINK_
<java.sql.PreparedStatement: void setDate(int,java.sql.Date)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setPrepareThreshold(int)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void expr(antlr.collections.AST)> -> _SINK_
<com.sforce.soap.enterprise.sobject.BlogForce_Blog__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: java.sql.SQLWarning getWarnings()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addLimitConstraint(org.mmbase.bridge.NodeQuery,int,int)> -> _SINK_
<org.exolab.castor.jdo.drivers.PostgreSQLCallQuery: void close()> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: void testQuery_OffSet_Not0_RecordCount0()> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: boolean getReadOnly()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: void fetchFieldMetaData()> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeQuery: org.mmbase.bridge.NodeManager getNodeManager()> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: boolean hasReadOnly()> -> _SINK_
<gov.nih.nci.cagrid.cqlresultset.CQLQueryResults: gov.nih.nci.cagrid.cqlresultset.CQLAttributeResult[] getAttributeResult()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void clearBatch()> -> _SINK_
<java.sql.ResultSet: java.math.BigDecimal getBigDecimal(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateCharacterStream(int,java.io.Reader,int)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.Field,java.lang.Boolean)> -> _SINK_
<entities.dao.hibernate.DAOHibernateNestedTransaction: long queryCount(java.lang.String,java.lang.Object[])> -> _SINK_
<org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter$1: void <clinit>()> -> _SINK_
<org.mongodb.morphia.query.Shape$Center: void <init>(java.lang.String,org.mongodb.morphia.query.Shape$Point,double)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void sendBind(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,org.postgresql.core.v3.Portal,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Connection getConnection()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsResultSetType(int)> -> _SINK_
<org.castor.jdo.conf.Database: void setName(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlBaseParser: void queryRule()> -> _SINK_
<entities.dao.EntityLazyList: java.lang.Object get(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setNull(int,int,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.lang.Object getObject(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$BatchResultHandler: void handleResultRows(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)> -> _SINK_
<org.apache.ibatis.mapping.MappedStatement: org.apache.ibatis.mapping.SqlSource access$302(org.apache.ibatis.mapping.MappedStatement,org.apache.ibatis.mapping.SqlSource)> -> _SINK_
<org.hibernate.dialect.PostgreSQLDialect: java.lang.Class getNativeIdentifierGeneratorClass()> -> _SINK_
<org.hibernate.persister.collection.BasicCollectionPersister: java.lang.String generateDeleteRowString()> -> _SINK_
<java.sql.ResultSet: java.sql.Date getDate(int)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.DefaultConnectionTester: int statusOnException(java.sql.Connection,java.lang.Throwable,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: java.lang.String getKeyspace()> -> _SINK_
<org.hibernate.impl.StatelessSessionImpl: org.hibernate.ScrollableResults scroll(java.lang.String,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: void setResolvedType(int,int)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementType: boolean isMultiTable()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: void releaseSavepoint(java.sql.Savepoint)> -> _SINK_
<org.hibernate.persister.collection.CollectionPersister: java.lang.Object readIdentifier(java.sql.ResultSet,java.lang.String,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getSuperTypes(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.castor.jdo.util.JDOConfFactory: org.castor.jdo.conf.JdoConf createJdoConf(org.castor.jdo.conf.Database)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<org.quartz.impl.jdbcjobstore.SimpleSemaphore: boolean isLockOwner(java.sql.Connection,java.lang.String)> -> _SINK_
<org.hibernate.engine.QueryParameters: void <init>(org.hibernate.type.Type[],java.lang.Object[],java.util.Map,org.hibernate.engine.RowSelection,boolean,java.lang.String,java.lang.String,boolean,org.hibernate.transform.ResultTransformer)> -> _SINK_
<org.mmbase.module.builders.DayMarkers: boolean init()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageLookup: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.Query: org.hibernate.Query setComment(java.lang.String)> -> _SINK_
<test.gov.nih.nci.security.threadsafe.CSMAPIMySQLDeadLockTest: void addGroupRoleToProtectionGroup()> -> _SINK_
<gov.nih.nci.cananolab.service.publication.helper.PublicationServiceHelper: java.lang.String[] findSampleNamesByPublicationId(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setShort(java.lang.String,short)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: java.sql.Time convertToTime(java.sql.Timestamp,java.util.TimeZone)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void delete(org.mmbase.module.core.MMObjectNode)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: boolean getAutoCommit()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void checkClosed()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Ref getRef(int)> -> _SINK_
<org.apache.ibatis.type.BooleanTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.apache.ibatis.type.BaseTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: java.lang.String getTypeForAlias(java.lang.String)> -> _SINK_
<java.sql.ResultSet: boolean rowUpdated()> -> _SINK_
<org.postgresql.util.PGInterval: void setHours(int)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: int skipWhitespace(char[],int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setPoolable(boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerState(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Connection: void setHoldability(int)> -> _SINK_
<org.exolab.castor.jdo.drivers.PostgreSQLCallQuery: void execute(java.lang.Object,org.exolab.castor.mapping.AccessMode)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.sql.Blob makeBlob(long)> -> _SINK_
<org.postgresql.util.StreamWrapper: int getOffset()> -> _SINK_
<oracle.toplink.sessions.DatabaseSession: void logMessages()> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getSchemas()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: int getFetchSize()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: com.datastax.driver.core.Statement disableTracing()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: boolean calendarExists(java.sql.Connection,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setNull(java.lang.String,int,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Milestone__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.ast.tree.UnaryArithmeticNode: void setScalarColumnText(int)> -> _SINK_
<org.hibernate.exception.SQLExceptionConverter: org.hibernate.JDBCException convert(java.sql.SQLException,java.lang.String,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.List selectFiredTriggerRecordsByJob(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.impl.CharacterizationServiceLocalImpl: gov.nih.nci.cananolab.domain.common.Technique findTechniqueByType(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Date getDate(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void createTable(org.mmbase.module.core.MMObjectBuilder,java.util.List,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setDouble(int,double)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setBlob(int,java.sql.Blob)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsTransactions()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Blob getBlob(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.lang.String getString(int)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: int readFully(java.io.Reader,char[],int)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl$1: boolean includeSubclasses(java.lang.String)> -> _SINK_
<com.mysql.jdbc.util.BaseBugReport: void setUp()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateBlob(int,java.sql.Blob)> -> _SINK_
<org.hibernate.engine.QueryParameters: boolean isNaturalKeyLookup()> -> _SINK_
<org.mmbase.storage.search.implementation.database.ChainedSqlHandler: void appendConstraintToSql(java.lang.StringBuffer,org.mmbase.storage.search.Constraint,org.mmbase.storage.search.SearchQuery,boolean,boolean)> -> _SINK_
<org.postgresql.core.VisibleBufferedInputStream: void close()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void appendScalarSelectToken(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$1: void handleWarning(java.sql.SQLWarning)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.ArrayAssistant: java.lang.Class baseType()> -> _SINK_
<com.mysql.jdbc.Statement: long getLongUpdateCount()> -> _SINK_
<gov.nih.nci.logging.api.util.HibernateUtil: javax.sql.DataSource getDataSource(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void registerOutParameter(java.lang.String,int,int)> -> _SINK_
<org.hibernate.engine.query.QueryPlanCache: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Date getDate(java.lang.String,java.util.Calendar)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)> -> _SINK_
<org.castor.jdo.conf.DatabaseDescriptor$3: java.lang.Object newInstance(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getResultSetHoldability()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<org.exolab.castor.jdo.drivers.DerbyFactory: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<org.springframework.orm.jpa.vendor.Database: org.springframework.orm.jpa.vendor.Database[] values()> -> _SINK_
<org.postgresql.core.types.PGDouble: org.postgresql.core.types.PGType castToServerType(java.lang.Double,int)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.SDK4QueryProcessor: java.util.Set getPropertiesFromEtc()> -> _SINK_
<org.apache.ibatis.session.SqlSession: java.util.List selectList(java.lang.String,java.lang.Object)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.UpdateTagSupport: void <init>()> -> _SINK_
<org.hibernate.hql.ast.util.JoinProcessor: void processJoins(org.hibernate.hql.ast.tree.QueryNode,boolean)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.bridge.NodeQuery createRelatedNodeListQuery(org.mmbase.bridge.Node,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.mapping.Column: java.lang.Integer getSqlTypeCode()> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: void update(java.lang.Object)> -> _SINK_
<org.apache.ibatis.type.DateTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<org.hibernate.hql.ast.tree.QueryNode: void <clinit>()> -> _SINK_
<com.sforce.soap.enterprise.QueryResult: void setSize(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsSchemasInDataManipulation()> -> _SINK_
<org.hibernate.cfg.Configuration: java.lang.String[] generateSchemaUpdateScript(org.hibernate.dialect.Dialect,org.hibernate.tool.hbm2ddl.DatabaseMetadata)> -> _SINK_
<javax.jdo.PersistenceManager: javax.jdo.Query newQuery(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: com.mysql.jdbc.log.Log getLog()> -> _SINK_
<org.hibernate.type.CalendarDateType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void parseQuery()> -> _SINK_
<org.mmbase.cache.BetterStrategy: boolean checkSteps(org.mmbase.core.event.NodeEvent,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapSession: void close()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Lead: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Time getTime(int)> -> _SINK_
<org.mmbase.core.util.StorageConnector: java.util.List getNodes(java.util.Collection)> -> _SINK_
<org.postgresql.core.v3.CopyOutImpl: void handleCopydata(byte[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.lang.String replaceProcessing(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.lang.String getIsolationLevelName(int)> -> _SINK_
<org.springframework.orm.hibernate3.SessionFactoryUtils: org.hibernate.Session getSession(org.hibernate.SessionFactory,boolean)> -> _SINK_
<org.hibernate.mapping.Index: java.lang.String buildSqlDropIndexString(org.hibernate.dialect.Dialect,org.hibernate.mapping.Table,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateDate(java.lang.String,java.sql.Date)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void clearParameters()> -> _SINK_
<org.postgresql.core.UTF8Encoding: void checkByte(int,int,int)> -> _SINK_
<gov.nih.nci.security.dao.Queries: java.sql.PreparedStatement getQueryForAccessibleGroups(java.lang.String,java.lang.String,int,java.sql.Connection)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavERecSearches(com.endeca.navigation.ERecSearchList)> -> _SINK_
<org.springframework.jdbc.support.incrementer.MySQLMaxValueIncrementer: void afterPropertiesSet()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void pauseTrigger(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.copy.CopyManager: long copyOut(java.lang.String,java.io.OutputStream)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: int executeUpdate(java.lang.String,java.lang.String[])> -> _SINK_
<org.postgresql.core.v3.CompositeParameterList: int findSubParam(int)> -> _SINK_
<java.sql.PreparedStatement: void setAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<org.apache.ibatis.builder.xml.XMLStatementBuilder$ChooseHandler: org.apache.ibatis.builder.xml.dynamic.SqlNode getDefaultSqlNode(java.util.List)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlhour(java.util.List)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.UpdateResults update(org.mongodb.morphia.query.Query,org.mongodb.morphia.query.UpdateOperations,boolean,boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setBoolean(int,boolean)> -> _SINK_
<org.mmbase.module.database.MultiPoolHandler: org.mmbase.module.database.MultiPool get(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateShort(int,short)> -> _SINK_
<org.springframework.orm.toplink.LocalSessionFactory: void setDatabaseLogin(oracle.toplink.sessions.DatabaseSession,oracle.toplink.sessions.DatabaseLogin)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.Object getElementByIndex(java.io.Serializable,java.lang.Object,org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: org.postgresql.core.ParameterList createFastpathParameters(int)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: boolean useLower(org.mmbase.storage.search.FieldCompareConstraint)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: void setCursorName(java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsCatalogsInIndexDefinitions()> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder: void RIGHT_OUTER_JOIN(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: int getType()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getIdentifierQuoteString()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void moveToCurrentRow()> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: java.lang.String getParamTypeForList(org.exolab.castor.jdo.oql.ParseTreeNode)> -> _SINK_
<entities.dao.hibernate.DAOHibernateNestedTransactionSelectNew: long queryCount(java.lang.String,java.lang.Object[])> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: java.lang.String[] getTriggerGroupNames(java.sql.Connection,org.quartz.core.SchedulingContext)> -> _SINK_
<com.mysql.jdbc.log.Log4JLogger: void logTrace(java.lang.Object)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: com.datastax.driver.core.Statement enableTracing()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<org.apache.ibatis.executor.statement.StatementHandler: int update(java.sql.Statement)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setNull(int,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$CallableBatchResultHandler: void handleCommandStatus(java.lang.String,int,long)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Investor_Account__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.loader.Loader: java.util.List doQueryAndInitializeNonLazyCollections(org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters,boolean)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.LogicalOperator: gov.nih.nci.cagrid.cqlquery.LogicalOperator fromString(java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryResult: java.lang.Double getConsumedCapacityUnits()> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getSearchStringEscape()> -> _SINK_
<com.mchange.v2.c3p0.impl.DefaultConnectionTester: int statusOnException(java.sql.Connection,java.lang.Throwable)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getCatalogName(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: void detach()> -> _SINK_
<org.hibernate.sql.InsertSelect: org.hibernate.sql.InsertSelect setComment(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate$1ExecuteStatementCallback: java.lang.Object doInStatement(java.sql.Statement)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Timestamp getTimestamp(int)> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: void setOps(com.mongodb.DBObject)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.math.BigDecimal getBigDecimal(int)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String[] getProjectedColumnAliases()> -> _SINK_
<com.mysql.jdbc.Statement: void realClose(boolean,boolean)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean previous()> -> _SINK_
<org.springframework.orm.toplink.LocalSessionFactoryBean: org.springframework.dao.DataAccessException convertTopLinkAccessException(oracle.toplink.exceptions.TopLinkException)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodesFactory: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: void <init>(org.hibernate.mapping.PersistentClass,org.hibernate.cache.CacheConcurrencyStrategy,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElement: void setFetch(boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: com.datastax.driver.core.querybuilder.Update$Where where(com.datastax.driver.core.querybuilder.Clause)> -> _SINK_
<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setEntity(int,java.lang.Object)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: boolean isClosed()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: java.lang.String getSelect()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateClob(int,java.sql.Clob)> -> _SINK_
<com.mchange.v2.c3p0.stmt.DoubleMaxStatementCache: void addStatementToDeathmarches(java.lang.Object,java.sql.Connection)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$SelectionOrAlias: com.datastax.driver.core.querybuilder.Select$SelectionOrAlias column(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.Batcher: java.sql.ResultSet getResultSet(java.sql.PreparedStatement)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<org.apache.ibatis.executor.statement.SimpleStatementHandler: java.sql.Statement instantiateStatement(java.sql.Connection)> -> _SINK_
<test.gov.nih.nci.security.instancelevel.InstanceLevelSecurityTest: void testUnSecured()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String[] getSQLLazyUpdateStrings()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addEqualConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.Field,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Builder: void <init>(java.util.List)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Blob getBlob(int)> -> _SINK_
<org.hibernate.hql.ast.util.SyntheticAndFactory: void addWhereFragment(org.hibernate.sql.JoinFragment,java.lang.String,org.hibernate.hql.ast.tree.QueryNode,org.hibernate.hql.ast.tree.FromElement)> -> _SINK_
<org.apache.ibatis.executor.statement.CallableStatementHandler: java.util.List query(java.sql.Statement,org.apache.ibatis.session.ResultHandler)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setObject(int,java.lang.Object)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void newValue(antlr.collections.AST)> -> _SINK_
<org.hibernate.dialect.SAPDBDialect: org.hibernate.sql.JoinFragment createOuterJoinFragment()> -> _SINK_
<java.sql.ResultSet: java.sql.Timestamp getTimestamp(int)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.ParameterizedHqlQuery: java.util.List getParameters()> -> _SINK_
<org.hibernate.lob.SerializableClob: long length()> -> _SINK_
<org.hibernate.impl.StatelessSessionImpl: void managedClose()> -> _SINK_
<gov.nih.nci.system.query.cql.CQLLogicalOperator: void <init>(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean storesUpperCaseIdentifiers()> -> _SINK_
<com.mysql.jdbc.ResultSet: char getFirstCharOfQuery()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: int getDriverMinorVersion()> -> _SINK_
<java.sql.DatabaseMetaData: int getJDBCMinorVersion()> -> _SINK_
<org.mongodb.morphia.query.FilterOperator: org.mongodb.morphia.query.FilterOperator[] values()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateCharacterStream(java.lang.String,java.io.Reader)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(long,java.util.Map)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.Object getObject(java.lang.String)> -> _SINK_
<org.hibernate.transaction.JDBCTransaction: void rollbackAndResetAutoCommit()> -> _SINK_
<org.springframework.jdbc.core.StatementCallback: java.lang.Object doInStatement(java.sql.Statement)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getRoundRobinLoadBalance()> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: void addOuterJoin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setByte(int,byte)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<com.datastax.driver.core.RequestHandler: boolean query(com.datastax.driver.core.Host)> -> _SINK_
<org.mmbase.module.database.Naming: org.mmbase.module.database.MultiConnection getConnection(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void <init>(com.mysql.jdbc.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.module.builders.PropertiesProbe: void deleteProperties(int)> -> _SINK_
<org.springframework.jdbc.datasource.ConnectionHolder: void released()> -> _SINK_
<gov.nih.nci.system.applicationservice.WritableApplicationService: gov.nih.nci.system.query.SDKQueryResult executeQuery(gov.nih.nci.system.query.SDKQuery)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: float getFloat(int)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void fromTable(antlr.collections.AST)> -> _SINK_
<com.mchange.v1.db.sql.StatementUtils: void <clinit>()> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setBytes(java.lang.String,byte[])> -> _SINK_
<com.mysql.jdbc.ResultSet: long getLong(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseServerPreparedStmts(boolean)> -> _SINK_
<org.postgresql.core.v2.ProtocolConnectionImpl: void setEncoding(org.postgresql.core.Encoding)> -> _SINK_
<org.hibernate.dialect.function.SQLFunction: boolean hasArguments()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: int executeUpdate(java.lang.String)> -> _SINK_
<org.postgresql.core.TypeInfo: int getPrecision(int,int)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateInt(int,int)> -> _SINK_
<org.hibernate.criterion.SubqueryExpression: org.hibernate.type.Type[] getTypes()> -> _SINK_
<java.sql.PreparedStatement: java.sql.ParameterMetaData getParameterMetaData()> -> _SINK_
<com.endeca.navigation.analytics.ExprBinary: void validateSyntax()> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.sql.CallableStatement prepareCallableQueryStatement(java.lang.String,boolean,org.hibernate.ScrollMode)> -> _SINK_
<java.sql.ResultSet: void updateCharacterStream(int,java.io.Reader,int)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory: boolean supportsTransactions()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Clob getClob(int)> -> _SINK_
<com.mysql.jdbc.Connection: java.util.Timer getCancelTimer()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: int executeUpdate(java.lang.String,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: java.lang.String forceEncode(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getSQLStateType()> -> _SINK_
<java.sql.BatchUpdateException: void <init>(java.lang.String,java.lang.String,int,int[])> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: java.lang.String getServerName()> -> _SINK_
<com.sforce.soap.enterprise.sobject.PricebookEntry: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.mmbase.core.util.StorageConnector: java.util.List getNodes(org.mmbase.storage.search.SearchQuery,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setLong(java.lang.String,long)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.Trigger selectTrigger(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxConnections()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.DetachedCriteria getNanomaterialEntitySubquery(gov.nih.nci.cananolab.dto.particle.CompositionQueryBean,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: java.util.Map getEnabledFilters()> -> _SINK_
<org.hibernate.sql.ForUpdateFragment: void <init>(org.hibernate.dialect.Dialect,java.util.Map,java.util.Map)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: int getType()> -> _SINK_
<org.hibernate.sql.Select: org.hibernate.sql.Select setOuterJoins(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.MysqlSavepoint: void <init>()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Clob getClob(java.lang.String)> -> _SINK_
<org.hibernate.sql.Insert: org.hibernate.sql.Insert setComment(java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement: int getParameterIndexOffset()> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.BdtDataServiceHandle: java.util.Iterator query(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: void nextRecord()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setOpportunityHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setDimSearchNavDescriptors(com.endeca.navigation.DimValIdList)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection$ConnectionHandler: void close()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean jobExists(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.SqlReturnType: java.lang.Object getTypeValue(java.sql.CallableStatement,int,int,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: com.datastax.driver.core.querybuilder.Update$Assignments 'with'(com.datastax.driver.core.querybuilder.Assignment)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: java.lang.Object wrapCollection(java.lang.Object)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.ParameterizedHqlQuery: void <init>(java.lang.String,java.util.List)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxBinaryLiteralLength()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Report: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.security.dao.Queries: java.sql.PreparedStatement getQueryForObjectMap(java.lang.String,java.lang.String,java.lang.String,int,java.sql.Connection)> -> _SINK_
<org.exolab.castor.xml.descriptors.CoreDescriptors: void <clinit>()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: long getServerStatementId()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setNull(int,int)> -> _SINK_
<org.hibernate.engine.ActionQueue: void execute(org.hibernate.action.Executable)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Site: void setSiteDomains(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.criterion.Order: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: void createAliasCriteriaMap()> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: java.lang.Iterable fetch()> -> _SINK_
<gov.nih.nci.system.web.struts.action.Result: java.lang.String execute()> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils$Alias: java.lang.String access$400(com.datastax.driver.core.querybuilder.Utils$Alias)> -> _SINK_
<org.exolab.castor.jdo.drivers.InformixQueryExpression: java.util.Enumeration getFromTables()> -> _SINK_
<org.hibernate.event.def.DefaultFlushEntityEventListener: void dirtyCheck(org.hibernate.event.FlushEntityEvent)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementStore: void buildStatement()> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.Connection getConnection()> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: java.util.List getFields()> -> _SINK_
<com.mysql.jdbc.Field: java.lang.String getCollation()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Milestone__c: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<entities.dao.AbstractDAO: long queryCount(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: void clearWarnings()> -> _SINK_
<org.postgresql.core.v2.FastpathParameterList: void setBytea(int,byte[],int,int)> -> _SINK_
<org.hibernate.sql.SelectFragment: java.lang.String toFragmentString()> -> _SINK_
<org.postgresql.largeobject.LargeObjectManager: long createLO()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setParanoid(boolean)> -> _SINK_
<java.sql.CallableStatement: void setAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<org.hibernate.hql.ast.tree.QueryNode: org.hibernate.hql.ast.tree.OrderByClause getOrderByClause()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: void executeSQL(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean ownDeletesAreVisible(int)> -> _SINK_
<org.mmbase.storage.implementation.database.RelationalDatabaseStorageManager: void change(org.mmbase.module.core.MMObjectNode,org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setMaxRows(int)> -> _SINK_
<org.postgresql.core.VisibleBufferedInputStream: int read()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void moveToCurrentRow()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection: java.sql.Statement createProxyStatement(java.sql.Statement)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.BindMarker bindMarker()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setDouble(java.lang.String,double)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsTransactionIsolationLevel(int)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void functionCall(antlr.collections.AST)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: org.hibernate.engine.QueryParameters getQueryParameters(java.util.Map)> -> _SINK_
<org.mongodb.morphia.query.UpdateOperator: void <init>(java.lang.String,int,java.lang.String)> -> _SINK_
<util.reflection.ExceptionHelper: void printBatchUpdateException(java.sql.BatchUpdateException)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.Trigger[] selectTriggersForRecoveringJobs(java.sql.Connection)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: void addPersister(java.lang.String,java.util.Map,org.hibernate.persister.entity.SQLLoadable)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: boolean viewExists(org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Project_Snapshot__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void storeToRef(javax.naming.Reference)> -> _SINK_
<org.apache.ibatis.executor.statement.SimpleStatementHandler: void batch(java.sql.Statement)> -> _SINK_
<org.mmbase.storage.search.implementation.ModifiableQuery: int hashCode()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.lang.Object getObject(int,java.util.Map)> -> _SINK_
<org.hibernate.mapping.UniqueKey: java.lang.String sqlConstraintString(org.hibernate.dialect.Dialect)> -> _SINK_
<org.mmbase.module.database.Naming: java.sql.Connection getDirectConnection(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean ownUpdatesAreVisible(int)> -> _SINK_
<org.mmbase.storage.implementation.database.GenericDataSource: void <init>(org.mmbase.module.core.MMBase)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void registerParsedQuery(org.postgresql.core.v3.SimpleQuery,java.lang.String)> -> _SINK_
<org.hibernate.engine.QueryParameters: void <init>(org.hibernate.type.Type[],java.lang.Object[],java.util.Map,java.io.Serializable[])> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setClob(int,java.sql.Clob)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addEqualConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.String)> -> _SINK_
<org.acegisecurity.userdetails.jdbc.JdbcDaoImpl: void initMappingSqlQueries()> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.QueryImpl: java.lang.String addElement(java.lang.String,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2: void setEvents(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: org.mmbase.storage.search.implementation.BasicSortOrder addSortOrder(org.mmbase.storage.search.StepField)> -> _SINK_
<org.hibernate.persister.entity.SingleTableEntityPersister: void addDiscriminatorToInsert(org.hibernate.sql.Insert)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsDifferentTableCorrelationNames()> -> _SINK_
<org.hibernate.criterion.PropertySubqueryExpression: java.lang.String toLeftSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.castor.jdo.engine.SQLTypeInfos$TypeInfo: java.lang.Class access$100(org.castor.jdo.engine.SQLTypeInfos$TypeInfo)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: com.datastax.driver.core.querybuilder.Select orderBy(com.datastax.driver.core.querybuilder.Ordering[])> -> _SINK_
<javax.jdo.Query: java.lang.Object executeWithArray(java.lang.Object[])> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$Convertor: java.lang.Class access$100(org.castor.jdo.engine.SQLTypeConverters$Convertor)> -> _SINK_
<com.mysql.jdbc.CursorRowProvider: void setCurrentRow(int)> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: java.lang.String addFromCollection(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setShort(java.lang.String,short)> -> _SINK_
<com.mysql.jdbc.CharsetMapping: void <clinit>()> -> _SINK_
<org.hibernate.impl.SessionImpl: org.hibernate.ScrollableResults scroll(org.hibernate.impl.CriteriaImpl,org.hibernate.ScrollMode)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$92: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$7: void <init>(org.springframework.orm.ibatis.SqlMapClientTemplate,java.lang.String,java.lang.Object,java.lang.String)> -> _SINK_
<org.apache.taglibs.standard.tag.rt.sql.SetDataSourceTag: void <init>()> -> _SINK_
<org.postgresql.core.VisibleBufferedInputStream: boolean ensureBytes(int)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl hasThisOne(java.lang.Object)> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder: void RESET()> -> _SINK_
<com.mysql.jdbc.util.ReadAheadInputStream: void fill(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateClob(java.lang.String,java.sql.Clob)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: long getLong(java.lang.String)> -> _SINK_
<org.postgresql.Driver: java.lang.String getVersion()> -> _SINK_
<org.postgresql.geometric.PGcircle: void <init>(org.postgresql.geometric.PGpoint,double)> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getNavSortKey()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void checkClosed()> -> _SINK_
<org.postgresql.core.Logger: void info(java.lang.String,java.lang.Throwable)> -> _SINK_
<org.hibernate.jdbc.Batcher: void closeStatement(java.sql.PreparedStatement)> -> _SINK_
<java.sql.Connection: java.sql.Savepoint setSavepoint()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void clearParameters()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxProcedureNameLength()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Interview__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: int getResultSetHoldability()> -> _SINK_
<org.hibernate.loader.Loader: void checkVersion(int,org.hibernate.persister.entity.Loadable,java.io.Serializable,java.lang.Object,java.sql.ResultSet,org.hibernate.engine.SessionImplementor)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void assignGroupsToUser(java.lang.String,java.lang.String[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.io.Reader getCharacterStream(int)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: void query(java.lang.String,org.springframework.jdbc.core.RowCallbackHandler)> -> _SINK_
<gov.nih.nci.system.query.cql.CQLObject: gov.nih.nci.system.query.cql.CQLGroup getGroup()> -> _SINK_
<org.springframework.jdbc.core.SqlOutParameter: boolean isReturnTypeSupported()> -> _SINK_
<org.hibernate.hql.ast.HqlParser: void processMemberOf(antlr.Token,antlr.collections.AST,antlr.ASTPair)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert: com.datastax.driver.core.querybuilder.Insert$Options using(com.datastax.driver.core.querybuilder.Using)> -> _SINK_
<com.sforce.soap.enterprise.sobject.FiscalYearSettings: void setPeriods(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setNullNamePatternMatchesAll(boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setCaseContactRoles(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseFastIntParsing(boolean)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: void appendTimeZone(java.lang.StringBuffer,java.util.Calendar)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: java.nio.ByteBuffer getRoutingKey()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getIsInteractiveClient()> -> _SINK_
<com.mysql.jdbc.Clob: java.lang.String getSubString(long,int)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: void releaseSavepoint(java.sql.Savepoint)> -> _SINK_
<org.postgresql.largeobject.LargeObjectManager: org.postgresql.largeobject.LargeObject open(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: boolean wantsScrollableResultSet()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateArray(int,java.sql.Array)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setCreateDatabaseIfNotExist(boolean)> -> _SINK_
<org.hibernate.criterion.SQLCriterion: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.mmbase.bridge.util.TreeList$Branch: void <init>(org.mmbase.bridge.util.TreeList,org.mmbase.bridge.util.TreeList$Branch)> -> _SINK_
<com.mysql.jdbc.Field: void setConnection(com.mysql.jdbc.Connection)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.String replace(java.lang.String,char,java.lang.String)> -> _SINK_
<org.hibernate.mapping.Table: void validateColumns(org.hibernate.dialect.Dialect,org.hibernate.engine.Mapping,org.hibernate.tool.hbm2ddl.TableMetadata)> -> _SINK_
<org.apache.ibatis.session.SqlSession: int insert(java.lang.String,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.ResultSet getResultSet()> -> _SINK_
<org.postgresql.core.Parser: boolean isIdentifierContChar(char)> -> _SINK_
<org.postgresql.core.Field: void setSchemaName(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setRowId(int,java.sql.RowId)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: int getFetchSize()> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.CompositeConstraint createConstraint(org.mmbase.storage.search.Constraint,int,org.mmbase.storage.search.Constraint)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsGroupByUnrelated()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Connection getConnection()> -> _SINK_
<org.mmbase.bridge.Query: boolean isDistinct()> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSessionFactory: org.apache.ibatis.session.SqlSession openSession(java.sql.Connection)> -> _SINK_
<org.hibernate.engine.SessionImplementor: java.util.List listCustomQuery(org.hibernate.loader.custom.CustomQuery,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(long)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$7: void <init>(com.mysql.jdbc.DatabaseMetaData,com.mysql.jdbc.DatabaseMetaData$IteratorWithCleanup,java.lang.String,java.sql.Statement,java.util.ArrayList)> -> _SINK_
<org.hibernate.engine.ResultSetMappingDefinition: org.hibernate.engine.query.sql.NativeSQLQueryReturn[] getQueryReturns()> -> _SINK_
<org.exolab.castor.mapping.xml.FieldMapping: void setSql(org.exolab.castor.mapping.xml.Sql)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void setBoolean(java.sql.PreparedStatement,int,boolean)> -> _SINK_
<com.mysql.jdbc.MysqlParameterMetadata: int isNullable(int)> -> _SINK_
<org.hibernate.persister.collection.NamedQueryCollectionInitializer: void <init>(java.lang.String,org.hibernate.persister.collection.CollectionPersister)> -> _SINK_
<org.hibernate.loader.Loader: java.lang.Object loadSingleRow(java.sql.ResultSet,org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters,boolean)> -> _SINK_
<org.hibernate.hql.classic.ParserHelper: void parse(org.hibernate.hql.classic.Parser,java.lang.String,java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcTemplate: java.util.List queryForList(java.lang.String,java.lang.Object[])> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List executeByNamedParam(java.util.Map,java.util.Map)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: int getMaxRows()> -> _SINK_
<org.quartz.utils.PoolingConnectionProvider: void initialize(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addFeatures(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.Node,java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean othersUpdatesAreVisible(int)> -> _SINK_
<org.hibernate.usertype.UserType: int[] sqlTypes()> -> _SINK_
<org.springframework.jdbc.object.SqlUpdate: void checkRowsAffected(int)> -> _SINK_
<java.sql.Connection: int getTransactionIsolation()> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: org.postgresql.core.ParameterList copy()> -> _SINK_
<org.apache.ibatis.mapping.BoundSql: void setAdditionalParameter(java.lang.String,java.lang.Object)> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder nearSphere(double,double,double)> -> _SINK_
<com.endeca.navigation.analytics.QueryNode: void validateSyntax()> -> _SINK_
<com.endeca.navigation.analytics.AnalyticsQuery: com.endeca.navigation.analytics.AnalyticsQuery parseQuery(java.lang.String)> -> _SINK_
<java.sql.ResultSet: void updateByte(java.lang.String,byte)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$Convertor: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.util.GetGeneratedKeysHelper: java.sql.PreparedStatement prepareStatement(java.sql.Connection,java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.security.SecurityService: java.util.Map getAllUserRoles(java.lang.String)> -> _SINK_
<com.mysql.jdbc.RowData: void close()> -> _SINK_
<org.postgresql.util.Base64: byte[] encode3to4(byte[],int,int,byte[],int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: int[] executeBatch()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.util.Map opts(java.lang.String,java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Job_Application__c: void setTasks(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementFactory: org.hibernate.hql.ast.tree.FromElement createJoin(java.lang.String,java.lang.String,org.hibernate.engine.JoinSequence,org.hibernate.type.EntityType,boolean)> -> _SINK_
<org.mmbase.storage.search.implementation.database.ChainedSqlHandler: java.lang.String toSql(org.mmbase.storage.search.SearchQuery,org.mmbase.storage.search.implementation.database.SqlHandler)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Time getTime(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: void setQueryObject(com.mongodb.DBObject)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Milestone__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsIntegrityEnhancementFacility()> -> _SINK_
<org.hibernate.criterion.SimpleSubqueryExpression: org.hibernate.engine.TypedValue[] getTypedValues(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.hibernate.dialect.SQLServerDialect: int getAfterSelectInsertPoint(java.lang.String)> -> _SINK_
<oracle.toplink.sessions.DatabaseSession: void login()> -> _SINK_
<org.exolab.castor.jdo.drivers.PostgreSQLCallQuery: void <init>(java.lang.String,java.lang.Class[],java.lang.Class,java.lang.String[],int[])> -> _SINK_
<gov.nih.nci.cananolab.service.protocol.helper.ProtocolServiceHelper: gov.nih.nci.cananolab.domain.common.Protocol findProtocolBy(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getTreatUtilDateAsTimestamp()> -> _SINK_
<org.apache.commons.beanutils.ResultSetDynaClass: java.sql.ResultSet getResultSet()> -> _SINK_
<org.mmbase.module.database.MultiStatement: void <init>(org.mmbase.module.database.MultiConnection,java.sql.Statement)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: void setCounterOp(boolean)> -> _SINK_
<org.hibernate.cache.StandardQueryCacheFactory: org.hibernate.cache.QueryCache getQueryCache(java.lang.String,org.hibernate.cache.UpdateTimestampsCache,org.hibernate.cfg.Settings,java.util.Properties)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean ownInsertsAreVisible(int)> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfo: int getParameterType(int)> -> _SINK_
<com.mysql.jdbc.Buffer: void setByteBuffer(byte[])> -> _SINK_
<org.hibernate.sql.CaseFragment: java.lang.String toFragmentString()> -> _SINK_
<org.exolab.castor.persist.SQLRelationLoader: void deleteRelation(java.sql.Connection,org.exolab.castor.persist.spi.Identity)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getColumns(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsSavepoints()> -> _SINK_
<org.hibernate.collection.PersistentCollection: java.lang.Object readFrom(java.sql.ResultSet,org.hibernate.persister.collection.CollectionPersister,org.hibernate.loader.CollectionAliases,java.lang.Object)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl near(double,double,double)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void checkForCharsetMismatch()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean storesMixedCaseQuotedIdentifiers()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: java.lang.String getTableName(int)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Array getArray(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.DomainType: java.lang.String getJavaClassName()> -> _SINK_
<test.gov.nih.nci.security.instancelevel.InstanceLevelSecurityTest: void testAttributeLevelSecurityForUser()> -> _SINK_
<java.sql.SQLException: void <init>(java.lang.String,java.lang.String,int)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: boolean isFirst()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerGroupStateFromOtherStates(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert: java.lang.StringBuilder buildQueryString(java.util.List)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setNull(java.lang.String,int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.util.ServerController: java.lang.Process start()> -> _SINK_
<javax.jdo.Query: void declareParameters(java.lang.String)> -> _SINK_
<org.hibernate.type.MetaType: int[] sqlTypes(org.hibernate.engine.Mapping)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object execute(org.springframework.jdbc.core.ConnectionCallback)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: void handleWarnings(java.sql.SQLWarning)> -> _SINK_
<com.mysql.jdbc.StringUtils: int indexOf(byte[],char)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void selectExpr(antlr.collections.AST)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void clearBatch()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void registerOutParameter(int,int,java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String[] getPropertyAliases(java.lang.String,int)> -> _SINK_
<org.exolab.castor.jdo.JDO: void loadConfiguration(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: void closeStatement(java.sql.Statement)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0Defaults: java.lang.String preferredTestQuery()> -> _SINK_
<gov.nih.nci.system.query.cql.CQLLogicalOperator: java.lang.String getValue()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.LogicalOperator: void <init>(java.lang.String)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl$2: void handleWarning(java.sql.SQLWarning)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setCursorName(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.Trigger selectTrigger(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3DatabaseMetaData: int getDatabaseMajorVersion()> -> _SINK_
<org.postgresql.core.v3.ProtocolConnectionImpl: void setTransactionState(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: boolean isClosed()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object startsWith(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.drivers.InformixQueryExpression: java.util.Vector getOuterTables()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<com.mysql.jdbc.ExportControlled: void transformSocketToSSLSocket(com.mysql.jdbc.MysqlIO)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: boolean execute(java.lang.String,int[])> -> _SINK_
<org.hibernate.lob.SerializableBlob: java.sql.Blob getWrappedBlob()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Statement getStatement()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateNClob(java.lang.String,java.io.Reader)> -> _SINK_
<org.springframework.jdbc.core.support.SqlLobValue: void <init>(java.io.Reader,int,org.springframework.jdbc.support.lob.LobHandler)> -> _SINK_
<com.mysql.jdbc.SingleByteCharsetConverter: java.lang.String toString(byte[],int,int)> -> _SINK_
<org.exolab.castor.jdo.engine.SimpleQueryExecutor: org.exolab.castor.jdo.QueryResults execute(java.sql.Connection,org.exolab.castor.persist.spi.QueryExpression,java.lang.Object[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void commit()> -> _SINK_
<com.datastax.driver.core.exceptions.QueryValidationException: void <init>(java.lang.String)> -> _SINK_
<org.exolab.castor.xml.descriptors.SQLTimestampClassDescriptor: java.lang.Class getJavaClass()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getDriverName()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Candidate__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<java.sql.ResultSet: void updateString(int,java.lang.String)> -> _SINK_
<java.sql.ResultSet: java.net.URL getURL(java.lang.String)> -> _SINK_
<org.postgresql.core.types.PGByte: void <init>(java.lang.Byte)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: boolean isLast()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int insertJobDetail(java.sql.Connection,org.quartz.JobDetail)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$6: void forEach(java.lang.Object)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters: java.text.SimpleDateFormat getDefaultDateFormat()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.lang.Object getUUID(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElement: org.hibernate.persister.entity.Queryable getQueryable()> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter: void <init>(boolean)> -> _SINK_
<org.mongodb.morphia.query.Query: org.mongodb.morphia.query.Query useReadPreference(com.mongodb.ReadPreference)> -> _SINK_
<org.mmbase.module.database.JDBC: java.lang.String stripSensistive(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.ModifiableQuery: boolean equals(java.lang.Object)> -> _SINK_
<com.endeca.navigation.ENEQuery: long getNavAggrERecsOffset()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setFloat(java.lang.String,float)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23SimpleDataSource: void readObject(java.io.ObjectInputStream)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void clearWarnings()> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: boolean applyPropertyMappings(java.sql.ResultSet,org.apache.ibatis.mapping.ResultMap,java.util.List,org.apache.ibatis.reflection.MetaObject,org.apache.ibatis.executor.loader.ResultLoaderMap)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: int getFetchDirection()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void clearWarnings()> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate: java.lang.Object executeQuery(oracle.toplink.queryframework.DatabaseQuery,java.lang.Object[],boolean)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: org.mmbase.storage.search.Constraint copyConstraint(org.mmbase.storage.search.SearchQuery,org.mmbase.storage.search.Constraint)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl$OQLEnumeration: void <init>(org.exolab.castor.jdo.engine.OQLQueryImpl,org.exolab.castor.persist.QueryResults)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl endsWith(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.ConstructorNode: java.lang.reflect.Constructor resolveConstructor(java.lang.String)> -> _SINK_
<java.sql.BatchUpdateException: void <init>(java.lang.String,java.lang.String,int[])> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: void setNetworkTimeout(java.util.concurrent.Executor,int)> -> _SINK_
<org.hibernate.loader.collection.BasicCollectionJoinWalker: void initStatementString(java.lang.String,int,java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: org.mongodb.morphia.query.Query retrieveKnownFields()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ParameterMetaData: java.lang.String getParameterTypeName(int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4DatabaseMetaData: java.sql.ResultSet getFunctionColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.type.DbTimestampType: java.sql.Timestamp usePreparedStatement(java.lang.String,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: void moveRowRelative(int)> -> _SINK_
<org.castor.jdo.util.JDOConfFactory: org.castor.jdo.conf.Database createDatabase(java.lang.String,java.lang.String,org.castor.jdo.conf.DataSource,org.castor.jdo.conf.Mapping[])> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientFactoryBean: java.lang.Class getObjectType()> -> _SINK_
<org.hibernate.type.ComponentType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,boolean[],org.hibernate.engine.SessionImplementor)> -> _SINK_
<entities.annotations.Editor: java.lang.String namedQuery()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setEscapeProcessing(boolean)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void postProcessUpdate(antlr.collections.AST)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: void setLimit(java.lang.Integer)> -> _SINK_
<oracle.toplink.sessions.Session: java.util.Vector readAllObjects(java.lang.Class,oracle.toplink.queryframework.Call)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$8: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationServiceFacade: java.lang.Integer getQueryRowCount(java.lang.Object,java.lang.String)> -> _SINK_
<org.postgresql.ds.PGPooledConnection: javax.sql.ConnectionEvent createConnectionEvent(java.sql.SQLException)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSessionFactory: java.sql.Connection wrapConnection(java.sql.Connection)> -> _SINK_
<org.mongodb.morphia.dao.BasicDAO: java.lang.Object findOne(java.lang.String,java.lang.Object)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.CQL2HQL: gov.nih.nci.system.query.hibernate.HQLCriteria translate(gov.nih.nci.system.query.cql.CQLQuery,boolean,boolean)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryResult: java.lang.String toString()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseOldUTF8Behavior()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$40: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Clob getClob(int)> -> _SINK_
<org.mmbase.servlet.BridgeServlet$QueryParts: void setResponse(javax.servlet.http.HttpServletResponse)> -> _SINK_
<org.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint: void commence(javax.servlet.ServletRequest,javax.servlet.ServletResponse,org.acegisecurity.AuthenticationException)> -> _SINK_
<org.hibernate.type.ClobType: void setToXMLNode(org.dom4j.Node,java.lang.Object,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.castor.jdo.conf.DatabaseChoiceDescriptor$1: java.lang.Object getValue(java.lang.Object)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String getSQLInsertRowString()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int deletePausedTriggerGroup(java.sql.Connection,java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsSubqueriesInExists()> -> _SINK_
<org.hibernate.criterion.SizeExpression: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: java.lang.Object rawStatementOperation(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])> -> _SINK_
<org.mmbase.bridge.util.HugeNodeListIterator: void <init>(org.mmbase.bridge.Query,int)> -> _SINK_
<org.apache.commons.validator.UrlValidator: boolean isValidQuery(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: boolean exists(org.mmbase.storage.util.Index,java.lang.String)> -> _SINK_
<com.datastax.driver.core.exceptions.SyntaxError: void <init>(java.lang.String,java.lang.Throwable)> -> _SINK_
<org.mongodb.morphia.utils.Helper: com.mongodb.DBObject getFields(org.mongodb.morphia.query.Query)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean isReadOnly()> -> _SINK_
<com.mchange.v2.c3p0.DriverManagerDataSourceFactory: javax.sql.DataSource create(java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addEqualConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.Field,java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: org.hibernate.hql.ast.HqlParser parse(boolean)> -> _SINK_
<org.mmbase.bridge.util.TreeList: void sizeCheck()> -> _SINK_
<org.springframework.orm.jpa.JpaTransactionManager: void doBegin(java.lang.Object,org.springframework.transaction.TransactionDefinition)> -> _SINK_
<org.mmbase.module.database.JDBCProbe: void <init>(org.mmbase.module.database.JDBC)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: void setReadOnly(boolean)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void setFetchDirection(int)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: int hashCode()> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteria: java.lang.String getSourceName()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void addBatch(java.lang.String)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void <init>(com.mysql.jdbc.Connection,java.lang.String,java.lang.String,com.mysql.jdbc.PreparedStatement$ParseInfo)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: int getTypeOID(int)> -> _SINK_
<com.amazonaws.services.dynamodb.AmazonDynamoDBAsyncClient$3: java.lang.Object call()> -> _SINK_
<org.hibernate.sql.Update: org.hibernate.sql.Update addColumns(java.lang.String[],boolean[])> -> _SINK_
<org.mmbase.bridge.Query: void addNode(org.mmbase.storage.search.Step,org.mmbase.bridge.Node)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.ParameterizedHqlQuery: java.lang.String getHql()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2BlobClob$LOIterator: boolean hasNext()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXAConnection: void <init>(com.mysql.jdbc.Connection,boolean)> -> _SINK_
<org.springframework.jdbc.core.ColumnMapRowMapper: java.lang.Object getColumnValue(java.sql.ResultSet,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.String getCharacterSetResults()> -> _SINK_
<org.hibernate.type.BlobType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateCharacterStream(int,java.io.Reader)> -> _SINK_
<org.mongodb.morphia.query.QueryFactory: org.mongodb.morphia.query.Query createQuery(org.mongodb.morphia.Datastore,com.mongodb.DBCollection,java.lang.Class)> -> _SINK_
<org.postgresql.largeobject.LargeObjectManager: int create(int)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$9: void <init>(org.springframework.orm.ibatis.SqlMapClientTemplate,java.lang.String,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: int getFetchSize()> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: java.lang.String getStatement(boolean)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimestampLocaleConverter: void <init>(java.util.Locale,java.lang.String)> -> _SINK_
<org.springframework.jdbc.object.SqlCall: void onCompileInternal()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.sql.CallableStatement prepareCall(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.GenericDataSource: java.lang.String makeUrl()> -> _SINK_
<com.endeca.navigation.analytics.ExprAggregate: void validateSyntax()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Object: void <init>()> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$2: java.lang.Object getValue(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$IntegerConnectionProperty: boolean isRangeBased()> -> _SINK_
<com.mysql.jdbc.VersionedStringProperty: java.lang.String toString()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: boolean absolute(int)> -> _SINK_
<org.mmbase.util.LocalizedEntryListFactory: int size(org.mmbase.bridge.Cloud)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.sql.CallableStatement prepareBatchCallableStatement(java.lang.String)> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$4: void <init>(org.exolab.castor.mapping.xml.SqlDescriptor)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Location__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.StepField createStepField(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setBoolean(java.lang.String,boolean)> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxColumnNameLength()> -> _SINK_
<org.hibernate.sql.QuerySelect: org.hibernate.sql.QuerySelect copy()> -> _SINK_
<com.datastax.driver.core.Requests$QueryProtocolOptions$Flag: java.util.EnumSet deserialize(int)> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache: void removeStatement(java.lang.Object,boolean,com.mchange.v2.holders.ChangeNotifyingSynchronizedIntHolder)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void addEntityToFetch(java.lang.String,java.lang.String,org.hibernate.type.AssociationType)> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: void setFields(org.postgresql.core.Field[])> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsCatalogsInDataManipulation()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4PreparedStatement: void <init>(org.postgresql.jdbc4.Jdbc4Connection,java.lang.String,int,int,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.TestObj1__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean usesLocalFilePerTable()> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: void testQuery_OffSet_0_RecordCount_0()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.Disjunction getCharacterizationDisjunction(gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean,org.hibernate.criterion.DetachedCriteria,java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema: com.mysql.jdbc.PreparedStatement prepareMetaDataSafeStatement(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setObject(java.lang.String,java.lang.Object,int,int)> -> _SINK_
<java.sql.Date: void <init>(long)> -> _SINK_
<org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator: void setClobAsString(java.sql.PreparedStatement,int,java.lang.String)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$3: void <init>(org.postgresql.core.v3.QueryExecutorImpl,org.postgresql.core.ResultHandler,org.postgresql.core.v3.Portal)> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfo: void <init>(com.mysql.jdbc.CallableStatement,java.sql.ResultSet)> -> _SINK_
<com.mysql.jdbc.util.ReadAheadInputStream: void <init>(java.io.InputStream,int,boolean,com.mysql.jdbc.log.Log)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Ref getRef(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Blob: int setBytes(long,byte[])> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateFloat(int,float)> -> _SINK_
<org.postgresql.core.Encoding: org.postgresql.core.Encoding getDatabaseEncoding(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.dto.BaseQueryBean: java.lang.String getId()> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: gov.nih.nci.logging.api.applicationservice.SearchCriteria getSearchCriteriaThatGivesResults()> -> _SINK_
<gov.nih.nci.system.query.cql.CQLAssociation: java.lang.String getTargetRoleName()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: boolean execute(java.lang.String,java.lang.String[])> -> _SINK_
<org.postgresql.ssl.jdbc4.LazyKeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String selectFragment(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getCreateDatabaseIfNotExist()> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter: void <init>(java.lang.Object,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean isCatalogAtStart()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setTime(int,java.sql.Time)> -> _SINK_
<org.postgresql.ssl.jdbc4.LazyKeyManager: java.lang.String[] getClientAliases(java.lang.String,java.security.Principal[])> -> _SINK_
<org.mmbase.servlet.BridgeServlet$QueryParts: java.lang.String getNodeNumber()> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: org.hibernate.engine.query.QueryPlanCache getQueryPlanCache()> -> _SINK_
<org.exolab.castor.jdo.engine.JDOMappingLoader: org.exolab.castor.mapping.FieldDescriptor createFieldDesc(java.lang.Class,org.exolab.castor.mapping.xml.FieldMapping)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setCacheResultSetMetadata(boolean)> -> _SINK_
<org.hibernate.loader.custom.CustomLoader$Metadata: int resolveColumnPosition(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: void cancel()> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String[] getIndexColumnAliases(java.lang.String)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.SetDataSourceTagSupport: void init()> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String getWholeAssociationPath(org.hibernate.impl.CriteriaImpl$Subcriteria)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void clearParameters()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: void cancel()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.fault.ApiQueryFault: void setColumn(int)> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfo: com.mysql.jdbc.CallableStatement$CallableStatementParam getParameter(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setString(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser$ParameterSubstitutionRecognizer: void namedParameter(java.lang.String,int)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void aliasRef(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: boolean isDefinitelyWritable(int)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser$ParameterSubstitutionRecognizer: void jpaPositionalParameter(java.lang.String,int)> -> _SINK_
<org.postgresql.xa.jdbc4.AbstractJdbc4XADataSource: java.util.logging.Logger getParentLogger()> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.transform.QueryResultJsonUnmarshaller: com.amazonaws.services.dynamodbv2.model.transform.QueryResultJsonUnmarshaller getInstance()> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedResultSet: void <init>(java.util.Set)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Array getArray(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setNoTimezoneConversionForTimeType(boolean)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List queryForList(java.lang.String,java.lang.Object[],java.lang.Class)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Quote: void setQuoteLineItems(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.system.dao.orm.WritableORMDAOImpl$1: java.lang.Object doInHibernate(org.hibernate.Session)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setTimestamp(int,java.sql.Timestamp)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Location__c: void setOpenActivities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.apache.ibatis.executor.statement.StatementHandler: java.sql.Statement prepare(java.sql.Connection)> -> _SINK_
<org.exolab.castor.xml.descriptors.SQLTimestampClassDescriptor$1: java.lang.Object newInstance(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void cancel()> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateObject(java.lang.String,java.lang.Object)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setBytes(java.lang.String,byte[])> -> _SINK_
<org.postgresql.util.StreamWrapper: byte[] getBytes()> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser: java.lang.String substituteBrackets(java.lang.String)> -> _SINK_
<org.eclipse.ocl.ecore.OCL$Query: java.lang.Object evaluate()> -> _SINK_
<org.apache.ibatis.executor.parameter.ParameterHandler: void setParameters(java.sql.PreparedStatement)> -> _SINK_
<org.hibernate.loader.Loader: int bindPositionalParameters(java.sql.PreparedStatement,org.hibernate.engine.QueryParameters,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: org.mongodb.morphia.query.UpdateOperations removeLast(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.UserFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getTcpRcvBuf()> -> _SINK_
<com.mysql.jdbc.Blob: long length()> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.StringBuilder appendMap(java.util.Map,java.lang.StringBuilder,boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase: javax.sql.DataSource getNestedDataSource()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<java.sql.ResultSet: void updateBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.PreparedStatement prepareStatement(java.lang.String,int[])> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: boolean execute(java.lang.String,java.lang.String[])> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment setIdx(java.lang.String,int,java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedResultSet: void close()> -> _SINK_
<test.gov.nih.nci.security.dialect.MySQLPerformanceTest: void testInstanceLevelSecurityForUser()> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: org.mmbase.storage.search.implementation.BasicSearchQuery setDistinct(boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Site: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.endeca.navigation.ENEQueryInfo: void <init>(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: byte[] trimBytes(int,byte[])> -> _SINK_
<org.hibernate.criterion.AliasedProjection: org.hibernate.type.Type[] getTypes(java.lang.String,org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: void ping()> -> _SINK_
<org.hibernate.engine.query.ParamLocationRecognizer: java.util.List getOrdinalParameterLocationList()> -> _SINK_
<org.eclipse.acceleo.model.mtl.QueryInvocation: org.eclipse.emf.common.util.EList getArgument()> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.CallableStatement prepareCall(java.lang.String,int,int,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.lang.Object getObject(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: java.lang.String asSql(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxColumnsInOrderBy()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.SampleServiceHelper: java.util.List findSampleIdsByOwner(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setBoolean(int,boolean)> -> _SINK_
<org.hibernate.jdbc.Batcher: java.sql.PreparedStatement prepareQueryStatement(java.lang.String,boolean,org.hibernate.ScrollMode)> -> _SINK_
<com.mysql.jdbc.Field: java.lang.String getName()> -> _SINK_
<org.postgresql.core.TypeInfo: int getPGArrayElement(int)> -> _SINK_
<org.postgresql.largeobject.LargeObjectManager: org.postgresql.largeobject.LargeObject open(long,int,boolean)> -> _SINK_
<org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator: void setClobAsAsciiStream(java.sql.PreparedStatement,int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void clearWarnings()> -> _SINK_
<org.exolab.castor.jdo.QueryException: void <init>(java.lang.String)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: java.lang.String toSql()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setTime(int,java.sql.Time)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeDx(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: org.postgresql.largeobject.LargeObjectManager getLargeObjectAPI()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.Constraint addORConstraint(org.mmbase.bridge.Query,org.mmbase.storage.search.Constraint,org.mmbase.storage.search.Constraint)> -> _SINK_
<org.castor.persist.AbstractTransactionContext: java.sql.Connection getConnection(org.exolab.castor.persist.LockEngine)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Ref getRef(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLQuery: boolean absolute(int)> -> _SINK_
<org.apache.ibatis.mapping.SqlMapperException: void <init>(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$3: void handleWarning(java.sql.SQLWarning)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getDatabaseProductName()> -> _SINK_
<org.hibernate.sql.Insert: org.hibernate.sql.Insert addColumns(java.lang.String[],boolean[])> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void addTable(java.lang.String)> -> _SINK_
<org.apache.ibatis.jdbc.Null: void <clinit>()> -> _SINK_
<org.hibernate.sql.Sybase11JoinFragment: void addJoin(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],int)> -> _SINK_
<org.exolab.castor.dtx.DTXQuery: void bind(int,long)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxCatalogNameLength()> -> _SINK_
<com.mysql.jdbc.MiniAdmin: void <init>(java.sql.Connection)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator: void <init>(javax.sql.DataSource)> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeQuery: void <init>(org.mmbase.bridge.implementation.BasicNodeManager,org.mmbase.storage.search.implementation.NodeSearchQuery)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getAggrERecStructureExpr()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsBatchUpdates()> -> _SINK_
<com.mysql.jdbc.BlobFromLocator: byte[] getBytesInternal(java.sql.PreparedStatement,long,int)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.XmlEtxIndicesReader: java.lang.String getEtxindexTable(org.w3c.dom.Element)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getGatherPerfMetrics()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$31: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<org.hibernate.sql.QueryJoinFragment: void addJoin(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],int,java.lang.String)> -> _SINK_
<org.apache.ibatis.executor.SimpleExecutor: int doUpdate(org.apache.ibatis.mapping.MappedStatement,java.lang.Object)> -> _SINK_
<org.mongodb.morphia.query.AbstractCriteria: org.mongodb.morphia.query.CriteriaContainerImpl getAttachedTo()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.sql.Ref getRef(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.AttributeRestoringConnectionInvocationHandler: void setAutoCommit(boolean)> -> _SINK_
<org.mongodb.morphia.query.FilterOperator: boolean equals(java.lang.String)> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceUtils$ConnectionSynchronization: void <init>(org.springframework.jdbc.datasource.ConnectionHolder,javax.sql.DataSource)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addEqualConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.dialect.TimesTenDialect: void <init>()> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimeLocaleConverter: void <init>(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.Connection: com.mysql.jdbc.ServerPreparedStatement serverPrepare(java.lang.String)> -> _SINK_
<org.postgresql.util.Base64: java.lang.String encodeBytes(byte[])> -> _SINK_
<org.mongodb.morphia.query.Shape: org.mongodb.morphia.query.Shape center(org.mongodb.morphia.query.Shape$Point,double)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setClob(int,java.sql.Clob)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void clearWarnings()> -> _SINK_
<org.exolab.castor.xml.handlers.DateFieldHandler: void setUseSQLDate(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void addBatch()> -> _SINK_
<org.springframework.jdbc.support.lob.DefaultLobHandler: java.io.InputStream getClobAsAsciiStream(java.sql.ResultSet,int)> -> _SINK_
<java.sql.Statement: void setMaxFieldSize(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: int getColumnOID(int)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLQuery: java.lang.Object[] loadSQLIdentity()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: boolean isLast()> -> _SINK_
<com.mysql.jdbc.CompressedInputStream: void getNextPacketIfRequired(int)> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceTransactionManager: void doCleanupAfterCompletion(java.lang.Object)> -> _SINK_
<org.springframework.jdbc.core.DisposableSqlTypeValue: void cleanup()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXAConnection: javax.transaction.xa.Xid[] recover(int)> -> _SINK_
<org.mmbase.bridge.Query: boolean isAggregating()> -> _SINK_
<com.mysql.jdbc.ResultSet: float getFloatFromString(java.lang.String,int)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: org.hibernate.persister.entity.PropertyMapping getPropertyMapping(java.lang.String)> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: void flushCopy()> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: java.util.List toDBObjList(org.mongodb.morphia.mapping.MappedField,java.util.List)> -> _SINK_
<java.sql.DatabaseMetaData: boolean othersDeletesAreVisible(int)> -> _SINK_
<org.postgresql.Driver: java.util.Properties loadDefaultProperties()> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache: void closeAll(java.sql.Connection)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$43: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setAccountContactRoles(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsSchemasInTableDefinitions()> -> _SINK_
<org.mmbase.module.database.MultiStatement: int getResultSetConcurrency()> -> _SINK_
<com.mysql.jdbc.ResultSet: int getNativeInt(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.TaskJunction__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.system.query.cql.CQLGroup: java.util.Collection getAssociationCollection()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateBlob(int,java.io.InputStream,long)> -> _SINK_
<org.mmbase.util.ParseItem: java.lang.String toString()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseJDBCCompliantTimezoneShift(boolean)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.SDK4QueryProcessor: boolean useLocalApplicationService()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.SDK4QueryProcessor: gov.nih.nci.system.applicationservice.ApplicationService getApplicationService()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void assignUserToGroup(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.sql.Template: boolean isFunctionOrKeyword(java.lang.String,java.lang.String,org.hibernate.dialect.Dialect,org.hibernate.dialect.function.SQLFunctionRegistry)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory: void load()> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: int getFieldCount()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: int executeUpdate(java.lang.String,java.lang.String[])> -> _SINK_
<com.mysql.jdbc.StringUtils: java.lang.String fixDecimalExponent(java.lang.String)> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteria: boolean isTargetCollection()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void markInactiveMetaDataResultSet(java.sql.ResultSet)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setRequireSSL(boolean)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: org.mongodb.morphia.query.FilterOperator translate(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.CompositionServiceHelper: gov.nih.nci.cananolab.domain.particle.Function findFunctionById(java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParam: void <init>(com.mysql.jdbc.CallableStatement,java.lang.String,int,boolean,boolean,int,java.lang.String,int,int,short,int)> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfo: void <init>(com.mysql.jdbc.CallableStatement,com.mysql.jdbc.CallableStatement$CallableStatementParamInfo)> -> _SINK_
<com.sforce.soap.enterprise.sobject.PricebookEntry: void setQuoteLineItems(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.orm.jpa.vendor.TopLinkJpaVendorAdapter: java.util.Map getJpaPropertyMap()> -> _SINK_
<org.postgresql.core.v3.CompositeQuery: void <init>(org.postgresql.core.v3.SimpleQuery[],int[])> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: void <init>(java.lang.String,org.hibernate.FlushMode,org.hibernate.engine.SessionImplementor,org.hibernate.engine.query.ParameterMetadata)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: void testQuery_MaxSize_WithResults()> -> _SINK_
<org.postgresql.core.Field: int getFormat()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: int executeUpdate(java.lang.String)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: java.util.Map access$300(org.hibernate.loader.custom.sql.SQLQueryReturnProcessor)> -> _SINK_
<org.hibernate.engine.QueryParameters: java.lang.Object[] getPositionalParameterValues()> -> _SINK_
<org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter: boolean isShowSql()> -> _SINK_
<com.amazonaws.services.datapipeline.model.Query: void setSelectors(java.util.Collection)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet$CursorResultHandler: void handleError(java.sql.SQLException)> -> _SINK_
<org.hibernate.engine.query.ParameterMetadata: int getOrdinalParameterCount()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: double getDouble(int)> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: long endCopy()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsOuterJoins()> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.CharacterizationQueryBean: java.lang.String getDatumValueUnit()> -> _SINK_
<org.hibernate.hql.ast.tree.FromElement: java.lang.String getTableName()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setClob(java.lang.String,java.io.Reader)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position__c: void setR00N30000002XxUbEAK__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean: java.util.List getQueryAsColumnNames()> -> _SINK_
<com.mysql.jdbc.CursorRowProvider: java.lang.Object[] getAt(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setCapitalizeTypeNames(boolean)> -> _SINK_
<com.mysql.jdbc.CompressedInputStream: int read(byte[])> -> _SINK_
<java.sql.Blob: byte[] getBytes(long,int)> -> _SINK_
<org.postgresql.geometric.PGbox: void setValue(java.lang.String)> -> _SINK_
<org.hibernate.criterion.IdentifierProjection: org.hibernate.type.Type[] getTypes(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.hibernate.collection.PersistentMap: java.lang.Object readFrom(java.sql.ResultSet,org.hibernate.persister.collection.CollectionPersister,org.hibernate.loader.CollectionAliases,java.lang.Object)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimeLocaleConverter: void <init>(java.lang.Object,java.util.Locale)> -> _SINK_
<org.exolab.castor.persist.ClassMolder: void <init>(org.exolab.castor.persist.DatingService,org.exolab.castor.mapping.loader.AbstractMappingLoader,org.exolab.castor.persist.LockEngine,org.exolab.castor.mapping.ClassDescriptor,org.exolab.castor.persist.spi.Persistence)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateAccessor: org.springframework.dao.DataAccessException convertJdbcAccessException(org.hibernate.JDBCException,org.springframework.jdbc.support.SQLExceptionTranslator)> -> _SINK_
<org.mmbase.module.core.MMTable: int count(java.lang.String)> -> _SINK_
<org.springframework.orm.jdo.PersistenceManagerFactoryUtils: void applyTransactionTimeout(javax.jdo.Query,javax.jdo.PersistenceManagerFactory,org.springframework.orm.jdo.JdoDialect)> -> _SINK_
<java.sql.CallableStatement: void setObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: java.lang.String addFromAssociation(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getDriverName()> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: void appendStringIfValid(java.lang.Object,java.lang.StringBuilder,boolean)> -> _SINK_
<org.springframework.jdbc.core.SqlOutParameter: void <init>(java.lang.String,int,java.lang.String)> -> _SINK_
<org.hibernate.jdbc.Batcher: void closeQueryStatement(java.sql.PreparedStatement,java.sql.ResultSet)> -> _SINK_
<com.mysql.jdbc.TimeUtil: java.lang.String timeFormattedString(int,int,int)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void reclaimLargeSharedSendPacket()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Site: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: java.sql.SQLXML createSQLXML()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsMultipleOpenResults()> -> _SINK_
<org.apache.ibatis.logging.jdbc.ResultSetLogger: void printColumnHeaders(java.sql.ResultSetMetaData,int)> -> _SINK_
<com.ibatis.sqlmap.engine.transaction.TransactionManager: void <init>(com.ibatis.sqlmap.engine.transaction.TransactionConfig)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getExplainSlowQueries()> -> _SINK_
<org.apache.commons.beanutils.converters.SqlTimestampConverter: void <init>()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.Map queryForMap(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxCursorNameLength()> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getNumericFunctions()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlPooledConnection: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.context.ThreadLocalSessionContext: void cleanupAnyOrphanedSession(org.hibernate.SessionFactory)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void close()> -> _SINK_
<org.mongodb.morphia.dao.BasicDAO: com.mongodb.WriteResult deleteByQuery(org.mongodb.morphia.query.Query)> -> _SINK_
<org.hibernate.impl.AbstractSessionImpl: org.hibernate.engine.query.HQLQueryPlan getHQLQueryPlan(java.lang.String,boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Log__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion le(java.lang.Object,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.springframework.jdbc.support.lob.OracleLobHandler: java.lang.String getClobAsString(java.sql.ResultSet,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateString(java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: java.lang.Object getObjectByPrimaryKey(java.lang.Class,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<java.sql.ResultSet: void updateObject(int,java.lang.Object)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: org.hibernate.sql.SelectFragment generateSelectFragment(java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.sql.SQLWarning getWarnings()> -> _SINK_
<org.hibernate.engine.SessionImplementor: int executeUpdate(java.lang.String,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.TrimSqlNode: boolean apply(org.apache.ibatis.builder.xml.dynamic.DynamicContext)> -> _SINK_
<org.springframework.jdbc.support.JdbcUtils: void closeResultSet(java.sql.ResultSet)> -> _SINK_
<org.hibernate.exception.JDBCExceptionHelper: java.lang.String extractSqlState(java.sql.SQLException)> -> _SINK_
<com.mchange.v2.c3p0.stmt.StatementCacheBenchmark: void create(javax.sql.DataSource)> -> _SINK_
<com.mchange.v2.c3p0.impl.SnatchFromSetResultSet: void close()> -> _SINK_
<com.endeca.navigation.analytics.OrderBy: java.lang.String toWire()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.io.File checkFile(java.io.File,org.mmbase.module.core.MMObjectNode,org.mmbase.core.CoreField)> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache: void refreshStatement(java.sql.PreparedStatement)> -> _SINK_
<com.sforce.soap.enterprise.sobject.SiteFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateSQLXML(int,java.sql.SQLXML)> -> _SINK_
<org.hibernate.hql.ast.tree.ParameterNode: void <init>()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageLookup: java.lang.String getMetaURL(java.lang.Class)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: void <init>(com.datastax.driver.core.querybuilder.Select)> -> _SINK_
<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.Buffer getSharedSendPacket()> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.sql.Statement createStatement(int,int)> -> _SINK_
<org.hibernate.criterion.CriteriaQuery: java.lang.String getColumn(org.hibernate.Criteria,java.lang.String)> -> _SINK_
<org.postgresql.core.Parser: boolean charTerminatesIdentifier(char)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Blob getBlob(int)> -> _SINK_
<com.mchange.v2.c3p0.util.ConnectionEventSupport: void fireConnectionErrorOccurred(java.sql.SQLException)> -> _SINK_
<org.apache.ibatis.executor.statement.BaseStatementHandler: void setStatementTimeout(java.sql.Statement)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Date getDate(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contract: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.CompositionQueryBean: java.lang.String getDisplayName()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void assignToProtectionGroups(java.lang.String,java.lang.String[])> -> _SINK_
<com.mchange.v2.c3p0.PoolConfig: java.lang.String getPreferredTestQuery()> -> _SINK_
<org.apache.ibatis.type.SqlTimeTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.apache.ibatis.type.StringTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<org.postgresql.core.types.PGNumber: org.postgresql.core.types.PGType castToServerType(java.lang.Number,int)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setInt(java.lang.String,int)> -> _SINK_
<java.sql.ResultSet: void updateAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Clob: void <init>(org.postgresql.core.BaseConnection,long)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeDr(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void realClose(boolean)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: void closeConnection(java.sql.Connection)> -> _SINK_
<com.endeca.navigation.ENEQueryException: void <init>()> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: java.util.List access$000(com.datastax.driver.core.querybuilder.Insert$Options)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: java.nio.ByteBuffer getRoutingKey()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4SQLXML: void initialize()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: boolean isWrapperFor(java.lang.Class)> -> _SINK_
<com.endeca.navigation.analytics.GroupBy: java.lang.String toString()> -> _SINK_
<org.hibernate.type.ComponentType: int[] sqlTypes(org.hibernate.engine.Mapping)> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression: void setHashKeyValues(java.lang.Object)> -> _SINK_
<com.amazonaws.services.dynamodb.model.transform.QueryRequestMarshaller: com.amazonaws.Request marshall(com.amazonaws.services.dynamodb.model.QueryRequest)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void lock(java.lang.Object)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: com.datastax.driver.core.policies.RetryPolicy getRetryPolicy()> -> _SINK_
<org.hibernate.criterion.SQLCriterion: void <init>(java.lang.String,java.lang.Object[],org.hibernate.type.Type[])> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapExecutor: java.util.Map queryForMap(java.lang.String,java.lang.Object,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.sql.PreparedStatement prepareStatement(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Timestamp getTimestamp(int)> -> _SINK_
<org.exolab.castor.jdo.JDO: void loadConfiguration(java.lang.String,java.lang.ClassLoader)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: void checkClosed()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeQueryID(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.namedparam.ParsedSql: int getUnnamedParameterCount()> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: void deleteTransient()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.lang.Object getObject(int,java.util.Map)> -> _SINK_
<org.postgresql.PGConnection: org.postgresql.copy.CopyManager getCopyAPI()> -> _SINK_
<com.mysql.jdbc.ResultSet: byte[] getBytes(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.DashboardComponent: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: int[] executeBatch()> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceUtils: void resetConnectionAfterTransaction(java.sql.Connection,java.lang.Integer)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean isDetached()> -> _SINK_
<com.amazonaws.services.dynamodb.AmazonDynamoDBClient: com.amazonaws.services.dynamodb.model.QueryResult query(com.amazonaws.services.dynamodb.model.QueryRequest)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.sql.PreparedStatement getPreparedStatement(java.sql.Connection,java.lang.String,boolean,org.hibernate.ScrollMode)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: void <init>(com.datastax.driver.core.querybuilder.Update)> -> _SINK_
<com.sforce.soap.enterprise.QueryResponse_element: void load(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: org.mongodb.morphia.query.Query where(java.lang.String)> -> _SINK_
<com.mysql.jdbc.NotUpdatable: void <clinit>()> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.validation.CQLQueryResultsValidator: void parseWSDL()> -> _SINK_
<org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.type.TimestampType: java.lang.Object fromStringValue(java.lang.String)> -> _SINK_
<org.hibernate.engine.query.ReturnMetadata: java.lang.String[] getReturnAliases()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DBSemaphore: void <init>(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Milestone__c: void setProject_Tasks__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Quote: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.CQLQuery: gov.nih.nci.cagrid.cqlquery.Object getTarget()> -> _SINK_
<entities.dao.IDAO: java.util.List query(java.lang.String,int,int,java.lang.Object[])> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: java.lang.Object createResultObject(java.sql.ResultSet,org.apache.ibatis.mapping.ResultMap,org.apache.ibatis.executor.loader.ResultLoaderMap)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Time getTime(int,java.util.Calendar)> -> _SINK_
<org.exolab.castor.dtx.DTXQuery: void prepare(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean nullsAreSortedHigh()> -> _SINK_
<au.com.bytecode.opencsv.ResultSetHelperService: java.lang.String read(java.sql.Clob)> -> _SINK_
<org.hibernate.sql.QuerySelect: void setGroupByTokens(java.util.Iterator)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setCaseContactRoles(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$11: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseSSPSCompatibleTimezoneShift()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsSavepoints()> -> _SINK_
<com.amazonaws.auth.AWS3Signer: void sign(com.amazonaws.Request,com.amazonaws.auth.AWSCredentials)> -> _SINK_
<org.apache.ibatis.executor.statement.RoutingStatementHandler: void batch(java.sql.Statement)> -> _SINK_
<org.hibernate.loader.Loader: void loadCollectionBatch(org.hibernate.engine.SessionImplementor,java.io.Serializable[],org.hibernate.type.Type)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$11: java.lang.Object doInSqlMapClient(com.ibatis.sqlmap.client.SqlMapExecutor)> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSourceFactory: javax.sql.DataSource createReferenceable(javax.sql.DataSource,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.NewsFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.storage.implementation.database.RelationalDatabaseStorageManager: void create(org.mmbase.module.core.MMObjectNode,org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: void copySteps(org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.apache.ibatis.datasource.unpooled.UnpooledDataSource: void setLogWriter(java.io.PrintWriter)> -> _SINK_
<com.mysql.jdbc.Connection: void setTypeMap(java.util.Map)> -> _SINK_
<test.gov.nih.nci.security.hibernate.annotations.AtFilterAnnotationsTest: void mainCardsNonAnnotated()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Clob getClob(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.SqlParameter: java.lang.String getName()> -> _SINK_
<org.postgresql.Driver: void <init>()> -> _SINK_
<org.hibernate.type.TimeZoneType: java.lang.String objectToSQLString(java.lang.Object,org.hibernate.dialect.Dialect)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationService: java.util.List query(org.hibernate.criterion.DetachedCriteria,java.lang.String)> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteriaPath: java.lang.String getpathString()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Blob getBlob(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxTablesInSelect()> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl$AclObjectIdentityInsert: void <init>(org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl,javax.sql.DataSource)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setParameterList(java.lang.String,java.util.Collection)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void assignUsersToGroup(java.lang.String,java.lang.String[])> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateObject(java.lang.String,java.lang.Object)> -> _SINK_
<org.springframework.jdbc.object.SqlFunction: void <init>(javax.sql.DataSource,java.lang.String,int[])> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: int[] executeBatch()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Dashboard: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mysql.jdbc.Buffer: void writeInt(int)> -> _SINK_
<org.hibernate.persister.collection.QueryableCollection: java.lang.String[] getIndexColumnNames()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$13: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.CQL2HQL: boolean existInheritance(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setByte(java.lang.String,byte)> -> _SINK_
<com.mysql.jdbc.StringUtils: void <clinit>()> -> _SINK_
<org.postgresql.largeobject.LargeObjectManager: org.postgresql.largeobject.LargeObject open(long)> -> _SINK_
<org.mmbase.module.core.ClusterBuilder: org.mmbase.storage.search.implementation.BasicSearchQuery getMultiLevelSearchQuery(java.util.List,java.util.List,java.lang.String,java.util.List,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLIntegrityConstraintViolationException: void <init>(java.lang.String,java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: java.lang.Object[] getAt(int)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void collectionFunctionOrSubselect(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getTimeDateFunctions()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$5: void <init>(com.mysql.jdbc.DatabaseMetaData,com.mysql.jdbc.DatabaseMetaData$IteratorWithCleanup,java.lang.String,java.sql.Statement,java.util.ArrayList)> -> _SINK_
<org.apache.http.client.utils.URIUtils: java.net.URI resolveReferenceStartingWithQueryString(java.net.URI,java.net.URI)> -> _SINK_
<org.springframework.jdbc.object.SqlFunction: java.lang.Object runGeneric()> -> _SINK_
<org.mmbase.servlet.BridgeServlet: long getLastModified(javax.servlet.http.HttpServletRequest)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxStatements()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setBytes(int,byte[])> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseUltraDevWorkAround()> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientFactoryBean: com.ibatis.sqlmap.client.SqlMapClient buildSqlMapClient(org.springframework.core.io.Resource,java.util.Properties)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaLoader: java.util.Set getQuerySpaces()> -> _SINK_
<org.mmbase.storage.search.implementation.ModifiableQuery: org.mmbase.storage.search.Constraint getConstraint()> -> _SINK_
<com.mysql.jdbc.log.Log4JLogger: void logError(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: com.mysql.jdbc.DatabaseMetaData$LocalAndReferencedColumns parseTableStatusIntoLocalAndReferencedColumns(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.List query(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,org.springframework.jdbc.core.RowMapper)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Time getTime(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setActivityHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementCreate: void closeSeparateConnection(java.sql.Connection)> -> _SINK_
<org.mmbase.cache.QueryResultCache: void clear()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: java.sql.ResultSet getResultSet(long,int)> -> _SINK_
<com.mysql.jdbc.Connection: void pingInternal(boolean)> -> _SINK_
<org.hibernate.criterion.Restrictions: org.hibernate.criterion.Criterion sqlRestriction(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool: javax.sql.PooledConnection checkoutPooledConnection()> -> _SINK_
<com.sforce.soap.enterprise.sobject.BusinessHours: void setCases(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: long getCount(org.mongodb.morphia.query.Query)> -> _SINK_
<org.hibernate.sql.InFragment: java.lang.String toFragmentString()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setInitialTimeout(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contract: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$67: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.apache.ibatis.builder.xml.XMLConfigBuilder: void environmentsElement(org.apache.ibatis.parsing.XNode)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: double getDouble(java.lang.String)> -> _SINK_
<java.sql.CallableStatement: int getInt(int)> -> _SINK_
<org.apache.log4j.jdbc.JDBCAppender: java.sql.Connection getConnection()> -> _SINK_
<gov.nih.nci.cananolab.service.curation.impl.CurationServiceJDBCImpl: gov.nih.nci.cananolab.dto.common.DataReviewStatusBean findDataReviewStatusBeanByDataId(java.lang.String,gov.nih.nci.cananolab.service.security.SecurityService)> -> _SINK_
<entities.Repository: java.util.List get(java.lang.String,java.lang.Object[])> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: java.lang.String getNString(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setMaxFieldSize(int)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void negotiateSSLConnection(java.lang.String,java.lang.String,java.lang.String,int)> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxCatalogNameLength()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateBytes(java.lang.String,byte[])> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: boolean wasNull()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: float getFloat(int)> -> _SINK_
<org.springframework.jdbc.support.lob.LobCreator: void setClobAsAsciiStream(java.sql.PreparedStatement,int,java.io.InputStream,int)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$65: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void addBatch()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.io.InputStream getUnicodeStream(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Buffer: void clear()> -> _SINK_
<org.hibernate.type.ClobType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String,org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageLookup: org.xml.sax.InputSource getInputSource()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateNClob(java.lang.String,java.io.Reader)> -> _SINK_
<org.mmbase.servlet.BridgeServlet$QueryParts: javax.servlet.http.HttpServletRequest getRequest()> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSourceFactory: javax.sql.DataSource createReferenceable(javax.sql.DataSource,int,int,int,int,int,java.lang.String)> -> _SINK_
<org.postgresql.largeobject.LargeObjectManager: void delete(int)> -> _SINK_
<org.hibernate.engine.QueryParameters: java.lang.String getCacheRegion()> -> _SINK_
<java.sql.CallableStatement: void setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion propertyIn(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxColumnsInSelect()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setShares(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.StringUtils: int indexOfIgnoreCase(int,java.lang.String,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: byte getByte(int)> -> _SINK_
<org.hibernate.criterion.Criterion: org.hibernate.engine.TypedValue[] getTypedValues(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.hibernate.engine.ParameterBinder: int bindPositionalParameters(java.sql.PreparedStatement,java.lang.Object[],org.hibernate.type.Type[],int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$1ProxyStatement: void <init>(com.mchange.v2.c3p0.impl.C3P0PooledConnection,java.sql.Statement,java.sql.Statement,com.mchange.v2.c3p0.impl.C3P0PooledConnection$StatementProxyingSetManagedResultSet,java.util.Set,boolean,java.sql.Connection)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.SDK4QueryProcessor: gov.nih.nci.cagrid.cqlresultset.CQLQueryResults processQuery(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<org.hibernate.engine.QueryParameters: void <init>(org.hibernate.type.Type[],java.lang.Object[],java.lang.Object,java.lang.String,java.io.Serializable)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLQuery: void <clinit>()> -> _SINK_
<org.mmbase.bridge.Cloud: org.mmbase.bridge.NodeList getList(org.mmbase.bridge.Query)> -> _SINK_
<org.directwebremoting.servlet.ExceptionHandler: void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<com.datastax.driver.core.querybuilder.Clause$SimpleClause: boolean containsBindMarker()> -> _SINK_
<org.postgresql.xa.PGXADataSourceFactory: java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)> -> _SINK_
<com.mysql.jdbc.Field: java.lang.String getTableNameNoAliases()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean rowDeleted()> -> _SINK_
<com.mysql.jdbc.ResultSet: void createCalendarIfNeeded()> -> _SINK_
<org.postgresql.geometric.PGpolygon: boolean equals(java.lang.Object)> -> _SINK_
<org.hibernate.mapping.Join: java.lang.String getCustomSQLInsert()> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.Object readKey(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.io.InputStream getBinaryStream(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdRowLockSemaphore: void setSelectWithLockSQL(java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateDate(int,java.sql.Date)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void addDataType(java.lang.String,java.lang.Class)> -> _SINK_
<com.sforce.soap.enterprise.QueryAllResponse_element: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: java.lang.String getReturnConsumedCapacity()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: void clearBatch()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl$2: void <init>(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setDouble(int,double)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<org.postgresql.ds.jdbc4.AbstractJdbc4PoolingDataSource: java.lang.Object unwrap(java.lang.Class)> -> _SINK_
<org.jboss.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13: org.jboss.netty.channel.ChannelFuture handshake(org.jboss.netty.channel.Channel)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.sql.ParameterMetaData createParameterMetaData(org.postgresql.core.BaseConnection,int[])> -> _SINK_
<com.fasterxml.jackson.databind.ser.BasicSerializerFactory: void <clinit>()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: java.lang.Object getArray()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setDrc(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: int getColumnDisplaySize(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.DashboardFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mysql.jdbc.Blob: int setBytes(long,byte[],int,int)> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: void <init>(org.postgresql.PGConnection,java.lang.String,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CaseFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void <init>()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.DomainTypesInformationUtil: void <init>(gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.DomainTypesInformation)> -> _SINK_
<com.mysql.jdbc.Util: boolean interfaceExists(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void likeEscape(antlr.collections.AST)> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$ListSetIdxAssignment: boolean containsBindMarker()> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: org.mongodb.morphia.query.UpdateOperations unset(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: antlr.collections.AST createFromFilterElement(antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: java.lang.String getCollectionSubquery(java.util.Map)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Time getTime(int,java.util.Calendar)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: java.lang.String[] getNamedParameters()> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQuerySpecification: java.lang.String getQueryString()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: boolean wasNull()> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSourceFactory: javax.sql.DataSource create(javax.sql.DataSource,int,int,int,int,int,java.lang.String)> -> _SINK_
<org.springframework.jdbc.object.RdbmsOperation: void setQueryTimeout(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateRow()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateObject(int,java.lang.Object,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: void setMaxFieldSize(int)> -> _SINK_
<java.sql.ResultSet: void updateClob(java.lang.String,java.sql.Clob)> -> _SINK_
<org.hibernate.engine.query.ParamLocationRecognizer$NamedParameterDescription: void access$000(org.hibernate.engine.query.ParamLocationRecognizer$NamedParameterDescription,int)> -> _SINK_
<org.postgresql.core.PGStream: boolean hasMessagePending()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void verify(org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<org.apache.ibatis.executor.BaseExecutor: java.util.List doQuery(org.apache.ibatis.mapping.MappedStatement,java.lang.Object,org.apache.ibatis.session.RowBounds,org.apache.ibatis.session.ResultHandler)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setMaxRows(int)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ExpressionEvaluator: java.lang.Iterable evaluateIterable(java.lang.String,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: java.sql.SQLWarning getWarnings()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setUnicodeStream(int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.util.PGmoney: void <init>()> -> _SINK_
<com.mysql.jdbc.TimeUtil: java.sql.Time changeTimezone(com.mysql.jdbc.Connection,java.util.Calendar,java.util.Calendar,java.sql.Time,java.util.TimeZone,java.util.TimeZone,boolean)> -> _SINK_
<gov.nih.nci.system.client.proxy.ListProxy: void setMaxRecordsPerQuery(int)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.SortOrder addSortOrder(org.mmbase.storage.search.StepField,int,boolean)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSetMetaData: void <init>(org.postgresql.core.BaseConnection,org.postgresql.core.Field[])> -> _SINK_
<org.postgresql.util.PGInterval: void add(org.postgresql.util.PGInterval)> -> _SINK_
<org.postgresql.jdbc2.optional.PoolingDataSource: void <init>()> -> _SINK_
<org.hibernate.engine.query.HQLQueryPlan: void <init>(java.lang.String,boolean,java.util.Map,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<com.mysql.jdbc.Util: boolean isColdFusion()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsResultSetConcurrency(int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: boolean execute(java.lang.String,java.lang.String[])> -> _SINK_
<com.sforce.soap.enterprise.QueryMoreResponse_element: void write(javax.xml.namespace.QName,com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mysql.jdbc.ResultSet: byte getNativeByte(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setCharacterStream(int,java.io.Reader,int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: java.lang.Object createQueryObject(java.lang.Class)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: void query(java.lang.String,java.lang.Object[],org.springframework.jdbc.core.RowCallbackHandler)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.util.Map createFunctionMap()> -> _SINK_
<org.springframework.jdbc.core.SqlInOutParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.ResultSetExtractor)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void addBatch()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: short getShort(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.util.TestUtils: boolean isPhysicalConnectionForProxy(java.sql.Connection,com.mchange.v2.c3p0.C3P0ProxyConnection)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker$WithClauseVisitor: java.lang.String extractAppliedAlias(org.hibernate.hql.ast.tree.DotNode)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: java.sql.ResultSet executeQuery()> -> _SINK_
<com.mysql.jdbc.EscapeProcessorResult: void <init>()> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: void addFields(org.mmbase.storage.search.Step)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.io.Reader getCharacterStream(int)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addDatetimeConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.Field,long,long)> -> _SINK_
<org.springframework.jdbc.object.BatchSqlUpdate$1: int getBatchSize()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateValue(int,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$1ProxyPreparedStatement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: byte[] getBytes(int,boolean)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getCallableStatementCacheSize()> -> _SINK_
<org.mmbase.module.database.MultiStatement: java.sql.Connection getConnection()> -> _SINK_
<com.mysql.jdbc.ResultSet: void setFetchSize(int)> -> _SINK_
<org.apache.ibatis.executor.resultset.ResultSetHandler: void handleOutputParameters(java.sql.CallableStatement)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$IterateBlock: void doForAll()> -> _SINK_
<org.postgresql.geometric.PGpath: java.lang.String getValue()> -> _SINK_
<com.mysql.jdbc.Security: byte[] getBinaryPassword(int[],boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateFloat(int,float)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: boolean isManipulationStatement()> -> _SINK_
<com.mchange.v2.c3p0.util.ConnectionEventSupport: void fireConnectionClosed()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseCompression()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.sql.ResultSet createResultSet(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateLong(java.lang.String,long)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setDate(int,java.sql.Date,java.util.Calendar)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: int[] getNamedParameterLocations(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: void setHoldability(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.util.List selectStatefulJobsOfTriggerGroup(java.sql.Connection,java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl$JavaConstantConverter: void handleDotStructure(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.Buffer: void dumpNBytes(int,int)> -> _SINK_
<oracle.toplink.exceptions.DatabaseException: java.lang.Throwable getInternalException()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: java.sql.ResultSet getResultSet()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: double getDouble(int)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: void errorIfSelect()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setTime(int,java.sql.Time)> -> _SINK_
<org.hibernate.QueryException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.castor.jdo.conf.DatabaseDescriptor$2: java.lang.Object getValue(java.lang.Object)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2BlobClob: void checkFreed()> -> _SINK_
<gov.nih.nci.system.query.SDKQueryResult: java.util.Collection getCollectionResult()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean storesLowerCaseQuotedIdentifiers()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.DomainTypesInformationUtil: gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.DomainTypesInformation deserializeDomainTypesInformation(java.io.Reader)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$55: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: int getResultSetConcurrency()> -> _SINK_
<org.apache.ibatis.binding.MapperMethod: java.lang.Object executeForList(java.lang.Object[])> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setTimestamp(int,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsTableCorrelationNames()> -> _SINK_
<org.mmbase.bridge.util.GrowingTreeList: org.mmbase.bridge.NodeQuery getLeafTemplate()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlPooledConnection: void callListener(int,java.sql.SQLException)> -> _SINK_
<org.hibernate.mapping.PersistentClass: void prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect)> -> _SINK_
<org.postgresql.core.Logger: void debug(java.lang.String,java.lang.Throwable)> -> _SINK_
<test.gov.nih.nci.security.dialect.CSMMySQLInnoDBDialectTest: void testInstanceLevelSecurityForGroups()> -> _SINK_
<com.mysql.jdbc.Statement: boolean getMoreResults(int)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: void testEstimatedResultSize_NoResults()> -> _SINK_
<gov.nih.nci.cananolab.service.protocol.helper.ProtocolServiceHelper: java.util.List findProtocolsBy(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.SqlUtils: java.sql.SQLException toSQLException(java.lang.String,java.lang.Throwable)> -> _SINK_
<org.hibernate.engine.SessionImplementor: org.hibernate.ScrollableResults scroll(java.lang.String,org.hibernate.engine.QueryParameters)> -> _SINK_
<org.hibernate.type.ByteType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void addBatch()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$ConnectionProperty: void initializeFrom(java.util.Properties)> -> _SINK_
<org.hibernate.hql.ast.tree.SqlNode: void <init>()> -> _SINK_
<org.postgresql.jdbc3g.AbstractJdbc3gStatement: void <init>(org.postgresql.jdbc3.AbstractJdbc3Connection,java.lang.String,boolean,int,int,int)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryResult: com.amazonaws.services.dynamodbv2.model.QueryResult withItems(java.util.Map[])> -> _SINK_
<com.enhype.db.PostgresDB: java.sql.ResultSet execSelect(java.lang.String,int)> -> _SINK_
<org.exolab.castor.jdo.drivers.MultiRSCallQuery: void execute(java.lang.Object,org.exolab.castor.mapping.AccessMode)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Clob: java.lang.String getSubString(long,int)> -> _SINK_
<org.springframework.jdbc.object.SqlFunction: void <init>(javax.sql.DataSource,java.lang.String,int[],java.lang.Class)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: org.postgresql.PGNotification[] getNotifications()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateInt(int,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.String getZeroDateTimeBehavior()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$57: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLFieldInfo: java.lang.String[] getJoinFields()> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DriverTag: java.lang.String getDriverClassName()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateByte(java.lang.String,byte)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setArray(int,java.sql.Array)> -> _SINK_
<org.hibernate.dialect.function.SQLFunctionTemplate: void <init>(org.hibernate.type.Type,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseUltraDevWorkAround(boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setRef(int,java.sql.Ref)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setObject(int,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseJvmCharsetConverters()> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper: com.amazonaws.services.dynamodbv2.model.QueryRequest createQueryRequestFromExpression(java.lang.Class,com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression,com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig)> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeQuery: org.mmbase.storage.search.Step setNodeStep(org.mmbase.storage.search.Step)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: void setNanomaterialEntityAndCriteria(gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean,org.hibernate.criterion.DetachedCriteria,java.lang.String)> -> _SINK_
<org.postgresql.core.v3.CompositeQuery: java.lang.String toString()> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: boolean containsCollectionFetches()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: java.util.List findFunctionalizingEntitiesBy(java.lang.String,gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean)> -> _SINK_
<org.mmbase.cache.BetterStrategy: boolean doEvaluate(org.mmbase.core.event.NodeEvent,org.mmbase.storage.search.SearchQuery,java.util.List)> -> _SINK_
<org.springframework.web.util.UrlPathHelper: java.lang.String getOriginatingQueryString(javax.servlet.http.HttpServletRequest)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: javax.naming.Reference getReference()> -> _SINK_
<org.mmbase.bridge.util.Queries: org.mmbase.storage.search.Constraint createConstraint(org.mmbase.bridge.Query,java.lang.String,int,java.lang.Object)> -> _SINK_
<org.castor.jdo.conf.DatabaseDescriptor$3: java.lang.Object getValue(java.lang.Object)> -> _SINK_
<org.springframework.jdbc.object.SqlUpdate: void <init>(javax.sql.DataSource,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: void clearWarnings()> -> _SINK_
<java.sql.ResultSet: java.io.InputStream getAsciiStream(int)> -> _SINK_
<org.apache.http.client.utils.URIBuilder: java.util.List parseQuery(java.lang.String,java.nio.charset.Charset)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean: java.lang.Boolean getHasDatum()> -> _SINK_
<org.hibernate.dialect.MySQLDialect: void registerVarcharTypes()> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.transform.QueryResultJsonUnmarshaller: java.lang.Object unmarshall(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.String getSessionVariables()> -> _SINK_
<javax.servlet.http.HttpServletRequest: java.lang.String getQueryString()> -> _SINK_
<org.hibernate.impl.SessionImpl: java.sql.Connection connection()> -> _SINK_
<org.mmbase.cache.BasicReleaseStrategy: boolean doEvaluate(org.mmbase.core.event.NodeEvent,org.mmbase.storage.search.SearchQuery,java.util.List)> -> _SINK_
<org.exolab.castor.xml.descriptors.SQLTimestampClassDescriptor$1: void <init>(org.exolab.castor.xml.descriptors.SQLTimestampClassDescriptor)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: void setNull(int,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.lang.String getString(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Time getTime(java.lang.String,java.util.Calendar)> -> _SINK_
<com.sforce.soap.enterprise.sobject.SiteFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setLogXaCommands(boolean)> -> _SINK_
<org.exolab.castor.jdo.oql.Parser: org.exolab.castor.jdo.oql.ParseTreeNode limitClause()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseLocalSessionState(boolean)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseOnlyServerErrorMessages(boolean)> -> _SINK_
<org.hibernate.hql.ast.exec.AbstractStatementExecutor: void createTemporaryTableIfNecessary(org.hibernate.persister.entity.Queryable,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateCharacterStream(java.lang.String,java.io.Reader,long)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema: java.sql.ResultSet executeMetadataQuery(com.mysql.jdbc.PreparedStatement)> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper: void processKeyConditions(java.lang.Class,com.amazonaws.services.dynamodbv2.model.QueryRequest,java.util.Map,java.util.Map)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.CompositionServiceHelper: gov.nih.nci.cananolab.domain.particle.NanomaterialEntity findNanomaterialEntityById(java.lang.String)> -> _SINK_
<org.apache.ibatis.type.SqlDateTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<com.sforce.soap.enterprise.sobject.SiteFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<java.sql.DatabaseMetaData: boolean nullPlusNonNullIsNull()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void delete(org.mmbase.module.core.MMObjectNode,org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase: void <init>()> -> _SINK_
<org.apache.ibatis.jdbc.SqlRunner: void closeConnection()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxColumnsInGroupBy()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Clause gt(java.lang.String,java.lang.Object)> -> _SINK_
<org.castor.jdo.conf.JdoConfDescriptor$2: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<oracle.toplink.sessions.DatabaseSession: oracle.toplink.sessions.DatabaseLogin getLogin()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.util.List getResultList(java.util.List,org.hibernate.transform.ResultTransformer)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getCacheResultSetMetadata()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: int getResultSetHoldability()> -> _SINK_
<org.hibernate.dialect.SAPDBDialect: org.hibernate.sql.CaseFragment createCaseFragment()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean storesLowerCaseIdentifiers()> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getCatalogs()> -> _SINK_
<org.springframework.orm.ibatis.support.AbstractLobTypeHandler: void setParameter(java.sql.PreparedStatement,int,java.lang.Object,java.lang.String)> -> _SINK_
<org.mmbase.core.util.StorageConnector: int count(org.mmbase.storage.search.SearchQuery)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: short getShort(int)> -> _SINK_
<java.sql.Statement: void setQueryTimeout(int)> -> _SINK_
<org.springframework.jdbc.datasource.DelegatingDataSource: void <init>(javax.sql.DataSource)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateBlob(int,java.io.InputStream,long)> -> _SINK_
<org.postgresql.core.Logger: void debug(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.io.InputStream getBinaryStream(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Blob getBlob(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.SqlInOutParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.RowMapper)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Association: int hashCode()> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTransactionManager: void doBegin(java.lang.Object,org.springframework.transaction.TransactionDefinition)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.sql.Date getDate(int,java.util.Calendar)> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: org.mmbase.bridge.util.xml.query.QueryDefinition parseQuery(org.w3c.dom.Element,org.mmbase.bridge.util.xml.query.QueryConfigurer,org.mmbase.bridge.Cloud,java.lang.String)> -> _SINK_
<org.hibernate.criterion.NullExpression: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<java.sql.DatabaseMetaData: int getSQLStateType()> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: java.lang.Object clone()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: boolean rowUpdated()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: java.util.Map getNamedParams()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: boolean isInSelect()> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringDecoder: void <init>(java.net.URI,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseHostsInPrivileges()> -> _SINK_
<org.hibernate.hql.ast.tree.IdentNode: int resolveAsNakedPropertyRef()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: boolean isClosed()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object execute(org.springframework.jdbc.core.PreparedStatementCreator,org.springframework.jdbc.core.PreparedStatementCallback)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: int toInt(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.sql.PreparedStatement prepareStatement(java.lang.String,boolean)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setBytes(int,byte[])> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsPositionedUpdate()> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: int getDisplaySize(int,int)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.sql.PreparedStatement prepareStatement(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore: java.lang.String getUpdateLockRowSQL()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<com.mysql.jdbc.MysqlSavepoint: int getSavepointId()> -> _SINK_
<org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler: org.apache.ibatis.mapping.ParameterMapping buildParameterMapping(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: org.mongodb.morphia.query.UpdateOperations removeAll(java.lang.String,java.lang.Object)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Predicate: gov.nih.nci.cagrid.cqlquery.Predicate fromValue(java.lang.String)> -> _SINK_
<org.hibernate.cfg.Mappings: void addAuxiliaryDatabaseObject(org.hibernate.mapping.AuxiliaryDatabaseObject)> -> _SINK_
<org.apache.ibatis.binding.MapperMethod: void <init>(java.lang.Class,java.lang.reflect.Method,org.apache.ibatis.session.SqlSession)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setNull(java.lang.String,int,java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.XmlEtxIndicesReader: java.util.Iterator getSbspaceElements()> -> _SINK_
<com.datastax.driver.core.querybuilder.Select: void <init>(com.datastax.driver.core.TableMetadata,java.util.List,boolean)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$39: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<java.sql.CallableStatement: int getInt(java.lang.String)> -> _SINK_
<org.hibernate.dialect.function.SQLFunctionRegistry: boolean hasFunction(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setURL(int,java.net.URL)> -> _SINK_
<org.mongodb.morphia.query.Query: org.mongodb.morphia.query.Query enableValidation()> -> _SINK_
<org.hibernate.criterion.BetweenExpression: org.hibernate.engine.TypedValue[] getTypedValues(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeAf(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateArray(java.lang.String,java.sql.Array)> -> _SINK_
<gov.nih.nci.security.authorization.instancelevel.InstanceLevelSecurityHelper: boolean isMySQLDatabase(java.util.Properties,boolean)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.math.BigDecimal getBigDecimal(java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Date getDate(int)> -> _SINK_
<org.mmbase.storage.search.implementation.NodeSearchQuery: void <init>(org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<org.hibernate.impl.SessionImpl: void managedClose()> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: boolean execute(java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: int getResultSetHoldability()> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.QueryImpl: java.util.Collection query(int,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setBlob(int,java.sql.Blob)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.Object getObject(java.lang.String,java.util.Map)> -> _SINK_
<com.mysql.jdbc.Connection: void incrementNumberOfPreparedExecutes()> -> _SINK_
<org.exolab.castor.jdo.drivers.SQLServerQueryExpression: void <init>(org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateBlob(int,java.sql.Blob)> -> _SINK_
<com.sforce.soap.enterprise.sobject.DashboardComponentFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.Field: int getMaxBytesPerCharacter()> -> _SINK_
<org.hibernate.hql.ast.exec.MultiTableDeleteExecutor: int execute(org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setNull(int,int,java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getSuperTypes(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(java.lang.Object[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: long getLastOID()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: int getMaxFieldSize()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void clearBatch()> -> _SINK_
<com.datastax.driver.core.TableMetadata: java.lang.String asCQLQuery(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateArray(int,java.sql.Array)> -> _SINK_
<com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient: com.amazonaws.services.dynamodbv2.model.QueryResult query(com.amazonaws.services.dynamodbv2.model.QueryRequest)> -> _SINK_
<com.mysql.jdbc.SingleByteCharsetConverter: void <init>(java.lang.String)> -> _SINK_
<org.apache.ibatis.mapping.BoundSql: java.lang.String getSql()> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: java.lang.String toString()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsCatalogsInProcedureCalls()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateNull(int)> -> _SINK_
<java.sql.DatabaseMetaData: boolean nullsAreSortedAtEnd()> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: java.lang.String getQueryString()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: boolean execute()> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeQuery: org.mmbase.storage.search.StepField createStepField(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate$RowCallbackHandlerResultSetExtractor: java.lang.Object extractData(java.sql.ResultSet)> -> _SINK_
<org.mmbase.storage.search.implementation.ModifiableQuery: int getOffset()> -> _SINK_
<com.mysql.jdbc.ReplicationDriver: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateTimestamp(int,java.sql.Timestamp)> -> _SINK_
<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject,com.mongodb.ReadPreference,com.mongodb.DBEncoder)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setTransformedBitIsBoolean(boolean)> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: void handleOutputParameters(java.sql.CallableStatement)> -> _SINK_
<com.mysql.jdbc.CommunicationsException: void setWasStreamingResults()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNtt(java.lang.String)> -> _SINK_
<gov.nih.nci.security.dao.Queries: java.sql.PreparedStatement getQueryForCheckPermissionForOnlyGroup(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void doSSPSCompatibleTimezoneShift(int,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection: void access$200(org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection,java.sql.SQLException)> -> _SINK_
<com.mysql.jdbc.Connection: int getHoldability()> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsResult: void <init>()> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.ApplicationServiceImpl: java.util.List query(java.lang.Object,java.lang.Integer,java.lang.String)> -> _SINK_
<org.hibernate.hql.classic.PathExpressionParser: void prepareForIndex(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.Savepoint setSavepoint(java.lang.String)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setShort(int,short)> -> _SINK_
<org.exolab.castor.jdo.keygen.SequenceKeyGenerator: java.lang.Object generateKey(java.sql.Connection,java.lang.String,java.lang.String,java.util.Properties)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsMinimumSQLGrammar()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete: void <init>(com.datastax.driver.core.TableMetadata,java.util.List)> -> _SINK_
<java.sql.Statement: void setFetchSize(int)> -> _SINK_
<gov.nih.nci.system.util.WritableApiApplicationServiceMethodHelper: java.util.Map validateAndGetSecurityMap(gov.nih.nci.system.query.SDKQuery)> -> _SINK_
<com.mysql.jdbc.Connection: void cleanup(java.lang.Throwable)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsTransactionIsolationLevel(int)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String getSQLWhereString(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: boolean isPreparedFor(int[])> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl hasAnyOf(java.lang.Iterable)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsSchemasInPrivilegeDefinitions()> -> _SINK_
<org.hibernate.event.def.DefaultAutoFlushEventListener: boolean flushIsReallyNeeded(org.hibernate.event.AutoFlushEvent,org.hibernate.event.EventSource)> -> _SINK_
<com.gmail.spraetz.models.User: com.gmail.spraetz.models.User getUser(org.bukkit.entity.Player,com.gmail.spraetz.plugin.Engine)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$ResultSetIterator: void <init>(com.mysql.jdbc.DatabaseMetaData,java.sql.ResultSet,int)> -> _SINK_
<java.sql.DatabaseMetaData: boolean usesLocalFiles()> -> _SINK_
<org.hibernate.usertype.UserType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],java.lang.Object)> -> _SINK_
<org.hibernate.hql.classic.FromParser: void token(java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: byte[] readBytes(byte[],int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateRowBuffer()> -> _SINK_
<org.springframework.jdbc.core.SqlRowSetResultSetExtractor: java.lang.Object extractData(java.sql.ResultSet)> -> _SINK_
<org.hibernate.type.AbstractCharArrayType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXAConnection: java.lang.String xidToString(javax.transaction.xa.Xid)> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: void addOffsetClause(org.exolab.castor.jdo.oql.ParseTreeNode)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqltruncate(java.util.List)> -> _SINK_
<javax.jdo.Query: java.lang.Object execute()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Solution: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsPositionedDelete()> -> _SINK_
<com.sforce.soap.enterprise.sobject.TestObj1__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateRow()> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: boolean isAggregating()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: byte getByte(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: int getResultSetConcurrency()> -> _SINK_
<org.mmbase.storage.search.implementation.database.HSqlSqlHandler: java.lang.String toSql(org.mmbase.storage.search.SearchQuery,org.mmbase.storage.search.implementation.database.SqlHandler)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.Field,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setSecondsBeforeRetryMaster(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxBinaryLiteralLength()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setTime(java.lang.String,java.sql.Time)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addORConstraint(org.mmbase.bridge.Query,org.mmbase.storage.search.Constraint)> -> _SINK_
<com.datastax.driver.core.Requests$Execute$2: void encode(com.datastax.driver.core.Requests$Execute,org.jboss.netty.buffer.ChannelBuffer)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.LogicalOperator: void <clinit>()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.sql.ResultSet execSQLQuery(java.lang.String,int,int)> -> _SINK_
<org.exolab.castor.jdo.keygen.HighLowKeyGenerator: void supportsSqlType(int)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: void setHoldability(int)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: java.sql.ParameterMetaData getParameterMetaData()> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLTransientConnectionException: void <init>()> -> _SINK_
<entities.gui.jsf.AutoEntityBackBean: entities.dao.oql.OQL getOql()> -> _SINK_
<com.mysql.jdbc.Security: byte[] passwordHashStage2(byte[],byte[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setMaxRows(int)> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.validation.CQLQueryResultsValidator: void saveRestrictedCQLResultSetXSD(java.io.File)> -> _SINK_
<org.exolab.castor.jdo.drivers.PostgreSQLFactory: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.Object[] hydrate(java.sql.ResultSet,java.io.Serializable,java.lang.Object,org.hibernate.persister.entity.Loadable,java.lang.String[][],boolean,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getJDBCMajorVersion()> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getNavRecordFilter()> -> _SINK_
<org.exolab.castor.jdo.JDOManager: void loadConfiguration(org.xml.sax.InputSource,org.xml.sax.EntityResolver,java.lang.ClassLoader)> -> _SINK_
<com.enhype.photo.FlickrService: java.util.List getCCBySAPhotoFlickr(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setClob(int,java.sql.Clob)> -> _SINK_
<org.postgresql.util.PGBinaryObject: int lengthInBytes()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setPreparedStatementCacheSize(int)> -> _SINK_
<org.hibernate.exception.JDBCExceptionHelper: org.hibernate.JDBCException convert(org.hibernate.exception.SQLExceptionConverter,java.sql.SQLException,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.MysqlDefs: void appendJdbcTypeMappingQuery(java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement$BindValue: java.lang.String toString(boolean)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser$ParserContext: org.hibernate.persister.entity.SQLLoadable getEntityPersisterByAlias(java.lang.String)> -> _SINK_
<org.hibernate.tool.hbm2ddl.ForeignKeyMetadata: void <init>(java.sql.ResultSet)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: void rollback(java.sql.Savepoint)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Candidate__c: void setActivityHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$BatchResultHandler: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: java.lang.String getViewName(org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<org.apache.ibatis.builder.xml.XMLStatementBuilder$IfHandler: void handleNode(org.apache.ibatis.parsing.XNode,java.util.List)> -> _SINK_
<org.apache.ibatis.metadata.Database: void addTable(org.apache.ibatis.metadata.Table)> -> _SINK_
<com.mysql.jdbc.Connection: com.mysql.jdbc.CachedResultSetMetaData getCachedMetaData(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: java.sql.Timestamp toTimestampBin(java.util.TimeZone,byte[],boolean)> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: void addOuterJoin(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getSuperTables(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setURL(int,java.net.URL)> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapClientBuilder: com.ibatis.sqlmap.client.SqlMapClient buildSqlMapClient(java.io.Reader)> -> _SINK_
<org.mmbase.cache.QueryResultCache: void increaseCounters(org.mmbase.storage.search.SearchQuery,java.util.Map)> -> _SINK_
<oracle.toplink.logging.SessionLogEntry: oracle.toplink.internal.databaseaccess.Accessor getConnection()> -> _SINK_
<org.postgresql.util.ByteConverter: void float8(byte[],int,double)> -> _SINK_
<org.hibernate.mapping.Collection: java.lang.String getCustomSQLDelete()> -> _SINK_
<com.endeca.navigation.ENEQueryInfo: java.lang.String GenerateRID()> -> _SINK_
<com.sun.jersey.api.uri.UriBuilderImpl: java.net.URI _build(boolean,java.lang.Object[])> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: void switchToMasterConnection()> -> _SINK_
<org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor: java.lang.Object extractData(java.sql.ResultSet)> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringDecoder: void <init>(java.lang.String,boolean)> -> _SINK_
<gov.nih.nci.cananolab.dto.common.PublicationBean: void copyNonPubMedFieldsFromDatabase(gov.nih.nci.cananolab.dto.common.PublicationBean)> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.RowData: boolean isFirst()> -> _SINK_
<org.apache.axis.transport.http.AbstractQueryStringHandler: boolean isDevelopment()> -> _SINK_
<org.mongodb.morphia.query.FieldCriteria: org.mongodb.morphia.query.FilterOperator getOperator()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: org.springframework.jdbc.support.rowset.SqlRowSet queryForRowSet(java.lang.String,java.lang.Object[])> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23SimpleDataSource: void writeObject(java.io.ObjectOutputStream)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: void logStaticSQL()> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: int executeUpdate(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Statement: java.sql.ResultSet getGeneratedKeysInternal()> -> _SINK_
<gov.nih.nci.security.authorization.instancelevel.InstanceLevelSecurityHelper: java.util.List getFiltersForUser(gov.nih.nci.security.AuthorizationManager)> -> _SINK_
<org.apache.ibatis.executor.ErrorContext: org.apache.ibatis.executor.ErrorContext sql(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: long endCopy(org.postgresql.core.v3.CopyInImpl)> -> _SINK_
<org.hibernate.cfg.Configuration: java.lang.String[] generateSchemaCreationScript(org.hibernate.dialect.Dialect)> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeQuery: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: boolean first()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Lead: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DBSemaphore: java.lang.String getSQL()> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: void setExclusiveStartKey(java.util.Map$Entry,java.util.Map$Entry)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void insertRow()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: java.sql.ResultSet readBinaryResultSet(int,int)> -> _SINK_
<com.mysql.jdbc.SQLError: java.lang.String get(java.lang.String)> -> _SINK_
<com.mongodb.MongoCredentialsStore: java.util.Set getDatabases()> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: java.lang.Object clone()> -> _SINK_
<org.springframework.jdbc.object.MappingSqlQuery: java.lang.Object mapRow(java.sql.ResultSet,int)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.Connection: boolean isSameResource(com.mysql.jdbc.Connection)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: int queryForInt(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void checkClosed()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setResourceId(java.lang.String)> -> _SINK_
<org.mmbase.module.database.JDBC: void loadSupport()> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.SampleQueryBean: java.lang.String getQueryAsColumnName()> -> _SINK_
<org.postgresql.ds.jdbc4.AbstractJdbc4PoolingDataSource: void <init>()> -> _SINK_
<com.endeca.navigation.ENEQueryInfo: void <init>()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Predicate: int hashCode()> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryResult: java.util.List getItems()> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementType: org.hibernate.engine.JoinSequence getJoinSequence()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator$DB2Type: java.lang.Object getValue(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: int executeUpdate(java.lang.String,int[])> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void hexEscapeBlock(byte[],com.mysql.jdbc.Buffer,int)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.sql.Blob getBlobFromFile(org.mmbase.module.core.MMObjectNode,org.mmbase.core.CoreField,boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateSimpleTrigger(java.sql.Connection,org.quartz.SimpleTrigger)> -> _SINK_
<org.apache.axis.types.URI: java.lang.String getQueryString()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: com.mongodb.WriteResult delete(org.mongodb.morphia.query.Query,com.mongodb.WriteConcern)> -> _SINK_
<java.sql.DatabaseMetaData: boolean storesMixedCaseQuotedIdentifiers()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Batch unloggedBatch(com.datastax.driver.core.RegularStatement[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.BlogForce_Comment__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.CompressedInputStream: int read(byte[],int,int)> -> _SINK_
<org.postgresql.largeobject.LargeObject: int tell()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void addQuerySpaces(java.io.Serializable[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: int getUpdateCount()> -> _SINK_
<java.sql.ResultSet: void updateFloat(java.lang.String,float)> -> _SINK_
<org.exolab.castor.persist.spi.KeyGenerator: java.lang.Object generateKey(java.sql.Connection,java.lang.String,java.lang.String,java.util.Properties)> -> _SINK_
<org.postgresql.core.v2.V2Query: void <init>(java.lang.String,boolean,org.postgresql.core.ProtocolConnection)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Date getDate(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean ownDeletesAreVisible(int)> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder$SelectSQL: void <init>()> -> _SINK_
<java.sql.ResultSet: short getShort(int)> -> _SINK_
<org.exolab.castor.jdo.JDOManager: void loadConfiguration(java.lang.String,java.lang.String,javax.sql.DataSource,org.exolab.castor.mapping.Mapping,javax.transaction.TransactionManager)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getIdentifierQuoteString()> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$MapPutAssignment: void <init>(java.lang.String,java.lang.Object,java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: void setHoldability(int)> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcDaoImpl$ObjectPropertiesMapping: void <init>(org.acegisecurity.acl.basic.jdbc.JdbcDaoImpl,javax.sql.DataSource)> -> _SINK_
<java.sql.DatabaseMetaData: boolean nullsAreSortedHigh()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setString(int,java.lang.String,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: boolean getMoreResults()> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: java.lang.String toString(org.postgresql.core.ParameterList)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Idea: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.type.SerializableType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.hibernate.type.DoubleType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<javax.jdo.PersistenceManager: javax.jdo.Query newQuery(java.lang.Class,java.lang.String)> -> _SINK_
<org.mmbase.util.DBConditionItem: void sqlConversion(java.lang.StringBuffer)> -> _SINK_
<com.mysql.jdbc.SocketFactory: java.net.Socket connect(java.lang.String,int,java.util.Properties)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor$ResultAliasContext: java.lang.String getCollectionSuffix(java.lang.String)> -> _SINK_
<org.hibernate.engine.QueryParameters: void setAutoDiscoverScalarTypes(boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int insertSimpleTrigger(java.sql.Connection,org.quartz.SimpleTrigger)> -> _SINK_
<org.eclipse.acceleo.model.mtl.Query: org.eclipse.emf.common.util.EList getParameter()> -> _SINK_
<org.apache.ibatis.type.DoubleTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<org.hibernate.sql.OracleJoinFragment: void <init>()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: com.datastax.driver.core.Statement setRetryPolicy(com.datastax.driver.core.policies.RetryPolicy)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsStoredProcedures()> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean wasNull()> -> _SINK_
<com.sun.jersey.api.client.ViewResource: com.sun.jersey.api.client.ViewResource uri(java.net.URI)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setAutoReconnect(boolean)> -> _SINK_
<java.sql.ResultSet: void updateInt(int,int)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode$PrefixedContext: java.lang.String getSql()> -> _SINK_
<org.postgresql.core.PGStream: void Receive(byte[],int,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Insert insertInto(com.datastax.driver.core.TableMetadata)> -> _SINK_
<org.springframework.jdbc.object.StoredProcedure: void declareParameter(org.springframework.jdbc.core.SqlParameter)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: boolean getBoolean(java.sql.ResultSet,int)> -> _SINK_
<org.postgresql.geometric.PGpath: int hashCode()> -> _SINK_
<org.hibernate.type.CurrencyType: int sqlType()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getReportMetricsIntervalMillis()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setDumpQueriesOnException(boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String[] selectTriggersInGroup(java.sql.Connection,java.lang.String)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.implementation.BasicRelationStep addRelationStep(org.mmbase.module.corebuilders.InsRel,org.mmbase.bridge.NodeManager,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void cancel()> -> _SINK_
<com.mysql.jdbc.VersionedStringProperty: boolean isOkayForVersion(com.mysql.jdbc.Connection)> -> _SINK_
<au.com.bytecode.opencsv.ResultSetHelperService: java.lang.String[] getColumnNames(java.sql.ResultSet)> -> _SINK_
<org.mmbase.storage.implementation.database.RelationalDatabaseStorageManager: void delete(org.mmbase.module.core.MMObjectNode,org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getSQLKeywords()> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: java.lang.Object execute(org.springframework.orm.ibatis.SqlMapClientCallback)> -> _SINK_
<org.hibernate.sql.JoinFragment: void addFragment(org.hibernate.sql.JoinFragment)> -> _SINK_
<org.hibernate.sql.QueryJoinFragment: void <init>(org.hibernate.dialect.Dialect,boolean)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.util.Set getQuerySpaces()> -> _SINK_
<org.hibernate.persister.collection.NamedQueryCollectionInitializer: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void checkinStatement(java.sql.Statement)> -> _SINK_
<org.hibernate.type.CompositeCustomType: int[] sqlTypes(org.hibernate.engine.Mapping)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void sendSync()> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: void addDistinct(org.w3c.dom.Element,org.mmbase.bridge.util.xml.query.QueryDefinition)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContactFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$LongConnectionProperty: void initializeFrom(java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setObject(java.lang.String,java.lang.Object)> -> _SINK_
<org.springframework.jdbc.core.simple.SimpleJdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.lang.Class,java.lang.Object[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.Candidate__c: void setHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mongodb.morphia.dao.BasicDAO: boolean exists(org.mongodb.morphia.query.Query)> -> _SINK_
<javax.jdo.PersistenceManager: javax.jdo.Query newQuery(java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.hql.ast.util.JoinProcessor: void addJoinNodes(org.hibernate.hql.ast.tree.QueryNode,org.hibernate.engine.JoinSequence,org.hibernate.hql.ast.tree.FromElement,boolean)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodes: java.lang.String[] getInvalidResultSetAccessCodes()> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: org.hibernate.ScrollableResults scroll(org.hibernate.ScrollMode)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateByte(java.lang.String,byte)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseGmtMillisForDatetimes(boolean)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.io.InputStream getAsciiStream(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: java.lang.Object get()> -> _SINK_
<org.mongodb.morphia.query.AbstractQueryFactory: void <init>()> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: org.hibernate.hql.ast.HqlSqlWalker analyze(org.hibernate.hql.ast.HqlParser,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.BlogForce_Blog__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.apache.ibatis.type.LongTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<gov.nih.nci.cananolab.ui.sample.DWRSampleManager: gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean deleteCompositionQuery(gov.nih.nci.cananolab.dto.particle.CompositionQueryBean)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.lang.String renderScalarSelect()> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: org.mmbase.storage.search.Constraint getAgeConstraint(org.w3c.dom.Element,org.mmbase.bridge.util.xml.query.QueryDefinition)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxConnections()> -> _SINK_
<org.hibernate.sql.Alias: void <init>(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.PoolConfig: java.lang.String defaultPreferredTestQuery()> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: org.mongodb.morphia.Key getKey()> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateInt(int,int)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageLookup: boolean match(org.w3c.dom.Element,int)> -> _SINK_
<com.mysql.jdbc.Field: void <init>(java.lang.String,java.lang.String,int,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateCalendar(java.sql.Connection,java.lang.String,org.quartz.Calendar)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setBytes(int,byte[],boolean,boolean)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: boolean isSelectQuery()> -> _SINK_
<org.apache.ibatis.builder.xml.XMLStatementBuilder$ChooseHandler: void handleNode(org.apache.ibatis.parsing.XNode,java.util.List)> -> _SINK_
<com.mysql.jdbc.CharsetMapping: java.lang.String getCharacterEncodingForErrorMessages(com.mysql.jdbc.Connection)> -> _SINK_
<org.hibernate.type.BlobType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.postgresql.core.ConnectionFactory: org.postgresql.core.ProtocolConnection openConnectionImpl(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties,org.postgresql.core.Logger)> -> _SINK_
<org.hibernate.mapping.Collection: void setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getConnectTimeout()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: int queryForInt(java.lang.String,java.lang.Object[])> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNe(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addOrderBy(com.mongodb.DBObject)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setDate(int,java.sql.Date)> -> _SINK_
<com.mysql.jdbc.Connection: void setupServerForTruncationChecks()> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.sql.Statement createStatement(int,int)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqldayname(java.util.List)> -> _SINK_
<test.gov.nih.nci.security.hibernate.annotations.HibernateUtil: void setupDatabase()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$83: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<java.sql.ResultSet: long getLong(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: int executeUpdate(java.lang.String,int[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: byte[] getBytes(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void registerOutParameter(int,int,int)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateString(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setTime(int,java.sql.Time,java.util.Calendar)> -> _SINK_
<gov.nih.nci.cananolab.service.protocol.helper.ProtocolServiceHelper: java.util.List findProtocolIdsByOwner(java.lang.String)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: java.lang.Object clone()> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate: java.lang.Object executeNamedQuery(java.lang.Class,java.lang.String,java.lang.Object[])> -> _SINK_
<org.hibernate.engine.query.HQLQueryPlan: java.util.Iterator performIterate(org.hibernate.engine.QueryParameters,org.hibernate.event.EventSource)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: org.hibernate.SQLQuery addScalar(java.lang.String,org.hibernate.type.Type)> -> _SINK_
<org.castor.jdo.conf.DatabaseDescriptor: java.lang.Class getJavaClass()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: int getMaxRows()> -> _SINK_
<org.hibernate.mapping.Collection: void setCustomSQLDeleteAll(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Predicate: java.lang.String toString()> -> _SINK_
<org.springframework.orm.hibernate3.HibernateQueryException: java.lang.String getQueryString()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getRollbackOnPooledClose()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: int getFetchSize()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void renderIdentifierSelect(org.hibernate.sql.QuerySelect)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: void cancel()> -> _SINK_
<org.springframework.jdbc.core.support.JdbcBeanDefinitionReader: void loadBeanDefinitions(java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.DimValIdList getAggrERecNavDescriptors()> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void updateStatement(antlr.collections.AST)> -> _SINK_
<com.datastax.driver.core.Configuration: com.datastax.driver.core.QueryOptions getQueryOptions()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Group: gov.nih.nci.cagrid.cqlquery.Attribute[] getAttribute()> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion gt(java.lang.Object,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: java.util.List generateCustomReturns(boolean)> -> _SINK_
<org.hibernate.sql.Select: org.hibernate.sql.Select setLockMode(org.hibernate.LockMode)> -> _SINK_
<com.sforce.soap.enterprise.sobject.UserRole: void setUsers(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void whereClause(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: byte getByte(int)> -> _SINK_
<org.postgresql.fastpath.Fastpath: int getID(java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiStatement: void clearWarnings()> -> _SINK_
<com.mysql.jdbc.ResultSet: void refreshRow()> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: void <init>(org.exolab.castor.persist.LockEngine,org.exolab.castor.jdo.oql.ParseTreeNode,java.lang.ClassLoader,org.exolab.castor.jdo.DbMetaInfo)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor$ResultAliasContext: java.util.Map getPropertyResultsMap(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Date getDate(int,java.util.Calendar)> -> _SINK_
<org.castor.jdo.conf.Database: void setMapping(org.castor.jdo.conf.Mapping[])> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.lang.Object getObject(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setBoolean(java.lang.String,boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int selectNumJobs(java.sql.Connection)> -> _SINK_
<org.hibernate.type.NullableType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String,org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<org.quartz.impl.jdbcjobstore.WebLogicDelegate: java.lang.Object getObjectFromBlob(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2BlobClob$LOIterator: byte access$000(org.postgresql.jdbc2.AbstractJdbc2BlobClob$LOIterator)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: byte getByte(int)> -> _SINK_
<org.hibernate.hql.ast.tree.IntoClause: org.hibernate.persister.entity.Queryable getQueryable()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Timestamp getTimestamp(int)> -> _SINK_
<org.castor.jdo.drivers.PointbaseFactory: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator$SqlWriter: void commaBetweenParameters(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setObject(java.lang.String,java.lang.Object,int,int)> -> _SINK_
<org.springframework.jdbc.core.ResultSetSupportingSqlParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.RowCallbackHandler)> -> _SINK_
<org.hibernate.id.insert.AbstractReturningDelegate: void releaseStatement(java.sql.PreparedStatement,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: boolean appendValueIfLiteral(java.lang.Object,java.lang.StringBuilder)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: short getShort(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void deleteRow()> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryResult: void setItems(java.util.Collection)> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfo: int isNullable(int)> -> _SINK_
<com.sforce.soap.enterprise.DescribeGlobalSObjectResult: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.sforce.soap.enterprise.EnterpriseConnection: com.sforce.soap.enterprise.QueryResult queryAll(java.lang.String)> -> _SINK_
<com.mysql.jdbc.BlobFromLocator: void truncate(long)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void moveToInsertRow()> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.sql.PreparedStatement prepareStatement(java.lang.String,int[])> -> _SINK_
<freemarker.ext.dom.NodeModel: freemarker.template.TemplateModel exec(java.util.List)> -> _SINK_
<org.exolab.castor.dtx.DTXQuery: void setHandler(org.xml.sax.DocumentHandler)> -> _SINK_
<entities.dao.hibernate.DAOHibernateTransaction: void save(java.lang.Object[])> -> _SINK_
<org.mongodb.morphia.utils.LongIdEntity: void prePersist()> -> _SINK_
<com.mysql.jdbc.Field: int getDecimals()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getPopulateInsertRowWithDefaultValues()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: boolean isWrapperFor(java.lang.Class)> -> _SINK_
<com.sforce.soap.enterprise.sobject.TaskFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: void removeFields()> -> _SINK_
<org.postgresql.largeobject.LargeObject: int size()> -> _SINK_
<org.mongodb.morphia.query.Query: org.mongodb.morphia.query.Query offset(int)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: void setTransactionIsolation(int)> -> _SINK_
<java.sql.SQLWarning: java.sql.SQLWarning getNextWarning()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSetMetaData: boolean isWrapperFor(java.lang.Class)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setNull(int,int,java.lang.String)> -> _SINK_
<org.postgresql.ds.common.PGObjectFactory: void <init>()> -> _SINK_
<com.sforce.soap.enterprise.sobject.DashboardFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.eclipse.acceleo.engine.internal.evaluation.QueryCache: java.lang.Object getResult(org.eclipse.acceleo.model.mtl.Query,java.util.List)> -> _SINK_
<java.sql.ResultSet: void updateShort(java.lang.String,short)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: int getMaxFieldSize()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxColumnNameLength()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Blob getBlob(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setCharacterStream(int,java.io.Reader,int)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl: void bind(short)> -> _SINK_
<org.hibernate.sql.Update: void <init>(org.hibernate.dialect.Dialect)> -> _SINK_
<org.hibernate.persister.entity.JoinedSubclassEntityPersister: void addDiscriminatorToSelect(org.hibernate.sql.SelectFragment,java.lang.String,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.StringBuilder appendName(java.lang.Object,java.lang.StringBuilder)> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy: java.util.List access$100(com.mysql.jdbc.LoadBalancingConnectionProxy)> -> _SINK_
<org.postgresql.core.ProtocolConnection: org.postgresql.PGNotification[] getNotifications()> -> _SINK_
<org.postgresql.core.ProtocolConnection: int getProtocolVersion()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSourceFactory: javax.sql.DataSource create(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,int,int,int)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$3: void handleCommandStatus(java.lang.String,int,long)> -> _SINK_
<org.mmbase.module.database.MultiConnection: java.sql.Statement createStatement(int,int)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: boolean exists()> -> _SINK_
<org.apache.ibatis.jdbc.SqlRunner: java.util.Map selectOne(java.lang.String,java.lang.Object[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsOpenCursorsAcrossRollback()> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsResult: void setIds(java.util.Collection)> -> _SINK_
<org.hibernate.mapping.SimpleAuxiliaryDatabaseObject: java.lang.String injectCatalogAndSchema(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.UpdateResults update(org.mongodb.morphia.query.Query,org.mongodb.morphia.query.UpdateOperations)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementLoad: void <init>(org.exolab.castor.jdo.engine.SQLEngine,org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void registerOutParameter(int,int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: void setReadOnly(boolean)> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: java.util.List list(org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.SQLWarning getWarnings()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: java.lang.String getSchema()> -> _SINK_
<com.mchange.v2.c3p0.filter.FilterDataSource: int getLoginTimeout()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: long getLong(int)> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache$DeathmarchConnectionStatementManager: boolean removeStatementForConnection(java.lang.Object,java.sql.Connection)> -> _SINK_
<org.hibernate.dialect.MySQLDialect: void <init>()> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$SelectionOrAlias: com.datastax.driver.core.querybuilder.Select$SelectionOrAlias queueName(java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setCases(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.mapping.PersistentClass: org.hibernate.engine.ExecuteUpdateResultCheckStyle getCustomSQLDeleteCheckStyle()> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void optionalSpace()> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxProcedureNameLength()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: java.util.List getAttributeMap(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.criterion.Distinct: java.lang.String toGroupSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter: java.util.Map getJpaPropertyMap()> -> _SINK_
<gov.nih.nci.security.authorization.instancelevel.InstanceLevelSecurityHelper: void addFilters(gov.nih.nci.security.AuthorizationManager,org.hibernate.cfg.Configuration,java.util.List)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.CompositionServiceHelper: gov.nih.nci.cananolab.domain.particle.SampleComposition findCompositionBySampleId(java.lang.String)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter: void <init>(java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Project__Feed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateBoolean(java.lang.String,boolean)> -> _SINK_
<org.mmbase.module.core.MMObjectBuilder: java.lang.String setUniqueValue(org.mmbase.module.core.MMObjectNode,java.lang.String,java.lang.String)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$2: void <init>(org.exolab.castor.gui.QueryAnalyser$MainFrame)> -> _SINK_
<com.mchange.v2.c3p0.DriverManagerDataSource: void setLogWriter(java.io.PrintWriter)> -> _SINK_
<org.apache.ibatis.binding.MapperMethod: java.lang.Object execute(java.lang.Object[])> -> _SINK_
<org.hibernate.hql.ast.tree.AbstractSelectExpression: void <init>()> -> _SINK_
<com.mchange.v2.c3p0.util.CloseReportingConnectionWrapper: void <init>(java.sql.Connection)> -> _SINK_
<org.postgresql.core.ProtocolConnection: boolean getIntegerDateTimes()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsStoredProcedures()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getSystemFunctions()> -> _SINK_
<org.springframework.jdbc.core.support.SqlLobValue: void setTypeValue(java.sql.PreparedStatement,int,int,java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: boolean getBoolean(int)> -> _SINK_
<org.apache.axis.types.URI: void absolutize(org.apache.axis.types.URI)> -> _SINK_
<org.mmbase.module.database.MultiStatement: boolean getMoreResults(int)> -> _SINK_
<org.exolab.castor.persist.spi.AbstractCallQuery: java.lang.Object fetch(org.castor.persist.ProposedEntity)> -> _SINK_
<com.mysql.jdbc.NonRegisteringDriver: int port(java.util.Properties)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: void addNode(org.mmbase.storage.search.Step,int)> -> _SINK_
<com.ibatis.sqlmap.engine.transaction.TransactionConfig: void setMaximumConcurrentTransactions(int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Timestamp getTimestamp(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setInt(int,int)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void cancelCopy(org.postgresql.core.v3.CopyOperationImpl)> -> _SINK_
<org.exolab.castor.jdo.drivers.OracleQueryExpression: void <init>(org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: void addBatch(java.lang.String)> -> _SINK_
<org.hibernate.sql.ANSIJoinFragment: void <init>()> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.UpdateTagSupport: int doEndTag()> -> _SINK_
<org.hibernate.sql.Alias: java.lang.String toUnquotedAliasString(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.fault.ApiQueryFault: void write(javax.xml.namespace.QName,com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mchange.v2.c3p0.stmt.SimpleStatementCacheKey: com.mchange.v2.c3p0.stmt.StatementCacheKey _find(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<org.hibernate.persister.entity.SQLLoadable: java.lang.String selectFragment(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLTransactionRollbackException: void <init>(java.lang.String,java.lang.String,int)> -> _SINK_
<test.gov.nih.nci.security.threadsafe.CSMAPIMySQLDeadLockTest: void addPrivilegesToRole()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsTableCorrelationNames()> -> _SINK_
<gov.nih.nci.system.util.ClassCache: java.lang.String getDataType(java.lang.String,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int insertSimpleTrigger(java.sql.Connection,org.quartz.SimpleTrigger)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void resumeTrigger(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String,java.lang.String)> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: void setTransient(boolean)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List queryForList(java.lang.String,java.lang.Class)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: boolean getAutoCommit()> -> _SINK_
<org.mmbase.bridge.NodeQuery: org.mmbase.storage.search.Step getNodeStep()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void releaseActiveConnection()> -> _SINK_
<org.springframework.orm.jdo.JdoTemplate$19: java.lang.Object doInJdo(javax.jdo.PersistenceManager)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(int,java.util.Map)> -> _SINK_
<com.mysql.jdbc.ResultSet: void setResultSetConcurrency(int)> -> _SINK_
<org.hibernate.hql.ast.exec.AbstractStatementExecutor: java.lang.String generateIdInsertSelect(org.hibernate.persister.entity.Queryable,java.lang.String,antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.v3.ConnectionFactoryImpl: void doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties,org.postgresql.core.Logger)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseSSL(boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void cleanupUnclosedResultSetsSet(java.util.Set,java.util.List)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void secureAuth(com.mysql.jdbc.Buffer,int,java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SINK_
<org.postgresql.geometric.PGcircle: void <init>(double,double,double)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.lang.String nativeSQL(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$MemorySizeConnectionProperty: void setValue(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: java.lang.String[] selectJobGroups(java.sql.Connection)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContentDocumentFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.WrapperBase: void checkAndFireConnectionError(java.sql.SQLException)> -> _SINK_
<org.hibernate.cfg.HbmBinder: void bindColumn(org.dom4j.Element,org.hibernate.mapping.Column,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Date getDate(int,java.util.Calendar)> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: void checkClosed()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: int getRow()> -> _SINK_
<com.endeca.navigation.ENEQuery: int getNavERecsPerAggrERec()> -> _SINK_
<org.springframework.jdbc.support.lob.LobCreator: void setClobAsString(java.sql.PreparedStatement,int,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlinsert(java.util.List)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet buildResultSet(com.mysql.jdbc.Field[],java.util.ArrayList,com.mysql.jdbc.Connection)> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteria: void setSourceCollection(boolean)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Timestamp getTimestamp(java.lang.String)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(long,java.util.Map)> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.CallableStatement prepareCall(java.lang.String)> -> _SINK_
<org.postgresql.util.PGInterval: int getMonths()> -> _SINK_
<org.springframework.jdbc.datasource.DelegatingDataSource: int getLoginTimeout()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteJobDetail(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache$DeathmarchConnectionStatementManager: com.mchange.v2.c3p0.stmt.GooGooStatementCache$Deathmarch getDeathmarch(java.sql.Connection)> -> _SINK_
<org.hibernate.sql.Delete: org.hibernate.sql.Delete setWhere(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.EtxSqlHandler: void <clinit>()> -> _SINK_
<org.hibernate.type.ComponentType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String,org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<entities.dao.hibernate.DAOHibernateTransaction: void load(java.lang.Object[])> -> _SINK_
<org.apache.ibatis.jdbc.ScriptRunner: void checkForMissingLineTerminator(java.lang.StringBuffer)> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator: org.hibernate.hql.ast.ParseErrorHandler getParseErrorHandler()> -> _SINK_
<com.mysql.jdbc.Buffer: void writeLenBytes(byte[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setQuotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.loader.Loader: java.sql.ResultSet wrapResultSetIfEnabled(java.sql.ResultSet,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.postgresql.Driver: java.util.Properties access$000(org.postgresql.Driver)> -> _SINK_
<com.mysql.jdbc.NonRegisteringReplicationDriver: void <init>()> -> _SINK_
<org.castor.jdo.conf.JdoConf: org.castor.jdo.conf.Database[] getDatabase()> -> _SINK_
<org.castor.jdo.util.JDOConfFactory: org.castor.jdo.conf.JdoConf createJdoConf(org.castor.jdo.conf.Database,org.castor.jdo.conf.TransactionDemarcation)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Solution: void setEvents(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<com.mysql.jdbc.BlobFromLocator: long position(java.sql.Blob,long)> -> _SINK_
<entities.Repository: long size(java.lang.String,java.lang.Object[])> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: void updateOrInsert(java.io.Serializable,java.lang.Object[],java.lang.Object[],java.lang.Object,boolean[],int,java.lang.Object,java.lang.Object,java.lang.String,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.mmbase.module.database.JDBC: java.util.Vector listPools(org.mmbase.util.StringTagger)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: int readblock(java.io.InputStream,byte[])> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.SampleServiceHelper: gov.nih.nci.cananolab.domain.common.PointOfContact findPointOfContactById(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: org.mongodb.morphia.query.UpdateOperations setOnInsert(java.lang.String,java.lang.Object)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.XmlEtxIndicesReader: void <init>(org.xml.sax.InputSource)> -> _SINK_
<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.ResultSet buildResultSetWithUpdates(com.mysql.jdbc.Statement,com.mysql.jdbc.Buffer)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateNClob(java.lang.String,java.io.Reader,long)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: void <init>(org.hibernate.engine.SessionFactoryImplementor,org.hibernate.impl.CriteriaImpl,java.lang.String,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Lead: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.log.Log4JLogger: void logInfo(java.lang.Object,java.lang.Throwable)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateSQLXML(java.lang.String,java.sql.SQLXML)> -> _SINK_
<com.mysql.jdbc.log.StandardLogger: void logTrace(java.lang.Object)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: void addDataSource(java.lang.String)> -> _SINK_
<org.hibernate.persister.collection.QueryableCollection: java.lang.String getSQLOrderByString(java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean storesMixedCaseQuotedIdentifiers()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: boolean relative(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.sql.SQLWarning getWarnings()> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: java.lang.Object prepareCompositeKeyParameter(java.sql.ResultSet,org.apache.ibatis.mapping.ResultMapping,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setInt(int,int)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: boolean next()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: long getLong(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: int executeUpdate(java.lang.String,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsSchemasInProcedureCalls()> -> _SINK_
<org.postgresql.core.Field: int getNullable()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLQuery: java.lang.Object[] identityToSQL(org.exolab.castor.persist.spi.Identity)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.String[] selectTriggerGroups(java.sql.Connection)> -> _SINK_
<gov.nih.nci.cananolab.service.security.SecurityService: java.lang.String getUserRole(java.lang.String,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.Connection newConnectionProxy(java.sql.Connection,java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.IntoClause: void validateTypes(org.hibernate.hql.ast.tree.SelectClause)> -> _SINK_
<org.mongodb.morphia.query.FilterOperator: void <clinit>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getSQLKeywords()> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch$Options: com.datastax.driver.core.Statement enableTracing()> -> _SINK_
<com.endeca.navigation.ENEException: void <init>(java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.lang.String getDatabaseProductVersion()> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: void testToXML()> -> _SINK_
<org.apache.ibatis.jdbc.ScriptRunner: void commitConnection()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setMaxFieldSize(int)> -> _SINK_
<org.springframework.jdbc.BadSqlGrammarException: void <init>(java.lang.String,java.lang.String,java.sql.SQLException)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: int getMaxFieldSize()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.Map processResultSet(java.sql.ResultSet,org.springframework.jdbc.core.ResultSetSupportingSqlParameter)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3DatabaseMetaData: java.sql.ResultSet getSuperTypes(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: int findColumn(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsOpenStatementsAcrossRollback()> -> _SINK_
<java.sql.Statement: boolean execute(java.lang.String,int[])> -> _SINK_
<com.mysql.jdbc.log.StandardLogger: void logDebug(java.lang.Object,java.lang.Throwable)> -> _SINK_
<org.exolab.castor.xml.handlers.SQLTimeFieldHandler: java.lang.Object convertUponSet(java.lang.Object)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setTime(java.lang.String,java.sql.Time,java.util.Calendar)> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: java.lang.Object getPropertyMappingValue(java.sql.ResultSet,org.apache.ibatis.reflection.MetaObject,org.apache.ibatis.mapping.ResultMapping,org.apache.ibatis.executor.loader.ResultLoaderMap)> -> _SINK_
<org.postgresql.core.Logger: boolean logInfo()> -> _SINK_
<com.sforce.soap.enterprise.sobject.CollaborationGroup: void setGroupMemberRequests(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.cananolab.service.publication.helper.PublicationServiceHelper: gov.nih.nci.cananolab.domain.common.Publication findPublicationByKey(java.lang.String,java.lang.Object)> -> _SINK_
<gov.nih.nci.cananolab.service.admin.impl.AdminServiceJDBCImpl: gov.nih.nci.cananolab.dto.admin.VisitorCountBean getVisitorCount()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNf(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateClob(java.lang.String,java.sql.Clob)> -> _SINK_
<org.postgresql.jdbc3g.AbstractJdbc3gResultSet: java.lang.Object getUUID(byte[])> -> _SINK_
<org.hibernate.type.ClassType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<org.apache.ibatis.datasource.pooled.PooledConnection: java.sql.Connection getProxyConnection()> -> _SINK_
<org.exolab.castor.util.SqlBindParser: boolean next()> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: void releaseSavepoint(java.sql.Savepoint)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Time getTimeInternal(int,java.util.Calendar,java.util.TimeZone,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void registerOutParameter(int,int,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsOuterJoins()> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.QueryImpl: java.util.Collection query(int)> -> _SINK_
<com.mysql.jdbc.ResultSet: void throwRangeException(java.lang.String,int,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: int getMaxRows()> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean: java.lang.Boolean getHasFunction()> -> _SINK_
<com.endeca.navigation.ENEQuery: void setDimSearchResultsOffset(long)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: boolean isSigned(int)> -> _SINK_
<org.hibernate.cfg.NamedSQLQuerySecondPass: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert: void <init>(com.datastax.driver.core.TableMetadata)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setCharacterStream(java.lang.String,java.io.Reader,long)> -> _SINK_
<org.springframework.jdbc.object.SqlUpdate: int updateByNamedParam(java.util.Map)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$2: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void evaluateAssignment(antlr.collections.AST)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateNClob(int,java.io.Reader,long)> -> _SINK_
<org.mmbase.module.database.MultiStatement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<org.hibernate.dialect.DerbyDialect: org.hibernate.sql.CaseFragment createCaseFragment()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: float getFloat(int)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String getDiscriminatorAlias(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.lob.LobHandler: java.io.Reader getClobAsCharacterStream(java.sql.ResultSet,int)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4SQLXML$NonPrintingErrorHandler: void <init>()> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: boolean equals(java.lang.Object)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateSimpleTrigger(java.sql.Connection,org.quartz.SimpleTrigger)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setEnablePacketDebug(boolean)> -> _SINK_
<org.eclipse.acceleo.engine.generation.AcceleoEngine: java.lang.Object doEvaluate(org.eclipse.acceleo.model.mtl.Query,java.util.List)> -> _SINK_
<org.springframework.jdbc.SQLWarningException: void <init>(java.lang.String,java.sql.SQLWarning)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Connection: java.sql.Statement createStatement(int,int,int)> -> _SINK_
<com.mysql.jdbc.integration.c3p0.MysqlConnectionTester: void <init>()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position_Tracker__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$63: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.dialect.Dialect$3: void <init>(java.lang.String)> -> _SINK_
<java.sql.CallableStatement: java.sql.Date getDate(int)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection$ConnectionHandler: void <init>(org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection,java.sql.Connection)> -> _SINK_
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getTransactionAwareConnectionProxy(java.sql.Connection,javax.sql.DataSource)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: int getFetchSize()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.storage.search.legacy.ConstraintParser: void <init>(org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void arguments(antlr.collections.AST)> -> _SINK_
<com.datastax.driver.core.ControlConnection: void refreshSchema(com.datastax.driver.core.Connection,java.lang.String,java.lang.String,com.datastax.driver.core.Cluster$Manager)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.Criterion getCharacterizationCriterion(gov.nih.nci.cananolab.dto.particle.CharacterizationQueryBean,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Time getTime(java.lang.String,java.util.Calendar)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void addrExpr(antlr.collections.AST,boolean)> -> _SINK_
<org.exolab.castor.jdo.keygen.UUIDKeyGenerator: void <init>(org.exolab.castor.persist.spi.PersistenceFactory,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateNull(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Solution: void setHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<com.datastax.driver.core.ColumnMetadata$IndexMetadata: java.lang.String asCQLQuery()> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQueryRootReturn: void <init>(java.lang.String,java.lang.String,org.hibernate.LockMode)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void execute(org.postgresql.core.Query,org.postgresql.core.ParameterList,org.postgresql.core.ResultHandler,int,int,int)> -> _SINK_
<org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider: javax.sql.DataSource getDataSourceToUse(javax.sql.DataSource)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getEmptyStringsConvertToZero()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNtpr(java.lang.String)> -> _SINK_
<org.mmbase.module.core.ClusterBuilder: java.util.Vector searchMultiLevelVector(java.util.List,java.util.List,java.lang.String,java.util.List,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: int getImpliedJoinType()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.lang.Object getObject(java.lang.String,java.util.Map)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeR(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: void testQuery_OffSet_0_RecordCount_Not0()> -> _SINK_
<org.hibernate.dialect.PostgreSQLDialect: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.lob.LobHandler: java.io.InputStream getBlobAsBinaryStream(java.sql.ResultSet,int)> -> _SINK_
<org.hibernate.impl.SessionImpl: org.hibernate.engine.query.FilterQueryPlan getFilterQueryPlan(java.lang.Object,java.lang.String,org.hibernate.engine.QueryParameters,boolean)> -> _SINK_
<org.hibernate.type.AdaptedImmutableType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.mmbase.cache.ConstraintsMatchingStrategy: boolean doEvaluate(org.mmbase.core.event.NodeEvent,org.mmbase.storage.search.SearchQuery,java.util.List)> -> _SINK_
<org.hibernate.tool.hbm2ddl.ManagedProviderConnectionHelper: void release()> -> _SINK_
<java.sql.CallableStatement: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> -> _SINK_
<org.hibernate.criterion.SubqueryExpression$1: void <init>(org.hibernate.criterion.SubqueryExpression,org.hibernate.persister.entity.OuterJoinLoadable,org.hibernate.loader.criteria.CriteriaQueryTranslator,org.hibernate.engine.SessionFactoryImplementor,org.hibernate.impl.CriteriaImpl,java.lang.String,java.util.Map)> -> _SINK_
<com.amazonaws.services.dynamodbv2.AmazonDynamoDBAsyncClient$18: void <init>(com.amazonaws.services.dynamodbv2.AmazonDynamoDBAsyncClient,com.amazonaws.services.dynamodbv2.model.QueryRequest,com.amazonaws.handlers.AsyncHandler)> -> _SINK_
<org.hibernate.hql.ast.exec.AbstractStatementExecutor: org.hibernate.engine.SessionFactoryImplementor getFactory()> -> _SINK_
<org.apache.ibatis.executor.keygen.SelectKeyGenerator: void processAfter(org.apache.ibatis.executor.Executor,org.apache.ibatis.mapping.MappedStatement,java.sql.Statement,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[])> -> _SINK_
<org.postgresql.core.v2.SimpleParameterList: void setBytea(int,java.io.InputStream,int)> -> _SINK_
<org.hibernate.sql.SimpleSelect: org.hibernate.sql.SimpleSelect setComment(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DBSemaphore: boolean obtainLock(java.sql.Connection,java.lang.String)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: void executeBatch()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Date fastDateCreate(java.util.Calendar,int,int,int)> -> _SINK_
<org.mmbase.core.util.StorageConnector: java.util.Map getCache(org.mmbase.storage.search.SearchQuery)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: int executeUpdate(java.lang.String,java.lang.String[])> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setString(int,java.lang.String)> -> _SINK_
<java.sql.ResultSet: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> -> _SINK_
<com.sforce.soap.enterprise.EnterpriseConnection: com.sforce.soap.enterprise.QueryResult queryMore(java.lang.String)> -> _SINK_
<org.apache.ibatis.executor.statement.CallableStatementHandler: void batch(java.sql.Statement)> -> _SINK_
<java.sql.ResultSet: java.lang.String getString(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.StringBuilder appendList(java.util.List,java.lang.StringBuilder)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.Set selectFiredTriggerInstanceNames(java.sql.Connection)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$74: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.lang.Object getObject(java.lang.String)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: int[] getNamedParameterLocs(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsLikeEscapeClause()> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: int getFieldFormat(int)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String[] getProjectedAliases()> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder near(double,double)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate: void prepareQuery(org.hibernate.Query)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean: java.lang.Boolean getHasChemicalName()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String propertySelectFragment(java.lang.String,java.lang.String,boolean)> -> _SINK_
<java.sql.DatabaseMetaData: int getDatabaseMinorVersion()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsANSI92FullSQL()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Task__Feed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.datastax.driver.core.QueryTrace: void doFetchTrace()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateFloat(int,float)> -> _SINK_
<com.endeca.navigation.analytics.Statement: java.lang.String toWire()> -> _SINK_
<org.postgresql.core.types.PGByte: org.postgresql.core.types.PGType castToServerType(java.lang.Byte,int)> -> _SINK_
<org.hibernate.hql.QueryTranslator: void validateScrollability()> -> _SINK_
<org.exolab.castor.jdo.drivers.PostgreSQLFactory: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$3: java.lang.Object getValue(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setTimestamp(int,java.sql.Timestamp)> -> _SINK_
<org.postgresql.core.v3.ConnectionFactoryImpl: void readStartupMessages(org.postgresql.core.PGStream,org.postgresql.core.v3.ProtocolConnectionImpl,org.postgresql.core.Logger)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void registerOutParameter(int,int)> -> _SINK_
<test.gov.nih.nci.security.dialect.MySQLPerformanceTest: void testInstanceLevelSecurityForGroups()> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder: void HAVING(java.lang.String)> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$7: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsCoreSQLGrammar()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$16: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxUserNameLength()> -> _SINK_
<entities.descriptor.ParamDescriptorWrapper: void <init>(java.lang.reflect.Method,int,java.lang.Class,java.lang.'annotation'.Annotation[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean nullPlusNonNullIsNull()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object within(org.mongodb.morphia.query.Shape)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion ltSome(java.lang.Object,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.hibernate.cache.QueryCache: boolean put(org.hibernate.cache.QueryKey,org.hibernate.type.Type[],java.util.List,boolean,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.hibernate.sql.Sybase11JoinFragment: boolean addCondition(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache: void assimilateNewCheckedOutStatement(com.mchange.v2.c3p0.stmt.StatementCacheKey,java.sql.Connection,java.lang.Object)> -> _SINK_
<org.springframework.jdbc.object.MappingSqlQueryWithParameters: void <init>()> -> _SINK_
<org.mongodb.morphia.query.MorphiaIterator: java.lang.Class getClazz()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> -> _SINK_
<com.sforce.soap.enterprise.Query_element: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.apache.ibatis.type.BigDecimalTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.String getLoggerClassName()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: java.lang.String getKeyspace()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setTimestamp(java.lang.String,java.sql.Timestamp)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: void setEscapeProcessing(boolean)> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: int getScale(int)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager$InputStreamBlob: java.io.InputStream getBinaryStream()> -> _SINK_
<org.mmbase.storage.search.implementation.ModifiableQuery: org.mmbase.storage.search.implementation.ModifiableQuery setMaxNumber(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.Connection: void reportMetrics()> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: int getTransactionIsolation()> -> _SINK_
<org.hibernate.sql.Alias: java.lang.String getUnquotedAliasString(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.SelectClause: void addCollectionFromElement(org.hibernate.hql.ast.tree.FromElement)> -> _SINK_
<org.eclipse.acceleo.model.mtl.Query: java.lang.String getName()> -> _SINK_
<com.mchange.v2.c3p0.WrapperConnectionPoolDataSource: java.io.PrintWriter getLogWriter()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Quote: void setQuoteDocuments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTransactionManager: void afterPropertiesSet()> -> _SINK_
<com.mysql.jdbc.MysqlIO: boolean isSetNeededForAutoCommitMode(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: int getInt(int)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4SQLXML: java.io.Reader getCharacterStream()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.Object getObject(int,java.util.Map)> -> _SINK_
<net.sf.jasperreports.engine.JasperFillManager: net.sf.jasperreports.engine.JasperPrint fillReport(net.sf.jasperreports.engine.JasperReport,java.util.Map,java.sql.Connection)> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteria: void setInternalNestedCriteria(gov.nih.nci.system.query.nestedcriteria.NestedCriteria)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: void setTransactionIsolation(int)> -> _SINK_
<org.hibernate.loader.Loader: java.util.List loadEntity(org.hibernate.engine.SessionImplementor,java.lang.Object,org.hibernate.type.Type,java.lang.Object,java.lang.String,java.io.Serializable,org.hibernate.persister.entity.EntityPersister)> -> _SINK_
<gov.nih.nci.system.query.cql.CQLAttribute: gov.nih.nci.system.query.cql.CQLPredicate getPredicate()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setStrictFloatingPoint(boolean)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: void checkAllParametersSet()> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: boolean isAutoIncrement(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$SelectionOrAlias: com.datastax.driver.core.querybuilder.Select 'from'(java.lang.String,java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object within(double,double,double)> -> _SINK_
<org.hibernate.hql.ast.util.LiteralProcessor: void processLiteral(antlr.collections.AST)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$SelectionOrAlias: com.datastax.driver.core.querybuilder.Select$SelectionOrAlias writeTime(java.lang.String)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: java.lang.Object selectOne(java.lang.String,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateShort(java.lang.String,short)> -> _SINK_
<org.postgresql.core.ParameterList: int getInParameterCount()> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeQuery: org.mmbase.bridge.Query setDistinct(boolean)> -> _SINK_
<com.mysql.jdbc.ResultSet: void close()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: int getHoldability()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setBinaryStream(int,java.io.InputStream,long)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Interview__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<gov.nih.nci.system.client.proxy.ListProxy: boolean containsAll(java.util.Collection)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setObject(int,java.lang.Object,int)> -> _SINK_
<org.springframework.orm.hibernate3.support.BlobSerializableType: void nullSafeSetInternal(java.sql.PreparedStatement,int,java.lang.Object,org.springframework.jdbc.support.lob.LobCreator)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void cancelQuery()> -> _SINK_
<com.mysql.jdbc.Statement$CancelTask: void <init>(com.mysql.jdbc.Statement)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setBlob(int,java.io.InputStream)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavRefinementConfigs(com.endeca.navigation.RefinementConfigList)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateLong(int,long)> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSourceFactory: javax.sql.DataSource create(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean nullPlusNonNullIsNull()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean storesUpperCaseQuotedIdentifiers()> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.Statement createStatement()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Ref getRef(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void comparisonExpr(antlr.collections.AST)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void deleteStatement(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.c3p0.JndiRefForwardingDataSource: javax.sql.DataSource dereference()> -> _SINK_
<org.hibernate.id.PersistentIdentifierGenerator: java.lang.String[] sqlCreateStrings(org.hibernate.dialect.Dialect)> -> _SINK_
<org.hibernate.sql.JoinFragment: void addJoin(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],int,java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.DimValIdList getDimSearchNavDescriptors()> -> _SINK_
<com.mysql.jdbc.MysqlSavepoint: java.lang.String getUniqueId()> -> _SINK_
<java.sql.DatabaseMetaData: boolean othersUpdatesAreVisible(int)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void setNodeValue(java.sql.PreparedStatement,int,java.lang.Object,org.mmbase.core.CoreField,org.mmbase.module.core.MMObjectNode)> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxRowSize()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getProcedures(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: byte getByte(int)> -> _SINK_
<org.hibernate.jdbc.Batcher: java.sql.CallableStatement prepareBatchCallableStatement(java.lang.String)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.ParamTagSupport: void <init>()> -> _SINK_
<com.amazonaws.services.dynamodbv2.AmazonDynamoDBAsyncClient: java.util.concurrent.Future queryAsync(com.amazonaws.services.dynamodbv2.model.QueryRequest,com.amazonaws.handlers.AsyncHandler)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool$1: void destroyResource(java.lang.Object)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$38: void execute(java.sql.Connection)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$84: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.String getNativeString(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Log__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.orm.jdo.JdoTemplate$18: java.lang.Object doInJdo(javax.jdo.PersistenceManager)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void readServerStatusForResultSets(com.mysql.jdbc.Buffer)> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getTypeInfo()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: java.sql.Connection getConnection()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setSerializableObject(int,java.lang.Object)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$27: void execute(java.sql.Connection)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String[] generateSQLDeletStrings(java.lang.Object[])> -> _SINK_
<org.apache.ibatis.type.ObjectTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<org.hibernate.impl.FetchingScrollableResultsImpl: void <init>(java.sql.ResultSet,java.sql.PreparedStatement,org.hibernate.engine.SessionImplementor,org.hibernate.loader.Loader,org.hibernate.engine.QueryParameters,org.hibernate.type.Type[],org.hibernate.hql.HolderInstantiator)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.util.Map getTypeMap()> -> _SINK_
<org.postgresql.largeobject.LargeObject: java.io.OutputStream getOutputStream()> -> _SINK_
<org.mmbase.storage.search.implementation.database.PostgreSqlSqlHandler: java.lang.String toSql(org.mmbase.storage.search.SearchQuery,org.mmbase.storage.search.implementation.database.SqlHandler)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Recruiting_Tracker__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setAggrERecActiveSortKeys(com.endeca.navigation.ERecSortKeyList)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: java.lang.String getColumnLabel(int)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: java.util.List executeWithListResult(org.springframework.orm.ibatis.SqlMapClientCallback)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setAs(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.utils.Key[] selectTriggersInState(java.sql.Connection,java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.'annotation'.MapperAnnotationBuilder: org.apache.ibatis.mapping.SqlSource getSqlSourceFromAnnotations(java.lang.reflect.Method)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setShort(java.lang.String,short)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void clearParameters()> -> _SINK_
<com.mchange.v2.c3p0.DataSources: javax.sql.DataSource unpooledDataSource(java.lang.String,java.util.Properties)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.ParameterMetaData getParameterMetaData()> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.ApplicationServiceImpl: java.util.List query(org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.math.BigDecimal getBigDecimal(int)> -> _SINK_
<org.hibernate.Query: org.hibernate.Query setParameterList(java.lang.String,java.util.Collection)> -> _SINK_
<org.hibernate.loader.collection.OneToManyLoader: void <init>(org.hibernate.persister.collection.QueryableCollection,org.hibernate.engine.SessionFactoryImplementor,java.util.Map)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: int executeUpdate(java.lang.String,java.lang.String[])> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateByte(java.lang.String,byte)> -> _SINK_
<org.apache.ibatis.executor.keygen.SelectKeyGenerator: void processBefore(org.apache.ibatis.executor.Executor,org.apache.ibatis.mapping.MappedStatement,java.sql.Statement,java.lang.Object)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.UpdateResults updateFirst(org.mongodb.morphia.query.Query,org.mongodb.morphia.query.UpdateOperations,boolean,com.mongodb.WriteConcern)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiPool: void createPool()> -> _SINK_
<com.mysql.jdbc.Driver: void <init>()> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl$2: void handleResultRows(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNdr(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mysql.jdbc.BlobFromLocator: java.io.OutputStream setBinaryStream(long)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void removeProtectionElementsFromProtectionGroup(java.lang.String,java.lang.String[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contract: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.impl.ScrollableResultsImpl: boolean last()> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter: void <init>(java.lang.Object,java.util.Locale,java.lang.String,boolean)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: boolean getMoreResults(int)> -> _SINK_
<org.hibernate.engine.query.ReturnMetadata: void <init>(java.lang.String[],org.hibernate.type.Type[])> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addEqualConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.Integer)> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getIdentifierQuoteString()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$18: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: boolean exists(java.io.Serializable,java.lang.Object,org.hibernate.type.Type,java.lang.String,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: java.lang.String token(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxStatementLength()> -> _SINK_
<org.hibernate.cfg.HbmBinder: void createClassProperties(org.dom4j.Element,org.hibernate.mapping.PersistentClass,org.hibernate.cfg.Mappings,java.util.Map,org.hibernate.mapping.UniqueKey,boolean,boolean,boolean)> -> _SINK_
<org.hibernate.loader.entity.CollectionElementLoader: void <init>(org.hibernate.persister.collection.QueryableCollection,org.hibernate.engine.SessionFactoryImplementor,java.util.Map)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Lead: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setNull(int,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setOpportunityCompetitors(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.ApplicationServiceImpl: java.util.List getAssociation(java.lang.Object,java.lang.String)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: gov.nih.nci.security.authorization.ObjectAccessMap getObjectAccessMap(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4DatabaseMetaData: java.sql.ResultSet getFunctions(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: int getMaxRows()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.util.Map getTypeMap()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseJDBCCompliantTimezoneShift()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.bridge.NodeList findRelatedNodeList(org.mmbase.bridge.Node,java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void checkUpdatability()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$32: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.springframework.jdbc.core.JdbcOperations: java.lang.Object queryForObject(java.lang.String,java.lang.Class)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setActivityHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.exolab.castor.jdo.engine.GlobalDatabaseImpl: void finalize()> -> _SINK_
<org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider: void closeConnection(java.sql.Connection)> -> _SINK_
<java.sql.Statement: boolean execute(java.lang.String,java.lang.String[])> -> _SINK_
<org.exolab.castor.jdo.engine.BaseFactory: java.lang.Class adjustSqlType(java.lang.Class)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser: java.lang.String resolveProperties(java.lang.String,java.lang.String)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: com.endeca.navigation.ERecSortKeyList parseSortKeyList(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker$WithClauseVisitor: void <init>()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void pauseAll(java.sql.Connection,org.quartz.core.SchedulingContext)> -> _SINK_
<org.postgresql.core.QueryExecutor: org.postgresql.core.Query createSimpleQuery(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.IdentNode: void resolve(boolean,boolean,java.lang.String,antlr.collections.AST)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: double getDouble(java.lang.String)> -> _SINK_
<org.castor.jdo.util.JDOUtils: void closeDatabase(org.exolab.castor.jdo.Database)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CUstom_Setting_1__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$8: java.lang.Object doInSqlMapClient(com.ibatis.sqlmap.client.SqlMapExecutor)> -> _SINK_
<gov.nih.nci.logging.api.appender.jdbc.JDBCExecutor: java.sql.Connection createConn()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeD(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int insertSchedulerState(java.sql.Connection,java.lang.String,long,long)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.lang.String getCursorName()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: boolean last()> -> _SINK_
<com.fasterxml.jackson.databind.ser.std.SqlTimeSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)> -> _SINK_
<org.hibernate.mapping.UniqueKey: java.lang.String sqlDropString(org.hibernate.dialect.Dialect,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: java.lang.String[] getSuffixes()> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavKeyProperties(java.lang.String)> -> _SINK_
<org.postgresql.util.PGtokenizer: void <init>(java.lang.String,char)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLDataException: void <init>(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setBoolean(int,boolean)> -> _SINK_
<org.hibernate.type.NullableType: int sqlType()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateInt(java.lang.String,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void addBatch()> -> _SINK_
<org.postgresql.copy.CopyIn: void writeToCopy(byte[],int,int)> -> _SINK_
<org.exolab.castor.jdo.Database: java.lang.ClassLoader getClassLoader()> -> _SINK_
<test.gov.nih.nci.security.dialect.CSMMySQLInnoDBDialectTest: void testUnSecured()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.Trigger[] selectTriggersForCalendar(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getTinyInt1isBit()> -> _SINK_
<org.postgresql.util.PGtokenizer: int getSize()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$25: void execute(java.sql.Connection)> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator: void panic()> -> _SINK_
<com.mysql.jdbc.Statement: int executeUpdate(java.lang.String,int)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$3: void <init>(org.exolab.castor.gui.QueryAnalyser$MainFrame)> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch$Options: com.datastax.driver.core.querybuilder.Batch add(com.datastax.driver.core.RegularStatement)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void addrExpr(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.lang.Object getObject(int)> -> _SINK_
<org.mmbase.util.QueryConvertor: void setConstraint(org.mmbase.storage.search.implementation.BasicSearchQuery,java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.SingleColumnRowMapper: java.lang.Object mapRow(java.sql.ResultSet,int)> -> _SINK_
<com.datastax.driver.core.exceptions.WriteTimeoutException: void <init>(java.lang.String,java.lang.Throwable,com.datastax.driver.core.ConsistencyLevel,com.datastax.driver.core.WriteType,int,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void doUpdateOfMisfiredTrigger(java.sql.Connection,org.quartz.core.SchedulingContext,org.quartz.Trigger,boolean,java.lang.String,boolean)> -> _SINK_
<org.hibernate.criterion.Projection: java.lang.String toGroupSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.impl.CharacterizationServiceLocalImpl: gov.nih.nci.cananolab.domain.common.Instrument findInstrumentBy(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<oracle.toplink.sessions.SessionLogEntry: oracle.toplink.internal.databaseaccess.Accessor getConnection()> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicQueryHandler: void closeConnection(java.sql.Connection,java.sql.Statement)> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: org.mongodb.morphia.query.UpdateOperations set(java.lang.String,java.lang.Object)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateLong(java.lang.String,long)> -> _SINK_
<com.mchange.v2.sql.filter.RecreatePackage: void <clinit>()> -> _SINK_
<org.apache.ibatis.datasource.pooled.PooledDataSource: boolean pingConnection(org.apache.ibatis.datasource.pooled.PooledConnection)> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getTimeDateFunctions()> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: org.exolab.castor.jdo.Query getQuery()> -> _SINK_
<org.mmbase.bridge.Cloud: org.mmbase.bridge.Query createQuery()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: boolean next()> -> _SINK_
<org.springframework.jdbc.core.SqlInOutParameter: void <init>(java.lang.String,int,java.lang.String,org.springframework.jdbc.core.SqlReturnType)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Group: int hashCode()> -> _SINK_
<com.mchange.v2.sql.SqlUtils: void <clinit>()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getAllowUrlInLocalInfile()> -> _SINK_
<org.springframework.jdbc.core.JdbcOperations: java.lang.Object queryForObject(java.lang.String,java.lang.Object[],org.springframework.jdbc.core.RowMapper)> -> _SINK_
<org.hibernate.jdbc.ConnectionManager: java.sql.Connection borrowConnection()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Blob getBlob(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement$StatementResultHandler: void handleError(java.sql.SQLException)> -> _SINK_
<org.hibernate.dialect.PostgreSQLDialect: java.lang.String getSelectSequenceNextValString(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contract: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.util.Map parseACL(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.geometric.PGpoint: void toBytes(byte[],int)> -> _SINK_
<org.castor.jdo.conf.Database: void addMapping(org.castor.jdo.conf.Mapping)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsLikeEscapeClause()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsOpenCursorsAcrossCommit()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: int[] executeBatch()> -> _SINK_
<org.hibernate.sql.SelectFragment: org.hibernate.sql.SelectFragment addColumn(java.lang.String)> -> _SINK_
<gov.nih.nci.system.query.cql.CQLObject: void <init>(gov.nih.nci.system.query.cql.CQLAssociation,gov.nih.nci.system.query.cql.CQLAttribute,gov.nih.nci.system.query.cql.CQLGroup,java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.Queries: java.lang.Object max(org.mmbase.bridge.Query,org.mmbase.storage.search.StepField)> -> _SINK_
<com.sforce.soap.enterprise.QueryResponse_element: void setResult(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.loader.JoinWalker: java.lang.String getSQLString()> -> _SINK_
<org.exolab.castor.dtx.DTXQuery: void bind(int,java.lang.String)> -> _SINK_
<org.hibernate.engine.query.NativeSQLQueryPlan: int bindNamedParameters(java.sql.PreparedStatement,java.util.Map,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.exolab.castor.dtx.DTXEngine: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateClob(int,java.sql.Clob)> -> _SINK_
<org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor: java.sql.Statement getNativeStatement(java.sql.Statement)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: int getNumberOfCalendars(java.sql.Connection,org.quartz.core.SchedulingContext)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<org.springframework.jdbc.core.support.AbstractInterruptibleBatchPreparedStatementSetter: void setValues(java.sql.PreparedStatement,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setQueriesBeforeRetryMaster(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean deleteTriggerAndChildren(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: long getLong(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Timestamp getTimestamp(int)> -> _SINK_
<com.mysql.jdbc.Connection: void recachePreparedStatement(com.mysql.jdbc.ServerPreparedStatement)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: java.lang.Object queryForObject(java.lang.String,java.lang.Object)> -> _SINK_
<java.sql.ResultSet: void updateTimestamp(int,java.sql.Timestamp)> -> _SINK_
<org.hibernate.mapping.PersistentClass: org.hibernate.engine.ExecuteUpdateResultCheckStyle getCustomSQLUpdateCheckStyle()> -> _SINK_
<com.sforce.soap.enterprise.sobject.RevenueForecast: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringDecoder: void <init>(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setQueryTimeout(int)> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder start(java.lang.String)> -> _SINK_
<org.exolab.castor.persist.QueryResults: void close()> -> _SINK_
<java.sql.Connection: java.sql.DatabaseMetaData getMetaData()> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: void addCoreType(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.Integer)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Asset: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.geometric.PGpoint: void translate(double,double)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLTimeoutException: void <init>(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlltrim(java.util.List)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void createSequence()> -> _SINK_
<org.hibernate.lob.SerializableBlob: java.io.InputStream getBinaryStream()> -> _SINK_
<java.sql.CallableStatement: java.sql.Clob getClob(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.TaskJunction__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: void removeRow(int)> -> _SINK_
<gov.nih.nci.logging.api.appender.jdbc.SQLGenerator: java.util.List getObjectStateSQLStatements(gov.nih.nci.logging.api.domain.LogMessage)> -> _SINK_
<org.apache.axis.transport.http.QSWSDLHandler: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean locatorsUpdateCopy()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: java.lang.Object unwrap(java.lang.Class)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsMinimumSQLGrammar()> -> _SINK_
<org.hibernate.type.TimeType: java.lang.Object deepCopyNotNull(java.lang.Object)> -> _SINK_
<org.springframework.jdbc.core.support.AbstractSqlTypeValue: java.lang.Object createTypeValue(java.sql.Connection,int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateTimestamp(java.lang.String,java.sql.Timestamp)> -> _SINK_
<org.postgresql.core.Logger: int getLogLevel()> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: void removeStoredDataSource()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: int getInt(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.lang.Object getObject(java.lang.String,java.util.Map)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setAlwaysSendSetIsolation(boolean)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlyear(java.util.List)> -> _SINK_
<java.sql.DriverManager: void registerDriver(java.sql.Driver)> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean isAfterLast()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsSubqueriesInIns()> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: java.lang.String getClassNameForJavaType(int,boolean,int,boolean,boolean)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Clob getClob(int)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void maintainInstanceTables(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch$Options: com.datastax.driver.core.Statement setRetryPolicy(com.datastax.driver.core.policies.RetryPolicy)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: int getTransactionIsolation()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setTimestampInternal(int,java.sql.Timestamp,java.util.Calendar,java.util.TimeZone,boolean)> -> _SINK_
<com.sforce.soap.enterprise.fault.ApiQueryFault: void <init>()> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.MixedSqlNode: boolean apply(org.apache.ibatis.builder.xml.dynamic.DynamicContext)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementLoad: void buildStatement()> -> _SINK_
<java.sql.CallableStatement: java.math.BigDecimal getBigDecimal(int,int)> -> _SINK_
<org.hibernate.sql.QuerySelect: void setWhereTokens(java.util.Iterator)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLTransactionRollbackException: void <init>(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Solution: void setCaseSolutions(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setJdbcCompliantTruncation(boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setString(int,java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode: void applyClose(org.apache.ibatis.builder.xml.dynamic.DynamicContext)> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsResult: com.amazonaws.services.datapipeline.model.QueryObjectsResult withIds(java.lang.String[])> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: void setScanIndexForward(java.lang.Boolean)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: java.io.Reader getNCharacterStream(java.lang.String)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.SortOrder addSortOrder(org.mmbase.storage.search.StepField,int,boolean)> -> _SINK_
<com.amazonaws.services.cloudfront.model.ForwardedValues: int hashCode()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.net.URL getURL(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: void setTransactionIsolation(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.sql.CallableStatement prepareCall(java.lang.String,int,int)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getColumnTypeName(int)> -> _SINK_
<org.hibernate.engine.query.HQLQueryPlan: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.bridge.NodeList getList()> -> _SINK_
<org.hibernate.event.def.DefaultMergeEventListener: boolean existsInDatabase(java.lang.Object,org.hibernate.event.EventSource,org.hibernate.persister.entity.EntityPersister)> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getDimSearchNavRecordFilter()> -> _SINK_
<org.castor.persist.resolver.ManyToManyRelationResolver: java.lang.Object postCreate(org.castor.persist.TransactionContext,org.exolab.castor.persist.OID,java.lang.Object,java.lang.Object,org.exolab.castor.persist.spi.Identity)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateNClob(int,java.io.Reader,long)> -> _SINK_
<gov.nih.nci.system.query.cql.CQLPredicate: void <clinit>()> -> _SINK_
<org.apache.axis.encoding.ser.DateDeserializer: java.lang.Object makeValue(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Statement: void addBatch(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.Batcher: java.sql.Connection openConnection()> -> _SINK_
<org.springframework.jdbc.core.SqlOutParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.ResultSetExtractor)> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxBinaryLiteralLength()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.sql.Blob getBlobFromDatabase(org.mmbase.module.core.MMObjectNode,org.mmbase.core.CoreField,boolean)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.Trigger retrieveTrigger(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection$TransactionCommandHandler: void handleError(java.sql.SQLException)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.orm.jdo.DefaultJdoDialect: org.springframework.jdbc.support.SQLExceptionTranslator getJdbcExceptionTranslator()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateNull(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getProcedures(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.ResultSetSupportingSqlParameter: org.springframework.jdbc.core.RowMapper getRowMapper()> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void execute(org.postgresql.core.Query[],org.postgresql.core.ParameterList[],org.postgresql.core.ResultHandler,int,int,int)> -> _SINK_
<org.exolab.castor.jdo.drivers.InformixQueryExpression: void addFromClause(java.lang.StringBuffer)> -> _SINK_
<org.apache.ibatis.logging.jdbc.PreparedStatementLogger: java.sql.PreparedStatement newInstance(java.sql.PreparedStatement,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void registerOutParameter(int,int,java.lang.String)> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.QueryImpl: java.util.Collection retrieveServer()> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: void addOuterJoin(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.ApplicationServiceImpl: java.util.List query(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<java.sql.Statement: void setCursorName(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: org.mmbase.storage.search.implementation.BasicStepField addField(org.mmbase.storage.search.Step,org.mmbase.core.CoreField)> -> _SINK_
<org.postgresql.geometric.PGline: void <init>(double,double,double,double)> -> _SINK_
<com.mysql.jdbc.MysqlIO: int getServerSubMinorVersion()> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator: java.lang.Object generateKey(java.sql.Connection,java.lang.String,java.lang.String,java.util.Properties)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl: void bind(int)> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQueryJoinReturn: void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.hibernate.LockMode)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsOpenStatementsAcrossCommit()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setDouble(java.lang.String,double)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: byte getByte(int)> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: java.lang.Object[] getFieldAndClassDesc(java.lang.String,org.exolab.castor.jdo.engine.JDOClassDescriptor,org.exolab.castor.persist.spi.QueryExpression,java.util.Vector,int)> -> _SINK_
<com.mysql.jdbc.Connection: java.util.Calendar getCalendarInstanceForSessionOrNew()> -> _SINK_
<org.hibernate.sql.SimpleSelect: void and()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema: void <init>(com.mysql.jdbc.Connection,java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: void <init>(org.mmbase.storage.search.SearchQuery,int)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl$2: void handleCommandStatus(java.lang.String,int,long)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CollaborationGroupFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String getIdentifierColumnAlias(java.lang.String)> -> _SINK_
<org.hibernate.type.CustomType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String,org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.ResultSet sqlQueryDirect(com.mysql.jdbc.Statement,java.lang.String,java.lang.String,com.mysql.jdbc.Buffer,int,com.mysql.jdbc.Connection,int,int,boolean,java.lang.String,boolean)> -> _SINK_
<com.mysql.jdbc.RowData: void beforeLast()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$ConnectionProperty: void initializeFrom(javax.naming.Reference)> -> _SINK_
<com.sforce.soap.enterprise.sobject.AssetFeed: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<com.mysql.jdbc.CharsetMapping: java.lang.String getJavaEncodingForMysqlEncoding(java.lang.String,com.mysql.jdbc.Connection)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: boolean getBoolean(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setTimestamp(int,java.sql.Timestamp)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Product2Feed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.engine.transaction.Isolater$JtaDelegate: void delegateWork(org.hibernate.engine.transaction.IsolatedWork,boolean)> -> _SINK_
<com.mysql.jdbc.Buffer: byte[] getByteBuffer()> -> _SINK_
<com.mysql.jdbc.integration.c3p0.MysqlConnectionTester: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: int getFetchDirection()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$46: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: int getMaxRows()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.String convertToZeroLiteralStringWithEmptyCheck()> -> _SINK_
<gov.nih.nci.cagrid.cqlresultset.CQLQueryResults: void setCountResult(gov.nih.nci.cagrid.cqlresultset.CQLCountResult)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: int[] executeBatchSerially()> -> _SINK_
<gov.nih.nci.system.client.proxy.ListProxy: java.lang.Object get(int)> -> _SINK_
<org.postgresql.core.v3.Portal: void <init>(org.postgresql.core.v3.SimpleQuery,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean getBoolean(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean next()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: com.datastax.driver.core.RegularStatement setForceNoValues(boolean)> -> _SINK_
<org.hibernate.dialect.function.StandardSQLFunction: void <init>(java.lang.String)> -> _SINK_
<gov.nih.nci.system.query.cql.CQLQuery: gov.nih.nci.system.query.cql.CQLObject getTarget()> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: org.exolab.castor.jdo.engine.JDOFieldDescriptor checkProjection(org.exolab.castor.jdo.oql.ParseTreeNode,boolean,boolean)> -> _SINK_
<org.postgresql.xa.jdbc3.AbstractJdbc3XADataSource: void <init>()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.Savepoint setSavepoint()> -> _SINK_
<org.hibernate.sql.QueryJoinFragment: void addCondition(java.lang.String,java.lang.String[],java.lang.String[])> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeQuery: void <init>(org.mmbase.bridge.Cloud,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Time getTime(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment: void <init>(java.lang.String)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTransactionManager: java.lang.Object doSuspend(java.lang.Object)> -> _SINK_
<gov.nih.nci.cananolab.service.publication.helper.PublicationServiceHelper: int getNumberOfPublicPublications()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void clearWarnings()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNmrf(java.lang.String)> -> _SINK_
<org.springframework.orm.toplink.LocalSessionFactory: org.springframework.orm.toplink.SessionFactory createSessionFactory()> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcDaoImpl$ObjectPropertiesMapping: java.lang.Object mapRow(java.sql.ResultSet,int)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.TrimSqlNode$FilteredDynamicContext: void <init>(org.apache.ibatis.builder.xml.dynamic.TrimSqlNode,org.apache.ibatis.builder.xml.dynamic.DynamicContext)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setDimSearchDimension(long)> -> _SINK_
<com.mchange.v2.c3p0.DataSources: void forceDestroy(javax.sql.DataSource)> -> _SINK_
<org.postgresql.copy.PGCopyInputStream: void checkClosed()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: org.hibernate.hql.ast.util.AliasGenerator getAliasGenerator()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(org.springframework.jdbc.core.PreparedStatementCreator,org.springframework.jdbc.core.ResultSetExtractor)> -> _SINK_
<org.postgresql.ssl.jdbc4.LazyKeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: java.util.ArrayList getAssignmentSpecifications()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getMaxReconnects()> -> _SINK_
<org.springframework.jdbc.object.RdbmsOperation: java.lang.String getSql()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setAn(java.lang.String)> -> _SINK_
<org.mongodb.morphia.utils.Helper: com.mongodb.DBObject getUpdateOperations(org.mongodb.morphia.query.UpdateOperations)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientFactoryBean: void <init>()> -> _SINK_
<org.apache.ibatis.type.UnknownTypeHandler: org.apache.ibatis.type.JdbcType safeGetJdbcTypeForColumn(java.sql.ResultSetMetaData,java.lang.Integer)> -> _SINK_
<java.sql.Connection: void setTypeMap(java.util.Map)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void clearParameters()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLQuery: org.exolab.castor.persist.spi.Identity nextIdentity(org.exolab.castor.persist.spi.Identity)> -> _SINK_
<org.hibernate.criterion.ProjectionList: org.hibernate.type.Type[] getTypes(java.lang.String,org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.mongodb.morphia.query.Query: int getLimit()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: int executeUpdate(java.lang.String)> -> _SINK_
<org.postgresql.core.v3.CopyInImpl: long endCopy()> -> _SINK_
<org.apache.commons.beanutils.converters.SqlTimeConverter: void <init>()> -> _SINK_
<org.mmbase.cache.ChainedReleaseStrategy: boolean doEvaluate(org.mmbase.core.event.NodeEvent,org.mmbase.storage.search.SearchQuery,java.util.List)> -> _SINK_
<com.mysql.jdbc.RowDataStatic: void <init>(java.util.ArrayList)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: int getQueryTimeout()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: com.datastax.driver.core.querybuilder.Update$Options using(com.datastax.driver.core.querybuilder.Using)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseGmtMillisForDatetimes()> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.UpdateTagSupport: int doStartTag()> -> _SINK_
<org.springframework.orm.hibernate3.LocalSessionFactoryBean$3: java.lang.Object doInHibernate(org.hibernate.Session)> -> _SINK_
<org.hibernate.persister.collection.SQLLoadableCollection: java.lang.String getIdentifierColumnName()> -> _SINK_
<gov.nih.nci.cananolab.ui.sample.SearchSampleAction: java.util.List querySamples(org.apache.struts.action.ActionForm,javax.servlet.http.HttpServletRequest)> -> _SINK_
<org.mmbase.module.core.ClusterBuilder: java.util.Map addSteps(org.mmbase.storage.search.implementation.BasicSearchQuery,java.util.List,java.util.Map,boolean,java.util.Map)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Connection: java.sql.Savepoint setSavepoint()> -> _SINK_
<com.datastax.driver.core.ExecutionInfo: com.datastax.driver.core.ExecutionInfo withAchievedConsistency(com.datastax.driver.core.ConsistencyLevel)> -> _SINK_
<org.apache.ibatis.type.SqlTimestampTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<org.hibernate.exception.SQLExceptionConverterFactory: void <clinit>()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$17: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate$38: java.lang.Object doInHibernate(org.hibernate.Session)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: int[] executeBatch()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getMaxColumnsInIndex()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.SDK4QueryProcessor: void initialize(java.util.Properties,java.io.InputStream)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: void convertToJdbcFunctionList(java.lang.String,java.sql.ResultSet,boolean,java.lang.String,java.util.Map,int)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: char getSuccessor(char,int)> -> _SINK_
<org.hibernate.sql.ANSIJoinFragment: void addJoin(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],int,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: int getUpdateCount()> -> _SINK_
<org.apache.ibatis.mapping.Environment$Builder: void <init>(java.lang.String,org.apache.ibatis.transaction.TransactionFactory,javax.sql.DataSource)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.lang.Object getObject(java.lang.String,java.util.Map)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setURL(java.lang.String,java.net.URL)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch$Options: java.lang.String getKeyspace()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void storeBinaryAsFile(org.mmbase.module.core.MMObjectNode,org.mmbase.core.CoreField)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setDate(java.lang.String,java.sql.Date)> -> _SINK_
<org.hibernate.type.TimestampType: boolean isEqual(java.lang.Object,java.lang.Object)> -> _SINK_
<java.sql.Statement: java.sql.Connection getConnection()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsCorrelatedSubqueries()> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: boolean isDistinct()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean doCheckin()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.Object initializeLazyPropertiesFromDatastore(java.lang.String,java.lang.Object,org.hibernate.engine.SessionImplementor,java.io.Serializable,org.hibernate.engine.EntityEntry)> -> _SINK_
<org.springframework.jdbc.object.BatchSqlUpdate$1: void <init>(org.springframework.jdbc.object.BatchSqlUpdate)> -> _SINK_
<org.postgresql.core.TypeInfo: java.lang.String getPGType(int)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSessionFactory: org.apache.ibatis.session.SqlSession openSession(org.apache.ibatis.session.ExecutorType,java.sql.Connection)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsUnionAll()> -> _SINK_
<java.sql.Date: java.lang.String toString()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.io.InputStream getUnicodeStream(int)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.SetSqlNode: void <init>(org.apache.ibatis.session.Configuration,org.apache.ibatis.builder.xml.dynamic.SqlNode)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<java.sql.ResultSet: java.io.Reader getCharacterStream(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setLong(int,long)> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder exists(java.lang.Object)> -> _SINK_
<org.hibernate.criterion.SQLProjection: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.hibernate.type.Type[])> -> _SINK_
<java.sql.Clob: long length()> -> _SINK_
<org.apache.ibatis.mapping.ResultMapping$Builder: org.apache.ibatis.mapping.ResultMapping$Builder nestedQueryId(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(java.lang.String,org.springframework.jdbc.core.PreparedStatementSetter,org.springframework.jdbc.core.ResultSetExtractor)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: double getDouble(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: void incrementNumberOfResultSetsCreated()> -> _SINK_
<org.apache.axis.transport.http.AbstractQueryStringHandler: void writeFault(java.io.PrintWriter,org.apache.axis.AxisFault)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void delete(org.mmbase.core.CoreField)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void separator(antlr.collections.AST,java.lang.String)> -> _SINK_
<org.hibernate.stat.Statistics: java.lang.String getQueryExecutionMaxTimeQueryString()> -> _SINK_
<org.mmbase.module.database.MultiPoolHandler: void shutdown()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: antlr.collections.AST generateNamedParameter(antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<org.mmbase.module.database.JDBC: void onload()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: boolean checkPermissionForGroup(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: boolean isValid()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setEmailStatuses(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsExtendedSQLGrammar()> -> _SINK_
<org.apache.ibatis.datasource.pooled.PooledConnection: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl$OQLEnumeration: boolean hasMoreElements()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Campaign: void setLeads(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.NonRegisteringDriver: java.lang.String database(java.util.Properties)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: com.datastax.driver.core.querybuilder.Insert$Options and(com.datastax.driver.core.querybuilder.Using)> -> _SINK_
<org.mmbase.util.functions.ExampleBean: java.lang.Object successor()> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.sql.PreparedStatement prepareSelectStatement(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getMetadataCacheSize()> -> _SINK_
<org.postgresql.core.Field: void setNullable(int)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$ErrorTrackingResultHandler: void handleCommandStatus(java.lang.String,int,long)> -> _SINK_
<au.com.bytecode.opencsv.ResultSetHelperService: java.lang.String handleDate(java.sql.ResultSet,int)> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapExecutor: java.util.Map queryForMap(java.lang.String,java.lang.Object,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationServiceFacade: java.util.List query(java.lang.Object,java.lang.Integer,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: long getLong(int)> -> _SINK_
<org.hibernate.id.IdentityGenerator$GetGeneratedKeysDelegate: java.io.Serializable executeAndExtract(java.sql.PreparedStatement)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsBatchUpdates()> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Ref getRef(java.lang.String)> -> _SINK_
<java.sql.CallableStatement: byte[] getBytes(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.oql.ParseTreeWalker: void checkInClauseRightSide(org.exolab.castor.jdo.oql.ParseTreeNode)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setActivityHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getTcpSndBuf()> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodesFactory: org.springframework.jdbc.support.SQLErrorCodes getErrorCodes(java.lang.String)> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder near(double,double,double)> -> _SINK_
<org.springframework.orm.jdo.JdoTemplate: void prepareQuery(javax.jdo.Query)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setTime(int,java.sql.Time)> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.StratifiedDimValList getNavStratifiedDimVals()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setCalendarDate(java.lang.String,java.util.Calendar)> -> _SINK_
<org.postgresql.util.PGInterval: double getSeconds()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Array getArray(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: void reportMetricsIfNeeded()> -> _SINK_
<org.apache.taglibs.standard.tlv.JstlSqlTLV$Handler: void <init>(org.apache.taglibs.standard.tlv.JstlSqlTLV)> -> _SINK_
<com.amazonaws.services.datapipeline.model.transform.QueryObjectsRequestMarshaller: com.amazonaws.Request marshall(com.amazonaws.services.datapipeline.model.QueryObjectsRequest)> -> _SINK_
<org.springframework.orm.hibernate3.SessionFactoryUtils: org.hibernate.Session doGetSession(org.hibernate.SessionFactory,boolean)> -> _SINK_
<org.mmbase.bridge.util.TreeList: void <init>(org.mmbase.bridge.NodeQuery)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.SampleServiceHelper: java.util.List findKeywordsBySampleId(java.lang.String)> -> _SINK_
<org.acegisecurity.util.UrlUtils: java.lang.String getFullRequestUrl(org.acegisecurity.intercept.web.FilterInvocation)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: java.lang.String getColumnName(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$ListSetIdxAssignment: void <init>(java.lang.String,int,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateBoolean(java.lang.String,boolean)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: java.util.Calendar getCalendar(int,int,int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsOuterJoins()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsSubqueriesInComparisons()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setTime(int,java.sql.Time)> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean last()> -> _SINK_
<org.hibernate.dialect.Dialect$3: org.hibernate.type.Type getReturnType(org.hibernate.type.Type,org.hibernate.engine.Mapping)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DriverTag: int doStartTag()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$24: void execute(java.sql.Connection)> -> _SINK_
<org.postgresql.core.Field: void <init>(java.lang.String,int,int,int)> -> _SINK_
<org.hibernate.dialect.PostgreSQLDialect: void <clinit>()> -> _SINK_
<org.hibernate.stat.Statistics: long getQueryExecutionCount()> -> _SINK_
<com.mysql.jdbc.util.ReadAheadInputStream: int read(byte[],int,int)> -> _SINK_
<gov.nih.nci.system.query.cql.CQLGroup: gov.nih.nci.system.query.cql.CQLLogicalOperator getLogicOperator()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$Convertor: java.lang.Class access$000(org.castor.jdo.engine.SQLTypeConverters$Convertor)> -> _SINK_
<org.gjt.mm.mysql.Driver: void <init>()> -> _SINK_
<org.hibernate.loader.custom.CustomQuery: java.util.List getCustomQueryReturns()> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: void testEstimatedResultSize_WithResults()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeDo(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Asset: void setCases(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: boolean getBoolean(int)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setBytes(int,byte[])> -> _SINK_
<com.sforce.soap.enterprise.fault.MalformedQueryFault: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.exolab.castor.jdo.drivers.OracleQueryExpression: void <clinit>()> -> _SINK_
<com.mysql.jdbc.CompressedInputStream: long skip(long)> -> _SINK_
<com.mysql.jdbc.ResultSet: void <init>(java.lang.String,com.mysql.jdbc.Field[],com.mysql.jdbc.RowData,com.mysql.jdbc.Connection,com.mysql.jdbc.Statement)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: void <init>(com.mysql.jdbc.jdbc2.optional.ConnectionWrapper,com.mysql.jdbc.jdbc2.optional.MysqlPooledConnection,java.sql.Statement)> -> _SINK_
<org.mongodb.morphia.mapping.Mapper: org.mongodb.morphia.mapping.MappedField validate(java.lang.Class,org.mongodb.morphia.mapping.Mapper,java.lang.StringBuffer,org.mongodb.morphia.query.FilterOperator,java.lang.Object,boolean,boolean)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimeLocaleConverter: void <init>(java.util.Locale,java.lang.String,boolean)> -> _SINK_
<org.hibernate.dialect.function.ClassicSumFunction: void <init>()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.Integer)> -> _SINK_
<org.postgresql.xa.PGXADataSourceFactory: void <init>()> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.DynamoDBMapper: com.amazonaws.services.dynamodb.datamodeling.PaginatedQueryList query(java.lang.Class,com.amazonaws.services.dynamodb.datamodeling.DynamoDBQueryExpression)> -> _SINK_
<com.mysql.jdbc.CallableStatement: int mapOutputParameterIndexToRsIndex(int)> -> _SINK_
<com.mysql.jdbc.profiler.ProfileEventSink: void consumeEvent(com.mysql.jdbc.profiler.ProfilerEvent)> -> _SINK_
<com.sforce.soap.enterprise.sobject.CollaborationGroup: void setGroupMembers(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ParameterMetaData: int getParameterType(int)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void readFromCopy(org.postgresql.core.v3.CopyOutImpl)> -> _SINK_
<org.hibernate.criterion.SQLProjection: java.lang.String toGroupSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.mmbase.storage.search.SearchQueryHandler: java.util.List getNodes(org.mmbase.storage.search.SearchQuery,org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: java.lang.String toString()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void addEntityToFetch(java.lang.String)> -> _SINK_
<org.apache.axis.transport.http.AbstractQueryStringHandler: void configureFromContext(org.apache.axis.MessageContext)> -> _SINK_
<java.sql.Connection: void setHoldability(int)> -> _SINK_
<org.exolab.castor.jdo.engine.SimpleQueryExecutor$SimpleQueryResults: java.lang.Object next(boolean)> -> _SINK_
<org.postgresql.core.PGStream: org.postgresql.util.HostSpec getHostSpec()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setNull(int,int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateLong(int,long)> -> _SINK_
<com.mysql.jdbc.Connection: java.lang.String getServerVersion()> -> _SINK_
<com.mysql.jdbc.Connection: int getMaxAllowedPacket()> -> _SINK_
<com.mysql.jdbc.Buffer: byte[] getBytes(int,int)> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$4: java.lang.Object getValue(java.lang.Object)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateAccessor: org.springframework.jdbc.support.SQLExceptionTranslator getDefaultJdbcExceptionTranslator()> -> _SINK_
<com.mysql.jdbc.integration.jboss.ExtendedMysqlExceptionSorter: boolean isExceptionFatal(java.sql.SQLException)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.lang.String modifyJdbcCall(java.lang.String)> -> _SINK_
<org.apache.ibatis.mapping.MappedStatement: org.apache.ibatis.mapping.SqlSource access$300(org.apache.ibatis.mapping.MappedStatement)> -> _SINK_
<org.hibernate.hql.QueryTranslator: int executeUpdate(org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder: void SELECT(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: void loadServerVariables()> -> _SINK_
<org.postgresql.ds.jdbc4.AbstractJdbc4SimpleDataSource: void <init>()> -> _SINK_
<com.mysql.jdbc.Connection: com.mysql.jdbc.PreparedStatement clientPrepareStatement(java.lang.String,int,int)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ResultSet: void updateRef(java.lang.String,java.sql.Ref)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion geAll(java.lang.Object,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<com.mysql.jdbc.ResultSet: int findColumn(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$ConnectionProperty: java.sql.DriverPropertyInfo getAsDriverPropertyInfo()> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: java.lang.Object createResultObject(java.sql.ResultSet,org.apache.ibatis.mapping.ResultMap)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: boolean first()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setCharacterStream(int,java.io.Reader,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setRelaxAutoCommit(boolean)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: org.springframework.jdbc.support.rowset.SqlRowSet queryForRowSet(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource)> -> _SINK_
<com.mysql.jdbc.Connection: void setReadOnlyInternal(boolean)> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsRequest: boolean equals(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.Connection: long getId()> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: void setMaxRows(int)> -> _SINK_
<org.postgresql.core.VisibleBufferedInputStream: void doubleBuffer()> -> _SINK_
<com.endeca.navigation.ENEQueryInfo: void init(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.SqlReturnResultSet: void <init>(java.lang.String,org.springframework.jdbc.core.RowCallbackHandler)> -> _SINK_
<org.hibernate.cfg.Settings: boolean isQueryCacheEnabled()> -> _SINK_
<com.mysql.jdbc.BlobFromLocator: long position(byte[],long)> -> _SINK_
<org.hibernate.type.TimeType: java.lang.String objectToSQLString(java.lang.Object,org.hibernate.dialect.Dialect)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: byte[] getBytes(int)> -> _SINK_
<com.amazonaws.services.datapipeline.model.transform.QueryObjectsResultJsonUnmarshaller: void <init>()> -> _SINK_
<gov.nih.nci.system.client.proxy.ListProxy: boolean contains(java.lang.Object)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void assignOwners(java.lang.String,java.lang.String[])> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.Object getObject(java.lang.String,java.util.Map)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3DatabaseMetaData: boolean supportsSavepoints()> -> _SINK_
<com.mysql.jdbc.NotImplemented: void <init>()> -> _SINK_
<com.mysql.jdbc.log.LogUtils: java.lang.Object expandProfilerEventIfNecessary(java.lang.Object)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: int getConcurrency()> -> _SINK_
<org.springframework.orm.hibernate3.support.ClobStringType: java.lang.Object nullSafeGetInternal(java.sql.ResultSet,java.lang.String[],java.lang.Object,org.springframework.jdbc.support.lob.LobHandler)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Expense__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mongodb.morphia.query.Shape: void <init>(java.lang.String,org.mongodb.morphia.query.Shape$Point[])> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object greaterThan(java.lang.Object)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void registerOutParameter(java.lang.String,int,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: int getFetchDirection()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$1ProxyStatement: java.sql.ResultSet getResultSet()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.lang.Object getObject(int,java.util.Map)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String[] getSQLInsertStrings()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxCursorNameLength()> -> _SINK_
<org.springframework.jdbc.datasource.SingleConnectionDataSource: java.sql.Connection getConnection()> -> _SINK_
<com.mongodb.OutMessage: com.mongodb.OutMessage query(com.mongodb.DBCollection,int,int,int,com.mongodb.DBObject,com.mongodb.DBObject)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setNCharacterStream(java.lang.String,java.io.Reader)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlXAConnection: void commit(javax.transaction.xa.Xid,boolean)> -> _SINK_
<org.postgresql.core.v3.CompositeParameterList: void checkAllParametersSet()> -> _SINK_
<gov.nih.nci.cananolab.service.publication.helper.PublicationServiceHelper: java.util.List findPublicationsBySampleId(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: int getFetchDirection()> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: void initialize()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getStrictFloatingPoint()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int)> -> _SINK_
<org.mmbase.util.functions.ExampleBuilder$4: java.lang.Object getFunctionValue(org.mmbase.bridge.Node,org.mmbase.util.functions.Parameters)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Date getDate(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: long getLong(int)> -> _SINK_
<org.postgresql.geometric.PGpoint: void setLocation(int,int)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: int writeKey(java.sql.PreparedStatement,java.io.Serializable,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.Util: long[] newHash(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: void rollback(java.sql.Savepoint)> -> _SINK_
<com.datastax.driver.core.querybuilder.Batch: com.datastax.driver.core.querybuilder.Batch add(com.datastax.driver.core.RegularStatement)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: byte getByte(java.lang.String)> -> _SINK_
<java.sql.ResultSet: boolean isBeforeFirst()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setUnicodeStream(int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.lang.Object unwrap(java.lang.Class)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTransactionManager: void doResume(java.lang.Object,java.lang.Object)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreCMT: java.sql.Connection getNonManagedTXConnection()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.Statement createMetaDataStatement()> -> _SINK_
<org.hibernate.lob.SerializableBlob: long position(byte[],long)> -> _SINK_
<com.mysql.jdbc.NamedPipeSocketFactory$RandomAccessFileOutputStream: void <init>(com.mysql.jdbc.NamedPipeSocketFactory,java.io.RandomAccessFile)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Clob: long position(java.lang.String,long)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateString(int,java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl greaterThanOrEq(java.lang.Object)> -> _SINK_
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractorAdapter: java.sql.Connection getNativeConnectionFromStatement(java.sql.Statement)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: int storeValues(java.lang.Object[],int,int[],int,int,int)> -> _SINK_
<org.springframework.jdbc.support.JdbcUtils: boolean supportsBatchUpdates(java.sql.Connection)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> -> _SINK_
<org.mmbase.module.corebuilders.RelDef: int getNumberByName(java.lang.String,boolean)> -> _SINK_
<org.hibernate.type.AnyType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Delete$Selection delete()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.Query get(java.lang.Class,java.lang.Iterable)> -> _SINK_
<org.apache.ibatis.executor.statement.BaseStatementHandler: void closeStatement(java.sql.Statement)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: java.lang.Object load(java.lang.Class,java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setFloat(java.lang.String,float)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<org.quartz.impl.jdbcjobstore.PointbaseDelegate: int insertJobDetail(java.sql.Connection,org.quartz.JobDetail)> -> _SINK_
<com.amazonaws.services.dynamodb.AmazonDynamoDBAsyncClient: java.util.concurrent.Future queryAsync(com.amazonaws.services.dynamodb.model.QueryRequest,com.amazonaws.handlers.AsyncHandler)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: void <init>(org.mmbase.bridge.Cloud,boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void reset(boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setBigDecimal(java.lang.String,java.math.BigDecimal)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTransactionManager: java.lang.Object doGetTransaction()> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: void delete(java.lang.String,java.lang.Object,int)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: boolean absolute(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$ConnectionProperty: void storeTo(javax.naming.Reference)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$2: void actionPerformed(java.awt.event.ActionEvent)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Group: gov.nih.nci.cagrid.cqlquery.LogicalOperator getLogicRelation()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteBlobTrigger(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$7: void <init>(org.exolab.castor.mapping.xml.SqlDescriptor)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.sql.DatabaseMetaData getMetaData()> -> _SINK_
<java.sql.Statement: void setEscapeProcessing(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: boolean execute(java.lang.String,int)> -> _SINK_
<org.springframework.orm.hibernate3.LocalSessionFactoryBean: void updateDatabaseSchema()> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryConfigurer: void <init>()> -> _SINK_
<org.exolab.castor.jdo.engine.LocalDatabaseImpl: void <clinit>()> -> _SINK_
<com.mchange.v2.c3p0.filter.FilterDataSource: void setLoginTimeout(int)> -> _SINK_
<org.apache.http.client.utils.URIBuilder: org.apache.http.client.utils.URIBuilder setQuery(java.lang.String)> -> _SINK_
<java.sql.Statement: java.sql.ResultSet getResultSet()> -> _SINK_
<org.hibernate.cfg.Settings: void setShowSqlEnabled(boolean)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void forceClose()> -> _SINK_
<gov.nih.nci.cagrid.cqlresultset.CQLQueryResults: java.lang.String getTargetClassname()> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: void cancelLastQuery()> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$ErrorTrackingResultHandler: void handleResultRows(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: float getFloat(int)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.net.URL getURL(int)> -> _SINK_
<org.apache.ibatis.datasource.unpooled.UnpooledDataSource: void configureConnection(java.sql.Connection)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<java.sql.PreparedStatement: void setNull(int,int,java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addEqualConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.Object)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.NestedCriteria2HQL: boolean inRequired()> -> _SINK_
<gov.nih.nci.logging.api.appender.jdbc.SQLGenerator: java.util.List getSQLStatements(gov.nih.nci.logging.api.domain.LogMessage)> -> _SINK_
<com.mysql.jdbc.Statement: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void insertRow()> -> _SINK_
<org.postgresql.geometric.PGbox: void toBytes(byte[],int)> -> _SINK_
<com.mysql.jdbc.log.Jdk14Logger: void logError(java.lang.Object,java.lang.Throwable)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl$2: void <init>(org.postgresql.core.v2.QueryExecutorImpl,org.postgresql.core.ResultHandler)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: java.lang.Object raw(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.lang.String getUserName()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.encoding.SDK40Serializer: void serialize(javax.xml.namespace.QName,org.xml.sax.Attributes,java.lang.Object,org.apache.axis.encoding.SerializationContext)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: boolean isTracing()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setCaseSolutions(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.FieldValueConstraint createConstraint(org.mmbase.storage.search.StepField,java.lang.Object)> -> _SINK_
<org.hibernate.persister.entity.UnionSubclassEntityPersister: java.lang.String generateSelectString(org.hibernate.LockMode)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setMaxFieldSize(int)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.LogicalOperator: int hashCode()> -> _SINK_
<org.hibernate.impl.SessionImpl: int executeNativeUpdate(org.hibernate.engine.query.sql.NativeSQLQuerySpecification,org.hibernate.engine.QueryParameters)> -> _SINK_
<com.sforce.soap.enterprise.sobject.TestObj1__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.util.Properties exposeAsProperties(java.util.Properties)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxColumnsInSelect()> -> _SINK_
<org.castor.jdo.engine.JNDIConnectionFactory: java.sql.Connection createConnection()> -> _SINK_
<org.hibernate.hql.ast.QuerySyntaxException: org.hibernate.hql.ast.QuerySyntaxException convert(antlr.RecognitionException)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: org.hibernate.type.Type getType(org.hibernate.Criteria,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.io.InputStream getUnicodeStream(int)> -> _SINK_
<org.springframework.jdbc.object.RdbmsOperation: void setDataSource(javax.sql.DataSource)> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean reallyResult()> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl: void bind(float)> -> _SINK_
<org.castor.jdo.engine.DriverConnectionFactory: java.sql.Connection createConnection()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void assignParentProtectionGroup(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.v3.CompositeParameterList: int[] getTypeOIDs()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: boolean isCompiled()> -> _SINK_
<com.endeca.navigation.EmptyENEQueryException: void <init>()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: void insert(java.io.Serializable,java.lang.Object[],java.lang.Object,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.RowData: void setCurrentRow(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: void setHoldability(int)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[])> -> _SINK_
<org.mmbase.module.core.ClusterBuilder: void addSortOrders(org.mmbase.storage.search.implementation.BasicSearchQuery,java.util.List,java.util.List,java.util.Map)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: java.lang.Object queryForObject(java.lang.String)> -> _SINK_
<org.apache.ibatis.type.BooleanTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void selectClause(antlr.collections.AST)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager$1: void <init>(int)> -> _SINK_
<org.mmbase.bridge.util.TreeList: org.mmbase.bridge.NodeQuery getQuery(java.lang.String[])> -> _SINK_
<org.hibernate.hql.classic.SelectPathExpressionParser: void end(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: void setUp()> -> _SINK_
<org.postgresql.core.v2.ProtocolConnectionImpl: void setBackendKeyData(int,int)> -> _SINK_
<com.mongodb.MongoURI: com.mongodb.DB connectDB(com.mongodb.Mongo)> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: org.mongodb.morphia.query.UpdateOperations add(java.lang.String,java.lang.Object,boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contract: void setOpenActivities(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void inList(antlr.collections.AST)> -> _SINK_
<org.hibernate.loader.JoinWalker: java.lang.String orderBy(java.util.List)> -> _SINK_
<org.eclipse.acceleo.engine.generation.AcceleoEngine: java.lang.Object doEvaluate(org.eclipse.acceleo.model.mtl.Template,java.util.List)> -> _SINK_
<org.exolab.castor.jdo.engine.JDOMappingLoader: org.exolab.castor.mapping.loader.TypeInfo getTypeInfo(java.lang.Class,org.exolab.castor.mapping.CollectionHandler,org.exolab.castor.mapping.xml.FieldMapping)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLHelper: void <clinit>()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: int getMaxSchemaNameLength()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLColumnInfo: org.exolab.castor.mapping.TypeConvertor getConvertTo()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateBlob(int,java.io.InputStream)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Quote: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void setResultSetConcurrency(int)> -> _SINK_
<com.amazonaws.auth.AbstractAWSSigner: byte[] getBinaryRequestPayloadWithoutQueryParams(com.amazonaws.Request)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: void <init>()> -> _SINK_
<java.sql.ResultSet: byte getByte(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getHoldResultsOpenOverStatementClose()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Clause lte(java.lang.String,java.lang.Object)> -> _SINK_
<com.endeca.navigation.ENEQuery: com.endeca.navigation.DimValIdList getNavDescriptors()> -> _SINK_
<freemarker.ext.dom.XPathSupport: freemarker.template.TemplateModel executeQuery(java.lang.Object,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void clearParameters()> -> _SINK_
<org.springframework.jdbc.core.SqlInOutParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.RowCallbackHandler)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: void <init>(com.datastax.driver.core.querybuilder.Update)> -> _SINK_
<com.mysql.jdbc.MysqlParameterMetadata: java.lang.String getParameterTypeName(int)> -> _SINK_
<org.hibernate.dialect.Dialect: java.sql.ResultSet getResultSet(java.sql.CallableStatement)> -> _SINK_
<org.mmbase.storage.implementation.database.InformixStorageManager: void closeInformix()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$1ProxyPreparedStatement: java.sql.ResultSet executeQuery()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int insertJobListener(java.sql.Connection,org.quartz.JobDetail,java.lang.String)> -> _SINK_
<org.hibernate.hql.QueryTranslatorFactory: org.hibernate.hql.QueryTranslator createQueryTranslator(java.lang.String,java.lang.String,java.util.Map,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Blob getBlob(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqluser(java.util.List)> -> _SINK_
<org.mmbase.module.database.MultiStatement: void cancel()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: com.datastax.driver.core.Statement enableTracing()> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteria: void setTargetCollection(boolean)> -> _SINK_
<org.hibernate.lob.SerializableClob: java.io.InputStream getAsciiStream()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Quote: void setEvents(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: int executeUpdate(java.lang.String,int)> -> _SINK_
<com.sforce.soap.enterprise.fault.InvalidSObjectFault: java.lang.String toString()> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl: org.hibernate.type.Type[] getReturnTypes()> -> _SINK_
<org.exolab.castor.jdo.drivers.InterbaseFactory: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.SampleServiceHelper: java.util.List findSampleNamesBy(java.lang.String)> -> _SINK_
<org.hibernate.impl.IteratorImpl: java.lang.Object next()> -> _SINK_
<java.sql.CallableStatement: void registerOutParameter(int,int)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Predicate: boolean equals(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.Connection: void addToHistogram(int[],long[],long,int,long,long)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: float getFloat(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.SuspendableXAConnection: void forget(javax.transaction.xa.Xid)> -> _SINK_
<org.postgresql.core.v2.V2Query: java.lang.String[] getFragments()> -> _SINK_
<gov.nih.nci.cagrid.data.enumeration.common.EnumerationDataServiceI: gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer enumerationQuery(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.math.BigDecimal getNativeBigDecimal(int,int)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: void setLastSQL(java.lang.String)> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapExecutor: int update(java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.hql.ast.util.SessionFactoryHelper: org.hibernate.persister.collection.QueryableCollection getCollectionPersister(java.lang.String)> -> _SINK_
<com.endeca.navigation.RefinementConfig: void parseDynamicRefinementCount(java.lang.String)> -> _SINK_
<org.hibernate.impl.QueryImpl: org.hibernate.ScrollableResults scroll()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setNull(int,int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: void <init>(byte,java.lang.String,java.lang.String,long,int,int,long,long,java.lang.String,java.lang.String,java.lang.Throwable,java.lang.String)> -> _SINK_
<gov.nih.nci.system.query.nestedcriteria.NestedCriteria: void setSourceRoleName(java.lang.String)> -> _SINK_
<org.castor.jdo.engine.SQLTypeInfos$TypeInfo: void <init>(int,java.lang.String,java.lang.Class)> -> _SINK_
<org.hibernate.usertype.CompositeUserType: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSourceFactory: javax.sql.DataSource createSerializable(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.lang.String getCatalog()> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean getBoolean(int)> -> _SINK_
<org.exolab.castor.xml.handlers.SQLTimestampFieldHandler: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.postgresql.geometric.PGpath: void <init>()> -> _SINK_
<org.hibernate.sql.InFragment: org.hibernate.sql.InFragment addValue(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.NamedPipeSocketFactory: java.net.Socket connect(java.lang.String,int,java.util.Properties)> -> _SINK_
<org.hibernate.collection.PersistentList: java.lang.Object readFrom(java.sql.ResultSet,org.hibernate.persister.collection.CollectionPersister,org.hibernate.loader.CollectionAliases,java.lang.Object)> -> _SINK_
<org.exolab.castor.jdo.engine.SimpleQueryExecutor$SimpleQueryResults: void <init>(org.exolab.castor.jdo.engine.SimpleQueryExecutor)> -> _SINK_
<org.springframework.jdbc.object.SqlFunction: void setResultType(java.lang.Class)> -> _SINK_
<java.sql.ResultSet: boolean first()> -> _SINK_
<org.postgresql.util.PGInterval: void <init>()> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.StepField addField(org.mmbase.storage.search.Step,org.mmbase.bridge.Field)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.SuspendableXAConnection: void rollback(javax.transaction.xa.Xid)> -> _SINK_
<org.apache.ibatis.session.Configuration: org.apache.ibatis.executor.parameter.ParameterHandler newParameterHandler(org.apache.ibatis.mapping.MappedStatement,java.lang.Object,org.apache.ibatis.mapping.BoundSql)> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxConnections()> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: com.mongodb.DBObject getOps()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.exception.QuerySpecificationException: void <init>(java.lang.String)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void deleteRow()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void clearParameters()> -> _SINK_
<org.hibernate.dialect.function.StandardSQLFunction: void <init>(java.lang.String,org.hibernate.type.Type)> -> _SINK_
<com.amazonaws.services.datapipeline.model.transform.QueryObjectsRequestMarshaller: void <init>()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ParameterMetaData: void <init>(org.postgresql.core.BaseConnection,int[])> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterUtils: java.lang.String substituteNamedParameters(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource)> -> _SINK_
<org.eclipse.acceleo.engine.internal.evaluation.AcceleoEvaluationVisitorDecorator: java.lang.Object visitAcceleoQueryInvocation(org.eclipse.acceleo.model.mtl.QueryInvocation)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int insertJobDetail(java.sql.Connection,org.quartz.JobDetail)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils$RawString: void <init>(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: int getInt(int)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void <clinit>()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection: void ensureOkay()> -> _SINK_
<org.mmbase.bridge.Query: boolean isUsed()> -> _SINK_
<com.sforce.soap.enterprise.sobject.User: void setFeedSubscriptions(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.FieldValueConstraint createConstraint(org.mmbase.storage.search.StepField,int,java.lang.Object)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: org.exolab.castor.jdo.engine.JDOClassDescriptor getDescriptor()> -> _SINK_
<org.springframework.jdbc.support.lob.LobHandler: byte[] getBlobAsBytes(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.mmbase.module.database.Naming: void <clinit>()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Select$Builder select(java.lang.String[])> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseUnbufferedInput(boolean)> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: boolean isIsolated()> -> _SINK_
<org.postgresql.util.PGInterval: int nullSafeIntGet(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsUnionAll()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment decr(java.lang.String,com.datastax.driver.core.querybuilder.BindMarker)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: void createCriteriaEntityNameMap()> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQueryRootReturn: void <init>(java.lang.String,java.lang.String,java.util.Map,org.hibernate.LockMode)> -> _SINK_
<org.postgresql.core.BaseConnection: boolean haveMinimumCompatibleVersion(java.lang.String)> -> _SINK_
<entities.dao.hibernate.DAOHibernateNestedTransaction: int executeUpdate(java.lang.String,java.lang.Object[])> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.lang.String nativeSQL(java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiStatement: int getQueryTimeout()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String generateSelectVersionString()> -> _SINK_
<java.sql.DatabaseMetaData: boolean storesLowerCaseQuotedIdentifiers()> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: void testQuery_NoResults()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.Statement createStatement()> -> _SINK_
<org.hibernate.mapping.Collection: java.lang.String getCustomSQLUpdate()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: com.mysql.jdbc.Buffer fillSendPacket(byte[][],java.io.InputStream[],boolean[],int[])> -> _SINK_
<org.postgresql.geometric.PGpolygon: java.lang.String getValue()> -> _SINK_
<org.hibernate.hql.QueryTranslator: java.lang.String getQueryIdentifier()> -> _SINK_
<org.postgresql.geometric.PGpath: boolean equals(java.lang.Object)> -> _SINK_
<org.mmbase.module.database.JDBC: java.util.Vector getList(org.mmbase.util.PageInfo,org.mmbase.util.StringTagger,java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean: java.lang.String getDisplayName()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Ref getRef(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Clob getNativeClob(int)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Array: java.lang.Object getArray(java.util.Map)> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: void cancelCopy()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: void attach(com.mchange.v2.c3p0.impl.NewPooledConnection)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: void showParse(java.lang.String,java.lang.String,java.util.Calendar,java.util.Date,java.util.Calendar)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementLookup: java.lang.Object executeStatement(java.sql.Connection,org.exolab.castor.persist.spi.Identity)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Asset: void setEvents(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLIntegrityConstraintViolationException: void <init>(java.lang.String)> -> _SINK_
<org.hibernate.criterion.Example: void appendPropertyCondition(java.lang.String,java.lang.Object,org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery,java.lang.StringBuffer)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void addBatch(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setLong(java.lang.String,long)> -> _SINK_
<com.mysql.jdbc.util.ServerController: boolean isNonCommandLineArgument(java.lang.String)> -> _SINK_
<com.mysql.jdbc.StringUtils: int indexOfIgnoreCase(java.lang.String,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setInt(int,int)> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsResult: java.lang.Boolean isHasMoreResults()> -> _SINK_
<org.mmbase.security.Authorization: void <clinit>()> -> _SINK_
<javax.management.MBeanServerConnection: java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void storeReader(com.mysql.jdbc.MysqlIO,int,com.mysql.jdbc.Buffer,java.io.Reader)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters: void <clinit>()> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.List queryForList(java.lang.String,java.util.Map)> -> _SINK_
<gov.nih.nci.cagrid.data.bdt.stubs.BdtQueryRequestCqlQuery: void setCQLQuery(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<org.mmbase.module.database.DatabaseSupportInformix: void <clinit>()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsANSI92EntryLevelSQL()> -> _SINK_
<org.postgresql.xa.RecoveredXid: void <init>()> -> _SINK_
<org.hibernate.criterion.SQLProjection: void <init>(java.lang.String,java.lang.String[],org.hibernate.type.Type[])> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.StringBuilder appendCollection(java.lang.Object,java.lang.StringBuilder,java.util.List)> -> _SINK_
<org.postgresql.core.Parser: boolean isDollarQuoteContChar(char)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema: java.sql.ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.v2.ProtocolConnectionImpl: void setStandardConformingStrings(boolean)> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache$1: void run()> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression: void setRangeKeyConditions(java.util.Map)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsANSI92EntryLevelSQL()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsConvert()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean othersDeletesAreVisible(int)> -> _SINK_
<org.apache.axis.transport.jms.Handler: java.lang.String toExternalForm(java.net.URL)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: java.util.Properties getClientInfo()> -> _SINK_
<org.hibernate.sql.Delete: org.hibernate.sql.Delete setVersionColumnName(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: int getQueryTimeout()> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: void appendDateValue(java.lang.StringBuffer,java.util.Date)> -> _SINK_
<java.sql.CallableStatement: void registerOutParameter(java.lang.String,int,int)> -> _SINK_
<com.mysql.jdbc.Field: boolean isImplicitTemporaryTable()> -> _SINK_
<org.exolab.castor.jdo.OQLQuery: void create(java.lang.String)> -> _SINK_
<gov.nih.nci.system.dao.orm.WritableORMDAOImpl: gov.nih.nci.system.dao.Response query(gov.nih.nci.system.dao.Request)> -> _SINK_
<com.mysql.jdbc.Util: java.lang.String oldCrypt(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.util.Map getTypeMap()> -> _SINK_
<org.hibernate.id.IdentityGenerator$GetGeneratedKeysDelegate: org.hibernate.id.insert.IdentifierGeneratingInsert prepareIdentifierGeneratingInsert()> -> _SINK_
<com.mysql.jdbc.CommunicationsException: void <init>(com.mysql.jdbc.Connection,long,java.lang.Exception)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateAsciiStream(java.lang.String,java.io.InputStream)> -> _SINK_
<com.mysql.jdbc.RowData: int getCurrentRowNumber()> -> _SINK_
<com.datastax.driver.core.querybuilder.Select: com.datastax.driver.core.querybuilder.Select orderBy(com.datastax.driver.core.querybuilder.Ordering[])> -> _SINK_
<org.castor.jdo.conf.DatabaseChoice: void setDataSource(org.castor.jdo.conf.DataSource)> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: boolean hasNext()> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.transform.QueryRequestMarshaller: void <init>()> -> _SINK_
<org.exolab.castor.persist.QueryResults: int size()> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$MainFrame: void performQuery()> -> _SINK_
<org.hibernate.criterion.SimpleExpression: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: long[] mk_tokenSet_1()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ResultSet: void updateBlob(int,java.sql.Blob)> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.Statement createStatement(int,int)> -> _SINK_
<com.mysql.jdbc.WatchableWriter: void <init>()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateInt(java.lang.String,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Array getArray(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.net.URL getURL(int)> -> _SINK_
<java.sql.Connection: void rollback(java.sql.Savepoint)> -> _SINK_
<com.mchange.v2.c3p0.filter.FilterDataSource: java.sql.Connection getConnection()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: boolean execute(java.lang.String,int[])> -> _SINK_
<org.springframework.jdbc.object.BatchSqlUpdate: void setBatchSize(int)> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: void setType(java.lang.String)> -> _SINK_
<org.eclipse.acceleo.engine.internal.evaluation.AcceleoEvaluationVisitor: java.lang.Object getCachedResult(org.eclipse.acceleo.model.mtl.Query,java.util.List)> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.DynamoDBQueryExpression: com.amazonaws.services.dynamodb.model.Key getExclusiveStartKey()> -> _SINK_
<com.mysql.jdbc.Connection: void close()> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.DateParamTag: void evaluateExpressions()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Ref getRef(int)> -> _SINK_
<java.sql.Blob: void truncate(long)> -> _SINK_
<org.mmbase.module.database.JDBCProbe: void <init>(org.mmbase.module.database.JDBC,long)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getProcedureTerm()> -> _SINK_
<com.mysql.jdbc.MysqlIO: java.lang.Object[] unpackBinaryResultSetRow(com.mysql.jdbc.Field[],com.mysql.jdbc.Buffer,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int insertBlobTrigger(java.sql.Connection,org.quartz.Trigger)> -> _SINK_
<gov.nih.nci.security.authorization.domainobjects.FilterClause: java.lang.String getGeneratedSQLForUser()> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.sql.CallableStatement prepareCall(java.lang.String,int,int)> -> _SINK_
<org.springframework.orm.ibatis.support.SqlMapClientDaoSupport: void <init>()> -> _SINK_
<com.sforce.soap.enterprise.sobject.BlogForce_Blog__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.sql.QueryJoinFragment: void clearWherePart()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$3: void <init>(com.mysql.jdbc.DatabaseMetaData,com.mysql.jdbc.DatabaseMetaData$IteratorWithCleanup,java.sql.Statement,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.ArrayList)> -> _SINK_
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy$TransactionAwareInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<com.mysql.jdbc.Field: java.lang.String getStringFromBytes(int,int)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.engine.RowSelection getSelection()> -> _SINK_
<com.mysql.jdbc.Buffer: java.lang.String toString()> -> _SINK_
<org.mmbase.storage.search.implementation.database.PostgreSqlSqlHandler: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateJobData(java.sql.Connection,org.quartz.JobDetail)> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: void evictQueries()> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: int executeUpdate(java.lang.String,java.lang.String[])> -> _SINK_
<gov.nih.nci.system.query.hibernate.HQLCriteria: java.util.List getParameters()> -> _SINK_
<com.enhype.db.PostgresDB: void closeStatement(java.sql.Statement)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setTimestamp(java.lang.String,java.sql.Timestamp)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$1: void <init>(org.springframework.orm.ibatis.SqlMapClientTemplate,java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.type.Type determineType(java.lang.String,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getRetainStatementAfterResultSetClose()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setTimestamp(int,java.sql.Timestamp)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: java.sql.Time toTime(java.util.Calendar,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementCreate: void buildStatement()> -> _SINK_
<org.hibernate.dialect.Oracle9Dialect: void <init>()> -> _SINK_
<org.postgresql.largeobject.LargeObjectManager: void unlink(int)> -> _SINK_
<gov.nih.nci.cagrid.cqlresultset.CQLQueryResults: gov.nih.nci.cagrid.cqlresultset.CQLCountResult getCountResult()> -> _SINK_
<com.amazonaws.services.cloudfront.model.ForwardedValues: void setQueryString(java.lang.Boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.User: void setDelegatedUsers(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.ast.tree.IntoClause: void prependIdColumnSpec()> -> _SINK_
<java.sql.ResultSet: void updateClob(int,java.sql.Clob)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsNonNullableColumns()> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator: void <init>(gov.nih.nci.cagrid.cqlresultset.CQLQueryResults,java.io.InputStream)> -> _SINK_
<org.hibernate.hql.ast.util.LiteralProcessor: void processBoolean(antlr.collections.AST)> -> _SINK_
<com.sforce.soap.enterprise.sobject.User: void setProject_Times_Incurred__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.jdbc.object.SqlOperation: org.springframework.jdbc.core.PreparedStatementCreator newPreparedStatementCreator(java.lang.Object[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsSchemasInDataManipulation()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: org.hibernate.sql.SelectFragment createSelect(int[],int[])> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.QueryTag: void evaluateExpressions()> -> _SINK_
<org.hibernate.loader.collection.OneToManyJoinWalker: void <init>(org.hibernate.persister.collection.QueryableCollection,int,java.lang.String,org.hibernate.engine.SessionFactoryImplementor,java.util.Map)> -> _SINK_
<org.hibernate.id.insert.IdentifierGeneratingInsert: void <init>(org.hibernate.dialect.Dialect)> -> _SINK_
<org.exolab.castor.gui.QueryHistory: void <init>()> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: java.lang.String getCatalogName(int)> -> _SINK_
<org.exolab.castor.jdo.QueryException: void <init>(java.lang.String,java.lang.Throwable)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.Object getObject(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.PointbaseDelegate: int updateJobDetail(java.sql.Connection,org.quartz.JobDetail)> -> _SINK_
<org.hibernate.dialect.OracleDialect: org.hibernate.sql.CaseFragment createCaseFragment()> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser: boolean queryHasAliases()> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: java.util.Iterator iterator()> -> _SINK_
<org.apache.axis.management.jmx.DeploymentQuery: void <init>()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Date getDateFromBytes(byte[],int)> -> _SINK_
<com.mongodb.MongoURI: java.lang.String getDatabase()> -> _SINK_
<java.sql.DatabaseMetaData: java.lang.String getDatabaseProductVersion()> -> _SINK_
<org.hibernate.hql.antlr.HqlBaseParser: void selectStatement()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getVersionColumns(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Date getDate(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: boolean execute(java.lang.String,int[])> -> _SINK_
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Job_Application__c: void setEvents(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateTime(java.lang.String,java.sql.Time)> -> _SINK_
<org.mmbase.storage.StorageManagerFactory: void load()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: com.datastax.driver.core.querybuilder.Update$Where where(com.datastax.driver.core.querybuilder.Clause)> -> _SINK_
<org.springframework.jdbc.object.SqlUpdate: int update(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void setValue(java.sql.PreparedStatement,int,org.mmbase.module.core.MMObjectNode,org.mmbase.core.CoreField)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContentDocument: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void addFrom(java.lang.String,org.hibernate.engine.JoinSequence)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateTimestamp(java.lang.String,java.sql.Timestamp)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Interview__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.Statement: void enableStreamingResults()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Event: void setRecurringEvents(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.impl.SessionImpl: java.sql.Connection disconnect()> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator$InformixType: java.lang.Object getValue(java.sql.Connection,java.lang.String)> -> _SINK_
<org.hibernate.type.CalendarType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory: java.lang.String getCatalog()> -> _SINK_
<org.postgresql.core.v3.Portal: org.postgresql.core.v3.SimpleQuery getQuery()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.lang.String getTableNameWithCase(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<org.apache.ibatis.executor.loader.ResultLoader: java.sql.Connection wrapConnection(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: void close()> -> _SINK_
<org.mmbase.module.database.JDBC: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.ibatis.sqlmap.engine.impl.SqlMapExecutorDelegate: int getMaxTransactions()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: org.quartz.utils.Key selectTriggerForFireTime(java.sql.Connection,long)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.CQL2HQL: void processTarget(java.lang.StringBuffer,java.util.List,gov.nih.nci.system.query.cql.CQLObject,boolean,boolean)> -> _SINK_
<java.sql.DatabaseMetaData: boolean doesMaxRowSizeIncludeBlobs()> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.sql.Savepoint setSavepoint()> -> _SINK_
<org.hibernate.action.BulkOperationCleanupAction: void <init>(org.hibernate.engine.SessionImplementor,java.util.Set)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.sql.CallableStatement prepareCall(java.lang.String,int,int,int)> -> _SINK_
<org.apache.ibatis.type.StringTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<gov.nih.nci.system.query.SDKQueryResult: void <init>(java.lang.Object)> -> _SINK_
<org.hibernate.hql.ast.tree.IntoClause: void visitPropertySpecNodes(antlr.collections.AST,java.util.List)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)> -> _SINK_
<org.castor.jdo.conf.DatabaseChoice: void <init>()> -> _SINK_
<com.sforce.soap.enterprise.QueryOptions_element: void writeFields(com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateByte(int,byte)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.lang.String getURL()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: int getConcurrency()> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: void setCatalog(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.core.TypeInfo: int getPGArrayType(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.HSQLDBDelegate: java.lang.Object getJobDetailFromBlob(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: org.castor.persist.TransactionContext getTransaction()> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqltimestampadd(java.util.List)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: byte[] s2b(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: void configureTimezone()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void withClause(antlr.collections.AST)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2BlobClob: void free()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: boolean absolute(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$1: void execute(java.sql.Connection)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.DetachedCriteria getFunctionSubquery(gov.nih.nci.cananolab.dto.particle.CompositionQueryBean,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<test.gov.nih.nci.security.attributelevel.GenericSecurityInterceptorTest: void testUnSecured()> -> _SINK_
<com.amazonaws.services.datapipeline.DataPipelineClient: com.amazonaws.services.datapipeline.model.QueryObjectsResult queryObjects(com.amazonaws.services.datapipeline.model.QueryObjectsRequest)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsExtendedSQLGrammar()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,int[])> -> _SINK_
<org.quartz.impl.jdbcjobstore.DB2v6Delegate: int selectNumCalendars(java.sql.Connection)> -> _SINK_
<org.postgresql.copy.CopyManager: long copyIn(java.lang.String,java.io.InputStream)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: java.sql.Date convertToDate(java.sql.Timestamp,java.util.TimeZone)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueInConstraint createTypeConstraints(org.mmbase.bridge.NodeQuery,java.util.List)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.reflect.Method getFunction(java.lang.String)> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: void <init>()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getMaxRows()> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$3: void <init>(org.springframework.orm.ibatis.SqlMapClientTemplate,java.lang.String,java.lang.Object)> -> _SINK_
<org.mmbase.module.database.MultiConnection: void close()> -> _SINK_
<org.apache.ibatis.type.TypeHandler: java.lang.Object getResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser$ParserContext: java.util.Map getPropertyResultsMapByAlias(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Array: void free()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: boolean isNull(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Project__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.amazonaws.services.dynamodb.model.transform.QueryRequestMarshaller: java.lang.Object marshall(java.lang.Object)> -> _SINK_
<org.mmbase.cache.RelatedNodesCache: java.lang.Object put(org.mmbase.storage.search.SearchQuery,java.util.List)> -> _SINK_
<org.apache.ibatis.mapping.SqlCommandType: org.apache.ibatis.mapping.SqlCommandType valueOf(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getVersionColumns(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void sendSplitPackets(com.mysql.jdbc.Buffer)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLHelper: void addExtendingClassDescriptors(java.util.Collection,java.util.Collection)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser: void main(java.lang.String[])> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int updateTriggerStatesForJob(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache$DeathmarchConnectionStatementManager: void addStatementForConnection(java.lang.Object,java.sql.Connection)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateClob(java.lang.String,java.sql.Clob)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int deleteTrigger(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseInformationSchema(boolean)> -> _SINK_
<org.hibernate.loader.custom.CustomLoader: org.hibernate.persister.entity.Queryable determineAppropriateOwnerPersister(org.hibernate.loader.custom.NonScalarReturn)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String getIdentitySelectString()> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl: long lookupPermissionId(long,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.BlobFromLocator: int setBytes(long,byte[],int,int)> -> _SINK_
<org.hibernate.engine.query.ParamLocationRecognizer$NamedParameterDescription: boolean isJpaStyle()> -> _SINK_
<org.postgresql.util.GT: void <clinit>()> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: void addField(org.w3c.dom.Element,org.mmbase.bridge.util.xml.query.QueryDefinition,org.mmbase.bridge.util.xml.query.QueryConfigurer)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Blob getBlob(int)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addNodesConstraints(org.mmbase.bridge.Query,org.mmbase.bridge.Field,org.mmbase.bridge.NodeList)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.Savepoint setSavepoint()> -> _SINK_
<org.mmbase.bridge.util.HugeNodeListIterator: void executeQuery(org.mmbase.bridge.Query)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsLikeEscapeClause()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsCatalogsInPrivilegeDefinitions()> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void createFromJoinElement(antlr.collections.AST,antlr.collections.AST,int,antlr.collections.AST,antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3DatabaseMetaData: java.sql.ResultSet getSchemas()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$8: void forEach(java.lang.Object)> -> _SINK_
<org.mmbase.storage.search.implementation.database.InformixSqlHandler: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsGroupByUnrelated()> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: void testQuery_OffSet_Not0_RecordCount_Not0_WithResults()> -> _SINK_
<org.mmbase.storage.util.StorageReader: java.util.List getSearchQueryHandlerClasses()> -> _SINK_
<org.mmbase.bridge.util.GrowingTreeList: void <init>(org.mmbase.bridge.NodeQuery,int,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.lang.Object[],int[],java.lang.Class)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setEvents(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void 'from'(antlr.collections.AST)> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$CollectionAssignment: void <init>(java.lang.String,java.lang.Object,boolean)> -> _SINK_
<org.hibernate.criterion.IdentifierEqExpression: org.hibernate.engine.TypedValue[] getTypedValues(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.apache.ibatis.datasource.pooled.PooledConnection: java.sql.Connection getValidConnection()> -> _SINK_
<org.springframework.orm.jdo.JdoTransactionManager: void afterPropertiesSet()> -> _SINK_
<org.exolab.castor.jdo.oql.Parser: org.exolab.castor.jdo.oql.ParseTreeNode queryParam()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.Disjunction getPointOfContactDisjunctionPerQuery(gov.nih.nci.cananolab.dto.particle.SampleQueryBean,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode: java.lang.String access$200(java.lang.String,int)> -> _SINK_
<org.castor.jdo.util.JDOConfFactory: org.castor.jdo.conf.Database createDatabase(java.lang.String,java.lang.String,org.castor.jdo.conf.Driver,org.castor.jdo.conf.Mapping[])> -> _SINK_
<org.apache.http.client.utils.URIUtils: java.net.URI rewriteURI(java.net.URI)> -> _SINK_
<org.postgresql.core.v2.SimpleParameterList: org.postgresql.core.ParameterList copy()> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryResult: int hashCode()> -> _SINK_
<org.postgresql.ssl.NonValidatingFactory$NonValidatingTM: void <init>()> -> _SINK_
<org.hibernate.loader.JoinWalker: void initPersisters(java.util.List,org.hibernate.LockMode)> -> _SINK_
<org.hibernate.hql.QueryTranslator: void compile(java.util.Map,boolean)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.math.BigDecimal getBigDecimal(int,int)> -> _SINK_
<org.postgresql.util.PGtokenizer: void removePara()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: void changeObject(org.mmbase.module.core.MMObjectNode,org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<com.mysql.jdbc.ResultSet: short parseShortWithOverflowCheck(int,byte[],java.lang.String)> -> _SINK_
<org.mmbase.module.corebuilders.InsRel: boolean hasRelations(int)> -> _SINK_
<org.springframework.orm.jdo.JdoTemplate$CloseSuppressingInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<org.springframework.orm.hibernate3.HibernateAccessor: org.springframework.jdbc.support.SQLExceptionTranslator getJdbcExceptionTranslator()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager: java.lang.String initializeAutomaticTestTable()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$VoidTransactionCallback: void execute(java.sql.Connection)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaLoader: java.lang.Object getResultColumnOrRow(java.lang.Object[],org.hibernate.transform.ResultTransformer,java.sql.ResultSet,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.hibernate.dialect.HSQLDialect: void <clinit>()> -> _SINK_
<com.mchange.v2.c3p0.WrapperConnectionPoolDataSource: void setLogWriter(java.io.PrintWriter)> -> _SINK_
<com.mysql.jdbc.Buffer: void writeLongLong(long)> -> _SINK_
<com.amazonaws.services.dynamodb.AmazonDynamoDBAsyncClient$3: void <init>(com.amazonaws.services.dynamodb.AmazonDynamoDBAsyncClient,com.amazonaws.services.dynamodb.model.QueryRequest)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsResultSetConcurrency(int,int)> -> _SINK_
<org.mmbase.module.database.JDBC: void getDriver()> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: org.hibernate.type.Type getIdentifierType(org.hibernate.Criteria)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: gov.nih.nci.security.authorization.domainobjects.Role getRole(java.lang.String)> -> _SINK_
<org.quartz.utils.DBConnectionManager: java.sql.Connection getConnection(java.lang.String)> -> _SINK_
<org.castor.persist.LocalTransactionContext: void commitConnections()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsResultSetType(int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: void setUrl(java.lang.String)> -> _SINK_
<com.mysql.jdbc.RowData: boolean wasEmpty()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: boolean executeWithFlags(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: org.postgresql.core.TypeInfo getTypeInfo()> -> _SINK_
<org.postgresql.core.v3.SimpleQuery: void setCleanupRef(java.lang.ref.PhantomReference)> -> _SINK_
<org.exolab.castor.gui.QueryHistory: void moveback()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Project_Snapshot__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.sql.SQLXML getSQLXML(int)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator: org.springframework.dao.DataAccessException customTranslate(java.lang.String,java.lang.String,java.sql.SQLException)> -> _SINK_
<org.hibernate.sql.OracleJoinFragment: void addJoin(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setRef(int,java.sql.Ref)> -> _SINK_
<org.jdom.JDOMException: java.lang.Throwable getNestedException(java.lang.Throwable)> -> _SINK_
<com.datastax.driver.core.ExecutionInfo: void <init>(java.util.List,com.datastax.driver.core.ConsistencyLevel,com.datastax.driver.core.QueryTrace)> -> _SINK_
<org.apache.ibatis.mapping.SqlCommandType: void <clinit>()> -> _SINK_
<com.mysql.jdbc.log.Jdk14Logger: void logDebug(java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.QueryMoreResponse_element: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLQuery: boolean identitiesEqual(java.lang.Object[],java.lang.Object[])> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void close()> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter: void <init>()> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.CQL2HQL: void processGroup(java.lang.StringBuffer,java.util.List,java.lang.String,gov.nih.nci.system.query.cql.CQLGroup,boolean,boolean)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: java.lang.Boolean isScanIndexForward()> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceTransactionManager: void doSetRollbackOnly(org.springframework.transaction.support.DefaultTransactionStatus)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: void verifyParameters(boolean)> -> _SINK_
<org.postgresql.xa.PGXAConnection: void forget(javax.transaction.xa.Xid)> -> _SINK_
<com.mchange.v2.c3p0.stmt.DoubleMaxStatementCache: void removeStatementFromDeathmarches(java.lang.Object,java.sql.Connection)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getMaxRowSize()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.String getResourceId()> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(long)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: int getJDBCMajorVersion()> -> _SINK_
<org.mmbase.core.util.StorageConnector: org.mmbase.storage.search.implementation.NodeSearchQuery getSearchQuery(java.lang.String)> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringDecoder: void <init>(java.lang.String,java.nio.charset.Charset)> -> _SINK_
<com.mysql.jdbc.Messages: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.SingleTableEntityPersister: void <init>(org.hibernate.mapping.PersistentClass,org.hibernate.cache.CacheConcurrencyStrategy,org.hibernate.engine.SessionFactoryImplementor,org.hibernate.engine.Mapping)> -> _SINK_
<org.hibernate.type.ComponentType: java.lang.Object hydrate(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<org.quartz.impl.jdbcjobstore.AttributeRestoringConnectionInvocationHandler: java.sql.Connection getWrappedConnection()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Where: com.datastax.driver.core.Statement disableTracing()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.LogicalOperator: java.lang.String toString()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void processIndex(antlr.collections.AST)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: void commit()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.lang.Object getObject(int,java.util.Map)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: java.lang.Object unwrap(java.lang.Class)> -> _SINK_
<org.hibernate.hql.ast.tree.HqlSqlWalkerNode: org.hibernate.hql.ast.util.AliasGenerator getAliasGenerator()> -> _SINK_
<org.hibernate.hql.ast.tree.SelectClause: java.lang.String[] getQueryReturnAliases()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Task__c: void setProject_Logs__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.bridge.NodeList findNodeList(org.mmbase.bridge.Cloud,java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.sql.Savepoint setSavepoint(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getCatalogs()> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: void <clinit>()> -> _SINK_
<com.ibatis.sqlmap.engine.impl.SqlMapExecutorDelegate: com.ibatis.sqlmap.engine.transaction.TransactionManager getTxManager()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.core.v3.CopyOperationImpl: void <init>()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setCharacterSetResults(java.lang.String)> -> _SINK_
<org.postgresql.jdbc3g.AbstractJdbc3gConnection: void <init>(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.sql.Statement createStatement()> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateAsciiStream(int,java.io.InputStream,int)> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: org.mmbase.storage.search.Constraint getAliasConstraint(org.w3c.dom.Element,org.mmbase.bridge.util.xml.query.QueryDefinition)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.lang.String removeQuotedId(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsPositionedUpdate()> -> _SINK_
<org.hibernate.type.CharacterType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewPooledConnection: void addConnectionEventListener(javax.sql.ConnectionEventListener)> -> _SINK_
<org.exolab.castor.jdo.engine.GlobalDatabaseImpl: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNtpc(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setByte(java.lang.String,byte)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Date getDate(int,java.util.Calendar)> -> _SINK_
<org.hibernate.hql.ast.QuerySyntaxException: void <init>(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.CharacterizationServiceHelper: int getNumberOfPublicCharacterizations(java.lang.String)> -> _SINK_
<org.hibernate.loader.collection.OneToManyLoader: void <init>(org.hibernate.persister.collection.QueryableCollection,int,org.hibernate.engine.SessionFactoryImplementor,java.util.Map)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void realClose(boolean,boolean)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List queryForList(java.lang.String,java.lang.Object[],int[],java.lang.Class)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.sql.CallableStatement: void setTime(java.lang.String,java.sql.Time,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.MysqlIO: void appendInnodbStatusInformation(java.lang.String,java.lang.StringBuffer)> -> _SINK_
<org.mmbase.cache.RelatedNodesCache: void removeNode(java.lang.Integer)> -> _SINK_
<org.hibernate.type.EntityType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String,org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$26: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.MysqlIO: int getServerMajorVersion()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setDouble(java.lang.String,double)> -> _SINK_
<org.mmbase.module.database.JDBC: void shutdown()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: boolean execute(java.lang.String,int)> -> _SINK_
<org.hibernate.sql.Update: org.hibernate.sql.Update addWhereColumns(java.lang.String[])> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setString(int,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsResultSetConcurrency(int,int)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$1: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Milestone__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Time getTime(java.lang.String,java.util.Calendar)> -> _SINK_
<org.springframework.jdbc.core.SqlReturnResultSet: void <init>(java.lang.String,org.springframework.jdbc.core.ResultSetExtractor)> -> _SINK_
<com.datastax.driver.core.ArrayBackedResultSet: com.datastax.driver.core.ArrayBackedResultSet fromMessage(com.datastax.driver.core.Responses$Result,com.datastax.driver.core.SessionManager,com.datastax.driver.core.ExecutionInfo,com.datastax.driver.core.Statement)> -> _SINK_
<org.apache.ibatis.datasource.pooled.PooledConnection: java.sql.Connection getRealConnection()> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$5: java.lang.Object getValue(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void registerOutParameter(int,int,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: int getInt(int)> -> _SINK_
<com.amazonaws.auth.QueryStringSigner: void sign(com.amazonaws.Request,com.amazonaws.auth.AWSCredentials)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager$InputStreamBlob: void <init>(java.io.InputStream,long)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: void createCriteriaSQLAliasMap()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setCases(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.util.PGobject: void <init>()> -> _SINK_
<org.hibernate.persister.collection.BasicCollectionPersister: org.hibernate.loader.collection.CollectionInitializer createSubselectInitializer(org.hibernate.engine.SubselectFetch,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection$ConnectionHandler: boolean isClosed()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Date getNativeDate(int,java.util.TimeZone)> -> _SINK_
<test.gov.nih.nci.logging.api.persistence.TestHibernateUtil: void main(java.lang.String[])> -> _SINK_
<org.apache.ibatis.jdbc.ScriptRunner: void executeStatement(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.lang.Object getObject(int,java.util.Map)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DBSemaphore: void setSQL(java.lang.String)> -> _SINK_
<gov.nih.nci.cananolab.ui.sample.DWRSampleManager: gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean addCompositionQuery(gov.nih.nci.cananolab.dto.particle.CompositionQueryBean)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Time getTime(int,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void registerOutParameter(int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: boolean getBoolean(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: java.util.Set selectPausedTriggerGroups(java.sql.Connection)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationService: java.util.List query(org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setTime(java.lang.String,java.sql.Time,java.util.Calendar)> -> _SINK_
<org.postgresql.core.v3.CompositeParameterList: void setStringParameter(int,java.lang.String,int)> -> _SINK_
<gov.nih.nci.security.dao.Queries: java.sql.PreparedStatement getQueryforGroupAttributeMap(java.lang.String,java.lang.String,java.lang.String,int,java.sql.Connection)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion lt(java.lang.Object,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: void <init>(java.sql.DatabaseMetaData,java.util.Set,java.sql.Connection)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: void setLiteralParameter(int,java.lang.String,int)> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: int getSQLType(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsExtendedSQLGrammar()> -> _SINK_
<org.postgresql.xa.PGXAConnection: void end(javax.transaction.xa.Xid,int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxColumnsInGroupBy()> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: com.mysql.jdbc.Field getField(int)> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DriverTag: java.lang.String getUserName()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Array getNativeArray(int)> -> _SINK_
<com.datastax.driver.core.Requests$Query$2: void <init>()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setUnicodeStream(int,java.io.InputStream,int)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.util.List queryForList(java.lang.String,java.lang.Object[],int[])> -> _SINK_
<org.springframework.orm.hibernate3.SessionFactoryUtils: void closeSession(org.hibernate.Session)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setTasks(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.cfg.Settings: boolean isShowSqlEnabled()> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.PreparedStatement prepareStatement(java.lang.String,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateRef(java.lang.String,java.sql.Ref)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.lang.String nativeSQL(java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: boolean allProceduresAreCallable()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object contains(java.lang.String)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: void <init>(com.ibatis.sqlmap.client.SqlMapClient)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.math.BigDecimal getBigDecimal(int)> -> _SINK_
<org.hibernate.engine.query.sql.NativeSQLQueryCollectionReturn: void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.hibernate.LockMode)> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.ApplicationServiceImpl: java.util.List convertToListProxy(java.util.Collection,java.lang.Object,java.lang.String,java.lang.Integer)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: void <init>(org.postgresql.jdbc2.AbstractJdbc2Connection)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl: void <init>(org.exolab.castor.jdo.Database)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: boolean execute()> -> _SINK_
<java.sql.ResultSet: void cancelRowUpdates()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setUnicodeStream(int,java.io.InputStream,int)> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: org.mongodb.morphia.query.CriteriaContainerImpl equal(java.lang.Object)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementRemove: void <init>(org.exolab.castor.jdo.engine.SQLEngine,org.exolab.castor.persist.spi.PersistenceFactory)> -> _SINK_
<org.hibernate.mapping.Collection: org.hibernate.engine.ExecuteUpdateResultCheckStyle getCustomSQLUpdateCheckStyle()> -> _SINK_
<org.hibernate.impl.SessionImpl: java.util.Collection filter(java.lang.Object,java.lang.String)> -> _SINK_
<org.acegisecurity.acls.jdbc.BasicLookupStrategy: java.lang.String computeRepeatingSql(java.lang.String,int)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLColumnInfo: int getSqlType()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean wasNull()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsMinimumSQLGrammar()> -> _SINK_
<org.mmbase.security.Authorization: org.mmbase.security.Authorization$QueryCheck check(org.mmbase.security.UserContext,org.mmbase.bridge.Query,org.mmbase.security.Operation)> -> _SINK_
<com.mysql.jdbc.ResultSet: void afterLast()> -> _SINK_
<com.mysql.jdbc.RowDataDynamic: boolean isLast()> -> _SINK_
<org.exolab.castor.jdo.JDO: void loadConfiguration(org.xml.sax.InputSource,org.xml.sax.EntityResolver,java.lang.ClassLoader)> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSessionFactory: org.apache.ibatis.session.SqlSession openSession()> -> _SINK_
<org.springframework.jdbc.support.JdbcAccessor: void setDatabaseProductName(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setCharacterStream(int,java.io.Reader)> -> _SINK_
<org.hibernate.loader.Loader: void instanceAlreadyLoaded(java.sql.ResultSet,int,org.hibernate.persister.entity.Loadable,org.hibernate.engine.EntityKey,java.lang.Object,org.hibernate.LockMode,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: org.hibernate.persister.entity.SQLLoadable getSQLLoadable(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.AttributeRestoringConnectionInvocationHandler: void restoreOriginalAtributes()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNr(java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiConnection: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement: java.lang.String toString()> -> _SINK_
<org.hibernate.util.JDBCExceptionReporter: void logWarnings(java.sql.SQLWarning)> -> _SINK_
<com.mysql.jdbc.Connection: java.lang.String getURL()> -> _SINK_
<org.springframework.jdbc.object.StoredProcedure: void <init>(javax.sql.DataSource,java.lang.String)> -> _SINK_
<com.datastax.driver.core.exceptions.QueryTimeoutException: void <init>(java.lang.String,com.datastax.driver.core.ConsistencyLevel,int,int)> -> _SINK_
<org.mmbase.storage.search.implementation.database.PostgreSqlSqlHandler: java.lang.StringBuffer appendSortOrderField(java.lang.StringBuffer,org.mmbase.storage.search.SortOrder,boolean,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void commaBetweenParameters(java.lang.String)> -> _SINK_
<org.hibernate.dialect.RDMSOS2200Dialect: org.hibernate.sql.CaseFragment createCaseFragment()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsLimitedOuterJoins()> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: void appendTableName(java.lang.StringBuffer,org.mmbase.storage.search.Step)> -> _SINK_
<org.postgresql.xa.jdbc3.AbstractJdbc3XADataSource: java.lang.String getDescription()> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void addSelect(java.lang.String)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setUnicodeStream(int,java.io.InputStream,int)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ResultSet: java.lang.Object internalGetObject(int,org.postgresql.core.Field)> -> _SINK_
<java.sql.PreparedStatement: boolean execute()> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.QueryTagSupport: void <init>()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$78: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.Object readElement(java.sql.ResultSet,java.lang.Object,java.lang.String[],org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: boolean execute(java.lang.String,int[])> -> _SINK_
<com.datastax.driver.core.Requests$QueryProtocolOptions$Flag: void <clinit>()> -> _SINK_
<org.apache.ibatis.builder.xml.XMLMapperBuilder: void sqlElement(java.util.List)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters: org.exolab.castor.mapping.TypeConvertor getConvertor(java.lang.Class,java.lang.Class)> -> _SINK_
<org.exolab.castor.xml.descriptors.SQLDateClassDescriptor$1: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<org.apache.ibatis.executor.keygen.KeyGenerator: void processBefore(org.apache.ibatis.executor.Executor,org.apache.ibatis.mapping.MappedStatement,java.sql.Statement,java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.sobject.FeedItem: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.persister.collection.ElementPropertyMapping: org.hibernate.type.Type toType(java.lang.String)> -> _SINK_
<org.postgresql.util.UnixCrypt: int byteToUnsigned(byte)> -> _SINK_
<gov.nih.nci.cananolab.service.security.SecurityService: void updateDatabaseConnectionForCSMApplications(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.cache.ConstraintsMatchingStrategy: void <clinit>()> -> _SINK_
<org.postgresql.geometric.PGpolygon: java.lang.Object clone()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void create(org.mmbase.storage.util.Index)> -> _SINK_
<gov.nih.nci.security.dao.Queries: java.sql.PreparedStatement getQueryForUserAndGroupForAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.sql.Connection)> -> _SINK_
<org.hibernate.sql.ANSIJoinFragment: org.hibernate.sql.JoinFragment copy()> -> _SINK_
<org.hibernate.jdbc.BorrowedConnectionProxy: void renderUnuseable(java.sql.Connection)> -> _SINK_
<org.hibernate.util.NamedGeneratedKeysHelper: java.sql.PreparedStatement prepareStatement(java.sql.Connection,java.lang.String,java.lang.String[])> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseUsageAdvisor(boolean)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setTinyInt1isBit(boolean)> -> _SINK_
<com.endeca.navigation.ENEQueryInfo: java.lang.String getSessionIdentifier()> -> _SINK_
<org.hibernate.loader.custom.CustomLoader$Metadata: org.hibernate.type.Type getHibernateType(int)> -> _SINK_
<com.mysql.jdbc.ResultSet: void redefineFieldsForDBMD(com.mysql.jdbc.Field[])> -> _SINK_
<com.mysql.jdbc.Statement: void checkClosed()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setArray(int,java.sql.Array)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: boolean execute(java.lang.String,java.lang.String[])> -> _SINK_
<org.springframework.scheduling.quartz.LocalDataSourceJobStore: void initialize(org.quartz.spi.ClassLoadHelper,org.quartz.spi.SchedulerSignaler)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: int executeUpdate(java.lang.String,java.lang.String[])> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<java.sql.CallableStatement: void registerOutParameter(int,int,int)> -> _SINK_
<org.springframework.orm.toplink.support.CommonsLoggingSessionLog: java.lang.String getMessageString(oracle.toplink.logging.SessionLogEntry)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.lang.Object getObject(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: java.io.Reader getCharacterStream(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void <init>(org.postgresql.core.Query,org.postgresql.core.BaseStatement,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor,int,int,int,int)> -> _SINK_
<org.hibernate.sql.DisjunctionFragment: java.lang.String toFragmentString()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsMultipleOpenResults()> -> _SINK_
<com.mysql.jdbc.ResultSet: long parseLongWithOverflowCheck(int,byte[],java.lang.String,boolean)> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: java.lang.Object createParameterizedResultObject(java.sql.ResultSet,java.lang.Class,java.util.List)> -> _SINK_
<org.exolab.castor.util.DefaultObjectFactory: java.lang.Object handleDates(java.lang.Class)> -> _SINK_
<org.apache.ibatis.mapping.SqlCommandType: void <init>(java.lang.String,int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$SelectionOrAlias: void <init>()> -> _SINK_
<org.hibernate.engine.TransactionHelper$1Work: void doWork(java.sql.Connection)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void setHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: boolean viewCreate(org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: byte[] getBytes(java.lang.String)> -> _SINK_
<com.mysql.jdbc.StringUtils: byte[] getBytes(char[],com.mysql.jdbc.SingleByteCharsetConverter,java.lang.String,java.lang.String,int,int,boolean)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: void delete(org.mmbase.module.core.MMObjectNode,org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<org.hibernate.type.ShortType: java.lang.Object get(java.sql.ResultSet,java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.encoding.SDK40EncodingUtils$1: void <init>()> -> _SINK_
<com.datastax.driver.core.Requests$Query$2: int encodedSize(com.datastax.driver.core.Message$Request)> -> _SINK_
<com.datastax.driver.core.exceptions.TruncateException: void <init>(java.lang.String)> -> _SINK_
<util.reflection.ExceptionHelper: void printSQLException(java.sql.SQLException)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: void <init>(java.sql.ResultSetMetaData)> -> _SINK_
<java.sql.SQLException: java.util.Iterator iterator()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: boolean previous()> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void appendScalarSelectTokens(java.lang.String[])> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void addBatch(java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)> -> _SINK_
<org.mmbase.module.database.MultiStatement: int executeUpdate(java.lang.String,java.lang.String[])> -> _SINK_
<com.datastax.driver.core.ControlConnection: void refreshNodeListAndTokenMap(com.datastax.driver.core.Connection,com.datastax.driver.core.Cluster$Manager)> -> _SINK_
<com.mysql.jdbc.Blob: void <init>(byte[])> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: int getUpdateCount()> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.CQL2HQL: java.lang.String getRoleName(java.lang.String,gov.nih.nci.system.query.cql.CQLAssociation)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.CallableStatement prepareCall(java.lang.String,int,int)> -> _SINK_
<gov.nih.nci.security.dao.Queries: java.lang.String getQueryForObjectMap_group()> -> _SINK_
<org.castor.jdo.conf.DatabaseDescriptor$2: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<org.postgresql.core.BaseConnection: boolean binaryTransferSend(int)> -> _SINK_
<org.hibernate.hql.QuerySplitter: void <clinit>()> -> _SINK_
<gov.nih.nci.system.dao.orm.ORMDAOImpl: gov.nih.nci.system.dao.Response query(gov.nih.nci.system.dao.Request,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: void setFetchSize(int)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: int getUpdateCount()> -> _SINK_
<com.mongodb.DBCursor: java.lang.String toString()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: com.mysql.jdbc.SingleByteCharsetConverter getCharConverter()> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$1: java.lang.Object getValue(java.lang.Object)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Connection: void releaseSavepoint(java.sql.Savepoint)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: void setPortNumber(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void initializeProperties(java.util.Properties)> -> _SINK_
<java.sql.CallableStatement: void setTimestamp(java.lang.String,java.sql.Timestamp)> -> _SINK_
<com.mchange.v2.c3p0.PoolConfig: void extractConfig(com.mchange.v2.c3p0.PoolConfig,java.util.Properties,com.mchange.v2.c3p0.PoolConfig)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$BooleanConnectionProperty: void setValue(boolean)> -> _SINK_
<org.postgresql.core.v3.SimpleParameterList: boolean hasUnresolvedTypes()> -> _SINK_
<java.sql.ResultSet: void updateBlob(int,java.sql.Blob)> -> _SINK_
<org.hibernate.engine.query.HQLQueryPlan: org.hibernate.engine.query.ParameterMetadata buildParameterMetadata(org.hibernate.hql.ParameterTranslations,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.BuiltStatement$ForwardingStatement: com.datastax.driver.core.RegularStatement setForceNoValues(boolean)> -> _SINK_
<com.mysql.jdbc.integration.c3p0.MysqlConnectionTester: int activeCheckConnection(java.sql.Connection)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.lang.Object getObject(int,java.util.Map)> -> _SINK_
<org.mmbase.cache.BetterStrategy: boolean shouldRelease(org.mmbase.core.event.NodeEvent,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: long getLong(int)> -> _SINK_
<org.apache.ibatis.datasource.pooled.PooledDataSource: void setLoginTimeout(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.HSQLDBDelegate: java.lang.Object getObjectFromBlob(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateString(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.ibatis.type.UnknownTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: boolean isReadOnly()> -> _SINK_
<com.mysql.jdbc.Field: java.lang.String getOriginalName()> -> _SINK_
<org.hibernate.Session: org.hibernate.Query getNamedQuery(java.lang.String)> -> _SINK_
<org.hibernate.tool.hbm2ddl.DatabaseMetadata: void initSequences(java.sql.Connection,org.hibernate.dialect.Dialect)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setNString(java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiConnection: java.sql.Connection getRealConnection()> -> _SINK_
<org.hibernate.hql.ast.exec.AbstractStatementExecutor$1: void doWork(java.sql.Connection)> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.ApplicationServiceImpl: java.util.List query(gov.nih.nci.system.query.cql.CQLQuery,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.DataSources: javax.sql.DataSource pooledDataSource(javax.sql.DataSource,com.mchange.v2.c3p0.PoolConfig)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Investor_Account__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: java.sql.DatabaseMetaData getMetaData()> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$MainFrame: void openDB()> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int deleteVolatileFiredTriggers(java.sql.Connection)> -> _SINK_
<org.postgresql.core.Encoding: org.postgresql.core.Encoding getJVMEncoding(java.lang.String)> -> _SINK_
<org.apache.ibatis.executor.statement.PreparedStatementHandler: java.sql.Statement instantiateStatement(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: int getInt(java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQuery: long getNavNumERecs()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.net.URL getURL(int)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: antlr.collections.AST lookupNonQualifiedProperty(antlr.collections.AST)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: void testQuery_OffSet_Not0_RecordCount0()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsGroupByUnrelated()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Options: java.lang.String getQueryString()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setInt(int,int)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNa(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getProcedureTerm()> -> _SINK_
<com.mysql.jdbc.MysqlIO: void changeDatabaseTo(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Report: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.ast.QueryTranslatorImpl$JavaConstantConverter: void <init>()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Where: com.datastax.driver.core.RegularStatement setForceNoValues(boolean)> -> _SINK_
<gov.nih.nci.security.authorization.domainobjects.ApplicationContext: void setDatabaseUserName(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateClob(int,java.io.Reader)> -> _SINK_
<org.hibernate.loader.Loader: java.lang.Object[] getRow(java.sql.ResultSet,org.hibernate.persister.entity.Loadable[],org.hibernate.engine.EntityKey[],java.lang.Object,org.hibernate.engine.EntityKey,org.hibernate.LockMode[],java.util.List,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.hibernate.SessionFactory: org.hibernate.StatelessSession openStatelessSession(java.sql.Connection)> -> _SINK_
<org.postgresql.core.v2.ConnectionFactoryImpl: void readStartupMessages(org.postgresql.core.PGStream,org.postgresql.core.v2.ProtocolConnectionImpl,org.postgresql.core.Logger)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.Field,java.lang.Integer)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void registerOutParameter(java.lang.String,int)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void addFromAssociation(java.lang.String,java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: int getResultSetHoldability()> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate: java.lang.Object executeQuery(oracle.toplink.queryframework.DatabaseQuery,java.lang.Object[])> -> _SINK_
<com.mysql.jdbc.SingleByteCharsetConverter: byte[] toBytes(java.lang.String,int,int)> -> _SINK_
<org.postgresql.core.PGStream: void Skip(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<entities.dao.hibernate.DAOHibernateTransaction: void delete(java.lang.Object[])> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$StringConnectionProperty: void setValue(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: org.castor.persist.TransactionContext getCurrentTransaction()> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: org.hibernate.engine.TypedValue getTypedValue(org.hibernate.Criteria,java.lang.String,java.lang.Object)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: java.lang.String toString()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DBSemaphore: boolean isLockOwner(java.sql.Connection,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.TaskJunction__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: void <init>(org.hibernate.engine.SessionFactoryImplementor,org.hibernate.impl.CriteriaImpl,java.lang.String,java.lang.String,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$7: java.lang.Object doInSqlMapClient(com.ibatis.sqlmap.client.SqlMapExecutor)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection$StatementHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource: void close()> -> _SINK_
<com.datastax.driver.core.policies.TokenAwarePolicy: java.util.Iterator newQueryPlan(java.lang.String,com.datastax.driver.core.Statement)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.io.InputStream getAsciiStream(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.IntoClause: java.lang.String getTableName()> -> _SINK_
<com.mchange.v1.db.sql.ConnectionUtils: void <clinit>()> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection: javax.sql.ConnectionEvent createConnectionEvent(java.sql.SQLException)> -> _SINK_
<org.mmbase.module.database.JDBCProbe: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mongodb.QueryOpBuilder: com.mongodb.QueryOpBuilder addHint(java.lang.String)> -> _SINK_
<org.postgresql.geometric.PGcircle: boolean equals(java.lang.Object)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: boolean exists()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.io.Reader getCharacterStream(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateBoolean(int,boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setInt(int,int)> -> _SINK_
<org.hibernate.sql.SimpleSelect: java.lang.String toStatementString()> -> _SINK_
<com.mysql.jdbc.CallableStatement: byte[] getBytes(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object execute(org.springframework.jdbc.core.CallableStatementCreator,org.springframework.jdbc.core.CallableStatementCallback)> -> _SINK_
<com.mchange.v2.c3p0.QueryConnectionTester: int activeCheckConnection(java.sql.Connection,java.lang.String)> -> _SINK_
<org.hibernate.criterion.CriteriaQuery: org.hibernate.engine.TypedValue getTypedValue(org.hibernate.Criteria,java.lang.String,java.lang.Object)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateNCharacterStream(java.lang.String,java.io.Reader)> -> _SINK_
<org.mmbase.bridge.util.Queries: java.lang.Object aggregate(org.mmbase.bridge.Query,org.mmbase.storage.search.StepField,int)> -> _SINK_
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getConnection()> -> _SINK_
<com.mysql.jdbc.BlobFromLocator: java.io.InputStream getBinaryStream()> -> _SINK_
<org.hibernate.id.IdentifierGeneratorFactory: java.io.Serializable get(java.sql.ResultSet,org.hibernate.type.Type)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setLong(int,long)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.math.BigDecimal getBigDecimal(java.lang.String,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: int getResultSetHoldability()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsANSI92FullSQL()> -> _SINK_
<org.castor.jdo.conf.JdoConf: void addDatabase(org.castor.jdo.conf.Database)> -> _SINK_
<org.acegisecurity.securechannel.RetryWithHttpEntryPoint: void commence(javax.servlet.ServletRequest,javax.servlet.ServletResponse)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: void setPassword(java.lang.String)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void addBatch(java.lang.String)> -> _SINK_
<com.mongodb.QueryBuilder$QueryBuilderException: void <init>(java.lang.String)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.bridge.Query setDistinct(boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getSuperTables(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: antlr.collections.AST lookupProperty(antlr.collections.AST,boolean,boolean)> -> _SINK_
<org.mongodb.morphia.query.UpdateResults: int getUpdatedCount()> -> _SINK_
<org.postgresql.util.UnixCrypt: int[] des_set_key(byte[])> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$4: void actionPerformed(java.awt.event.ActionEvent)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void postProcessInsert(antlr.collections.AST)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationService: java.lang.Integer getQueryRowCount(java.lang.Object,java.lang.String)> -> _SINK_
<test.gov.nih.nci.security.instancelevel.InstanceLevelSecurityTest: void testInstanceLevelSecurityForUser()> -> _SINK_
<org.hibernate.criterion.AbstractEmptinessExpression: java.lang.String toSqlString(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getTimeDateFunctions()> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: void remove(java.lang.Object)> -> _SINK_
<java.sql.ResultSet: java.sql.Ref getRef(java.lang.String)> -> _SINK_
<org.hibernate.impl.QueryImpl: java.util.List list()> -> _SINK_
<org.mmbase.bridge.NodeQuery: org.mmbase.storage.search.StepField getStepField(org.mmbase.bridge.Field)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateString(int,java.lang.String)> -> _SINK_
<org.castor.persist.AbstractTransactionContext: org.exolab.castor.persist.QueryResults query(org.exolab.castor.persist.LockEngine,org.exolab.castor.persist.spi.PersistenceQuery,org.exolab.castor.mapping.AccessMode,boolean)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Date getDate(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.QueryOptions_element: void write(javax.xml.namespace.QName,com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<gov.nih.nci.security.authorization.domainobjects.ApplicationContext: void setDatabasePassword(java.lang.String)> -> _SINK_
<org.hibernate.impl.StatelessSessionImpl: java.util.List listCustomQuery(org.hibernate.loader.custom.CustomQuery,org.hibernate.engine.QueryParameters)> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.CharacterizationQueryBean: java.lang.String getDisplayName()> -> _SINK_
<com.mysql.jdbc.Connection: int getMaxBytesPerChar(java.lang.String)> -> _SINK_
<org.postgresql.geometric.PGbox: void setByteValue(byte[],int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsMixedCaseQuotedIdentifiers()> -> _SINK_
<org.hibernate.jdbc.Expectations$BasicExpectation: void verifyOutcome(int,java.sql.PreparedStatement,int)> -> _SINK_
<org.springframework.orm.hibernate3.support.BlobByteArrayType: void nullSafeSetInternal(java.sql.PreparedStatement,int,java.lang.Object,org.springframework.jdbc.support.lob.LobCreator)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setFetchSize(int)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: boolean canRewriteAsMultivalueInsertStatement()> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: int update(java.lang.String)> -> _SINK_
<org.postgresql.core.Encoding: java.lang.String decode(byte[],int,int)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: void setFloat(java.lang.String,float)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contact: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: org.exolab.castor.persist.spi.PersistenceQuery createQuery(org.exolab.castor.persist.spi.QueryExpression,java.lang.Class[],org.exolab.castor.mapping.AccessMode)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void sendParse(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,boolean)> -> _SINK_
<com.sforce.soap.enterprise.sobject.PermissionSet: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Settings__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getStringFunctions()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.lang.String getString(java.lang.String)> -> _SINK_
<org.hibernate.sql.JoinFragment: void setHasThetaJoins(boolean)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Connection: java.sql.NClob createNClob()> -> _SINK_
<com.mysql.jdbc.SocketFactory: java.net.Socket beforeHandshake()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setTimeInternal(int,java.sql.Time,java.util.Calendar,java.util.TimeZone,boolean)> -> _SINK_
<org.hibernate.cfg.Settings: boolean isFormatSqlEnabled()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementCreate: java.lang.Object executeStatement(org.exolab.castor.jdo.Database,java.sql.Connection,org.exolab.castor.persist.spi.Identity,org.castor.persist.ProposedEntity)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: boolean rowUpdated()> -> _SINK_
<com.mchange.v2.c3p0.DataSources: javax.sql.DataSource pooledDataSource(javax.sql.DataSource,java.util.Properties)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl: void create(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void <init>(com.mysql.jdbc.Connection,java.sql.PreparedStatement)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setBytes(int,byte[])> -> _SINK_
<org.hibernate.criterion.Expression: org.hibernate.criterion.Criterion sql(java.lang.String,java.lang.Object[],org.hibernate.type.Type[])> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.CharacterizationQueryBean: void setAssayType(java.lang.String)> -> _SINK_
<org.hibernate.stat.StatisticsImplementor: void queryExecuted(java.lang.String,int,long)> -> _SINK_
<com.mysql.jdbc.util.BaseBugReport: void assertTrue(boolean)> -> _SINK_
<org.exolab.castor.jdo.engine.JDOCallback: void using(java.lang.Object,org.exolab.castor.jdo.Database)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setCursorName(java.lang.String)> -> _SINK_
<org.postgresql.jdbc3g.AbstractJdbc3gStatement: void setObject(int,java.lang.Object,int,int)> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper: com.amazonaws.services.dynamodbv2.datamodeling.QueryResultPage queryPage(java.lang.Class,com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression,com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig)> -> _SINK_
<com.mysql.jdbc.Statement: boolean execute(java.lang.String)> -> _SINK_
<com.sun.jersey.api.client.WebResource: com.sun.jersey.api.client.WebResource queryParam(java.lang.String,java.lang.String)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: java.lang.Object findAndModify(org.mongodb.morphia.query.Query,org.mongodb.morphia.query.UpdateOperations)> -> _SINK_
<java.sql.ResultSet: boolean relative(int)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void whereExpr(antlr.collections.AST)> -> _SINK_
<org.quartz.impl.jdbcjobstore.Semaphore: boolean obtainLock(java.sql.Connection,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsFullOuterJoins()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsOpenCursorsAcrossRollback()> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: java.lang.String toString()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: int getInt(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.BlogForce_Blog__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateBlob(java.lang.String,java.io.InputStream,long)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getUDTs(java.lang.String,java.lang.String,java.lang.String,int[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.Statement createStatement(int,int,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.ResultSetMetaData getMetaData()> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate: org.hibernate.Session getSession()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: boolean execute(java.lang.String,int[])> -> _SINK_
<org.postgresql.core.Field: java.lang.String getColumnName()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean isReadOnly()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: java.util.List findDataBy(gov.nih.nci.cananolab.domain.particle.Sample,gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$ResultSetIterator: java.lang.Object next()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2BlobClob: long length()> -> _SINK_
<org.hibernate.id.TableGenerator: java.io.Serializable doWorkInCurrentTransaction(java.sql.Connection,java.lang.String)> -> _SINK_
<org.mmbase.servlet.BridgeServlet$QueryParts: void setServedNode(org.mmbase.bridge.Node)> -> _SINK_
<com.ibatis.sqlmap.client.SqlMapExecutor: int delete(java.lang.String,java.lang.Object)> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcExtendedDaoImpl: void delete(org.acegisecurity.acl.basic.AclObjectIdentity)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavOpts(java.lang.String)> -> _SINK_
<java.sql.CallableStatement: java.sql.Clob getClob(int)> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: void <init>(org.postgresql.PGConnection,java.lang.String)> -> _SINK_
<com.mysql.jdbc.CallableStatement: int getInt(java.lang.String)> -> _SINK_
<org.postgresql.Driver: void addTimerTask(java.util.TimerTask,long)> -> _SINK_
<org.springframework.jdbc.core.support.JdbcDaoSupport: javax.sql.DataSource getDataSource()> -> _SINK_
<com.mysql.jdbc.ResultSet: void setResultSetType(int)> -> _SINK_
<org.apache.ibatis.type.NStringTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: void switchToSlavesConnection()> -> _SINK_
<com.sforce.soap.enterprise.fault.InvalidQueryLocatorFault: void load(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Connection: java.sql.Savepoint setSavepoint(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.SqlReturnResultSet: void <init>(java.lang.String,org.springframework.jdbc.core.RowMapper)> -> _SINK_
<org.hibernate.impl.ScrollableResultsImpl: boolean isFirst()> -> _SINK_
<org.mmbase.bridge.util.Queries: org.mmbase.storage.search.Constraint addConstraint(org.mmbase.bridge.Query,org.mmbase.storage.search.Constraint)> -> _SINK_
<org.mongodb.morphia.query.FilterOperator: void <init>(java.lang.String,int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Field: void setMysqlType(int)> -> _SINK_
<org.hibernate.criterion.SubqueryExpression: void createAndSetInnerQuery(org.hibernate.criterion.CriteriaQuery,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<org.hibernate.event.FlushEntityEvent: void setDatabaseSnapshot(java.lang.Object[])> -> _SINK_
<org.apache.ibatis.executor.resultset.FastResultSetHandler: boolean applyAutomaticMappings(java.sql.ResultSet,java.util.List,org.apache.ibatis.reflection.MetaObject)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: int update(java.lang.String,java.util.Map)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setObject(int,java.lang.Object,int)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$82: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<org.springframework.orm.toplink.SingleSessionFactory: void close()> -> _SINK_
<org.hibernate.impl.SessionImpl: java.util.Iterator iterate(java.lang.String,java.lang.Object,org.hibernate.type.Type)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Site: void setHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.apache.axis.transport.http.AxisServlet: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: void queryWithRowHandler(java.lang.String,java.lang.Object,com.ibatis.sqlmap.client.event.RowHandler)> -> _SINK_
<org.apache.ibatis.executor.BatchExecutor: int doUpdate(org.apache.ibatis.mapping.MappedStatement,java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Case: void setTeamMembers(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$52: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: int getJDBCtoField(int,int)> -> _SINK_
<org.exolab.castor.persist.spi.KeyGenerator: java.lang.String patchSQL(java.lang.String,java.lang.String)> -> _SINK_
<com.datastax.driver.core.SessionManager: com.datastax.driver.core.ResultSetFuture executeQuery(com.datastax.driver.core.Message$Request,com.datastax.driver.core.Statement)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setParameterList(java.lang.String,java.lang.Object[])> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String getOrderBy()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Date getDate(java.lang.String,java.util.Calendar)> -> _SINK_
<org.mmbase.module.database.MultiStatement: void <clinit>()> -> _SINK_
<com.mysql.jdbc.Connection: void shutdownServer()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: byte[][] convertTypeDescriptorToProcedureRow(byte[],java.lang.String,boolean,boolean,boolean,com.mysql.jdbc.DatabaseMetaData$TypeDescriptor)> -> _SINK_
<org.mmbase.bridge.implementation.BasicNodeQuery: org.mmbase.bridge.Query cloneWithoutFields()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setNCharacterStream(java.lang.String,java.io.Reader,long)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Builder: com.datastax.driver.core.querybuilder.Select 'from'(com.datastax.driver.core.TableMetadata)> -> _SINK_
<gov.nih.nci.security.dao.hibernate.HibernateSessionFactory: void closeSession()> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: long[] mk_tokenSet_0()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeDu(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.mmbase.servlet.MMBaseServlet: java.lang.String getRequestURL(javax.servlet.http.HttpServletRequest)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool$1: java.lang.Object acquireResource()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<org.springframework.jdbc.datasource.DelegatingDataSource: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.loader.custom.CustomLoader$Metadata: void <init>(org.hibernate.engine.SessionFactoryImplementor,java.sql.ResultSet)> -> _SINK_
<org.hibernate.dialect.HSQLDialect: org.apache.commons.logging.Log access$000()> -> _SINK_
<com.mysql.jdbc.util.BaseBugReport: java.lang.String getUrl()> -> _SINK_
<com.mysql.jdbc.EscapeTokenizer: boolean sawVariableUse()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteSchedulerState(java.sql.Connection,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$TransactionCallback: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setByte(int,byte)> -> _SINK_
<com.mysql.jdbc.ResultSet: void updateDouble(java.lang.String,double)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateBinaryStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<org.springframework.jdbc.support.lob.AbstractLobHandler: java.io.InputStream getClobAsAsciiStream(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryRequest: void setConsistentRead(java.lang.Boolean)> -> _SINK_
<org.hibernate.jmx.StatisticsService: org.hibernate.stat.QueryStatistics getQueryStatistics(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Project_Snapshot__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCaseQA: void testQuery_OffSet_Not0_RecordCount_Not0_WithResults()> -> _SINK_
<org.hibernate.lob.SerializableBlob: long length()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.Connection: com.mysql.jdbc.MysqlIO getIO()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateCharacterStream(int,java.io.Reader,int)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.lang.Object[],int[],org.springframework.jdbc.core.RowMapper)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.engine.SessionFactoryImplementor: org.hibernate.cache.QueryCache getQueryCache(java.lang.String)> -> _SINK_
<org.springframework.jdbc.support.CustomSQLErrorCodesTranslation: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.Query buildExistsQuery(java.lang.Object)> -> _SINK_
<org.postgresql.util.UnixCrypt: byte[] crypt(byte[],byte[])> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.Date getDate(java.lang.String,java.util.Calendar)> -> _SINK_
<org.apache.axis.transport.http.QSMethodHandler: void <init>()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setEnableQueryTimeouts(boolean)> -> _SINK_
<entities.gui.jsf.AutoEntityBackBean: java.lang.String getQuery()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setLong(java.lang.String,long)> -> _SINK_
<org.exolab.castor.jdo.drivers.MySQLFactory: java.lang.Class adjustSqlType(java.lang.Class)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setArray(int,java.sql.Array)> -> _SINK_
<oracle.toplink.sessions.Session: java.lang.Object executeQuery(oracle.toplink.queryframework.DatabaseQuery,java.util.Vector)> -> _SINK_
<com.mysql.jdbc.util.ResultSetUtil: java.lang.StringBuffer appendResultSetSlashGStyle(java.lang.StringBuffer,java.sql.ResultSet)> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion leSome(java.lang.Object,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setInt(int,int)> -> _SINK_
<org.mongodb.morphia.dao.BasicDAO: long count(org.mongodb.morphia.query.Query)> -> _SINK_
<org.springframework.jdbc.core.SqlInOutParameter: void <init>(java.lang.String,int)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateBoolean(int,boolean)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: void appendTableAlias(java.lang.StringBuffer,org.mmbase.storage.search.Step)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setString(int,java.lang.String)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: void readBaseObject(java.io.ObjectInputStream)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void close()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setFetchSize(int)> -> _SINK_
<org.hibernate.sql.CaseFragment: org.hibernate.sql.CaseFragment addWhenColumnNotNull(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: void addDataType(java.lang.String,java.lang.Class)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.Query,org.mmbase.bridge.NodeManager,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void clearParameters()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.Key exists(java.lang.Object,com.mongodb.ReadPreference)> -> _SINK_
<gov.nih.nci.system.applicationservice.ApplicationServiceFacade: java.util.List query(gov.nih.nci.system.query.cql.CQLQuery,java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.xml.query.FieldDefinition: void configure(org.w3c.dom.Element)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.io.InputStream getUnicodeStream(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setCursorName(java.lang.String)> -> _SINK_
<org.acegisecurity.acl.basic.jdbc.JdbcDaoImpl$AclsByObjectIdentityMapping: void <init>(org.acegisecurity.acl.basic.jdbc.JdbcDaoImpl,javax.sql.DataSource)> -> _SINK_
<org.mmbase.module.database.MultiConnection: void <init>(org.mmbase.module.database.MultiPool,java.sql.Connection)> -> _SINK_
<org.acegisecurity.util.UrlUtils: java.lang.String getFullRequestUrl(org.acegisecurity.ui.savedrequest.SavedRequest)> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceTransactionManager: void doBegin(java.lang.Object,org.springframework.transaction.TransactionDefinition)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: byte[] getBytes(int)> -> _SINK_
<entities.dao.AbstractDAO: long queryCount(java.lang.String,java.lang.Object[])> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> -> _SINK_
<java.sql.ResultSet: java.io.Reader getCharacterStream(int)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setNull(int,int)> -> _SINK_
<org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.sql.SimpleSelect: org.hibernate.sql.SimpleSelect setTableName(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void distinctOrAll(antlr.collections.AST)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getDefaultTransactionIsolation()> -> _SINK_
<org.castor.jdo.engine.SQLTypeInfos: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.ResultSet sendFileToServer(com.mysql.jdbc.Statement,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.PostgreSQLDelegate: java.lang.Object getObjectFromBlob(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiStatement: void setFetchDirection(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.SolutionFeed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.NestedCriteria2HQL: boolean distinctRequired()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateNCharacterStream(int,java.io.Reader,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean supportsSchemasInIndexDefinitions()> -> _SINK_
<org.postgresql.core.ResultHandler: void handleCompletion()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setLogSlowQueries(boolean)> -> _SINK_
<com.sforce.soap.enterprise.fault.MalformedQueryFault: void writeFields(com.sforce.ws.parser.XmlOutputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.hibernate.Query: org.hibernate.Query setParameterList(java.lang.String,java.lang.Object[])> -> _SINK_
<org.mmbase.storage.search.implementation.database.MySqlSqlHandler: java.lang.String toSqlString(java.lang.String)> -> _SINK_
<org.exolab.castor.gui.QueryHistory: void moveforward()> -> _SINK_
<org.mmbase.storage.search.implementation.database.InformixSqlHandler: void closeConnection(java.sql.Connection,java.sql.Statement)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.lang.Object getObject(int)> -> _SINK_
<org.acegisecurity.acls.jdbc.BasicLookupStrategy: void convertCurrentResultIntoObject(java.util.Map,java.sql.ResultSet)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: int writeIndexToWhere(java.sql.PreparedStatement,java.lang.Object,int,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.apache.ibatis.executor.SimpleExecutor: java.sql.Statement prepareStatement(org.apache.ibatis.executor.statement.StatementHandler)> -> _SINK_
<org.hibernate.loader.custom.CustomLoader$Metadata: java.lang.String getColumnName(int)> -> _SINK_
<com.sforce.soap.enterprise.fault.InvalidSObjectFault: void <init>()> -> _SINK_
<org.hibernate.type.SpecialOneToOneType: int[] sqlTypes(org.hibernate.engine.Mapping)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsConvert()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder mod(java.lang.Object)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData: java.lang.String getColumnLabel(int)> -> _SINK_
<com.endeca.navigation.analytics.ExprKey: java.lang.String toWire()> -> _SINK_
<com.mysql.jdbc.Connection: java.lang.StringBuffer generateConnectionCommentBlock(java.lang.StringBuffer)> -> _SINK_
<org.postgresql.largeobject.LargeObjectManager: int create()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.lang.Object getObject(int,java.util.Map)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: long getLong(int)> -> _SINK_
<org.apache.ibatis.jdbc.ScriptRunner: void rollbackConnection()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$ConnectionProperty: java.lang.String getPropertyName()> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$ErrorTrackingResultHandler: void handleError(java.sql.SQLException)> -> _SINK_
<org.hibernate.type.DbTimestampType: java.sql.Timestamp useCallableStatement(java.lang.String,org.hibernate.engine.SessionImplementor)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$BooleanConnectionProperty: boolean getValueAsBoolean()> -> _SINK_
<java.sql.Statement: int getResultSetConcurrency()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void checkResultSet(int)> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: boolean isSigned(int)> -> _SINK_
<org.hibernate.transaction.JDBCTransaction: void commitAndResetAutoCommit()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean isCatalogAtStart()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsSubqueriesInComparisons()> -> _SINK_
<gov.nih.nci.logging.api.util.HibernateUtil: void closeSession()> -> _SINK_
<com.mysql.jdbc.CallableStatement: short getShort(int)> -> _SINK_
<org.exolab.castor.xml.handlers.SQLTimestampFieldHandler: java.lang.Object newInstance(java.lang.Object)> -> _SINK_
<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.RowData readSingleRowSet(long,int,int,boolean,com.mysql.jdbc.Field[])> -> _SINK_
<org.exolab.castor.jdo.keygen.SequenceKeyGenerator: void <init>(org.exolab.castor.persist.spi.PersistenceFactory,java.util.Properties,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: void setURL(java.lang.String)> -> _SINK_
<org.hibernate.hql.classic.PreprocessingParser: void token(java.lang.String,org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: int number(char[],int,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Log__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.castor.jdo.conf.DatabaseChoiceDescriptor: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterUtils: int[] buildSqlTypeArray(org.springframework.jdbc.core.namedparam.ParsedSql,org.springframework.jdbc.core.namedparam.SqlParameterSource)> -> _SINK_
<org.apache.ibatis.type.UnknownTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.AbstractDatabaseImpl: org.exolab.castor.jdo.CacheManager getCacheManager()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setString(int,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void <init>()> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSourceFactory: javax.sql.DataSource create(java.lang.String,java.lang.String,java.lang.String,int,int,int,int,int,java.lang.String)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNu(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean nullsAreSortedAtEnd()> -> _SINK_
<entities.Repository: java.lang.Class extractClass(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setDate(java.lang.String,java.sql.Date,java.util.Calendar)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Location__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ResultSet: void updateClob(int,java.sql.Clob)> -> _SINK_
<com.mysql.jdbc.log.CommonsLogger: void logFatal(java.lang.Object,java.lang.Throwable)> -> _SINK_
<com.mysql.jdbc.StringUtils: long getLong(byte[])> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.lang.Object findObject(java.lang.Object[],java.util.Map)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLNonTransientConnectionException: void <init>(java.lang.String,java.lang.String,int)> -> _SINK_
<org.postgresql.util.PGInterval: void setMinutes(int)> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsUnion()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: boolean isInFunctionCall()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Location__c: void setTasks(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.dialect.PostgreSQLDialect: void <init>()> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.DataSourceWrapper: java.io.PrintWriter getLogWriter()> -> _SINK_
<org.castor.jdo.conf.DatabaseDescriptor$4: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<org.postgresql.util.PSQLWarning: java.lang.String toString()> -> _SINK_
<org.hibernate.type.CollectionType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String,org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: java.nio.ByteBuffer getRoutingKey()> -> _SINK_
<org.postgresql.geometric.PGpolygon: void setValue(java.lang.String)> -> _SINK_
<org.springframework.orm.ibatis.support.SqlMapClientDaoSupport: com.ibatis.sqlmap.client.SqlMapClient getSqlMapClient()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.io.InputStream getAsciiStream(int)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.DomainTypesInformation: boolean equals(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: int executeUpdate(java.lang.String,int[])> -> _SINK_
<org.springframework.jdbc.core.namedparam.MapSqlParameterSource: void <init>()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$1WrapperStatementHelper: java.lang.Object doRawStatementOperation(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void caseExpr(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateTimestamp(java.lang.String,java.sql.Timestamp)> -> _SINK_
<org.hibernate.loader.hql.QueryLoader: void <clinit>()> -> _SINK_
<org.exolab.castor.xml.descriptors.SQLTimeClassDescriptor$1: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.String getClobCharacterEncoding()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$54: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: int executeUpdate(byte[][],java.io.InputStream[],boolean[],int[],boolean[],boolean)> -> _SINK_
<com.mysql.jdbc.MysqlParameterMetadata: java.lang.String getParameterClassName(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: java.lang.String getPGType(int)> -> _SINK_
<org.exolab.castor.jdo.drivers.MySQLFactory: org.exolab.castor.persist.spi.QueryExpression getQueryExpression()> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: org.mmbase.storage.search.StepField createNewStepField(org.mmbase.storage.search.SearchQuery,org.mmbase.storage.search.StepField)> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void addInnerJoin(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[])> -> _SINK_
<com.sforce.soap.enterprise.sobject.RestExplorerConfig__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(int,int,java.util.Map)> -> _SINK_
<org.hibernate.cfg.HbmBinder: void bindRoot(org.dom4j.Document,org.hibernate.cfg.Mappings,java.util.Map)> -> _SINK_
<org.postgresql.util.HostSpec: java.lang.String getHost()> -> _SINK_
<com.mchange.v2.c3p0.DataSources: void destroy(javax.sql.DataSource)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: boolean isBeforeFirst()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment appendAll(java.lang.String,java.util.List)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.Query createQuery(java.lang.Class)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: java.util.List asKeyList()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void fillNode(org.mmbase.module.core.MMObjectNode,java.sql.ResultSet,org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: boolean isRelevantCaseInsensitive(org.mmbase.storage.search.FieldConstraint)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.DynamicSqlSource: org.apache.ibatis.mapping.BoundSql getBoundSql(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setTimestamp(java.lang.String,java.sql.Timestamp)> -> _SINK_
<org.hibernate.hql.ast.tree.DotNode: boolean isReferenceToPrimaryKey(java.lang.String,org.hibernate.type.EntityType)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: org.postgresql.core.Query createParameterizedQuery(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[])> -> _SINK_
<org.apache.ibatis.type.SqlDateTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<org.hibernate.engine.NamedQueryDefinition: java.lang.String getComment()> -> _SINK_
<org.hibernate.mapping.AbstractAuxiliaryDatabaseObject: void <init>(java.util.HashSet)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setArray(int,java.sql.Array)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.ResultSet executeQuery()> -> _SINK_
<java.sql.Connection: void releaseSavepoint(java.sql.Savepoint)> -> _SINK_
<com.mysql.jdbc.Statement: int getResultSetType()> -> _SINK_
<org.eclipse.acceleo.engine.internal.evaluation.QueryCache: boolean isNull(java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: void setAutoCommit(boolean)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: void <init>(org.mongodb.morphia.mapping.Mapper,com.mongodb.Mongo,java.lang.String)> -> _SINK_
<com.datastax.driver.core.RequestHandler: void sendRequest()> -> _SINK_
<org.hibernate.dialect.OracleDialect: org.hibernate.sql.JoinFragment createOuterJoinFragment()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Time__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.ast.tree.IdentNode: boolean resolveAsNakedComponentPropertyRefLHS(org.hibernate.hql.ast.tree.DotNode)> -> _SINK_
<org.apache.ibatis.executor.statement.PreparedStatementHandler: java.util.List query(java.sql.Statement,org.apache.ibatis.session.ResultHandler)> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: int getScale(int,int)> -> _SINK_
<com.mysql.jdbc.ResultSet: double getDouble(int)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavERecSearchComputeAlternativePhrasings(boolean)> -> _SINK_
<java.sql.Timestamp: void setNanos(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateBytes(int,byte[])> -> _SINK_
<org.springframework.jdbc.datasource.DriverManagerDataSource: java.sql.Connection getConnectionFromDriverManager(java.lang.String,java.util.Properties)> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.DynamoDBQueryExpression: boolean isConsistentRead()> -> _SINK_
<entities.dao.hibernate.PasswordType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],java.lang.Object)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: java.lang.Object unwrap(java.lang.Class)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: byte[] fastpathCall(int,org.postgresql.core.ParameterList,boolean)> -> _SINK_
<org.hibernate.hql.ast.tree.AssignmentSpecification: void validateLhs(org.hibernate.hql.ast.tree.FromReferenceNode)> -> _SINK_
<com.mysql.jdbc.Connection: com.mysql.jdbc.ResultSet execSQL(com.mysql.jdbc.Statement,java.lang.String,int,com.mysql.jdbc.Buffer,int,int,boolean,java.lang.String,boolean)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getTransformedBitIsBoolean()> -> _SINK_
<org.hibernate.sql.Template: boolean isIdentifier(java.lang.String,org.hibernate.dialect.Dialect)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: com.amazonaws.services.dynamodbv2.model.QueryRequest withTableName(java.lang.String)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: int getDatabaseMinorVersion()> -> _SINK_
<org.mmbase.core.util.StorageConnector: org.mmbase.storage.search.implementation.NodeSearchQuery convertMMNodeSearch2Query(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.util.SessionFactoryHelper: java.lang.String getIdentifierOrUniqueKeyPropertyName(org.hibernate.type.EntityType)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimestampLocaleConverter: void <init>(boolean)> -> _SINK_
<org.postgresql.core.v3.CompositeQuery: java.lang.String toString(org.postgresql.core.ParameterList)> -> _SINK_
<org.postgresql.geometric.PGbox: java.lang.String getValue()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.ConnectionWrapper: boolean isSameResource(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.EscapeProcessor: java.lang.String processConvertToken(java.lang.String,boolean)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: org.hibernate.criterion.Criterion getDatumCriterion(gov.nih.nci.cananolab.dto.particle.CharacterizationQueryBean)> -> _SINK_
<org.mmbase.module.builders.DayMarkers: int getDayCountByObject(int)> -> _SINK_
<org.mmbase.cache.BetterStrategy: boolean shouldRelease(org.mmbase.core.event.RelationEvent,org.mmbase.storage.search.SearchQuery)> -> _SINK_
<com.mysql.jdbc.StringUtils: int lastIndexOf(byte[],char)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.net.URL getURL(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.module.database.MultiStatement: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void storeStream(com.mysql.jdbc.MysqlIO,int,com.mysql.jdbc.Buffer,java.io.InputStream)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$ProxyConnectionInvocationHandler: java.sql.SQLException handleMaybeFatalToPooledConnection(java.lang.Throwable,java.lang.Object,boolean)> -> _SINK_
<org.hibernate.engine.NamedSQLQueryDefinition: java.lang.String getResultSetRef()> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean: java.lang.Boolean getHasPOC()> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Selection: void <init>()> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.bridge.Query setMaxNumber(int)> -> _SINK_
<com.endeca.navigation.analytics.FilterAnd: void validateSyntax()> -> _SINK_
<org.apache.commons.beanutils.converters.SqlDateConverter: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.ParameterNode: void setExpectedType(org.hibernate.type.Type)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void addProtectionElements(java.lang.String,java.lang.String[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSetMetaData: org.postgresql.core.Field getField(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: com.datastax.driver.core.ConsistencyLevel getConsistencyLevel()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getEmulateUnsupportedPstmts()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void updateRow()> -> _SINK_
<org.hibernate.type.LocaleType: java.lang.String objectToSQLString(java.lang.Object,org.hibernate.dialect.Dialect)> -> _SINK_
<org.hibernate.hql.ast.tree.SelectClause: void initializeExplicitSelectClause(org.hibernate.hql.ast.tree.FromClause)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.EtxSqlHandler: boolean containsOtherStringSearchConstraints(org.mmbase.storage.search.Constraint,org.mmbase.storage.search.StringSearchConstraint)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$78: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils$Appendeable: void <init>()> -> _SINK_
<org.hibernate.engine.SessionImplementor: java.util.List list(java.lang.String,org.hibernate.engine.QueryParameters)> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Time getTime(java.lang.String,java.util.Calendar)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$2: void <init>(org.postgresql.core.v3.QueryExecutorImpl)> -> _SINK_
<org.exolab.castor.xml.descriptors.SQLTimeClassDescriptor$1: java.lang.Object newInstance(java.lang.Object)> -> _SINK_
<org.hibernate.sql.ConditionFragment: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<org.postgresql.core.TypeInfo: boolean isCaseSensitive(int)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: java.util.List getObjects(gov.nih.nci.security.dao.SearchCriteria)> -> _SINK_
<com.sforce.soap.enterprise.sobject.EventFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mongodb.DBCursor: com.mongodb.DBObject getQuery()> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: void removeSecurityConstraint()> -> _SINK_
<org.hibernate.loader.Loader: java.util.List list(org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters,java.util.Set,org.hibernate.type.Type[])> -> _SINK_
<com.mysql.jdbc.Util: java.lang.String scramble(java.lang.String,java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: org.mmbase.storage.search.Constraint getConstraint(org.w3c.dom.Element,org.mmbase.bridge.util.xml.query.QueryDefinition)> -> _SINK_
<com.sforce.soap.enterprise.QueryOptions_element: void <init>()> -> _SINK_
<org.hibernate.lob.BlobImpl: java.io.InputStream getBinaryStream()> -> _SINK_
<org.apache.ibatis.migration.commands.BaseCommand: java.util.List getChangelog()> -> _SINK_
<com.mysql.jdbc.MysqlSavepoint: void <init>(java.lang.String)> -> _SINK_
<org.hibernate.impl.ScrollableResultsImpl: boolean setRowNumber(int)> -> _SINK_
<gov.nih.nci.cagrid.data.enumeration.client.EnumerationDataServiceClient: gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer enumerationQuery(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<org.hibernate.persister.collection.QueryableCollection: org.hibernate.FetchMode getFetchMode()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$75: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setNull(int,int,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setTimestamp(java.lang.String,java.sql.Timestamp)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setMap(int,java.util.Map)> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: org.hibernate.classic.Session openSession(org.hibernate.Interceptor)> -> _SINK_
<org.exolab.castor.jdo.JDOManager: org.castor.jdo.engine.ConnectionFactory getConnectionFactory()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.sql.ResultSet getGeneratedKeys()> -> _SINK_
<org.mmbase.util.transformers.Sql: java.io.Writer transformBack(java.io.Reader,java.io.Writer)> -> _SINK_
<entities.dao.hibernate.DAOHibernateTransaction: long queryCount(java.lang.String,java.lang.Object[])> -> _SINK_
<org.hibernate.lob.SerializableClob: void truncate(long)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Job_Application__c: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.apache.ibatis.executor.statement.SimpleStatementHandler: java.util.List query(java.sql.Statement,org.apache.ibatis.session.ResultHandler)> -> _SINK_
<org.hibernate.dialect.Dialect: void <clinit>()> -> _SINK_
<org.postgresql.ds.common.PGObjectFactory: java.lang.Object loadPoolingDataSource(javax.naming.Reference)> -> _SINK_
<org.hibernate.Query: java.util.Iterator iterate()> -> _SINK_
<org.postgresql.xa.PGXAConnection: javax.transaction.xa.Xid[] recover(int)> -> _SINK_
<org.hibernate.type.SerializableType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<org.mmbase.bridge.NodeManager: org.mmbase.bridge.NodeList getList(org.mmbase.bridge.NodeQuery)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean deletesAreDetected(int)> -> _SINK_
<org.exolab.castor.jdo.engine.SimpleQueryExecutor: java.sql.PreparedStatement access$100(org.exolab.castor.jdo.engine.SimpleQueryExecutor)> -> _SINK_
<com.sforce.soap.enterprise.sobject.BlogForce_Comment__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$Convertor: java.lang.Class toType()> -> _SINK_
<org.postgresql.jdbc3g.AbstractJdbc3gStatement: void <init>(org.postgresql.jdbc3.AbstractJdbc3Connection,int,int,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Location__c: void setActivityHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNao(java.lang.String)> -> _SINK_
<org.postgresql.core.PGStream: byte[][] ReceiveTupleV2(int,boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Blob getBlob(java.lang.String)> -> _SINK_
<org.hibernate.engine.NamedSQLQueryDefinition: boolean isCallable()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: boolean first()> -> _SINK_
<java.sql.DriverManager: java.util.Enumeration getDrivers()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: void setUser(java.lang.String)> -> _SINK_
<com.mysql.jdbc.CursorRowProvider: void afterLast()> -> _SINK_
<org.hibernate.criterion.AliasedProjection: org.hibernate.type.Type[] getTypes(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.apache.ibatis.builder.xml.XMLStatementBuilder: java.util.List parseDynamicTags(org.apache.ibatis.parsing.XNode)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsCatalogsInTableDefinitions()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsUnion()> -> _SINK_
<org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource: javax.sql.DataSource determineTargetDataSource()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.sql.Clob makeClob(long)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsGroupBy()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void refresh(org.mmbase.module.core.MMObjectNode)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getNoTimezoneConversionForTimeType()> -> _SINK_
<com.mongodb.QueryBuilder: void addOperand(java.lang.String,java.lang.Object)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: void abort(java.util.concurrent.Executor)> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxSchemaNameLength()> -> _SINK_
<com.mysql.jdbc.CallableStatement: java.sql.Blob getBlob(java.lang.String)> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTemplate$34: java.lang.Object doInHibernate(org.hibernate.Session)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.lang.Object[],java.lang.Class)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Ref getRef(java.lang.String)> -> _SINK_
<gov.nih.nci.system.query.hibernate.HQLCriteria: java.lang.String getCountHqlString()> -> _SINK_
<java.sql.CallableStatement: void setNull(java.lang.String,int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.encoding.SDK40Deserializer: void onEndElement(java.lang.String,java.lang.String,org.apache.axis.encoding.DeserializationContext)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Quote: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: boolean execute(java.lang.String,int[])> -> _SINK_
<com.amazonaws.services.dynamodbv2.AmazonDynamoDBAsyncClient$18: java.lang.Object call()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$4: void <init>(com.mysql.jdbc.DatabaseMetaData,com.mysql.jdbc.DatabaseMetaData$IteratorWithCleanup,java.sql.Statement,java.lang.String,java.util.ArrayList)> -> _SINK_
<org.hibernate.sql.SelectFragment: org.hibernate.sql.SelectFragment addFormulas(java.lang.String,java.lang.String[],java.lang.String[])> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.sql.Clob getClob(int)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: java.lang.String getEntityName(org.hibernate.Criteria,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getCatalogs()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addConstraint(org.mmbase.bridge.Query,org.mmbase.storage.search.Constraint)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStatesForJobFromOtherState(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void addCollection(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.dialect.lock.SelectLockingStrategy: void lock(java.io.Serializable,java.lang.Object,java.lang.Object,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: int executeUpdate(java.lang.String,int[])> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$9: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[])> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsMixedCaseIdentifiers()> -> _SINK_
<java.sql.Driver: boolean jdbcCompliant()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.lang.Object getObject(java.lang.String,java.util.Map)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Expense__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.sql.Clob getClob(int)> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.ParamTag: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryResult: java.util.List getItems()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsDataManipulationTransactionsOnly()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$16: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Interview__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setObject(int,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.EscapeProcessor: java.lang.String removeWhitespace(java.lang.String)> -> _SINK_
<org.postgresql.fastpath.Fastpath: byte[] getData(java.lang.String,org.postgresql.fastpath.FastpathArg[])> -> _SINK_
<com.mysql.jdbc.MysqlIO: boolean hasLongColumnInfo()> -> _SINK_
<org.springframework.orm.toplink.TopLinkTemplate$2: java.lang.Object readFromSession(oracle.toplink.sessions.Session)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setNty(java.lang.String)> -> _SINK_
<org.hibernate.engine.query.NamedParameterDescriptor: boolean isJpaStyle()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getProfileSQL()> -> _SINK_
<org.postgresql.ds.jdbc4.AbstractJdbc4SimpleDataSource: java.util.logging.Logger getParentLogger()> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Blob: int setBytes(long,byte[],int,int)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void create(org.mmbase.module.core.MMObjectNode,java.util.List,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select: java.util.List access$100()> -> _SINK_
<org.hibernate.impl.StatelessSessionImpl: java.sql.Connection connection()> -> _SINK_
<org.hibernate.hql.classic.ClauseParser: void end(org.hibernate.hql.classic.QueryTranslatorImpl)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.sql.Savepoint setSavepoint(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)> -> _SINK_
<org.hibernate.mapping.Table: java.lang.String sqlCreateString(org.hibernate.dialect.Dialect,org.hibernate.engine.Mapping,java.lang.String,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Milestone__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.bridge.implementation.BasicNode: void deleteAliases(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicQueryHandler: java.util.List getNodes(org.mmbase.storage.search.SearchQuery,org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: boolean replaceTrigger(java.sql.Connection,org.quartz.core.SchedulingContext,java.lang.String,java.lang.String,org.quartz.Trigger)> -> _SINK_
<org.exolab.castor.persist.spi.QueryExpression: void addOuterJoin(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2BlobClob: long position(java.sql.Blob,long)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: void addBatch(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Campaign: void setCampaignMembers(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: boolean containsBindMarker(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void setTime(int,java.sql.Time)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: int getDatabaseMajorVersion()> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: java.lang.StringBuffer appendLikeOperator(java.lang.StringBuffer,boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<org.mmbase.storage.search.SearchQuery: java.util.List getFields()> -> _SINK_
<org.postgresql.core.PGBindException: void <init>(java.io.IOException)> -> _SINK_
<org.mmbase.module.database.MultiConnection: void release()> -> _SINK_
<com.mysql.jdbc.log.Jdk14Logger: void logError(java.lang.Object)> -> _SINK_
<org.apache.ibatis.executor.statement.PreparedStatementHandler: void parameterize(java.sql.Statement)> -> _SINK_
<org.postgresql.jdbc2.ResultWrapper: void <init>(java.sql.ResultSet)> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,int)> -> _SINK_
<org.hibernate.engine.QueryParameters: void <init>(org.hibernate.type.Type[],java.lang.Object[],java.util.Map,java.util.Map,org.hibernate.engine.RowSelection,boolean,boolean,java.lang.String,java.lang.String,java.io.Serializable[],org.hibernate.transform.ResultTransformer)> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: void appendElementColumns(org.hibernate.sql.SelectFragment,java.lang.String)> -> _SINK_
<org.apache.http.client.utils.URIUtils: java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost,boolean)> -> _SINK_
<org.hibernate.sql.QueryJoinFragment: org.hibernate.sql.JoinFragment copy()> -> _SINK_
<org.hibernate.criterion.SubqueryExpression: org.hibernate.loader.criteria.CriteriaQueryTranslator access$000(org.hibernate.criterion.SubqueryExpression)> -> _SINK_
<org.hibernate.dialect.TimesTenDialect: org.hibernate.sql.JoinFragment createOuterJoinFragment()> -> _SINK_
<org.hibernate.loader.Loader: java.lang.Object getRowFromResultSet(java.sql.ResultSet,org.hibernate.engine.SessionImplementor,org.hibernate.engine.QueryParameters,org.hibernate.LockMode[],org.hibernate.engine.EntityKey,java.util.List,org.hibernate.engine.EntityKey[],boolean)> -> _SINK_
<org.acegisecurity.ui.savedrequest.SavedRequest: java.lang.String getQueryString()> -> _SINK_
<gov.nih.nci.system.query.cql.CQLAssociation: void <init>()> -> _SINK_
<org.springframework.jdbc.core.PreparedStatementCreator: java.sql.PreparedStatement createPreparedStatement(java.sql.Connection)> -> _SINK_
<org.mmbase.module.database.MultiConnection: java.lang.String getLogSqlMessage(long)> -> _SINK_
<org.postgresql.core.BaseConnection: org.postgresql.core.QueryExecutor getQueryExecutor()> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateBytes(java.lang.String,byte[])> -> _SINK_
<org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback: void setValues(java.sql.PreparedStatement,org.springframework.jdbc.support.lob.LobCreator)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsLikeEscapeClause()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: void close()> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$4: void setValue(java.lang.Object,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.util.ServerController: void setBaseDir(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setBlobSendChunkSize(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: boolean last()> -> _SINK_
<java.sql.PreparedStatement: void clearParameters()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void registerOutParameter(java.lang.String,int,java.lang.String)> -> _SINK_
<org.apache.ibatis.type.BaseTypeHandler: java.lang.Object getNullableResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.GlobalDatabaseImpl: void <init>(java.lang.String,int,org.exolab.castor.persist.spi.CallbackInterceptor,org.exolab.castor.persist.spi.InstanceFactory,javax.transaction.Transaction,java.lang.ClassLoader,boolean,boolean)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: java.lang.String getPathAlias(java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.GlobalDatabaseImpl: void close()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Milestone__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.sql.Select: org.hibernate.sql.Select setOrderByClause(java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.data.QueryProcessingException: void <init>(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(java.lang.String,java.lang.Object[],int[],org.springframework.jdbc.core.ResultSetExtractor)> -> _SINK_
<org.postgresql.core.Encoding: boolean isAvailable(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: com.mongodb.DBCollection getCollection()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate$1UpdateStatementCallback: java.lang.Object doInStatement(java.sql.Statement)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: void <init>()> -> _SINK_
<org.mmbase.bridge.util.TreeList$Branch: org.mmbase.bridge.NodeQuery getQuery()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.Messages: java.lang.String getString(java.lang.String)> -> _SINK_
<org.hibernate.engine.QueryParameters: org.hibernate.type.Type[] getPositionalParameterTypes()> -> _SINK_
<com.mysql.jdbc.log.Jdk14Logger: void logFatal(java.lang.Object,java.lang.Throwable)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Ref getRef(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.Timestamp getTimestamp(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.ContractFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.engine.QueryParameters: org.hibernate.engine.RowSelection getRowSelection()> -> _SINK_
<org.hibernate.hql.ast.util.SessionFactoryHelper: org.hibernate.persister.entity.EntityPersister requireClassPersister(java.lang.String)> -> _SINK_
<org.hibernate.tool.hbm2ddl.TableMetadata: void initForeignKeys(java.sql.DatabaseMetaData)> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: void registerSystemIDs()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setDn(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.support.JdbcDaoSupport: void releaseConnection(java.sql.Connection)> -> _SINK_
<com.endeca.navigation.ENEQuery: boolean getDimSearchRankResults()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.UpdateResults update(org.mongodb.morphia.Key,org.mongodb.morphia.query.UpdateOperations)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateNull(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void refreshRow()> -> _SINK_
<com.datastax.driver.core.Configuration: void <init>(com.datastax.driver.core.policies.Policies,com.datastax.driver.core.ProtocolOptions,com.datastax.driver.core.PoolingOptions,com.datastax.driver.core.SocketOptions,com.datastax.driver.core.MetricsOptions,com.datastax.driver.core.QueryOptions)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: int getCurrentClauseType()> -> _SINK_
<org.springframework.jdbc.support.CustomSQLErrorCodesTranslation: java.lang.Class getExceptionClass()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$20: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<org.hibernate.tool.hbm2ddl.SuppliedConnectionProviderConnectionHelper: void prepare(boolean)> -> _SINK_
<org.exolab.castor.gui.QueryHistory: void addQuery(java.lang.String)> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.XmlEtxIndicesReader: java.util.Iterator getEtxindexElements(org.w3c.dom.Element)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: float getFloat(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setNull(java.lang.String,int)> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSourceFactory: javax.sql.DataSource createSerializable(javax.sql.DataSource)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Opportunity: void setQuotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.TrimSqlNode: java.util.List parseOverrides(java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: boolean execute(java.lang.String,int[])> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: int nextCount()> -> _SINK_
<org.mmbase.storage.search.implementation.database.informix.excalibur.EtxSqlHandler: boolean hasAdditionalConstraints(org.mmbase.storage.search.SearchQuery)> -> _SINK_
<org.hibernate.jdbc.ConnectionManager: java.sql.Connection cleanup()> -> _SINK_
<org.mmbase.module.database.MultiPool: int getSize()> -> _SINK_
<org.quartz.impl.jdbcjobstore.PointbaseDelegate: int updateCalendar(java.sql.Connection,java.lang.String,org.quartz.Calendar)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: void rollback()> -> _SINK_
<com.sun.jersey.api.uri.UriBuilderImpl: javax.ws.rs.core.UriBuilder schemeSpecificPart(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Event: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.core.VisibleBufferedInputStream: int read(byte[],int,int)> -> _SINK_
<com.endeca.navigation.RefinementConfigBase: void parseDimValId(java.lang.String)> -> _SINK_
<org.hibernate.usertype.CompositeUserType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<org.mongodb.morphia.query.UpdateOperator: boolean equals(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement$BatchedBindValues: void <init>(com.mysql.jdbc.ServerPreparedStatement$BindValue[])> -> _SINK_
<org.hibernate.mapping.PersistentClass: void setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> -> _SINK_
<org.hibernate.hql.ast.util.LiteralProcessor: void setConstantValue(org.hibernate.hql.ast.tree.DotNode,java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.sql.Select: org.hibernate.sql.Select setSelectClause(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setBytes(int,byte[])> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setNull(java.lang.String,int)> -> _SINK_
<java.sql.CallableStatement: double getDouble(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.criterion.Distinct: java.lang.String toSqlString(org.hibernate.Criteria,int,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: boolean othersDeletesAreVisible(int)> -> _SINK_
<org.springframework.jdbc.support.lob.LobCreator: void setBlobAsBytes(java.sql.PreparedStatement,int,byte[])> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$SelectionOrAlias: com.datastax.driver.core.querybuilder.Select$Selection addName(java.lang.Object)> -> _SINK_
<gov.nih.nci.system.web.HTTPQuery: boolean validateQuery(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Task: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setUnicodeStream(int,java.io.InputStream,int)> -> _SINK_
<org.hibernate.sql.QuerySelect: void setDistinct(boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: boolean isTracing()> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.CQL2ParameterizedHQL: void initPredicateValues()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: boolean rowDeleted()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: java.math.BigDecimal getBigDecimal(int,int)> -> _SINK_
<com.mysql.jdbc.UpdatableResultSet: void updateBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<org.hibernate.hql.ast.util.SyntheticAndFactory: void addDiscriminatorWhereFragment(org.hibernate.hql.ast.tree.RestrictableStatement,org.hibernate.persister.entity.Queryable,java.util.Map,java.lang.String)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.FieldValueConstraint createConstraint(org.mmbase.storage.search.StepField,int,java.lang.Object)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: java.sql.ResultSet getResultSet()> -> _SINK_
<com.sforce.soap.enterprise.sobject.BlogForce_Blog__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.orm.ibatis.support.SqlMapClientDaoSupport: javax.sql.DataSource getDataSource()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsOpenCursorsAcrossCommit()> -> _SINK_
<org.springframework.orm.hibernate3.HibernateTransactionManager: void doCleanupAfterCompletion(java.lang.Object)> -> _SINK_
<org.hibernate.hql.ast.tree.AggregateNode: org.hibernate.type.Type getDataType()> -> _SINK_
<org.mongodb.morphia.query.WhereCriteria: void <init>(org.bson.types.CodeWScope)> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceUtils: java.lang.Integer prepareConnectionForTransaction(java.sql.Connection,org.springframework.transaction.TransactionDefinition)> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: int writeInt(int,byte[],int)> -> _SINK_
<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.Buffer checkErrorPacket(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getSearchStringEscape()> -> _SINK_
<org.mongodb.morphia.query.FieldEndImpl: java.lang.Object near(double,double)> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: org.hibernate.cache.QueryCache getQueryCache()> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$1ProxyPreparedStatement: java.sql.ResultSet getResultSet()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean othersInsertsAreVisible(int)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Options: com.datastax.driver.core.RegularStatement setForceNoValues(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setEscapeProcessing(boolean)> -> _SINK_
<org.apache.ibatis.executor.ReuseExecutor: void putStatement(java.lang.String,java.sql.Statement)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateNClob(java.lang.String,java.sql.NClob)> -> _SINK_
<org.mmbase.util.ParseItem: void sqlConversion(java.lang.StringBuffer)> -> _SINK_
<com.mchange.v2.c3p0.mbean.C3P0PooledDataSource: void setPreferredTestQuery(java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.SDK4QueryProcessor: boolean useCaseInsensitiveQueries()> -> _SINK_
<com.amazonaws.services.datapipeline.model.QueryObjectsRequest: int hashCode()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setClob(java.lang.String,java.sql.Clob)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void insertablePropertySpec(antlr.collections.AST)> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringDecoder: java.lang.String decodeComponent(java.lang.String)> -> _SINK_
<org.apache.ibatis.logging.jdbc.PreparedStatementLogger: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<org.mmbase.storage.search.implementation.BasicSearchQuery: org.mmbase.storage.search.implementation.BasicStep addStep(org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<com.mysql.jdbc.Connection: java.lang.String getCharacterSetMetadata()> -> _SINK_
<org.hibernate.impl.SessionFactoryImpl: java.util.Map checkNamedQueries()> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: boolean hasProjection()> -> _SINK_
<com.mysql.jdbc.CallableStatement: void addBatch()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: int getMaxFieldSize()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Idea: void setComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void registerOutParameter(java.lang.String,int,int)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.lang.Object getObject(java.lang.String,java.util.Map)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection: void close()> -> _SINK_
<org.springframework.orm.hibernate3.support.AbstractLobType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],java.lang.Object)> -> _SINK_
<org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager: javax.sql.DataSource getDefaultDataSource()> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion propertyNe(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback: java.lang.Object doInStatement(java.sql.Statement)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaJoinWalker: void <init>(org.hibernate.persister.entity.OuterJoinLoadable,org.hibernate.loader.criteria.CriteriaQueryTranslator,org.hibernate.engine.SessionFactoryImplementor,org.hibernate.impl.CriteriaImpl,java.lang.String,java.util.Map)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.lang.Object getObject(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: boolean executeWithFlags(java.lang.String,int)> -> _SINK_
<org.postgresql.core.ParameterList: int getOutParameterCount()> -> _SINK_
<gov.nih.nci.cagrid.data.stubs.QueryResponse: gov.nih.nci.cagrid.cqlresultset.CQLQueryResults getCQLQueryResultCollection()> -> _SINK_
<org.apache.ibatis.type.NClobTypeHandler: java.lang.Object getNullableResult(java.sql.CallableStatement,int)> -> _SINK_
<org.postgresql.geometric.PGpoint: void <init>()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$70: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: org.hibernate.persister.collection.CollectionPersister[] getCollectionPersisters()> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.TrimSqlNode$FilteredDynamicContext: java.lang.String getSql()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Blob getBlob(java.lang.String)> -> _SINK_
<org.springframework.jdbc.datasource.DelegatingDataSource: java.io.PrintWriter getLogWriter()> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void processQuery(antlr.collections.AST,antlr.collections.AST)> -> _SINK_
<org.hibernate.Query: org.hibernate.Query setParameter(int,java.lang.Object)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: org.hibernate.hql.ast.util.SessionFactoryHelper getSessionFactoryHelper()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateShort(int,short)> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryReader: boolean hasAttribute(org.w3c.dom.Element,java.lang.String)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.sql.Date getDate(java.lang.String,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getAlwaysSendSetIsolation()> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfo: java.lang.String getParameterClassName(int)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setFetchSize(int)> -> _SINK_
<org.springframework.jdbc.support.lob.OracleLobHandler: java.io.InputStream getClobAsAsciiStream(java.sql.ResultSet,int)> -> _SINK_
<org.postgresql.core.PGStream: void SendStream(java.io.InputStream,int)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: void <init>(java.lang.Class,com.mongodb.DBCollection,org.mongodb.morphia.Datastore)> -> _SINK_
<org.mmbase.bridge.Query: java.lang.Object clone()> -> _SINK_
<com.mysql.jdbc.NamedPipeSocketFactory$RandomAccessFileInputStream: void <init>(com.mysql.jdbc.NamedPipeSocketFactory,java.io.RandomAccessFile)> -> _SINK_
<org.hibernate.jdbc.ConnectionManager: void releaseBorrowedConnection()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setObject(int,java.lang.Object,int)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: void setConstraint(org.mmbase.storage.search.Constraint)> -> _SINK_
<org.mmbase.bridge.util.TreeList: org.mmbase.bridge.NodeList getLeafList(int)> -> _SINK_
<org.hibernate.jdbc.Expectations$BasicExpectation: int determineRowCount(int,java.sql.PreparedStatement)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: double getDouble(int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: java.lang.String trimString(int,java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: void applyStatementSettings(java.sql.Statement)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateTriggerStatesFromOtherStates(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Assignment$SetAssignment: void appendTo(java.lang.StringBuilder,java.util.List)> -> _SINK_
<org.springframework.jdbc.core.support.SqlLobValue: void <init>(java.io.Reader,int)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Date getDate(java.lang.String,java.util.Calendar)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setNClob(java.lang.String,java.io.Reader,long)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setMaxFieldSize(int)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: java.sql.ResultSet getSchemas()> -> _SINK_
<org.mmbase.util.XMLEntityResolver: void <clinit>()> -> _SINK_
<gov.nih.nci.logging.api.applicationservice.Query: java.util.Collection query(int)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void processDeadPortals()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: int getInt(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Buffer: void writeString(java.lang.String,java.lang.String,com.mysql.jdbc.Connection)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment appendAll(java.lang.String,com.datastax.driver.core.querybuilder.BindMarker)> -> _SINK_
<com.sforce.soap.enterprise.sobject.TestObj1__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.hql.antlr.SqlGeneratorBase: void simpleExprList(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.ResultSet: long getUpdateID()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: byte[] getBytes(int)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void moveToInsertRow()> -> _SINK_
<com.mysql.jdbc.Messages: java.lang.String getString(java.lang.String,java.lang.Object[])> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateFloat(int,float)> -> _SINK_
<org.hibernate.engine.query.ParameterMetadata: int getOrdinalParameterSourceLocation(int)> -> _SINK_
<org.mongodb.morphia.mapping.Mapper: java.lang.Object toMongoObject(org.mongodb.morphia.mapping.MappedField,org.mongodb.morphia.mapping.MappedClass,java.lang.Object)> -> _SINK_
<org.hibernate.jdbc.BatchingBatcher: void addToBatch(org.hibernate.jdbc.Expectation)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: boolean last()> -> _SINK_
<com.amazonaws.services.dynamodb.model.QueryResult: com.amazonaws.services.dynamodb.model.Key getLastEvaluatedKey()> -> _SINK_
<java.sql.ResultSet: java.sql.Date getDate(java.lang.String)> -> _SINK_
<org.postgresql.core.Logger: void info(java.lang.String)> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: boolean rowInserted()> -> _SINK_
<com.mysql.jdbc.BlobFromLocator$LocatorInputStream: int read()> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Where: java.lang.String getQueryString()> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: boolean supportsIdGenWithBulkInsertion(org.hibernate.id.IdentifierGenerator)> -> _SINK_
<org.hibernate.action.BulkOperationCleanupAction: void <init>(org.hibernate.engine.SessionImplementor,org.hibernate.persister.entity.Queryable[])> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: long[] computeMaxParameterSetSizeAndBatchSize(int)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.Query find(java.lang.Class,java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.type.ClobType: java.lang.Object fromXMLNode(org.dom4j.Node,org.hibernate.engine.Mapping)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsDataDefinitionAndDataManipulationTransactions()> -> _SINK_
<org.hibernate.id.IdentityGenerator$GetGeneratedKeysDelegate: java.sql.PreparedStatement prepare(java.lang.String,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.hibernate.engine.query.ParamLocationRecognizer: void <init>()> -> _SINK_
<org.postgresql.util.PSQLDriverVersion: void main(java.lang.String[])> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setEmptyStringsConvertToZero(boolean)> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator: void <init>(org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<com.mysql.jdbc.Connection: java.sql.PreparedStatement clientPrepareStatement(java.lang.String,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.lang.String getExtraNameCharacters()> -> _SINK_
<java.sql.ResultSet: void setFetchDirection(int)> -> _SINK_
<org.apache.commons.beanutils.converters.SqlTimestampConverter: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: java.sql.CallableStatement prepareCall(java.lang.String,int,int,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: int deleteFiredTriggers(java.sql.Connection)> -> _SINK_
<java.sql.ResultSet: void updateObject(java.lang.String,java.lang.Object)> -> _SINK_
<org.mmbase.bridge.util.Queries: int count(org.mmbase.bridge.Query)> -> _SINK_
<com.sforce.soap.enterprise.fault.MalformedSearchFault: java.lang.String toString()> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder greaterThanEquals(java.lang.Object)> -> _SINK_
<org.hibernate.type.ShortType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setUnicodeStream(int,java.io.InputStream,int)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.lang.String getString(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.PoolBackedDataSource: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager getPoolManager()> -> _SINK_
<org.hibernate.type.DateType: void set(java.sql.PreparedStatement,java.lang.Object,int)> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: java.lang.String format(java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Ordering: void <init>(java.lang.String,boolean)> -> _SINK_
<entities.dao.hibernate.DAOHibernateTransaction: java.lang.Object lookup(java.lang.Class,java.lang.Object)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Investor_Account__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.apache.ibatis.type.DateOnlyTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: void setTypeMap(java.util.Map)> -> _SINK_
<org.apache.ibatis.transaction.TransactionFactory: org.apache.ibatis.transaction.Transaction newTransaction(java.sql.Connection,boolean)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setNull(java.lang.String,int,java.lang.String)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl$1: void handleWarning(java.sql.SQLWarning)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.sql.Date getDate(java.lang.String)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setDi(java.lang.String)> -> _SINK_
<org.springframework.jdbc.datasource.lookup.MapDataSourceLookup: void addDataSource(java.lang.String,javax.sql.DataSource)> -> _SINK_
<org.hibernate.mapping.SimpleAuxiliaryDatabaseObject: java.lang.String sqlDropString(org.hibernate.dialect.Dialect,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.tree.SelectExpressionImpl: void setScalarColumnText(int)> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator$FunctionArguments: java.util.List getArgs()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Assignments: com.datastax.driver.core.querybuilder.Update$Conditions onlyIf(com.datastax.driver.core.querybuilder.Clause)> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker: void postProcessInsert(antlr.collections.AST)> -> _SINK_
<java.sql.ResultSet: void setFetchSize(int)> -> _SINK_
<gov.nih.nci.cananolab.service.publication.helper.PublicationServiceHelper: gov.nih.nci.cananolab.domain.common.Publication findPublicationById(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.Map queryForMap(java.lang.String,java.util.Map)> -> _SINK_
<org.postgresql.geometric.PGline: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateString(java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$IntegerConnectionProperty: int getValueAsInt()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setTime(int,java.sql.Time)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void releaseAcquiredTrigger(java.sql.Connection,org.quartz.core.SchedulingContext,org.quartz.Trigger)> -> _SINK_
<org.hibernate.engine.PersistenceContext: java.lang.Object[] getDatabaseSnapshot(java.io.Serializable,org.hibernate.persister.entity.EntityPersister)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: int getPrepStmtCacheSqlLimit()> -> _SINK_
<org.hibernate.loader.entity.EntityLoader: void <init>(org.hibernate.persister.entity.OuterJoinLoadable,java.lang.String[],org.hibernate.type.Type,int,org.hibernate.LockMode,org.hibernate.engine.SessionFactoryImplementor,java.util.Map)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: boolean getMoreResults()> -> _SINK_
<org.hibernate.dialect.HSQLDialect$1: void <init>()> -> _SINK_
<com.datastax.driver.core.Connection: void setKeyspace(java.lang.String)> -> _SINK_
<org.hibernate.criterion.SubqueryExpression: void <init>(java.lang.String,java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.mmbase.util.transformers.Sql: java.io.Writer singleQuoteBack(java.io.Reader,java.io.Writer)> -> _SINK_
<gov.nih.nci.cagrid.data.enumeration.stubs.EnumerationQueryRequestCqlQuery: void setCQLQuery(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<org.mmbase.module.database.ConnectionWrapper: boolean isReadOnly()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> -> _SINK_
<org.hibernate.sql.ConditionFragment: java.lang.String toFragmentString()> -> _SINK_
<com.endeca.navigation.analytics.FilterCompare: java.lang.String toString()> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: void deleteObject(org.mmbase.module.core.MMObjectNode,org.mmbase.module.core.MMObjectBuilder)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.String getServerTimezone()> -> _SINK_
<org.postgresql.copy.PGCopyOutputStream: void close()> -> _SINK_
<com.mysql.jdbc.ServerPreparedStatement: void setTime(int,java.sql.Time,java.util.Calendar)> -> _SINK_
<com.endeca.navigation.ENEQuery: void setNavMerchRuleFilter(java.lang.String)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.beans.domaininfo.DomainType: boolean equals(java.lang.Object)> -> _SINK_
<java.sql.CallableStatement: java.lang.String getString(java.lang.String)> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: java.util.Iterator tail()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Timestamp getTimestamp(int)> -> _SINK_
<org.mmbase.module.database.MultiStatement: void setQueryTimeout(int)> -> _SINK_
<org.mmbase.bridge.NodeManager: org.mmbase.bridge.NodeQuery createQuery()> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: java.lang.String getColumnClassName(int)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.String extractStringFromNativeColumn(int,int)> -> _SINK_
<com.mysql.jdbc.Statement: void setHoldResultsOpenOverClose(boolean)> -> _SINK_
<gov.nih.nci.cananolab.service.sample.impl.SampleServiceLocalImpl: java.util.List findPointOfContactsBySampleId(java.lang.String)> -> _SINK_
<org.springframework.orm.ibatis.support.BlobByteArrayTypeHandler: java.lang.Object getResultInternal(java.sql.ResultSet,int,org.springframework.jdbc.support.lob.LobHandler)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: int getUpdateCount()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void setImpliedJoinType(int)> -> _SINK_
<com.amazonaws.auth.QueryStringSigner: java.lang.String calculateStringToSignV1(java.util.Map)> -> _SINK_
<java.sql.Array: java.lang.Object getArray()> -> _SINK_
<org.exolab.castor.jdo.keygen.IdentityKeyGenerator$AbstractType: java.lang.Object getValue(java.sql.PreparedStatement)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyConnection: void attach(com.mchange.v2.c3p0.impl.NewPooledConnection)> -> _SINK_
<org.springframework.jdbc.core.SqlProvider: java.lang.String getSql()> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: java.util.Set getProtectionGroupRoleContextForUser(java.lang.String)> -> _SINK_
<org.hibernate.connection.DriverManagerConnectionProvider: java.sql.Connection getConnection()> -> _SINK_
<org.postgresql.core.Field: boolean getAutoIncrement()> -> _SINK_
<org.apache.ibatis.session.defaults.DefaultSqlSession: java.sql.Connection getConnection()> -> _SINK_
<org.mmbase.cache.NodeListCache: void <init>(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: void clusterRecover(java.sql.Connection,java.util.List)> -> _SINK_
<org.springframework.jdbc.object.SqlUpdate: int update(java.lang.Object[])> -> _SINK_
<org.springframework.jdbc.object.SqlOperation: void <init>()> -> _SINK_
<org.hibernate.exception.JDBCExceptionHelper: java.lang.String determineSqlStateClassCode(java.lang.String)> -> _SINK_
<org.hibernate.jmx.StatisticsService: long getQueryCacheMissCount()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Candidate__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean isLast()> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.ApplicationServiceImpl: gov.nih.nci.system.dao.Response query(gov.nih.nci.system.dao.Request)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser$ParserContext: boolean isEntityAlias(java.lang.String)> -> _SINK_
<com.amazonaws.services.datapipeline.DataPipelineAsyncClient$12: java.lang.Object call()> -> _SINK_
<org.hibernate.dialect.Dialect$2: org.hibernate.type.Type getReturnType(org.hibernate.type.Type,org.hibernate.engine.Mapping)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setUseServerPrepare(boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update: java.lang.StringBuilder buildQueryString(java.util.List)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlTimeLocaleConverter: void <init>(java.util.Locale,java.lang.String)> -> _SINK_
<org.mmbase.bridge.util.GrowingTreeList: void main(java.lang.String[])> -> _SINK_
<com.mysql.jdbc.Connection: java.lang.String getErrorMessageEncoding()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNk(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.lang.Object queryForObject(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource,java.lang.Class)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: int getQueryTimeout()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.util.TimeZone getDefaultTimeZone()> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$6: java.lang.Object doInSqlMapClient(com.ibatis.sqlmap.client.SqlMapExecutor)> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator: java.lang.StringBuffer access$000(org.hibernate.hql.ast.SqlGenerator)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: float getFloat(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Time getTimeFromBytes(byte[],java.util.Calendar,int,java.util.TimeZone,boolean)> -> _SINK_
<org.exolab.castor.jdo.drivers.MySQLQueryExpression: java.lang.String getStatement(boolean)> -> _SINK_
<org.hibernate.impl.SQLQueryImpl: java.util.List list()> -> _SINK_
<org.hibernate.impl.ScrollableResultsImpl: void <init>(java.sql.ResultSet,java.sql.PreparedStatement,org.hibernate.engine.SessionImplementor,org.hibernate.loader.Loader,org.hibernate.engine.QueryParameters,org.hibernate.type.Type[],org.hibernate.hql.HolderInstantiator)> -> _SINK_
<com.endeca.navigation.analytics.Select: void validateSyntax()> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.sql.Savepoint setSavepoint()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Conditions: com.datastax.driver.core.ConsistencyLevel getConsistencyLevel()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: java.lang.Object getObject(int,java.lang.Class)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: void ensureIndex(java.lang.String,java.lang.Class,java.lang.String,java.lang.String,boolean,boolean,boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.Select$Where: java.nio.ByteBuffer[] getValues()> -> _SINK_
<org.postgresql.Driver$ConnectThread: void <init>(java.lang.String,java.util.Properties)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateBlob(java.lang.String,java.io.InputStream)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsIntegrityEnhancementFacility()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper: void setLong(int,long)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLEngine: java.lang.Object load(java.lang.Object,org.castor.persist.ProposedEntity,org.exolab.castor.persist.spi.Identity,org.exolab.castor.mapping.AccessMode)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: boolean hasPropertyResultMap(java.lang.String)> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void prepareLogicOperator(antlr.collections.AST)> -> _SINK_
<com.mysql.jdbc.PreparedStatement: int[] executeBatchSerially()> -> _SINK_
<org.exolab.castor.jdo.JDOManager: boolean getDatabasePooling()> -> _SINK_
<org.mongodb.morphia.query.GeoFieldCriteria$1: void <clinit>()> -> _SINK_
<org.mongodb.morphia.query.QueryImpl: com.mongodb.DBObject getSortObject()> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion notExists(org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: void setAttributesToGet(java.util.Collection)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: boolean getMoreResults(int)> -> _SINK_
<org.castor.persist.LocalTransactionContext: void rollbackConnections()> -> _SINK_
<org.postgresql.copy.CopyManager: org.postgresql.copy.CopyOut copyOut(java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.ViewDatabaseStorageManager: void createView(org.mmbase.module.core.MMObjectBuilder,org.mmbase.module.core.MMObjectBuilder,java.util.List,java.lang.String)> -> _SINK_
<org.castor.jdo.conf.DatabaseChoice: org.castor.jdo.conf.Driver getDriver()> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory: javax.sql.DataSource getDataSource()> -> _SINK_
<com.amazonaws.services.dynamodb.datamodeling.DynamoDBMapper: com.amazonaws.services.dynamodb.datamodeling.QueryResultPage queryPage(java.lang.Class,com.amazonaws.services.dynamodb.datamodeling.DynamoDBQueryExpression,com.amazonaws.services.dynamodb.datamodeling.DynamoDBMapperConfig)> -> _SINK_
<org.apache.ibatis.jdbc.SelectBuilder: org.apache.ibatis.jdbc.SelectBuilder$SelectSQL sql()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Project_Snapshot__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.QueryMoreResponse_element: void <init>()> -> _SINK_
<org.postgresql.util.PGInterval: int getYears()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setArs(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.lang.String getString(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsAlterTableWithDropColumn()> -> _SINK_
<org.springframework.jdbc.object.RdbmsOperation: void compile()> -> _SINK_
<java.sql.DatabaseMetaData: boolean supportsLimitedOuterJoins()> -> _SINK_
<gov.nih.nci.cananolab.service.PublicDataCountJob: void queryPublicDataCounts()> -> _SINK_
<com.mysql.jdbc.util.BaseBugReport: void tearDown()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.StatementWrapper: int getResultSetConcurrency()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.sql.PreparedStatement prepareStatement(java.lang.String,int)> -> _SINK_
<org.apache.ibatis.builder.SqlSourceBuilder: void <init>(org.apache.ibatis.session.Configuration)> -> _SINK_
<org.postgresql.core.v3.CopyOperationImpl: void cancelCopy()> -> _SINK_
<org.mmbase.module.core.ClusterBuilder: void addFields(org.mmbase.storage.search.implementation.BasicSearchQuery,java.lang.String,java.util.Map,java.util.Map)> -> _SINK_
<test.gov.nih.nci.logging.api.applicationservice.QueryTestCase: void testQuery_OffSet_Not0_RecordCount_Not0_NoResults()> -> _SINK_
<com.mchange.v2.c3p0.DriverManagerDataSourceFactory: javax.sql.DataSource create(java.lang.String,java.lang.String,java.util.Properties,java.lang.String)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void delete(org.mmbase.storage.util.Index)> -> _SINK_
<org.hibernate.mapping.Join: org.hibernate.engine.ExecuteUpdateResultCheckStyle getCustomSQLInsertCheckStyle()> -> _SINK_
<org.hibernate.engine.TransactionHelper: java.io.Serializable doWorkInCurrentTransaction(java.sql.Connection,java.lang.String)> -> _SINK_
<java.sql.CallableStatement: java.sql.Ref getRef(java.lang.String)> -> _SINK_
<org.hibernate.engine.SessionImplementor: int executeNativeUpdate(org.hibernate.engine.query.sql.NativeSQLQuerySpecification,org.hibernate.engine.QueryParameters)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterConnection: void setCatalog(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.StdJDBCDelegate: java.lang.Object getObjectFromBlob(java.sql.ResultSet,java.lang.String)> -> _SINK_
<com.endeca.navigation.ENEQuery: java.lang.String getAggrERecRollupKey()> -> _SINK_
<com.sforce.soap.enterprise.sobject.CaseFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: boolean getMoreResults(int)> -> _SINK_
<com.mysql.jdbc.Connection: com.mysql.jdbc.CallableStatement parseCallableStatement(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<org.springframework.jdbc.support.SQLStateSQLExceptionTranslator: java.lang.String buildMessage(java.lang.String,java.lang.String,java.sql.SQLException)> -> _SINK_
<com.datastax.driver.core.querybuilder.Insert$Options: com.datastax.driver.core.Statement enableTracing()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: int getMaxColumnsInTable()> -> _SINK_
<org.castor.persist.LocalTransactionContext: java.sql.Connection createConnection(org.exolab.castor.persist.LockEngine)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: int getInt(int)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementType: java.lang.String renderCollectionSelectFragment(int,int)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Date getDate(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void clearBatch()> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$62: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<com.mchange.v2.c3p0.JndiRefForwardingDataSource: javax.sql.DataSource inner()> -> _SINK_
<com.sforce.soap.enterprise.Query_element: void <init>()> -> _SINK_
<com.mysql.jdbc.ResultSet: java.lang.Object getNativeDateTimeValue(int,java.util.Calendar,int,int,java.util.TimeZone,boolean)> -> _SINK_
<com.mysql.jdbc.Statement: boolean getMoreResults()> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: byte[] receiveFastpathResult()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: java.lang.Object findAndDelete(org.mongodb.morphia.query.Query)> -> _SINK_
<org.castor.jdo.util.JDOConfFactory: org.castor.jdo.conf.Database createDatabase(java.lang.String,java.lang.String)> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: boolean execute()> -> _SINK_
<com.mysql.jdbc.util.BaseBugReport: void <init>()> -> _SINK_
<org.springframework.orm.jdo.DefaultJdoDialect$DataStoreConnectionHandle: void releaseConnection(java.sql.Connection)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Interview__c: void setHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: com.ibatis.common.util.PaginatedList queryForPaginatedList(java.lang.String,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void clearWarnings()> -> _SINK_
<org.hibernate.sql.Update: org.hibernate.sql.Update setWhere(java.lang.String)> -> _SINK_
<org.hibernate.hql.ast.exec.BasicExecutor: int execute(org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.springframework.jdbc.core.ArgTypePreparedStatementSetter: void setValues(java.sql.PreparedStatement)> -> _SINK_
<org.castor.jdo.conf.Database: org.castor.jdo.conf.Mapping[] getMapping()> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy: java.util.Map access$200(com.mysql.jdbc.LoadBalancingConnectionProxy)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setTime(int,java.sql.Time,java.util.Calendar)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void sendDescribePortal(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.Portal)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: void executeTransactionCommand(org.postgresql.core.Query)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: boolean exists(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setInt(java.lang.String,int)> -> _SINK_
<org.springframework.jdbc.support.nativejdbc.JBossNativeJdbcExtractor: java.sql.Statement getNativeStatement(java.sql.Statement)> -> _SINK_
<org.acegisecurity.acls.jdbc.BasicLookupStrategy: void lookupPrimaryKeys(java.util.Map,java.util.Set,org.acegisecurity.acls.sid.Sid[])> -> _SINK_
<org.hibernate.param.VersionTypeSeedParameterSpecification: int bind(java.sql.PreparedStatement,org.hibernate.engine.QueryParameters,org.hibernate.engine.SessionImplementor,int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$34: void execute(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy: java.lang.Class class$(java.lang.String)> -> _SINK_
<org.exolab.castor.gui.QueryAnalyser$3: void actionPerformed(java.awt.event.ActionEvent)> -> _SINK_
<org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler: java.sql.Connection getTargetConnection(java.lang.reflect.Method)> -> _SINK_
<org.mmbase.module.database.MultiStatement: boolean getMoreResults()> -> _SINK_
<com.mysql.jdbc.StandardSocketFactory: void unwrapExceptionToProperClassAndThrowIt(java.lang.Throwable)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: void setShort(java.lang.String,short)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void registerOutParameter(java.lang.String,int,int)> -> _SINK_
<com.sforce.soap.enterprise.fault.ApiQueryFault: java.lang.String toString()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void close()> -> _SINK_
<com.mysql.jdbc.profiler.ProfilerEvent: long getConnectionId()> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setSocketFactory(java.lang.String)> -> _SINK_
<com.mysql.jdbc.MysqlIO: java.util.Calendar getCalendarInstanceForSessionOrNew()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contract: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$ConnectionProperty: void initializeFrom(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateDouble(int,double)> -> _SINK_
<org.mmbase.bridge.implementation.BasicQuery: org.mmbase.storage.search.StepField createStepField(org.mmbase.storage.search.Step,org.mmbase.bridge.Field)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: int getResultSetHoldability()> -> _SINK_
<com.sforce.soap.enterprise.sobject.CollaborationGroupFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: java.lang.String getManyTable()> -> _SINK_
<com.mysql.jdbc.ResultSet: boolean absolute(int)> -> _SINK_
<org.apache.ibatis.type.ByteTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryDefinition: void <init>()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.UpdateOperations createUpdateOperations(java.lang.Class,com.mongodb.DBObject)> -> _SINK_
<com.mysql.jdbc.Field: java.lang.String getDatabaseName()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: double getDouble(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Blob getBlob(int)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: void processScalarReturn(org.hibernate.engine.query.sql.NativeSQLQueryScalarReturn)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setResultSetSizeThreshold(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Location__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: java.lang.String getUseConfigs()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.DBObject get()> -> _SINK_
<com.mysql.jdbc.MysqlIO: void extractNativeEncodedColumn(com.mysql.jdbc.Buffer,com.mysql.jdbc.Field[],int,java.lang.Object[])> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: void appendField(java.lang.StringBuffer,org.mmbase.storage.search.Step,java.lang.String,boolean)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3Statement: boolean execute(java.lang.String,int)> -> _SINK_
<org.mongodb.morphia.dao.BasicDAO: long count(java.lang.String,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.Constants: void <clinit>()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: boolean supportsStoredProcedures()> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlucase(java.util.List)> -> _SINK_
<com.mysql.jdbc.CallableStatement: void setTime(java.lang.String,java.sql.Time)> -> _SINK_
<org.postgresql.fastpath.Fastpath: java.lang.Object fastpath(int,boolean,org.postgresql.fastpath.FastpathArg[])> -> _SINK_
<org.hibernate.jdbc.AbstractBatcher: void closeStatement(java.sql.PreparedStatement)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: java.math.BigDecimal getBigDecimal(int)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: void <init>(org.postgresql.core.v2.ProtocolConnectionImpl,org.postgresql.core.PGStream,org.postgresql.core.Logger)> -> _SINK_
<com.amazonaws.services.dynamodbv2.model.QueryRequest: com.amazonaws.services.dynamodbv2.model.QueryRequest withAttributesToGet(java.lang.String[])> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateClob(int,java.io.Reader,long)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryParser$ParameterSubstitutionRecognizer: void <init>()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: java.lang.String formatSortKeys(com.endeca.navigation.ERecSortKeyList)> -> _SINK_
<org.postgresql.util.PGInterval: void scale(int)> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.Query setParameterList(java.lang.String,java.util.Collection,org.hibernate.type.Type)> -> _SINK_
<org.exolab.castor.persist.spi.CallbackInterceptor: void creating(java.lang.Object,org.exolab.castor.jdo.Database)> -> _SINK_
<com.amazonaws.services.datapipeline.model.Query: int hashCode()> -> _SINK_
<com.sforce.soap.enterprise.fault.ApiQueryFault: void setRow(int)> -> _SINK_
<org.postgresql.util.ByteConverter: long int8(byte[],int)> -> _SINK_
<org.mongodb.morphia.query.Query: java.lang.Class getEntityClass()> -> _SINK_
<com.mysql.jdbc.Connection: void repartitionPerformanceHistogram()> -> _SINK_
<com.mysql.jdbc.CallableStatement: byte getByte(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setShort(int,short)> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper: java.lang.String getString(int)> -> _SINK_
<java.sql.CallableStatement: void setInt(java.lang.String,int)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.MixedSqlNode: void <init>(java.util.List)> -> _SINK_
<org.hibernate.impl.AbstractScrollableResults: org.hibernate.engine.QueryParameters getQueryParameters()> -> _SINK_
<org.exolab.castor.jdo.drivers.JDBCQueryExpression: void addOuterJoin(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[])> -> _SINK_
<org.postgresql.jdbc2.TimestampUtils: void appendEra(java.lang.StringBuffer,java.util.Calendar)> -> _SINK_
<gov.nih.nci.cagrid.data.stubs.DataServicePortType: gov.nih.nci.cagrid.data.stubs.QueryResponse query(gov.nih.nci.cagrid.data.stubs.QueryRequest)> -> _SINK_
<gov.nih.nci.security.authentication.helper.RDBMSHelper: java.sql.Connection getConnection(java.util.Hashtable)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: java.sql.ResultSet getResultSetImpl(java.util.Map)> -> _SINK_
<org.hibernate.impl.AbstractScrollableResults: void <init>(java.sql.ResultSet,java.sql.PreparedStatement,org.hibernate.engine.SessionImplementor,org.hibernate.loader.Loader,org.hibernate.engine.QueryParameters,org.hibernate.type.Type[],org.hibernate.hql.HolderInstantiator)> -> _SINK_
<org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter: void <init>(java.lang.Object,java.util.Locale)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getIgnoreNonTxTables()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.query.Query queryByExample(java.lang.String,java.lang.Object)> -> _SINK_
<org.hibernate.engine.query.NativeSQLQueryPlan: void <init>(org.hibernate.engine.query.sql.NativeSQLQuerySpecification,org.hibernate.engine.SessionFactoryImplementor)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: int getResultSetType()> -> _SINK_
<com.sforce.soap.enterprise.sobject.CustomEmail__c: void setProcessInstances(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: void <init>(java.sql.PreparedStatement)> -> _SINK_
<org.postgresql.core.VisibleBufferedInputStream: int peek()> -> _SINK_
<org.postgresql.util.ServerErrorMessage: java.lang.String getMessage()> -> _SINK_
<java.sql.ResultSet: java.sql.Array getArray(int)> -> _SINK_
<oracle.toplink.sessions.Session: boolean isDatabaseSession()> -> _SINK_
<com.mchange.v2.sql.filter.FilterPreparedStatement: int getUpdateCount()> -> _SINK_
<com.mysql.jdbc.ResultSet: void moveToCurrentRow()> -> _SINK_
<org.apache.taglibs.standard.tag.common.sql.QueryTagSupport: void init()> -> _SINK_
<org.castor.jdo.drivers.PreparedStatementProxy: void setURL(int,java.net.URL)> -> _SINK_
<java.sql.CallableStatement: void setObject(java.lang.String,java.lang.Object)> -> _SINK_
<org.postgresql.ds.common.BaseDataSource: java.lang.String getUser()> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: boolean next()> -> _SINK_
<org.hibernate.hql.ast.SqlGenerator$DefaultWriter: void <init>(org.hibernate.hql.ast.SqlGenerator)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setInt(int,int)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.CallableStatement newCallableStatementProxy(java.sql.CallableStatement,java.lang.String,java.sql.Connection)> -> _SINK_
<org.springframework.jdbc.core.SqlOutParameter: void <init>(java.lang.String,int,org.springframework.jdbc.core.RowMapper)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getSuperTypes(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.OQLQueryImpl$OQLEnumeration: void close()> -> _SINK_
<org.hibernate.impl.AbstractSessionImpl: org.hibernate.SQLQuery createSQLQuery(java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Quote: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.largeobject.LargeObjectManager: org.postgresql.largeobject.LargeObject open(int,int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Account: void setHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: int queryForInt(java.lang.String,java.util.Map)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.RelationStep addRelationStep(org.mmbase.bridge.NodeManager,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void insertRow()> -> _SINK_
<org.hibernate.hql.ast.HqlSqlWalker$WithClauseVisitor: void <init>(org.hibernate.hql.ast.HqlSqlWalker$1)> -> _SINK_
<org.hibernate.hql.classic.QueryTranslatorImpl: void addPathAliasAndJoin(java.lang.String,java.lang.String,org.hibernate.engine.JoinSequence)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl$2: void handleCommandStatus(java.lang.String,int,long)> -> _SINK_
<com.mchange.v2.c3p0.ComboPooledDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.type.BooleanType: java.lang.String objectToSQLString(java.lang.Object,org.hibernate.dialect.Dialect)> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Group: gov.nih.nci.cagrid.cqlquery.Group[] getGroup()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: void setNull(int,int,java.lang.String)> -> _SINK_
<com.mysql.jdbc.exceptions.MySQLTransientException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.util.PGInterval: int getDays()> -> _SINK_
<com.mchange.v2.sql.filter.FilterConnection: java.sql.SQLWarning getWarnings()> -> _SINK_
<com.mysql.jdbc.ReplicationConnection: java.sql.CallableStatement prepareCall(java.lang.String,int,int,int)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$27: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.hql.classic.SelectPathExpressionParser: void setExpectingCollectionIndex()> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection: void fireConnectionError(java.sql.SQLException)> -> _SINK_
<gov.nih.nci.cananolab.service.publication.helper.PublicationServiceHelper: java.util.List findPublicationIdsBy(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[])> -> _SINK_
<gov.nih.nci.system.web.HTTPQuery: org.jdom.Document getHTMLDocument(org.jdom.Document,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSetMetaData: boolean isDecimalType(int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyStatement: int executeUpdate(java.lang.String,java.lang.String[])> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setTimestamp(int,java.sql.Timestamp)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Campaign: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.springframework.jdbc.object.SqlUpdate: int update(int,int)> -> _SINK_
<org.hibernate.jdbc.JDBCContext: void afterNontransactionalQuery(boolean)> -> _SINK_
<org.apache.ibatis.type.NClobTypeHandler: void setNonNullParameter(java.sql.PreparedStatement,int,java.lang.Object,org.apache.ibatis.type.JdbcType)> -> _SINK_
<org.hibernate.connection.DriverManagerConnectionProvider: void close()> -> _SINK_
<org.hibernate.stat.QueryStatistics: void <init>(java.lang.String)> -> _SINK_
<org.apache.ibatis.session.SqlSessionFactoryBuilder: org.apache.ibatis.session.SqlSessionFactory build(java.io.Reader)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: boolean check(int,java.io.Serializable,int,org.hibernate.jdbc.Expectation,java.sql.PreparedStatement)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData$LocalAndReferencedColumns: void <init>(com.mysql.jdbc.DatabaseMetaData,java.util.List,java.util.List,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils: java.lang.StringBuilder appendName(java.lang.String,java.lang.StringBuilder)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setEscapeProcessing(boolean)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: void updateTimestamp(java.lang.String,java.sql.Timestamp)> -> _SINK_
<org.hibernate.jdbc.Expectation: int prepare(java.sql.PreparedStatement)> -> _SINK_
<org.hibernate.criterion.Example: org.hibernate.engine.TypedValue[] getTypedValues(org.hibernate.Criteria,org.hibernate.criterion.CriteriaQuery)> -> _SINK_
<org.hibernate.hql.classic.HavingParser: void appendToken(org.hibernate.hql.classic.QueryTranslatorImpl,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Task__c: void setFeedSubscriptionsForEntity(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport: org.quartz.Trigger acquireNextTrigger(java.sql.Connection,org.quartz.core.SchedulingContext,long)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: void executeUpdate(java.lang.String,org.mmbase.module.core.MMObjectNode,java.util.List)> -> _SINK_
<org.apache.ibatis.executor.statement.RoutingStatementHandler: java.util.List query(java.sql.Statement,org.apache.ibatis.session.ResultHandler)> -> _SINK_
<com.sforce.soap.enterprise.sobject.DashboardComponentFeed: void setFeedLikes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.hibernate.loader.Loader: java.sql.PreparedStatement prepareQueryStatement(org.hibernate.engine.QueryParameters,boolean,org.hibernate.engine.SessionImplementor)> -> _SINK_
<org.exolab.castor.jdo.engine.SimpleQueryExecutor$SimpleQueryResults: void close()> -> _SINK_
<org.exolab.castor.xml.descriptors.SQLTimeClassDescriptor$1: void <init>(org.exolab.castor.xml.descriptors.SQLTimeClassDescriptor)> -> _SINK_
<org.springframework.orm.toplink.TopLinkTransactionManager: void doBegin(java.lang.Object,org.springframework.transaction.TransactionDefinition)> -> _SINK_
<org.castor.jdo.conf.JdoConfDescriptor$2: java.lang.Object newInstance(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean doesMaxRowSizeIncludeBlobs()> -> _SINK_
<org.hibernate.criterion.Subqueries: org.hibernate.criterion.Criterion propertyEq(java.lang.String,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<org.postgresql.core.PGStream: int ReceiveInteger4()> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: void setQueryTimeout(int)> -> _SINK_
<entities.annotations.View: java.lang.String namedQuery()> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4Statement: void setAsciiStream(java.lang.String,java.io.InputStream,long)> -> _SINK_
<org.postgresql.Driver: java.util.logging.Logger getParentLogger()> -> _SINK_
<org.springframework.jdbc.datasource.SmartDataSource: boolean shouldClose(java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: boolean getUseServerPreparedStmts()> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setUnicodeStream(int,java.io.InputStream,int)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: short getShort(int)> -> _SINK_
<org.exolab.castor.mapping.xml.FieldMappingDescriptor$17: java.lang.Object getValue(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterDatabaseMetaData: java.sql.ResultSet getTableTypes()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: java.math.BigDecimal getBigDecimal(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementCreate: java.sql.Connection getSeparateConnection(org.exolab.castor.jdo.Database)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: boolean supportsTransactionIsolationLevel(int)> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: org.mongodb.morphia.Key merge(java.lang.Object,com.mongodb.WriteConcern)> -> _SINK_
<org.postgresql.util.PGtokenizer: org.postgresql.util.PGtokenizer tokenizeToken(int,char)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.ForEachSqlNode$PrefixedContext: void appendSql(java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: int storeValues(java.util.List,org.postgresql.core.Field[],int,int[],int,int,int)> -> _SINK_
<org.hibernate.hql.ast.tree.FromElementType: boolean isCorrelation()> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqldayofmonth(java.util.List)> -> _SINK_
<com.sforce.soap.enterprise.sobject.TaskJunction__c: void setAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.system.dao.orm.translator.NestedCriteria2HQL: gov.nih.nci.system.query.hibernate.HQLCriteria prepareQuery(java.lang.StringBuffer)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$4: void <init>(org.springframework.orm.ibatis.SqlMapClientTemplate,java.lang.String,java.lang.Object,int,int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setReconnectAtTxEnd(boolean)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Builder: com.datastax.driver.core.querybuilder.Delete 'from'(java.lang.String,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Recruiting_Tracker__c: void setProcessSteps(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.bridge.NodeQuery createRelatedNodeListQuery(org.mmbase.bridge.Node,java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.system.dao.orm.ORMDAOImpl: org.springframework.orm.hibernate3.HibernateCallback getExecuteCountQueryHibernateCallback(java.lang.String,java.util.List)> -> _SINK_
<com.mysql.jdbc.Connection: boolean supportsQuotedIdentifiers()> -> _SINK_
<org.hibernate.hql.classic.WhereParser: void appendToken(org.hibernate.hql.classic.QueryTranslatorImpl,java.lang.String)> -> _SINK_
<org.exolab.castor.xml.descriptors.SQLTimestampClassDescriptor: void <init>()> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqldatabase(java.util.List)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.TrimSqlNode$FilteredDynamicContext: void applySuffix(java.lang.StringBuilder,java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String getSQLSnapshotSelectString()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteFiredTrigger(java.sql.Connection,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2ResultSet: void afterLast()> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: org.mongodb.morphia.query.UpdateOperations inc(java.lang.String,java.lang.Number)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate$10: java.lang.Object doInSqlMapClient(com.ibatis.sqlmap.client.SqlMapExecutor)> -> _SINK_
<org.mmbase.storage.search.implementation.database.BasicSqlHandler: void appendConstraintToSql(java.lang.StringBuffer,org.mmbase.storage.search.Constraint,org.mmbase.storage.search.SearchQuery,boolean,boolean)> -> _SINK_
<org.hibernate.dialect.function.SQLFunctionTemplate: void <init>(org.hibernate.type.Type,java.lang.String,boolean)> -> _SINK_
<com.mysql.jdbc.StandardSocketFactory: boolean socketNeedsConfigurationBeforeConnect(java.util.Properties)> -> _SINK_
<org.hibernate.hql.ast.tree.BinaryLogicOperatorNode: org.hibernate.type.Type extractDataType(org.hibernate.hql.ast.tree.Node)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Task__Feed: void setFeedTrackedChanges(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.sobject.DashboardComponentFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.sobject.UserRole: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<org.postgresql.core.v2.ProtocolConnectionImpl: void <init>(org.postgresql.core.PGStream,java.lang.String,java.lang.String,org.postgresql.core.Logger)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getCatalogSeparator()> -> _SINK_
<org.hibernate.impl.AbstractQueryImpl: org.hibernate.type.Type determineType(int,java.lang.Object)> -> _SINK_
<gov.nih.nci.cagrid.sdkquery4.processor.SDK4QueryProcessor: gov.nih.nci.cagrid.data.mapping.Mappings getClassToQnameMappings()> -> _SINK_
<gov.nih.nci.security.authorization.instancelevel.InstanceLevelSecurityHelper: void addFiltersForGroups(gov.nih.nci.security.AuthorizationManager,org.hibernate.cfg.Configuration,java.util.List)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Connection: java.lang.String nativeSQL(java.lang.String)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setUseJvmCharsetConverters(boolean)> -> _SINK_
<gov.nih.nci.system.query.hibernate.HQLCriteria: java.lang.String getHqlString()> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Using ttl(com.datastax.driver.core.querybuilder.BindMarker)> -> _SINK_
<org.castor.jdo.conf.JdoConfDescriptor$2: java.lang.Object getValue(java.lang.Object)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Blob getBlob(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object execute(org.springframework.jdbc.core.StatementCallback)> -> _SINK_
<org.hibernate.persister.entity.Queryable: boolean isExplicitPolymorphism()> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$15: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<org.springframework.jdbc.datasource.DataSourceUtils$ConnectionSynchronization: void beforeCompletion()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Solution: void setActivityHistories(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<gov.nih.nci.cagrid.data.common.DataServiceI: gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery)> -> _SINK_
<org.mmbase.servlet.BridgeServlet$QueryParts: org.mmbase.bridge.Node getServedNode()> -> _SINK_
<com.sforce.soap.enterprise.sobject.LeadFeed: void setFeedComments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Array: void buildArrayList()> -> _SINK_
<org.postgresql.geometric.PGpath: void <init>(org.postgresql.geometric.PGpoint[],boolean)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.Connection newConnectionProxy(java.sql.Connection)> -> _SINK_
<org.postgresql.jdbc2.TypeInfoCache: boolean isSigned(int)> -> _SINK_
<org.apache.axis.transport.http.QSListHandler: void <init>()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Task__c: void setFeeds(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.castor.jdo.util.JDOConfFactory: org.castor.jdo.conf.JdoConf createJdoConf(org.castor.jdo.conf.Database[])> -> _SINK_
<com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource: void setPreferredTestQuery(java.lang.String)> -> _SINK_
<com.mongodb.MongoClientURI: java.lang.String getDatabase()> -> _SINK_
<com.sforce.soap.enterprise.sobject.Position__c: void setEvents(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void close()> -> _SINK_
<org.springframework.orm.jdo.JdoTransactionManager: void setDataSource(javax.sql.DataSource)> -> _SINK_
<com.amazonaws.services.dynamodb.model.transform.QueryResultJsonUnmarshaller: com.amazonaws.services.dynamodb.model.QueryResult unmarshall(com.amazonaws.transform.JsonUnmarshallerContext)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.lang.String getCatalogTerm()> -> _SINK_
<java.sql.DatabaseMetaData: java.sql.ResultSet getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)> -> _SINK_
<org.apache.ibatis.executor.statement.StatementHandler: java.util.List query(java.sql.Statement,org.apache.ibatis.session.ResultHandler)> -> _SINK_
<java.sql.ResultSet: byte[] getBytes(java.lang.String)> -> _SINK_
<java.sql.ResultSet: byte[] getBytes(int)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: java.lang.String generateCollectionSuffix()> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setShort(int,short)> -> _SINK_
<com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema: java.sql.ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.support.SqlLobValue: void <init>(java.io.InputStream,int,org.springframework.jdbc.support.lob.LobHandler)> -> _SINK_
<util.reflection.ExceptionHelper: void printException(java.lang.Exception)> -> _SINK_
<com.mchange.v2.c3p0.stmt.StatementCacheBenchmark: void main(java.lang.String[])> -> _SINK_
<com.mysql.jdbc.ConnectionProperties$BooleanConnectionProperty: void initializeFrom(java.lang.String)> -> _SINK_
<org.springframework.jdbc.core.SqlRowSetResultSetExtractor: void <init>()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: int getRow()> -> _SINK_
<com.sforce.soap.enterprise.sobject.CustomEmail__c: void setNotes(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Contract: void setApprovals(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<org.postgresql.core.v3.CompositeParameterList: void clear()> -> _SINK_
<java.sql.ResultSet: java.io.InputStream getAsciiStream(java.lang.String)> -> _SINK_
<org.exolab.castor.jdo.drivers.MultiRSCallQuery: boolean nextRow()> -> _SINK_
<com.mysql.jdbc.ResultSet: short parseShortAsDouble(int,java.lang.String)> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PooledConnection: boolean isFatalState(java.lang.String)> -> _SINK_
<java.sql.Blob: long position(byte[],long)> -> _SINK_
<org.mmbase.storage.implementation.database.DatabaseStorageManager: java.util.Date getDateTimeValue(java.sql.ResultSet,int,org.mmbase.core.CoreField)> -> _SINK_
<org.postgresql.xa.PGXAConnection$ConnectionHandler: void <init>(org.postgresql.xa.PGXAConnection,java.sql.Connection)> -> _SINK_
<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder lessThan(java.lang.Object)> -> _SINK_
<org.mmbase.util.transformers.Sql: java.util.Map transformers()> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl$1: void <init>(org.postgresql.core.v2.QueryExecutorImpl)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNrcs(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<org.postgresql.jdbc3.AbstractJdbc3ResultSet: void updateRef(int,java.sql.Ref)> -> _SINK_
<org.hibernate.hql.ast.tree.DotNode: boolean isCorrelatedSubselect()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: boolean getMoreResults(int)> -> _SINK_
<java.sql.Connection: void setAutoCommit(boolean)> -> _SINK_
<org.exolab.castor.xml.descriptors.SQLTimeClassDescriptor: java.lang.Class getJavaClass()> -> _SINK_
<gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean: void addQuery(gov.nih.nci.cananolab.dto.BaseQueryBean)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4Connection: boolean isWrapperFor(java.lang.Class)> -> _SINK_
<com.mysql.jdbc.ResultSet: int convertToZeroWithEmptyCheck()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementRemove: java.lang.Object executeStatement(java.sql.Connection,org.exolab.castor.persist.spi.Identity)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: int getMaxColumnNameLength()> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: org.quartz.JobDataMap selectTriggerJobDataMap(java.sql.Connection,java.lang.String,java.lang.String)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.io.InputStream getNativeUnicodeStream(int)> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setNull(java.lang.String,int)> -> _SINK_
<gov.nih.nci.security.dao.AuthorizationDAOImpl: void assignUserRoleToProtectionGroup(java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<org.springframework.jdbc.object.SqlFunction: java.lang.Object mapRow(java.sql.ResultSet,int)> -> _SINK_
<org.springframework.jdbc.core.JdbcOperations: void query(java.lang.String,java.lang.Object[],int[],org.springframework.jdbc.core.RowCallbackHandler)> -> _SINK_
<com.mchange.v2.sql.filter.FilterStatement: void <init>(java.sql.Statement)> -> _SINK_
<com.datastax.driver.core.querybuilder.Delete$Options: com.datastax.driver.core.Statement disableTracing()> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void setDrs(java.lang.String)> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String getSQLLazySelectString()> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: java.lang.String getKeyspace()> -> _SINK_
<com.mysql.jdbc.log.StandardLogger: void logWarn(java.lang.Object,java.lang.Throwable)> -> _SINK_
<org.springframework.jdbc.support.SQLErrorCodes: java.lang.String[] getDataAccessResourceFailureCodes()> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.io.InputStream getUnicodeStream(int)> -> _SINK_
<org.quartz.impl.jdbcjobstore.JobStoreSupport$35: java.lang.Object execute(java.sql.Connection)> -> _SINK_
<com.sforce.soap.enterprise.QueryOptions_element: void loadFields(com.sforce.ws.parser.XmlInputStream,com.sforce.ws.bind.TypeMapper)> -> _SINK_
<com.mysql.jdbc.ResultSet: byte[] getBytesFromString(java.lang.String,int)> -> _SINK_
<org.mmbase.bridge.Query: org.mmbase.storage.search.FieldValueBetweenConstraint createConstraint(org.mmbase.storage.search.StepField,java.lang.Object,java.lang.Object)> -> _SINK_
<org.hibernate.loader.criteria.CriteriaQueryTranslator: int getSQLAliasCount()> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: void addLikeConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.Field,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.sql.Date getDate(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterResultSet: short getShort(int)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.sql.Timestamp getTimestamp(int)> -> _SINK_
<org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet: java.sql.Date getDate(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.ResultSet getResultSet()> -> _SINK_
<org.hibernate.persister.collection.AbstractCollectionPersister: java.lang.String generateSelectRowByIndexString()> -> _SINK_
<org.mongodb.morphia.query.UpdateOperator: void <clinit>()> -> _SINK_
<com.mysql.jdbc.PreparedStatement: void setBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<org.springframework.jdbc.core.namedparam.MapSqlParameterSource: void <init>(java.util.Map)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: void setCharacterStream(int,java.io.Reader,int)> -> _SINK_
<com.mysql.jdbc.CallableStatement$CallableStatementParamInfo: boolean isSigned(int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: void setAsciiStream(java.lang.String,java.io.InputStream,int)> -> _SINK_
<org.postgresql.jdbc4.AbstractJdbc4ResultSet: void updateSQLXML(int,java.sql.SQLXML)> -> _SINK_
<com.mysql.jdbc.Connection: void finalize()> -> _SINK_
<org.hibernate.persister.entity.AbstractEntityPersister: java.lang.String[] getUpdateStrings(boolean,boolean)> -> _SINK_
<java.sql.ResultSet: java.sql.Timestamp getTimestamp(int,java.util.Calendar)> -> _SINK_
<com.mysql.jdbc.Connection: java.lang.String getServerCharacterEncoding()> -> _SINK_
<org.postgresql.core.PGStream: int ReceiveInteger2()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: void setString(java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: void setNull(int,int)> -> _SINK_
<java.sql.CallableStatement: void registerOutParameter(java.lang.String,int)> -> _SINK_
<com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper: int count(java.lang.Class,com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression,com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig)> -> _SINK_
<com.datastax.driver.core.querybuilder.Update$Where: com.datastax.driver.core.querybuilder.Update$Conditions onlyIf(com.datastax.driver.core.querybuilder.Clause)> -> _SINK_
<com.mongodb.QueryBuilder$NullObject: void <init>(com.mongodb.QueryBuilder$1)> -> _SINK_
<com.mongodb.MongoURI: com.mongodb.DB connectDB()> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: java.lang.Object getObject(int,java.util.Map)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: void execute(org.postgresql.core.Query[],org.postgresql.core.ParameterList[],org.postgresql.core.ResultHandler,int,int,int)> -> _SINK_
<org.exolab.castor.mapping.xml.Sql: java.lang.String getType()> -> _SINK_
<com.mysql.jdbc.jdbc2.optional.MysqlDataSource: void setServerName(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: void updateObject(java.lang.String,java.lang.Object,int)> -> _SINK_
<java.sql.Clob: long position(java.sql.Clob,long)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: void setBigDecimal(int,java.math.BigDecimal)> -> _SINK_
<com.endeca.navigation.UrlENEQuery: void writeNmrf(com.endeca.navigation.ENEQuery,java.lang.StringBuffer,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: void setFailedOverState()> -> _SINK_
<org.exolab.castor.jdo.engine.SQLStatementCreate: void <clinit>()> -> _SINK_
<javax.sql.PooledConnection: void addConnectionEventListener(javax.sql.ConnectionEventListener)> -> _SINK_
<org.apache.axis.transport.http.QSMethodHandler: void invoke(org.apache.axis.MessageContext)> -> _SINK_
<gov.nih.nci.cagrid.data.bdt.stubs.BdtQueryResponse: gov.nih.nci.cagrid.bdt.stubs.reference.BulkDataHandlerReference getBulkDataHandlerReference()> -> _SINK_
<org.springframework.jdbc.object.SqlQuery: java.util.List execute(java.lang.String)> -> _SINK_
<org.postgresql.Driver: java.sql.DriverPropertyInfo[] getPropertyInfo(java.lang.String,java.util.Properties)> -> _SINK_
<com.mchange.v2.c3p0.util.ConnectionEventSupport: void removeConnectionEventListener(javax.sql.ConnectionEventListener)> -> _SINK_
<org.postgresql.gss.GssAction: java.lang.Object run()> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.DynamicSqlSource: void <init>(org.apache.ibatis.session.Configuration,org.apache.ibatis.builder.xml.dynamic.SqlNode)> -> _SINK_
<gov.nih.nci.security.dao.Queries: java.sql.PreparedStatement getQueryForCheckPermissionForUser(java.lang.String,java.lang.String,java.lang.String,int,java.sql.Connection)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData: java.sql.ResultSet getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsSchemasInIndexDefinitions()> -> _SINK_
<org.postgresql.jdbc2.ResultWrapper: int getUpdateCount()> -> _SINK_
<gov.nih.nci.cagrid.cqlquery.Association: void <init>()> -> _SINK_
<com.mchange.v2.c3p0.DataSources: void destroy(javax.sql.DataSource,boolean)> -> _SINK_
<com.sun.jersey.api.client.ViewResource: com.sun.jersey.api.client.ViewResource queryParam(java.lang.String,java.lang.String)> -> _SINK_
<gov.nih.nci.system.applicationservice.impl.ApplicationServiceImpl: java.util.List search(java.lang.String,java.util.List)> -> _SINK_
<com.mysql.jdbc.CursorRowProvider: boolean isBeforeFirst()> -> _SINK_
<gov.nih.nci.system.web.util.HTTPUtils: void setQueryArguments(java.lang.String)> -> _SINK_
<org.apache.ibatis.executor.ReuseExecutor: java.util.List doFlushStatements()> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void updateBinaryStream(int,java.io.InputStream,int)> -> _SINK_
<org.castor.jdo.drivers.ConnectionProxy: java.sql.CallableStatement prepareCall(java.lang.String,int,int,int)> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void writeToCopy(org.postgresql.core.v3.CopyInImpl,byte[],int,int)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$9: void <init>(java.lang.Class,java.lang.Class)> -> _SINK_
<org.hibernate.cfg.ResultSetMappingBinder: org.hibernate.engine.query.sql.NativeSQLQueryCollectionReturn bindLoadCollection(org.dom4j.Element,org.hibernate.cfg.Mappings)> -> _SINK_
<java.sql.Connection: void setCatalog(java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int updateJobDetail(java.sql.Connection,org.quartz.JobDetail)> -> _SINK_
<com.mysql.jdbc.Util: java.lang.Class class$(java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterPreparedStatement: void setMaxRows(int)> -> _SINK_
<org.jboss.netty.handler.codec.http.QueryStringDecoder: void <init>(java.net.URI,java.nio.charset.Charset)> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.TrimSqlNode$FilteredDynamicContext: void applyAll()> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterCallableStatement: boolean getMoreResults()> -> _SINK_
<org.postgresql.Driver: void setLogLevel(int)> -> _SINK_
<com.mysql.jdbc.Connection$UltraDevWorkAround: long getLong(java.lang.String)> -> _SINK_
<com.datastax.driver.core.QueryTrace: void maybeFetchTrace()> -> _SINK_
<org.apache.ibatis.builder.StaticSqlSource: void <init>(org.apache.ibatis.session.Configuration,java.lang.String)> -> _SINK_
<org.postgresql.copy.PGCopyInputStream: int read()> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.sql.ResultSet getProcedures(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.largeobject.BlobInputStream: int read()> -> _SINK_
<org.apache.taglibs.standard.tag.el.sql.SetDataSourceTag: int doStartTag()> -> _SINK_
<org.springframework.orm.hibernate3.LocalSessionFactoryBean: javax.sql.DataSource getConfigTimeDataSource()> -> _SINK_
<com.mysql.jdbc.DatabaseMetaData: boolean supportsCatalogsInTableDefinitions()> -> _SINK_
<org.hibernate.jdbc.ResultSetWrapper: void updateRow()> -> _SINK_
<org.mongodb.morphia.DatastoreImpl: java.util.List getKeysByManualRefs(java.lang.Class,java.util.List)> -> _SINK_
<java.sql.CallableStatement: void setByte(java.lang.String,byte)> -> _SINK_
<com.mysql.jdbc.Connection: void rollback(java.sql.Savepoint)> -> _SINK_
<com.mchange.v2.c3p0.stmt.GooGooStatementCache$ConnectionStatementManager: void addStatementForConnection(java.lang.Object,java.sql.Connection)> -> _SINK_
<com.mysql.jdbc.log.Log4JLogger: void logFatal(java.lang.Object,java.lang.Throwable)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateBinaryStream(java.lang.String,java.io.InputStream,long)> -> _SINK_
<java.sql.ResultSet: void updateCharacterStream(java.lang.String,java.io.Reader,int)> -> _SINK_
<org.springframework.orm.ibatis.SqlMapClientTemplate: com.ibatis.sqlmap.client.SqlMapClient getSqlMapClient()> -> _SINK_
<gov.nih.nci.cananolab.service.sample.helper.AdvancedSampleServiceHelper: void setSampleCriteria(gov.nih.nci.cananolab.dto.particle.AdvancedSampleSearchBean,org.hibernate.criterion.DetachedCriteria)> -> _SINK_
<com.mysql.jdbc.ResultSet: java.sql.Date getNativeDate(int)> -> _SINK_
<com.mysql.jdbc.MysqlParameterMetadata: void <init>(com.mysql.jdbc.Field[],int)> -> _SINK_
<org.castor.jdo.conf.DatabaseDescriptor$4: java.lang.Object getValue(java.lang.Object)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: boolean supportsANSI92EntryLevelSQL()> -> _SINK_
<org.springframework.orm.ibatis.support.AbstractLobTypeHandler: java.lang.Object getResult(java.sql.ResultSet,java.lang.String)> -> _SINK_
<org.mmbase.cache.ReleaseStrategy: org.mmbase.cache.ReleaseStrategy$StrategyResult evaluate(org.mmbase.core.event.NodeEvent,org.mmbase.storage.search.SearchQuery,java.util.List)> -> _SINK_
<com.mchange.v2.sql.filter.FilterDatabaseMetaData: java.lang.String getSearchStringEscape()> -> _SINK_
<org.hibernate.transaction.JDBCTransaction: void begin()> -> _SINK_
<org.apache.ibatis.builder.xml.dynamic.DynamicContext: java.lang.String getSql()> -> _SINK_
<org.springframework.jdbc.object.MappingSqlQueryWithParameters$RowMapperImpl: void <init>(org.springframework.jdbc.object.MappingSqlQueryWithParameters,java.lang.Object[],java.util.Map)> -> _SINK_
<org.mongodb.morphia.query.UpdateOpsImpl: void <init>(java.lang.Class,org.mongodb.morphia.mapping.Mapper)> -> _SINK_
<org.postgresql.core.v3.ProtocolConnectionImpl: boolean useBinaryForReceive(int)> -> _SINK_
<com.mysql.jdbc.ConnectionProperties: void setEncoding(java.lang.String)> -> _SINK_
<org.exolab.castor.mapping.xml.SqlDescriptor$5: void <init>(org.exolab.castor.mapping.xml.SqlDescriptor)> -> _SINK_
<gov.nih.nci.cagrid.data.utilities.validation.CQLQueryResultsValidator: void main(java.lang.String[])> -> _SINK_
<org.apache.ibatis.builder.'annotation'.MapperAnnotationBuilder: void parseStatement(java.lang.reflect.Method)> -> _SINK_
<com.mysql.jdbc.Statement$1: void <init>(com.mysql.jdbc.Statement$CancelTask)> -> _SINK_
<org.postgresql.core.v2.QueryExecutorImpl: void fetch(org.postgresql.core.ResultCursor,org.postgresql.core.ResultHandler,int)> -> _SINK_
<org.castor.jdo.engine.SQLTypeConverters$31: java.lang.Object convert(java.lang.Object,java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: java.lang.String nativeSQL(java.lang.String)> -> _SINK_
<org.postgresql.jdbc4.Jdbc4ResultSet: void updateBlob(java.lang.String,java.io.InputStream)> -> _SINK_
<org.springframework.jdbc.object.SqlCall: void <init>()> -> _SINK_
<org.hibernate.engine.JoinSequence: void addExtraJoins(org.hibernate.sql.JoinFragment,java.lang.String,org.hibernate.persister.entity.Joinable,boolean)> -> _SINK_
<org.mmbase.bridge.util.SearchUtil: org.mmbase.storage.search.FieldValueConstraint createEqualConstraint(org.mmbase.bridge.NodeQuery,org.mmbase.bridge.Field,java.lang.String)> -> _SINK_
<org.postgresql.jdbc2.EscapedFunctions: java.lang.String sqlceiling(java.util.List)> -> _SINK_
<org.hibernate.impl.FetchingScrollableResultsImpl: boolean previous()> -> _SINK_
<org.castor.jdo.engine.DriverConnectionFactory: void initializeFactory()> -> _SINK_
<com.mysql.jdbc.CallableStatement: void registerOutParameter(java.lang.String,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager find(java.lang.String,javax.sql.ConnectionPoolDataSource,java.lang.String,int)> -> _SINK_
<com.mchange.v2.c3p0.impl.NewProxyResultSet: java.lang.String getString(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: java.lang.String getUser()> -> _SINK_
<com.datastax.driver.core.querybuilder.Utils$Alias: void <init>(java.lang.Object,java.lang.String)> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setByte(int,byte)> -> _SINK_
<com.mchange.v2.c3p0.DriverManagerDataSource: java.sql.Connection getConnection()> -> _SINK_
<org.hibernate.hql.antlr.HqlSqlBaseWalker: void deleteStatement(antlr.collections.AST)> -> _SINK_
<org.hibernate.engine.QueryParameters: void <init>(org.hibernate.type.Type[],java.lang.Object[],java.util.Map,java.util.Map,org.hibernate.engine.RowSelection,boolean,boolean,java.lang.String,java.lang.String,java.io.Serializable[],java.lang.Object,java.lang.String,java.io.Serializable,org.hibernate.transform.ResultTransformer)> -> _SINK_
<org.postgresql.jdbc2.ArrayAssistant: java.lang.Object buildElement(byte[],int,int)> -> _SINK_
<org.mongodb.morphia.query.UpdateOperations: org.mongodb.morphia.query.UpdateOperations inc(java.lang.String)> -> _SINK_
<com.mchange.v2.c3p0.impl.SetManagedDatabaseMetaData: java.sql.ResultSet getTypeInfo()> -> _SINK_
<org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource$1: void <init>(org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource)> -> _SINK_
<org.castor.persist.TransactionContext: org.exolab.castor.persist.QueryResults query(org.exolab.castor.persist.LockEngine,org.exolab.castor.persist.spi.PersistenceQuery,org.exolab.castor.mapping.AccessMode,boolean)> -> _SINK_
<org.hibernate.hql.ast.ParameterTranslationsImpl: int[] getNamedParameterSqlLocations(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Connection: boolean configureClientCharacterSet()> -> _SINK_
<org.mmbase.bridge.util.xml.query.QueryConfigurer: org.mmbase.bridge.util.xml.query.QueryConfigurer getDefaultConfigurer()> -> _SINK_
<com.amazonaws.services.dynamodbv2.AmazonDynamoDBAsyncClient$17: com.amazonaws.services.dynamodbv2.model.QueryResult call()> -> _SINK_
<com.mysql.jdbc.Connection: java.util.Calendar getUtcCalendar()> -> _SINK_
<org.postgresql.fastpath.FastpathArg: void <init>(byte[],int,int)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2Statement: java.lang.Object getObject(int)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Milestone1_Time__c: void setNotesAndAttachments(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: void setFetchDirection(int)> -> _SINK_
<com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource: javax.sql.PooledConnection getPooledConnection()> -> _SINK_
<org.apache.commons.beanutils.converters.DateTimeConverter: java.lang.Object toDate(java.lang.Class,java.lang.String)> -> _SINK_
<java.sql.DatabaseMetaData: boolean usesLocalFilePerTable()> -> _SINK_
<org.postgresql.core.v3.QueryExecutorImpl: void sendExecute(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.Portal,int)> -> _SINK_
<com.mchange.v2.sql.filter.SynchronizedFilterStatement: int getFetchDirection()> -> _SINK_
<org.hibernate.hql.QueryTranslator: java.util.Set getQuerySpaces()> -> _SINK_
<org.castor.jdo.drivers.CallableStatementProxy: java.sql.Time getTime(java.lang.String,java.util.Calendar)> -> _SINK_
<org.mmbase.bridge.util.Queries: org.mmbase.bridge.NodeQuery createRelationNodesQuery(org.mmbase.bridge.Node,org.mmbase.bridge.Node,java.lang.String,java.lang.String)> -> _SINK_
<org.postgresql.util.PGtokenizer: java.lang.String removeAngle(java.lang.String)> -> _SINK_
<org.springframework.orm.jdo.DefaultJdoDialect: org.springframework.dao.DataAccessException translateException(javax.jdo.JDOException)> -> _SINK_
<org.mongodb.morphia.query.Shape: java.lang.String getGeometry()> -> _SINK_
<com.mchange.v2.sql.filter.FilterCallableStatement: void setString(int,java.lang.String)> -> _SINK_
<org.quartz.impl.jdbcjobstore.DriverDelegate: int deleteVolatileFiredTriggers(java.sql.Connection)> -> _SINK_
<org.hibernate.engine.NamedQueryDefinition: void <init>(java.lang.String,boolean,java.lang.String,java.lang.Integer,java.lang.Integer,org.hibernate.FlushMode,java.util.Map)> -> _SINK_
<org.mmbase.module.database.JDBC: java.util.Vector listConnections(org.mmbase.util.StringTagger)> -> _SINK_
<com.mysql.jdbc.LoadBalancingConnectionProxy: java.lang.Object proxyIfInterfaceIsJdbc(java.lang.Object,java.lang.Class)> -> _SINK_
<org.postgresql.jdbc2.AbstractJdbc2DatabaseMetaData: java.sql.ResultSet getProcedures(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.hibernate.type.MetaType: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],org.hibernate.engine.SessionImplementor,java.lang.Object)> -> _SINK_
<com.mysql.jdbc.Buffer: void writeStringNoNull(java.lang.String,java.lang.String,java.lang.String,boolean,com.mysql.jdbc.Connection)> -> _SINK_
<com.enhype.db.DynamoDB: boolean getItemByIndex(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.sforce.soap.enterprise.sobject.Location__c: void setPositions__r(com.sforce.soap.enterprise.QueryResult)> -> _SINK_
<com.mchange.v2.sql.filter.FilterResultSet: java.math.BigDecimal getBigDecimal(java.lang.String,int)> -> _SINK_
<com.mysql.jdbc.ResultSet: byte[] getNativeBytes(int,boolean)> -> _SINK_
<com.mchange.v2.c3p0.impl.C3P0PooledConnection$ProxyConnectionInvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> -> _SINK_
<org.springframework.jdbc.object.SqlUpdate: int update(long,long)> -> _SINK_
<org.hibernate.loader.custom.sql.SQLQueryReturnProcessor: java.util.Map access$100(org.hibernate.loader.custom.sql.SQLQueryReturnProcessor)> -> _SINK_
<com.datastax.driver.core.querybuilder.QueryBuilder: com.datastax.driver.core.querybuilder.Assignment append(java.lang.String,java.lang.Object)> -> _SINK_
<java.sql.DatabaseMetaData: int getMaxIndexLength()> -> _SINK_
<com.mysql.jdbc.WatchableOutputStream: void <init>()> -> _SINK_
