<com.google.gson.stream.JsonWriter: void beforeName()>
<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(int,int,java.lang.String)>
<com.google.template.soy.jssrc.internal.GenerateSoyUtilsEscapingDirectiveCode: void execute()>
<org.apache.tools.ant.taskdefs.CopyPath: void execute()>
<com.google.javascript.jscomp.PerformanceTracker$CodeSizeEstimatePrinter: void append(java.lang.String)>
<org.apache.tools.ant.taskdefs.optional.Cab: java.io.File createListFile(java.util.Vector)>
<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>
<com.ibm.icu.text.RBBISymbolTable: void rbbiSymtablePrint()>
<com.ibm.icu.util.VTimeZone: void endZoneProps(java.io.Writer,boolean)>
<org.apache.tools.ant.taskdefs.KeySubst: void execute()>
<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(int,java.lang.String)>
<org.apache.tools.ant.taskdefs.JDBCTask: java.sql.Connection getConnection()>
<org.apache.tools.ant.AntClassLoader: java.lang.Class getClassFromStream(java.io.InputStream,java.lang.String,java.io.File)>
<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>
<org.json.JSONWriter: org.json.JSONWriter key(java.lang.String)>
<com.google.protobuf.ByteString$Output: com.google.protobuf.ByteString toByteString()>
<org.apache.tools.ant.taskdefs.Deltree: void removeDir(java.io.File)>
<org.apache.tools.ant.util.UUEncoder: void encodeString(java.lang.String)>
<org.apache.tools.ant.taskdefs.optional.ejb.IPlanetEjbc: void callEjbc(java.lang.String[])>
<org.apache.tools.ant.taskdefs.Get$GetThread: java.net.URLConnection openConnection(java.net.URL)>
<org.apache.tools.ant.util.JavaEnvUtils: java.io.File createVmsJavaOptionFile(java.lang.String[])>
<org.apache.tools.ant.taskdefs.Zip: void executeMain()>
<org.apache.tools.ant.util.DOMElementWriter: void openElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String,boolean)>
<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>
<org.apache.tools.ant.util.FileUtils: void delete(java.io.File)>
<org.apache.tools.ant.taskdefs.Redirector: void handleErrorOutput(java.lang.String)>
<com.ibm.icu.text.RBBIDataWrapper: void dump()>
<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>
<com.ibm.icu.text.SpoofChecker$Builder$ConfusabledataBuilder: void outputData()>
<org.apache.tools.ant.taskdefs.Redirector: void handleFlush(java.lang.String)>
<org.apache.tools.ant.taskdefs.XSLTProcess: void process(java.io.File,java.io.File,org.apache.tools.ant.types.Resource)>
<com.ibm.icu.util.VTimeZone: void write(java.io.Writer)>
<org.apache.tools.ant.taskdefs.Antlib: org.apache.tools.ant.taskdefs.Antlib createAntlib(org.apache.tools.ant.Project,java.net.URL,java.lang.String)>
<org.apache.tools.ant.taskdefs.Get$VerboseProgress: void endDownload()>
<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>
<org.apache.tools.ant.taskdefs.CloseResources: void execute()>
<com.google.common.base.internal.Finalizer: java.lang.reflect.Field getInheritableThreadLocalsField()>
<com.google.template.soy.SoyToJavaSrcCompilerExperimental: void execMain(java.lang.String[])>
<org.apache.tools.ant.util.DOMElementWriter: void write(org.w3c.dom.Element,java.io.Writer,int,java.lang.String)>
<org.apache.tools.ant.taskdefs.optional.ejb.JonasDeploymentTool: void writeJar(java.lang.String,java.io.File,java.util.Hashtable,java.lang.String)>
<com.google.common.io.ByteStreams: byte[] toByteArray(java.io.InputStream)>
<com.google.common.collect.Serialization: void writeMultimap(com.google.common.collect.Multimap,java.io.ObjectOutputStream)>
<org.apache.tools.ant.taskdefs.Jar: void writeManifest(org.apache.tools.zip.ZipOutputStream,org.apache.tools.ant.taskdefs.Manifest)>
<com.google.template.soy.jssrc.internal.JsSrcMain: void genJsFiles(com.google.template.soy.soytree.SoyFileSetNode,com.google.template.soy.jssrc.SoyJsSrcOptions,java.lang.String,com.google.template.soy.msgs.SoyMsgBundle,java.lang.String,java.lang.String)>
<com.google.javascript.rhino.head.NativeJavaObject: void writeObject(java.io.ObjectOutputStream)>
<org.apache.tools.ant.taskdefs.Deltree: void execute()>
<org.joda.time.format.DateTimeFormatterBuilder: void printUnknownString(java.io.Writer,int)>
<com.ibm.icu.text.RuleBasedBreakIterator: void <init>(java.lang.String)>
<org.apache.tools.ant.taskdefs.Sync: int removeEmptyDirectories(java.util.Set)>
<org.apache.tools.ant.taskdefs.SQLExec: void printResults(java.sql.ResultSet,java.io.PrintStream)>
<com.google.gson.stream.JsonWriter: void newline()>
<org.apache.tools.ant.taskdefs.email.PlainMailer: void attach(java.io.File,java.io.PrintStream)>
<org.apache.tools.ant.taskdefs.SQLExec: void execSQL(java.lang.String,java.io.PrintStream)>
<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>
<com.ibm.icu.impl.duration.impl.XMLRecordWriter: void writeString(java.lang.String)>
<org.apache.tools.ant.taskdefs.optional.depend.Depend: int deleteAffectedFiles(java.lang.String)>
<org.apache.tools.ant.taskdefs.Rmic: void moveGeneratedFile(java.io.File,java.io.File,java.lang.String,org.apache.tools.ant.taskdefs.rmic.RmicAdapter)>
<org.apache.tools.ant.ComponentHelper: void printUnknownDefinition(java.io.PrintWriter,java.lang.String,java.lang.String)>
<org.apache.tools.ant.taskdefs.Sync: int removeEmptyDirectories(java.io.File,boolean,java.util.Set)>
<org.apache.tools.ant.util.DOMElementWriter: void closeElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String,boolean)>
<com.google.javascript.rhino.head.tools.shell.ConsoleTextArea: void eval(java.lang.String)>
<org.json.JSONWriter: org.json.JSONWriter append(java.lang.String)>
<org.apache.tools.ant.taskdefs.optional.ejb.JonasDeploymentTool: java.io.File createTempDir()>
<org.apache.tools.ant.Diagnostics: void doReport(java.io.PrintStream,int)>
<com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: void writeMapTo(java.io.ObjectOutputStream)>
<com.ibm.icu.text.RBBISetBuilder: void printRanges()>
<com.google.common.collect.LinkedHashMultimap: void writeObject(java.io.ObjectOutputStream)>
<com.google.javascript.rhino.head.tools.SourceReader: java.lang.Object readFileOrUrl(java.lang.String,boolean,java.lang.String)>
<com.google.javascript.rhino.head.tools.shell.ShellConsole$SimpleShellConsole: void println()>
<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>
<com.google.template.soy.javasrc.dyncompile.WritableInMemoryJavaFileObject: java.io.InputStream openInputStream()>
<com.ibm.icu.util.VTimeZone: void writeZone(java.io.Writer,com.ibm.icu.util.BasicTimeZone,java.lang.String[])>
<org.apache.tools.ant.taskdefs.Manifest$Attribute: void writeValue(java.io.PrintWriter,java.lang.String)>
<com.ibm.icu.text.RBBITableBuilder: void printRuleStatusTable()>
<com.ibm.icu.util.VTimeZone: void appendUNTIL(java.io.Writer,java.lang.String)>
<org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter: int executeExternalCompile(java.lang.String[],int,boolean)>
<org.apache.tools.ant.util.LayoutPreservingProperties: java.lang.String readFirstLine(java.io.PushbackReader)>
<com.ibm.icu.text.RBBISetBuilder: void printRangeGroups()>
<org.apache.tools.mail.MailMessage: void flushHeaders()>
<com.ibm.icu.text.RBBITableBuilder: void printStates()>
<org.apache.tools.ant.util.PropertyOutputStream: void close()>
<org.apache.tools.mail.MailPrintStream: void rawWrite(int)>
<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>
<com.ibm.icu.util.VTimeZone: void writeFooter(java.io.Writer)>
<com.google.common.collect.ArrayListMultimap: void writeObject(java.io.ObjectOutputStream)>
<com.ibm.icu.text.RBBIDataWrapper: void dumpTable(short[])>
<org.apache.tools.ant.taskdefs.Zip: void zipFile(java.io.InputStream,org.apache.tools.zip.ZipOutputStream,java.lang.String,long,java.io.File,int)>
<org.apache.tools.ant.Diagnostics: void doReportTempDir(java.io.PrintStream)>
<org.apache.tools.ant.taskdefs.Move: boolean renameFile(java.io.File,java.io.File,boolean,boolean)>
<org.apache.tools.ant.taskdefs.optional.ejb.WebsphereDeploymentTool: boolean isRebuildRequired(java.io.File,java.io.File)>
<org.apache.tools.ant.taskdefs.Get$VerboseProgress: void onTick()>
<org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter: void printHead(java.io.PrintWriter,java.util.Enumeration,java.util.Enumeration)>
<org.apache.tools.ant.taskdefs.optional.ejb.GenericDeploymentTool: void writeJar(java.lang.String,java.io.File,java.util.Hashtable,java.lang.String)>
<org.apache.tools.ant.taskdefs.cvslib.ChangeLogWriter: void printChangeLog(java.io.PrintWriter,org.apache.tools.ant.taskdefs.cvslib.CVSEntry[])>
<com.google.javascript.rhino.head.ObjToIntMap: void writeObject(java.io.ObjectOutputStream)>
<org.apache.tools.ant.taskdefs.Copy: void doResourceOperations(java.util.Map)>
<org.apache.tools.ant.Diagnostics: void header(java.io.PrintStream,java.lang.String)>
<com.google.javascript.rhino.head.tools.idswitch.Main: void show_usage()>
<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>
<org.aopalliance.aop.AspectException: void printStackTrace(java.io.PrintWriter)>
<com.google.javascript.jscomp.deps.DepsGenerator: void writeJsArray(java.io.PrintStream,java.util.Collection)>
<com.google.javascript.rhino.head.commonjs.module.provider.UrlModuleSourceProvider: java.net.URLConnection openUrlConnection(java.net.URL)>
<org.apache.tools.ant.taskdefs.Execute$CommandLauncher: java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[])>
<org.apache.tools.ant.XmlLogger: void buildFinished(org.apache.tools.ant.BuildEvent)>
<org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter: void printTargetDecl(java.io.PrintWriter)>
<org.apache.tools.ant.taskdefs.email.Message: void print(java.io.PrintStream)>
<com.ibm.icu.text.RBBINode: void printString(java.lang.String,int)>
<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.io.Writer,int)>
<com.ibm.icu.text.RuleBasedBreakIterator: int handlePrevious(short[])>
<com.ibm.icu.text.RBBIDataWrapper: void dumpCharCategories()>
<org.apache.tools.ant.taskdefs.optional.ejb.WebsphereDeploymentTool: void writeJar(java.lang.String,java.io.File,java.util.Hashtable,java.lang.String)>
<com.ibm.icu.text.RBBIRuleBuilder: void flattenData(java.io.OutputStream)>
<org.apache.tools.ant.taskdefs.SQLExec: java.sql.Statement getStatement()>
<org.apache.tools.ant.taskdefs.CVSPass: void execute()>
<org.apache.tools.ant.taskdefs.optional.ejb.WeblogicDeploymentTool: void writeJar(java.lang.String,java.io.File,java.util.Hashtable,java.lang.String)>
<com.ibm.icu.util.VTimeZone: void writeZonePropsByDOW_GEQ_DOM_sub(java.io.Writer,int,int,int,int,long,int)>
<org.aopalliance.aop.AspectException: void printStackTrace()>
<com.google.javascript.rhino.head.UintMap: void writeObject(java.io.ObjectOutputStream)>
<org.apache.tools.ant.taskdefs.optional.ejb.WeblogicDeploymentTool: void buildWeblogicJar(java.io.File,java.io.File,java.lang.String)>
<com.google.gson.stream.JsonWriter: void string(java.lang.String)>
<com.ibm.icu.util.VTimeZone: void writeZonePropsByDOW(java.io.Writer,boolean,java.lang.String,int,int,int,int,int,long,long)>
<com.google.javascript.rhino.head.RhinoException: void printStackTrace(java.io.PrintWriter)>
<com.ibm.icu.text.RBBITableBuilder: void printSet(java.util.Collection)>
<com.google.common.io.Files: void move(java.io.File,java.io.File)>
<org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,long)>
<com.google.template.soy.javasrc.dyncompile.WritableInMemoryJavaFileObject: byte[] getByteContent()>
<org.json.JSONObject: java.io.Writer write(java.io.Writer)>
<org.apache.tools.ant.types.resources.FileResource: java.io.OutputStream getOutputStream(boolean)>
<org.apache.tools.ant.taskdefs.Redirector: void handleOutput(java.lang.String)>
<com.google.javascript.rhino.head.IdScriptableObject: void writeObject(java.io.ObjectOutputStream)>
<org.apache.tools.ant.taskdefs.optional.pvcs.Pvcs: void execute()>
<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(boolean)>
<org.apache.tools.ant.types.resources.URLResource: void connect()>
<org.apache.tools.ant.taskdefs.Move: void moveFile(java.io.File,java.io.File,boolean,boolean)>
<org.apache.tools.ant.taskdefs.Javadoc: void writeExternalArgs(org.apache.tools.ant.types.Commandline)>
<org.apache.tools.ant.taskdefs.cvslib.CvsTagDiff: void writeTagDiff(org.apache.tools.ant.taskdefs.cvslib.CvsTagEntry[])>
<com.google.javascript.rhino.head.MemberBox: void writeParameters(java.io.ObjectOutputStream,java.lang.Class[])>
<com.google.javascript.rhino.head.tools.shell.ShellConsole$SimpleShellConsole: void print(java.lang.String)>
<com.ibm.icu.text.RBBITableBuilder: void printPosSets(com.ibm.icu.text.RBBINode)>
<com.google.inject.internal.util.$MapMaker$StrategyImpl: void writeObject(java.io.ObjectOutputStream)>
<org.apache.tools.ant.taskdefs.optional.EchoProperties: void xmlSaveProperties(java.util.Properties,java.io.OutputStream)>
<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>
<org.apache.tools.ant.taskdefs.cvslib.CvsTagDiff: void execute()>
<org.kohsuke.args4j.CmdLineParser: void printSingleLineOption(java.io.PrintWriter,org.kohsuke.args4j.spi.OptionHandler,java.util.ResourceBundle)>
<org.apache.tools.ant.taskdefs.Jar: void createIndexList(org.apache.tools.zip.ZipOutputStream)>
<org.apache.tools.ant.taskdefs.Replace: void processFile(java.io.File)>
<org.apache.tools.ant.taskdefs.Exec: int run(java.lang.String)>
<org.apache.tools.ant.taskdefs.optional.ejb.JonasDeploymentTool: void addGenICGeneratedFiles(java.io.File,java.util.Hashtable)>
<com.ibm.icu.text.RBBIRuleScanner: void fixOpStack(int)>
<com.github.jleyba.dossier.Config: java.lang.String getOptionsText()>
<com.google.javascript.rhino.head.tools.shell.Global: int runProcess(java.lang.String[],java.lang.String[],java.io.InputStream,java.io.OutputStream,java.io.OutputStream)>
<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: void writeObject(java.io.ObjectOutputStream)>
<com.google.javascript.rhino.head.tools.shell.Global: java.lang.Object print(com.google.javascript.rhino.head.Context,com.google.javascript.rhino.head.Scriptable,java.lang.Object[],com.google.javascript.rhino.head.Function)>
<org.apache.tools.ant.taskdefs.Manifest: void write(java.io.PrintWriter,boolean)>
<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>
<org.apache.tools.ant.util.ResourceUtils: void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project,boolean)>
<org.apache.tools.ant.taskdefs.Execute$VmsCommandLauncher: java.io.File createCommandFile(java.lang.String[],java.lang.String[])>
<org.apache.tools.ant.util.LineOrientedOutputStream: void write(byte[],int,int)>
<com.ibm.icu.text.RuleBasedBreakIterator: int handleNext(short[])>
<org.apache.tools.ant.taskdefs.Javadoc: void doSourceAndPackageNames(org.apache.tools.ant.types.Commandline,java.util.Vector,java.util.Vector,boolean,java.io.File,java.io.BufferedWriter)>
<com.google.javascript.jscomp.PerformanceTracker: void outputTracerReport(java.io.PrintStream)>
<org.apache.tools.ant.taskdefs.optional.ejb.JonasDeploymentTool: void deleteAllFiles(java.io.File)>
<org.apache.tools.ant.taskdefs.optional.jsp.JspC: void deleteEmptyJavaFiles()>
<com.google.javascript.jscomp.WhitelistWarningsGuard$WhitelistBuilder: void appendWhitelist(java.io.PrintStream)>
<org.apache.tools.ant.taskdefs.Jikes: void compile(java.lang.String[])>
<org.apache.tools.ant.taskdefs.Length$AllHandler: void complete()>
<com.google.javascript.rhino.head.tools.idswitch.FileBody: void writeData(java.io.Writer)>
<com.google.common.util.concurrent.AtomicDoubleArray: void writeObject(java.io.ObjectOutputStream)>
<org.kohsuke.args4j.Starter: void main(java.lang.String[])>
<org.apache.tools.ant.input.GreedyInputHandler: void handleInput(org.apache.tools.ant.input.InputRequest)>
<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>
<com.ibm.icu.impl.URLHandler$JarURLHandler: void <init>(java.net.URL)>
<org.apache.tools.ant.taskdefs.Length$EachHandler: void handle(org.apache.tools.ant.types.Resource)>
<org.apache.tools.ant.taskdefs.Get$GetThread: boolean downloadFile()>
<org.apache.tools.ant.taskdefs.optional.jlink.jlink: void main(java.lang.String[])>
<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>
<com.ibm.icu.util.VTimeZone: void writeHeader(java.io.Writer)>
<org.apache.tools.ant.taskdefs.SQLExec: void printValue(java.sql.ResultSet,int,java.io.PrintStream)>
<org.apache.tools.ant.util.DOMElementWriter: void writeXMLDeclaration(java.io.Writer)>
<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: byte[] toByteArray()>
<com.google.common.io.FileBackedOutputStream: void reset()>
<com.google.javascript.rhino.head.tools.shell.ConsoleTextArea: void returnPressed()>
<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.io.Writer,int)>
<org.json.Test: void main(java.lang.String[])>
<com.ibm.icu.text.RBBIRuleScanner: void parse()>
<com.google.common.cache.LongAdder: void writeObject(java.io.ObjectOutputStream)>
<org.json.JSONWriter: org.json.JSONWriter end(char,char)>
<org.apache.tools.ant.taskdefs.optional.i18n.Translate: void translateOneFile(java.io.File,java.io.File)>
<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>
<com.google.javascript.rhino.head.SecureCaller: byte[] loadBytecodePrivileged()>
<com.ibm.icu.util.VTimeZone: void writeZonePropsByTime(java.io.Writer,boolean,java.lang.String,int,int,long,boolean)>
<com.ibm.icu.util.VTimeZone: void beginZoneProps(java.io.Writer,boolean,java.lang.String,int,int,long)>
<org.apache.tools.ant.taskdefs.Javadoc: void execute()>
<org.apache.tools.ant.taskdefs.Copy: void doFileOperations()>
<com.google.javascript.rhino.head.tools.shell.ShellConsole$SimpleShellConsole: java.lang.String readLine(java.lang.String)>
<org.apache.tools.ant.taskdefs.XSLTProcess: void process(java.io.File,java.lang.String,java.io.File,org.apache.tools.ant.types.Resource)>
<org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector: boolean isSelected(org.apache.tools.ant.types.Resource)>
<org.apache.tools.ant.types.spi.Service: java.io.InputStream getAsStream()>
<org.apache.tools.ant.taskdefs.BZip2: void pack()>
<org.apache.tools.ant.taskdefs.optional.Cab: void execute()>
<com.google.javascript.rhino.head.RhinoException: void printStackTrace(java.io.PrintStream)>
<org.apache.tools.ant.DemuxOutputStream: void write(byte[],int,int)>
<com.google.common.collect.Serialization: void writeMultiset(com.google.common.collect.Multiset,java.io.ObjectOutputStream)>
<org.apache.tools.ant.taskdefs.Replace$FileOutput: boolean process()>
<org.apache.tools.ant.taskdefs.optional.extension.LibraryDisplayer: void printLine(int)>
<org.apache.tools.ant.taskdefs.optional.depend.Depend: void writeCachedDependencies(java.util.Hashtable)>
<org.apache.tools.ant.util.LayoutPreservingProperties: void store(java.io.OutputStream,java.lang.String)>
<org.apache.tools.ant.ComponentHelper: java.lang.String diagnoseCreationFailure(java.lang.String,java.lang.String)>
<com.google.javascript.rhino.head.MemberBox: void writeMember(java.io.ObjectOutputStream,java.lang.reflect.Member)>
<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>
<org.apache.tools.ant.taskdefs.Sync: int[] removeOrphanFiles(java.util.Set,java.io.File,java.util.Set)>
<org.apache.tools.ant.taskdefs.Execute$Java13CommandLauncher: java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)>
<com.google.javascript.rhino.head.ScriptableObject: void writeObject(java.io.ObjectOutputStream)>
<com.google.gson.Gson: com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer)>
<com.ibm.icu.util.VTimeZone: void beginRRULE(java.io.Writer,int)>
<org.apache.tools.ant.taskdefs.optional.depend.Depend: int deleteAllAffectedFiles()>
<com.ibm.icu.text.MessageFormat: void writeObject(java.io.ObjectOutputStream)>
<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>
<org.apache.tools.ant.taskdefs.Manifest$Section: void write(java.io.PrintWriter,boolean)>
<com.google.common.collect.Serialization: void writeMap(java.util.Map,java.io.ObjectOutputStream)>
<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>
<com.ibm.icu.text.RBBINode: void printNode(com.ibm.icu.text.RBBINode)>
<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(long)>
<com.google.common.collect.HashMultimap: void writeObject(java.io.ObjectOutputStream)>
<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>
<org.mozilla.classfile.TypeInfo: void print(int[],int,int[],int,org.mozilla.classfile.ConstantPool)>
<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.Hasher putBytes(byte[],int,int)>
<com.google.javascript.jscomp.deps.DepsGenerator: java.lang.String computeDependencyCalls()>
<org.apache.tools.ant.taskdefs.Length: void execute()>
<org.apache.tools.ant.taskdefs.optional.ReplaceRegExp: void doReplace(java.io.File,int)>
<org.json.JSONArray: java.io.Writer write(java.io.Writer)>
<org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache: void delete()>
<com.google.common.cache.CacheBuilder: void checkWeightWithWeigher()>
<org.apache.tools.ant.taskdefs.Get$GetThread: void closeStreams()>
<com.ibm.icu.text.RBBITableBuilder: void build()>
<org.apache.tools.ant.util.SymbolicLinkUtils: void deleteSymbolicLink(java.io.File,org.apache.tools.ant.Task)>
<com.ibm.icu.util.VTimeZone: void writeZonePropsByDOM(java.io.Writer,boolean,java.lang.String,int,int,int,int,long,long)>
<org.apache.tools.ant.taskdefs.optional.pvcs.Pvcs: void massagePCLI(java.io.File,java.io.File)>
<com.google.javascript.jscomp.VariableMap: byte[] toBytes()>
<org.apache.tools.ant.Diagnostics: void printProperty(java.io.PrintStream,java.lang.String)>
<org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,int)>
<org.apache.tools.ant.util.FileUtils: boolean tryHardToDelete(java.io.File)>
<org.apache.tools.ant.taskdefs.optional.PropertyFile: void writeFile()>
<org.apache.tools.ant.taskdefs.condition.Http: boolean eval()>
<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.StringBuffer,java.io.Writer,long,org.joda.time.Chronology)>
<com.google.javascript.rhino.head.tools.shell.Global: java.lang.String readUrl(java.lang.String,java.lang.String,boolean)>
<org.apache.tools.ant.taskdefs.Redirector: void handleErrorFlush(java.lang.String)>
<org.apache.tools.ant.taskdefs.Move: void deleteDir(java.io.File,boolean)>
<com.google.common.collect.LinkedListMultimap: void writeObject(java.io.ObjectOutputStream)>
<org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter: void printTargetAttrs(java.io.PrintWriter,java.lang.String)>
<com.ibm.icu.text.RBBISetBuilder: void printSets()>
<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,long,int)>
<org.apache.tools.ant.taskdefs.optional.ejb.WeblogicDeploymentTool: boolean isRebuildRequired(java.io.File,java.io.File)>
<com.ibm.icu.impl.duration.impl.Utils: void main(java.lang.String[])>
<com.google.javascript.jscomp.deps.DepsGenerator: void writeDepInfos(java.io.PrintStream,java.util.Collection)>
