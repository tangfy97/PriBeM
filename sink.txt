<com.hp.hpl.jena.sparql.resultset.PlainFormat: void binding(java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>
<com.hp.hpl.jena.tdb.base.file.LocationLock: void release()>
<com.hp.hpl.jena.query.ResultSetFormatter: java.lang.String asText(com.hp.hpl.jena.query.ResultSet)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _appendCharacterEscape(char,int)>
<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: void outputEsc(java.lang.String)>
<org.apache.xerces.util.DefaultErrorHandler: void printError(java.lang.String,org.apache.xerces.xni.parser.XMLParseException)>
<org.apache.http.impl.client.cache.HeapResourceFactory: org.apache.http.client.cache.Resource copy(java.lang.String,org.apache.http.client.cache.Resource)>
<org.apache.thrift.server.TExtensibleServlet: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<org.apache.thrift.transport.TSaslTransport: void write(byte[],int,int)>
<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void deleteConfigurationFile()>
<org.apache.commons.codec.net.QuotedPrintableCodec: byte[] decodeQuotedPrintable(byte[])>
<org.apache.xerces.impl.dtd.DTDGrammar: void printAttributes(int)>
<jena.schemagen: java.lang.String getOntologyElementNamespace()>
<org.apache.thrift.transport.THttpClient: void flushUsingHttpClient()>
<org.apache.jena.atlas.io.IndentedWriter: void write$(java.lang.String)>
<org.apache.xml.serialize.Printer: void printText(char)>
<org.apache.commons.lang3.text.translate.NumericEntityEscaper: boolean translate(int,java.io.Writer)>
<org.apache.xerces.impl.xpath.regex.REUtil: void main(java.lang.String[])>
<com.hp.hpl.jena.sdb.sql.RS: void printResultSet(java.io.PrintStream,java.sql.ResultSet)>
<com.hp.hpl.jena.tdb.base.file.LocationLock: void takeLock(int)>
<com.hp.hpl.jena.n3.JenaReaderBase: void read(com.hp.hpl.jena.rdf.model.Model,java.lang.String)>
<com.hp.hpl.jena.graph.impl.FileGraphTransactionHandler: void abort()>
<com.hp.hpl.jena.tdb.lib.DumpOps: void dump(com.hp.hpl.jena.query.Dataset)>
<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: void writeString(java.lang.String,java.io.PrintWriter)>
<org.apache.jena.atlas.logging.java.ConsoleHandlerStdout: void publish(java.util.logging.LogRecord)>
<org.apache.xml.serialize.Printer: void printSpace()>
<org.apache.log4j.net.TelnetAppender$SocketHandler: void run()>
<org.apache.log4j.jdbc.JDBCAppender: java.sql.Connection getConnection()>
<org.apache.log4j.ConsoleAppender$SystemOutStream: void write(byte[],int,int)>
<org.apache.jena.atlas.io.InStreamUTF8: void p(int)>
<org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper: int translate(java.lang.CharSequence,int,java.io.Writer)>
<org.apache.xml.serialize.IndentPrinter: void flushLine(boolean)>
<com.hp.hpl.jena.sparql.util.graph.GraphLoadMonitor: void println(java.lang.String,java.lang.String)>
<com.fasterxml.jackson.databind.util.LRUMap: void writeObject(java.io.ObjectOutputStream)>
<com.hp.hpl.jena.sparql.resultset.TextOutput: void printRow(java.io.PrintWriter,java.lang.String[],int[],java.lang.String,java.lang.String,java.lang.String)>
<org.apache.xerces.impl.dtd.models.DFAContentModel: void dumpTree(org.apache.xerces.impl.dtd.models.CMNode,int)>
<org.apache.xerces.impl.xs.opti.SchemaDOM: void indent(int)>
<org.apache.log4j.pattern.LogEvent: void writeLevel(java.io.ObjectOutputStream)>
<com.hp.hpl.jena.rdfxml.xmlinput.NTriple: void mainEh(java.lang.String[],org.xml.sax.ErrorHandler,com.hp.hpl.jena.rdfxml.xmlinput.ARPEventHandler)>
<com.hp.hpl.jena.graph.impl.FileGraph: void delete()>
<org.apache.xml.serialize.Printer: void breakLine()>
<tdb.tdbreorder: void main(java.lang.String[])>
<org.apache.jena.riot.out.JsonLDWriter: void serialize(java.io.Writer,com.hp.hpl.jena.sparql.core.DatasetGraph,org.apache.jena.riot.system.PrefixMap,java.lang.String)>
<com.github.jsonldjava.utils.JarCacheResource: void <init>(java.net.URL)>
<com.hp.hpl.jena.sdb.layout2.TupleLoaderBase$PreparedNode: void addToStatement(java.sql.PreparedStatement)>
<org.apache.xerces.stax.events.CommentImpl: void writeAsEncodedUnicode(java.io.Writer)>
<org.apache.log4j.helpers.CountingQuietWriter: void write(java.lang.String)>
<com.hp.hpl.jena.util.FileManager: java.lang.String readWholeFileAsUTF8(java.io.InputStream)>
<com.hp.hpl.jena.graph.impl.FileGraph: void mustDelete(java.io.File)>
<com.hp.hpl.jena.rdf.model.impl.NTripleWriter: void writeResource(com.hp.hpl.jena.rdf.model.Resource,java.io.PrintWriter)>
<org.apache.log4j.helpers.QuietWriter: void write(java.lang.String)>
<org.apache.log4j.spi.LoggingEvent: void writeLevel(java.io.ObjectOutputStream)>
<org.apache.xerces.xinclude.XIncludeTextReader: java.io.Reader getReader(org.apache.xerces.xni.parser.XMLInputSource)>
<org.apache.commons.codec.net.URLCodec: byte[] decodeUrl(byte[])>
<org.apache.http.entity.EntityTemplate: java.io.InputStream getContent()>
<org.apache.xerces.stax.events.StartDocumentImpl: void writeAsEncodedUnicode(java.io.Writer)>
<com.hp.hpl.jena.rdfxml.xmloutput.impl.Basic: void writeRDFHeader(com.hp.hpl.jena.rdf.model.Model,java.io.PrintWriter)>
<org.apache.jena.atlas.lib.FileOps: void delete(java.io.File,boolean)>
<org.apache.log4j.net.SMTPAppender: javax.mail.internet.InternetAddress[] parseAddress(java.lang.String)>
<org.apache.xerces.impl.xs.opti.SchemaDOM: void traverse(org.w3c.dom.Node,int)>
<org.apache.http.impl.client.cache.ehcache.EhcacheHttpCacheStorage: void putEntry(java.lang.String,org.apache.http.client.cache.HttpCacheEntry)>
<com.hp.hpl.jena.sdb.sql.SDBConnection: int execUpdate(java.lang.String)>
<com.hp.hpl.jena.rdfxml.xmlinput.JenaReader: void read(com.hp.hpl.jena.rdf.model.Model,java.lang.String)>
<org.apache.log4j.net.TelnetAppender$SocketHandler: void send(java.lang.String)>
<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>
<com.hp.hpl.jena.rdfxml.xmloutput.impl.Basic: void writePredicate(com.hp.hpl.jena.rdf.model.Statement,java.io.PrintWriter)>
<org.apache.http.entity.SerializableEntity: void createBytes(java.io.Serializable)>
<sdb.sdbsql: void execOneSQL(java.lang.String)>
<org.apache.jena.atlas.data.SortedDataBag: void preMerge()>
<com.hp.hpl.jena.graph.impl.FileGraphTransactionHandler: void commit()>
<com.hp.hpl.jena.tdb.base.file.BufferAllocatorMapped: void close()>
<org.apache.log4j.PropertyConfigurator: void doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)>
<org.apache.thrift.server.TServlet: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>
<com.hp.hpl.jena.sparql.util.RomanNumeral: void roman(java.lang.String)>
<org.apache.xerces.util.DOMErrorHandlerWrapper: void printError(org.w3c.dom.DOMError)>
<org.apache.xerces.stax.events.EntityReferenceImpl: void writeAsEncodedUnicode(java.io.Writer)>
<org.apache.xerces.stax.events.StartElementImpl: void writeAsEncodedUnicode(java.io.Writer)>
<com.hp.hpl.jena.tdb.store.SinkProgress: void println(java.lang.String,java.lang.String)>
<org.apache.commons.lang3.text.translate.CharSequenceTranslator: void translate(java.lang.CharSequence,java.io.Writer)>
<com.hp.hpl.jena.sparql.engine.main.JoinClassifier: boolean check(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>
<com.hp.hpl.jena.sparql.resultset.OutputBase: java.lang.String asString(boolean)>
<org.apache.thrift.transport.TMemoryBuffer: java.lang.String inspect()>
<org.apache.xml.serialize.Printer: void printText(java.lang.StringBuffer)>
<org.apache.commons.lang3.text.translate.OctalUnescaper: int translate(java.lang.CharSequence,int,java.io.Writer)>
<com.hp.hpl.jena.tdb.lib.DumpOps: void dumpTupleIndex(com.hp.hpl.jena.tdb.store.tupletable.TupleIndex)>
<org.apache.commons.lang3.StringEscapeUtils$CsvEscaper: int translate(java.lang.CharSequence,int,java.io.Writer)>
<org.apache.log4j.helpers.MDCKeySetExtractor: java.util.Set getPropertyKeySet(org.apache.log4j.spi.LoggingEvent)>
<org.apache.log4j.jdbc.JDBCAppender: void execute(java.lang.String)>
<com.hp.hpl.jena.sdb.util.PrintSDB: void print(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.shared.PrefixMapping)>
<com.hp.hpl.jena.sdb.sql.RS: void fmt(java.io.PrintStream,java.lang.String,int,char)>
<com.hp.hpl.jena.rdf.model.impl.NTripleWriter: void writeString(java.lang.String,java.io.PrintWriter)>
<org.apache.jena.atlas.io.IndentedWriter: void write$(char)>
<jena.rdfcompare: void main(java.lang.String[])>
<jena.schemagen: void usage()>
<com.hp.hpl.jena.rdfxml.xmloutput.impl.Basic: void writeResourceReference(com.hp.hpl.jena.rdf.model.Resource,java.io.PrintWriter)>
<org.apache.log4j.RollingFileAppender: void rollOver()>
<org.apache.xerces.impl.xpath.regex.RangeToken: void dumpRanges()>
<com.hp.hpl.jena.sparql.resultset.OutputBase: java.lang.String asString(com.hp.hpl.jena.query.ResultSet)>
<arq.cmdline.ModResultsIn: com.hp.hpl.jena.query.ResultSet getResultSet()>
<com.hp.hpl.jena.sdb.sql.RS: void fmtRow(java.io.PrintStream,java.sql.ResultSetMetaData,java.lang.String,java.lang.String,char,java.lang.String,int[])>
<org.apache.log4j.ConsoleAppender$SystemErrStream: void write(byte[],int,int)>
<com.hp.hpl.jena.n3.turtle.TurtleEventDump: void startFormula(int,int)>
<com.hp.hpl.jena.sdb.sql.SDBConnection: com.hp.hpl.jena.sdb.sql.ResultSetJDBC execQuery(java.lang.String,int)>
<com.hp.hpl.jena.graph.impl.FileGraphMaker: void removeGraph(java.lang.String)>
<com.hp.hpl.jena.sparql.resultset.PlainFormat: void finish(com.hp.hpl.jena.query.QuerySolution)>
<com.hp.hpl.jena.n3.turtle.TurtleEventDump: void prefix(int,int,java.lang.String,java.lang.String)>
<com.hp.hpl.jena.rdfxml.xmloutput.impl.Basic: void writeResourceId(com.hp.hpl.jena.rdf.model.Resource,java.io.PrintWriter)>
<org.apache.http.impl.client.cache.HeapResourceFactory: org.apache.http.client.cache.Resource generate(java.lang.String,java.io.InputStream,org.apache.http.client.cache.InputLimit)>
<com.hp.hpl.jena.tdb.sys.ProcessUtils: java.util.List getProcessInfo(java.lang.String)>
<org.apache.http.impl.client.cache.memcached.MemcachedCacheEntryImpl: byte[] toByteArray()>
<org.apache.log4j.ConsoleAppender$SystemErrStream: void write(int)>
<org.apache.commons.lang3.text.translate.UnicodeUnescaper: int translate(java.lang.CharSequence,int,java.io.Writer)>
<com.hp.hpl.jena.n3.N3IndentedWriter: void padTo()>
<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator debug(java.lang.String,com.hp.hpl.jena.sparql.engine.QueryIterator)>
<com.hp.hpl.jena.sparql.resultset.CSVOutput: void output(java.io.Writer,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.util.NodeToLabelMap)>
<org.apache.xerces.stax.events.ProcessingInstructionImpl: void writeAsEncodedUnicode(java.io.Writer)>
<com.hp.hpl.jena.rdfxml.xmloutput.impl.Unparser: void print(java.lang.String)>
<org.apache.jena.atlas.io.BufferingWriter: void output(java.lang.String,int,int)>
<org.apache.jena.atlas.io.IO: java.lang.String readWholeFileAsUTF8(java.io.Reader)>
<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: void triple(int,int,com.hp.hpl.jena.graph.Triple)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: int _prependOrWriteCharacterEscape(char[],int,int,char,int)>
<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerDebug: void indent()>
<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void store(java.lang.String)>
<org.apache.log4j.net.SMTPAppender: void sendBuffer()>
<com.hp.hpl.jena.sparql.resultset.CSVOutput: void format(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>
<com.hp.hpl.jena.rdfxml.xmloutput.impl.BaseXMLWriter: void generateDoctypeDeclaration(com.hp.hpl.jena.rdf.model.Model,java.io.PrintWriter)>
<org.apache.xml.serialize.Printer: void printText(char[],int,int)>
<org.apache.jena.atlas.io.OutputUtils: int oneHex(java.io.Writer,int,int)>
<org.apache.xerces.util.IntStack: void print()>
<com.hp.hpl.jena.util.PrintUtil: void printIndent(java.io.PrintWriter,int)>
<com.hp.hpl.jena.n3.N3IndentedWriter: void print(java.lang.String)>
<org.apache.log4j.lf5.util.StreamUtils: byte[] getBytes(java.io.InputStream)>
<com.hp.hpl.jena.tdb.base.file.MetaFile: void dump(java.io.PrintStream)>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void _prependOrWriteCharacterEscape(char,int)>
<com.hp.hpl.jena.reasoner.rulesys.builtins.Print: void print(com.hp.hpl.jena.graph.Node[],int,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>
<org.apache.xerces.stax.events.EntityDeclarationImpl: void writeAsEncodedUnicode(java.io.Writer)>
<org.apache.commons.lang3.text.translate.LookupTranslator: int translate(java.lang.CharSequence,int,java.io.Writer)>
<org.apache.jena.atlas.io.Writer2: void print(char[])>
<org.apache.html.dom.HTMLDocumentImpl: void writeln(java.lang.String)>
<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: void outputNode(com.hp.hpl.jena.graph.Node)>
<org.apache.thrift.TSerializer: byte[] serialize(org.apache.thrift.TBase)>
<org.apache.log4j.xml.DOMConfigurator$2: org.w3c.dom.Document parse(javax.xml.parsers.DocumentBuilder)>
<org.apache.jena.riot.out.OutputUtils: int oneHex(java.io.Writer,int,int)>
<org.apache.log4j.ConsoleAppender$SystemErrStream: void write(byte[])>
<org.apache.log4j.Level: void writeObject(java.io.ObjectOutputStream)>
<org.apache.html.dom.HTMLDocumentImpl: void write(java.lang.String)>
<org.apache.commons.lang3.text.translate.NumericEntityUnescaper: int translate(java.lang.CharSequence,int,java.io.Writer)>
<org.apache.http.impl.client.cache.FileResource: void dispose()>
<org.apache.xerces.impl.Constants: void print(java.lang.String,java.lang.String,java.lang.Object[])>
<org.apache.log4j.DailyRollingFileAppender: void rollOver()>
<arq.uparse: void execOne(java.lang.String)>
<com.hp.hpl.jena.sdb.sql.SDBConnection: java.sql.PreparedStatement prepareStatement(java.lang.String)>
<com.hp.hpl.jena.sdb.layout2.TupleLoaderBase: void flush()>
<com.hp.hpl.jena.sparql.resultset.TextOutput: void format(java.io.OutputStream,boolean)>
<org.apache.jena.atlas.io.Writer2: void print(char)>
<arq.query: void queryExec(boolean,com.hp.hpl.jena.sparql.resultset.ResultsFormat)>
<org.apache.xerces.stax.events.AttributeImpl: void writeAsEncodedUnicode(java.io.Writer)>
<com.hp.hpl.jena.sdb.sql.TableUtils: void dump(java.sql.Connection,java.lang.String)>
<org.apache.commons.lang3.SerializationUtils: byte[] serialize(java.io.Serializable)>
<com.hp.hpl.jena.shared.wg.LazyURLInputStream: java.io.InputStream open()>
<com.hp.hpl.jena.reasoner.rulesys.Util: java.lang.String loadURLFile(java.lang.String)>
<arq.iri: void main(java.lang.String[])>
<org.apache.jena.atlas.io.Writer2: void print(java.lang.String)>
<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])>
<com.hp.hpl.jena.util.LocatorURL: com.hp.hpl.jena.util.TypedStream open(java.lang.String)>
<org.apache.jena.atlas.io.BufferingWriter: void output(char[],int,int)>
<com.hp.hpl.jena.sparql.resultset.TextOutput: void write(java.io.PrintWriter,com.hp.hpl.jena.query.ResultSet,java.lang.String,java.lang.String,java.lang.String)>
<org.apache.xerces.impl.xpath.XPath$Tokens: void dumpTokens()>
<com.hp.hpl.jena.rdf.model.impl.NTripleWriter: void writeURIString(java.lang.String,java.io.PrintWriter)>
<com.hp.hpl.jena.util.FileUtils: java.lang.String readWholeFileAsUTF8(java.io.Reader)>
<org.apache.jena.atlas.json.JsonAccess: void main(java.lang.String[])>
<org.apache.thrift.transport.TFramedTransport: void write(byte[],int,int)>
<com.hp.hpl.jena.rdfxml.xmloutput.impl.Basic: void writeSpace(java.io.PrintWriter)>
<org.apache.xml.serialize.IndentPrinter: void breakLine(boolean)>
<com.hp.hpl.jena.tdb.store.bulkloader2.RecordsFromInput: void printRecord(java.io.PrintStream,com.hp.hpl.jena.tdb.base.record.Record,int)>
<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeTools: void bpt_scan_record_buffer(com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPageMgr,boolean)>
<org.apache.commons.codec.net.QuotedPrintableCodec: byte[] encodeQuotedPrintable(java.util.BitSet,byte[])>
<org.apache.thrift.transport.TMemoryBuffer: void write(byte[],int,int)>
<com.hp.hpl.jena.rdf.model.impl.NTripleWriter: void write(com.hp.hpl.jena.rdf.model.Model,java.io.PrintWriter)>
<org.apache.xerces.stax.events.NotationDeclarationImpl: void writeAsEncodedUnicode(java.io.Writer)>
<org.apache.http.impl.client.cache.ehcache.EhcacheHttpCacheStorage: void updateEntry(java.lang.String,org.apache.http.client.cache.HttpCacheUpdateCallback)>
<com.hp.hpl.jena.n3.N3IndentedWriter: void println()>
<org.apache.xerces.impl.XMLEntityManager: java.lang.String setupCurrentEntity(java.lang.String,org.apache.xerces.xni.parser.XMLInputSource,boolean,boolean)>
<com.hp.hpl.jena.rdfxml.xmloutput.impl.Unparser: void tab()>
<org.apache.xerces.stax.events.CharactersImpl: void writeAsEncodedUnicode(java.io.Writer)>
<org.apache.thrift.transport.THttpClient: void write(byte[],int,int)>
<org.apache.jena.atlas.io.IO: byte[] readWholeFile(java.io.InputStream)>
<sdb.sdbprint: void compilePrint(com.hp.hpl.jena.sdb.Store,com.hp.hpl.jena.query.Query)>
<com.hp.hpl.jena.sdb.sql.JDBC: java.sql.Connection createConnection(java.lang.String,java.lang.String,java.lang.String)>
<com.hp.hpl.jena.sdb.sql.SDBConnection: com.hp.hpl.jena.sdb.sql.ResultSetJDBC execSilent(java.lang.String)>
<com.hp.hpl.jena.tdb.transaction.NodeTableTrans: void inconsistent(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.tdb.store.NodeId,com.hp.hpl.jena.tdb.store.NodeId)>
<com.hp.hpl.jena.sparql.resultset.PlainFormat: void insertLineNumber()>
<org.apache.commons.lang3.text.translate.UnicodeEscaper: boolean translate(int,java.io.Writer)>
<org.apache.log4j.ConsoleAppender$SystemOutStream: void write(byte[])>
<com.hp.hpl.jena.reasoner.rulesys.RuleDerivation: void printTrace(java.io.PrintWriter,boolean,int,java.util.HashSet)>
<com.hp.hpl.jena.tdb.lib.DumpOps: void dumpNodeTupleTable(com.hp.hpl.jena.tdb.store.tupletable.TupleTable)>
<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeTools: void bpt_scan_nodes(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree,boolean)>
<org.apache.xml.serialize.Printer: void printText(java.lang.String)>
<com.hp.hpl.jena.tdb.lib.DumpOps: void dumpBlockMgr(java.io.PrintStream,com.hp.hpl.jena.tdb.base.block.BlockMgr)>
<org.apache.jena.atlas.test.RepeatExecution: void repeatExecutions(org.apache.jena.atlas.test.ExecGenerator,int,boolean)>
<org.apache.xerces.impl.xs.models.XSDFACM: void dumpTree(org.apache.xerces.impl.dtd.models.CMNode,int)>
<com.hp.hpl.jena.sdb.sql.SDBConnection: com.hp.hpl.jena.sdb.sql.ResultSetJDBC exec(java.lang.String)>
<com.hp.hpl.jena.rdf.model.impl.NTripleWriter: void write(com.hp.hpl.jena.rdf.model.Model,java.io.Writer,java.lang.String)>
<jena.rdfcopy: void usage()>
<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerDebug: void start(int,int)>
<org.apache.log4j.ConsoleAppender$SystemOutStream: void write(int)>
<org.apache.xerces.xpointer.XPointerErrorHandler: void printError(java.lang.String,org.apache.xerces.xni.parser.XMLParseException)>
<arq.cmdline.ModQueryIn: com.hp.hpl.jena.query.Query getQuery()>
<org.apache.jena.riot.web.HttpResponseLib$1: void handle(java.lang.String,org.apache.http.HttpResponse)>
<sdb.sdbmeta: boolean confirm(java.lang.String)>
<org.apache.xerces.stax.events.EndElementImpl: void writeAsEncodedUnicode(java.io.Writer)>
<com.hp.hpl.jena.rdf.model.impl.NTripleWriter: void writeLiteral(com.hp.hpl.jena.rdf.model.Literal,java.io.PrintWriter)>
<arq.qexpr: void main2(java.lang.String[])>
<org.apache.thrift.transport.THttpClient: void flush()>
<com.hp.hpl.jena.n3.N3IndentedWriter: void println(java.lang.String)>
<jena.schemagen: void writeln(int,java.lang.String)>
<org.apache.xerces.impl.dtd.DTDGrammar: void printAttribute(int)>
<org.apache.xml.serialize.IndentPrinter: void printSpace()>
<com.hp.hpl.jena.query.ResultSetFormatter: java.lang.String asText(com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.sparql.core.Prologue)>
<org.apache.jena.atlas.lib.ByteBufferLib: void print(java.io.PrintStream,java.nio.ByteBuffer)>
<org.apache.xerces.stax.events.DTDImpl: void writeAsEncodedUnicode(java.io.Writer)>
<jena.schemagen: java.lang.String getOntologyElementVersionInfo()>
<jena.rdfcompare: void usage()>
<arq.qparse: void exec()>
<com.hp.hpl.jena.rdfxml.xmloutput.impl.Basic: void writeLiteral(com.hp.hpl.jena.rdf.model.Literal,java.io.PrintWriter)>
<com.hp.hpl.jena.graph.impl.FileGraphMaker: void deleteFiles(java.util.Iterator)>
<org.apache.xerces.impl.xpath.regex.REUtil: void dumpString(java.lang.String)>
<com.hp.hpl.jena.rdfxml.xmloutput.impl.Basic: void writeDescriptionHeader(com.hp.hpl.jena.rdf.model.Resource,java.io.PrintWriter)>
<com.hp.hpl.jena.n3.turtle.TurtleEventDump: void triple(int,int,com.hp.hpl.jena.graph.Triple)>
<com.hp.hpl.jena.n3.turtle.TurtleEventDump: void endFormula(int,int)>
<org.apache.xerces.impl.XMLEntityManager: java.io.OutputStream createOutputStream(java.lang.String)>
<tdb.tools.dumpbpt: void printRecord(java.lang.String,java.io.PrintStream,com.hp.hpl.jena.tdb.base.record.Record,int)>
<com.hp.hpl.jena.sdb.sql.TableUtils: long getTableSize(java.sql.Connection,java.lang.String)>
<jena.schemagen: void write(int,java.lang.String)>
<com.hp.hpl.jena.sdb.layout2.TupleLoaderBase: void massDelete(com.hp.hpl.jena.graph.Node[])>
