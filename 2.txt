***** Loading java classes ***** 

Start reading BOM and BIM...
BOM is loaded with 361 methods.
BIM is loaded with 278 methods.
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/C:/Users/feiyang/eclipse-workspace/tutorialSoot/lib/soot-4.2.1-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/C:/Users/feiyang/eclipse-workspace/tutorialSoot/lib/soot-3.3.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]
Local flow analysis: 
$stack51 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack51 = virtualinvoke l1.<org.h2.engine.Session: org.h2.engine.Database getDatabase()>()
$stack29 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack29 = virtualinvoke l1.<org.h2.engine.Session: org.h2.engine.Database getDatabase()>()
$stack137 <org.hibernate.mapping.PersistentClass: void setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> $stack137 = virtualinvoke $stack136.<java.lang.String: java.lang.String trim()>()
$stack128 <org.hibernate.mapping.PersistentClass: void setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> $stack128 = interfaceinvoke sqlUpdate.<org.hibernate.annotations.SQLUpdate: java.lang.String sql()>()
$stack120 <org.hibernate.mapping.PersistentClass: void setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> $stack120 = interfaceinvoke sqlDelete.<org.hibernate.annotations.SQLDelete: java.lang.String sql()>()
$stack112 <org.hibernate.mapping.PersistentClass: void setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> $stack112 = interfaceinvoke sqlDeleteAll.<org.hibernate.annotations.SQLDeleteAll: java.lang.String sql()>()
node#4 <com.hp.hpl.jena.query.QueryExecution: com.hp.hpl.jena.rdf.model.Model execConstruct(com.hp.hpl.jena.rdf.model.Model)> node#4 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>()
queryStr <com.hp.hpl.jena.query.QueryFactory: com.hp.hpl.jena.query.Query create(java.lang.String,com.hp.hpl.jena.query.Syntax)> queryStr = interfaceinvoke $stack30.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>()
query <com.hp.hpl.jena.query.QueryExecutionFactory: com.hp.hpl.jena.query.QueryExecution create(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.rdf.model.Model)> query = staticinvoke <com.hp.hpl.jena.query.QueryFactory: com.hp.hpl.jena.query.Query create(java.lang.String,com.hp.hpl.jena.query.Syntax)>(queryStr, $stack37)
l2 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l2 = virtualinvoke l1.<org.h2.bnf.Sentence: java.lang.String getQuery()>()
l2 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l2 = virtualinvoke l2.<java.lang.String: java.lang.String substring(int)>($stack32)
l2 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l2 = virtualinvoke l2.<java.lang.String: java.lang.String substring(int)>(1)
l2 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l2 = virtualinvoke l1.<org.h2.bnf.Sentence: java.lang.String getQuery()>()
l2 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l2 = virtualinvoke l2.<java.lang.String: java.lang.String substring(int)>(1)
l3 <org.h2.util.DateTimeUtils: java.sql.Date convertDateToCalendar(java.sql.Date,java.util.Calendar)> l3 = virtualinvoke $stack5.<org.h2.value.Value: java.sql.Date getDate()>()
l3 <org.h2.util.DateTimeUtils: java.sql.Date convertDateToCalendar(java.sql.Date,java.util.Calendar)> l3 = virtualinvoke $stack5.<org.h2.value.Value: java.sql.Date getDate()>()
l3 <org.h2.util.DateTimeUtils: java.sql.Time convertTimeToCalendar(java.sql.Time,java.util.Calendar)> l3 = virtualinvoke $stack5.<org.h2.value.Value: java.sql.Time getTime()>()
l3 <org.h2.util.DateTimeUtils: java.sql.Time convertTimeToCalendar(java.sql.Time,java.util.Calendar)> l3 = virtualinvoke $stack5.<org.h2.value.Value: java.sql.Time getTime()>()
l3 <org.h2.util.DateTimeUtils: java.sql.Timestamp convertTimestampToCalendar(java.sql.Timestamp,java.util.Calendar)> l3 = virtualinvoke $stack5.<org.h2.value.Value: java.sql.Timestamp getTimestamp()>()
l3 <org.h2.util.DateTimeUtils: java.sql.Timestamp convertTimestampToCalendar(java.sql.Timestamp,java.util.Calendar)> l3 = virtualinvoke $stack5.<org.h2.value.Value: java.sql.Timestamp getTimestamp()>()
$stack35 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack35 = l0.<org.h2.constraint.ConstraintUnique: java.lang.String comment>
$stack1 <org.h2.constraint.ConstraintUnique: java.lang.String getCreateSQLForCopy(org.h2.table.Table,java.lang.String,boolean)> $stack1 = l0.<org.h2.constraint.ConstraintUnique: org.h2.table.Table table>
$stack1 <org.h2.constraint.ConstraintUnique: java.lang.String getCreateSQLForCopy(org.h2.table.Table,java.lang.String)> $stack1 = l0.<org.h2.constraint.ConstraintUnique: org.h2.table.Table table>
namedParams <net.sf.hibernate.impl.AbstractQueryImpl: net.sf.hibernate.engine.QueryParameters getQueryParameters(java.util.Map)> namedParams = virtualinvoke this.<net.sf.hibernate.impl.SQLQueryImpl: java.util.Map getNamedParams()>()
$stack4 <net.sf.hibernate.engine.SessionImplementor: java.util.List findBySQL(java.lang.String,java.lang.String[],java.lang.Class[],net.sf.hibernate.engine.QueryParameters,java.util.Collection)> $stack4 = virtualinvoke this.<net.sf.hibernate.impl.SQLQueryImpl: java.lang.String bindParameterLists(java.util.Map)>(namedParams)
sub <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition toDNF(org.hypergraphdb.query.HGQueryCondition)> sub = (org.hypergraphdb.query.HGQueryCondition) $stack38
sub <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition toDNF(org.hypergraphdb.query.HGQueryCondition)> sub = staticinvoke <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition toDNF(org.hypergraphdb.query.HGQueryCondition)>(sub)
i$#8 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition toDNF(org.hypergraphdb.query.HGQueryCondition)> i$#8 = $stack45
sub <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition toDNF(org.hypergraphdb.query.HGQueryCondition)> sub = (org.hypergraphdb.query.HGQueryCondition) $stack20
sub <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition toDNF(org.hypergraphdb.query.HGQueryCondition)> sub = staticinvoke <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition toDNF(org.hypergraphdb.query.HGQueryCondition)>(sub)
$stack13 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition toDNF(org.hypergraphdb.query.HGQueryCondition)> $stack13 = virtualinvoke and#19.<org.hypergraphdb.query.MapCondition: org.hypergraphdb.query.HGQueryCondition getCondition()>()
r1 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> r1 = interfaceinvoke c1.<org.hypergraphdb.query.TypeCondition: org.hypergraphdb.util.Ref getTypeReference()>()
r2 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> r2 = interfaceinvoke c2.<org.hypergraphdb.query.TypeCondition: org.hypergraphdb.util.Ref getTypeReference()>()
$stack8 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack8 = virtualinvoke c1.<org.hypergraphdb.query.AtomTypeCondition: org.hypergraphdb.util.Ref getTypeReference()>()
$stack10 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack10 = virtualinvoke c2.<org.hypergraphdb.query.AtomTypeCondition: org.hypergraphdb.util.Ref getTypeReference()>()
$stack7 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack7 = virtualinvoke c1.<org.hypergraphdb.query.TypedValueCondition: org.hypergraphdb.util.Ref getTypeReference()>()
$stack9 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack9 = virtualinvoke c2.<org.hypergraphdb.query.AtomTypeCondition: org.hypergraphdb.util.Ref getTypeReference()>()
$stack6 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack6 = virtualinvoke tc.<org.hypergraphdb.query.TypedValueCondition: org.hypergraphdb.util.Ref getValueReference()>()
$stack8 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack8 = virtualinvoke vc.<org.hypergraphdb.query.AtomValueCondition: org.hypergraphdb.util.Ref getValueReference()>()
c <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition simplify(org.hypergraphdb.query.HGQueryCondition)> c = (org.hypergraphdb.query.HGQueryCondition) $stack245
c <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition simplify(org.hypergraphdb.query.HGQueryCondition)> c = specialinvoke this.<org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition simplify(org.hypergraphdb.query.HGQueryCondition)>(c)
i$#6 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: boolean checkConsistent(org.hypergraphdb.query.AtomTypeCondition,org.hypergraphdb.query.AtomTypeCondition)> i$#6 = null
byTypedValue <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: boolean checkConsistent(org.hypergraphdb.query.TypedValueCondition,org.hypergraphdb.query.AtomValueCondition)> byTypedValue = null
c <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition simplify(org.hypergraphdb.query.HGQueryCondition)> c = (org.hypergraphdb.query.HGQueryCondition) $stack191
$stack230 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack230 = virtualinvoke tc.<org.hypergraphdb.query.AtomTypeCondition: org.hypergraphdb.util.Ref getTypeReference()>()
i$#6 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: boolean checkConsistent(org.hypergraphdb.query.AtomTypeCondition,org.hypergraphdb.query.AtomTypeCondition)> i$#6 = tc
byTypedValue <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: boolean checkConsistent(org.hypergraphdb.query.TypedValueCondition,org.hypergraphdb.query.AtomValueCondition)> byTypedValue = (org.hypergraphdb.query.TypedValueCondition) c
$stack216 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack216 = virtualinvoke byTypedValue.<org.hypergraphdb.query.TypedValueCondition: org.hypergraphdb.util.Ref getTypeReference()>()
$stack201 <org.hypergraphdb.query.cond2qry.ConditionToQuery: org.hypergraphdb.query.cond2qry.QueryMetaData getMetaData(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack201 = this.<org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.HyperGraph graph>
$stack186 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack186 = virtualinvoke i$#6.<org.hypergraphdb.query.AtomTypeCondition: org.hypergraphdb.util.Ref getTypeReference()>()
i$#6 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: boolean checkConsistent(org.hypergraphdb.query.AtomTypeCondition,org.hypergraphdb.query.AtomTypeCondition)> i$#6 = null
$stack169 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack169 = virtualinvoke byTypedValue.<org.hypergraphdb.query.TypedValueCondition: org.hypergraphdb.util.Ref getTypeReference()>()
$stack152 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack152 = virtualinvoke i$#6.<org.hypergraphdb.query.AtomTypeCondition: org.hypergraphdb.util.Ref getTypeReference()>()
byTypedValue <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: boolean checkConsistent(org.hypergraphdb.query.TypedValueCondition,org.hypergraphdb.query.AtomValueCondition)> byTypedValue = $stack155
i$#6 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: boolean checkConsistent(org.hypergraphdb.query.AtomTypeCondition,org.hypergraphdb.query.AtomTypeCondition)> i$#6 = null
$stack139 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack139 = virtualinvoke byTypedValue.<org.hypergraphdb.query.TypedValueCondition: org.hypergraphdb.util.Ref getTypeReference()>()
$stack143 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.util.Pair findIndex(org.hypergraphdb.HyperGraph,org.hypergraphdb.indexing.HGKeyIndexer)> $stack143 = this.<org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.HyperGraph graph>
c#41 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: boolean checkConsistent(org.hypergraphdb.type.HGAtomType,org.hypergraphdb.query.AtomPartCondition)> c#41 = (org.hypergraphdb.type.HGAtomType) $stack98
$stack104 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.util.Pair findIndex(org.hypergraphdb.HyperGraph,org.hypergraphdb.indexing.HGKeyIndexer)> $stack104 = this.<org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.HyperGraph graph>
i$#6 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: boolean checkConsistent(org.hypergraphdb.query.AtomTypeCondition,org.hypergraphdb.query.AtomTypeCondition)> i$#6 = null
byTypedValue <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: boolean checkConsistent(org.hypergraphdb.query.TypedValueCondition,org.hypergraphdb.query.AtomValueCondition)> byTypedValue = null
p <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> p = $stack61[qmd#93]
$stack67 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack67 = interfaceinvoke $stack66.<org.hypergraphdb.HGHandleFactory: org.hypergraphdb.HGPersistentHandle anyHandle()>()
$stack71 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.util.Pair findIndex(org.hypergraphdb.HyperGraph,org.hypergraphdb.indexing.HGKeyIndexer)> $stack71 = this.<org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.HyperGraph graph>
i$#6 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: boolean checkConsistent(org.hypergraphdb.query.AtomTypeCondition,org.hypergraphdb.query.AtomTypeCondition)> i$#6 = null
byTypedValue <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: boolean checkConsistent(org.hypergraphdb.query.TypedValueCondition,org.hypergraphdb.query.AtomValueCondition)> byTypedValue = null
c <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition simplify(org.hypergraphdb.query.HGQueryCondition)> c = (org.hypergraphdb.query.HGQueryCondition) $stack33
c <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition simplify(org.hypergraphdb.query.HGQueryCondition)> c = specialinvoke this.<org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition simplify(org.hypergraphdb.query.HGQueryCondition)>(c)
$stack21 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition simplify(org.hypergraphdb.query.HGQueryCondition)> $stack21 = virtualinvoke in#142.<org.hypergraphdb.query.MapCondition: org.hypergraphdb.query.HGQueryCondition getCondition()>()
$stack159 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.HGHandle classToHandle(java.lang.Class)> $stack159 = virtualinvoke ac.<org.hypergraphdb.query.TypePlusCondition: java.lang.Class getJavaClass()>()
$stack160 <org.hypergraphdb.query.TypePlusCondition: void setBaseType(org.hypergraphdb.HGHandle)> $stack160 = specialinvoke this.<org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.HGHandle classToHandle(java.lang.Class)>($stack159)
$stack119 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack119 = virtualinvoke ac#6.<org.hypergraphdb.query.TypedValueCondition: org.hypergraphdb.util.Ref getTypeReference()>()
$stack140 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.HGHandle classToHandle(java.lang.Class)> $stack140 = virtualinvoke ac#6.<org.hypergraphdb.query.TypedValueCondition: java.lang.Class getJavaClass()>()
$stack128 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack128 = virtualinvoke ac#6.<org.hypergraphdb.query.TypedValueCondition: org.hypergraphdb.util.Ref getValueReference()>()
$stack133 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.And and(org.hypergraphdb.query.HGQueryCondition[])> $stack133 = newarray (org.hypergraphdb.query.HGQueryCondition)[1]
$stack94 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack94 = virtualinvoke $stack93.<org.hypergraphdb.query.AtomValueCondition: org.hypergraphdb.util.Ref getValueReference()>()
$stack103 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.And and(org.hypergraphdb.query.HGQueryCondition[])> $stack103 = newarray (org.hypergraphdb.query.HGQueryCondition)[2]
$stack75 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: boolean isSameType(org.hypergraphdb.query.TypeCondition,org.hypergraphdb.query.TypeCondition)> $stack75 = (org.hypergraphdb.query.TypeCondition) h#25
and#54 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> and#54 = orCondition#51[h#53]
i$#57 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> i$#57 = (org.hypergraphdb.util.Ref) $stack29
$stack43 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack43 = staticinvoke <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.HGHandle anyHandle()>()
$stack47 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack47 = staticinvoke <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.HGHandle anyHandle()>()
$stack53 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack53 = interfaceinvoke $stack52.<org.hypergraphdb.HGHandleFactory: org.hypergraphdb.HGPersistentHandle anyHandle()>()
$stack32 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack32 = staticinvoke <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.HGHandle anyHandle()>()
$stack40 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack40 = interfaceinvoke $stack39.<org.hypergraphdb.HGHandleFactory: org.hypergraphdb.HGPersistentHandle anyHandle()>()
$stack27 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: void preprocess(org.hypergraphdb.query.HGQueryCondition)> $stack27 = (org.hypergraphdb.query.HGQueryCondition) $stack26
i#5 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: void preprocess(org.hypergraphdb.query.HGQueryCondition)> i#5 = (org.hypergraphdb.query.HGQueryCondition) $stack20
i#5 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: void preprocess(org.hypergraphdb.query.HGQueryCondition)> i#5 = (org.hypergraphdb.query.HGQueryCondition) $stack15
$stack11 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: void preprocess(org.hypergraphdb.query.HGQueryCondition)> $stack11 = virtualinvoke $stack10.<org.hypergraphdb.query.MapCondition: org.hypergraphdb.query.HGQueryCondition getCondition()>()
$stack4 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition expand(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack4 = this.<org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.HyperGraph graph>
$stack5 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition toDNF(org.hypergraphdb.query.HGQueryCondition)> $stack5 = specialinvoke this.<org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition expand(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)>($stack4, condition)
$stack6 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition simplify(org.hypergraphdb.query.HGQueryCondition)> $stack6 = staticinvoke <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.query.HGQueryCondition toDNF(org.hypergraphdb.query.HGQueryCondition)>($stack5)
$stack9 <org.hypergraphdb.query.cond2qry.ToQueryMap: org.hypergraphdb.HGQuery toQuery(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack9 = this.<org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.HyperGraph graph>
$stack19 <org.h2.expression.AggregateData: void add(org.h2.engine.Database,boolean,org.h2.value.Value)> $stack19 = virtualinvoke l1.<org.h2.engine.Session: org.h2.engine.Database getDatabase()>()
$stack16 <org.h2.expression.AggregateData: org.h2.value.Value getValue(org.h2.engine.Database,boolean)> $stack16 = virtualinvoke l1.<org.h2.engine.Session: org.h2.engine.Database getDatabase()>()
ann#11 <org.hibernate.cfg.annotations.QueryBinder: void bindQuery(javax.persistence.NamedQuery,org.hibernate.cfg.ExtendedMappings,boolean)> ann#11 = (javax.persistence.NamedQuery) $stack31
ann#14 <org.hibernate.cfg.annotations.QueryBinder: void bindNativeQuery(javax.persistence.NamedNativeQuery,org.hibernate.cfg.ExtendedMappings,boolean)> ann#14 = (javax.persistence.NamedNativeQuery) $stack23
ann#17 <org.hibernate.cfg.annotations.QueryBinder: void bindSqlResultsetMapping(javax.persistence.SqlResultSetMapping,org.hibernate.cfg.ExtendedMappings,boolean)> ann#17 = (javax.persistence.SqlResultSetMapping) $stack15
ann <org.hibernate.cfg.annotations.QueryBinder: void bindSqlResultsetMapping(javax.persistence.SqlResultSetMapping,org.hibernate.cfg.ExtendedMappings,boolean)> ann = (javax.persistence.SqlResultSetMapping) $stack7
current <org.hibernate.cfg.annotations.QueryBinder: void bindSqlResultsetMapping(javax.persistence.SqlResultSetMapping,org.hibernate.cfg.ExtendedMappings,boolean)> current = arr$[i$]
ann#4 <org.hibernate.cfg.annotations.QueryBinder: void bindQuery(javax.persistence.NamedQuery,org.hibernate.cfg.ExtendedMappings,boolean)> ann#4 = (javax.persistence.NamedQuery) $stack9
ann#5 <org.hibernate.cfg.annotations.QueryBinder: void bindQuery(org.hibernate.annotations.NamedQuery,org.hibernate.cfg.ExtendedMappings)> ann#5 = (org.hibernate.annotations.NamedQuery) $stack10
ann#6 <org.hibernate.cfg.annotations.QueryBinder: void bindQueries(javax.persistence.NamedQueries,org.hibernate.cfg.ExtendedMappings,boolean)> ann#6 = (javax.persistence.NamedQueries) $stack11
ann#7 <org.hibernate.cfg.annotations.QueryBinder: void bindQueries(org.hibernate.annotations.NamedQueries,org.hibernate.cfg.ExtendedMappings)> ann#7 = (org.hibernate.annotations.NamedQueries) $stack12
ann#8 <org.hibernate.cfg.annotations.QueryBinder: void bindNativeQuery(javax.persistence.NamedNativeQuery,org.hibernate.cfg.ExtendedMappings,boolean)> ann#8 = (javax.persistence.NamedNativeQuery) $stack13
ann#9 <org.hibernate.cfg.annotations.QueryBinder: void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery,org.hibernate.cfg.ExtendedMappings)> ann#9 = (org.hibernate.annotations.NamedNativeQuery) $stack14
ann#10 <org.hibernate.cfg.annotations.QueryBinder: void bindNativeQueries(javax.persistence.NamedNativeQueries,org.hibernate.cfg.ExtendedMappings,boolean)> ann#10 = (javax.persistence.NamedNativeQueries) $stack15
ann#11 <org.hibernate.cfg.annotations.QueryBinder: void bindNativeQueries(org.hibernate.annotations.NamedNativeQueries,org.hibernate.cfg.ExtendedMappings)> ann#11 = (org.hibernate.annotations.NamedNativeQueries) $stack16
i$#188 <org.hibernate.cfg.annotations.CollectionBinder: void setSqlOrderBy(org.hibernate.annotations.OrderBy)> i$#188 = (org.hibernate.annotations.OrderBy) $stack72
propertyName <org.hibernate.envers.tools.query.Parameters: void addWhereWithParams(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)> propertyName = interfaceinvoke $stack6.<org.hibernate.envers.query.property.PropertyNameGetter: java.lang.String get(org.hibernate.envers.configuration.AuditConfiguration)>(auditCfg)
$stack5 <org.vivoweb.harvester.util.repo.JenaConnect: com.hp.hpl.jena.query.ResultSet executeSelectQuery(java.lang.String)> $stack5 = this.<org.vivoweb.harvester.translate.SPARQLTranslator: java.lang.String sparqlQuery>
$stack22 <org.h2.engine.Database: void removeSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack22 = l0.<org.h2.command.ddl.DropIndex: org.h2.engine.Session session>
$stack21 <org.h2.engine.Database: void removeSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack21 = l0.<org.h2.command.ddl.DropIndex: org.h2.engine.Session session>
l7 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Connection)> l7 = null
l8 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l8 = null
l9 <org.h2.util.JdbcUtils: void closeSilently(java.sql.ResultSet)> l9 = null
l7 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Connection)> l7 = staticinvoke <org.h2.util.JdbcUtils: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(l2, l3, l4, l5)
l8 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l8 = interfaceinvoke l0.<java.sql.Connection: java.sql.Statement createStatement()>()
$stack21 <java.sql.Statement: boolean execute(java.lang.String)> $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>()
l9 <org.h2.util.JdbcUtils: void closeSilently(java.sql.ResultSet)> l9 = interfaceinvoke $stack23.<java.sql.DatabaseMetaData: java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(null, l6, null, null)
l11 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> l11 = interfaceinvoke l9.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("TABLE_NAME")
$stack34 <java.sql.Statement: boolean execute(java.lang.String)> $stack34 = virtualinvoke l12.<java.lang.StringBuilder: java.lang.String toString()>()
$stack59 <java.sql.Statement: boolean execute(java.lang.String)> $stack59 = virtualinvoke l12.<java.lang.StringBuilder: java.lang.String toString()>()
$stack10 <me.prettyprint.cassandra.service.KeyIterator: void runQuery(java.lang.Object,java.lang.Object)> $stack10 = this.<me.prettyprint.cassandra.service.KeyIterator: java.lang.Object lastReadValue>
sqlType <org.hibernate.cfg.Ejb3Column: void setSqlType(java.lang.String)> sqlType = $stack21
$stack2 <me.prettyprint.hector.api.query.SubSliceQuery: me.prettyprint.hector.api.query.SubSliceQuery setColumnNames(java.lang.Object[])> $stack2 = newarray (java.lang.Object)[1]
$stack16 <org.hibernate.envers.tools.query.QueryBuilder: org.hibernate.envers.tools.query.QueryBuilder newSubQueryBuilder(java.lang.String,java.lang.String)> $stack16 = virtualinvoke idData.<org.hibernate.envers.entities.mapper.relation.MiddleIdData: java.lang.String getAuditEntityName()>()
maxERevQbParameters <org.hibernate.envers.entities.mapper.id.IdMapper: void addIdsEqualToQuery(org.hibernate.envers.tools.query.Parameters,java.lang.String,java.lang.String)> maxERevQbParameters = virtualinvoke maxERevQb.<org.hibernate.envers.tools.query.QueryBuilder: org.hibernate.envers.tools.query.Parameters getRootParameters()>()
maxEeRevQbParameters <org.hibernate.envers.entities.mapper.relation.component.MiddleComponentMapper: void addMiddleEqualToQuery(org.hibernate.envers.tools.query.Parameters,java.lang.String,java.lang.String)> maxEeRevQbParameters = virtualinvoke maxEeRevQb.<org.hibernate.envers.tools.query.QueryBuilder: org.hibernate.envers.tools.query.Parameters getRootParameters()>()
l21 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l21 = null
l21 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l21 = interfaceinvoke l5.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>("SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=?")
$stack19 <org.h2.server.web.DbContents: void readContents(java.sql.DatabaseMetaData)> $stack19 = virtualinvoke $stack18.<org.h2.server.web.WebSession: java.sql.DatabaseMetaData getMetaData()>()
l9#10 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l9#10 = null
l9#10 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l9#10 = interfaceinvoke l3.<java.sql.Connection: java.sql.Statement createStatement()>()
l1 <org.h2.server.web.WebServer: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.h2.api.DatabaseEventListener)> l1 = virtualinvoke $stack7.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("driver", "")
l6 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Connection)> l6 = virtualinvoke $stack19.<org.h2.server.web.WebServer: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.h2.api.DatabaseEventListener)>(l1, l2, l3, l4, l0)
l1 <org.h2.server.web.WebServer: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.h2.api.DatabaseEventListener)> l1 = virtualinvoke $stack8.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("driver", "")
l7 <org.h2.server.web.WebSession: void setConnection(java.sql.Connection)> l7 = virtualinvoke $stack23.<org.h2.server.web.WebServer: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.h2.api.DatabaseEventListener)>(l1, l2, l3, l4, l0)
l2 <org.h2.server.web.WebThread: java.lang.String getResult(java.sql.Connection,int,java.lang.String,boolean,boolean)> l2 = virtualinvoke $stack12.<org.h2.server.web.WebSession: java.sql.Connection getConnection()>()
l5 <java.sql.Connection: void setTransactionIsolation(int)> l5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(l4#4)
l2 <java.sql.ResultSet: boolean absolute(int)> l2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack11)
l8 <org.h2.server.web.WebThread: void unescapeData(java.lang.String,java.sql.ResultSet,int)> l8 = virtualinvoke $stack37.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($stack43)
l7#16 <org.h2.server.web.WebThread: java.lang.String getResult(java.sql.Connection,int,java.lang.String,boolean,boolean)> l7#16 = virtualinvoke $stack23.<org.h2.server.web.WebSession: java.sql.Connection getConnection()>()
$stack890 <java.sql.DatabaseMetaData: java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> $stack890 = l4[1]
$stack882 <java.sql.DatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> $stack882 = l4[1]
$stack865 <java.sql.DatabaseMetaData: java.sql.ResultSet getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)> $stack865 = l4[1]
$stack852 <java.sql.DatabaseMetaData: java.sql.ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)> $stack852 = l4[1]
$stack847 <java.sql.DatabaseMetaData: java.sql.ResultSet getProcedures(java.lang.String,java.lang.String,java.lang.String)> $stack847 = l4[1]
$stack842 <java.sql.DatabaseMetaData: java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> $stack842 = l4[1]
$stack127 <java.sql.DatabaseMetaData: java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> $stack127 = l4[1]
$stack121 <java.sql.DatabaseMetaData: java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)> $stack121 = l4[1]
$stack105 <java.sql.DatabaseMetaData: java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)> $stack105 = l4[1]
$stack93 <java.sql.DatabaseMetaData: java.sql.ResultSet getVersionColumns(java.lang.String,java.lang.String,java.lang.String)> $stack93 = l4[1]
$stack88 <java.sql.DatabaseMetaData: java.sql.ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String)> $stack88 = l4[1]
$stack83 <java.sql.DatabaseMetaData: java.sql.ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String)> $stack83 = l4[1]
$stack78 <java.sql.DatabaseMetaData: java.sql.ResultSet getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> $stack78 = l4[1]
$stack58 <java.sql.DatabaseMetaData: java.sql.ResultSet getUDTs(java.lang.String,java.lang.String,java.lang.String,int[])> $stack58 = l4[1]
$stack47 <java.sql.DatabaseMetaData: java.sql.ResultSet getSuperTypes(java.lang.String,java.lang.String,java.lang.String)> $stack47 = l4[1]
$stack42 <java.sql.DatabaseMetaData: java.sql.ResultSet getSuperTables(java.lang.String,java.lang.String,java.lang.String)> $stack42 = l4[1]
$stack37 <java.sql.DatabaseMetaData: java.sql.ResultSet getAttributes(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> $stack37 = l4[1]
l3#2 <org.h2.server.web.WebThread: java.lang.String getResultSet(java.lang.String,java.sql.ResultSet,boolean,boolean,boolean,long,boolean)> l3#2 = virtualinvoke l3.<java.lang.String: java.lang.String trim()>()
l3#2 <org.h2.server.web.WebThread: java.lang.String getResultSet(java.lang.String,java.sql.ResultSet,boolean,boolean,boolean,long,boolean)> l3#2 = virtualinvoke $stack131.<java.lang.String: java.lang.String trim()>()
$stack134 <org.h2.server.web.WebThread: java.lang.String getParameterResultSet(java.sql.ParameterMetaData)> $stack134 = interfaceinvoke l17#88.<java.sql.PreparedStatement: java.sql.ParameterMetaData getParameterMetaData()>()
l3#2 <org.h2.server.web.WebThread: java.lang.String getResultSet(java.lang.String,java.sql.ResultSet,boolean,boolean,boolean,long,boolean)> l3#2 = virtualinvoke $stack127.<java.lang.String: java.lang.String trim()>()
l3#2 <org.h2.server.web.WebThread: java.lang.String getResultSet(java.lang.String,java.sql.ResultSet,boolean,boolean,boolean,long,boolean)> l3#2 = virtualinvoke $stack123.<java.lang.String: java.lang.String trim()>()
l3#2 <org.h2.server.web.WebThread: java.lang.String getResultSet(java.lang.String,java.sql.ResultSet,boolean,boolean,boolean,long,boolean)> l3#2 = virtualinvoke $stack119.<java.lang.String: java.lang.String trim()>()
l3#2 <org.h2.server.web.WebThread: java.lang.String getResultSet(java.lang.String,java.sql.ResultSet,boolean,boolean,boolean,long,boolean)> l3#2 = virtualinvoke $stack108.<java.lang.String: java.lang.String trim()>()
l17#91 <java.sql.Statement: void setMaxRows(int)> l17#91 = virtualinvoke l3#2.<java.lang.String: int indexOf(int)>(32)
l3#2 <org.h2.server.web.WebThread: java.lang.String getResultSet(java.lang.String,java.sql.ResultSet,boolean,boolean,boolean,long,boolean)> l3#2 = virtualinvoke $stack113.<java.lang.String: java.lang.String trim()>()
l3#2 <org.h2.server.web.WebThread: java.lang.String getResultSet(java.lang.String,java.sql.ResultSet,boolean,boolean,boolean,long,boolean)> l3#2 = virtualinvoke $stack101.<java.lang.String: java.lang.String trim()>()
l17#91 <java.sql.Statement: void setMaxRows(int)> l17#91 = specialinvoke l0.<org.h2.server.web.WebThread: int getMaxrows()>()
l3 <java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)> l3 = virtualinvoke $stack128.<java.lang.StringBuilder: java.lang.String toString()>()
l3 <java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)> l3 = virtualinvoke $stack77.<java.lang.String: java.lang.String trim()>()
l13 <java.sql.Statement: boolean execute(java.lang.String)> l13 = l3
l13 <java.sql.Statement: boolean execute(java.lang.String)> l13 = virtualinvoke $stack109.<java.lang.StringBuilder: java.lang.String toString()>()
l13 <java.sql.Statement: boolean execute(java.lang.String)> l13 = virtualinvoke $stack99.<java.lang.StringBuilder: java.lang.String toString()>()
$stack73 <java.sql.PreparedStatement: void setInt(int,int)> $stack73 = l13#15 + 1
$stack70 <java.sql.PreparedStatement: void setInt(int,int)> $stack70 = l13#15 + 1
$stack12 <java.sql.ParameterMetaData: java.lang.String getParameterClassName(int)> $stack12 = l3 + 1
$stack16 <java.sql.ParameterMetaData: int getParameterMode(int)> $stack16 = l3 + 1
$stack20 <java.sql.ParameterMetaData: int getParameterType(int)> $stack20 = l3 + 1
$stack24 <java.sql.ParameterMetaData: java.lang.String getParameterTypeName(int)> $stack24 = l3 + 1
$stack28 <java.sql.ParameterMetaData: int getPrecision(int)> $stack28 = l3 + 1
$stack32 <java.sql.ParameterMetaData: int getScale(int)> $stack32 = l3 + 1
l14 <java.sql.ResultSetMetaData: boolean isWritable(int)> l14 = 1
l14 <java.sql.ResultSetMetaData: boolean isWritable(int)> l14 = l14 + 1
l14 <java.sql.ResultSetMetaData: boolean isWritable(int)> l14 = 0
$stack115 <java.sql.ResultSetMetaData: java.lang.String getColumnLabel(int)> $stack115 = l14 + 1
l14 <java.sql.ResultSetMetaData: boolean isWritable(int)> l14 = l14 + 1
l14 <java.sql.ResultSetMetaData: boolean isWritable(int)> l14 = 0
$stack99 <java.sql.ResultSetMetaData: java.lang.String getColumnLabel(int)> $stack99 = l14 + 1
l14 <java.sql.ResultSetMetaData: boolean isWritable(int)> l14 = l14 + 1
l14 <java.sql.ResultSetMetaData: boolean isWritable(int)> l14 = 0
l14 <java.sql.ResultSetMetaData: boolean isWritable(int)> l14 = l14 + 1
$stack6 <net.sf.hibernate.hql.QueryTranslator: void addType(java.lang.String,java.lang.Class)> $stack6 = this.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String currentName>
$stack9 <net.sf.hibernate.sql.QueryJoinFragment: void addJoin(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],int)> $stack9 = interfaceinvoke classPersister.<net.sf.hibernate.persister.Queryable: java.lang.String getTableName()>()
$stack6 <net.sf.hibernate.hql.QueryTranslator: java.lang.String getPathAlias(java.lang.String)> $stack6 = virtualinvoke $stack5.<java.lang.StringBuffer: java.lang.String toString()>()
$stack45 <net.sf.hibernate.hql.QueryTranslator: net.sf.hibernate.persister.PropertyMapping getPropertyMapping(java.lang.String)> $stack45 = this.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String currentName>
$stack49 <net.sf.hibernate.hql.QueryTranslator: net.sf.hibernate.sql.JoinFragment getPathJoin(java.lang.String)> $stack49 = virtualinvoke $stack48.<java.lang.StringBuffer: java.lang.String toString()>()
$stack52 <net.sf.hibernate.sql.QueryJoinFragment: void addCondition(java.lang.String)> $stack52 = virtualinvoke ojf.<net.sf.hibernate.sql.JoinFragment: java.lang.String toWhereFragmentString()>()
$stack36 <net.sf.hibernate.hql.QueryTranslator: net.sf.hibernate.persister.PropertyMapping getPropertyMapping(java.lang.String)> $stack36 = this.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String currentName>
entityClass <net.sf.hibernate.hql.QueryTranslator: net.sf.hibernate.persister.Queryable getPersister(java.lang.Class)> entityClass = virtualinvoke propertyType.<net.sf.hibernate.type.EntityType: java.lang.Class getAssociatedClass()>()
name <net.sf.hibernate.hql.QueryTranslator: void addType(java.lang.String,java.lang.Class)> name = virtualinvoke q.<net.sf.hibernate.hql.QueryTranslator: java.lang.String createNameFor(java.lang.Class)>(entityClass)
$stack36 <net.sf.hibernate.hql.QueryTranslator: void addPathAliasAndJoin(java.lang.String,java.lang.String,net.sf.hibernate.sql.JoinFragment)> $stack36 = virtualinvoke $stack32.<java.lang.StringBuffer: java.lang.String substring(int,int)>(0, $stack35)
name <net.sf.hibernate.collection.QueryableCollection: java.lang.String getSQLWhereString(java.lang.String)> name = virtualinvoke q.<net.sf.hibernate.hql.QueryTranslator: java.lang.String createNameForCollection(java.lang.String)>(role)
$stack16 <net.sf.hibernate.sql.QueryJoinFragment: void addCondition(java.lang.String)> $stack16 = interfaceinvoke collPersister.<net.sf.hibernate.collection.QueryableCollection: java.lang.String getSQLWhereString(java.lang.String)>(name)
$stack2 <net.sf.hibernate.hql.QueryTranslator: net.sf.hibernate.sql.QueryJoinFragment createJoinFragment(boolean)> $stack2 = this.<net.sf.hibernate.hql.PathExpressionParser: boolean useThetaStyleJoin>
$stack13 <net.sf.hibernate.hql.QueryTranslator: java.lang.String createNameForCollection(java.lang.String)> $stack13 = this.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String collectionRole>
$stack8 <net.sf.hibernate.hql.QueryTranslator: net.sf.hibernate.collection.QueryableCollection getCollectionPersister(java.lang.String)> $stack8 = this.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String collectionRole>
$stack14 <net.sf.hibernate.hql.QueryTranslator: net.sf.hibernate.sql.QueryJoinFragment createJoinFragment(boolean)> $stack14 = this.<net.sf.hibernate.hql.PathExpressionParser: boolean useThetaStyleJoin>
$stack16 <net.sf.hibernate.sql.JoinFragment: void addCrossJoin(java.lang.String,java.lang.String)> $stack16 = interfaceinvoke collPersister.<net.sf.hibernate.collection.QueryableCollection: java.lang.String getTableName()>()
$stack19 <net.sf.hibernate.sql.JoinFragment: void addFromFragmentString(java.lang.String)> $stack19 = virtualinvoke $stack18.<net.sf.hibernate.sql.QueryJoinFragment: java.lang.String toFromFragmentString()>()
$stack65 <net.sf.hibernate.sql.JoinFragment: void addJoins(java.lang.String,java.lang.String)> $stack65 = interfaceinvoke persister.<net.sf.hibernate.persister.Queryable: java.lang.String fromJoinFragment(java.lang.String,boolean,boolean)>($stack64, 1, 0)
$stack22 <net.sf.hibernate.sql.QueryJoinFragment: void addCondition(java.lang.String,java.lang.String[],java.lang.String)> $stack22 = this.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String collectionName>
$stack34 <net.sf.hibernate.hql.QueryTranslator: void addCollection(java.lang.String,java.lang.String)> $stack34 = this.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String collectionName>
$stack35 <net.sf.hibernate.hql.QueryTranslator: void addJoin(java.lang.String,net.sf.hibernate.sql.JoinFragment)> $stack35 = this.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String collectionName>
$stack2 <net.sf.hibernate.hql.QueryTranslator: void addJoin(java.lang.String,net.sf.hibernate.sql.JoinFragment)> $stack2 = virtualinvoke this.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String getName()>()
$stack4 <net.sf.hibernate.hql.QueryTranslator: void addFrom(java.lang.String,net.sf.hibernate.sql.JoinFragment)> $stack4 = this.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String currentName>
$stack15 <net.sf.hibernate.hql.QueryTranslator: net.sf.hibernate.collection.QueryableCollection getCollectionPersister(java.lang.String)> $stack15 = this.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String collectionRole>
clazz <net.sf.hibernate.hql.QueryTranslator: java.lang.String createNameFor(java.lang.Class)> clazz = interfaceinvoke entityPersister.<net.sf.hibernate.persister.Queryable: java.lang.Class getMappedClass()>()
elementName <net.sf.hibernate.hql.QueryTranslator: void addFrom(java.lang.String,java.lang.Class,net.sf.hibernate.sql.JoinFragment)> elementName = this.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String collectionName>
$stack22 <net.sf.hibernate.hql.QueryTranslator: void addCollection(java.lang.String,java.lang.String)> $stack22 = this.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String collectionName>
elementName <net.sf.hibernate.hql.QueryTranslator: void addFrom(java.lang.String,java.lang.Class,net.sf.hibernate.sql.JoinFragment)> elementName = virtualinvoke q.<net.sf.hibernate.hql.QueryTranslator: java.lang.String createNameFor(java.lang.Class)>(clazz)
$stack26 <net.sf.hibernate.sql.QueryJoinFragment: void addJoin(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],int)> $stack26 = interfaceinvoke entityPersister.<net.sf.hibernate.persister.Queryable: java.lang.String getTableName()>()
$stack13 <net.sf.hibernate.hql.QueryTranslator: void addFromCollection(java.lang.String,java.lang.String,net.sf.hibernate.sql.JoinFragment)> $stack13 = this.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String collectionName>
$stack5 <net.sf.hibernate.hql.QueryTranslator: void setCollectionToFetch(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> $stack5 = virtualinvoke this.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String getCollectionRole()>()
$stack76 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack76 = l0.<org.h2.constraint.ConstraintReferential: java.lang.String comment>
$stack1 <org.h2.constraint.ConstraintReferential: java.lang.String getCreateSQLForCopy(org.h2.table.Table,org.h2.table.Table,java.lang.String,boolean)> $stack1 = l0.<org.h2.constraint.ConstraintReferential: org.h2.table.Table table>
$stack1 <org.h2.constraint.ConstraintReferential: java.lang.String getCreateSQLForCopy(org.h2.table.Table,java.lang.String)> $stack1 = l0.<org.h2.constraint.ConstraintReferential: org.h2.table.Table table>
l11 <org.h2.engine.Database: boolean areEqual(org.h2.value.Value,org.h2.value.Value)> l11 = virtualinvoke l3.<org.h2.result.Row: org.h2.value.Value getValue(int)>(l10#18)
$stack9 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack9 = virtualinvoke vc.<org.hypergraphdb.query.TypedValueCondition: org.hypergraphdb.util.Ref getTypeReference()>()
sQuery <org.vivoweb.harvester.util.repo.JenaConnect: com.hp.hpl.jena.query.ResultSet executeSelectQuery(java.lang.String)> sQuery = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.String toString()>()
$stack46 <com.hp.hpl.jena.query.QuerySolution: com.hp.hpl.jena.rdf.model.Literal getLiteral(java.lang.String)> $stack46 = (java.lang.String) $stack45
query <org.vivoweb.harvester.util.repo.JenaConnect: com.hp.hpl.jena.query.ResultSet executeSelectQuery(java.lang.String)> query = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.String toString()>()
$stack21 <net.sf.hibernate.sql.Select: net.sf.hibernate.sql.Select setSelectClause(java.lang.String)> $stack21 = virtualinvoke $stack20.<java.lang.StringBuffer: java.lang.String toString()>()
$stack23 <net.sf.hibernate.sql.Select: net.sf.hibernate.sql.Select setFromClause(java.lang.String,java.lang.String)> $stack23 = interfaceinvoke persister.<net.sf.hibernate.collection.QueryableCollection: java.lang.String getTableName()>()
$stack25 <net.sf.hibernate.sql.Select: net.sf.hibernate.sql.Select setWhereClause(java.lang.String)> $stack25 = virtualinvoke whereString.<java.lang.StringBuffer: java.lang.String toString()>()
$stack27 <net.sf.hibernate.sql.Select: net.sf.hibernate.sql.Select setOuterJoins(java.lang.String,java.lang.String)> $stack27 = virtualinvoke ojf.<net.sf.hibernate.sql.JoinFragment: java.lang.String toFromFragmentString()>()
$stack32 <net.sf.hibernate.sql.Select: net.sf.hibernate.sql.Select setOrderByClause(java.lang.String)> $stack32 = interfaceinvoke persister.<net.sf.hibernate.collection.QueryableCollection: java.lang.String getSQLOrderByString(java.lang.String)>(alias)
lctoken <net.sf.hibernate.hql.SelectParser: boolean aggregateFuncNoArgsHasParenthesis(java.lang.String,net.sf.hibernate.hql.QueryTranslator)> lctoken = virtualinvoke token.<java.lang.String: java.lang.String toLowerCase()>()
$stack131 <net.sf.hibernate.hql.QueryTranslator: void setHolderClass(java.lang.Class)> $stack131 = this.<net.sf.hibernate.hql.SelectParser: java.lang.Class holderClass>
$stack99 <net.sf.hibernate.hql.QueryTranslator: void addSelectScalar(net.sf.hibernate.type.Type)> $stack99 = <net.sf.hibernate.Hibernate: net.sf.hibernate.type.NullableType INTEGER>
$stack78 <net.sf.hibernate.hql.SelectParser: net.sf.hibernate.type.Type aggregateType(java.util.List,net.sf.hibernate.type.Type,net.sf.hibernate.hql.QueryTranslator)> $stack78 = this.<net.sf.hibernate.hql.SelectParser: java.util.LinkedList aggregateFuncTokenList>
$stack79 <net.sf.hibernate.hql.QueryTranslator: void addSelectScalar(net.sf.hibernate.type.Type)> $stack79 = virtualinvoke this.<net.sf.hibernate.hql.SelectParser: net.sf.hibernate.type.Type aggregateType(java.util.List,net.sf.hibernate.type.Type,net.sf.hibernate.hql.QueryTranslator)>($stack78, null, q)
$stack49 <net.sf.hibernate.hql.ParserHelper: void parse(net.sf.hibernate.hql.Parser,java.lang.String,java.lang.String,net.sf.hibernate.hql.QueryTranslator)> $stack49 = this.<net.sf.hibernate.hql.SelectParser: net.sf.hibernate.hql.PathExpressionParser aggregatePathExpressionParser>
$stack64 <net.sf.hibernate.hql.QueryTranslator: void addCollection(java.lang.String,java.lang.String)> $stack64 = virtualinvoke $stack63.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String getCollectionName()>()
$stack54 <net.sf.hibernate.hql.QueryTranslator: void appendScalarSelectToken(java.lang.String)> $stack54 = virtualinvoke $stack53.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String getWhereColumn()>()
$stack58 <net.sf.hibernate.hql.SelectParser: net.sf.hibernate.type.Type aggregateType(java.util.List,net.sf.hibernate.type.Type,net.sf.hibernate.hql.QueryTranslator)> $stack58 = this.<net.sf.hibernate.hql.SelectParser: java.util.LinkedList aggregateFuncTokenList>
$stack60 <net.sf.hibernate.hql.QueryTranslator: void addSelectScalar(net.sf.hibernate.type.Type)> $stack60 = virtualinvoke this.<net.sf.hibernate.hql.SelectParser: net.sf.hibernate.type.Type aggregateType(java.util.List,net.sf.hibernate.type.Type,net.sf.hibernate.hql.QueryTranslator)>($stack58, $stack59, q)
$stack21 <net.sf.hibernate.hql.ParserHelper: void parse(net.sf.hibernate.hql.Parser,java.lang.String,java.lang.String,net.sf.hibernate.hql.QueryTranslator)> $stack21 = this.<net.sf.hibernate.hql.SelectParser: net.sf.hibernate.hql.SelectPathExpressionParser pathExpressionParser>
$stack44 <net.sf.hibernate.hql.QueryTranslator: void addCollection(java.lang.String,java.lang.String)> $stack44 = virtualinvoke $stack43.<net.sf.hibernate.hql.SelectPathExpressionParser: java.lang.String getCollectionName()>()
$stack34 <net.sf.hibernate.hql.QueryTranslator: void addSelectClass(java.lang.String)> $stack34 = virtualinvoke $stack33.<net.sf.hibernate.hql.SelectPathExpressionParser: java.lang.String getSelectName()>()
$stack29 <net.sf.hibernate.hql.QueryTranslator: void appendScalarSelectTokens(java.lang.String[])> $stack29 = virtualinvoke $stack28.<net.sf.hibernate.hql.SelectPathExpressionParser: java.lang.String[] getWhereColumns()>()
$stack31 <net.sf.hibernate.hql.QueryTranslator: void addSelectScalar(net.sf.hibernate.type.Type)> $stack31 = virtualinvoke $stack30.<net.sf.hibernate.hql.SelectPathExpressionParser: net.sf.hibernate.type.Type getWhereColumnType()>()
argType <net.sf.hibernate.dialect.SQLFunction: net.sf.hibernate.type.Type getReturnType(net.sf.hibernate.type.Type,net.sf.hibernate.engine.Mapping)> argType = retType
funcToken <net.sf.hibernate.hql.SelectParser: net.sf.hibernate.dialect.SQLFunction getFunction(java.lang.String,net.sf.hibernate.hql.QueryTranslator)> funcToken = (java.lang.String) $stack9
$stack8 <java.sql.Connection: void setTransactionIsolation(int)> $stack8 = virtualinvoke $stack7.<java.lang.Integer: int intValue()>()
$stack12 <org.h2.engine.Database: org.h2.engine.Role findRole(java.lang.String)> $stack12 = l0.<org.h2.command.ddl.CreateUser: java.lang.String userName>
$stack14 <org.h2.engine.Database: org.h2.engine.User findUser(java.lang.String)> $stack14 = l0.<org.h2.command.ddl.CreateUser: java.lang.String userName>
$stack29 <org.h2.engine.Database: void addDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack29 = l0.<org.h2.command.ddl.CreateUser: org.h2.engine.Session session>
$stack8 <java.sql.ResultSet: java.io.Reader getCharacterStream(java.lang.String)> $stack8 = names[0]
$stack1 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)
$stack2 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(arity)
$stack2 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(arity)
type <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.AtomTypeCondition type(org.hypergraphdb.HGHandle)> type = virtualinvoke $stack9.<org.hypergraphdb.HGTypeSystem: org.hypergraphdb.HGHandle getTypeHandle(java.lang.Class)>($stack10)
$stack32 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.OrderedLinkCondition orderedLink(org.hypergraphdb.HGHandle[])> $stack32 = staticinvoke <org.hypergraphdb.util.HGUtils: org.hypergraphdb.HGHandle[] toHandleArray(org.hypergraphdb.HGLink)>($stack31)
$stack4 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0)
$stack3 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.PositionedIncidentCondition incidentAt(org.hypergraphdb.util.Ref,org.hypergraphdb.util.Ref,org.hypergraphdb.util.Ref)> $stack3 = staticinvoke <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)>(target)
$stack4 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(lowerBound)
$stack6 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(upperBound)
$stack2 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(position)
$stack4 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(position)
$stack2 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.PositionedIncidentCondition incidentAt(org.hypergraphdb.util.Ref,org.hypergraphdb.util.Ref,org.hypergraphdb.util.Ref)> $stack2 = staticinvoke <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)>(target)
$stack3 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(position)
$stack5 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(position)
$stack4 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1)
$stack3 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.PositionedIncidentCondition incidentNotAt(org.hypergraphdb.util.Ref,org.hypergraphdb.util.Ref,org.hypergraphdb.util.Ref)> $stack3 = staticinvoke <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)>(target)
$stack4 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(lowerBound)
$stack6 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(upperBound)
$stack2 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.PositionedIncidentCondition incidentNotAt(org.hypergraphdb.util.Ref,org.hypergraphdb.util.Ref,org.hypergraphdb.util.Ref)> $stack2 = staticinvoke <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)>(target)
$stack3 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(position)
$stack5 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(position)
$stack2 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(position)
$stack4 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(position)
$stack2 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.HGQueryCondition apply(org.hypergraphdb.util.Mapping,org.hypergraphdb.query.HGQueryCondition)> $stack2 = staticinvoke <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Mapping deref(org.hypergraphdb.HyperGraph)>(graph)
$stack12 <org.h2.engine.Database: void removeSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack12 = l0.<org.h2.command.ddl.DropSequence: org.h2.engine.Session session>
sQuery <org.vivoweb.harvester.util.repo.JenaConnect: com.hp.hpl.jena.query.ResultSet executeSelectQuery(java.lang.String)> sQuery = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>()
uriFilters <org.vivoweb.harvester.score.Match: void buildTypesAndLiteralsQuery(java.util.Set)> uriFilters = $stack10
query <org.vivoweb.harvester.util.repo.JenaConnect: void executeUpdateQuery(java.lang.String)> query = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>()
$stack20 <java.sql.Statement: boolean execute(java.lang.String)> $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.String toString()>()
$stack28 <java.sql.Statement: boolean execute(java.lang.String)> $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.String toString()>()
$stack36 <java.sql.Statement: boolean execute(java.lang.String)> $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>()
$stack44 <java.sql.Statement: boolean execute(java.lang.String)> $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.String toString()>()
$stack52 <java.sql.Statement: boolean execute(java.lang.String)> $stack52 = virtualinvoke $stack51.<java.lang.StringBuilder: java.lang.String toString()>()
$stack60 <java.sql.Statement: boolean execute(java.lang.String)> $stack60 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.String toString()>()
$stack25 <java.sql.Statement: boolean execute(java.lang.String)> $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>()
$stack22 <java.sql.Statement: boolean execute(java.lang.String)> $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.String toString()>()
$stack37 <java.sql.Statement: boolean execute(java.lang.String)> $stack37 = virtualinvoke l6.<java.lang.StringBuilder: java.lang.String toString()>()
l4 <java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)> l4 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>()
$stack24 <java.sql.ResultSet: java.lang.Object getObject(int)> $stack24 = l8 + 1
l0#2 <org.h2.value.ValueTime: org.h2.value.ValueTime getNoCopy(java.sql.Time)> l0#2 = staticinvoke <org.h2.util.DateTimeUtils: java.sql.Time cloneAndNormalizeTime(java.sql.Time)>(l0)
$stack32 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack32 = l0.<org.h2.table.TableView: java.lang.String comment>
l1 <org.h2.server.TcpServer: java.lang.String checkKeyAndGetDatabaseName(java.lang.String)> l1 = virtualinvoke $stack17.<org.h2.value.Transfer: java.lang.String readString()>()
l3 <org.h2.server.TcpServer: java.lang.String checkKeyAndGetDatabaseName(java.lang.String)> l3 = virtualinvoke $stack82.<org.h2.value.Transfer: java.lang.String readString()>()
l1 <org.h2.server.TcpServer: java.lang.String checkKeyAndGetDatabaseName(java.lang.String)> l1 = virtualinvoke $stack86.<org.h2.server.TcpServer: java.lang.String checkKeyAndGetDatabaseName(java.lang.String)>(l3)
l3 <org.h2.server.TcpServer: java.lang.String checkKeyAndGetDatabaseName(java.lang.String)> l3 = virtualinvoke $stack21.<org.h2.server.TcpServer: java.lang.String getBaseDir()>()
l3 <org.h2.server.TcpServer: java.lang.String checkKeyAndGetDatabaseName(java.lang.String)> l3 = staticinvoke <org.h2.constant.SysProperties: java.lang.String getBaseDir()>()
l1 <org.h2.server.TcpServer: java.lang.String checkKeyAndGetDatabaseName(java.lang.String)> l1 = virtualinvoke $stack23.<org.h2.server.TcpServer: java.lang.String checkKeyAndGetDatabaseName(java.lang.String)>(l1)
l4 <org.h2.command.Command: org.h2.result.LocalResult executeQueryLocal(int)> l4 = virtualinvoke $stack145.<org.h2.engine.Session: int getModificationId()>()
l4 <org.h2.command.Command: org.h2.result.LocalResult executeQueryLocal(int)> l4 = virtualinvoke $stack113.<org.h2.value.Transfer: int readInt()>()
l4 <org.h2.command.Command: org.h2.result.LocalResult executeQueryLocal(int)> l4 = virtualinvoke $stack91.<org.h2.engine.Session: int getModificationId()>()
$stack4 <java.sql.Timestamp: void setTime(long)> $stack4 = virtualinvoke value.<java.sql.Timestamp: long getTime()>()
$stack4 <org.apache.hadoop.hive.serde2.io.TimestampWritable: void setTimestamp(java.sql.Timestamp,byte[],int)> $stack4 = (java.sql.Timestamp) o
$stack5 <java.sql.Timestamp: void setTime(long)> $stack5 = virtualinvoke $stack4.<java.sql.Timestamp: long getTime()>()
$stack7 <java.sql.Timestamp: void setNanos(int)> $stack7 = virtualinvoke $stack6.<java.sql.Timestamp: int getNanos()>()
l8 <org.h2.engine.Database: void notifyFileSize(long)> l8 = virtualinvoke $stack20.<org.h2.store.FileStore: long length()>()
$stack3 <org.h2.engine.Database: org.h2.store.FileStore openFile(java.lang.String,java.lang.String,boolean)> $stack3 = l0.<org.h2.store.DiskFile: java.lang.String fileName>
l4 <org.h2.engine.Database: org.h2.store.Storage getStorage(int,org.h2.store.DiskFile)> l4 = virtualinvoke $stack21.<org.h2.util.IntArray: int get(int)>(l3)
l4 <org.h2.engine.Database: org.h2.store.Storage getStorage(int,org.h2.store.DiskFile)> l4 = virtualinvoke $stack16.<java.lang.Integer: int intValue()>()
l4 <org.h2.engine.Database: org.h2.store.Storage getStorage(int,org.h2.store.DiskFile)> l4 = virtualinvoke l1.<org.h2.util.IntArray: int get(int)>(l3)
l7 <org.h2.engine.Database: org.h2.store.Storage getStorage(int,org.h2.store.DiskFile)> l7 = 0
l7 <org.h2.engine.Database: org.h2.store.Storage getStorage(int,org.h2.store.DiskFile)> l7 = l7 | $stack51
l7 <org.h2.engine.Database: org.h2.store.Storage getStorage(int,org.h2.store.DiskFile)> l7 = virtualinvoke $stack30.<org.h2.util.IntArray: int get(int)>(l6)
$stack23 <org.h2.engine.Database: void removeStorage(int,org.h2.store.DiskFile)> $stack23 = virtualinvoke l4.<org.h2.store.Storage: int getId()>()
l9 <org.h2.engine.Database: org.h2.store.Storage getStorage(int,org.h2.store.DiskFile)> l9 = virtualinvoke l4#10.<java.io.DataInputStream: int readInt()>()
l9 <org.h2.engine.Database: org.h2.store.Storage getStorage(int,org.h2.store.DiskFile)> l9 = virtualinvoke l4#10.<java.io.DataInputStream: int readInt()>()
l12 <org.h2.engine.Database: org.h2.store.Storage getStorage(int,org.h2.store.DiskFile)> l12 = virtualinvoke l5.<org.h2.store.DataPage: int readInt()>()
l10 <org.h2.engine.Database: void notifyFileSize(long)> l10 = $stack28 * 128L
l10 <org.h2.engine.Database: void notifyFileSize(long)> l10 = $stack29 + 48L
l3 <org.h2.engine.Database: org.h2.store.Storage getStorage(int,org.h2.store.DiskFile)> l3 = virtualinvoke $stack6.<org.h2.util.IntArray: int get(int)>(l1)
$stack20 <org.vivoweb.harvester.util.DatabaseClone: java.util.Map getDbUnitFeatures(java.util.Map,java.lang.String[])> $stack20 = virtualinvoke argList.<org.vivoweb.harvester.util.args.ArgList: java.util.Map getValueMap(java.lang.String)>("DBUnitFeature")
feature#5 <org.vivoweb.harvester.util.DatabaseClone: java.util.Map getDbTypes(java.sql.Connection,java.lang.String)> feature#5 = interfaceinvoke $stack29.<org.dbunit.database.IDatabaseConnection: java.sql.Connection getConnection()>()
db2conn <org.vivoweb.harvester.util.DatabaseClone: java.util.Map getDbTypes(java.sql.Connection,java.lang.String)> db2conn = interfaceinvoke $stack31.<org.dbunit.database.IDatabaseConnection: java.sql.Connection getConnection()>()
$stack36 <java.sql.DatabaseMetaData: java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> $stack36 = interfaceinvoke db2conn.<java.sql.Connection: java.lang.String getCatalog()>()
sql <java.sql.Statement: int executeUpdate(java.lang.String)> sql = virtualinvoke $stack159.<java.lang.StringBuilder: java.lang.String toString()>()
$stack68 <java.sql.Statement: int executeUpdate(java.lang.String)> $stack68 = virtualinvoke createTableSB.<java.lang.StringBuilder: java.lang.String toString()>()
$stack41 <org.dbunit.operation.DatabaseOperation: void execute(org.dbunit.database.IDatabaseConnection,org.dbunit.dataset.IDataSet)> $stack41 = this.<org.vivoweb.harvester.util.DatabaseClone: org.dbunit.database.IDatabaseConnection db2>
feature <org.dbunit.database.DatabaseConfig: void setProperty(java.lang.String,java.lang.Object)> feature = (java.lang.String) $stack96
table <org.dbunit.database.QueryDataSet: void addTable(java.lang.String,java.lang.String)> table = feature#49[temp#51]
x <java.sql.ResultSetMetaData: java.lang.String getColumnName(int)> x = 1
x <java.sql.ResultSetMetaData: java.lang.String getColumnName(int)> x = x + 1
$stack18 <net.sf.hibernate.sql.ForUpdateFragment: net.sf.hibernate.sql.ForUpdateFragment addTableAlias(java.lang.String)> $stack18 = (java.lang.String) $stack17
$stack8 <org.h2.engine.Database: org.h2.engine.UserAggregate findAggregate(java.lang.String)> $stack8 = l0.<org.h2.command.ddl.DropAggregate: java.lang.String name>
$stack10 <org.h2.engine.Database: void removeDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack10 = l0.<org.h2.command.ddl.DropAggregate: org.h2.engine.Session session>
$stack23 <java.sql.ResultSetMetaData: java.lang.String getColumnLabel(int)> $stack23 = l6 + 1
$stack25 <java.sql.ResultSetMetaData: int getColumnType(int)> $stack25 = l6 + 1
$stack27 <java.sql.ResultSetMetaData: int getPrecision(int)> $stack27 = l6 + 1
$stack29 <java.sql.ResultSetMetaData: int getScale(int)> $stack29 = l6 + 1
$stack19 <java.sql.ResultSet: java.lang.Object getObject(int)> $stack19 = l8 + 1
$stack22 <java.sql.ResultSetMetaData: int getColumnType(int)> $stack22 = l5 + 1
$stack23 <org.h2.value.DataType: int convertSQLTypeToValueType(int)> $stack23 = interfaceinvoke l2.<java.sql.ResultSetMetaData: int getColumnType(int)>($stack22)
$stack10 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack10 = virtualinvoke l7.<org.h2.engine.Session: org.h2.engine.Database getDatabase()>()
$stack18 <org.h2.expression.Comparison: boolean compareNotNull(org.h2.engine.Database,org.h2.value.Value,org.h2.value.Value,int)> $stack18 = l0.<org.h2.expression.Comparison: org.h2.engine.Database database>
$stack103 <org.hibernate.mapping.Column: void setSqlType(java.lang.String)> $stack103 = virtualinvoke column.<org.hibernate.mapping.Column: java.lang.String getSqlType()>()
$stack25 <org.hibernate.mapping.Column: void setSqlType(java.lang.String)> $stack25 = virtualinvoke column.<org.hibernate.mapping.Column: java.lang.String getSqlType()>()
$stack40 <net.sf.hibernate.sql.Template: java.lang.String renderWhereStringTemplate(java.lang.String,net.sf.hibernate.dialect.Dialect)> $stack40 = this.<net.sf.hibernate.persister.AbstractEntityPersister: java.lang.String sqlWhereString>
$stack11 <net.sf.hibernate.sql.Alias: java.lang.String toUnquotedAliasString(java.lang.String)> $stack11 = rawAliases[i]
$stack3 <net.sf.hibernate.sql.Alias: java.lang.String[] toAliasStrings(java.lang.String[])> $stack3 = virtualinvoke this.<net.sf.hibernate.persister.AbstractEntityPersister: java.lang.String[] getIdentifierAliases()>()
$stack4 <net.sf.hibernate.sql.Alias: java.lang.String[] toUnquotedAliasStrings(java.lang.String[])> $stack4 = virtualinvoke this.<net.sf.hibernate.persister.AbstractEntityPersister: java.lang.String[] getPropertyColumnNames(int)>(i)
$stack4 <net.sf.hibernate.sql.Alias: java.lang.String toAliasString(java.lang.String)> $stack4 = virtualinvoke this.<net.sf.hibernate.persister.AbstractEntityPersister: java.lang.String getDiscriminatorAlias()>()
$stack11 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack11 = virtualinvoke this.<net.sf.hibernate.persister.AbstractEntityPersister: java.lang.String getVersionSelectString()>()
st <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> st = interfaceinvoke $stack10.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)>($stack11)
rs <net.sf.hibernate.type.Type: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String,net.sf.hibernate.engine.SessionImplementor,java.lang.Object)> rs = interfaceinvoke st.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>()
$stack14 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack14 = specialinvoke this.<net.sf.hibernate.persister.AbstractEntityPersister: java.lang.String getLockString(net.sf.hibernate.LockMode)>(lockMode)
st <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> st = interfaceinvoke $stack13.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)>($stack14)
$stack18 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareQueryStatement(java.lang.String,boolean)> $stack18 = virtualinvoke this.<net.sf.hibernate.persister.AbstractEntityPersister: java.lang.String getConcreteSelectString()>()
ps <net.sf.hibernate.engine.Batcher: void closeQueryStatement(java.sql.PreparedStatement,java.sql.ResultSet)> ps = interfaceinvoke $stack17.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareQueryStatement(java.lang.String,boolean)>($stack18, 0)
rs <net.sf.hibernate.type.Type: java.lang.Object hydrate(java.sql.ResultSet,java.lang.String[],net.sf.hibernate.engine.SessionImplementor,java.lang.Object)> rs = null
rs <net.sf.hibernate.type.Type: java.lang.Object hydrate(java.sql.ResultSet,java.lang.String[],net.sf.hibernate.engine.SessionImplementor,java.lang.Object)> rs = interfaceinvoke $stack22.<net.sf.hibernate.engine.Batcher: java.sql.ResultSet getResultSet(java.sql.PreparedStatement)>(ps)
$stack3 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect setTableName(java.lang.String)> $stack3 = virtualinvoke this.<net.sf.hibernate.persister.AbstractEntityPersister: java.lang.String getVersionedTableName()>()
$stack11 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addColumn(java.lang.String)> $stack11 = this.<net.sf.hibernate.persister.AbstractEntityPersister: java.lang.String versionColumnName>
$stack6 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addColumns(java.lang.String[])> $stack6 = this.<net.sf.hibernate.persister.AbstractEntityPersister: java.lang.String[] identifierColumnNames>
$stack8 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addCondition(java.lang.String[],java.lang.String)> $stack8 = this.<net.sf.hibernate.persister.AbstractEntityPersister: java.lang.String[] identifierColumnNames>
$stack3 <org.hibernate.Query: org.hibernate.Query setParameter(java.lang.String,java.lang.Object)> $stack3 = this.<org.hibernate.envers.entities.mapper.id.QueryParameterData: java.lang.String flatEntityPropertyName>
$stack47 <net.sf.hibernate.tool.hbm2ddl.DatabaseMetadata: net.sf.hibernate.tool.hbm2ddl.TableMetadata getTableMetadata(java.lang.String)> $stack47 = virtualinvoke table.<net.sf.hibernate.mapping.Table: java.lang.String getName()>()
$stack29 <net.sf.hibernate.tool.hbm2ddl.DatabaseMetadata: net.sf.hibernate.tool.hbm2ddl.TableMetadata getTableMetadata(java.lang.String)> $stack29 = virtualinvoke table.<net.sf.hibernate.mapping.Table: java.lang.String getName()>()
tableInfo#12 <net.sf.hibernate.tool.hbm2ddl.DatabaseMetadata: boolean isTable(java.lang.Object)> tableInfo#12 = interfaceinvoke table#11.<net.sf.hibernate.id.PersistentIdentifierGenerator: java.lang.Object generatorKey()>()
$stack30 <org.h2.engine.Database: void addSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack30 = l0.<org.h2.command.ddl.CreateLinkedTable: org.h2.engine.Session session>
$stack15 <org.h2.command.CommandInterface: org.h2.result.ResultInterface executeQuery(int,boolean)> $stack15 = l0.<org.h2.jdbc.JdbcPreparedStatement: int maxRows>
$stack22 <org.h2.command.CommandInterface: org.h2.result.ResultInterface executeQuery(int,boolean)> $stack22 = l0.<org.h2.jdbc.JdbcPreparedStatement: int maxRows>
$stack3 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack3 = l0.<org.h2.value.ValueStringIgnoreCase: java.lang.String value>
$stack6 <net.sf.hibernate.sql.Alias: java.lang.String toUnquotedAliasString(java.lang.String)> $stack6 = sqlIdentifiers[i]
$stack6 <net.sf.hibernate.sql.Alias: java.lang.String toAliasString(java.lang.String)> $stack6 = sqlIdentifiers[i]
$stack18 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack18 = l0.<org.h2.constraint.ConstraintCheck: java.lang.String comment>
$stack1 <org.h2.constraint.ConstraintCheck: java.lang.String getCreateSQLForCopy(org.h2.table.Table,java.lang.String)> $stack1 = l0.<org.h2.constraint.ConstraintCheck: org.h2.table.Table table>
$stack6 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery: java.util.Collection access$000(me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery)> $stack6 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery this$0>
$stack10 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery: java.lang.String access$100(me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery)> $stack10 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery this$0>
$stack12 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery: me.prettyprint.hector.api.Serializer access$300(me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery)> $stack12 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery this$0>
$stack14 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery: me.prettyprint.hector.api.Serializer access$200(me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery)> $stack14 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery this$0>
$stack22 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery: me.prettyprint.hector.api.Serializer access$400(me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery)> $stack22 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery this$0>
$stack24 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery: me.prettyprint.hector.api.Serializer access$500(me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery)> $stack24 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery this$0>
$stack26 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery: me.prettyprint.hector.api.Serializer access$600(me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery)> $stack26 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery this$0>
$stack28 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery: me.prettyprint.hector.api.Serializer access$700(me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery)> $stack28 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceQuery this$0>
l2#3 <org.h2.engine.Database: void update(org.h2.engine.Session,org.h2.engine.DbObject)> l2#3 = virtualinvoke l1.<org.h2.engine.Database: org.h2.engine.Session getSystemSession()>()
$stack22 <org.h2.expression.Comparison: boolean compareNotNull(org.h2.engine.Database,org.h2.value.Value,org.h2.value.Value,int)> $stack22 = l0.<org.h2.expression.ConditionIn: org.h2.engine.Database database>
$stack26 <org.h2.expression.ExpressionVisitor: void setQueryLevel(int)> $stack26 = l0.<org.h2.expression.ConditionIn: int queryLevel>
$stack2 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(targetPosition)
$stack2 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(targetPosition)
$stack2 <org.hypergraphdb.query.impl.LinkProjectionMapping: org.hypergraphdb.HGHandle eval(org.hypergraphdb.HGLink)> $stack2 = (org.hypergraphdb.HGLink) x0
$stack6 <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)> $stack6 = this.<org.vivoweb.harvester.util.repo.DBJenaConnect: java.lang.String dbUrl>
queryName <org.hibernate.cfg.annotations.QueryBinder: java.lang.String getString(java.lang.String,java.lang.String,javax.persistence.QueryHint[])> queryName = interfaceinvoke queryAnn.<javax.persistence.NamedQuery: java.lang.String query()>()
queryName <org.hibernate.cfg.annotations.QueryBinder: boolean getBoolean(java.lang.String,java.lang.String,javax.persistence.QueryHint[])> queryName = interfaceinvoke queryAnn.<javax.persistence.NamedNativeQuery: java.lang.String query()>()
$stack82 <org.hibernate.cfg.annotations.QueryBinder: org.hibernate.FlushMode getFlushMode(org.hibernate.annotations.FlushModeType)> $stack82 = interfaceinvoke queryAnn.<org.hibernate.annotations.NamedNativeQuery: org.hibernate.annotations.FlushModeType flushMode()>()
$stack84 <org.hibernate.cfg.annotations.QueryBinder: org.hibernate.CacheMode getCacheMode(org.hibernate.annotations.CacheModeType)> $stack84 = interfaceinvoke queryAnn.<org.hibernate.annotations.NamedNativeQuery: org.hibernate.annotations.CacheModeType cacheMode()>()
$stack33 <org.hibernate.cfg.annotations.QueryBinder: org.hibernate.FlushMode getFlushMode(org.hibernate.annotations.FlushModeType)> $stack33 = interfaceinvoke queryAnn.<org.hibernate.annotations.NamedNativeQuery: org.hibernate.annotations.FlushModeType flushMode()>()
$stack35 <org.hibernate.cfg.annotations.QueryBinder: org.hibernate.CacheMode getCacheMode(org.hibernate.annotations.CacheModeType)> $stack35 = interfaceinvoke queryAnn.<org.hibernate.annotations.NamedNativeQuery: org.hibernate.annotations.CacheModeType cacheMode()>()
q <org.hibernate.cfg.annotations.QueryBinder: void bindQuery(javax.persistence.NamedQuery,org.hibernate.cfg.ExtendedMappings,boolean)> q = arr$[i$]
q <org.hibernate.cfg.annotations.QueryBinder: void bindNativeQuery(javax.persistence.NamedNativeQuery,org.hibernate.cfg.ExtendedMappings,boolean)> q = arr$[i$]
q <org.hibernate.cfg.annotations.QueryBinder: void bindNativeQuery(org.hibernate.annotations.NamedNativeQuery,org.hibernate.cfg.ExtendedMappings)> q = arr$[i$]
$stack6 <org.hibernate.cfg.annotations.QueryBinder: org.hibernate.FlushMode getFlushMode(org.hibernate.annotations.FlushModeType)> $stack6 = interfaceinvoke queryAnn.<org.hibernate.annotations.NamedQuery: org.hibernate.annotations.FlushModeType flushMode()>()
$stack20 <org.hibernate.cfg.annotations.QueryBinder: org.hibernate.CacheMode getCacheMode(org.hibernate.annotations.CacheModeType)> $stack20 = interfaceinvoke queryAnn.<org.hibernate.annotations.NamedQuery: org.hibernate.annotations.CacheModeType cacheMode()>()
q <org.hibernate.cfg.annotations.QueryBinder: void bindQuery(org.hibernate.annotations.NamedQuery,org.hibernate.cfg.ExtendedMappings)> q = arr$[i$]
l1 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> l1 = virtualinvoke l0.<org.h2.value.ValueLob: java.lang.String getString()>()
l1 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> l1 = staticinvoke <org.h2.util.ByteUtils: java.lang.String convertBytesToString(byte[])>(l2)
$stack22 <net.sf.hibernate.cfg.Configuration: java.lang.String[] generateSchemaUpdateScript(net.sf.hibernate.dialect.Dialect,net.sf.hibernate.tool.hbm2ddl.DatabaseMetadata)> $stack22 = this.<net.sf.hibernate.tool.hbm2ddl.SchemaUpdate: net.sf.hibernate.dialect.Dialect dialect>
sql <java.sql.Statement: int executeUpdate(java.lang.String)> sql = sqle#4[j]
rs <net.sf.hibernate.tool.hbm2ddl.TableMetadata: void addForeignKey(java.sql.ResultSet)> rs = null
rs <net.sf.hibernate.tool.hbm2ddl.TableMetadata: void addForeignKey(java.sql.ResultSet)> rs = interfaceinvoke meta.<java.sql.DatabaseMetaData: java.sql.ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String)>(null, $stack5, $stack4)
rs <net.sf.hibernate.tool.hbm2ddl.TableMetadata: void addIndex(java.sql.ResultSet)> rs = null
rs <net.sf.hibernate.tool.hbm2ddl.TableMetadata: void addIndex(java.sql.ResultSet)> rs = interfaceinvoke meta.<java.sql.DatabaseMetaData: java.sql.ResultSet getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(null, $stack5, $stack4, 0, 1)
rs <net.sf.hibernate.tool.hbm2ddl.TableMetadata: void addColumn(java.sql.ResultSet)> rs = null
rs <net.sf.hibernate.tool.hbm2ddl.TableMetadata: void addColumn(java.sql.ResultSet)> rs = interfaceinvoke meta.<java.sql.DatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, "%", $stack6, "%")
$stack4 <net.sf.hibernate.sql.InFragment: net.sf.hibernate.sql.InFragment setColumn(java.lang.String)> $stack4 = this.<net.sf.hibernate.sql.InFragment: java.lang.String columnName>
$stack33 <java.sql.ResultSetMetaData: java.lang.String getColumnName(int)> $stack33 = l6#77 + 1
$stack36 <java.sql.ResultSetMetaData: int getColumnType(int)> $stack36 = l6#77 + 1
$stack39 <java.sql.ResultSetMetaData: int getPrecision(int)> $stack39 = l6#77 + 1
$stack42 <java.sql.ResultSetMetaData: int getScale(int)> $stack42 = l6#77 + 1
$stack25 <java.sql.ResultSetMetaData: int getColumnType(int)> $stack25 = l6#77 + 1
$stack26 <org.h2.value.DataType: int convertSQLTypeToValueType(int)> $stack26 = interfaceinvoke l4#80.<java.sql.ResultSetMetaData: int getColumnType(int)>($stack25)
$stack29 <org.h2.value.DataType: org.h2.value.Value readValue(org.h2.engine.SessionInterface,java.sql.ResultSet,int,int)> $stack29 = l0.<org.h2.value.Transfer: org.h2.engine.SessionInterface session>
$stack59 <org.h2.value.ValueDate: org.h2.value.ValueDate getNoCopy(java.sql.Date)> $stack59 = new java.sql.Date
$stack62 <org.h2.value.ValueTime: org.h2.value.ValueTime getNoCopy(java.sql.Time)> $stack62 = new java.sql.Time
l2 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp getNoCopy(java.sql.Timestamp)> l2 = $stack55
$stack57 <java.sql.Timestamp: void setNanos(int)> $stack57 = virtualinvoke l0.<org.h2.value.Transfer: int readInt()>()
l2#9 <org.h2.value.ValueResultSet: org.h2.value.ValueResultSet get(java.sql.ResultSet)> l2#9 = $stack14
concreteQueryStrings <net.sf.hibernate.impl.SessionFactoryImpl: net.sf.hibernate.hql.QueryTranslator[] createQueryTranslators(java.lang.String[],java.lang.Object)> concreteQueryStrings = staticinvoke <net.sf.hibernate.hql.QueryTranslator: java.lang.String[] concreteQueries(java.lang.String,net.sf.hibernate.engine.SessionFactoryImplementor)>(queryString, this)
$stack5 <net.sf.hibernate.impl.SessionFactoryImpl: net.sf.hibernate.hql.QueryTranslator[] getQuery(java.lang.String,boolean)> $stack5 = queries[0]
$stack5 <me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery: java.lang.String access$000(me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery)> $stack5 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery this$0>
$stack7 <me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery: me.prettyprint.hector.api.Serializer access$200(me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery)> $stack7 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery this$0>
$stack11 <me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery: me.prettyprint.cassandra.model.HKeyRange access$100(me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery)> $stack11 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery this$0>
$stack17 <me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery: me.prettyprint.hector.api.Serializer access$300(me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery)> $stack17 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery this$0>
$stack20 <me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery: me.prettyprint.hector.api.Serializer access$400(me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery)> $stack20 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery this$0>
$stack22 <me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery: me.prettyprint.hector.api.Serializer access$500(me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery)> $stack22 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesCounterQuery this$0>
$stack4 <org.hibernate.envers.tools.query.QueryBuilder: org.hibernate.Query toQuery(org.hibernate.Session)> $stack4 = interfaceinvoke $stack2.<org.hibernate.envers.reader.AuditReaderImplementor: org.hibernate.Session getSession()>()
query <org.hibernate.envers.query.impl.AbstractAuditQuery: void setQueryProperties(org.hibernate.Query)> query = virtualinvoke $stack3.<org.hibernate.envers.tools.query.QueryBuilder: org.hibernate.Query toQuery(org.hibernate.Session)>($stack4)
$stack3 <org.hibernate.envers.query.projection.AuditProjection: org.hibernate.envers.tools.Triple getData(org.hibernate.envers.configuration.AuditConfiguration)> $stack3 = this.<org.hibernate.envers.query.impl.AbstractAuditQuery: org.hibernate.envers.configuration.AuditConfiguration verCfg>
$stack7 <org.hibernate.envers.tools.query.QueryBuilder: void addProjection(java.lang.String,java.lang.String,boolean)> $stack7 = (java.lang.String) $stack6
$stack3 <org.hibernate.envers.query.order.AuditOrder: org.hibernate.envers.tools.Pair getData(org.hibernate.envers.configuration.AuditConfiguration)> $stack3 = this.<org.hibernate.envers.query.impl.AbstractAuditQuery: org.hibernate.envers.configuration.AuditConfiguration verCfg>
$stack7 <org.hibernate.envers.tools.query.QueryBuilder: void addOrder(java.lang.String,boolean)> $stack7 = (java.lang.String) $stack6
$stack43 <org.hibernate.Query: org.hibernate.Query setMaxResults(int)> $stack43 = virtualinvoke $stack42.<java.lang.Integer: int intValue()>()
$stack39 <org.hibernate.Query: org.hibernate.Query setFirstResult(int)> $stack39 = virtualinvoke $stack38.<java.lang.Integer: int intValue()>()
$stack35 <org.hibernate.Query: org.hibernate.Query setCacheable(boolean)> $stack35 = virtualinvoke $stack34.<java.lang.Boolean: boolean booleanValue()>()
$stack31 <org.hibernate.Query: org.hibernate.Query setCacheRegion(java.lang.String)> $stack31 = this.<org.hibernate.envers.query.impl.AbstractAuditQuery: java.lang.String cacheRegion>
$stack28 <org.hibernate.Query: org.hibernate.Query setComment(java.lang.String)> $stack28 = this.<org.hibernate.envers.query.impl.AbstractAuditQuery: java.lang.String comment>
$stack25 <org.hibernate.Query: org.hibernate.Query setFlushMode(org.hibernate.FlushMode)> $stack25 = this.<org.hibernate.envers.query.impl.AbstractAuditQuery: org.hibernate.FlushMode flushMode>
$stack22 <org.hibernate.Query: org.hibernate.Query setCacheMode(org.hibernate.CacheMode)> $stack22 = this.<org.hibernate.envers.query.impl.AbstractAuditQuery: org.hibernate.CacheMode cacheMode>
$stack19 <org.hibernate.Query: org.hibernate.Query setTimeout(int)> $stack19 = virtualinvoke $stack18.<java.lang.Integer: int intValue()>()
$stack8 <org.h2.engine.Database: org.h2.engine.FunctionAlias findFunctionAlias(java.lang.String)> $stack8 = l0.<org.h2.command.ddl.DropFunctionAlias: java.lang.String aliasName>
$stack10 <org.h2.engine.Database: void removeDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack10 = l0.<org.h2.command.ddl.DropFunctionAlias: org.h2.engine.Session session>
$stack24 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack24 = l0.<org.h2.engine.User: java.lang.String comment>
$stack48 <org.hypergraphdb.query.impl.UnionResult: java.lang.Object selectBack(java.lang.Comparable,java.lang.Comparable)> $stack48 = (java.lang.Comparable) $stack46
$stack29 <org.hypergraphdb.query.impl.UnionResult: java.lang.Object selectBack(java.lang.Comparable,java.lang.Comparable)> $stack29 = (java.lang.Comparable) $stack27
$stack14 <org.hypergraphdb.query.impl.UnionResult: java.lang.Object selectBack(java.lang.Comparable,java.lang.Comparable)> $stack14 = (java.lang.Comparable) $stack12
$stack48 <org.hypergraphdb.query.impl.UnionResult: java.lang.Object select(java.lang.Comparable,java.lang.Comparable)> $stack48 = (java.lang.Comparable) $stack46
$stack29 <org.hypergraphdb.query.impl.UnionResult: java.lang.Object select(java.lang.Comparable,java.lang.Comparable)> $stack29 = (java.lang.Comparable) $stack27
$stack14 <org.hypergraphdb.query.impl.UnionResult: java.lang.Object select(java.lang.Comparable,java.lang.Comparable)> $stack14 = (java.lang.Comparable) $stack12
query <org.vivoweb.harvester.util.repo.JenaConnect: com.hp.hpl.jena.query.ResultSet executeSelectQuery(java.lang.String)> query = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()
$stack41 <org.vivoweb.harvester.util.repo.JenaConnect: void executeUpdateQuery(java.lang.String)> $stack41 = virtualinvoke deleteQ.<java.lang.StringBuilder: java.lang.String toString()>()
$stack48 <org.vivoweb.harvester.util.repo.JenaConnect: void executeUpdateQuery(java.lang.String)> $stack48 = virtualinvoke insertQ.<java.lang.StringBuilder: java.lang.String toString()>()
query <org.vivoweb.harvester.util.repo.JenaConnect: void executeUpdateQuery(java.lang.String)> query = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>()
predicateQuery <org.vivoweb.harvester.util.repo.JenaConnect: void executeUpdateQuery(java.lang.String)> predicateQuery = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>()
aliasName <net.sf.hibernate.persister.SQLLoadable: java.lang.String selectFragment(java.lang.String,java.lang.String)> aliasName = $stack24
propertyName <net.sf.hibernate.persister.SQLLoadable: java.lang.String[] getSubclassPropertyColumnAliases(java.lang.String,java.lang.String)> propertyName = virtualinvoke aliasPath.<java.lang.String: java.lang.String substring(int)>($stack30)
param <net.sf.hibernate.loader.SQLLoader: void addNamedParameter(java.lang.String)> param = virtualinvoke sqlString.<java.lang.String: java.lang.String substring(int,int)>($stack19, chopLocation#4)
name <net.sf.hibernate.loader.SQLLoader: int[] getNamedParameterLocs(java.lang.String)> name = (java.lang.String) $stack16
l4 <org.h2.engine.Database: boolean exists(java.lang.String)> l4 = virtualinvoke l1.<org.h2.engine.ConnectionInfo: java.lang.String getName()>()
l7 <org.h2.engine.Database: org.h2.engine.Session createSession(org.h2.engine.User)> l7 = null
l7 <org.h2.engine.Database: org.h2.engine.Session createSession(org.h2.engine.User)> l7 = $stack39
$stack25 <org.h2.engine.Database: org.h2.engine.User findUser(java.lang.String)> $stack25 = virtualinvoke l1.<org.h2.engine.ConnectionInfo: java.lang.String getUserName()>()
l7 <org.h2.engine.Database: org.h2.engine.Session createSession(org.h2.engine.User)> l7 = virtualinvoke l5.<org.h2.engine.Database: org.h2.engine.User findUser(java.lang.String)>($stack25)
l7 <org.h2.engine.Database: org.h2.engine.Session createSession(org.h2.engine.User)> l7 = null
$stack5 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.TypePlusCondition typePlus(org.hypergraphdb.HGHandle)> $stack5 = interfaceinvoke indexer.<org.hypergraphdb.indexing.HGIndexer: org.hypergraphdb.HGHandle getType()>()
$stack7 <org.hypergraphdb.query.TypePlusCondition: java.util.List getSubTypes(org.hypergraphdb.HyperGraph)> $stack7 = this.<org.hypergraphdb.HGIndexManager: org.hypergraphdb.HyperGraph graph>
indexerBaseType <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.SubsumedCondition subsumed(org.hypergraphdb.HGHandle)> indexerBaseType = virtualinvoke $stack13.<org.hypergraphdb.HGTypeSystem: org.hypergraphdb.HGHandle getTypeHandle(java.lang.Class)>(class "Lorg/hypergraphdb/indexing/HGIndexer;")
$stack15 <org.hypergraphdb.HGQuery$hg: java.util.List findAll(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack15 = this.<org.hypergraphdb.HGIndexManager: org.hypergraphdb.HyperGraph graph>
indexerType <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.AtomTypeCondition type(org.hypergraphdb.HGHandle)> indexerType = (org.hypergraphdb.HGHandle) $stack20
$stack21 <org.hypergraphdb.HGQuery$hg: java.util.List findAll(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack21 = this.<org.hypergraphdb.HGIndexManager: org.hypergraphdb.HyperGraph graph>
$stack30 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.TypePlusCondition typePlus(org.hypergraphdb.HGHandle)> $stack30 = interfaceinvoke indexer.<org.hypergraphdb.indexing.HGIndexer: org.hypergraphdb.HGHandle getType()>()
$stack32 <org.hypergraphdb.query.TypePlusCondition: java.util.List getSubTypes(org.hypergraphdb.HyperGraph)> $stack32 = this.<org.hypergraphdb.HGIndexManager: org.hypergraphdb.HyperGraph graph>
$stack14 <org.hypergraphdb.HGQuery$hg: java.lang.Object findOne(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack14 = this.<org.hypergraphdb.HGIndexManager: org.hypergraphdb.HyperGraph graph>
$stack13 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.And and(org.hypergraphdb.query.HGQueryCondition[])> $stack13 = newarray (org.hypergraphdb.query.HGQueryCondition)[2]
$stack7 <org.hypergraphdb.HGQuery$hg: long count(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack7 = this.<org.hypergraphdb.HGIndexManager: org.hypergraphdb.HyperGraph graph>
$stack8 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.TypePlusCondition typePlus(org.hypergraphdb.HGHandle)> $stack8 = interfaceinvoke indexer.<org.hypergraphdb.indexing.HGIndexer: org.hypergraphdb.HGHandle getType()>()
$stack12 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.TypePlusCondition typePlus(org.hypergraphdb.HGHandle)> $stack12 = interfaceinvoke indexer.<org.hypergraphdb.indexing.HGIndexer: org.hypergraphdb.HGHandle getType()>()
$stack14 <org.hypergraphdb.query.TypePlusCondition: java.util.List getSubTypes(org.hypergraphdb.HyperGraph)> $stack14 = this.<org.hypergraphdb.HGIndexManager: org.hypergraphdb.HyperGraph graph>
s <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)> s = $stack6
s <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)> s = ""
e#4 <org.apache.hadoop.hive.serde2.io.TimestampWritable: void set(java.sql.Timestamp)> e#4 = null
e#4 <org.apache.hadoop.hive.serde2.io.TimestampWritable: void set(java.sql.Timestamp)> e#4 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>(s)
$stack30 <net.sf.hibernate.engine.QueryParameters: void setCacheable(boolean)> $stack30 = virtualinvoke $stack29.<net.sf.hibernate.impl.CriteriaImpl: boolean getCacheable()>()
$stack32 <net.sf.hibernate.engine.QueryParameters: void setCacheRegion(java.lang.String)> $stack32 = virtualinvoke $stack31.<net.sf.hibernate.impl.CriteriaImpl: java.lang.String getCacheRegion()>()
$stack3 <net.sf.hibernate.persister.Queryable: java.lang.String queryWhereFragment(java.lang.String,boolean,boolean)> $stack3 = virtualinvoke this.<net.sf.hibernate.loader.CriteriaLoader: java.lang.String getAlias()>()
$stack5 <me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery: java.lang.String access$000(me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery)> $stack5 = this.<me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery this$0>
$stack7 <me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery: me.prettyprint.hector.api.Serializer access$200(me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery)> $stack7 = this.<me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery this$0>
$stack9 <me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery: java.lang.Object access$100(me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery)> $stack9 = this.<me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery this$0>
$stack13 <me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery: me.prettyprint.hector.api.Serializer access$400(me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery)> $stack13 = this.<me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery this$0>
$stack15 <me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery: java.lang.Object access$300(me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery)> $stack15 = this.<me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery this$0>
$stack22 <me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery: me.prettyprint.hector.api.Serializer access$500(me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery)> $stack22 = this.<me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSubSliceCounterQuery this$0>
$stack4 <org.h2.engine.Database: org.h2.store.FileStore openFile(java.lang.String,java.lang.String,boolean)> $stack4 = l0.<org.h2.store.PageStore: java.lang.String fileName>
$stack2 <org.h2.engine.Database: org.h2.store.FileStore openFile(java.lang.String,java.lang.String,boolean)> $stack2 = l0.<org.h2.store.PageStore: java.lang.String fileName>
l1 <org.h2.engine.Database: void notifyFileSize(long)> l1 = virtualinvoke $stack6.<org.h2.store.FileStore: long length()>()
$stack20 <org.h2.engine.Database: org.h2.store.FileStore openFile(java.lang.String,java.lang.String,boolean)> $stack20 = l0.<org.h2.store.PageStore: java.lang.String fileName>
l4 <org.h2.engine.Database: void setReadOnly(boolean)> l4 = virtualinvoke $stack6.<org.h2.engine.Database: boolean isReadOnly()>()
$stack11 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack11 = l0.<org.h2.engine.Comment: java.lang.String commentText>
l3 <org.h2.command.Prepared: java.lang.String getSQL(org.h2.expression.Expression[])> l3 = (org.h2.expression.Expression[]) $stack51
l3#13 <org.h2.command.Prepared: java.lang.String getSQL(org.h2.value.Value[])> l3#13 = virtualinvoke l2#12.<org.h2.result.LocalResult: org.h2.value.Value[] currentRow()>()
$stack5 <me.prettyprint.cassandra.model.thrift.ThriftSliceQuery: java.lang.String access$000(me.prettyprint.cassandra.model.thrift.ThriftSliceQuery)> $stack5 = this.<me.prettyprint.cassandra.model.thrift.ThriftSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSliceQuery this$0>
$stack7 <me.prettyprint.cassandra.model.thrift.ThriftSliceQuery: me.prettyprint.hector.api.Serializer access$200(me.prettyprint.cassandra.model.thrift.ThriftSliceQuery)> $stack7 = this.<me.prettyprint.cassandra.model.thrift.ThriftSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSliceQuery this$0>
$stack9 <me.prettyprint.cassandra.model.thrift.ThriftSliceQuery: java.lang.Object access$100(me.prettyprint.cassandra.model.thrift.ThriftSliceQuery)> $stack9 = this.<me.prettyprint.cassandra.model.thrift.ThriftSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSliceQuery this$0>
$stack16 <me.prettyprint.cassandra.model.thrift.ThriftSliceQuery: me.prettyprint.hector.api.Serializer access$300(me.prettyprint.cassandra.model.thrift.ThriftSliceQuery)> $stack16 = this.<me.prettyprint.cassandra.model.thrift.ThriftSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSliceQuery this$0>
$stack18 <me.prettyprint.cassandra.model.thrift.ThriftSliceQuery: me.prettyprint.hector.api.Serializer access$400(me.prettyprint.cassandra.model.thrift.ThriftSliceQuery)> $stack18 = this.<me.prettyprint.cassandra.model.thrift.ThriftSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSliceQuery this$0>
jf <net.sf.hibernate.sql.JoinFragment: void addFragment(net.sf.hibernate.sql.JoinFragment)> jf = virtualinvoke $stack9.<net.sf.hibernate.dialect.Dialect: net.sf.hibernate.sql.JoinFragment createOuterJoinFragment()>()
$stack13 <java.sql.Statement: int executeUpdate(java.lang.String)> $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()
$stack10 <java.sql.Statement: boolean execute(java.lang.String)> $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>()
$stack10 <java.sql.Statement: boolean execute(java.lang.String)> $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>()
$stack23 <java.sql.Statement: boolean execute(java.lang.String)> $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>()
$stack8 <java.sql.Statement: int executeUpdate(java.lang.String)> $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>()
$stack33 <java.sql.Statement: int executeUpdate(java.lang.String)> $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.String toString()>()
$stack48 <java.sql.Statement: int executeUpdate(java.lang.String)> $stack48 = virtualinvoke $stack47.<java.lang.StringBuilder: java.lang.String toString()>()
$stack63 <java.sql.Statement: int executeUpdate(java.lang.String)> $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.String toString()>()
$stack8 <java.sql.Statement: boolean execute(java.lang.String)> $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>()
$stack18 <java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>()
$stack53 <java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack53 = virtualinvoke $stack52.<java.lang.StringBuilder: java.lang.String toString()>()
$stack13 <java.sql.Statement: boolean execute(java.lang.String)> $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()
$stack14 <java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)> $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>()
$stack31 <java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)> $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.String toString()>()
$stack37 <java.sql.Statement: int executeUpdate(java.lang.String)> $stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.String toString()>()
$stack13 <java.sql.Statement: int executeUpdate(java.lang.String)> $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()
$stack21 <java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)> $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>()
query <java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)> query = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>()
$stack11 <javax.sql.PooledConnection: void addConnectionEventListener(javax.sql.ConnectionEventListener)> $stack11 = l0.<org.h2.jdbcx.JdbcConnectionPool: org.h2.jdbcx.JdbcConnectionPool$PoolConnectionEventListener poolConnectionEventListener>
$stack27 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack27 = l0.<org.h2.table.TableData: java.lang.String comment>
$stack5 <org.hypergraphdb.query.SubsumesCondition: org.hypergraphdb.util.Ref access$100(org.hypergraphdb.query.SubsumesCondition)> $stack5 = this.<org.hypergraphdb.query.SubsumesCondition$HandleBased: org.hypergraphdb.query.SubsumesCondition this$0>
$stack11 <org.hypergraphdb.query.SubsumesCondition: org.hypergraphdb.util.Ref access$100(org.hypergraphdb.query.SubsumesCondition)> $stack11 = this.<org.hypergraphdb.query.SubsumesCondition$HandleBased: org.hypergraphdb.query.SubsumesCondition this$0>
$stack21 <org.hypergraphdb.query.SubsumesCondition: org.hypergraphdb.util.Ref access$100(org.hypergraphdb.query.SubsumesCondition)> $stack21 = this.<org.hypergraphdb.query.SubsumesCondition$HandleBased: org.hypergraphdb.query.SubsumesCondition this$0>
$stack26 <net.sf.hibernate.sql.Select: net.sf.hibernate.sql.Select setSelectClause(java.lang.String)> $stack26 = virtualinvoke $stack25.<java.lang.StringBuffer: java.lang.String toString()>()
$stack33 <net.sf.hibernate.sql.Select: net.sf.hibernate.sql.Select setFromClause(java.lang.String)> $stack33 = virtualinvoke $stack32.<java.lang.StringBuffer: java.lang.String toString()>()
$stack35 <net.sf.hibernate.sql.Select: net.sf.hibernate.sql.Select setWhereClause(java.lang.String)> $stack35 = virtualinvoke whereString.<java.lang.StringBuffer: java.lang.String toString()>()
$stack37 <net.sf.hibernate.sql.Select: net.sf.hibernate.sql.Select setOuterJoins(java.lang.String,java.lang.String)> $stack37 = virtualinvoke ojf.<net.sf.hibernate.sql.JoinFragment: java.lang.String toFromFragmentString()>()
$stack47 <net.sf.hibernate.sql.Select: net.sf.hibernate.sql.Select setOrderByClause(java.lang.String)> $stack47 = interfaceinvoke collPersister.<net.sf.hibernate.collection.QueryableCollection: java.lang.String getSQLOrderByString(java.lang.String)>(alias)
$stack6 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery: java.util.Collection access$000(me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery)> $stack6 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery this$0>
$stack10 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery: java.lang.String access$100(me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery)> $stack10 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery this$0>
$stack12 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery: me.prettyprint.hector.api.Serializer access$300(me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery)> $stack12 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery this$0>
$stack14 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery: me.prettyprint.hector.api.Serializer access$200(me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery)> $stack14 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery this$0>
$stack22 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery: me.prettyprint.hector.api.Serializer access$400(me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery)> $stack22 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery this$0>
$stack24 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery: me.prettyprint.hector.api.Serializer access$500(me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery)> $stack24 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery this$0>
$stack26 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery: me.prettyprint.hector.api.Serializer access$600(me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery)> $stack26 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSuperSliceCounterQuery this$0>
qb <org.hibernate.envers.strategy.AuditStrategy: void addAssociationAtRevisionRestriction(org.hibernate.envers.tools.query.QueryBuilder,java.lang.String,java.lang.String,boolean,org.hibernate.envers.entities.mapper.relation.MiddleIdData,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.hibernate.envers.entities.mapper.relation.MiddleComponentData[])> qb = $stack19
$stack20 <org.hibernate.envers.tools.query.QueryBuilder: void addFrom(java.lang.String,java.lang.String)> $stack20 = virtualinvoke referencedIdData.<org.hibernate.envers.entities.mapper.relation.MiddleIdData: java.lang.String getEntityName()>()
rootParameters <org.hibernate.envers.entities.mapper.id.IdMapper: void addNamedIdEqualsToQuery(org.hibernate.envers.tools.query.Parameters,java.lang.String,boolean)> rootParameters = virtualinvoke qb.<org.hibernate.envers.tools.query.QueryBuilder: org.hibernate.envers.tools.query.Parameters getRootParameters()>()
$stack26 <org.hibernate.envers.tools.query.Parameters: void addWhereWithNamedParam(java.lang.String,java.lang.String,java.lang.String)> $stack26 = virtualinvoke verEntCfg.<org.hibernate.envers.configuration.AuditEntitiesConfiguration: java.lang.String getRevisionTypePropName()>()
sb <org.hibernate.envers.tools.query.QueryBuilder: void build(java.lang.StringBuilder,java.util.Map)> sb = $stack27
$stack8 <org.hibernate.Session: org.hibernate.Query createQuery(java.lang.String)> $stack8 = this.<org.hibernate.envers.entities.mapper.relation.query.TwoEntityOneAuditedQueryGenerator: java.lang.String queryString>
query <org.hibernate.envers.entities.mapper.id.QueryParameterData: void setParameterValue(org.hibernate.Query)> query = interfaceinvoke $stack7.<org.hibernate.Session: org.hibernate.Query createQuery(java.lang.String)>($stack8)
$stack7 <org.h2.engine.Database: org.h2.table.TableLinkConnection getLinkConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> $stack7 = l0.<org.h2.table.TableLink: java.lang.String driver>
l11 <org.h2.value.DataType: int convertSQLTypeToValueType(int)> l11 = interfaceinvoke l2.<java.sql.ResultSet: int getInt(java.lang.String)>("DATA_TYPE")
l8#23 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l8#23 = null
l8#23 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l8#23 = interfaceinvoke $stack39.<java.sql.Connection: java.sql.Statement createStatement()>()
$stack46 <java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)> $stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.String toString()>()
$stack117 <java.sql.ResultSetMetaData: java.lang.String getColumnName(int)> $stack117 = l3 + 1
$stack120 <java.sql.ResultSetMetaData: int getColumnType(int)> $stack120 = l3 + 1
l11 <org.h2.value.DataType: int convertSQLTypeToValueType(int)> l11 = interfaceinvoke l9#60.<java.sql.ResultSetMetaData: int getColumnType(int)>($stack120)
$stack122 <java.sql.ResultSetMetaData: int getPrecision(int)> $stack122 = l3 + 1
$stack125 <java.sql.ResultSetMetaData: int getScale(int)> $stack125 = l3 + 1
$stack127 <java.sql.ResultSetMetaData: int getColumnDisplaySize(int)> $stack127 = l3 + 1
$stack37 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack37 = l0.<org.h2.table.TableLink: java.lang.String comment>
$stack9 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack9 = l0.<org.h2.table.TableLink: java.lang.String driver>
$stack13 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack13 = l0.<org.h2.table.TableLink: java.lang.String url>
$stack17 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack17 = l0.<org.h2.table.TableLink: java.lang.String user>
$stack21 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack21 = l0.<org.h2.table.TableLink: java.lang.String password>
$stack25 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack25 = l0.<org.h2.table.TableLink: java.lang.String originalTable>
l2 <org.h2.table.TableLink: java.sql.PreparedStatement getPreparedStatement(java.lang.String,boolean)> l2 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>()
$stack85 <org.h2.engine.Database: void removeDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack85 = l0.<org.h2.command.ddl.DropDatabase: org.h2.engine.Session session>
$stack81 <org.h2.engine.Database: void removeSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack81 = l0.<org.h2.command.ddl.DropDatabase: org.h2.engine.Session session>
$stack74 <org.h2.engine.Database: void removeSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack74 = l0.<org.h2.command.ddl.DropDatabase: org.h2.engine.Session session>
$stack67 <org.h2.engine.Database: void removeSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack67 = l0.<org.h2.command.ddl.DropDatabase: org.h2.engine.Session session>
$stack59 <org.h2.engine.Database: void removeSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack59 = l0.<org.h2.command.ddl.DropDatabase: org.h2.engine.Session session>
$stack57 <org.h2.engine.Database: void removeDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack57 = l0.<org.h2.command.ddl.DropDatabase: org.h2.engine.Session session>
$stack52 <org.h2.engine.Database: void removeDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack52 = l0.<org.h2.command.ddl.DropDatabase: org.h2.engine.Session session>
$stack48 <org.h2.engine.Database: void removeDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack48 = l0.<org.h2.command.ddl.DropDatabase: org.h2.engine.Session session>
$stack3 <org.apache.hadoop.hive.serde2.objectinspector.primitive.SettableTimestampObjectInspector: java.lang.Object create(java.sql.Timestamp)> $stack3 = new java.sql.Timestamp
$stack4 <org.apache.hadoop.hive.serde2.objectinspector.primitive.SettableTimestampObjectInspector: java.lang.Object set(java.lang.Object,java.sql.Timestamp)> $stack4 = this.<org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorConverter$TimestampConverter: java.lang.Object r>
$stack6 <org.h2.engine.Database: void removeStorage(int,org.h2.store.DiskFile)> $stack6 = virtualinvoke $stack4.<org.h2.store.Storage: int getId()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = null
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = $stack123
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Query parseSelect()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.Prepared parseAlter()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.Prepared parseAnalyze()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.Prepared parseBackup()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.TransactionCommand parseBegin()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.TransactionCommand parseCommit()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.Prepared parseCreate()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Call parserCall()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.TransactionCommand parseCheckpoint()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.Prepared parseComment()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Delete parseDelete()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.Prepared parseDrop()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.Prepared parseCreate()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.ddl.DeallocateProcedure parseDeallocate()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.ExplainPlan parseExplain()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.Prepared parseExecute()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Query parseSelect()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.ddl.GrantRevoke parseGrantRevoke(int)>(0)
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.Prepared parseHelp()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Insert parseInsert()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Merge parseMerge()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.Prepared parsePrepare()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.TransactionCommand parseRollback()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.ddl.GrantRevoke parseGrantRevoke(int)>(1)
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.RunScriptCommand parseRunScript()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.Prepared parseReleaseSavepoint()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Query parseSelect()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.Prepared parseSet()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.TransactionCommand parseSavepoint()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.ScriptCommand parseScript()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.TransactionCommand parseShutdown()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.Prepared parseShow()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.Prepared parseTruncate()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Update parseUpdate()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Call parserCall()>()
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Query parserWith()>()
$stack3 <org.h2.engine.Database: org.h2.schema.Schema findSchema(java.lang.String)> $stack3 = l0.<org.h2.command.Parser: java.lang.String schemaName>
$stack13 <org.h2.engine.Database: org.h2.schema.Schema getSchema(java.lang.String)> $stack13 = virtualinvoke $stack11.<org.h2.engine.Session: java.lang.String getCurrentSchemaName()>()
l1 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l1 = $stack9
$stack50 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack50 = l0.<org.h2.command.Parser: org.h2.engine.Database database>
l1 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l1 = $stack5
$stack11 <org.h2.command.dml.Merge: void setQuery(org.h2.command.dml.Query)> $stack11 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Query parseSelect()>()
$stack36 <org.h2.command.dml.Insert: void setQuery(org.h2.command.dml.Query)> $stack36 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Query parseSelect()>()
$stack11 <org.h2.command.dml.Insert: void setQuery(org.h2.command.dml.Query)> $stack11 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Query parseSelect()>()
l6 <org.h2.command.Parser: org.h2.command.dml.Query parseSelectUnionExtension(org.h2.command.dml.Query,int,boolean)> l6 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Query parseSelectUnion()>()
l6 <org.h2.command.Parser: org.h2.command.dml.Query parseSelectUnionExtension(org.h2.command.dml.Query,int,boolean)> l6 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Query parseSelectUnionExtension(org.h2.command.dml.Query,int,boolean)>(l6, l4, 1)
l8#16 <org.h2.table.TableView: org.h2.table.TableView createTempView(org.h2.engine.Session,org.h2.engine.User,java.lang.String,org.h2.command.dml.Query,org.h2.command.dml.Query)> l8#16 = virtualinvoke $stack67.<org.h2.engine.Database: org.h2.engine.Session getSystemSession()>()
l8#16 <org.h2.table.TableView: org.h2.table.TableView createTempView(org.h2.engine.Session,org.h2.engine.User,java.lang.String,org.h2.command.dml.Query,org.h2.command.dml.Query)> l8#16 = l0.<org.h2.command.Parser: org.h2.engine.Session session>
l2 <org.h2.command.Parser: org.h2.command.dml.Query parseSelectUnionExtension(org.h2.command.dml.Query,int,boolean)> l2 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Query parseSelectSub()>()
$stack33 <org.h2.command.dml.SelectUnion: void setRight(org.h2.command.dml.Query)> $stack33 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Query parseSelectSub()>()
l1 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l1 = l4
$stack9 <org.h2.command.dml.SelectUnion: void setRight(org.h2.command.dml.Query)> $stack9 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Query parseSelectSub()>()
l1 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l1 = l4
$stack21 <org.h2.command.dml.SelectUnion: void setRight(org.h2.command.dml.Query)> $stack21 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Query parseSelectSub()>()
l1 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l1 = l4
l3 <org.h2.command.dml.Query: void setOrder(org.h2.util.ObjectArray)> l3 = staticinvoke <org.h2.util.ObjectArray: org.h2.util.ObjectArray newInstance()>()
$stack62 <org.h2.command.dml.Query: void setOffset(org.h2.expression.Expression)> $stack62 = virtualinvoke $stack60.<org.h2.expression.Expression: org.h2.expression.Expression optimize(org.h2.engine.Session)>($stack61)
$stack59 <org.h2.command.dml.Query: void setLimit(org.h2.expression.Expression)> $stack59 = staticinvoke <org.h2.expression.ValueExpression: org.h2.expression.ValueExpression get(org.h2.value.Value)>($stack58)
l3#39 <org.h2.command.dml.Query: void setLimit(org.h2.expression.Expression)> l3#39 = virtualinvoke $stack50.<org.h2.expression.Expression: org.h2.expression.Expression optimize(org.h2.engine.Session)>($stack51)
l3#39 <org.h2.command.dml.Query: void setLimit(org.h2.expression.Expression)> l3#39 = virtualinvoke $stack26.<org.h2.expression.Expression: org.h2.expression.Expression optimize(org.h2.engine.Session)>($stack27)
l4#64 <org.h2.command.dml.Query: void setOffset(org.h2.expression.Expression)> l4#64 = virtualinvoke $stack42.<org.h2.expression.Expression: org.h2.expression.Expression optimize(org.h2.engine.Session)>($stack43)
l4#64 <org.h2.command.dml.Query: void setOffset(org.h2.expression.Expression)> l4#64 = l3#39
l3#39 <org.h2.command.dml.Query: void setLimit(org.h2.expression.Expression)> l3#39 = virtualinvoke $stack37.<org.h2.expression.Expression: org.h2.expression.Expression optimize(org.h2.engine.Session)>($stack38)
$stack34 <org.h2.command.dml.Query: void setSampleSize(int)> $stack34 = specialinvoke l0.<org.h2.command.Parser: int getPositiveInt()>()
l3 <org.h2.command.dml.Query: void setOffset(org.h2.expression.Expression)> l3 = virtualinvoke $stack42.<org.h2.expression.Expression: org.h2.expression.Expression optimize(org.h2.engine.Session)>($stack43)
l3 <org.h2.command.dml.Query: void setOffset(org.h2.expression.Expression)> l3 = virtualinvoke $stack32.<org.h2.expression.Expression: org.h2.expression.Expression optimize(org.h2.engine.Session)>($stack33)
l4 <org.h2.command.dml.Query: void setLimit(org.h2.expression.Expression)> l4 = virtualinvoke $stack35.<org.h2.expression.Expression: org.h2.expression.Expression optimize(org.h2.engine.Session)>($stack36)
l4 <org.h2.command.dml.Query: void setLimit(org.h2.expression.Expression)> l4 = specialinvoke l0.<org.h2.command.Parser: org.h2.expression.Expression readExpression()>()
l4 <org.h2.command.dml.Query: void setLimit(org.h2.expression.Expression)> l4 = $stack15
l2 <org.h2.command.Parser: void setSQL(org.h2.command.Prepared,java.lang.String,int)> l2 = $stack10
l4 <org.h2.command.Prepared: void setSQL(java.lang.String)> l4 = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>()
l4 <org.h2.command.Prepared: void setSQL(java.lang.String)> l4 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()
$stack28 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack28 = l0.<org.h2.command.Parser: org.h2.engine.Database database>
$stack15 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack15 = l0.<org.h2.command.Parser: org.h2.engine.Database database>
$stack9 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack9 = l0.<org.h2.command.Parser: org.h2.engine.Database database>
$stack88 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack88 = l0.<org.h2.command.Parser: org.h2.engine.Database database>
$stack84 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack84 = l0.<org.h2.command.Parser: org.h2.engine.Database database>
$stack4 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack4 = l0.<org.h2.command.Parser: org.h2.engine.Database database>
$stack10 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack10 = l0.<org.h2.command.Parser: org.h2.engine.Database database>
$stack80 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack80 = l0.<org.h2.command.Parser: org.h2.engine.Database database>
l5#22 <org.h2.value.ValueTimestamp: java.sql.Timestamp parseTimestamp(java.lang.String)> l5#22 = virtualinvoke $stack191.<org.h2.value.Value: java.lang.String getString()>()
$stack193 <org.h2.value.ValueDate: org.h2.value.ValueDate get(java.sql.Date)> $stack193 = staticinvoke <org.h2.value.ValueDate: java.sql.Date parseDate(java.lang.String)>(l5#22)
l5#22 <org.h2.value.ValueTimestamp: java.sql.Timestamp parseTimestamp(java.lang.String)> l5#22 = virtualinvoke $stack182.<org.h2.value.Value: java.lang.String getString()>()
$stack184 <org.h2.value.ValueTime: org.h2.value.ValueTime get(java.sql.Time)> $stack184 = staticinvoke <org.h2.value.ValueTime: java.sql.Time parseTime(java.lang.String)>(l5#22)
l5#22 <org.h2.value.ValueTimestamp: java.sql.Timestamp parseTimestamp(java.lang.String)> l5#22 = virtualinvoke $stack173.<org.h2.value.Value: java.lang.String getString()>()
$stack175 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp getNoCopy(java.sql.Timestamp)> $stack175 = staticinvoke <org.h2.value.ValueTimestamp: java.sql.Timestamp parseTimestamp(java.lang.String)>(l5#22)
l5#22 <org.h2.value.ValueTimestamp: java.sql.Timestamp parseTimestamp(java.lang.String)> l5#22 = virtualinvoke $stack165.<org.h2.value.Value: java.lang.String getString()>()
$stack32 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack32 = l0.<org.h2.command.Parser: org.h2.engine.Database database>
$stack18 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack18 = l0.<org.h2.command.Parser: org.h2.engine.Database database>
$stack15 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack15 = l0.<org.h2.command.Parser: org.h2.engine.Database database>
$stack13 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack13 = virtualinvoke $stack12.<org.h2.engine.Session: org.h2.engine.Database getDatabase()>()
l2 <org.h2.table.Column: void setOriginalSQL(java.lang.String)> l2 = l0.<org.h2.command.Parser: java.lang.String currentToken>
l2 <org.h2.table.Column: void setOriginalSQL(java.lang.String)> l2 = virtualinvoke $stack154.<java.lang.StringBuilder: java.lang.String toString()>()
l2 <org.h2.table.Column: void setOriginalSQL(java.lang.String)> l2 = virtualinvoke $stack149.<java.lang.StringBuilder: java.lang.String toString()>()
l2 <org.h2.table.Column: void setOriginalSQL(java.lang.String)> l2 = virtualinvoke $stack144.<java.lang.StringBuilder: java.lang.String toString()>()
l2 <org.h2.table.Column: void setOriginalSQL(java.lang.String)> l2 = virtualinvoke l9.<org.h2.table.Column: java.lang.String getOriginalSQL()>()
l2 <org.h2.table.Column: void setOriginalSQL(java.lang.String)> l2 = "VARCHAR_IGNORECASE"
l2 <org.h2.table.Column: void setOriginalSQL(java.lang.String)> l2 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.String toString()>()
l2 <org.h2.table.Column: void setOriginalSQL(java.lang.String)> l2 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>()
l2 <org.h2.table.Column: void setOriginalSQL(java.lang.String)> l2 = virtualinvoke $stack74.<java.lang.StringBuilder: java.lang.String toString()>()
$stack92 <org.h2.engine.Database: org.h2.engine.Setting findSetting(java.lang.String)> $stack92 = staticinvoke <org.h2.command.dml.SetTypes: java.lang.String getTypeName(int)>(7)
$stack11 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack11 = l0.<org.h2.command.Parser: org.h2.engine.Database database>
$stack11 <org.h2.expression.Function: org.h2.expression.Function getFunction(org.h2.engine.Database,java.lang.String)> $stack11 = l0.<org.h2.command.Parser: org.h2.engine.Database database>
l5#2 <org.h2.command.ddl.CreateView: void setSelectSQL(java.lang.String)> l5#2 = staticinvoke <org.h2.util.StringCache: java.lang.String getNew(java.lang.String)>($stack16)
l6 <org.h2.command.ddl.CreateView: void setSelect(org.h2.command.dml.Query)> l6 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Query parseSelect()>()
l1 <org.h2.engine.Database: org.h2.engine.User getUser(java.lang.String)> l1 = specialinvoke l0.<org.h2.command.Parser: java.lang.String readUniqueIdentifier()>()
$stack9 <org.h2.engine.Database: org.h2.schema.Schema getSchema(java.lang.String)> $stack9 = virtualinvoke $stack7.<org.h2.engine.Session: java.lang.String getCurrentSchemaName()>()
$stack19 <org.h2.engine.Database: org.h2.schema.Schema getSchema(java.lang.String)> $stack19 = l3[l4]
$stack14 <org.h2.engine.Database: org.h2.schema.Schema getSchema(java.lang.String)> $stack14 = l4[l5]
$stack100 <org.h2.command.ddl.CreateTable: void setQuery(org.h2.command.dml.Query)> $stack100 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Query parseSelect()>()
$stack34 <org.h2.command.ddl.CreateTable: void setQuery(org.h2.command.dml.Query)> $stack34 = specialinvoke l0.<org.h2.command.Parser: org.h2.command.dml.Query parseSelect()>()
$stack11 <org.h2.jdbc.JdbcConnection: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack11 = virtualinvoke l2.<org.h2.util.StatementBuilder: java.lang.String toString()>()
l3 <org.h2.result.UpdatableRow: void setKey(java.sql.PreparedStatement,int,org.h2.value.Value[])> l3 = virtualinvoke $stack10.<org.h2.jdbc.JdbcConnection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($stack11)
$stack20 <org.h2.value.DataType: org.h2.value.Value readValue(org.h2.engine.SessionInterface,java.sql.ResultSet,int,int)> $stack20 = virtualinvoke $stack19.<org.h2.jdbc.JdbcConnection: org.h2.engine.SessionInterface getSession()>()
$stack7 <org.h2.jdbc.JdbcConnection: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack7 = virtualinvoke l2.<org.h2.util.StatementBuilder: java.lang.String toString()>()
l3 <org.h2.result.UpdatableRow: void setKey(java.sql.PreparedStatement,int,org.h2.value.Value[])> l3 = virtualinvoke $stack6.<org.h2.jdbc.JdbcConnection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($stack7)
$stack11 <org.h2.jdbc.JdbcConnection: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack11 = virtualinvoke l3.<org.h2.util.StatementBuilder: java.lang.String toString()>()
l4 <org.h2.result.UpdatableRow: void setKey(java.sql.PreparedStatement,int,org.h2.value.Value[])> l4 = virtualinvoke $stack10.<org.h2.jdbc.JdbcConnection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($stack11)
$stack13 <org.h2.jdbc.JdbcConnection: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack13 = virtualinvoke l2.<org.h2.util.StatementBuilder: java.lang.String toString()>()
l3#2 <org.h2.value.Value: void set(java.sql.PreparedStatement,int)> l3#2 = virtualinvoke $stack12.<org.h2.jdbc.JdbcConnection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($stack13)
l1 <org.h2.engine.Database: void update(org.h2.engine.Session,org.h2.engine.DbObject)> l1 = l2
$stack17 <net.sf.hibernate.hql.ClauseParser: void token(java.lang.String,net.sf.hibernate.hql.QueryTranslator)> $stack17 = (java.lang.String) $stack16
$stack10 <org.h2.engine.Database: org.h2.engine.User getUser(java.lang.String)> $stack10 = l0.<org.h2.command.ddl.CreateSchema: java.lang.String authorization>
$stack12 <org.h2.engine.Database: org.h2.schema.Schema findSchema(java.lang.String)> $stack12 = l0.<org.h2.command.ddl.CreateSchema: java.lang.String schemaName>
$stack17 <org.h2.engine.Database: void addDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack17 = l0.<org.h2.command.ddl.CreateSchema: org.h2.engine.Session session>
batchUpdate <net.sf.hibernate.impl.BatchingBatcher: void doExecuteBatch(java.sql.PreparedStatement)> batchUpdate = virtualinvoke this.<net.sf.hibernate.impl.BatchingBatcher: java.sql.PreparedStatement getStatement()>()
l4#3 <org.h2.table.TableLink: java.sql.PreparedStatement getPreparedStatement(java.lang.String,boolean)> l4#3 = virtualinvoke l3.<org.h2.util.StatementBuilder: java.lang.String toString()>()
l6 <org.h2.value.Value: void set(java.sql.PreparedStatement,int)> l6 = virtualinvoke $stack20.<org.h2.table.TableLink: java.sql.PreparedStatement getPreparedStatement(java.lang.String,boolean)>(l4#3, 0)
l5#9 <org.h2.table.TableLink: java.sql.PreparedStatement getPreparedStatement(java.lang.String,boolean)> l5#9 = virtualinvoke l4.<org.h2.util.StatementBuilder: java.lang.String toString()>()
l7#11 <org.h2.value.Value: void set(java.sql.PreparedStatement,int)> l7#11 = virtualinvoke $stack19.<org.h2.table.TableLink: java.sql.PreparedStatement getPreparedStatement(java.lang.String,boolean)>(l5#9, 1)
l4#4 <org.h2.table.TableLink: java.sql.PreparedStatement getPreparedStatement(java.lang.String,boolean)> l4#4 = virtualinvoke l3.<org.h2.util.StatementBuilder: java.lang.String toString()>()
l6#6 <org.h2.value.Value: void set(java.sql.PreparedStatement,int)> l6#6 = virtualinvoke $stack19.<org.h2.table.TableLink: java.sql.PreparedStatement getPreparedStatement(java.lang.String,boolean)>(l4#4, 0)
l4#5 <org.h2.table.TableLink: java.sql.PreparedStatement getPreparedStatement(java.lang.String,boolean)> l4#5 = virtualinvoke l3.<org.h2.util.StatementBuilder: java.lang.String toString()>()
l7 <org.h2.value.Value: void set(java.sql.PreparedStatement,int)> l7 = virtualinvoke $stack22.<org.h2.table.TableLink: java.sql.PreparedStatement getPreparedStatement(java.lang.String,boolean)>(l4#5, 0)
$stack27 <java.sql.ResultSetMetaData: java.lang.String getColumnName(int)> $stack27 = l14 + 1
$stack29 <java.sql.ResultSetMetaData: int getColumnType(int)> $stack29 = l14 + 1
$stack30 <org.h2.value.DataType: int convertSQLTypeToValueType(int)> $stack30 = interfaceinvoke l11.<java.sql.ResultSetMetaData: int getColumnType(int)>($stack29)
$stack32 <java.sql.ResultSetMetaData: int getPrecision(int)> $stack32 = l14 + 1
$stack34 <java.sql.ResultSetMetaData: int getScale(int)> $stack34 = l14 + 1
$stack37 <java.sql.ResultSetMetaData: int getColumnDisplaySize(int)> $stack37 = l14 + 1
$stack18 <java.sql.ResultSetMetaData: java.lang.String getColumnLabel(int)> $stack18 = l6 + 1
$stack20 <java.sql.ResultSetMetaData: int getColumnType(int)> $stack20 = l6 + 1
$stack21 <org.h2.value.DataType: int convertSQLTypeToValueType(int)> $stack21 = interfaceinvoke l2.<java.sql.ResultSetMetaData: int getColumnType(int)>($stack20)
$stack23 <java.sql.ResultSetMetaData: int getPrecision(int)> $stack23 = l6 + 1
$stack25 <java.sql.ResultSetMetaData: int getScale(int)> $stack25 = l6 + 1
$stack27 <java.sql.ResultSetMetaData: int getColumnDisplaySize(int)> $stack27 = l6 + 1
$stack8 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.CountQuery createCountQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack8 = this.<me.prettyprint.cassandra.service.template.ColumnFamilyTemplate: me.prettyprint.hector.api.Keyspace keyspace>
$stack11 <me.prettyprint.hector.api.query.CountQuery: me.prettyprint.hector.api.query.CountQuery setColumnFamily(java.lang.String)> $stack11 = this.<me.prettyprint.cassandra.service.template.ColumnFamilyTemplate: java.lang.String columnFamily>
$stack8 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.ColumnQuery createColumnQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack8 = this.<me.prettyprint.cassandra.service.template.ColumnFamilyTemplate: me.prettyprint.hector.api.Keyspace keyspace>
$stack10 <me.prettyprint.hector.api.query.ColumnQuery: me.prettyprint.hector.api.query.ColumnQuery setColumnFamily(java.lang.String)> $stack10 = this.<me.prettyprint.cassandra.service.template.ColumnFamilyTemplate: java.lang.String columnFamily>
$stack12 <org.hypergraphdb.HyperGraph: org.hypergraphdb.HGSearchResult find(org.hypergraphdb.query.HGQueryCondition)> $stack12 = new org.hypergraphdb.query.TypePlusCondition
$stack1 <net.sf.hibernate.impl.AbstractQueryImpl: java.lang.Object uniqueElement(java.util.List)> $stack1 = virtualinvoke this.<net.sf.hibernate.impl.CriteriaImpl: java.util.List list()>()
listener <org.hibernate.search.query.FullTextQueryImpl: org.apache.lucene.search.Searcher buildSearcher(org.hibernate.search.event.FullTextIndexEventListener)> listener = staticinvoke <org.hibernate.search.util.ContextHelper: org.hibernate.search.event.FullTextIndexEventListener getLuceneEventListener(org.hibernate.engine.SessionImplementor)>($stack13)
$stack16 <org.hibernate.search.query.FullTextQueryImpl: org.apache.lucene.search.Query filterQueryByClasses(org.apache.lucene.search.Query)> $stack16 = this.<org.hibernate.search.query.FullTextQueryImpl: org.apache.lucene.search.Query luceneQuery>
query <org.apache.lucene.search.Searcher: org.apache.lucene.search.Hits search(org.apache.lucene.search.Query)> query = specialinvoke this.<org.hibernate.search.query.FullTextQueryImpl: org.apache.lucene.search.Query filterQueryByClasses(org.apache.lucene.search.Query)>($stack16)
hits <org.hibernate.search.query.FullTextQueryImpl: void setResultSize(org.apache.lucene.search.Hits)> hits = virtualinvoke searcher.<org.apache.lucene.search.Searcher: org.apache.lucene.search.Hits search(org.apache.lucene.search.Query)>(query)
first <org.hibernate.search.query.FullTextQueryImpl: int max(int,org.apache.lucene.search.Hits)> first = specialinvoke this.<org.hibernate.search.query.FullTextQueryImpl: int first()>()
listener <org.hibernate.search.query.FullTextQueryImpl: org.apache.lucene.search.Searcher buildSearcher(org.hibernate.search.event.FullTextIndexEventListener)> listener = staticinvoke <org.hibernate.search.util.ContextHelper: org.hibernate.search.event.FullTextIndexEventListener getLuceneEventListener(org.hibernate.engine.SessionImplementor)>($stack7)
$stack10 <org.hibernate.search.query.FullTextQueryImpl: org.apache.lucene.search.Query filterQueryByClasses(org.apache.lucene.search.Query)> $stack10 = this.<org.hibernate.search.query.FullTextQueryImpl: org.apache.lucene.search.Query luceneQuery>
query <org.apache.lucene.search.Searcher: org.apache.lucene.search.Hits search(org.apache.lucene.search.Query)> query = specialinvoke this.<org.hibernate.search.query.FullTextQueryImpl: org.apache.lucene.search.Query filterQueryByClasses(org.apache.lucene.search.Query)>($stack10)
hits <org.hibernate.search.query.FullTextQueryImpl: void setResultSize(org.apache.lucene.search.Hits)> hits = virtualinvoke searcher.<org.apache.lucene.search.Searcher: org.apache.lucene.search.Hits search(org.apache.lucene.search.Query)>(query)
first <org.hibernate.search.query.FullTextQueryImpl: int max(int,org.apache.lucene.search.Hits)> first = specialinvoke this.<org.hibernate.search.query.FullTextQueryImpl: int first()>()
listener <org.hibernate.search.query.FullTextQueryImpl: org.apache.lucene.search.Searcher buildSearcher(org.hibernate.search.event.FullTextIndexEventListener)> listener = staticinvoke <org.hibernate.search.util.ContextHelper: org.hibernate.search.event.FullTextIndexEventListener getLuceneEventListener(org.hibernate.engine.SessionImplementor)>($stack15)
$stack18 <org.hibernate.search.query.FullTextQueryImpl: org.apache.lucene.search.Query filterQueryByClasses(org.apache.lucene.search.Query)> $stack18 = this.<org.hibernate.search.query.FullTextQueryImpl: org.apache.lucene.search.Query luceneQuery>
query <org.apache.lucene.search.Searcher: org.apache.lucene.search.Hits search(org.apache.lucene.search.Query)> query = specialinvoke this.<org.hibernate.search.query.FullTextQueryImpl: org.apache.lucene.search.Query filterQueryByClasses(org.apache.lucene.search.Query)>($stack18)
hits <org.hibernate.search.query.FullTextQueryImpl: void setResultSize(org.apache.lucene.search.Hits)> hits = virtualinvoke searcher.<org.apache.lucene.search.Searcher: org.apache.lucene.search.Hits search(org.apache.lucene.search.Query)>(query)
first <org.hibernate.search.query.FullTextQueryImpl: int max(int,org.apache.lucene.search.Hits)> first = specialinvoke this.<org.hibernate.search.query.FullTextQueryImpl: int first()>()
$r0 <org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)> $r0 = (org.apache.lucene.search.Query) termQuery
$r1 <org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)> $r1 = (org.apache.lucene.search.Query) classFilter
l3 <org.h2.engine.Database: org.h2.engine.Role findRole(java.lang.String)> l3 = (java.lang.String) $stack23
$stack23 <org.h2.engine.Database: void addDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack23 = l0.<org.h2.command.ddl.GrantRevoke: org.h2.engine.Session session>
$stack13 <org.h2.engine.Database: void addDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack13 = l0.<org.h2.command.ddl.GrantRevoke: org.h2.engine.Session session>
$stack20 <org.h2.engine.Database: void removeDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack20 = l0.<org.h2.command.ddl.GrantRevoke: org.h2.engine.Session session>
$stack18 <org.h2.engine.Database: void update(org.h2.engine.Session,org.h2.engine.DbObject)> $stack18 = l0.<org.h2.command.ddl.GrantRevoke: org.h2.engine.Session session>
$stack8 <org.h2.engine.Database: void removeDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack8 = l0.<org.h2.command.ddl.GrantRevoke: org.h2.engine.Session session>
$stack4 <org.hypergraphdb.HGQuery$hg: java.lang.Object getOne(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack4 = this.<org.hypergraphdb.HGTypeSystem: org.hypergraphdb.HyperGraph graph>
$stack3 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.And and(org.hypergraphdb.query.HGQueryCondition[])> $stack3 = newarray (org.hypergraphdb.query.HGQueryCondition)[2]
$stack15 <org.hypergraphdb.HGQuery$hg: java.util.List findAll(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack15 = this.<org.hypergraphdb.HGTypeSystem: org.hypergraphdb.HyperGraph graph>
$stack14 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.And and(org.hypergraphdb.query.HGQueryCondition[])> $stack14 = newarray (org.hypergraphdb.query.HGQueryCondition)[2]
$stack25 <org.hypergraphdb.HGQuery$hg: java.lang.Object findOne(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack25 = this.<org.hypergraphdb.HGTypeSystem: org.hypergraphdb.HyperGraph graph>
$stack24 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.And and(org.hypergraphdb.query.HGQueryCondition[])> $stack24 = newarray (org.hypergraphdb.query.HGQueryCondition)[2]
l2 <org.h2.engine.Database: org.h2.store.FileStore openFile(java.lang.String,java.lang.String,boolean)> l2 = virtualinvoke $stack18.<org.h2.engine.Database: java.lang.String createTempFile()>()
$stack5 <org.hypergraphdb.query.impl.KeyBasedQuery: void setKey(java.lang.Object)> $stack5 = interfaceinvoke in.<org.hypergraphdb.HGSearchResult: java.lang.Object next()>()
$stack9 <org.hypergraphdb.query.impl.KeyBasedQuery: void setKey(java.lang.Object)> $stack9 = interfaceinvoke $stack7.<org.hypergraphdb.HGSearchResult: java.lang.Object prev()>()
$stack9 <org.hypergraphdb.query.impl.KeyBasedQuery: void setKey(java.lang.Object)> $stack9 = interfaceinvoke $stack7.<org.hypergraphdb.HGSearchResult: java.lang.Object next()>()
$stack4 <net.sf.hibernate.sql.SelectFragment: net.sf.hibernate.sql.SelectFragment addColumn(java.lang.String)> $stack4 = columnNames[i]
columnAlias <net.sf.hibernate.sql.Alias: java.lang.String toAliasString(java.lang.String)> columnAlias = (java.lang.String) $stack21
$stack21 <org.h2.engine.Database: void addSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack21 = l0.<org.h2.command.ddl.CreateSequence: org.h2.engine.Session session>
expression <org.hibernate.envers.tools.query.QueryBuilder: void build(java.lang.StringBuilder,java.util.Map)> expression = $stack6
$stack7 <org.hibernate.envers.entities.mapper.relation.query.RelationQueryGenerator: org.hibernate.Query getQuery(org.hibernate.envers.reader.AuditReaderImplementor,java.lang.Object,java.lang.Number)> $stack7 = this.<org.hibernate.envers.entities.mapper.relation.lazy.initializor.AbstractCollectionInitializor: org.hibernate.envers.reader.AuditReaderImplementor versionsReader>
$stack9 <org.h2.engine.Database: org.h2.engine.User findUser(java.lang.String)> $stack9 = l0.<org.h2.command.ddl.CreateRole: java.lang.String roleName>
$stack11 <org.h2.engine.Database: org.h2.engine.Role findRole(java.lang.String)> $stack11 = l0.<org.h2.command.ddl.CreateRole: java.lang.String roleName>
$stack16 <org.h2.engine.Database: void addDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack16 = l0.<org.h2.command.ddl.CreateRole: org.h2.engine.Session session>
$stack4 <org.hypergraphdb.query.cond2qry.AndToQuery$BySizeComparator: int compare(org.hypergraphdb.query.cond2qry.QueryMetaData,org.hypergraphdb.query.cond2qry.QueryMetaData)> $stack4 = (org.hypergraphdb.query.cond2qry.QueryMetaData) x0
l7 <org.h2.fulltext.FullText: java.lang.String quoteSQL(java.lang.Object,int)> l7 = l1[l6]
$stack5 <me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery: java.lang.String access$000(me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery)> $stack5 = this.<me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery this$0>
$stack7 <me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery: me.prettyprint.hector.api.Serializer access$200(me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery)> $stack7 = this.<me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery this$0>
$stack9 <me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery: java.lang.Object access$100(me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery)> $stack9 = this.<me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery this$0>
$stack13 <me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery: me.prettyprint.hector.api.Serializer access$400(me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery)> $stack13 = this.<me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery this$0>
$stack15 <me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery: java.lang.Object access$300(me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery)> $stack15 = this.<me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery this$0>
$stack22 <me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery: me.prettyprint.hector.api.Serializer access$500(me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery)> $stack22 = this.<me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery this$0>
$stack24 <me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery: me.prettyprint.hector.api.Serializer access$600(me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery)> $stack24 = this.<me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSubSliceQuery this$0>
$stack10 <org.h2.engine.Database: org.h2.schema.Schema findSchema(java.lang.String)> $stack10 = virtualinvoke l1.<org.h2.engine.Session: java.lang.String getCurrentSchemaName()>()
$stack10 <org.h2.engine.Database: org.h2.schema.Schema findSchema(java.lang.String)> $stack10 = l0.<org.h2.expression.ExpressionColumn: java.lang.String tableAlias>
l2 <org.h2.engine.Database: boolean areEqual(org.h2.value.Value,org.h2.value.Value)> l2 = interfaceinvoke $stack7.<org.h2.table.ColumnResolver: org.h2.value.Value getValue(org.h2.table.Column)>($stack6)
$stack4 <org.h2.util.JdbcUtils: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> $stack4 = l0.<org.h2.table.TableLinkConnection: java.lang.String driver>
$stack1 <org.hypergraphdb.query.AtomTypeCondition: org.hypergraphdb.HGHandle getTypeHandle(org.hypergraphdb.HyperGraph)> $stack1 = this.<org.hypergraphdb.query.cond2qry.ToQueryMap$3$1: org.hypergraphdb.HyperGraph val$graph>
$stack8 <org.apache.hadoop.hive.serde2.io.TimestampWritable: void set(java.sql.Timestamp)> $stack8 = virtualinvoke t.<org.apache.hadoop.hive.serde2.io.TimestampWritable: java.sql.Timestamp getTimestamp()>()
$stack3 <org.apache.hadoop.hive.serde2.io.TimestampWritable: void convertTimestampToBytes(java.sql.Timestamp,byte[],int)> $stack3 = this.<org.apache.hadoop.hive.serde2.io.TimestampWritable: java.sql.Timestamp timestamp>
nanos <java.sql.Timestamp: void setNanos(int)> nanos = virtualinvoke this.<org.apache.hadoop.hive.serde2.io.TimestampWritable: int getNanos()>()
$stack6 <java.sql.Timestamp: void setTime(long)> $stack6 = seconds * 1000L
$stack1 <org.apache.hadoop.hive.serde2.io.TimestampWritable: java.sql.Timestamp doubleToTimestamp(double)> $stack1 = (double) f
nanos <java.sql.Timestamp: void setNanos(int)> nanos = virtualinvoke $stack13.<java.math.BigDecimal: int intValue()>()
nanos <java.sql.Timestamp: void setNanos(int)> nanos = virtualinvoke bd.<java.math.BigDecimal: int intValue()>()
$stack8 <java.sql.Timestamp: void setTime(long)> $stack8 = $stack7 * 1000L
$stack10 <java.sql.Timestamp: void setNanos(int)> $stack10 = staticinvoke <org.apache.hadoop.hive.serde2.io.TimestampWritable: int getNanos(byte[],int)>(bytes, $stack9)
t <org.apache.hadoop.hive.serde2.io.TimestampWritable: void setTimestamp(java.sql.Timestamp,byte[],int)> t = $stack3
$stack6 <net.sf.hibernate.sql.Alias: java.lang.String toAliasString(java.lang.String)> $stack6 = virtualinvoke $stack4.<net.sf.hibernate.mapping.Table: java.lang.String getName()>()
$stack20 <org.h2.value.ValueResultSet: org.h2.value.ValueResultSet get(java.sql.ResultSet)> $stack20 = specialinvoke l0.<org.h2.expression.TableFunction: org.h2.tools.SimpleResultSet getSimpleResultSet(org.h2.result.LocalResult,int)>(l8#4, 2147483647)
$stack22 <org.h2.value.DataType: int convertTypeToSQLType(int)> $stack22 = virtualinvoke l1.<org.h2.result.LocalResult: int getColumnType(int)>(l5)
$stack4 <org.hypergraphdb.query.TypedValueCondition: org.hypergraphdb.HGHandle getTypeHandle(org.hypergraphdb.HyperGraph)> $stack4 = this.<org.hypergraphdb.query.cond2qry.TypedValueToQuery$Query: org.hypergraphdb.HyperGraph graph>
$stack21 <net.sf.hibernate.sql.Select: net.sf.hibernate.sql.Select setSelectClause(java.lang.String)> $stack21 = virtualinvoke $stack20.<java.lang.StringBuffer: java.lang.String toString()>()
$stack32 <net.sf.hibernate.sql.Select: net.sf.hibernate.sql.Select setFromClause(java.lang.String)> $stack32 = virtualinvoke $stack31.<java.lang.StringBuffer: java.lang.String toString()>()
$stack35 <net.sf.hibernate.sql.Select: net.sf.hibernate.sql.Select setOuterJoins(java.lang.String,java.lang.String)> $stack35 = virtualinvoke ojf.<net.sf.hibernate.sql.JoinFragment: java.lang.String toFromFragmentString()>()
l9 <java.sql.PreparedStatement: void setInt(int,int)> l9 = 3
l9#6 <java.sql.PreparedStatement: void setInt(int,int)> l9#6 = l9 + 1
l9 <java.sql.PreparedStatement: void setInt(int,int)> l9 = l9#6 + 1
$stack170 <org.hibernate.mapping.Collection: void setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> $stack170 = virtualinvoke $stack169.<java.lang.String: java.lang.String trim()>()
$stack161 <org.hibernate.mapping.Collection: void setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> $stack161 = interfaceinvoke sqlUpdate.<org.hibernate.annotations.SQLUpdate: java.lang.String sql()>()
$stack153 <org.hibernate.mapping.Collection: void setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> $stack153 = interfaceinvoke sqlDelete.<org.hibernate.annotations.SQLDelete: java.lang.String sql()>()
$stack145 <org.hibernate.mapping.Collection: void setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)> $stack145 = interfaceinvoke sqlDeleteAll.<org.hibernate.annotations.SQLDeleteAll: java.lang.String sql()>()
connection <net.sf.hibernate.connection.ConnectionProvider: void closeConnection(java.sql.Connection)> connection = null
connection <net.sf.hibernate.connection.ConnectionProvider: void closeConnection(java.sql.Connection)> connection = interfaceinvoke connectionProvider.<net.sf.hibernate.connection.ConnectionProvider: java.sql.Connection getConnection()>()
$stack63 <java.sql.Statement: int executeUpdate(java.lang.String)> $stack63 = $stack62[i]
$stack36 <java.sql.Statement: int executeUpdate(java.lang.String)> $stack36 = $stack35[i]
propertyName <org.hibernate.envers.tools.query.Parameters: void addNotNullRestriction(java.lang.String,boolean)> propertyName = interfaceinvoke $stack7.<org.hibernate.envers.query.property.PropertyNameGetter: java.lang.String get(org.hibernate.envers.configuration.AuditConfiguration)>(auditCfg)
$stack33 <org.h2.engine.Database: void update(org.h2.engine.Session,org.h2.engine.DbObject)> $stack33 = l0.<org.h2.command.ddl.Analyze: org.h2.engine.Session session>
$stack2 <org.hypergraphdb.ResultSizeEstimation: long countResultSet(org.hypergraphdb.HGQuery)> $stack2 = staticinvoke <org.hypergraphdb.HGQuery: org.hypergraphdb.HGQuery make(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)>(graph, cond)
l2 <org.h2.engine.Database: org.h2.store.FileStore openFile(java.lang.String,java.lang.String,boolean)> l2 = virtualinvoke l1.<org.h2.engine.Database: java.lang.String createTempFile()>()
$stack3 <org.h2.table.TableLink: void reusePreparedStatement(java.sql.PreparedStatement,java.lang.String)> $stack3 = l0.<org.h2.index.LinkedCursor: java.sql.PreparedStatement prep>
$stack13 <org.h2.value.DataType: org.h2.value.Value readValue(org.h2.engine.SessionInterface,java.sql.ResultSet,int,int)> $stack13 = l0.<org.h2.index.LinkedCursor: org.h2.engine.Session session>
$stack3 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0)
qb <org.hibernate.envers.strategy.AuditStrategy: void addAssociationAtRevisionRestriction(org.hibernate.envers.tools.query.QueryBuilder,java.lang.String,java.lang.String,boolean,org.hibernate.envers.entities.mapper.relation.MiddleIdData,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.hibernate.envers.entities.mapper.relation.MiddleComponentData[])> qb = $stack14
rootParameters <org.hibernate.envers.entities.mapper.id.IdMapper: void addNamedIdEqualsToQuery(org.hibernate.envers.tools.query.Parameters,java.lang.String,boolean)> rootParameters = virtualinvoke qb.<org.hibernate.envers.tools.query.QueryBuilder: org.hibernate.envers.tools.query.Parameters getRootParameters()>()
$stack22 <org.hibernate.envers.tools.query.Parameters: void addWhereWithNamedParam(java.lang.String,java.lang.String,java.lang.String)> $stack22 = virtualinvoke verEntCfg.<org.hibernate.envers.configuration.AuditEntitiesConfiguration: java.lang.String getRevisionTypePropName()>()
sb <org.hibernate.envers.tools.query.QueryBuilder: void build(java.lang.StringBuilder,java.util.Map)> sb = $stack23
$stack8 <org.hibernate.Session: org.hibernate.Query createQuery(java.lang.String)> $stack8 = this.<org.hibernate.envers.entities.mapper.relation.query.OneEntityQueryGenerator: java.lang.String queryString>
query <org.hibernate.envers.entities.mapper.id.QueryParameterData: void setParameterValue(org.hibernate.Query)> query = interfaceinvoke $stack7.<org.hibernate.Session: org.hibernate.Query createQuery(java.lang.String)>($stack8)
$stack5 <java.sql.Timestamp: void setNanos(int)> $stack5 = virtualinvoke l0.<java.sql.Timestamp: int getNanos()>()
$stack2 <org.h2.value.ValueDate: org.h2.value.ValueDate get(java.sql.Date)> $stack2 = new java.sql.Date
$stack2 <org.h2.value.ValueTime: org.h2.value.ValueTime get(java.sql.Time)> $stack2 = new java.sql.Time
l2 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp getNoCopy(java.sql.Timestamp)> l2 = $stack3
$stack5 <java.sql.Timestamp: void setNanos(int)> $stack5 = virtualinvoke l0.<java.sql.Timestamp: int getNanos()>()
l12 <java.sql.Timestamp: void setNanos(int)> l12 = 0
l12 <java.sql.Timestamp: void setNanos(int)> l12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(l16#75)
$stack15 <org.h2.jdbc.JdbcConnection: java.sql.PreparedStatement prepareAutoCloseStatement(java.lang.String)> $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>()
$stack27 <java.sql.PreparedStatement: void setString(int,java.lang.String)> $stack27 = 4 + l7
$stack16 <org.h2.jdbc.JdbcConnection: java.sql.PreparedStatement prepareAutoCloseStatement(java.lang.String)> $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>()
$stack9 <org.h2.engine.Database: org.h2.engine.UserAggregate findAggregate(java.lang.String)> $stack9 = l0.<org.h2.command.ddl.CreateAggregate: java.lang.String name>
$stack14 <org.h2.engine.Database: org.h2.engine.FunctionAlias findFunctionAlias(java.lang.String)> $stack14 = l0.<org.h2.command.ddl.CreateAggregate: java.lang.String name>
$stack21 <org.h2.engine.Database: void addDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack21 = l0.<org.h2.command.ddl.CreateAggregate: org.h2.engine.Session session>
$stack4 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.AtomValueCondition eq(java.lang.Object)> $stack4 = new org.hypergraphdb.type.Slot
propertyName <org.hibernate.envers.tools.query.Parameters: void addWhereWithParam(java.lang.String,java.lang.String,java.lang.Object)> propertyName = interfaceinvoke $stack8.<org.hibernate.envers.query.property.PropertyNameGetter: java.lang.String get(org.hibernate.envers.configuration.AuditConfiguration)>(auditCfg)
$stack14 <org.hibernate.envers.query.AuditQueryCreator: org.hibernate.envers.query.AuditQuery forEntitiesModifiedAtRevision(java.lang.Class,java.lang.String,java.lang.Number)> $stack14 = (java.lang.Class) $stack13
$stack15 <org.hibernate.envers.query.AuditQueryCreator: org.hibernate.envers.query.AuditQuery forEntitiesModifiedAtRevision(java.lang.Class,java.lang.String,java.lang.Number)> $stack15 = (java.lang.Class) $stack14
$stack19 <org.hibernate.envers.query.AuditQuery: org.hibernate.envers.query.AuditQuery add(org.hibernate.envers.query.criteria.AuditCriterion)> $stack19 = new org.hibernate.envers.query.criteria.RevisionTypeAuditExpression
$stack24 <org.hibernate.envers.query.AuditQueryCreator: org.hibernate.envers.query.AuditQuery forEntitiesModifiedAtRevision(java.lang.Class,java.lang.String,java.lang.Number)> $stack24 = (java.lang.Class) $stack23
$stack28 <org.hibernate.envers.query.AuditQuery: org.hibernate.envers.query.AuditQuery add(org.hibernate.envers.query.criteria.AuditCriterion)> $stack28 = new org.hibernate.envers.query.criteria.RevisionTypeAuditExpression
session <org.hibernate.envers.revisioninfo.RevisionInfoQueryCreator: org.hibernate.Criteria getRevisionsQuery(org.hibernate.Session,java.util.Set)> session = interfaceinvoke $stack11.<org.hibernate.envers.reader.AuditReaderImplementor: org.hibernate.Session getSession()>()
$stack9 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.ColumnQuery createColumnQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack9 = this.<me.prettyprint.cassandra.dao.SimpleCassandraDao: me.prettyprint.hector.api.Keyspace keyspace>
$stack13 <me.prettyprint.hector.api.query.ColumnQuery: me.prettyprint.hector.api.query.ColumnQuery setColumnFamily(java.lang.String)> $stack13 = this.<me.prettyprint.cassandra.dao.SimpleCassandraDao: java.lang.String columnFamilyName>
$stack15 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.MultigetSliceQuery createMultigetSliceQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack15 = this.<me.prettyprint.cassandra.dao.SimpleCassandraDao: me.prettyprint.hector.api.Keyspace keyspace>
$stack17 <me.prettyprint.hector.api.query.MultigetSliceQuery: me.prettyprint.hector.api.query.MultigetSliceQuery setColumnFamily(java.lang.String)> $stack17 = this.<me.prettyprint.cassandra.dao.SimpleCassandraDao: java.lang.String columnFamilyName>
$stack20 <me.prettyprint.hector.api.query.MultigetSliceQuery: me.prettyprint.hector.api.query.MultigetSliceQuery setColumnNames(java.lang.Object[])> $stack20 = newarray (java.lang.String)[1]
$stack47 <java.sql.Connection: void setTransactionIsolation(int)> $stack47 = virtualinvoke $stack46.<java.lang.Integer: int intValue()>()
$stack13 <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.util.Properties)> $stack13 = this.<net.sf.hibernate.connection.DriverManagerConnectionProvider: java.lang.String url>
$stack34 <java.sql.Connection: void setTransactionIsolation(int)> $stack34 = virtualinvoke $stack33.<java.lang.Integer: int intValue()>()
$stack25 <java.sql.DatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> $stack25 = interfaceinvoke $stack24.<java.sql.Connection: java.lang.String getCatalog()>()
$stack27 <java.sql.DatabaseMetaData: java.sql.ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String)> $stack27 = interfaceinvoke $stack26.<java.sql.Connection: java.lang.String getCatalog()>()
$stack33 <java.sql.DatabaseMetaData: java.sql.ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)> $stack33 = interfaceinvoke $stack32.<java.sql.Connection: java.lang.String getCatalog()>()
$stack10 <java.sql.DatabaseMetaData: java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> $stack10 = interfaceinvoke $stack9.<java.sql.Connection: java.lang.String getCatalog()>()
x <java.sql.ResultSetMetaData: java.lang.String getColumnLabel(int)> x = 1
x <java.sql.ResultSetMetaData: java.lang.String getColumnLabel(int)> x = x + 1
$stack24 <java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)> $stack24 = specialinvoke this.<org.vivoweb.harvester.fetch.JDBCFetch: java.lang.String buildSelect(java.lang.String)>(tableName)
rs <org.vivoweb.harvester.fetch.JDBCFetch: java.util.List getResultSetFields(java.sql.ResultSet)> rs = interfaceinvoke $stack23.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>($stack24)
idField <java.sql.ResultSet: java.lang.String getString(java.lang.String)> idField = (java.lang.String) $stack147
dataField <java.sql.ResultSet: java.lang.String getString(java.lang.String)> dataField = (java.lang.String) $stack110
dataField <java.sql.ResultSet: java.lang.String getString(java.lang.String)> dataField = (java.lang.String) $stack84
$stack1 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack1 = l0.<org.h2.value.ValueStringBase: java.lang.String value>
$stack23 <org.h2.engine.Database: org.h2.schema.Schema getSchema(java.lang.String)> $stack23 = virtualinvoke $stack22.<org.h2.engine.Session: java.lang.String getCurrentSchemaName()>()
$stack32 <org.h2.table.TableView: org.h2.command.dml.Query recompileQuery(org.h2.engine.Session)> $stack32 = l0.<org.h2.command.ddl.CreateView: org.h2.engine.Session session>
$stack34 <org.h2.engine.Database: void addSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack34 = l0.<org.h2.command.ddl.CreateView: org.h2.engine.Session session>
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = $stack342
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>($stack339)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>($stack336)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>($stack333)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>($stack330)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>($stack327)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>($stack321)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>($stack316)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>($stack313)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>($stack310)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>($stack307)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>($stack304)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>(3.141592653589793)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>($stack300)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>($stack293)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>($stack290)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack287)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>($stack285)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>($stack282)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDouble: org.h2.value.ValueDouble get(double)>($stack279)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueBytes: org.h2.value.ValueBytes getNoCopy(byte[])>($stack276)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueBytes: org.h2.value.ValueBytes getNoCopy(byte[])>($stack273)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>(0)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueUuid: org.h2.value.ValueUuid getNewRandom()>()
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = <org.h2.value.ValueNull: org.h2.value.ValueNull INSTANCE>
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack267)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueLong: org.h2.value.ValueLong get(long)>($stack263)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack259)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueLong: org.h2.value.ValueLong get(long)>($stack255)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueLong: org.h2.value.ValueLong get(long)>($stack238)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = <org.h2.value.ValueNull: org.h2.value.ValueNull INSTANCE>
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = l9
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack251)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack244)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack241)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack234)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack231)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack227)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack222)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack219)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack216)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueBytes: org.h2.value.ValueBytes getNoCopy(byte[])>($stack213)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack210)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack207)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack204)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack201)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack199)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack189)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack184)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack181)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack178)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack175)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack172)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack169)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack165)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack151)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack145)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack142)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack139)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack136)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack133)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack130)
$stack195 <org.h2.value.ValueDate: org.h2.value.ValueDate get(java.sql.Date)> $stack195 = new java.sql.Date
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueDate: org.h2.value.ValueDate get(java.sql.Date)>($stack195)
$stack192 <org.h2.value.ValueTime: org.h2.value.ValueTime get(java.sql.Time)> $stack192 = new java.sql.Time
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueTime: org.h2.value.ValueTime get(java.sql.Time)>($stack192)
$stack153 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp getNoCopy(java.sql.Timestamp)> $stack153 = new java.sql.Timestamp
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = l5#14
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack127)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack124)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = virtualinvoke l1.<org.h2.engine.Session: org.h2.value.Value getLastIdentity()>()
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueBoolean: org.h2.value.ValueBoolean get(boolean)>($stack120)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueBoolean: org.h2.value.ValueBoolean get(boolean)>($stack118)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = $stack116
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack112)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = l2#18
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack53)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack50)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack47)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>($stack44)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack42)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = $stack111
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = virtualinvoke l6#24.<org.h2.value.Value: org.h2.value.Value convertTo(int)>($stack98)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = l2
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = virtualinvoke l6#24.<org.h2.value.Value: org.h2.value.Value convertTo(int)>($stack84)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = <org.h2.value.ValueNull: org.h2.value.ValueNull INSTANCE>
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = l6#24
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = l6#24
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = l6#24
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = null
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = virtualinvoke $stack75.<org.h2.expression.Expression: org.h2.value.Value getValue(org.h2.engine.Session)>(l1)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = $stack67
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = <org.h2.value.ValueNull: org.h2.value.ValueNull INSTANCE>
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = l7#38[$stack62]
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = <org.h2.value.ValueNull: org.h2.value.ValueNull INSTANCE>
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueInt: org.h2.value.ValueInt get(int)>($stack40)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = <org.h2.value.ValueNull: org.h2.value.ValueNull INSTANCE>
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = staticinvoke <org.h2.value.ValueBoolean: org.h2.value.ValueBoolean get(boolean)>($stack16)
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = virtualinvoke l1.<org.h2.engine.Session: org.h2.value.Value getTransactionId()>()
l4 <org.h2.engine.Database: int compareTypeSave(org.h2.value.Value,org.h2.value.Value)> l4 = null
l3#2 <org.h2.engine.Database: boolean areEqual(org.h2.value.Value,org.h2.value.Value)> l3#2 = specialinvoke l0.<org.h2.expression.Function: org.h2.value.Value getNullOrValue(org.h2.engine.Session,org.h2.expression.Expression[],int)>(l1, l2, 0)
l11#11 <org.h2.tools.Csv: java.sql.ResultSet read(java.lang.String,java.lang.String[],java.lang.String)> l11#11 = null
l11#11 <org.h2.tools.Csv: java.sql.ResultSet read(java.lang.String,java.lang.String[],java.lang.String)> l11#11 = virtualinvoke l5.<org.h2.value.Value: java.lang.String getString()>()
l11#11 <org.h2.tools.Csv: java.sql.ResultSet read(java.lang.String,java.lang.String[],java.lang.String)> l11#11 = $stack267
l11#11 <org.h2.tools.Csv: java.sql.ResultSet read(java.lang.String,java.lang.String[],java.lang.String)> l11#11 = virtualinvoke l3#2.<org.h2.value.Value: java.lang.String getString()>()
l11#11 <org.h2.tools.Csv: java.sql.ResultSet read(java.lang.String,java.lang.String[],java.lang.String)> l11#11 = $stack223
l11#11 <org.h2.tools.Csv: java.sql.ResultSet read(java.lang.String,java.lang.String[],java.lang.String)> l11#11 = virtualinvoke l5.<org.h2.value.Value: java.lang.String getString()>()
$stack200 <org.h2.expression.Function: java.sql.Timestamp dateadd(java.lang.String,int,java.sql.Timestamp)> $stack200 = virtualinvoke l3#2.<org.h2.value.Value: java.lang.String getString()>()
$stack203 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp getNoCopy(java.sql.Timestamp)> $stack203 = staticinvoke <org.h2.expression.Function: java.sql.Timestamp dateadd(java.lang.String,int,java.sql.Timestamp)>($stack200, $stack201, $stack202)
$stack195 <org.h2.expression.Function: long datediff(java.lang.String,java.sql.Timestamp,java.sql.Timestamp)> $stack195 = virtualinvoke l3#2.<org.h2.value.Value: java.lang.String getString()>()
l11#11 <org.h2.tools.Csv: java.sql.ResultSet read(java.lang.String,java.lang.String[],java.lang.String)> l11#11 = $stack177
l11#11 <org.h2.tools.Csv: java.sql.ResultSet read(java.lang.String,java.lang.String[],java.lang.String)> l11#11 = $stack158
$stack164 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp getNoCopy(java.sql.Timestamp)> $stack164 = new java.sql.Timestamp
l11#11 <org.h2.tools.Csv: java.sql.ResultSet read(java.lang.String,java.lang.String[],java.lang.String)> l11#11 = virtualinvoke l3#2.<org.h2.value.Value: java.lang.String getString()>()
$stack119 <org.h2.value.ValueResultSet: org.h2.value.ValueResultSet get(java.sql.ResultSet)> $stack119 = virtualinvoke l19.<org.h2.tools.Csv: java.sql.ResultSet read(java.lang.String,java.lang.String[],java.lang.String)>(l11#11, l21, l13#22)
l11#125 <org.h2.tools.Csv: int write(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String)> l11#125 = virtualinvoke l1.<org.h2.engine.Session: org.h2.jdbc.JdbcConnection createConnection(boolean)>(0)
l12#126 <org.h2.value.ValueResultSet: org.h2.value.ValueResultSet get(java.sql.ResultSet)> l12#126 = staticinvoke <org.h2.table.LinkSchema: java.sql.ResultSet linkSchema(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(l11#125, $stack58, $stack59, $stack60, $stack61, $stack62, $stack63)
l11#125 <org.h2.tools.Csv: int write(java.sql.Connection,java.lang.String,java.lang.String,java.lang.String)> l11#125 = virtualinvoke l1.<org.h2.engine.Session: org.h2.jdbc.JdbcConnection createConnection(boolean)>(0)
l11#11 <org.h2.tools.Csv: java.sql.ResultSet read(java.lang.String,java.lang.String[],java.lang.String)> l11#11 = virtualinvoke l3#2.<org.h2.value.Value: java.lang.String getString()>()
l4 <org.h2.engine.Database: org.h2.schema.Schema getSchema(java.lang.String)> l4 = virtualinvoke l9.<org.h2.expression.ExpressionColumn: java.lang.String getOriginalTableAliasName()>()
l4 <org.h2.engine.Database: org.h2.schema.Schema getSchema(java.lang.String)> l4 = virtualinvoke l1.<org.h2.engine.Session: java.lang.String getCurrentSchemaName()>()
l4 <org.h2.engine.Database: org.h2.schema.Schema getSchema(java.lang.String)> l4 = staticinvoke <org.h2.util.StringUtils: java.lang.String toUpperEnglish(java.lang.String)>(l4)
l4 <org.h2.engine.Database: org.h2.schema.Schema getSchema(java.lang.String)> l4 = virtualinvoke l2.<org.h2.value.Value: java.lang.String getString()>()
$stack16 <java.sql.Timestamp: void setNanos(int)> $stack16 = $stack15 + l5
l3 <org.h2.tools.Csv: java.sql.ResultSet read(java.lang.String,java.lang.String[],java.lang.String)> l3 = virtualinvoke $stack17.<org.h2.value.Value: java.lang.String getString()>()
l12 <org.h2.value.ValueResultSet: org.h2.value.ValueResultSet getCopy(java.sql.ResultSet,int)> l12 = virtualinvoke l9.<org.h2.tools.Csv: java.sql.ResultSet read(java.lang.String,java.lang.String[],java.lang.String)>(l3, l11, l5)
rootParameters <org.hibernate.envers.entities.mapper.id.IdMapper: void addNamedIdEqualsToQuery(org.hibernate.envers.tools.query.Parameters,java.lang.String,boolean)> rootParameters = virtualinvoke qb.<org.hibernate.envers.tools.query.QueryBuilder: org.hibernate.envers.tools.query.Parameters getRootParameters()>()
$stack20 <org.hibernate.envers.tools.query.Parameters: void addWhereWithNamedParam(java.lang.String,boolean,java.lang.String,java.lang.String)> $stack20 = virtualinvoke verEntCfg.<org.hibernate.envers.configuration.AuditEntitiesConfiguration: java.lang.String getRevisionTypePropName()>()
sb <org.hibernate.envers.tools.query.QueryBuilder: void build(java.lang.StringBuilder,java.util.Map)> sb = $stack21
$stack8 <org.hibernate.Session: org.hibernate.Query createQuery(java.lang.String)> $stack8 = this.<org.hibernate.envers.entities.mapper.relation.query.OneAuditEntityQueryGenerator: java.lang.String queryString>
query <org.hibernate.envers.entities.mapper.id.QueryParameterData: void setParameterValue(org.hibernate.Query)> query = interfaceinvoke $stack7.<org.hibernate.Session: org.hibernate.Query createQuery(java.lang.String)>($stack8)
$stack22 <org.hibernate.envers.entities.mapper.id.IdMapper: void addIdEqualsToQuery(org.hibernate.envers.tools.query.Parameters,java.lang.Object,java.lang.String,boolean)> $stack22 = virtualinvoke qb.<org.hibernate.envers.tools.query.QueryBuilder: org.hibernate.envers.tools.query.Parameters getRootParameters()>()
$stack26 <org.hibernate.Query: org.hibernate.Query setLockOptions(org.hibernate.LockOptions)> $stack26 = <org.hibernate.LockOptions: org.hibernate.LockOptions UPGRADE>
$stack49 <org.hibernate.envers.tools.query.Parameters: void addWhereWithParam(java.lang.String,boolean,java.lang.String,java.lang.Object)> $stack49 = virtualinvoke $stack48.<java.lang.StringBuilder: java.lang.String toString()>()
$stack20 <org.hibernate.Query: org.hibernate.Query setLockOptions(org.hibernate.LockOptions)> $stack20 = <org.hibernate.LockOptions: org.hibernate.LockOptions UPGRADE>
$stack5 <org.hibernate.envers.tools.query.Parameters: void addWhere(java.lang.String,boolean,java.lang.String,java.lang.String,boolean)> $stack5 = virtualinvoke $stack4.<org.hibernate.envers.configuration.AuditEntitiesConfiguration: java.lang.String getRevisionEndFieldName()>()
rootParameters <org.hibernate.envers.strategy.ValidityAuditStrategy: void addRevisionRestriction(org.hibernate.envers.tools.query.Parameters,java.lang.String,java.lang.String,boolean)> rootParameters = virtualinvoke rootQueryBuilder.<org.hibernate.envers.tools.query.QueryBuilder: org.hibernate.envers.tools.query.Parameters getRootParameters()>()
rootParameters <org.hibernate.envers.strategy.ValidityAuditStrategy: void addRevisionRestriction(org.hibernate.envers.tools.query.Parameters,java.lang.String,java.lang.String,boolean)> rootParameters = virtualinvoke rootQueryBuilder.<org.hibernate.envers.tools.query.QueryBuilder: org.hibernate.envers.tools.query.Parameters getRootParameters()>()
$stack10 <org.hibernate.envers.tools.query.Parameters: void addWhereWithNamedParam(java.lang.String,boolean,java.lang.String,java.lang.String)> $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>()
$stack8 <java.sql.Connection: void setTransactionIsolation(int)> $stack8 = virtualinvoke $stack7.<java.lang.Integer: int intValue()>()
jdbcUrl <com.mchange.v2.c3p0.DataSources: javax.sql.DataSource unpooledDataSource(java.lang.String,java.util.Properties)> jdbcUrl = virtualinvoke props.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("hibernate.connection.url")
unpooled <com.mchange.v2.c3p0.DataSources: javax.sql.DataSource pooledDataSource(javax.sql.DataSource,com.mchange.v2.c3p0.PoolConfig)> unpooled = staticinvoke <com.mchange.v2.c3p0.DataSources: javax.sql.DataSource unpooledDataSource(java.lang.String,java.util.Properties)>(jdbcUrl, connectionProps)
$stack2 <com.mchange.v2.c3p0.DataSources: void destroy(javax.sql.DataSource)> $stack2 = this.<net.sf.hibernate.connection.C3P0ConnectionProvider: javax.sql.DataSource ds>
$stack22 <org.h2.engine.Database: void renameSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject,java.lang.String)> $stack22 = l0.<org.h2.command.ddl.AlterTableRename: org.h2.engine.Session session>
$stack3 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update setTableName(java.lang.String)> $stack3 = this.<net.sf.hibernate.collection.OneToManyPersister: java.lang.String qualifiedTableName>
$stack5 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update addColumns(java.lang.String[],java.lang.String)> $stack5 = this.<net.sf.hibernate.collection.OneToManyPersister: java.lang.String[] keyColumnNames>
$stack7 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update setPrimaryKeyColumnNames(java.lang.String[])> $stack7 = this.<net.sf.hibernate.collection.OneToManyPersister: java.lang.String[] keyColumnNames>
$stack15 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update addColumns(java.lang.String[],java.lang.String)> $stack15 = this.<net.sf.hibernate.collection.OneToManyPersister: java.lang.String[] indexColumnNames>
$stack12 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update setWhere(java.lang.String)> $stack12 = this.<net.sf.hibernate.collection.OneToManyPersister: java.lang.String sqlWhereString>
$stack3 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update setTableName(java.lang.String)> $stack3 = this.<net.sf.hibernate.collection.OneToManyPersister: java.lang.String qualifiedTableName>
$stack5 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update addColumns(java.lang.String[])> $stack5 = this.<net.sf.hibernate.collection.OneToManyPersister: java.lang.String[] keyColumnNames>
$stack11 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update addColumns(java.lang.String[])> $stack11 = this.<net.sf.hibernate.collection.OneToManyPersister: java.lang.String[] indexColumnNames>
$stack8 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update setPrimaryKeyColumnNames(java.lang.String[])> $stack8 = this.<net.sf.hibernate.collection.OneToManyPersister: java.lang.String[] elementColumnNames>
pkColumns <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update setPrimaryKeyColumnNames(java.lang.String[])> pkColumns = this.<net.sf.hibernate.collection.OneToManyPersister: java.lang.String[] rowSelectColumnNames>
pkColumns <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update setPrimaryKeyColumnNames(java.lang.String[])> pkColumns = staticinvoke <net.sf.hibernate.util.ArrayHelper: java.lang.String[] join(java.lang.String[],java.lang.String[])>($stack5, $stack4)
$stack8 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update setTableName(java.lang.String)> $stack8 = this.<net.sf.hibernate.collection.OneToManyPersister: java.lang.String qualifiedTableName>
$stack10 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update addColumns(java.lang.String[],java.lang.String)> $stack10 = this.<net.sf.hibernate.collection.OneToManyPersister: java.lang.String[] keyColumnNames>
$stack15 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update addColumns(java.lang.String[],java.lang.String)> $stack15 = this.<net.sf.hibernate.collection.OneToManyPersister: java.lang.String[] indexColumnNames>
st <net.sf.hibernate.collection.PersistentCollection: void writeTo(java.sql.PreparedStatement,net.sf.hibernate.collection.CollectionPersister,java.lang.Object,int,boolean)> st = null
$stack41 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)> $stack41 = virtualinvoke this.<net.sf.hibernate.collection.OneToManyPersister: java.lang.String getSQLDeleteRowString()>()
st <net.sf.hibernate.collection.PersistentCollection: void writeTo(java.sql.PreparedStatement,net.sf.hibernate.collection.CollectionPersister,java.lang.Object,int,boolean)> st = interfaceinvoke $stack40.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)>($stack41)
st <net.sf.hibernate.collection.PersistentCollection: void writeTo(java.sql.PreparedStatement,net.sf.hibernate.collection.CollectionPersister,java.lang.Object,int,boolean)> st = null
$stack19 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)> $stack19 = virtualinvoke this.<net.sf.hibernate.collection.OneToManyPersister: java.lang.String getSQLInsertRowString()>()
st <net.sf.hibernate.collection.PersistentCollection: void writeTo(java.sql.PreparedStatement,net.sf.hibernate.collection.CollectionPersister,java.lang.Object,int,boolean)> st = interfaceinvoke $stack18.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)>($stack19)
$stack27 <org.h2.engine.Database: void addSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack27 = l0.<org.h2.command.ddl.CreateTrigger: org.h2.engine.Session session>
$stack10 <org.h2.tools.Csv: java.sql.ResultSet read(java.io.Reader,java.lang.String[])> $stack10 = new java.io.InputStreamReader
$stack69 <java.sql.ResultSetMetaData: java.lang.String getColumnLabel(int)> $stack69 = i + 1
$stack30 <java.sql.Statement: boolean execute(java.lang.String)> $stack30 = virtualinvoke createTable.<java.lang.StringBuilder: java.lang.String toString()>()
$stack37 <java.sql.Statement: boolean execute(java.lang.String)> $stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.String toString()>()
$stack59 <java.sql.ResultSet: java.lang.String getString(int)> $stack59 = colLbl#8 + 1
$stack56 <java.sql.Statement: int executeUpdate(java.lang.String)> $stack56 = virtualinvoke i#7.<java.lang.StringBuilder: java.lang.String toString()>()
$stack5 <me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery: java.lang.String access$000(me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery)> $stack5 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery this$0>
$stack7 <me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery: me.prettyprint.hector.api.Serializer access$200(me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery)> $stack7 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery this$0>
$stack11 <me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery: me.prettyprint.cassandra.model.HKeyRange access$100(me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery)> $stack11 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery this$0>
$stack17 <me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery: me.prettyprint.hector.api.Serializer access$300(me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery)> $stack17 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery this$0>
$stack20 <me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery: me.prettyprint.hector.api.Serializer access$400(me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery)> $stack20 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesQuery this$0>
$stack3 <net.sf.hibernate.hql.QueryTranslator: boolean isName(java.lang.String)> $stack3 = staticinvoke <net.sf.hibernate.util.StringHelper: java.lang.String root(java.lang.String)>(token)
$stack7 <net.sf.hibernate.hql.ParserHelper: void parse(net.sf.hibernate.hql.Parser,java.lang.String,java.lang.String,net.sf.hibernate.hql.QueryTranslator)> $stack7 = this.<net.sf.hibernate.hql.OrderByParser: net.sf.hibernate.hql.PathExpressionParser pathExpressionParser>
$stack10 <net.sf.hibernate.hql.QueryTranslator: void appendOrderByToken(java.lang.String)> $stack10 = virtualinvoke $stack9.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String getWhereColumn()>()
$stack6 <net.sf.hibernate.hql.QueryTranslator: void addNamedParameter(java.lang.String)> $stack6 = virtualinvoke token.<java.lang.String: java.lang.String substring(int)>(1)
$stack3 <org.hypergraphdb.query.cond2qry.ToQueryMap: org.hypergraphdb.HGQuery toQuery(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack3 = this.<org.hypergraphdb.query.cond2qry.ToQueryMap$18$1: org.hypergraphdb.HyperGraph graph>
$stack9 <org.h2.engine.Database: org.h2.engine.FunctionAlias findFunctionAlias(java.lang.String)> $stack9 = l0.<org.h2.command.ddl.CreateFunctionAlias: java.lang.String aliasName>
$stack17 <org.h2.engine.Database: void addDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack17 = l0.<org.h2.command.ddl.CreateFunctionAlias: org.h2.engine.Session session>
$stack15 <org.h2.engine.Database: void removeSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack15 = l0.<org.h2.command.ddl.DropView: org.h2.engine.Session session>
l7 <org.h2.store.FileLister: java.util.ArrayList getDatabaseFiles(java.lang.String,java.lang.String,boolean)> l7 = l5[l6]
propertyName <org.hibernate.envers.tools.query.Parameters: void addWhere(java.lang.String,java.lang.String,org.hibernate.envers.tools.query.QueryBuilder)> propertyName = interfaceinvoke $stack9.<org.hibernate.envers.query.property.PropertyNameGetter: java.lang.String get(org.hibernate.envers.configuration.AuditConfiguration)>(auditCfg)
$stack7 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack7 = virtualinvoke cond.<org.hypergraphdb.query.PositionedIncidentCondition: org.hypergraphdb.util.Ref getTargetRef()>()
$stack38 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$200(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack38 = $stack37.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack42 <org.hypergraphdb.query.HGAtomPredicate: boolean satisfies(org.hypergraphdb.HyperGraph,org.hypergraphdb.HGHandle)> $stack42 = $stack41.<org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.HyperGraph hg>
$stack8 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$200(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack8 = $stack7.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack12 <org.hypergraphdb.query.HGAtomPredicate: boolean satisfies(org.hypergraphdb.HyperGraph,org.hypergraphdb.HGHandle)> $stack12 = $stack11.<org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.HyperGraph hg>
$stack7 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$200(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack7 = $stack6.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack53 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$200(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack53 = $stack52.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack58 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$200(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack58 = $stack57.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack64 <org.hypergraphdb.query.HGAtomPredicate: boolean satisfies(org.hypergraphdb.HyperGraph,org.hypergraphdb.HGHandle)> $stack64 = $stack61.<org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.HyperGraph hg>
$stack5 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$200(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack5 = $stack4.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack24 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$200(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack24 = $stack23.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack27 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$200(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack27 = $stack26.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack33 <org.hypergraphdb.query.HGAtomPredicate: boolean satisfies(org.hypergraphdb.HyperGraph,org.hypergraphdb.HGHandle)> $stack33 = $stack30.<org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.HyperGraph hg>
$stack3 <org.hypergraphdb.query.cond2qry.ToQueryMap$5: org.hypergraphdb.HGQuery makeQuery(org.hypergraphdb.HyperGraph,java.lang.Object,org.hypergraphdb.query.ComparisonOperator)> $stack3 = this.<org.hypergraphdb.query.cond2qry.ToQueryMap$5$1: org.hypergraphdb.HyperGraph graph>
$stack3 <me.prettyprint.cassandra.model.thrift.ThriftColumnQuery: me.prettyprint.hector.api.Serializer access$100(me.prettyprint.cassandra.model.thrift.ThriftColumnQuery)> $stack3 = this.<me.prettyprint.cassandra.model.thrift.ThriftColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftColumnQuery this$0>
$stack5 <me.prettyprint.cassandra.model.thrift.ThriftColumnQuery: java.lang.Object access$000(me.prettyprint.cassandra.model.thrift.ThriftColumnQuery)> $stack5 = this.<me.prettyprint.cassandra.model.thrift.ThriftColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftColumnQuery this$0>
$stack8 <me.prettyprint.cassandra.model.thrift.ThriftColumnQuery: java.lang.String access$200(me.prettyprint.cassandra.model.thrift.ThriftColumnQuery)> $stack8 = this.<me.prettyprint.cassandra.model.thrift.ThriftColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftColumnQuery this$0>
$stack10 <me.prettyprint.cassandra.model.thrift.ThriftColumnQuery: java.lang.Object access$300(me.prettyprint.cassandra.model.thrift.ThriftColumnQuery)> $stack10 = this.<me.prettyprint.cassandra.model.thrift.ThriftColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftColumnQuery this$0>
$stack12 <me.prettyprint.cassandra.model.thrift.ThriftColumnQuery: me.prettyprint.hector.api.Serializer access$400(me.prettyprint.cassandra.model.thrift.ThriftColumnQuery)> $stack12 = this.<me.prettyprint.cassandra.model.thrift.ThriftColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftColumnQuery this$0>
$stack17 <me.prettyprint.cassandra.model.thrift.ThriftColumnQuery: me.prettyprint.hector.api.Serializer access$500(me.prettyprint.cassandra.model.thrift.ThriftColumnQuery)> $stack17 = this.<me.prettyprint.cassandra.model.thrift.ThriftColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftColumnQuery this$0>
$stack19 <me.prettyprint.cassandra.model.thrift.ThriftColumnQuery: me.prettyprint.hector.api.Serializer access$600(me.prettyprint.cassandra.model.thrift.ThriftColumnQuery)> $stack19 = this.<me.prettyprint.cassandra.model.thrift.ThriftColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftColumnQuery this$0>
$stack15 <org.hypergraphdb.HGQuery$hg: java.util.List getAll(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack15 = this.<org.hypergraphdb.type.RecordType: org.hypergraphdb.HyperGraph graph>
$stack14 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.And and(org.hypergraphdb.query.HGQueryCondition[])> $stack14 = newarray (org.hypergraphdb.query.HGQueryCondition)[3]
$stack18 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.IncidentCondition incident(org.hypergraphdb.HGHandle)> $stack18 = this.<org.hypergraphdb.type.RecordType: org.hypergraphdb.HGHandle thisHandle>
$stack21 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.OrderedLinkCondition orderedLink(org.hypergraphdb.HGHandle[])> $stack21 = newarray (org.hypergraphdb.HGHandle)[2]
$stack37 <org.hypergraphdb.HGQuery$hg: java.lang.Object findOne(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack37 = this.<org.hypergraphdb.type.RecordType: org.hypergraphdb.HyperGraph graph>
$stack36 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.AtomValueCondition eq(java.lang.Object)> $stack36 = new org.hypergraphdb.type.Slot
$stack13 <org.hibernate.envers.tools.query.Parameters: void addWhere(java.lang.String,boolean,java.lang.String,java.lang.String,boolean)> $stack13 = virtualinvoke paramData.<org.hibernate.envers.entities.mapper.id.QueryParameterData: java.lang.String getProperty(java.lang.String)>(prefix1)
$stack20 <org.hibernate.envers.tools.query.Parameters: void addWhere(java.lang.String,boolean,java.lang.String,java.lang.String,boolean)> $stack20 = virtualinvoke paramData1.<org.hibernate.envers.entities.mapper.id.QueryParameterData: java.lang.String getProperty(java.lang.String)>(prefix1)
parametersToUse <org.hibernate.envers.entities.mapper.id.AbstractIdMapper: void handleNullValue(org.hibernate.envers.tools.query.Parameters,java.lang.String,boolean)> parametersToUse = specialinvoke this.<org.hibernate.envers.entities.mapper.id.AbstractIdMapper: org.hibernate.envers.tools.query.Parameters getParametersToUse(org.hibernate.envers.tools.query.Parameters,java.util.List)>(parameters, paramDatas)
$stack15 <org.hibernate.envers.tools.query.Parameters: void addWhereWithParam(java.lang.String,java.lang.String,java.lang.Object)> $stack15 = virtualinvoke paramData.<org.hibernate.envers.entities.mapper.id.QueryParameterData: java.lang.String getProperty(java.lang.String)>(prefix)
$stack13 <org.hibernate.envers.tools.query.Parameters: void addWhereWithNamedParam(java.lang.String,java.lang.String,java.lang.String)> $stack13 = virtualinvoke paramData.<org.hibernate.envers.entities.mapper.id.QueryParameterData: java.lang.String getProperty(java.lang.String)>(prefix)
$stack14 <org.h2.engine.Database: org.h2.engine.Setting findSetting(java.lang.String)> $stack14 = staticinvoke <org.h2.command.dml.SetTypes: java.lang.String getTypeName(int)>(6)
$stack3 <org.h2.engine.Database: org.h2.message.Trace getTrace(java.lang.String)> $stack3 = l0.<org.h2.engine.Session: java.lang.String traceModuleName>
$stack30 <org.h2.tools.Recover: void setDatabaseName(java.lang.String)> $stack30 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack29)
l5 <org.h2.tools.Recover: java.lang.String getSQL(org.h2.value.Value)> l5 = virtualinvoke l2.<org.h2.store.DataPage: org.h2.value.Value readValue()>()
$stack30 <org.h2.tools.Recover: void setDatabaseName(java.lang.String)> $stack30 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack29)
$stack23 <org.h2.tools.Recover: void setDatabaseName(java.lang.String)> $stack23 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack22)
$stack31 <org.h2.tools.Recover: void setDatabaseName(java.lang.String)> $stack31 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int,int)>(0, $stack30)
l5 <org.h2.tools.Recover: java.lang.String getSQL(org.h2.value.Value)> l5 = virtualinvoke l2.<org.h2.store.DataPage: org.h2.value.Value readValue()>()
$stack7 <org.h2.tools.Recover: void setDatabaseName(java.lang.String)> $stack7 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int,int)>(0, $stack6)
$stack13 <org.h2.engine.Database: void removeSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack13 = l0.<org.h2.command.ddl.DropTrigger: org.h2.engine.Session session>
className#5 <org.hibernate.reflection.java.EJB3OverridenAnnotationReader: java.util.List buildSqlResultsetMappings(org.dom4j.Element,org.hibernate.reflection.java.xml.XMLContext$Default)> className#5 = (org.dom4j.Element) $stack31
$stack2 <org.hypergraphdb.HyperGraph: org.hypergraphdb.HGSearchResult find(org.hypergraphdb.query.HGQueryCondition)> $stack2 = this.<org.hypergraphdb.query.impl.DefaultKeyBasedQuery: org.hypergraphdb.query.HGQueryCondition cond>
$stack5 <com.meterware.pseudoserver.HttpUserAgentTest$QuerySpec: boolean equals(com.meterware.pseudoserver.HttpUserAgentTest$QuerySpec)> $stack5 = (com.meterware.pseudoserver.HttpUserAgentTest$QuerySpec) o
$stack5 <me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesCounterQuery: java.lang.String access$000(me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesCounterQuery)> $stack5 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesCounterQuery this$0>
$stack7 <me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesCounterQuery: me.prettyprint.hector.api.Serializer access$200(me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesCounterQuery)> $stack7 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesCounterQuery this$0>
$stack11 <me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesCounterQuery: me.prettyprint.cassandra.model.HKeyRange access$100(me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesCounterQuery)> $stack11 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesCounterQuery this$0>
$stack17 <me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesCounterQuery: me.prettyprint.hector.api.Serializer access$300(me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesCounterQuery)> $stack17 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSlicesCounterQuery this$0>
l2 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l2 = virtualinvoke l1.<org.h2.bnf.Sentence: java.lang.String getQuery()>()
l2#17 <org.h2.engine.Database: org.h2.table.Table getDependentTable(org.h2.schema.SchemaObject,org.h2.table.Table)> l2#17 = (org.h2.schema.Sequence) $stack17
$stack1 <org.hypergraphdb.ResultSizeEstimation: long countResultSet(org.hypergraphdb.HGQuery)> $stack1 = this.<org.hypergraphdb.HGQuery$hg$6: org.hypergraphdb.HGQuery val$query>
$stack4 <org.hypergraphdb.HyperGraph: org.hypergraphdb.HGSearchResult find(org.hypergraphdb.query.HGQueryCondition)> $stack4 = this.<org.hypergraphdb.HGQuery$hg$7: org.hypergraphdb.query.HGQueryCondition val$condition>
$stack4 <org.hypergraphdb.HyperGraph: org.hypergraphdb.HGSearchResult find(org.hypergraphdb.query.HGQueryCondition)> $stack4 = this.<org.hypergraphdb.HGQuery$hg$8: org.hypergraphdb.query.HGQueryCondition val$condition>
$stack6 <org.hypergraphdb.HyperGraph: org.hypergraphdb.HGSearchResult find(org.hypergraphdb.query.HGQueryCondition)> $stack6 = this.<org.hypergraphdb.HGQuery$hg$9: org.hypergraphdb.query.HGQueryCondition val$condition>
$stack3 <org.hypergraphdb.HGQuery$hg: java.lang.Object findOne(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack3 = this.<org.hypergraphdb.HGQuery$hg$2: org.hypergraphdb.HyperGraph val$graph>
$stack4 <org.hypergraphdb.HGQuery$hg: java.lang.Object findOne(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack4 = this.<org.hypergraphdb.HGQuery$hg$3: org.hypergraphdb.HyperGraph val$graph>
$stack2 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.And and(org.hypergraphdb.query.HGQueryCondition[])> $stack2 = newarray (org.hypergraphdb.query.HGQueryCondition)[2]
$stack3 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.AtomTypeCondition type(org.hypergraphdb.HGHandle)> $stack3 = this.<org.hypergraphdb.HGQuery$hg$3: org.hypergraphdb.HGHandle val$typeHandle>
$stack4 <org.hypergraphdb.HGQuery: org.hypergraphdb.HGQuery make(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack4 = this.<org.hypergraphdb.HGQuery$hg$5: org.hypergraphdb.HyperGraph val$graph>
q <org.hypergraphdb.ResultSizeEstimation: long countResultSet(org.hypergraphdb.HGQuery)> q = (org.hypergraphdb.query.cond2qry.ExpressionBasedQuery) $stack5
$stack10 <org.hypergraphdb.ResultSizeEstimation$Counter: long count(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack10 = this.<org.hypergraphdb.HGQuery$hg$5: org.hypergraphdb.HyperGraph val$graph>
$stack10 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.AtomTypeCondition type(org.hypergraphdb.HGHandle)> $stack10 = this.<org.hypergraphdb.HGQuery$hg$1: org.hypergraphdb.HGHandle val$type>
$stack83 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.LinkCondition link(org.hypergraphdb.HGLink)> $stack83 = (org.hypergraphdb.HGLink) $stack82
$stack72 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.OrderedLinkCondition orderedLink(org.hypergraphdb.HGHandle[])> $stack72 = staticinvoke <org.hypergraphdb.util.HGUtils: org.hypergraphdb.HGHandle[] toHandleArray(org.hypergraphdb.HGLink)>($stack71)
$stack30 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.AtomValueCondition eq(java.lang.Object)> $stack30 = this.<org.hypergraphdb.HGQuery$hg$1: java.lang.Object val$instance>
$stack20 <org.hypergraphdb.HGQuery$hg: java.lang.Object findOne(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack20 = this.<org.hypergraphdb.HGQuery$hg$1: org.hypergraphdb.HyperGraph val$graph>
l3 <javax.sql.ConnectionEventListener: void connectionClosed(javax.sql.ConnectionEvent)> l3 = $stack9
l2 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l2 = null
l2 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l2 = virtualinvoke $stack11.<org.h2.jdbc.JdbcConnection: java.sql.Statement createStatement()>()
l2 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l2 = null
l2 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l2 = virtualinvoke $stack8.<org.h2.jdbc.JdbcConnection: java.sql.Statement createStatement()>()
$stack16 <java.sql.Statement: boolean execute(java.lang.String)> $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>()
l3 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l3 = null
l3 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l3 = virtualinvoke $stack7.<org.h2.jdbc.JdbcConnection: java.sql.Statement createStatement()>()
$stack13 <java.sql.Statement: boolean execute(java.lang.String)> $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()
$stack3 <java.sql.DriverManager: void registerDriver(java.sql.Driver)> $stack3 = <org.h2.Driver: org.h2.Driver INSTANCE>
$stack2 <java.sql.DriverManager: void deregisterDriver(java.sql.Driver)> $stack2 = <org.h2.Driver: org.h2.Driver INSTANCE>
$stack17 <java.sql.ResultSetMetaData: java.lang.String getColumnLabel(int)> $stack17 = l6 + 1
$stack13 <java.sql.ResultSet: java.lang.String getString(int)> $stack13 = l6 + 1
$stack5 <net.sf.hibernate.engine.Batcher: void closeQueryStatement(java.sql.PreparedStatement,java.sql.ResultSet)> $stack5 = this.<net.sf.hibernate.impl.ScrollableResultsImpl: java.sql.PreparedStatement ps>
rowNumber <java.sql.ResultSet: boolean absolute(int)> rowNumber = rowNumber + 1
$stack5 <net.sf.hibernate.hql.QueryTranslator: java.lang.Object loadSingleRow(java.sql.ResultSet,net.sf.hibernate.engine.SessionImplementor,net.sf.hibernate.engine.QueryParameters,boolean)> $stack5 = this.<net.sf.hibernate.impl.ScrollableResultsImpl: java.sql.ResultSet rs>
sQuery <com.hp.hpl.jena.query.QueryFactory: com.hp.hpl.jena.query.Query create(java.lang.String,com.hp.hpl.jena.query.Syntax)> sQuery = specialinvoke this.<org.vivoweb.harvester.score.Score: java.lang.String buildSelectQuery()>()
query <com.hp.hpl.jena.query.QueryExecutionFactory: com.hp.hpl.jena.query.QueryExecution create(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.query.Dataset)> query = staticinvoke <com.hp.hpl.jena.query.QueryFactory: com.hp.hpl.jena.query.Query create(java.lang.String,com.hp.hpl.jena.query.Syntax)>(sQuery, $stack15)
$stack46 <com.hp.hpl.jena.query.QuerySolution: com.hp.hpl.jena.rdf.model.RDFNode get(java.lang.String)> $stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.String toString()>()
$stack51 <com.hp.hpl.jena.query.QuerySolution: com.hp.hpl.jena.rdf.model.RDFNode get(java.lang.String)> $stack51 = virtualinvoke $stack50.<java.lang.StringBuilder: java.lang.String toString()>()
sparql <org.vivoweb.harvester.util.repo.JenaConnect: void executeUpdateQuery(java.lang.String)> sparql = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>()
$stack12 <net.sf.hibernate.mapping.Column: void setSqlType(java.lang.String)> $stack12 = null
$stack12 <net.sf.hibernate.mapping.Column: void setSqlType(java.lang.String)> $stack12 = interfaceinvoke typeNode.<org.dom4j.Attribute: java.lang.String getValue()>()
superModel#20 <net.sf.hibernate.cfg.Mappings: void addSQLQuery(java.lang.String,net.sf.hibernate.mapping.NamedSQLQuery)> superModel#20 = interfaceinvoke superModel#16.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("name")
superModel#20 <net.sf.hibernate.cfg.Mappings: void addSQLQuery(java.lang.String,net.sf.hibernate.mapping.NamedSQLQuery)> superModel#20 = interfaceinvoke $stack65.<org.dom4j.Attribute: java.lang.String getValue()>()
alias <net.sf.hibernate.mapping.NamedSQLQuery: void addAliasedClass(java.lang.String,java.lang.Class)> alias = interfaceinvoke $stack87.<org.dom4j.Attribute: java.lang.String getText()>()
$stack84 <net.sf.hibernate.mapping.NamedSQLQuery: void addSynchronizedTable(java.lang.String)> $stack84 = interfaceinvoke $stack83.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("table")
superModel#20 <net.sf.hibernate.cfg.Mappings: void addSQLQuery(java.lang.String,net.sf.hibernate.mapping.NamedSQLQuery)> superModel#20 = staticinvoke <net.sf.hibernate.cfg.Binder: java.lang.String getClassName(org.dom4j.Attribute,net.sf.hibernate.cfg.Mappings)>($stack44, model)
$stack116 <org.h2.value.ValueDate: org.h2.value.ValueDate get(java.sql.Date)> $stack116 = new java.sql.Date
$stack112 <org.h2.value.ValueDate: org.h2.value.ValueDate get(java.sql.Date)> $stack112 = new java.sql.Date
$stack125 <org.h2.value.ValueTime: org.h2.value.ValueTime get(java.sql.Time)> $stack125 = new java.sql.Time
$stack121 <org.h2.value.ValueTime: org.h2.value.ValueTime get(java.sql.Time)> $stack121 = new java.sql.Time
$stack107 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp getNoCopy(java.sql.Timestamp)> $stack107 = new java.sql.Timestamp
$stack103 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp getNoCopy(java.sql.Timestamp)> $stack103 = new java.sql.Timestamp
$stack42 <org.h2.value.ValueTime: java.sql.Time parseTime(java.lang.String)> $stack42 = virtualinvoke l2#41.<java.lang.String: java.lang.String trim()>()
$stack43 <org.h2.value.ValueTime: org.h2.value.ValueTime getNoCopy(java.sql.Time)> $stack43 = staticinvoke <org.h2.value.ValueTime: java.sql.Time parseTime(java.lang.String)>($stack42)
$stack39 <org.h2.value.ValueDate: java.sql.Date parseDate(java.lang.String)> $stack39 = virtualinvoke l2#41.<java.lang.String: java.lang.String trim()>()
$stack40 <org.h2.value.ValueDate: org.h2.value.ValueDate getNoCopy(java.sql.Date)> $stack40 = staticinvoke <org.h2.value.ValueDate: java.sql.Date parseDate(java.lang.String)>($stack39)
$stack36 <org.h2.value.ValueTimestamp: java.sql.Timestamp parseTimestamp(java.lang.String)> $stack36 = virtualinvoke l2#41.<java.lang.String: java.lang.String trim()>()
$stack37 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp getNoCopy(java.sql.Timestamp)> $stack37 = staticinvoke <org.h2.value.ValueTimestamp: java.sql.Timestamp parseTimestamp(java.lang.String)>($stack36)
l3 <org.h2.value.ValueResultSet: org.h2.value.ValueResultSet get(java.sql.ResultSet)> l3 = $stack14
clazz <net.sf.hibernate.impl.AbstractQueryImpl: net.sf.hibernate.type.Type guessType(java.lang.Class)> clazz = staticinvoke <net.sf.hibernate.proxy.HibernateProxyHelper: java.lang.Class getClass(java.lang.Object)>(param)
query <net.sf.hibernate.impl.AbstractQueryImpl: java.lang.String bindParameterList(java.lang.String,java.lang.String,net.sf.hibernate.engine.TypedValue,java.util.Map)> query = this.<net.sf.hibernate.impl.AbstractQueryImpl: java.lang.String queryString>
query <net.sf.hibernate.impl.AbstractQueryImpl: java.lang.String bindParameterList(java.lang.String,java.lang.String,net.sf.hibernate.engine.TypedValue,java.util.Map)> query = specialinvoke this.<net.sf.hibernate.impl.AbstractQueryImpl: java.lang.String bindParameterList(java.lang.String,java.lang.String,net.sf.hibernate.engine.TypedValue,java.util.Map)>(query, $stack11, $stack13, namedParamsCopy)
$stack5 <net.sf.hibernate.impl.AbstractQueryImpl: net.sf.hibernate.type.Type guessType(java.lang.Object)> $stack5 = interfaceinvoke $stack4.<java.util.Iterator: java.lang.Object next()>()
namedParam <net.sf.hibernate.impl.AbstractQueryImpl: net.sf.hibernate.Query setParameter(java.lang.String,java.lang.Object,net.sf.hibernate.type.Type)> namedParam = params[i]
$stack18 <net.sf.hibernate.impl.AbstractQueryImpl: net.sf.hibernate.type.Type guessType(java.lang.Class)> $stack18 = interfaceinvoke getter.<net.sf.hibernate.property.Getter: java.lang.Class getReturnType()>()
$stack1 <net.sf.hibernate.impl.AbstractQueryImpl: java.lang.Object uniqueElement(java.util.List)> $stack1 = virtualinvoke this.<net.sf.hibernate.impl.AbstractQueryImpl: java.util.List list()>()
$stack4 <javax.management.MBeanServerConnection: java.util.Set queryMBeans(javax.management.ObjectName,javax.management.QueryExp)> $stack4 = new javax.management.ObjectName
l2 <org.h2.value.DataType: int convertTypeToSQLType(int)> l2 = interfaceinvoke $stack4.<org.h2.result.ResultInterface: int getColumnType(int)>(l1#2)
$stack7 <org.hypergraphdb.query.SubsumesCondition: org.hypergraphdb.util.Ref access$000(org.hypergraphdb.query.SubsumesCondition)> $stack7 = this.<org.hypergraphdb.query.SubsumesCondition$AtomBased: org.hypergraphdb.query.SubsumesCondition this$0>
$stack10 <org.hypergraphdb.query.SubsumesCondition: org.hypergraphdb.util.Ref access$000(org.hypergraphdb.query.SubsumesCondition)> $stack10 = this.<org.hypergraphdb.query.SubsumesCondition$AtomBased: org.hypergraphdb.query.SubsumesCondition this$0>
$stack27 <org.hypergraphdb.query.SubsumesCondition: org.hypergraphdb.util.Ref access$000(org.hypergraphdb.query.SubsumesCondition)> $stack27 = this.<org.hypergraphdb.query.SubsumesCondition$AtomBased: org.hypergraphdb.query.SubsumesCondition this$0>
$stack22 <org.hypergraphdb.query.SubsumesCondition: org.hypergraphdb.util.Ref access$000(org.hypergraphdb.query.SubsumesCondition)> $stack22 = this.<org.hypergraphdb.query.SubsumesCondition$AtomBased: org.hypergraphdb.query.SubsumesCondition this$0>
$stack10 <org.h2.engine.Database: org.h2.engine.Role findRole(java.lang.String)> $stack10 = l0.<org.h2.command.ddl.DropRole: java.lang.String roleName>
$stack12 <org.h2.engine.Database: void removeDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack12 = l0.<org.h2.command.ddl.DropRole: org.h2.engine.Session session>
$stack5 <org.hypergraphdb.query.SubsumedCondition: org.hypergraphdb.util.Ref access$100(org.hypergraphdb.query.SubsumedCondition)> $stack5 = this.<org.hypergraphdb.query.SubsumedCondition$HandleBased: org.hypergraphdb.query.SubsumedCondition this$0>
$stack12 <org.hypergraphdb.query.SubsumedCondition: org.hypergraphdb.util.Ref access$100(org.hypergraphdb.query.SubsumedCondition)> $stack12 = this.<org.hypergraphdb.query.SubsumedCondition$HandleBased: org.hypergraphdb.query.SubsumedCondition this$0>
$stack19 <org.hypergraphdb.query.SubsumedCondition: org.hypergraphdb.util.Ref access$100(org.hypergraphdb.query.SubsumedCondition)> $stack19 = this.<org.hypergraphdb.query.SubsumedCondition$HandleBased: org.hypergraphdb.query.SubsumedCondition this$0>
$stack31 <org.hibernate.cfg.Ejb3Column: void setSqlType(java.lang.String)> $stack31 = interfaceinvoke discAnn.<javax.persistence.DiscriminatorColumn: java.lang.String columnDefinition()>()
$stack4 <net.sf.hibernate.type.LiteralType: java.lang.String objectToSQLString(java.lang.Object)> $stack4 = virtualinvoke value.<java.lang.Object: java.lang.String toString()>()
qb <org.hibernate.envers.strategy.AuditStrategy: void addAssociationAtRevisionRestriction(org.hibernate.envers.tools.query.QueryBuilder,java.lang.String,java.lang.String,boolean,org.hibernate.envers.entities.mapper.relation.MiddleIdData,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.hibernate.envers.entities.mapper.relation.MiddleComponentData[])> qb = $stack21
$stack22 <org.hibernate.envers.tools.query.QueryBuilder: void addFrom(java.lang.String,java.lang.String)> $stack22 = virtualinvoke referencedIdData.<org.hibernate.envers.entities.mapper.relation.MiddleIdData: java.lang.String getAuditEntityName()>()
$stack23 <org.hibernate.envers.tools.query.QueryBuilder: void addFrom(java.lang.String,java.lang.String)> $stack23 = virtualinvoke indexIdData.<org.hibernate.envers.entities.mapper.relation.MiddleIdData: java.lang.String getAuditEntityName()>()
rootParameters <org.hibernate.envers.entities.mapper.id.IdMapper: void addNamedIdEqualsToQuery(org.hibernate.envers.tools.query.Parameters,java.lang.String,boolean)> rootParameters = virtualinvoke qb.<org.hibernate.envers.tools.query.QueryBuilder: org.hibernate.envers.tools.query.Parameters getRootParameters()>()
$stack57 <org.hibernate.envers.tools.query.Parameters: void addWhereWithNamedParam(java.lang.String,java.lang.String,java.lang.String)> $stack57 = virtualinvoke verEntCfg.<org.hibernate.envers.configuration.AuditEntitiesConfiguration: java.lang.String getRevisionTypePropName()>()
$stack62 <org.hibernate.envers.tools.query.Parameters: void addWhereWithNamedParam(java.lang.String,boolean,java.lang.String,java.lang.String)> $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.String toString()>()
$stack67 <org.hibernate.envers.tools.query.Parameters: void addWhereWithNamedParam(java.lang.String,boolean,java.lang.String,java.lang.String)> $stack67 = virtualinvoke $stack66.<java.lang.StringBuilder: java.lang.String toString()>()
sb <org.hibernate.envers.tools.query.QueryBuilder: void build(java.lang.StringBuilder,java.util.Map)> sb = $stack68
$stack8 <org.hibernate.Session: org.hibernate.Query createQuery(java.lang.String)> $stack8 = this.<org.hibernate.envers.entities.mapper.relation.query.ThreeEntityQueryGenerator: java.lang.String queryString>
query <org.hibernate.envers.entities.mapper.id.QueryParameterData: void setParameterValue(org.hibernate.Query)> query = interfaceinvoke $stack7.<org.hibernate.Session: org.hibernate.Query createQuery(java.lang.String)>($stack8)
$stack6 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addColumn(java.lang.String,java.lang.String)> $stack6 = columnNames[i]
$stack4 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addColumn(java.lang.String)> $stack4 = columnNames[i]
$stack7 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addCondition(java.lang.String,java.lang.String,java.lang.String)> $stack7 = lhs[i]
$stack5 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addCondition(java.lang.String,java.lang.String)> $stack5 = lhs[i]
$stack13 <org.hypergraphdb.HyperGraph: org.hypergraphdb.HGSearchResult find(org.hypergraphdb.query.HGQueryCondition)> $stack13 = this.<org.hypergraphdb.query.AtomProjectionCondition: org.hypergraphdb.query.HGQueryCondition baseSetCondition>
l2 <org.h2.jdbcx.JdbcConnectionPool: void recycleConnection(javax.sql.PooledConnection)> l2 = (javax.sql.PooledConnection) $stack3
l2 <org.h2.jdbcx.JdbcConnectionPool: void disposeConnection(javax.sql.PooledConnection)> l2 = (javax.sql.PooledConnection) $stack3
$stack5 <me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery: java.lang.String access$000(me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery)> $stack5 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery this$0>
$stack7 <me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery: me.prettyprint.hector.api.Serializer access$200(me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery)> $stack7 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery this$0>
$stack9 <me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery: java.lang.Object access$100(me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery)> $stack9 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery this$0>
$stack16 <me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery: me.prettyprint.hector.api.Serializer access$300(me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery)> $stack16 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery this$0>
$stack18 <me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery: me.prettyprint.hector.api.Serializer access$400(me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery)> $stack18 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperSliceCounterQuery this$0>
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = l2
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(1)
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(1)
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(1)
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(1)
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(1)
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(1)
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(1)
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(2)
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(1)
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(2)
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(1)
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(2)
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(1)
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(2)
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(1)
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(1)
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(1)
l3 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l3 = virtualinvoke l3.<java.lang.String: java.lang.String substring(int)>(1)
l5#18 <org.h2.command.Prepared: java.lang.String getSQL(org.h2.expression.Expression[])> l5#18 = (org.h2.expression.Expression[]) $stack60
l5#27 <org.h2.command.Prepared: java.lang.String getSQL(org.h2.value.Value[])> l5#27 = virtualinvoke l4#26.<org.h2.result.LocalResult: org.h2.value.Value[] currentRow()>()
$stack10 <java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)> $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>()
l5 <org.h2.engine.Database: org.h2.store.FileStore openFile(java.lang.String,java.lang.String,boolean)> l5 = virtualinvoke $stack8.<org.h2.engine.Database: java.lang.String createTempFile()>()
l7 <org.h2.store.FileLister: java.lang.String getDatabaseNameFromFileName(java.lang.String)> l7 = virtualinvoke l6.<java.util.zip.ZipEntry: java.lang.String getName()>()
$stack8 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack8 = virtualinvoke ic.<org.hypergraphdb.query.IncidentCondition: org.hypergraphdb.util.Ref getTargetRef()>()
l3 <org.h2.api.Trigger: void fire(java.sql.Connection,java.lang.Object[],java.lang.Object[])> l3 = virtualinvoke l1.<org.h2.engine.Session: org.h2.jdbc.JdbcConnection createConnection(boolean)>(0)
l9#37 <org.h2.api.Trigger: void fire(java.sql.Connection,java.lang.Object[],java.lang.Object[])> l9#37 = virtualinvoke l1.<org.h2.engine.Session: org.h2.jdbc.JdbcConnection createConnection(boolean)>(0)
$stack1 <org.h2.schema.TriggerObject: java.lang.String getCreateSQLForCopy(org.h2.table.Table,java.lang.String)> $stack1 = l0.<org.h2.schema.TriggerObject: org.h2.table.Table table>
token <net.sf.hibernate.sql.Template: java.lang.String quote(java.lang.String,net.sf.hibernate.dialect.Dialect)> token = nextToken
lcToken <net.sf.hibernate.sql.Template: boolean isFunction(java.lang.String,java.lang.String,net.sf.hibernate.dialect.Dialect)> lcToken = virtualinvoke token.<java.lang.String: java.lang.String toLowerCase()>()
$stack10 <net.sf.hibernate.sql.Template: java.lang.String quote(java.lang.String,net.sf.hibernate.dialect.Dialect)> $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String trim()>()
$stack2 <org.hypergraphdb.type.javaprimitive.TimestampType: long toLong(java.sql.Timestamp)> $stack2 = (java.sql.Timestamp) x0
$stack10 <net.sf.hibernate.sql.Delete: net.sf.hibernate.sql.Delete setTableName(java.lang.String)> $stack10 = $stack9[i]
$stack13 <net.sf.hibernate.sql.Delete: net.sf.hibernate.sql.Delete setPrimaryKeyColumnNames(java.lang.String[])> $stack13 = $stack12[i]
$stack18 <net.sf.hibernate.sql.Delete: net.sf.hibernate.sql.Delete setVersionColumnName(java.lang.String)> $stack18 = virtualinvoke this.<net.sf.hibernate.persister.NormalizedEntityPersister: java.lang.String getVersionColumnName()>()
$stack14 <net.sf.hibernate.sql.Insert: net.sf.hibernate.sql.Insert setTableName(java.lang.String)> $stack14 = $stack13[j]
$stack40 <net.sf.hibernate.sql.Insert: net.sf.hibernate.sql.Insert addColumns(java.lang.String[])> $stack40 = $stack39[i]
$stack32 <net.sf.hibernate.sql.Insert: net.sf.hibernate.sql.Insert addIdentityColumn(java.lang.String)> $stack32 = $stack31[0]
$stack19 <net.sf.hibernate.sql.Insert: net.sf.hibernate.sql.Insert addColumns(java.lang.String[])> $stack19 = $stack18[j]
$stack13 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update setTableName(java.lang.String)> $stack13 = $stack12[j]
$stack16 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update setPrimaryKeyColumnNames(java.lang.String[])> $stack16 = $stack15[j]
$stack37 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update setVersionColumnName(java.lang.String)> $stack37 = virtualinvoke this.<net.sf.hibernate.persister.NormalizedEntityPersister: java.lang.String getVersionColumnName()>()
$stack31 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update addColumns(java.lang.String[])> $stack31 = $stack30[i]
$stack3 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect setTableName(java.lang.String)> $stack3 = this.<net.sf.hibernate.persister.NormalizedEntityPersister: java.lang.String qualifiedTableName>
$stack6 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addColumn(java.lang.String)> $stack6 = $stack5[0]
$stack8 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addCondition(java.lang.String[],java.lang.String)> $stack8 = specialinvoke this.<net.sf.hibernate.persister.AbstractEntityPersister: java.lang.String[] getIdentifierColumnNames()>()
$stack13 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addCondition(java.lang.String,java.lang.String)> $stack13 = virtualinvoke this.<net.sf.hibernate.persister.NormalizedEntityPersister: java.lang.String getVersionColumnName()>()
$stack33 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack33 = sql[i]
$stack27 <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> $stack27 = statements[i]
$stack67 <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> $stack67 = statements[i]
id <net.sf.hibernate.persister.NormalizedEntityPersister: int dehydrate(java.io.Serializable,java.lang.Object[],boolean[],int,java.sql.PreparedStatement,net.sf.hibernate.engine.SessionImplementor)> id = null
insertSelectSQL <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)> insertSelectSQL = $stack21
insertSelect <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> insertSelect = interfaceinvoke $stack49.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)>(insertSelectSQL)
id <net.sf.hibernate.persister.NormalizedEntityPersister: int dehydrate(java.io.Serializable,java.lang.Object[],boolean[],int,java.sql.PreparedStatement,net.sf.hibernate.engine.SessionImplementor)> id = virtualinvoke this.<net.sf.hibernate.persister.NormalizedEntityPersister: java.io.Serializable getGeneratedIdentity(java.lang.Object,net.sf.hibernate.engine.SessionImplementor,java.sql.ResultSet)>(object, session, $stack53)
$stack23 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String,boolean)> $stack23 = sql[0]
insertSelect <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> insertSelect = interfaceinvoke $stack22.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String,boolean)>($stack23, useGetGeneratedKeys)
id <net.sf.hibernate.persister.NormalizedEntityPersister: int dehydrate(java.io.Serializable,java.lang.Object[],boolean[],int,java.sql.PreparedStatement,net.sf.hibernate.engine.SessionImplementor)> id = virtualinvoke this.<net.sf.hibernate.persister.NormalizedEntityPersister: java.io.Serializable getGeneratedIdentity(java.lang.Object,net.sf.hibernate.engine.SessionImplementor,java.sql.ResultSet)>(object, session, $stack45)
$stack39 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack39 = virtualinvoke this.<net.sf.hibernate.persister.NormalizedEntityPersister: java.lang.String sqlIdentitySelect()>()
sqle#19 <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> sqle#19 = interfaceinvoke $stack38.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)>($stack39)
id <net.sf.hibernate.persister.NormalizedEntityPersister: int dehydrate(java.io.Serializable,java.lang.Object[],boolean[],int,java.sql.PreparedStatement,net.sf.hibernate.engine.SessionImplementor)> id = virtualinvoke this.<net.sf.hibernate.persister.NormalizedEntityPersister: java.io.Serializable getGeneratedIdentity(java.lang.Object,net.sf.hibernate.engine.SessionImplementor,java.sql.ResultSet)>(object, session, $stack41)
$stack31 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack31 = sql[insertSelect#23]
sqle#19 <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> sqle#19 = interfaceinvoke $stack30.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)>($stack31)
$stack41 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack41 = $stack40[i]
$stack32 <net.sf.hibernate.type.Type: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,net.sf.hibernate.engine.SessionImplementor)> $stack32 = statements[0]
$stack27 <net.sf.hibernate.type.Type: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,net.sf.hibernate.engine.SessionImplementor)> $stack27 = statements[i]
$stack25 <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> $stack25 = statements[i]
$stack68 <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> $stack68 = statements[i]
$stack38 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack38 = sql[i]
$stack32 <net.sf.hibernate.type.Type: void nullSafeSet(java.sql.PreparedStatement,java.lang.Object,int,net.sf.hibernate.engine.SessionImplementor)> $stack32 = statements[0]
$stack25 <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> $stack25 = statements[i]
$stack73 <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> $stack73 = statements[i]
$stack12 <net.sf.hibernate.sql.JoinFragment: void addJoin(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],int)> $stack12 = $stack11[i]
$stack14 <net.sf.hibernate.sql.SelectFragment: net.sf.hibernate.sql.SelectFragment addColumns(java.lang.String,java.lang.String[],java.lang.String[])> $stack14 = staticinvoke <net.sf.hibernate.persister.NormalizedEntityPersister: java.lang.String alias(java.lang.String,int)>(alias, $stack13)
subalias <net.sf.hibernate.sql.SelectFragment: net.sf.hibernate.sql.SelectFragment addFormula(java.lang.String,java.lang.String,java.lang.String)> subalias = staticinvoke <net.sf.hibernate.persister.NormalizedEntityPersister: java.lang.String alias(java.lang.String,int)>(alias, $stack35)
subalias <net.sf.hibernate.sql.SelectFragment: net.sf.hibernate.sql.SelectFragment addFormula(java.lang.String,java.lang.String,java.lang.String)> subalias = staticinvoke <net.sf.hibernate.persister.NormalizedEntityPersister: java.lang.String alias(java.lang.String,int)>(alias, $stack25)
$stack17 <net.sf.hibernate.sql.CaseFragment: net.sf.hibernate.sql.CaseFragment setReturnColumnName(java.lang.String,java.lang.String)> $stack17 = virtualinvoke this.<net.sf.hibernate.persister.NormalizedEntityPersister: java.lang.String getDiscriminatorAlias()>()
$stack10 <net.sf.hibernate.sql.CaseFragment: net.sf.hibernate.sql.CaseFragment addWhenColumnNotNull(java.lang.String,java.lang.String,java.lang.String)> $stack10 = staticinvoke <net.sf.hibernate.persister.NormalizedEntityPersister: java.lang.String alias(java.lang.String,int)>(alias, $stack9)
rootAlias <net.sf.hibernate.persister.AbstractEntityPersister: java.lang.String getSQLWhereString(java.lang.String)> rootAlias = staticinvoke <net.sf.hibernate.persister.NormalizedEntityPersister: java.lang.String alias(java.lang.String,int)>(alias, $stack9)
code <net.sf.hibernate.type.LiteralType: java.lang.String objectToSQLString(java.lang.Object)> code = (java.lang.String) $stack5
$stack9 <com.hp.hpl.jena.query.QueryExecutionFactory: com.hp.hpl.jena.query.QueryExecution create(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.query.Dataset)> $stack9 = staticinvoke <com.hp.hpl.jena.query.QueryFactory: com.hp.hpl.jena.query.Query create(java.lang.String,com.hp.hpl.jena.query.Syntax)>(queryString, $stack8)
$stack5 <com.hp.hpl.jena.query.QueryExecutionFactory: com.hp.hpl.jena.query.QueryExecution create(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.rdf.model.Model)> $stack5 = staticinvoke <com.hp.hpl.jena.query.QueryFactory: com.hp.hpl.jena.query.Query create(java.lang.String,com.hp.hpl.jena.query.Syntax)>(queryString, $stack4)
$r0 <com.hp.hpl.jena.query.ResultSetFactory: com.hp.hpl.jena.query.ResultSetRewindable copyResults(com.hp.hpl.jena.query.ResultSet)> $r0 = (com.hp.hpl.jena.query.ResultSet) rs
$stack16 <com.hp.hpl.jena.update.UpdateAction: void execute(com.hp.hpl.jena.update.UpdateRequest,com.hp.hpl.jena.query.Dataset)> $stack16 = staticinvoke <com.hp.hpl.jena.update.UpdateFactory: com.hp.hpl.jena.update.UpdateRequest create(java.lang.String)>(queryString)
out <com.hp.hpl.jena.query.ResultSetFormatter: void output(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.sparql.resultset.ResultSetFormat)> out = output
out <com.hp.hpl.jena.query.ResultSetFormatter: void output(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.sparql.resultset.ResultSetFormat)> out = <java.lang.System: java.io.PrintStream out>
query <com.hp.hpl.jena.query.QueryExecutionFactory: com.hp.hpl.jena.query.QueryExecution create(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.rdf.model.Model)> query = staticinvoke <com.hp.hpl.jena.query.QueryFactory: com.hp.hpl.jena.query.Query create(java.lang.String,com.hp.hpl.jena.query.Syntax)>(queryParam, $stack10)
$stack22 <com.hp.hpl.jena.query.QueryExecution: com.hp.hpl.jena.rdf.model.Model execConstruct(com.hp.hpl.jena.rdf.model.Model)> $stack22 = virtualinvoke rsf#5.<org.vivoweb.harvester.util.repo.MemJenaConnect: com.hp.hpl.jena.rdf.model.Model getJenaModel()>()
$stack20 <com.hp.hpl.jena.query.QueryExecution: com.hp.hpl.jena.rdf.model.Model execDescribe(com.hp.hpl.jena.rdf.model.Model)> $stack20 = virtualinvoke rsf#5.<org.vivoweb.harvester.util.repo.MemJenaConnect: com.hp.hpl.jena.rdf.model.Model getJenaModel()>()
$stack6 <org.vivoweb.harvester.util.repo.JenaConnect: boolean executeAskQuery(java.lang.String)> $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()
$stack11 <org.vivoweb.harvester.util.repo.JenaConnect: void executeQuery(java.lang.String,java.lang.String,java.io.OutputStream,boolean)> $stack11 = virtualinvoke argList.<org.vivoweb.harvester.util.args.ArgList: java.lang.String get(java.lang.String)>("q")
$stack8 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.SuperCountQuery createSuperCountQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack8 = this.<me.prettyprint.cassandra.service.template.SuperCfTemplate: me.prettyprint.hector.api.Keyspace keyspace>
$stack11 <me.prettyprint.hector.api.query.SuperCountQuery: me.prettyprint.hector.api.query.SuperCountQuery setColumnFamily(java.lang.String)> $stack11 = this.<me.prettyprint.cassandra.service.template.SuperCfTemplate: java.lang.String columnFamily>
$stack10 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.SubCountQuery createSubCountQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack10 = this.<me.prettyprint.cassandra.service.template.SuperCfTemplate: me.prettyprint.hector.api.Keyspace keyspace>
$stack13 <me.prettyprint.hector.api.query.SubCountQuery: me.prettyprint.hector.api.query.SubCountQuery setColumnFamily(java.lang.String)> $stack13 = this.<me.prettyprint.cassandra.service.template.SuperCfTemplate: java.lang.String columnFamily>
$stack5 <net.sf.hibernate.type.LiteralType: java.lang.String objectToSQLString(java.lang.Object)> $stack5 = virtualinvoke $stack3.<java.util.TimeZone: java.lang.String getID()>()
$stack59 <org.h2.value.ValueDate: org.h2.value.ValueDate getNoCopy(java.sql.Date)> $stack59 = new java.sql.Date
$stack62 <org.h2.value.ValueTime: org.h2.value.ValueTime get(java.sql.Time)> $stack62 = new java.sql.Time
l2 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp getNoCopy(java.sql.Timestamp)> l2 = $stack55
$stack57 <java.sql.Timestamp: void setNanos(int)> $stack57 = virtualinvoke l0.<org.h2.store.DataPage: int readInt()>()
q <org.hypergraphdb.ResultSizeEstimation: long countResultSet(org.hypergraphdb.HGQuery)> q = (org.hypergraphdb.query.cond2qry.ExpressionBasedQuery) $stack6
l12 <org.h2.command.dml.Query: void addGlobalCondition(org.h2.expression.Parameter,int,int)> l12 = $stack51
l12 <org.h2.command.dml.Query: void addGlobalCondition(org.h2.expression.Parameter,int,int)> l12 = $stack48
l12 <org.h2.command.dml.Query: void addGlobalCondition(org.h2.expression.Parameter,int,int)> l12 = $stack47
l11 <org.h2.command.dml.Query: void addGlobalCondition(org.h2.expression.Parameter,int,int)> l11 = $stack41
l11 <org.h2.command.dml.Query: void addGlobalCondition(org.h2.expression.Parameter,int,int)> l11 = $stack36
l11 <org.h2.command.dml.Query: void addGlobalCondition(org.h2.expression.Parameter,int,int)> l11 = $stack34
$stack20 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack20 = l0.<org.h2.index.BaseIndex: java.lang.String comment>
$stack1 <org.h2.index.BaseIndex: java.lang.String getCreateSQLForCopy(org.h2.table.Table,java.lang.String)> $stack1 = l0.<org.h2.index.BaseIndex: org.h2.table.Table table>
$stack13 <org.hypergraphdb.query.impl.ProjectionAtomResultSet: java.lang.Object examine(org.hypergraphdb.HGHandle)> $stack13 = (org.hypergraphdb.HGHandle) $stack12
$stack9 <org.hypergraphdb.query.impl.ProjectionAtomResultSet: java.lang.Object examine(org.hypergraphdb.HGHandle)> $stack9 = (org.hypergraphdb.HGHandle) $stack8
$stack13 <org.hypergraphdb.query.impl.ProjectionAtomResultSet: java.lang.Object examine(org.hypergraphdb.HGHandle)> $stack13 = (org.hypergraphdb.HGHandle) $stack12
$stack8 <org.hypergraphdb.query.impl.ProjectionAtomResultSet: java.lang.Object examine(org.hypergraphdb.HGHandle)> $stack8 = (org.hypergraphdb.HGHandle) $stack7
$stack6 <org.hypergraphdb.query.impl.ProjectionAtomResultSet: java.lang.Object examine(org.hypergraphdb.HGHandle)> $stack6 = (org.hypergraphdb.HGHandle) $stack5
$stack28 <org.hibernate.envers.strategy.AuditStrategy: void addEntityAtRevisionRestriction(org.hibernate.envers.configuration.GlobalConfiguration,org.hibernate.envers.tools.query.QueryBuilder,java.lang.String,java.lang.String,boolean,org.hibernate.envers.entities.mapper.relation.MiddleIdData,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> $stack28 = virtualinvoke $stack27.<org.hibernate.envers.configuration.AuditConfiguration: org.hibernate.envers.configuration.GlobalConfiguration getGlobalCfg()>()
$stack33 <org.hibernate.envers.tools.query.Parameters: void addWhereWithParam(java.lang.String,java.lang.String,java.lang.Object)> $stack33 = virtualinvoke verEntCfg.<org.hibernate.envers.configuration.AuditEntitiesConfiguration: java.lang.String getRevisionTypePropName()>()
$stack54 <org.hibernate.envers.query.criteria.AuditCriterion: void addToQuery(org.hibernate.envers.configuration.AuditConfiguration,java.lang.String,org.hibernate.envers.tools.query.QueryBuilder,org.hibernate.envers.tools.query.Parameters)> $stack54 = this.<org.hibernate.envers.query.impl.EntitiesAtRevisionQuery: org.hibernate.envers.configuration.AuditConfiguration verCfg>
$stack5 <me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery: java.lang.String access$000(me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery)> $stack5 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery this$0>
$stack7 <me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery: me.prettyprint.hector.api.Serializer access$200(me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery)> $stack7 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery this$0>
$stack9 <me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery: java.lang.Object access$100(me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery)> $stack9 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery this$0>
$stack16 <me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery: me.prettyprint.hector.api.Serializer access$300(me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery)> $stack16 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery this$0>
$stack18 <me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery: me.prettyprint.hector.api.Serializer access$400(me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery)> $stack18 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery this$0>
$stack20 <me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery: me.prettyprint.hector.api.Serializer access$500(me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery)> $stack20 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperSliceQuery this$0>
$stack26 <org.hibernate.cfg.Ejb3Column: void setSqlType(java.lang.String)> $stack26 = interfaceinvoke annJoin.<javax.persistence.JoinColumn: java.lang.String columnDefinition()>()
$stack7 <org.hibernate.mapping.Column: void setSqlType(java.lang.String)> $stack7 = this.<org.hibernate.cfg.Ejb3JoinColumn: java.lang.String sqlType>
l2 <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)> l2 = null
l2 <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)> l2 = l1[l5]
l9 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l9 = null
l10 <org.h2.util.JdbcUtils: void closeSilently(java.sql.ResultSet)> l10 = null
l11 <java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)> l11 = "SELECT CAST(COLUMN_NAME AS VARCHAR(32)) \"Column Name\", CAST(TYPE_NAME AS VARCHAR(14)) \"Type\", NUMERIC_PRECISION \"Precision\", CAST(IS_NULLABLE AS VARCHAR(8)) \"Nullable\", CAST(COLUMN_DEFAULT AS VARCHAR(20)) \"Default\" FROM INFORMATION_SCHEMA.COLUMNS WHERE UPPER(TABLE_NAME)=?"
l11 <java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)> l11 = virtualinvoke $stack88.<java.lang.StringBuilder: java.lang.String toString()>()
l11 <java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)> l11 = virtualinvoke $stack70.<java.lang.StringBuilder: java.lang.String toString()>()
l9 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l9 = interfaceinvoke $stack72.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>(l11)
l10 <org.h2.util.JdbcUtils: void closeSilently(java.sql.ResultSet)> l10 = interfaceinvoke l9.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>()
l6#22 <org.h2.util.JdbcUtils: void closeSilently(java.sql.ResultSet)> l6#22 = null
l6#22 <org.h2.util.JdbcUtils: void closeSilently(java.sql.ResultSet)> l6#22 = interfaceinvoke $stack59.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>("SELECT CAST(TABLE_SCHEMA AS VARCHAR(32)) \"Schema\", TABLE_NAME \"Table Name\" FROM INFORMATION_SCHEMA.TABLES ORDER BY TABLE_SCHEMA, TABLE_NAME")
l4 <org.h2.util.JdbcUtils: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> l4 = null
l4 <org.h2.util.JdbcUtils: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> l4 = l8#8.<org.h2.server.web.ConnectionInfo: java.lang.String driver>
l4 <org.h2.util.JdbcUtils: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> l4 = staticinvoke <org.h2.util.JdbcDriverUtils: java.lang.String getDriver(java.lang.String)>(l2)
l4 <org.h2.util.JdbcUtils: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> l4 = specialinvoke l0.<org.h2.tools.Shell: java.lang.String readLine(java.lang.String)>(l4)
l5#3 <org.h2.util.JdbcUtils: void closeSilently(java.sql.ResultSet)> l5#3 = null
l5#3 <org.h2.util.JdbcUtils: void closeSilently(java.sql.ResultSet)> l5#3 = interfaceinvoke $stack21.<java.sql.Statement: java.sql.ResultSet getResultSet()>()
$stack101 <java.sql.ResultSetMetaData: java.lang.String getColumnLabel(int)> $stack101 = l9 + 1
$stack120 <java.sql.ResultSetMetaData: int getColumnDisplaySize(int)> $stack120 = l9 + 1
$stack62 <java.sql.ResultSet: java.lang.String getString(int)> $stack62 = l12 + 1
$stack29 <java.sql.ResultSet: java.lang.String getString(int)> $stack29 = l12 + 1
subsumesCondition <org.hypergraphdb.HyperGraph: org.hypergraphdb.HGSearchResult find(org.hypergraphdb.query.HGQueryCondition)> subsumesCondition = $stack8
$stack11 <org.h2.engine.Database: void removeSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack11 = l0.<org.h2.command.ddl.DropConstant: org.h2.engine.Session session>
$stack6 <net.sf.hibernate.engine.Batcher: void closeQueryStatement(java.sql.PreparedStatement,java.sql.ResultSet)> $stack6 = this.<net.sf.hibernate.impl.IteratorImpl: java.sql.PreparedStatement ps>
$stack43 <net.sf.hibernate.type.Type: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],net.sf.hibernate.engine.SessionImplementor,java.lang.Object)> $stack43 = this.<net.sf.hibernate.impl.IteratorImpl: java.sql.ResultSet rs>
$stack34 <net.sf.hibernate.type.Type: java.lang.Object nullSafeGet(java.sql.ResultSet,java.lang.String[],net.sf.hibernate.engine.SessionImplementor,java.lang.Object)> $stack34 = this.<net.sf.hibernate.impl.IteratorImpl: java.sql.ResultSet rs>
$stack5 <me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery: java.lang.String access$000(me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery)> $stack5 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery this$0>
$stack7 <me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery: me.prettyprint.hector.api.Serializer access$200(me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery)> $stack7 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery this$0>
$stack9 <me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery: java.lang.Object access$100(me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery)> $stack9 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery this$0>
$stack13 <me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery: me.prettyprint.hector.api.Serializer access$400(me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery)> $stack13 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery this$0>
$stack17 <me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery: me.prettyprint.cassandra.model.HKeyRange access$300(me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery)> $stack17 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery this$0>
$stack23 <me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery: me.prettyprint.hector.api.Serializer access$500(me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery)> $stack23 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesCounterQuery this$0>
propertyName <org.hibernate.envers.tools.query.Parameters: void addWhereWithParam(java.lang.String,java.lang.String,java.lang.Object)> propertyName = interfaceinvoke $stack6.<org.hibernate.envers.query.property.PropertyNameGetter: java.lang.String get(org.hibernate.envers.configuration.AuditConfiguration)>(auditCfg)
$stack15 <org.h2.engine.Database: void removeSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack15 = l0.<org.h2.command.ddl.AlterTableDropConstraint: org.h2.engine.Session session>
$stack7 <org.hypergraphdb.HyperGraph: org.hypergraphdb.HGSearchResult find(org.hypergraphdb.query.HGQueryCondition)> $stack7 = new org.hypergraphdb.query.AtomTypeCondition
$stack6 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery: java.util.Collection access$000(me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery)> $stack6 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery this$0>
$stack10 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery: java.lang.String access$100(me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery)> $stack10 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery this$0>
$stack12 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery: me.prettyprint.hector.api.Serializer access$300(me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery)> $stack12 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery this$0>
$stack14 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery: java.lang.Object access$200(me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery)> $stack14 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery this$0>
$stack18 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery: me.prettyprint.hector.api.Serializer access$500(me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery)> $stack18 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery this$0>
$stack20 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery: me.prettyprint.hector.api.Serializer access$400(me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery)> $stack20 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery this$0>
$stack28 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery: me.prettyprint.hector.api.Serializer access$600(me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery)> $stack28 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery this$0>
$stack30 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery: me.prettyprint.hector.api.Serializer access$700(me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery)> $stack30 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSubSliceQuery this$0>
l1#3 <org.h2.util.JdbcUtils: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.util.Properties)> l1#3 = virtualinvoke l1.<java.lang.String: java.lang.String trim()>()
l2#4 <org.h2.Driver: java.sql.Connection connect(java.lang.String,java.util.Properties)> l2#4 = virtualinvoke l2.<java.lang.String: java.lang.String trim()>()
l2#4 <org.h2.Driver: java.sql.Connection connect(java.lang.String,java.util.Properties)> l2#4 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()
$stack1 <org.h2.engine.Right: java.lang.String getCreateSQLForCopy(org.h2.table.Table,java.lang.String)> $stack1 = l0.<org.h2.engine.Right: org.h2.table.Table grantedTable>
conn <net.sf.hibernate.engine.Batcher: void closeConnection(java.sql.Connection)> conn = interfaceinvoke $stack12.<net.sf.hibernate.engine.Batcher: java.sql.Connection openConnection()>()
$stack14 <java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack14 = this.<net.sf.hibernate.id.TableGenerator: java.lang.String query>
$stack19 <java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack19 = this.<net.sf.hibernate.id.TableGenerator: java.lang.String update>
$stack2 <net.sf.hibernate.sql.Delete: net.sf.hibernate.sql.Delete setTableName(java.lang.String)> $stack2 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String getTableName()>()
$stack4 <net.sf.hibernate.sql.Delete: net.sf.hibernate.sql.Delete setPrimaryKeyColumnNames(java.lang.String[])> $stack4 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String[] getIdentifierColumnNames()>()
$stack6 <net.sf.hibernate.sql.Delete: net.sf.hibernate.sql.Delete setVersionColumnName(java.lang.String)> $stack6 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String getVersionColumnName()>()
$stack7 <net.sf.hibernate.sql.Insert: net.sf.hibernate.sql.Insert setTableName(java.lang.String)> $stack7 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String getTableName()>()
$stack27 <net.sf.hibernate.sql.Insert: net.sf.hibernate.sql.Insert addColumns(java.lang.String[])> $stack27 = $stack26[i]
$stack18 <net.sf.hibernate.sql.Insert: net.sf.hibernate.sql.Insert addColumn(java.lang.String,java.lang.String)> $stack18 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String getDiscriminatorColumnName()>()
$stack15 <net.sf.hibernate.sql.Insert: net.sf.hibernate.sql.Insert addColumns(java.lang.String[])> $stack15 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String[] getIdentifierColumnNames()>()
$stack12 <net.sf.hibernate.sql.Insert: net.sf.hibernate.sql.Insert addIdentityColumn(java.lang.String)> $stack12 = $stack11[0]
$stack3 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect setTableName(java.lang.String)> $stack3 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String getTableName()>()
$stack5 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addColumns(java.lang.String[])> $stack5 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String[] getIdentifierColumnNames()>()
$stack8 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addColumns(java.lang.String[],java.lang.String[])> $stack8 = this.<net.sf.hibernate.persister.EntityPersister: java.lang.String[] subclassColumnClosure>
$stack11 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addColumns(java.lang.String[],java.lang.String[])> $stack11 = this.<net.sf.hibernate.persister.EntityPersister: java.lang.String[] subclassFormulaClosure>
$stack17 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addColumn(java.lang.String,java.lang.String)> $stack17 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String getDiscriminatorColumnName()>()
$stack14 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addCondition(java.lang.String[],java.lang.String)> $stack14 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String[] getIdentifierColumnNames()>()
$stack5 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect setTableName(java.lang.String)> $stack5 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String getTableName()>()
$stack7 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addColumns(java.lang.String[])> $stack7 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String[] getIdentifierColumnNames()>()
$stack25 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addColumns(java.lang.String[],java.lang.String[])> $stack25 = $stack22[i]
$stack11 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addCondition(java.lang.String[],java.lang.String)> $stack11 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String[] getIdentifierColumnNames()>()
$stack16 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addCondition(java.lang.String,java.lang.String)> $stack16 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String getVersionColumnName()>()
$stack20 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update addWhereColumns(java.lang.String[],java.lang.String)> $stack20 = $stack19[i]
$stack17 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update addWhereColumns(java.lang.String[])> $stack17 = $stack16[i]
$stack5 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update setTableName(java.lang.String)> $stack5 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String getTableName()>()
$stack7 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update setPrimaryKeyColumnNames(java.lang.String[])> $stack7 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String[] getIdentifierColumnNames()>()
$stack18 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update addColumns(java.lang.String[])> $stack18 = $stack17[i]
$stack11 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update setVersionColumnName(java.lang.String)> $stack11 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String getVersionColumnName()>()
$stack3 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect setTableName(java.lang.String)> $stack3 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String getTableName()>()
$stack6 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addColumn(java.lang.String)> $stack6 = $stack5[0]
$stack8 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addCondition(java.lang.String[],java.lang.String)> $stack8 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String[] getIdentifierColumnNames()>()
$stack13 <net.sf.hibernate.sql.SimpleSelect: net.sf.hibernate.sql.SimpleSelect addCondition(java.lang.String,java.lang.String)> $stack13 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String getVersionColumnName()>()
insertSelectSQL <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)> insertSelectSQL = $stack18
insertSelect <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> insertSelect = interfaceinvoke $stack33.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)>(insertSelectSQL)
insertSelect <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> insertSelect = interfaceinvoke $stack19.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String,boolean)>(sql, useGetGeneratedKeys)
$stack25 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack25 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String sqlIdentitySelect()>()
sqle#18 <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> sqle#18 = interfaceinvoke $stack24.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)>($stack25)
$stack26 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack26 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String getSQLDeleteString()>()
statement <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> statement = interfaceinvoke $stack25.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)>($stack26)
$stack12 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)> $stack12 = virtualinvoke this.<net.sf.hibernate.persister.EntityPersister: java.lang.String getSQLDeleteString()>()
statement <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> statement = interfaceinvoke $stack11.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)>($stack12)
statement <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> statement = $stack20
discriminatorValue <net.sf.hibernate.type.LiteralType: java.lang.String objectToSQLString(java.lang.Object)> discriminatorValue = <net.sf.hibernate.persister.EntityPersister: java.lang.Object NULL_DISCRIMINATOR>
discriminatorValue <net.sf.hibernate.type.LiteralType: java.lang.String objectToSQLString(java.lang.Object)> discriminatorValue = <net.sf.hibernate.persister.EntityPersister: java.lang.Object NOT_NULL_DISCRIMINATOR>
discriminatorValue <net.sf.hibernate.type.LiteralType: java.lang.String objectToSQLString(java.lang.Object)> discriminatorValue = interfaceinvoke dtype.<net.sf.hibernate.type.DiscriminatorType: java.lang.Object stringToObject(java.lang.String)>($stack264)
discriminatorValue <net.sf.hibernate.type.LiteralType: java.lang.String objectToSQLString(java.lang.Object)> discriminatorValue = null
$stack33 <net.sf.hibernate.sql.InFragment: net.sf.hibernate.sql.InFragment addValue(java.lang.Object)> $stack33 = interfaceinvoke $stack32.<net.sf.hibernate.persister.Queryable: java.lang.Object getDiscriminatorSQLValue()>()
$stack3 <org.hypergraphdb.query.HGAtomPredicate: boolean satisfies(org.hypergraphdb.HyperGraph,org.hypergraphdb.HGHandle)> $stack3 = this.<org.hypergraphdb.query.impl.PredicateBasedFilter$1: org.hypergraphdb.HyperGraph val$graph>
$stack12 <org.hypergraphdb.HyperGraph: org.hypergraphdb.HGSearchResult find(org.hypergraphdb.query.HGQueryCondition)> $stack12 = staticinvoke <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.AtomTypeCondition type(org.hypergraphdb.HGHandle)>(typeHandle)
$stack10 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.TypePlusCondition typePlus(org.hypergraphdb.HGHandle)> $stack10 = interfaceinvoke indexer.<org.hypergraphdb.indexing.HGIndexer: org.hypergraphdb.HGHandle getType()>()
$stack20 <org.h2.message.Trace: void infoSQL(java.lang.String,java.lang.String,int,long)> $stack20 = l0.<org.h2.command.Prepared: java.lang.String sqlStatement>
$stack15 <org.h2.table.TableFilter: void startQuery(org.h2.engine.Session)> $stack15 = l0.<org.h2.command.dml.Update: org.h2.engine.Session session>
$stack85 <org.h2.value.ValueDate: org.h2.value.ValueDate getNoCopy(java.sql.Date)> $stack85 = new java.sql.Date
$stack88 <org.h2.value.ValueTime: org.h2.value.ValueTime get(java.sql.Time)> $stack88 = new java.sql.Time
l2#7 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp getNoCopy(java.sql.Timestamp)> l2#7 = $stack79
$stack82 <java.sql.Timestamp: void setNanos(int)> $stack82 = specialinvoke l0.<org.h2.store.Data: int readVarInt()>()
connLine <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)> connLine = "jdbc:jtds:sqlserver://erp-prod-odbc.ad.ufl.edu:1433/ODBCWH;domain=UFAD"
sql <java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)> sql = virtualinvoke dialect.<net.sf.hibernate.dialect.Dialect: java.lang.String getQuerySequencesString()>()
$stack3 <net.sf.hibernate.tool.hbm2ddl.DatabaseMetadata: net.sf.hibernate.tool.hbm2ddl.TableMetadata getTableMetadata(java.lang.String)> $stack3 = (java.lang.String) key
$stack3 <net.sf.hibernate.Query: net.sf.hibernate.Query setParameter(int,java.lang.Object)> $stack3 = this.<net.sf.hibernate.odmg.OQLQuery: int param>
$stack1 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack1 = virtualinvoke l0.<org.h2.value.ValueUuid: java.lang.String getString()>()
$stack7 <java.sql.ResultSet: int getInt(int)> $stack7 = staticinvoke <org.h2.server.web.DbContents: int findColumn(java.sql.ResultSet,java.lang.String,int)>(l1, "COLUMN_SIZE", 7)
$stack21 <java.sql.ResultSet: int getInt(int)> $stack21 = staticinvoke <org.h2.server.web.DbContents: int findColumn(java.sql.ResultSet,java.lang.String,int)>(l1, "DECIMAL_DIGITS", 9)
$stack15 <org.h2.server.web.WebServer: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.h2.api.DatabaseEventListener)> $stack15 = l0.<org.h2.server.web.WebThread$1LoginTask: java.lang.String val$driver>
l3 <org.h2.server.web.WebSession: void setConnection(java.sql.Connection)> l3 = virtualinvoke $stack16.<org.h2.server.web.WebServer: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.h2.api.DatabaseEventListener)>($stack15, $stack14, $stack13, $stack12, l0)
namedParams <net.sf.hibernate.impl.AbstractQueryImpl: net.sf.hibernate.engine.QueryParameters getQueryParameters(java.util.Map)> namedParams = virtualinvoke this.<net.sf.hibernate.impl.QueryImpl: java.util.Map getNamedParams()>()
$stack4 <net.sf.hibernate.engine.SessionImplementor: java.util.Iterator iterate(java.lang.String,net.sf.hibernate.engine.QueryParameters)> $stack4 = virtualinvoke this.<net.sf.hibernate.impl.QueryImpl: java.lang.String bindParameterLists(java.util.Map)>(namedParams)
namedParams <net.sf.hibernate.impl.AbstractQueryImpl: net.sf.hibernate.engine.QueryParameters getQueryParameters(java.util.Map)> namedParams = virtualinvoke this.<net.sf.hibernate.impl.QueryImpl: java.util.Map getNamedParams()>()
$stack4 <net.sf.hibernate.engine.SessionImplementor: net.sf.hibernate.ScrollableResults scroll(java.lang.String,net.sf.hibernate.engine.QueryParameters)> $stack4 = virtualinvoke this.<net.sf.hibernate.impl.QueryImpl: java.lang.String bindParameterLists(java.util.Map)>(namedParams)
namedParams <net.sf.hibernate.impl.AbstractQueryImpl: net.sf.hibernate.engine.QueryParameters getQueryParameters(java.util.Map)> namedParams = virtualinvoke this.<net.sf.hibernate.impl.QueryImpl: java.util.Map getNamedParams()>()
$stack4 <net.sf.hibernate.engine.SessionImplementor: java.util.List find(java.lang.String,net.sf.hibernate.engine.QueryParameters)> $stack4 = virtualinvoke this.<net.sf.hibernate.impl.QueryImpl: java.lang.String bindParameterLists(java.util.Map)>(namedParams)
$stack4 <me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery: java.lang.String access$000(me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery)> $stack4 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery this$0>
$stack6 <me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery: java.lang.Object access$100(me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery)> $stack6 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery this$0>
$stack8 <me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery: me.prettyprint.hector.api.Serializer access$200(me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery)> $stack8 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery this$0>
$stack11 <me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery: me.prettyprint.hector.api.Serializer access$300(me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery)> $stack11 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery this$0>
$stack14 <me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery: me.prettyprint.hector.api.Serializer access$500(me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery)> $stack14 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery this$0>
$stack16 <me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery: java.lang.Object access$400(me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery)> $stack16 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery this$0>
$stack21 <me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery: me.prettyprint.hector.api.Serializer access$600(me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery)> $stack21 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery this$0>
$stack23 <me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery: me.prettyprint.hector.api.Serializer access$700(me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery)> $stack23 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery this$0>
$stack25 <me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery: me.prettyprint.hector.api.Serializer access$800(me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery)> $stack25 = this.<me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSuperColumnQuery this$0>
$stack2 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.And and(org.hypergraphdb.query.HGQueryCondition[])> $stack2 = newarray (org.hypergraphdb.query.HGQueryCondition)[2]
$stack2 <org.hypergraphdb.HGQuery$hg: long count(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack2 = this.<org.hypergraphdb.atom.HGSubgraph: org.hypergraphdb.HyperGraph graph>
$stack3 <org.hypergraphdb.HyperGraph: org.hypergraphdb.HGSearchResult find(org.hypergraphdb.query.HGQueryCondition)> $stack3 = specialinvoke this.<org.hypergraphdb.atom.HGSubgraph: org.hypergraphdb.query.HGQueryCondition localizeCondition(org.hypergraphdb.query.HGQueryCondition)>(condition)
$stack3 <org.hypergraphdb.HyperGraph: java.lang.Object findOne(org.hypergraphdb.query.HGQueryCondition)> $stack3 = specialinvoke this.<org.hypergraphdb.atom.HGSubgraph: org.hypergraphdb.query.HGQueryCondition localizeCondition(org.hypergraphdb.query.HGQueryCondition)>(condition)
$stack3 <org.hypergraphdb.HyperGraph: java.lang.Object getOne(org.hypergraphdb.query.HGQueryCondition)> $stack3 = specialinvoke this.<org.hypergraphdb.atom.HGSubgraph: org.hypergraphdb.query.HGQueryCondition localizeCondition(org.hypergraphdb.query.HGQueryCondition)>(condition)
$stack3 <org.hypergraphdb.HyperGraph: java.util.List findAll(org.hypergraphdb.query.HGQueryCondition)> $stack3 = specialinvoke this.<org.hypergraphdb.atom.HGSubgraph: org.hypergraphdb.query.HGQueryCondition localizeCondition(org.hypergraphdb.query.HGQueryCondition)>(condition)
$stack3 <org.hypergraphdb.HyperGraph: java.util.List getAll(org.hypergraphdb.query.HGQueryCondition)> $stack3 = specialinvoke this.<org.hypergraphdb.atom.HGSubgraph: org.hypergraphdb.query.HGQueryCondition localizeCondition(org.hypergraphdb.query.HGQueryCondition)>(condition)
prop <net.sf.hibernate.hql.ClauseParser: void token(java.lang.String,net.sf.hibernate.hql.QueryTranslator)> prop = (java.lang.String) $stack15
prop <net.sf.hibernate.hql.ClauseParser: void token(java.lang.String,net.sf.hibernate.hql.QueryTranslator)> prop = $stack22
$stack26 <net.sf.hibernate.hql.ClauseParser: void token(java.lang.String,net.sf.hibernate.hql.QueryTranslator)> $stack26 = this.<net.sf.hibernate.hql.PreprocessingParser: java.lang.String lastToken>
$stack4 <net.sf.hibernate.hql.ClauseParser: void token(java.lang.String,net.sf.hibernate.hql.QueryTranslator)> $stack4 = this.<net.sf.hibernate.hql.PreprocessingParser: java.lang.String lastToken>
$stack84 <net.sf.hibernate.hql.QueryTranslator: void addFromClass(java.lang.String,net.sf.hibernate.persister.Queryable)> $stack84 = this.<net.sf.hibernate.hql.FromParser: java.lang.String alias>
$stack71 <net.sf.hibernate.hql.ParserHelper: void parse(net.sf.hibernate.hql.Parser,java.lang.String,java.lang.String,net.sf.hibernate.hql.QueryTranslator)> $stack71 = this.<net.sf.hibernate.hql.FromParser: net.sf.hibernate.hql.PathExpressionParser peParser>
$stack77 <net.sf.hibernate.hql.QueryTranslator: void setAliasName(java.lang.String,java.lang.String)> $stack77 = this.<net.sf.hibernate.hql.FromParser: java.lang.String alias>
$stack62 <net.sf.hibernate.hql.QueryTranslator: java.lang.String createNameFor(java.lang.Class)> $stack62 = interfaceinvoke p.<net.sf.hibernate.persister.Queryable: java.lang.Class getMappedClass()>()
$stack64 <net.sf.hibernate.hql.QueryTranslator: void addFromClass(java.lang.String,net.sf.hibernate.persister.Queryable)> $stack64 = this.<net.sf.hibernate.hql.FromParser: java.lang.String entityName>
$stack34 <net.sf.hibernate.hql.ParserHelper: void parse(net.sf.hibernate.hql.Parser,java.lang.String,java.lang.String,net.sf.hibernate.hql.QueryTranslator)> $stack34 = this.<net.sf.hibernate.hql.FromParser: net.sf.hibernate.hql.PathExpressionParser peParser>
$stack6 <org.hibernate.envers.tools.query.Parameters: org.hibernate.envers.tools.query.Parameters addSubParameters(java.lang.String)> $stack6 = this.<org.hibernate.envers.query.criteria.LogicalAuditExpression: java.lang.String op>
$stack3 <org.hypergraphdb.query.HGAtomPredicate: boolean satisfies(org.hypergraphdb.HyperGraph,org.hypergraphdb.HGHandle)> $stack3 = this.<org.hypergraphdb.query.impl.PredicateBasedRAFilter$1: org.hypergraphdb.HyperGraph val$graph>
l2 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l2 = specialinvoke l0.<org.h2.server.web.DbContextRule: java.lang.String matchSchema(org.h2.bnf.Sentence)>(l1)
l2 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l2 = specialinvoke l0.<org.h2.server.web.DbContextRule: java.lang.String matchTable(org.h2.bnf.Sentence)>(l1)
l2 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l2 = specialinvoke l0.<org.h2.server.web.DbContextRule: java.lang.String matchTableAlias(org.h2.bnf.Sentence,boolean)>(l1, 1)
l2 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l2 = specialinvoke l0.<org.h2.server.web.DbContextRule: java.lang.String matchTableAlias(org.h2.bnf.Sentence,boolean)>(l1, 0)
l2 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l2 = specialinvoke l0.<org.h2.server.web.DbContextRule: java.lang.String matchColumnAlias(org.h2.bnf.Sentence)>(l1)
l2 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l2 = specialinvoke l0.<org.h2.server.web.DbContextRule: java.lang.String matchColumn(org.h2.bnf.Sentence)>(l1)
$stack7 <me.prettyprint.cassandra.model.thrift.ThriftSubCountQuery: me.prettyprint.hector.api.Serializer access$100(me.prettyprint.cassandra.model.thrift.ThriftSubCountQuery)> $stack7 = this.<me.prettyprint.cassandra.model.thrift.ThriftSubCountQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSubCountQuery this$0>
$stack9 <me.prettyprint.cassandra.model.thrift.ThriftSubCountQuery: java.lang.Object access$000(me.prettyprint.cassandra.model.thrift.ThriftSubCountQuery)> $stack9 = this.<me.prettyprint.cassandra.model.thrift.ThriftSubCountQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSubCountQuery this$0>
l6 <javax.sql.DataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> l6 = virtualinvoke l2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("user")
$stack2 <net.sf.hibernate.sql.JoinFragment: void addJoins(java.lang.String,java.lang.String)> $stack2 = virtualinvoke ojf.<net.sf.hibernate.sql.JoinFragment: java.lang.String toFromFragmentString()>()
$stack2 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.HGQuery access$000(org.hypergraphdb.query.cond2qry.ExpressionBasedQuery,org.hypergraphdb.query.HGQueryCondition)> $stack2 = this.<org.hypergraphdb.query.cond2qry.ExpressionBasedQuery$2: org.hypergraphdb.query.cond2qry.ExpressionBasedQuery this$0>
$stack2 <org.hypergraphdb.query.cond2qry.ExpressionBasedQuery: org.hypergraphdb.HGQuery access$000(org.hypergraphdb.query.cond2qry.ExpressionBasedQuery,org.hypergraphdb.query.HGQueryCondition)> $stack2 = this.<org.hypergraphdb.query.cond2qry.ExpressionBasedQuery$1: org.hypergraphdb.query.cond2qry.ExpressionBasedQuery this$0>
$stack3 <net.sf.hibernate.hql.QueryTranslator: boolean isName(java.lang.String)> $stack3 = staticinvoke <net.sf.hibernate.util.StringHelper: java.lang.String root(java.lang.String)>(token)
$stack5 <net.sf.hibernate.hql.ParserHelper: void parse(net.sf.hibernate.hql.Parser,java.lang.String,java.lang.String,net.sf.hibernate.hql.QueryTranslator)> $stack5 = this.<net.sf.hibernate.hql.GroupByParser: net.sf.hibernate.hql.PathExpressionParser pathExpressionParser>
$stack8 <net.sf.hibernate.hql.QueryTranslator: void appendGroupByToken(java.lang.String)> $stack8 = virtualinvoke $stack7.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String getWhereColumn()>()
l13#14 <org.h2.fulltext.FullTextSettings: void setPrepSelectMapByWordId(java.sql.PreparedStatement)> l13#14 = interfaceinvoke l1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>("SELECT ROWID FROM FT.MAP WHERE WORDID=?")
l14#15 <org.h2.fulltext.FullTextSettings: void setPrepSelectRowById(java.sql.PreparedStatement)> l14#15 = interfaceinvoke l1.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>("SELECT KEY, INDEXID FROM FT.ROWS WHERE ID=?")
$stack21 <org.h2.util.JdbcUtils: java.sql.ResultSet getGeneratedKeys(java.sql.Statement)> $stack21 = l0.<org.h2.fulltext.FullText$FullTextTrigger: java.sql.PreparedStatement prepInsertRow>
$stack27 <org.h2.util.JdbcUtils: java.sql.ResultSet getGeneratedKeys(java.sql.Statement)> $stack27 = l0.<org.h2.fulltext.FullText$FullTextTrigger: java.sql.PreparedStatement prepInsertWord>
l7 <org.h2.fulltext.FullText: java.lang.String quoteSQL(java.lang.Object,int)> l7 = l1[l6]
$stack8 <org.h2.engine.Database: void flushIndexes(long)> $stack8 = l2 - 0L
l1#7 <org.h2.store.WriterThread: void flushIndexesIfRequired(org.h2.engine.Database)> l1#7 = (org.h2.engine.Database) $stack10
l6 <java.sql.Statement: boolean execute(java.lang.String)> l6 = virtualinvoke l5.<org.h2.util.ScriptReader: java.lang.String readStatement()>()
l8 <java.sql.Statement: boolean execute(java.lang.String)> l8 = virtualinvoke l7.<org.h2.util.ScriptReader: java.lang.String readStatement()>()
l8 <java.sql.Statement: boolean execute(java.lang.String)> l8 = l9
l8 <java.sql.Statement: boolean execute(java.lang.String)> l8 = virtualinvoke $stack89.<java.lang.String: java.lang.String trim()>()
l8 <java.sql.Statement: boolean execute(java.lang.String)> l8 = virtualinvoke $stack96.<java.lang.StringBuilder: java.lang.String toString()>()
$stack60 <java.sql.ResultSet: java.lang.String getString(int)> $stack60 = l14 + 1
l5 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Connection)> l5 = null
l6 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l6 = null
l5 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Connection)> l5 = staticinvoke <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)>(l0, l1, l2)
l6 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l6 = interfaceinvoke l5.<java.sql.Connection: java.sql.Statement createStatement()>()
l7 <java.sql.Statement: boolean execute(java.lang.String)> l7 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>()
l7 <org.h2.tools.RunScript: void process(java.sql.Connection,java.lang.String,boolean,java.lang.String)> l7 = staticinvoke <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)>(l1, l2, l3)
$stack27 <net.sf.hibernate.engine.QueryParameters: void traceParameters(net.sf.hibernate.engine.SessionFactoryImplementor)> $stack27 = this.<net.sf.hibernate.impl.SessionImpl: net.sf.hibernate.impl.SessionFactoryImpl factory>
$stack40 <net.sf.hibernate.engine.QueryParameters: void traceParameters(net.sf.hibernate.engine.SessionFactoryImplementor)> $stack40 = this.<net.sf.hibernate.impl.SessionImpl: net.sf.hibernate.impl.SessionFactoryImpl factory>
$stack26 <net.sf.hibernate.engine.QueryParameters: void traceParameters(net.sf.hibernate.engine.SessionFactoryImplementor)> $stack26 = this.<net.sf.hibernate.impl.SessionImpl: net.sf.hibernate.impl.SessionFactoryImpl factory>
queryString <net.sf.hibernate.impl.SessionImpl: net.sf.hibernate.Query createQuery(java.lang.String)> queryString = virtualinvoke $stack4.<net.sf.hibernate.impl.SessionFactoryImpl: java.lang.String getNamedQuery(java.lang.String)>(queryName)
$stack8 <net.sf.hibernate.impl.SessionImpl: net.sf.hibernate.Query createSQLQuery(java.lang.String,java.lang.String[],java.lang.Class[],java.util.Collection)> $stack8 = virtualinvoke nq.<net.sf.hibernate.impl.SessionFactoryImpl$InternalNamedSQLQuery: java.lang.String getQueryString()>()
c <net.sf.hibernate.engine.Batcher: void closeConnection(java.sql.Connection)> c = this.<net.sf.hibernate.impl.SessionImpl: java.sql.Connection connection>
$stack51 <net.sf.hibernate.engine.QueryParameters: void traceParameters(net.sf.hibernate.engine.SessionFactoryImplementor)> $stack51 = this.<net.sf.hibernate.impl.SessionImpl: net.sf.hibernate.impl.SessionFactoryImpl factory>
$stack23 <net.sf.hibernate.impl.SessionImpl: net.sf.hibernate.persister.SQLLoadable getSQLLoadable(java.lang.Class)> $stack23 = classes[i]
$stack6 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack6 = interfaceinvoke link.<org.hypergraphdb.HGLink: org.hypergraphdb.HGHandle getTargetAt(int)>(i)
$stack5 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack5 = targets[i]
h <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> h = (org.hypergraphdb.HGHandle) $stack7
$stack24 <org.hypergraphdb.query.LinkCondition: boolean contains(org.hypergraphdb.HGHandle)> $stack24 = interfaceinvoke link.<org.hypergraphdb.HGLink: org.hypergraphdb.HGHandle getTargetAt(int)>(i)
$stack15 <org.hypergraphdb.query.LinkCondition: boolean contains(org.hypergraphdb.HGHandle)> $stack15 = atom#5[link#6]
middleTableName#4 <org.hibernate.envers.configuration.metadata.CollectionMetadataGenerator: org.hibernate.envers.entities.mapper.relation.MiddleComponentData addIndex(org.dom4j.Element,org.hibernate.envers.configuration.metadata.QueryGeneratorBuilder)> middleTableName#4 = specialinvoke this.<org.hibernate.envers.configuration.metadata.CollectionMetadataGenerator: org.dom4j.Element createMiddleEntityXml(java.lang.String,java.lang.String,java.lang.String)>(auditMiddleTableName, auditMiddleEntityName, $stack127)
middleTableName#4 <org.hibernate.envers.configuration.metadata.CollectionMetadataGenerator: org.hibernate.envers.entities.mapper.relation.MiddleComponentData addIndex(org.dom4j.Element,org.hibernate.envers.configuration.metadata.QueryGeneratorBuilder)> middleTableName#4 = null
$stack54 <org.hibernate.envers.configuration.metadata.CollectionMetadataGenerator: org.hibernate.envers.entities.mapper.relation.MiddleComponentData addValueToMiddleTable(org.hibernate.mapping.Value,org.dom4j.Element,org.hibernate.envers.configuration.metadata.QueryGeneratorBuilder,java.lang.String,javax.persistence.JoinColumn[])> $stack54 = virtualinvoke $stack53.<org.hibernate.mapping.Collection: org.hibernate.mapping.Value getElement()>()
$stack60 <org.hibernate.envers.configuration.metadata.QueryGeneratorBuilder: org.hibernate.envers.entities.mapper.relation.query.RelationQueryGenerator build(org.hibernate.envers.entities.mapper.relation.MiddleComponentData[])> $stack60 = newarray (org.hibernate.envers.entities.mapper.relation.MiddleComponentData)[2]
$stack33 <org.hibernate.envers.configuration.metadata.CollectionMetadataGenerator: org.hibernate.envers.entities.mapper.relation.MiddleComponentData addValueToMiddleTable(org.hibernate.mapping.Value,org.dom4j.Element,org.hibernate.envers.configuration.metadata.QueryGeneratorBuilder,java.lang.String,javax.persistence.JoinColumn[])> $stack33 = virtualinvoke indexedValue.<org.hibernate.mapping.IndexedCollection: org.hibernate.mapping.Value getIndex()>()
referencedIdData <org.hibernate.envers.configuration.metadata.QueryGeneratorBuilder: void addRelation(org.hibernate.envers.entities.mapper.relation.MiddleIdData)> referencedIdData = specialinvoke this.<org.hibernate.envers.configuration.metadata.CollectionMetadataGenerator: org.hibernate.envers.entities.mapper.relation.MiddleIdData createMiddleIdData(org.hibernate.envers.entities.IdMappingData,java.lang.String,java.lang.String)>(referencedIdMapping, prefixRelated, referencedEntityName)
$stack31 <org.apache.hadoop.hive.serde2.io.TimestampWritable: java.sql.Timestamp floatToTimestamp(float)> $stack31 = interfaceinvoke $stack30.<org.apache.hadoop.hive.serde2.objectinspector.primitive.FloatObjectInspector: float get(java.lang.Object)>(o)
$stack28 <org.apache.hadoop.hive.serde2.io.TimestampWritable: java.sql.Timestamp doubleToTimestamp(double)> $stack28 = interfaceinvoke $stack27.<org.apache.hadoop.hive.serde2.objectinspector.primitive.DoubleObjectInspector: double get(java.lang.Object)>(o)
$stack12 <org.apache.hadoop.hive.serde2.io.TimestampWritable: java.sql.Timestamp decimalToTimestamp(java.math.BigDecimal)> $stack12 = interfaceinvoke $stack11.<org.apache.hadoop.hive.serde2.objectinspector.primitive.BigDecimalObjectInspector: java.math.BigDecimal getPrimitiveJavaObject(java.lang.Object)>(o)
s <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)> s = virtualinvoke $stack18.<java.lang.String: java.lang.String trim()>()
s <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)> s = virtualinvoke s.<java.lang.String: java.lang.String substring(int,int)>(0, $stack25)
$stack6 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery: java.lang.Iterable access$000(me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery)> $stack6 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery this$0>
$stack23 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery: me.prettyprint.hector.api.Serializer access$100(me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery)> $stack23 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery this$0>
$stack11 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery: java.lang.String access$200(me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery)> $stack11 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery this$0>
$stack13 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery: me.prettyprint.hector.api.Serializer access$300(me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery)> $stack13 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery this$0>
$stack20 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery: me.prettyprint.hector.api.Serializer access$400(me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery)> $stack20 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceCounterQuery this$0>
$stack8 <org.h2.engine.Database: org.h2.engine.User findUser(java.lang.String)> $stack8 = l0.<org.h2.command.ddl.DropUser: java.lang.String userName>
$stack12 <org.h2.engine.Database: void removeDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack12 = l0.<org.h2.command.ddl.DropUser: org.h2.engine.Session session>
l6 <org.h2.engine.Database: int compare(org.h2.value.Value,org.h2.value.Value)> l6 = l1[l4]
$stack6 <org.hibernate.envers.tools.query.Parameters: void addWhereWithParam(java.lang.String,java.lang.String,java.lang.Object)> $stack6 = virtualinvoke $stack5.<org.hibernate.envers.configuration.AuditEntitiesConfiguration: java.lang.String getRevisionTypePropName()>()
$stack7 <net.sf.hibernate.sql.QuerySelect: void addSelectFragmentString(java.lang.String)> $stack7 = virtualinvoke $stack6.<java.lang.StringBuffer: java.lang.String toString()>()
$stack2 <net.sf.hibernate.sql.QuerySelect: void appendTokens(java.lang.StringBuffer,java.util.Iterator)> $stack2 = this.<net.sf.hibernate.sql.QuerySelect: java.lang.StringBuffer where>
$stack2 <net.sf.hibernate.sql.QuerySelect: void appendTokens(java.lang.StringBuffer,java.util.Iterator)> $stack2 = this.<net.sf.hibernate.sql.QuerySelect: java.lang.StringBuffer groupBy>
$stack2 <net.sf.hibernate.sql.QuerySelect: void appendTokens(java.lang.StringBuffer,java.util.Iterator)> $stack2 = this.<net.sf.hibernate.sql.QuerySelect: java.lang.StringBuffer orderBy>
$stack2 <net.sf.hibernate.sql.QuerySelect: void appendTokens(java.lang.StringBuffer,java.util.Iterator)> $stack2 = this.<net.sf.hibernate.sql.QuerySelect: java.lang.StringBuffer having>
l0#2 <org.h2.value.ValueDate: org.h2.value.ValueDate getNoCopy(java.sql.Date)> l0#2 = staticinvoke <org.h2.util.DateTimeUtils: java.sql.Date cloneAndNormalizeDate(java.sql.Date)>(l0)
$stack40 <org.h2.result.LocalResult: org.h2.result.LocalResult read(org.h2.engine.Session,java.sql.ResultSet,int)> $stack40 = l0.<org.h2.command.dml.Call: org.h2.engine.Session session>
$stack6 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$500(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack6 = this.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack38 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$500(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack38 = this.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack42 <org.hypergraphdb.query.HGAtomPredicate: boolean satisfies(org.hypergraphdb.HyperGraph,org.hypergraphdb.HGHandle)> $stack42 = $stack40.<org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.HyperGraph hg>
sub <org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.cond2qry.QueryMetaData clone(org.hypergraphdb.query.HGQueryCondition)> sub = (org.hypergraphdb.query.HGQueryCondition) $stack135
sub <org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.cond2qry.QueryMetaData clone(org.hypergraphdb.query.HGQueryCondition)> sub = null
sub <org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.cond2qry.QueryMetaData clone(org.hypergraphdb.query.HGQueryCondition)> sub = $stack121.<org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.HGQueryCondition cond>
sub <org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.cond2qry.QueryMetaData clone(org.hypergraphdb.query.HGQueryCondition)> sub = $stack130.<org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.HGQueryCondition cond>
sub <org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.cond2qry.QueryMetaData clone(org.hypergraphdb.query.HGQueryCondition)> sub = $stack108.<org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.HGQueryCondition cond>
sub <org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.cond2qry.QueryMetaData clone(org.hypergraphdb.query.HGQueryCondition)> sub = $stack102.<org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.HGQueryCondition cond>
sub <org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.cond2qry.QueryMetaData clone(org.hypergraphdb.query.HGQueryCondition)> sub = $stack92.<org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.HGQueryCondition cond>
sub <org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.cond2qry.QueryMetaData clone(org.hypergraphdb.query.HGQueryCondition)> sub = curr.<org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.HGQueryCondition cond>
sub <org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.cond2qry.QueryMetaData clone(org.hypergraphdb.query.HGQueryCondition)> sub = curr.<org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.HGQueryCondition cond>
sub <org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.cond2qry.QueryMetaData clone(org.hypergraphdb.query.HGQueryCondition)> sub = n#48.<org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.HGQueryCondition cond>
$stack52 <org.hypergraphdb.query.cond2qry.QueryMetaData: org.hypergraphdb.query.cond2qry.QueryMetaData clone(org.hypergraphdb.query.HGAtomPredicate)> $stack52 = new org.hypergraphdb.query.impl.RABasedPredicate
l2 <org.h2.bnf.Sentence: void setQuery(java.lang.String)> l2 = virtualinvoke l1.<org.h2.bnf.Sentence: java.lang.String getQuery()>()
$stack31 <org.h2.command.dml.Query: org.h2.result.SortOrder prepareOrder(org.h2.util.ObjectArray,int)> $stack31 = l0.<org.h2.command.dml.SelectUnion: org.h2.util.ObjectArray orderList>
l2 <org.h2.result.SortOrder: java.lang.String getSQL(org.h2.expression.Expression[],int)> l2 = newarray (org.h2.expression.Expression)[$stack19]
$stack2 <org.hypergraphdb.query.impl.TraversalBasedQuery$1: org.hypergraphdb.HGHandle eval(org.hypergraphdb.util.Pair)> $stack2 = (org.hypergraphdb.util.Pair) x0
$stack2 <org.hypergraphdb.query.impl.TraversalBasedQuery$2: org.hypergraphdb.HGHandle eval(org.hypergraphdb.util.Pair)> $stack2 = (org.hypergraphdb.util.Pair) x0
$stack16 <org.h2.engine.Database: void update(org.h2.engine.Session,org.h2.engine.DbObject)> $stack16 = l0.<org.h2.command.ddl.AlterTableRenameColumn: org.h2.engine.Session session>
$stack24 <org.h2.engine.Database: void update(org.h2.engine.Session,org.h2.engine.DbObject)> $stack24 = l0.<org.h2.command.ddl.AlterTableRenameColumn: org.h2.engine.Session session>
$stack3 <net.sf.hibernate.sql.Delete: net.sf.hibernate.sql.Delete setTableName(java.lang.String)> $stack3 = this.<net.sf.hibernate.collection.BasicCollectionPersister: java.lang.String qualifiedTableName>
$stack5 <net.sf.hibernate.sql.Delete: net.sf.hibernate.sql.Delete setPrimaryKeyColumnNames(java.lang.String[])> $stack5 = this.<net.sf.hibernate.collection.BasicCollectionPersister: java.lang.String[] keyColumnNames>
$stack9 <net.sf.hibernate.sql.Delete: net.sf.hibernate.sql.Delete setWhere(java.lang.String)> $stack9 = this.<net.sf.hibernate.collection.BasicCollectionPersister: java.lang.String sqlWhereString>
$stack3 <net.sf.hibernate.sql.Insert: net.sf.hibernate.sql.Insert setTableName(java.lang.String)> $stack3 = this.<net.sf.hibernate.collection.BasicCollectionPersister: java.lang.String qualifiedTableName>
$stack5 <net.sf.hibernate.sql.Insert: net.sf.hibernate.sql.Insert addColumns(java.lang.String[])> $stack5 = this.<net.sf.hibernate.collection.BasicCollectionPersister: java.lang.String[] keyColumnNames>
$stack16 <net.sf.hibernate.sql.Insert: net.sf.hibernate.sql.Insert addColumns(java.lang.String[])> $stack16 = this.<net.sf.hibernate.collection.BasicCollectionPersister: java.lang.String[] indexColumnNames>
$stack12 <net.sf.hibernate.sql.Insert: net.sf.hibernate.sql.Insert addColumn(java.lang.String)> $stack12 = this.<net.sf.hibernate.collection.BasicCollectionPersister: java.lang.String identifierColumnName>
$stack9 <net.sf.hibernate.sql.Insert: net.sf.hibernate.sql.Insert addColumns(java.lang.String[])> $stack9 = this.<net.sf.hibernate.collection.BasicCollectionPersister: java.lang.String[] elementColumnNames>
$stack3 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update setTableName(java.lang.String)> $stack3 = this.<net.sf.hibernate.collection.BasicCollectionPersister: java.lang.String qualifiedTableName>
$stack5 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update addColumns(java.lang.String[])> $stack5 = this.<net.sf.hibernate.collection.BasicCollectionPersister: java.lang.String[] elementColumnNames>
$stack13 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update setPrimaryKeyColumnNames(java.lang.String[])> $stack13 = this.<net.sf.hibernate.collection.BasicCollectionPersister: java.lang.String[] rowSelectColumnNames>
$stack10 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update setPrimaryKeyColumnNames(java.lang.String[])> $stack10 = staticinvoke <net.sf.hibernate.util.ArrayHelper: java.lang.String[] join(java.lang.String[],java.lang.String[])>($stack9, $stack8)
pkColumns <net.sf.hibernate.sql.Delete: net.sf.hibernate.sql.Delete setPrimaryKeyColumnNames(java.lang.String[])> pkColumns = this.<net.sf.hibernate.collection.BasicCollectionPersister: java.lang.String[] rowSelectColumnNames>
pkColumns <net.sf.hibernate.sql.Delete: net.sf.hibernate.sql.Delete setPrimaryKeyColumnNames(java.lang.String[])> pkColumns = staticinvoke <net.sf.hibernate.util.ArrayHelper: java.lang.String[] join(java.lang.String[],java.lang.String[])>($stack4, $stack3)
$stack7 <net.sf.hibernate.sql.Delete: net.sf.hibernate.sql.Delete setTableName(java.lang.String)> $stack7 = this.<net.sf.hibernate.collection.BasicCollectionPersister: java.lang.String qualifiedTableName>
st <net.sf.hibernate.collection.PersistentCollection: void writeTo(java.sql.PreparedStatement,net.sf.hibernate.collection.CollectionPersister,java.lang.Object,int,boolean)> st = null
$stack26 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)> $stack26 = virtualinvoke this.<net.sf.hibernate.collection.BasicCollectionPersister: java.lang.String getSQLUpdateRowString()>()
st <net.sf.hibernate.collection.PersistentCollection: void writeTo(java.sql.PreparedStatement,net.sf.hibernate.collection.CollectionPersister,java.lang.Object,int,boolean)> st = interfaceinvoke $stack25.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)>($stack26)
$stack14 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack14 = staticinvoke <org.h2.util.StringUtils: java.lang.String javaEncode(java.lang.String)>(l0)
$stack19 <org.h2.engine.Database: boolean areEqual(org.h2.value.Value,org.h2.value.Value)> $stack19 = l3[l7]
$stack32 <org.h2.command.dml.Query: boolean sameResultAsLast(org.h2.engine.Session,org.h2.value.Value[],org.h2.value.Value[],long)> $stack32 = l0.<org.h2.command.dml.Query: org.h2.engine.Session session>
l1 <org.h2.command.dml.Query: boolean isEverything(org.h2.expression.ExpressionVisitor)> l1 = staticinvoke <org.h2.expression.ExpressionVisitor: org.h2.expression.ExpressionVisitor get(int)>(4)
l2 <org.h2.command.dml.Query: boolean isEverything(org.h2.expression.ExpressionVisitor)> l2 = staticinvoke <org.h2.expression.ExpressionVisitor: org.h2.expression.ExpressionVisitor get(int)>(l1)
$stack2 <net.sf.hibernate.sql.Template: java.lang.String renderWhereStringTemplate(java.lang.String,net.sf.hibernate.dialect.Dialect)> $stack2 = this.<net.sf.hibernate.mapping.Formula: java.lang.String formula>
$stack2 <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String)> $stack2 = this.<net.sf.hibernate.connection.ProxoolConnectionProvider: java.lang.String proxoolAlias>
$stack8 <java.sql.Connection: void setTransactionIsolation(int)> $stack8 = virtualinvoke $stack7.<java.lang.Integer: int intValue()>()
$stack48 <org.hypergraphdb.query.impl.ZigZagIntersectionResult: boolean positionTo(org.hypergraphdb.HGRandomAccessResult)> $stack48 = this.<org.hypergraphdb.query.impl.ZigZagIntersectionResult: org.hypergraphdb.HGRandomAccessResult right>
$stack41 <org.hypergraphdb.query.impl.ZigZagIntersectionResult: boolean positionTo(org.hypergraphdb.HGRandomAccessResult)> $stack41 = this.<org.hypergraphdb.query.impl.ZigZagIntersectionResult: org.hypergraphdb.HGRandomAccessResult left>
$stack38 <org.hypergraphdb.query.impl.ZigZagIntersectionResult: boolean positionTo(org.hypergraphdb.HGRandomAccessResult)> $stack38 = this.<org.hypergraphdb.query.impl.ZigZagIntersectionResult: org.hypergraphdb.HGRandomAccessResult left>
$stack34 <org.hypergraphdb.query.impl.ZigZagIntersectionResult: boolean positionTo(org.hypergraphdb.HGRandomAccessResult)> $stack34 = this.<org.hypergraphdb.query.impl.ZigZagIntersectionResult: org.hypergraphdb.HGRandomAccessResult left>
$stack28 <org.hypergraphdb.query.impl.ZigZagIntersectionResult: boolean positionTo(org.hypergraphdb.HGRandomAccessResult)> $stack28 = this.<org.hypergraphdb.query.impl.ZigZagIntersectionResult: org.hypergraphdb.HGRandomAccessResult right>
tree <org.hibernate.reflection.java.EJB3OverridenAnnotationReader: javax.persistence.SqlResultSetMappings getSqlResultSetMappings(org.dom4j.Element,org.hibernate.reflection.java.xml.XMLContext$Default)> tree = virtualinvoke $stack119.<org.hibernate.reflection.java.xml.XMLContext: org.dom4j.Element getXMLTree(java.lang.String,java.lang.String)>($stack118, null)
tree <org.hibernate.reflection.java.EJB3OverridenAnnotationReader: javax.persistence.SqlResultSetMappings getSqlResultSetMappings(org.dom4j.Element,org.hibernate.reflection.java.xml.XMLContext$Default)> tree = virtualinvoke $stack24.<org.hibernate.reflection.java.xml.XMLContext: org.dom4j.Element getXMLTree(java.lang.String,java.lang.String)>($stack23, $stack22)
annotation <org.hibernate.reflection.java.EJB3OverridenAnnotationReader: void addSqlResultsetMappingIfNeeded(javax.persistence.SqlResultSetMapping,java.util.List)> annotation = (javax.persistence.SqlResultSetMapping) $stack20
current <org.hibernate.reflection.java.EJB3OverridenAnnotationReader: void addSqlResultsetMappingIfNeeded(javax.persistence.SqlResultSetMapping,java.util.List)> current = arr$[i$]
annotation <org.hibernate.reflection.java.EJB3OverridenAnnotationReader: void addNamedQueryIfNeeded(javax.persistence.NamedQuery,java.util.List)> annotation = (javax.persistence.NamedQuery) $stack20
current <org.hibernate.reflection.java.EJB3OverridenAnnotationReader: void addNamedQueryIfNeeded(javax.persistence.NamedQuery,java.util.List)> current = arr$[i$]
annotation <org.hibernate.reflection.java.EJB3OverridenAnnotationReader: void addNamedNativeQueryIfNeeded(javax.persistence.NamedNativeQuery,java.util.List)> annotation = (javax.persistence.NamedNativeQuery) $stack20
current <org.hibernate.reflection.java.EJB3OverridenAnnotationReader: void addNamedNativeQueryIfNeeded(javax.persistence.NamedNativeQuery,java.util.List)> current = arr$[i$]
$stack7 <java.sql.ResultSet: java.lang.Object getObject(java.lang.String)> $stack7 = names[0]
$stack6 <org.hibernate.type.EnumType: int guessTypeFromMetaData(java.sql.DatabaseMetaData)> $stack6 = interfaceinvoke $stack5.<java.sql.Connection: java.sql.DatabaseMetaData getMetaData()>()
$stack17 <java.sql.DatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> $stack17 = this.<org.hibernate.type.EnumType: java.lang.String catalog>
$stack82 <java.sql.DatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> $stack82 = $stack99
$stack82 <java.sql.DatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> $stack82 = virtualinvoke $stack81.<java.lang.String: java.lang.String toLowerCase()>()
$stack59 <java.sql.DatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> $stack59 = $stack76
$stack59 <java.sql.DatabaseMetaData: java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> $stack59 = virtualinvoke $stack58.<java.lang.String: java.lang.String toUpperCase()>()
enclosingType <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.IncidentCondition incident(org.hypergraphdb.HGHandle)> enclosingType = $stack22
$stack23 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.And and(org.hypergraphdb.query.HGQueryCondition[])> $stack23 = newarray (org.hypergraphdb.query.HGQueryCondition)[4]
$stack29 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.query.IncidentCondition incident(org.hypergraphdb.HGHandle)> $stack29 = interfaceinvoke j#3.<org.hypergraphdb.type.HGProjection: org.hypergraphdb.HGHandle getType()>()
$stack5 <me.prettyprint.cassandra.model.IndexedSlicesQuery: org.apache.cassandra.thrift.IndexClause access$000(me.prettyprint.cassandra.model.IndexedSlicesQuery)> $stack5 = this.<me.prettyprint.cassandra.model.IndexedSlicesQuery$1: me.prettyprint.cassandra.model.IndexedSlicesQuery this$0>
$stack25 <me.prettyprint.cassandra.model.IndexedSlicesQuery: org.apache.cassandra.thrift.IndexClause access$000(me.prettyprint.cassandra.model.IndexedSlicesQuery)> $stack25 = this.<me.prettyprint.cassandra.model.IndexedSlicesQuery$1: me.prettyprint.cassandra.model.IndexedSlicesQuery this$0>
$stack11 <me.prettyprint.cassandra.model.IndexedSlicesQuery: org.apache.cassandra.thrift.IndexClause access$000(me.prettyprint.cassandra.model.IndexedSlicesQuery)> $stack11 = this.<me.prettyprint.cassandra.model.IndexedSlicesQuery$1: me.prettyprint.cassandra.model.IndexedSlicesQuery this$0>
$stack3 <me.prettyprint.cassandra.model.thrift.ThriftCounterColumnQuery: me.prettyprint.hector.api.Serializer access$000(me.prettyprint.cassandra.model.thrift.ThriftCounterColumnQuery)> $stack3 = this.<me.prettyprint.cassandra.model.thrift.ThriftCounterColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftCounterColumnQuery this$0>
$stack8 <me.prettyprint.cassandra.model.thrift.ThriftCounterColumnQuery: java.lang.String access$100(me.prettyprint.cassandra.model.thrift.ThriftCounterColumnQuery)> $stack8 = this.<me.prettyprint.cassandra.model.thrift.ThriftCounterColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftCounterColumnQuery this$0>
$stack11 <me.prettyprint.cassandra.model.thrift.ThriftCounterColumnQuery: me.prettyprint.hector.api.Serializer access$200(me.prettyprint.cassandra.model.thrift.ThriftCounterColumnQuery)> $stack11 = this.<me.prettyprint.cassandra.model.thrift.ThriftCounterColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftCounterColumnQuery this$0>
$stack17 <me.prettyprint.cassandra.model.thrift.ThriftCounterColumnQuery: me.prettyprint.hector.api.Serializer access$300(me.prettyprint.cassandra.model.thrift.ThriftCounterColumnQuery)> $stack17 = this.<me.prettyprint.cassandra.model.thrift.ThriftCounterColumnQuery$1: me.prettyprint.cassandra.model.thrift.ThriftCounterColumnQuery this$0>
$stack7 <net.sf.hibernate.hql.Parser: void token(java.lang.String,net.sf.hibernate.hql.QueryTranslator)> $stack7 = virtualinvoke tokens.<java.util.StringTokenizer: java.lang.String nextToken()>()
$stack6 <com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.rdf.model.Model getNamedModel(java.lang.String)> $stack6 = virtualinvoke this.<org.vivoweb.harvester.util.repo.TDBJenaConnect: java.lang.String getModelName()>()
$stack8 <com.hp.hpl.jena.tdb.TDBFactory: com.hp.hpl.jena.query.Dataset createDataset(java.lang.String)> $stack8 = this.<org.vivoweb.harvester.util.repo.TDBJenaConnect: java.lang.String dbDir>
$stack4 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.ColumnQuery createColumnQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack4 = this.<me.prettyprint.cassandra.io.ChunkInputStream: me.prettyprint.hector.api.Keyspace keyspace>
$stack9 <me.prettyprint.hector.api.query.ColumnQuery: me.prettyprint.hector.api.query.ColumnQuery setColumnFamily(java.lang.String)> $stack9 = this.<me.prettyprint.cassandra.io.ChunkInputStream: java.lang.String cf>
$stack11 <me.prettyprint.hector.api.query.ColumnQuery: me.prettyprint.hector.api.query.ColumnQuery setKey(java.lang.Object)> $stack11 = this.<me.prettyprint.cassandra.io.ChunkInputStream: java.lang.Object key>
$stack14 <me.prettyprint.hector.api.query.ColumnQuery: me.prettyprint.hector.api.query.ColumnQuery setName(java.lang.Object)> $stack14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack13)
$stack8 <org.h2.engine.Database: org.h2.engine.UserDataType findUserDataType(java.lang.String)> $stack8 = l0.<org.h2.command.ddl.DropUserDataType: java.lang.String typeName>
$stack10 <org.h2.engine.Database: void removeDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack10 = l0.<org.h2.command.ddl.DropUserDataType: org.h2.engine.Session session>
$stack4 <net.sf.hibernate.impl.BatcherImpl: java.sql.PreparedStatement getPreparedStatement(java.sql.Connection,java.lang.String,boolean,boolean)> $stack4 = interfaceinvoke $stack3.<net.sf.hibernate.engine.SessionImplementor: java.sql.Connection connection()>()
$stack5 <net.sf.hibernate.impl.BatcherImpl: java.sql.PreparedStatement getPreparedStatement(java.sql.Connection,java.lang.String,boolean)> $stack5 = interfaceinvoke $stack4.<net.sf.hibernate.engine.SessionImplementor: java.sql.Connection connection()>()
ps <net.sf.hibernate.impl.BatcherImpl: void setStatementFetchSize(java.sql.PreparedStatement)> ps = specialinvoke this.<net.sf.hibernate.impl.BatcherImpl: java.sql.PreparedStatement getPreparedStatement(java.sql.Connection,java.lang.String,boolean)>($stack5, sql, scrollable)
ps <net.sf.hibernate.impl.BatcherImpl: void closeStatement(java.sql.PreparedStatement)> ps = this.<net.sf.hibernate.impl.BatcherImpl: java.sql.PreparedStatement batchUpdate>
ps <net.sf.hibernate.impl.BatcherImpl: void closeStatement(java.sql.PreparedStatement)> ps = this.<net.sf.hibernate.impl.BatcherImpl: java.sql.PreparedStatement batchUpdate>
$stack13 <net.sf.hibernate.impl.BatcherImpl: void closeQueryStatement(java.sql.PreparedStatement)> $stack13 = (java.sql.PreparedStatement) $stack12
$stack5 <java.sql.Statement: void setFetchSize(int)> $stack5 = virtualinvoke statementFetchSize.<java.lang.Integer: int intValue()>()
$stack12 <org.apache.http.client.utils.URIBuilder: java.util.List parseQuery(java.lang.String,java.nio.charset.Charset)> $stack12 = virtualinvoke uri.<java.net.URI: java.lang.String getRawQuery()>()
$stack22 <org.h2.engine.Database: org.h2.engine.User findUser(java.lang.String)> $stack22 = l0.<org.h2.command.ddl.AlterUser: java.lang.String newName>
$stack32 <org.h2.engine.Database: void renameDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject,java.lang.String)> $stack32 = l0.<org.h2.command.ddl.AlterUser: org.h2.engine.Session session>
$stack16 <org.h2.engine.Database: void update(org.h2.engine.Session,org.h2.engine.DbObject)> $stack16 = l0.<org.h2.command.ddl.AlterUser: org.h2.engine.Session session>
$stack8 <net.sf.hibernate.id.IncrementGenerator: void getNext(java.sql.Connection)> $stack8 = interfaceinvoke session.<net.sf.hibernate.engine.SessionImplementor: java.sql.Connection connection()>()
$stack12 <java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack12 = this.<net.sf.hibernate.id.IncrementGenerator: java.lang.String sql>
$stack209 <net.sf.hibernate.sql.Template: java.lang.String renderOrderByStringTemplate(java.lang.String,net.sf.hibernate.dialect.Dialect)> $stack209 = this.<net.sf.hibernate.collection.AbstractCollectionPersister: java.lang.String sqlOrderByString>
$stack187 <net.sf.hibernate.sql.Template: java.lang.String renderWhereStringTemplate(java.lang.String,net.sf.hibernate.dialect.Dialect)> $stack187 = this.<net.sf.hibernate.collection.AbstractCollectionPersister: java.lang.String sqlWhereString>
keyAliases <net.sf.hibernate.sql.Alias: java.lang.String[] toAliasStrings(java.lang.String[])> keyAliases = newarray (java.lang.String)[keySpan]
aliases <net.sf.hibernate.sql.Alias: java.lang.String[] toAliasStrings(java.lang.String[])> aliases = newarray (java.lang.String)[elementSpan]
indexAliases <net.sf.hibernate.sql.Alias: java.lang.String[] toAliasStrings(java.lang.String[])> indexAliases = newarray (java.lang.String)[indexSpan]
$stack113 <net.sf.hibernate.sql.Alias: java.lang.String toAliasString(java.lang.String)> $stack113 = virtualinvoke indexSpan#28.<net.sf.hibernate.mapping.Column: java.lang.String getAlias()>()
$stack9 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)> $stack9 = virtualinvoke this.<net.sf.hibernate.collection.AbstractCollectionPersister: java.lang.String getSQLDeleteString()>()
st <net.sf.hibernate.collection.AbstractCollectionPersister: void writeKey(java.sql.PreparedStatement,java.io.Serializable,boolean,net.sf.hibernate.engine.SessionImplementor)> st = interfaceinvoke $stack8.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)>($stack9)
$stack30 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)> $stack30 = virtualinvoke this.<net.sf.hibernate.collection.AbstractCollectionPersister: java.lang.String getSQLInsertRowString()>()
st <net.sf.hibernate.collection.PersistentCollection: void writeTo(java.sql.PreparedStatement,net.sf.hibernate.collection.CollectionPersister,java.lang.Object,int,boolean)> st = interfaceinvoke $stack29.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)>($stack30)
$stack18 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)> $stack18 = virtualinvoke this.<net.sf.hibernate.collection.AbstractCollectionPersister: java.lang.String getSQLDeleteRowString()>()
st <net.sf.hibernate.collection.AbstractCollectionPersister: void writeRowSelect(java.sql.PreparedStatement,java.lang.Object,net.sf.hibernate.engine.SessionImplementor)> st = interfaceinvoke $stack17.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)>($stack18)
st <net.sf.hibernate.collection.PersistentCollection: void writeTo(java.sql.PreparedStatement,net.sf.hibernate.collection.CollectionPersister,java.lang.Object,int,boolean)> st = null
$stack28 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)> $stack28 = virtualinvoke this.<net.sf.hibernate.collection.AbstractCollectionPersister: java.lang.String getSQLInsertRowString()>()
st <net.sf.hibernate.collection.PersistentCollection: void writeTo(java.sql.PreparedStatement,net.sf.hibernate.collection.CollectionPersister,java.lang.Object,int,boolean)> st = interfaceinvoke $stack27.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareBatchStatement(java.lang.String)>($stack28)
$stack10 <me.prettyprint.cassandra.model.IndexedSlicesQuery: me.prettyprint.cassandra.model.IndexedSlicesQuery setStartKey(java.lang.Object)> $stack10 = this.<me.prettyprint.cassandra.service.IndexedSlicesIterator: java.lang.Object startKey>
l3 <org.h2.command.dml.Select: void queryFlat(int,org.h2.result.LocalResult,long)> l3 = virtualinvoke $stack49.<org.h2.value.Value: int getInt()>()
l3 <org.h2.command.dml.Select: void queryFlat(int,org.h2.result.LocalResult,long)> l3 = virtualinvoke $stack6.<org.h2.util.ObjectArray: int size()>()
l4 <org.h2.command.dml.Select: void queryDistinct(org.h2.result.LocalResult,long)> l4 = $stack8
$stack14 <org.h2.table.TableFilter: void startQuery(org.h2.engine.Session)> $stack14 = l0.<org.h2.command.dml.Select: org.h2.engine.Session session>
$stack127 <org.h2.command.dml.Query: org.h2.result.SortOrder prepareOrder(org.h2.util.ObjectArray,int)> $stack127 = l0.<org.h2.command.dml.Select: org.h2.util.ObjectArray orderList>
l1 <org.h2.result.SortOrder: java.lang.String getSQL(org.h2.expression.Expression[],int)> l1 = newarray (org.h2.expression.Expression)[$stack10]
$stack126 <org.h2.table.TableFilter: java.lang.String getPlanSQL(boolean)> $stack126 = 1
$stack126 <org.h2.table.TableFilter: java.lang.String getPlanSQL(boolean)> $stack126 = 0
$stack115 <org.h2.table.TableFilter: java.lang.String getPlanSQL(boolean)> $stack115 = 1
$stack115 <org.h2.table.TableFilter: java.lang.String getPlanSQL(boolean)> $stack115 = 0
$stack4 <net.sf.hibernate.hql.ParserHelper: void parse(net.sf.hibernate.hql.Parser,java.lang.String,java.lang.String,net.sf.hibernate.hql.QueryTranslator)> $stack4 = new net.sf.hibernate.hql.PreprocessingParser
alias <net.sf.hibernate.hql.QueryTranslator: java.lang.String getAliasName(java.lang.String)> alias = staticinvoke <net.sf.hibernate.util.StringHelper: java.lang.String root(java.lang.String)>(path)
type <net.sf.hibernate.hql.QueryTranslator: net.sf.hibernate.persister.Queryable getPersister(java.lang.Class)> type = virtualinvoke this.<net.sf.hibernate.hql.QueryTranslator: java.lang.Class getType(java.lang.String)>(name)
role <net.sf.hibernate.hql.QueryTranslator: net.sf.hibernate.collection.QueryableCollection getCollectionPersister(java.lang.String)> role = virtualinvoke this.<net.sf.hibernate.hql.QueryTranslator: java.lang.String getRole(java.lang.String)>(name)
type <net.sf.hibernate.hql.QueryTranslator: net.sf.hibernate.persister.Queryable getPersister(java.lang.Class)> type = virtualinvoke this.<net.sf.hibernate.hql.QueryTranslator: java.lang.Class getType(java.lang.String)>(name)
$stack5 <net.sf.hibernate.sql.JoinFragment: void addCrossJoin(java.lang.String,java.lang.String)> $stack5 = interfaceinvoke classPersister.<net.sf.hibernate.persister.Queryable: java.lang.String getTableName()>()
$stack6 <net.sf.hibernate.sql.JoinFragment: void addCondition(java.lang.String)> $stack6 = virtualinvoke newjoin.<net.sf.hibernate.sql.JoinFragment: java.lang.String toWhereFragmentString()>()
name <net.sf.hibernate.hql.QueryTranslator: net.sf.hibernate.persister.Queryable getPersisterForName(java.lang.String)> name = (java.lang.String) $stack140
i#18 <net.sf.hibernate.sql.QuerySelect: void addSelectFragmentString(java.lang.String)> i#18 = specialinvoke this.<net.sf.hibernate.hql.QueryTranslator: java.lang.String renderScalarSelect()>()
oneToOneOwner#26 <net.sf.hibernate.hql.QueryTranslator: void renderPropertiesSelect(net.sf.hibernate.sql.QuerySelect)> oneToOneOwner#26 = $stack32
$stack35 <net.sf.hibernate.sql.QuerySelect: void setDistinct(boolean)> $stack35 = this.<net.sf.hibernate.hql.QueryTranslator: boolean distinct>
$stack119 <net.sf.hibernate.collection.QueryableCollection: java.lang.String selectFragment(java.lang.String)> $stack119 = this.<net.sf.hibernate.hql.QueryTranslator: java.lang.String fetchName>
$stack121 <net.sf.hibernate.sql.QuerySelect: void addSelectFragmentString(java.lang.String)> $stack121 = interfaceinvoke $stack120.<net.sf.hibernate.collection.QueryableCollection: java.lang.String selectFragment(java.lang.String)>($stack119)
$stack39 <net.sf.hibernate.hql.QueryTranslator: void mergeJoins(net.sf.hibernate.sql.JoinFragment)> $stack39 = virtualinvoke oneToOneOwner#26.<net.sf.hibernate.sql.QuerySelect: net.sf.hibernate.sql.JoinFragment getJoinFragment()>()
$stack41 <net.sf.hibernate.sql.QuerySelect: void setWhereTokens(java.util.Iterator)> $stack41 = interfaceinvoke $stack40.<java.util.List: java.util.Iterator iterator()>()
$stack43 <net.sf.hibernate.sql.QuerySelect: void setGroupByTokens(java.util.Iterator)> $stack43 = interfaceinvoke $stack42.<java.util.List: java.util.Iterator iterator()>()
$stack45 <net.sf.hibernate.sql.QuerySelect: void setHavingTokens(java.util.Iterator)> $stack45 = interfaceinvoke $stack44.<java.util.List: java.util.Iterator iterator()>()
$stack47 <net.sf.hibernate.sql.QuerySelect: void setOrderByTokens(java.util.Iterator)> $stack47 = interfaceinvoke $stack46.<java.util.List: java.util.Iterator iterator()>()
$stack102 <net.sf.hibernate.collection.QueryableCollection: java.lang.String getSQLOrderByString(java.lang.String)> $stack102 = this.<net.sf.hibernate.hql.QueryTranslator: java.lang.String fetchName>
$stack104 <net.sf.hibernate.sql.QuerySelect: void addOrderBy(java.lang.String)> $stack104 = interfaceinvoke $stack103.<net.sf.hibernate.collection.QueryableCollection: java.lang.String getSQLOrderByString(java.lang.String)>($stack102)
$stack50 <net.sf.hibernate.hql.QueryTranslator: java.lang.String[][] generateColumnNames(net.sf.hibernate.type.Type[],net.sf.hibernate.engine.SessionFactoryImplementor)> $stack50 = this.<net.sf.hibernate.hql.QueryTranslator: net.sf.hibernate.type.Type[] returnTypes>
$stack92 <net.sf.hibernate.hql.QueryTranslator: net.sf.hibernate.collection.QueryableCollection getCollectionPersister(java.lang.String)> $stack92 = (java.lang.String) $stack91
$stack94 <net.sf.hibernate.hql.QueryTranslator: void addQuerySpace(java.io.Serializable)> $stack94 = interfaceinvoke p.<net.sf.hibernate.collection.CollectionPersister: java.io.Serializable getCollectionSpace()>()
$stack83 <net.sf.hibernate.hql.QueryTranslator: net.sf.hibernate.persister.Queryable getPersisterForName(java.lang.String)> $stack83 = (java.lang.String) $stack82
$stack88 <net.sf.hibernate.hql.QueryTranslator: void addQuerySpace(java.io.Serializable)> $stack88 = spaces[i]
name <net.sf.hibernate.persister.Queryable: java.lang.String identifierSelectFragment(java.lang.String,java.lang.String)> name = (java.lang.String) $stack9
$stack17 <net.sf.hibernate.sql.QuerySelect: void addSelectFragmentString(java.lang.String)> $stack17 = interfaceinvoke $stack16.<net.sf.hibernate.persister.Queryable: java.lang.String identifierSelectFragment(java.lang.String,java.lang.String)>(name, suffix)
name <net.sf.hibernate.persister.Queryable: java.lang.String propertySelectFragment(java.lang.String,java.lang.String)> name = (java.lang.String) $stack14
$stack17 <net.sf.hibernate.sql.QuerySelect: void addSelectFragmentString(java.lang.String)> $stack17 = interfaceinvoke $stack16.<net.sf.hibernate.persister.Queryable: java.lang.String propertySelectFragment(java.lang.String,java.lang.String)>(name, suffix)
k <net.sf.hibernate.hql.QueryTranslator: java.lang.String scalarName(int,int)> k = 0
k <net.sf.hibernate.hql.QueryTranslator: java.lang.String scalarName(int,int)> k = k + 1
k <net.sf.hibernate.hql.QueryTranslator: java.lang.String scalarName(int,int)> k = 0
$stack57 <net.sf.hibernate.hql.QueryTranslator: java.lang.String scalarName(int,int)> $stack57 = k
k <net.sf.hibernate.hql.QueryTranslator: java.lang.String scalarName(int,int)> k = k + 1
k <net.sf.hibernate.hql.QueryTranslator: java.lang.String scalarName(int,int)> k = k + 1
name <net.sf.hibernate.persister.Queryable: java.lang.String queryWhereFragment(java.lang.String,boolean,boolean)> name = (java.lang.String) $stack14
join <net.sf.hibernate.sql.JoinFragment: void addFragment(net.sf.hibernate.sql.JoinFragment)> join = (net.sf.hibernate.sql.JoinFragment) $stack15
$stack26 <net.sf.hibernate.sql.JoinFragment: void addJoins(java.lang.String,java.lang.String)> $stack26 = interfaceinvoke p.<net.sf.hibernate.persister.Queryable: java.lang.String fromJoinFragment(java.lang.String,boolean,boolean)>(name, isCrossJoin, includeSubclasses)
collectionName <net.sf.hibernate.collection.QueryableCollection: java.lang.String getSQLWhereString(java.lang.String)> collectionName = $stack18
$stack19 <net.sf.hibernate.sql.JoinFragment: void addCrossJoin(java.lang.String,java.lang.String)> $stack19 = interfaceinvoke persister.<net.sf.hibernate.collection.QueryableCollection: java.lang.String getTableName()>()
$stack33 <net.sf.hibernate.sql.JoinFragment: void addJoin(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],int)> $stack33 = interfaceinvoke p.<net.sf.hibernate.persister.Queryable: java.lang.String getTableName()>()
$stack23 <net.sf.hibernate.sql.JoinFragment: void addCondition(java.lang.String)> $stack23 = interfaceinvoke persister.<net.sf.hibernate.collection.QueryableCollection: java.lang.String getSQLWhereString(java.lang.String)>(collectionName)
name <net.sf.hibernate.hql.QueryTranslator: int[] getNamedParameterLocs(java.lang.String)> name = (java.lang.String) $stack16
$stack4 <net.sf.hibernate.hql.QueryTranslator: void logQuery(java.lang.String,java.lang.String)> $stack4 = this.<net.sf.hibernate.hql.QueryTranslator: java.lang.String queryString>
$stack6 <net.sf.hibernate.hql.QueryTranslator: void logQuery(java.lang.String,java.lang.String)> $stack6 = this.<net.sf.hibernate.hql.QueryTranslator: java.lang.String queryString>
$stack7 <net.sf.hibernate.hql.QueryTranslator: java.lang.String applyLocks(java.lang.String,java.util.Map,net.sf.hibernate.dialect.Dialect)> $stack7 = virtualinvoke this.<net.sf.hibernate.hql.QueryTranslator: java.lang.String getSQLString()>()
$stack11 <net.sf.hibernate.loader.Loader: java.sql.PreparedStatement prepareQueryStatement(java.lang.String,net.sf.hibernate.engine.QueryParameters,boolean,net.sf.hibernate.engine.SessionImplementor)> $stack11 = virtualinvoke this.<net.sf.hibernate.hql.QueryTranslator: java.lang.String applyLocks(java.lang.String,java.util.Map,net.sf.hibernate.dialect.Dialect)>($stack7, $stack8, $stack10)
st <net.sf.hibernate.loader.Loader: java.sql.ResultSet getResultSet(java.sql.PreparedStatement,net.sf.hibernate.engine.RowSelection,net.sf.hibernate.engine.SessionImplementor)> st = virtualinvoke this.<net.sf.hibernate.hql.QueryTranslator: java.sql.PreparedStatement prepareQueryStatement(java.lang.String,net.sf.hibernate.engine.QueryParameters,boolean,net.sf.hibernate.engine.SessionImplementor)>($stack11, queryParameters, 0, session)
$stack6 <net.sf.hibernate.hql.QueryTranslator: void logQuery(java.lang.String,java.lang.String)> $stack6 = this.<net.sf.hibernate.hql.QueryTranslator: java.lang.String queryString>
$stack7 <net.sf.hibernate.hql.QueryTranslator: java.lang.String applyLocks(java.lang.String,java.util.Map,net.sf.hibernate.dialect.Dialect)> $stack7 = virtualinvoke this.<net.sf.hibernate.hql.QueryTranslator: java.lang.String getSQLString()>()
$stack11 <net.sf.hibernate.loader.Loader: java.sql.PreparedStatement prepareQueryStatement(java.lang.String,net.sf.hibernate.engine.QueryParameters,boolean,net.sf.hibernate.engine.SessionImplementor)> $stack11 = virtualinvoke this.<net.sf.hibernate.hql.QueryTranslator: java.lang.String applyLocks(java.lang.String,java.util.Map,net.sf.hibernate.dialect.Dialect)>($stack7, $stack8, $stack10)
st <net.sf.hibernate.loader.Loader: java.sql.ResultSet getResultSet(java.sql.PreparedStatement,net.sf.hibernate.engine.RowSelection,net.sf.hibernate.engine.SessionImplementor)> st = virtualinvoke this.<net.sf.hibernate.hql.QueryTranslator: java.sql.PreparedStatement prepareQueryStatement(java.lang.String,net.sf.hibernate.engine.QueryParameters,boolean,net.sf.hibernate.engine.SessionImplementor)>($stack11, queryParameters, 1, session)
token <net.sf.hibernate.hql.QueryTranslator: java.lang.Class getImportedClass(java.lang.String,net.sf.hibernate.engine.SessionFactoryImplementor)> token = tokens[i]
token <net.sf.hibernate.hql.QueryTranslator: java.lang.Class getImportedClass(java.lang.String,net.sf.hibernate.engine.SessionFactoryImplementor)> token = placeholder
i <net.sf.hibernate.hql.QueryTranslator: java.lang.String scalarName(int,int)> i = 0
i <net.sf.hibernate.hql.QueryTranslator: java.lang.String scalarName(int,int)> i = i + 1
$stack27 <net.sf.hibernate.hql.QueryTranslator: java.lang.String getAliasName(java.lang.String)> $stack27 = (java.lang.String) $stack26
$stack20 <net.sf.hibernate.hql.QueryTranslator: java.lang.String getAliasName(java.lang.String)> $stack20 = (java.lang.String) $stack19
$stack6 <org.h2.table.TableFilter: void startQuery(org.h2.engine.Session)> $stack6 = l0.<org.h2.command.dml.Delete: org.h2.engine.Session session>
$stack5 <java.sql.Timestamp: int compareTo(java.sql.Timestamp)> $stack5 = l3.<org.h2.value.ValueTimestamp: java.sql.Timestamp value>
l0#2 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp getNoCopy(java.sql.Timestamp)> l0#2 = (java.sql.Timestamp) $stack1
l5 <java.sql.Timestamp: void setNanos(int)> l5 = virtualinvoke l4.<java.math.BigDecimal: int intValue()>()
l5 <java.sql.Timestamp: void setNanos(int)> l5 = l5 - 1000000000
l8 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp getNoCopy(java.sql.Timestamp)> l8 = $stack27
$stack4 <java.sql.Timestamp: boolean equals(java.sql.Timestamp)> $stack4 = $stack3.<org.h2.value.ValueTimestamp: java.sql.Timestamp value>
$stack8 <me.prettyprint.hector.api.query.SliceQuery: me.prettyprint.hector.api.query.SliceQuery setRange(java.lang.Object,java.lang.Object,boolean,int)> $stack8 = this.<me.prettyprint.cassandra.service.ColumnSliceIterator: java.lang.Object start>
$stack11 <me.prettyprint.hector.api.query.SliceQuery: me.prettyprint.hector.api.query.SliceQuery setRange(java.lang.Object,java.lang.Object,boolean,int)> $stack11 = this.<me.prettyprint.cassandra.service.ColumnSliceIterator: java.lang.Object start>
l11#11 <org.h2.store.FileLister: java.util.ArrayList getDatabaseFiles(java.lang.String,java.lang.String,boolean)> l11#11 = staticinvoke <org.h2.util.FileUtils: java.lang.String getParent(java.lang.String)>(l10#10)
$stack71 <org.hibernate.envers.tools.query.Parameters: void addWhereWithParam(java.lang.String,java.lang.String,java.lang.Object)> $stack71 = virtualinvoke verEntCfg.<org.hibernate.envers.configuration.AuditEntitiesConfiguration: java.lang.String getRevisionTypePropName()>()
$stack64 <org.hibernate.envers.query.criteria.AuditCriterion: void addToQuery(org.hibernate.envers.configuration.AuditConfiguration,java.lang.String,org.hibernate.envers.tools.query.QueryBuilder,org.hibernate.envers.tools.query.Parameters)> $stack64 = this.<org.hibernate.envers.query.impl.RevisionsOfEntityQuery: org.hibernate.envers.configuration.AuditConfiguration verCfg>
i$ <org.hibernate.envers.tools.query.QueryBuilder: void addOrder(java.lang.String,boolean)> i$ = virtualinvoke verEntCfg.<org.hibernate.envers.configuration.AuditEntitiesConfiguration: java.lang.String getRevisionNumberPath()>()
$stack50 <org.hibernate.envers.tools.query.QueryBuilder: void addFrom(java.lang.String,java.lang.String)> $stack50 = virtualinvoke $stack49.<org.hibernate.envers.configuration.AuditEntitiesConfiguration: java.lang.String getRevisionInfoEntityName()>()
$stack55 <org.hibernate.envers.tools.query.Parameters: void addWhere(java.lang.String,boolean,java.lang.String,java.lang.String,boolean)> $stack55 = virtualinvoke $stack54.<org.hibernate.envers.configuration.AuditEntitiesConfiguration: java.lang.String getRevisionNumberPath()>()
versionsEntity <org.hibernate.envers.query.impl.RevisionsOfEntityQuery: java.lang.Number getRevisionNumber(java.util.Map)> versionsEntity = (java.util.Map) resultRow
versionsEntity <org.hibernate.envers.query.impl.RevisionsOfEntityQuery: java.lang.Number getRevisionNumber(java.util.Map)> versionsEntity = (java.util.Map) $stack28
$stack5 <me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery: java.lang.String access$000(me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery)> $stack5 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery this$0>
$stack7 <me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery: me.prettyprint.hector.api.Serializer access$200(me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery)> $stack7 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery this$0>
$stack9 <me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery: java.lang.Object access$100(me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery)> $stack9 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery this$0>
$stack13 <me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery: me.prettyprint.hector.api.Serializer access$400(me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery)> $stack13 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery this$0>
$stack17 <me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery: me.prettyprint.cassandra.model.HKeyRange access$300(me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery)> $stack17 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery this$0>
$stack23 <me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery: me.prettyprint.hector.api.Serializer access$500(me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery)> $stack23 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery this$0>
$stack26 <me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery: me.prettyprint.hector.api.Serializer access$600(me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery)> $stack26 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSubSlicesQuery this$0>
l4 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> l4 = virtualinvoke l2.<java.lang.String: java.lang.String substring(int,int)>(0, l3)
$stack23 <org.h2.engine.Database: void addSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack23 = l0.<org.h2.command.ddl.CreateConstant: org.h2.engine.Session session>
l3 <org.h2.engine.Database: void setMaxOperationMemory(int)> l3 = specialinvoke l0.<org.h2.command.dml.Set: int getIntValue()>()
$stack228 <org.h2.engine.Database: void setCacheSize(int)> $stack228 = specialinvoke l0.<org.h2.command.dml.Set: int getIntValue()>()
$stack177 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack177 = l0.<org.h2.command.dml.Set: java.lang.String stringValue>
$stack178 <org.h2.engine.Database: void setCluster(java.lang.String)> $stack178 = staticinvoke <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)>($stack177)
$stack179 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack179 = l0.<org.h2.command.dml.Set: java.lang.String stringValue>
l4 <org.h2.engine.Database: void setCompareMode(org.h2.value.CompareMode)> l4 = staticinvoke <org.h2.value.CompareMode: org.h2.value.CompareMode getInstance(java.lang.String,int)>(null, 0)
l4 <org.h2.engine.Database: void setCompareMode(org.h2.value.CompareMode)> l4 = staticinvoke <org.h2.value.CompareMode: org.h2.value.CompareMode getInstance(java.lang.String,int)>($stack190, l6)
l3 <org.h2.engine.Database: void setMaxOperationMemory(int)> l3 = virtualinvoke $stack95.<org.h2.tools.CompressTool: int getCompressAlgorithm(java.lang.String)>($stack96)
$stack98 <org.h2.engine.Database: void setLobCompressionAlgorithm(java.lang.String)> $stack98 = null
$stack98 <org.h2.engine.Database: void setLobCompressionAlgorithm(java.lang.String)> $stack98 = l0.<org.h2.command.dml.Set: java.lang.String stringValue>
l3 <org.h2.engine.Database: void setMaxOperationMemory(int)> l3 = specialinvoke l0.<org.h2.command.dml.Set: int getIntValue()>()
$stack169 <org.h2.engine.Database: void setEventListenerClass(java.lang.String)> $stack169 = l0.<org.h2.command.dml.Set: java.lang.String stringValue>
$stack154 <org.h2.engine.Database: void setCloseDelay(int)> $stack154 = specialinvoke l0.<org.h2.command.dml.Set: int getIntValue()>()
l3 <org.h2.engine.Database: void setMaxOperationMemory(int)> l3 = specialinvoke l0.<org.h2.command.dml.Set: int getIntValue()>()
$stack31 <org.h2.engine.Database: void setExclusiveSession(org.h2.engine.Session)> $stack31 = l0.<org.h2.command.dml.Set: org.h2.engine.Session session>
$stack31 <org.h2.engine.Database: void setExclusiveSession(org.h2.engine.Session)> $stack31 = null
$stack260 <org.h2.engine.Database: void setIgnoreCase(boolean)> $stack260 = 1
$stack260 <org.h2.engine.Database: void setIgnoreCase(boolean)> $stack260 = 0
$stack159 <org.h2.engine.Database: void setLockMode(int)> $stack159 = specialinvoke l0.<org.h2.command.dml.Set: int getIntValue()>()
l3 <org.h2.engine.Database: void setMaxOperationMemory(int)> l3 = specialinvoke l0.<org.h2.command.dml.Set: int getIntValue()>()
$stack108 <org.h2.engine.Database: void setMaxLengthInplaceLob(int)> $stack108 = specialinvoke l0.<org.h2.command.dml.Set: int getIntValue()>()
$stack252 <org.h2.engine.Database: void setMaxLogSize(long)> $stack252 = $stack251 * 1024L
$stack164 <org.h2.engine.Database: void setMaxMemoryRows(int)> $stack164 = specialinvoke l0.<org.h2.command.dml.Set: int getIntValue()>()
$stack120 <org.h2.engine.Database: void setMaxMemoryUndo(int)> $stack120 = specialinvoke l0.<org.h2.command.dml.Set: int getIntValue()>()
l3 <org.h2.engine.Database: void setMaxOperationMemory(int)> l3 = specialinvoke l0.<org.h2.command.dml.Set: int getIntValue()>()
l3#63 <org.h2.engine.Database: void setMode(org.h2.engine.Mode)> l3#63 = staticinvoke <org.h2.engine.Mode: org.h2.engine.Mode getInstance(java.lang.String)>($stack243)
$stack79 <org.h2.engine.Database: void setMultiThreaded(boolean)> $stack79 = 1
$stack79 <org.h2.engine.Database: void setMultiThreaded(boolean)> $stack79 = 0
$stack71 <org.h2.engine.Database: void setOptimizeReuseResults(boolean)> $stack71 = 1
$stack71 <org.h2.engine.Database: void setOptimizeReuseResults(boolean)> $stack71 = 0
l4#67 <org.h2.engine.Session: void setQueryTimeout(int)> l4#67 = specialinvoke l0.<org.h2.command.dml.Set: int getIntValue()>()
l4#67 <org.h2.engine.Session: void setQueryTimeout(int)> l4#67 = specialinvoke l0.<org.h2.command.dml.Set: int getIntValue()>()
$stack49 <org.h2.engine.Database: void setReferentialIntegrity(boolean)> $stack49 = 1
$stack49 <org.h2.engine.Database: void setReferentialIntegrity(boolean)> $stack49 = 0
$stack73 <org.h2.engine.Database: org.h2.schema.Schema getSchema(java.lang.String)> $stack73 = l0.<org.h2.command.dml.Set: java.lang.String stringValue>
l4#67 <org.h2.engine.Session: void setQueryTimeout(int)> l4#67 = $stack212 * 1024
l4#67 <org.h2.engine.Session: void setQueryTimeout(int)> l4#67 = specialinvoke l0.<org.h2.command.dml.Set: int getIntValue()>()
$stack172 <org.h2.engine.Database: void setWriteDelay(int)> $stack172 = specialinvoke l0.<org.h2.command.dml.Set: int getIntValue()>()
$stack13 <org.h2.engine.Database: void addDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack13 = l0.<org.h2.command.dml.Set: org.h2.engine.Session session>
$stack12 <org.h2.engine.Database: void update(org.h2.engine.Session,org.h2.engine.DbObject)> $stack12 = l0.<org.h2.command.dml.Set: org.h2.engine.Session session>
l6 <org.h2.engine.Database: int compare(org.h2.value.Value,org.h2.value.Value)> l6 = staticinvoke <org.h2.value.ValueString: org.h2.value.ValueString get(java.lang.String)>(l2)
$stack1719 <org.h2.value.DataType: int convertTypeToSQLType(int)> $stack1719 = virtualinvoke l14.<org.h2.table.Column: int getType()>()
l10#255 <org.h2.tools.Csv: java.sql.ResultSet read(java.io.Reader,java.lang.String[])> l10#255 = $stack927
$stack747 <org.h2.value.DataType: int convertTypeToSQLType(int)> $stack747 = virtualinvoke l13#284.<org.h2.engine.FunctionAlias$JavaMethod: int getDataType()>()
$stack366 <org.h2.value.DataType: int convertTypeToSQLType(int)> $stack366 = l18#300.<org.h2.value.DataType: int type>
$stack308 <org.h2.value.DataType: int convertTypeToSQLType(int)> $stack308 = virtualinvoke l11#395.<org.h2.expression.ValueExpression: int getType()>()
$stack6 <org.hibernate.envers.query.AuditQueryCreator: org.hibernate.envers.query.AuditQuery forEntitiesAtRevision(java.lang.Class,java.lang.String,java.lang.Number)> $stack6 = virtualinvoke referencedEntity.<org.hibernate.envers.entities.mapper.relation.AbstractToOneMapper$EntityInfo: java.lang.Class getEntityClass()>()
$stack9 <org.hibernate.envers.query.AuditEntity: org.hibernate.envers.query.criteria.AuditRelatedId relatedId(java.lang.String)> $stack9 = this.<org.hibernate.envers.entities.mapper.relation.OneToOneNotOwningMapper: java.lang.String owningReferencePropertyName>
$stack11 <org.hibernate.envers.query.AuditQuery: org.hibernate.envers.query.AuditQuery add(org.hibernate.envers.query.criteria.AuditCriterion)> $stack11 = virtualinvoke $stack10.<org.hibernate.envers.query.criteria.AuditRelatedId: org.hibernate.envers.query.criteria.AuditCriterion eq(java.lang.Object)>(primaryKey)
$stack6 <org.hypergraphdb.HyperGraph: org.hypergraphdb.HGSearchResult find(org.hypergraphdb.query.HGQueryCondition)> $stack6 = this.<org.hypergraphdb.HGQuery$hg$10: org.hypergraphdb.query.HGQueryCondition val$condition>
$stack2 <org.hypergraphdb.query.impl.DerefMapping: java.lang.Object eval(org.hypergraphdb.HGHandle)> $stack2 = (org.hypergraphdb.HGHandle) x0
propertyName <org.hibernate.envers.tools.query.Parameters: void addNullRestriction(java.lang.String,boolean)> propertyName = interfaceinvoke $stack7.<org.hibernate.envers.query.property.PropertyNameGetter: java.lang.String get(org.hibernate.envers.configuration.AuditConfiguration)>(auditCfg)
sQuery <org.vivoweb.harvester.util.repo.JenaConnect: com.hp.hpl.jena.query.ResultSet executeSelectQuery(java.lang.String,boolean,boolean)> sQuery = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.String toString()>()
clazz <net.sf.hibernate.hql.PathExpressionParser: java.lang.String continueFromManyToMany(java.lang.Class,java.lang.String[],net.sf.hibernate.hql.QueryTranslator)> clazz = virtualinvoke $stack9.<net.sf.hibernate.type.EntityType: java.lang.Class getAssociatedClass()>()
$stack20 <net.sf.hibernate.hql.PathExpressionParser: void token(java.lang.String,net.sf.hibernate.hql.QueryTranslator)> $stack20 = tokens[i]
$stack18 <net.sf.hibernate.hql.WhereParser: void addJoin(net.sf.hibernate.sql.JoinFragment,net.sf.hibernate.hql.QueryTranslator)> $stack18 = virtualinvoke $stack17.<net.sf.hibernate.hql.PathExpressionParser: net.sf.hibernate.sql.JoinFragment getWhereJoin()>()
$stack25 <net.sf.hibernate.hql.PathExpressionParser: void token(java.lang.String,net.sf.hibernate.hql.QueryTranslator)> $stack25 = virtualinvoke tokens.<java.util.StringTokenizer: java.lang.String nextToken()>()
$stack21 <net.sf.hibernate.hql.QueryTranslator: net.sf.hibernate.collection.QueryableCollection getCollectionPersister(java.lang.String)> $stack21 = virtualinvoke $stack20.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String getCollectionRole()>()
$stack23 <net.sf.hibernate.hql.QueryTranslator: void addQuerySpace(java.io.Serializable)> $stack23 = interfaceinvoke $stack22.<net.sf.hibernate.collection.QueryableCollection: java.io.Serializable getCollectionSpace()>()
$stack13 <net.sf.hibernate.hql.WhereParser: void addJoin(net.sf.hibernate.sql.JoinFragment,net.sf.hibernate.hql.QueryTranslator)> $stack13 = virtualinvoke $stack12.<net.sf.hibernate.hql.PathExpressionParser: net.sf.hibernate.sql.JoinFragment getWhereJoin()>()
$stack5 <net.sf.hibernate.sql.JoinFragment: void addJoins(java.lang.String,java.lang.String)> $stack5 = virtualinvoke ojf.<net.sf.hibernate.sql.JoinFragment: java.lang.String toFromFragmentString()>()
$stack7 <net.sf.hibernate.hql.QueryTranslator: void addJoin(java.lang.String,net.sf.hibernate.sql.JoinFragment)> $stack7 = virtualinvoke $stack6.<net.sf.hibernate.hql.PathExpressionParser: java.lang.String getName()>()
$stack7 <net.sf.hibernate.hql.QueryTranslator: boolean isName(java.lang.String)> $stack7 = staticinvoke <net.sf.hibernate.util.StringHelper: java.lang.String root(java.lang.String)>(token)
$stack46 <net.sf.hibernate.hql.WhereParser: void doPathExpression(java.lang.String,net.sf.hibernate.hql.QueryTranslator)> $stack46 = virtualinvoke q.<net.sf.hibernate.hql.QueryTranslator: java.lang.String unalias(java.lang.String)>(token)
$stack45 <net.sf.hibernate.hql.QueryTranslator: void addNamedParameter(java.lang.String)> $stack45 = virtualinvoke token.<java.lang.String: java.lang.String substring(int)>(1)
discrim <net.sf.hibernate.type.LiteralType: java.lang.String objectToSQLString(java.lang.Object)> discrim = interfaceinvoke persister.<net.sf.hibernate.persister.Queryable: java.lang.Object getDiscriminatorSQLValue()>()
discrim <net.sf.hibernate.type.LiteralType: java.lang.String objectToSQLString(java.lang.Object)> discrim = $stack27
element <net.sf.hibernate.hql.WhereParser: java.lang.String getElementName(net.sf.hibernate.hql.PathExpressionParser$CollectionElement,net.sf.hibernate.hql.QueryTranslator)> element = virtualinvoke $stack4.<net.sf.hibernate.hql.PathExpressionParser: net.sf.hibernate.hql.PathExpressionParser$CollectionElement lastCollectionElement()>()
$stack16 <net.sf.hibernate.hql.WhereParser: void doPathExpression(java.lang.String,net.sf.hibernate.hql.QueryTranslator)> $stack16 = virtualinvoke $stack15.<java.lang.StringBuffer: java.lang.String toString()>()
propertyName <org.hibernate.envers.tools.query.Parameters: void addWhere(java.lang.String,java.lang.String,java.lang.String)> propertyName = interfaceinvoke $stack6.<org.hibernate.envers.query.property.PropertyNameGetter: java.lang.String get(org.hibernate.envers.configuration.AuditConfiguration)>(auditCfg)
$stack5 <me.prettyprint.cassandra.model.thrift.ThriftSliceCounterQuery: java.lang.String access$000(me.prettyprint.cassandra.model.thrift.ThriftSliceCounterQuery)> $stack5 = this.<me.prettyprint.cassandra.model.thrift.ThriftSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSliceCounterQuery this$0>
$stack7 <me.prettyprint.cassandra.model.thrift.ThriftSliceCounterQuery: me.prettyprint.hector.api.Serializer access$200(me.prettyprint.cassandra.model.thrift.ThriftSliceCounterQuery)> $stack7 = this.<me.prettyprint.cassandra.model.thrift.ThriftSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSliceCounterQuery this$0>
$stack9 <me.prettyprint.cassandra.model.thrift.ThriftSliceCounterQuery: java.lang.Object access$100(me.prettyprint.cassandra.model.thrift.ThriftSliceCounterQuery)> $stack9 = this.<me.prettyprint.cassandra.model.thrift.ThriftSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSliceCounterQuery this$0>
$stack16 <me.prettyprint.cassandra.model.thrift.ThriftSliceCounterQuery: me.prettyprint.hector.api.Serializer access$300(me.prettyprint.cassandra.model.thrift.ThriftSliceCounterQuery)> $stack16 = this.<me.prettyprint.cassandra.model.thrift.ThriftSliceCounterQuery$1: me.prettyprint.cassandra.model.thrift.ThriftSliceCounterQuery this$0>
$stack6 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery: java.lang.Iterable access$000(me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery)> $stack6 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery this$0>
$stack26 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery: me.prettyprint.hector.api.Serializer access$100(me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery)> $stack26 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery this$0>
$stack11 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery: java.lang.String access$200(me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery)> $stack11 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery this$0>
$stack13 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery: me.prettyprint.hector.api.Serializer access$300(me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery)> $stack13 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery this$0>
$stack20 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery: me.prettyprint.hector.api.Serializer access$400(me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery)> $stack20 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery this$0>
$stack22 <me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery: me.prettyprint.hector.api.Serializer access$500(me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery)> $stack22 = this.<me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery$1: me.prettyprint.cassandra.model.thrift.ThriftMultigetSliceQuery this$0>
searchQuery <org.vivoweb.harvester.fetch.WOSFetch: java.lang.String getnextQuery(java.lang.String)> searchQuery = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream)>($stack12)
searchQuery <org.vivoweb.harvester.fetch.WOSFetch: java.lang.String getnextQuery(java.lang.String)> searchQuery = specialinvoke this.<org.vivoweb.harvester.fetch.WOSFetch: java.lang.String getnextQuery(java.lang.String)>(searchQuery)
qb <org.hibernate.envers.strategy.AuditStrategy: void addAssociationAtRevisionRestriction(org.hibernate.envers.tools.query.QueryBuilder,java.lang.String,java.lang.String,boolean,org.hibernate.envers.entities.mapper.relation.MiddleIdData,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.hibernate.envers.entities.mapper.relation.MiddleComponentData[])> qb = $stack20
$stack21 <org.hibernate.envers.tools.query.QueryBuilder: void addFrom(java.lang.String,java.lang.String)> $stack21 = virtualinvoke referencedIdData.<org.hibernate.envers.entities.mapper.relation.MiddleIdData: java.lang.String getAuditEntityName()>()
rootParameters <org.hibernate.envers.entities.mapper.id.IdMapper: void addNamedIdEqualsToQuery(org.hibernate.envers.tools.query.Parameters,java.lang.String,boolean)> rootParameters = virtualinvoke qb.<org.hibernate.envers.tools.query.QueryBuilder: org.hibernate.envers.tools.query.Parameters getRootParameters()>()
$stack40 <org.hibernate.envers.tools.query.Parameters: void addWhereWithNamedParam(java.lang.String,java.lang.String,java.lang.String)> $stack40 = virtualinvoke verEntCfg.<org.hibernate.envers.configuration.AuditEntitiesConfiguration: java.lang.String getRevisionTypePropName()>()
$stack45 <org.hibernate.envers.tools.query.Parameters: void addWhereWithNamedParam(java.lang.String,boolean,java.lang.String,java.lang.String)> $stack45 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.String toString()>()
sb <org.hibernate.envers.tools.query.QueryBuilder: void build(java.lang.StringBuilder,java.util.Map)> sb = $stack46
$stack8 <org.hibernate.Session: org.hibernate.Query createQuery(java.lang.String)> $stack8 = this.<org.hibernate.envers.entities.mapper.relation.query.TwoEntityQueryGenerator: java.lang.String queryString>
query <org.hibernate.envers.entities.mapper.id.QueryParameterData: void setParameterValue(org.hibernate.Query)> query = interfaceinvoke $stack7.<org.hibernate.Session: org.hibernate.Query createQuery(java.lang.String)>($stack8)
$stack40 <org.h2.engine.Database: void addSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack40 = l0.<org.h2.command.ddl.AlterTableAddConstraint: org.h2.engine.Session session>
l5 <org.h2.engine.Database: void setEventListenerClass(java.lang.String)> l5 = virtualinvoke l2.<org.h2.engine.ConnectionInfo: java.lang.String removeProperty(java.lang.String,java.lang.String)>("DATABASE_EVENT_LISTENER", null)
l5 <org.h2.engine.Database: void setEventListenerClass(java.lang.String)> l5 = staticinvoke <org.h2.util.StringUtils: java.lang.String trim(java.lang.String,boolean,boolean,java.lang.String)>(l5, 1, 1, "\'")
l5 <org.h2.engine.Database: void setEventListenerClass(java.lang.String)> l5 = virtualinvoke l2.<org.h2.engine.ConnectionInfo: java.lang.String getProperty(int,java.lang.String)>(19, null)
l8 <org.h2.engine.Database: void openDatabase(int,int,boolean)> l8 = virtualinvoke l2.<org.h2.engine.ConnectionInfo: int getIntProperty(int,int)>(10, 1)
$stack282 <org.h2.engine.Database: void startServer(java.lang.String)> $stack282 = virtualinvoke $stack281.<org.h2.store.FileLock: java.lang.String getUniqueId()>()
$stack322 <org.h2.engine.Database: void removeStorage(int,org.h2.store.DiskFile)> $stack322 = virtualinvoke l7.<org.h2.store.Storage: int getId()>()
l7#54 <org.h2.engine.Database: void addMetaData(int)> l7#54 = 0
l7#54 <org.h2.engine.Database: void addMetaData(int)> l7#54 = l7#54 + 1
$stack66 <org.h2.engine.Database: void recompileInvalidViews(org.h2.engine.Session)> $stack66 = l0.<org.h2.engine.Database: org.h2.engine.Session systemSession>
$stack67 <org.h2.engine.Database: void addDefaultSetting(org.h2.engine.Session,int,java.lang.String,int)> $stack67 = l0.<org.h2.engine.Database: org.h2.engine.Session systemSession>
$stack68 <org.h2.engine.Database: void addDefaultSetting(org.h2.engine.Session,int,java.lang.String,int)> $stack68 = l0.<org.h2.engine.Database: org.h2.engine.Session systemSession>
$stack70 <org.h2.engine.Database: void addDefaultSetting(org.h2.engine.Session,int,java.lang.String,int)> $stack70 = l0.<org.h2.engine.Database: org.h2.engine.Session systemSession>
$stack71 <org.h2.engine.Database: void addDefaultSetting(org.h2.engine.Session,int,java.lang.String,int)> $stack71 = l0.<org.h2.engine.Database: org.h2.engine.Session systemSession>
$stack72 <org.h2.engine.Database: void addDefaultSetting(org.h2.engine.Session,int,java.lang.String,int)> $stack72 = l0.<org.h2.engine.Database: org.h2.engine.Session systemSession>
$stack73 <org.h2.engine.Database: void addDefaultSetting(org.h2.engine.Session,int,java.lang.String,int)> $stack73 = l0.<org.h2.engine.Database: org.h2.engine.Session systemSession>
$stack83 <org.h2.engine.Database: void removeUnusedStorages(org.h2.engine.Session)> $stack83 = l0.<org.h2.engine.Database: org.h2.engine.Session systemSession>
$stack7 <org.h2.engine.Database: java.util.HashMap getMap(int)> $stack7 = interfaceinvoke l2.<org.h2.engine.DbObject: int getType()>()
l4 <org.h2.engine.Database: java.util.HashMap getMap(int)> l4 = interfaceinvoke l2.<org.h2.engine.DbObject: int getType()>()
l4 <org.h2.engine.Database: java.util.HashMap getMap(int)> l4 = interfaceinvoke l2.<org.h2.engine.DbObject: int getType()>()
$stack2 <org.h2.engine.Database: void addDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack2 = l0.<org.h2.engine.Database: org.h2.engine.Session systemSession>
$stack3 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.CountQuery createCountQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack3 = this.<me.prettyprint.cassandra.service.spring.HectorTemplateImpl: me.prettyprint.hector.api.Keyspace keyspace>
$stack3 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.SuperCountQuery createSuperCountQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack3 = this.<me.prettyprint.cassandra.service.spring.HectorTemplateImpl: me.prettyprint.hector.api.Keyspace keyspace>
$stack4 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.SubCountQuery createSubCountQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack4 = this.<me.prettyprint.cassandra.service.spring.HectorTemplateImpl: me.prettyprint.hector.api.Keyspace keyspace>
$stack5 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.SuperColumnQuery createSuperColumnQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack5 = this.<me.prettyprint.cassandra.service.spring.HectorTemplateImpl: me.prettyprint.hector.api.Keyspace keyspace>
$stack4 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.MultigetSliceQuery createMultigetSliceQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack4 = this.<me.prettyprint.cassandra.service.spring.HectorTemplateImpl: me.prettyprint.hector.api.Keyspace keyspace>
$stack5 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.MultigetSuperSliceQuery createMultigetSuperSliceQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack5 = this.<me.prettyprint.cassandra.service.spring.HectorTemplateImpl: me.prettyprint.hector.api.Keyspace keyspace>
$stack5 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.MultigetSubSliceQuery createMultigetSubSliceQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack5 = this.<me.prettyprint.cassandra.service.spring.HectorTemplateImpl: me.prettyprint.hector.api.Keyspace keyspace>
$stack4 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.RangeSlicesQuery createRangeSlicesQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack4 = this.<me.prettyprint.cassandra.service.spring.HectorTemplateImpl: me.prettyprint.hector.api.Keyspace keyspace>
$stack5 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.RangeSuperSlicesQuery createRangeSuperSlicesQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack5 = this.<me.prettyprint.cassandra.service.spring.HectorTemplateImpl: me.prettyprint.hector.api.Keyspace keyspace>
$stack5 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.RangeSubSlicesQuery createRangeSubSlicesQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack5 = this.<me.prettyprint.cassandra.service.spring.HectorTemplateImpl: me.prettyprint.hector.api.Keyspace keyspace>
$stack4 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.SliceQuery createSliceQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack4 = this.<me.prettyprint.cassandra.service.spring.HectorTemplateImpl: me.prettyprint.hector.api.Keyspace keyspace>
$stack5 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.SubSliceQuery createSubSliceQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack5 = this.<me.prettyprint.cassandra.service.spring.HectorTemplateImpl: me.prettyprint.hector.api.Keyspace keyspace>
$stack5 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.SuperSliceQuery createSuperSliceQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack5 = this.<me.prettyprint.cassandra.service.spring.HectorTemplateImpl: me.prettyprint.hector.api.Keyspace keyspace>
$stack1 <me.prettyprint.cassandra.service.spring.HectorTemplateImpl: me.prettyprint.hector.api.query.SliceQuery createSliceQuery(me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack1 = staticinvoke <me.prettyprint.cassandra.serializers.TypeInferringSerializer: me.prettyprint.cassandra.serializers.TypeInferringSerializer get()>()
$stack1 <me.prettyprint.cassandra.service.spring.HectorTemplateImpl: me.prettyprint.hector.api.query.SuperSliceQuery createSuperSliceQuery(me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack1 = staticinvoke <me.prettyprint.cassandra.serializers.TypeInferringSerializer: me.prettyprint.cassandra.serializers.TypeInferringSerializer get()>()
$stack7 <me.prettyprint.cassandra.model.CqlQuery: java.nio.ByteBuffer access$000(me.prettyprint.cassandra.model.CqlQuery)> $stack7 = this.<me.prettyprint.cassandra.model.CqlQuery$1: me.prettyprint.cassandra.model.CqlQuery this$0>
$stack8 <org.apache.cassandra.thrift.Cassandra$Client: org.apache.cassandra.thrift.CqlResult execute_cql_query(java.nio.ByteBuffer,org.apache.cassandra.thrift.Compression)> $stack8 = staticinvoke <me.prettyprint.cassandra.model.CqlQuery: java.nio.ByteBuffer access$000(me.prettyprint.cassandra.model.CqlQuery)>($stack7)
$stack9 <me.prettyprint.cassandra.model.CqlQuery: boolean access$100(me.prettyprint.cassandra.model.CqlQuery)> $stack9 = this.<me.prettyprint.cassandra.model.CqlQuery$1: me.prettyprint.cassandra.model.CqlQuery this$0>
$stack37 <me.prettyprint.cassandra.model.CqlQuery: java.util.List access$300(me.prettyprint.cassandra.model.CqlQuery,org.apache.cassandra.thrift.CqlRow)> $stack37 = this.<me.prettyprint.cassandra.model.CqlQuery$1: me.prettyprint.cassandra.model.CqlQuery this$0>
$stack30 <me.prettyprint.cassandra.model.CqlQuery: me.prettyprint.hector.api.Serializer access$400(me.prettyprint.cassandra.model.CqlQuery)> $stack30 = this.<me.prettyprint.cassandra.model.CqlQuery$1: me.prettyprint.cassandra.model.CqlQuery this$0>
namedParams <net.sf.hibernate.impl.AbstractQueryImpl: net.sf.hibernate.engine.QueryParameters getQueryParameters(java.util.Map)> namedParams = virtualinvoke this.<net.sf.hibernate.impl.FilterImpl: java.util.Map getNamedParams()>()
$stack4 <net.sf.hibernate.engine.SessionImplementor: java.util.Iterator iterateFilter(java.lang.Object,java.lang.String,net.sf.hibernate.engine.QueryParameters)> $stack4 = this.<net.sf.hibernate.impl.FilterImpl: java.lang.Object collection>
namedParams <net.sf.hibernate.impl.AbstractQueryImpl: net.sf.hibernate.engine.QueryParameters getQueryParameters(java.util.Map)> namedParams = virtualinvoke this.<net.sf.hibernate.impl.FilterImpl: java.util.Map getNamedParams()>()
$stack4 <net.sf.hibernate.engine.SessionImplementor: java.util.List filter(java.lang.Object,java.lang.String,net.sf.hibernate.engine.QueryParameters)> $stack4 = this.<net.sf.hibernate.impl.FilterImpl: java.lang.Object collection>
revisionPropertyPath <org.hibernate.envers.tools.query.Parameters: void addWhereWithParam(java.lang.String,java.lang.String,java.lang.Object)> revisionPropertyPath = virtualinvoke verEntCfg.<org.hibernate.envers.configuration.AuditEntitiesConfiguration: java.lang.String getRevisionNumberPath()>()
$stack24 <org.hibernate.envers.query.criteria.AuditCriterion: void addToQuery(org.hibernate.envers.configuration.AuditConfiguration,java.lang.String,org.hibernate.envers.tools.query.QueryBuilder,org.hibernate.envers.tools.query.Parameters)> $stack24 = this.<org.hibernate.envers.query.impl.EntitiesModifiedAtRevisionQuery: org.hibernate.envers.configuration.AuditConfiguration verCfg>
$stack13 <org.h2.engine.Database: void removeSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack13 = l0.<org.h2.command.ddl.DropTable: org.h2.engine.Session session>
$stack22 <org.h2.command.CommandInterface: org.h2.result.ResultInterface executeQuery(int,boolean)> $stack22 = l0.<org.h2.jdbc.JdbcStatement: int maxRows>
$stack26 <org.h2.command.CommandInterface: org.h2.result.ResultInterface executeQuery(int,boolean)> $stack26 = l0.<org.h2.jdbc.JdbcStatement: int maxRows>
$stack3 <org.h2.jdbc.JdbcConnection: void setExecutingStatement(java.sql.Statement)> $stack3 = null
$stack3 <org.h2.jdbc.JdbcConnection: void setExecutingStatement(java.sql.Statement)> $stack3 = l0
$stack16 <net.sf.hibernate.loader.OuterJoinLoader: void walkCompositeElementTree(net.sf.hibernate.type.AbstractComponentType,java.lang.String[],net.sf.hibernate.collection.QueryableCollection,java.lang.String,java.util.List,java.util.Set,java.lang.String,int,net.sf.hibernate.engine.SessionFactoryImplementor)> $stack16 = (net.sf.hibernate.type.AbstractComponentType) type
$stack35 <net.sf.hibernate.loader.OuterJoinLoader: void walkCompositeElementTree(net.sf.hibernate.type.AbstractComponentType,java.lang.String[],net.sf.hibernate.collection.QueryableCollection,java.lang.String,java.util.List,java.util.Set,java.lang.String,int,net.sf.hibernate.engine.SessionFactoryImplementor)> $stack35 = (net.sf.hibernate.type.AbstractComponentType) $stack34
$stack43 <net.sf.hibernate.loader.OuterJoinLoader: java.util.List walkCollectionTree(net.sf.hibernate.collection.QueryableCollection,java.lang.String,java.util.List,java.util.Set,java.lang.String,int,net.sf.hibernate.engine.SessionFactoryImplementor)> $stack43 = (net.sf.hibernate.collection.QueryableCollection) joinable
$stack14 <net.sf.hibernate.sql.JoinFragment: void addJoin(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],int)> $stack14 = oj.<net.sf.hibernate.loader.OuterJoinLoader$OuterJoinableAssociation: java.lang.String tableName>
$stack17 <net.sf.hibernate.sql.JoinFragment: void addJoins(java.lang.String,java.lang.String)> $stack17 = interfaceinvoke $stack16.<net.sf.hibernate.persister.Joinable: java.lang.String fromJoinFragment(java.lang.String,boolean,boolean)>($stack15, 0, 1)
byId <net.sf.hibernate.sql.DisjunctionFragment: net.sf.hibernate.sql.DisjunctionFragment addCondition(net.sf.hibernate.sql.ConditionFragment)> byId = virtualinvoke $stack8.<net.sf.hibernate.sql.ConditionFragment: net.sf.hibernate.sql.ConditionFragment setCondition(java.lang.String[],java.lang.String)>(columnNames, "?")
$stack67 <net.sf.hibernate.loader.Loader: net.sf.hibernate.engine.Key getKeyFromResultSet(int,net.sf.hibernate.persister.Loadable,java.io.Serializable,java.sql.ResultSet,net.sf.hibernate.engine.SessionImplementor)> $stack67 = i
i#12 <net.sf.hibernate.loader.Loader: java.lang.Object getResultColumnOrRow(java.lang.Object[],java.sql.ResultSet,net.sf.hibernate.engine.SessionImplementor)> i#12 = specialinvoke this.<net.sf.hibernate.loader.Loader: java.lang.Object[] getRow(java.sql.ResultSet,net.sf.hibernate.persister.Loadable[],java.lang.String[],net.sf.hibernate.engine.Key[],java.lang.Object,net.sf.hibernate.engine.Key,net.sf.hibernate.LockMode[],java.util.List,net.sf.hibernate.engine.SessionImplementor)>(resultSet, persisters, suffixes, keys, optionalObject, optionalObjectKey, lockModeArray, hydratedObjects, session)
i#15 <net.sf.hibernate.loader.Loader: void readCollectionElement(java.lang.Object,java.io.Serializable,java.sql.ResultSet,net.sf.hibernate.engine.SessionImplementor)> i#15 = $stack42
$stack29 <net.sf.hibernate.loader.Loader: java.sql.PreparedStatement prepareQueryStatement(java.lang.String,net.sf.hibernate.engine.QueryParameters,boolean,net.sf.hibernate.engine.SessionImplementor)> $stack29 = virtualinvoke this.<net.sf.hibernate.loader.Loader: java.lang.String applyLocks(java.lang.String,java.util.Map,net.sf.hibernate.dialect.Dialect)>($stack25, $stack26, $stack28)
st <net.sf.hibernate.engine.Batcher: void closeQueryStatement(java.sql.PreparedStatement,java.sql.ResultSet)> st = virtualinvoke this.<net.sf.hibernate.loader.Loader: java.sql.PreparedStatement prepareQueryStatement(java.lang.String,net.sf.hibernate.engine.QueryParameters,boolean,net.sf.hibernate.engine.SessionImplementor)>($stack29, queryParameters, 0, session)
rs <net.sf.hibernate.loader.Loader: java.lang.Object getRowFromResultSet(java.sql.ResultSet,net.sf.hibernate.engine.SessionImplementor,net.sf.hibernate.engine.QueryParameters,java.util.List,java.lang.Object,java.io.Serializable,net.sf.hibernate.engine.Key[],boolean)> rs = virtualinvoke this.<net.sf.hibernate.loader.Loader: java.sql.ResultSet getResultSet(java.sql.PreparedStatement,net.sf.hibernate.engine.RowSelection,net.sf.hibernate.engine.SessionImplementor)>(st, selection, session)
firstRow <java.sql.ResultSet: boolean absolute(int)> firstRow = staticinvoke <net.sf.hibernate.loader.Loader: int getFirstRow(net.sf.hibernate.engine.RowSelection)>(selection)
sql <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareQueryStatement(java.lang.String,boolean)> sql = virtualinvoke dialect.<net.sf.hibernate.dialect.Dialect: java.lang.String getLimitString(java.lang.String,boolean,int)>($stack53, useOffset, $stack54)
st <net.sf.hibernate.engine.Batcher: void closeQueryStatement(java.sql.PreparedStatement,java.sql.ResultSet)> st = interfaceinvoke $stack20.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareQueryStatement(java.lang.String,boolean)>(sql, scrollable)
$stack30 <java.sql.Statement: void setQueryTimeout(int)> $stack30 = virtualinvoke $stack29.<java.lang.Integer: int intValue()>()
$stack28 <java.sql.Statement: void setFetchSize(int)> $stack28 = virtualinvoke $stack27.<java.lang.Integer: int intValue()>()
$stack24 <java.sql.PreparedStatement: void setInt(int,int)> $stack24 = index + $stack26
$stack17 <java.sql.PreparedStatement: void setInt(int,int)> $stack17 = index + $stack19
$stack7 <java.sql.Statement: void setMaxRows(int)> $stack7 = $stack5 + $stack6
rs <net.sf.hibernate.loader.Loader: void advance(java.sql.ResultSet,net.sf.hibernate.engine.RowSelection,net.sf.hibernate.engine.SessionImplementor)> rs = null
rs <net.sf.hibernate.loader.Loader: void advance(java.sql.ResultSet,net.sf.hibernate.engine.RowSelection,net.sf.hibernate.engine.SessionImplementor)> rs = interfaceinvoke $stack6.<net.sf.hibernate.engine.Batcher: java.sql.ResultSet getResultSet(java.sql.PreparedStatement)>(st)
$stack14 <net.sf.hibernate.engine.SessionFactoryImplementor: net.sf.hibernate.cache.QueryCache getQueryCache(java.lang.String)> $stack14 = virtualinvoke queryParameters.<net.sf.hibernate.engine.QueryParameters: java.lang.String getCacheRegion()>()
key <net.sf.hibernate.cache.QueryCache: void put(net.sf.hibernate.cache.QueryKey,net.sf.hibernate.type.Type[],java.util.List,net.sf.hibernate.engine.SessionImplementor)> key = $stack16
conn <net.sf.hibernate.connection.ConnectionProvider: void closeConnection(java.sql.Connection)> conn = interfaceinvoke connections.<net.sf.hibernate.connection.ConnectionProvider: java.sql.Connection getConnection()>()
showSql <net.sf.hibernate.cfg.Settings: void setShowSqlEnabled(boolean)> showSql = staticinvoke <net.sf.hibernate.util.PropertiesHelper: boolean getBoolean(java.lang.String,java.util.Properties)>("hibernate.show_sql", properties)
querySubstitutions <net.sf.hibernate.cfg.Settings: void setQuerySubstitutions(java.util.Map)> querySubstitutions = staticinvoke <net.sf.hibernate.util.PropertiesHelper: java.util.Map toMap(java.lang.String,java.lang.String,java.util.Properties)>("hibernate.query.substitutions", " ,=;:\n\t\r\f", properties)
cnfe#108 <net.sf.hibernate.cfg.Settings: void setQueryCacheEnabled(boolean)> cnfe#108 = staticinvoke <net.sf.hibernate.util.PropertiesHelper: boolean getBoolean(java.lang.String,java.util.Properties)>("hibernate.cache.use_query_cache", properties)
$stack96 <net.sf.hibernate.cfg.Settings: void setQueryCacheFactory(net.sf.hibernate.cache.QueryCacheFactory)> $stack96 = (net.sf.hibernate.cache.QueryCacheFactory) $stack95
$stack24 <org.springframework.web.util.UriComponentsBuilder: org.springframework.web.util.UriComponentsBuilder query(java.lang.String)> $stack24 = virtualinvoke m.<java.util.regex.Matcher: java.lang.String group(int)>(11)
$stack24 <org.springframework.web.util.UriComponentsBuilder: org.springframework.web.util.UriComponentsBuilder query(java.lang.String)> $stack24 = virtualinvoke m.<java.util.regex.Matcher: java.lang.String group(int)>(10)
$stack21 <org.springframework.web.util.UriComponentsBuilder: org.springframework.web.util.UriComponentsBuilder query(java.lang.String)> $stack21 = virtualinvoke uri.<java.net.URI: java.lang.String getQuery()>()
name <org.springframework.web.util.UriComponentsBuilder: org.springframework.web.util.UriComponentsBuilder queryParam(java.lang.String,java.lang.Object[])> name = virtualinvoke m.<java.util.regex.Matcher: java.lang.String group(int)>(1)
$stack8 <org.h2.engine.Database: org.h2.store.FileStore openFile(java.lang.String,java.lang.String,boolean)> $stack8 = l0.<org.h2.log.LogFile: java.lang.String fileName>
$stack7 <org.h2.engine.Database: void deleteLogFileLater(java.lang.String)> $stack7 = l0.<org.h2.log.LogFile: java.lang.String fileName>
collection#23 <org.hibernate.cfg.Ejb3JoinColumn: void overrideSqlTypeIfNecessary(org.hibernate.mapping.Column)> collection#23 = (org.hibernate.mapping.Column) $stack129
mappedByColumns#29 <org.hibernate.cfg.Ejb3JoinColumn: void overrideSqlTypeIfNecessary(org.hibernate.mapping.Column)> mappedByColumns#29 = (org.hibernate.mapping.Column) $stack112
collection#23 <org.hibernate.cfg.Ejb3JoinColumn: void overrideSqlTypeIfNecessary(org.hibernate.mapping.Column)> collection#23 = (org.hibernate.mapping.Column) $stack34
synthCol <org.hibernate.cfg.Ejb3JoinColumn: void overrideSqlTypeIfNecessary(org.hibernate.mapping.Column)> synthCol = (org.hibernate.mapping.Column) $stack9
$stack9 <org.hibernate.envers.tools.query.Parameters: void addWhere(java.lang.String,boolean,java.lang.String,java.lang.String,boolean)> $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>()
$stack69 <org.h2.engine.Database: void update(org.h2.engine.Session,org.h2.engine.DbObject)> $stack69 = l0.<org.h2.command.ddl.AlterTableAlterColumn: org.h2.engine.Session session>
$stack64 <org.h2.engine.Database: void update(org.h2.engine.Session,org.h2.engine.DbObject)> $stack64 = l0.<org.h2.command.ddl.AlterTableAlterColumn: org.h2.engine.Session session>
$stack59 <org.h2.engine.Database: void update(org.h2.engine.Session,org.h2.engine.DbObject)> $stack59 = l0.<org.h2.command.ddl.AlterTableAlterColumn: org.h2.engine.Session session>
$stack25 <org.h2.engine.Database: void update(org.h2.engine.Session,org.h2.engine.DbObject)> $stack25 = l0.<org.h2.command.ddl.AlterTableAlterColumn: org.h2.engine.Session session>
$stack7 <org.h2.engine.Database: void removeSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack7 = l0.<org.h2.command.ddl.AlterTableAlterColumn: org.h2.engine.Session session>
$stack22 <org.h2.engine.Database: java.lang.String getTempTableName(int)> $stack22 = virtualinvoke $stack21.<org.h2.engine.Session: int getId()>()
l6#78 <org.h2.engine.DbObject: java.lang.String getCreateSQLForCopy(org.h2.table.Table,java.lang.String)> l6#78 = virtualinvoke $stack31.<org.h2.schema.Schema: org.h2.table.TableData createTable(java.lang.String,int,org.h2.util.ObjectArray,boolean,boolean,boolean,boolean,int,org.h2.engine.Session)>(l2, l5#5, l4, $stack33, $stack35, $stack37, 0, -1, $stack38)
l6#78 <org.h2.engine.DbObject: java.lang.String getCreateSQLForCopy(org.h2.table.Table,java.lang.String)> l6#78 = (org.h2.table.TableData) $stack60
$stack142 <org.h2.constraint.ConstraintReferential: java.lang.String getCreateSQLForCopy(org.h2.table.Table,org.h2.table.Table,java.lang.String,boolean)> $stack142 = virtualinvoke l18.<org.h2.constraint.ConstraintReferential: org.h2.table.Table getTable()>()
$stack79 <org.h2.engine.Database: void renameSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject,java.lang.String)> $stack79 = l0.<org.h2.command.ddl.AlterTableAlterColumn: org.h2.engine.Session session>
$stack98 <org.h2.engine.Database: void renameSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject,java.lang.String)> $stack98 = l0.<org.h2.command.ddl.AlterTableAlterColumn: org.h2.engine.Session session>
$stack21 <org.h2.engine.Database: void removeSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack21 = l0.<org.h2.command.ddl.AlterTableAlterColumn: org.h2.engine.Session session>
$stack2 <org.h2.tools.SimpleResultSet: java.sql.Date getDate(int)> $stack2 = virtualinvoke l0.<org.h2.tools.SimpleResultSet: int findColumn(java.lang.String)>(l1)
$stack2 <org.h2.tools.SimpleResultSet: java.sql.Time getTime(int)> $stack2 = virtualinvoke l0.<org.h2.tools.SimpleResultSet: int findColumn(java.lang.String)>(l1)
$stack2 <org.h2.tools.SimpleResultSet: java.sql.Timestamp getTimestamp(int)> $stack2 = virtualinvoke l0.<org.h2.tools.SimpleResultSet: int findColumn(java.lang.String)>(l1)
$stack2 <org.h2.tools.SimpleResultSet: java.sql.Array getArray(int)> $stack2 = virtualinvoke l0.<org.h2.tools.SimpleResultSet: int findColumn(java.lang.String)>(l1)
$stack37 <org.h2.engine.Database: void addSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack37 = l0.<org.h2.command.ddl.CreateTable: org.h2.engine.Session session>
$stack52 <org.h2.command.dml.Insert: void setQuery(org.h2.command.dml.Query)> $stack52 = l0.<org.h2.command.ddl.CreateTable: org.h2.command.dml.Query asQuery>
$stack111 <org.h2.engine.Database: void removeSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject)> $stack111 = l0.<org.h2.command.ddl.CreateTable: org.h2.engine.Session session>
$stack5 <me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery: java.lang.String access$000(me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery)> $stack5 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery this$0>
$stack7 <me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery: me.prettyprint.hector.api.Serializer access$200(me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery)> $stack7 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery this$0>
$stack11 <me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery: me.prettyprint.cassandra.model.HKeyRange access$100(me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery)> $stack11 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery this$0>
$stack17 <me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery: me.prettyprint.hector.api.Serializer access$300(me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery)> $stack17 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery this$0>
$stack20 <me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery: me.prettyprint.hector.api.Serializer access$400(me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery)> $stack20 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery this$0>
$stack22 <me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery: me.prettyprint.hector.api.Serializer access$500(me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery)> $stack22 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery this$0>
$stack24 <me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery: me.prettyprint.hector.api.Serializer access$600(me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery)> $stack24 = this.<me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery$1: me.prettyprint.cassandra.model.thrift.ThriftRangeSuperSlicesQuery this$0>
subjectQuery <org.vivoweb.harvester.util.repo.JenaConnect: com.hp.hpl.jena.query.ResultSet executeSelectQuery(java.lang.String,boolean,boolean)> subjectQuery = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.String toString()>()
$stack8 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.ColumnQuery createColumnQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack8 = this.<me.prettyprint.cassandra.examples.ExampleDaoV2: me.prettyprint.hector.api.Keyspace keyspace>
$stack14 <me.prettyprint.hector.api.factory.HFactory: me.prettyprint.hector.api.query.MultigetSliceQuery createMultigetSliceQuery(me.prettyprint.hector.api.Keyspace,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer,me.prettyprint.hector.api.Serializer)> $stack14 = this.<me.prettyprint.cassandra.examples.ExampleDaoV2: me.prettyprint.hector.api.Keyspace keyspace>
$stack18 <me.prettyprint.hector.api.query.MultigetSliceQuery: me.prettyprint.hector.api.query.MultigetSliceQuery setColumnNames(java.lang.Object[])> $stack18 = newarray (java.lang.String)[1]
$stack83 <org.h2.server.pg.PgServerThread: java.lang.String getSQL(java.lang.String)> $stack83 = specialinvoke l0.<org.h2.server.pg.PgServerThread: java.lang.String readString()>()
l7#12 <java.sql.Statement: void setMaxRows(int)> l7#12 = 0
l7#12 <java.sql.Statement: void setMaxRows(int)> l7#12 = l7#12 + 1
$stack87 <java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack87 = l5#10.<org.h2.server.pg.PgServerThread$Prepared: java.lang.String sql>
$stack158 <org.h2.server.pg.PgServerThread: void setParameter(java.sql.PreparedStatement,int,byte[],int[])> $stack158 = l5#15.<org.h2.server.pg.PgServerThread$Portal: java.sql.PreparedStatement prep>
l9#31 <org.h2.server.pg.PgServerThread: void sendRowDescription(java.sql.ResultSetMetaData)> l9#31 = interfaceinvoke l8#30.<java.sql.PreparedStatement: java.sql.ResultSetMetaData getMetaData()>()
l7#12 <java.sql.Statement: void setMaxRows(int)> l7#12 = specialinvoke l0.<org.h2.server.pg.PgServerThread: int readShort()>()
l10#38 <org.h2.server.pg.PgServerThread: void sendDataRow(java.sql.ResultSet)> l10#38 = interfaceinvoke l8#30.<java.sql.PreparedStatement: java.sql.ResultSet getResultSet()>()
l11#39 <org.h2.server.pg.PgServerThread: void sendRowDescription(java.sql.ResultSetMetaData)> l11#39 = interfaceinvoke l10#38.<java.sql.ResultSet: java.sql.ResultSetMetaData getMetaData()>()
l7#44 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l7#44 = null
l8#45 <java.sql.Statement: boolean execute(java.lang.String)> l8#45 = virtualinvoke l6#43.<org.h2.util.ScriptReader: java.lang.String readStatement()>()
l8#45 <java.sql.Statement: boolean execute(java.lang.String)> l8#45 = specialinvoke l0.<org.h2.server.pg.PgServerThread: java.lang.String getSQL(java.lang.String)>(l8#45)
l7#44 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l7#44 = interfaceinvoke $stack68.<java.sql.Connection: java.sql.Statement createStatement()>()
l10#38 <org.h2.server.pg.PgServerThread: void sendDataRow(java.sql.ResultSet)> l10#38 = interfaceinvoke l7#44.<java.sql.Statement: java.sql.ResultSet getResultSet()>()
l11#39 <org.h2.server.pg.PgServerThread: void sendRowDescription(java.sql.ResultSetMetaData)> l11#39 = interfaceinvoke l10#38.<java.sql.ResultSet: java.sql.ResultSetMetaData getMetaData()>()
$stack16 <java.sql.ResultSet: java.lang.String getString(int)> $stack16 = l4 + 1
$stack12 <java.sql.PreparedStatement: void setString(int,java.lang.String)> $stack12 = l2 + 1
$stack17 <java.sql.ResultSetMetaData: java.lang.String getColumnName(int)> $stack17 = l6 + 1
$stack19 <java.sql.ResultSetMetaData: int getColumnType(int)> $stack19 = l6 + 1
$stack21 <java.sql.ResultSetMetaData: int getColumnDisplaySize(int)> $stack21 = l6 + 1
l1 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l1 = null
l2 <org.h2.util.JdbcUtils: void closeSilently(java.sql.ResultSet)> l2 = null
l2 <org.h2.util.JdbcUtils: void closeSilently(java.sql.ResultSet)> l2 = interfaceinvoke $stack9.<java.sql.DatabaseMetaData: java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(null, "PG_CATALOG", "PG_VERSION", null)
l1 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l1 = interfaceinvoke $stack12.<java.sql.Connection: java.sql.Statement createStatement()>()
l2 <org.h2.util.JdbcUtils: void closeSilently(java.sql.ResultSet)> l2 = interfaceinvoke l1.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>("SELECT VERSION FROM PG_CATALOG.PG_VERSION")
l6 <java.sql.Statement: boolean execute(java.lang.String)> l6 = virtualinvoke l5#15.<org.h2.util.ScriptReader: java.lang.String readStatement()>()
l2 <org.h2.util.JdbcUtils: void closeSilently(java.sql.ResultSet)> l2 = interfaceinvoke l1.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>("SELECT OID FROM PG_CATALOG.PG_TYPE")
$stack2 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Connection)> $stack2 = l0.<org.h2.server.pg.PgServerThread: java.sql.Connection conn>
l7 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Connection)> l7 = null
l8 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l8 = null
l7 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Connection)> l7 = staticinvoke <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)>(l1, l2, l3)
l8 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l8 = interfaceinvoke l7.<java.sql.Connection: java.sql.Statement createStatement()>()
l9 <java.sql.Statement: boolean execute(java.lang.String)> l9 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>()
l5 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Connection)> l5 = null
l6 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l6 = null
l5 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Connection)> l5 = staticinvoke <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)>(l1, l2, l3)
l6 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l6 = interfaceinvoke l5.<java.sql.Connection: java.sql.Statement createStatement()>()
$stack21 <net.sf.hibernate.sql.Alias: java.lang.String toAliasString(java.lang.String)> $stack21 = this.<net.sf.hibernate.mapping.Column: java.lang.String name>
l2 <org.h2.server.web.DbContents: int findColumn(java.sql.ResultSet,java.lang.String,int)> l2 = interfaceinvoke l1.<java.sql.DatabaseMetaData: java.sql.ResultSet getSchemas()>()
$stack16 <java.sql.ResultSet: java.lang.String getString(int)> $stack16 = staticinvoke <org.h2.server.web.DbContents: int findColumn(java.sql.ResultSet,java.lang.String,int)>(l2, "TABLE_SCHEM", 1)
l4 <java.sql.ResultSet: boolean getBoolean(int)> l4 = interfaceinvoke l3.<java.sql.ResultSet: int findColumn(java.lang.String)>("IS_DEFAULT")
$stack4 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update addColumn(java.lang.String)> $stack4 = columnNames[i]
$stack5 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update addColumn(java.lang.String,java.lang.String)> $stack5 = columnNames[i]
$stack4 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update addWhereColumn(java.lang.String)> $stack4 = columnNames[i]
$stack5 <net.sf.hibernate.sql.Update: net.sf.hibernate.sql.Update addWhereColumn(java.lang.String,java.lang.String)> $stack5 = columnNames[i]
$stack9 <net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack9 = this.<net.sf.hibernate.id.SequenceGenerator: java.lang.String sql>
st <net.sf.hibernate.engine.Batcher: void closeStatement(java.sql.PreparedStatement)> st = interfaceinvoke $stack8.<net.sf.hibernate.engine.Batcher: java.sql.PreparedStatement prepareStatement(java.lang.String)>($stack9)
rs <net.sf.hibernate.id.IdentifierGeneratorFactory: java.io.Serializable get(java.sql.ResultSet,net.sf.hibernate.type.Type,net.sf.hibernate.engine.SessionImplementor,java.lang.Object)> rs = interfaceinvoke st.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>()
$stack2 <org.h2.jdbc.JdbcArray: java.sql.ResultSet getResultSet(java.lang.Object[],long)> $stack2 = specialinvoke l0.<org.h2.jdbc.JdbcArray: java.lang.Object[] get()>()
$stack9 <org.h2.jdbc.JdbcArray: java.sql.ResultSet getResultSet(java.lang.Object[],long)> $stack9 = specialinvoke l0.<org.h2.jdbc.JdbcArray: java.lang.Object[] get()>()
$stack12 <org.h2.jdbc.JdbcArray: java.sql.ResultSet getResultSet(java.lang.Object[],long)> $stack12 = specialinvoke l0.<org.h2.jdbc.JdbcArray: java.lang.Object[] get(long,int)>(l1, l3)
$stack16 <org.h2.jdbc.JdbcArray: java.sql.ResultSet getResultSet(java.lang.Object[],long)> $stack16 = specialinvoke l0.<org.h2.jdbc.JdbcArray: java.lang.Object[] get(long,int)>(l1, l3)
$stack7 <me.prettyprint.cassandra.model.MultigetSubCountQuery: me.prettyprint.hector.api.Serializer access$100(me.prettyprint.cassandra.model.MultigetSubCountQuery)> $stack7 = this.<me.prettyprint.cassandra.model.MultigetSubCountQuery$1: me.prettyprint.cassandra.model.MultigetSubCountQuery this$0>
$stack9 <me.prettyprint.cassandra.model.MultigetSubCountQuery: java.lang.Object access$000(me.prettyprint.cassandra.model.MultigetSubCountQuery)> $stack9 = this.<me.prettyprint.cassandra.model.MultigetSubCountQuery$1: me.prettyprint.cassandra.model.MultigetSubCountQuery this$0>
refColumn#33 <org.hibernate.sql.Template: java.lang.String renderWhereStringTemplate(java.lang.String,java.lang.String,org.hibernate.dialect.Dialect)> refColumn#33 = virtualinvoke $stack65.<org.hibernate.mapping.Column: java.lang.String getQuotedName()>()
refColumn#33 <org.hibernate.sql.Template: java.lang.String renderWhereStringTemplate(java.lang.String,java.lang.String,org.hibernate.dialect.Dialect)> refColumn#33 = virtualinvoke $stack42.<org.hibernate.mapping.Formula: java.lang.String getFormula()>()
refColumn#33 <org.hibernate.sql.Template: java.lang.String renderWhereStringTemplate(java.lang.String,java.lang.String,org.hibernate.dialect.Dialect)> refColumn#33 = staticinvoke <org.hibernate.sql.Template: java.lang.String renderWhereStringTemplate(java.lang.String,java.lang.String,org.hibernate.dialect.Dialect)>(refColumn#33, "$alias$", $r5)
refColumn#33 <org.hibernate.sql.Template: java.lang.String renderWhereStringTemplate(java.lang.String,java.lang.String,org.hibernate.dialect.Dialect)> refColumn#33 = virtualinvoke $stack52.<java.lang.StringBuilder: java.lang.String toString()>()
refColumn#33 <org.hibernate.sql.Template: java.lang.String renderWhereStringTemplate(java.lang.String,java.lang.String,org.hibernate.dialect.Dialect)> refColumn#33 = staticinvoke <org.hibernate.util.StringHelper: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(refColumn#33, "$alias$", $stack59)
l2 <org.h2.engine.Database: org.h2.engine.Comment findComment(org.h2.engine.DbObject)> l2 = null
$stack44 <org.h2.engine.Database: org.h2.schema.Schema getSchema(java.lang.String)> $stack44 = l0.<org.h2.command.ddl.SetComment: java.lang.String schemaName>
l2 <org.h2.engine.Database: org.h2.engine.Comment findComment(org.h2.engine.DbObject)> l2 = virtualinvoke $stack45.<org.h2.schema.Schema: org.h2.schema.Constant getConstant(java.lang.String)>($stack46)
$stack55 <org.h2.engine.Database: org.h2.schema.Schema getSchema(java.lang.String)> $stack55 = l0.<org.h2.command.ddl.SetComment: java.lang.String schemaName>
l2 <org.h2.engine.Database: org.h2.engine.Comment findComment(org.h2.engine.DbObject)> l2 = virtualinvoke $stack56.<org.h2.schema.Schema: org.h2.constraint.Constraint getConstraint(java.lang.String)>($stack57)
$stack51 <org.h2.engine.Database: org.h2.engine.FunctionAlias findFunctionAlias(java.lang.String)> $stack51 = l0.<org.h2.command.ddl.SetComment: java.lang.String objectName>
l2 <org.h2.engine.Database: org.h2.engine.Comment findComment(org.h2.engine.DbObject)> l2 = virtualinvoke l1.<org.h2.engine.Database: org.h2.engine.FunctionAlias findFunctionAlias(java.lang.String)>($stack51)
$stack69 <org.h2.engine.Database: org.h2.schema.Schema getSchema(java.lang.String)> $stack69 = l0.<org.h2.command.ddl.SetComment: java.lang.String schemaName>
l2 <org.h2.engine.Database: org.h2.engine.Comment findComment(org.h2.engine.DbObject)> l2 = virtualinvoke $stack70.<org.h2.schema.Schema: org.h2.index.Index getIndex(java.lang.String)>($stack71)
$stack53 <org.h2.engine.Database: org.h2.engine.Role findRole(java.lang.String)> $stack53 = l0.<org.h2.command.ddl.SetComment: java.lang.String objectName>
l2 <org.h2.engine.Database: org.h2.engine.Comment findComment(org.h2.engine.DbObject)> l2 = virtualinvoke l1.<org.h2.engine.Database: org.h2.engine.Role findRole(java.lang.String)>($stack53)
$stack49 <org.h2.engine.Database: org.h2.schema.Schema findSchema(java.lang.String)> $stack49 = l0.<org.h2.command.ddl.SetComment: java.lang.String objectName>
l2 <org.h2.engine.Database: org.h2.engine.Comment findComment(org.h2.engine.DbObject)> l2 = virtualinvoke l1.<org.h2.engine.Database: org.h2.schema.Schema findSchema(java.lang.String)>($stack49)
$stack63 <org.h2.engine.Database: org.h2.schema.Schema getSchema(java.lang.String)> $stack63 = l0.<org.h2.command.ddl.SetComment: java.lang.String schemaName>
l2 <org.h2.engine.Database: org.h2.engine.Comment findComment(org.h2.engine.DbObject)> l2 = virtualinvoke $stack64.<org.h2.schema.Schema: org.h2.schema.Sequence getSequence(java.lang.String)>($stack65)
$stack73 <org.h2.engine.Database: org.h2.schema.Schema getSchema(java.lang.String)> $stack73 = l0.<org.h2.command.ddl.SetComment: java.lang.String schemaName>
l2 <org.h2.engine.Database: org.h2.engine.Comment findComment(org.h2.engine.DbObject)> l2 = virtualinvoke $stack74.<org.h2.schema.Schema: org.h2.table.Table getTableOrView(org.h2.engine.Session,java.lang.String)>($stack76, $stack75)
$stack59 <org.h2.engine.Database: org.h2.schema.Schema getSchema(java.lang.String)> $stack59 = l0.<org.h2.command.ddl.SetComment: java.lang.String schemaName>
l2 <org.h2.engine.Database: org.h2.engine.Comment findComment(org.h2.engine.DbObject)> l2 = virtualinvoke $stack60.<org.h2.schema.Schema: org.h2.schema.TriggerObject findTrigger(java.lang.String)>($stack61)
$stack67 <org.h2.engine.Database: org.h2.engine.User getUser(java.lang.String)> $stack67 = l0.<org.h2.command.ddl.SetComment: java.lang.String objectName>
l2 <org.h2.engine.Database: org.h2.engine.Comment findComment(org.h2.engine.DbObject)> l2 = virtualinvoke l1.<org.h2.engine.Database: org.h2.engine.User getUser(java.lang.String)>($stack67)
$stack14 <org.h2.engine.Database: org.h2.engine.UserDataType findUserDataType(java.lang.String)> $stack14 = l0.<org.h2.command.ddl.SetComment: java.lang.String objectName>
l2 <org.h2.engine.Database: org.h2.engine.Comment findComment(org.h2.engine.DbObject)> l2 = virtualinvoke l1.<org.h2.engine.Database: org.h2.engine.UserDataType findUserDataType(java.lang.String)>($stack14)
$stack24 <org.h2.engine.Database: void update(org.h2.engine.Session,org.h2.engine.DbObject)> $stack24 = l0.<org.h2.command.ddl.SetComment: org.h2.engine.Session session>
$stack38 <org.h2.engine.Database: void addDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack38 = l0.<org.h2.command.ddl.SetComment: org.h2.engine.Session session>
$stack35 <org.h2.engine.Database: void removeDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack35 = l0.<org.h2.command.ddl.SetComment: org.h2.engine.Session session>
$stack33 <org.h2.engine.Database: void update(org.h2.engine.Session,org.h2.engine.DbObject)> $stack33 = l0.<org.h2.command.ddl.SetComment: org.h2.engine.Session session>
$stack7 <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> $stack7 = targetSet[i]
h <org.hypergraphdb.HGQuery$hg: org.hypergraphdb.util.Ref constant(java.lang.Object)> h = (org.hypergraphdb.HGHandle) $stack10
$stack8 <org.h2.engine.Database: org.h2.schema.Schema findSchema(java.lang.String)> $stack8 = l0.<org.h2.command.ddl.DropSchema: java.lang.String schemaName>
$stack11 <org.h2.engine.Database: void removeDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack11 = l0.<org.h2.command.ddl.DropSchema: org.h2.engine.Session session>
cls#2 <org.hibernate.envers.query.AuditQueryCreator: org.hibernate.envers.query.AuditQuery forEntitiesAtRevision(java.lang.Class,java.lang.String,java.lang.Number)> cls#2 = staticinvoke <org.hibernate.envers.tools.Tools: java.lang.Class getTargetClassIfProxied(java.lang.Class)>(cls)
$stack16 <org.hibernate.envers.query.AuditQuery: org.hibernate.envers.query.AuditQuery add(org.hibernate.envers.query.criteria.AuditCriterion)> $stack16 = virtualinvoke $stack15.<org.hibernate.envers.query.criteria.AuditId: org.hibernate.envers.query.criteria.AuditCriterion eq(java.lang.Object)>(primaryKey)
cls#2 <org.hibernate.envers.query.AuditQueryCreator: org.hibernate.envers.query.AuditQuery forRevisionsOfEntity(java.lang.Class,java.lang.String,boolean,boolean)> cls#2 = staticinvoke <org.hibernate.envers.tools.Tools: java.lang.Class getTargetClassIfProxied(java.lang.Class)>(cls)
$stack10 <org.hibernate.envers.query.AuditQuery: org.hibernate.envers.query.AuditQuery addProjection(org.hibernate.envers.query.projection.AuditProjection)> $stack10 = staticinvoke <org.hibernate.envers.query.AuditEntity: org.hibernate.envers.query.criteria.AuditProperty revisionNumber()>()
$stack13 <org.hibernate.envers.query.AuditQuery: org.hibernate.envers.query.AuditQuery addOrder(org.hibernate.envers.query.order.AuditOrder)> $stack13 = virtualinvoke $stack12.<org.hibernate.envers.query.criteria.AuditProperty: org.hibernate.envers.query.order.AuditOrder asc()>()
$stack16 <org.hibernate.envers.query.AuditQuery: org.hibernate.envers.query.AuditQuery add(org.hibernate.envers.query.criteria.AuditCriterion)> $stack16 = virtualinvoke $stack15.<org.hibernate.envers.query.criteria.AuditId: org.hibernate.envers.query.criteria.AuditCriterion eq(java.lang.Object)>(primaryKey)
$stack6 <org.hibernate.envers.revisioninfo.RevisionInfoQueryCreator: org.hibernate.Criteria getRevisionDateQuery(org.hibernate.Session,java.lang.Number)> $stack6 = this.<org.hibernate.envers.reader.AuditReaderImpl: org.hibernate.Session session>
$stack6 <org.hibernate.envers.revisioninfo.RevisionInfoQueryCreator: org.hibernate.Criteria getRevisionNumberForDateQuery(org.hibernate.Session,java.util.Date)> $stack6 = this.<org.hibernate.envers.reader.AuditReaderImpl: org.hibernate.Session session>
$stack11 <org.hibernate.envers.revisioninfo.RevisionInfoQueryCreator: org.hibernate.Criteria getRevisionsQuery(org.hibernate.Session,java.util.Set)> $stack11 = this.<org.hibernate.envers.reader.AuditReaderImpl: org.hibernate.Session session>
$stack16 <org.hibernate.envers.revisioninfo.RevisionInfoQueryCreator: org.hibernate.Criteria getRevisionsQuery(org.hibernate.Session,java.util.Set)> $stack16 = this.<org.hibernate.envers.reader.AuditReaderImpl: org.hibernate.Session session>
$stack9 <org.h2.engine.Database: void close(boolean)> $stack9 = l0.<org.h2.engine.DatabaseCloser: boolean shutdownHook>
l3 <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)> l3 = specialinvoke l0.<org.h2.server.web.DbStarter: java.lang.String getParameter(javax.servlet.ServletContext,java.lang.String,java.lang.String)>(l2, "db.url", "jdbc:h2:~/test")
$stack242 <org.h2.engine.User: java.lang.String getCreateSQL(boolean,boolean)> $stack242 = l0.<org.h2.command.dml.ScriptCommand: boolean passwords>
$stack30 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack30 = new java.lang.String
$stack8 <java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)> $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>()
$stack88 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp getNoCopy(java.sql.Timestamp)> $stack88 = new java.sql.Timestamp
$stack86 <org.h2.value.ValueTime: org.h2.value.ValueTime get(java.sql.Time)> $stack86 = staticinvoke <java.sql.Time: java.sql.Time valueOf(java.lang.String)>("0:0:0")
$stack81 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp getNoCopy(java.sql.Timestamp)> $stack81 = new java.sql.Timestamp
$stack22 <org.h2.util.StringUtils: java.lang.String quoteStringSQL(java.lang.String)> $stack22 = l0.<org.h2.table.Column: java.lang.String comment>
$stack22 <org.h2.expression.Comparison: boolean compareNotNull(org.h2.engine.Database,org.h2.value.Value,org.h2.value.Value,int)> $stack22 = l0.<org.h2.expression.ConditionInSelect: org.h2.engine.Database database>
l3 <org.h2.index.IndexCondition: org.h2.index.IndexCondition getInQuery(org.h2.expression.ExpressionColumn,org.h2.command.dml.Query)> l3 = (org.h2.expression.ExpressionColumn) $stack8
l4 <org.h2.command.dml.Query: boolean isEverything(org.h2.expression.ExpressionVisitor)> l4 = staticinvoke <org.h2.expression.ExpressionVisitor: org.h2.expression.ExpressionVisitor get(int)>(6)
$stack4 <org.vivoweb.harvester.util.repo.SDBJenaConnect: com.hp.hpl.jena.sdb.Store connectStore(java.sql.Connection,java.lang.String,java.lang.String)> $stack4 = virtualinvoke original.<org.vivoweb.harvester.util.repo.SDBJenaConnect: java.sql.Connection buildConnection()>()
$stack8 <org.vivoweb.harvester.util.repo.SDBJenaConnect: com.hp.hpl.jena.sdb.Store connectStore(java.sql.Connection,java.lang.String,java.lang.String)> $stack8 = virtualinvoke this.<org.vivoweb.harvester.util.repo.SDBJenaConnect: java.sql.Connection buildConnection()>()
$stack3 <com.hp.hpl.jena.sdb.SDBFactory: com.hp.hpl.jena.sdb.Store connectStore(com.hp.hpl.jena.sdb.sql.SDBConnection,com.hp.hpl.jena.sdb.StoreDesc)> $stack3 = staticinvoke <com.hp.hpl.jena.sdb.sql.SDBConnectionFactory: com.hp.hpl.jena.sdb.sql.SDBConnection create(java.sql.Connection)>(conn)
$stack1 <com.hp.hpl.jena.sdb.SDBFactory: com.hp.hpl.jena.query.Dataset connectDataset(com.hp.hpl.jena.sdb.Store)> $stack1 = this.<org.vivoweb.harvester.util.repo.SDBJenaConnect: com.hp.hpl.jena.sdb.Store store>
$stack2 <org.hypergraphdb.HGQuery$hg: java.lang.Object findOne(org.hypergraphdb.HyperGraph,org.hypergraphdb.query.HGQueryCondition)> $stack2 = this.<org.hypergraphdb.HyperGraph$10: org.hypergraphdb.HyperGraph this$0>
$stack12 <org.hypergraphdb.query.AtomRegExPredicate: boolean satisfies(java.lang.Object)> $stack12 = virtualinvoke projected.<org.hypergraphdb.type.HGTypedValue: java.lang.Object getValue()>()
$stack1 <org.hibernate.envers.tools.query.QueryBuilder: org.hibernate.envers.tools.query.QueryBuilder newSubQueryBuilder(java.lang.String,java.lang.String)> $stack1 = this.<org.hibernate.envers.tools.query.QueryBuilder: java.lang.String entityName>
querySb <org.hibernate.envers.tools.query.QueryBuilder: void build(java.lang.StringBuilder,java.util.Map)> querySb = $stack7
$stack9 <org.hibernate.Session: org.hibernate.Query createQuery(java.lang.String)> $stack9 = virtualinvoke querySb.<java.lang.StringBuilder: java.lang.String toString()>()
$stack16 <org.hibernate.Query: org.hibernate.Query setParameter(java.lang.String,java.lang.Object)> $stack16 = (java.lang.String) $stack15
$stack4 <net.sf.hibernate.sql.Insert: net.sf.hibernate.sql.Insert addColumn(java.lang.String)> $stack4 = columnNames[i]
$stack12 <org.h2.engine.Database: org.h2.engine.UserDataType findUserDataType(java.lang.String)> $stack12 = l0.<org.h2.command.ddl.CreateUserDataType: java.lang.String typeName>
$stack20 <org.h2.engine.Database: void addDatabaseObject(org.h2.engine.Session,org.h2.engine.DbObject)> $stack20 = l0.<org.h2.command.ddl.CreateUserDataType: org.h2.engine.Session session>
$stack35 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$200(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack35 = $stack34.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack41 <org.hypergraphdb.query.HGAtomPredicate: boolean satisfies(org.hypergraphdb.HyperGraph,org.hypergraphdb.HGHandle)> $stack41 = $stack38.<org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.HyperGraph hg>
$stack8 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$200(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack8 = $stack7.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack12 <org.hypergraphdb.query.HGAtomPredicate: boolean satisfies(org.hypergraphdb.HyperGraph,org.hypergraphdb.HGHandle)> $stack12 = $stack11.<org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.HyperGraph hg>
$stack54 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$200(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack54 = $stack53.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack59 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$200(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack59 = $stack58.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack65 <org.hypergraphdb.query.HGAtomPredicate: boolean satisfies(org.hypergraphdb.HyperGraph,org.hypergraphdb.HGHandle)> $stack65 = $stack62.<org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.HyperGraph hg>
$stack9 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$200(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack9 = $stack8.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack28 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$200(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack28 = $stack27.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack31 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$200(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack31 = $stack30.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack37 <org.hypergraphdb.query.HGAtomPredicate: boolean satisfies(org.hypergraphdb.HyperGraph,org.hypergraphdb.HGHandle)> $stack37 = $stack34.<org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.HyperGraph hg>
$stack4 <org.hypergraphdb.algorithms.DefaultALGenerator: org.hypergraphdb.query.HGAtomPredicate access$200(org.hypergraphdb.algorithms.DefaultALGenerator)> $stack4 = $stack3.<org.hypergraphdb.algorithms.DefaultALGenerator$AdjIterator: org.hypergraphdb.algorithms.DefaultALGenerator this$0>
$stack3 <javax.sql.DataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> $stack3 = this.<net.sf.hibernate.connection.DatasourceConnectionProvider: java.lang.String user>
$stack21 <org.hypergraphdb.query.HGAtomPredicate: boolean satisfies(org.hypergraphdb.HyperGraph,org.hypergraphdb.HGHandle)> $stack21 = this.<org.hypergraphdb.algorithms.HyperTraversal: org.hypergraphdb.HyperGraph graph>
$stack9 <java.sql.Timestamp: void setNanos(int)> $stack9 = virtualinvoke orig.<java.sql.Timestamp: int getNanos()>()
l5#10 <org.h2.value.ValueDate: org.h2.value.ValueDate get(java.sql.Date)> l5#10 = interfaceinvoke l1.<java.sql.ResultSet: java.sql.Date getDate(int)>(l2)
l5#12 <org.h2.value.ValueTime: org.h2.value.ValueTime get(java.sql.Time)> l5#12 = interfaceinvoke l1.<java.sql.ResultSet: java.sql.Time getTime(int)>(l2)
l5#14 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp get(java.sql.Timestamp)> l5#14 = interfaceinvoke l1.<java.sql.ResultSet: java.sql.Timestamp getTimestamp(int)>(l2)
$stack73 <org.h2.value.ValueDate: org.h2.value.ValueDate get(java.sql.Date)> $stack73 = (java.sql.Date) l1
$stack71 <org.h2.value.ValueTime: org.h2.value.ValueTime get(java.sql.Time)> $stack71 = (java.sql.Time) l1
$stack69 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp get(java.sql.Timestamp)> $stack69 = (java.sql.Timestamp) l1
$stack65 <org.h2.value.ValueTimestamp: org.h2.value.ValueTimestamp get(java.sql.Timestamp)> $stack65 = new java.sql.Timestamp
$stack43 <org.h2.value.ValueResultSet: org.h2.value.ValueResultSet get(java.sql.ResultSet)> $stack43 = (java.sql.ResultSet) l1
l5 <org.h2.value.DataType: int convertTypeToSQLType(int)> l5 = virtualinvoke l4.<org.h2.expression.Expression: int getType()>()
$stack16 <org.h2.value.DataType: int convertSQLTypeToValueType(int)> $stack16 = interfaceinvoke $stack15.<org.h2.api.AggregateFunction: int getType(int[])>(l2)
$stack37 <org.h2.util.StringUtils: java.lang.String quoteRemarkSQL(java.lang.String)> $stack37 = virtualinvoke l3.<org.h2.util.StatementBuilder: java.lang.String toString()>()
l3#22 <org.h2.util.StringUtils: java.lang.String quoteRemarkSQL(java.lang.String)> l3#22 = staticinvoke <org.h2.util.StringUtils: java.lang.String unEnclose(java.lang.String)>($stack16)
l3#22 <org.h2.util.StringUtils: java.lang.String quoteRemarkSQL(java.lang.String)> l3#22 = staticinvoke <org.h2.util.StringUtils: java.lang.String quoteRemarkSQL(java.lang.String)>(l3#22)
$stack9 <java.sql.ResultSet: java.io.Reader getCharacterStream(java.lang.String)> $stack9 = names[0]
l6 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Connection)> l6 = null
l7 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l7 = null
$stack17 <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)> $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>()
l6 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Connection)> l6 = staticinvoke <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)>($stack17, l3, l4)
$stack22 <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)> $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.String toString()>()
l6 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Connection)> l6 = staticinvoke <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)>($stack22, l3, l4)
l6 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Connection)> l6 = staticinvoke <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)>(l1, l3, l4)
l7 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l7 = interfaceinvoke l6.<java.sql.Connection: java.sql.Statement createStatement()>()
$stack34 <java.sql.Statement: int executeUpdate(java.lang.String)> $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.String toString()>()
l6 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Connection)> l6 = staticinvoke <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)>(l2, l3, l4)
l7 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l7 = interfaceinvoke l6.<java.sql.Connection: java.sql.Statement createStatement()>()
$stack42 <java.sql.Statement: int executeUpdate(java.lang.String)> $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.String toString()>()
$stack4 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack4 = virtualinvoke vc.<org.hypergraphdb.query.AtomValueCondition: org.hypergraphdb.util.Ref getValueReference()>()
$stack6 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack6 = virtualinvoke vc.<org.hypergraphdb.query.AtomValueCondition: org.hypergraphdb.util.Ref getValueReference()>()
$stack4 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack4 = virtualinvoke ac.<org.hypergraphdb.query.AtomTypeCondition: org.hypergraphdb.util.Ref getTypeReference()>()
$stack7 <org.hypergraphdb.HGQuery$hg: boolean isVar(org.hypergraphdb.util.Ref)> $stack7 = virtualinvoke ac.<org.hypergraphdb.query.AtomTypeCondition: org.hypergraphdb.util.Ref getTypeReference()>()
$stack7 <org.hypergraphdb.query.SubsumedCondition: org.hypergraphdb.util.Ref access$000(org.hypergraphdb.query.SubsumedCondition)> $stack7 = this.<org.hypergraphdb.query.SubsumedCondition$AtomBased: org.hypergraphdb.query.SubsumedCondition this$0>
$stack10 <org.hypergraphdb.query.SubsumedCondition: org.hypergraphdb.util.Ref access$000(org.hypergraphdb.query.SubsumedCondition)> $stack10 = this.<org.hypergraphdb.query.SubsumedCondition$AtomBased: org.hypergraphdb.query.SubsumedCondition this$0>
$stack27 <org.hypergraphdb.query.SubsumedCondition: org.hypergraphdb.util.Ref access$000(org.hypergraphdb.query.SubsumedCondition)> $stack27 = this.<org.hypergraphdb.query.SubsumedCondition$AtomBased: org.hypergraphdb.query.SubsumedCondition this$0>
$stack20 <org.hypergraphdb.query.SubsumedCondition: org.hypergraphdb.util.Ref access$000(org.hypergraphdb.query.SubsumedCondition)> $stack20 = this.<org.hypergraphdb.query.SubsumedCondition$AtomBased: org.hypergraphdb.query.SubsumedCondition this$0>
atom <org.hypergraphdb.query.AtomRegExPredicate: boolean satisfies(java.lang.Object)> atom = virtualinvoke hg.<org.hypergraphdb.HyperGraph: java.lang.Object get(org.hypergraphdb.HGHandle)>(handle)
$stack23 <org.h2.engine.Database: void renameSchemaObject(org.h2.engine.Session,org.h2.schema.SchemaObject,java.lang.String)> $stack23 = l0.<org.h2.command.ddl.AlterIndexRename: org.h2.engine.Session session>
$stack5 <org.h2.engine.Database: void removeStorage(int,org.h2.store.DiskFile)> $stack5 = virtualinvoke $stack3.<org.h2.store.Storage: int getId()>()
$stack10 <org.hibernate.envers.query.AuditQueryCreator: org.hibernate.envers.query.AuditQuery forEntitiesAtRevision(java.lang.Class,java.lang.String,java.lang.Number)> $stack10 = virtualinvoke referencedEntity.<org.hibernate.envers.entities.mapper.relation.AbstractToOneMapper$EntityInfo: java.lang.Class getEntityClass()>()
$stack14 <org.hibernate.envers.query.AuditQuery: org.hibernate.envers.query.AuditQuery add(org.hibernate.envers.query.criteria.AuditCriterion)> $stack14 = virtualinvoke $stack13.<org.hibernate.envers.query.criteria.AuditId: org.hibernate.envers.query.criteria.AuditCriterion eq(java.lang.Object)>(primaryKey)
$stack4 <net.sf.hibernate.sql.CaseFragment: net.sf.hibernate.sql.CaseFragment setReturnColumnName(java.lang.String)> $stack4 = virtualinvoke $stack3.<net.sf.hibernate.sql.Alias: java.lang.String toAliasString(java.lang.String)>(returnColumnName)
leftResult <org.hypergraphdb.query.impl.RSCombiner: org.hypergraphdb.HGSearchResult combine(org.hypergraphdb.HGSearchResult,org.hypergraphdb.HGSearchResult)> leftResult = virtualinvoke $stack3.<org.hypergraphdb.HGQuery: org.hypergraphdb.HGSearchResult execute()>()
$stack12 <java.sql.Statement: boolean execute(java.lang.String)> $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>()
$stack20 <java.sql.Statement: boolean execute(java.lang.String)> $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.String toString()>()
$stack28 <java.sql.Statement: boolean execute(java.lang.String)> $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.String toString()>()
$stack36 <java.sql.Statement: boolean execute(java.lang.String)> $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>()
$stack44 <java.sql.Statement: boolean execute(java.lang.String)> $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.String toString()>()
$stack21 <java.sql.Statement: boolean execute(java.lang.String)> $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>()
$stack36 <java.sql.Statement: boolean execute(java.lang.String)> $stack36 = virtualinvoke l5.<java.lang.StringBuilder: java.lang.String toString()>()
l4 <java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)> l4 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>()
$stack24 <java.sql.ResultSet: java.lang.Object getObject(int)> $stack24 = l8 + 1
l12 <org.apache.lucene.search.Searcher: org.apache.lucene.search.Hits search(org.apache.lucene.search.Query)> l12 = virtualinvoke l11.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query parse(java.lang.String)>(l1)
$stack15 <org.h2.Driver: java.sql.Connection connect(java.lang.String,java.util.Properties)> $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>()
l3 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l3 = null
l3 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l3 = interfaceinvoke l2.<java.sql.Connection: java.sql.Statement createStatement()>()
$stack24 <java.sql.Statement: boolean execute(java.lang.String)> $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()
l7 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Connection)> l7 = null
l8 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l8 = null
$stack22 <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)> $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.String toString()>()
l7 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Connection)> l7 = staticinvoke <java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.lang.String,java.lang.String)>($stack22, "sa", l1)
l8 <org.h2.util.JdbcUtils: void closeSilently(java.sql.Statement)> l8 = interfaceinvoke l7.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>("CALL STOP_SERVER(?, ?, ?)")
Loaded 72196 methods from JAR files.
Found 74 Basic Source Methods.
Found 4073 Basic Sink Methods.
Found 0 Methods flow to return.
Found 0 Methods flow to a sink.
Found 0 Methods in this Class flow to a field in class.
Found 0 Methods flow to a field in class.
Methods extraction finished.
done
