***** Loading java classes ***** 

Start reading BOM and BIM...
BOM is loaded with 361 methods.
BIM is loaded with 278 methods.
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/C:/Users/feiyang/eclipse-workspace/tutorialSoot/lib/soot-4.2.1-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/C:/Users/feiyang/eclipse-workspace/tutorialSoot/lib/soot-3.3.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]
Local flow analysis: 
<ucar.unidata.io.http.HTTPRandomAccessFile: void <init>(java.lang.String,int)>
<ucar.nc2.util.net.HTTPMethod: ucar.nc2.util.net.HTTPMethod Head(ucar.nc2.util.net.HTTPSession)>
<ucar.unidata.io.http.HTTPRandomAccessFile: void <init>(java.lang.String,int)>
<ucar.unidata.io.http.HTTPRandomAccessFile: void doConnect(ucar.nc2.util.net.HTTPMethod)>
<ucar.unidata.io.http.HTTPRandomAccessFile: void <init>(java.lang.String,int)>
<ucar.nc2.util.net.HTTPMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>
<ucar.unidata.io.http.HTTPRandomAccessFile: void <init>(java.lang.String,int)>
<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>
<ucar.unidata.io.http.HTTPRandomAccessFile: void <init>(java.lang.String,int)>
<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>
<ucar.unidata.io.http.HTTPRandomAccessFile: void <init>(java.lang.String,int)>
<ucar.nc2.util.net.HTTPMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>
<ucar.unidata.io.http.HTTPRandomAccessFile: void <init>(java.lang.String,int)>
<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>
<ucar.unidata.io.http.HTTPRandomAccessFile: void <init>(java.lang.String,int)>
<ucar.nc2.util.net.HTTPMethod: void close()>
<ucar.unidata.io.http.HTTPRandomAccessFile: void <init>(java.lang.String,int)>
<ucar.nc2.util.net.HTTPMethod: void close()>
<ucar.unidata.io.http.HTTPRandomAccessFile: void <init>(java.lang.String,int)>
<ucar.unidata.io.http.HTTPRandomAccessFile: boolean rangeOk(java.lang.String)>
<ucar.unidata.io.http.HTTPRandomAccessFile: void close()>
<ucar.nc2.util.net.HTTPSession: void close()>
<ucar.unidata.io.http.HTTPRandomAccessFile: boolean rangeOk(java.lang.String)>
<ucar.nc2.util.net.HTTPMethod: ucar.nc2.util.net.HTTPMethod Get(ucar.nc2.util.net.HTTPSession,java.lang.String)>
<ucar.unidata.io.http.HTTPRandomAccessFile: boolean rangeOk(java.lang.String)>
<ucar.nc2.util.net.HTTPMethod: void setRequestHeader(java.lang.String,java.lang.String)>
<ucar.unidata.io.http.HTTPRandomAccessFile: boolean rangeOk(java.lang.String)>
<ucar.unidata.io.http.HTTPRandomAccessFile: void doConnect(ucar.nc2.util.net.HTTPMethod)>
<ucar.unidata.io.http.HTTPRandomAccessFile: boolean rangeOk(java.lang.String)>
<ucar.nc2.util.net.HTTPMethod: int getStatusCode()>
<ucar.unidata.io.http.HTTPRandomAccessFile: boolean rangeOk(java.lang.String)>
<ucar.nc2.util.net.HTTPMethod: void close()>
<ucar.unidata.io.http.HTTPRandomAccessFile: boolean rangeOk(java.lang.String)>
<ucar.nc2.util.net.HTTPMethod: void close()>
<ucar.unidata.io.http.HTTPRandomAccessFile: boolean rangeOk(java.lang.String)>
<ucar.nc2.util.net.HTTPMethod: void close()>
<ucar.unidata.io.http.HTTPRandomAccessFile: boolean rangeOk(java.lang.String)>
<ucar.nc2.util.net.HTTPMethod: void close()>
<ucar.unidata.io.http.HTTPRandomAccessFile: void doConnect(ucar.nc2.util.net.HTTPMethod)>
<ucar.nc2.util.net.HTTPMethod: int execute()>
<ucar.unidata.io.http.HTTPRandomAccessFile: void doConnect(ucar.nc2.util.net.HTTPMethod)>
<ucar.nc2.util.net.HTTPMethod: java.lang.String getStatusLine()>
<ucar.unidata.io.http.HTTPRandomAccessFile: void doConnect(ucar.nc2.util.net.HTTPMethod)>
<ucar.nc2.util.net.HTTPMethod: java.lang.String getStatusLine()>
<ucar.unidata.io.http.HTTPRandomAccessFile: void doConnect(ucar.nc2.util.net.HTTPMethod)>
<ucar.nc2.util.net.HTTPMethod: java.lang.String getName()>
<ucar.unidata.io.http.HTTPRandomAccessFile: void doConnect(ucar.nc2.util.net.HTTPMethod)>
<ucar.nc2.util.net.HTTPMethod: java.lang.String getPath()>
<ucar.unidata.io.http.HTTPRandomAccessFile: void doConnect(ucar.nc2.util.net.HTTPMethod)>
<ucar.nc2.util.net.HTTPMethod: org.apache.commons.httpclient.Header[] getRequestHeaders()>
<ucar.unidata.io.http.HTTPRandomAccessFile: void doConnect(ucar.nc2.util.net.HTTPMethod)>
<ucar.unidata.io.http.HTTPRandomAccessFile: void printHeaders(java.lang.String,org.apache.commons.httpclient.Header[])>
<ucar.unidata.io.http.HTTPRandomAccessFile: void doConnect(ucar.nc2.util.net.HTTPMethod)>
<ucar.nc2.util.net.HTTPMethod: int getStatusCode()>
<ucar.unidata.io.http.HTTPRandomAccessFile: void doConnect(ucar.nc2.util.net.HTTPMethod)>
<ucar.nc2.util.net.HTTPMethod: org.apache.commons.httpclient.Header[] getResponseHeaders()>
<ucar.unidata.io.http.HTTPRandomAccessFile: void doConnect(ucar.nc2.util.net.HTTPMethod)>
<ucar.unidata.io.http.HTTPRandomAccessFile: void printHeaders(java.lang.String,org.apache.commons.httpclient.Header[])>
<ucar.unidata.io.http.HTTPRandomAccessFile: void printHeaders(java.lang.String,org.apache.commons.httpclient.Header[])>
<org.apache.commons.httpclient.Header: java.lang.String toString()>
<ucar.unidata.io.http.HTTPRandomAccessFile: int read_(long,byte[],int,int)>
<ucar.nc2.util.net.HTTPMethod: ucar.nc2.util.net.HTTPMethod Get(ucar.nc2.util.net.HTTPSession)>
<ucar.unidata.io.http.HTTPRandomAccessFile: int read_(long,byte[],int,int)>
<ucar.nc2.util.net.HTTPMethod: void setFollowRedirects(boolean)>
<ucar.unidata.io.http.HTTPRandomAccessFile: int read_(long,byte[],int,int)>
<ucar.nc2.util.net.HTTPMethod: void setRequestHeader(java.lang.String,java.lang.String)>
<ucar.unidata.io.http.HTTPRandomAccessFile: int read_(long,byte[],int,int)>
<ucar.unidata.io.http.HTTPRandomAccessFile: void doConnect(ucar.nc2.util.net.HTTPMethod)>
<ucar.unidata.io.http.HTTPRandomAccessFile: int read_(long,byte[],int,int)>
<ucar.nc2.util.net.HTTPMethod: int getStatusCode()>
<ucar.unidata.io.http.HTTPRandomAccessFile: int read_(long,byte[],int,int)>
<ucar.nc2.util.net.HTTPMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>
<ucar.unidata.io.http.HTTPRandomAccessFile: int read_(long,byte[],int,int)>
<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>
<ucar.unidata.io.http.HTTPRandomAccessFile: int read_(long,byte[],int,int)>
<ucar.nc2.util.net.HTTPMethod: java.io.InputStream getResponseAsStream()>
<ucar.unidata.io.http.HTTPRandomAccessFile: int read_(long,byte[],int,int)>
<ucar.unidata.io.http.HTTPRandomAccessFile: int copy(java.io.InputStream,byte[],int,int)>
<ucar.unidata.io.http.HTTPRandomAccessFile: int read_(long,byte[],int,int)>
<ucar.nc2.util.net.HTTPMethod: void close()>
<ucar.unidata.io.http.HTTPRandomAccessFile: int read_(long,byte[],int,int)>
<ucar.nc2.util.net.HTTPMethod: void close()>
<ucar.unidata.io.http.HTTPRandomAccessFile: long readToByteChannel(java.nio.channels.WritableByteChannel,long,long)>
<ucar.unidata.io.http.HTTPRandomAccessFile: int read_(long,byte[],int,int)>
<edu.umass.cs.benchlab.client.BenchLabBrowsers: org.openqa.selenium.WebDriver createFirefoxDriver(edu.umass.cs.benchlab.BCRProperties,org.openqa.selenium.remote.DesiredCapabilities)>
<edu.umass.cs.benchlab.BCRProperties: java.lang.String getBenchlabWebAppUrl()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getClientChallenge()>
<org.apache.http.impl.auth.NTLMEngineImpl: byte[] access$000()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getClientChallenge2()>
<org.apache.http.impl.auth.NTLMEngineImpl: byte[] access$000()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getSecondaryKey()>
<org.apache.http.impl.auth.NTLMEngineImpl: byte[] access$100()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLMHash()>
<org.apache.http.impl.auth.NTLMEngineImpl: byte[] access$200(java.lang.String)>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLMResponse()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLMHash()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLMResponse()>
<org.apache.http.impl.auth.NTLMEngineImpl: byte[] access$300(byte[],byte[])>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMHash()>
<org.apache.http.impl.auth.NTLMEngineImpl: byte[] access$400(java.lang.String)>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMResponse()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMHash()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMResponse()>
<org.apache.http.impl.auth.NTLMEngineImpl: byte[] access$300(byte[],byte[])>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLMv2Hash()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMHash()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLMv2Hash()>
<org.apache.http.impl.auth.NTLMEngineImpl: byte[] access$500(java.lang.String,java.lang.String,byte[])>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMv2Hash()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMHash()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMv2Hash()>
<org.apache.http.impl.auth.NTLMEngineImpl: byte[] access$600(java.lang.String,java.lang.String,byte[])>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMv2Blob()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getClientChallenge2()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMv2Blob()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getTimestamp()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMv2Blob()>
<org.apache.http.impl.auth.NTLMEngineImpl: byte[] access$700(byte[],byte[],byte[])>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMv2Response()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMv2Hash()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMv2Response()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMv2Blob()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMv2Response()>
<org.apache.http.impl.auth.NTLMEngineImpl: byte[] access$800(byte[],byte[],byte[])>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLMv2Response()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLMv2Hash()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLMv2Response()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getClientChallenge()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLMv2Response()>
<org.apache.http.impl.auth.NTLMEngineImpl: byte[] access$800(byte[],byte[],byte[])>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLM2SessionResponse()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMHash()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLM2SessionResponse()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getClientChallenge()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLM2SessionResponse()>
<org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlm2SessionResponse(byte[],byte[],byte[])>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLM2SessionResponse()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getClientChallenge()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLMUserSessionKey()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLMHash()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMUserSessionKey()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMHash()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMUserSessionKey()>
<org.apache.http.impl.auth.NTLMEngineImpl$MD4: void update(byte[])>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMUserSessionKey()>
<org.apache.http.impl.auth.NTLMEngineImpl$MD4: byte[] getOutput()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMv2UserSessionKey()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMv2Hash()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMv2UserSessionKey()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMv2Response()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMv2UserSessionKey()>
<org.apache.http.impl.auth.NTLMEngineImpl: byte[] hmacMD5(byte[],byte[])>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLM2SessionResponseUserSessionKey()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLMUserSessionKey()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLM2SessionResponseUserSessionKey()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLM2SessionResponse()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getNTLM2SessionResponseUserSessionKey()>
<org.apache.http.impl.auth.NTLMEngineImpl: byte[] hmacMD5(byte[],byte[])>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLMHash()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLMResponse()>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>
<org.apache.http.impl.auth.NTLMEngineImpl: java.security.Key access$900(byte[],int)>
<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>
<org.apache.http.impl.auth.NTLMEngineImpl: java.security.Key access$900(byte[],int)>
<org.netbeans.modules.profiler.j2ee.stats.HttpRequestTrackerPanel$HttpRequestTrackerModel: void afterWalk()>
<org.netbeans.modules.profiler.j2ee.stats.HttpRequestTrackerPanel: void access$000(org.netbeans.modules.profiler.j2ee.stats.HttpRequestTrackerPanel)>
<org.netbeans.modules.profiler.j2ee.stats.HttpRequestTrackerPanel$HttpRequestTrackerModel: void visit(org.netbeans.lib.profiler.results.cpu.cct.nodes.MethodCPUCCTNode)>
<org.netbeans.modules.profiler.j2ee.stats.HttpRequestTrackerPanel: int access$100(org.netbeans.modules.profiler.j2ee.stats.HttpRequestTrackerPanel)>
<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$6: java.lang.String print(java.net.URL)>
<java.net.URL: java.lang.String toExternalForm()>
<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$6: java.lang.String print(java.lang.Object)>
<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$6: java.lang.String print(java.net.URL)>
<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$6: java.lang.Object parse(java.lang.CharSequence)>
<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$6: java.net.URL parse(java.lang.CharSequence)>
<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$6: java.lang.CharSequence print(java.lang.Object)>
<com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$6: java.lang.String print(java.net.URL)>
<org.apache.http.protocol.RequestUserAgent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.HttpMessage: boolean containsHeader(java.lang.String)>
<org.apache.http.protocol.RequestUserAgent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.HttpMessage: org.apache.http.params.HttpParams getParams()>
<org.apache.http.protocol.RequestUserAgent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.params.HttpProtocolParams: java.lang.String getUserAgent(org.apache.http.params.HttpParams)>
<org.apache.http.protocol.RequestUserAgent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.HttpMessage: void addHeader(java.lang.String,java.lang.String)>
<javassist.tools.rmi.ObjectImporter: void <init>(java.applet.Applet)>
<java.applet.Applet: java.net.URL getCodeBase()>
<javassist.tools.rmi.ObjectImporter: void <init>(java.applet.Applet)>
<java.net.URL: java.lang.String getHost()>
<javassist.tools.rmi.ObjectImporter: void <init>(java.applet.Applet)>
<java.net.URL: int getPort()>
<org.eclipse.equinox.internal.p2.director.app.Application: void initializeRepositories(boolean)>
<org.eclipse.equinox.internal.p2.console.ProvisioningHelper: org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository addArtifactRepository(java.net.URL)>
<org.eclipse.equinox.internal.p2.director.app.Application: void initializeRepositories(boolean)>
<org.eclipse.equinox.internal.p2.console.ProvisioningHelper: org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository addMetadataRepository(java.net.URL)>
<org.eclipse.equinox.internal.p2.director.app.Application: void processArguments(java.lang.String[])>
<org.eclipse.equinox.internal.p2.director.app.Application: java.net.URL[] getURLs(java.lang.String)>
<org.eclipse.equinox.internal.p2.director.app.Application: void processArguments(java.lang.String[])>
<org.eclipse.equinox.internal.p2.director.app.Application: java.net.URL[] getURLs(java.lang.String)>
<org.eclipse.equinox.internal.p2.director.app.Application: java.lang.Object run(java.lang.String[])>
<org.eclipse.equinox.internal.p2.console.ProvisioningHelper: org.eclipse.equinox.internal.provisional.p2.query.Collector getInstallableUnits(java.net.URL,org.eclipse.equinox.internal.provisional.p2.query.Query,org.eclipse.equinox.internal.provisional.p2.query.Collector,org.eclipse.core.runtime.IProgressMonitor)>
<org.eclipse.equinox.internal.p2.director.app.Application: java.lang.Object run(java.lang.String[])>
<org.eclipse.equinox.internal.p2.console.ProvisioningHelper: org.eclipse.equinox.internal.provisional.p2.query.Collector getInstallableUnits(java.net.URL,org.eclipse.equinox.internal.provisional.p2.query.Query,org.eclipse.core.runtime.IProgressMonitor)>
<jmapps.export.ExportWizard: void <init>(java.lang.String,java.awt.Frame,java.lang.String,jmapps.util.JMAppsCfg)>
<jmapps.export.PanelMediaSource: void setSourceUrl(java.lang.String)>
<jmapps.export.ExportWizard: boolean onPageDone(java.awt.Panel)>
<jmapps.export.PanelMediaSource: java.lang.String getSourceUrl()>
<blackboard.platform.servlet.DevNonceFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>
<blackboard.platform.servlet.DevNonceFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>
<blackboard.platform.servlet.DevNonceFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>
<blackboard.platform.servlet.DevNonceFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
<blackboard.util.UrlUtil: java.lang.String constructQueryString(javax.servlet.http.HttpServletRequest)>
<blackboard.platform.servlet.DevNonceFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
<blackboard.platform.servlet.DevNonceFilter: boolean knownSafePOSTorLoggedAlready(javax.servlet.http.HttpServletRequest,java.lang.String)>
<blackboard.platform.servlet.DevNonceFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>
<blackboard.platform.servlet.DevNonceFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>
<blackboard.platform.servlet.DevNonceFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
<blackboard.util.UrlUtil: java.lang.String constructQueryString(javax.servlet.http.HttpServletRequest)>
<blackboard.platform.servlet.DevNonceFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
<blackboard.platform.servlet.DevNonceFilter: boolean knownSafePOSTorLoggedAlready(javax.servlet.http.HttpServletRequest,java.lang.String)>
<blackboard.platform.servlet.DevNonceFilter: boolean knownSafePOSTorLoggedAlready(javax.servlet.http.HttpServletRequest,java.lang.String)>
<blackboard.platform.servlet.ext.NonceCheckExclusionExtension: java.lang.Boolean knownSafePOSTorLoggedAlready(javax.servlet.http.HttpServletRequest,java.lang.String)>
