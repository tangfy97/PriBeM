<java.io.BufferedInputStream: int available()>
<java.io.BufferedInputStream: int read()>
<java.io.BufferedInputStream: int read(byte[],int,int)>

<java.io.BufferedReader: int available()>
<java.io.BufferedReader: int read()>
<java.io.BufferedReader: int read(char[],int,int)>
<java.io.BufferedReader: java.lang.String readLine()>

<java.io.ByteArrayInputStream: int available()>
<java.io.ByteArrayInputStream: int read()>
<java.io.ByteArrayInputStream: int read(byte[],int,int)>

<java.io.CharArrayReader: int available()>
<java.io.CharArrayReader: int read()>
<java.io.CharArrayReader: int read(char[],int,int)>

<java.io.DataInputStream: int read(byte[])>
<java.io.DataInputStream: int read(byte[],int,int)>
<java.io.DataInputStream: byte readByte()>
<java.io.DataInputStream: char readChar()>
<java.io.DataInputStream: double readDouble()>
<java.io.DataInputStream: float	readFloat()>
<java.io.DataInputStream: java.lang.String readLine()>
<java.io.DataInputStream: long readLong()>
<java.io.DataInputStream: short readShort()>
<java.io.DataInputStream: int readUnsignedByte()>
<java.io.DataInputStream: int readUnsignedShort()>
<java.io.DataInputStream: java.lang.String readUTF()>


<java.io.File: File createTempFile(java.lang.String,java.lang.String)>
<java.io.File: File createTempFile(java.lang.String,java.lang.String,File)>
<java.io.File: File getAbsoluteFile()>
<java.io.File: java.lang.String getAbsolutePath()>
<java.io.File: File getCanonicalFile()>
<java.io.File: java.lang.String getCanonicalPath()>
<java.io.File: java.lang.String getName()>
<java.io.File: java.lang.String getParent()>
<java.io.File: File getParentFile()>
<java.io.File: java.lang.String getPath()>
<java.io.File: int hashCode()>
<java.io.File: java.lang.String[] list()>
<java.io.File: java.lang.String[] list(FilenameFilter)>
<java.io.File: File[] listFiles()>
<java.io.File: File[] listFiles(FileFilter)>
<java.io.File: File[] listFiles(FilenameFilter)>
<java.io.File: File[] listRoots()>
<java.io.File: Path toPath()>
<java.io.File: java.lang.String tojava.lang.String()>
<java.io.File: URI toURI()>

<java.io.FileInputStream: int available()>
<java.io.FileInputStream: FileChannel getChannel()>
<java.io.FileInputStream: FileDescriptor getFD()>
<java.io.FileInputStream: int read()>
<java.io.FileInputStream: int read(byte[])>
<java.io.FileInputStream: int read(byte[],int,int)>

<java.io.FilterInputStream: int available()>
<java.io.FilterInputStream: int read()>
<java.io.FilterInputStream: int read(byte[])>
<java.io.FilterInputStream: int read(byte[],int,int)>

<java.io.FilterReader: int read()>
<java.io.FilterReader: int read(char[],int,int)>

<java.io.InputStream: int available()>
<java.io.InputStream: int read(byte[])>
<java.io.InputStream: int read(byte[],int,int)>

<java.io.InputStreamReader: java.lang.String getEncoding()>
<java.io.InputStreamReader: int read()>
<java.io.InputStreamReader: int read(char[],int,int)>

<java.io.LineNumberReader: int read()>
<java.io.LineNumberReader: int read(char[],int,int)>
<java.io.LineNumberReader: java.lang.String readLine()>

<java.io.ObjectInputStream: int available()>
<java.io.ObjectInputStream: int read()>
<java.io.ObjectInputStream: int read(byte[],int,int)>
<java.io.ObjectInputStream: byte readByte()>
<java.io.ObjectInputStream: char readChar()>
<java.io.ObjectInputStream: double readDouble()>
<java.io.ObjectInputStream: float readFloat()>
<java.io.ObjectInputStream: java.lang.String readLine()>
<java.io.ObjectInputStream: long readLong()>
<java.io.ObjectInputStream: short readShort()>
<java.io.ObjectInputStream: ObjectInputStream.GetField readFields()>
<java.io.ObjectInputStream: int readInt()>
<java.io.ObjectInputStream: Object readObject()>
<java.io.ObjectInputStream: int available()>
<java.io.ObjectInputStream: java.lang.String readUTF()>

<java.io.PipedInputStream: int available()>
<java.io.PipedInputStream: int read()>
<java.io.PipedInputStream: int read(byte[],int,int)>

<java.io.PipedReader: int read()>
<java.io.PipedReader: int read(char[],int,int)>

<java.io.PushbackInputStream: int available()>
<java.io.PushbackInputStream: int read()>
<java.io.PushbackInputStream: int read(byte[],int,int)>

<java.io.RandomAccessFile: int read()>
<java.io.RandomAccessFile: int read(byte[])>
<java.io.RandomAccessFile: int read(byte[],int,int)>
<java.io.RandomAccessFile: byte readByte()>
<java.io.RandomAccessFile: char readChar()>
<java.io.RandomAccessFile: double readDouble()>
<java.io.RandomAccessFile: float readFloat()>
<java.io.RandomAccessFile: java.lang.String readLine()>
<java.io.RandomAccessFile: long readLong()>
<java.io.RandomAccessFile: short readShort()>
<java.io.RandomAccessFile: int readInt()>

<java.io.Reader: int read()>
<java.io.Reader: int read(char[])>
<java.io.Reader: int read(char[],int,int)>
<java.io.Reader: int read(CharBuffer)>

<java.io.SequenceInputStream: int available()>
<java.io.SequenceInputStream: int read()>
<java.io.SequenceInputStream: int read(byte[],int,int)>

<java.io.java.lang.StringReader: int read()>
<java.io.java.lang.StringReader: int read(char[] cbuf, int off, int len)>

<java.util.Scanner: java.lang.String next()>
<java.util.Scanner: java.lang.String next(Pattern)>
<java.util.Scanner: java.lang.String next(java.lang.String)>
<java.util.Scanner: boolean nextBoolean()>
<java.util.Scanner: byte nextByte()>
<java.util.Scanner: double nextDouble()>
<java.util.Scanner: float nextFloat()>
<java.util.Scanner: int	nextInt()>
<java.util.Scanner: int	nextInt(int radix)>
<java.util.Scanner: java.lang.String nextLine()>
<java.util.Scanner: long nextLong()>
<java.util.Scanner: long nextLong(int)>
<java.util.Scanner: short nextShort()>
<java.util.Scanner: short nextShort(int)>
<java.util.Scanner: java.lang.String tojava.lang.String()>

<java.net.URLConnection: java.io.InputStream getInputStream()>
<java.net.URL: java.io.InputStream openStream()>
<java.net.URL: java.lang.Object getContent()>


<android.media.AudioRecord: int read(short[],int,int)>
<android.media.AudioRecord: int read(byte[],int,int)>
<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)>

<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>
<java.util.Calendar: java.util.TimeZone getTimeZone()>
<android.provider.Browser: android.database.Cursor getAllBookmarks()>
<android.provider.Browser: android.database.Cursor getAllVisitedUrls()>

<org.apache.commons.io.input.ReadAheadInputStream: void lambda$readAsync$1(byte[])>
<org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream,byte[])>
<org.apache.hc.client5.http.impl.auth.DigestScheme: void readObject(java.io.ObjectInputStream)>
<com.google.common.io.ByteStreams: long skipSafely(java.io.InputStream,long)>
<com.google.common.collect.Serialization: int readCount(java.io.ObjectInputStream)>
<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: int fillbuf(java.io.InputStream,byte[])>
<com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)>
<com.bumptech.glide.disklrucache.Util: java.lang.String readFully(java.io.Reader)>
<org.apache.hc.core5.http.io.EofSensorInputStream: int available()>
<com.fasterxml.jackson.core.format.InputAccessor$Std: boolean hasMoreBytes()>
<org.apache.commons.io.IOUtils: byte[] toByteArray(java.net.URLConnection)>
<org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)>
<org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File)>
<com.fasterxml.jackson.core.TokenStreamFactory: java.io.InputStream _optimizedStreamFromURL(java.net.URL)>
<org.apache.hc.client5.http.entity.mime.StringBody: void writeTo(java.io.OutputStream)>
<com.google.common.io.CharStreams: long copyReaderToBuilder(java.io.Reader,java.lang.StringBuilder)>
<org.apache.hc.client5.http.entity.LazyDecompressingInputStream: int available()>
<com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)>
<org.apache.commons.io.IOUtils: long copy(java.net.URL,java.io.OutputStream)>
<com.bumptech.glide.load.data.HttpUrlFetcher: java.io.InputStream getStreamForSuccessfulRequest(java.net.HttpURLConnection)>
<org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File)>
<com.bumptech.glide.util.ContentLengthInputStream: int read()>
<org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)>
<org.apache.hc.client5.http.entity.mime.InputStreamBody: void writeTo(java.io.OutputStream)>
<com.google.common.collect.Serialization: void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream,int)>
<com.bumptech.glide.load.model.StreamEncoder: boolean encode(java.io.InputStream,java.io.OutputStream)>
<org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File)>
<com.google.common.io.ByteStreams: long copy(java.io.InputStream,java.io.OutputStream)>
<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)>
<org.apache.commons.io.input.BoundedReader: int read()>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: long readLong()>
<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>
<org.apache.hc.client5.http.impl.io.LoggingInputStream: int available()>
<org.apache.mina.proxy.handlers.http.ntlm.NTLMUtilities: byte[] getOsVersion()>
<org.apache.hc.client5.http.impl.io.LoggingInputStream: int read(byte[])>
<com.bumptech.glide.load.data.ExifOrientationStream: int read(byte[],int,int)>
<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.nio.file.CopyOption[])>
<com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableList parseJavaClassPath()>
<com.google.common.io.MultiInputStream: int available()>
<org.apache.commons.io.output.LockableFileWriter: void createLock()>
<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _readMore(java.io.InputStream,byte[],int,int,int)>
<com.bumptech.glide.load.data.ExifOrientationStream: int read()>
<org.apache.mina.filter.stream.StreamWriteFilter: org.apache.mina.core.buffer.IoBuffer getNextBuffer(java.io.InputStream)>
<org.apache.commons.io.input.BoundedInputStream: int read(byte[],int,int)>
<org.apache.commons.io.input.AbstractCharacterFilterReader: int read()>
<org.apache.commons.io.input.ProxyReader: int read()>
<org.apache.mina.core.buffer.AbstractIoBuffer$3: java.io.ObjectStreamClass readClassDescriptor()>
<com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>
<org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer,long,long,char[])>
<org.apache.commons.io.input.XmlStreamReader: void <init>(java.net.URLConnection,java.lang.String)>
<org.apache.commons.io.file.PathUtils: java.nio.file.Path copyFile(java.net.URL,java.nio.file.Path,java.nio.file.CopyOption[])>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: double readDouble()>
<org.jsoup.helper.DataUtil: void crossStreams(java.io.InputStream,java.io.OutputStream)>
<com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: char readChar()>
<com.google.common.collect.LinkedListMultimap: void readObject(java.io.ObjectInputStream)>
<org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)>
<com.google.common.io.BaseEncoding$3: int read()>
<org.apache.hc.client5.http.entity.LazyDecompressingInputStream: int read(byte[])>
<org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: java.lang.String readUTF()>
<org.apache.hc.client5.http.impl.auth.BasicScheme: void readObject(java.io.ObjectInputStream)>
<org.jsoup.internal.ConstrainableInputStream: java.nio.ByteBuffer readToByteBuffer(int)>
<org.apache.mina.filter.ssl.KeyStoreFactory: void setDataUrl(java.net.URL)>
<org.apache.hc.client5.http.entity.DecompressingEntity: void writeTo(java.io.OutputStream)>
<com.google.common.io.ReaderInputStream: void readMoreChars()>
<org.apache.commons.io.IOUtils: boolean contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)>
<org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)>
<com.google.common.io.ByteStreams: byte[] toByteArrayInternal(java.io.InputStream,java.util.Queue,int)>
<org.apache.commons.io.output.AbstractByteArrayOutputStream: int writeImpl(java.io.InputStream)>
<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: int read(byte[])>
<org.apache.hc.core5.http.io.EofSensorInputStream: int read(byte[],int,int)>
<com.google.common.io.MultiInputStream: int read(byte[],int,int)>
<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: int read(byte[],int,int)>
<org.apache.hc.core5.http.io.entity.EntityUtils: org.apache.hc.core5.util.CharArrayBuffer toCharArrayBuffer(java.io.InputStream,int,java.nio.charset.Charset,int)>
<com.google.common.io.Resources$UrlByteSource: java.io.InputStream openStream()>
<org.apache.commons.io.LineIterator: boolean hasNext()>
<com.bumptech.glide.gifdecoder.GifDecoder: int read(java.io.InputStream,int)>
<org.apache.hc.core5.http.impl.io.IdentityInputStream: int available()>
<org.apache.commons.io.input.ProxyReader: int read(char[])>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: int _readMore(java.io.InputStream,byte[],int,int,int)>
<org.apache.commons.io.comparator.ExtensionFileComparator: int compare(java.io.File,java.io.File)>
<org.jsoup.parser.CharacterReader: void bufferUp()>
<com.google.common.io.ByteStreams$LimitedInputStream: int available()>
<com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)>
<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>
<org.apache.mina.util.Transform: java.lang.String[] getThrowableStrRep(java.lang.Throwable)>
<org.apache.hc.client5.http.impl.io.LoggingInputStream: int read(byte[],int,int)>
<com.google.common.io.ByteStreams: long skipUpTo(java.io.InputStream,long)>
<com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: com.google.common.collect.MapMaker readMapMaker(java.io.ObjectInputStream)>
<org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.nio.charset.Charset,boolean)>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: java.lang.String readLine()>
<com.google.common.collect.Serialization: void populateMap(java.util.Map,java.io.ObjectInputStream)>
<com.bumptech.glide.util.ContentLengthInputStream: int available()>
<org.apache.hc.client5.http.entity.mime.MultipartEntityBuilder: org.apache.hc.client5.http.entity.mime.MultipartEntityBuilder addBinaryBody(java.lang.String,java.io.File)>
<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>
<com.google.common.io.CharStreams: long copyReaderToWriter(java.io.Reader,java.io.Writer)>
<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>
<org.apache.commons.io.input.SequenceReader: int read(char[],int,int)>
<org.apache.hc.core5.http.io.entity.EntityUtils: byte[] toByteArray(org.apache.hc.core5.http.HttpEntity)>
<org.apache.hc.client5.http.psl.PublicSuffixMatcherLoader: org.apache.hc.client5.http.psl.PublicSuffixMatcher load(java.net.URL)>
<com.google.common.collect.Serialization: void populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream,int)>
<org.apache.commons.io.filefilter.MagicNumberFileFilter: boolean accept(java.io.File)>
<org.apache.commons.io.FileUtils: boolean directoryContains(java.io.File,java.io.File)>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: int read()>
<org.apache.commons.io.input.buffer.CircularBufferInputStream: void fillBuffer()>
<com.google.common.io.ByteStreams: long exhaust(java.io.InputStream)>
<org.apache.commons.io.input.BOMInputStream: int read(byte[],int,int)>
<com.fasterxml.jackson.core.io.MergedStream: int read(byte[],int,int)>
<com.google.common.io.BaseEncoding$StandardBaseEncoding$2: int read()>
<org.apache.commons.io.input.ProxyReader: int read(char[],int,int)>
<com.google.common.io.MultiReader: int read(char[],int,int)>
<com.google.common.util.concurrent.AtomicDouble: void readObject(java.io.ObjectInputStream)>
<org.apache.hc.core5.http.io.entity.EntityUtils: byte[] toByteArray(org.apache.hc.core5.http.HttpEntity,int)>
<org.joda.time.DateTimeZone$Stub: void readObject(java.io.ObjectInputStream)>
<com.bumptech.glide.util.MarkEnforcingInputStream: int read()>
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: int readUnsignedByte()>
<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>
<org.apache.hc.client5.http.entity.LazyDecompressingInputStream: int read(byte[],int,int)>
<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)>
<org.apache.commons.io.comparator.NameFileComparator: int compare(java.io.File,java.io.File)>
<com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)>
<org.apache.hc.core5.http.impl.io.SessionInputBufferImpl: int read(byte[],int,int,java.io.InputStream)>
<com.google.common.hash.HashingInputStream: int read(byte[],int,int)>
<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: int available()>
<com.google.common.io.CharSource: com.google.common.collect.ImmutableList readLines()>
<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File)>
<com.google.common.hash.LongAdder: void readObject(java.io.ObjectInputStream)>
<com.google.common.io.ByteStreams$LimitedInputStream: int read(byte[],int,int)>
<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>
<org.apache.commons.io.input.RandomAccessFileInputStream: int read(byte[],int,int)>
<org.jsoup.Jsoup: org.jsoup.nodes.Document parse(java.io.File,java.lang.String)>
<com.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)>
<com.fasterxml.jackson.core.io.UTF32Reader: boolean loadMore(int)>
<org.apache.commons.io.IOUtils: java.lang.String toString(java.net.URL,java.nio.charset.Charset)>
<com.google.common.io.ByteStreams: byte[] toByteArray(java.io.InputStream,long)>
<org.apache.hc.client5.http.entity.DeflateInputStream: void <init>(java.io.InputStream)>
<java.util.Scanner: java.lang.Object next()>
<com.bumptech.glide.util.ExceptionCatchingInputStream: int read(byte[],int,int)>
<com.bumptech.glide.util.MarkEnforcingInputStream: int read(byte[],int,int)>
<org.apache.hc.client5.http.entity.DeflateInputStream: int read(byte[],int,int)>
<com.bumptech.glide.util.MarkEnforcingInputStream: int available()>
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getXmlProlog(java.io.InputStream,java.lang.String)>
<org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int,java.time.Duration)>
<org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File,int,int)>
<org.apache.hc.client5.http.psl.PublicSuffixListParser: java.util.List parseByType(java.io.Reader)>
<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>
<org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)>
<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>
<org.apache.hc.client5.http.entity.mime.FileBody: void <init>(java.io.File,org.apache.hc.core5.http.ContentType)>
<com.fasterxml.jackson.core.io.MergedStream: int available()>
<com.bumptech.glide.disklrucache.StrictLineReader: void fillBuf()>
<org.apache.hc.client5.http.psl.PublicSuffixListParser: org.apache.hc.client5.http.psl.PublicSuffixList parse(java.io.Reader)>
<org.apache.commons.io.input.ProxyInputStream: int read(byte[])>
<org.apache.hc.client5.http.entity.mime.FileBody: void writeTo(java.io.OutputStream)>
<org.apache.commons.io.IOUtils: long skip(java.io.Reader,long)>
<com.google.common.io.ByteStreams: java.lang.Object readBytes(java.io.InputStream,com.google.common.io.ByteProcessor)>
<org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer,char[])>
<org.apache.hc.core5.http.impl.io.MonitoringResponseOutOfOrderStrategy: boolean isEarlyResponseDetected(org.apache.hc.core5.http.ClassicHttpRequest,org.apache.hc.core5.http.io.HttpClientConnection,java.io.InputStream,long,long)>
<org.apache.commons.io.monitor.FileEntry: boolean refresh(java.io.File)>
<org.apache.commons.io.monitor.FileEntry: void <init>(org.apache.commons.io.monitor.FileEntry,java.io.File)>
<org.apache.commons.io.input.ReaderInputStream: void fillBuffer()>
<org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)>
<org.apache.hc.core5.ssl.SSLContextBuilder: org.apache.hc.core5.ssl.SSLContextBuilder loadKeyMaterial(java.net.URL,char[],char[],org.apache.hc.core5.ssl.PrivateKeyStrategy)>
<com.google.common.io.ByteStreams: int read(java.io.InputStream,byte[],int,int)>
<com.fasterxml.jackson.core.io.SerializedString: void readObject(java.io.ObjectInputStream)>
<org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,java.util.List,boolean,java.nio.file.CopyOption[])>
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeString(java.io.Reader,int)>
<org.apache.commons.io.IOUtils: int read(java.io.InputStream,byte[],int,int)>
<com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper: boolean ensureLoaded(int)>
<com.google.common.io.LineReader: java.lang.String readLine()>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: byte readByte()>
<com.google.common.io.LittleEndianDataInputStream: java.lang.String readUTF()>
<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>
<org.apache.commons.io.input.SequenceReader: int read()>
<com.bumptech.glide.util.ContentLengthInputStream: int read(byte[],int,int)>
<com.bumptech.glide.load.resource.gif.GifResourceDecoder: byte[] inputStreamToBytes(java.io.InputStream)>
<org.apache.commons.io.input.RandomAccessFileInputStream: int read()>
<com.google.common.collect.Serialization: void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream)>
<com.google.common.io.CountingInputStream: int read(byte[],int,int)>
<org.apache.hc.client5.http.entity.DeflateInputStream: int read(byte[])>
<org.apache.commons.io.input.RandomAccessFileInputStream: int read(byte[])>
<org.apache.commons.io.IOUtils: long skip(java.io.InputStream,long)>
<com.google.common.io.ReaderInputStream: int read()>
<org.apache.commons.io.input.Tailer: long readLines(java.io.RandomAccessFile)>
<org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File)>
<com.google.common.reflect.ClassPath$LocationInfo: void scanDirectory(java.io.File,java.lang.String,java.util.Set,com.google.common.collect.ImmutableSet$Builder)>
<org.apache.commons.io.monitor.FileAlterationObserver: java.lang.String toString()>
<org.apache.commons.io.input.BoundedInputStream: int available()>
<org.apache.hc.client5.http.entity.DeflateInputStream: int available()>
<org.apache.hc.core5.ssl.SSLContextBuilder: org.apache.hc.core5.ssl.SSLContextBuilder loadTrustMaterial(java.net.URL,char[],org.apache.hc.core5.ssl.TrustStrategy)>
<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document load(java.io.File,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>
<com.google.common.io.Files: java.lang.String getNameWithoutExtension(java.lang.String)>
<org.apache.hc.core5.http.io.entity.AbstractHttpEntity: void writeTo(org.apache.hc.core5.http.HttpEntity,java.io.OutputStream)>
<org.apache.mina.core.file.FilenameFileRegion: java.lang.String getFilename()>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: int readUnsignedShort()>
<com.google.common.io.CharSource: boolean isEmpty()>
<org.apache.hc.client5.http.entity.mime.FileBody: void <init>(java.io.File)>
<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)>
<org.apache.hc.client5.http.entity.mime.FileBody: void <init>(java.io.File,org.apache.hc.core5.http.ContentType,java.lang.String)>
<org.apache.commons.io.FileUtils: void requireCanonicalPathsNotEquals(java.io.File,java.io.File)>
<com.google.common.util.concurrent.AtomicDoubleArray: void readObject(java.io.ObjectInputStream)>
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.helper.HttpConnection$Request,org.jsoup.helper.HttpConnection$Response)>
<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeString(java.io.Reader,int)>
<org.apache.commons.io.input.AbstractCharacterFilterReader: int read(char[],int,int)>
<org.apache.hc.core5.http.io.entity.InputStreamEntity: void writeTo(java.io.OutputStream)>
<org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)>
<org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: short readShort()>
<org.apache.commons.io.comparator.PathFileComparator: int compare(java.io.File,java.io.File)>
<org.jsoup.internal.ConstrainableInputStream: int read(byte[],int,int)>
<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>
<com.google.common.collect.Serialization: void populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream)>
<org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream,int)>
<org.apache.hc.core5.http.impl.io.SessionInputBufferImpl: int fillBuffer(java.io.InputStream)>
<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>
<com.bumptech.glide.util.ExceptionCatchingInputStream: int read(byte[])>
<com.google.common.io.CharSource: java.lang.String readFirstLine()>
<org.apache.commons.io.file.PathUtils: java.nio.file.Path copyFileToDirectory(java.net.URL,java.nio.file.Path,java.nio.file.CopyOption[])>
<com.google.common.reflect.ClassPath$LocationInfo: int hashCode()>
<org.apache.commons.io.IOUtils: int read(java.io.Reader,char[],int,int)>
<org.apache.commons.io.input.ProxyInputStream: int available()>
<org.apache.commons.io.input.XmlStreamReader: int read(char[],int,int)>
<com.bumptech.glide.util.ExceptionCatchingInputStream: int available()>
<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter readFrom(java.io.InputStream,com.google.common.hash.Funnel)>
<org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)>










