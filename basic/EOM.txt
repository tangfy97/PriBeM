<org.apache.derby.impl.io.vfmem.DataStore: boolean createAllParents(java.lang.String)>
<org.apache.commons.dbcp.datasources.CPDSConnectionFactory: boolean validateObject(java.lang.Object)>
<com.mchange.v2.c3p0.cfg.C3P0ConfigUtils: java.util.Properties findAllC3P0SystemProperties()>
<org.apache.derby.diag.StatementDuration: java.lang.String setupColumn(int)>
<org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper: java.sql.Statement createStatement(int,int)>
<org.apache.http.client.entity.LazyDecompressingInputStream: int read(byte[])>
<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>
<org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile: int readUnsignedShort()>
<com.mchange.v2.c3p0.impl.NewProxyStatement: java.sql.ResultSet executeQuery(java.lang.String)>
<org.apache.derby.iapi.services.io.FormatIdInputStream: java.lang.Object readObject()>
<com.mchange.v2.c3p0.test.C3P0BenchmarkApp$StatementCreateTest: long test(java.sql.Connection,int)>
<org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)>
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.ResultSet getGeneratedKeys()>
<java.io.ObjectInputStream: int read()>
<org.apache.http.impl.client.SystemDefaultHttpClient: org.apache.http.conn.ClientConnectionManager createClientConnectionManager()>
<org.apache.http.ssl.SSLContextBuilder: org.apache.http.ssl.SSLContextBuilder loadTrustMaterial(java.net.URL,char[],org.apache.http.ssl.TrustStrategy)>
<org.apache.derby.impl.load.ImportReadData: boolean readTokensUntilEndOfRecord()>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: java.lang.String readUTF()>
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.Statement createStatement(int,int,int)>
<org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper: java.sql.Statement createStatement(int,int,int)>
<org.apache.mina.filter.stream.StreamWriteFilter: org.apache.mina.core.buffer.IoBuffer getNextBuffer(java.io.InputStream)>
<org.apache.derby.impl.services.stream.RollingFileStream$1: java.lang.String run()>
<org.apache.derby.impl.io.vfmem.DataStore: org.apache.derby.impl.io.vfmem.DataStoreEntry getEntry(java.lang.String)>
<org.apache.commons.text.lookup.UrlStringLookup: java.lang.String lookup(java.lang.String)>
<org.apache.derby.iapi.services.io.CloseFilterInputStream: int available()>
<org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File)>
<org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])>
<org.apache.http.impl.conn.LoggingInputStream: int read(byte[])>
<java.lang.System: java.lang.String getProperty(java.lang.String)>
<java.util.Scanner: java.lang.String nextLine()>
<org.apache.commons.mail.MultiPartEmail: org.apache.commons.mail.MultiPartEmail attach(java.io.File)>
<org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages getInstance(java.lang.String)>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: java.lang.String readLine()>
<org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int read(byte[],int,int)>
<org.apache.derby.iapi.jdbc.BrokeredStatement: java.sql.ResultSet executeQuery(java.lang.String)>
<org.apache.derby.impl.jdbc.ClobUpdatableReader: int read()>
<org.apache.derby.impl.io.DirFile: org.apache.derby.io.StorageFile getParentDir()>
<org.apache.http.conn.util.PublicSuffixListParser: org.apache.http.conn.util.PublicSuffixList parse(java.io.Reader)>
<org.apache.http.conn.EofSensorInputStream: int read(byte[],int,int)>
<org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>
<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>
<java.io.DataInputStream: byte readByte()>
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: java.sql.ResultSet getGeneratedKeys()>
<java.net.URL: java.lang.String getProtocol()>
<org.apache.derby.impl.load.ImportLobFile: long getClobDataLength(long,long)>
<org.apache.derby.impl.load.ImportReadData: boolean readNextFixedRow(java.lang.String[])>
<org.apache.derby.impl.io.vfmem.DataStore: boolean deleteEntry(java.lang.String)>
<org.apache.commons.mail.HtmlEmail: java.lang.String embed(java.io.File,java.lang.String)>
<org.apache.derby.iapi.services.io.LimitInputStream: int read()>
<org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile: java.lang.String readUTF()>
<org.apache.commons.io.input.ProxyInputStream: int available()>
<org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile: int readUnsignedByte()>
<org.apache.derby.impl.load.ImportReadData: boolean skipDoubleDelimiters(char[])>
<org.apache.derby.iapi.services.io.LimitReader: int read()>
<org.apache.mina.core.file.FilenameFileRegion: java.lang.String getFilename()>
<org.apache.commons.codec.binary.BaseNCodecInputStream: int read(byte[],int,int)>
<java.io.File: java.lang.String getPath()>
<org.apache.commons.mail.HtmlEmail: java.lang.String embed(java.net.URL,java.lang.String)>
<org.apache.commons.io.input.ProxyInputStream: int read(byte[])>
<org.apache.derby.iapi.jdbc.BrokeredStatement: java.sql.ResultSet getResultSet()>
<org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)>
<java.io.File: java.lang.String[] list()>
<java.net.URL: java.lang.String getHost()>
<java.io.BufferedInputStream: int read()>
<org.apache.commons.text.StrLookup$SystemPropertiesStrLookup: java.lang.String lookup(java.lang.String)>
<org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile: double readDouble()>
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSystemSocketFactory()>
<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>
<java.io.Reader: int read(char[],int,int)>
<org.apache.derby.impl.store.raw.RawStore: java.lang.Object run()>
<org.apache.http.client.entity.LazyDecompressingInputStream: int read(byte[],int,int)>
<org.apache.mina.core.buffer.AbstractIoBuffer$3: java.io.ObjectStreamClass readClassDescriptor()>
<org.apache.derby.impl.services.monitor.FileMonitor: java.lang.String PBgetJVMProperty(java.lang.String)>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: int readUnsignedShort()>
<java.io.LineNumberReader: java.lang.String readLine()>
<java.sql.Connection: java.sql.Statement createStatement(int,int,int)>
<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>
<org.apache.commons.mail.Email: javax.mail.Session getMailSession()>
<org.apache.derby.impl.jdbc.EmbedClob: long position(java.sql.Clob,long)>
<java.io.BufferedReader: int read(char[],int,int)>
<org.apache.http.impl.client.SystemDefaultHttpClient: org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy()>
<org.apache.derby.iapi.services.io.LimitInputStream: int available()>
<org.apache.derby.impl.jdbc.EmbedClob: long position(java.lang.String,long)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.ResultSet executeQuery(java.lang.String)>
<org.apache.commons.mail.util.MimeMessageParser: byte[] getContent(java.io.InputStream)>
<org.apache.derby.security.DatabasePermission$1: java.lang.String run()>
<java.io.DataInputStream: short readShort()>
<org.apache.derby.impl.jdbc.ClobUpdatableReader: int read(char[],int,int)>
<java.io.DataInputStream: char readChar()>
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.Statement createStatement()>
<java.io.DataInputStream: java.lang.String readLine()>
<com.mchange.v2.c3p0.test.C3P0BenchmarkApp$StatementEmptyTableSelectTest: long test(java.sql.Statement,int)>
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>
<org.apache.derby.iapi.types.SQLClob: org.apache.derby.iapi.jdbc.CharacterStreamDescriptor getStreamWithDescriptor()>
<org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Lang loadFromResource(java.lang.String,org.apache.commons.codec.language.bm.Languages)>
<java.io.DataInputStream: long readLong()>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: int readUnsignedByte()>
<org.apache.http.util.EntityUtils: byte[] toByteArray(org.apache.http.HttpEntity)>
<java.net.URL: java.io.InputStream openStream()>
<java.io.ObjectInputStream: int readInt()>
<com.mchange.v2.c3p0.test.C3P0BenchmarkApp$StatementEmptyTableSelectTest: long test(javax.sql.DataSource,int)>
<org.apache.derby.impl.store.raw.data.RememberBytesInputStream: int read()>
<org.apache.http.client.entity.LazyDecompressingInputStream: int available()>
<org.apache.derby.iapi.services.property.PropertyUtil: boolean systemPropertiesExistsBuiltinUser(java.lang.String)>
<java.sql.Connection: java.sql.Statement createStatement()>
<org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper: java.sql.Statement createStatement()>
<org.apache.http.client.entity.DeflateInputStream: int read(byte[])>
<org.apache.derby.iapi.jdbc.BrokeredConnection: java.sql.Statement createStatement()>
<org.apache.derby.impl.jdbc.LOBStreamControl: long copyUtf8Data(java.io.InputStream,long)>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: short readShort()>
<org.apache.commons.logging.LogFactory$5: java.lang.Object run()>
<org.apache.derby.diag.ErrorLogReader$1: java.lang.String run()>
<org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile: char readChar()>
<org.apache.commons.dbcp.PoolingDriver$PoolGuardConnectionWrapper: java.sql.Statement createStatement(int,int)>
<java.util.Scanner: java.lang.String next()>
<org.apache.mina.util.Transform: java.lang.String[] getThrowableStrRep(java.lang.Throwable)>
<org.apache.derby.impl.jdbc.EmbedBlob: int handleStreamValue(java.io.InputStream,org.apache.derby.impl.jdbc.EmbedConnection)>
<java.io.InputStream: int read(byte[])>
<org.apache.derby.impl.jdbc.PositionedStoreStream: int read(byte[],int,int)>
<org.apache.derby.diag.StatementDuration: boolean next()>
<org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)>
<java.io.File: java.lang.String getParent()>
<org.apache.derby.iapi.services.io.CloseFilterInputStream: int read()>
<org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile: byte readByte()>
<org.apache.commons.dbcp.DelegatingStatement: java.sql.ResultSet getResultSet()>
<org.apache.mina.proxy.handlers.http.HttpProxyRequest: java.lang.String getHost()>
<java.io.DataInputStream: double readDouble()>
<org.apache.derby.impl.store.raw.data.MemByteHolder: long write(java.io.InputStream,long)>
<org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File)>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: byte readByte()>
<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<org.apache.derby.impl.io.VFMemoryStorageFactory: java.lang.String normalizePath(java.lang.String)>
<org.apache.derby.impl.load.ExportWriteData: java.lang.String writeCharColumnToExternalFile(java.io.Reader)>
<org.apache.http.conn.ssl.SSLConnectionSocketFactory: org.apache.http.conn.ssl.SSLConnectionSocketFactory getSystemSocketFactory()>
<com.mchange.v2.c3p0.impl.NewProxyConnection: java.sql.Statement createStatement(int,int)>
<java.io.ObjectInputStream: short readShort()>
<org.apache.derby.impl.io.VFMemoryStorageFactory: java.lang.String normalizePath(java.lang.String,java.lang.String)>
<org.apache.http.client.entity.DeflateInputStream: int available()>
<org.apache.commons.dbcp.PoolingDriver$PoolGuardConnectionWrapper: java.sql.Statement createStatement(int,int,int)>
<java.io.FilterInputStream: int read()>
<org.apache.derby.impl.load.ImportLobFile: java.lang.String getString(long,int)>
<java.lang.System: java.util.Properties getProperties()>
<org.apache.derby.iapi.services.io.CloseFilterInputStream: int read(byte[],int,int)>
<org.apache.derby.iapi.services.io.FileUtil: java.lang.String stripProtocolFromFileName(java.lang.String)>
<org.apache.derby.iapi.services.cache.ClassSize$1: java.lang.String run()>
<com.mchange.v2.c3p0.impl.NewProxyCallableStatement: java.sql.ResultSet getResultSet()>
<org.apache.http.conn.EofSensorInputStream: int available()>
<org.apache.commons.mail.MultiPartEmail: org.apache.commons.mail.MultiPartEmail attach(java.net.URL,java.lang.String,java.lang.String,java.lang.String)>
<org.apache.http.client.entity.DeflateInputStream: int read(byte[],int,int)>
<org.apache.derby.iapi.services.io.CloseFilterInputStream: int read(byte[])>
<org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>
<org.apache.http.conn.util.PublicSuffixListParser: java.util.List parseByType(java.io.Reader)>
<org.apache.http.impl.io.SessionInputBufferImpl: int streamRead(byte[],int,int)>
<java.io.File: java.lang.String getName()>
<org.apache.http.client.utils.URLEncodedUtils: java.util.List parse(org.apache.http.HttpEntity)>
<org.apache.derby.impl.io.vfmem.DataStore: org.apache.derby.impl.io.vfmem.DataStoreEntry createEntry(java.lang.String,boolean)>
<org.apache.derby.iapi.jdbc.BrokeredConnection: java.sql.Statement createStatement(int,int,int)>
<java.io.InputStream: int available()>
<org.apache.derby.impl.io.BaseStorageFactory: java.lang.String readOnlyTempRoot()>
<org.apache.derby.iapi.services.classfile.ClassInput: int getU2()>
<org.apache.derby.impl.load.ImportReadData: boolean readNextToken(char[],int,int,boolean)>
<java.sql.Connection: java.sql.Statement createStatement(int,int)>
<org.apache.derby.impl.jdbc.UpdatableBlobStream: int read(byte[],int,int)>
<org.apache.commons.dbcp.DelegatingConnection: java.sql.Statement createStatement()>
<java.io.FilterInputStream: int read(byte[],int,int)>
<org.apache.derby.vti.XmlVTI$2: java.io.InputStream run()>
<java.sql.Statement: java.sql.ResultSet getGeneratedKeys()>
<org.apache.http.conn.util.PublicSuffixMatcherLoader: org.apache.http.conn.util.PublicSuffixMatcher load(java.net.URL)>
<org.apache.commons.io.input.ProxyReader: int read(char[])>
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: java.sql.ResultSet getResultSet()>
<org.apache.derby.impl.jdbc.ReaderToAscii: int read(byte[],int,int)>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: char readChar()>
<java.sql.Statement: java.sql.ResultSet getResultSet()>
<org.apache.http.impl.client.SystemDefaultCredentialsProvider: org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope)>
<org.apache.commons.io.LineIterator: boolean hasNext()>
<org.apache.derby.impl.services.reflect.JarLoader: byte[] readData(java.util.jar.JarEntry,java.io.InputStream,java.lang.String)>
<org.apache.commons.text.StrBuilder: int readFrom(java.lang.Readable)>
<java.io.RandomAccessFile: int read()>
<org.apache.mina.proxy.handlers.http.ntlm.NTLMUtilities: byte[] getOsVersion()>
<org.apache.derby.impl.store.raw.RawStore: java.lang.String getFilePath(java.io.File)>
<org.apache.commons.codec.digest.HmacUtils: javax.crypto.Mac updateHmac(javax.crypto.Mac,java.io.InputStream)>
<org.apache.commons.dbcp.DelegatingConnection: java.sql.Statement createStatement(int,int)>
<java.io.InputStream: int read(byte[],int,int)>
<java.io.DataInputStream: int readUnsignedShort()>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: int read()>
<org.apache.derby.diag.ErrorLogReader: boolean next()>
<org.apache.commons.io.input.ProxyReader: int read()>
<java.io.File: java.lang.String getAbsolutePath()>
<org.apache.http.ssl.SSLContextBuilder: org.apache.http.ssl.SSLContextBuilder loadKeyMaterial(java.net.URL,char[],char[],org.apache.http.ssl.PrivateKeyStrategy)>
<com.mchange.v2.c3p0.impl.NewProxyPreparedStatement: java.sql.ResultSet executeQuery(java.lang.String)>
<org.apache.derby.iapi.services.io.FileUtil: boolean removeDirectory(java.io.File)>
<org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>
<java.io.FileInputStream: int read(byte[])>
<org.apache.derby.impl.store.raw.data.BaseDataFileFactory$4: java.lang.String[] run()>
<org.apache.http.util.VersionInfo: java.lang.String getUserAgent(java.lang.String,java.lang.String,java.lang.Class)>
<java.io.Reader: int read(char[])>
<org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)>
<org.apache.commons.dbcp.DelegatingConnection: java.sql.Statement createStatement(int,int,int)>
<org.apache.derby.impl.jdbc.ReaderToAscii: int read()>
<org.apache.commons.codec.language.bm.Rule: java.util.Map parseRules(java.util.Scanner,java.lang.String)>
<org.apache.derby.impl.services.monitor.BaseMonitor: java.util.Properties getDefaultModuleProperties()>
<org.apache.http.impl.client.HttpClientBuilder: org.apache.http.impl.client.CloseableHttpClient build()>
<java.io.DataInputStream: int readUnsignedByte()>
<org.apache.derby.impl.services.stream.SingleStream: org.apache.derby.shared.common.stream.HeaderPrintWriter PBmakeFileHPW(java.lang.String,org.apache.derby.shared.common.stream.PrintWriterGetHeader)>
<org.apache.derby.impl.services.monitor.StorageFactoryService$1: java.lang.Object run()>
<com.mchange.v2.c3p0.impl.NewProxyStatement: java.sql.ResultSet getGeneratedKeys()>
<org.apache.derby.iapi.services.io.FileUtil: boolean copyDirectory(org.apache.derby.io.WritableStorageFactory,java.io.File,org.apache.derby.io.StorageFile,byte[],java.lang.String[])>
<org.apache.derby.iapi.services.io.LimitInputStream: int read(byte[],int,int)>
<java.io.ObjectInputStream: java.lang.String readUTF()>
<org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)>
<org.apache.derby.impl.load.ImportFileInputStream: int read()>
<java.io.Reader: int read()>
<java.net.URL: java.lang.String getFile()>
<org.apache.derby.iapi.services.classfile.ClassInput: int getU1()>
<org.apache.derby.impl.store.raw.data.RememberBytesInputStream: int read(byte[],int,int)>
<org.apache.derby.impl.sql.execute.JarUtil$1: java.io.InputStream run()>
<org.apache.derby.diag.StatementDuration$1: java.lang.String run()>
<org.apache.commons.text.TextStringBuilder: int readFrom(java.io.Reader,int)>
<org.apache.derby.iapi.services.io.FileUtil: boolean copyFile(java.io.File,java.io.File,byte[])>
<java.io.BufferedReader: int read()>
<org.apache.derby.impl.store.raw.data.RFResource: long add(java.lang.String,java.io.InputStream)>
<java.net.URLConnection: java.io.InputStream getInputStream()>
<org.apache.commons.codec.digest.HmacUtils: byte[] hmac(java.io.InputStream)>
<java.io.File: java.lang.String getCanonicalPath()>
<java.io.FilterInputStream: int available()>
<org.apache.derby.impl.services.monitor.FileMonitor: boolean PBinitialize(boolean)>
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,org.apache.http.entity.ContentType)>
<org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File)>
<org.apache.derby.iapi.services.io.FileUtil: boolean copyFile(org.apache.derby.io.StorageFactory,org.apache.derby.io.StorageFile,java.io.File,byte[])>
<org.apache.derby.impl.io.vfmem.DataStore: boolean move(org.apache.derby.io.StorageFile,org.apache.derby.io.StorageFile)>
<org.apache.http.impl.client.SystemDefaultCredentialsProvider: java.net.PasswordAuthentication getProxyCredentials(java.lang.String,org.apache.http.auth.AuthScope)>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: double readDouble()>
<org.apache.derby.impl.load.ExportWriteData: java.lang.String writeBinaryColumnToExternalFile(java.io.InputStream)>
<org.apache.derby.impl.load.ImportFileInputStream: int read(byte[],int,int)>
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: long readLong()>
<java.io.RandomAccessFile: int read(byte[],int,int)>
<org.apache.commons.logging.LogFactory$6: java.lang.Object run()>
<java.io.FilterInputStream: int read(byte[])>
<org.apache.derby.impl.io.vfmem.DataStore: boolean deleteAll(java.lang.String)>
<org.apache.derby.impl.load.ExportResultSetForObject: java.sql.ResultSet getResultSet()>
<org.apache.derby.impl.store.raw.log.LogToFile: java.lang.Object run()>
<org.apache.commons.mail.resolver.DataSourceFileResolver: javax.activation.DataSource resolve(java.lang.String,boolean)>
<org.apache.commons.io.input.ProxyReader: int read(char[],int,int)>
<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>
<org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)>
<org.apache.derby.diag.ErrorLogReader: java.lang.String getString(int)>
<org.apache.commons.dbcp.DelegatingStatement: java.sql.ResultSet executeQuery(java.lang.String)>
<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File)>
<org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile: short readShort()>
<org.apache.derby.impl.store.raw.log.LogToFile: long readControlFile(org.apache.derby.io.StorageFile,java.util.Properties)>
<java.io.ObjectInputStream: float readFloat()>
<org.apache.derby.impl.io.DirFile: boolean deleteAll()>
<org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.lang.String,boolean)>
<org.apache.derby.iapi.jdbc.BrokeredStatement: java.sql.Statement createDuplicateStatement(java.sql.Connection,java.sql.Statement)>
<org.apache.derby.impl.io.vfmem.DataStore: java.lang.String[] getParentList(java.lang.String)>
<org.apache.commons.dbcp.PoolingDriver$PoolGuardConnectionWrapper: java.sql.Statement createStatement()>
<org.apache.derby.impl.io.vfmem.VirtualRandomAccessFile: long readLong()>
<org.apache.commons.dbcp.DelegatingStatement: java.sql.ResultSet getGeneratedKeys()>
<org.apache.http.impl.conn.LoggingInputStream: int available()>
<org.apache.derby.impl.jdbc.EmbedClob: java.lang.String getSubString(long,int)>
<org.apache.derby.impl.io.BaseStorageFactory: org.apache.derby.io.StorageFile createTemporaryFile(java.lang.String,java.lang.String)>
<org.apache.derby.impl.io.URLFile: java.io.InputStream getInputStream()>
<java.io.BufferedReader: java.lang.String readLine()>
<java.io.PushbackInputStream: int read()>
<org.apache.derby.impl.io.vfmem.DataStore: java.lang.String[] listChildren(java.lang.String)>
<com.mchange.v2.c3p0.impl.NewProxyStatement: java.sql.ResultSet getResultSet()>
<org.apache.derby.iapi.services.io.InputStreamUtil: int readLoop(java.io.InputStream,byte[],int,int)>
<org.apache.derby.iapi.services.classfile.ClassInvestigator: org.apache.derby.iapi.services.classfile.ConstantPoolEntry getConstant(org.apache.derby.iapi.services.classfile.ClassInput)>
<java.io.DataInputStream: java.lang.String readUTF()>
<org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)>
<org.apache.commons.collections4.properties.AbstractPropertiesFactory: java.util.Properties load(java.net.URL)>
<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>
<org.apache.derby.iapi.jdbc.BrokeredConnection: java.sql.Statement createStatement(int,int)>
<org.apache.commons.text.TextStringBuilder: int readFrom(java.io.Reader)>
<org.apache.derby.iapi.jdbc.BrokeredStatement: java.sql.ResultSet getGeneratedKeys()>
<org.apache.derby.iapi.services.io.LimitReader: int read(char[],int,int)>
<org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>
<org.apache.derby.iapi.services.io.FileUtil: boolean copyFile(org.apache.derby.io.WritableStorageFactory,java.io.File,org.apache.derby.io.StorageFile,byte[])>
<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest updateDigest(java.security.MessageDigest,java.io.InputStream)>
<com.mchange.v2.c3p0.impl.DefaultConnectionTester: int activeCheckConnection(java.sql.Connection,java.lang.String,java.lang.Throwable[])>
<org.apache.commons.dbcp.datasources.KeyedCPDSConnectionFactory: boolean validateObject(java.lang.Object,java.lang.Object)>
<org.apache.http.impl.conn.LoggingInputStream: int read(byte[],int,int)>
<org.apache.derby.impl.db.BasicDatabase$2: java.lang.Boolean run()>
<org.apache.derby.iapi.services.io.FileUtil: boolean copyFile(org.apache.derby.io.WritableStorageFactory,org.apache.derby.io.StorageFile,org.apache.derby.io.StorageFile)>
