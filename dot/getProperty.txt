strict digraph G {
  1 [ label="<java.lang.System: java.lang.String getProperty(java.lang.String)>" ];
  2 [ label="<sun.security.action.GetPropertyAction: java.lang.String run()>" ];
  3 [ label="<java.lang.Boolean: boolean getBoolean(java.lang.String)>" ];
  4 [ label="<java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)>" ];
  5 [ label="<java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)>" ];
  6 [ label="<javax.xml.stream.FactoryFinder: java.lang.Object find(java.lang.Class,java.lang.String,java.lang.ClassLoader,java.lang.String)>" ];
  7 [ label="<org.fusesource.jansi.internal.JansiLoader: void loadJansiNativeLibrary()>" ];
  8 [ label="<sun.security.util.SecurityProperties: java.lang.String getOverridableProperty(java.lang.String)>" ];
  9 [ label="<org.fusesource.jansi.internal.JansiLoader: java.io.File getTempDir()>" ];
  10 [ label="<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>" ];
  11 [ label="<java.lang.ProcessHandleImpl: java.util.concurrent.Executor lambda$static$1()>" ];
  12 [ label="<jdk.xml.internal.SecuritySupport: java.lang.String lambda$getSystemProperty$0(java.lang.String)>" ];
  13 [ label="<java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>" ];
  14 [ label="<sun.net.InetAddressCachePolicy$2: java.lang.Integer run()>" ];
  15 [ label="<sun.net.InetAddressCachePolicy$1: java.lang.Integer run()>" ];
  16 [ label="<jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>" ];
  17 [ label="<java.util.prefs.Preferences: java.util.prefs.PreferencesFactory factory1()>" ];
  18 [ label="<java.util.prefs.Preferences$1: java.lang.String run()>" ];
  19 [ label="<sun.net.www.MimeTable$1: java.lang.Void run()>" ];
  20 [ label="<sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String,boolean)>" ];
  21 [ label="<java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()>" ];
  22 [ label="<sun.net.www.MimeTable: void load()>" ];
  23 [ label="<sun.net.www.MimeEntry: void setImageFileName(java.lang.String)>" ];
  24 [ label="<sun.security.jca.ProviderConfig$1: java.lang.Boolean run()>" ];
  25 [ label="<sun.security.util.DomainName$Rules$1: java.io.InputStream run()>" ];
  26 [ label="<sun.security.provider.PolicyFile$1: java.lang.String run()>" ];
  27 [ label="<sun.security.provider.PolicyFile$4: java.lang.Boolean run()>" ];
  28 [ label="<java.time.zone.ZoneRulesProvider$1: java.lang.Object run()>" ];
  29 [ label="<sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>" ];
  30 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String getArchName()>" ];
  31 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String getNativeLibFolderPathForCurrentOS()>" ];
  32 [ label="<org.fusesource.jansi.internal.JansiLoader: boolean loadNativeLibrary(java.io.File)>" ];
  33 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String resolveArmArchType()>" ];
  34 [ label="<org.fusesource.jansi.internal.OSInfo: java.lang.String getOSName()>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
}

