strict digraph G {
  1 [ label="<java.net.URL: java.io.InputStream openStream()>" ];
  2 [ label="<sun.security.provider.SeedGenerator$URLSeedGenerator$1: java.io.InputStream run()>" ];
  3 [ label="<sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>" ];
  4 [ label="<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>" ];
  5 [ label="<java.util.ResourceBundle$ResourceBundleProviderHelper: java.io.InputStream lambda$loadPropertyResourceBundle$2(java.lang.String,java.lang.Module,java.lang.Module)>" ];
  6 [ label="<jdk.internal.loader.BuiltinClassLoader: java.io.InputStream findResourceAsStream(java.lang.String,java.lang.String)>" ];
  7 [ label="<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>" ];
  8 [ label="<lombok.launch.ShadowClassLoader: java.lang.Class urlToDefineClass(java.lang.String,java.net.URL,boolean)>" ];
  9 [ label="<lombok.launch.ShadowClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>" ];
  10 [ label="<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>" ];
  11 [ label="<jdk.internal.loader.BootLoader: java.io.InputStream findResourceAsStream(java.lang.String,java.lang.String)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  6 -> 11;
}

