strict digraph G {
  1 [ label="<java.io.File: java.lang.String getPath()>" ];
  2 [ label="<sun.net.www.MimeTable: void load()>" ];
  3 [ label="<org.apache.bcel.util.ClassPath: java.lang.String getClassPath()>" ];
  4 [ label="<org.apache.bcel.util.SyntheticRepository: void <clinit>()>" ];
  5 [ label="<org.apache.bcel.util.ClassPath: void <init>()>" ];
  6 [ label="<com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces: void <init>()>" ];
  7 [ label="<org.h2.util.Utils: void <clinit>()>" ];
  8 [ label="<org.apache.bcel.util.JavaWrapper: java.lang.ClassLoader getClassLoader()>" ];
  9 [ label="<org.apache.bcel.generic.Instruction: org.apache.bcel.generic.Instruction readInstruction(org.apache.bcel.util.ByteSequence)>" ];
  10 [ label="<java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)>" ];
  11 [ label="<sun.awt.shell.ShellFolder: void <clinit>()>" ];
  12 [ label="<sun.java2d.pipe.RenderingEngine: sun.java2d.pipe.RenderingEngine getInstance()>" ];
  13 [ label="<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>" ];
  14 [ label="<java.net.DefaultDatagramSocketImplFactory: java.net.DatagramSocketImpl createDatagramSocketImpl(boolean)>" ];
  15 [ label="<sun.util.calendar.CalendarSystem: sun.util.calendar.CalendarSystem forName(java.lang.String)>" ];
  16 [ label="<java.net.ProxySelector: void <clinit>()>" ];
  17 [ label="<java.net.URL: java.net.URLStreamHandler lookupViaProperty(java.lang.String)>" ];
  18 [ label="<org.h2.store.fs.FilePath: void registerDefaultProviders()>" ];
  19 [ label="<com.sun.org.apache.xerces.internal.utils.ObjectFactory: java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader,boolean)>" ];
  20 [ label="<java.net.InetAddress: java.net.InetAddressImpl loadImpl(java.lang.String)>" ];
  21 [ label="<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.Object convertFromString(java.lang.String,javax.management.openmbean.OpenType)>" ];
  22 [ label="<javax.swing.UIManager: void initializeAuxiliaryLAFs(java.util.Properties)>" ];
  23 [ label="<javax.xml.stream.FactoryFinder: java.lang.Object newInstance(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean,boolean)>" ];
  24 [ label="<javax.swing.UIManager: javax.swing.LookAndFeel getMultiLookAndFeel()>" ];
  25 [ label="<javax.swing.UIManager: void setLookAndFeel(java.lang.String)>" ];
  26 [ label="<javax.xml.parsers.FactoryFinder: java.lang.Object newInstance(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean,boolean)>" ];
  27 [ label="<java.util.ResourceBundle$ResourceBundleProviderHelper: java.util.ResourceBundle newResourceBundle(java.lang.Class)>" ];
  28 [ label="<java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>" ];
  29 [ label="<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.Class,java.lang.reflect.Constructor,java.lang.reflect.InvocationHandler)>" ];
  30 [ label="<sun.java2d.cmm.CMSManager: sun.java2d.cmm.PCMM getModule()>" ];
  31 [ label="<java.util.concurrent.ForkJoinTask: java.lang.Throwable getThrowableException()>" ];
  32 [ label="<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>" ];
  33 [ label="<sun.nio.cs.StandardCharsets: java.nio.charset.Charset lookup(java.lang.String)>" ];
  34 [ label="<javax.crypto.CryptoPolicyParser: java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String,java.lang.Integer[])>" ];
  35 [ label="<java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>" ];
  36 [ label="<java.util.logging.LogManager$1: java.util.logging.LogManager run()>" ];
  37 [ label="<sun.font.FontManagerFactory$1: java.lang.Object run()>" ];
  38 [ label="<java.security.Policy$2: java.security.Policy run()>" ];
  39 [ label="<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>" ];
  40 [ label="<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>" ];
  41 [ label="<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>" ];
  42 [ label="<org.h2.message.TraceSystem: void setLevelFile(int)>" ];
  43 [ label="<java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()>" ];
  44 [ label="<java.util.ServiceLoader$ProviderImpl: java.lang.Object newInstance()>" ];
  45 [ label="<java.util.ServiceLoader$ProviderImpl$2: java.lang.Object run()>" ];
  46 [ label="<sun.security.x509.X500Name: javax.security.auth.x500.X500Principal asX500Principal()>" ];
  47 [ label="<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>" ];
  48 [ label="<sun.security.x509.OtherName: sun.security.x509.GeneralNameInterface getGNI(sun.security.util.ObjectIdentifier,byte[])>" ];
  49 [ label="<java.awt.Toolkit: void fallbackToLoadClassForAT(java.lang.String)>" ];
  50 [ label="<sun.security.x509.CRLExtensions: void parseExtension(sun.security.x509.Extension)>" ];
  51 [ label="<java.util.prefs.Preferences: java.util.prefs.PreferencesFactory factory()>" ];
  52 [ label="<java.util.prefs.Preferences: java.util.prefs.PreferencesFactory factory1()>" ];
  53 [ label="<javax.swing.text.DefaultFormatter: java.lang.Object stringToValue(java.lang.String)>" ];
  54 [ label="<org.h2.engine.SessionRemote: org.h2.engine.SessionInterface connectEmbeddedOrServer(boolean)>" ];
  55 [ label="<org.h2.engine.SessionRemote: void connectServer(org.h2.engine.ConnectionInfo)>" ];
  56 [ label="<javax.net.ssl.SSLSocketFactory$DefaultFactoryHolder: void <clinit>()>" ];
  57 [ label="<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>" ];
  58 [ label="<java.time.zone.ZoneRulesProvider$1: java.lang.Object run()>" ];
  59 [ label="<java.io.ObjectStreamClass: java.lang.Object newInstance()>" ];
  60 [ label="<java.security.Provider: java.lang.Object newInstanceUtil(java.lang.Class,java.lang.Class,java.lang.Object)>" ];
  61 [ label="<org.h2.store.fs.FilePathWrapper: org.h2.store.fs.FilePathWrapper create(java.lang.String,org.h2.store.fs.FilePath)>" ];
  62 [ label="<sun.nio.ch.Util: java.nio.MappedByteBuffer newMappedByteBuffer(int,long,java.io.FileDescriptor,java.lang.Runnable,boolean)>" ];
  63 [ label="<sun.nio.ch.Util: java.nio.MappedByteBuffer newMappedByteBufferR(int,long,java.io.FileDescriptor,java.lang.Runnable,boolean)>" ];
  64 [ label="<sun.security.jca.ProviderConfig$2: java.security.Provider run()>" ];
  65 [ label="<sun.security.jca.ProviderConfig$ProviderLoader$1: java.security.Provider run()>" ];
  66 [ label="<org.apache.bcel.util.ClassPath: void <clinit>()>" ];
  67 [ label="<org.apache.bcel.util.SyntheticRepository: org.apache.bcel.util.SyntheticRepository getInstance()>" ];
  68 [ label="<java.io.ObjectStreamClass: java.lang.Object lambda$newInstance$0()>" ];
  69 [ label="<java.util.logging.LogManager: void readConfiguration()>" ];
  70 [ label="<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>" ];
  71 [ label="<java.util.logging.LogManager: java.util.List createLoggerHandlers(java.lang.String,java.lang.String)>" ];
  72 [ label="<jdk.internal.reflect.MethodAccessorGenerator$1: jdk.internal.reflect.MagicAccessorImpl run()>" ];
  73 [ label="<java.util.logging.LogManager: java.util.logging.Filter getFilterProperty(java.lang.String,java.util.logging.Filter)>" ];
  74 [ label="<java.util.logging.LogManager: java.util.logging.Formatter getFormatterProperty(java.lang.String,java.util.logging.Formatter)>" ];
  75 [ label="<sun.java2d.loops.GraphicsPrimitiveProxy: sun.java2d.loops.GraphicsPrimitive instantiate()>" ];
  76 [ label="<sun.util.locale.provider.LocaleProviderAdapter: sun.util.locale.provider.LocaleProviderAdapter forType(sun.util.locale.provider.LocaleProviderAdapter$Type)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  46 -> 47;
  47 -> 48;
  48 -> 49;
  49 -> 50;
  50 -> 51;
  51 -> 52;
  52 -> 53;
  53 -> 54;
  54 -> 55;
  55 -> 56;
  56 -> 57;
  57 -> 58;
  58 -> 59;
  59 -> 60;
  60 -> 61;
  61 -> 62;
  62 -> 63;
  63 -> 64;
  64 -> 65;
  65 -> 66;
  66 -> 67;
  67 -> 68;
  68 -> 69;
  69 -> 70;
  70 -> 71;
  71 -> 72;
  72 -> 73;
  73 -> 74;
  74 -> 75;
  75 -> 76;
}

