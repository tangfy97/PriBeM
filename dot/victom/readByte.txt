strict digraph G {
  1 [ label="<java.io.DataInputStream: byte readByte()>" ];
  2 [ label="<sun.util.calendar.ZoneInfoFile: long readEpochSec(java.io.DataInput)>" ];
  3 [ label="<sun.util.calendar.ZoneInfoFile: int readOffset(java.io.DataInput)>" ];
  4 [ label="<sun.util.calendar.ZoneInfoFile: void load(java.io.DataInputStream)>" ];
  5 [ label="<jdk.internal.icu.impl.ICUBinary: byte[] readHeader(java.io.InputStream,byte[],jdk.internal.icu.impl.ICUBinary$Authenticate)>" ];
  6 [ label="<org.apache.bcel.classfile.Constant: org.apache.bcel.classfile.Constant readConstant(java.io.DataInputStream)>" ];
  7 [ label="<org.apache.bcel.util.CodeHTML: java.lang.String codeToHTML(org.apache.bcel.util.ByteSequence,int)>" ];
  8 [ label="<org.apache.bcel.util.CodeHTML: void findGotos(org.apache.bcel.util.ByteSequence,org.apache.bcel.classfile.Method,org.apache.bcel.classfile.Code)>" ];
  9 [ label="<org.h2.value.Transfer: boolean readBoolean()>" ];
  10 [ label="<org.h2.value.Transfer: byte readByte()>" ];
  11 [ label="<jdk.internal.jimage.decompressor.CompressIndexes: int readInt(java.io.DataInputStream)>" ];
  12 [ label="<org.apache.bcel.classfile.Utility: java.lang.String codeToString(org.apache.bcel.util.ByteSequence,org.apache.bcel.classfile.ConstantPool,boolean)>" ];
  13 [ label="<sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo getZoneInfo(java.io.DataInput,java.lang.String)>" ];
  14 [ label="<com.redhat.victims.fingerprint.ClassFile: java.lang.String formatBytecode(org.apache.bcel.util.ByteSequence,org.apache.bcel.classfile.ConstantPool)>" ];
  15 [ label="<com.redhat.victims.fingerprint.ClassFile: byte[] normalize(byte[],java.lang.String)>" ];
  16 [ label="<com.redhat.victims.fingerprint.ClassFile: void <init>(byte[],java.lang.String)>" ];
  17 [ label="<com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces: void <init>()>" ];
  18 [ label="<java.util.concurrent.ForkJoinPool: java.lang.Object newInstanceFromSystemProperty(java.lang.String)>" ];
  19 [ label="<sun.awt.shell.ShellFolder: void <clinit>()>" ];
  20 [ label="<sun.java2d.pipe.RenderingEngine: sun.java2d.pipe.RenderingEngine getInstance()>" ];
  21 [ label="<com.sun.org.apache.xerces.internal.utils.ObjectFactory: java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader,boolean)>" ];
  22 [ label="<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.Object convertFromString(java.lang.String,javax.management.openmbean.OpenType)>" ];
  23 [ label="<javax.xml.stream.FactoryFinder: java.lang.Object newInstance(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean,boolean)>" ];
  24 [ label="<javax.xml.parsers.FactoryFinder: java.lang.Object newInstance(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean,boolean)>" ];
  25 [ label="<java.util.ResourceBundle$ResourceBundleProviderHelper: java.util.ResourceBundle newResourceBundle(java.lang.Class)>" ];
  26 [ label="<java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>" ];
  27 [ label="<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.Class,java.lang.reflect.Constructor,java.lang.reflect.InvocationHandler)>" ];
  28 [ label="<sun.java2d.cmm.CMSManager: sun.java2d.cmm.PCMM getModule()>" ];
  29 [ label="<java.util.concurrent.ForkJoinTask: java.lang.Throwable getThrowableException()>" ];
  30 [ label="<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>" ];
  31 [ label="<javax.crypto.CryptoPolicyParser: java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String,java.lang.Integer[])>" ];
  32 [ label="<java.net.URL$DefaultFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>" ];
  33 [ label="<sun.font.FontManagerFactory$1: java.lang.Object run()>" ];
  34 [ label="<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>" ];
  35 [ label="<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>" ];
  36 [ label="<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>" ];
  37 [ label="<java.nio.channels.spi.SelectorProvider$Holder: java.nio.channels.spi.SelectorProvider loadProviderFromProperty()>" ];
  38 [ label="<java.util.ServiceLoader$ProviderImpl: java.lang.Object newInstance()>" ];
  39 [ label="<java.util.ServiceLoader$ProviderImpl$2: java.lang.Object run()>" ];
  40 [ label="<sun.security.x509.X500Name: javax.security.auth.x500.X500Principal asX500Principal()>" ];
  41 [ label="<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>" ];
  42 [ label="<sun.security.x509.OtherName: sun.security.x509.GeneralNameInterface getGNI(sun.security.util.ObjectIdentifier,byte[])>" ];
  43 [ label="<java.awt.Toolkit: void fallbackToLoadClassForAT(java.lang.String)>" ];
  44 [ label="<sun.security.x509.CRLExtensions: void parseExtension(sun.security.x509.Extension)>" ];
  45 [ label="<javax.swing.text.DefaultFormatter: java.lang.Object stringToValue(java.lang.String)>" ];
  46 [ label="<javax.net.ssl.SSLSocketFactory$DefaultFactoryHolder: void <clinit>()>" ];
  47 [ label="<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>" ];
  48 [ label="<java.io.ObjectStreamClass: java.lang.Object newInstance()>" ];
  49 [ label="<java.security.Provider: java.lang.Object newInstanceUtil(java.lang.Class,java.lang.Class,java.lang.Object)>" ];
  50 [ label="<sun.nio.ch.Util: java.nio.MappedByteBuffer newMappedByteBuffer(int,long,java.io.FileDescriptor,java.lang.Runnable,boolean)>" ];
  51 [ label="<sun.nio.ch.Util: java.nio.MappedByteBuffer newMappedByteBufferR(int,long,java.io.FileDescriptor,java.lang.Runnable,boolean)>" ];
  52 [ label="<java.io.ObjectStreamClass: java.lang.Object lambda$newInstance$0()>" ];
  53 [ label="<sun.java2d.loops.GraphicsPrimitiveProxy: sun.java2d.loops.GraphicsPrimitive instantiate()>" ];
  54 [ label="<sun.util.locale.provider.LocaleProviderAdapter: sun.util.locale.provider.LocaleProviderAdapter forType(sun.util.locale.provider.LocaleProviderAdapter$Type)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  24 -> 25;
  25 -> 26;
  26 -> 27;
  27 -> 28;
  28 -> 29;
  29 -> 30;
  30 -> 31;
  31 -> 32;
  32 -> 33;
  33 -> 34;
  34 -> 35;
  35 -> 36;
  36 -> 37;
  37 -> 38;
  38 -> 39;
  39 -> 40;
  40 -> 41;
  41 -> 42;
  42 -> 43;
  43 -> 44;
  44 -> 45;
  45 -> 46;
  46 -> 47;
  47 -> 48;
  48 -> 49;
  49 -> 50;
  50 -> 51;
  51 -> 52;
  52 -> 53;
  53 -> 54;
}

