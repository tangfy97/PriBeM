strict digraph G {
  1 [ label="<java.io.FilterInputStream: int available()>" ];
  2 [ label="<sun.nio.cs.StreamDecoder: boolean inReady()>" ];
  3 [ label="<org.apache.bcel.util.CodeHTML: void writeMethod(org.apache.bcel.classfile.Method,int)>" ];
  4 [ label="<org.apache.bcel.util.CodeHTML: void findGotos(org.apache.bcel.util.ByteSequence,org.apache.bcel.classfile.Method,org.apache.bcel.classfile.Code)>" ];
  5 [ label="<jdk.internal.jimage.decompressor.StringSharingDecompressor: byte[] normalize(jdk.internal.jimage.decompressor.ResourceDecompressor$StringsProvider,byte[],int)>" ];
  6 [ label="<sun.net.www.MeteredStream: int available()>" ];
  7 [ label="<org.apache.bcel.classfile.Utility: java.lang.String codeToString(byte[],org.apache.bcel.classfile.ConstantPool,int,int,boolean)>" ];
  8 [ label="<jdk.internal.icu.impl.ICUBinary: java.nio.ByteBuffer getRequiredData(java.lang.String)>" ];
  9 [ label="<com.redhat.victims.fingerprint.ClassFile: java.lang.String formatBytecode(org.apache.bcel.util.ByteSequence,org.apache.bcel.classfile.ConstantPool)>" ];
  10 [ label="<org.apache.commons.io.input.ProxyInputStream: int available()>" ];
  11 [ label="<java.io.BufferedInputStream: int available()>" ];
  12 [ label="<java.io.BufferedInputStream: int read(byte[],int,int)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 6;
  6 -> 1;
  1 -> 11;
  11 -> 12;
  12 -> 2;
}

