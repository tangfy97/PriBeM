strict digraph G {
  1 [ label="<java.net.URL: java.lang.String getProtocol()>" ];
  2 [ label="<sun.security.provider.SeedGenerator$URLSeedGenerator$1: java.io.InputStream run()>" ];
  3 [ label="<sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>" ];
  4 [ label="<sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>" ];
  5 [ label="<sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>" ];
  6 [ label="<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)>" ];
  7 [ label="<java.net.URLStreamHandler: int hashCode(java.net.URL)>" ];
  8 [ label="<java.net.URLStreamHandler: boolean sameFile(java.net.URL,java.net.URL)>" ];
  9 [ label="<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>" ];
  10 [ label="<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>" ];
  11 [ label="<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" ];
  12 [ label="<jdk.internal.loader.URLClassPath$JarLoader: java.net.URL tryResolveFile(java.net.URL,java.lang.String)>" ];
  13 [ label="<jdk.internal.loader.URLClassPath$JarLoader: java.net.URL tryResolve(java.net.URL,java.lang.String)>" ];
  14 [ label="<jdk.internal.loader.URLClassPath$JarLoader: boolean isOptimizable(java.net.URL)>" ];
  15 [ label="<javax.crypto.ProviderVerifier: void verify()>" ];
  16 [ label="<jdk.internal.loader.URLClassPath$3: jdk.internal.loader.URLClassPath$Loader run()>" ];
  17 [ label="<sun.net.util.URLUtil: java.security.Permission getURLConnectPermission(java.net.URL)>" ];
  18 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: void searchForWidgetSetsAndAddonStyles(java.lang.String,java.util.Map,java.util.Map)>" ];
  19 [ label="<com.vaadin.server.widgetsetutils.ClassPathExplorer: com.vaadin.server.widgetsetutils.ClassPathExplorer$LocationInfo getAvailableWidgetSetsAndStylesheets()>" ];
  20 [ label="<com.vaadin.server.themeutils.SASSAddonImportFileCreator: void updateTheme(java.lang.String)>" ];
  21 [ label="<java.security.AccessController: java.lang.Object executePrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.lang.Class)>" ];
  22 [ label="<jdk.internal.loader.URLClassPath: jdk.internal.loader.URLClassPath$Loader getLoader(java.net.URL)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  16 -> 21;
  21 -> 22;
}

