strict digraph G {
  1 [ label="<java.net.URL: java.io.InputStream openStream()>" ];
  2 [ label="<sun.security.util.PolicyUtil: java.io.InputStream getInputStream(java.net.URL)>" ];
  3 [ label="<sun.security.util.PolicyUtil: java.security.KeyStore getKeyStore(java.net.URL,java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.security.util.Debug)>" ];
  4 [ label="<jdk.internal.loader.BuiltinClassLoader: java.io.InputStream findResourceAsStream(java.lang.String,java.lang.String)>" ];
  5 [ label="<org.apache.log4j.lf5.viewer.configure.MRUFileManager: java.io.InputStream getInputStream(java.net.URL)>" ];
  6 [ label="<org.apache.log4j.lf5.viewer.LogBrokerMonitor: boolean loadLogFile(java.net.URL)>" ];
  7 [ label="<org.eclipse.osgi.baseadaptor.HookRegistry: void mergeFileHookConfigurators(java.util.List,java.util.List)>" ];
  8 [ label="<org.glassfish.jersey.internal.OsgiRegistry: java.util.ResourceBundle getResourceBundle(java.lang.String)>" ];
  9 [ label="<org.eclipse.osgi.internal.permadmin.SecurityAdmin: org.osgi.service.permissionadmin.PermissionInfo[] getPermissionInfos(java.net.URL,org.eclipse.osgi.framework.internal.core.Framework)>" ];
  10 [ label="<sun.util.locale.provider.LocaleProviderAdapter: sun.util.locale.provider.LocaleProviderAdapter forType(sun.util.locale.provider.LocaleProviderAdapter$Type)>" ];
  11 [ label="<org.glassfish.jersey.internal.util.PropertiesHelper: java.lang.Object getValue(java.util.Map,javax.ws.rs.RuntimeType,java.lang.String,java.lang.Class)>" ];
  12 [ label="<com.sun.org.apache.xerces.internal.utils.ObjectFactory: java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader,boolean)>" ];
  13 [ label="<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>" ];
  14 [ label="<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>" ];
  15 [ label="<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>" ];
  16 [ label="<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>" ];
  17 [ label="<sun.security.x509.X500Name: javax.security.auth.x500.X500Principal asX500Principal()>" ];
  18 [ label="<sun.security.x509.OtherName: sun.security.x509.GeneralNameInterface getGNI(sun.security.util.ObjectIdentifier,byte[])>" ];
  19 [ label="<sun.security.x509.CRLExtensions: void parseExtension(sun.security.x509.Extension)>" ];
  20 [ label="<org.glassfish.jersey.server.wadl.config.WadlGeneratorLoader: org.glassfish.jersey.server.wadl.config.WadlGeneratorLoader$Callback setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)>" ];
  21 [ label="<org.glassfish.hk2.utilities.reflection.ReflectionHelper: java.lang.Object makeMe(java.lang.reflect.Constructor,java.lang.Object[])>" ];
  22 [ label="<org.eclipse.osgi.internal.permadmin.PermissionInfoCollection: void addPermissions(java.security.PermissionCollection,java.lang.Class)>" ];
  23 [ label="<sun.nio.ch.Util: java.nio.MappedByteBuffer newMappedByteBuffer(int,long,java.io.FileDescriptor,java.lang.Runnable,boolean)>" ];
  24 [ label="<sun.nio.ch.Util: java.nio.MappedByteBuffer newMappedByteBufferR(int,long,java.io.FileDescriptor,java.lang.Runnable,boolean)>" ];
  25 [ label="<sun.nio.ch.FileChannelImpl: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>" ];
  1 -> 2;
  2 -> 3;
  3 -> 4;
  4 -> 5;
  5 -> 6;
  6 -> 7;
  7 -> 8;
  8 -> 9;
  9 -> 10;
  10 -> 11;
  11 -> 12;
  12 -> 13;
  13 -> 14;
  14 -> 15;
  15 -> 16;
  16 -> 17;
  17 -> 18;
  18 -> 19;
  19 -> 20;
  20 -> 21;
  21 -> 22;
  22 -> 23;
  23 -> 24;
  23 -> 25;
}

