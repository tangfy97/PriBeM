<java.util.Map: java.lang.Object get(java.lang.Object)>
<org.signal.client.internal.Native: void loadLibrary()>
<org.whispersystems.libsignal.util.KeyHelper: int generateRegistrationId(boolean)>
<java.util.Iterator: java.lang.Object next()>
<org.whispersystems.libsignal.state.impl.InMemorySignedPreKeyStore: java.util.List loadSignedPreKeys()>
<org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent: byte[] getContent()>
<org.whispersystems.libsignal.IdentityKey: int hashCode()>
<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
<org.whispersystems.libsignal.state.impl.InMemorySessionStore: java.util.List getSubDeviceSessions(java.lang.String)>
<org.whispersystems.libsignal.SignalProtocolAddress: java.lang.String toString()>
<org.whispersystems.libsignal.state.impl.InMemorySessionStore: java.util.List loadExistingSessions(java.util.List)>
<org.whispersystems.libsignal.state.impl.InMemoryPreKeyStore: org.whispersystems.libsignal.state.PreKeyRecord loadPreKey(int)>
<org.whispersystems.libsignal.util.Pair: int hashCode()>
<org.whispersystems.libsignal.state.impl.InMemorySessionStore: void deleteAllSessions(java.lang.String)>
<java.util.Optional: java.lang.Object get()>
<java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>
<org.whispersystems.libsignal.SignalProtocolAddress: boolean equals(java.lang.Object)>
<java.io.InputStream: int read(byte[])>
<org.signal.zkgroup.ServerSecretParams: org.signal.zkgroup.NotarySignature sign(java.security.SecureRandom,byte[])>
<org.whispersystems.libsignal.groups.state.InMemorySenderKeyStore: org.whispersystems.libsignal.groups.state.SenderKeyRecord loadSenderKey(org.whispersystems.libsignal.SignalProtocolAddress,java.util.UUID)>
<org.signal.libsignal.metadata.ProtocolException: java.util.Optional getGroupId()>
<org.whispersystems.libsignal.SignalProtocolAddress: java.lang.String getName()>
<java.util.Random: int nextInt(int)>
<org.whispersystems.libsignal.state.impl.InMemoryIdentityKeyStore: boolean isTrustedIdentity(org.whispersystems.libsignal.SignalProtocolAddress,org.whispersystems.libsignal.IdentityKey,org.whispersystems.libsignal.state.IdentityKeyStore$Direction)>
<org.signal.libsignal.metadata.SealedSessionCipher: byte[] decrypt(org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent)>
<org.signal.zkgroup.ServerSecretParams: org.signal.zkgroup.NotarySignature sign(byte[])>
<org.signal.zkgroup.internal.ByteArray: int hashCode()>
<org.whispersystems.libsignal.ecc.ECPublicKey: int hashCode()>
<org.whispersystems.libsignal.state.impl.InMemoryIdentityKeyStore: org.whispersystems.libsignal.IdentityKey getIdentity(org.whispersystems.libsignal.SignalProtocolAddress)>
<org.signal.libsignal.metadata.SealedSessionCipher: byte[] multiRecipientEncrypt(java.util.List,org.signal.libsignal.metadata.protocol.UnidentifiedSenderMessageContent)>
<org.signal.client.internal.Native: void copyToTempFileAndLoad(java.io.InputStream,java.lang.String)>
<org.whispersystems.libsignal.state.impl.InMemorySessionStore: org.whispersystems.libsignal.state.SessionRecord loadSession(org.whispersystems.libsignal.SignalProtocolAddress)>
<java.lang.System: java.lang.String getProperty(java.lang.String)>
<org.whispersystems.libsignal.SignalProtocolAddress: int hashCode()>
<org.signal.libsignal.metadata.ProtocolException: int getContentHint()>
<java.lang.String: int hashCode()>
<java.lang.Object: int hashCode()>
<java.util.Arrays: int hashCode(byte[])>
<java.io.File: java.lang.String getAbsolutePath()>
<org.whispersystems.libsignal.state.impl.InMemorySignedPreKeyStore: org.whispersystems.libsignal.state.SignedPreKeyRecord loadSignedPreKey(int)>
<org.whispersystems.libsignal.state.impl.InMemoryIdentityKeyStore: boolean saveIdentity(org.whispersystems.libsignal.SignalProtocolAddress,org.whispersystems.libsignal.IdentityKey)>
