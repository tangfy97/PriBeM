<java.io.DataInputStream: int readUnsignedShort()> -> _SOURCE_
<java.io.InputStreamReader: int read()> -> _SOURCE_
<java.io.BufferedInputStream: int available()> -> _SOURCE_
<org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.InputStream: int available()> -> _SOURCE_
<java.io.FilterInputStream: int available()> -> _SOURCE_
<java.io.InputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.ObjectInputStream: int readInt()> -> _SOURCE_
<java.util.Scanner: java.lang.String nextLine()> -> _SOURCE_
<java.io.File: java.lang.String getParent()> -> _SOURCE_
<org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream,int)> -> _SOURCE_
<java.io.BufferedReader: int read(char[],int,int)> -> _SOURCE_
<org.apache.commons.io.input.BoundedInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.PushbackInputStream: int read()> -> _SOURCE_
<org.apache.commons.io.comparator.NameFileComparator: int compare(java.io.File,java.io.File)> -> _SOURCE_
<com.google.common.io.CharSource: java.lang.String readFirstLine()> -> _SOURCE_
<com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: com.google.common.collect.MapMaker readMapMaker(java.io.ObjectInputStream)> -> _SOURCE_
<java.util.Calendar: java.util.TimeZone getTimeZone()> -> _SOURCE_
<java.io.File: java.lang.String[] list()> -> _SOURCE_
<org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> -> _SOURCE_
<java.io.BufferedReader: int read()> -> _SOURCE_
<java.net.URL: java.io.InputStream openStream()> -> _SOURCE_
<java.io.FileInputStream: int read(byte[],int,int)> -> _SOURCE_
<com.google.common.io.MultiReader: int read(char[],int,int)> -> _SOURCE_
<java.net.URL: java.lang.Object getContent()> -> _SOURCE_
<org.apache.commons.io.input.BOMInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.Reader: int read(char[])> -> _SOURCE_
<java.io.DataInputStream: byte readByte()> -> _SOURCE_
<java.io.FileInputStream: int read(byte[])> -> _SOURCE_
<java.io.File: java.lang.String getCanonicalPath()> -> _SOURCE_
<java.io.BufferedInputStream: int read()> -> _SOURCE_
<java.io.RandomAccessFile: int read(byte[])> -> _SOURCE_
<org.apache.commons.io.IOUtils: long skip(java.io.Reader,long)> -> _SOURCE_
<java.io.File: int hashCode()> -> _SOURCE_
<java.io.DataInputStream: short readShort()> -> _SOURCE_
<java.io.FilterInputStream: int read(byte[])> -> _SOURCE_
<java.io.Reader: int read(char[],int,int)> -> _SOURCE_
<java.io.FileInputStream: int read()> -> _SOURCE_
<org.apache.commons.io.input.Tailer: long readLines(java.io.RandomAccessFile)> -> _SOURCE_
<java.io.BufferedInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.FilterInputStream: int read()> -> _SOURCE_
<java.io.ByteArrayInputStream: int available()> -> _SOURCE_
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getXmlProlog(java.io.InputStream,java.lang.String)> -> _SOURCE_
<java.io.InputStream: int read(byte[])> -> _SOURCE_
<java.io.ObjectInputStream: long readLong()> -> _SOURCE_
<java.io.Reader: int read()> -> _SOURCE_
<java.io.RandomAccessFile: int read()> -> _SOURCE_
<java.io.DataInputStream: java.lang.String readUTF()> -> _SOURCE_
<java.io.File: java.lang.String getAbsolutePath()> -> _SOURCE_
<java.net.URLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<com.google.common.io.LineReader: java.lang.String readLine()> -> _SOURCE_
<java.io.ByteArrayInputStream: int read()> -> _SOURCE_
<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)> -> _SOURCE_
<java.io.FileInputStream: int available()> -> _SOURCE_
<java.io.RandomAccessFile: long readLong()> -> _SOURCE_
<java.io.ObjectInputStream: java.lang.String readUTF()> -> _SOURCE_
<com.google.common.collect.Serialization: int readCount(java.io.ObjectInputStream)> -> _SOURCE_
<com.google.common.io.CharSource: boolean isEmpty()> -> _SOURCE_
<java.io.RandomAccessFile: int readInt()> -> _SOURCE_
<java.io.PushbackInputStream: int read(byte[],int,int)> -> _SOURCE_
<org.apache.commons.io.monitor.FileEntry: boolean refresh(java.io.File)> -> _SOURCE_
<java.io.File: java.lang.String getName()> -> _SOURCE_
<java.io.InputStreamReader: int read(char[],int,int)> -> _SOURCE_
<org.apache.commons.io.input.ProxyInputStream: int read(byte[])> -> _SOURCE_
<org.apache.commons.io.comparator.PathFileComparator: int compare(java.io.File,java.io.File)> -> _SOURCE_
<java.io.LineNumberReader: java.lang.String readLine()> -> _SOURCE_
<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)> -> _SOURCE_
<java.io.DataInputStream: long readLong()> -> _SOURCE_
<com.google.common.io.ByteStreams: long copy(java.io.InputStream,java.io.OutputStream)> -> _SOURCE_
<java.io.FilterInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.BufferedReader: java.lang.String readLine()> -> _SOURCE_
<com.google.common.io.MultiInputStream: int read(byte[],int,int)> -> _SOURCE_
<org.apache.commons.io.comparator.ExtensionFileComparator: int compare(java.io.File,java.io.File)> -> _SOURCE_
<java.io.RandomAccessFile: byte readByte()> -> _SOURCE_
<org.apache.commons.io.LineIterator: boolean hasNext()> -> _SOURCE_
<com.google.common.io.ByteStreams: java.lang.Object readBytes(java.io.InputStream,com.google.common.io.ByteProcessor)> -> _SOURCE_
<java.io.ObjectInputStream: double readDouble()> -> _SOURCE_
<java.io.DataInputStream: java.lang.String readLine()> -> _SOURCE_
<java.io.DataInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.DataInputStream: int readUnsignedByte()> -> _SOURCE_
<org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)> -> _SOURCE_
<java.io.File: java.lang.String getPath()> -> _SOURCE_
<com.google.common.io.ByteStreams: int read(java.io.InputStream,byte[],int,int)> -> _SOURCE_
<java.io.DataInputStream: double readDouble()> -> _SOURCE_
<java.io.ObjectInputStream: float readFloat()> -> _SOURCE_
<org.apache.commons.io.IOUtils: long skip(java.io.InputStream,long)> -> _SOURCE_
