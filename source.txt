<org.apache.commons.io.input.ProxyReader: int read(char[])>
<java.net.URLConnection: java.io.InputStream getInputStream()>
<org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)>
<java.io.FilterReader: int read(char[],int,int)>
<org.apache.commons.io.FileUtils: java.io.File[] toFiles(java.net.URL[])>
<java.io.Reader: int read()>
<java.io.Reader: int read(char[],int,int)>
<org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)>
<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>
<org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>
<org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)>
<java.io.DataInputStream: java.lang.String readUTF()>
<java.net.URLConnection: java.io.OutputStream getOutputStream()>
<org.apache.http.impl.conn.LoggingInputStream: int available()>
<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>
<java.io.BufferedReader: java.lang.String readLine()>
<org.apache.commons.io.LineIterator: boolean hasNext()>
<org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)>
<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>
<org.apache.http.impl.client.SystemDefaultHttpClient: org.apache.http.conn.ClientConnectionManager createClientConnectionManager()>
<org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>
<org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)>
<java.io.ObjectInputStream: int readInt()>
<org.apache.commons.codec.language.bm.Lang: org.apache.commons.codec.language.bm.Lang loadFromResource(java.lang.String,org.apache.commons.codec.language.bm.Languages)>
<java.net.URLClassLoader: java.net.URL findResource(java.lang.String)>
<org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File)>
<java.io.InputStream: int read(byte[])>
<java.lang.System: java.lang.String getProperty(java.lang.String)>
<org.apache.http.client.entity.LazyDecompressingInputStream: int available()>
<java.io.File: java.lang.String getPath()>
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSystemSocketFactory()>
<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File)>
<org.apache.http.impl.client.SystemDefaultCredentialsProvider: org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope)>
<java.io.FilterInputStream: int available()>
<java.net.URLConnection: java.net.URL getURL()>
<java.io.BufferedReader: int read()>
<java.io.BufferedReader: int read(char[],int,int)>
<org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)>
<org.apache.commons.logging.LogFactory$5: java.lang.Object run()>
<org.apache.commons.codec.language.bm.Languages: org.apache.commons.codec.language.bm.Languages getInstance(java.lang.String)>
<org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int read(byte[],int,int)>
<org.apache.http.conn.ssl.SSLConnectionSocketFactory: org.apache.http.conn.ssl.SSLConnectionSocketFactory getSystemSocketFactory()>
<java.io.InputStream: int available()>
<org.apache.http.impl.io.SessionInputBufferImpl: int streamRead(byte[],int,int)>
<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
<org.apache.http.conn.EofSensorInputStream: int available()>
<org.apache.http.impl.conn.LoggingInputStream: int read(byte[])>
<java.net.URL: java.io.InputStream openStream()>
<org.apache.http.client.entity.LazyDecompressingInputStream: int read(byte[],int,int)>
<org.apache.commons.logging.impl.LogFactoryImpl$2: java.lang.Object run()>
<org.apache.commons.io.input.ProxyReader: int read()>
<java.net.URLClassLoader: java.net.URL[] getURLs()>
<org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>
<org.apache.commons.io.input.ProxyInputStream: int read(byte[])>
<org.apache.http.client.entity.DeflateInputStream: int read(byte[])>
<org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>
<org.apache.commons.io.input.ProxyReader: int read(char[],int,int)>
<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)>
<org.apache.http.conn.EofSensorInputStream: int read(byte[],int,int)>
<org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File)>
<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<org.apache.http.client.entity.DeflateInputStream: int read(byte[],int,int)>
<org.apache.http.impl.client.SystemDefaultHttpClient: org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy()>
<java.io.InputStreamReader: java.lang.String getEncoding()>
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>
<java.io.File: java.lang.String getAbsolutePath()>
<org.apache.http.util.EntityUtils: byte[] toByteArray(org.apache.http.HttpEntity)>
<java.net.URL: java.lang.String getPath()>
<org.apache.http.impl.client.HttpClientBuilder: org.apache.http.impl.client.CloseableHttpClient build()>
<java.io.Reader: int read(char[])>
<org.apache.commons.io.input.ProxyInputStream: int available()>
<org.apache.http.client.entity.LazyDecompressingInputStream: int read(byte[])>
<org.apache.commons.logging.LogFactory$6: java.lang.Object run()>
<java.lang.System: java.lang.String getenv(java.lang.String)>
<java.io.InputStream: int read(byte[],int,int)>
<org.apache.http.client.utils.URLEncodedUtils: java.util.List parse(org.apache.http.HttpEntity)>
<org.apache.http.util.VersionInfo: java.lang.String getUserAgent(java.lang.String,java.lang.String,java.lang.Class)>
<org.apache.http.impl.conn.LoggingInputStream: int read(byte[],int,int)>
<org.apache.http.client.entity.DeflateInputStream: int available()>
<org.apache.commons.codec.binary.BaseNCodecInputStream: int read(byte[],int,int)>
<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>
