<java.io.BufferedInputStream: int available()> -> _SOURCE_
<java.io.BufferedInputStream: int read()> -> _SOURCE_
<java.io.BufferedInputStream: int read(byte[],int,int)> -> _SOURCE_

<java.io.BufferedReader: int available()> -> _SOURCE_
<java.io.BufferedReader: int read()> -> _SOURCE_
<java.io.BufferedReader: int read(char[],int,int)> -> _SOURCE_
<java.io.BufferedReader: java.lang.String readLine()> -> _SOURCE_

<java.io.ByteArrayInputStream: int available()> -> _SOURCE_
<java.io.ByteArrayInputStream: int read()> -> _SOURCE_
<java.io.ByteArrayInputStream: int read(byte[],int,int)> -> _SOURCE_

<java.io.CharArrayReader: int available()> -> _SOURCE_
<java.io.CharArrayReader: int read()> -> _SOURCE_
<java.io.CharArrayReader: int read(char[],int,int)> -> _SOURCE_

<java.io.DataInputStream: int read(byte[])> -> _SOURCE_
<java.io.DataInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.DataInputStream: byte readByte()> -> _SOURCE_
<java.io.DataInputStream: char readChar()> -> _SOURCE_
<java.io.DataInputStream: double readDouble()> -> _SOURCE_
<java.io.DataInputStream: float	readFloat()> -> _SOURCE_
<java.io.DataInputStream: java.lang.String readLine()> -> _SOURCE_
<java.io.DataInputStream: long readLong()> -> _SOURCE_
<java.io.DataInputStream: short readShort()> -> _SOURCE_
<java.io.DataInputStream: int readUnsignedByte()> -> _SOURCE_
<java.io.DataInputStream: int readUnsignedShort()> -> _SOURCE_
<java.io.DataInputStream: java.lang.String readUTF()> -> _SOURCE_


<java.io.File: File createTempFile(java.lang.String,java.lang.String)> -> _SOURCE_
<java.io.File: File createTempFile(java.lang.String,java.lang.String,File)> -> _SOURCE_
<java.io.File: File getAbsoluteFile()> -> _SOURCE_
<java.io.File: java.lang.String getAbsolutePath()> -> _SOURCE_
<java.io.File: File getCanonicalFile()> -> _SOURCE_
<java.io.File: java.lang.String getCanonicalPath()> -> _SOURCE_
<java.io.File: java.lang.String getName()> -> _SOURCE_
<java.io.File: java.lang.String getParent()> -> _SOURCE_
<java.io.File: File getParentFile()> -> _SOURCE_
<java.io.File: java.lang.String getPath()> -> _SOURCE_
<java.io.File: int hashCode()> -> _SOURCE_
<java.io.File: java.lang.String[] list()> -> _SOURCE_
<java.io.File: java.lang.String[] list(FilenameFilter)> -> _SOURCE_
<java.io.File: File[] listFiles()> -> _SOURCE_
<java.io.File: File[] listFiles(FileFilter)> -> _SOURCE_
<java.io.File: File[] listFiles(FilenameFilter)> -> _SOURCE_
<java.io.File: File[] listRoots()> -> _SOURCE_
<java.io.File: Path toPath()> -> _SOURCE_
<java.io.File: java.lang.String tojava.lang.String()> -> _SOURCE_
<java.io.File: URI toURI()> -> _SOURCE_

<java.io.FileInputStream: int available()> -> _SOURCE_
<java.io.FileInputStream: FileChannel getChannel()> -> _SOURCE_
<java.io.FileInputStream: FileDescriptor getFD()> -> _SOURCE_
<java.io.FileInputStream: int read()> -> _SOURCE_
<java.io.FileInputStream: int read(byte[])> -> _SOURCE_
<java.io.FileInputStream: int read(byte[],int,int)> -> _SOURCE_

<java.io.FilterInputStream: int available()> -> _SOURCE_
<java.io.FilterInputStream: int read()> -> _SOURCE_
<java.io.FilterInputStream: int read(byte[])> -> _SOURCE_
<java.io.FilterInputStream: int read(byte[],int,int)> -> _SOURCE_

<java.io.FilterReader: int read()> -> _SOURCE_
<java.io.FilterReader: int read(char[],int,int)> -> _SOURCE_

<java.io.InputStream: int available()> -> _SOURCE_
<java.io.InputStream: int read(byte[])> -> _SOURCE_
<java.io.InputStream: int read(byte[],int,int)> -> _SOURCE_

<java.io.InputStreamReader: java.lang.String getEncoding()> -> _SOURCE_
<java.io.InputStreamReader: int read()> -> _SOURCE_
<java.io.InputStreamReader: int read(char[],int,int)> -> _SOURCE_

<java.io.LineNumberReader: int read()> -> _SOURCE_
<java.io.LineNumberReader: int read(char[],int,int)> -> _SOURCE_
<java.io.LineNumberReader: java.lang.String readLine()> -> _SOURCE_

<java.io.ObjectInputStream: int available()> -> _SOURCE_
<java.io.ObjectInputStream: int read()> -> _SOURCE_
<java.io.ObjectInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.ObjectInputStream: byte readByte()> -> _SOURCE_
<java.io.ObjectInputStream: char readChar()> -> _SOURCE_
<java.io.ObjectInputStream: double readDouble()> -> _SOURCE_
<java.io.ObjectInputStream: float readFloat()> -> _SOURCE_
<java.io.ObjectInputStream: java.lang.String readLine()> -> _SOURCE_
<java.io.ObjectInputStream: long readLong()> -> _SOURCE_
<java.io.ObjectInputStream: short readShort()> -> _SOURCE_
<java.io.ObjectInputStream: ObjectInputStream.GetField readFields()> -> _SOURCE_
<java.io.ObjectInputStream: int readInt()> -> _SOURCE_
<java.io.ObjectInputStream: Object readObject()> -> _SOURCE_
<java.io.ObjectInputStream: int available()> -> _SOURCE_
<java.io.ObjectInputStream: java.lang.String readUTF()> -> _SOURCE_

<java.io.PipedInputStream: int available()> -> _SOURCE_
<java.io.PipedInputStream: int read()> -> _SOURCE_
<java.io.PipedInputStream: int read(byte[],int,int)> -> _SOURCE_

<java.io.PipedReader: int read()> -> _SOURCE_
<java.io.PipedReader: int read(char[],int,int)> -> _SOURCE_

<java.io.PushbackInputStream: int available()> -> _SOURCE_
<java.io.PushbackInputStream: int read()> -> _SOURCE_
<java.io.PushbackInputStream: int read(byte[],int,int)> -> _SOURCE_

<java.io.RandomAccessFile: int read()> -> _SOURCE_
<java.io.RandomAccessFile: int read(byte[])> -> _SOURCE_
<java.io.RandomAccessFile: int read(byte[],int,int)> -> _SOURCE_
<java.io.RandomAccessFile: byte readByte()> -> _SOURCE_
<java.io.RandomAccessFile: char readChar()> -> _SOURCE_
<java.io.RandomAccessFile: double readDouble()> -> _SOURCE_
<java.io.RandomAccessFile: float readFloat()> -> _SOURCE_
<java.io.RandomAccessFile: java.lang.String readLine()> -> _SOURCE_
<java.io.RandomAccessFile: long readLong()> -> _SOURCE_
<java.io.RandomAccessFile: short readShort()> -> _SOURCE_
<java.io.RandomAccessFile: int readInt()> -> _SOURCE_

<java.io.Reader: int read()> -> _SOURCE_
<java.io.Reader: int read(char[])> -> _SOURCE_
<java.io.Reader: int read(char[],int,int)> -> _SOURCE_
<java.io.Reader: int read(CharBuffer)> -> _SOURCE_

<java.io.SequenceInputStream: int available()> -> _SOURCE_
<java.io.SequenceInputStream: int read()> -> _SOURCE_
<java.io.SequenceInputStream: int read(byte[],int,int)> -> _SOURCE_

<java.io.java.lang.StringReader: int read()> -> _SOURCE_
<java.io.java.lang.StringReader: int read(char[] cbuf, int off, int len)> -> _SOURCE_

<java.util.Scanner: java.lang.String next()> -> _SOURCE_
<java.util.Scanner: java.lang.String next(Pattern)> -> _SOURCE_
<java.util.Scanner: java.lang.String next(java.lang.String)> -> _SOURCE_
<java.util.Scanner: boolean nextBoolean()> -> _SOURCE_
<java.util.Scanner: byte nextByte()> -> _SOURCE_
<java.util.Scanner: double nextDouble()> -> _SOURCE_
<java.util.Scanner: float nextFloat()> -> _SOURCE_
<java.util.Scanner: int	nextInt()> -> _SOURCE_
<java.util.Scanner: int	nextInt(int radix)> -> _SOURCE_
<java.util.Scanner: java.lang.String nextLine()> -> _SOURCE_
<java.util.Scanner: long nextLong()> -> _SOURCE_
<java.util.Scanner: long nextLong(int)> -> _SOURCE_
<java.util.Scanner: short nextShort()> -> _SOURCE_
<java.util.Scanner: short nextShort(int)> -> _SOURCE_
<java.util.Scanner: java.lang.String tojava.lang.String()> -> _SOURCE_

<java.net.URLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<java.net.URL: java.io.InputStream openStream()> -> _SOURCE_
<java.net.URL: java.lang.Object getContent()> -> _SOURCE_


<android.media.AudioRecord: int read(short[],int,int)> -> _SOURCE_
<android.media.AudioRecord: int read(byte[],int,int)> -> _SOURCE_
<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)> -> _SOURCE_

<android.accounts.AccountManager: android.accounts.Account[] getAccounts()> -> _SOURCE_
<java.util.Calendar: java.util.TimeZone getTimeZone()> -> _SOURCE_
<android.provider.Browser: android.database.Cursor getAllBookmarks()> -> _SOURCE_
<android.provider.Browser: android.database.Cursor getAllVisitedUrls()> -> _SOURCE_

<org.apache.commons.io.input.ReadAheadInputStream: void lambda$readAsync$1(byte[])> -> _SOURCE_
<org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream,byte[])> -> _SOURCE_
<org.apache.hc.client5.http.impl.auth.DigestScheme: void readObject(java.io.ObjectInputStream)> -> _SOURCE_
<com.google.common.io.ByteStreams: long skipSafely(java.io.InputStream,long)> -> _SOURCE_
<com.google.common.collect.Serialization: int readCount(java.io.ObjectInputStream)> -> _SOURCE_
<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: int fillbuf(java.io.InputStream,byte[])> -> _SOURCE_
<com.google.common.collect.CompactHashMap: void readObject(java.io.ObjectInputStream)> -> _SOURCE_
<com.bumptech.glide.disklrucache.Util: java.lang.String readFully(java.io.Reader)> -> _SOURCE_
<org.apache.hc.core5.http.io.EofSensorInputStream: int available()> -> _SOURCE_
<com.fasterxml.jackson.core.format.InputAccessor$Std: boolean hasMoreBytes()> -> _SOURCE_
<org.apache.commons.io.IOUtils: byte[] toByteArray(java.net.URLConnection)> -> _SOURCE_
<org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)> -> _SOURCE_
<org.apache.commons.io.filefilter.WildcardFileFilter: boolean accept(java.io.File)> -> _SOURCE_
<com.fasterxml.jackson.core.TokenStreamFactory: java.io.InputStream _optimizedStreamFromURL(java.net.URL)> -> _SOURCE_
<org.apache.hc.client5.http.entity.mime.StringBody: void writeTo(java.io.OutputStream)> -> _SOURCE_
<com.google.common.io.CharStreams: long copyReaderToBuilder(java.io.Reader,java.lang.StringBuilder)> -> _SOURCE_
<org.apache.hc.client5.http.entity.LazyDecompressingInputStream: int available()> -> _SOURCE_
<com.google.common.cache.LongAdder: void readObject(java.io.ObjectInputStream)> -> _SOURCE_
<org.apache.commons.io.IOUtils: long copy(java.net.URL,java.io.OutputStream)> -> _SOURCE_
<com.bumptech.glide.load.data.HttpUrlFetcher: java.io.InputStream getStreamForSuccessfulRequest(java.net.HttpURLConnection)> -> _SOURCE_
<org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File)> -> _SOURCE_
<com.bumptech.glide.util.ContentLengthInputStream: int read()> -> _SOURCE_
<org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)> -> _SOURCE_
<org.apache.hc.client5.http.entity.mime.InputStreamBody: void writeTo(java.io.OutputStream)> -> _SOURCE_
<com.google.common.collect.Serialization: void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream,int)> -> _SOURCE_
<com.bumptech.glide.load.model.StreamEncoder: boolean encode(java.io.InputStream,java.io.OutputStream)> -> _SOURCE_
<org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File)> -> _SOURCE_
<com.google.common.io.ByteStreams: long copy(java.io.InputStream,java.io.OutputStream)> -> _SOURCE_
<org.apache.commons.io.output.LockableFileWriter: void <init> -> _SOURCE_(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)> -> _SOURCE_
<org.apache.commons.io.input.BoundedReader: int read()> -> _SOURCE_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: long readLong()> -> _SOURCE_
<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File)> -> _SOURCE_
<org.apache.hc.client5.http.impl.io.LoggingInputStream: int available()> -> _SOURCE_
<org.apache.mina.proxy.handlers.http.ntlm.NTLMUtilities: byte[] getOsVersion()> -> _SOURCE_
<org.apache.hc.client5.http.impl.io.LoggingInputStream: int read(byte[])> -> _SOURCE_
<com.bumptech.glide.load.data.ExifOrientationStream: int read(byte[],int,int)> -> _SOURCE_
<org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.nio.file.CopyOption[])> -> _SOURCE_
<com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableList parseJavaClassPath()> -> _SOURCE_
<com.google.common.io.MultiInputStream: int available()> -> _SOURCE_
<org.apache.commons.io.output.LockableFileWriter: void createLock()> -> _SOURCE_
<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _readMore(java.io.InputStream,byte[],int,int,int)> -> _SOURCE_
<com.bumptech.glide.load.data.ExifOrientationStream: int read()> -> _SOURCE_
<org.apache.mina.filter.stream.StreamWriteFilter: org.apache.mina.core.buffer.IoBuffer getNextBuffer(java.io.InputStream)> -> _SOURCE_
<org.apache.commons.io.input.BoundedInputStream: int read(byte[],int,int)> -> _SOURCE_
<org.apache.commons.io.input.AbstractCharacterFilterReader: int read()> -> _SOURCE_
<org.apache.commons.io.input.ProxyReader: int read()> -> _SOURCE_
<org.apache.mina.core.buffer.AbstractIoBuffer$3: java.io.ObjectStreamClass readClassDescriptor()> -> _SOURCE_
<com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)> -> _SOURCE_
<org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer,long,long,char[])> -> _SOURCE_
<org.apache.commons.io.input.XmlStreamReader: void <init> -> _SOURCE_(java.net.URLConnection,java.lang.String)> -> _SOURCE_
<org.apache.commons.io.file.PathUtils: java.nio.file.Path copyFile(java.net.URL,java.nio.file.Path,java.nio.file.CopyOption[])> -> _SOURCE_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: double readDouble()> -> _SOURCE_
<org.jsoup.helper.DataUtil: void crossStreams(java.io.InputStream,java.io.OutputStream)> -> _SOURCE_
<com.google.common.collect.ImmutableListMultimap: void readObject(java.io.ObjectInputStream)> -> _SOURCE_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: char readChar()> -> _SOURCE_
<com.google.common.collect.LinkedListMultimap: void readObject(java.io.ObjectInputStream)> -> _SOURCE_
<org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)> -> _SOURCE_
<com.google.common.io.BaseEncoding$3: int read()> -> _SOURCE_
<org.apache.hc.client5.http.entity.LazyDecompressingInputStream: int read(byte[])> -> _SOURCE_
<org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory: void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String)> -> _SOURCE_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: java.lang.String readUTF()> -> _SOURCE_
<org.apache.hc.client5.http.impl.auth.BasicScheme: void readObject(java.io.ObjectInputStream)> -> _SOURCE_
<org.jsoup.internal.ConstrainableInputStream: java.nio.ByteBuffer readToByteBuffer(int)> -> _SOURCE_
<org.apache.mina.filter.ssl.KeyStoreFactory: void setDataUrl(java.net.URL)> -> _SOURCE_
<org.apache.hc.client5.http.entity.DecompressingEntity: void writeTo(java.io.OutputStream)> -> _SOURCE_
<com.google.common.io.ReaderInputStream: void readMoreChars()> -> _SOURCE_
<org.apache.commons.io.IOUtils: boolean contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)> -> _SOURCE_
<org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)> -> _SOURCE_
<com.google.common.io.ByteStreams: byte[] toByteArrayInternal(java.io.InputStream,java.util.Queue,int)> -> _SOURCE_
<org.apache.commons.io.output.AbstractByteArrayOutputStream: int writeImpl(java.io.InputStream)> -> _SOURCE_
<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: int read(byte[])> -> _SOURCE_
<org.apache.hc.core5.http.io.EofSensorInputStream: int read(byte[],int,int)> -> _SOURCE_
<com.google.common.io.MultiInputStream: int read(byte[],int,int)> -> _SOURCE_
<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: int read(byte[],int,int)> -> _SOURCE_
<org.apache.hc.core5.http.io.entity.EntityUtils: org.apache.hc.core5.util.CharArrayBuffer toCharArrayBuffer(java.io.InputStream,int,java.nio.charset.Charset,int)> -> _SOURCE_
<com.google.common.io.Resources$UrlByteSource: java.io.InputStream openStream()> -> _SOURCE_
<org.apache.commons.io.LineIterator: boolean hasNext()> -> _SOURCE_
<com.bumptech.glide.gifdecoder.GifDecoder: int read(java.io.InputStream,int)> -> _SOURCE_
<org.apache.hc.core5.http.impl.io.IdentityInputStream: int available()> -> _SOURCE_
<org.apache.commons.io.input.ProxyReader: int read(char[])> -> _SOURCE_
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: int _readMore(java.io.InputStream,byte[],int,int,int)> -> _SOURCE_
<org.apache.commons.io.comparator.ExtensionFileComparator: int compare(java.io.File,java.io.File)> -> _SOURCE_
<org.jsoup.parser.CharacterReader: void bufferUp()> -> _SOURCE_
<com.google.common.io.ByteStreams$LimitedInputStream: int available()> -> _SOURCE_
<com.google.common.collect.ImmutableSetMultimap: void readObject(java.io.ObjectInputStream)> -> _SOURCE_
<org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)> -> _SOURCE_
<org.apache.mina.util.Transform: java.lang.String[] getThrowableStrRep(java.lang.Throwable)> -> _SOURCE_
<org.apache.hc.client5.http.impl.io.LoggingInputStream: int read(byte[],int,int)> -> _SOURCE_
<com.google.common.io.ByteStreams: long skipUpTo(java.io.InputStream,long)> -> _SOURCE_
<com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy: com.google.common.collect.MapMaker readMapMaker(java.io.ObjectInputStream)> -> _SOURCE_
<org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.nio.charset.Charset,boolean)> -> _SOURCE_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: java.lang.String readLine()> -> _SOURCE_
<com.google.common.collect.Serialization: void populateMap(java.util.Map,java.io.ObjectInputStream)> -> _SOURCE_
<com.bumptech.glide.util.ContentLengthInputStream: int available()> -> _SOURCE_
<org.apache.hc.client5.http.entity.mime.MultipartEntityBuilder: org.apache.hc.client5.http.entity.mime.MultipartEntityBuilder addBinaryBody(java.lang.String,java.io.File)> -> _SOURCE_
<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)> -> _SOURCE_
<com.google.common.io.CharStreams: long copyReaderToWriter(java.io.Reader,java.io.Writer)> -> _SOURCE_
<org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)> -> _SOURCE_
<org.apache.commons.io.input.SequenceReader: int read(char[],int,int)> -> _SOURCE_
<org.apache.hc.core5.http.io.entity.EntityUtils: byte[] toByteArray(org.apache.hc.core5.http.HttpEntity)> -> _SOURCE_
<org.apache.hc.client5.http.psl.PublicSuffixMatcherLoader: org.apache.hc.client5.http.psl.PublicSuffixMatcher load(java.net.URL)> -> _SOURCE_
<com.google.common.collect.Serialization: void populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream,int)> -> _SOURCE_
<org.apache.commons.io.filefilter.MagicNumberFileFilter: boolean accept(java.io.File)> -> _SOURCE_
<org.apache.commons.io.FileUtils: boolean directoryContains(java.io.File,java.io.File)> -> _SOURCE_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: int read()> -> _SOURCE_
<org.apache.commons.io.input.buffer.CircularBufferInputStream: void fillBuffer()> -> _SOURCE_
<com.google.common.io.ByteStreams: long exhaust(java.io.InputStream)> -> _SOURCE_
<org.apache.commons.io.input.BOMInputStream: int read(byte[],int,int)> -> _SOURCE_
<com.fasterxml.jackson.core.io.MergedStream: int read(byte[],int,int)> -> _SOURCE_
<com.google.common.io.BaseEncoding$StandardBaseEncoding$2: int read()> -> _SOURCE_
<org.apache.commons.io.input.ProxyReader: int read(char[],int,int)> -> _SOURCE_
<com.google.common.io.MultiReader: int read(char[],int,int)> -> _SOURCE_
<com.google.common.util.concurrent.AtomicDouble: void readObject(java.io.ObjectInputStream)> -> _SOURCE_
<org.apache.hc.core5.http.io.entity.EntityUtils: byte[] toByteArray(org.apache.hc.core5.http.HttpEntity,int)> -> _SOURCE_
<org.joda.time.DateTimeZone$Stub: void readObject(java.io.ObjectInputStream)> -> _SOURCE_
<com.bumptech.glide.util.MarkEnforcingInputStream: int read()> -> _SOURCE_
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()> -> _SOURCE_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: int readUnsignedByte()> -> _SOURCE_
<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)> -> _SOURCE_
<org.apache.hc.client5.http.entity.LazyDecompressingInputStream: int read(byte[],int,int)> -> _SOURCE_
<org.apache.commons.io.FileSystemUtils: long freeSpaceKb(long)> -> _SOURCE_
<org.apache.commons.io.comparator.NameFileComparator: int compare(java.io.File,java.io.File)> -> _SOURCE_
<com.google.common.collect.CompactHashSet: void readObject(java.io.ObjectInputStream)> -> _SOURCE_
<org.apache.hc.core5.http.impl.io.SessionInputBufferImpl: int read(byte[],int,int,java.io.InputStream)> -> _SOURCE_
<com.google.common.hash.HashingInputStream: int read(byte[],int,int)> -> _SOURCE_
<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: int available()> -> _SOURCE_
<com.google.common.io.CharSource: com.google.common.collect.ImmutableList readLines()> -> _SOURCE_
<org.apache.commons.io.filefilter.WildcardFilter: boolean accept(java.io.File)> -> _SOURCE_
<com.google.common.hash.LongAdder: void readObject(java.io.ObjectInputStream)> -> _SOURCE_
<com.google.common.io.ByteStreams$LimitedInputStream: int read(byte[],int,int)> -> _SOURCE_
<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)> -> _SOURCE_
<org.apache.commons.io.input.RandomAccessFileInputStream: int read(byte[],int,int)> -> _SOURCE_
<org.jsoup.Jsoup: org.jsoup.nodes.Document parse(java.io.File,java.lang.String)> -> _SOURCE_
<com.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)> -> _SOURCE_
<com.fasterxml.jackson.core.io.UTF32Reader: boolean loadMore(int)> -> _SOURCE_
<org.apache.commons.io.IOUtils: java.lang.String toString(java.net.URL,java.nio.charset.Charset)> -> _SOURCE_
<com.google.common.io.ByteStreams: byte[] toByteArray(java.io.InputStream,long)> -> _SOURCE_
<org.apache.hc.client5.http.entity.DeflateInputStream: void <init> -> _SOURCE_(java.io.InputStream)> -> _SOURCE_
<java.util.Scanner: java.lang.Object next()> -> _SOURCE_
<com.bumptech.glide.util.ExceptionCatchingInputStream: int read(byte[],int,int)> -> _SOURCE_
<com.bumptech.glide.util.MarkEnforcingInputStream: int read(byte[],int,int)> -> _SOURCE_
<org.apache.hc.client5.http.entity.DeflateInputStream: int read(byte[],int,int)> -> _SOURCE_
<com.bumptech.glide.util.MarkEnforcingInputStream: int available()> -> _SOURCE_
<org.apache.commons.io.input.XmlStreamReader: java.lang.String getXmlProlog(java.io.InputStream,java.lang.String)> -> _SOURCE_
<org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int,java.time.Duration)> -> _SOURCE_
<org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File,int,int)> -> _SOURCE_
<org.apache.hc.client5.http.psl.PublicSuffixListParser: java.util.List parseByType(java.io.Reader)> -> _SOURCE_
<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> -> _SOURCE_
<org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)> -> _SOURCE_
<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])> -> _SOURCE_
<org.apache.hc.client5.http.entity.mime.FileBody: void <init> -> _SOURCE_(java.io.File,org.apache.hc.core5.http.ContentType)> -> _SOURCE_
<com.fasterxml.jackson.core.io.MergedStream: int available()> -> _SOURCE_
<com.bumptech.glide.disklrucache.StrictLineReader: void fillBuf()> -> _SOURCE_
<org.apache.hc.client5.http.psl.PublicSuffixListParser: org.apache.hc.client5.http.psl.PublicSuffixList parse(java.io.Reader)> -> _SOURCE_
<org.apache.commons.io.input.ProxyInputStream: int read(byte[])> -> _SOURCE_
<org.apache.hc.client5.http.entity.mime.FileBody: void writeTo(java.io.OutputStream)> -> _SOURCE_
<org.apache.commons.io.IOUtils: long skip(java.io.Reader,long)> -> _SOURCE_
<com.google.common.io.ByteStreams: java.lang.Object readBytes(java.io.InputStream,com.google.common.io.ByteProcessor)> -> _SOURCE_
<org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer,char[])> -> _SOURCE_
<org.apache.hc.core5.http.impl.io.MonitoringResponseOutOfOrderStrategy: boolean isEarlyResponseDetected(org.apache.hc.core5.http.ClassicHttpRequest,org.apache.hc.core5.http.io.HttpClientConnection,java.io.InputStream,long,long)> -> _SOURCE_
<org.apache.commons.io.monitor.FileEntry: boolean refresh(java.io.File)> -> _SOURCE_
<org.apache.commons.io.monitor.FileEntry: void <init> -> _SOURCE_(org.apache.commons.io.monitor.FileEntry,java.io.File)> -> _SOURCE_
<org.apache.commons.io.input.ReaderInputStream: void fillBuffer()> -> _SOURCE_
<org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)> -> _SOURCE_
<org.apache.hc.core5.ssl.SSLContextBuilder: org.apache.hc.core5.ssl.SSLContextBuilder loadKeyMaterial(java.net.URL,char[],char[],org.apache.hc.core5.ssl.PrivateKeyStrategy)> -> _SOURCE_
<com.google.common.io.ByteStreams: int read(java.io.InputStream,byte[],int,int)> -> _SOURCE_
<com.fasterxml.jackson.core.io.SerializedString: void readObject(java.io.ObjectInputStream)> -> _SOURCE_
<org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,java.util.List,boolean,java.nio.file.CopyOption[])> -> _SOURCE_
<com.fasterxml.jackson.core.json.WriterBasedJsonGenerator: void writeString(java.io.Reader,int)> -> _SOURCE_
<org.apache.commons.io.IOUtils: int read(java.io.InputStream,byte[],int,int)> -> _SOURCE_
<com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper: boolean ensureLoaded(int)> -> _SOURCE_
<com.google.common.io.LineReader: java.lang.String readLine()> -> _SOURCE_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: byte readByte()> -> _SOURCE_
<com.google.common.io.LittleEndianDataInputStream: java.lang.String readUTF()> -> _SOURCE_
<org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)> -> _SOURCE_
<org.apache.commons.io.input.SequenceReader: int read()> -> _SOURCE_
<com.bumptech.glide.util.ContentLengthInputStream: int read(byte[],int,int)> -> _SOURCE_
<com.bumptech.glide.load.resource.gif.GifResourceDecoder: byte[] inputStreamToBytes(java.io.InputStream)> -> _SOURCE_
<org.apache.commons.io.input.RandomAccessFileInputStream: int read()> -> _SOURCE_
<com.google.common.collect.Serialization: void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream)> -> _SOURCE_
<com.google.common.io.CountingInputStream: int read(byte[],int,int)> -> _SOURCE_
<org.apache.hc.client5.http.entity.DeflateInputStream: int read(byte[])> -> _SOURCE_
<org.apache.commons.io.input.RandomAccessFileInputStream: int read(byte[])> -> _SOURCE_
<org.apache.commons.io.IOUtils: long skip(java.io.InputStream,long)> -> _SOURCE_
<com.google.common.io.ReaderInputStream: int read()> -> _SOURCE_
<org.apache.commons.io.input.Tailer: long readLines(java.io.RandomAccessFile)> -> _SOURCE_
<org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File)> -> _SOURCE_
<com.google.common.reflect.ClassPath$LocationInfo: void scanDirectory(java.io.File,java.lang.String,java.util.Set,com.google.common.collect.ImmutableSet$Builder)> -> _SOURCE_
<org.apache.commons.io.monitor.FileAlterationObserver: java.lang.String toString()> -> _SOURCE_
<org.apache.commons.io.input.BoundedInputStream: int available()> -> _SOURCE_
<org.apache.hc.client5.http.entity.DeflateInputStream: int available()> -> _SOURCE_
<org.apache.hc.core5.ssl.SSLContextBuilder: org.apache.hc.core5.ssl.SSLContextBuilder loadTrustMaterial(java.net.URL,char[],org.apache.hc.core5.ssl.TrustStrategy)> -> _SOURCE_
<org.jsoup.helper.DataUtil: org.jsoup.nodes.Document load(java.io.File,java.lang.String,java.lang.String,org.jsoup.parser.Parser)> -> _SOURCE_
<com.google.common.io.Files: java.lang.String getNameWithoutExtension(java.lang.String)> -> _SOURCE_
<org.apache.hc.core5.http.io.entity.AbstractHttpEntity: void writeTo(org.apache.hc.core5.http.HttpEntity,java.io.OutputStream)> -> _SOURCE_
<org.apache.mina.core.file.FilenameFileRegion: java.lang.String getFilename()> -> _SOURCE_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: int readUnsignedShort()> -> _SOURCE_
<com.google.common.io.CharSource: boolean isEmpty()> -> _SOURCE_
<org.apache.hc.client5.http.entity.mime.FileBody: void <init> -> _SOURCE_(java.io.File)> -> _SOURCE_
<org.apache.commons.io.FileUtils: void copyDirectoryToDirectory(java.io.File,java.io.File)> -> _SOURCE_
<org.apache.hc.client5.http.entity.mime.FileBody: void <init> -> _SOURCE_(java.io.File,org.apache.hc.core5.http.ContentType,java.lang.String)> -> _SOURCE_
<org.apache.commons.io.FileUtils: void requireCanonicalPathsNotEquals(java.io.File,java.io.File)> -> _SOURCE_
<com.google.common.util.concurrent.AtomicDoubleArray: void readObject(java.io.ObjectInputStream)> -> _SOURCE_
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.helper.HttpConnection$Request,org.jsoup.helper.HttpConnection$Response)> -> _SOURCE_
<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeString(java.io.Reader,int)> -> _SOURCE_
<org.apache.commons.io.input.AbstractCharacterFilterReader: int read(char[],int,int)> -> _SOURCE_
<org.apache.hc.core5.http.io.entity.InputStreamEntity: void writeTo(java.io.OutputStream)> -> _SOURCE_
<org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)> -> _SOURCE_
<org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream,long,long,byte[])> -> _SOURCE_
<org.apache.mina.filter.codec.serialization.ObjectSerializationInputStream: short readShort()> -> _SOURCE_
<org.apache.commons.io.comparator.PathFileComparator: int compare(java.io.File,java.io.File)> -> _SOURCE_
<org.jsoup.internal.ConstrainableInputStream: int read(byte[],int,int)> -> _SOURCE_
<org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)> -> _SOURCE_
<com.google.common.collect.Serialization: void populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream)> -> _SOURCE_
<org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream,int)> -> _SOURCE_
<org.apache.hc.core5.http.impl.io.SessionInputBufferImpl: int fillBuffer(java.io.InputStream)> -> _SOURCE_
<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()> -> _SOURCE_
<com.bumptech.glide.util.ExceptionCatchingInputStream: int read(byte[])> -> _SOURCE_
<com.google.common.io.CharSource: java.lang.String readFirstLine()> -> _SOURCE_
<org.apache.commons.io.file.PathUtils: java.nio.file.Path copyFileToDirectory(java.net.URL,java.nio.file.Path,java.nio.file.CopyOption[])> -> _SOURCE_
<com.google.common.reflect.ClassPath$LocationInfo: int hashCode()> -> _SOURCE_
<org.apache.commons.io.IOUtils: int read(java.io.Reader,char[],int,int)> -> _SOURCE_
<org.apache.commons.io.input.ProxyInputStream: int available()> -> _SOURCE_
<org.apache.commons.io.input.XmlStreamReader: int read(char[],int,int)> -> _SOURCE_
<com.bumptech.glide.util.ExceptionCatchingInputStream: int available()> -> _SOURCE_
<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter readFrom(java.io.InputStream,com.google.common.hash.Funnel)> -> _SOURCE_
<org.apache.commons.io.IOUtils: boolean contentEquals(java.io.Reader,java.io.Reader)> -> _SOURCE_




<java.util.logging.Logger: void log(Level level, String msg)> -> _SINK_
<java.util.logging.Logger: void	log(Level level, String msg, Object param1)> -> _SINK_
<java.util.logging.Logger: void	log(Level level, String msg, Object[] params)> -> _SINK_
<java.util.logging.Logger: void	log(Level level, String msg, Throwable thrown)> -> _SINK_
<java.util.logging.Logger: void	log(LogRecord record)> -> _SINK_
<java.util.logging.Logger: void	logp(Level level, String sourceClass, String sourceMethod, String msg)> -> _SINK_
<java.util.logging.Logger: void	logp(Level level, String sourceClass, String sourceMethod, String msg, Object param1)> -> _SINK_
<java.util.logging.Logger: void	logp(Level level, String sourceClass, String sourceMethod, String msg, Object[] params)> -> _SINK_
<java.util.logging.Logger: void	logp(Level level, String sourceClass, String sourceMethod, String msg, Throwable thrown)> -> _SINK_
<java.util.logging.Logger: void	logrb(Level level, String sourceClass, String sourceMethod, String bundleName, String msg)> -> _SINK_
<java.util.logging.Logger: void	logrb(Level level, String sourceClass, String sourceMethod, String bundleName, String msg, Object param1)> -> _SINK_
<java.util.logging.Logger: void	logrb(Level level, String sourceClass, String sourceMethod, String bundleName, String msg, Object[] params)> -> _SINK_
<java.util.logging.Logger: void	logrb(Level level, String sourceClass, String sourceMethod, String bundleName, String msg, Throwable thrown)> -> _SINK_
<java.util.logging.Logger: void	severe(String msg)> -> _SINK_
<java.util.logging.Logger: void	warning(String msg)> -> _SINK_

<java.io.BufferedOutputStream: void write(byte[] b, int off, int len)> -> _SINK_
<java.io.BufferedOutputStream: void write(int b)> -> _SINK_

<java.io.BufferedWriter: void write(char[] cbuf, int off, int len)> -> _SINK_
<java.io.BufferedWriter: void write(int c)> -> _SINK_
<java.io.BufferedWriter: write(String s, int off, int len)> -> _SINK_

<java.io.ByteArrayOutputStream: byte[] toByteArray()> -> _SINK_
<java.io.ByteArrayOutputStream: String toString()> -> _SINK_
<java.io.ByteArrayOutputStream: String toString(String charsetName)> -> _SINK_
<java.io.ByteArrayOutputStream: void write(byte[] b, int off, int len)> -> _SINK_
<java.io.ByteArrayOutputStream: void writeTo(OutputStream out)> -> _SINK_

<java.io.CharArrayWriter: char[] toCharArray()> -> _SINK_
<java.io.CharArrayWriter: String toString()> -> _SINK_
<java.io.CharArrayWriter: void write(char[] c, int off, int len)> -> _SINK_
<java.io.CharArrayWriter: void write(int c)> -> _SINK_
<java.io.CharArrayWriter: void write(String str, int off, int len)> -> _SINK_
<java.io.CharArrayWriter: void writeTo(Writer out)> -> _SINK_

<java.io.DataOutputStream: void	write(byte[] b, int off, int len)> -> _SINK_
<java.io.DataOutputStream: void	write(int b)> -> _SINK_
<java.io.DataOutputStream: void	writeBoolean(boolean v)> -> _SINK_
<java.io.DataOutputStream: void	writeByte(int v)> -> _SINK_
<java.io.DataOutputStream: void	writeBytes(String s)> -> _SINK_
<java.io.DataOutputStream: void	writeChar(int v)> -> _SINK_
<java.io.DataOutputStream: void	writeChars(String s)> -> _SINK_
<java.io.DataOutputStream: void	writeDouble(double v)> -> _SINK_
<java.io.DataOutputStream: void	writeFloat(float v)> -> _SINK_
<java.io.DataOutputStream: void	writeInt(int v)> -> _SINK_
<java.io.DataOutputStream: void	writeLong(long v)> -> _SINK_
<java.io.DataOutputStream: void	writeShort(int v)> -> _SINK_
<java.io.DataOutputStream: void	writeUTF(String str)> -> _SINK_

<java.io.File: boolean delete()> -> _SINK_ -> -> _SINK_ _SINK_

<java.io.FileOutputStream: void	write(byte[] b)> -> _SINK_
<java.io.FileOutputStream: void	write(byte[] b, int off, int len)> -> _SINK_
<java.io.FileOutputStream: void	write(int b)> -> _SINK_

<java.io.FilterOutputStream: void write(byte[] b)> -> _SINK_
<java.io.FilterOutputStream: void write(byte[] b, int off, int len)> -> _SINK_
<java.io.FilterOutputStream: void write(int b)> -> _SINK_

<java.io.FilterWriter: void write(char[] cbuf, int off, int len)> -> _SINK_
<java.io.FilterWriter: void write(int c)> -> _SINK_
<java.io.FilterWriter: void write(String str, int off, int len)> -> _SINK_

<java.io.ObjectOutputStream: void write(byte[] buf)> -> _SINK_
<java.io.ObjectOutputStream: void write(byte[] buf, int off, int len)> -> _SINK_
<java.io.ObjectOutputStream: void write(int val)> -> _SINK_
<java.io.ObjectOutputStream: void writeBoolean(boolean val)> -> _SINK_
<java.io.ObjectOutputStream: void writeByte(int val)> -> _SINK_
<java.io.ObjectOutputStream: void writeBytes(String str)> -> _SINK_
<java.io.ObjectOutputStream: void writeChar(int val)> -> _SINK_
<java.io.ObjectOutputStream: void writeChars(String str)> -> _SINK_
<java.io.ObjectOutputStream: void writeFields()> -> _SINK_
<java.io.ObjectOutputStream: void writeFloat(float val)> -> _SINK_
<java.io.ObjectOutputStream: void writeInt(int val)> -> _SINK_
<java.io.ObjectOutputStream: void writeLong(long val)> -> _SINK_
<java.io.ObjectOutputStream: void writeObject(Object obj)> -> _SINK_
<java.io.ObjectOutputStream: void writeShort(int val)> -> _SINK_
<java.io.ObjectOutputStream: void writeUTF(String str)> -> _SINK_

<java.io.OutputStreamWriter: void write(char[] cbuf, int off, int len)> -> _SINK_
<java.io.OutputStreamWriter: void write(int c)> -> _SINK_
<java.io.OutputStreamWriter: void write(String str, int off, int len)> -> _SINK_

<java.io.PipedOutputStream: void write(byte[] b, int off, int len)> -> _SINK_
<java.io.PipedOutputStream: void write(int b)> -> _SINK_

<java.io.PipedWriter: void write(char[] cbuf, int off, int len)> -> _SINK_
<java.io.PipedWriter: void write(int c)> -> _SINK_

<java.io.PrintStream: PrintStream append(char c)> -> _SINK_
<java.io.PrintStream: PrintStream append(CharSequence csq)> -> _SINK_
<java.io.PrintStream: PrintStream append(CharSequence csq, int start, int end)> -> _SINK_
<java.io.PrintStream: PrintStream format(Locale l, String format, Object... args)> -> _SINK_
<java.io.PrintStream: PrintStream format(String format, Object... args)> -> _SINK_
<java.io.PrintStream: void print(boolean b)> -> _SINK_
<java.io.PrintStream: void print(char c)> -> _SINK_
<java.io.PrintStream: void print(char[] s)> -> _SINK_
<java.io.PrintStream: void print(double d)> -> _SINK_
<java.io.PrintStream: void print(float f)> -> _SINK_
<java.io.PrintStream: void print(int i)> -> _SINK_
<java.io.PrintStream: void print(long l)> -> _SINK_
<java.io.PrintStream: void print(Object obj)> -> _SINK_
<java.io.PrintStream: void print(String s)> -> _SINK_
<java.io.PrintStream: PrintStream printf(Locale l, String format, Object... args)> -> _SINK_
<java.io.PrintStream: PrintStream printf(String format, Object... args)> -> _SINK_
<java.io.PrintStream: void println()> -> _SINK_
<java.io.PrintStream: void println(boolean x)> -> _SINK_
<java.io.PrintStream: void println(char x)> -> _SINK_
<java.io.PrintStream: void println(char[] x)> -> _SINK_
<java.io.PrintStream: void println(double x)> -> _SINK_
<java.io.PrintStream: void println(float x)> -> _SINK_
<java.io.PrintStream: void println(int x)> -> _SINK_
<java.io.PrintStream: void println(long x)> -> _SINK_
<java.io.PrintStream: void println(Object x)> -> _SINK_
<java.io.PrintStream: void println(String x)> -> _SINK_
<java.io.PrintStream: void write(byte[] buf, int off, int len)> -> _SINK_
<java.io.PrintStream: void write(int b)> -> _SINK_

<java.io.PrintWriter: PrintWriter append(char c)> -> _SINK_
<java.io.PrintWriter: PrintWriter append(CharSequence csq)> -> _SINK_
<java.io.PrintWriter: PrintWriter append(CharSequence csq, int start, int end)> -> _SINK_
<java.io.PrintWriter: PrintWriter format(Locale l, String format, Object... args)> -> _SINK_
<java.io.PrintWriter: PrintWriter format(String format, Object... args)> -> _SINK_
<java.io.PrintWriter: void print(boolean b)> -> _SINK_
<java.io.PrintWriter: void print(char c)> -> _SINK_
<java.io.PrintWriter: void print(char[] s)> -> _SINK_
<java.io.PrintWriter: void print(double d)> -> _SINK_
<java.io.PrintWriter: void print(float f)> -> _SINK_
<java.io.PrintWriter: void print(int i)> -> _SINK_
<java.io.PrintWriter: void print(long l)> -> _SINK_
<java.io.PrintWriter: void print(Object obj)> -> _SINK_
<java.io.PrintWriter: void print(String s)> -> _SINK_
<java.io.PrintWriter: PrintWriter printf(Locale l, String format, Object... args)> -> _SINK_
<java.io.PrintWriter: PrintWriter printf(String format, Object... args)> -> _SINK_
<java.io.PrintWriter: void println()> -> _SINK_
<java.io.PrintWriter: void println(boolean x)> -> _SINK_
<java.io.PrintWriter: void println(char x)> -> _SINK_
<java.io.PrintWriter: void println(char[] x)> -> _SINK_
<java.io.PrintWriter: void println(double x)> -> _SINK_
<java.io.PrintWriter: void println(float x)> -> _SINK_
<java.io.PrintWriter: void println(int x)> -> _SINK_
<java.io.PrintWriter: void println(long x)> -> _SINK_
<java.io.PrintWriter: void println(Object x)> -> _SINK_
<java.io.PrintWriter: void println(String x)> -> _SINK_
<java.io.PrintWriter: void write(char[] buf)> -> _SINK_
<java.io.PrintWriter: void write(char[] buf, int off, int len)> -> _SINK_
<java.io.PrintWriter: void write(int c)> -> _SINK_
<java.io.PrintWriter: void write(String s)> -> _SINK_
<java.io.PrintWriter: void write(String s, int off, int len)> -> _SINK_

<java.io.PushbackReader: int read()> -> _SINK_
<java.io.PushbackReader: int read(char[] cbuf, int off, int len)> -> _SINK_

<java.io.StringWriter: StringWriter append(char c)> -> _SINK_
<java.io.StringWriter: StringWriter append(CharSequence csq)> -> _SINK_
<java.io.StringWriter: StringWriter append(CharSequence csq, int start, int end)> -> _SINK_
<java.io.StringWriter: StringBuffer getBuffer()> -> _SINK_
<java.io.StringWriter: String toString()> -> _SINK_
<java.io.StringWriter: void write(char[] cbuf, int off, int len)> -> _SINK_
<java.io.StringWriter: void write(int c)> -> _SINK_
<java.io.StringWriter: void write(String str)> -> _SINK_
<java.io.StringWriter: void write(String str, int off, int len)> -> _SINK_

<java.io.Writer: Writer	append(char c)> -> _SINK_
<java.io.Writer: Writer	append(CharSequence csq)> -> _SINK_
<java.io.Writer: Writer	append(CharSequence csq, int start, int end)> -> _SINK_
<java.io.Writer: void	write(char[] cbuf)> -> _SINK_
<java.io.Writer: void	write(int c)> -> _SINK_
<java.io.Writer: void	write(String str)> -> _SINK_
<java.io.Writer: void	write(String str, int off, int len)> -> _SINK_

<javax.persistence.EntityManager: javax.persistence.TypedQuery createQuery(java.lang.String,java.lang.Class)> -> _SINK_
<javax.servlet.http.HttpServletResponse: void sendRedirect(java.lang.String)> -> _SINK_
<com.mysql.jdbc.Statement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<org.apache.xmlrpc.webserver.ConnectionServer: void writeResponse(org.apache.xmlrpc.common.XmlRpcStreamRequestConfig,java.io.OutputStream,java.lang.Object)> -> _SINK_
<org.apache.xmlrpc.webserver.Connection: void writeResponseHeader(org.apache.xmlrpc.webserver.RequestData,int)> -> _SINK_
<org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator: void sendMessage(org.springframework.web.socket.WebSocketMessage)> -> _SINK_

<java.net.URLConnection: void connect()> -> _SINK_
<java.net.URLConnection: java.io.InputStream getInputStream()> -> _SINK_
<java.net.URLConnection: java.io.OutputStream getOutputStream()> -> _SINK_

<java.net.URL: java.io.InputStream openStream()> -> _SINK_
<java.net.URL: java.lang.Object getContent()> -> _SINK_
<java.net.URL: java.lang.Object getContent(java.lang.Class[])> -> _SINK_

<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> -> _SINK_
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_

<android.util.Log: int d(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_

<java.lang.ProcessBuilder: java.lang.Process start()> -> _SINK_

<android.bluetooth.BluetoothSocket: InputStream	getInputStream()> -> _SINK_
<android.bluetooth.BluetoothSocket: OutputStream getOutputStream()> -> _SINK_


<com.bumptech.glide.load.engine.Engine: void logWithTimeAndKey(java.lang.String,long,com.bumptech.glide.load.Key)> -> _SINK_
<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: java.io.File get(com.bumptech.glide.load.Key)> -> _SINK_
<org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)> -> _SINK_
<com.bumptech.glide.load.engine.EngineRunnable: com.bumptech.glide.load.engine.Resource decodeFromCache()> -> _SINK_
<com.bumptech.glide.load.model.ResourceLoader: com.bumptech.glide.load.data.DataFetcher getResourceFetcher(java.lang.Integer,int,int)> -> _SINK_
<org.apache.hc.core5.ssl.SSLContextBuilder: org.apache.hc.core5.ssl.SSLContextBuilder loadKeyMaterial(java.net.URL,char[],char[],org.apache.hc.core5.ssl.PrivateKeyStrategy)> -> _SINK_
<com.bumptech.glide.util.ByteArrayPool: byte[] getBytes()> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: int fillbuf(java.io.InputStream,byte[])> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.Bitmap decode(java.io.InputStream,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,int,int,com.bumptech.glide.load.DecodeFormat)> -> _SINK_
<org.jsoup.internal.ConstrainableInputStream: java.nio.ByteBuffer readToByteBuffer(int)> -> _SINK_
<com.bumptech.glide.Glide: com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Class,java.lang.Class,android.content.Context)> -> _SINK_
<com.bumptech.glide.manager.RequestManagerRetriever: boolean handleMessage(android.os.Message)> -> _SINK_
<org.apache.commons.codec.net.QuotedPrintableCodec: byte[] encodeQuotedPrintable(java.util.BitSet,byte[])> -> _SINK_
<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: void put(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.cache.DiskCache$Writer)> -> _SINK_
<org.apache.mina.filter.ssl.KeyStoreFactory: void setDataUrl(java.net.URL)> -> _SINK_
<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: android.graphics.Bitmap getDirty(int,int,android.graphics.Bitmap$Config)> -> _SINK_
<com.bumptech.glide.load.resource.gif.GifResourceEncoder: boolean writeDataDirect(byte[],java.io.OutputStream)> -> _SINK_
<org.apache.hc.client5.http.impl.auth.BasicAuthCache: void put(org.apache.hc.core5.http.HttpHost,org.apache.hc.client5.http.auth.AuthScheme)> -> _SINK_
<com.bumptech.glide.request.GenericRequest: void onException(java.lang.Exception)> -> _SINK_
<org.apache.commons.io.IOUtils: byte[] toByteArray(java.net.URLConnection)> -> _SINK_
<com.bumptech.glide.load.data.MediaStoreThumbFetcher$ThumbnailStreamOpener: int getOrientation(android.content.Context,android.net.Uri)> -> _SINK_
<org.apache.mina.proxy.handlers.http.ntlm.NTLMUtilities: byte[] createType3Message(java.lang.String,java.lang.String,byte[],java.lang.String,java.lang.String,java.lang.Integer,byte[])> -> _SINK_
<com.bumptech.glide.load.resource.gif.GifResourceDecoder: byte[] inputStreamToBytes(java.io.InputStream)> -> _SINK_
<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: boolean allocate()> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.TransformationUtils: android.graphics.Bitmap rotateImage(android.graphics.Bitmap,int)> -> _SINK_
<com.bumptech.glide.load.engine.CacheLoader: com.bumptech.glide.load.engine.Resource load(com.bumptech.glide.load.Key,com.bumptech.glide.load.ResourceDecoder,int,int)> -> _SINK_
<org.apache.hc.core5.http.io.entity.BufferedHttpEntity: void <init> -> _SINK_(org.apache.hc.core5.http.HttpEntity)> -> _SINK_
<com.fasterxml.jackson.core.TokenStreamFactory: java.io.InputStream _optimizedStreamFromURL(java.net.URL)> -> _SINK_
<com.bumptech.glide.load.model.ImageVideoModelLoader$ImageVideoFetcher: com.bumptech.glide.load.model.ImageVideoWrapper loadData(com.bumptech.glide.Priority)> -> _SINK_
<com.bumptech.glide.load.engine.DecodeJob: void logWithTimeAndKey(java.lang.String,long)> -> _SINK_
<org.apache.mina.filter.ssl.KeyStoreFactory: void setData(java.io.InputStream)> -> _SINK_
<com.bumptech.glide.load.engine.EngineRunnable: void run()> -> _SINK_
<org.apache.commons.codec.net.URLCodec: byte[] decodeUrl(byte[])> -> _SINK_
<com.google.common.io.Resources$UrlByteSource: java.io.InputStream openStream()> -> _SINK_
<org.apache.commons.io.IOUtils: long copy(java.net.URL,java.io.OutputStream)> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int parseExifSegment(com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader)> -> _SINK_
<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void trimMemory(int)> -> _SINK_
<com.bumptech.glide.load.data.HttpUrlFetcher: java.io.InputStream getStreamForSuccessfulRequest(java.net.HttpURLConnection)> -> _SINK_
<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void dumpUnchecked()> -> _SINK_
<com.bumptech.glide.gifdecoder.GifDecoder: int read(java.io.InputStream,int)> -> _SINK_
<com.bumptech.glide.request.GenericRequest: void logV(java.lang.String)> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.ImageVideoBitmapDecoder: com.bumptech.glide.load.engine.Resource decode(com.bumptech.glide.load.model.ImageVideoWrapper,int,int)> -> _SINK_
<org.apache.hc.core5.http.io.entity.EntityTemplate: java.io.InputStream getContent()> -> _SINK_
<org.apache.hc.core5.http.io.entity.SerializableEntity: java.io.InputStream getContent()> -> _SINK_
<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void trimToSize(int)> -> _SINK_
<com.bumptech.glide.util.ContentLengthInputStream: int parseContentLength(java.lang.String)> -> _SINK_
<com.bumptech.glide.gifdecoder.GifHeaderParser: int readBlock()> -> _SINK_
<org.apache.commons.io.input.Tailer: long readLines(java.io.RandomAccessFile)> -> _SINK_
<com.bumptech.glide.load.model.StreamEncoder: boolean encode(java.io.InputStream,java.io.OutputStream)> -> _SINK_
<org.apache.hc.client5.http.entity.mime.AbstractMultipartFormat: long getTotalLength()> -> _SINK_
<org.apache.commons.io.IOUtils: java.lang.String toString(java.net.URL,java.nio.charset.Charset)> -> _SINK_
<com.bumptech.glide.load.data.AssetPathFetcher: void cleanup()> -> _SINK_
<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: void <init> -> _SINK_(android.content.Context,android.app.ActivityManager,com.bumptech.glide.load.engine.cache.MemorySizeCalculator$ScreenDimensions)> -> _SINK_
<com.bumptech.glide.gifdecoder.GifHeaderParser: int[] readColorTable(int)> -> _SINK_
<org.apache.hc.client5.http.entity.mime.MultipartFormEntity: java.io.InputStream getContent()> -> _SINK_
<com.bumptech.glide.gifencoder.AnimatedGifEncoder: void getImagePixels()> -> _SINK_
<org.apache.mina.filter.codec.textline.LineDelimiter: void <clinit> -> _SINK_()> -> _SINK_
<com.bumptech.glide.Glide: java.io.File getPhotoCacheDir(android.content.Context,java.lang.String)> -> _SINK_
<org.apache.hc.core5.ssl.SSLContextBuilder: org.apache.hc.core5.ssl.SSLContextBuilder loadTrustMaterial(java.net.URL,char[],org.apache.hc.core5.ssl.TrustStrategy)> -> _SINK_
<com.bumptech.glide.load.engine.DecodeJob$SourceWriter: boolean write(java.io.File)> -> _SINK_
<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: void clear()> -> _SINK_
<com.bumptech.glide.load.data.MediaStoreThumbFetcher: java.io.InputStream openThumbInputStream(com.bumptech.glide.load.data.MediaStoreThumbFetcher$ThumbnailStreamOpener)> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.TransformationUtils: android.graphics.Bitmap fitCenter(android.graphics.Bitmap,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,int,int)> -> _SINK_
<org.apache.commons.io.IOUtils: char[] toCharArray(java.io.InputStream,java.nio.charset.Charset)> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.Bitmap decodeStream(com.bumptech.glide.util.MarkEnforcingInputStream,com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream,android.graphics.BitmapFactory$Options)> -> _SINK_
<org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File,int,int)> -> _SINK_
<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: void delete(com.bumptech.glide.load.Key)> -> _SINK_
<com.bumptech.glide.gifdecoder.GifDecoder: int readBlock()> -> _SINK_
<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy$1: void handle(java.lang.Throwable)> -> _SINK_
<com.bumptech.glide.load.data.HttpUrlFetcher: java.io.InputStream loadDataWithRedirects(java.net.URL,int,java.net.URL,java.util.Map)> -> _SINK_
<com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder: com.bumptech.glide.load.engine.Resource transcode(com.bumptech.glide.load.engine.Resource)> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: byte[] getExifSegment()> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.Downsampler: boolean shouldUsePool(java.io.InputStream)> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.Bitmap$Config getConfig(java.io.InputStream,com.bumptech.glide.load.DecodeFormat)> -> _SINK_
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.helper.HttpConnection$Request,org.jsoup.helper.HttpConnection$Response)> -> _SINK_
<com.bumptech.glide.gifdecoder.GifDecoder: android.graphics.Bitmap getNextFrame()> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.TransformationUtils: int getOrientation(java.lang.String)> -> _SINK_
<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.BitmapEncoder: boolean encode(com.bumptech.glide.load.engine.Resource,java.io.OutputStream)> -> _SINK_
<org.apache.hc.client5.http.psl.PublicSuffixMatcherLoader: org.apache.hc.client5.http.psl.PublicSuffixMatcher load(java.net.URL)> -> _SINK_
<com.bumptech.glide.request.target.ViewTarget$SizeDeterminer$SizeDeterminerLayoutListener: boolean onPreDraw()> -> _SINK_
<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void clearMemory()> -> _SINK_
<com.bumptech.glide.load.resource.gif.GifResourceEncoder: boolean encode(com.bumptech.glide.load.engine.Resource,java.io.OutputStream)> -> _SINK_
<org.apache.commons.codec.net.QuotedPrintableCodec: byte[] decodeQuotedPrintable(byte[])> -> _SINK_
<com.bumptech.glide.load.data.LocalUriFetcher: void cleanup()> -> _SINK_
<org.apache.commons.io.input.XmlStreamReader: void <init> -> _SINK_(java.net.URLConnection,java.lang.String)> -> _SINK_
<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: byte[] toByteArray()> -> _SINK_
<org.apache.hc.client5.http.entity.mime.HttpRFC7578Multipart$PercentCodec: byte[] encode(byte[])> -> _SINK_
<org.apache.commons.io.file.PathUtils: java.nio.file.Path copyFile(java.net.URL,java.nio.file.Path,java.nio.file.CopyOption[])> -> _SINK_
<org.apache.commons.io.file.PathUtils: java.nio.file.Path copyFileToDirectory(java.net.URL,java.nio.file.Path,java.nio.file.CopyOption[])> -> _SINK_
<org.apache.mina.proxy.handlers.http.ntlm.NTLMUtilities: byte[] createType1Message(java.lang.String,java.lang.String,java.lang.Integer,byte[])> -> _SINK_
<org.apache.commons.io.IOUtils: char[] toCharArray(java.io.Reader)> -> _SINK_
<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: boolean put(android.graphics.Bitmap)> -> _SINK_
































