public final class org.apache.cxf.transport.https.CertConstraintsJaxBUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.cxf.transport.https.CertConstraintsJaxBUtils r0;

        r0 := @this: org.apache.cxf.transport.https.CertConstraintsJaxBUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.cxf.transport.https.CertConstraints createCertConstraints(org.apache.cxf.configuration.security.CertificateConstraintsType)
    {
        java.util.List $r1, $r3;
        org.apache.cxf.transport.https.CertConstraints$Combinator $r2, $r4;
        org.apache.cxf.transport.https.CertConstraints $r5;
        org.apache.cxf.configuration.security.CertificateConstraintsType r0;

        r0 := @parameter0: org.apache.cxf.configuration.security.CertificateConstraintsType;

        $r1 = staticinvoke <org.apache.cxf.transport.https.CertConstraintsJaxBUtils: java.util.List getSubjectConstraints(org.apache.cxf.configuration.security.CertificateConstraintsType)>(r0);

        $r2 = staticinvoke <org.apache.cxf.transport.https.CertConstraintsJaxBUtils: org.apache.cxf.transport.https.CertConstraints$Combinator getSubjectConstraintsCombinator(org.apache.cxf.configuration.security.CertificateConstraintsType)>(r0);

        $r3 = staticinvoke <org.apache.cxf.transport.https.CertConstraintsJaxBUtils: java.util.List getIssuerConstraints(org.apache.cxf.configuration.security.CertificateConstraintsType)>(r0);

        $r4 = staticinvoke <org.apache.cxf.transport.https.CertConstraintsJaxBUtils: org.apache.cxf.transport.https.CertConstraints$Combinator getIssuerConstraintsCombinator(org.apache.cxf.configuration.security.CertificateConstraintsType)>(r0);

        $r5 = new org.apache.cxf.transport.https.CertConstraints;

        specialinvoke $r5.<org.apache.cxf.transport.https.CertConstraints: void <init>(java.util.List,org.apache.cxf.transport.https.CertConstraints$Combinator,java.util.List,org.apache.cxf.transport.https.CertConstraints$Combinator)>($r1, $r2, $r3, $r4);

        return $r5;
    }

    public static java.util.List getSubjectConstraints(org.apache.cxf.configuration.security.CertificateConstraintsType)
    {
        java.util.List $r1, $r3;
        org.apache.cxf.configuration.security.DNConstraintsType $r2;
        org.apache.cxf.configuration.security.CertificateConstraintsType r0;
        boolean $z0;

        r0 := @parameter0: org.apache.cxf.configuration.security.CertificateConstraintsType;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<org.apache.cxf.configuration.security.CertificateConstraintsType: boolean isSetSubjectDNConstraints()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.cxf.configuration.security.CertificateConstraintsType: org.apache.cxf.configuration.security.DNConstraintsType getSubjectDNConstraints()>();

        $r3 = virtualinvoke $r2.<org.apache.cxf.configuration.security.DNConstraintsType: java.util.List getRegularExpression()>();

        return $r3;

     label1:
        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;
    }

    public static java.util.List getIssuerConstraints(org.apache.cxf.configuration.security.CertificateConstraintsType)
    {
        java.util.List $r1, $r3;
        org.apache.cxf.configuration.security.DNConstraintsType $r2;
        org.apache.cxf.configuration.security.CertificateConstraintsType r0;
        boolean $z0;

        r0 := @parameter0: org.apache.cxf.configuration.security.CertificateConstraintsType;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<org.apache.cxf.configuration.security.CertificateConstraintsType: boolean isSetIssuerDNConstraints()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.cxf.configuration.security.CertificateConstraintsType: org.apache.cxf.configuration.security.DNConstraintsType getIssuerDNConstraints()>();

        $r3 = virtualinvoke $r2.<org.apache.cxf.configuration.security.DNConstraintsType: java.util.List getRegularExpression()>();

        return $r3;

     label1:
        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;
    }

    public static org.apache.cxf.transport.https.CertConstraints$Combinator getSubjectConstraintsCombinator(org.apache.cxf.configuration.security.CertificateConstraintsType)
    {
        org.apache.cxf.transport.https.CertConstraints$Combinator $r4, $r5;
        org.apache.cxf.configuration.security.DNConstraintsType $r1;
        org.apache.cxf.configuration.security.CertificateConstraintsType r0;
        org.apache.cxf.configuration.security.CombinatorType $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.cxf.configuration.security.CertificateConstraintsType;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<org.apache.cxf.configuration.security.CertificateConstraintsType: boolean isSetSubjectDNConstraints()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.apache.cxf.configuration.security.CertificateConstraintsType: org.apache.cxf.configuration.security.DNConstraintsType getSubjectDNConstraints()>();

        if $r1 == null goto label1;

        $z1 = virtualinvoke $r1.<org.apache.cxf.configuration.security.DNConstraintsType: boolean isSetCombinator()>();

        if $z1 == 0 goto label1;

        $r2 = virtualinvoke $r1.<org.apache.cxf.configuration.security.DNConstraintsType: org.apache.cxf.configuration.security.CombinatorType getCombinator()>();

        $r3 = <org.apache.cxf.configuration.security.CombinatorType: org.apache.cxf.configuration.security.CombinatorType ANY>;

        if $r2 != $r3 goto label1;

        $r4 = <org.apache.cxf.transport.https.CertConstraints$Combinator: org.apache.cxf.transport.https.CertConstraints$Combinator ANY>;

        return $r4;

     label1:
        $r5 = <org.apache.cxf.transport.https.CertConstraints$Combinator: org.apache.cxf.transport.https.CertConstraints$Combinator ALL>;

        return $r5;
    }

    public static org.apache.cxf.transport.https.CertConstraints$Combinator getIssuerConstraintsCombinator(org.apache.cxf.configuration.security.CertificateConstraintsType)
    {
        org.apache.cxf.transport.https.CertConstraints$Combinator $r4, $r5;
        org.apache.cxf.configuration.security.DNConstraintsType $r1;
        org.apache.cxf.configuration.security.CertificateConstraintsType r0;
        org.apache.cxf.configuration.security.CombinatorType $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.cxf.configuration.security.CertificateConstraintsType;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<org.apache.cxf.configuration.security.CertificateConstraintsType: boolean isSetIssuerDNConstraints()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.apache.cxf.configuration.security.CertificateConstraintsType: org.apache.cxf.configuration.security.DNConstraintsType getIssuerDNConstraints()>();

        if $r1 == null goto label1;

        $z1 = virtualinvoke $r1.<org.apache.cxf.configuration.security.DNConstraintsType: boolean isSetCombinator()>();

        if $z1 == 0 goto label1;

        $r2 = virtualinvoke $r1.<org.apache.cxf.configuration.security.DNConstraintsType: org.apache.cxf.configuration.security.CombinatorType getCombinator()>();

        $r3 = <org.apache.cxf.configuration.security.CombinatorType: org.apache.cxf.configuration.security.CombinatorType ANY>;

        if $r2 != $r3 goto label1;

        $r4 = <org.apache.cxf.transport.https.CertConstraints$Combinator: org.apache.cxf.transport.https.CertConstraints$Combinator ANY>;

        return $r4;

     label1:
        $r5 = <org.apache.cxf.transport.https.CertConstraints$Combinator: org.apache.cxf.transport.https.CertConstraints$Combinator ALL>;

        return $r5;
    }
}
