public abstract class org.springframework.web.util.WebUtils extends java.lang.Object
{
    public static final java.lang.String INCLUDE_REQUEST_URI_ATTRIBUTE;
    public static final java.lang.String INCLUDE_CONTEXT_PATH_ATTRIBUTE;
    public static final java.lang.String INCLUDE_SERVLET_PATH_ATTRIBUTE;
    public static final java.lang.String INCLUDE_PATH_INFO_ATTRIBUTE;
    public static final java.lang.String INCLUDE_QUERY_STRING_ATTRIBUTE;
    public static final java.lang.String FORWARD_REQUEST_URI_ATTRIBUTE;
    public static final java.lang.String FORWARD_CONTEXT_PATH_ATTRIBUTE;
    public static final java.lang.String FORWARD_SERVLET_PATH_ATTRIBUTE;
    public static final java.lang.String FORWARD_PATH_INFO_ATTRIBUTE;
    public static final java.lang.String FORWARD_QUERY_STRING_ATTRIBUTE;
    public static final java.lang.String ERROR_STATUS_CODE_ATTRIBUTE;
    public static final java.lang.String ERROR_EXCEPTION_TYPE_ATTRIBUTE;
    public static final java.lang.String ERROR_MESSAGE_ATTRIBUTE;
    public static final java.lang.String ERROR_EXCEPTION_ATTRIBUTE;
    public static final java.lang.String ERROR_REQUEST_URI_ATTRIBUTE;
    public static final java.lang.String ERROR_SERVLET_NAME_ATTRIBUTE;
    public static final java.lang.String CONTENT_TYPE_CHARSET_PREFIX;
    public static final java.lang.String DEFAULT_CHARACTER_ENCODING;
    public static final java.lang.String TEMP_DIR_CONTEXT_ATTRIBUTE;
    public static final java.lang.String HTML_ESCAPE_CONTEXT_PARAM;
    public static final java.lang.String WEB_APP_ROOT_KEY_PARAM;
    public static final java.lang.String DEFAULT_WEB_APP_ROOT_KEY;
    public static final java.lang.String[] SUBMIT_IMAGE_SUFFIXES;
    public static final java.lang.String SESSION_MUTEX_ATTRIBUTE;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.lang.StringBuilder $r1, $r5;
        java.lang.Class $r2;
        java.lang.String $r3, $r4, $r6;

        <org.springframework.web.util.WebUtils: java.lang.String DEFAULT_WEB_APP_ROOT_KEY> = "webapp.root";

        <org.springframework.web.util.WebUtils: java.lang.String WEB_APP_ROOT_KEY_PARAM> = "webAppRootKey";

        <org.springframework.web.util.WebUtils: java.lang.String HTML_ESCAPE_CONTEXT_PARAM> = "defaultHtmlEscape";

        <org.springframework.web.util.WebUtils: java.lang.String TEMP_DIR_CONTEXT_ATTRIBUTE> = "javax.servlet.context.tempdir";

        <org.springframework.web.util.WebUtils: java.lang.String DEFAULT_CHARACTER_ENCODING> = "ISO-8859-1";

        <org.springframework.web.util.WebUtils: java.lang.String CONTENT_TYPE_CHARSET_PREFIX> = ";charset=";

        <org.springframework.web.util.WebUtils: java.lang.String ERROR_SERVLET_NAME_ATTRIBUTE> = "javax.servlet.error.servlet_name";

        <org.springframework.web.util.WebUtils: java.lang.String ERROR_REQUEST_URI_ATTRIBUTE> = "javax.servlet.error.request_uri";

        <org.springframework.web.util.WebUtils: java.lang.String ERROR_EXCEPTION_ATTRIBUTE> = "javax.servlet.error.exception";

        <org.springframework.web.util.WebUtils: java.lang.String ERROR_MESSAGE_ATTRIBUTE> = "javax.servlet.error.message";

        <org.springframework.web.util.WebUtils: java.lang.String ERROR_EXCEPTION_TYPE_ATTRIBUTE> = "javax.servlet.error.exception_type";

        <org.springframework.web.util.WebUtils: java.lang.String ERROR_STATUS_CODE_ATTRIBUTE> = "javax.servlet.error.status_code";

        <org.springframework.web.util.WebUtils: java.lang.String FORWARD_QUERY_STRING_ATTRIBUTE> = "javax.servlet.forward.query_string";

        <org.springframework.web.util.WebUtils: java.lang.String FORWARD_PATH_INFO_ATTRIBUTE> = "javax.servlet.forward.path_info";

        <org.springframework.web.util.WebUtils: java.lang.String FORWARD_SERVLET_PATH_ATTRIBUTE> = "javax.servlet.forward.servlet_path";

        <org.springframework.web.util.WebUtils: java.lang.String FORWARD_CONTEXT_PATH_ATTRIBUTE> = "javax.servlet.forward.context_path";

        <org.springframework.web.util.WebUtils: java.lang.String FORWARD_REQUEST_URI_ATTRIBUTE> = "javax.servlet.forward.request_uri";

        <org.springframework.web.util.WebUtils: java.lang.String INCLUDE_QUERY_STRING_ATTRIBUTE> = "javax.servlet.include.query_string";

        <org.springframework.web.util.WebUtils: java.lang.String INCLUDE_PATH_INFO_ATTRIBUTE> = "javax.servlet.include.path_info";

        <org.springframework.web.util.WebUtils: java.lang.String INCLUDE_SERVLET_PATH_ATTRIBUTE> = "javax.servlet.include.servlet_path";

        <org.springframework.web.util.WebUtils: java.lang.String INCLUDE_CONTEXT_PATH_ATTRIBUTE> = "javax.servlet.include.context_path";

        <org.springframework.web.util.WebUtils: java.lang.String INCLUDE_REQUEST_URI_ATTRIBUTE> = "javax.servlet.include.request_uri";

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = ".x";

        $r0[1] = ".y";

        <org.springframework.web.util.WebUtils: java.lang.String[] SUBMIT_IMAGE_SUFFIXES> = $r0;

        $r1 = new java.lang.StringBuilder;

        $r2 = class "Lorg/springframework/web/util/WebUtils;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".MUTEX");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.springframework.web.util.WebUtils: java.lang.String SESSION_MUTEX_ATTRIBUTE> = $r6;

        return;
    }

    public void <init>()
    {
        org.springframework.web.util.WebUtils r0;

        r0 := @this: org.springframework.web.util.WebUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setWebAppRootSystemProperty(javax.servlet.ServletContext) throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r11, $r21;
        java.lang.String $r1, $r2, r3, $r4, $r10, $r20, $r22;
        boolean $z0;
        javax.servlet.ServletContext r0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;

        r0 := @parameter0: javax.servlet.ServletContext;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ServletContext must not be null");

        $r1 = interfaceinvoke r0.<javax.servlet.ServletContext: java.lang.String getRealPath(java.lang.String)>("/");

        if $r1 != null goto label1;

        $r21 = new java.lang.IllegalStateException;

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set web app root system property when WAR file is not expanded");

        throw $r21;

     label1:
        $r2 = interfaceinvoke r0.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("webAppRootKey");

        if $r2 == null goto label2;

        $r22 = $r2;

        goto label3;

     label2:
        $r22 = "webapp.root";

     label3:
        r3 = $r22;

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>($r22);

        if $r4 == null goto label4;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean pathEquals(java.lang.String,java.lang.String)>($r4, $r1);

        if $z0 != 0 goto label4;

        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Web app root system property already set to different value: \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' = [");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] instead of [");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] - ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Choose unique values for the \'webAppRootKey\' context-param in your web.xml files!");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r11;

     label4:
        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>(r3, $r1);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Set web app root system property: \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' = [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r0.<javax.servlet.ServletContext: void log(java.lang.String)>($r10);

        return;
    }

    public static void removeWebAppRootSystemProperty(javax.servlet.ServletContext)
    {
        java.util.Properties $r2;
        javax.servlet.ServletContext r0;
        java.lang.String $r1, $r3;

        r0 := @parameter0: javax.servlet.ServletContext;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ServletContext must not be null");

        $r1 = interfaceinvoke r0.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("webAppRootKey");

        if $r1 == null goto label1;

        $r3 = $r1;

        goto label2;

     label1:
        $r3 = "webapp.root";

     label2:
        $r2 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        virtualinvoke $r2.<java.util.Properties: java.lang.Object remove(java.lang.Object)>($r3);

        return;
    }

    public static boolean isDefaultHtmlEscape(javax.servlet.ServletContext)
    {
        java.lang.Boolean $r2;
        javax.servlet.ServletContext r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: javax.servlet.ServletContext;

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = interfaceinvoke r0.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("defaultHtmlEscape");

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public static java.lang.Boolean getDefaultHtmlEscape(javax.servlet.ServletContext)
    {
        java.lang.Boolean $r2;
        javax.servlet.ServletContext r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: javax.servlet.ServletContext;

        if r0 != null goto label1;

        return null;

     label1:
        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ServletContext must not be null");

        $r1 = interfaceinvoke r0.<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>("defaultHtmlEscape");

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r1);

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r1);

        goto label3;

     label2:
        $r2 = null;

     label3:
        return $r2;
    }

    public static java.io.File getTempDir(javax.servlet.ServletContext)
    {
        javax.servlet.ServletContext r0;
        java.lang.Object $r1;
        java.io.File $r2;

        r0 := @parameter0: javax.servlet.ServletContext;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ServletContext must not be null");

        $r1 = interfaceinvoke r0.<javax.servlet.ServletContext: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.context.tempdir");

        $r2 = (java.io.File) $r1;

        return $r2;
    }

    public static java.lang.String getRealPath(javax.servlet.ServletContext, java.lang.String) throws java.io.FileNotFoundException
    {
        java.io.FileNotFoundException $r2;
        javax.servlet.ServletContext r0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r9;
        java.lang.String $r1, $r7, r10;
        boolean $z0;

        r0 := @parameter0: javax.servlet.ServletContext;

        r10 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ServletContext must not be null");

        $z0 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 != 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("/");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r1 = interfaceinvoke r0.<javax.servlet.ServletContext: java.lang.String getRealPath(java.lang.String)>(r10);

        if $r1 != null goto label2;

        $r2 = new java.io.FileNotFoundException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("ServletContext resource [");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] cannot be resolved to absolute file path - ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("web application archive not expanded?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label2:
        return $r1;
    }

    public static java.lang.String getSessionId(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpSession $r1;
        javax.servlet.http.HttpServletRequest r0;
        java.lang.String $r2;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Request must not be null");

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: javax.servlet.http.HttpSession getSession(boolean)>(0);

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<javax.servlet.http.HttpSession: java.lang.String getId()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public static java.lang.Object getSessionAttribute(javax.servlet.http.HttpServletRequest, java.lang.String)
    {
        javax.servlet.http.HttpSession $r1;
        javax.servlet.http.HttpServletRequest r0;
        java.lang.Object $r3;
        java.lang.String r2;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Request must not be null");

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: javax.servlet.http.HttpSession getSession(boolean)>(0);

        if $r1 == null goto label1;

        $r3 = interfaceinvoke $r1.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>(r2);

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public static java.lang.Object getRequiredSessionAttribute(javax.servlet.http.HttpServletRequest, java.lang.String) throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r3;
        javax.servlet.http.HttpServletRequest r0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String r1, $r7;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.springframework.web.util.WebUtils: java.lang.Object getSessionAttribute(javax.servlet.http.HttpServletRequest,java.lang.String)>(r0, r1);

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("No session attribute \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' found");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        return $r2;
    }

    public static void setSessionAttribute(javax.servlet.http.HttpServletRequest, java.lang.String, java.lang.Object)
    {
        javax.servlet.http.HttpSession $r2, $r4;
        javax.servlet.http.HttpServletRequest r0;
        java.lang.Object r1;
        java.lang.String r3;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r3 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Request must not be null");

        if r1 == null goto label1;

        $r4 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: javax.servlet.http.HttpSession getSession()>();

        interfaceinvoke $r4.<javax.servlet.http.HttpSession: void setAttribute(java.lang.String,java.lang.Object)>(r3, r1);

        goto label2;

     label1:
        $r2 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: javax.servlet.http.HttpSession getSession(boolean)>(0);

        if $r2 == null goto label2;

        interfaceinvoke $r2.<javax.servlet.http.HttpSession: void removeAttribute(java.lang.String)>(r3);

     label2:
        return;
    }

    public static java.lang.Object getOrCreateSessionAttribute(javax.servlet.http.HttpSession, java.lang.String, java.lang.Class) throws java.lang.IllegalArgumentException
    {
        java.lang.InstantiationException $r16;
        java.lang.String r1, $r8, $r13, $r15, $r19, $r24, $r26;
        javax.servlet.http.HttpSession r0;
        java.lang.IllegalAccessException $r5;
        java.lang.IllegalArgumentException $r6, $r17;
        java.lang.Object $r2, $r4, r27;
        java.lang.Class r3;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r12, $r14, $r18, $r20, $r21, $r22, $r23, $r25;

        r0 := @parameter0: javax.servlet.http.HttpSession;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Session must not be null");

        $r2 = interfaceinvoke r0.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>(r1);

        r27 = $r2;

        if $r2 != null goto label6;

     label1:
        $r4 = virtualinvoke r3.<java.lang.Class: java.lang.Object newInstance()>();

        r27 = $r4;

     label2:
        goto label5;

     label3:
        $r16 := @caughtexception;

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not instantiate class [");

        $r19 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for session attribute \'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r24 = virtualinvoke $r16.<java.lang.InstantiationException: java.lang.String getMessage()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r17;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not access default constructor of class [");

        $r8 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for session attribute \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r13 = virtualinvoke $r5.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r6;

     label5:
        interfaceinvoke r0.<javax.servlet.http.HttpSession: void setAttribute(java.lang.String,java.lang.Object)>(r1, $r4);

     label6:
        return r27;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    public static java.lang.Object getSessionMutex(javax.servlet.http.HttpSession)
    {
        javax.servlet.http.HttpSession r0;
        java.lang.Object $r2, r3;
        java.lang.String $r1;

        r0 := @parameter0: javax.servlet.http.HttpSession;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Session must not be null");

        $r1 = <org.springframework.web.util.WebUtils: java.lang.String SESSION_MUTEX_ATTRIBUTE>;

        $r2 = interfaceinvoke r0.<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>($r1);

        r3 = $r2;

        if $r2 != null goto label1;

        r3 = r0;

     label1:
        return r3;
    }

    public static java.lang.Object getNativeRequest(javax.servlet.ServletRequest, java.lang.Class)
    {
        javax.servlet.ServletRequest r1, $r3;
        java.lang.Class r0;
        java.lang.Object $r4;
        javax.servlet.ServletRequestWrapper $r2;
        boolean $z0, $z1;

        r1 := @parameter0: javax.servlet.ServletRequest;

        r0 := @parameter1: java.lang.Class;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $z1 = r1 instanceof javax.servlet.ServletRequestWrapper;

        if $z1 == 0 goto label2;

        $r2 = (javax.servlet.ServletRequestWrapper) r1;

        $r3 = virtualinvoke $r2.<javax.servlet.ServletRequestWrapper: javax.servlet.ServletRequest getRequest()>();

        $r4 = staticinvoke <org.springframework.web.util.WebUtils: java.lang.Object getNativeRequest(javax.servlet.ServletRequest,java.lang.Class)>($r3, r0);

        return $r4;

     label2:
        return null;
    }

    public static java.lang.Object getNativeResponse(javax.servlet.ServletResponse, java.lang.Class)
    {
        javax.servlet.ServletResponseWrapper $r2;
        javax.servlet.ServletResponse r1, $r3;
        java.lang.Class r0;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r1 := @parameter0: javax.servlet.ServletResponse;

        r0 := @parameter1: java.lang.Class;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $z1 = r1 instanceof javax.servlet.ServletResponseWrapper;

        if $z1 == 0 goto label2;

        $r2 = (javax.servlet.ServletResponseWrapper) r1;

        $r3 = virtualinvoke $r2.<javax.servlet.ServletResponseWrapper: javax.servlet.ServletResponse getResponse()>();

        $r4 = staticinvoke <org.springframework.web.util.WebUtils: java.lang.Object getNativeResponse(javax.servlet.ServletResponse,java.lang.Class)>($r3, r0);

        return $r4;

     label2:
        return null;
    }

    public static boolean isIncludeRequest(javax.servlet.ServletRequest)
    {
        javax.servlet.ServletRequest r0;
        java.lang.Object $r1;

        r0 := @parameter0: javax.servlet.ServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.ServletRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.include.request_uri");

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public static void exposeForwardRequestAttributes(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>();

        staticinvoke <org.springframework.web.util.WebUtils: void exposeRequestAttributeIfNotPresent(javax.servlet.ServletRequest,java.lang.String,java.lang.Object)>(r0, "javax.servlet.forward.request_uri", $r1);

        $r2 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getContextPath()>();

        staticinvoke <org.springframework.web.util.WebUtils: void exposeRequestAttributeIfNotPresent(javax.servlet.ServletRequest,java.lang.String,java.lang.Object)>(r0, "javax.servlet.forward.context_path", $r2);

        $r3 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getServletPath()>();

        staticinvoke <org.springframework.web.util.WebUtils: void exposeRequestAttributeIfNotPresent(javax.servlet.ServletRequest,java.lang.String,java.lang.Object)>(r0, "javax.servlet.forward.servlet_path", $r3);

        $r4 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>();

        staticinvoke <org.springframework.web.util.WebUtils: void exposeRequestAttributeIfNotPresent(javax.servlet.ServletRequest,java.lang.String,java.lang.Object)>(r0, "javax.servlet.forward.path_info", $r4);

        $r5 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getQueryString()>();

        staticinvoke <org.springframework.web.util.WebUtils: void exposeRequestAttributeIfNotPresent(javax.servlet.ServletRequest,java.lang.String,java.lang.Object)>(r0, "javax.servlet.forward.query_string", $r5);

        return;
    }

    public static void exposeErrorRequestAttributes(javax.servlet.http.HttpServletRequest, java.lang.Throwable, java.lang.String)
    {
        java.lang.Throwable r2;
        javax.servlet.http.HttpServletRequest r0;
        java.lang.Class $r3;
        java.lang.String $r4, $r5, r6;
        java.lang.Integer $r1;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: java.lang.Throwable;

        r6 := @parameter2: java.lang.String;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(200);

        staticinvoke <org.springframework.web.util.WebUtils: void exposeRequestAttributeIfNotPresent(javax.servlet.ServletRequest,java.lang.String,java.lang.Object)>(r0, "javax.servlet.error.status_code", $r1);

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.springframework.web.util.WebUtils: void exposeRequestAttributeIfNotPresent(javax.servlet.ServletRequest,java.lang.String,java.lang.Object)>(r0, "javax.servlet.error.exception_type", $r3);

        $r4 = virtualinvoke r2.<java.lang.Throwable: java.lang.String getMessage()>();

        staticinvoke <org.springframework.web.util.WebUtils: void exposeRequestAttributeIfNotPresent(javax.servlet.ServletRequest,java.lang.String,java.lang.Object)>(r0, "javax.servlet.error.message", $r4);

        staticinvoke <org.springframework.web.util.WebUtils: void exposeRequestAttributeIfNotPresent(javax.servlet.ServletRequest,java.lang.String,java.lang.Object)>(r0, "javax.servlet.error.exception", r2);

        $r5 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>();

        staticinvoke <org.springframework.web.util.WebUtils: void exposeRequestAttributeIfNotPresent(javax.servlet.ServletRequest,java.lang.String,java.lang.Object)>(r0, "javax.servlet.error.request_uri", $r5);

        staticinvoke <org.springframework.web.util.WebUtils: void exposeRequestAttributeIfNotPresent(javax.servlet.ServletRequest,java.lang.String,java.lang.Object)>(r0, "javax.servlet.error.servlet_name", r6);

        return;
    }

    private static void exposeRequestAttributeIfNotPresent(javax.servlet.ServletRequest, java.lang.String, java.lang.Object)
    {
        javax.servlet.ServletRequest r0;
        java.lang.Object $r2, r3;
        java.lang.String r1;

        r0 := @parameter0: javax.servlet.ServletRequest;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        $r2 = interfaceinvoke r0.<javax.servlet.ServletRequest: java.lang.Object getAttribute(java.lang.String)>(r1);

        if $r2 != null goto label1;

        interfaceinvoke r0.<javax.servlet.ServletRequest: void setAttribute(java.lang.String,java.lang.Object)>(r1, r3);

     label1:
        return;
    }

    public static void clearErrorRequestAttributes(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r0;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: void removeAttribute(java.lang.String)>("javax.servlet.error.status_code");

        interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: void removeAttribute(java.lang.String)>("javax.servlet.error.exception_type");

        interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: void removeAttribute(java.lang.String)>("javax.servlet.error.message");

        interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: void removeAttribute(java.lang.String)>("javax.servlet.error.exception");

        interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: void removeAttribute(java.lang.String)>("javax.servlet.error.request_uri");

        interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: void removeAttribute(java.lang.String)>("javax.servlet.error.servlet_name");

        return;
    }

    public static void exposeRequestAttributes(javax.servlet.ServletRequest, java.util.Map)
    {
        javax.servlet.ServletRequest r0;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.Map r1;
        java.lang.Object $r4, $r6, $r8;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: javax.servlet.ServletRequest;

        r1 := @parameter1: java.util.Map;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Request must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Attributes Map must not be null");

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r0.<javax.servlet.ServletRequest: void setAttribute(java.lang.String,java.lang.Object)>($r7, $r8);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public static javax.servlet.http.Cookie getCookie(javax.servlet.http.HttpServletRequest, java.lang.String)
    {
        javax.servlet.http.Cookie[] $r1;
        javax.servlet.http.HttpServletRequest r0;
        int i0, i1;
        java.lang.String r3, $r4;
        javax.servlet.http.Cookie r2;
        boolean $z0;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r3 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Request must not be null");

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: javax.servlet.http.Cookie[] getCookies()>();

        if $r1 == null goto label4;

        i0 = lengthof $r1;

        i1 = 0;

        goto label3;

     label1:
        r2 = $r1[i1];

        $r4 = virtualinvoke r2.<javax.servlet.http.Cookie: java.lang.String getName()>();

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        return r2;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

     label4:
        return null;
    }

    public static boolean hasSubmitParameter(javax.servlet.ServletRequest, java.lang.String)
    {
        javax.servlet.ServletRequest r0;
        java.lang.String[] $r3;
        int i0, i1;
        java.lang.StringBuilder $r5, $r7;
        java.lang.String r1, $r2, r4, $r6, $r8, $r9;

        r0 := @parameter0: javax.servlet.ServletRequest;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Request must not be null");

        $r2 = interfaceinvoke r0.<javax.servlet.ServletRequest: java.lang.String getParameter(java.lang.String)>(r1);

        if $r2 == null goto label1;

        return 1;

     label1:
        $r3 = <org.springframework.web.util.WebUtils: java.lang.String[] SUBMIT_IMAGE_SUFFIXES>;

        i0 = lengthof $r3;

        i1 = 0;

        goto label4;

     label2:
        r4 = $r3[i1];

        $r5 = new java.lang.StringBuilder;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = interfaceinvoke r0.<javax.servlet.ServletRequest: java.lang.String getParameter(java.lang.String)>($r8);

        if $r9 == null goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label2;

        return 0;
    }

    public static java.lang.String findParameterValue(javax.servlet.ServletRequest, java.lang.String)
    {
        javax.servlet.ServletRequest r0;
        java.util.Map $r1;
        java.lang.String r2, $r3;

        r0 := @parameter0: javax.servlet.ServletRequest;

        r2 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<javax.servlet.ServletRequest: java.util.Map getParameterMap()>();

        $r3 = staticinvoke <org.springframework.web.util.WebUtils: java.lang.String findParameterValue(java.util.Map,java.lang.String)>($r1, r2);

        return $r3;
    }

    public static java.lang.String findParameterValue(java.util.Map, java.lang.String)
    {
        java.lang.String[] $r11, r16;
        java.util.Map r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String r1, $r4, $r6, r10, r12, $r13, $r14, $r15, $r17;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r8;
        java.util.Set $r7;
        java.lang.Object $r2, $r9;
        java.lang.StringBuilder $r3, $r5;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $z0 = $r2 instanceof java.lang.String[];

        if $z0 == 0 goto label3;

        r16 = (java.lang.String[]) $r2;

        $i6 = lengthof r16;

        if $i6 <= 0 goto label1;

        $r17 = r16[0];

        goto label2;

     label1:
        $r17 = null;

     label2:
        return $r17;

     label3:
        if $r2 == null goto label4;

        $r15 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r15;

     label4:
        $r3 = new java.lang.StringBuilder;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

        goto label9;

     label5:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r9;

        $z2 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>($r6);

        if $z2 == 0 goto label9;

        $r11 = <org.springframework.web.util.WebUtils: java.lang.String[] SUBMIT_IMAGE_SUFFIXES>;

        i0 = lengthof $r11;

        i7 = 0;

        goto label8;

     label6:
        r12 = $r11[i7];

        $z3 = virtualinvoke r10.<java.lang.String: boolean endsWith(java.lang.String)>(r12);

        if $z3 == 0 goto label7;

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i2 = virtualinvoke r10.<java.lang.String: int length()>();

        $i3 = virtualinvoke r12.<java.lang.String: int length()>();

        $i4 = $i2 - $i3;

        $r13 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int,int)>($i1, $i4);

        return $r13;

     label7:
        i7 = i7 + 1;

     label8:
        if i7 < i0 goto label6;

        $i5 = virtualinvoke $r6.<java.lang.String: int length()>();

        $r14 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>($i5);

        return $r14;

     label9:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label5;

        return null;
    }

    public static java.util.Map getParametersStartingWith(javax.servlet.ServletRequest, java.lang.String)
    {
        java.util.Enumeration $r1;
        java.lang.String[] $r7;
        int $i0, $i1, $i2;
        java.lang.String r4, $r5, $r6, $r8, r9;
        boolean $z0, $z1, $z2;
        javax.servlet.ServletRequest r0;
        java.util.TreeMap $r2;
        java.lang.Object $r3;

        r0 := @parameter0: javax.servlet.ServletRequest;

        r9 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Request must not be null");

        $r1 = interfaceinvoke r0.<javax.servlet.ServletRequest: java.util.Enumeration getParameterNames()>();

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>()>();

        if r9 != null goto label4;

        r9 = "";

        goto label4;

     label1:
        $r3 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (java.lang.String) $r3;

        $r5 = "";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>(r9);

        if $z2 == 0 goto label4;

     label2:
        $i0 = virtualinvoke r9.<java.lang.String: int length()>();

        $r6 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i0);

        $r7 = interfaceinvoke r0.<javax.servlet.ServletRequest: java.lang.String[] getParameterValues(java.lang.String)>(r4);

        if $r7 == null goto label4;

        $i1 = lengthof $r7;

        if $i1 == 0 goto label4;

        $i2 = lengthof $r7;

        if $i2 <= 1 goto label3;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label4;

     label3:
        $r8 = $r7[0];

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r8);

     label4:
        if $r1 == null goto label5;

        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

     label5:
        return $r2;
    }

    public static int getTargetPage(javax.servlet.ServletRequest, java.lang.String, int)
    {
        java.util.Enumeration $r1;
        java.lang.String[] $r4, $r8;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7;
        java.lang.String r3, r5, $r6, r7;
        boolean $z0, $z1, $z2;
        javax.servlet.ServletRequest r0;
        java.lang.Object $r2;

        r0 := @parameter0: javax.servlet.ServletRequest;

        r3 := @parameter1: java.lang.String;

        i5 := @parameter2: int;

        $r1 = interfaceinvoke r0.<javax.servlet.ServletRequest: java.util.Enumeration getParameterNames()>();

        goto label5;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r7 = (java.lang.String) $r2;

        $z1 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>(r3);

        if $z1 == 0 goto label5;

        i6 = 0;

        goto label4;

     label2:
        $r4 = <org.springframework.web.util.WebUtils: java.lang.String[] SUBMIT_IMAGE_SUFFIXES>;

        r5 = $r4[i6];

        $z2 = virtualinvoke r7.<java.lang.String: boolean endsWith(java.lang.String)>(r5);

        if $z2 == 0 goto label3;

        $i0 = virtualinvoke r7.<java.lang.String: int length()>();

        $i1 = virtualinvoke r5.<java.lang.String: int length()>();

        $i2 = $i0 - $i1;

        r7 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

     label3:
        i6 = i6 + 1;

     label4:
        $r8 = <org.springframework.web.util.WebUtils: java.lang.String[] SUBMIT_IMAGE_SUFFIXES>;

        $i7 = lengthof $r8;

        if i6 < $i7 goto label2;

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        $r6 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i3);

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        return $i4;

     label5:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        return i5;
    }

    public static java.lang.String extractFilenameFromUrlPath(java.lang.String)
    {
        int $i0, $i2;
        java.lang.String r0, $r1, r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.springframework.web.util.WebUtils: java.lang.String extractFullFilenameFromUrlPath(java.lang.String)>(r0);

        r2 = $r1;

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        return r2;
    }

    public static java.lang.String extractFullFilenameFromUrlPath(java.lang.String)
    {
        int $i0, $i1, i2, $i3, $i4, $i6, $i8;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(59);

        i2 = $i0;

        $i6 = (int) -1;

        if $i0 != $i6 goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(63);

        i2 = $i1;

        $i8 = (int) -1;

        if $i1 != $i8 goto label1;

        i2 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int,int)>(47, i2);

        $i4 = $i3 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i4, i2);

        return $r1;
    }
}
