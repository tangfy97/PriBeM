public class com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription extends com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription
{
    boolean seenAnElement;
    private boolean seenNonWhiteText;

    public void <init>(com.hp.hpl.jena.rdf.arp.states.WantsObjectFrameI, com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)
    {
        com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription r0;
        com.hp.hpl.jena.rdf.arp.states.WantsObjectFrameI r1;
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext r2;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.states.WantsObjectFrameI;

        r2 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: void <init>(com.hp.hpl.jena.rdf.arp.states.FrameI,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>(r1, r2);

        r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: boolean seenAnElement> = 0;

        r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: boolean seenNonWhiteText> = 0;

        return;
    }

    public com.hp.hpl.jena.rdf.arp.states.FrameI startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.states.WantsObjectFrameI $r17;
        com.hp.hpl.jena.rdf.arp.states.FrameI $r15, $r16;
        java.lang.StringBuffer $r5, $r8;
        org.xml.sax.Attributes r4;
        java.lang.String r1, r2, r3, $r9, $r14;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.rdf.arp.impl.ANode $r18;
        com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription r0;
        java.lang.StringBuilder $r6, $r7, $r10, $r11, $r12, $r13;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.xml.sax.Attributes;

        $z0 = r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: boolean seenAnElement>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: void warning(int,java.lang.String)>(201, "Multiple children of property element");

     label1:
        r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: boolean seenAnElement> = 1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: boolean bufIsSet()>();

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: java.lang.StringBuffer getBuf()>();

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: boolean isWhite(java.lang.StringBuffer)>($r5);

        if $z2 != 0 goto label2;

        r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: boolean seenNonWhiteText> = 1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot have both string data \"");

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: java.lang.StringBuffer getBuf()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" and XML data <");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> inside a property element. Maybe you want rdf:parseType=\'Literal\'.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: void warning(int,java.lang.String)>(202, $r14);

        goto label3;

     label2:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: void setBuf(java.lang.StringBuffer)>(null);

     label3:
        $r15 = specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: com.hp.hpl.jena.rdf.arp.states.FrameI startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>(r1, r2, r3, r4);

        $r16 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: com.hp.hpl.jena.rdf.arp.states.FrameI getParent()>();

        $r17 = (com.hp.hpl.jena.rdf.arp.states.WantsObjectFrameI) $r16;

        $r18 = r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: com.hp.hpl.jena.rdf.arp.impl.ANode subject>;

        interfaceinvoke $r17.<com.hp.hpl.jena.rdf.arp.states.WantsObjectFrameI: void theObject(com.hp.hpl.jena.rdf.arp.impl.ANode)>($r18);

        return $r15;
    }

    public void characters(char[], int, int) throws org.xml.sax.SAXParseException
    {
        int i0, i1;
        com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription r0;
        char[] r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8;
        java.lang.String $r4, $r7, $r9;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: boolean seenAnElement>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: boolean isWhite(char[],int,int)>(r1, i0, i1);

        if $z1 != 0 goto label1;

        r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: boolean seenNonWhiteText> = 1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot have both string data: \"");

        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r1, i0, i1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"and XML data inside a property element. ");

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: java.lang.String suggestParsetypeLiteral()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: void warning(int,java.lang.String)>(202, $r9);

     label1:
        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: void characters(char[],int,int)>(r1, i0, i1);

        return;
    }

    public void endElement() throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.impl.Taint $r5;
        com.hp.hpl.jena.rdf.arp.states.WantsObjectFrameI $r7;
        com.hp.hpl.jena.rdf.arp.states.FrameI $r6;
        java.lang.StringBuffer $r2;
        com.hp.hpl.jena.rdf.arp.impl.ARPString $r1;
        com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription r0;
        java.lang.String $r3;
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription;

        $z0 = r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: boolean seenAnElement>;

        if $z0 == 0 goto label1;

        $z3 = r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: boolean seenNonWhiteText>;

        if $z3 == 0 goto label4;

     label1:
        $r1 = new com.hp.hpl.jena.rdf.arp.impl.ARPString;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: java.lang.StringBuffer getBuf()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        $r4 = r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext xml>;

        specialinvoke $r1.<com.hp.hpl.jena.rdf.arp.impl.ARPString: void <init>(com.hp.hpl.jena.rdf.arp.states.Frame,java.lang.String,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>(r0, $r3, $r4);

        $r5 = r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: com.hp.hpl.jena.rdf.arp.impl.Taint taint>;

        $z1 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.arp.impl.Taint: boolean isTainted()>();

        if $z1 != 0 goto label2;

        $z2 = r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: boolean seenAnElement>;

        if $z2 == 0 goto label3;

     label2:
        virtualinvoke $r1.<com.hp.hpl.jena.rdf.arp.impl.ARPString: void taint()>();

     label3:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: com.hp.hpl.jena.rdf.arp.states.FrameI getParent()>();

        $r7 = (com.hp.hpl.jena.rdf.arp.states.WantsObjectFrameI) $r6;

        interfaceinvoke $r7.<com.hp.hpl.jena.rdf.arp.states.WantsObjectFrameI: void theObject(com.hp.hpl.jena.rdf.arp.impl.ANode)>($r1);

     label4:
        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: void endElement()>();

        return;
    }

    public volatile void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription r0;
        java.lang.String r1, r2;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: void processingInstruction(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public volatile void comment(char[], int, int)
    {
        int i0, i1;
        com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription r0;
        char[] r1;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.AbsWantLiteralValueOrDescription: void comment(char[],int,int)>(r1, i0, i1);

        return;
    }
}
