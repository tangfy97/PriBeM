public final class org.apache.xmlbeans.impl.piccolo.util.CharStringConverter extends java.lang.Object
{
    private static final float DEFAULT_LOAD;
    private float loadFactor;
    private int numEntries;
    private int maxEntries;
    private int hashmask;
    private char[][] keys;
    private java.lang.String[] values;

    public void <init>(int, float)
    {
        java.lang.String[] $r7;
        char[][] $r6;
        byte $b1, $b2;
        java.lang.StringBuffer $r3, $r4, $r10, $r11, $r13, $r15;
        int i0, i3, $i4, $i5, i6, $i7, $i8;
        java.lang.String $r5, $r12;
        org.apache.xmlbeans.impl.piccolo.util.CharStringConverter r0;
        java.lang.IllegalArgumentException $r14, $r16;
        float f0, $f1, $f2, $f3, $f4;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.util.CharStringConverter;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: int numEntries> = 0;

        if i0 >= 0 goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal initial capacity: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r14;

     label1:
        $b1 = f0 cmpg 0.0F;

        $i7 = (int) $b1;

        if $i7 < 0 goto label2;

        $b2 = f0 cmpl 1.0F;

        $i8 = (int) $b2;

        if $i8 <= 0 goto label3;

     label2:
        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal load factor: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(f0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r16;

     label3:
        $f1 = (float) i0;

        $f2 = $f1 / f0;

        i3 = (int) $f2;

        i6 = 16;

     label4:
        if i6 >= i3 goto label5;

        i6 = i6 << 1;

        goto label4;

     label5:
        $i4 = i6 - 1;

        r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: int hashmask> = $i4;

        $f3 = (float) i6;

        $f4 = $f3 * f0;

        $i5 = (int) $f4;

        r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: int maxEntries> = $i5;

        $r6 = newarray (char[])[i6];

        r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: char[][] keys> = $r6;

        $r7 = newarray (java.lang.String)[i6];

        r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: java.lang.String[] values> = $r7;

        r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: float loadFactor> = f0;

        return;
    }

    public void <init>()
    {
        org.apache.xmlbeans.impl.piccolo.util.CharStringConverter r0;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.util.CharStringConverter;

        specialinvoke r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: void <init>(int,float)>(0, 0.7F);

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.xmlbeans.impl.piccolo.util.CharStringConverter r0;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.util.CharStringConverter;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: void <init>(int,float)>(i0, 0.7F);

        return;
    }

    public int getCacheSize()
    {
        int $i0;
        org.apache.xmlbeans.impl.piccolo.util.CharStringConverter r0;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.util.CharStringConverter;

        $i0 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: int numEntries>;

        return $i0;
    }

    public java.lang.String convert(char[])
    {
        int $i0;
        char[] r1;
        java.lang.String $r2;
        org.apache.xmlbeans.impl.piccolo.util.CharStringConverter r0;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.util.CharStringConverter;

        r1 := @parameter0: char[];

        $i0 = lengthof r1;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: java.lang.String convert(char[],int,int)>(r1, 0, $i0);

        return $r2;
    }

    public java.lang.String convert(char[], int, int)
    {
        java.lang.String[] $r5, $r6;
        char[][] $r4, $r8;
        int $i0, $i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        java.lang.String $r2, $r3, $r7;
        org.apache.xmlbeans.impl.piccolo.util.CharStringConverter r0;
        boolean $z0;
        char[] r1, $r9, r10;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.util.CharStringConverter;

        r1 := @parameter0: char[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $i1 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: int numEntries>;

        $i0 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: int maxEntries>;

        if $i1 < $i0 goto label1;

        specialinvoke r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: void rehash()>();

     label1:
        $i4 = staticinvoke <org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: int hashKey(char[],int,int)>(r1, i2, i3);

        $i5 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: int hashmask>;

        i11 = $i4 & $i5;

     label2:
        $r8 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: char[][] keys>;

        $r9 = $r8[i11];

        if $r9 == null goto label3;

        $i8 = lengthof $r9;

        $z0 = staticinvoke <org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: boolean keysAreEqual(char[],int,int,char[],int,int)>($r9, 0, $i8, r1, i2, i3);

        if $z0 != 0 goto label3;

        $i10 = i11 - 1;

        $i9 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: int hashmask>;

        i11 = $i10 & $i9;

        goto label2;

     label3:
        if $r9 == null goto label4;

        $r6 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: java.lang.String[] values>;

        $r7 = $r6[i11];

        return $r7;

     label4:
        r10 = newarray (char)[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i2, r10, 0, i3);

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r10);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String intern()>();

        $r4 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: char[][] keys>;

        $r4[i11] = r10;

        $r5 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: java.lang.String[] values>;

        $r5[i11] = $r3;

        $i6 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: int numEntries>;

        $i7 = $i6 + 1;

        r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: int numEntries> = $i7;

        return $r3;
    }

    private void rehash()
    {
        java.lang.String[] r3, $r7;
        char[][] $r1, r2, $r4, $r5;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        java.lang.String r8;
        org.apache.xmlbeans.impl.piccolo.util.CharStringConverter r0;
        boolean $z0;
        float $f0, $f1, $f2;
        char[] r6, $r9;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.util.CharStringConverter;

        $r1 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: char[][] keys>;

        $i0 = lengthof $r1;

        i1 = $i0 << 1;

        r2 = newarray (char[])[i1];

        r3 = newarray (java.lang.String)[i1];

        i2 = i1 - 1;

        i10 = 0;

     label1:
        $r4 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: char[][] keys>;

        $i3 = lengthof $r4;

        if i10 >= $i3 goto label5;

        $r5 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: char[][] keys>;

        r6 = $r5[i10];

        $r7 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: java.lang.String[] values>;

        r8 = $r7[i10];

        if r6 == null goto label4;

        $i5 = lengthof r6;

        $i6 = staticinvoke <org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: int hashKey(char[],int,int)>(r6, 0, $i5);

        i11 = $i6 & i2;

     label2:
        $r9 = r2[i11];

        if $r9 == null goto label3;

        $i8 = lengthof $r9;

        $i7 = lengthof r6;

        $z0 = staticinvoke <org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: boolean keysAreEqual(char[],int,int,char[],int,int)>($r9, 0, $i8, r6, 0, $i7);

        if $z0 != 0 goto label3;

        $i9 = i11 - 1;

        i11 = $i9 & i2;

        goto label2;

     label3:
        r2[i11] = r6;

        r3[i11] = r8;

     label4:
        i10 = i10 + 1;

        goto label1;

     label5:
        r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: char[][] keys> = r2;

        r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: java.lang.String[] values> = r3;

        $f1 = (float) i1;

        $f0 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: float loadFactor>;

        $f2 = $f1 * $f0;

        $i4 = (int) $f2;

        r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: int maxEntries> = $i4;

        r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: int hashmask> = i2;

        return;
    }

    public void clearCache()
    {
        int $i0, i1;
        java.lang.String[] $r3;
        char[][] $r1, $r2;
        org.apache.xmlbeans.impl.piccolo.util.CharStringConverter r0;

        r0 := @this: org.apache.xmlbeans.impl.piccolo.util.CharStringConverter;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: char[][] keys>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r2 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: char[][] keys>;

        $r2[i1] = null;

        $r3 = r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: java.lang.String[] values>;

        $r3[i1] = null;

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: int numEntries> = 0;

        return;
    }

    private static final boolean keysAreEqual(char[], int, int, char[], int, int)
    {
        char $c6, $c7;
        int i0, i1, i2, $i3, i4, $i5, i8, $i9, $i10;
        char[] r0, r1;

        r0 := @parameter0: char[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: char[];

        i4 := @parameter4: int;

        i1 := @parameter5: int;

        if i0 == i1 goto label1;

        return 0;

     label1:
        i8 = 0;

     label2:
        if i8 >= i0 goto label4;

        $i3 = i2 + i8;

        $c7 = r0[$i3];

        $i5 = i4 + i8;

        $c6 = r1[$i5];

        $i9 = (int) $c7;

        $i10 = (int) $c6;

        if $i9 == $i10 goto label3;

        return 0;

     label3:
        i8 = i8 + 1;

        goto label2;

     label4:
        return 1;
    }

    private static final int hashKey(char[], int, int)
    {
        char $c3;
        int i0, i1, $i2, $i4, i5, i6, $i7;
        char[] r0;

        r0 := @parameter0: char[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i5 = 0;

        i6 = 0;

     label1:
        if i6 >= i0 goto label2;

        $i4 = i5 << 5;

        $i2 = i1 + i6;

        $c3 = r0[$i2];

        $i7 = (int) $c3;

        i5 = $i4 + $i7;

        i6 = i6 + 1;

        goto label1;

     label2:
        return i5;
    }

    public static void <clinit>()
    {
        <org.apache.xmlbeans.impl.piccolo.util.CharStringConverter: float DEFAULT_LOAD> = 0.7F;

        return;
    }
}
