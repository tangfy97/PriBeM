class com.google.inject.internal.TypeConverterBindingProcessor$5 extends java.lang.Object implements com.google.inject.spi.TypeConverter
{
    final java.lang.reflect.Method val$parser;
    final java.lang.Class val$wrapperType;
    final com.google.inject.internal.TypeConverterBindingProcessor this$0;

    void <init>(com.google.inject.internal.TypeConverterBindingProcessor, java.lang.reflect.Method, java.lang.Class)
    {
        com.google.inject.internal.TypeConverterBindingProcessor$5 r0;
        com.google.inject.internal.TypeConverterBindingProcessor r1;
        java.lang.Class r3;
        java.lang.reflect.Method r2;

        r0 := @this: com.google.inject.internal.TypeConverterBindingProcessor$5;

        r1 := @parameter0: com.google.inject.internal.TypeConverterBindingProcessor;

        r2 := @parameter1: java.lang.reflect.Method;

        r3 := @parameter2: java.lang.Class;

        r0.<com.google.inject.internal.TypeConverterBindingProcessor$5: com.google.inject.internal.TypeConverterBindingProcessor this$0> = r1;

        r0.<com.google.inject.internal.TypeConverterBindingProcessor$5: java.lang.reflect.Method val$parser> = r2;

        r0.<com.google.inject.internal.TypeConverterBindingProcessor$5: java.lang.Class val$wrapperType> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object convert(java.lang.String, com.google.inject.TypeLiteral)
    {
        java.lang.Throwable $r7;
        java.lang.IllegalAccessException $r9;
        java.lang.Object[] $r1;
        java.lang.RuntimeException $r6;
        java.lang.AssertionError $r10;
        java.lang.reflect.InvocationTargetException $r5;
        com.google.inject.internal.TypeConverterBindingProcessor$5 r0;
        java.lang.Object $r4;
        java.lang.String r2, $r8;
        java.lang.reflect.Method $r3;
        com.google.inject.TypeLiteral r11;

        r0 := @this: com.google.inject.internal.TypeConverterBindingProcessor$5;

        r2 := @parameter0: java.lang.String;

        r11 := @parameter1: com.google.inject.TypeLiteral;

     label1:
        $r3 = r0.<com.google.inject.internal.TypeConverterBindingProcessor$5: java.lang.reflect.Method val$parser>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r1);

     label2:
        return $r4;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r10;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r7 = virtualinvoke $r5.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r8 = virtualinvoke $r7.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r6;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    public java.lang.String toString()
    {
        com.google.inject.internal.TypeConverterBindingProcessor$5 r2;
        java.lang.StringBuilder $r0, $r1, $r5, $r6;
        java.lang.Class $r3;
        java.lang.String $r4, $r7;

        r2 := @this: com.google.inject.internal.TypeConverterBindingProcessor$5;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TypeConverter<");

        $r3 = r2.<com.google.inject.internal.TypeConverterBindingProcessor$5: java.lang.Class val$wrapperType>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }
}
