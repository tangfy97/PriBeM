public final class org.apache.http.util.ByteArrayBuffer extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private byte[] buffer;
    private int len;

    public void <init>(int)
    {
        byte[] $r1;
        int i0;
        java.lang.IllegalArgumentException $r2;
        org.apache.http.util.ByteArrayBuffer r0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffer capacity may not be negative");

        throw $r2;

     label1:
        $r1 = newarray (byte)[i0];

        r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer> = $r1;

        return;
    }

    private void expand(int)
    {
        byte[] $r1, r2, $r3;
        int $i0, i1, $i2, $i3, $i4;
        org.apache.http.util.ByteArrayBuffer r0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        i1 := @parameter0: int;

        $r1 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i0 = lengthof $r1;

        $i2 = $i0 << 1;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, i1);

        r2 = newarray (byte)[$i3];

        $r3 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i4 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i4);

        r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer> = r2;

        return;
    }

    public void append(byte[], int, int)
    {
        byte[] r0, $r2, $r3;
        java.lang.IndexOutOfBoundsException $r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10;
        java.lang.String $r12;
        org.apache.http.util.ByteArrayBuffer r1;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r1 := @this: org.apache.http.util.ByteArrayBuffer;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        return;

     label1:
        if i0 < 0 goto label2;

        $i2 = lengthof r0;

        if i0 > $i2 goto label2;

        if i1 < 0 goto label2;

        $i3 = i0 + i1;

        if $i3 < 0 goto label2;

        $i5 = i0 + i1;

        $i4 = lengthof r0;

        if $i5 <= $i4 goto label3;

     label2:
        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("off: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" len: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" b.length: ");

        $i10 = lengthof r0;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r12);

        throw $r4;

     label3:
        if i1 != 0 goto label4;

        return;

     label4:
        $i6 = r1.<org.apache.http.util.ByteArrayBuffer: int len>;

        i7 = $i6 + i1;

        $r2 = r1.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i8 = lengthof $r2;

        if i7 <= $i8 goto label5;

        specialinvoke r1.<org.apache.http.util.ByteArrayBuffer: void expand(int)>(i7);

     label5:
        $r3 = r1.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i9 = r1.<org.apache.http.util.ByteArrayBuffer: int len>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, $r3, $i9, i1);

        r1.<org.apache.http.util.ByteArrayBuffer: int len> = i7;

        return;
    }

    public void append(int)
    {
        byte[] $r1, $r2;
        byte $b4;
        int $i0, i1, $i2, i3, $i5;
        org.apache.http.util.ByteArrayBuffer r0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        i3 := @parameter0: int;

        $i0 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        i1 = $i0 + 1;

        $r1 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i2 = lengthof $r1;

        if i1 <= $i2 goto label1;

        specialinvoke r0.<org.apache.http.util.ByteArrayBuffer: void expand(int)>(i1);

     label1:
        $r2 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i5 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        $b4 = (byte) i3;

        $r2[$i5] = $b4;

        r0.<org.apache.http.util.ByteArrayBuffer: int len> = i1;

        return;
    }

    public void append(char[], int, int)
    {
        byte[] $r2, $r3;
        java.lang.IndexOutOfBoundsException $r4;
        byte $b10;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, $i8, $i11, i12, i13;
        java.lang.String $r12;
        org.apache.http.util.ByteArrayBuffer r1;
        char $c9;
        char[] r0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r1 := @this: org.apache.http.util.ByteArrayBuffer;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        return;

     label1:
        if i0 < 0 goto label2;

        $i2 = lengthof r0;

        if i0 > $i2 goto label2;

        if i1 < 0 goto label2;

        $i3 = i0 + i1;

        if $i3 < 0 goto label2;

        $i5 = i0 + i1;

        $i4 = lengthof r0;

        if $i5 <= $i4 goto label3;

     label2:
        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("off: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" len: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" b.length: ");

        $i11 = lengthof r0;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r12);

        throw $r4;

     label3:
        if i1 != 0 goto label4;

        return;

     label4:
        i6 = r1.<org.apache.http.util.ByteArrayBuffer: int len>;

        i7 = i6 + i1;

        $r2 = r1.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i8 = lengthof $r2;

        if i7 <= $i8 goto label5;

        specialinvoke r1.<org.apache.http.util.ByteArrayBuffer: void expand(int)>(i7);

     label5:
        i12 = i0;

        i13 = i6;

     label6:
        if i13 >= i7 goto label7;

        $r3 = r1.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $c9 = r0[i12];

        $b10 = (byte) $c9;

        $r3[i13] = $b10;

        i12 = i12 + 1;

        i13 = i13 + 1;

        goto label6;

     label7:
        r1.<org.apache.http.util.ByteArrayBuffer: int len> = i7;

        return;
    }

    public void append(org.apache.http.util.CharArrayBuffer, int, int)
    {
        org.apache.http.util.CharArrayBuffer r0;
        int i0, i1;
        char[] $r2;
        org.apache.http.util.ByteArrayBuffer r1;

        r1 := @this: org.apache.http.util.ByteArrayBuffer;

        r0 := @parameter0: org.apache.http.util.CharArrayBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: char[] buffer()>();

        virtualinvoke r1.<org.apache.http.util.ByteArrayBuffer: void append(char[],int,int)>($r2, i0, i1);

        return;
    }

    public void clear()
    {
        org.apache.http.util.ByteArrayBuffer r0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        r0.<org.apache.http.util.ByteArrayBuffer: int len> = 0;

        return;
    }

    public byte[] toByteArray()
    {
        byte[] r1, $r2;
        int $i0, $i1, $i2;
        org.apache.http.util.ByteArrayBuffer r0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $i0 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        r1 = newarray (byte)[$i0];

        $i1 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        if $i1 <= 0 goto label1;

        $r2 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i2 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i2);

     label1:
        return r1;
    }

    public int byteAt(int)
    {
        byte[] $r1;
        byte $b1;
        int i0, $i2;
        org.apache.http.util.ByteArrayBuffer r0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $b1 = $r1[i0];

        $i2 = (int) $b1;

        return $i2;
    }

    public int capacity()
    {
        int $i0;
        byte[] $r1;
        org.apache.http.util.ByteArrayBuffer r0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $r1 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int length()
    {
        int $i0;
        org.apache.http.util.ByteArrayBuffer r0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $i0 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        return $i0;
    }

    public void ensureCapacity(int)
    {
        byte[] $r1;
        int i0, $i1, $i2, i3, $i4, $i5;
        org.apache.http.util.ByteArrayBuffer r0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i2 = lengthof $r1;

        $i1 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        i3 = $i2 - $i1;

        if i0 <= i3 goto label2;

        $i4 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        $i5 = $i4 + i0;

        specialinvoke r0.<org.apache.http.util.ByteArrayBuffer: void expand(int)>($i5);

     label2:
        return;
    }

    public byte[] buffer()
    {
        byte[] $r1;
        org.apache.http.util.ByteArrayBuffer r0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $r1 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        return $r1;
    }

    public void setLength(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        byte[] $r6, $r9;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r7;
        java.lang.String $r8;
        org.apache.http.util.ByteArrayBuffer r5;

        r5 := @this: org.apache.http.util.ByteArrayBuffer;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r9 = r5.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i2 = lengthof $r9;

        if i0 <= $i2 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("len: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < 0 or > buffer len: ");

        $r6 = r5.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i1 = lengthof $r6;

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r0;

     label2:
        r5.<org.apache.http.util.ByteArrayBuffer: int len> = i0;

        return;
    }

    public boolean isEmpty()
    {
        int $i0;
        org.apache.http.util.ByteArrayBuffer r0;
        boolean $z0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $i0 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isFull()
    {
        byte[] $r1;
        int $i0, $i1;
        org.apache.http.util.ByteArrayBuffer r0;
        boolean $z0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $i1 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        $r1 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int indexOf(byte, int, int)
    {
        byte[] $r1;
        byte b1, $b2;
        int $i0, i3, i4, i5, $i7, $i8, $i9, $i11;
        org.apache.http.util.ByteArrayBuffer r0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        b1 := @parameter0: byte;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        if i3 >= 0 goto label1;

        i3 = 0;

     label1:
        $i0 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        if i4 <= $i0 goto label2;

        i4 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

     label2:
        if i3 <= i4 goto label3;

        $i7 = (int) -1;

        return $i7;

     label3:
        i5 = i3;

     label4:
        if i5 >= i4 goto label6;

        $r1 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $b2 = $r1[i5];

        $i8 = (int) $b2;

        $i9 = (int) b1;

        if $i8 != $i9 goto label5;

        return i5;

     label5:
        i5 = i5 + 1;

        goto label4;

     label6:
        $i11 = (int) -1;

        return $i11;
    }

    public int indexOf(byte)
    {
        byte b0;
        int $i1, $i2;
        org.apache.http.util.ByteArrayBuffer r0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        b0 := @parameter0: byte;

        $i1 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        $i2 = virtualinvoke r0.<org.apache.http.util.ByteArrayBuffer: int indexOf(byte,int,int)>(b0, 0, $i1);

        return $i2;
    }

    public static void <clinit>()
    {
        <org.apache.http.util.ByteArrayBuffer: long serialVersionUID> = 4359112959524048036L;

        return;
    }
}
