public class org.springframework.core.LocalVariableTableParameterNameDiscoverer extends java.lang.Object implements org.springframework.core.ParameterNameDiscoverer
{
    private static org.apache.commons.logging.Log logger;
    private static final java.util.Map NO_DEBUG_INFO_MAP;
    private final java.util.Map parameterNamesCache;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;
        java.util.Map $r1;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/core/LocalVariableTableParameterNameDiscoverer;");

        <org.springframework.core.LocalVariableTableParameterNameDiscoverer: org.apache.commons.logging.Log logger> = $r0;

        $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        <org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map NO_DEBUG_INFO_MAP> = $r1;

        return;
    }

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.springframework.core.LocalVariableTableParameterNameDiscoverer r0;

        r0 := @this: org.springframework.core.LocalVariableTableParameterNameDiscoverer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map parameterNamesCache> = $r1;

        return;
    }

    public java.lang.String[] getParameterNames(java.lang.reflect.Method)
    {
        java.lang.String[] $r7;
        org.springframework.core.LocalVariableTableParameterNameDiscoverer r2;
        java.util.Map $r3, $r5, $r8, $r9, r10;
        java.lang.Class $r1;
        java.lang.Object $r4, $r6;
        java.lang.reflect.Method r0;

        r2 := @this: org.springframework.core.LocalVariableTableParameterNameDiscoverer;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r3 = r2.<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map parameterNamesCache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r10 = (java.util.Map) $r4;

        if r10 != null goto label1;

        $r8 = specialinvoke r2.<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map inspectClass(java.lang.Class)>($r1);

        r10 = $r8;

        $r9 = r2.<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map parameterNamesCache>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r8);

     label1:
        $r5 = <org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map NO_DEBUG_INFO_MAP>;

        if r10 == $r5 goto label2;

        $r6 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r7 = (java.lang.String[]) $r6;

        return $r7;

     label2:
        return null;
    }

    public java.lang.String[] getParameterNames(java.lang.reflect.Constructor)
    {
        java.lang.String[] $r7;
        java.lang.reflect.Constructor r0;
        org.springframework.core.LocalVariableTableParameterNameDiscoverer r2;
        java.util.Map $r3, $r5, $r8, $r9, r10;
        java.lang.Class $r1;
        java.lang.Object $r4, $r6;

        r2 := @this: org.springframework.core.LocalVariableTableParameterNameDiscoverer;

        r0 := @parameter0: java.lang.reflect.Constructor;

        $r1 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r3 = r2.<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map parameterNamesCache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r10 = (java.util.Map) $r4;

        if r10 != null goto label1;

        $r8 = specialinvoke r2.<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map inspectClass(java.lang.Class)>($r1);

        r10 = $r8;

        $r9 = r2.<org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map parameterNamesCache>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r8);

     label1:
        $r5 = <org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map NO_DEBUG_INFO_MAP>;

        if r10 == $r5 goto label2;

        $r6 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r7 = (java.lang.String[]) $r6;

        return $r7;

     label2:
        return null;
    }

    private java.util.Map inspectClass(java.lang.Class)
    {
        java.lang.Throwable $r14;
        java.util.Map $r7, $r16;
        java.lang.String $r1, $r12, $r23;
        boolean $z0, $z1;
        org.springframework.core.LocalVariableTableParameterNameDiscoverer$ParameterNameDiscoveringVisitor $r5;
        java.util.concurrent.ConcurrentHashMap $r4;
        java.io.IOException $r13, $r15, $r17, $r24;
        org.springframework.core.LocalVariableTableParameterNameDiscoverer r25;
        org.springframework.asm.ClassReader $r3;
        java.lang.Class r0;
        org.apache.commons.logging.Log $r6, $r9, $r18, $r20;
        java.lang.StringBuilder $r8, $r10, $r11, $r19, $r21, $r22;
        java.io.InputStream $r2;

        r25 := @this: org.springframework.core.LocalVariableTableParameterNameDiscoverer;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getClassFileName(java.lang.Class)>(r0);

        $r2 = virtualinvoke r0.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r1);

        if $r2 != null goto label02;

        $r6 = <org.springframework.core.LocalVariableTableParameterNameDiscoverer: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label01;

        $r9 = <org.springframework.core.LocalVariableTableParameterNameDiscoverer: org.apache.commons.logging.Log logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot find \'.class\' file for class [");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] - unable to determine constructors/methods parameter names");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12);

     label01:
        $r7 = <org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map NO_DEBUG_INFO_MAP>;

        return $r7;

     label02:
        $r3 = new org.springframework.asm.ClassReader;

        specialinvoke $r3.<org.springframework.asm.ClassReader: void <init>(java.io.InputStream)>($r2);

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r5 = new org.springframework.core.LocalVariableTableParameterNameDiscoverer$ParameterNameDiscoveringVisitor;

        specialinvoke $r5.<org.springframework.core.LocalVariableTableParameterNameDiscoverer$ParameterNameDiscoveringVisitor: void <init>(java.lang.Class,java.util.Map)>(r0, $r4);

        virtualinvoke $r3.<org.springframework.asm.ClassReader: void accept(org.springframework.asm.ClassVisitor,boolean)>($r5, 0);

     label03:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label04:
        goto label06;

     label05:
        $r24 := @caughtexception;

     label06:
        return $r4;

     label07:
        $r17 := @caughtexception;

        $r18 = <org.springframework.core.LocalVariableTableParameterNameDiscoverer: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r18.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label08;

        $r20 = <org.springframework.core.LocalVariableTableParameterNameDiscoverer: org.apache.commons.logging.Log logger>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Exception thrown while reading \'.class\' file for class [");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] - unable to determine constructors/methods parameter names");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r23, $r17);

     label08:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label09:
        goto label16;

     label10:
        $r15 := @caughtexception;

        goto label16;

     label11:
        $r14 := @caughtexception;

     label12:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label13:
        goto label15;

     label14:
        $r13 := @caughtexception;

     label15:
        throw $r14;

     label16:
        $r16 = <org.springframework.core.LocalVariableTableParameterNameDiscoverer: java.util.Map NO_DEBUG_INFO_MAP>;

        return $r16;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label02 to label03 with label07;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.io.IOException from label12 to label13 with label14;
    }
}
