public final class org.apache.lucene.util.automaton.SpecialOperations extends java.lang.Object
{

    private void <init>()
    {
        org.apache.lucene.util.automaton.SpecialOperations r0;

        r0 := @this: org.apache.lucene.util.automaton.SpecialOperations;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static int findIndex(int, int[])
    {
        int[] r0;
        int $i0, $i1, i2, i3, $i4, $i5, i6, i7;

        i3 := @parameter0: int;

        r0 := @parameter1: int[];

        i6 = 0;

        i7 = lengthof r0;

     label1:
        $i0 = i7 - i6;

        if $i0 <= 1 goto label5;

        $i1 = i6 + i7;

        i2 = $i1 >>> 1;

        $i4 = r0[i2];

        if $i4 <= i3 goto label2;

        i7 = i2;

        goto label4;

     label2:
        $i5 = r0[i2];

        if $i5 >= i3 goto label3;

        i6 = i2;

        goto label4;

     label3:
        return i2;

     label4:
        goto label1;

     label5:
        return i6;
    }

    public static boolean isFinite(org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Automaton r0;
        org.apache.lucene.util.automaton.State $r2;
        int $i0, $i1;
        java.util.BitSet $r1, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $r1 = new java.util.BitSet;

        $i0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: int getNumberOfStates()>();

        specialinvoke $r1.<java.util.BitSet: void <init>(int)>($i0);

        $r3 = new java.util.BitSet;

        $i1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: int getNumberOfStates()>();

        specialinvoke $r3.<java.util.BitSet: void <init>(int)>($i1);

        $z1 = staticinvoke <org.apache.lucene.util.automaton.SpecialOperations: boolean isFinite(org.apache.lucene.util.automaton.State,java.util.BitSet,java.util.BitSet)>($r2, $r1, $r3);

        return $z1;
    }

    private static boolean isFinite(org.apache.lucene.util.automaton.State, java.util.BitSet, java.util.BitSet)
    {
        java.lang.Iterable $r2;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r3;
        org.apache.lucene.util.automaton.Transition r6;
        org.apache.lucene.util.automaton.State r1, $r7, $r8, $r9;
        java.lang.Object $r5;
        java.util.BitSet r0, r4;

        r1 := @parameter0: org.apache.lucene.util.automaton.State;

        r0 := @parameter1: java.util.BitSet;

        r4 := @parameter2: java.util.BitSet;

        $i0 = r1.<org.apache.lucene.util.automaton.State: int number>;

        virtualinvoke r0.<java.util.BitSet: void set(int)>($i0);

        $r2 = virtualinvoke r1.<org.apache.lucene.util.automaton.State: java.lang.Iterable getTransitions()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.lucene.util.automaton.Transition) $r5;

        $r7 = r6.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $i3 = $r7.<org.apache.lucene.util.automaton.State: int number>;

        $z1 = virtualinvoke r0.<java.util.BitSet: boolean get(int)>($i3);

        if $z1 != 0 goto label2;

        $r8 = r6.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $i4 = $r8.<org.apache.lucene.util.automaton.State: int number>;

        $z2 = virtualinvoke r4.<java.util.BitSet: boolean get(int)>($i4);

        if $z2 != 0 goto label3;

        $r9 = r6.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $z3 = staticinvoke <org.apache.lucene.util.automaton.SpecialOperations: boolean isFinite(org.apache.lucene.util.automaton.State,java.util.BitSet,java.util.BitSet)>($r9, r0, r4);

        if $z3 != 0 goto label3;

     label2:
        return 0;

     label3:
        goto label1;

     label4:
        $i1 = r1.<org.apache.lucene.util.automaton.State: int number>;

        virtualinvoke r0.<java.util.BitSet: void clear(int)>($i1);

        $i2 = r1.<org.apache.lucene.util.automaton.State: int number>;

        virtualinvoke r4.<java.util.BitSet: void set(int)>($i2);

        return 1;
    }

    public static java.lang.String getCommonPrefix(org.apache.lucene.util.automaton.Automaton)
    {
        java.lang.Iterable $r4;
        java.util.HashSet $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3, $r9;
        boolean $z0, $z1, $z2, z3;
        java.util.Iterator $r5;
        org.apache.lucene.util.automaton.Automaton r0;
        org.apache.lucene.util.automaton.Transition r7;
        org.apache.lucene.util.automaton.State $r8, r10;
        java.lang.StringBuilder $r1;
        java.lang.Object $r6;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        return $r9;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r10 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

     label2:
        z3 = 1;

        virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>(r10);

        $z1 = r10.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z1 != 0 goto label3;

        $i0 = virtualinvoke r10.<org.apache.lucene.util.automaton.State: int numTransitions()>();

        if $i0 != 1 goto label3;

        $r4 = virtualinvoke r10.<org.apache.lucene.util.automaton.State: java.lang.Iterable getTransitions()>();

        $r5 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.util.automaton.Transition) $r6;

        $i2 = r7.<org.apache.lucene.util.automaton.Transition: int min>;

        $i1 = r7.<org.apache.lucene.util.automaton.Transition: int max>;

        if $i2 != $i1 goto label3;

        $r8 = r7.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $z2 = virtualinvoke $r2.<java.util.HashSet: boolean contains(java.lang.Object)>($r8);

        if $z2 != 0 goto label3;

        $i3 = r7.<org.apache.lucene.util.automaton.Transition: int min>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>($i3);

        r10 = r7.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        z3 = 0;

     label3:
        if z3 == 0 goto label2;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static org.apache.lucene.util.BytesRef getCommonPrefixBytesRef(org.apache.lucene.util.automaton.Automaton)
    {
        byte[] $r8;
        java.lang.Iterable $r3;
        java.util.HashSet $r2;
        byte $b7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8;
        java.lang.String $r10;
        boolean $z0, $z1, $z2, z3;
        java.util.Iterator $r4;
        org.apache.lucene.util.automaton.Automaton r0;
        org.apache.lucene.util.BytesRef $r1, $r9;
        org.apache.lucene.util.automaton.Transition r6;
        org.apache.lucene.util.automaton.State $r7, r11;
        java.lang.Object $r5;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        $r9 = new org.apache.lucene.util.BytesRef;

        $r10 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        specialinvoke $r9.<org.apache.lucene.util.BytesRef: void <init>(java.lang.CharSequence)>($r10);

        return $r9;

     label1:
        $r1 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r1.<org.apache.lucene.util.BytesRef: void <init>(int)>(10);

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r11 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

     label2:
        z3 = 1;

        virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>(r11);

        $z1 = r11.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z1 != 0 goto label3;

        $i0 = virtualinvoke r11.<org.apache.lucene.util.automaton.State: int numTransitions()>();

        if $i0 != 1 goto label3;

        $r3 = virtualinvoke r11.<org.apache.lucene.util.automaton.State: java.lang.Iterable getTransitions()>();

        $r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.lucene.util.automaton.Transition) $r5;

        $i2 = r6.<org.apache.lucene.util.automaton.Transition: int min>;

        $i1 = r6.<org.apache.lucene.util.automaton.Transition: int max>;

        if $i2 != $i1 goto label3;

        $r7 = r6.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $z2 = virtualinvoke $r2.<java.util.HashSet: boolean contains(java.lang.Object)>($r7);

        if $z2 != 0 goto label3;

        $i3 = $r1.<org.apache.lucene.util.BytesRef: int length>;

        $i4 = $i3 + 1;

        $r1.<org.apache.lucene.util.BytesRef: int length> = $i4;

        virtualinvoke $r1.<org.apache.lucene.util.BytesRef: void grow(int)>($i4);

        $r8 = $r1.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i5 = $r1.<org.apache.lucene.util.BytesRef: int length>;

        $i8 = $i5 - 1;

        $i6 = r6.<org.apache.lucene.util.automaton.Transition: int min>;

        $b7 = (byte) $i6;

        $r8[$i8] = $b7;

        r11 = r6.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        z3 = 0;

     label3:
        if z3 == 0 goto label2;

        return $r1;
    }

    public static java.lang.String getCommonSuffix(org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Automaton r0, $r1;
        java.lang.StringBuilder $r2, $r4;
        java.lang.String $r3, $r5, $r6;
        boolean $z0;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        return $r6;

     label1:
        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton clone()>();

        staticinvoke <org.apache.lucene.util.automaton.SpecialOperations: java.util.Set reverse(org.apache.lucene.util.automaton.Automaton)>($r1);

        virtualinvoke $r1.<org.apache.lucene.util.automaton.Automaton: void determinize()>();

        $r2 = new java.lang.StringBuilder;

        $r3 = staticinvoke <org.apache.lucene.util.automaton.SpecialOperations: java.lang.String getCommonPrefix(org.apache.lucene.util.automaton.Automaton)>($r1);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder reverse()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static org.apache.lucene.util.BytesRef getCommonSuffixBytesRef(org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Automaton r0, $r1;
        org.apache.lucene.util.BytesRef $r2, $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        $r3 = new org.apache.lucene.util.BytesRef;

        $r4 = r0.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        specialinvoke $r3.<org.apache.lucene.util.BytesRef: void <init>(java.lang.CharSequence)>($r4);

        return $r3;

     label1:
        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton clone()>();

        staticinvoke <org.apache.lucene.util.automaton.SpecialOperations: java.util.Set reverse(org.apache.lucene.util.automaton.Automaton)>($r1);

        virtualinvoke $r1.<org.apache.lucene.util.automaton.Automaton: void determinize()>();

        $r2 = staticinvoke <org.apache.lucene.util.automaton.SpecialOperations: org.apache.lucene.util.BytesRef getCommonPrefixBytesRef(org.apache.lucene.util.automaton.Automaton)>($r1);

        staticinvoke <org.apache.lucene.util.automaton.SpecialOperations: void reverseBytes(org.apache.lucene.util.BytesRef)>($r2);

        return $r2;
    }

    private static void reverseBytes(org.apache.lucene.util.BytesRef)
    {
        byte[] $r1, $r2, $r3, $r4;
        byte b5, $b12;
        int $i0, $i1, i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i18, i19;
        org.apache.lucene.util.BytesRef r0;

        r0 := @parameter0: org.apache.lucene.util.BytesRef;

        $i0 = r0.<org.apache.lucene.util.BytesRef: int length>;

        if $i0 > 1 goto label1;

        return;

     label1:
        $i1 = r0.<org.apache.lucene.util.BytesRef: int length>;

        i2 = $i1 >> 1;

        i19 = r0.<org.apache.lucene.util.BytesRef: int offset>;

     label2:
        $i3 = r0.<org.apache.lucene.util.BytesRef: int offset>;

        $i4 = $i3 + i2;

        if i19 >= $i4 goto label3;

        $r1 = r0.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        b5 = $r1[i19];

        $r3 = r0.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $r2 = r0.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i6 = r0.<org.apache.lucene.util.BytesRef: int offset>;

        $i8 = $i6 * 2;

        $i7 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $i9 = $i8 + $i7;

        $i10 = $i9 - i19;

        $i11 = $i10 - 1;

        $b12 = $r2[$i11];

        $r3[i19] = $b12;

        $r4 = r0.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i13 = r0.<org.apache.lucene.util.BytesRef: int offset>;

        $i15 = $i13 * 2;

        $i14 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $i16 = $i15 + $i14;

        $i17 = $i16 - i19;

        $i18 = $i17 - 1;

        $r4[$i18] = b5;

        i19 = i19 + 1;

        goto label2;

     label3:
        return;
    }

    public static java.util.Set reverse(org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.Transition[] $r10, $r12;
        boolean $z0, $z1, $z2;
        org.apache.lucene.util.automaton.Automaton r0;
        java.util.Set r26;
        java.lang.Object[] $r11;
        java.util.HashMap $r1;
        java.lang.Iterable $r13;
        java.util.HashSet $r3, $r20, $r21;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i8, i9, i10;
        java.util.Iterator $r6, $r14;
        org.apache.lucene.util.automaton.Transition r16, $r19;
        org.apache.lucene.util.automaton.State $r4, $r5, $r8, $r17, r22, r23, r24, r25, r27;
        org.apache.lucene.util.automaton.State[] $r2;
        java.lang.Object $r7, $r9, $r15, $r18;

        r0 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: void expandSingleton()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getNumberedStates()>();

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        i3 = lengthof $r2;

        i4 = 0;

     label01:
        if i4 >= i3 goto label03;

        r22 = $r2[i4];

        $z2 = virtualinvoke r22.<org.apache.lucene.util.automaton.State: boolean isAccept()>();

        if $z2 == 0 goto label02;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r22);

     label02:
        i4 = i4 + 1;

        goto label01;

     label03:
        i5 = lengthof $r2;

        i6 = 0;

     label04:
        if i6 >= i5 goto label05;

        r23 = $r2[i6];

        $r21 = new java.util.HashSet;

        specialinvoke $r21.<java.util.HashSet: void <init>()>();

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r23, $r21);

        r23.<org.apache.lucene.util.automaton.State: boolean accept> = 0;

        i6 = i6 + 1;

        goto label04;

     label05:
        i7 = lengthof $r2;

        i8 = 0;

     label06:
        if i8 >= i7 goto label09;

        r24 = $r2[i8];

        $r13 = virtualinvoke r24.<org.apache.lucene.util.automaton.State: java.lang.Iterable getTransitions()>();

        $r14 = interfaceinvoke $r13.<java.lang.Iterable: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.apache.lucene.util.automaton.Transition) $r15;

        $r17 = r16.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $r18 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r17);

        $r20 = (java.util.HashSet) $r18;

        $r19 = new org.apache.lucene.util.automaton.Transition;

        $i2 = r16.<org.apache.lucene.util.automaton.Transition: int min>;

        $i1 = r16.<org.apache.lucene.util.automaton.Transition: int max>;

        specialinvoke $r19.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>($i2, $i1, r24);

        virtualinvoke $r20.<java.util.HashSet: boolean add(java.lang.Object)>($r19);

        goto label07;

     label08:
        i8 = i8 + 1;

        goto label06;

     label09:
        i9 = lengthof $r2;

        i10 = 0;

     label10:
        if i10 >= i9 goto label11;

        r25 = $r2[i10];

        $r9 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r25);

        r26 = (java.util.Set) $r9;

        $i0 = interfaceinvoke r26.<java.util.Set: int size()>();

        $r10 = newarray (org.apache.lucene.util.automaton.Transition)[$i0];

        $r11 = interfaceinvoke r26.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (org.apache.lucene.util.automaton.Transition[]) $r11;

        virtualinvoke r25.<org.apache.lucene.util.automaton.State: void setTransitions(org.apache.lucene.util.automaton.Transition[])>($r12);

        i10 = i10 + 1;

        goto label10;

     label11:
        $r4 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $r4.<org.apache.lucene.util.automaton.State: boolean accept> = 1;

        $r5 = new org.apache.lucene.util.automaton.State;

        specialinvoke $r5.<org.apache.lucene.util.automaton.State: void <init>()>();

        r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial> = $r5;

        $r6 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r27 = (org.apache.lucene.util.automaton.State) $r7;

        $r8 = r0.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        virtualinvoke $r8.<org.apache.lucene.util.automaton.State: void addEpsilon(org.apache.lucene.util.automaton.State)>(r27);

        goto label12;

     label13:
        r0.<org.apache.lucene.util.automaton.Automaton: boolean deterministic> = 0;

        virtualinvoke r0.<org.apache.lucene.util.automaton.Automaton: void clearNumberedStates()>();

        return $r3;
    }

    public static java.util.Set getFiniteStrings(org.apache.lucene.util.automaton.Automaton, int)
    {
        org.apache.lucene.util.automaton.Automaton r1;
        org.apache.lucene.util.automaton.State $r3;
        org.apache.lucene.util.IntsRef $r4, $r5, $r7;
        java.util.HashSet $r0, $r2;
        int i0;
        java.lang.String $r6;
        boolean $z0, $z1;

        r1 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        i0 := @parameter1: int;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $z0 = virtualinvoke r1.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label2;

        if i0 <= 0 goto label1;

        $r6 = r1.<org.apache.lucene.util.automaton.Automaton: java.lang.String singleton>;

        $r5 = new org.apache.lucene.util.IntsRef;

        specialinvoke $r5.<org.apache.lucene.util.IntsRef: void <init>()>();

        $r7 = staticinvoke <org.apache.lucene.util.fst.Util: org.apache.lucene.util.IntsRef toUTF32(java.lang.CharSequence,org.apache.lucene.util.IntsRef)>($r6, $r5);

        virtualinvoke $r0.<java.util.HashSet: boolean add(java.lang.Object)>($r7);

        goto label3;

     label1:
        return null;

     label2:
        $r3 = r1.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r4 = new org.apache.lucene.util.IntsRef;

        specialinvoke $r4.<org.apache.lucene.util.IntsRef: void <init>()>();

        $z1 = staticinvoke <org.apache.lucene.util.automaton.SpecialOperations: boolean getFiniteStrings(org.apache.lucene.util.automaton.State,java.util.HashSet,java.util.HashSet,org.apache.lucene.util.IntsRef,int)>($r3, $r2, $r0, $r4, i0);

        if $z1 != 0 goto label3;

        return null;

     label3:
        return $r0;
    }

    private static boolean getFiniteStrings(org.apache.lucene.util.automaton.State, java.util.HashSet, java.util.HashSet, org.apache.lucene.util.IntsRef, int)
    {
        java.lang.Iterable $r2;
        org.apache.lucene.util.IntsRef r7, $r11;
        java.util.HashSet r0, r10;
        int[] $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, i10;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r3;
        org.apache.lucene.util.automaton.Transition r5;
        org.apache.lucene.util.automaton.State r1, $r6, $r9, $r12;
        java.lang.Object $r4;

        r1 := @parameter0: org.apache.lucene.util.automaton.State;

        r0 := @parameter1: java.util.HashSet;

        r10 := @parameter2: java.util.HashSet;

        r7 := @parameter3: org.apache.lucene.util.IntsRef;

        i6 := @parameter4: int;

        virtualinvoke r0.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        $r2 = virtualinvoke r1.<org.apache.lucene.util.automaton.State: java.lang.Iterable getTransitions()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.util.automaton.Transition) $r4;

        $r6 = r5.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $z1 = virtualinvoke r0.<java.util.HashSet: boolean contains(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        i10 = r5.<org.apache.lucene.util.automaton.Transition: int min>;

     label3:
        $i0 = r5.<org.apache.lucene.util.automaton.Transition: int max>;

        if i10 > $i0 goto label6;

        $i1 = r7.<org.apache.lucene.util.IntsRef: int length>;

        $i2 = $i1 + 1;

        virtualinvoke r7.<org.apache.lucene.util.IntsRef: void grow(int)>($i2);

        $r8 = r7.<org.apache.lucene.util.IntsRef: int[] ints>;

        $i3 = r7.<org.apache.lucene.util.IntsRef: int length>;

        $r8[$i3] = i10;

        $i4 = r7.<org.apache.lucene.util.IntsRef: int length>;

        $i5 = $i4 + 1;

        r7.<org.apache.lucene.util.IntsRef: int length> = $i5;

        $r9 = r5.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $z2 = $r9.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z2 == 0 goto label4;

        $r11 = staticinvoke <org.apache.lucene.util.IntsRef: org.apache.lucene.util.IntsRef deepCopyOf(org.apache.lucene.util.IntsRef)>(r7);

        virtualinvoke r10.<java.util.HashSet: boolean add(java.lang.Object)>($r11);

        if i6 < 0 goto label4;

        $i9 = virtualinvoke r10.<java.util.HashSet: int size()>();

        if $i9 <= i6 goto label4;

        return 0;

     label4:
        $r12 = r5.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $z3 = staticinvoke <org.apache.lucene.util.automaton.SpecialOperations: boolean getFiniteStrings(org.apache.lucene.util.automaton.State,java.util.HashSet,java.util.HashSet,org.apache.lucene.util.IntsRef,int)>($r12, r0, r10, r7, i6);

        if $z3 != 0 goto label5;

        return 0;

     label5:
        $i7 = r7.<org.apache.lucene.util.IntsRef: int length>;

        $i8 = $i7 - 1;

        r7.<org.apache.lucene.util.IntsRef: int length> = $i8;

        i10 = i10 + 1;

        goto label3;

     label6:
        goto label1;

     label7:
        virtualinvoke r0.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

        return 1;
    }
}
