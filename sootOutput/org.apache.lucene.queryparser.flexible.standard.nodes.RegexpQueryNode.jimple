public class org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode extends org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl implements org.apache.lucene.queryparser.flexible.core.nodes.TextableQueryNode, org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode
{
    private java.lang.CharSequence text;
    private java.lang.CharSequence field;

    public void <init>(java.lang.CharSequence, java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r1, r2, $r3;
        org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode r0;
        int i0, i1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: void <init>()>();

        r0.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence field> = r1;

        $r3 = interfaceinvoke r2.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i0, i1);

        r0.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence text> = $r3;

        return;
    }

    public org.apache.lucene.util.BytesRef textToBytesRef()
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode r1;
        java.lang.CharSequence $r2;
        org.apache.lucene.util.BytesRef $r0;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode;

        $r0 = new org.apache.lucene.util.BytesRef;

        $r2 = r1.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence text>;

        specialinvoke $r0.<org.apache.lucene.util.BytesRef: void <init>(java.lang.CharSequence)>($r2);

        return $r0;
    }

    public java.lang.String toString()
    {
        java.lang.CharSequence $r3, $r6;
        org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7, $r8;
        java.lang.String $r9;

        r2 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<regexp field=\'");

        $r3 = r2.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence field>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' term=\'");

        $r6 = r2.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence text>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'/>");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode cloneTree() throws java.lang.CloneNotSupportedException
    {
        java.lang.CharSequence $r3, $r4;
        org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode r0, r2;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode;

        $r1 = specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree()>();

        r2 = (org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode) $r1;

        $r3 = r0.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence field>;

        r2.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence field> = $r3;

        $r4 = r0.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence text>;

        r2.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence text> = $r4;

        return r2;
    }

    public java.lang.CharSequence getText()
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode r0;
        java.lang.CharSequence $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence text>;

        return $r1;
    }

    public void setText(java.lang.CharSequence)
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode r0;
        java.lang.CharSequence r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode;

        r1 := @parameter0: java.lang.CharSequence;

        r0.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence text> = r1;

        return;
    }

    public java.lang.CharSequence getField()
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode r0;
        java.lang.CharSequence $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence field>;

        return $r1;
    }

    public java.lang.String getFieldAsString()
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode r0;
        java.lang.String $r2;
        java.lang.CharSequence $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence field>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public void setField(java.lang.CharSequence)
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode r0;
        java.lang.CharSequence r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode;

        r1 := @parameter0: java.lang.CharSequence;

        r0.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence field> = r1;

        return;
    }

    public java.lang.CharSequence toQueryString(org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax)
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode r0;
        java.lang.String $r15;
        boolean $z0;
        java.lang.CharSequence $r1, $r3, $r6, $r11;
        org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax r14;
        java.lang.StringBuilder $r2, $r4, $r5, $r7, $r8, $r9, $r10, $r12, $r13;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode;

        r14 := @parameter0: org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence field>;

        $z0 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: boolean isDefaultField(java.lang.CharSequence)>($r1);

        if $z0 == 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r11 = r0.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence text>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence field>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":/");

        $r6 = r0.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: java.lang.CharSequence text>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return $r15;
    }

    public volatile org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode r0, $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode: org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode cloneTree()>();

        return $r1;
    }
}
