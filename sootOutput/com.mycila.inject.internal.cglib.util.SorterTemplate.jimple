abstract class com.mycila.inject.internal.cglib.util.SorterTemplate extends java.lang.Object
{
    private static final int MERGESORT_THRESHOLD;
    private static final int QUICKSORT_THRESHOLD;

    void <init>()
    {
        com.mycila.inject.internal.cglib.util.SorterTemplate r0;

        r0 := @this: com.mycila.inject.internal.cglib.util.SorterTemplate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected abstract void swap(int, int);

    protected abstract int compare(int, int);

    protected void quickSort(int, int)
    {
        int i0, i1;
        com.mycila.inject.internal.cglib.util.SorterTemplate r0;

        r0 := @this: com.mycila.inject.internal.cglib.util.SorterTemplate;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void quickSortHelper(int,int)>(i0, i1);

        specialinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void insertionSort(int,int)>(i0, i1);

        return;
    }

    private void quickSortHelper(int, int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, $i17, $i19;
        com.mycila.inject.internal.cglib.util.SorterTemplate r0;

        r0 := @this: com.mycila.inject.internal.cglib.util.SorterTemplate;

        i12 := @parameter0: int;

        i13 := @parameter1: int;

     label01:
        $i10 = i13 - i12;

        if $i10 > 7 goto label02;

        goto label13;

     label02:
        $i0 = i13 + i12;

        i14 = $i0 / 2;

        $i1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: int compare(int,int)>(i12, i14);

        if $i1 <= 0 goto label03;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void swap(int,int)>(i12, i14);

     label03:
        $i2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: int compare(int,int)>(i12, i13);

        if $i2 <= 0 goto label04;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void swap(int,int)>(i12, i13);

     label04:
        $i3 = virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: int compare(int,int)>(i14, i13);

        if $i3 <= 0 goto label05;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void swap(int,int)>(i14, i13);

     label05:
        $i11 = i13 - 1;

        i15 = $i11;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void swap(int,int)>(i14, $i11);

        i16 = i12;

     label06:
        i16 = i16 + 1;

        $i17 = virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: int compare(int,int)>(i16, $i11);

        if $i17 >= 0 goto label07;

        goto label06;

     label07:
        $i19 = (int) -1;

        i15 = i15 + $i19;

        $i4 = virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: int compare(int,int)>(i15, $i11);

        if $i4 <= 0 goto label08;

        goto label07;

     label08:
        if i15 >= i16 goto label09;

        goto label10;

     label09:
        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void swap(int,int)>(i16, i15);

        goto label06;

     label10:
        $i5 = i13 - 1;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void swap(int,int)>(i16, $i5);

        $i8 = i15 - i12;

        $i6 = i13 - i16;

        $i7 = $i6 + 1;

        if $i8 > $i7 goto label11;

        specialinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void quickSortHelper(int,int)>(i12, i15);

        i12 = i16 + 1;

        goto label12;

     label11:
        $i9 = i16 + 1;

        specialinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void quickSortHelper(int,int)>($i9, i13);

        i13 = i15;

     label12:
        goto label01;

     label13:
        return;
    }

    private void insertionSort(int, int)
    {
        com.mycila.inject.internal.cglib.util.SorterTemplate r0;
        int i0, i1, $i2, $i3, $i4, i5, i6, $i8;

        r0 := @this: com.mycila.inject.internal.cglib.util.SorterTemplate;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i5 = i0 + 1;

     label1:
        if i5 > i1 goto label4;

        i6 = i5;

     label2:
        if i6 <= i0 goto label3;

        $i2 = i6 - 1;

        $i3 = virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: int compare(int,int)>($i2, i6);

        if $i3 <= 0 goto label3;

        $i4 = i6 - 1;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void swap(int,int)>($i4, i6);

        $i8 = (int) -1;

        i6 = i6 + $i8;

        goto label2;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        return;
    }

    protected void mergeSort(int, int)
    {
        com.mycila.inject.internal.cglib.util.SorterTemplate r0;
        int i0, i1, i2, $i3, i4, $i5, $i6;

        r0 := @this: com.mycila.inject.internal.cglib.util.SorterTemplate;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i2 = i0 - i1;

        if i2 > 12 goto label1;

        specialinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void insertionSort(int,int)>(i1, i0);

        return;

     label1:
        $i3 = i2 / 2;

        i4 = i1 + $i3;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void mergeSort(int,int)>(i1, i4);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void mergeSort(int,int)>(i4, i0);

        $i6 = i4 - i1;

        $i5 = i0 - i4;

        specialinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void merge(int,int,int,int,int)>(i1, i4, i0, $i6, $i5);

        return;
    }

    private void merge(int, int, int, int, int)
    {
        int i0, i1, $i2, i3, i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15;
        com.mycila.inject.internal.cglib.util.SorterTemplate r0;

        r0 := @this: com.mycila.inject.internal.cglib.util.SorterTemplate;

        i4 := @parameter0: int;

        i3 := @parameter1: int;

        i6 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        if i0 == 0 goto label1;

        if i1 != 0 goto label2;

     label1:
        return;

     label2:
        $i2 = i0 + i1;

        if $i2 != 2 goto label4;

        $i11 = virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: int compare(int,int)>(i3, i4);

        if $i11 >= 0 goto label3;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void swap(int,int)>(i3, i4);

     label3:
        return;

     label4:
        if i0 <= i1 goto label5;

        i12 = i0 / 2;

        i13 = i4 + i12;

        $i9 = specialinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: int lower(int,int,int)>(i3, i6, i13);

        i14 = $i9;

        i15 = $i9 - i3;

        goto label6;

     label5:
        i15 = i1 / 2;

        i14 = i3 + i15;

        $i5 = specialinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: int upper(int,int,int)>(i4, i3, i14);

        i13 = $i5;

        i12 = $i5 - i4;

     label6:
        specialinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void rotate(int,int,int)>(i13, i3, i14);

        $i10 = i13 + i15;

        specialinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void merge(int,int,int,int,int)>(i4, i13, $i10, i12, i15);

        $i8 = i0 - i12;

        $i7 = i1 - i15;

        specialinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void merge(int,int,int,int,int)>($i10, i14, i6, $i8, $i7);

        return;
    }

    private void rotate(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13, i14, $i16, $i18, $i20;
        com.mycila.inject.internal.cglib.util.SorterTemplate r0;

        r0 := @this: com.mycila.inject.internal.cglib.util.SorterTemplate;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i9 = i0;

        i10 = i1 - 1;

     label1:
        if i9 >= i10 goto label2;

        $i7 = i9;

        i9 = i9 + 1;

        $i8 = i10;

        $i16 = (int) -1;

        i10 = i10 + $i16;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void swap(int,int)>($i7, $i8);

        goto label1;

     label2:
        i11 = i1;

        i12 = i2 - 1;

     label3:
        if i11 >= i12 goto label4;

        $i5 = i11;

        i11 = i11 + 1;

        $i6 = i12;

        $i18 = (int) -1;

        i12 = i12 + $i18;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void swap(int,int)>($i5, $i6);

        goto label3;

     label4:
        i13 = i0;

        i14 = i2 - 1;

     label5:
        if i13 >= i14 goto label6;

        $i3 = i13;

        i13 = i13 + 1;

        $i4 = i14;

        $i20 = (int) -1;

        i14 = i14 + $i20;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void swap(int,int)>($i3, $i4);

        goto label5;

     label6:
        return;
    }

    private int lower(int, int, int)
    {
        com.mycila.inject.internal.cglib.util.SorterTemplate r0;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;

        r0 := @this: com.mycila.inject.internal.cglib.util.SorterTemplate;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        i7 = i0 - i6;

     label1:
        if i7 <= 0 goto label4;

        i1 = i7 / 2;

        i2 = i6 + i1;

        $i4 = virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: int compare(int,int)>(i2, i3);

        if $i4 >= 0 goto label2;

        i6 = i2 + 1;

        $i5 = i7 - i1;

        i7 = $i5 - 1;

        goto label3;

     label2:
        i7 = i1;

     label3:
        goto label1;

     label4:
        return i6;
    }

    private int upper(int, int, int)
    {
        com.mycila.inject.internal.cglib.util.SorterTemplate r0;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;

        r0 := @this: com.mycila.inject.internal.cglib.util.SorterTemplate;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        i7 = i0 - i6;

     label1:
        if i7 <= 0 goto label4;

        i1 = i7 / 2;

        i2 = i6 + i1;

        $i4 = virtualinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: int compare(int,int)>(i3, i2);

        if $i4 >= 0 goto label2;

        i7 = i1;

        goto label3;

     label2:
        i6 = i2 + 1;

        $i5 = i7 - i1;

        i7 = $i5 - 1;

     label3:
        goto label1;

     label4:
        return i6;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.cglib.util.SorterTemplate: int QUICKSORT_THRESHOLD> = 7;

        <com.mycila.inject.internal.cglib.util.SorterTemplate: int MERGESORT_THRESHOLD> = 12;

        return;
    }
}
