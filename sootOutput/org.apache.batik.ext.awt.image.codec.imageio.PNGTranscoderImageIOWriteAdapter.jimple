public class org.apache.batik.ext.awt.image.codec.imageio.PNGTranscoderImageIOWriteAdapter extends java.lang.Object implements org.apache.batik.transcoder.image.PNGTranscoder$WriteAdapter
{

    public void <init>()
    {
        org.apache.batik.ext.awt.image.codec.imageio.PNGTranscoderImageIOWriteAdapter r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.imageio.PNGTranscoderImageIOWriteAdapter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void writeImage(org.apache.batik.transcoder.image.PNGTranscoder, java.awt.image.BufferedImage, org.apache.batik.transcoder.TranscoderOutput) throws org.apache.batik.transcoder.TranscoderException
    {
        org.apache.batik.ext.awt.image.spi.ImageWriter $r12;
        java.lang.Integer $r6;
        org.apache.batik.ext.awt.image.codec.imageio.PNGTranscoderImageIOWriteAdapter r9;
        int $i0, $i1, $i2;
        org.apache.batik.transcoder.TranscodingHints$Key $r2, $r4;
        boolean $z0;
        double $d0, $d1, $d2;
        java.io.OutputStream $r15;
        org.apache.batik.ext.awt.image.spi.ImageWriterRegistry $r11;
        java.awt.image.BufferedImage r10;
        org.apache.batik.transcoder.TranscoderOutput r3;
        java.io.IOException $r7;
        org.apache.batik.transcoder.image.PNGTranscoder r0;
        org.apache.batik.transcoder.TranscodingHints $r1;
        org.apache.batik.bridge.UserAgent $r14;
        org.apache.batik.transcoder.TranscoderException $r8;
        org.apache.batik.ext.awt.image.spi.ImageWriterParams $r13;
        float $f0;
        java.lang.Object $r5;

        r9 := @this: org.apache.batik.ext.awt.image.codec.imageio.PNGTranscoderImageIOWriteAdapter;

        r0 := @parameter0: org.apache.batik.transcoder.image.PNGTranscoder;

        r10 := @parameter1: java.awt.image.BufferedImage;

        r3 := @parameter2: org.apache.batik.transcoder.TranscoderOutput;

        $r1 = virtualinvoke r0.<org.apache.batik.transcoder.image.PNGTranscoder: org.apache.batik.transcoder.TranscodingHints getTranscodingHints()>();

        $r2 = <org.apache.batik.transcoder.image.PNGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_INDEXED>;

        $z0 = virtualinvoke $r1.<org.apache.batik.transcoder.TranscodingHints: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r4 = <org.apache.batik.transcoder.image.PNGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_INDEXED>;

        $r5 = virtualinvoke $r1.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        if $i0 == 1 goto label1;

        if $i0 == 2 goto label1;

        if $i0 == 4 goto label1;

        if $i0 != 8 goto label2;

     label1:
        $i1 = 1 << $i0;

        r10 = staticinvoke <org.apache.batik.ext.awt.image.rendered.IndexImage: java.awt.image.BufferedImage getIndexedImage(java.awt.image.BufferedImage,int)>(r10, $i1);

     label2:
        $r11 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: org.apache.batik.ext.awt.image.spi.ImageWriterRegistry getInstance()>();

        $r12 = virtualinvoke $r11.<org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: org.apache.batik.ext.awt.image.spi.ImageWriter getWriterFor(java.lang.String)>("image/png");

        $r13 = new org.apache.batik.ext.awt.image.spi.ImageWriterParams;

        specialinvoke $r13.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: void <init>()>();

        $r14 = virtualinvoke r0.<org.apache.batik.transcoder.image.PNGTranscoder: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $f0 = interfaceinvoke $r14.<org.apache.batik.bridge.UserAgent: float getPixelUnitToMillimeter()>();

        $d0 = (double) $f0;

        $d1 = 25.4 / $d0;

        $d2 = $d1 + 0.5;

        $i2 = (int) $d2;

        virtualinvoke $r13.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: void setResolution(int)>($i2);

     label3:
        $r15 = virtualinvoke r3.<org.apache.batik.transcoder.TranscoderOutput: java.io.OutputStream getOutputStream()>();

        interfaceinvoke $r12.<org.apache.batik.ext.awt.image.spi.ImageWriter: void writeImage(java.awt.image.RenderedImage,java.io.OutputStream,org.apache.batik.ext.awt.image.spi.ImageWriterParams)>(r10, $r15, $r13);

        virtualinvoke $r15.<java.io.OutputStream: void flush()>();

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        $r8 = new org.apache.batik.transcoder.TranscoderException;

        specialinvoke $r8.<org.apache.batik.transcoder.TranscoderException: void <init>(java.lang.Exception)>($r7);

        throw $r8;

     label6:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }
}
