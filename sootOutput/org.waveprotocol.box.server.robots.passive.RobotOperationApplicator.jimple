public class org.waveprotocol.box.server.robots.passive.RobotOperationApplicator extends java.lang.Object
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private static final org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener LOGGING_REQUEST_LISTENER;
    private final com.google.wave.api.data.converter.EventDataConverterManager converterManager;
    private final org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider;
    private final org.waveprotocol.box.server.robots.OperationServiceRegistry operationRegistry;
    private final org.waveprotocol.box.server.robots.util.ConversationUtil conversationUtil;

    public void <init>(com.google.wave.api.data.converter.EventDataConverterManager, org.waveprotocol.box.server.waveserver.WaveletProvider, org.waveprotocol.box.server.robots.OperationServiceRegistry, org.waveprotocol.box.server.robots.util.ConversationUtil)
    {
        org.waveprotocol.box.server.robots.passive.RobotOperationApplicator r0;
        com.google.wave.api.data.converter.EventDataConverterManager r1;
        org.waveprotocol.box.server.robots.util.ConversationUtil r4;
        org.waveprotocol.box.server.waveserver.WaveletProvider r2;
        org.waveprotocol.box.server.robots.OperationServiceRegistry r3;

        r0 := @this: org.waveprotocol.box.server.robots.passive.RobotOperationApplicator;

        r1 := @parameter0: com.google.wave.api.data.converter.EventDataConverterManager;

        r2 := @parameter1: org.waveprotocol.box.server.waveserver.WaveletProvider;

        r3 := @parameter2: org.waveprotocol.box.server.robots.OperationServiceRegistry;

        r4 := @parameter3: org.waveprotocol.box.server.robots.util.ConversationUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.robots.passive.RobotOperationApplicator: com.google.wave.api.data.converter.EventDataConverterManager converterManager> = r1;

        r0.<org.waveprotocol.box.server.robots.passive.RobotOperationApplicator: org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider> = r2;

        r0.<org.waveprotocol.box.server.robots.passive.RobotOperationApplicator: org.waveprotocol.box.server.robots.OperationServiceRegistry operationRegistry> = r3;

        r0.<org.waveprotocol.box.server.robots.passive.RobotOperationApplicator: org.waveprotocol.box.server.robots.util.ConversationUtil conversationUtil> = r4;

        return;
    }

    void applyOperations(java.util.List, org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.box.server.account.RobotAccountData)
    {
        org.waveprotocol.box.server.robots.passive.RobotOperationApplicator r3;
        com.google.wave.api.data.converter.EventDataConverterManager $r4;
        org.waveprotocol.box.server.robots.util.ConversationUtil $r10;
        org.waveprotocol.box.server.robots.RobotWaveletData $r7;
        org.waveprotocol.box.server.robots.OperationContextImpl $r2;
        org.waveprotocol.box.server.waveserver.WaveletProvider $r5;
        org.waveprotocol.box.server.account.RobotAccountData r11;
        java.util.List r0;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r8;
        com.google.wave.api.ProtocolVersion $r1;
        com.google.wave.api.data.converter.EventDataConverter $r6;
        org.waveprotocol.wave.model.version.HashedVersion r9;

        r3 := @this: org.waveprotocol.box.server.robots.passive.RobotOperationApplicator;

        r0 := @parameter0: java.util.List;

        r8 := @parameter1: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r9 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        r11 := @parameter3: org.waveprotocol.box.server.account.RobotAccountData;

        $r1 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: com.google.wave.api.ProtocolVersion getProtocolVersion(java.util.List)>(r0);

        $r2 = new org.waveprotocol.box.server.robots.OperationContextImpl;

        $r5 = r3.<org.waveprotocol.box.server.robots.passive.RobotOperationApplicator: org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider>;

        $r4 = r3.<org.waveprotocol.box.server.robots.passive.RobotOperationApplicator: com.google.wave.api.data.converter.EventDataConverterManager converterManager>;

        $r6 = virtualinvoke $r4.<com.google.wave.api.data.converter.EventDataConverterManager: com.google.wave.api.data.converter.EventDataConverter getEventDataConverter(com.google.wave.api.ProtocolVersion)>($r1);

        $r10 = r3.<org.waveprotocol.box.server.robots.passive.RobotOperationApplicator: org.waveprotocol.box.server.robots.util.ConversationUtil conversationUtil>;

        $r7 = new org.waveprotocol.box.server.robots.RobotWaveletData;

        specialinvoke $r7.<org.waveprotocol.box.server.robots.RobotWaveletData: void <init>(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.waveprotocol.wave.model.version.HashedVersion)>(r8, r9);

        specialinvoke $r2.<org.waveprotocol.box.server.robots.OperationContextImpl: void <init>(org.waveprotocol.box.server.waveserver.WaveletProvider,com.google.wave.api.data.converter.EventDataConverter,org.waveprotocol.box.server.robots.util.ConversationUtil,org.waveprotocol.box.server.robots.RobotWaveletData)>($r5, $r6, $r10, $r7);

        specialinvoke r3.<org.waveprotocol.box.server.robots.passive.RobotOperationApplicator: void executeOperations(org.waveprotocol.box.server.robots.OperationContext,java.util.List,org.waveprotocol.box.server.account.RobotAccountData)>($r2, r0, r11);

        specialinvoke r3.<org.waveprotocol.box.server.robots.passive.RobotOperationApplicator: void handleResults(org.waveprotocol.box.server.robots.OperationResults,org.waveprotocol.box.server.account.RobotAccountData)>($r2, r11);

        return;
    }

    private void executeOperations(org.waveprotocol.box.server.robots.OperationContext, java.util.List, org.waveprotocol.box.server.account.RobotAccountData)
    {
        org.waveprotocol.box.server.robots.passive.RobotOperationApplicator r4;
        com.google.wave.api.OperationRequest r3;
        java.util.Iterator $r1;
        org.waveprotocol.box.server.robots.OperationContext r5;
        org.waveprotocol.box.server.account.RobotAccountData r6;
        org.waveprotocol.wave.model.wave.ParticipantId $r8;
        java.util.List r0;
        java.lang.Object $r2;
        boolean $z0;
        org.waveprotocol.box.server.robots.OperationServiceRegistry $r7;

        r4 := @this: org.waveprotocol.box.server.robots.passive.RobotOperationApplicator;

        r5 := @parameter0: org.waveprotocol.box.server.robots.OperationContext;

        r0 := @parameter1: java.util.List;

        r6 := @parameter2: org.waveprotocol.box.server.account.RobotAccountData;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.google.wave.api.OperationRequest) $r2;

        $r7 = r4.<org.waveprotocol.box.server.robots.passive.RobotOperationApplicator: org.waveprotocol.box.server.robots.OperationServiceRegistry operationRegistry>;

        $r8 = interfaceinvoke r6.<org.waveprotocol.box.server.account.RobotAccountData: org.waveprotocol.wave.model.wave.ParticipantId getId()>();

        staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: void executeOperation(com.google.wave.api.OperationRequest,org.waveprotocol.box.server.robots.OperationServiceRegistry,org.waveprotocol.box.server.robots.OperationContext,org.waveprotocol.wave.model.wave.ParticipantId)>(r3, $r7, r5, $r8);

        goto label1;

     label2:
        return;
    }

    private void handleResults(org.waveprotocol.box.server.robots.OperationResults, org.waveprotocol.box.server.account.RobotAccountData)
    {
        org.waveprotocol.box.server.robots.RobotCapabilities $r5;
        org.waveprotocol.box.server.robots.passive.RobotOperationApplicator r1;
        org.waveprotocol.box.server.waveserver.WaveletProvider $r3;
        org.waveprotocol.box.server.account.RobotAccountData r4;
        com.google.wave.api.event.EventType $r7;
        org.waveprotocol.box.server.robots.OperationResults r0;
        java.util.Map $r6;
        org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener $r2;

        r1 := @this: org.waveprotocol.box.server.robots.passive.RobotOperationApplicator;

        r0 := @parameter0: org.waveprotocol.box.server.robots.OperationResults;

        r4 := @parameter1: org.waveprotocol.box.server.account.RobotAccountData;

        $r3 = r1.<org.waveprotocol.box.server.robots.passive.RobotOperationApplicator: org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider>;

        $r2 = <org.waveprotocol.box.server.robots.passive.RobotOperationApplicator: org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener LOGGING_REQUEST_LISTENER>;

        staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: void submitDeltas(org.waveprotocol.box.server.robots.OperationResults,org.waveprotocol.box.server.waveserver.WaveletProvider,org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener)>(r0, $r3, $r2);

        $r5 = interfaceinvoke r4.<org.waveprotocol.box.server.account.RobotAccountData: org.waveprotocol.box.server.robots.RobotCapabilities getCapabilities()>();

        $r6 = virtualinvoke $r5.<org.waveprotocol.box.server.robots.RobotCapabilities: java.util.Map getCapabilitiesMap()>();

        $r7 = <com.google.wave.api.event.EventType: com.google.wave.api.event.EventType OPERATION_ERROR>;

        interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.box.server.robots.util.LoggingRequestListener $r1;
        org.waveprotocol.wave.util.logging.Log $r0, $r2;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/robots/passive/RobotOperationApplicator;");

        <org.waveprotocol.box.server.robots.passive.RobotOperationApplicator: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        $r1 = new org.waveprotocol.box.server.robots.util.LoggingRequestListener;

        $r2 = <org.waveprotocol.box.server.robots.passive.RobotOperationApplicator: org.waveprotocol.wave.util.logging.Log LOG>;

        specialinvoke $r1.<org.waveprotocol.box.server.robots.util.LoggingRequestListener: void <init>(org.waveprotocol.wave.util.logging.Log)>($r2);

        <org.waveprotocol.box.server.robots.passive.RobotOperationApplicator: org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener LOGGING_REQUEST_LISTENER> = $r1;

        return;
    }
}
