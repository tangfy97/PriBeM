public final class org.apache.lucene.util.automaton.UTF32ToUTF8 extends java.lang.Object
{
    private static final int[] startCodes;
    private static final int[] endCodes;
    static int[] MASKS;
    private final org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence startUTF8;
    private final org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence endUTF8;
    private final org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence tmpUTF8a;
    private final org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence tmpUTF8b;
    private org.apache.lucene.util.automaton.State[] utf8States;
    private int utf8StateCount;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence $r1, $r2, $r3, $r4;
        org.apache.lucene.util.automaton.UTF32ToUTF8 r0;

        r0 := @this: org.apache.lucene.util.automaton.UTF32ToUTF8;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence;

        specialinvoke $r1.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: void <init>()>();

        r0.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence startUTF8> = $r1;

        $r2 = new org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence;

        specialinvoke $r2.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: void <init>()>();

        r0.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence endUTF8> = $r2;

        $r3 = new org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence;

        specialinvoke $r3.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: void <init>()>();

        r0.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence tmpUTF8a> = $r3;

        $r4 = new org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence;

        specialinvoke $r4.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: void <init>()>();

        r0.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence tmpUTF8b> = $r4;

        return;
    }

    void convertOneEdge(org.apache.lucene.util.automaton.State, org.apache.lucene.util.automaton.State, int, int)
    {
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence $r1, $r2, $r5, $r6;
        org.apache.lucene.util.automaton.UTF32ToUTF8 r0;
        org.apache.lucene.util.automaton.State r3, r4;
        int i0, i1;

        r0 := @this: org.apache.lucene.util.automaton.UTF32ToUTF8;

        r3 := @parameter0: org.apache.lucene.util.automaton.State;

        r4 := @parameter1: org.apache.lucene.util.automaton.State;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence startUTF8>;

        staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: void access$100(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence,int)>($r1, i0);

        $r2 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence endUTF8>;

        staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: void access$100(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence,int)>($r2, i1);

        $r6 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence startUTF8>;

        $r5 = r0.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence endUTF8>;

        specialinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8: void build(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence,org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence,int)>(r3, r4, $r6, $r5, 0);

        return;
    }

    private void build(org.apache.lucene.util.automaton.State, org.apache.lucene.util.automaton.State, org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence, org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence, int)
    {
        org.apache.lucene.util.automaton.UTF32ToUTF8 r2;
        java.lang.AssertionError $r15, $r16;
        org.apache.lucene.util.automaton.State r3, r4, $r13;
        int[] $r5, $r7;
        boolean $z0, $z1;
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence r0, r1, $r6, $r8, $r9, $r10, $r11;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, i43;
        org.apache.lucene.util.automaton.Transition $r12, $r14, $r17;

        r2 := @this: org.apache.lucene.util.automaton.UTF32ToUTF8;

        r3 := @parameter0: org.apache.lucene.util.automaton.State;

        r4 := @parameter1: org.apache.lucene.util.automaton.State;

        r0 := @parameter2: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence;

        r1 := @parameter3: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence;

        i0 := @parameter4: int;

        $i1 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        $i2 = virtualinvoke r1.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        if $i1 != $i2 goto label04;

        $i31 = staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int access$200(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence)>(r0);

        $i32 = $i31 - 1;

        if i0 != $i32 goto label01;

        $i39 = staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int access$200(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence)>(r1);

        $i40 = $i39 - 1;

        if i0 != $i40 goto label01;

        $r17 = new org.apache.lucene.util.automaton.Transition;

        $i41 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        $i42 = virtualinvoke r1.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        specialinvoke $r17.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>($i41, $i42, r4);

        virtualinvoke r3.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r17);

        return;

     label01:
        $z0 = <org.apache.lucene.util.automaton.UTF32ToUTF8: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        $i37 = staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int access$200(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence)>(r0);

        $i38 = i0 + 1;

        if $i37 > $i38 goto label02;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label02:
        $z1 = <org.apache.lucene.util.automaton.UTF32ToUTF8: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        $i35 = staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int access$200(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence)>(r1);

        $i36 = i0 + 1;

        if $i35 > $i36 goto label03;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label03:
        $r13 = specialinvoke r2.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.State newUTF8State()>();

        $r14 = new org.apache.lucene.util.automaton.Transition;

        $i33 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        specialinvoke $r14.<org.apache.lucene.util.automaton.Transition: void <init>(int,org.apache.lucene.util.automaton.State)>($i33, $r13);

        virtualinvoke r3.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r14);

        $i34 = 1 + i0;

        specialinvoke r2.<org.apache.lucene.util.automaton.UTF32ToUTF8: void build(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence,org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence,int)>($r13, r4, r0, r1, $i34);

        goto label10;

     label04:
        $i3 = staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int access$200(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence)>(r0);

        $i4 = staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int access$200(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence)>(r1);

        if $i3 != $i4 goto label07;

        $i17 = staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int access$200(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence)>(r0);

        $i18 = $i17 - 1;

        if i0 != $i18 goto label05;

        $r12 = new org.apache.lucene.util.automaton.Transition;

        $i29 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        $i30 = virtualinvoke r1.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        specialinvoke $r12.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>($i29, $i30, r4);

        virtualinvoke r3.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r12);

        goto label10;

     label05:
        specialinvoke r2.<org.apache.lucene.util.automaton.UTF32ToUTF8: void start(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence,int,boolean)>(r3, r4, r0, i0, 0);

        $i19 = virtualinvoke r1.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        $i20 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        $i21 = $i19 - $i20;

        if $i21 <= 1 goto label06;

        $i22 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        $i23 = $i22 + 1;

        $i24 = virtualinvoke r1.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        $i25 = $i24 - 1;

        $i26 = staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int access$200(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence)>(r0);

        $i27 = $i26 - i0;

        $i28 = $i27 - 1;

        specialinvoke r2.<org.apache.lucene.util.automaton.UTF32ToUTF8: void all(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State,int,int,int)>(r3, r4, $i23, $i25, $i28);

     label06:
        specialinvoke r2.<org.apache.lucene.util.automaton.UTF32ToUTF8: void end(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence,int,boolean)>(r3, r4, r1, i0, 0);

        goto label10;

     label07:
        specialinvoke r2.<org.apache.lucene.util.automaton.UTF32ToUTF8: void start(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence,int,boolean)>(r3, r4, r0, i0, 1);

        $i5 = staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int access$200(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence)>(r0);

        $i6 = 1 + $i5;

        i43 = $i6 - i0;

        $i7 = staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int access$200(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence)>(r1);

        i8 = $i7 - i0;

     label08:
        if i43 >= i8 goto label09;

        $r6 = r2.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence tmpUTF8a>;

        $r5 = <org.apache.lucene.util.automaton.UTF32ToUTF8: int[] startCodes>;

        $i9 = i43 - 1;

        $i10 = $r5[$i9];

        staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: void access$100(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence,int)>($r6, $i10);

        $r8 = r2.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence tmpUTF8b>;

        $r7 = <org.apache.lucene.util.automaton.UTF32ToUTF8: int[] endCodes>;

        $i11 = i43 - 1;

        $i12 = $r7[$i11];

        staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: void access$100(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence,int)>($r8, $i12);

        $r9 = r2.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence tmpUTF8a>;

        $i13 = virtualinvoke $r9.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(0);

        $r10 = r2.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence tmpUTF8b>;

        $i14 = virtualinvoke $r10.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(0);

        $r11 = r2.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence tmpUTF8a>;

        $i15 = staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int access$200(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence)>($r11);

        $i16 = $i15 - 1;

        specialinvoke r2.<org.apache.lucene.util.automaton.UTF32ToUTF8: void all(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State,int,int,int)>(r3, r4, $i13, $i14, $i16);

        i43 = i43 + 1;

        goto label08;

     label09:
        specialinvoke r2.<org.apache.lucene.util.automaton.UTF32ToUTF8: void end(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence,int,boolean)>(r3, r4, r1, i0, 1);

     label10:
        return;
    }

    private void start(org.apache.lucene.util.automaton.State, org.apache.lucene.util.automaton.State, org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence, int, boolean)
    {
        org.apache.lucene.util.automaton.UTF32ToUTF8 r1;
        int[] $r6, $r8;
        boolean z0;
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        org.apache.lucene.util.automaton.Transition $r4, $r7;
        org.apache.lucene.util.automaton.State $r2, r3, r5;

        r1 := @this: org.apache.lucene.util.automaton.UTF32ToUTF8;

        r3 := @parameter0: org.apache.lucene.util.automaton.State;

        r5 := @parameter1: org.apache.lucene.util.automaton.State;

        r0 := @parameter2: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        $i1 = staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int access$200(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence)>(r0);

        $i2 = $i1 - 1;

        if i0 != $i2 goto label1;

        $r7 = new org.apache.lucene.util.automaton.Transition;

        $i16 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        $i17 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        $r8 = <org.apache.lucene.util.automaton.UTF32ToUTF8: int[] MASKS>;

        $i18 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int numBits(int)>(i0);

        $i19 = $i18 - 1;

        $i20 = $r8[$i19];

        $i21 = $i17 | $i20;

        specialinvoke $r7.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>($i16, $i21, r5);

        virtualinvoke r3.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r7);

        goto label2;

     label1:
        $r2 = specialinvoke r1.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.State newUTF8State()>();

        $r4 = new org.apache.lucene.util.automaton.Transition;

        $i3 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        specialinvoke $r4.<org.apache.lucene.util.automaton.Transition: void <init>(int,org.apache.lucene.util.automaton.State)>($i3, $r2);

        virtualinvoke r3.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r4);

        $i4 = 1 + i0;

        specialinvoke r1.<org.apache.lucene.util.automaton.UTF32ToUTF8: void start(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence,int,boolean)>($r2, r5, r0, $i4, 1);

        $i5 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        $r6 = <org.apache.lucene.util.automaton.UTF32ToUTF8: int[] MASKS>;

        $i6 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int numBits(int)>(i0);

        $i7 = $i6 - 1;

        $i8 = $r6[$i7];

        i9 = $i5 | $i8;

        if z0 == 0 goto label2;

        $i10 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        if $i10 == i9 goto label2;

        $i11 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        $i12 = $i11 + 1;

        $i13 = staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int access$200(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence)>(r0);

        $i14 = $i13 - i0;

        $i15 = $i14 - 1;

        specialinvoke r1.<org.apache.lucene.util.automaton.UTF32ToUTF8: void all(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State,int,int,int)>(r3, r5, $i12, i9, $i15);

     label2:
        return;
    }

    private void end(org.apache.lucene.util.automaton.State, org.apache.lucene.util.automaton.State, org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence, int, boolean)
    {
        org.apache.lucene.util.automaton.UTF32ToUTF8 r2;
        int[] $r1, $r6;
        boolean z0;
        org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, $i23, $i24, $i26, $i28;
        org.apache.lucene.util.automaton.Transition $r9, $r10;
        org.apache.lucene.util.automaton.State r3, r4, $r7;

        r2 := @this: org.apache.lucene.util.automaton.UTF32ToUTF8;

        r3 := @parameter0: org.apache.lucene.util.automaton.State;

        r4 := @parameter1: org.apache.lucene.util.automaton.State;

        r0 := @parameter2: org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        $i1 = staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int access$200(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence)>(r0);

        $i2 = $i1 - 1;

        if i0 != $i2 goto label1;

        $r9 = new org.apache.lucene.util.automaton.Transition;

        $i15 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        $r6 = <org.apache.lucene.util.automaton.UTF32ToUTF8: int[] MASKS>;

        $i16 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int numBits(int)>(i0);

        $i17 = $i16 - 1;

        $i18 = $r6[$i17];

        $i26 = (int) -1;

        $i19 = $i18 ^ $i26;

        $i20 = $i15 & $i19;

        $i21 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        specialinvoke $r9.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>($i20, $i21, r4);

        virtualinvoke r3.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r9);

        goto label5;

     label1:
        $i3 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int numBits(int)>(i0);

        if $i3 != 5 goto label2;

        i22 = 194;

        goto label3;

     label2:
        $i4 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        $r1 = <org.apache.lucene.util.automaton.UTF32ToUTF8: int[] MASKS>;

        $i5 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int numBits(int)>(i0);

        $i6 = $i5 - 1;

        $i7 = $r1[$i6];

        $i28 = (int) -1;

        $i8 = $i7 ^ $i28;

        i22 = $i4 & $i8;

     label3:
        if z0 == 0 goto label4;

        $i9 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        if $i9 == i22 goto label4;

        $i10 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        $i11 = $i10 - 1;

        $i12 = staticinvoke <org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int access$200(org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence)>(r0);

        $i13 = $i12 - i0;

        $i14 = $i13 - 1;

        specialinvoke r2.<org.apache.lucene.util.automaton.UTF32ToUTF8: void all(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State,int,int,int)>(r3, r4, i22, $i11, $i14);

     label4:
        $r7 = specialinvoke r2.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.State newUTF8State()>();

        $r10 = new org.apache.lucene.util.automaton.Transition;

        $i23 = virtualinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence: int byteAt(int)>(i0);

        specialinvoke $r10.<org.apache.lucene.util.automaton.Transition: void <init>(int,org.apache.lucene.util.automaton.State)>($i23, $r7);

        virtualinvoke r3.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r10);

        $i24 = 1 + i0;

        specialinvoke r2.<org.apache.lucene.util.automaton.UTF32ToUTF8: void end(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence,int,boolean)>($r7, r4, r0, $i24, 1);

     label5:
        return;
    }

    private void all(org.apache.lucene.util.automaton.State, org.apache.lucene.util.automaton.State, int, int, int)
    {
        org.apache.lucene.util.automaton.UTF32ToUTF8 r0;
        org.apache.lucene.util.automaton.Transition $r10, $r11, $r12, $r13;
        org.apache.lucene.util.automaton.State $r1, r2, r5, $r6, r9;
        int i0, i1, i2, $i4;

        r0 := @this: org.apache.lucene.util.automaton.UTF32ToUTF8;

        r2 := @parameter0: org.apache.lucene.util.automaton.State;

        r5 := @parameter1: org.apache.lucene.util.automaton.State;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        if i2 != 0 goto label1;

        $r10 = new org.apache.lucene.util.automaton.Transition;

        specialinvoke $r10.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>(i0, i1, r5);

        virtualinvoke r2.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r10);

        goto label4;

     label1:
        $r1 = specialinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.State newUTF8State()>();

        r9 = $r1;

        $r11 = new org.apache.lucene.util.automaton.Transition;

        specialinvoke $r11.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>(i0, i1, $r1);

        virtualinvoke r2.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r11);

     label2:
        if i2 <= 1 goto label3;

        $r6 = specialinvoke r0.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.State newUTF8State()>();

        $r12 = new org.apache.lucene.util.automaton.Transition;

        specialinvoke $r12.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>(128, 191, $r6);

        virtualinvoke r9.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r12);

        $i4 = (int) -1;

        i2 = i2 + $i4;

        r9 = $r6;

        goto label2;

     label3:
        $r13 = new org.apache.lucene.util.automaton.Transition;

        specialinvoke $r13.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>(128, 191, r5);

        virtualinvoke r9.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>($r13);

     label4:
        return;
    }

    public org.apache.lucene.util.automaton.Automaton convert(org.apache.lucene.util.automaton.Automaton)
    {
        org.apache.lucene.util.automaton.UTF32ToUTF8 r5;
        org.apache.lucene.util.automaton.Transition[] $r10;
        boolean $z0, $z1, $z2;
        org.apache.lucene.util.automaton.Automaton $r3, r15;
        java.util.ArrayList $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16;
        org.apache.lucene.util.automaton.Transition r11;
        org.apache.lucene.util.automaton.State $r2, $r4, r12, $r13, r16, r17, r18;
        org.apache.lucene.util.automaton.State[] $r0, $r6, $r7, $r8, $r14;
        java.lang.Object $r9;

        r5 := @this: org.apache.lucene.util.automaton.UTF32ToUTF8;

        r15 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        $z0 = virtualinvoke r15.<org.apache.lucene.util.automaton.Automaton: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        r15 = virtualinvoke r15.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton cloneExpanded()>();

     label1:
        $r0 = virtualinvoke r15.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getNumberedStates()>();

        $i0 = lengthof $r0;

        $r14 = newarray (org.apache.lucene.util.automaton.State)[$i0];

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r15.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State getInitialState()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r3 = new org.apache.lucene.util.automaton.Automaton;

        specialinvoke $r3.<org.apache.lucene.util.automaton.Automaton: void <init>()>();

        virtualinvoke $r3.<org.apache.lucene.util.automaton.Automaton: void setDeterministic(boolean)>(0);

        $r4 = virtualinvoke $r3.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State getInitialState()>();

        $r6 = newarray (org.apache.lucene.util.automaton.State)[5];

        r5.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.State[] utf8States> = $r6;

        r5.<org.apache.lucene.util.automaton.UTF32ToUTF8: int utf8StateCount> = 0;

        $i1 = r5.<org.apache.lucene.util.automaton.UTF32ToUTF8: int utf8StateCount>;

        $r4.<org.apache.lucene.util.automaton.State: int number> = $i1;

        $r7 = r5.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.State[] utf8States>;

        $i2 = r5.<org.apache.lucene.util.automaton.UTF32ToUTF8: int utf8StateCount>;

        $r7[$i2] = $r4;

        $i3 = r5.<org.apache.lucene.util.automaton.UTF32ToUTF8: int utf8StateCount>;

        $i4 = $i3 + 1;

        r5.<org.apache.lucene.util.automaton.UTF32ToUTF8: int utf8StateCount> = $i4;

        $z1 = virtualinvoke $r2.<org.apache.lucene.util.automaton.State: boolean isAccept()>();

        virtualinvoke $r4.<org.apache.lucene.util.automaton.State: void setAccept(boolean)>($z1);

        $i5 = $r2.<org.apache.lucene.util.automaton.State: int number>;

        $r14[$i5] = $r4;

     label2:
        $i15 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i15 == 0 goto label6;

        $i7 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i8 = $i7 - 1;

        $r9 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>($i8);

        r16 = (org.apache.lucene.util.automaton.State) $r9;

        $i9 = r16.<org.apache.lucene.util.automaton.State: int number>;

        r17 = $r14[$i9];

        i16 = 0;

     label3:
        $i10 = r16.<org.apache.lucene.util.automaton.State: int numTransitions>;

        if i16 >= $i10 goto label5;

        $r10 = r16.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        r11 = $r10[i16];

        r12 = r11.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        $i11 = r12.<org.apache.lucene.util.automaton.State: int number>;

        r18 = $r14[$i11];

        if r18 != null goto label4;

        $r13 = specialinvoke r5.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.State newUTF8State()>();

        r18 = $r13;

        $z2 = r12.<org.apache.lucene.util.automaton.State: boolean accept>;

        $r13.<org.apache.lucene.util.automaton.State: boolean accept> = $z2;

        $i14 = r12.<org.apache.lucene.util.automaton.State: int number>;

        $r14[$i14] = $r13;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r12);

     label4:
        $i13 = r11.<org.apache.lucene.util.automaton.Transition: int min>;

        $i12 = r11.<org.apache.lucene.util.automaton.Transition: int max>;

        virtualinvoke r5.<org.apache.lucene.util.automaton.UTF32ToUTF8: void convertOneEdge(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State,int,int)>(r17, r18, $i13, $i12);

        i16 = i16 + 1;

        goto label3;

     label5:
        goto label2;

     label6:
        $r8 = r5.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.State[] utf8States>;

        $i6 = r5.<org.apache.lucene.util.automaton.UTF32ToUTF8: int utf8StateCount>;

        virtualinvoke $r3.<org.apache.lucene.util.automaton.Automaton: void setNumberedStates(org.apache.lucene.util.automaton.State[],int)>($r8, $i6);

        return $r3;
    }

    private org.apache.lucene.util.automaton.State newUTF8State()
    {
        org.apache.lucene.util.automaton.UTF32ToUTF8 r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.apache.lucene.util.automaton.State $r0;
        org.apache.lucene.util.automaton.State[] $r2, $r3, r4, $r5;

        r1 := @this: org.apache.lucene.util.automaton.UTF32ToUTF8;

        $r0 = new org.apache.lucene.util.automaton.State;

        specialinvoke $r0.<org.apache.lucene.util.automaton.State: void <init>()>();

        $i1 = r1.<org.apache.lucene.util.automaton.UTF32ToUTF8: int utf8StateCount>;

        $r2 = r1.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.State[] utf8States>;

        $i0 = lengthof $r2;

        if $i1 != $i0 goto label1;

        $i6 = r1.<org.apache.lucene.util.automaton.UTF32ToUTF8: int utf8StateCount>;

        $i8 = 1 + $i6;

        $i7 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i9 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i8, $i7);

        r4 = newarray (org.apache.lucene.util.automaton.State)[$i9];

        $r5 = r1.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.State[] utf8States>;

        $i10 = r1.<org.apache.lucene.util.automaton.UTF32ToUTF8: int utf8StateCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r4, 0, $i10);

        r1.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.State[] utf8States> = r4;

     label1:
        $r3 = r1.<org.apache.lucene.util.automaton.UTF32ToUTF8: org.apache.lucene.util.automaton.State[] utf8States>;

        $i2 = r1.<org.apache.lucene.util.automaton.UTF32ToUTF8: int utf8StateCount>;

        $r3[$i2] = $r0;

        $i3 = r1.<org.apache.lucene.util.automaton.UTF32ToUTF8: int utf8StateCount>;

        $r0.<org.apache.lucene.util.automaton.State: int number> = $i3;

        $i4 = r1.<org.apache.lucene.util.automaton.UTF32ToUTF8: int utf8StateCount>;

        $i5 = $i4 + 1;

        r1.<org.apache.lucene.util.automaton.UTF32ToUTF8: int utf8StateCount> = $i5;

        return $r0;
    }

    static void <clinit>()
    {
        int[] $r1, $r2, $r3, $r4;
        int $i0, i1, i2, $i4;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/automaton/UTF32ToUTF8;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.automaton.UTF32ToUTF8: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (int)[4];

        $r1[0] = 0;

        $r1[1] = 128;

        $r1[2] = 2048;

        $r1[3] = 65536;

        <org.apache.lucene.util.automaton.UTF32ToUTF8: int[] startCodes> = $r1;

        $r2 = newarray (int)[4];

        $r2[0] = 127;

        $r2[1] = 2047;

        $i4 = (int) 65535;

        $r2[2] = $i4;

        $r2[3] = 1114111;

        <org.apache.lucene.util.automaton.UTF32ToUTF8: int[] endCodes> = $r2;

        $r3 = newarray (int)[32];

        <org.apache.lucene.util.automaton.UTF32ToUTF8: int[] MASKS> = $r3;

        i1 = 2;

        i2 = 0;

     label3:
        if i2 >= 32 goto label4;

        $r4 = <org.apache.lucene.util.automaton.UTF32ToUTF8: int[] MASKS>;

        $i0 = i1 - 1;

        $r4[i2] = $i0;

        i1 = i1 * 2;

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }
}
