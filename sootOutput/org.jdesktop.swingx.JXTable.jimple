public class org.jdesktop.swingx.JXTable extends javax.swing.JTable implements org.jdesktop.swingx.event.TableColumnModelExtListener
{
    public static final java.lang.String FOCUS_PREVIOUS_COMPONENT;
    public static final java.lang.String FOCUS_NEXT_COMPONENT;
    private static final java.util.logging.Logger LOG;
    public static final java.lang.String HORIZONTALSCROLL_ACTION_COMMAND;
    public static final java.lang.String PACKALL_ACTION_COMMAND;
    public static final java.lang.String PACKSELECTED_ACTION_COMMAND;
    public static final java.lang.String UIPREFIX;
    public static final java.lang.String MATCH_HIGHLIGHTER;
    protected org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter;
    public static final java.lang.String USE_DTCR_COLORMEMORY_HACK;
    protected org.jdesktop.swingx.decorator.Highlighter resetDefaultTableCellRendererHighlighter;
    protected org.jdesktop.swingx.decorator.ComponentAdapter dataAdapter;
    private javax.swing.event.ChangeListener highlighterChangeListener;
    private org.jdesktop.swingx.table.ColumnFactory columnFactory;
    private int visibleRowCount;
    private int visibleColumnCount;
    private boolean columnControlVisible;
    private int verticalScrollPolicy;
    private javax.swing.JComponent columnControlButton;
    private org.jdesktop.swingx.rollover.RolloverProducer rolloverProducer;
    private org.jdesktop.swingx.rollover.TableRolloverController linkController;
    private int oldAutoResizeMode;
    private boolean intelliMode;
    private boolean inLayout;
    protected boolean isXTableRowHeightSet;
    protected org.jdesktop.swingx.search.Searchable searchable;
    private boolean editable;
    private java.awt.Dimension calculatedPrefScrollableViewportSize;
    private boolean autoCreateRowSorter;
    private boolean sortable;
    private boolean sortsOnUpdates;
    private boolean ignoreAddColumn;
    private org.jdesktop.swingx.sort.StringValueRegistry stringValueRegistry;
    private javax.swing.SortOrder[] sortOrderCycle;
    protected boolean forceRevalidate;
    protected boolean filteredRowCountChanged;
    protected transient org.jdesktop.swingx.JXTable$CellEditorRemover editorRemover;

    public void <init>()
    {
        int $i1;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        specialinvoke r0.<javax.swing.JTable: void <init>()>();

        r0.<org.jdesktop.swingx.JXTable: int visibleRowCount> = 20;

        $i1 = (int) -1;

        r0.<org.jdesktop.swingx.JXTable: int visibleColumnCount> = $i1;

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void init()>();

        return;
    }

    public void <init>(javax.swing.table.TableModel)
    {
        int $i1;
        org.jdesktop.swingx.JXTable r0;
        javax.swing.table.TableModel r1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: javax.swing.table.TableModel;

        specialinvoke r0.<javax.swing.JTable: void <init>(javax.swing.table.TableModel)>(r1);

        r0.<org.jdesktop.swingx.JXTable: int visibleRowCount> = 20;

        $i1 = (int) -1;

        r0.<org.jdesktop.swingx.JXTable: int visibleColumnCount> = $i1;

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void init()>();

        return;
    }

    public void <init>(javax.swing.table.TableModel, javax.swing.table.TableColumnModel)
    {
        javax.swing.table.TableColumnModel r2;
        int $i1;
        org.jdesktop.swingx.JXTable r0;
        javax.swing.table.TableModel r1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: javax.swing.table.TableModel;

        r2 := @parameter1: javax.swing.table.TableColumnModel;

        specialinvoke r0.<javax.swing.JTable: void <init>(javax.swing.table.TableModel,javax.swing.table.TableColumnModel)>(r1, r2);

        r0.<org.jdesktop.swingx.JXTable: int visibleRowCount> = 20;

        $i1 = (int) -1;

        r0.<org.jdesktop.swingx.JXTable: int visibleColumnCount> = $i1;

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void init()>();

        return;
    }

    public void <init>(javax.swing.table.TableModel, javax.swing.table.TableColumnModel, javax.swing.ListSelectionModel)
    {
        javax.swing.ListSelectionModel r3;
        javax.swing.table.TableColumnModel r2;
        int $i1;
        org.jdesktop.swingx.JXTable r0;
        javax.swing.table.TableModel r1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: javax.swing.table.TableModel;

        r2 := @parameter1: javax.swing.table.TableColumnModel;

        r3 := @parameter2: javax.swing.ListSelectionModel;

        specialinvoke r0.<javax.swing.JTable: void <init>(javax.swing.table.TableModel,javax.swing.table.TableColumnModel,javax.swing.ListSelectionModel)>(r1, r2, r3);

        r0.<org.jdesktop.swingx.JXTable: int visibleRowCount> = 20;

        $i1 = (int) -1;

        r0.<org.jdesktop.swingx.JXTable: int visibleColumnCount> = $i1;

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void init()>();

        return;
    }

    public void <init>(int, int)
    {
        int i0, i1, $i3;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<javax.swing.JTable: void <init>(int,int)>(i0, i1);

        r0.<org.jdesktop.swingx.JXTable: int visibleRowCount> = 20;

        $i3 = (int) -1;

        r0.<org.jdesktop.swingx.JXTable: int visibleColumnCount> = $i3;

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void init()>();

        return;
    }

    public void <init>(java.util.Vector, java.util.Vector)
    {
        java.util.Vector r1, r2;
        int $i1;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: java.util.Vector;

        r2 := @parameter1: java.util.Vector;

        specialinvoke r0.<javax.swing.JTable: void <init>(java.util.Vector,java.util.Vector)>(r1, r2);

        r0.<org.jdesktop.swingx.JXTable: int visibleRowCount> = 20;

        $i1 = (int) -1;

        r0.<org.jdesktop.swingx.JXTable: int visibleColumnCount> = $i1;

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void init()>();

        return;
    }

    public void <init>(java.lang.Object[][], java.lang.Object[])
    {
        java.lang.Object[][] r1;
        java.lang.Object[] r2;
        int $i1;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: java.lang.Object[][];

        r2 := @parameter1: java.lang.Object[];

        specialinvoke r0.<javax.swing.JTable: void <init>(java.lang.Object[][],java.lang.Object[])>(r1, r2);

        r0.<org.jdesktop.swingx.JXTable: int visibleRowCount> = 20;

        $i1 = (int) -1;

        r0.<org.jdesktop.swingx.JXTable: int visibleColumnCount> = $i1;

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void init()>();

        return;
    }

    private void init()
    {
        java.util.Locale $r3;
        java.lang.Boolean $r1;
        org.jdesktop.swingx.JXTable r0;
        javax.swing.SortOrder[] $r2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void putClientProperty(java.lang.Object,java.lang.Object)>("useDTCRColorMemoryHack", $r1);

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void initDefaultStringValues()>();

        $r2 = staticinvoke <org.jdesktop.swingx.sort.DefaultSortController: javax.swing.SortOrder[] getDefaultSortOrderCycle()>();

        r0.<org.jdesktop.swingx.JXTable: javax.swing.SortOrder[] sortOrderCycle> = $r2;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setSortsOnUpdates(boolean)>(1);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setSortable(boolean)>(1);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setAutoCreateRowSorter(boolean)>(1);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setRolloverEnabled(boolean)>(1);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setEditable(boolean)>(1);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setTerminateEditOnFocusLost(boolean)>(1);

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void initActionsAndBindings()>();

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void initFocusBindings()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void updateRowHeightUI(boolean)>(0);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setPreferredScrollableViewportSize(java.awt.Dimension)>(null);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void initializeColumnWidths()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setFillsViewportHeight(boolean)>(1);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.util.Locale getLocale()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void updateLocaleState(java.util.Locale)>($r3);

        return;
    }

    public void setRolloverEnabled(boolean)
    {
        org.jdesktop.swingx.rollover.TableRolloverController $r2, $r5;
        org.jdesktop.swingx.JXTable r0;
        org.jdesktop.swingx.rollover.RolloverProducer $r1, $r3, $r4;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isRolloverEnabled()>();

        if z1 != $z0 goto label1;

        return;

     label1:
        if z1 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.rollover.RolloverProducer createRolloverProducer()>();

        r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.rollover.RolloverProducer rolloverProducer> = $r3;

        $r4 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.rollover.RolloverProducer rolloverProducer>;

        virtualinvoke $r4.<org.jdesktop.swingx.rollover.RolloverProducer: void install(javax.swing.JComponent)>(r0);

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.rollover.TableRolloverController getLinkController()>();

        virtualinvoke $r5.<org.jdesktop.swingx.rollover.TableRolloverController: void install(javax.swing.JComponent)>(r0);

        goto label3;

     label2:
        $r1 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.rollover.RolloverProducer rolloverProducer>;

        virtualinvoke $r1.<org.jdesktop.swingx.rollover.RolloverProducer: void release(javax.swing.JComponent)>(r0);

        r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.rollover.RolloverProducer rolloverProducer> = null;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.rollover.TableRolloverController getLinkController()>();

        virtualinvoke $r2.<org.jdesktop.swingx.rollover.TableRolloverController: void release()>();

     label3:
        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isRolloverEnabled()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,boolean,boolean)>("rolloverEnabled", $z0, $z2);

        return;
    }

    public boolean isRolloverEnabled()
    {
        org.jdesktop.swingx.rollover.RolloverProducer $r1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.rollover.RolloverProducer rolloverProducer>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected org.jdesktop.swingx.rollover.TableRolloverController getLinkController()
    {
        org.jdesktop.swingx.rollover.TableRolloverController $r1, $r2, $r3;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.rollover.TableRolloverController linkController>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.rollover.TableRolloverController createLinkController()>();

        r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.rollover.TableRolloverController linkController> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.rollover.TableRolloverController linkController>;

        return $r2;
    }

    protected org.jdesktop.swingx.rollover.TableRolloverController createLinkController()
    {
        org.jdesktop.swingx.rollover.TableRolloverController $r0;
        org.jdesktop.swingx.JXTable r1;

        r1 := @this: org.jdesktop.swingx.JXTable;

        $r0 = new org.jdesktop.swingx.rollover.TableRolloverController;

        specialinvoke $r0.<org.jdesktop.swingx.rollover.TableRolloverController: void <init>()>();

        return $r0;
    }

    protected org.jdesktop.swingx.rollover.RolloverProducer createRolloverProducer()
    {
        org.jdesktop.swingx.JXTable r1;
        org.jdesktop.swingx.rollover.TableRolloverProducer $r0;

        r1 := @this: org.jdesktop.swingx.JXTable;

        $r0 = new org.jdesktop.swingx.rollover.TableRolloverProducer;

        specialinvoke $r0.<org.jdesktop.swingx.rollover.TableRolloverProducer: void <init>()>();

        return $r0;
    }

    public boolean isColumnControlVisible()
    {
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = r0.<org.jdesktop.swingx.JXTable: boolean columnControlVisible>;

        return $z0;
    }

    public void setColumnControlVisible(boolean)
    {
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, z1, $z2, $z3, $z4;

        r0 := @this: org.jdesktop.swingx.JXTable;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isColumnControlVisible()>();

        if $z0 != z1 goto label1;

        return;

     label1:
        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isColumnControlVisible()>();

        if $z2 == 0 goto label2;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void unconfigureColumnControl()>();

     label2:
        r0.<org.jdesktop.swingx.JXTable: boolean columnControlVisible> = z1;

        $z3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isColumnControlVisible()>();

        if $z3 == 0 goto label3;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void configureColumnControl()>();

     label3:
        if $z2 != 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,boolean,boolean)>("columnControlVisible", $z2, $z4);

        return;
    }

    public javax.swing.JComponent getColumnControl()
    {
        javax.swing.JComponent $r1, $r2, $r3;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = r0.<org.jdesktop.swingx.JXTable: javax.swing.JComponent columnControlButton>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.JComponent createDefaultColumnControl()>();

        r0.<org.jdesktop.swingx.JXTable: javax.swing.JComponent columnControlButton> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTable: javax.swing.JComponent columnControlButton>;

        return $r2;
    }

    public void setColumnControl(javax.swing.JComponent)
    {
        javax.swing.JComponent r1, r2, $r3;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r2 := @parameter0: javax.swing.JComponent;

        r1 = r0.<org.jdesktop.swingx.JXTable: javax.swing.JComponent columnControlButton>;

        r0.<org.jdesktop.swingx.JXTable: javax.swing.JComponent columnControlButton> = r2;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void configureColumnControl()>();

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.JComponent getColumnControl()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("columnControl", r1, $r3);

        return;
    }

    protected javax.swing.JComponent createDefaultColumnControl()
    {
        org.jdesktop.swingx.table.ColumnControlButton $r0;
        org.jdesktop.swingx.JXTable r1;

        r1 := @this: org.jdesktop.swingx.JXTable;

        $r0 = new org.jdesktop.swingx.table.ColumnControlButton;

        specialinvoke $r0.<org.jdesktop.swingx.table.ColumnControlButton: void <init>(org.jdesktop.swingx.JXTable)>(r1);

        return $r0;
    }

    public void setComponentOrientation(java.awt.ComponentOrientation)
    {
        org.jdesktop.swingx.JXTable r0;
        java.awt.ComponentOrientation r1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: java.awt.ComponentOrientation;

        specialinvoke r0.<javax.swing.JTable: void setComponentOrientation(java.awt.ComponentOrientation)>(r1);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void configureColumnControl()>();

        return;
    }

    protected void configureEnclosingScrollPane()
    {
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        specialinvoke r0.<javax.swing.JTable: void configureEnclosingScrollPane()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void configureColumnControl()>();

        return;
    }

    protected void unconfigureEnclosingScrollPane()
    {
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void unconfigureColumnControl()>();

        specialinvoke r0.<javax.swing.JTable: void unconfigureEnclosingScrollPane()>();

        return;
    }

    protected void unconfigureColumnControl()
    {
        org.jdesktop.swingx.JXTable r0;
        java.awt.Component $r5;
        javax.swing.JScrollPane r3;
        int $i0, $i1;
        java.awt.Container $r1, $r2;
        javax.swing.JViewport $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Container getParent()>();

        $z0 = $r1 instanceof javax.swing.JViewport;

        if $z0 == 0 goto label4;

        $r2 = virtualinvoke $r1.<java.awt.Container: java.awt.Container getParent()>();

        $z1 = $r2 instanceof javax.swing.JScrollPane;

        if $z1 == 0 goto label4;

        r3 = (javax.swing.JScrollPane) $r2;

        $r4 = virtualinvoke r3.<javax.swing.JScrollPane: javax.swing.JViewport getViewport()>();

        if $r4 == null goto label1;

        $r5 = virtualinvoke $r4.<javax.swing.JViewport: java.awt.Component getView()>();

        if $r5 == r0 goto label2;

     label1:
        return;

     label2:
        $i0 = r0.<org.jdesktop.swingx.JXTable: int verticalScrollPolicy>;

        if $i0 == 0 goto label3;

        $i1 = r0.<org.jdesktop.swingx.JXTable: int verticalScrollPolicy>;

        virtualinvoke r3.<javax.swing.JScrollPane: void setVerticalScrollBarPolicy(int)>($i1);

        r0.<org.jdesktop.swingx.JXTable: int verticalScrollPolicy> = 0;

     label3:
        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isColumnControlVisible()>();

        if $z2 == 0 goto label4;

        virtualinvoke r3.<javax.swing.JScrollPane: void setCorner(java.lang.String,java.awt.Component)>("UPPER_TRAILING_CORNER", null);

     label4:
        return;
    }

    protected void configureColumnControl()
    {
        javax.swing.JComponent $r6;
        org.jdesktop.swingx.JXTable r0;
        java.awt.Component $r5;
        javax.swing.JScrollPane r3;
        int $i0, $i1;
        java.awt.Container $r1, $r2;
        javax.swing.JViewport $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Container getParent()>();

        $z0 = $r1 instanceof javax.swing.JViewport;

        if $z0 == 0 goto label4;

        $r2 = virtualinvoke $r1.<java.awt.Container: java.awt.Container getParent()>();

        $z1 = $r2 instanceof javax.swing.JScrollPane;

        if $z1 == 0 goto label4;

        r3 = (javax.swing.JScrollPane) $r2;

        $r4 = virtualinvoke r3.<javax.swing.JScrollPane: javax.swing.JViewport getViewport()>();

        if $r4 == null goto label1;

        $r5 = virtualinvoke $r4.<javax.swing.JViewport: java.awt.Component getView()>();

        if $r5 == r0 goto label2;

     label1:
        return;

     label2:
        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isColumnControlVisible()>();

        if $z2 == 0 goto label4;

        $i0 = r0.<org.jdesktop.swingx.JXTable: int verticalScrollPolicy>;

        if $i0 != 0 goto label3;

        $i1 = virtualinvoke r3.<javax.swing.JScrollPane: int getVerticalScrollBarPolicy()>();

        r0.<org.jdesktop.swingx.JXTable: int verticalScrollPolicy> = $i1;

     label3:
        $r6 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.JComponent getColumnControl()>();

        virtualinvoke r3.<javax.swing.JScrollPane: void setCorner(java.lang.String,java.awt.Component)>("UPPER_TRAILING_CORNER", $r6);

        virtualinvoke r3.<javax.swing.JScrollPane: void setVerticalScrollBarPolicy(int)>(22);

     label4:
        return;
    }

    private void initFocusBindings()
    {
        javax.swing.KeyStroke $r4, $r6;
        javax.swing.Action $r8, $r10;
        org.jdesktop.swingx.JXTable r0;
        java.util.TreeSet $r1, $r2;
        javax.swing.InputMap $r3, $r5;
        javax.swing.ActionMap $r7, $r9;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = new java.util.TreeSet;

        specialinvoke $r1.<java.util.TreeSet: void <init>()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setFocusTraversalKeys(int,java.util.Set)>(0, $r1);

        $r2 = new java.util.TreeSet;

        specialinvoke $r2.<java.util.TreeSet: void <init>()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setFocusTraversalKeys(int,java.util.Set)>(1, $r2);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.InputMap getInputMap(int)>(1);

        $r4 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(java.lang.String)>("ctrl TAB");

        virtualinvoke $r3.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r4, "focusNextComponent");

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.InputMap getInputMap(int)>(1);

        $r6 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(java.lang.String)>("shift ctrl TAB");

        virtualinvoke $r5.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r6, "focusPreviousComponent");

        $r7 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.ActionMap getActionMap()>();

        $r8 = specialinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.Action createFocusTransferAction(boolean)>(1);

        virtualinvoke $r7.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("focusNextComponent", $r8);

        $r9 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.ActionMap getActionMap()>();

        $r10 = specialinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.Action createFocusTransferAction(boolean)>(0);

        virtualinvoke $r9.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("focusPreviousComponent", $r10);

        return;
    }

    private javax.swing.Action createFocusTransferAction(boolean)
    {
        org.jdesktop.swingx.action.BoundAction $r0;
        java.lang.String $r2, $r3;
        org.jdesktop.swingx.JXTable r1;
        boolean z0;

        r1 := @this: org.jdesktop.swingx.JXTable;

        z0 := @parameter0: boolean;

        $r0 = new org.jdesktop.swingx.action.BoundAction;

        if z0 == 0 goto label1;

        $r2 = "focusNextComponent";

        goto label2;

     label1:
        $r2 = "focusPreviousComponent";

     label2:
        specialinvoke $r0.<org.jdesktop.swingx.action.BoundAction: void <init>(java.lang.String,java.lang.String)>(null, $r2);

        if z0 == 0 goto label3;

        $r3 = "transferFocus";

        goto label4;

     label3:
        $r3 = "transferFocusBackward";

     label4:
        virtualinvoke $r0.<org.jdesktop.swingx.action.BoundAction: void registerCallback(java.lang.Object,java.lang.String)>(r1, $r3);

        return $r0;
    }

    private void initActionsAndBindings()
    {
        javax.swing.KeyStroke $r9;
        javax.swing.Action $r4, $r5, $r6, $r7;
        org.jdesktop.swingx.JXTable r0;
        org.jdesktop.swingx.search.SearchFactory $r8;
        org.jdesktop.swingx.JXTable$Actions $r2, $r3;
        javax.swing.InputMap $r10;
        javax.swing.ActionMap $r1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.ActionMap getActionMap()>();

        $r2 = new org.jdesktop.swingx.JXTable$Actions;

        specialinvoke $r2.<org.jdesktop.swingx.JXTable$Actions: void <init>(org.jdesktop.swingx.JXTable,java.lang.String)>(r0, "print");

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("print", $r2);

        $r3 = new org.jdesktop.swingx.JXTable$Actions;

        specialinvoke $r3.<org.jdesktop.swingx.JXTable$Actions: void <init>(org.jdesktop.swingx.JXTable,java.lang.String)>(r0, "find");

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("find", $r3);

        $r4 = specialinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.Action createCancelAction()>();

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("cancel", $r4);

        $r5 = specialinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.Action createPackAllAction()>();

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("column.packAll", $r5);

        $r6 = specialinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.Action createPackSelectedAction()>();

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("column.packSelected", $r6);

        $r7 = specialinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.Action createHorizontalScrollAction()>();

        virtualinvoke $r1.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("column.horizontalScroll", $r7);

        $r8 = staticinvoke <org.jdesktop.swingx.search.SearchFactory: org.jdesktop.swingx.search.SearchFactory getInstance()>();

        $r9 = virtualinvoke $r8.<org.jdesktop.swingx.search.SearchFactory: javax.swing.KeyStroke getSearchAccelerator()>();

        $r10 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.InputMap getInputMap(int)>(1);

        virtualinvoke $r10.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r9, "find");

        return;
    }

    private javax.swing.Action createCancelAction()
    {
        org.jdesktop.swingx.JXTable$1 $r0;
        org.jdesktop.swingx.JXTable r1;

        r1 := @this: org.jdesktop.swingx.JXTable;

        $r0 = new org.jdesktop.swingx.JXTable$1;

        specialinvoke $r0.<org.jdesktop.swingx.JXTable$1: void <init>(org.jdesktop.swingx.JXTable)>(r1);

        return $r0;
    }

    private javax.swing.Action createHorizontalScrollAction()
    {
        org.jdesktop.swingx.action.BoundAction $r0;
        org.jdesktop.swingx.JXTable r1;
        boolean $z0;

        r1 := @this: org.jdesktop.swingx.JXTable;

        $r0 = new org.jdesktop.swingx.action.BoundAction;

        specialinvoke $r0.<org.jdesktop.swingx.action.BoundAction: void <init>(java.lang.String,java.lang.String)>(null, "column.horizontalScroll");

        virtualinvoke $r0.<org.jdesktop.swingx.action.BoundAction: void setStateAction()>();

        virtualinvoke $r0.<org.jdesktop.swingx.action.BoundAction: void registerCallback(java.lang.Object,java.lang.String)>(r1, "setHorizontalScrollEnabled");

        $z0 = virtualinvoke r1.<org.jdesktop.swingx.JXTable: boolean isHorizontalScrollEnabled()>();

        virtualinvoke $r0.<org.jdesktop.swingx.action.BoundAction: void setSelected(boolean)>($z0);

        return $r0;
    }

    protected java.lang.String getUIString(java.lang.String)
    {
        java.util.Locale $r2;
        java.lang.String r1, $r3;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.util.Locale getLocale()>();

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.lang.String getUIString(java.lang.String,java.util.Locale)>(r1, $r2);

        return $r3;
    }

    protected java.lang.String getUIString(java.lang.String, java.util.Locale)
    {
        org.jdesktop.swingx.JXTable r7;
        java.util.Locale r5;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String r2, $r4, $r6, $r8;

        r7 := @this: org.jdesktop.swingx.JXTable;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.Locale;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JXTable.");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <org.jdesktop.swingx.plaf.UIManagerExt: java.lang.String getString(java.lang.Object,java.util.Locale)>($r4, r5);

        if $r6 == null goto label1;

        $r8 = $r6;

        goto label2;

     label1:
        $r8 = r2;

     label2:
        return $r8;
    }

    private javax.swing.Action createPackSelectedAction()
    {
        int $i0;
        org.jdesktop.swingx.action.BoundAction $r0;
        org.jdesktop.swingx.JXTable r1;
        boolean $z0;

        r1 := @this: org.jdesktop.swingx.JXTable;

        $r0 = new org.jdesktop.swingx.action.BoundAction;

        specialinvoke $r0.<org.jdesktop.swingx.action.BoundAction: void <init>(java.lang.String,java.lang.String)>(null, "column.packSelected");

        virtualinvoke $r0.<org.jdesktop.swingx.action.BoundAction: void registerCallback(java.lang.Object,java.lang.String)>(r1, "packSelected");

        $i0 = virtualinvoke r1.<org.jdesktop.swingx.JXTable: int getSelectedColumnCount()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        virtualinvoke $r0.<org.jdesktop.swingx.action.BoundAction: void setEnabled(boolean)>($z0);

        return $r0;
    }

    private javax.swing.Action createPackAllAction()
    {
        org.jdesktop.swingx.action.BoundAction $r0;
        org.jdesktop.swingx.JXTable r1;

        r1 := @this: org.jdesktop.swingx.JXTable;

        $r0 = new org.jdesktop.swingx.action.BoundAction;

        specialinvoke $r0.<org.jdesktop.swingx.action.BoundAction: void <init>(java.lang.String,java.lang.String)>(null, "column.packAll");

        virtualinvoke $r0.<org.jdesktop.swingx.action.BoundAction: void registerCallback(java.lang.Object,java.lang.String)>(r1, "packAll");

        return $r0;
    }

    public void setLocale(java.util.Locale)
    {
        org.jdesktop.swingx.JXTable r0;
        java.util.Locale r1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: java.util.Locale;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void updateLocaleState(java.util.Locale)>(r1);

        specialinvoke r0.<javax.swing.JTable: void setLocale(java.util.Locale)>(r1);

        return;
    }

    protected void updateLocaleState(java.util.Locale)
    {
        org.jdesktop.swingx.JXTable r0;
        java.util.Locale r1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: java.util.Locale;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void updateLocaleActionState(java.lang.String,java.util.Locale)>("column.horizontalScroll", r1);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void updateLocaleActionState(java.lang.String,java.util.Locale)>("column.packAll", r1);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void updateLocaleActionState(java.lang.String,java.util.Locale)>("column.packSelected", r1);

        return;
    }

    protected void updateLocaleActionState(java.lang.String, java.util.Locale)
    {
        java.util.Locale r4;
        java.lang.String r2, $r5;
        javax.swing.Action $r3;
        org.jdesktop.swingx.JXTable r0;
        javax.swing.ActionMap $r1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.util.Locale;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.ActionMap getActionMap()>();

        $r3 = virtualinvoke $r1.<javax.swing.ActionMap: javax.swing.Action get(java.lang.Object)>(r2);

        if $r3 != null goto label1;

        return;

     label1:
        $r5 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.lang.String getUIString(java.lang.String,java.util.Locale)>(r2, r4);

        interfaceinvoke $r3.<javax.swing.Action: void putValue(java.lang.String,java.lang.Object)>("Name", $r5);

        return;
    }

    public void packAll()
    {
        int $i1;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $i1 = (int) -1;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void packTable(int)>($i1);

        return;
    }

    public void packSelected()
    {
        javax.swing.ListSelectionModel $r2;
        javax.swing.table.TableColumnModel $r1;
        int $i0, $i2;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel getColumnModel()>();

        $r2 = interfaceinvoke $r1.<javax.swing.table.TableColumnModel: javax.swing.ListSelectionModel getSelectionModel()>();

        $i0 = interfaceinvoke $r2.<javax.swing.ListSelectionModel: int getLeadSelectionIndex()>();

        if $i0 < 0 goto label1;

        $i2 = (int) -1;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void packColumn(int,int)>($i0, $i2);

     label1:
        return;
    }

    public void columnSelectionChanged(javax.swing.event.ListSelectionEvent)
    {
        javax.swing.ListSelectionModel $r5;
        javax.swing.Action $r3;
        org.jdesktop.swingx.JXTable r0;
        java.lang.Object $r4;
        javax.swing.event.ListSelectionEvent r1;
        javax.swing.ActionMap $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: javax.swing.event.ListSelectionEvent;

        specialinvoke r0.<javax.swing.JTable: void columnSelectionChanged(javax.swing.event.ListSelectionEvent)>(r1);

        $z0 = virtualinvoke r1.<javax.swing.event.ListSelectionEvent: boolean getValueIsAdjusting()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.ActionMap getActionMap()>();

        $r3 = virtualinvoke $r2.<javax.swing.ActionMap: javax.swing.Action get(java.lang.Object)>("column.packSelected");

        if $r3 == null goto label4;

        $r4 = virtualinvoke r1.<javax.swing.event.ListSelectionEvent: java.lang.Object getSource()>();

        $r5 = (javax.swing.ListSelectionModel) $r4;

        $z1 = interfaceinvoke $r5.<javax.swing.ListSelectionModel: boolean isSelectionEmpty()>();

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        interfaceinvoke $r3.<javax.swing.Action: void setEnabled(boolean)>($z2);

     label4:
        return;
    }

    public void setHorizontalScrollEnabled(boolean)
    {
        org.jdesktop.swingx.JXTable r0;
        int $i0, $i1, $i2;
        boolean z0, $z1, $z2, $z3;

        r0 := @this: org.jdesktop.swingx.JXTable;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isHorizontalScrollEnabled()>();

        if z0 != $z1 goto label1;

        return;

     label1:
        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isHorizontalScrollEnabled()>();

        if z0 == 0 goto label3;

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getAutoResizeMode()>();

        if $i1 == 0 goto label2;

        $i2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getAutoResizeMode()>();

        r0.<org.jdesktop.swingx.JXTable: int oldAutoResizeMode> = $i2;

     label2:
        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setAutoResizeMode(int)>(0);

        r0.<org.jdesktop.swingx.JXTable: boolean intelliMode> = 1;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void updateHorizontalAction()>();

        goto label4;

     label3:
        $i0 = r0.<org.jdesktop.swingx.JXTable: int oldAutoResizeMode>;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setAutoResizeMode(int)>($i0);

     label4:
        $z3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isHorizontalScrollEnabled()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,boolean,boolean)>("horizontalScrollEnabled", $z2, $z3);

        return;
    }

    public boolean isHorizontalScrollEnabled()
    {
        int $i0;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = r0.<org.jdesktop.swingx.JXTable: boolean intelliMode>;

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getAutoResizeMode()>();

        if $i0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setAutoResizeMode(int)
    {
        int i0;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        r0.<org.jdesktop.swingx.JXTable: int oldAutoResizeMode> = i0;

     label1:
        r0.<org.jdesktop.swingx.JXTable: boolean intelliMode> = 0;

        specialinvoke r0.<javax.swing.JTable: void setAutoResizeMode(int)>(i0);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void updateHorizontalAction()>();

        return;
    }

    protected void updateHorizontalAction()
    {
        org.jdesktop.swingx.action.BoundAction $r3;
        javax.swing.Action $r2;
        org.jdesktop.swingx.JXTable r0;
        javax.swing.ActionMap $r1;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.ActionMap getActionMap()>();

        $r2 = virtualinvoke $r1.<javax.swing.ActionMap: javax.swing.Action get(java.lang.Object)>("column.horizontalScroll");

        $z0 = $r2 instanceof org.jdesktop.swingx.action.BoundAction;

        if $z0 == 0 goto label1;

        $r3 = (org.jdesktop.swingx.action.BoundAction) $r2;

        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isHorizontalScrollEnabled()>();

        virtualinvoke $r3.<org.jdesktop.swingx.action.BoundAction: void setSelected(boolean)>($z1);

     label1:
        return;
    }

    public boolean getScrollableTracksViewportWidth()
    {
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = specialinvoke r0.<javax.swing.JTable: boolean getScrollableTracksViewportWidth()>();

        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isHorizontalScrollEnabled()>();

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r0.<org.jdesktop.swingx.JXTable: boolean hasExcessWidth()>();

        return $z2;

     label1:
        return $z0;
    }

    public void doLayout()
    {
        int $i0, $i1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getAutoResizeMode()>();

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isHorizontalScrollEnabled()>();

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.jdesktop.swingx.JXTable: boolean hasRealizedParent()>();

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r0.<org.jdesktop.swingx.JXTable: boolean hasExcessWidth()>();

        if $z2 == 0 goto label1;

        $i1 = r0.<org.jdesktop.swingx.JXTable: int oldAutoResizeMode>;

        r0.<org.jdesktop.swingx.JXTable: int autoResizeMode> = $i1;

     label1:
        r0.<org.jdesktop.swingx.JXTable: boolean inLayout> = 1;

        specialinvoke r0.<javax.swing.JTable: void doLayout()>();

        r0.<org.jdesktop.swingx.JXTable: boolean inLayout> = 0;

        r0.<org.jdesktop.swingx.JXTable: int autoResizeMode> = $i0;

        return;
    }

    private boolean hasRealizedParent()
    {
        int $i0, $i1;
        java.awt.Container $r1, $r2;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getWidth()>();

        if $i0 <= 0 goto label1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Container getParent()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Container getParent()>();

        $i1 = virtualinvoke $r2.<java.awt.Container: int getWidth()>();

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean hasExcessWidth()
    {
        java.awt.Dimension $r1;
        int $i0, $i1;
        java.awt.Container $r2;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Dimension getPreferredSize()>();

        $i0 = $r1.<java.awt.Dimension: int width>;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Container getParent()>();

        $i1 = virtualinvoke $r2.<java.awt.Container: int getWidth()>();

        if $i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void columnMarginChanged(javax.swing.event.ChangeEvent)
    {
        javax.swing.event.ChangeEvent r2;
        javax.swing.table.TableColumn $r1;
        int $i0, $i1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r2 := @parameter0: javax.swing.event.ChangeEvent;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isEditing()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void removeEditor()>();

     label1:
        $r1 = specialinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumn getResizingColumn()>();

        if $r1 == null goto label2;

        $i0 = r0.<org.jdesktop.swingx.JXTable: int autoResizeMode>;

        if $i0 != 0 goto label2;

        $z1 = r0.<org.jdesktop.swingx.JXTable: boolean inLayout>;

        if $z1 != 0 goto label2;

        $i1 = virtualinvoke $r1.<javax.swing.table.TableColumn: int getWidth()>();

        virtualinvoke $r1.<javax.swing.table.TableColumn: void setPreferredWidth(int)>($i1);

     label2:
        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void resizeAndRepaint()>();

        return;
    }

    private javax.swing.table.TableColumn getResizingColumn()
    {
        javax.swing.table.TableColumn $r3;
        javax.swing.table.JTableHeader $r1, $r2;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = r0.<org.jdesktop.swingx.JXTable: javax.swing.table.JTableHeader tableHeader>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTable: javax.swing.table.JTableHeader tableHeader>;

        $r3 = virtualinvoke $r2.<javax.swing.table.JTableHeader: javax.swing.table.TableColumn getResizingColumn()>();

     label2:
        return $r3;
    }

    public void setFillsViewportHeight(boolean)
    {
        org.jdesktop.swingx.JXTable r0;
        boolean z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean getFillsViewportHeight()>();

        if z0 != $z1 goto label1;

        return;

     label1:
        specialinvoke r0.<javax.swing.JTable: void setFillsViewportHeight(boolean)>(z0);

        return;
    }

    public void setValueAt(java.lang.Object, int, int)
    {
        int i0, i1;
        java.lang.Object r1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isCellEditable(int,int)>(i0, i1);

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<javax.swing.JTable: void setValueAt(java.lang.Object,int,int)>(r1, i0, i1);

        return;
    }

    public boolean isCellEditable(int, int)
    {
        int i0, i1;
        org.jdesktop.swingx.table.TableColumnExt $r1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, $z1, z2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isEditable()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = specialinvoke r0.<javax.swing.JTable: boolean isCellEditable(int,int)>(i0, i1);

        z2 = $z1;

        if $z1 == 0 goto label2;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.table.TableColumnExt getColumnExt(int)>(i1);

        if $r1 == null goto label2;

        z2 = virtualinvoke $r1.<org.jdesktop.swingx.table.TableColumnExt: boolean isEditable()>();

     label2:
        return z2;
    }

    public boolean getAutoCreateColumnsFromModel()
    {
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = specialinvoke r0.<javax.swing.JTable: boolean getAutoCreateColumnsFromModel()>();

        return $z0;
    }

    public void tableChanged(javax.swing.event.TableModelEvent)
    {
        javax.swing.event.TableModelEvent r1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: javax.swing.event.TableModelEvent;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void preprocessModelChange(javax.swing.event.TableModelEvent)>(r1);

        specialinvoke r0.<javax.swing.JTable: void tableChanged(javax.swing.event.TableModelEvent)>(r1);

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isStructureChanged(javax.swing.event.TableModelEvent)>(r1);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean getAutoCreateColumnsFromModel()>();

        if $z1 == 0 goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void initializeColumnWidths()>();

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void resetCalculatedScrollableSize(boolean)>(1);

     label1:
        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isStructureChanged(javax.swing.event.TableModelEvent)>(r1);

        if $z2 == 0 goto label2;

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void updateStringValueRegistryColumnClasses()>();

     label2:
        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void postprocessModelChange(javax.swing.event.TableModelEvent)>(r1);

        return;
    }

    public void sorterChanged(javax.swing.event.RowSorterEvent)
    {
        org.jdesktop.swingx.JXTable r0;
        javax.swing.event.RowSorterEvent r1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: javax.swing.event.RowSorterEvent;

        specialinvoke r0.<javax.swing.JTable: void sorterChanged(javax.swing.event.RowSorterEvent)>(r1);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void postprocessSorterChanged(javax.swing.event.RowSorterEvent)>(r1);

        return;
    }

    protected void preprocessModelChange(javax.swing.event.TableModelEvent)
    {
        javax.swing.event.TableModelEvent r2;
        javax.swing.RowFilter $r1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r2 := @parameter0: javax.swing.event.TableModelEvent;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean getSortsOnUpdates()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.RowFilter getRowFilter()>();

        if $r1 == null goto label1;

        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isUpdate(javax.swing.event.TableModelEvent)>(r2);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        r0.<org.jdesktop.swingx.JXTable: boolean forceRevalidate> = $z2;

        return;
    }

    protected void postprocessModelChange(javax.swing.event.TableModelEvent)
    {
        javax.swing.event.TableModelEvent r1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: javax.swing.event.TableModelEvent;

        $z0 = r0.<org.jdesktop.swingx.JXTable: boolean forceRevalidate>;

        if $z0 == 0 goto label1;

        $z1 = r0.<org.jdesktop.swingx.JXTable: boolean filteredRowCountChanged>;

        if $z1 == 0 goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void resizeAndRepaint()>();

     label1:
        r0.<org.jdesktop.swingx.JXTable: boolean filteredRowCountChanged> = 0;

        r0.<org.jdesktop.swingx.JXTable: boolean forceRevalidate> = 0;

        return;
    }

    protected void postprocessSorterChanged(javax.swing.event.RowSorterEvent)
    {
        org.jdesktop.swingx.JXTable r0;
        int $i0, $i1;
        javax.swing.event.RowSorterEvent r1;
        javax.swing.event.RowSorterEvent$Type $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: javax.swing.event.RowSorterEvent;

        r0.<org.jdesktop.swingx.JXTable: boolean filteredRowCountChanged> = 0;

        $z0 = r0.<org.jdesktop.swingx.JXTable: boolean forceRevalidate>;

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke r1.<javax.swing.event.RowSorterEvent: javax.swing.event.RowSorterEvent$Type getType()>();

        $r3 = <javax.swing.event.RowSorterEvent$Type: javax.swing.event.RowSorterEvent$Type SORTED>;

        if $r2 != $r3 goto label3;

        $i0 = virtualinvoke r1.<javax.swing.event.RowSorterEvent: int getPreviousRowCount()>();

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getRowCount()>();

        if $i0 == $i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<org.jdesktop.swingx.JXTable: boolean filteredRowCountChanged> = $z1;

     label3:
        return;
    }

    public void setModel(javax.swing.table.TableModel)
    {
        java.lang.Throwable $r3;
        javax.swing.RowSorter $r2;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, $z1;
        javax.swing.table.TableModel r1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: javax.swing.table.TableModel;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean getAutoCreateRowSorter()>();

     label1:
        r0.<org.jdesktop.swingx.JXTable: boolean autoCreateRowSorter> = 0;

        r0.<org.jdesktop.swingx.JXTable: boolean ignoreAddColumn> = 1;

        specialinvoke r0.<javax.swing.JTable: void setModel(javax.swing.table.TableModel)>(r1);

     label2:
        r0.<org.jdesktop.swingx.JXTable: boolean autoCreateRowSorter> = $z0;

        r0.<org.jdesktop.swingx.JXTable: boolean ignoreAddColumn> = 0;

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        r0.<org.jdesktop.swingx.JXTable: boolean autoCreateRowSorter> = $z0;

        r0.<org.jdesktop.swingx.JXTable: boolean ignoreAddColumn> = 0;

        throw $r3;

     label5:
        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean getAutoCreateRowSorter()>();

        if $z1 == 0 goto label6;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.RowSorter createDefaultRowSorter()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setRowSorter(javax.swing.RowSorter)>($r2);

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setColumnModel(javax.swing.table.TableColumnModel)
    {
        javax.swing.table.TableColumnModel r1;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: javax.swing.table.TableColumnModel;

        specialinvoke r0.<javax.swing.JTable: void setColumnModel(javax.swing.table.TableColumnModel)>(r1);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void configureSorterProperties()>();

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void initPerColumnStringValues()>();

        return;
    }

    public void setAutoCreateRowSorter(boolean)
    {
        javax.swing.RowSorter $r1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, z1, $z2, $z3;

        r0 := @this: org.jdesktop.swingx.JXTable;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean getAutoCreateRowSorter()>();

        if $z0 != z1 goto label1;

        return;

     label1:
        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean getAutoCreateRowSorter()>();

        r0.<org.jdesktop.swingx.JXTable: boolean autoCreateRowSorter> = z1;

        if z1 == 0 goto label2;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.RowSorter createDefaultRowSorter()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setRowSorter(javax.swing.RowSorter)>($r1);

     label2:
        $z3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean getAutoCreateRowSorter()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,boolean,boolean)>("autoCreateRowSorter", $z2, $z3);

        return;
    }

    public boolean getAutoCreateRowSorter()
    {
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = r0.<org.jdesktop.swingx.JXTable: boolean autoCreateRowSorter>;

        return $z0;
    }

    public void setRowSorter(javax.swing.RowSorter)
    {
        javax.swing.RowSorter r1;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: javax.swing.RowSorter;

        specialinvoke r0.<javax.swing.JTable: void setRowSorter(javax.swing.RowSorter)>(r1);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void configureSorterProperties()>();

        return;
    }

    protected void configureSorterProperties()
    {
        org.jdesktop.swingx.sort.StringValueRegistry $r2;
        org.jdesktop.swingx.table.TableColumnExt $r13, $r14;
        int $i0;
        org.jdesktop.swingx.sort.SortController $r1, $r3, $r4, $r5, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Iterator $r8;
        javax.swing.table.TableColumn r10;
        org.jdesktop.swingx.JXTable r0;
        javax.swing.SortOrder[] $r6;
        java.util.List $r7;
        java.lang.Object $r9;
        java.util.Comparator $r15;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = r0.<org.jdesktop.swingx.JXTable: boolean ignoreAddColumn>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean getControlsSorterProperties()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.StringValueRegistry getStringValueRegistry()>();

        interfaceinvoke $r1.<org.jdesktop.swingx.sort.SortController: void setStringValueProvider(org.jdesktop.swingx.sort.StringValueProvider)>($r2);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $z2 = r0.<org.jdesktop.swingx.JXTable: boolean sortable>;

        interfaceinvoke $r3.<org.jdesktop.swingx.sort.SortController: void setSortable(boolean)>($z2);

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $z3 = r0.<org.jdesktop.swingx.JXTable: boolean sortsOnUpdates>;

        interfaceinvoke $r4.<org.jdesktop.swingx.sort.SortController: void setSortsOnUpdates(boolean)>($z3);

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $r6 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.SortOrder[] getSortOrderCycle()>();

        interfaceinvoke $r5.<org.jdesktop.swingx.sort.SortController: void setSortOrderCycle(javax.swing.SortOrder[])>($r6);

        $r7 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.util.List getColumns(boolean)>(1);

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z4 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label8;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (javax.swing.table.TableColumn) $r9;

        $i0 = virtualinvoke r10.<javax.swing.table.TableColumn: int getModelIndex()>();

        $r11 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $z5 = r10 instanceof org.jdesktop.swingx.table.TableColumnExt;

        if $z5 == 0 goto label4;

        $r14 = (org.jdesktop.swingx.table.TableColumnExt) r10;

        $z7 = virtualinvoke $r14.<org.jdesktop.swingx.table.TableColumnExt: boolean isSortable()>();

        goto label5;

     label4:
        $z7 = 1;

     label5:
        interfaceinvoke $r11.<org.jdesktop.swingx.sort.SortController: void setSortable(int,boolean)>($i0, $z7);

        $r12 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $z6 = r10 instanceof org.jdesktop.swingx.table.TableColumnExt;

        if $z6 == 0 goto label6;

        $r13 = (org.jdesktop.swingx.table.TableColumnExt) r10;

        $r15 = virtualinvoke $r13.<org.jdesktop.swingx.table.TableColumnExt: java.util.Comparator getComparator()>();

        goto label7;

     label6:
        $r15 = null;

     label7:
        interfaceinvoke $r12.<org.jdesktop.swingx.sort.SortController: void setComparator(int,java.util.Comparator)>($i0, $r15);

        goto label3;

     label8:
        return;
    }

    protected javax.swing.RowSorter createDefaultRowSorter()
    {
        org.jdesktop.swingx.sort.TableSortController $r0;
        org.jdesktop.swingx.JXTable r1;
        javax.swing.table.TableModel $r2;

        r1 := @this: org.jdesktop.swingx.JXTable;

        $r0 = new org.jdesktop.swingx.sort.TableSortController;

        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXTable: javax.swing.table.TableModel getModel()>();

        specialinvoke $r0.<org.jdesktop.swingx.sort.TableSortController: void <init>(javax.swing.table.TableModel)>($r2);

        return $r0;
    }

    protected boolean isDataChanged(javax.swing.event.TableModelEvent)
    {
        javax.swing.event.TableModelEvent r0;
        int $i0, $i1, $i2;
        org.jdesktop.swingx.JXTable r1;
        boolean $z0;

        r1 := @this: org.jdesktop.swingx.JXTable;

        r0 := @parameter0: javax.swing.event.TableModelEvent;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<javax.swing.event.TableModelEvent: int getType()>();

        if $i0 != 0 goto label2;

        $i1 = virtualinvoke r0.<javax.swing.event.TableModelEvent: int getFirstRow()>();

        if $i1 != 0 goto label2;

        $i2 = virtualinvoke r0.<javax.swing.event.TableModelEvent: int getLastRow()>();

        if $i2 != 2147483647 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected boolean isUpdate(javax.swing.event.TableModelEvent)
    {
        javax.swing.event.TableModelEvent r1;
        int $i0, $i1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: javax.swing.event.TableModelEvent;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isStructureChanged(javax.swing.event.TableModelEvent)>(r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r1.<javax.swing.event.TableModelEvent: int getType()>();

        if $i0 != 0 goto label2;

        $i1 = virtualinvoke r1.<javax.swing.event.TableModelEvent: int getLastRow()>();

        if $i1 >= 2147483647 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    protected boolean isStructureChanged(javax.swing.event.TableModelEvent)
    {
        javax.swing.event.TableModelEvent r0;
        int $i0, $i2;
        org.jdesktop.swingx.JXTable r1;
        boolean $z0;

        r1 := @this: org.jdesktop.swingx.JXTable;

        r0 := @parameter0: javax.swing.event.TableModelEvent;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<javax.swing.event.TableModelEvent: int getFirstRow()>();

        $i2 = (int) -1;

        if $i0 != $i2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void setSortable(boolean)
    {
        org.jdesktop.swingx.sort.SortController $r1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, z1, $z2, $z3;

        r0 := @this: org.jdesktop.swingx.JXTable;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isSortable()>();

        r0.<org.jdesktop.swingx.JXTable: boolean sortable> = z1;

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean getControlsSorterProperties()>();

        if $z2 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        interfaceinvoke $r1.<org.jdesktop.swingx.sort.SortController: void setSortable(boolean)>(z1);

     label1:
        $z3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isSortable()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,boolean,boolean)>("sortable", $z0, $z3);

        return;
    }

    public boolean isSortable()
    {
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = r0.<org.jdesktop.swingx.JXTable: boolean sortable>;

        return $z0;
    }

    public void setSortsOnUpdates(boolean)
    {
        org.jdesktop.swingx.sort.SortController $r1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, z1, $z2, $z3;

        r0 := @this: org.jdesktop.swingx.JXTable;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean getSortsOnUpdates()>();

        r0.<org.jdesktop.swingx.JXTable: boolean sortsOnUpdates> = z1;

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean getControlsSorterProperties()>();

        if $z2 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        interfaceinvoke $r1.<org.jdesktop.swingx.sort.SortController: void setSortsOnUpdates(boolean)>(z1);

     label1:
        $z3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean getSortsOnUpdates()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,boolean,boolean)>("sortsOnUpdates", $z0, $z3);

        return;
    }

    public boolean getSortsOnUpdates()
    {
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = r0.<org.jdesktop.swingx.JXTable: boolean sortsOnUpdates>;

        return $z0;
    }

    public transient void setSortOrderCycle(javax.swing.SortOrder[])
    {
        java.lang.Object[] $r3;
        org.jdesktop.swingx.JXTable r0;
        javax.swing.SortOrder[] $r1, r2, $r4, $r5;
        int $i0;
        org.jdesktop.swingx.sort.SortController $r6;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r2 := @parameter0: javax.swing.SortOrder[];

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.SortOrder[] getSortOrderCycle()>();

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean getControlsSorterProperties()>();

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        interfaceinvoke $r6.<org.jdesktop.swingx.sort.SortController: void setSortOrderCycle(javax.swing.SortOrder[])>(r2);

     label1:
        $i0 = lengthof r2;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r2, $i0);

        $r4 = (javax.swing.SortOrder[]) $r3;

        r0.<org.jdesktop.swingx.JXTable: javax.swing.SortOrder[] sortOrderCycle> = $r4;

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.SortOrder[] getSortOrderCycle()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("sortOrderCycle", $r1, $r5);

        return;
    }

    public javax.swing.SortOrder[] getSortOrderCycle()
    {
        java.lang.Object[] $r3;
        int $i0;
        org.jdesktop.swingx.JXTable r0;
        javax.swing.SortOrder[] $r1, $r2, $r4;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r2 = r0.<org.jdesktop.swingx.JXTable: javax.swing.SortOrder[] sortOrderCycle>;

        $r1 = r0.<org.jdesktop.swingx.JXTable: javax.swing.SortOrder[] sortOrderCycle>;

        $i0 = lengthof $r1;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r4 = (javax.swing.SortOrder[]) $r3;

        return $r4;
    }

    public void setRowFilter(javax.swing.RowFilter)
    {
        org.jdesktop.swingx.sort.SortController $r1;
        javax.swing.RowFilter r2;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r2 := @parameter0: javax.swing.RowFilter;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean hasSortController()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        interfaceinvoke $r1.<org.jdesktop.swingx.sort.SortController: void setRowFilter(javax.swing.RowFilter)>(r2);

     label1:
        return;
    }

    public javax.swing.RowFilter getRowFilter()
    {
        org.jdesktop.swingx.sort.SortController $r1;
        javax.swing.RowFilter $r2;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean hasSortController()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $r2 = interfaceinvoke $r1.<org.jdesktop.swingx.sort.SortController: javax.swing.RowFilter getRowFilter()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public void resetSortOrder()
    {
        org.jdesktop.swingx.sort.SortController $r1;
        javax.swing.table.JTableHeader $r2, $r3;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean hasSortController()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        interfaceinvoke $r1.<org.jdesktop.swingx.sort.SortController: void resetSortOrders()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.JTableHeader getTableHeader()>();

        if $r2 == null goto label2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.JTableHeader getTableHeader()>();

        virtualinvoke $r3.<javax.swing.table.JTableHeader: void repaint()>();

     label2:
        return;
    }

    public void toggleSortOrder(int)
    {
        int i0, $i1;
        org.jdesktop.swingx.sort.SortController $r1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean hasSortController()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int convertColumnIndexToModel(int)>(i0);

        interfaceinvoke $r1.<org.jdesktop.swingx.sort.SortController: void toggleSortOrder(int)>($i1);

     label1:
        return;
    }

    public void setSortOrder(int, javax.swing.SortOrder)
    {
        javax.swing.SortOrder r2;
        int i0, $i1;
        org.jdesktop.swingx.sort.SortController $r1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        r2 := @parameter1: javax.swing.SortOrder;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean hasSortController()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int convertColumnIndexToModel(int)>(i0);

        interfaceinvoke $r1.<org.jdesktop.swingx.sort.SortController: void setSortOrder(int,javax.swing.SortOrder)>($i1, r2);

     label1:
        return;
    }

    public javax.swing.SortOrder getSortOrder(int)
    {
        javax.swing.SortOrder $r1, $r3;
        int i0, $i1;
        org.jdesktop.swingx.sort.SortController $r2;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean hasSortController()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int convertColumnIndexToModel(int)>(i0);

        $r3 = interfaceinvoke $r2.<org.jdesktop.swingx.sort.SortController: javax.swing.SortOrder getSortOrder(int)>($i1);

        return $r3;

     label1:
        $r1 = <javax.swing.SortOrder: javax.swing.SortOrder UNSORTED>;

        return $r1;
    }

    public void toggleSortOrder(java.lang.Object)
    {
        javax.swing.table.TableColumn $r2;
        int $i0;
        java.lang.Object r1;
        org.jdesktop.swingx.sort.SortController $r3;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean hasSortController()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = specialinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumn getColumnByIdentifier(java.lang.Object)>(r1);

        if $r2 != null goto label2;

        return;

     label2:
        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $i0 = virtualinvoke $r2.<javax.swing.table.TableColumn: int getModelIndex()>();

        interfaceinvoke $r3.<org.jdesktop.swingx.sort.SortController: void toggleSortOrder(int)>($i0);

        return;
    }

    public void setSortOrder(java.lang.Object, javax.swing.SortOrder)
    {
        javax.swing.SortOrder r4;
        javax.swing.table.TableColumn $r2;
        int $i0;
        java.lang.Object r1;
        org.jdesktop.swingx.sort.SortController $r3;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: javax.swing.SortOrder;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean hasSortController()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = specialinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumn getColumnByIdentifier(java.lang.Object)>(r1);

        if $r2 != null goto label2;

        return;

     label2:
        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $i0 = virtualinvoke $r2.<javax.swing.table.TableColumn: int getModelIndex()>();

        interfaceinvoke $r3.<org.jdesktop.swingx.sort.SortController: void setSortOrder(int,javax.swing.SortOrder)>($i0, r4);

        return;
    }

    public javax.swing.SortOrder getSortOrder(java.lang.Object)
    {
        javax.swing.table.TableColumn $r2;
        org.jdesktop.swingx.JXTable r0;
        javax.swing.SortOrder $r4, $r5, $r6;
        int $i0;
        java.lang.Object r1;
        org.jdesktop.swingx.sort.SortController $r3;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean hasSortController()>();

        if $z0 != 0 goto label1;

        $r6 = <javax.swing.SortOrder: javax.swing.SortOrder UNSORTED>;

        return $r6;

     label1:
        $r2 = specialinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumn getColumnByIdentifier(java.lang.Object)>(r1);

        if $r2 != null goto label2;

        $r5 = <javax.swing.SortOrder: javax.swing.SortOrder UNSORTED>;

        return $r5;

     label2:
        $i0 = virtualinvoke $r2.<javax.swing.table.TableColumn: int getModelIndex()>();

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $r4 = interfaceinvoke $r3.<org.jdesktop.swingx.sort.SortController: javax.swing.SortOrder getSortOrder(int)>($i0);

        return $r4;
    }

    private javax.swing.table.TableColumn getColumnByIdentifier(java.lang.Object)
    {
        javax.swing.table.TableColumn r3;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: java.lang.Object;

     label1:
        r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumn getColumn(java.lang.Object)>(r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.table.TableColumnExt getColumnExt(java.lang.Object)>(r1);

     label4:
        return r3;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    protected boolean isSortable(int)
    {
        org.jdesktop.swingx.table.TableColumnExt $r1;
        org.jdesktop.swingx.JXTable r0;
        int i0, $i1;
        org.jdesktop.swingx.sort.SortController $r2;
        boolean $z0, $z1, $z2, $z3, z4, $z5;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean hasSortController()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int convertColumnIndexToModel(int)>(i0);

        $z3 = interfaceinvoke $r2.<org.jdesktop.swingx.sort.SortController: boolean isSortable(int)>($i1);

        return $z3;

     label1:
        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isSortable()>();

        z4 = $z1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.table.TableColumnExt getColumnExt(int)>(i0);

        if $r1 == null goto label4;

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke $r1.<org.jdesktop.swingx.table.TableColumnExt: boolean isSortable()>();

        if $z2 == 0 goto label2;

        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        z4 = $z5;

     label4:
        return z4;
    }

    protected boolean isSortable(java.lang.Object)
    {
        javax.swing.table.TableColumn $r3;
        org.jdesktop.swingx.table.TableColumnExt $r2;
        org.jdesktop.swingx.JXTable r0;
        int $i0;
        java.lang.Object r1;
        org.jdesktop.swingx.sort.SortController $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean hasSortController()>();

        if $z0 == 0 goto label2;

        $r3 = specialinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumn getColumnByIdentifier(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $i0 = virtualinvoke $r3.<javax.swing.table.TableColumn: int getModelIndex()>();

        $z4 = interfaceinvoke $r5.<org.jdesktop.swingx.sort.SortController: boolean isSortable(int)>($i0);

        return $z4;

     label1:
        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $z3 = interfaceinvoke $r4.<org.jdesktop.swingx.sort.SortController: boolean isSortable()>();

        return $z3;

     label2:
        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isSortable()>();

        z5 = $z1;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.table.TableColumnExt getColumnExt(java.lang.Object)>(r1);

        if $r2 == null goto label5;

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke $r2.<org.jdesktop.swingx.table.TableColumnExt: boolean isSortable()>();

        if $z2 == 0 goto label3;

        $z6 = 1;

        goto label4;

     label3:
        $z6 = 0;

     label4:
        z5 = $z6;

     label5:
        return z5;
    }

    protected org.jdesktop.swingx.sort.SortController getSortController()
    {
        javax.swing.RowSorter $r1;
        org.jdesktop.swingx.sort.SortController $r2;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean hasSortController()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.RowSorter getRowSorter()>();

        $r2 = (org.jdesktop.swingx.sort.SortController) $r1;

        return $r2;

     label1:
        return null;
    }

    protected boolean hasSortController()
    {
        javax.swing.RowSorter $r1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.RowSorter getRowSorter()>();

        $z0 = $r1 instanceof org.jdesktop.swingx.sort.SortController;

        return $z0;
    }

    protected boolean getControlsSorterProperties()
    {
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean hasSortController()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean getAutoCreateRowSorter()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public javax.swing.table.TableColumn getSortedColumn()
    {
        java.util.Iterator $r5;
        javax.swing.table.TableColumn r7;
        org.jdesktop.swingx.JXTable r0;
        javax.swing.RowSorter$SortKey $r3;
        java.util.List $r2, $r4;
        int $i0, $i1;
        javax.swing.RowSorter $r1;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.RowSorter getRowSorter()>();

        if $r1 == null goto label3;

        $r2 = virtualinvoke $r1.<javax.swing.RowSorter: java.util.List getSortKeys()>();

        $r3 = staticinvoke <org.jdesktop.swingx.sort.SortUtils: javax.swing.RowSorter$SortKey getFirstSortingKey(java.util.List)>($r2);

        if $r3 == null goto label3;

        $i0 = virtualinvoke $r3.<javax.swing.RowSorter$SortKey: int getColumn()>();

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.util.List getColumns(boolean)>(1);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.swing.table.TableColumn) $r6;

        $i1 = virtualinvoke r7.<javax.swing.table.TableColumn: int getModelIndex()>();

        if $i1 != $i0 goto label2;

        return r7;

     label2:
        goto label1;

     label3:
        return null;
    }

    public void columnAdded(javax.swing.event.TableColumnModelEvent)
    {
        javax.swing.table.TableColumn $r2;
        javax.swing.table.TableCellRenderer $r3;
        org.jdesktop.swingx.table.TableColumnExt $r4, $r5;
        org.jdesktop.swingx.JXTable r0;
        javax.swing.event.TableColumnModelEvent r1;
        int $i0;
        java.util.Comparator $r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: javax.swing.event.TableColumnModelEvent;

        specialinvoke r0.<javax.swing.JTable: void columnAdded(javax.swing.event.TableColumnModelEvent)>(r1);

        $i0 = virtualinvoke r1.<javax.swing.event.TableColumnModelEvent: int getToIndex()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumn getColumn(int)>($i0);

        $r3 = virtualinvoke $r2.<javax.swing.table.TableColumn: javax.swing.table.TableCellRenderer getCellRenderer()>();

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void updateStringValueForColumn(javax.swing.table.TableColumn,javax.swing.table.TableCellRenderer)>($r2, $r3);

        $z0 = r0.<org.jdesktop.swingx.JXTable: boolean ignoreAddColumn>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = $r2 instanceof org.jdesktop.swingx.table.TableColumnExt;

        if $z1 == 0 goto label2;

        $r5 = (org.jdesktop.swingx.table.TableColumnExt) $r2;

        $z3 = virtualinvoke $r5.<org.jdesktop.swingx.table.TableColumnExt: boolean isSortable()>();

        goto label3;

     label2:
        $z3 = 1;

     label3:
        specialinvoke r0.<org.jdesktop.swingx.JXTable: void updateSortableAfterColumnChanged(javax.swing.table.TableColumn,boolean)>($r2, $z3);

        $z2 = $r2 instanceof org.jdesktop.swingx.table.TableColumnExt;

        if $z2 == 0 goto label4;

        $r4 = (org.jdesktop.swingx.table.TableColumnExt) $r2;

        $r6 = virtualinvoke $r4.<org.jdesktop.swingx.table.TableColumnExt: java.util.Comparator getComparator()>();

        goto label5;

     label4:
        $r6 = null;

     label5:
        specialinvoke r0.<org.jdesktop.swingx.JXTable: void updateComparatorAfterColumnChanged(javax.swing.table.TableColumn,java.util.Comparator)>($r2, $r6);

        return;
    }

    public javax.swing.table.TableColumn getColumn(int)
    {
        javax.swing.table.TableColumnModel $r1;
        javax.swing.table.TableColumn $r2;
        int i0;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel getColumnModel()>();

        $r2 = interfaceinvoke $r1.<javax.swing.table.TableColumnModel: javax.swing.table.TableColumn getColumn(int)>(i0);

        return $r2;
    }

    public java.util.List getColumns()
    {
        javax.swing.table.TableColumnModel $r1;
        java.util.Enumeration $r2;
        org.jdesktop.swingx.JXTable r0;
        java.util.ArrayList $r3;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel getColumnModel()>();

        $r2 = interfaceinvoke $r1.<javax.swing.table.TableColumnModel: java.util.Enumeration getColumns()>();

        $r3 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>($r2);

        return $r3;
    }

    public int getColumnMargin()
    {
        int $i0;
        javax.swing.table.TableColumnModel $r1;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel getColumnModel()>();

        $i0 = interfaceinvoke $r1.<javax.swing.table.TableColumnModel: int getColumnMargin()>();

        return $i0;
    }

    public void setColumnMargin(int)
    {
        int i0;
        javax.swing.table.TableColumnModel $r1;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel getColumnModel()>();

        interfaceinvoke $r1.<javax.swing.table.TableColumnModel: void setColumnMargin(int)>(i0);

        return;
    }

    public int getColumnCount(boolean)
    {
        javax.swing.table.TableColumnModel $r1, $r2;
        org.jdesktop.swingx.table.TableColumnModelExt $r3;
        org.jdesktop.swingx.JXTable r0;
        int $i0, $i1;
        boolean $z0, z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        z1 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel getColumnModel()>();

        $z0 = $r1 instanceof org.jdesktop.swingx.table.TableColumnModelExt;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel getColumnModel()>();

        $r3 = (org.jdesktop.swingx.table.TableColumnModelExt) $r2;

        $i1 = interfaceinvoke $r3.<org.jdesktop.swingx.table.TableColumnModelExt: int getColumnCount(boolean)>(z1);

        return $i1;

     label1:
        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getColumnCount()>();

        return $i0;
    }

    public java.util.List getColumns(boolean)
    {
        javax.swing.table.TableColumnModel $r1, $r3;
        org.jdesktop.swingx.table.TableColumnModelExt $r4;
        org.jdesktop.swingx.JXTable r0;
        java.util.List $r2, $r5;
        boolean $z0, z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        z1 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel getColumnModel()>();

        $z0 = $r1 instanceof org.jdesktop.swingx.table.TableColumnModelExt;

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel getColumnModel()>();

        $r4 = (org.jdesktop.swingx.table.TableColumnModelExt) $r3;

        $r5 = interfaceinvoke $r4.<org.jdesktop.swingx.table.TableColumnModelExt: java.util.List getColumns(boolean)>(z1);

        return $r5;

     label1:
        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.util.List getColumns()>();

        return $r2;
    }

    public org.jdesktop.swingx.table.TableColumnExt getColumnExt(java.lang.Object)
    {
        javax.swing.table.TableColumnModel $r1, $r5;
        javax.swing.table.TableColumn $r3;
        org.jdesktop.swingx.table.TableColumnModelExt $r6;
        org.jdesktop.swingx.table.TableColumnExt $r4, $r7;
        org.jdesktop.swingx.JXTable r0;
        java.lang.Exception $r8;
        java.lang.Object r2;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel getColumnModel()>();

        $z0 = $r1 instanceof org.jdesktop.swingx.table.TableColumnModelExt;

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel getColumnModel()>();

        $r6 = (org.jdesktop.swingx.table.TableColumnModelExt) $r5;

        $r7 = interfaceinvoke $r6.<org.jdesktop.swingx.table.TableColumnModelExt: org.jdesktop.swingx.table.TableColumnExt getColumnExt(java.lang.Object)>(r2);

        return $r7;

     label1:
        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumn getColumn(java.lang.Object)>(r2);

        $z1 = $r3 instanceof org.jdesktop.swingx.table.TableColumnExt;

        if $z1 == 0 goto label3;

        $r4 = (org.jdesktop.swingx.table.TableColumnExt) $r3;

     label2:
        return $r4;

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

     label5:
        return null;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    public org.jdesktop.swingx.table.TableColumnExt getColumnExt(int)
    {
        javax.swing.table.TableColumn $r1;
        int i0;
        org.jdesktop.swingx.table.TableColumnExt $r2;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumn getColumn(int)>(i0);

        $z0 = $r1 instanceof org.jdesktop.swingx.table.TableColumnExt;

        if $z0 == 0 goto label1;

        $r2 = (org.jdesktop.swingx.table.TableColumnExt) $r1;

        return $r2;

     label1:
        return null;
    }

    public void setColumnSequence(java.lang.Object[])
    {
        java.lang.Object[] r4;
        javax.swing.table.TableColumnModel $r7, $r10, $r13;
        java.util.HashMap $r2;
        int $i0, i1;
        boolean $z0, $z1;
        java.util.Iterator $r3, $r5;
        javax.swing.table.TableColumn r14, r15, r16;
        org.jdesktop.swingx.JXTable r0;
        java.util.List $r1;
        java.lang.Object $r6, $r8, $r9, $r11, $r12;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r4 := @parameter0: java.lang.Object[];

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.util.List getColumns(boolean)>(1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r14 = (javax.swing.table.TableColumn) $r11;

        $r12 = virtualinvoke r14.<javax.swing.table.TableColumn: java.lang.Object getIdentifier()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r14);

        $r13 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel getColumnModel()>();

        interfaceinvoke $r13.<javax.swing.table.TableColumnModel: void removeColumn(javax.swing.table.TableColumn)>(r14);

        goto label1;

     label2:
        i1 = 0;

     label3:
        $i0 = lengthof r4;

        if i1 >= $i0 goto label5;

        $r8 = r4[i1];

        $r9 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r15 = (javax.swing.table.TableColumn) $r9;

        if r15 == null goto label4;

        $r10 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel getColumnModel()>();

        interfaceinvoke $r10.<javax.swing.table.TableColumnModel: void addColumn(javax.swing.table.TableColumn)>(r15);

        interfaceinvoke $r1.<java.util.List: boolean remove(java.lang.Object)>(r15);

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        $r5 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r16 = (javax.swing.table.TableColumn) $r6;

        $r7 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel getColumnModel()>();

        interfaceinvoke $r7.<javax.swing.table.TableColumnModel: void addColumn(javax.swing.table.TableColumn)>(r16);

        goto label6;

     label7:
        return;
    }

    public void columnPropertyChange(java.beans.PropertyChangeEvent)
    {
        org.jdesktop.swingx.table.TableColumnExt r9;
        javax.swing.table.TableCellRenderer $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.jdesktop.swingx.JXTable r7;
        java.awt.Rectangle $r10;
        int $i0, $i1, $i2, $i3;
        java.lang.Boolean $r22, $r26;
        java.lang.String $r1, $r2, $r3, $r4, $r5;
        java.beans.PropertyChangeEvent r0;
        javax.swing.table.TableColumn $r12, $r16, $r20, $r24;
        java.lang.Object $r6, $r8, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25;
        java.util.Comparator $r18;

        r7 := @this: org.jdesktop.swingx.JXTable;

        r0 := @parameter0: java.beans.PropertyChangeEvent;

        $r1 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.String getPropertyName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("editable");

        if $z0 == 0 goto label1;

        $r23 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.Object getSource()>();

        $r24 = (javax.swing.table.TableColumn) $r23;

        $r25 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.Object getNewValue()>();

        $r26 = (java.lang.Boolean) $r25;

        $z7 = virtualinvoke $r26.<java.lang.Boolean: boolean booleanValue()>();

        specialinvoke r7.<org.jdesktop.swingx.JXTable: void updateEditingAfterColumnChanged(javax.swing.table.TableColumn,boolean)>($r24, $z7);

        goto label6;

     label1:
        $r2 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.String getPropertyName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("sortable");

        if $z1 == 0 goto label2;

        $r19 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.Object getSource()>();

        $r20 = (javax.swing.table.TableColumn) $r19;

        $r21 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.Object getNewValue()>();

        $r22 = (java.lang.Boolean) $r21;

        $z6 = virtualinvoke $r22.<java.lang.Boolean: boolean booleanValue()>();

        specialinvoke r7.<org.jdesktop.swingx.JXTable: void updateSortableAfterColumnChanged(javax.swing.table.TableColumn,boolean)>($r20, $z6);

        goto label6;

     label2:
        $r3 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.String getPropertyName()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("comparator");

        if $z2 == 0 goto label3;

        $r15 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.Object getSource()>();

        $r16 = (javax.swing.table.TableColumn) $r15;

        $r17 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.Object getNewValue()>();

        $r18 = (java.util.Comparator) $r17;

        specialinvoke r7.<org.jdesktop.swingx.JXTable: void updateComparatorAfterColumnChanged(javax.swing.table.TableColumn,java.util.Comparator)>($r16, $r18);

        goto label6;

     label3:
        $r4 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.String getPropertyName()>();

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("cellRenderer");

        if $z3 == 0 goto label4;

        $r11 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.Object getSource()>();

        $r12 = (javax.swing.table.TableColumn) $r11;

        $r13 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.Object getNewValue()>();

        $r14 = (javax.swing.table.TableCellRenderer) $r13;

        specialinvoke r7.<org.jdesktop.swingx.JXTable: void updateStringValueForColumn(javax.swing.table.TableColumn,javax.swing.table.TableCellRenderer)>($r12, $r14);

        goto label6;

     label4:
        $r5 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.String getPropertyName()>();

        $z4 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("highlighter");

        if $z4 == 0 goto label6;

        $r6 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.Object getSource()>();

        $z5 = $r6 instanceof org.jdesktop.swingx.table.TableColumnExt;

        if $z5 == 0 goto label5;

        $i0 = virtualinvoke r7.<org.jdesktop.swingx.JXTable: int getRowCount()>();

        if $i0 <= 0 goto label5;

        $r8 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.Object getSource()>();

        r9 = (org.jdesktop.swingx.table.TableColumnExt) $r8;

        $i1 = virtualinvoke r9.<org.jdesktop.swingx.table.TableColumnExt: int getModelIndex()>();

        $i2 = virtualinvoke r7.<org.jdesktop.swingx.JXTable: int convertColumnIndexToView(int)>($i1);

        $r10 = virtualinvoke r7.<org.jdesktop.swingx.JXTable: java.awt.Rectangle getCellRect(int,int,boolean)>(0, $i2, 1);

        $i3 = virtualinvoke r7.<org.jdesktop.swingx.JXTable: int getHeight()>();

        $r10.<java.awt.Rectangle: int height> = $i3;

        virtualinvoke r7.<org.jdesktop.swingx.JXTable: void repaint(java.awt.Rectangle)>($r10);

        goto label6;

     label5:
        virtualinvoke r7.<org.jdesktop.swingx.JXTable: void repaint()>();

     label6:
        return;
    }

    private void updateEditingAfterColumnChanged(javax.swing.table.TableColumn, boolean)
    {
        javax.swing.table.TableColumn r1;
        org.jdesktop.swingx.JXTable r0;
        javax.swing.table.TableCellEditor $r2;
        int $i0, $i1, $i2;
        boolean $z0, z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: javax.swing.table.TableColumn;

        z1 := @parameter1: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isEditing()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $i0 = virtualinvoke r1.<javax.swing.table.TableColumn: int getModelIndex()>();

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int convertColumnIndexToView(int)>($i0);

        if $i1 < 0 goto label2;

        $i2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getEditingColumn()>();

        if $i1 == $i2 goto label3;

     label2:
        return;

     label3:
        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableCellEditor getCellEditor()>();

        interfaceinvoke $r2.<javax.swing.table.TableCellEditor: void cancelCellEditing()>();

        return;
    }

    private void updateSortableAfterColumnChanged(javax.swing.table.TableColumn, boolean)
    {
        javax.swing.table.TableColumn r2;
        int $i0;
        org.jdesktop.swingx.sort.SortController $r1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r2 := @parameter0: javax.swing.table.TableColumn;

        z1 := @parameter1: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean getControlsSorterProperties()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $i0 = virtualinvoke r2.<javax.swing.table.TableColumn: int getModelIndex()>();

        interfaceinvoke $r1.<org.jdesktop.swingx.sort.SortController: void setSortable(int,boolean)>($i0, z1);

     label1:
        return;
    }

    private void updateComparatorAfterColumnChanged(javax.swing.table.TableColumn, java.util.Comparator)
    {
        javax.swing.table.TableColumn r2;
        int $i0;
        org.jdesktop.swingx.sort.SortController $r1;
        java.util.Comparator r3;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r2 := @parameter0: javax.swing.table.TableColumn;

        r3 := @parameter1: java.util.Comparator;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean getControlsSorterProperties()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.SortController getSortController()>();

        $i0 = virtualinvoke r2.<javax.swing.table.TableColumn: int getModelIndex()>();

        interfaceinvoke $r1.<org.jdesktop.swingx.sort.SortController: void setComparator(int,java.util.Comparator)>($i0, r3);

     label1:
        return;
    }

    public final void createDefaultColumnsFromModel()
    {
        org.jdesktop.swingx.JXTable r0;
        javax.swing.table.TableModel $r1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableModel getModel()>();

        if $r1 != null goto label1;

        return;

     label1:
        specialinvoke r0.<org.jdesktop.swingx.JXTable: void removeColumns()>();

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void createAndAddColumns()>();

        return;
    }

    private void createAndAddColumns()
    {
        javax.swing.table.TableColumnModel $r5;
        org.jdesktop.swingx.table.ColumnFactory $r2;
        org.jdesktop.swingx.table.TableColumnExt $r4;
        org.jdesktop.swingx.JXTable r0;
        int $i0, i1;
        javax.swing.table.TableModel $r1, $r3;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i1 = 0;

     label1:
        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableModel getModel()>();

        $i0 = interfaceinvoke $r1.<javax.swing.table.TableModel: int getColumnCount()>();

        if i1 >= $i0 goto label3;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.table.ColumnFactory getColumnFactory()>();

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableModel getModel()>();

        $r4 = virtualinvoke $r2.<org.jdesktop.swingx.table.ColumnFactory: org.jdesktop.swingx.table.TableColumnExt createAndConfigureTableColumn(javax.swing.table.TableModel,int)>($r3, i1);

        if $r4 == null goto label2;

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel getColumnModel()>();

        interfaceinvoke $r5.<javax.swing.table.TableColumnModel: void addColumn(javax.swing.table.TableColumn)>($r4);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void removeColumns()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        javax.swing.table.TableColumnModel $r3;
        javax.swing.table.TableColumn $r5;
        java.lang.Object $r4;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.util.List getColumns(boolean)>(1);

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel getColumnModel()>();

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (javax.swing.table.TableColumn) $r4;

        interfaceinvoke $r3.<javax.swing.table.TableColumnModel: void removeColumn(javax.swing.table.TableColumn)>($r5);

        goto label1;

     label2:
        return;
    }

    public org.jdesktop.swingx.table.ColumnFactory getColumnFactory()
    {
        org.jdesktop.swingx.table.ColumnFactory $r1, $r2, $r3;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.table.ColumnFactory columnFactory>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.jdesktop.swingx.table.ColumnFactory: org.jdesktop.swingx.table.ColumnFactory getInstance()>();

        return $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.table.ColumnFactory columnFactory>;

        return $r2;
    }

    public void setColumnFactory(org.jdesktop.swingx.table.ColumnFactory)
    {
        org.jdesktop.swingx.table.ColumnFactory $r1, r2, $r3;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r2 := @parameter0: org.jdesktop.swingx.table.ColumnFactory;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.table.ColumnFactory getColumnFactory()>();

        r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.table.ColumnFactory columnFactory> = r2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.table.ColumnFactory getColumnFactory()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("columnFactory", $r1, $r3);

        return;
    }

    public void packTable(int)
    {
        int $i0, i1, i2, $i4;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i1 := @parameter0: int;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getColumnCount()>();

        if i2 >= $i0 goto label2;

        $i4 = (int) -1;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void packColumn(int,int,int)>(i2, i1, $i4);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void packColumn(int, int)
    {
        int i0, i1, $i3;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = (int) -1;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void packColumn(int,int,int)>(i0, i1, $i3);

        return;
    }

    public void packColumn(int, int, int)
    {
        org.jdesktop.swingx.table.ColumnFactory $r1;
        int i0, i1, i2;
        org.jdesktop.swingx.table.TableColumnExt $r2;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.table.ColumnFactory getColumnFactory()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.table.TableColumnExt getColumnExt(int)>(i0);

        virtualinvoke $r1.<org.jdesktop.swingx.table.ColumnFactory: void packColumn(org.jdesktop.swingx.JXTable,org.jdesktop.swingx.table.TableColumnExt,int,int)>(r0, $r2, i1, i2);

        return;
    }

    public int getVisibleRowCount()
    {
        int $i0;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $i0 = r0.<org.jdesktop.swingx.JXTable: int visibleRowCount>;

        return $i0;
    }

    public void setVisibleRowCount(int)
    {
        java.lang.IllegalArgumentException $r1;
        org.jdesktop.swingx.JXTable r0;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("visible row count must not be negative ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getVisibleRowCount()>();

        if $i1 != i0 goto label2;

        return;

     label2:
        $i2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getVisibleRowCount()>();

        r0.<org.jdesktop.swingx.JXTable: int visibleRowCount> = i0;

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void resetCalculatedScrollableSize(boolean)>(0);

        $i3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getVisibleRowCount()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,int,int)>("visibleRowCount", $i2, $i3);

        return;
    }

    public int getVisibleColumnCount()
    {
        int $i0;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $i0 = r0.<org.jdesktop.swingx.JXTable: int visibleColumnCount>;

        return $i0;
    }

    public void setVisibleColumnCount(int)
    {
        int $i0, i1, $i2, $i3;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getVisibleColumnCount()>();

        if $i0 != i1 goto label1;

        return;

     label1:
        $i2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getVisibleColumnCount()>();

        r0.<org.jdesktop.swingx.JXTable: int visibleColumnCount> = i1;

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void resetCalculatedScrollableSize(boolean)>(1);

        $i3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getVisibleColumnCount()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,int,int)>("visibleColumnCount", $i2, $i3);

        return;
    }

    private void resetCalculatedScrollableSize(boolean)
    {
        java.awt.Dimension $r1, $r2, $r3;
        int $i1, $i3;
        org.jdesktop.swingx.JXTable r0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.jdesktop.swingx.JXTable: java.awt.Dimension calculatedPrefScrollableViewportSize>;

        if $r1 == null goto label2;

        if z0 == 0 goto label1;

        $r3 = r0.<org.jdesktop.swingx.JXTable: java.awt.Dimension calculatedPrefScrollableViewportSize>;

        $i1 = (int) -1;

        $r3.<java.awt.Dimension: int width> = $i1;

        goto label2;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTable: java.awt.Dimension calculatedPrefScrollableViewportSize>;

        $i3 = (int) -1;

        $r2.<java.awt.Dimension: int height> = $i3;

     label2:
        return;
    }

    public void setPreferredScrollableViewportSize(java.awt.Dimension)
    {
        java.awt.Dimension r1;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: java.awt.Dimension;

        specialinvoke r0.<javax.swing.JTable: void setPreferredScrollableViewportSize(java.awt.Dimension)>(r1);

        return;
    }

    public java.awt.Dimension getPreferredScrollableViewportSize()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.jdesktop.swingx.table.ColumnFactory $r9;
        org.jdesktop.swingx.JXTable r0;
        java.awt.Dimension $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = specialinvoke r0.<javax.swing.JTable: java.awt.Dimension getPreferredScrollableViewportSize()>();

        if $r1 == null goto label1;

        $r11 = new java.awt.Dimension;

        specialinvoke $r11.<java.awt.Dimension: void <init>(java.awt.Dimension)>($r1);

        return $r11;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTable: java.awt.Dimension calculatedPrefScrollableViewportSize>;

        if $r2 != null goto label2;

        $r10 = new java.awt.Dimension;

        specialinvoke $r10.<java.awt.Dimension: void <init>()>();

        r0.<org.jdesktop.swingx.JXTable: java.awt.Dimension calculatedPrefScrollableViewportSize> = $r10;

     label2:
        $r3 = r0.<org.jdesktop.swingx.JXTable: java.awt.Dimension calculatedPrefScrollableViewportSize>;

        $i0 = $r3.<java.awt.Dimension: int width>;

        if $i0 > 0 goto label3;

        $r8 = r0.<org.jdesktop.swingx.JXTable: java.awt.Dimension calculatedPrefScrollableViewportSize>;

        $r9 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.table.ColumnFactory getColumnFactory()>();

        $i5 = virtualinvoke $r9.<org.jdesktop.swingx.table.ColumnFactory: int getPreferredScrollableViewportWidth(org.jdesktop.swingx.JXTable)>(r0);

        $r8.<java.awt.Dimension: int width> = $i5;

     label3:
        $r4 = r0.<org.jdesktop.swingx.JXTable: java.awt.Dimension calculatedPrefScrollableViewportSize>;

        $i1 = $r4.<java.awt.Dimension: int height>;

        if $i1 > 0 goto label4;

        $r7 = r0.<org.jdesktop.swingx.JXTable: java.awt.Dimension calculatedPrefScrollableViewportSize>;

        $i2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getVisibleRowCount()>();

        $i3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getRowHeight()>();

        $i4 = $i2 * $i3;

        $r7.<java.awt.Dimension: int height> = $i4;

     label4:
        $r5 = new java.awt.Dimension;

        $r6 = r0.<org.jdesktop.swingx.JXTable: java.awt.Dimension calculatedPrefScrollableViewportSize>;

        specialinvoke $r5.<java.awt.Dimension: void <init>(java.awt.Dimension)>($r6);

        return $r5;
    }

    protected void initializeColumnWidths()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        javax.swing.table.TableColumn r4;
        java.lang.Object $r3;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.util.List getColumns(boolean)>(1);

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (javax.swing.table.TableColumn) $r3;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void initializeColumnPreferredWidth(javax.swing.table.TableColumn)>(r4);

        goto label1;

     label2:
        return;
    }

    protected void initializeColumnPreferredWidth(javax.swing.table.TableColumn)
    {
        javax.swing.table.TableColumn r0;
        org.jdesktop.swingx.table.ColumnFactory $r2;
        org.jdesktop.swingx.table.TableColumnExt $r3;
        org.jdesktop.swingx.JXTable r1;
        boolean $z0;

        r1 := @this: org.jdesktop.swingx.JXTable;

        r0 := @parameter0: javax.swing.table.TableColumn;

        $z0 = r0 instanceof org.jdesktop.swingx.table.TableColumnExt;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.table.ColumnFactory getColumnFactory()>();

        $r3 = (org.jdesktop.swingx.table.TableColumnExt) r0;

        virtualinvoke $r2.<org.jdesktop.swingx.table.ColumnFactory: void configureColumnWidths(org.jdesktop.swingx.JXTable,org.jdesktop.swingx.table.TableColumnExt)>(r1, $r3);

     label1:
        return;
    }

    public void scrollRowToVisible(int)
    {
        java.awt.Rectangle $r1, $r2;
        int i0, $i1, $i2;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Rectangle getCellRect(int,int,boolean)>(i0, 0, 0);

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Rectangle getVisibleRect()>();

        $i1 = $r2.<java.awt.Rectangle: int x>;

        $r1.<java.awt.Rectangle: int x> = $i1;

        $i2 = $r2.<java.awt.Rectangle: int width>;

        $r1.<java.awt.Rectangle: int width> = $i2;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void scrollRectToVisible(java.awt.Rectangle)>($r1);

        return;
    }

    public void scrollColumnToVisible(int)
    {
        java.awt.Rectangle $r1, $r2;
        int i0, $i1, $i2;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Rectangle getCellRect(int,int,boolean)>(0, i0, 0);

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Rectangle getVisibleRect()>();

        $i1 = $r2.<java.awt.Rectangle: int y>;

        $r1.<java.awt.Rectangle: int y> = $i1;

        $i2 = $r2.<java.awt.Rectangle: int height>;

        $r1.<java.awt.Rectangle: int height> = $i2;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void scrollRectToVisible(java.awt.Rectangle)>($r1);

        return;
    }

    public void scrollCellToVisible(int, int)
    {
        java.awt.Rectangle $r1;
        int i0, i1;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Rectangle getCellRect(int,int,boolean)>(i0, i1, 0);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void scrollRectToVisible(java.awt.Rectangle)>($r1);

        return;
    }

    public int getSelectionMode()
    {
        javax.swing.ListSelectionModel $r1;
        int $i0;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.ListSelectionModel getSelectionModel()>();

        $i0 = interfaceinvoke $r1.<javax.swing.ListSelectionModel: int getSelectionMode()>();

        return $i0;
    }

    protected void doFind()
    {
        org.jdesktop.swingx.search.Searchable $r2;
        org.jdesktop.swingx.search.SearchFactory $r0;
        org.jdesktop.swingx.JXTable r1;

        r1 := @this: org.jdesktop.swingx.JXTable;

        $r0 = staticinvoke <org.jdesktop.swingx.search.SearchFactory: org.jdesktop.swingx.search.SearchFactory getInstance()>();

        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.search.Searchable getSearchable()>();

        virtualinvoke $r0.<org.jdesktop.swingx.search.SearchFactory: void showFindInput(javax.swing.JComponent,org.jdesktop.swingx.search.Searchable)>(r1, $r2);

        return;
    }

    public org.jdesktop.swingx.search.Searchable getSearchable()
    {
        org.jdesktop.swingx.search.Searchable $r1, $r2;
        org.jdesktop.swingx.JXTable r0;
        org.jdesktop.swingx.search.TableSearchable $r3;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.search.Searchable searchable>;

        if $r1 != null goto label1;

        $r3 = new org.jdesktop.swingx.search.TableSearchable;

        specialinvoke $r3.<org.jdesktop.swingx.search.TableSearchable: void <init>(org.jdesktop.swingx.JXTable)>(r0);

        r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.search.Searchable searchable> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.search.Searchable searchable>;

        return $r2;
    }

    public void setSearchable(org.jdesktop.swingx.search.Searchable)
    {
        org.jdesktop.swingx.search.Searchable r1;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: org.jdesktop.swingx.search.Searchable;

        r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.search.Searchable searchable> = r1;

        return;
    }

    protected org.jdesktop.swingx.decorator.ComponentAdapter getComponentAdapter()
    {
        org.jdesktop.swingx.JXTable$TableAdapter $r3;
        org.jdesktop.swingx.decorator.ComponentAdapter $r1, $r2;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.ComponentAdapter dataAdapter>;

        if $r1 != null goto label1;

        $r3 = new org.jdesktop.swingx.JXTable$TableAdapter;

        specialinvoke $r3.<org.jdesktop.swingx.JXTable$TableAdapter: void <init>(org.jdesktop.swingx.JXTable)>(r0);

        r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.ComponentAdapter dataAdapter> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.ComponentAdapter dataAdapter>;

        return $r2;
    }

    protected org.jdesktop.swingx.decorator.ComponentAdapter getComponentAdapter(int, int)
    {
        int i0, i1;
        org.jdesktop.swingx.decorator.ComponentAdapter $r1;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.ComponentAdapter getComponentAdapter()>();

        $r1.<org.jdesktop.swingx.decorator.ComponentAdapter: int row> = i0;

        $r1.<org.jdesktop.swingx.decorator.ComponentAdapter: int column> = i1;

        return $r1;
    }

    public transient void setHighlighters(org.jdesktop.swingx.decorator.Highlighter[])
    {
        org.jdesktop.swingx.decorator.CompoundHighlighter $r2;
        org.jdesktop.swingx.decorator.Highlighter[] $r1, r3, $r4;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r3 := @parameter0: org.jdesktop.swingx.decorator.Highlighter[];

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()>();

        virtualinvoke $r2.<org.jdesktop.swingx.decorator.CompoundHighlighter: void setHighlighters(org.jdesktop.swingx.decorator.Highlighter[])>(r3);

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("highlighters", $r1, $r4);

        return;
    }

    public org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()
    {
        org.jdesktop.swingx.decorator.CompoundHighlighter $r1;
        org.jdesktop.swingx.JXTable r0;
        org.jdesktop.swingx.decorator.Highlighter[] $r2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()>();

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.decorator.CompoundHighlighter: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        return $r2;
    }

    public void addHighlighter(org.jdesktop.swingx.decorator.Highlighter)
    {
        org.jdesktop.swingx.decorator.Highlighter r3;
        org.jdesktop.swingx.decorator.CompoundHighlighter $r2;
        org.jdesktop.swingx.decorator.Highlighter[] $r1, $r4;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r3 := @parameter0: org.jdesktop.swingx.decorator.Highlighter;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()>();

        virtualinvoke $r2.<org.jdesktop.swingx.decorator.CompoundHighlighter: void addHighlighter(org.jdesktop.swingx.decorator.Highlighter)>(r3);

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("highlighters", $r1, $r4);

        return;
    }

    public void removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)
    {
        org.jdesktop.swingx.decorator.Highlighter r3;
        org.jdesktop.swingx.decorator.CompoundHighlighter $r2;
        org.jdesktop.swingx.decorator.Highlighter[] $r1, $r4;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r3 := @parameter0: org.jdesktop.swingx.decorator.Highlighter;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()>();

        virtualinvoke $r2.<org.jdesktop.swingx.decorator.CompoundHighlighter: void removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)>(r3);

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("highlighters", $r1, $r4);

        return;
    }

    protected org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()
    {
        org.jdesktop.swingx.decorator.CompoundHighlighter $r1, $r2, $r3, $r5;
        org.jdesktop.swingx.decorator.Highlighter[] $r4;
        javax.swing.event.ChangeListener $r6;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        if $r1 != null goto label1;

        $r3 = new org.jdesktop.swingx.decorator.CompoundHighlighter;

        $r4 = newarray (org.jdesktop.swingx.decorator.Highlighter)[0];

        specialinvoke $r3.<org.jdesktop.swingx.decorator.CompoundHighlighter: void <init>(org.jdesktop.swingx.decorator.Highlighter[])>($r4);

        r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter> = $r3;

        $r5 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        $r6 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.event.ChangeListener getHighlighterChangeListener()>();

        virtualinvoke $r5.<org.jdesktop.swingx.decorator.CompoundHighlighter: void addChangeListener(javax.swing.event.ChangeListener)>($r6);

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        return $r2;
    }

    protected javax.swing.event.ChangeListener getHighlighterChangeListener()
    {
        javax.swing.event.ChangeListener $r1, $r2, $r3;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = r0.<org.jdesktop.swingx.JXTable: javax.swing.event.ChangeListener highlighterChangeListener>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.event.ChangeListener createHighlighterChangeListener()>();

        r0.<org.jdesktop.swingx.JXTable: javax.swing.event.ChangeListener highlighterChangeListener> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTable: javax.swing.event.ChangeListener highlighterChangeListener>;

        return $r2;
    }

    protected javax.swing.event.ChangeListener createHighlighterChangeListener()
    {
        org.jdesktop.swingx.JXTable r1;
        org.jdesktop.swingx.JXTable$2 $r0;

        r1 := @this: org.jdesktop.swingx.JXTable;

        $r0 = new org.jdesktop.swingx.JXTable$2;

        specialinvoke $r0.<org.jdesktop.swingx.JXTable$2: void <init>(org.jdesktop.swingx.JXTable)>(r1);

        return $r0;
    }

    protected org.jdesktop.swingx.sort.StringValueRegistry getStringValueRegistry()
    {
        org.jdesktop.swingx.sort.StringValueRegistry $r1, $r2, $r3;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.StringValueRegistry stringValueRegistry>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.StringValueRegistry createDefaultStringValueRegistry()>();

        r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.StringValueRegistry stringValueRegistry> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.StringValueRegistry stringValueRegistry>;

        return $r2;
    }

    protected org.jdesktop.swingx.sort.StringValueRegistry createDefaultStringValueRegistry()
    {
        org.jdesktop.swingx.sort.StringValueRegistry $r0;
        org.jdesktop.swingx.JXTable r1;

        r1 := @this: org.jdesktop.swingx.JXTable;

        $r0 = new org.jdesktop.swingx.sort.StringValueRegistry;

        specialinvoke $r0.<org.jdesktop.swingx.sort.StringValueRegistry: void <init>()>();

        return $r0;
    }

    private void updateStringValueRegistryColumnClasses()
    {
        org.jdesktop.swingx.sort.StringValueRegistry $r1, $r3;
        org.jdesktop.swingx.JXTable r0;
        int $i0, i1;
        java.lang.Class $r5;
        javax.swing.table.TableModel $r2, $r4;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.StringValueRegistry getStringValueRegistry()>();

        virtualinvoke $r1.<org.jdesktop.swingx.sort.StringValueRegistry: void setColumnClasses(java.util.Map)>(null);

        i1 = 0;

     label1:
        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableModel getModel()>();

        $i0 = interfaceinvoke $r2.<javax.swing.table.TableModel: int getColumnCount()>();

        if i1 >= $i0 goto label2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.StringValueRegistry getStringValueRegistry()>();

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableModel getModel()>();

        $r5 = interfaceinvoke $r4.<javax.swing.table.TableModel: java.lang.Class getColumnClass(int)>(i1);

        virtualinvoke $r3.<org.jdesktop.swingx.sort.StringValueRegistry: void setColumnClass(java.lang.Class,int)>($r5, i1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void updateStringValueForColumn(javax.swing.table.TableColumn, javax.swing.table.TableCellRenderer)
    {
        org.jdesktop.swingx.renderer.StringValue $r4;
        javax.swing.table.TableColumn r3;
        int $i0;
        org.jdesktop.swingx.sort.StringValueRegistry $r1;
        javax.swing.table.TableCellRenderer r2;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r3 := @parameter0: javax.swing.table.TableColumn;

        r2 := @parameter1: javax.swing.table.TableCellRenderer;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.StringValueRegistry getStringValueRegistry()>();

        $z0 = r2 instanceof org.jdesktop.swingx.renderer.StringValue;

        if $z0 == 0 goto label1;

        $r4 = (org.jdesktop.swingx.renderer.StringValue) r2;

        goto label2;

     label1:
        $r4 = null;

     label2:
        $i0 = virtualinvoke r3.<javax.swing.table.TableColumn: int getModelIndex()>();

        virtualinvoke $r1.<org.jdesktop.swingx.sort.StringValueRegistry: void setStringValue(org.jdesktop.swingx.renderer.StringValue,int)>($r4, $i0);

        return;
    }

    private void initDefaultStringValues()
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.jdesktop.swingx.sort.StringValueRegistry $r7;
        org.jdesktop.swingx.JXTable r0;
        org.jdesktop.swingx.renderer.StringValue $r9;
        java.lang.Object $r4, $r6;
        java.lang.Class $r8;
        java.util.Hashtable $r1, $r5;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = r0.<org.jdesktop.swingx.JXTable: java.util.Hashtable defaultRenderersByColumnClass>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = r0.<org.jdesktop.swingx.JXTable: java.util.Hashtable defaultRenderersByColumnClass>;

        $r6 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r4);

        $z1 = $r6 instanceof org.jdesktop.swingx.renderer.StringValue;

        if $z1 == 0 goto label2;

        $r7 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.StringValueRegistry getStringValueRegistry()>();

        $r9 = (org.jdesktop.swingx.renderer.StringValue) $r6;

        $r8 = (java.lang.Class) $r4;

        virtualinvoke $r7.<org.jdesktop.swingx.sort.StringValueRegistry: void setStringValue(org.jdesktop.swingx.renderer.StringValue,java.lang.Class)>($r9, $r8);

     label2:
        goto label1;

     label3:
        return;
    }

    private void initPerColumnStringValues()
    {
        java.util.Iterator $r3;
        javax.swing.table.TableColumn r5;
        org.jdesktop.swingx.sort.StringValueRegistry $r1;
        javax.swing.table.TableCellRenderer $r6;
        org.jdesktop.swingx.JXTable r0;
        java.util.List $r2;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.StringValueRegistry getStringValueRegistry()>();

        virtualinvoke $r1.<org.jdesktop.swingx.sort.StringValueRegistry: void clearColumnStringValues()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.util.List getColumns(boolean)>(1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (javax.swing.table.TableColumn) $r4;

        $r6 = virtualinvoke r5.<javax.swing.table.TableColumn: javax.swing.table.TableCellRenderer getCellRenderer()>();

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void updateStringValueForColumn(javax.swing.table.TableColumn,javax.swing.table.TableCellRenderer)>(r5, $r6);

        goto label1;

     label2:
        return;
    }

    public void setDefaultRenderer(java.lang.Class, javax.swing.table.TableCellRenderer)
    {
        org.jdesktop.swingx.renderer.StringValue $r4;
        java.lang.Class r1;
        org.jdesktop.swingx.sort.StringValueRegistry $r3;
        javax.swing.table.TableCellRenderer r2;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: javax.swing.table.TableCellRenderer;

        specialinvoke r0.<javax.swing.JTable: void setDefaultRenderer(java.lang.Class,javax.swing.table.TableCellRenderer)>(r1, r2);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.StringValueRegistry getStringValueRegistry()>();

        $z0 = r2 instanceof org.jdesktop.swingx.renderer.StringValue;

        if $z0 == 0 goto label1;

        $r4 = (org.jdesktop.swingx.renderer.StringValue) r2;

        goto label2;

     label1:
        $r4 = null;

     label2:
        virtualinvoke $r3.<org.jdesktop.swingx.sort.StringValueRegistry: void setStringValue(org.jdesktop.swingx.renderer.StringValue,java.lang.Class)>($r4, r1);

        return;
    }

    public java.lang.String getStringAt(int, int)
    {
        org.jdesktop.swingx.sort.StringValueRegistry $r1;
        org.jdesktop.swingx.JXTable r0;
        org.jdesktop.swingx.renderer.StringValue $r2;
        int i0, $i1, i2, $i3;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.sort.StringValueRegistry getStringValueRegistry()>();

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int convertRowIndexToModel(int)>(i0);

        $i3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int convertColumnIndexToModel(int)>(i2);

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.sort.StringValueRegistry: org.jdesktop.swingx.renderer.StringValue getStringValue(int,int)>($i1, $i3);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.lang.Object getValueAt(int,int)>(i0, i2);

        $r4 = interfaceinvoke $r2.<org.jdesktop.swingx.renderer.StringValue: java.lang.String getString(java.lang.Object)>($r3);

        return $r4;
    }

    public javax.swing.table.TableCellRenderer getCellRenderer(int, int)
    {
        int i0, i1;
        javax.swing.table.TableCellRenderer $r1, r2;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<javax.swing.JTable: javax.swing.table.TableCellRenderer getCellRenderer(int,int)>(i0, i1);

        r2 = $r1;

        if $r1 != null goto label1;

        r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableCellRenderer getDefaultRenderer(java.lang.Class)>(class "Ljava/lang/Object;");

     label1:
        return r2;
    }

    public java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer, int, int)
    {
        org.jdesktop.swingx.decorator.Highlighter[] $r6;
        org.jdesktop.swingx.decorator.ComponentAdapter $r3;
        javax.swing.table.TableCellRenderer r1;
        org.jdesktop.swingx.table.TableColumnExt $r5;
        org.jdesktop.swingx.JXTable r0;
        java.awt.Component $r2, r9;
        org.jdesktop.swingx.decorator.Highlighter r7;
        org.jdesktop.swingx.decorator.CompoundHighlighter $r4, $r8;
        int i0, i1, i2, i3;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: javax.swing.table.TableCellRenderer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = specialinvoke r0.<javax.swing.JTable: java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer,int,int)>(r1, i0, i1);

        r9 = $r2;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void adjustComponentOrientation(java.awt.Component)>($r2);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void resetDefaultTableCellRendererColors(java.awt.Component,int,int)>($r2, i0, i1);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.ComponentAdapter getComponentAdapter(int,int)>(i0, i1);

        $r4 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        if $r4 == null goto label1;

        $r8 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        r9 = virtualinvoke $r8.<org.jdesktop.swingx.decorator.CompoundHighlighter: java.awt.Component highlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)>($r2, $r3);

     label1:
        $r5 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.table.TableColumnExt getColumnExt(int)>(i1);

        if $r5 == null goto label3;

        $r6 = virtualinvoke $r5.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        i2 = lengthof $r6;

        i3 = 0;

     label2:
        if i3 >= i2 goto label3;

        r7 = $r6[i3];

        r9 = interfaceinvoke r7.<org.jdesktop.swingx.decorator.Highlighter: java.awt.Component highlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)>(r9, $r3);

        i3 = i3 + 1;

        goto label2;

     label3:
        return r9;
    }

    protected void resetDefaultTableCellRendererColors(java.awt.Component, int, int)
    {
        org.jdesktop.swingx.decorator.ComponentAdapter $r3;
        org.jdesktop.swingx.decorator.ResetDTCRColorHighlighter $r7;
        org.jdesktop.swingx.JXTable r0;
        java.awt.Component r5;
        org.jdesktop.swingx.decorator.Highlighter $r4, $r6;
        int i0, i1;
        java.lang.Boolean $r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r5 := @parameter0: java.awt.Component;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.lang.Object getClientProperty(java.lang.Object)>("useDTCRColorMemoryHack");

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.ComponentAdapter getComponentAdapter(int,int)>(i0, i1);

        $r4 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.Highlighter resetDefaultTableCellRendererHighlighter>;

        if $r4 != null goto label2;

        $r7 = new org.jdesktop.swingx.decorator.ResetDTCRColorHighlighter;

        specialinvoke $r7.<org.jdesktop.swingx.decorator.ResetDTCRColorHighlighter: void <init>()>();

        r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.Highlighter resetDefaultTableCellRendererHighlighter> = $r7;

     label2:
        $r6 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.Highlighter resetDefaultTableCellRendererHighlighter>;

        interfaceinvoke $r6.<org.jdesktop.swingx.decorator.Highlighter: java.awt.Component highlight(java.awt.Component,org.jdesktop.swingx.decorator.ComponentAdapter)>(r5, $r3);

        return;
    }

    public java.awt.Component prepareEditor(javax.swing.table.TableCellEditor, int, int)
    {
        javax.swing.table.TableCellEditor r1;
        int i0, i1;
        org.jdesktop.swingx.JXTable r0;
        java.awt.Component $r2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: javax.swing.table.TableCellEditor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = specialinvoke r0.<javax.swing.JTable: java.awt.Component prepareEditor(javax.swing.table.TableCellEditor,int,int)>(r1, i0, i1);

        if $r2 == null goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void adjustComponentOrientation(java.awt.Component)>($r2);

     label1:
        return $r2;
    }

    protected void adjustComponentOrientation(java.awt.Component)
    {
        java.awt.Component r0;
        org.jdesktop.swingx.JXTable r2;
        java.awt.ComponentOrientation $r1, $r3, $r4;
        boolean $z0;

        r2 := @this: org.jdesktop.swingx.JXTable;

        r0 := @parameter0: java.awt.Component;

        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.ComponentOrientation getComponentOrientation()>();

        $r3 = virtualinvoke r2.<org.jdesktop.swingx.JXTable: java.awt.ComponentOrientation getComponentOrientation()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = virtualinvoke r2.<org.jdesktop.swingx.JXTable: java.awt.ComponentOrientation getComponentOrientation()>();

        virtualinvoke r0.<java.awt.Component: void applyComponentOrientation(java.awt.ComponentOrientation)>($r4);

        return;
    }

    public javax.swing.table.TableCellRenderer getNewDefaultRenderer(java.lang.Class)
    {
        javax.swing.table.TableCellRenderer $r2, $r5;
        java.util.logging.Logger $r8;
        org.jdesktop.swingx.JXTable r0;
        java.lang.Exception $r6;
        java.lang.Class r1, $r3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r7, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableCellRenderer getDefaultRenderer(java.lang.Class)>(r1);

        if $r2 == null goto label4;

     label1:
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        $r5 = (javax.swing.table.TableCellRenderer) $r4;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r8 = <org.jdesktop.swingx.JXTable: java.util.logging.Logger LOG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("could not create renderer for ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.logging.Logger: void fine(java.lang.String)>($r11);

     label4:
        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void createDefaultRenderers()
    {
        java.lang.Integer $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        org.jdesktop.swingx.renderer.FormatStringValue $r26, $r28;
        javax.swing.UIDefaults $r22;
        org.jdesktop.swingx.JXTable r0;
        org.jdesktop.swingx.renderer.DefaultTableRenderer $r24, $r25, $r27, $r29, $r33;
        java.lang.Object[] $r1;
        org.jdesktop.swingx.renderer.MappedValue $r30;
        org.jdesktop.swingx.renderer.CheckBoxProvider $r34;
        java.util.Hashtable $r23;
        org.jdesktop.swingx.renderer.IconValue $r31;
        org.jdesktop.swingx.renderer.StringValue $r32;

        r0 := @this: org.jdesktop.swingx.JXTable;

        specialinvoke r0.<javax.swing.JTable: void createDefaultRenderers()>();

        $r1 = newarray (java.lang.Object)[20];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r1[2] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1[3] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r1[4] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1[5] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r1[6] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1[7] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r1[8] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1[9] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r1[10] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1[11] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r1[12] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1[13] = $r15;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r1[14] = $r16;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1[15] = $r17;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        $r1[16] = $r18;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1[17] = $r19;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r1[18] = $r20;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1[19] = $r21;

        $r22 = new javax.swing.UIDefaults;

        specialinvoke $r22.<javax.swing.UIDefaults: void <init>(java.lang.Object[])>($r1);

        r0.<org.jdesktop.swingx.JXTable: java.util.Hashtable defaultRenderersByColumnClass> = $r22;

        $r23 = r0.<org.jdesktop.swingx.JXTable: java.util.Hashtable defaultRenderersByColumnClass>;

        virtualinvoke $r23.<java.util.Hashtable: void clear()>();

        $r24 = new org.jdesktop.swingx.renderer.DefaultTableRenderer;

        specialinvoke $r24.<org.jdesktop.swingx.renderer.DefaultTableRenderer: void <init>()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setDefaultRenderer(java.lang.Class,javax.swing.table.TableCellRenderer)>(class "Ljava/lang/Object;", $r24);

        $r25 = new org.jdesktop.swingx.renderer.DefaultTableRenderer;

        $r26 = <org.jdesktop.swingx.renderer.StringValues: org.jdesktop.swingx.renderer.FormatStringValue NUMBER_TO_STRING>;

        specialinvoke $r25.<org.jdesktop.swingx.renderer.DefaultTableRenderer: void <init>(org.jdesktop.swingx.renderer.StringValue,int)>($r26, 4);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setDefaultRenderer(java.lang.Class,javax.swing.table.TableCellRenderer)>(class "Ljava/lang/Number;", $r25);

        $r27 = new org.jdesktop.swingx.renderer.DefaultTableRenderer;

        $r28 = <org.jdesktop.swingx.renderer.StringValues: org.jdesktop.swingx.renderer.FormatStringValue DATE_TO_STRING>;

        specialinvoke $r27.<org.jdesktop.swingx.renderer.DefaultTableRenderer: void <init>(org.jdesktop.swingx.renderer.StringValue)>($r28);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setDefaultRenderer(java.lang.Class,javax.swing.table.TableCellRenderer)>(class "Ljava/util/Date;", $r27);

        $r29 = new org.jdesktop.swingx.renderer.DefaultTableRenderer;

        $r30 = new org.jdesktop.swingx.renderer.MappedValue;

        $r32 = <org.jdesktop.swingx.renderer.StringValues: org.jdesktop.swingx.renderer.StringValue EMPTY>;

        $r31 = <org.jdesktop.swingx.renderer.IconValues: org.jdesktop.swingx.renderer.IconValue ICON>;

        specialinvoke $r30.<org.jdesktop.swingx.renderer.MappedValue: void <init>(org.jdesktop.swingx.renderer.StringValue,org.jdesktop.swingx.renderer.IconValue)>($r32, $r31);

        specialinvoke $r29.<org.jdesktop.swingx.renderer.DefaultTableRenderer: void <init>(org.jdesktop.swingx.renderer.StringValue,int)>($r30, 0);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setDefaultRenderer(java.lang.Class,javax.swing.table.TableCellRenderer)>(class "Ljavax/swing/Icon;", $r29);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setDefaultRenderer(java.lang.Class,javax.swing.table.TableCellRenderer)>(class "Ljavax/swing/ImageIcon;", $r29);

        $r33 = new org.jdesktop.swingx.renderer.DefaultTableRenderer;

        $r34 = new org.jdesktop.swingx.renderer.CheckBoxProvider;

        specialinvoke $r34.<org.jdesktop.swingx.renderer.CheckBoxProvider: void <init>()>();

        specialinvoke $r33.<org.jdesktop.swingx.renderer.DefaultTableRenderer: void <init>(org.jdesktop.swingx.renderer.ComponentProvider)>($r34);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setDefaultRenderer(java.lang.Class,javax.swing.table.TableCellRenderer)>(class "Ljava/lang/Boolean;", $r33);

        return;
    }

    private void setLazyValue(java.util.Hashtable, java.lang.Class, java.lang.String)
    {
        javax.swing.UIDefaults$ProxyLazyValue $r2;
        java.lang.Class r1;
        java.lang.String r3;
        org.jdesktop.swingx.JXTable r4;
        java.util.Hashtable r0;

        r4 := @this: org.jdesktop.swingx.JXTable;

        r0 := @parameter0: java.util.Hashtable;

        r1 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.String;

        $r2 = new javax.swing.UIDefaults$ProxyLazyValue;

        specialinvoke $r2.<javax.swing.UIDefaults$ProxyLazyValue: void <init>(java.lang.String)>(r3);

        virtualinvoke r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    private void setLazyEditor(java.lang.Class, java.lang.String)
    {
        java.lang.Class r1;
        java.lang.String r2;
        org.jdesktop.swingx.JXTable r0;
        java.util.Hashtable $r3;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.jdesktop.swingx.JXTable: java.util.Hashtable defaultEditorsByColumnClass>;

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void setLazyValue(java.util.Hashtable,java.lang.Class,java.lang.String)>($r3, r1, r2);

        return;
    }

    protected void createDefaultEditors()
    {
        java.lang.Object[] $r0;
        org.jdesktop.swingx.table.NumberEditorExt $r24;
        java.lang.Integer $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        java.util.Hashtable $r23, $r25;
        javax.swing.UIDefaults $r22;
        org.jdesktop.swingx.JXTable r21;

        r21 := @this: org.jdesktop.swingx.JXTable;

        $r0 = newarray (java.lang.Object)[20];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r0[0] = $r1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r0[1] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r0[2] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r0[3] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r0[4] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r0[5] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r0[6] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r0[7] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r0[8] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r0[9] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r0[10] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r0[11] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r0[12] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r0[13] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r0[14] = $r15;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r0[15] = $r16;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        $r0[16] = $r17;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r0[17] = $r18;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r0[18] = $r19;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r0[19] = $r20;

        $r22 = new javax.swing.UIDefaults;

        specialinvoke $r22.<javax.swing.UIDefaults: void <init>(java.lang.Object[])>($r0);

        r21.<org.jdesktop.swingx.JXTable: java.util.Hashtable defaultEditorsByColumnClass> = $r22;

        $r23 = r21.<org.jdesktop.swingx.JXTable: java.util.Hashtable defaultEditorsByColumnClass>;

        virtualinvoke $r23.<java.util.Hashtable: void clear()>();

        specialinvoke r21.<org.jdesktop.swingx.JXTable: void setLazyEditor(java.lang.Class,java.lang.String)>(class "Ljava/lang/Object;", "org.jdesktop.swingx.JXTable$GenericEditor");

        $r25 = r21.<org.jdesktop.swingx.JXTable: java.util.Hashtable defaultEditorsByColumnClass>;

        $r24 = new org.jdesktop.swingx.table.NumberEditorExt;

        specialinvoke $r24.<org.jdesktop.swingx.table.NumberEditorExt: void <init>(boolean)>(1);

        virtualinvoke $r25.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Number;", $r24);

        specialinvoke r21.<org.jdesktop.swingx.JXTable: void setLazyEditor(java.lang.Class,java.lang.String)>(class "Ljava/lang/Boolean;", "org.jdesktop.swingx.JXTable$BooleanEditor");

        return;
    }

    public boolean isEditable()
    {
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = r0.<org.jdesktop.swingx.JXTable: boolean editable>;

        return $z0;
    }

    public void setEditable(boolean)
    {
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isEditable()>();

        r0.<org.jdesktop.swingx.JXTable: boolean editable> = z1;

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isEditable()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,boolean,boolean)>("editable", $z0, $z2);

        return;
    }

    public boolean isTerminateEditOnFocusLost()
    {
        java.lang.Boolean $r1;
        java.lang.Object $r2;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.lang.Object getClientProperty(java.lang.Object)>("terminateEditOnFocusLost");

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public void setTerminateEditOnFocusLost(boolean)
    {
        java.lang.Boolean $r1;
        org.jdesktop.swingx.JXTable r0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void putClientProperty(java.lang.Object,java.lang.Object)>("terminateEditOnFocusLost", $r1);

        return;
    }

    public boolean isAutoStartEditOnKeyStroke()
    {
        java.lang.Boolean $r1;
        java.lang.Object $r2;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.lang.Object getClientProperty(java.lang.Object)>("JTable.autoStartsEdit");

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setAutoStartEditOnKeyStroke(boolean)
    {
        java.lang.Boolean $r1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isAutoStartEditOnKeyStroke()>();

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void putClientProperty(java.lang.Object,java.lang.Object)>("JTable.autoStartsEdit", $r1);

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isAutoStartEditOnKeyStroke()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,boolean,boolean)>("autoStartEditOnKeyStroke", $z0, $z2);

        return;
    }

    public boolean editCellAt(int, int, java.util.EventObject)
    {
        int i0, i1;
        org.jdesktop.swingx.JXTable r0;
        java.util.EventObject r1;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.util.EventObject;

        $z0 = specialinvoke r0.<javax.swing.JTable: boolean editCellAt(int,int,java.util.EventObject)>(i0, i1, r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void hackEditorRemover()>();

     label1:
        return $z0;
    }

    public void removeEditor()
    {
        org.jdesktop.swingx.JXTable r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = specialinvoke r0.<org.jdesktop.swingx.JXTable: boolean isFocusOwnerDescending()>();

        specialinvoke r0.<javax.swing.JTable: void removeEditor()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean requestFocusInWindow()>();

     label1:
        return;
    }

    private boolean isFocusOwnerDescending()
    {
        org.jdesktop.swingx.JXTable r0;
        java.awt.Component $r2, $r4;
        java.awt.KeyboardFocusManager $r1, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isEditing()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = staticinvoke <java.awt.KeyboardFocusManager: java.awt.KeyboardFocusManager getCurrentKeyboardFocusManager()>();

        $r2 = virtualinvoke $r1.<java.awt.KeyboardFocusManager: java.awt.Component getFocusOwner()>();

        if $r2 != null goto label2;

        return 0;

     label2:
        $z1 = staticinvoke <org.jdesktop.swingx.SwingXUtilities: boolean isDescendingFrom(java.awt.Component,java.awt.Component)>($r2, r0);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        $r3 = staticinvoke <java.awt.KeyboardFocusManager: java.awt.KeyboardFocusManager getCurrentKeyboardFocusManager()>();

        $r4 = virtualinvoke $r3.<java.awt.KeyboardFocusManager: java.awt.Component getPermanentFocusOwner()>();

        $z2 = staticinvoke <org.jdesktop.swingx.SwingXUtilities: boolean isDescendingFrom(java.awt.Component,java.awt.Component)>($r4, r0);

        return $z2;
    }

    private void hackEditorRemover()
    {
        java.beans.PropertyChangeListener[] $r1;
        org.jdesktop.swingx.JXTable r2;
        java.awt.KeyboardFocusManager $r0;
        org.jdesktop.swingx.JXTable$CellEditorRemover $r3, $r9;
        java.beans.PropertyChangeListener $r5, $r8;
        int $i0, i1, $i3;
        java.lang.Class $r6;
        java.lang.String $r7;
        boolean $z0;

        r2 := @this: org.jdesktop.swingx.JXTable;

        $r0 = staticinvoke <java.awt.KeyboardFocusManager: java.awt.KeyboardFocusManager getCurrentKeyboardFocusManager()>();

        $r1 = virtualinvoke $r0.<java.awt.KeyboardFocusManager: java.beans.PropertyChangeListener[] getPropertyChangeListeners(java.lang.String)>("permanentFocusOwner");

        $i0 = lengthof $r1;

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r5 = $r1[i1];

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("javax.swing.JTable");

        if $z0 == 0 goto label2;

        $r8 = $r1[i1];

        virtualinvoke $r0.<java.awt.KeyboardFocusManager: void removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>("permanentFocusOwner", $r8);

        goto label3;

     label2:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label1;

     label3:
        $r3 = r2.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.JXTable$CellEditorRemover editorRemover>;

        if $r3 != null goto label4;

        $r9 = new org.jdesktop.swingx.JXTable$CellEditorRemover;

        specialinvoke $r9.<org.jdesktop.swingx.JXTable$CellEditorRemover: void <init>(org.jdesktop.swingx.JXTable)>(r2);

        r2.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.JXTable$CellEditorRemover editorRemover> = $r9;

     label4:
        return;
    }

    public void removeNotify()
    {
        org.jdesktop.swingx.JXTable$CellEditorRemover $r1, $r2;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.JXTable$CellEditorRemover editorRemover>;

        if $r1 == null goto label1;

        $r2 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.JXTable$CellEditorRemover editorRemover>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTable$CellEditorRemover: void uninstall()>();

        r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.JXTable$CellEditorRemover editorRemover> = null;

     label1:
        specialinvoke r0.<javax.swing.JTable: void removeNotify()>();

        return;
    }

    public boolean isFocusCycleRoot()
    {
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = specialinvoke r0.<org.jdesktop.swingx.JXTable: boolean isEditingFocusCycleRoot()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<javax.swing.JTable: boolean isFocusCycleRoot()>();

        return $z1;
    }

    public void transferFocus()
    {
        javax.swing.table.TableCellEditor $r1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = specialinvoke r0.<org.jdesktop.swingx.JXTable: boolean isEditingFocusCycleRoot()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableCellEditor getCellEditor()>();

        $z1 = interfaceinvoke $r1.<javax.swing.table.TableCellEditor: boolean stopCellEditing()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<javax.swing.JTable: void transferFocus()>();

        return;
    }

    public void transferFocusBackward()
    {
        javax.swing.table.TableCellEditor $r1;
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = specialinvoke r0.<org.jdesktop.swingx.JXTable: boolean isEditingFocusCycleRoot()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableCellEditor getCellEditor()>();

        $z1 = interfaceinvoke $r1.<javax.swing.table.TableCellEditor: boolean stopCellEditing()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<javax.swing.JTable: void transferFocusBackward()>();

        return;
    }

    private boolean isEditingFocusCycleRoot()
    {
        org.jdesktop.swingx.JXTable r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isEditing()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: boolean isTerminateEditOnFocusLost()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void updateUI()
    {
        java.util.Iterator $r6;
        java.util.Enumeration $r2, $r4;
        javax.swing.table.TableColumn r8;
        org.jdesktop.swingx.JXTable r0;
        java.util.List $r5;
        java.lang.Object $r7, $r9, $r10;
        java.util.Hashtable $r1, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXTable;

        specialinvoke r0.<javax.swing.JTable: void updateUI()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void updateColumnControlUI()>();

        $r1 = r0.<org.jdesktop.swingx.JXTable: java.util.Hashtable defaultEditorsByColumnClass>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void updateEditorUI(java.lang.Object)>($r10);

        goto label1;

     label2:
        $r3 = r0.<org.jdesktop.swingx.JXTable: java.util.Hashtable defaultRenderersByColumnClass>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.util.Enumeration elements()>();

     label3:
        $z1 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        specialinvoke r0.<org.jdesktop.swingx.JXTable: void updateRendererUI(java.lang.Object)>($r9);

        goto label3;

     label4:
        $r5 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.util.List getColumns(boolean)>(1);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (javax.swing.table.TableColumn) $r7;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void updateColumnUI(javax.swing.table.TableColumn)>(r8);

        goto label5;

     label6:
        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void updateRowHeightUI(boolean)>(1);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void updateHighlighterUI()>();

        return;
    }

    protected void updateColumnControlUI()
    {
        javax.swing.JComponent $r1, $r2, $r4;
        java.awt.Container $r3;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = r0.<org.jdesktop.swingx.JXTable: javax.swing.JComponent columnControlButton>;

        if $r1 == null goto label1;

        $r2 = r0.<org.jdesktop.swingx.JXTable: javax.swing.JComponent columnControlButton>;

        $r3 = virtualinvoke $r2.<javax.swing.JComponent: java.awt.Container getParent()>();

        if $r3 != null goto label1;

        $r4 = r0.<org.jdesktop.swingx.JXTable: javax.swing.JComponent columnControlButton>;

        staticinvoke <javax.swing.SwingUtilities: void updateComponentTreeUI(java.awt.Component)>($r4);

     label1:
        return;
    }

    private void updateEditorUI(java.lang.Object)
    {
        org.jdesktop.swingx.JXTable r1;
        java.awt.Component $r3;
        java.lang.Exception $r4;
        javax.swing.table.TableCellEditor $r2;
        int $i1, $i3;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.jdesktop.swingx.JXTable;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof javax.swing.table.TableCellEditor;

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = r0 instanceof javax.swing.JComponent;

        if $z1 != 0 goto label2;

        $z2 = r0 instanceof javax.swing.DefaultCellEditor;

        if $z2 == 0 goto label3;

     label2:
        return;

     label3:
        $r2 = (javax.swing.table.TableCellEditor) r0;

        $i1 = (int) -1;

        $i3 = (int) -1;

        $r3 = interfaceinvoke $r2.<javax.swing.table.TableCellEditor: java.awt.Component getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)>(r1, null, 0, $i1, $i3);

        if $r3 == null goto label4;

        staticinvoke <javax.swing.SwingUtilities: void updateComponentTreeUI(java.awt.Component)>($r3);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

     label6:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private void updateRendererUI(java.lang.Object)
    {
        org.jdesktop.swingx.renderer.ComponentProvider $r4;
        javax.swing.table.TableCellRenderer $r2;
        org.jdesktop.swingx.JXTable r1;
        java.awt.Component r6;
        java.lang.Exception $r5;
        org.jdesktop.swingx.renderer.AbstractRenderer $r3;
        int $i1, $i3;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.jdesktop.swingx.JXTable;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof javax.swing.table.TableCellRenderer;

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = r0 instanceof javax.swing.JComponent;

        if $z1 == 0 goto label2;

        return;

     label2:
        r6 = null;

        $z2 = r0 instanceof org.jdesktop.swingx.renderer.AbstractRenderer;

        if $z2 == 0 goto label3;

        $r3 = (org.jdesktop.swingx.renderer.AbstractRenderer) r0;

        $r4 = virtualinvoke $r3.<org.jdesktop.swingx.renderer.AbstractRenderer: org.jdesktop.swingx.renderer.ComponentProvider getComponentProvider()>();

        r6 = virtualinvoke $r4.<org.jdesktop.swingx.renderer.ComponentProvider: javax.swing.JComponent getRendererComponent(org.jdesktop.swingx.renderer.CellContext)>(null);

        goto label6;

     label3:
        $r2 = (javax.swing.table.TableCellRenderer) r0;

        $i1 = (int) -1;

        $i3 = (int) -1;

        r6 = interfaceinvoke $r2.<javax.swing.table.TableCellRenderer: java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)>(r1, null, 0, 0, $i1, $i3);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

     label6:
        if r6 == null goto label7;

        staticinvoke <javax.swing.SwingUtilities: void updateComponentTreeUI(java.awt.Component)>(r6);

     label7:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected void updateColumnUI(javax.swing.table.TableColumn)
    {
        javax.swing.table.TableCellEditor $r2;
        org.jdesktop.swingx.plaf.UIDependent $r5;
        javax.swing.table.TableColumn r0;
        javax.swing.table.TableCellRenderer $r3, $r4;
        org.jdesktop.swingx.JXTable r1;
        boolean $z0;

        r1 := @this: org.jdesktop.swingx.JXTable;

        r0 := @parameter0: javax.swing.table.TableColumn;

        $z0 = r0 instanceof org.jdesktop.swingx.plaf.UIDependent;

        if $z0 == 0 goto label1;

        $r5 = (org.jdesktop.swingx.plaf.UIDependent) r0;

        interfaceinvoke $r5.<org.jdesktop.swingx.plaf.UIDependent: void updateUI()>();

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<javax.swing.table.TableColumn: javax.swing.table.TableCellEditor getCellEditor()>();

        specialinvoke r1.<org.jdesktop.swingx.JXTable: void updateEditorUI(java.lang.Object)>($r2);

        $r3 = virtualinvoke r0.<javax.swing.table.TableColumn: javax.swing.table.TableCellRenderer getCellRenderer()>();

        specialinvoke r1.<org.jdesktop.swingx.JXTable: void updateRendererUI(java.lang.Object)>($r3);

        $r4 = virtualinvoke r0.<javax.swing.table.TableColumn: javax.swing.table.TableCellRenderer getHeaderRenderer()>();

        specialinvoke r1.<org.jdesktop.swingx.JXTable: void updateRendererUI(java.lang.Object)>($r4);

     label2:
        return;
    }

    protected void updateHighlighterUI()
    {
        org.jdesktop.swingx.decorator.CompoundHighlighter $r1, $r2;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        $r1 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        virtualinvoke $r2.<org.jdesktop.swingx.decorator.CompoundHighlighter: void updateUI()>();

        return;
    }

    protected void updateRowHeightUI(boolean)
    {
        java.awt.Font $r1;
        org.jdesktop.swingx.JXTable r0;
        java.awt.FontMetrics $r2;
        int $i0, $i1, i2, $i3;
        boolean z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $z1 = r0.<org.jdesktop.swingx.JXTable: boolean isXTableRowHeightSet>;

        if $z1 == 0 goto label1;

        return;

     label1:
        $i0 = staticinvoke <javax.swing.UIManager: int getInt(java.lang.Object)>("JXTable.rowHeight");

        if $i0 <= 0 goto label2;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setRowHeight(int)>($i0);

        goto label3;

     label2:
        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Font getFont()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r1);

        $i1 = virtualinvoke $r2.<java.awt.FontMetrics: int getHeight()>();

        i2 = $i1 + 2;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(i2, 18);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setRowHeight(int)>($i3);

     label3:
        r0.<org.jdesktop.swingx.JXTable: boolean isXTableRowHeightSet> = 0;

        return;
    }

    public void setShowGrid(boolean, boolean)
    {
        byte $b0, $b1;
        org.jdesktop.swingx.JXTable r0;
        boolean z0, z1;

        r0 := @this: org.jdesktop.swingx.JXTable;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setRowMargin(int)>($b0);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setShowHorizontalLines(boolean)>(z0);

        if z1 == 0 goto label3;

        $b1 = 1;

        goto label4;

     label3:
        $b1 = 0;

     label4:
        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setColumnMargin(int)>($b1);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setShowVerticalLines(boolean)>(z1);

        return;
    }

    public void setShowGrid(boolean)
    {
        org.jdesktop.swingx.JXTable r0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        z0 := @parameter0: boolean;

        specialinvoke r0.<javax.swing.JTable: void setShowGrid(boolean)>(z0);

        return;
    }

    public void setRowHeight(int)
    {
        int i0;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        specialinvoke r0.<javax.swing.JTable: void setRowHeight(int)>(i0);

        if i0 <= 0 goto label1;

        r0.<org.jdesktop.swingx.JXTable: boolean isXTableRowHeightSet> = 1;

     label1:
        return;
    }

    public void setRowHeightEnabled(boolean)
    {
        org.jdesktop.swingx.JXTable r0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean isRowHeightEnabled()
    {
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        return 1;
    }

    protected void adminSetRowHeight(int)
    {
        int i0;
        org.jdesktop.swingx.JXTable r0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        i0 := @parameter0: int;

        z0 = r0.<org.jdesktop.swingx.JXTable: boolean isXTableRowHeightSet>;

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void setRowHeight(int)>(i0);

        r0.<org.jdesktop.swingx.JXTable: boolean isXTableRowHeightSet> = z0;

        return;
    }

    public int rowAtPoint(java.awt.Point)
    {
        int $i0, $i1, $i3;
        java.awt.Point r0;
        org.jdesktop.swingx.JXTable r1;

        r1 := @this: org.jdesktop.swingx.JXTable;

        r0 := @parameter0: java.awt.Point;

        $i0 = r0.<java.awt.Point: int y>;

        if $i0 >= 0 goto label1;

        $i3 = (int) -1;

        return $i3;

     label1:
        $i1 = specialinvoke r1.<javax.swing.JTable: int rowAtPoint(java.awt.Point)>(r0);

        return $i1;
    }

    protected javax.swing.table.JTableHeader createDefaultTableHeader()
    {
        org.jdesktop.swingx.JXTableHeader $r0;
        javax.swing.table.TableColumnModel $r2;
        org.jdesktop.swingx.JXTable r1;

        r1 := @this: org.jdesktop.swingx.JXTable;

        $r0 = new org.jdesktop.swingx.JXTableHeader;

        $r2 = r1.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel columnModel>;

        specialinvoke $r0.<org.jdesktop.swingx.JXTableHeader: void <init>(javax.swing.table.TableColumnModel)>($r2);

        return $r0;
    }

    protected javax.swing.table.TableColumnModel createDefaultColumnModel()
    {
        org.jdesktop.swingx.JXTable r1;
        org.jdesktop.swingx.table.DefaultTableColumnModelExt $r0;

        r1 := @this: org.jdesktop.swingx.JXTable;

        $r0 = new org.jdesktop.swingx.table.DefaultTableColumnModelExt;

        specialinvoke $r0.<org.jdesktop.swingx.table.DefaultTableColumnModelExt: void <init>()>();

        return $r0;
    }

    public void setSelectionBackground(java.awt.Color)
    {
        java.awt.Color $r1, r2, $r3;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r2 := @parameter0: java.awt.Color;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Color getSelectionBackground()>();

        r0.<org.jdesktop.swingx.JXTable: java.awt.Color selectionBackground> = r2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Color getSelectionBackground()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("selectionBackground", $r1, $r3);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void repaint()>();

        return;
    }

    public void setSelectionForeground(java.awt.Color)
    {
        java.awt.Color $r1, r2, $r3;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r2 := @parameter0: java.awt.Color;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Color getSelectionForeground()>();

        r0.<org.jdesktop.swingx.JXTable: java.awt.Color selectionForeground> = r2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Color getSelectionForeground()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("selectionForeground", $r1, $r3);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void repaint()>();

        return;
    }

    public void setGridColor(java.awt.Color)
    {
        java.awt.Color $r1, r2, $r3;
        org.jdesktop.swingx.JXTable r0;

        r0 := @this: org.jdesktop.swingx.JXTable;

        r2 := @parameter0: java.awt.Color;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Color getGridColor()>();

        r0.<org.jdesktop.swingx.JXTable: java.awt.Color gridColor> = r2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: java.awt.Color getGridColor()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("gridColor", $r1, $r3);

        virtualinvoke r0.<org.jdesktop.swingx.JXTable: void repaint()>();

        return;
    }

    static java.util.logging.Logger access$000()
    {
        java.util.logging.Logger $r0;

        $r0 = <org.jdesktop.swingx.JXTable: java.util.logging.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.jdesktop.swingx.plaf.TableAddon $r3;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        <org.jdesktop.swingx.JXTable: java.lang.String USE_DTCR_COLORMEMORY_HACK> = "useDTCRColorMemoryHack";

        <org.jdesktop.swingx.JXTable: java.lang.String MATCH_HIGHLIGHTER> = "match.highlighter";

        <org.jdesktop.swingx.JXTable: java.lang.String UIPREFIX> = "JXTable.";

        <org.jdesktop.swingx.JXTable: java.lang.String PACKSELECTED_ACTION_COMMAND> = "column.packSelected";

        <org.jdesktop.swingx.JXTable: java.lang.String PACKALL_ACTION_COMMAND> = "column.packAll";

        <org.jdesktop.swingx.JXTable: java.lang.String HORIZONTALSCROLL_ACTION_COMMAND> = "column.horizontalScroll";

        <org.jdesktop.swingx.JXTable: java.lang.String FOCUS_NEXT_COMPONENT> = "focusNextComponent";

        <org.jdesktop.swingx.JXTable: java.lang.String FOCUS_PREVIOUS_COMPONENT> = "focusPreviousComponent";

        $r0 = class "Lorg/jdesktop/swingx/JXTable;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.jdesktop.swingx.JXTable: java.util.logging.Logger LOG> = $r2;

        staticinvoke <org.jdesktop.swingx.plaf.LookAndFeelAddons: org.jdesktop.swingx.plaf.LookAndFeelAddons getAddon()>();

        $r3 = new org.jdesktop.swingx.plaf.TableAddon;

        specialinvoke $r3.<org.jdesktop.swingx.plaf.TableAddon: void <init>()>();

        staticinvoke <org.jdesktop.swingx.plaf.LookAndFeelAddons: void contribute(org.jdesktop.swingx.plaf.ComponentAddon)>($r3);

        return;
    }
}
