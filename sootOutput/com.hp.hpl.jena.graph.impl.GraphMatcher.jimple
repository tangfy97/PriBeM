public class com.hp.hpl.jena.graph.impl.GraphMatcher extends java.lang.Object
{
    private static java.util.Random random;
    private static final boolean TRACE;
    private com.hp.hpl.jena.graph.Graph m;
    private com.hp.hpl.jena.graph.impl.GraphMatcher other;
    private int myHashLevel;
    private static final int MAX_HASH_DEPTH;
    private java.util.Map table;
    private int state;
    private static final int REHASHING;
    private static final int HASH_OK;
    private static final int HASH_BAD;
    private java.util.Set unboundAnonResources;
    private java.util.Set boundAnonResources;
    private boolean refinableHash;
    private static final int NOVARS;
    private static final int SX;
    private static final int PX;
    private static final int OX;
    private static final int SD;
    private static final int PD;
    private static final int OD;
    private static final int SXPY;
    private static final int SXOY;
    private static final int PXOY;
    private static final int SXPYOZ;
    private static final int SXPX;
    private static final int SXOX;
    private static final int PXOX;
    private static final int SXPXOY;
    private static final int SXPYOX;
    private static final int SXPYOY;
    private static final int SXPXOX;
    private static final int S;
    private static final int P;
    private static final int O;
    private java.util.Map anonLookup;
    private static int col;
    private static boolean lastDir;

    public static boolean equals(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.Node[][] $r2;
        com.hp.hpl.jena.graph.Graph r0, r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Graph;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.Node[][] match(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>(r0, r1);

        if $r2 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static int hashCode(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.Triple r4;
        com.hp.hpl.jena.graph.impl.GraphMatcher $r2;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement $r5;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r1;
        int $i0, i1;
        java.lang.Object $r3;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.GraphUtil: com.hp.hpl.jena.util.iterator.ExtendedIterator findAll(com.hp.hpl.jena.graph.Graph)>(r0);

        i1 = 0;

        $r2 = new com.hp.hpl.jena.graph.impl.GraphMatcher;

        specialinvoke $r2.<com.hp.hpl.jena.graph.impl.GraphMatcher: void <init>(com.hp.hpl.jena.graph.Graph)>(r0);

     label1:
        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<com.hp.hpl.jena.util.iterator.ClosableIterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.graph.Triple) $r3;

        $r5 = new com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement;

        virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r5.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement: void <init>(com.hp.hpl.jena.graph.impl.GraphMatcher,com.hp.hpl.jena.graph.Triple)>($r2, r4);

        $i0 = virtualinvoke $r5.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement: int myHashCode(com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource)>(null);

        i1 = i1 + $i0;

        goto label1;

     label2:
        return i1;
    }

    public static com.hp.hpl.jena.graph.Node[][] match(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher $r0, $r2;
        com.hp.hpl.jena.graph.Node[][] $r4;
        com.hp.hpl.jena.graph.Graph r1, r3;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r3 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r0 = new com.hp.hpl.jena.graph.impl.GraphMatcher;

        specialinvoke $r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: void <init>(com.hp.hpl.jena.graph.Graph)>(r1);

        $r2 = new com.hp.hpl.jena.graph.impl.GraphMatcher;

        specialinvoke $r2.<com.hp.hpl.jena.graph.impl.GraphMatcher: void <init>(com.hp.hpl.jena.graph.Graph)>(r3);

        $r4 = specialinvoke $r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.Node[][] match(com.hp.hpl.jena.graph.impl.GraphMatcher)>($r2);

        return $r4;
    }

    private void <init>(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        java.util.Map $r3;
        java.util.Set $r1, $r2;
        com.hp.hpl.jena.graph.Graph r4;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher;

        r4 := @parameter0: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: int myHashLevel> = 0;

        $r1 = staticinvoke <com.hp.hpl.jena.util.CollectionFactory: java.util.Set createHashedSet()>();

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Set unboundAnonResources> = $r1;

        $r2 = staticinvoke <com.hp.hpl.jena.util.CollectionFactory: java.util.Set createHashedSet()>();

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Set boundAnonResources> = $r2;

        $r3 = staticinvoke <com.hp.hpl.jena.util.CollectionFactory: java.util.Map createHashedMap()>();

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Map anonLookup> = $r3;

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.Graph m> = r4;

        return;
    }

    private com.hp.hpl.jena.graph.Node[][] match(com.hp.hpl.jena.graph.impl.GraphMatcher)
    {
        com.hp.hpl.jena.graph.Node $r20, $r22;
        com.hp.hpl.jena.graph.Capabilities $r3, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.graph.Node[] $r19;
        java.util.Set $r13, $r14, $r15;
        com.hp.hpl.jena.graph.Node[][] $r9, $r12, $r23, $r27, $r31;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i10;
        com.hp.hpl.jena.graph.Graph $r2, $r5, $r8, $r10, $r24, $r26, $r28, $r30;
        java.util.Iterator $r16;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource r18, $r21;
        com.hp.hpl.jena.graph.impl.GraphMatcher r0, r1, $r4, $r7, $r11, $r25, $r29;
        java.lang.Object $r17;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher;

        r1 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher;

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.impl.GraphMatcher other> = r1;

        r1.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.impl.GraphMatcher other> = r0;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: void in(int)>(4);

        $r2 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.Graph m>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.Capabilities getCapabilities()>();

        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.graph.Capabilities: boolean sizeAccurate()>();

        if $z0 == 0 goto label1;

        $r28 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.Graph m>;

        $i6 = interfaceinvoke $r28.<com.hp.hpl.jena.graph.Graph: int size()>();

        $r29 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.impl.GraphMatcher other>;

        $r30 = $r29.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.Graph m>;

        $i7 = interfaceinvoke $r30.<com.hp.hpl.jena.graph.Graph: int size()>();

        if $i6 >= $i7 goto label1;

        $r31 = (com.hp.hpl.jena.graph.Node[][]) null;

        return $r31;

     label1:
        $r4 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.impl.GraphMatcher other>;

        $r5 = $r4.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.Graph m>;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.Capabilities getCapabilities()>();

        $z1 = interfaceinvoke $r6.<com.hp.hpl.jena.graph.Capabilities: boolean sizeAccurate()>();

        if $z1 == 0 goto label2;

        $r24 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.Graph m>;

        $i4 = interfaceinvoke $r24.<com.hp.hpl.jena.graph.Graph: int size()>();

        $r25 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.impl.GraphMatcher other>;

        $r26 = $r25.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.Graph m>;

        $i5 = interfaceinvoke $r26.<com.hp.hpl.jena.graph.Graph: int size()>();

        if $i4 <= $i5 goto label2;

        $r27 = (com.hp.hpl.jena.graph.Node[][]) null;

        return $r27;

     label2:
        $r7 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.impl.GraphMatcher other>;

        $r8 = $r7.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.Graph m>;

        $i0 = specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: int prepare(com.hp.hpl.jena.graph.Graph)>($r8);

        $i10 = (int) -1;

        if $i0 == $i10 goto label3;

        $r11 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.impl.GraphMatcher other>;

        $r10 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.Graph m>;

        $i1 = specialinvoke $r11.<com.hp.hpl.jena.graph.impl.GraphMatcher: int prepare(com.hp.hpl.jena.graph.Graph)>($r10);

        if $i0 == $i1 goto label4;

     label3:
        $r9 = (com.hp.hpl.jena.graph.Node[][]) null;

        return $r9;

     label4:
        $z2 = specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: boolean bind()>();

        if $z2 == 0 goto label8;

        $r13 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Set unboundAnonResources>;

        $z3 = interfaceinvoke $r13.<java.util.Set: boolean isEmpty()>();

        if $z3 != 0 goto label5;

        staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: void impossible()>();

     label5:
        $r14 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Set boundAnonResources>;

        $i2 = interfaceinvoke $r14.<java.util.Set: int size()>();

        $r23 = newarray (com.hp.hpl.jena.graph.Node[])[$i2];

        i8 = 0;

        $r15 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Set boundAnonResources>;

        $r16 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z4 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource) $r17;

        $i3 = i8;

        i8 = i8 + 1;

        $r19 = newarray (com.hp.hpl.jena.graph.Node)[2];

        $r20 = r18.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.Node r>;

        $r19[0] = $r20;

        $r21 = r18.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource bound>;

        $r22 = $r21.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: com.hp.hpl.jena.graph.Node r>;

        $r19[1] = $r22;

        $r23[$i3] = $r19;

        goto label6;

     label7:
        return $r23;

     label8:
        $r12 = (com.hp.hpl.jena.graph.Node[][]) null;

        return $r12;
    }

    private boolean bind()
    {
        java.util.Iterator $r6;
        java.util.Set $r1;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource $r5, r8;
        com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket $r2, $r4;
        com.hp.hpl.jena.graph.impl.GraphMatcher r0, $r3;
        java.lang.Object $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Set obligBindings()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: void check(int)>(2);

        $r2 = specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket smallestBucket()>();

        if $r2 != null goto label2;

        return 1;

     label2:
        $r3 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.impl.GraphMatcher other>;

        $r4 = specialinvoke $r3.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket matchBucket(com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket)>($r2);

        if $r4 == null goto label6;

        $r5 = virtualinvoke $r2.<com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource aMember()>();

        $r6 = virtualinvoke $r4.<com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket: java.util.Iterator members()>();

     label3:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: void check(int)>(6);

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource) $r7;

        staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: void trace(boolean,java.lang.String)>(1, "Guess: ");

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket: boolean bind(com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource,com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket,com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource)>($r5, $r4, r8);

        if $z0 != 0 goto label4;

        goto label3;

     label4:
        $z1 = specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: boolean bind()>();

        if $z1 == 0 goto label5;

        return 1;

     label5:
        virtualinvoke $r5.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: void unbind()>();

        goto label3;

     label6:
        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: void unbindAll(java.util.Set)>($r1);

        return 0;
    }

    private java.util.Set obligBindings()
    {
        int i0, $i1, $i2;
        boolean $z0, $z1, $z2, z3, z4, z5;
        java.util.Iterator $r2;
        java.util.Set $r0;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource $r7;
        com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket r4, $r6;
        com.hp.hpl.jena.graph.impl.GraphMatcher r1, $r5, $r8;
        java.lang.Object $r3;

        r1 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher;

        i0 = 0;

        $r0 = staticinvoke <com.hp.hpl.jena.util.CollectionFactory: java.util.Set createHashedSet()>();

        specialinvoke r1.<com.hp.hpl.jena.graph.impl.GraphMatcher: void check(int)>(6);

     label1:
        $i1 = specialinvoke r1.<com.hp.hpl.jena.graph.impl.GraphMatcher: int rehash(int)>(i0);

        $r8 = r1.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.impl.GraphMatcher other>;

        $i2 = specialinvoke $r8.<com.hp.hpl.jena.graph.impl.GraphMatcher: int rehash(int)>(i0);

        if $i1 == $i2 goto label2;

        specialinvoke r1.<com.hp.hpl.jena.graph.impl.GraphMatcher: void unbindAll(java.util.Set)>($r0);

        return null;

     label2:
        r1.<com.hp.hpl.jena.graph.impl.GraphMatcher: boolean refinableHash> = 0;

        z3 = 0;

        z5 = 0;

        z4 = 0;

        $r2 = specialinvoke r1.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Iterator scanBuckets()>();

     label3:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        z3 = 1;

        z5 = 1;

        z4 = 1;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket) $r3;

        $r5 = r1.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.impl.GraphMatcher other>;

        $r6 = specialinvoke $r5.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket matchBucket(com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket)>(r4);

        if $r6 != null goto label4;

        specialinvoke r1.<com.hp.hpl.jena.graph.impl.GraphMatcher: void unbindAll(java.util.Set)>($r0);

        return null;

     label4:
        $r7 = virtualinvoke r4.<com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource aMember()>();

        $z2 = virtualinvoke r4.<com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket: boolean bind(com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket)>($r6);

        if $z2 != 0 goto label5;

        specialinvoke r1.<com.hp.hpl.jena.graph.impl.GraphMatcher: void unbindAll(java.util.Set)>($r0);

        return null;

     label5:
        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r7);

        goto label3;

     label6:
        if z4 == 0 goto label7;

        i0 = 0;

        goto label8;

     label7:
        i0 = i0 + 1;

     label8:
        if i0 >= 3 goto label9;

        $z1 = r1.<com.hp.hpl.jena.graph.impl.GraphMatcher: boolean refinableHash>;

        if $z1 != 0 goto label1;

        if z5 != 0 goto label1;

     label9:
        return $r0;
    }

    private java.util.Iterator scanBuckets()
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        java.util.Iterator $r5;
        java.util.Map $r3;
        java.util.Collection $r4;
        com.hp.hpl.jena.graph.impl.GraphMatcher$1 $r2;
        com.hp.hpl.jena.util.iterator.FilterIterator $r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: void check(int)>(2);

        $r1 = new com.hp.hpl.jena.util.iterator.FilterIterator;

        $r2 = new com.hp.hpl.jena.graph.impl.GraphMatcher$1;

        specialinvoke $r2.<com.hp.hpl.jena.graph.impl.GraphMatcher$1: void <init>(com.hp.hpl.jena.graph.impl.GraphMatcher)>(r0);

        $r3 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Map table>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

        specialinvoke $r1.<com.hp.hpl.jena.util.iterator.FilterIterator: void <init>(com.hp.hpl.jena.util.iterator.Filter,java.util.Iterator)>($r2, $r5);

        return $r1;
    }

    private void unbindAll(java.util.Set)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher r2;
        java.util.Iterator $r1;
        java.util.Set r0;
        java.lang.Object $r3;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource $r4;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher;

        r0 := @parameter0: java.util.Set;

        $r1 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource) $r3;

        virtualinvoke $r4.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: void unbind()>();

        goto label1;

     label2:
        specialinvoke r2.<com.hp.hpl.jena.graph.impl.GraphMatcher: void in(int)>(4);

        return;
    }

    private int prepare(com.hp.hpl.jena.graph.Graph)
    {
        boolean $z0, $z1;
        java.util.Set $r10, $r16, $r21;
        com.hp.hpl.jena.graph.Triple r24;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement $r25;
        java.lang.Throwable $r23;
        int $i0, $i1, $i2, $i3, i4, i5, i6, $i7, $i9, $i11;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource[] $r5, $r7, $r8, $r11, $r12, $r14, $r17, $r19;
        com.hp.hpl.jena.graph.Graph $r1, r22;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource $r6, $r9, $r13, $r15, $r18, $r20;
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        java.lang.Object $r3;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher;

        r22 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.Graph m>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.GraphUtil: com.hp.hpl.jena.util.iterator.ExtendedIterator findAll(com.hp.hpl.jena.graph.Graph)>($r1);

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: int myHashLevel> = 0;

        i4 = 0;

     label01:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: java.lang.Object next()>();

        r24 = (com.hp.hpl.jena.graph.Triple) $r3;

        $r25 = new com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement;

        specialinvoke $r25.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement: void <init>(com.hp.hpl.jena.graph.impl.GraphMatcher,com.hp.hpl.jena.graph.Triple)>(r0, r24);

        $i0 = $r25.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement: int pattern>;

        if $i0 != 0 goto label03;

        $z1 = interfaceinvoke r22.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Triple)>(r24);

        if $z1 != 0 goto label07;

     label02:
        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        $i9 = (int) -1;

        return $i9;

     label03:
        $r5 = $r25.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource[] vars>;

        $r6 = $r5[0];

        $i1 = virtualinvoke $r25.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement: int myHashCode(com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource)>($r6);

        i4 = i4 + $i1;

        i5 = 0;

     label04:
        $r7 = $r25.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource[] vars>;

        $i2 = lengthof $r7;

        if i5 >= $i2 goto label07;

        $r8 = $r25.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource[] vars>;

        $r9 = $r8[i5];

        $r10 = $r9.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: java.util.Set occursIn>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r25);

        i6 = i5 + 1;

     label05:
        $r11 = $r25.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource[] vars>;

        $i3 = lengthof $r11;

        if i6 >= $i3 goto label06;

        $r12 = $r25.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource[] vars>;

        $r13 = $r12[i5];

        $r16 = $r13.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: java.util.Set friends>;

        $r14 = $r25.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource[] vars>;

        $r15 = $r14[i6];

        interfaceinvoke $r16.<java.util.Set: boolean add(java.lang.Object)>($r15);

        $r17 = $r25.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource[] vars>;

        $r18 = $r17[i6];

        $r21 = $r18.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: java.util.Set friends>;

        $r19 = $r25.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource[] vars>;

        $r20 = $r19[i5];

        interfaceinvoke $r21.<java.util.Set: boolean add(java.lang.Object)>($r20);

        i6 = i6 + 1;

        goto label05;

     label06:
        i5 = i5 + 1;

        goto label04;

     label07:
        goto label01;

     label08:
        $i11 = (int) -1;

        if i4 != $i11 goto label09;

        $i7 = 1;

        goto label10;

     label09:
        $i7 = i4;

     label10:
        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        return $i7;

     label11:
        $r23 := @caughtexception;

     label12:
        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        throw $r23;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket smallestBucket()
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket r5, r6;
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        java.util.Map $r1;
        int $i0, i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: void check(int)>(2);

        $r1 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Map table>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        r6 = null;

        i1 = 2147483647;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket) $r4;

        $i0 = virtualinvoke r5.<com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket: int size()>();

        if $i0 >= i1 goto label2;

        r6 = r5;

        i1 = $i0;

     label2:
        goto label1;

     label3:
        return r6;
    }

    private com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket matchBucket(com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource $r3;
        java.lang.Integer $r1;
        com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket r2, r6;
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        java.util.Map $r4;
        int $i0, $i1, $i2;
        java.lang.Object $r5;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher;

        r2 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: void check(int)>(2);

        $r1 = new java.lang.Integer;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket: com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource aMember()>();

        $i0 = $r3.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: int myHash>;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i0);

        $r4 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Map table>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r6 = (com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket) $r5;

        if r6 == null goto label1;

        $i1 = virtualinvoke r2.<com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket: int size()>();

        $i2 = virtualinvoke r6.<com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket: int size()>();

        if $i1 == $i2 goto label1;

        return null;

     label1:
        return r6;
    }

    private int rehash(int)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        int i0, $i1;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: int rehash0(int)>(i0);

        return $i1;
    }

    private int rehash0(int)
    {
        java.lang.Integer $r9, $r13;
        java.util.Map $r1, $r4, $r14, $r17;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        boolean $z0, $z1;
        java.util.Map$Entry r20;
        java.util.Iterator $r3, $r6;
        java.util.Set $r2, $r5;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource r18;
        com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket r11, $r16, r19;
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        java.lang.Object $r7, $r8, $r10, $r12, $r15;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher;

        i0 := @parameter0: int;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: void in(int)>(1);

        $r1 = staticinvoke <com.hp.hpl.jena.util.CollectionFactory: java.util.Map createHashedMap()>();

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Map table> = $r1;

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: int myHashLevel> = i0;

        $r2 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Set unboundAnonResources>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r18 = (com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource) $r12;

        $r13 = new java.lang.Integer;

        $i5 = virtualinvoke r18.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: int myHashCode()>();

        specialinvoke $r13.<java.lang.Integer: void <init>(int)>($i5);

        $r14 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Map table>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        r19 = (com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket) $r15;

        if r19 != null goto label2;

        $r16 = new com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket;

        specialinvoke $r16.<com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket: void <init>(com.hp.hpl.jena.graph.impl.GraphMatcher,com.hp.hpl.jena.graph.impl.GraphMatcher$1)>(r0, null);

        r19 = $r16;

        $r17 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Map table>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r16);

     label2:
        virtualinvoke r19.<com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket: void add(com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource)>(r18);

        goto label1;

     label3:
        i6 = 0;

        $r4 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Map table>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.Integer) $r8;

        $i1 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $r10 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getValue()>();

        r11 = (com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket) $r10;

        $i2 = virtualinvoke r11.<com.hp.hpl.jena.graph.impl.GraphMatcher$Bucket: int size()>();

        $i3 = $i2 * 65537;

        $i4 = $i3 ^ $i1;

        i6 = i6 + $i4;

        goto label4;

     label5:
        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: void in(int)>(2);

        return i6;
    }

    private static boolean legalPattern(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            case 9: goto label2;
            case 10: goto label1;
            case 11: goto label2;
            case 12: goto label2;
            case 13: goto label2;
            case 14: goto label2;
            case 15: goto label2;
            case 16: goto label1;
            case 17: goto label1;
            case 18: goto label2;
            case 19: goto label2;
            case 20: goto label1;
            case 21: goto label1;
            case 22: goto label2;
            case 23: goto label2;
            case 24: goto label2;
            case 25: goto label2;
            case 26: goto label1;
            case 27: goto label2;
            case 28: goto label2;
            case 29: goto label2;
            case 30: goto label2;
            case 31: goto label2;
            case 32: goto label2;
            case 33: goto label2;
            case 34: goto label1;
            case 35: goto label2;
            case 36: goto label2;
            case 37: goto label2;
            case 38: goto label1;
            case 39: goto label2;
            case 40: goto label1;
            case 41: goto label1;
            case 42: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    private static int varPosInPattern(int, int)
    {
        java.io.PrintStream $r0;
        int i0, i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        tableswitch(i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label38;
            case 3: goto label38;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label38;
            case 7: goto label38;
            case 8: goto label38;
            case 9: goto label38;
            case 10: goto label22;
            case 11: goto label38;
            case 12: goto label38;
            case 13: goto label38;
            case 14: goto label38;
            case 15: goto label38;
            case 16: goto label03;
            case 17: goto label09;
            case 18: goto label38;
            case 19: goto label38;
            case 20: goto label13;
            case 21: goto label17;
            case 22: goto label38;
            case 23: goto label38;
            case 24: goto label38;
            case 25: goto label38;
            case 26: goto label25;
            case 27: goto label38;
            case 28: goto label38;
            case 29: goto label38;
            case 30: goto label38;
            case 31: goto label38;
            case 32: goto label38;
            case 33: goto label38;
            case 34: goto label23;
            case 35: goto label38;
            case 36: goto label38;
            case 37: goto label38;
            case 38: goto label29;
            case 39: goto label38;
            case 40: goto label24;
            case 41: goto label33;
            case 42: goto label37;
            default: goto label38;
        };

     label01:
        goto label38;

     label02:
        if i1 != 0 goto label38;

        return 1;

     label03:
        if i1 != 0 goto label38;

        return 16;

     label04:
        if i1 != 0 goto label38;

        return 4;

     label05:
        lookupswitch(i1)
        {
            case 0: goto label06;
            case 1: goto label07;
            default: goto label08;
        };

     label06:
        return 1;

     label07:
        return 4;

     label08:
        goto label38;

     label09:
        lookupswitch(i1)
        {
            case 0: goto label10;
            case 1: goto label11;
            default: goto label12;
        };

     label10:
        return 1;

     label11:
        return 16;

     label12:
        goto label38;

     label13:
        lookupswitch(i1)
        {
            case 0: goto label14;
            case 1: goto label15;
            default: goto label16;
        };

     label14:
        return 4;

     label15:
        return 16;

     label16:
        goto label38;

     label17:
        tableswitch(i1)
        {
            case 0: goto label18;
            case 1: goto label19;
            case 2: goto label20;
            default: goto label21;
        };

     label18:
        return 1;

     label19:
        return 4;

     label20:
        return 16;

     label21:
        goto label38;

     label22:
        if i1 != 0 goto label38;

        return 10;

     label23:
        if i1 != 0 goto label38;

        return 34;

     label24:
        if i1 != 0 goto label38;

        return 40;

     label25:
        lookupswitch(i1)
        {
            case 0: goto label26;
            case 1: goto label27;
            default: goto label28;
        };

     label26:
        return 10;

     label27:
        return 16;

     label28:
        goto label38;

     label29:
        lookupswitch(i1)
        {
            case 0: goto label30;
            case 1: goto label31;
            default: goto label32;
        };

     label30:
        return 34;

     label31:
        return 4;

     label32:
        goto label38;

     label33:
        lookupswitch(i1)
        {
            case 0: goto label34;
            case 1: goto label35;
            default: goto label36;
        };

     label34:
        return 1;

     label35:
        return 40;

     label36:
        goto label38;

     label37:
        if i1 != 0 goto label38;

        return 42;

     label38:
        $r0 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r6);

        staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: void impossible()>();

        return 0;
    }

    static void count(java.util.Map, com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource, int)
    {
        int[] $r3, r4;
        java.util.Map r1;
        int $i0, i1, i2, $i4, $i6, $i8, $i10;
        java.lang.Object $r2;
        com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource r0;
        boolean $z0;

        r1 := @parameter0: java.util.Map;

        r0 := @parameter1: com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource;

        i1 := @parameter2: int;

        $z0 = r0 instanceof com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource;

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r4 = (int[]) $r2;

        if r4 != null goto label1;

        $r3 = newarray (int)[3];

        $i4 = (int) -1;

        $r3[0] = $i4;

        $i6 = (int) -1;

        $r3[1] = $i6;

        $i8 = (int) -1;

        $r3[2] = $i8;

        r4 = $r3;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r3);

     label1:
        i2 = 0;

     label2:
        if i2 >= 3 goto label4;

        $i0 = r4[i2];

        $i10 = (int) -1;

        if $i0 != $i10 goto label3;

        r4[i2] = i1;

        return;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return;
    }

    private com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource convert(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource $r5;
        com.hp.hpl.jena.graph.impl.GraphMatcher r2;
        java.util.Map $r3, $r6;
        com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource $r1;
        java.lang.Object $r4;
        com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource r7;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 == 0 goto label2;

        $r3 = r2.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Map anonLookup>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r7 = (com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource) $r4;

        if r7 != null goto label1;

        $r5 = new com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource;

        specialinvoke $r5.<com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource: void <init>(com.hp.hpl.jena.graph.impl.GraphMatcher,com.hp.hpl.jena.graph.Node)>(r2, r0);

        r7 = $r5;

        $r6 = r2.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Map anonLookup>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r5);

     label1:
        return r7;

     label2:
        $r1 = new com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource;

        specialinvoke $r1.<com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource: void <init>(com.hp.hpl.jena.graph.Node)>(r0);

        return $r1;
    }

    private void check(int)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        int i0, $i1, $i2;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher;

        i0 := @parameter0: int;

        $i1 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: int state>;

        $i2 = $i1 & i0;

        if $i2 != 0 goto label1;

        staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: void impossible()>();

     label1:
        return;
    }

    private void in(int)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher r0, $r1;
        int i0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher;

        i0 := @parameter0: int;

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: int state> = i0;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.impl.GraphMatcher other>;

        $r1.<com.hp.hpl.jena.graph.impl.GraphMatcher: int state> = i0;

        return;
    }

    private static void impossible()
    {
        com.hp.hpl.jena.shared.JenaException $r0;

        $r0 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r0.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.String)>("Cannot happen!");

        throw $r0;
    }

    private static void trace(boolean, java.lang.String)
    {
        java.lang.String r0;
        boolean z0;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        return;
    }

    private static void traceNL()
    {
        return;
    }

    static boolean access$000(com.hp.hpl.jena.graph.impl.GraphMatcher)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher;

        $z0 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: boolean refinableHash>;

        return $z0;
    }

    static boolean access$002(com.hp.hpl.jena.graph.impl.GraphMatcher, boolean)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        boolean z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher;

        z0 := @parameter1: boolean;

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: boolean refinableHash> = z0;

        return z0;
    }

    static com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource access$200(com.hp.hpl.jena.graph.impl.GraphMatcher, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource $r2;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource convert(com.hp.hpl.jena.graph.Node)>(r1);

        return $r2;
    }

    static boolean access$300(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: boolean legalPattern(int)>(i0);

        return $z0;
    }

    static void access$400()
    {
        staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: void impossible()>();

        return;
    }

    static int access$500(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: int varPosInPattern(int,int)>(i0, i1);

        return $i2;
    }

    static java.util.Set access$600(com.hp.hpl.jena.graph.impl.GraphMatcher)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        java.util.Set $r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Set unboundAnonResources>;

        return $r1;
    }

    static int access$700(com.hp.hpl.jena.graph.impl.GraphMatcher)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        int $i0;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher;

        $i0 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: int myHashLevel>;

        return $i0;
    }

    static void access$800(com.hp.hpl.jena.graph.impl.GraphMatcher, int)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        int i0;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher;

        i0 := @parameter1: int;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: void check(int)>(i0);

        return;
    }

    static java.util.Set access$900(com.hp.hpl.jena.graph.impl.GraphMatcher)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        java.util.Set $r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Set boundAnonResources>;

        return $r1;
    }

    static void access$1000(boolean, java.lang.String)
    {
        java.lang.String r0;
        boolean z0;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: void trace(boolean,java.lang.String)>(z0, r0);

        return;
    }

    static java.util.Random access$1100()
    {
        java.util.Random $r0;

        $r0 = <com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Random random>;

        return $r0;
    }

    static void access$1200(com.hp.hpl.jena.graph.impl.GraphMatcher, int)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        int i0;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher;

        i0 := @parameter1: int;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: void in(int)>(i0);

        return;
    }

    static int access$1300(com.hp.hpl.jena.graph.impl.GraphMatcher)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        int $i0;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher;

        $i0 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: int state>;

        return $i0;
    }

    static int access$702(com.hp.hpl.jena.graph.impl.GraphMatcher, int)
    {
        com.hp.hpl.jena.graph.impl.GraphMatcher r0;
        int i0;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher;

        i0 := @parameter1: int;

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher: int myHashLevel> = i0;

        return i0;
    }

    static void <clinit>()
    {
        java.util.Random $r0;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int O> = 48;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int P> = 12;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int S> = 3;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int SXPXOX> = 42;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int SXPYOY> = 41;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int SXPYOX> = 38;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int SXPXOY> = 26;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int PXOX> = 40;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int SXOX> = 34;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int SXPX> = 10;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int SXPYOZ> = 21;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int PXOY> = 20;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int SXOY> = 17;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int SXPY> = 5;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int OD> = 32;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int PD> = 8;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int SD> = 2;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int OX> = 16;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int PX> = 4;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int SX> = 1;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int NOVARS> = 0;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int HASH_BAD> = 4;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int HASH_OK> = 2;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int REHASHING> = 1;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int MAX_HASH_DEPTH> = 3;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: boolean TRACE> = 0;

        $r0 = new java.util.Random;

        specialinvoke $r0.<java.util.Random: void <init>(long)>(0L);

        <com.hp.hpl.jena.graph.impl.GraphMatcher: java.util.Random random> = $r0;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: int col> = 0;

        <com.hp.hpl.jena.graph.impl.GraphMatcher: boolean lastDir> = 0;

        return;
    }
}
