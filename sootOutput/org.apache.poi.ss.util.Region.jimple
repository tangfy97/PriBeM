public class org.apache.poi.ss.util.Region extends java.lang.Object implements java.lang.Comparable
{
    private int _rowFrom;
    private short _colFrom;
    private int _rowTo;
    private short _colTo;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.poi.ss.util.Region r0;

        r0 := @this: org.apache.poi.ss.util.Region;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(int, short, int, short)
    {
        short s2, s3;
        org.apache.poi.ss.util.Region r0;
        int i0, i1;

        r0 := @this: org.apache.poi.ss.util.Region;

        i0 := @parameter0: int;

        s2 := @parameter1: short;

        i1 := @parameter2: int;

        s3 := @parameter3: short;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.ss.util.Region: int _rowFrom> = i0;

        r0.<org.apache.poi.ss.util.Region: int _rowTo> = i1;

        r0.<org.apache.poi.ss.util.Region: short _colFrom> = s2;

        r0.<org.apache.poi.ss.util.Region: short _colTo> = s3;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.poi.ss.util.Region r0;
        org.apache.poi.ss.util.CellReference $r1, $r4;
        short $s4, $s6;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.String r2, $r3, $r5;

        r0 := @this: org.apache.poi.ss.util.Region;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.poi.ss.util.CellReference;

        $i0 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>(":");

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        specialinvoke $r1.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String)>($r3);

        $r4 = new org.apache.poi.ss.util.CellReference;

        $i1 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>(":");

        $i2 = $i1 + 1;

        $r5 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i2);

        specialinvoke $r4.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String)>($r5);

        $i3 = virtualinvoke $r1.<org.apache.poi.ss.util.CellReference: int getRow()>();

        r0.<org.apache.poi.ss.util.Region: int _rowFrom> = $i3;

        $s4 = virtualinvoke $r1.<org.apache.poi.ss.util.CellReference: short getCol()>();

        r0.<org.apache.poi.ss.util.Region: short _colFrom> = $s4;

        $i5 = virtualinvoke $r4.<org.apache.poi.ss.util.CellReference: int getRow()>();

        r0.<org.apache.poi.ss.util.Region: int _rowTo> = $i5;

        $s6 = virtualinvoke $r4.<org.apache.poi.ss.util.CellReference: short getCol()>();

        r0.<org.apache.poi.ss.util.Region: short _colTo> = $s6;

        return;
    }

    public short getColumnFrom()
    {
        short $s0;
        org.apache.poi.ss.util.Region r0;

        r0 := @this: org.apache.poi.ss.util.Region;

        $s0 = r0.<org.apache.poi.ss.util.Region: short _colFrom>;

        return $s0;
    }

    public int getRowFrom()
    {
        int $i0;
        org.apache.poi.ss.util.Region r0;

        r0 := @this: org.apache.poi.ss.util.Region;

        $i0 = r0.<org.apache.poi.ss.util.Region: int _rowFrom>;

        return $i0;
    }

    public short getColumnTo()
    {
        short $s0;
        org.apache.poi.ss.util.Region r0;

        r0 := @this: org.apache.poi.ss.util.Region;

        $s0 = r0.<org.apache.poi.ss.util.Region: short _colTo>;

        return $s0;
    }

    public int getRowTo()
    {
        int $i0;
        org.apache.poi.ss.util.Region r0;

        r0 := @this: org.apache.poi.ss.util.Region;

        $i0 = r0.<org.apache.poi.ss.util.Region: int _rowTo>;

        return $i0;
    }

    public void setColumnFrom(short)
    {
        short s0;
        org.apache.poi.ss.util.Region r0;

        r0 := @this: org.apache.poi.ss.util.Region;

        s0 := @parameter0: short;

        r0.<org.apache.poi.ss.util.Region: short _colFrom> = s0;

        return;
    }

    public void setRowFrom(int)
    {
        int i0;
        org.apache.poi.ss.util.Region r0;

        r0 := @this: org.apache.poi.ss.util.Region;

        i0 := @parameter0: int;

        r0.<org.apache.poi.ss.util.Region: int _rowFrom> = i0;

        return;
    }

    public void setColumnTo(short)
    {
        short s0;
        org.apache.poi.ss.util.Region r0;

        r0 := @this: org.apache.poi.ss.util.Region;

        s0 := @parameter0: short;

        r0.<org.apache.poi.ss.util.Region: short _colTo> = s0;

        return;
    }

    public void setRowTo(int)
    {
        int i0;
        org.apache.poi.ss.util.Region r0;

        r0 := @this: org.apache.poi.ss.util.Region;

        i0 := @parameter0: int;

        r0.<org.apache.poi.ss.util.Region: int _rowTo> = i0;

        return;
    }

    public boolean contains(int, short)
    {
        org.apache.poi.ss.util.Region r0;
        short s3, $s4, $s5;
        int i0, $i1, $i2, $i6, $i7, $i8, $i9;

        r0 := @this: org.apache.poi.ss.util.Region;

        i0 := @parameter0: int;

        s3 := @parameter1: short;

        $i1 = r0.<org.apache.poi.ss.util.Region: int _rowFrom>;

        if $i1 > i0 goto label1;

        $i2 = r0.<org.apache.poi.ss.util.Region: int _rowTo>;

        if $i2 < i0 goto label1;

        $s4 = r0.<org.apache.poi.ss.util.Region: short _colFrom>;

        $i6 = (int) $s4;

        $i7 = (int) s3;

        if $i6 > $i7 goto label1;

        $s5 = r0.<org.apache.poi.ss.util.Region: short _colTo>;

        $i8 = (int) $s5;

        $i9 = (int) s3;

        if $i8 < $i9 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean equals(org.apache.poi.ss.util.Region)
    {
        org.apache.poi.ss.util.Region r0, r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.poi.ss.util.Region;

        r1 := @parameter0: org.apache.poi.ss.util.Region;

        $i0 = virtualinvoke r0.<org.apache.poi.ss.util.Region: int compareTo(org.apache.poi.ss.util.Region)>(r1);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int hashCode()
    {
        java.lang.AssertionError $r0;
        org.apache.poi.ss.util.Region r1;
        boolean $z0;

        r1 := @this: org.apache.poi.ss.util.Region;

        $z0 = <org.apache.poi.ss.util.Region: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>("hashCode not designed");

        throw $r0;

     label1:
        return 42;
    }

    public int compareTo(org.apache.poi.ss.util.Region)
    {
        short $s2, $s3, $s6, $s7, $s8, $s9, $s12, $s13;
        int $i0, $i1, $i4, $i5, $i10, $i11, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25;
        org.apache.poi.ss.util.Region r0, r1;

        r0 := @this: org.apache.poi.ss.util.Region;

        r1 := @parameter0: org.apache.poi.ss.util.Region;

        $i0 = virtualinvoke r0.<org.apache.poi.ss.util.Region: int getRowFrom()>();

        $i1 = virtualinvoke r1.<org.apache.poi.ss.util.Region: int getRowFrom()>();

        if $i0 != $i1 goto label1;

        $s8 = virtualinvoke r0.<org.apache.poi.ss.util.Region: short getColumnFrom()>();

        $s9 = virtualinvoke r1.<org.apache.poi.ss.util.Region: short getColumnFrom()>();

        $i16 = (int) $s8;

        $i17 = (int) $s9;

        if $i16 != $i17 goto label1;

        $i10 = virtualinvoke r0.<org.apache.poi.ss.util.Region: int getRowTo()>();

        $i11 = virtualinvoke r1.<org.apache.poi.ss.util.Region: int getRowTo()>();

        if $i10 != $i11 goto label1;

        $s12 = virtualinvoke r0.<org.apache.poi.ss.util.Region: short getColumnTo()>();

        $s13 = virtualinvoke r1.<org.apache.poi.ss.util.Region: short getColumnTo()>();

        $i18 = (int) $s12;

        $i19 = (int) $s13;

        if $i18 != $i19 goto label1;

        return 0;

     label1:
        $i14 = virtualinvoke r0.<org.apache.poi.ss.util.Region: int getRowFrom()>();

        $i15 = virtualinvoke r1.<org.apache.poi.ss.util.Region: int getRowFrom()>();

        if $i14 < $i15 goto label2;

        $s2 = virtualinvoke r0.<org.apache.poi.ss.util.Region: short getColumnFrom()>();

        $s3 = virtualinvoke r1.<org.apache.poi.ss.util.Region: short getColumnFrom()>();

        $i20 = (int) $s2;

        $i21 = (int) $s3;

        if $i20 < $i21 goto label2;

        $i4 = virtualinvoke r0.<org.apache.poi.ss.util.Region: int getRowTo()>();

        $i5 = virtualinvoke r1.<org.apache.poi.ss.util.Region: int getRowTo()>();

        if $i4 < $i5 goto label2;

        $s6 = virtualinvoke r0.<org.apache.poi.ss.util.Region: short getColumnTo()>();

        $s7 = virtualinvoke r1.<org.apache.poi.ss.util.Region: short getColumnTo()>();

        $i22 = (int) $s6;

        $i23 = (int) $s7;

        if $i22 >= $i23 goto label3;

     label2:
        return 1;

     label3:
        $i25 = (int) -1;

        return $i25;
    }

    public int getArea()
    {
        org.apache.poi.ss.util.Region r0;
        short $s3, $s4;
        int $i0, $i1, $i2, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: org.apache.poi.ss.util.Region;

        $i1 = r0.<org.apache.poi.ss.util.Region: int _rowTo>;

        $i0 = r0.<org.apache.poi.ss.util.Region: int _rowFrom>;

        $i2 = $i1 - $i0;

        $i7 = $i2 + 1;

        $s4 = r0.<org.apache.poi.ss.util.Region: short _colTo>;

        $s3 = r0.<org.apache.poi.ss.util.Region: short _colFrom>;

        $i9 = (int) $s4;

        $i10 = (int) $s3;

        $i5 = $i9 - $i10;

        $i6 = $i5 + 1;

        $i8 = $i7 * $i6;

        return $i8;
    }

    public static org.apache.poi.ss.util.Region[] convertCellRangesToRegions(org.apache.poi.ss.util.CellRangeAddress[])
    {
        org.apache.poi.ss.util.CellRangeAddress $r2;
        org.apache.poi.ss.util.Region[] r1, $r4;
        org.apache.poi.ss.util.Region $r3;
        int i0, i1;
        org.apache.poi.ss.util.CellRangeAddress[] r0;

        r0 := @parameter0: org.apache.poi.ss.util.CellRangeAddress[];

        i0 = lengthof r0;

        if i0 >= 1 goto label1;

        $r4 = newarray (org.apache.poi.ss.util.Region)[0];

        return $r4;

     label1:
        r1 = newarray (org.apache.poi.ss.util.Region)[i0];

        i1 = 0;

     label2:
        if i1 == i0 goto label3;

        $r2 = r0[i1];

        $r3 = staticinvoke <org.apache.poi.ss.util.Region: org.apache.poi.ss.util.Region convertToRegion(org.apache.poi.ss.util.CellRangeAddress)>($r2);

        r1[i1] = $r3;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r1;
    }

    private static org.apache.poi.ss.util.Region convertToRegion(org.apache.poi.ss.util.CellRangeAddress)
    {
        org.apache.poi.ss.util.CellRangeAddress r1;
        org.apache.poi.ss.util.Region $r0;
        short $s2, $s5;
        int $i0, $i1, $i3, $i4;

        r1 := @parameter0: org.apache.poi.ss.util.CellRangeAddress;

        $r0 = new org.apache.poi.ss.util.Region;

        $i0 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstRow()>();

        $i1 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getFirstColumn()>();

        $s2 = (short) $i1;

        $i3 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastRow()>();

        $i4 = virtualinvoke r1.<org.apache.poi.ss.util.CellRangeAddress: int getLastColumn()>();

        $s5 = (short) $i4;

        specialinvoke $r0.<org.apache.poi.ss.util.Region: void <init>(int,short,int,short)>($i0, $s2, $i3, $s5);

        return $r0;
    }

    public static org.apache.poi.ss.util.CellRangeAddress[] convertRegionsToCellRanges(org.apache.poi.ss.util.Region[])
    {
        org.apache.poi.ss.util.CellRangeAddress $r3;
        org.apache.poi.ss.util.Region[] r0;
        org.apache.poi.ss.util.Region $r2;
        int i0, i1;
        org.apache.poi.ss.util.CellRangeAddress[] r1, $r4;

        r0 := @parameter0: org.apache.poi.ss.util.Region[];

        i0 = lengthof r0;

        if i0 >= 1 goto label1;

        $r4 = newarray (org.apache.poi.ss.util.CellRangeAddress)[0];

        return $r4;

     label1:
        r1 = newarray (org.apache.poi.ss.util.CellRangeAddress)[i0];

        i1 = 0;

     label2:
        if i1 == i0 goto label3;

        $r2 = r0[i1];

        $r3 = staticinvoke <org.apache.poi.ss.util.Region: org.apache.poi.ss.util.CellRangeAddress convertToCellRangeAddress(org.apache.poi.ss.util.Region)>($r2);

        r1[i1] = $r3;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static org.apache.poi.ss.util.CellRangeAddress convertToCellRangeAddress(org.apache.poi.ss.util.Region)
    {
        org.apache.poi.ss.util.CellRangeAddress $r2;
        org.apache.poi.ss.util.Region r1;
        short $s2, $s3;
        int $i0, $i1, $i4, $i5;

        r1 := @parameter0: org.apache.poi.ss.util.Region;

        $r2 = new org.apache.poi.ss.util.CellRangeAddress;

        $i0 = virtualinvoke r1.<org.apache.poi.ss.util.Region: int getRowFrom()>();

        $i1 = virtualinvoke r1.<org.apache.poi.ss.util.Region: int getRowTo()>();

        $s2 = virtualinvoke r1.<org.apache.poi.ss.util.Region: short getColumnFrom()>();

        $s3 = virtualinvoke r1.<org.apache.poi.ss.util.Region: short getColumnTo()>();

        $i4 = (int) $s2;

        $i5 = (int) $s3;

        specialinvoke $r2.<org.apache.poi.ss.util.CellRangeAddress: void <init>(int,int,int,int)>($i0, $i1, $i4, $i5);

        return $r2;
    }

    public java.lang.String getRegionRef()
    {
        org.apache.poi.ss.util.Region r1;
        org.apache.poi.ss.util.CellReference $r0, $r2;
        short $s0, $s2;
        int $i1, $i3;
        java.lang.StringBuilder $r3, $r5, $r6, $r8;
        java.lang.String $r4, $r7, $r9;

        r1 := @this: org.apache.poi.ss.util.Region;

        $r0 = new org.apache.poi.ss.util.CellReference;

        $i1 = r1.<org.apache.poi.ss.util.Region: int _rowFrom>;

        $s0 = r1.<org.apache.poi.ss.util.Region: short _colFrom>;

        specialinvoke $r0.<org.apache.poi.ss.util.CellReference: void <init>(int,short)>($i1, $s0);

        $r2 = new org.apache.poi.ss.util.CellReference;

        $i3 = r1.<org.apache.poi.ss.util.Region: int _rowTo>;

        $s2 = r1.<org.apache.poi.ss.util.Region: short _colTo>;

        specialinvoke $r2.<org.apache.poi.ss.util.CellReference: void <init>(int,short)>($i3, $s2);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r0.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = virtualinvoke $r2.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.poi.ss.util.Region r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.apache.poi.ss.util.Region;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.poi.ss.util.Region) r1;

        $i0 = virtualinvoke r0.<org.apache.poi.ss.util.Region: int compareTo(org.apache.poi.ss.util.Region)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/poi/ss/util/Region;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.poi.ss.util.Region: boolean $assertionsDisabled> = $z1;

        return;
    }
}
