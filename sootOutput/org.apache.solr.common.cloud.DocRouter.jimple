public abstract class org.apache.solr.common.cloud.DocRouter extends java.lang.Object
{
    public static final java.lang.String DEFAULT_NAME;
    public static final org.apache.solr.common.cloud.DocRouter DEFAULT;
    private static final java.util.Map routerMap;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.solr.common.cloud.DocRouter r0;

        r0 := @this: org.apache.solr.common.cloud.DocRouter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.solr.common.cloud.DocRouter getDocRouter(java.lang.Object)
    {
        org.apache.solr.common.SolrException$ErrorCode $r6;
        org.apache.solr.common.SolrException $r4;
        java.util.Map $r1;
        org.apache.solr.common.cloud.DocRouter r3;
        java.lang.Object r0, $r2;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.apache.solr.common.cloud.DocRouter: java.util.Map routerMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (org.apache.solr.common.cloud.DocRouter) $r2;

        if r3 == null goto label1;

        return r3;

     label1:
        $r4 = new org.apache.solr.common.SolrException;

        $r6 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode SERVER_ERROR>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown document router \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String)>($r6, $r10);

        throw $r4;
    }

    public org.apache.solr.common.cloud.DocRouter$Range fromString(java.lang.String)
    {
        org.apache.solr.common.cloud.DocRouter$Range $r3;
        long $l2, $l3;
        int $i0, $i1, $i4, $i5;
        org.apache.solr.common.cloud.DocRouter r4;
        java.lang.String r0, $r1, $r2;

        r4 := @this: org.apache.solr.common.cloud.DocRouter;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(45);

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r1, 16);

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r2, 16);

        $r3 = new org.apache.solr.common.cloud.DocRouter$Range;

        $i5 = (int) $l2;

        $i4 = (int) $l3;

        specialinvoke $r3.<org.apache.solr.common.cloud.DocRouter$Range: void <init>(int,int)>($i5, $i4);

        return $r3;
    }

    public org.apache.solr.common.cloud.DocRouter$Range fullRange()
    {
        org.apache.solr.common.cloud.DocRouter r1;
        org.apache.solr.common.cloud.DocRouter$Range $r0;

        r1 := @this: org.apache.solr.common.cloud.DocRouter;

        $r0 = new org.apache.solr.common.cloud.DocRouter$Range;

        specialinvoke $r0.<org.apache.solr.common.cloud.DocRouter$Range: void <init>(int,int)>(-2147483648, 2147483647);

        return $r0;
    }

    public java.util.List partitionRange(int, org.apache.solr.common.cloud.DocRouter$Range)
    {
        org.apache.solr.common.cloud.DocRouter$Range r0, $r8;
        long $l3, $l4, l5, $l6, $l7, $l8, $l9, l15, l16;
        java.lang.AssertionError $r6;
        java.util.ArrayList $r7;
        byte $b10;
        int i0, i1, i2, $i11, $i12, $i13, $i14, $i17;
        boolean $z0;
        java.util.List $r3;
        org.apache.solr.common.cloud.DocRouter r5;

        r5 := @this: org.apache.solr.common.cloud.DocRouter;

        i2 := @parameter0: int;

        r0 := @parameter1: org.apache.solr.common.cloud.DocRouter$Range;

        i0 = r0.<org.apache.solr.common.cloud.DocRouter$Range: int min>;

        i1 = r0.<org.apache.solr.common.cloud.DocRouter$Range: int max>;

        $z0 = <org.apache.solr.common.cloud.DocRouter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i1 >= i0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        if i2 != 0 goto label2;

        $r3 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $r3;

     label2:
        $l4 = (long) i1;

        $l3 = (long) i0;

        l5 = $l4 - $l3;

        $l6 = (long) i2;

        $l7 = l5 / $l6;

        $l8 = staticinvoke <java.lang.Math: long max(long,long)>(1L, $l7);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(i2);

        l15 = (long) i0;

        l16 = l15;

     label3:
        $l9 = (long) i1;

        $b10 = l16 cmp $l9;

        $i17 = (int) $b10;

        if $i17 >= 0 goto label5;

        l16 = l15 + $l8;

        $i11 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i12 = i2 - 1;

        if $i11 != $i12 goto label4;

        l16 = (long) i1;

     label4:
        $r8 = new org.apache.solr.common.cloud.DocRouter$Range;

        $i14 = (int) l15;

        $i13 = (int) l16;

        specialinvoke $r8.<org.apache.solr.common.cloud.DocRouter$Range: void <init>(int,int)>($i14, $i13);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r8);

        l15 = l16 + 1L;

        goto label3;

     label5:
        return $r7;
    }

    public abstract org.apache.solr.common.cloud.Slice getTargetSlice(java.lang.String, org.apache.solr.common.SolrInputDocument, org.apache.solr.common.params.SolrParams, org.apache.solr.common.cloud.DocCollection);

    public abstract java.util.Collection getSearchSlicesSingle(java.lang.String, org.apache.solr.common.params.SolrParams, org.apache.solr.common.cloud.DocCollection);

    public abstract boolean isTargetSlice(java.lang.String, org.apache.solr.common.SolrInputDocument, org.apache.solr.common.params.SolrParams, java.lang.String, org.apache.solr.common.cloud.DocCollection);

    public java.util.Collection getSearchSlices(java.lang.String, org.apache.solr.common.params.SolrParams, org.apache.solr.common.cloud.DocCollection)
    {
        java.util.Iterator $r7;
        org.apache.solr.common.cloud.DocCollection r3;
        java.util.Collection $r4, $r10;
        org.apache.solr.common.params.SolrParams r2;
        java.util.HashSet $r6;
        java.util.List $r5;
        org.apache.solr.common.cloud.DocRouter r1;
        int $i0;
        java.lang.Object $r8;
        java.lang.String r0, r9;
        boolean $z0;

        r1 := @this: org.apache.solr.common.cloud.DocRouter;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.solr.common.params.SolrParams;

        r3 := @parameter2: org.apache.solr.common.cloud.DocCollection;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(44);

        if $i0 >= 0 goto label2;

     label1:
        $r4 = virtualinvoke r1.<org.apache.solr.common.cloud.DocRouter: java.util.Collection getSearchSlicesSingle(java.lang.String,org.apache.solr.common.params.SolrParams,org.apache.solr.common.cloud.DocCollection)>(r0, r2, r3);

        return $r4;

     label2:
        $r5 = staticinvoke <org.apache.solr.common.util.StrUtils: java.util.List splitSmart(java.lang.String,java.lang.String,boolean)>(r0, ",", 1);

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        $r7 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) $r8;

        $r10 = virtualinvoke r1.<org.apache.solr.common.cloud.DocRouter: java.util.Collection getSearchSlicesSingle(java.lang.String,org.apache.solr.common.params.SolrParams,org.apache.solr.common.cloud.DocCollection)>(r9, r2, r3);

        virtualinvoke $r6.<java.util.HashSet: boolean addAll(java.util.Collection)>($r10);

        goto label3;

     label4:
        return $r6;
    }

    static void <clinit>()
    {
        org.apache.solr.common.cloud.CompositeIdRouter $r11, $r14;
        org.apache.solr.common.cloud.PlainIdRouter $r13;
        org.apache.solr.common.cloud.ImplicitDocRouter $r15;
        java.util.HashMap $r12;
        java.util.Map $r4, $r5, $r7, $r9;
        org.apache.solr.common.cloud.DocRouter $r10;
        java.lang.Class $r0;
        java.lang.String $r6;
        boolean $z0, $z1, $z2;

        <org.apache.solr.common.cloud.DocRouter: java.lang.String DEFAULT_NAME> = "compositeId";

        $r0 = class "Lorg/apache/solr/common/cloud/DocRouter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        <org.apache.solr.common.cloud.DocRouter: boolean $assertionsDisabled> = $z2;

        $r11 = new org.apache.solr.common.cloud.CompositeIdRouter;

        specialinvoke $r11.<org.apache.solr.common.cloud.CompositeIdRouter: void <init>()>();

        <org.apache.solr.common.cloud.DocRouter: org.apache.solr.common.cloud.DocRouter DEFAULT> = $r11;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        <org.apache.solr.common.cloud.DocRouter: java.util.Map routerMap> = $r12;

        $r13 = new org.apache.solr.common.cloud.PlainIdRouter;

        specialinvoke $r13.<org.apache.solr.common.cloud.PlainIdRouter: void <init>()>();

        $r4 = <org.apache.solr.common.cloud.DocRouter: java.util.Map routerMap>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, $r13);

        $r5 = <org.apache.solr.common.cloud.DocRouter: java.util.Map routerMap>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("plain", $r13);

        $r7 = <org.apache.solr.common.cloud.DocRouter: java.util.Map routerMap>;

        $r6 = "compositeId";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("compositeId");

        if $z1 == 0 goto label3;

        $r10 = <org.apache.solr.common.cloud.DocRouter: org.apache.solr.common.cloud.DocRouter DEFAULT>;

        goto label4;

     label3:
        $r14 = new org.apache.solr.common.cloud.CompositeIdRouter;

        $r10 = $r14;

        specialinvoke $r14.<org.apache.solr.common.cloud.CompositeIdRouter: void <init>()>();

     label4:
        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("compositeId", $r10);

        $r9 = <org.apache.solr.common.cloud.DocRouter: java.util.Map routerMap>;

        $r15 = new org.apache.solr.common.cloud.ImplicitDocRouter;

        specialinvoke $r15.<org.apache.solr.common.cloud.ImplicitDocRouter: void <init>()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("implicit", $r15);

        return;
    }
}
