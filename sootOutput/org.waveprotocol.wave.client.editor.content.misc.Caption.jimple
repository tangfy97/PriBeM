public class org.waveprotocol.wave.client.editor.content.misc.Caption extends java.lang.Object
{
    public static final java.lang.String TAGNAME;
    public static final org.waveprotocol.wave.client.editor.NodeEventHandler CAPTION_EVENT_HANDLER;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.content.misc.Caption r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.Caption;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphRenderer $r2;
        org.waveprotocol.wave.client.editor.content.misc.Caption$2 $r3;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r1;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        $r1 = <org.waveprotocol.wave.client.editor.content.misc.Caption: org.waveprotocol.wave.client.editor.NodeEventHandler CAPTION_EVENT_HANDLER>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerEventHandler(java.lang.String,org.waveprotocol.wave.client.editor.NodeEventHandler)>("caption", $r1);

        $r2 = new org.waveprotocol.wave.client.editor.content.paragraph.ParagraphRenderer;

        $r3 = new org.waveprotocol.wave.client.editor.content.misc.Caption$2;

        specialinvoke $r3.<org.waveprotocol.wave.client.editor.content.misc.Caption$2: void <init>(java.lang.String)>("div");

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphRenderer: void <init>(org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHtmlRenderer)>($r3);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerMutationHandler(java.lang.String,org.waveprotocol.wave.client.editor.NodeMutationHandler)>("caption", $r2);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerRenderer(java.lang.String,org.waveprotocol.wave.client.editor.content.Renderer)>("caption", $r2);

        return;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilder constructXml(org.waveprotocol.wave.model.document.util.XmlStringBuilder)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r0, $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String)>("caption");

        return $r1;
    }

    public static boolean isCaption(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.util.EditorDocHelper: boolean isNamedElement(org.waveprotocol.wave.client.editor.content.ContentNode,java.lang.String)>(r0, "caption");

        return $z0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.content.misc.Caption$1 $r0;

        <org.waveprotocol.wave.client.editor.content.misc.Caption: java.lang.String TAGNAME> = "caption";

        $r0 = new org.waveprotocol.wave.client.editor.content.misc.Caption$1;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.content.misc.Caption$1: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.misc.Caption: org.waveprotocol.wave.client.editor.NodeEventHandler CAPTION_EVENT_HANDLER> = $r0;

        return;
    }
}
