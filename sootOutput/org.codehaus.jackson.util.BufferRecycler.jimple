public final class org.codehaus.jackson.util.BufferRecycler extends java.lang.Object
{
    public static final int DEFAULT_WRITE_CONCAT_BUFFER_LEN;
    protected final byte[][] mByteBuffers;
    protected final char[][] mCharBuffers;

    public void <init>()
    {
        org.codehaus.jackson.util.BufferRecycler r0;
        org.codehaus.jackson.util.BufferRecycler$ByteBufferType[] $r1;
        byte[][] $r2;
        int $i0, $i1;
        org.codehaus.jackson.util.BufferRecycler$CharBufferType[] $r3;
        char[][] $r4;

        r0 := @this: org.codehaus.jackson.util.BufferRecycler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.codehaus.jackson.util.BufferRecycler$ByteBufferType: org.codehaus.jackson.util.BufferRecycler$ByteBufferType[] values()>();

        $i0 = lengthof $r1;

        $r2 = newarray (byte[])[$i0];

        r0.<org.codehaus.jackson.util.BufferRecycler: byte[][] mByteBuffers> = $r2;

        $r3 = staticinvoke <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType[] values()>();

        $i1 = lengthof $r3;

        $r4 = newarray (char[])[$i1];

        r0.<org.codehaus.jackson.util.BufferRecycler: char[][] mCharBuffers> = $r4;

        return;
    }

    public byte[] allocByteBuffer(org.codehaus.jackson.util.BufferRecycler$ByteBufferType)
    {
        org.codehaus.jackson.util.BufferRecycler r1;
        org.codehaus.jackson.util.BufferRecycler$ByteBufferType r0;
        byte[] r4;
        byte[][] $r2, $r3;
        int $i0, $i1;

        r1 := @this: org.codehaus.jackson.util.BufferRecycler;

        r0 := @parameter0: org.codehaus.jackson.util.BufferRecycler$ByteBufferType;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.util.BufferRecycler$ByteBufferType: int ordinal()>();

        $r2 = r1.<org.codehaus.jackson.util.BufferRecycler: byte[][] mByteBuffers>;

        r4 = $r2[$i0];

        if r4 != null goto label1;

        $i1 = staticinvoke <org.codehaus.jackson.util.BufferRecycler$ByteBufferType: int access$000(org.codehaus.jackson.util.BufferRecycler$ByteBufferType)>(r0);

        r4 = specialinvoke r1.<org.codehaus.jackson.util.BufferRecycler: byte[] balloc(int)>($i1);

        goto label2;

     label1:
        $r3 = r1.<org.codehaus.jackson.util.BufferRecycler: byte[][] mByteBuffers>;

        $r3[$i0] = null;

     label2:
        return r4;
    }

    public void releaseByteBuffer(org.codehaus.jackson.util.BufferRecycler$ByteBufferType, byte[])
    {
        org.codehaus.jackson.util.BufferRecycler r0;
        org.codehaus.jackson.util.BufferRecycler$ByteBufferType r1;
        byte[] r3;
        byte[][] $r2;
        int $i0;

        r0 := @this: org.codehaus.jackson.util.BufferRecycler;

        r1 := @parameter0: org.codehaus.jackson.util.BufferRecycler$ByteBufferType;

        r3 := @parameter1: byte[];

        $r2 = r0.<org.codehaus.jackson.util.BufferRecycler: byte[][] mByteBuffers>;

        $i0 = virtualinvoke r1.<org.codehaus.jackson.util.BufferRecycler$ByteBufferType: int ordinal()>();

        $r2[$i0] = r3;

        return;
    }

    public char[] allocCharBuffer(org.codehaus.jackson.util.BufferRecycler$CharBufferType)
    {
        org.codehaus.jackson.util.BufferRecycler r0;
        char[] $r2;
        org.codehaus.jackson.util.BufferRecycler$CharBufferType r1;

        r0 := @this: org.codehaus.jackson.util.BufferRecycler;

        r1 := @parameter0: org.codehaus.jackson.util.BufferRecycler$CharBufferType;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.util.BufferRecycler: char[] allocCharBuffer(org.codehaus.jackson.util.BufferRecycler$CharBufferType,int)>(r1, 0);

        return $r2;
    }

    public char[] allocCharBuffer(org.codehaus.jackson.util.BufferRecycler$CharBufferType, int)
    {
        org.codehaus.jackson.util.BufferRecycler$CharBufferType r0;
        char[][] $r2, $r3;
        org.codehaus.jackson.util.BufferRecycler r1;
        int $i0, $i1, $i2, i3;
        char[] $r4, r5;

        r1 := @this: org.codehaus.jackson.util.BufferRecycler;

        r0 := @parameter0: org.codehaus.jackson.util.BufferRecycler$CharBufferType;

        i3 := @parameter1: int;

        $i0 = staticinvoke <org.codehaus.jackson.util.BufferRecycler$CharBufferType: int access$100(org.codehaus.jackson.util.BufferRecycler$CharBufferType)>(r0);

        if $i0 <= i3 goto label1;

        i3 = staticinvoke <org.codehaus.jackson.util.BufferRecycler$CharBufferType: int access$100(org.codehaus.jackson.util.BufferRecycler$CharBufferType)>(r0);

     label1:
        $i1 = virtualinvoke r0.<org.codehaus.jackson.util.BufferRecycler$CharBufferType: int ordinal()>();

        $r2 = r1.<org.codehaus.jackson.util.BufferRecycler: char[][] mCharBuffers>;

        $r4 = $r2[$i1];

        r5 = $r4;

        if $r4 == null goto label2;

        $i2 = lengthof $r4;

        if $i2 >= i3 goto label3;

     label2:
        r5 = specialinvoke r1.<org.codehaus.jackson.util.BufferRecycler: char[] calloc(int)>(i3);

        goto label4;

     label3:
        $r3 = r1.<org.codehaus.jackson.util.BufferRecycler: char[][] mCharBuffers>;

        $r3[$i1] = null;

     label4:
        return r5;
    }

    public void releaseCharBuffer(org.codehaus.jackson.util.BufferRecycler$CharBufferType, char[])
    {
        org.codehaus.jackson.util.BufferRecycler r0;
        int $i0;
        char[] r3;
        org.codehaus.jackson.util.BufferRecycler$CharBufferType r1;
        char[][] $r2;

        r0 := @this: org.codehaus.jackson.util.BufferRecycler;

        r1 := @parameter0: org.codehaus.jackson.util.BufferRecycler$CharBufferType;

        r3 := @parameter1: char[];

        $r2 = r0.<org.codehaus.jackson.util.BufferRecycler: char[][] mCharBuffers>;

        $i0 = virtualinvoke r1.<org.codehaus.jackson.util.BufferRecycler$CharBufferType: int ordinal()>();

        $r2[$i0] = r3;

        return;
    }

    private byte[] balloc(int)
    {
        int i0;
        org.codehaus.jackson.util.BufferRecycler r1;
        byte[] $r0;

        r1 := @this: org.codehaus.jackson.util.BufferRecycler;

        i0 := @parameter0: int;

        $r0 = newarray (byte)[i0];

        return $r0;
    }

    private char[] calloc(int)
    {
        int i0;
        org.codehaus.jackson.util.BufferRecycler r1;
        char[] $r0;

        r1 := @this: org.codehaus.jackson.util.BufferRecycler;

        i0 := @parameter0: int;

        $r0 = newarray (char)[i0];

        return $r0;
    }

    public static void <clinit>()
    {
        <org.codehaus.jackson.util.BufferRecycler: int DEFAULT_WRITE_CONCAT_BUFFER_LEN> = 2000;

        return;
    }
}
