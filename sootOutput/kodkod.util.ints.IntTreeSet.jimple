public final class kodkod.util.ints.IntTreeSet extends kodkod.util.ints.AbstractIntSet implements java.lang.Cloneable
{
    private final kodkod.util.ints.IntTree tree;
    private int size;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/util/ints/IntTreeSet;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.util.ints.IntTreeSet: boolean $assertionsDisabled> = $z1;

        return;
    }

    public void <init>()
    {
        kodkod.util.ints.IntTreeSet r0;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.IntTreeSet;

        specialinvoke r0.<kodkod.util.ints.AbstractIntSet: void <init>()>();

        $r1 = new kodkod.util.ints.IntTree;

        specialinvoke $r1.<kodkod.util.ints.IntTree: void <init>()>();

        r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree> = $r1;

        r0.<kodkod.util.ints.IntTreeSet: int size> = 0;

        return;
    }

    public void <init>(kodkod.util.ints.IntSet)
    {
        kodkod.util.ints.IntTreeSet r0;
        kodkod.util.ints.IntSet r1;

        r0 := @this: kodkod.util.ints.IntTreeSet;

        r1 := @parameter0: kodkod.util.ints.IntSet;

        specialinvoke r0.<kodkod.util.ints.IntTreeSet: void <init>()>();

        virtualinvoke r0.<kodkod.util.ints.IntTreeSet: boolean addAll(kodkod.util.ints.IntCollection)>(r1);

        return;
    }

    private void <init>(kodkod.util.ints.IntTreeSet)
    {
        kodkod.util.ints.IntTreeSet r0, r1;
        int $i0;
        java.lang.InternalError $r5;
        kodkod.util.ints.IntTree $r2, $r3;
        java.lang.CloneNotSupportedException $r4;

        r0 := @this: kodkod.util.ints.IntTreeSet;

        r1 := @parameter0: kodkod.util.ints.IntTreeSet;

        specialinvoke r0.<kodkod.util.ints.AbstractIntSet: void <init>()>();

        $i0 = r1.<kodkod.util.ints.IntTreeSet: int size>;

        r0.<kodkod.util.ints.IntTreeSet: int size> = $i0;

     label1:
        $r2 = r1.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        $r3 = virtualinvoke $r2.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree clone()>();

        r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree> = $r3;

        goto label3;

     label2:
        $r4 := @caughtexception;

        $r5 = new java.lang.InternalError;

        specialinvoke $r5.<java.lang.InternalError: void <init>()>();

        throw $r5;

     label3:
        return;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label2;
    }

    public kodkod.util.ints.IntIterator iterator(int, int)
    {
        kodkod.util.ints.IntTreeSet r0;
        kodkod.util.ints.IntTreeSet$AscendingIterator $r2;
        kodkod.util.ints.IntTreeSet$DescendingIterator $r3;
        int i0, i1;
        kodkod.util.ints.IntIterator $r1;

        r0 := @this: kodkod.util.ints.IntTreeSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 > i1 goto label1;

        $r2 = new kodkod.util.ints.IntTreeSet$AscendingIterator;

        $r1 = $r2;

        specialinvoke $r2.<kodkod.util.ints.IntTreeSet$AscendingIterator: void <init>(kodkod.util.ints.IntTreeSet,int,int)>(r0, i0, i1);

        goto label2;

     label1:
        $r3 = new kodkod.util.ints.IntTreeSet$DescendingIterator;

        $r1 = $r3;

        specialinvoke $r3.<kodkod.util.ints.IntTreeSet$DescendingIterator: void <init>(kodkod.util.ints.IntTreeSet,int,int)>(r0, i0, i1);

     label2:
        return $r1;
    }

    public int size()
    {
        int $i0;
        kodkod.util.ints.IntTreeSet r0;

        r0 := @this: kodkod.util.ints.IntTreeSet;

        $i0 = r0.<kodkod.util.ints.IntTreeSet: int size>;

        return $i0;
    }

    public boolean contains(int)
    {
        kodkod.util.ints.IntTreeSet$Range r3;
        kodkod.util.ints.IntTreeSet r0;
        kodkod.util.ints.IntTree$Node $r2;
        int i0, $i1;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.IntTreeSet;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchGTE(int)>(i0);

        r3 = (kodkod.util.ints.IntTreeSet$Range) $r2;

        if r3 == null goto label1;

        $i1 = staticinvoke <kodkod.util.ints.IntTreeSet$Range: int access$1(kodkod.util.ints.IntTreeSet$Range)>(r3);

        if $i1 > i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int min()
    {
        kodkod.util.ints.IntTreeSet$Range $r3;
        kodkod.util.ints.IntTreeSet r0;
        kodkod.util.ints.IntTree$Node $r2;
        int $i0;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.IntTreeSet;

        virtualinvoke r0.<kodkod.util.ints.IntTreeSet: void checkNonEmpty()>();

        $r1 = r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node min()>();

        $r3 = (kodkod.util.ints.IntTreeSet$Range) $r2;

        $i0 = staticinvoke <kodkod.util.ints.IntTreeSet$Range: int access$1(kodkod.util.ints.IntTreeSet$Range)>($r3);

        return $i0;
    }

    public int max()
    {
        kodkod.util.ints.IntTreeSet$Range $r3;
        kodkod.util.ints.IntTreeSet r0;
        kodkod.util.ints.IntTree$Node $r2;
        int $i0;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.IntTreeSet;

        virtualinvoke r0.<kodkod.util.ints.IntTreeSet: void checkNonEmpty()>();

        $r1 = r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node max()>();

        $r3 = (kodkod.util.ints.IntTreeSet$Range) $r2;

        $i0 = $r3.<kodkod.util.ints.IntTreeSet$Range: int key>;

        return $i0;
    }

    public int floor(int)
    {
        kodkod.util.ints.IntTreeSet r0;
        java.lang.Integer $r7;
        kodkod.util.ints.IntTreeSet$Range $r5, r6;
        kodkod.util.ints.IntTree$Node $r2, $r4;
        int i0, $i1, $i2, $i3;
        kodkod.util.ints.IntTree $r1, $r3;

        r0 := @this: kodkod.util.ints.IntTreeSet;

        i0 := @parameter0: int;

        virtualinvoke r0.<kodkod.util.ints.IntTreeSet: void checkNonEmpty()>();

        $r1 = r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchGTE(int)>(i0);

        r6 = (kodkod.util.ints.IntTreeSet$Range) $r2;

        if r6 == null goto label1;

        $i3 = staticinvoke <kodkod.util.ints.IntTreeSet$Range: int access$1(kodkod.util.ints.IntTreeSet$Range)>(r6);

        if $i3 <= i0 goto label4;

     label1:
        $r3 = r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        $r4 = virtualinvoke $r3.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchLTE(int)>(i0);

        $r5 = (kodkod.util.ints.IntTreeSet$Range) $r4;

        if $r5 != null goto label2;

        $r7 = null;

        goto label3;

     label2:
        $i1 = $r5.<kodkod.util.ints.IntTreeSet$Range: int key>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

     label3:
        $i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        return $i2;

     label4:
        return i0;
    }

    public int ceil(int)
    {
        kodkod.util.ints.IntTreeSet r0;
        java.lang.Integer $r4;
        kodkod.util.ints.IntTreeSet$Range r3;
        kodkod.util.ints.IntTree$Node $r2;
        int i0, $i1, $i2, $i3;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.IntTreeSet;

        i0 := @parameter0: int;

        virtualinvoke r0.<kodkod.util.ints.IntTreeSet: void checkNonEmpty()>();

        $r1 = r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchGTE(int)>(i0);

        r3 = (kodkod.util.ints.IntTreeSet$Range) $r2;

        if r3 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $i1 = staticinvoke <kodkod.util.ints.IntTreeSet$Range: int access$1(kodkod.util.ints.IntTreeSet$Range)>(r3);

        $i2 = staticinvoke <java.lang.StrictMath: int max(int,int)>(i0, $i1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

     label2:
        $i3 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i3;
    }

    public boolean add(int)
    {
        kodkod.util.ints.IntTreeSet$Range r3, $r6, $r9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        kodkod.util.ints.IntTree $r1, $r4, $r7, $r8;
        kodkod.util.ints.IntTreeSet r0;
        kodkod.util.ints.IntTree$Node $r2, $r5;

        r0 := @this: kodkod.util.ints.IntTreeSet;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchGTE(int)>(i0);

        r3 = (kodkod.util.ints.IntTreeSet$Range) $r2;

        if r3 == null goto label1;

        $i8 = staticinvoke <kodkod.util.ints.IntTreeSet$Range: int access$1(kodkod.util.ints.IntTreeSet$Range)>(r3);

        if $i8 <= i0 goto label6;

     label1:
        $r4 = r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        $r5 = virtualinvoke $r4.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchLTE(int)>(i0);

        $r9 = (kodkod.util.ints.IntTreeSet$Range) $r5;

        if $r9 == null goto label3;

        $i4 = $r9.<kodkod.util.ints.IntTreeSet$Range: int key>;

        $i3 = i0 - 1;

        if $i4 != $i3 goto label3;

        if r3 == null goto label2;

        $i5 = staticinvoke <kodkod.util.ints.IntTreeSet$Range: int access$1(kodkod.util.ints.IntTreeSet$Range)>(r3);

        $i6 = i0 + 1;

        if $i5 != $i6 goto label2;

        $r8 = r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        virtualinvoke $r8.<kodkod.util.ints.IntTree: void delete(kodkod.util.ints.IntTree$Node)>(r3);

        $i7 = r3.<kodkod.util.ints.IntTreeSet$Range: int key>;

        $r9.<kodkod.util.ints.IntTreeSet$Range: int key> = $i7;

        goto label5;

     label2:
        $r9.<kodkod.util.ints.IntTreeSet$Range: int key> = i0;

        goto label5;

     label3:
        if r3 == null goto label4;

        $i1 = staticinvoke <kodkod.util.ints.IntTreeSet$Range: int access$1(kodkod.util.ints.IntTreeSet$Range)>(r3);

        $i2 = i0 + 1;

        if $i1 != $i2 goto label4;

        staticinvoke <kodkod.util.ints.IntTreeSet$Range: void access$2(kodkod.util.ints.IntTreeSet$Range,int)>(r3, i0);

        goto label5;

     label4:
        $r7 = r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        $r6 = new kodkod.util.ints.IntTreeSet$Range;

        specialinvoke $r6.<kodkod.util.ints.IntTreeSet$Range: void <init>(int,int)>(i0, i0);

        virtualinvoke $r7.<kodkod.util.ints.IntTree: void insert(kodkod.util.ints.IntTree$Node)>($r6);

     label5:
        $i9 = r0.<kodkod.util.ints.IntTreeSet: int size>;

        $i10 = $i9 + 1;

        r0.<kodkod.util.ints.IntTreeSet: int size> = $i10;

        return 1;

     label6:
        return 0;
    }

    public boolean remove(int)
    {
        java.lang.AssertionError $r6;
        kodkod.util.ints.IntTreeSet$Range r3, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        kodkod.util.ints.IntTree $r1, $r5, $r7;
        boolean $z0;
        kodkod.util.ints.IntTreeSet r0;
        kodkod.util.ints.IntTree$Node $r2;

        r0 := @this: kodkod.util.ints.IntTreeSet;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchGTE(int)>(i0);

        r3 = (kodkod.util.ints.IntTreeSet$Range) $r2;

        if r3 == null goto label6;

        $i1 = staticinvoke <kodkod.util.ints.IntTreeSet$Range: int access$1(kodkod.util.ints.IntTreeSet$Range)>(r3);

        if i0 < $i1 goto label6;

        $i2 = staticinvoke <kodkod.util.ints.IntTreeSet$Range: int access$1(kodkod.util.ints.IntTreeSet$Range)>(r3);

        $i3 = r3.<kodkod.util.ints.IntTreeSet$Range: int key>;

        if $i2 != $i3 goto label1;

        $r7 = r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        virtualinvoke $r7.<kodkod.util.ints.IntTree: void delete(kodkod.util.ints.IntTree$Node)>(r3);

        goto label4;

     label1:
        $i4 = staticinvoke <kodkod.util.ints.IntTreeSet$Range: int access$1(kodkod.util.ints.IntTreeSet$Range)>(r3);

        if i0 != $i4 goto label2;

        $i11 = staticinvoke <kodkod.util.ints.IntTreeSet$Range: int access$1(kodkod.util.ints.IntTreeSet$Range)>(r3);

        $i12 = $i11 + 1;

        staticinvoke <kodkod.util.ints.IntTreeSet$Range: void access$2(kodkod.util.ints.IntTreeSet$Range,int)>(r3, $i12);

        goto label4;

     label2:
        $i5 = r3.<kodkod.util.ints.IntTreeSet$Range: int key>;

        if i0 != $i5 goto label3;

        $i10 = i0 - 1;

        r3.<kodkod.util.ints.IntTreeSet$Range: int key> = $i10;

        goto label4;

     label3:
        $r5 = r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        $r4 = new kodkod.util.ints.IntTreeSet$Range;

        $i6 = staticinvoke <kodkod.util.ints.IntTreeSet$Range: int access$1(kodkod.util.ints.IntTreeSet$Range)>(r3);

        $i7 = i0 - 1;

        specialinvoke $r4.<kodkod.util.ints.IntTreeSet$Range: void <init>(int,int)>($i6, $i7);

        virtualinvoke $r5.<kodkod.util.ints.IntTree: void insert(kodkod.util.ints.IntTree$Node)>($r4);

        $i8 = i0 + 1;

        staticinvoke <kodkod.util.ints.IntTreeSet$Range: void access$2(kodkod.util.ints.IntTreeSet$Range,int)>(r3, $i8);

     label4:
        $i13 = r0.<kodkod.util.ints.IntTreeSet: int size>;

        $i14 = $i13 - 1;

        r0.<kodkod.util.ints.IntTreeSet: int size> = $i14;

        $z0 = <kodkod.util.ints.IntTreeSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label5;

        $i9 = r0.<kodkod.util.ints.IntTreeSet: int size>;

        if $i9 >= 0 goto label5;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label5:
        return 1;

     label6:
        return 0;
    }

    public boolean containsAll(kodkod.util.ints.IntCollection)
    {
        kodkod.util.ints.IntCollection r0;
        kodkod.util.ints.IntTreeSet$Range r7, r10;
        int $i0, $i1, $i2, $i3, $i4;
        kodkod.util.ints.IntTree $r3, $r5, $r8;
        boolean $z0, $z1;
        kodkod.util.ints.IntTreeSet r1, r2;
        kodkod.util.ints.IntTree$Node $r4, $r6, $r9;

        r1 := @this: kodkod.util.ints.IntTreeSet;

        r0 := @parameter0: kodkod.util.ints.IntCollection;

        $z0 = r0 instanceof kodkod.util.ints.IntTreeSet;

        if $z0 == 0 goto label6;

        r2 = (kodkod.util.ints.IntTreeSet) r0;

        $i1 = r1.<kodkod.util.ints.IntTreeSet: int size>;

        $i0 = r2.<kodkod.util.ints.IntTreeSet: int size>;

        if $i1 < $i0 goto label5;

        $r3 = r2.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        $r4 = virtualinvoke $r3.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node min()>();

        r10 = (kodkod.util.ints.IntTreeSet$Range) $r4;

        goto label4;

     label1:
        $r5 = r1.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        $i2 = r10.<kodkod.util.ints.IntTreeSet$Range: int key>;

        $r6 = virtualinvoke $r5.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchGTE(int)>($i2);

        r7 = (kodkod.util.ints.IntTreeSet$Range) $r6;

        if r7 == null goto label2;

        $i3 = staticinvoke <kodkod.util.ints.IntTreeSet$Range: int access$1(kodkod.util.ints.IntTreeSet$Range)>(r10);

        $i4 = staticinvoke <kodkod.util.ints.IntTreeSet$Range: int access$1(kodkod.util.ints.IntTreeSet$Range)>(r7);

        if $i3 >= $i4 goto label3;

     label2:
        return 0;

     label3:
        $r8 = r2.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        $r9 = virtualinvoke $r8.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node successor(kodkod.util.ints.IntTree$Node)>(r10);

        r10 = (kodkod.util.ints.IntTreeSet$Range) $r9;

     label4:
        if r10 != null goto label1;

        return 1;

     label5:
        return 0;

     label6:
        $z1 = specialinvoke r1.<kodkod.util.ints.AbstractIntSet: boolean containsAll(kodkod.util.ints.IntCollection)>(r0);

        return $z1;
    }

    public void clear()
    {
        kodkod.util.ints.IntTreeSet r0;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.IntTreeSet;

        $r1 = r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        virtualinvoke $r1.<kodkod.util.ints.IntTree: void clear()>();

        r0.<kodkod.util.ints.IntTreeSet: int size> = 0;

        return;
    }

    public kodkod.util.ints.IntTreeSet clone()
    {
        kodkod.util.ints.IntTreeSet $r0, r1;

        r1 := @this: kodkod.util.ints.IntTreeSet;

        $r0 = new kodkod.util.ints.IntTreeSet;

        specialinvoke $r0.<kodkod.util.ints.IntTreeSet: void <init>(kodkod.util.ints.IntTreeSet)>(r1);

        return $r0;
    }

    public volatile kodkod.util.ints.IntSet clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.IntTreeSet r0, $r1;

        r0 := @this: kodkod.util.ints.IntTreeSet;

        $r1 = virtualinvoke r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTreeSet clone()>();

        return $r1;
    }

    static kodkod.util.ints.IntTree access$1(kodkod.util.ints.IntTreeSet)
    {
        kodkod.util.ints.IntTreeSet r0;
        kodkod.util.ints.IntTree $r1;

        r0 := @parameter0: kodkod.util.ints.IntTreeSet;

        $r1 = r0.<kodkod.util.ints.IntTreeSet: kodkod.util.ints.IntTree tree>;

        return $r1;
    }
}
