public class org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader extends org.apache.velocity.runtime.resource.loader.ResourceLoader
{
    static java.lang.Class class$org$apache$velocity$exception$ResourceNotFoundException;

    public void <init>()
    {
        org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader r0;

        r0 := @this: org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;

        specialinvoke r0.<org.apache.velocity.runtime.resource.loader.ResourceLoader: void <init>()>();

        return;
    }

    public void init(org.apache.commons.collections.ExtendedProperties)
    {
        org.apache.velocity.runtime.log.Log $r1, $r2;
        org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader r0;
        org.apache.commons.collections.ExtendedProperties r3;
        boolean $z0;

        r0 := @this: org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;

        r3 := @parameter0: org.apache.commons.collections.ExtendedProperties;

        $r1 = r0.<org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader: org.apache.velocity.runtime.log.Log log>;

        $z0 = virtualinvoke $r1.<org.apache.velocity.runtime.log.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader: org.apache.velocity.runtime.log.Log log>;

        virtualinvoke $r2.<org.apache.velocity.runtime.log.Log: void trace(java.lang.Object)>("ClasspathResourceLoader : initialization complete.");

     label1:
        return;
    }

    public java.io.InputStream getResourceStream(java.lang.String) throws org.apache.velocity.exception.ResourceNotFoundException
    {
        java.lang.Throwable $r16;
        org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader r1;
        java.lang.StringBuffer $r4, $r5, $r6, $r12, $r13, $r14;
        java.lang.String r0, $r7, $r15;
        boolean $z0;
        java.lang.Exception $r10;
        java.lang.Class $r2, $r11, $r18;
        org.apache.velocity.exception.ResourceNotFoundException $r8, $r9, $r17;
        java.io.InputStream $r3;

        r1 := @this: org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r9 = new org.apache.velocity.exception.ResourceNotFoundException;

        specialinvoke $r9.<org.apache.velocity.exception.ResourceNotFoundException: void <init>(java.lang.String)>("No template name provided");

        throw $r9;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.apache.velocity.util.ClassUtils: java.io.InputStream getResourceAsStream(java.lang.Class,java.lang.String)>($r2, r0);

     label2:
        goto label6;

     label3:
        $r10 := @caughtexception;

        $r11 = <org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader: java.lang.Class class$org$apache$velocity$exception$ResourceNotFoundException>;

        if $r11 != null goto label4;

        $r18 = staticinvoke <org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader: java.lang.Class class$(java.lang.String)>("org.apache.velocity.exception.ResourceNotFoundException");

        <org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader: java.lang.Class class$org$apache$velocity$exception$ResourceNotFoundException> = $r18;

        goto label5;

     label4:
        $r18 = <org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader: java.lang.Class class$org$apache$velocity$exception$ResourceNotFoundException>;

     label5:
        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("problem with template: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        $r16 = staticinvoke <org.apache.velocity.util.ExceptionUtils: java.lang.Throwable createWithCause(java.lang.Class,java.lang.String,java.lang.Throwable)>($r18, $r15, $r10);

        $r17 = (org.apache.velocity.exception.ResourceNotFoundException) $r16;

        throw $r17;

     label6:
        if $r3 != null goto label7;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ClasspathResourceLoader Error: cannot find resource ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = new org.apache.velocity.exception.ResourceNotFoundException;

        specialinvoke $r8.<org.apache.velocity.exception.ResourceNotFoundException: void <init>(java.lang.String)>($r7);

        throw $r8;

     label7:
        return $r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean isSourceModified(org.apache.velocity.runtime.resource.Resource)
    {
        org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader r0;
        org.apache.velocity.runtime.resource.Resource r1;

        r0 := @this: org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;

        r1 := @parameter0: org.apache.velocity.runtime.resource.Resource;

        return 0;
    }

    public long getLastModified(org.apache.velocity.runtime.resource.Resource)
    {
        org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader r0;
        org.apache.velocity.runtime.resource.Resource r1;

        r0 := @this: org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;

        r1 := @parameter0: org.apache.velocity.runtime.resource.Resource;

        return 0L;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
