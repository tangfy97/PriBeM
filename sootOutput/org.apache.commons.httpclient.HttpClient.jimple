public class org.apache.commons.httpclient.HttpClient extends java.lang.Object
{
    private static final org.apache.commons.logging.Log LOG;
    private org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager;
    private org.apache.commons.httpclient.HttpState state;
    private org.apache.commons.httpclient.params.HttpClientParams params;
    private org.apache.commons.httpclient.HostConfiguration hostConfiguration;
    static java.lang.Class class$org$apache$commons$httpclient$HttpClient;

    public void <init>()
    {
        org.apache.commons.httpclient.params.HttpClientParams $r1;
        org.apache.commons.httpclient.HttpClient r0;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 = new org.apache.commons.httpclient.params.HttpClientParams;

        specialinvoke $r1.<org.apache.commons.httpclient.params.HttpClientParams: void <init>()>();

        specialinvoke r0.<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.params.HttpClientParams)>($r1);

        return;
    }

    public void <init>(org.apache.commons.httpclient.params.HttpClientParams)
    {
        org.apache.commons.httpclient.HostConfiguration $r2;
        org.apache.commons.httpclient.HttpConnectionManager $r5, $r6, $r11, $r15;
        org.apache.commons.httpclient.HttpState $r1;
        org.apache.commons.httpclient.SimpleHttpConnectionManager $r9;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r7;
        org.apache.commons.httpclient.params.HttpClientParams r3, $r8;
        java.lang.IllegalArgumentException $r12;
        java.lang.Exception $r13;
        org.apache.commons.httpclient.HttpClient r0;
        java.lang.Class $r4;
        java.lang.Object $r10;
        org.apache.commons.logging.Log $r14;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        r3 := @parameter0: org.apache.commons.httpclient.params.HttpClientParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.httpclient.HttpState;

        specialinvoke $r1.<org.apache.commons.httpclient.HttpState: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpState state> = $r1;

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params> = null;

        $r2 = new org.apache.commons.httpclient.HostConfiguration;

        specialinvoke $r2.<org.apache.commons.httpclient.HostConfiguration: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HostConfiguration hostConfiguration> = $r2;

        if r3 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Params may not be null");

        throw $r12;

     label1:
        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params> = r3;

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager> = null;

        $r4 = virtualinvoke r3.<org.apache.commons.httpclient.params.HttpClientParams: java.lang.Class getConnectionManagerClass()>();

        if $r4 == null goto label5;

     label2:
        $r10 = virtualinvoke $r4.<java.lang.Class: java.lang.Object newInstance()>();

        $r11 = (org.apache.commons.httpclient.HttpConnectionManager) $r10;

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager> = $r11;

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        $r14 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Error instantiating connection manager class, defaulting to SimpleHttpConnectionManager", $r13);

     label5:
        $r15 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        if $r15 != null goto label6;

        $r9 = new org.apache.commons.httpclient.SimpleHttpConnectionManager;

        specialinvoke $r9.<org.apache.commons.httpclient.SimpleHttpConnectionManager: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager> = $r9;

     label6:
        $r5 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        if $r5 == null goto label7;

        $r6 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        $r7 = interfaceinvoke $r6.<org.apache.commons.httpclient.HttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams getParams()>();

        $r8 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        virtualinvoke $r7.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r8);

     label7:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void <init>(org.apache.commons.httpclient.params.HttpClientParams, org.apache.commons.httpclient.HttpConnectionManager)
    {
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r6;
        org.apache.commons.httpclient.params.HttpClientParams r4, $r7;
        java.lang.IllegalArgumentException $r8, $r9;
        org.apache.commons.httpclient.HostConfiguration $r2;
        org.apache.commons.httpclient.HttpConnectionManager r3, $r5;
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.HttpState $r1;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        r4 := @parameter0: org.apache.commons.httpclient.params.HttpClientParams;

        r3 := @parameter1: org.apache.commons.httpclient.HttpConnectionManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.httpclient.HttpState;

        specialinvoke $r1.<org.apache.commons.httpclient.HttpState: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpState state> = $r1;

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params> = null;

        $r2 = new org.apache.commons.httpclient.HostConfiguration;

        specialinvoke $r2.<org.apache.commons.httpclient.HostConfiguration: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HostConfiguration hostConfiguration> = $r2;

        if r3 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("httpConnectionManager cannot be null");

        throw $r9;

     label1:
        if r4 != null goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Params may not be null");

        throw $r8;

     label2:
        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params> = r4;

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager> = r3;

        $r5 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        $r6 = interfaceinvoke $r5.<org.apache.commons.httpclient.HttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams getParams()>();

        $r7 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        virtualinvoke $r6.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r7);

        return;
    }

    public void <init>(org.apache.commons.httpclient.HttpConnectionManager)
    {
        org.apache.commons.httpclient.params.HttpClientParams $r1;
        org.apache.commons.httpclient.HttpConnectionManager r2;
        org.apache.commons.httpclient.HttpClient r0;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        r2 := @parameter0: org.apache.commons.httpclient.HttpConnectionManager;

        $r1 = new org.apache.commons.httpclient.params.HttpClientParams;

        specialinvoke $r1.<org.apache.commons.httpclient.params.HttpClientParams: void <init>()>();

        specialinvoke r0.<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.params.HttpClientParams,org.apache.commons.httpclient.HttpConnectionManager)>($r1, r2);

        return;
    }

    public synchronized org.apache.commons.httpclient.HttpState getState()
    {
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.HttpState $r1;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpState state>;

        return $r1;
    }

    public synchronized void setState(org.apache.commons.httpclient.HttpState)
    {
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.HttpState r1;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        r1 := @parameter0: org.apache.commons.httpclient.HttpState;

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpState state> = r1;

        return;
    }

    public synchronized void setStrictMode(boolean)
    {
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.params.HttpClientParams $r1, $r2;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        virtualinvoke $r2.<org.apache.commons.httpclient.params.HttpClientParams: void makeStrict()>();

        goto label2;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpClientParams: void makeLenient()>();

     label2:
        return;
    }

    public synchronized boolean isStrictMode()
    {
        org.apache.commons.httpclient.HttpClient r0;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        return 0;
    }

    public synchronized void setTimeout(int)
    {
        int i0;
        org.apache.commons.httpclient.params.HttpClientParams $r1;
        org.apache.commons.httpclient.HttpClient r0;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpClientParams: void setSoTimeout(int)>(i0);

        return;
    }

    public synchronized void setHttpConnectionFactoryTimeout(long)
    {
        long l0;
        org.apache.commons.httpclient.params.HttpClientParams $r1;
        org.apache.commons.httpclient.HttpClient r0;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpClientParams: void setConnectionManagerTimeout(long)>(l0);

        return;
    }

    public synchronized void setConnectionTimeout(int)
    {
        org.apache.commons.httpclient.HttpConnectionManager $r1;
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r2;
        int i0;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        $r2 = interfaceinvoke $r1.<org.apache.commons.httpclient.HttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams getParams()>();

        virtualinvoke $r2.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setConnectionTimeout(int)>(i0);

        return;
    }

    public int executeMethod(org.apache.commons.httpclient.HttpMethod) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethod r2;
        org.apache.commons.httpclient.HttpClient r1;
        int $i0;
        org.apache.commons.logging.Log $r0;

        r1 := @this: org.apache.commons.httpclient.HttpClient;

        r2 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r0 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpClient.executeMethod(HttpMethod)");

        $i0 = virtualinvoke r1.<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>(null, r2, null);

        return $i0;
    }

    public int executeMethod(org.apache.commons.httpclient.HostConfiguration, org.apache.commons.httpclient.HttpMethod) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HostConfiguration r2;
        org.apache.commons.httpclient.HttpMethod r3;
        org.apache.commons.httpclient.HttpClient r1;
        int $i0;
        org.apache.commons.logging.Log $r0;

        r1 := @this: org.apache.commons.httpclient.HttpClient;

        r2 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        r3 := @parameter1: org.apache.commons.httpclient.HttpMethod;

        $r0 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpClient.executeMethod(HostConfiguration,HttpMethod)");

        $i0 = virtualinvoke r1.<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpState)>(r2, r3, null);

        return $i0;
    }

    public int executeMethod(org.apache.commons.httpclient.HostConfiguration, org.apache.commons.httpclient.HttpMethod, org.apache.commons.httpclient.HttpState) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodDirector $r6;
        org.apache.commons.httpclient.HostConfiguration $r3, $r10, $r11, r13;
        org.apache.commons.httpclient.HttpConnectionManager $r7;
        org.apache.commons.httpclient.HttpState r8, $r14;
        int $i0;
        boolean $z0, $z1;
        org.apache.commons.httpclient.params.HttpClientParams $r9;
        java.lang.IllegalArgumentException $r12;
        org.apache.commons.httpclient.HttpMethod r1;
        org.apache.commons.httpclient.HttpClient r2;
        org.apache.commons.logging.Log $r0;
        java.lang.Object $r5;
        org.apache.commons.httpclient.URI $r4;

        r2 := @this: org.apache.commons.httpclient.HttpClient;

        r13 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        r1 := @parameter1: org.apache.commons.httpclient.HttpMethod;

        r8 := @parameter2: org.apache.commons.httpclient.HttpState;

        $r0 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpClient.executeMethod(HostConfiguration,HttpMethod,HttpState)");

        if r1 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HttpMethod parameter may not be null");

        throw $r12;

     label1:
        $r3 = virtualinvoke r2.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HostConfiguration getHostConfiguration()>();

        if r13 != null goto label2;

        r13 = $r3;

     label2:
        $r4 = interfaceinvoke r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.URI getURI()>();

        if r13 == $r3 goto label3;

        $z1 = virtualinvoke $r4.<org.apache.commons.httpclient.URI: boolean isAbsoluteURI()>();

        if $z1 == 0 goto label4;

     label3:
        $r5 = virtualinvoke r13.<org.apache.commons.httpclient.HostConfiguration: java.lang.Object clone()>();

        $r11 = (org.apache.commons.httpclient.HostConfiguration) $r5;

        r13 = $r11;

        $z0 = virtualinvoke $r4.<org.apache.commons.httpclient.URI: boolean isAbsoluteURI()>();

        if $z0 == 0 goto label4;

        virtualinvoke $r11.<org.apache.commons.httpclient.HostConfiguration: void setHost(org.apache.commons.httpclient.URI)>($r4);

     label4:
        $r6 = new org.apache.commons.httpclient.HttpMethodDirector;

        $r7 = virtualinvoke r2.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager getHttpConnectionManager()>();

        $r10 = r13;

        $r9 = r2.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        if r8 != null goto label5;

        $r14 = virtualinvoke r2.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpState getState()>();

        goto label6;

     label5:
        $r14 = r8;

     label6:
        specialinvoke $r6.<org.apache.commons.httpclient.HttpMethodDirector: void <init>(org.apache.commons.httpclient.HttpConnectionManager,org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.params.HttpClientParams,org.apache.commons.httpclient.HttpState)>($r7, $r10, $r9, $r14);

        virtualinvoke $r6.<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)>(r1);

        $i0 = interfaceinvoke r1.<org.apache.commons.httpclient.HttpMethod: int getStatusCode()>();

        return $i0;
    }

    public java.lang.String getHost()
    {
        org.apache.commons.httpclient.HostConfiguration $r1;
        java.lang.String $r2;
        org.apache.commons.httpclient.HttpClient r0;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: java.lang.String getHost()>();

        return $r2;
    }

    public int getPort()
    {
        int $i0;
        org.apache.commons.httpclient.HostConfiguration $r1;
        org.apache.commons.httpclient.HttpClient r0;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.HostConfiguration: int getPort()>();

        return $i0;
    }

    public synchronized org.apache.commons.httpclient.HostConfiguration getHostConfiguration()
    {
        org.apache.commons.httpclient.HostConfiguration $r1;
        org.apache.commons.httpclient.HttpClient r0;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        return $r1;
    }

    public synchronized void setHostConfiguration(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.HostConfiguration r1;
        org.apache.commons.httpclient.HttpClient r0;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HostConfiguration hostConfiguration> = r1;

        return;
    }

    public synchronized org.apache.commons.httpclient.HttpConnectionManager getHttpConnectionManager()
    {
        org.apache.commons.httpclient.HttpConnectionManager $r1;
        org.apache.commons.httpclient.HttpClient r0;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        return $r1;
    }

    public synchronized void setHttpConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)
    {
        org.apache.commons.httpclient.HttpConnectionManager r1, $r2, $r3;
        org.apache.commons.httpclient.HttpClient r0;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r4;
        org.apache.commons.httpclient.params.HttpClientParams $r5;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        r1 := @parameter0: org.apache.commons.httpclient.HttpConnectionManager;

        r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager> = r1;

        $r2 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.httpclient.HttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams getParams()>();

        $r5 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        virtualinvoke $r4.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r5);

     label1:
        return;
    }

    public org.apache.commons.httpclient.params.HttpClientParams getParams()
    {
        org.apache.commons.httpclient.params.HttpClientParams $r1;
        org.apache.commons.httpclient.HttpClient r0;

        r0 := @this: org.apache.commons.httpclient.HttpClient;

        $r1 = r0.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params>;

        return $r1;
    }

    public void setParams(org.apache.commons.httpclient.params.HttpClientParams)
    {
        org.apache.commons.httpclient.params.HttpClientParams r0;
        java.lang.IllegalArgumentException $r2;
        org.apache.commons.httpclient.HttpClient r1;

        r1 := @this: org.apache.commons.httpclient.HttpClient;

        r0 := @parameter0: org.apache.commons.httpclient.params.HttpClientParams;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null");

        throw $r2;

     label1:
        r1.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.params.HttpClientParams params> = r0;

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.SecurityException $r51;
        boolean $z0;
        java.security.Provider r40;
        java.security.Provider[] $r39;
        java.lang.StringBuffer $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r41, $r44, $r45, $r46, $r47, $r49;
        int $i0, i1;
        java.lang.String $r6, $r8, $r12, $r14, $r18, $r20, $r24, $r26, $r30, $r32, $r36, $r38, $r43, $r48, $r50;
        double $d0;
        java.lang.Class $r0, $r52;
        org.apache.commons.logging.Log $r1, $r2, $r4, $r10, $r16, $r22, $r28, $r34, $r42;

        $r0 = <org.apache.commons.httpclient.HttpClient: java.lang.Class class$org$apache$commons$httpclient$HttpClient>;

        if $r0 != null goto label1;

        $r52 = staticinvoke <org.apache.commons.httpclient.HttpClient: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.HttpClient");

        <org.apache.commons.httpclient.HttpClient: java.lang.Class class$org$apache$commons$httpclient$HttpClient> = $r52;

        goto label2;

     label1:
        $r52 = <org.apache.commons.httpclient.HttpClient: java.lang.Class class$org$apache$commons$httpclient$HttpClient>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r52);

        <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG> = $r1;

        $r2 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label7;

     label3:
        $r4 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Java version: ");

        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r8);

        $r10 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Java vendor: ");

        $r12 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vendor");

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14);

        $r16 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Java class path: ");

        $r18 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r20);

        $r22 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Operating system name: ");

        $r24 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r26);

        $r28 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Operating system architecture: ");

        $r30 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.arch");

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32);

        $r34 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Operating system version: ");

        $r36 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.version");

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r34.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r38);

        $r39 = staticinvoke <java.security.Security: java.security.Provider[] getProviders()>();

        i1 = 0;

     label4:
        $i0 = lengthof $r39;

        if i1 >= $i0 goto label5;

        r40 = $r39[i1];

        $r42 = <org.apache.commons.httpclient.HttpClient: org.apache.commons.logging.Log LOG>;

        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r43 = virtualinvoke r40.<java.security.Provider: java.lang.String getName()>();

        $r44 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $d0 = virtualinvoke r40.<java.security.Provider: double getVersion()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r48 = virtualinvoke r40.<java.security.Provider: java.lang.String getInfo()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r42.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r50);

        i1 = i1 + 1;

        goto label4;

     label5:
        goto label7;

     label6:
        $r51 := @caughtexception;

     label7:
        return;

        catch java.lang.SecurityException from label3 to label5 with label6;
    }
}
