class org.apache.xmlbeans.impl.regex.Token extends java.lang.Object implements java.io.Serializable
{
    static final boolean COUNTTOKENS;
    static int tokens;
    static final int CHAR;
    static final int DOT;
    static final int CONCAT;
    static final int UNION;
    static final int CLOSURE;
    static final int RANGE;
    static final int NRANGE;
    static final int PAREN;
    static final int EMPTY;
    static final int ANCHOR;
    static final int NONGREEDYCLOSURE;
    static final int STRING;
    static final int BACKREFERENCE;
    static final int LOOKAHEAD;
    static final int NEGATIVELOOKAHEAD;
    static final int LOOKBEHIND;
    static final int NEGATIVELOOKBEHIND;
    static final int INDEPENDENT;
    static final int MODIFIERGROUP;
    static final int CONDITION;
    static final int UTF16_MAX;
    int type;
    static org.apache.xmlbeans.impl.regex.Token token_dot;
    static org.apache.xmlbeans.impl.regex.Token token_0to9;
    static org.apache.xmlbeans.impl.regex.Token token_wordchars;
    static org.apache.xmlbeans.impl.regex.Token token_not_0to9;
    static org.apache.xmlbeans.impl.regex.Token token_not_wordchars;
    static org.apache.xmlbeans.impl.regex.Token token_spaces;
    static org.apache.xmlbeans.impl.regex.Token token_not_spaces;
    static org.apache.xmlbeans.impl.regex.Token token_empty;
    static org.apache.xmlbeans.impl.regex.Token token_linebeginning;
    static org.apache.xmlbeans.impl.regex.Token token_linebeginning2;
    static org.apache.xmlbeans.impl.regex.Token token_lineend;
    static org.apache.xmlbeans.impl.regex.Token token_stringbeginning;
    static org.apache.xmlbeans.impl.regex.Token token_stringend;
    static org.apache.xmlbeans.impl.regex.Token token_stringend2;
    static org.apache.xmlbeans.impl.regex.Token token_wordedge;
    static org.apache.xmlbeans.impl.regex.Token token_not_wordedge;
    static org.apache.xmlbeans.impl.regex.Token token_wordbeginning;
    static org.apache.xmlbeans.impl.regex.Token token_wordend;
    static final int FC_CONTINUE;
    static final int FC_TERMINAL;
    static final int FC_ANY;
    private static final java.util.Hashtable categories;
    private static final java.util.Hashtable categories2;
    private static final java.lang.String[] categoryNames;
    static final int CHAR_INIT_QUOTE;
    static final int CHAR_FINAL_QUOTE;
    static final int CHAR_LETTER;
    static final int CHAR_MARK;
    static final int CHAR_NUMBER;
    static final int CHAR_SEPARATOR;
    static final int CHAR_OTHER;
    static final int CHAR_PUNCTUATION;
    static final int CHAR_SYMBOL;
    private static final java.lang.String[] blockNames;
    static final java.lang.String blockRanges;
    static final int[] nonBMPBlockRanges;
    private static final int NONBMP_BLOCK_START;
    static java.util.Hashtable nonxs;
    static final java.lang.String viramaString;
    private static org.apache.xmlbeans.impl.regex.Token token_grapheme;
    private static org.apache.xmlbeans.impl.regex.Token token_ccs;

    static org.apache.xmlbeans.impl.regex.Token$ParenToken createLook(int, org.apache.xmlbeans.impl.regex.Token)
    {
        org.apache.xmlbeans.impl.regex.Token r1;
        int $i0, $i1, i2;
        org.apache.xmlbeans.impl.regex.Token$ParenToken $r0;

        i2 := @parameter0: int;

        r1 := @parameter1: org.apache.xmlbeans.impl.regex.Token;

        $i0 = <org.apache.xmlbeans.impl.regex.Token: int tokens>;

        $i1 = $i0 + 1;

        <org.apache.xmlbeans.impl.regex.Token: int tokens> = $i1;

        $r0 = new org.apache.xmlbeans.impl.regex.Token$ParenToken;

        specialinvoke $r0.<org.apache.xmlbeans.impl.regex.Token$ParenToken: void <init>(int,org.apache.xmlbeans.impl.regex.Token,int)>(i2, r1, 0);

        return $r0;
    }

    static org.apache.xmlbeans.impl.regex.Token$ParenToken createParen(org.apache.xmlbeans.impl.regex.Token, int)
    {
        org.apache.xmlbeans.impl.regex.Token r1;
        int $i0, $i1, i2;
        org.apache.xmlbeans.impl.regex.Token$ParenToken $r0;

        r1 := @parameter0: org.apache.xmlbeans.impl.regex.Token;

        i2 := @parameter1: int;

        $i0 = <org.apache.xmlbeans.impl.regex.Token: int tokens>;

        $i1 = $i0 + 1;

        <org.apache.xmlbeans.impl.regex.Token: int tokens> = $i1;

        $r0 = new org.apache.xmlbeans.impl.regex.Token$ParenToken;

        specialinvoke $r0.<org.apache.xmlbeans.impl.regex.Token$ParenToken: void <init>(int,org.apache.xmlbeans.impl.regex.Token,int)>(6, r1, i2);

        return $r0;
    }

    static org.apache.xmlbeans.impl.regex.Token$ClosureToken createClosure(org.apache.xmlbeans.impl.regex.Token)
    {
        org.apache.xmlbeans.impl.regex.Token r1;
        int $i0, $i1;
        org.apache.xmlbeans.impl.regex.Token$ClosureToken $r0;

        r1 := @parameter0: org.apache.xmlbeans.impl.regex.Token;

        $i0 = <org.apache.xmlbeans.impl.regex.Token: int tokens>;

        $i1 = $i0 + 1;

        <org.apache.xmlbeans.impl.regex.Token: int tokens> = $i1;

        $r0 = new org.apache.xmlbeans.impl.regex.Token$ClosureToken;

        specialinvoke $r0.<org.apache.xmlbeans.impl.regex.Token$ClosureToken: void <init>(int,org.apache.xmlbeans.impl.regex.Token)>(3, r1);

        return $r0;
    }

    static org.apache.xmlbeans.impl.regex.Token$ClosureToken createNGClosure(org.apache.xmlbeans.impl.regex.Token)
    {
        org.apache.xmlbeans.impl.regex.Token r1;
        int $i0, $i1;
        org.apache.xmlbeans.impl.regex.Token$ClosureToken $r0;

        r1 := @parameter0: org.apache.xmlbeans.impl.regex.Token;

        $i0 = <org.apache.xmlbeans.impl.regex.Token: int tokens>;

        $i1 = $i0 + 1;

        <org.apache.xmlbeans.impl.regex.Token: int tokens> = $i1;

        $r0 = new org.apache.xmlbeans.impl.regex.Token$ClosureToken;

        specialinvoke $r0.<org.apache.xmlbeans.impl.regex.Token$ClosureToken: void <init>(int,org.apache.xmlbeans.impl.regex.Token)>(9, r1);

        return $r0;
    }

    static org.apache.xmlbeans.impl.regex.Token$ConcatToken createConcat(org.apache.xmlbeans.impl.regex.Token, org.apache.xmlbeans.impl.regex.Token)
    {
        org.apache.xmlbeans.impl.regex.Token$ConcatToken $r0;
        org.apache.xmlbeans.impl.regex.Token r1, r2;
        int $i0, $i1;

        r1 := @parameter0: org.apache.xmlbeans.impl.regex.Token;

        r2 := @parameter1: org.apache.xmlbeans.impl.regex.Token;

        $i0 = <org.apache.xmlbeans.impl.regex.Token: int tokens>;

        $i1 = $i0 + 1;

        <org.apache.xmlbeans.impl.regex.Token: int tokens> = $i1;

        $r0 = new org.apache.xmlbeans.impl.regex.Token$ConcatToken;

        specialinvoke $r0.<org.apache.xmlbeans.impl.regex.Token$ConcatToken: void <init>(org.apache.xmlbeans.impl.regex.Token,org.apache.xmlbeans.impl.regex.Token)>(r1, r2);

        return $r0;
    }

    static org.apache.xmlbeans.impl.regex.Token$UnionToken createConcat()
    {
        int $i0, $i1;
        org.apache.xmlbeans.impl.regex.Token$UnionToken $r0;

        $i0 = <org.apache.xmlbeans.impl.regex.Token: int tokens>;

        $i1 = $i0 + 1;

        <org.apache.xmlbeans.impl.regex.Token: int tokens> = $i1;

        $r0 = new org.apache.xmlbeans.impl.regex.Token$UnionToken;

        specialinvoke $r0.<org.apache.xmlbeans.impl.regex.Token$UnionToken: void <init>(int)>(1);

        return $r0;
    }

    static org.apache.xmlbeans.impl.regex.Token$UnionToken createUnion()
    {
        int $i0, $i1;
        org.apache.xmlbeans.impl.regex.Token$UnionToken $r0;

        $i0 = <org.apache.xmlbeans.impl.regex.Token: int tokens>;

        $i1 = $i0 + 1;

        <org.apache.xmlbeans.impl.regex.Token: int tokens> = $i1;

        $r0 = new org.apache.xmlbeans.impl.regex.Token$UnionToken;

        specialinvoke $r0.<org.apache.xmlbeans.impl.regex.Token$UnionToken: void <init>(int)>(2);

        return $r0;
    }

    static org.apache.xmlbeans.impl.regex.Token createEmpty()
    {
        org.apache.xmlbeans.impl.regex.Token $r0;

        $r0 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_empty>;

        return $r0;
    }

    static org.apache.xmlbeans.impl.regex.RangeToken createRange()
    {
        int $i0, $i1;
        org.apache.xmlbeans.impl.regex.RangeToken $r0;

        $i0 = <org.apache.xmlbeans.impl.regex.Token: int tokens>;

        $i1 = $i0 + 1;

        <org.apache.xmlbeans.impl.regex.Token: int tokens> = $i1;

        $r0 = new org.apache.xmlbeans.impl.regex.RangeToken;

        specialinvoke $r0.<org.apache.xmlbeans.impl.regex.RangeToken: void <init>(int)>(4);

        return $r0;
    }

    static org.apache.xmlbeans.impl.regex.RangeToken createNRange()
    {
        int $i0, $i1;
        org.apache.xmlbeans.impl.regex.RangeToken $r0;

        $i0 = <org.apache.xmlbeans.impl.regex.Token: int tokens>;

        $i1 = $i0 + 1;

        <org.apache.xmlbeans.impl.regex.Token: int tokens> = $i1;

        $r0 = new org.apache.xmlbeans.impl.regex.RangeToken;

        specialinvoke $r0.<org.apache.xmlbeans.impl.regex.RangeToken: void <init>(int)>(5);

        return $r0;
    }

    static org.apache.xmlbeans.impl.regex.Token$CharToken createChar(int)
    {
        int $i0, $i1, i2;
        org.apache.xmlbeans.impl.regex.Token$CharToken $r0;

        i2 := @parameter0: int;

        $i0 = <org.apache.xmlbeans.impl.regex.Token: int tokens>;

        $i1 = $i0 + 1;

        <org.apache.xmlbeans.impl.regex.Token: int tokens> = $i1;

        $r0 = new org.apache.xmlbeans.impl.regex.Token$CharToken;

        specialinvoke $r0.<org.apache.xmlbeans.impl.regex.Token$CharToken: void <init>(int,int)>(0, i2);

        return $r0;
    }

    private static org.apache.xmlbeans.impl.regex.Token$CharToken createAnchor(int)
    {
        int $i0, $i1, i2;
        org.apache.xmlbeans.impl.regex.Token$CharToken $r0;

        i2 := @parameter0: int;

        $i0 = <org.apache.xmlbeans.impl.regex.Token: int tokens>;

        $i1 = $i0 + 1;

        <org.apache.xmlbeans.impl.regex.Token: int tokens> = $i1;

        $r0 = new org.apache.xmlbeans.impl.regex.Token$CharToken;

        specialinvoke $r0.<org.apache.xmlbeans.impl.regex.Token$CharToken: void <init>(int,int)>(8, i2);

        return $r0;
    }

    static org.apache.xmlbeans.impl.regex.Token$StringToken createBackReference(int)
    {
        org.apache.xmlbeans.impl.regex.Token$StringToken $r0;
        int $i0, $i1, i2;

        i2 := @parameter0: int;

        $i0 = <org.apache.xmlbeans.impl.regex.Token: int tokens>;

        $i1 = $i0 + 1;

        <org.apache.xmlbeans.impl.regex.Token: int tokens> = $i1;

        $r0 = new org.apache.xmlbeans.impl.regex.Token$StringToken;

        specialinvoke $r0.<org.apache.xmlbeans.impl.regex.Token$StringToken: void <init>(int,java.lang.String,int)>(12, null, i2);

        return $r0;
    }

    static org.apache.xmlbeans.impl.regex.Token$StringToken createString(java.lang.String)
    {
        org.apache.xmlbeans.impl.regex.Token$StringToken $r0;
        int $i0, $i1;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $i0 = <org.apache.xmlbeans.impl.regex.Token: int tokens>;

        $i1 = $i0 + 1;

        <org.apache.xmlbeans.impl.regex.Token: int tokens> = $i1;

        $r0 = new org.apache.xmlbeans.impl.regex.Token$StringToken;

        specialinvoke $r0.<org.apache.xmlbeans.impl.regex.Token$StringToken: void <init>(int,java.lang.String,int)>(10, r1, 0);

        return $r0;
    }

    static org.apache.xmlbeans.impl.regex.Token$ModifierToken createModifierGroup(org.apache.xmlbeans.impl.regex.Token, int, int)
    {
        org.apache.xmlbeans.impl.regex.Token r1;
        int $i0, $i1, i2, i3;
        org.apache.xmlbeans.impl.regex.Token$ModifierToken $r0;

        r1 := @parameter0: org.apache.xmlbeans.impl.regex.Token;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $i0 = <org.apache.xmlbeans.impl.regex.Token: int tokens>;

        $i1 = $i0 + 1;

        <org.apache.xmlbeans.impl.regex.Token: int tokens> = $i1;

        $r0 = new org.apache.xmlbeans.impl.regex.Token$ModifierToken;

        specialinvoke $r0.<org.apache.xmlbeans.impl.regex.Token$ModifierToken: void <init>(org.apache.xmlbeans.impl.regex.Token,int,int)>(r1, i2, i3);

        return $r0;
    }

    static org.apache.xmlbeans.impl.regex.Token$ConditionToken createCondition(int, org.apache.xmlbeans.impl.regex.Token, org.apache.xmlbeans.impl.regex.Token, org.apache.xmlbeans.impl.regex.Token)
    {
        org.apache.xmlbeans.impl.regex.Token r1, r2, r3;
        int $i0, $i1, i2;
        org.apache.xmlbeans.impl.regex.Token$ConditionToken $r0;

        i2 := @parameter0: int;

        r1 := @parameter1: org.apache.xmlbeans.impl.regex.Token;

        r2 := @parameter2: org.apache.xmlbeans.impl.regex.Token;

        r3 := @parameter3: org.apache.xmlbeans.impl.regex.Token;

        $i0 = <org.apache.xmlbeans.impl.regex.Token: int tokens>;

        $i1 = $i0 + 1;

        <org.apache.xmlbeans.impl.regex.Token: int tokens> = $i1;

        $r0 = new org.apache.xmlbeans.impl.regex.Token$ConditionToken;

        specialinvoke $r0.<org.apache.xmlbeans.impl.regex.Token$ConditionToken: void <init>(int,org.apache.xmlbeans.impl.regex.Token,org.apache.xmlbeans.impl.regex.Token,org.apache.xmlbeans.impl.regex.Token)>(i2, r1, r2, r3);

        return $r0;
    }

    protected void <init>(int)
    {
        int i0;
        org.apache.xmlbeans.impl.regex.Token r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.Token;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xmlbeans.impl.regex.Token: int type> = i0;

        return;
    }

    int size()
    {
        org.apache.xmlbeans.impl.regex.Token r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.Token;

        return 0;
    }

    org.apache.xmlbeans.impl.regex.Token getChild(int)
    {
        int i0;
        org.apache.xmlbeans.impl.regex.Token r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.Token;

        i0 := @parameter0: int;

        return null;
    }

    void addChild(org.apache.xmlbeans.impl.regex.Token)
    {
        java.lang.RuntimeException $r0;
        org.apache.xmlbeans.impl.regex.Token r1, r2;

        r1 := @this: org.apache.xmlbeans.impl.regex.Token;

        r2 := @parameter0: org.apache.xmlbeans.impl.regex.Token;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported.");

        throw $r0;
    }

    protected void addRange(int, int)
    {
        org.apache.xmlbeans.impl.regex.Token r1;
        int i0, i1;
        java.lang.RuntimeException $r0;

        r1 := @this: org.apache.xmlbeans.impl.regex.Token;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported.");

        throw $r0;
    }

    protected void sortRanges()
    {
        java.lang.RuntimeException $r0;
        org.apache.xmlbeans.impl.regex.Token r1;

        r1 := @this: org.apache.xmlbeans.impl.regex.Token;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported.");

        throw $r0;
    }

    protected void compactRanges()
    {
        java.lang.RuntimeException $r0;
        org.apache.xmlbeans.impl.regex.Token r1;

        r1 := @this: org.apache.xmlbeans.impl.regex.Token;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported.");

        throw $r0;
    }

    protected void mergeRanges(org.apache.xmlbeans.impl.regex.Token)
    {
        java.lang.RuntimeException $r0;
        org.apache.xmlbeans.impl.regex.Token r1, r2;

        r1 := @this: org.apache.xmlbeans.impl.regex.Token;

        r2 := @parameter0: org.apache.xmlbeans.impl.regex.Token;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported.");

        throw $r0;
    }

    protected void subtractRanges(org.apache.xmlbeans.impl.regex.Token)
    {
        java.lang.RuntimeException $r0;
        org.apache.xmlbeans.impl.regex.Token r1, r2;

        r1 := @this: org.apache.xmlbeans.impl.regex.Token;

        r2 := @parameter0: org.apache.xmlbeans.impl.regex.Token;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported.");

        throw $r0;
    }

    protected void intersectRanges(org.apache.xmlbeans.impl.regex.Token)
    {
        java.lang.RuntimeException $r0;
        org.apache.xmlbeans.impl.regex.Token r1, r2;

        r1 := @this: org.apache.xmlbeans.impl.regex.Token;

        r2 := @parameter0: org.apache.xmlbeans.impl.regex.Token;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported.");

        throw $r0;
    }

    static org.apache.xmlbeans.impl.regex.Token complementRanges(org.apache.xmlbeans.impl.regex.Token)
    {
        org.apache.xmlbeans.impl.regex.Token r0, $r1;

        r0 := @parameter0: org.apache.xmlbeans.impl.regex.Token;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.regex.RangeToken: org.apache.xmlbeans.impl.regex.Token complementRanges(org.apache.xmlbeans.impl.regex.Token)>(r0);

        return $r1;
    }

    void setMin(int)
    {
        int i0;
        org.apache.xmlbeans.impl.regex.Token r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.Token;

        i0 := @parameter0: int;

        return;
    }

    void setMax(int)
    {
        int i0;
        org.apache.xmlbeans.impl.regex.Token r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.Token;

        i0 := @parameter0: int;

        return;
    }

    int getMin()
    {
        int $i1;
        org.apache.xmlbeans.impl.regex.Token r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.Token;

        $i1 = (int) -1;

        return $i1;
    }

    int getMax()
    {
        int $i1;
        org.apache.xmlbeans.impl.regex.Token r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.Token;

        $i1 = (int) -1;

        return $i1;
    }

    int getReferenceNumber()
    {
        org.apache.xmlbeans.impl.regex.Token r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.Token;

        return 0;
    }

    java.lang.String getString()
    {
        org.apache.xmlbeans.impl.regex.Token r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.Token;

        return null;
    }

    int getParenNumber()
    {
        org.apache.xmlbeans.impl.regex.Token r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.Token;

        return 0;
    }

    int getChar()
    {
        int $i1;
        org.apache.xmlbeans.impl.regex.Token r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.Token;

        $i1 = (int) -1;

        return $i1;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.apache.xmlbeans.impl.regex.Token r0;

        r0 := @this: org.apache.xmlbeans.impl.regex.Token;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: java.lang.String toString(int)>(0);

        return $r1;
    }

    public java.lang.String toString(int)
    {
        org.apache.xmlbeans.impl.regex.Token r0;
        int $i0, i1;
        java.lang.String $r1;

        r0 := @this: org.apache.xmlbeans.impl.regex.Token;

        i1 := @parameter0: int;

        $i0 = r0.<org.apache.xmlbeans.impl.regex.Token: int type>;

        if $i0 != 11 goto label1;

        $r1 = ".";

        goto label2;

     label1:
        $r1 = "";

     label2:
        return $r1;
    }

    final int getMinLength()
    {
        org.apache.xmlbeans.impl.regex.Token r0, $r2, $r3, $r4, $r5, $r6;
        java.lang.StringBuffer $r8, $r9, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16;
        java.lang.String $r1, $r11;
        java.lang.RuntimeException $r7;

        r0 := @this: org.apache.xmlbeans.impl.regex.Token;

        $i0 = r0.<org.apache.xmlbeans.impl.regex.Token: int type>;

        tableswitch($i0)
        {
            case 0: goto label12;
            case 1: goto label01;
            case 2: goto label04;
            case 3: goto label09;
            case 4: goto label12;
            case 5: goto label12;
            case 6: goto label13;
            case 7: goto label11;
            case 8: goto label11;
            case 9: goto label09;
            case 10: goto label15;
            case 11: goto label12;
            case 12: goto label14;
            case 13: goto label17;
            case 14: goto label17;
            case 15: goto label17;
            case 16: goto label17;
            case 17: goto label17;
            case 18: goto label17;
            case 19: goto label17;
            case 20: goto label16;
            case 21: goto label16;
            case 22: goto label16;
            case 23: goto label16;
            case 24: goto label13;
            case 25: goto label13;
            case 26: goto label04;
            default: goto label17;
        };

     label01:
        i13 = 0;

        i14 = 0;

     label02:
        $i10 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: int size()>();

        if i14 >= $i10 goto label03;

        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(i14);

        $i11 = virtualinvoke $r6.<org.apache.xmlbeans.impl.regex.Token: int getMinLength()>();

        i13 = i13 + $i11;

        i14 = i14 + 1;

        goto label02;

     label03:
        return i13;

     label04:
        $i7 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: int size()>();

        if $i7 != 0 goto label05;

        return 0;

     label05:
        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(0);

        i15 = virtualinvoke $r4.<org.apache.xmlbeans.impl.regex.Token: int getMinLength()>();

        i16 = 1;

     label06:
        $i8 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: int size()>();

        if i16 >= $i8 goto label08;

        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(i16);

        $i9 = virtualinvoke $r5.<org.apache.xmlbeans.impl.regex.Token: int getMinLength()>();

        if $i9 >= i15 goto label07;

        i15 = $i9;

     label07:
        i16 = i16 + 1;

        goto label06;

     label08:
        return i15;

     label09:
        $i3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: int getMin()>();

        if $i3 < 0 goto label10;

        $i4 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: int getMin()>();

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(0);

        $i5 = virtualinvoke $r3.<org.apache.xmlbeans.impl.regex.Token: int getMinLength()>();

        $i6 = $i4 * $i5;

        return $i6;

     label10:
        return 0;

     label11:
        return 0;

     label12:
        return 1;

     label13:
        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(0);

        $i2 = virtualinvoke $r2.<org.apache.xmlbeans.impl.regex.Token: int getMinLength()>();

        return $i2;

     label14:
        return 0;

     label15:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: java.lang.String getString()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        return $i1;

     label16:
        return 0;

     label17:
        $r7 = new java.lang.RuntimeException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Token#getMinLength(): Invalid Type: ");

        $i12 = r0.<org.apache.xmlbeans.impl.regex.Token: int type>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i12);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r7;
    }

    final int getMaxLength()
    {
        org.apache.xmlbeans.impl.regex.Token r0, $r2, $r3, $r4, $r5, $r6;
        java.lang.StringBuffer $r9, $r10, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, $i18, $i20, $i22, $i24;
        java.lang.String $r1, $r11;
        java.lang.RuntimeException $r13;

        r0 := @this: org.apache.xmlbeans.impl.regex.Token;

        $i0 = r0.<org.apache.xmlbeans.impl.regex.Token: int type>;

        tableswitch($i0)
        {
            case 0: goto label14;
            case 1: goto label01;
            case 2: goto label05;
            case 3: goto label11;
            case 4: goto label15;
            case 5: goto label15;
            case 6: goto label16;
            case 7: goto label13;
            case 8: goto label13;
            case 9: goto label11;
            case 10: goto label18;
            case 11: goto label15;
            case 12: goto label17;
            case 13: goto label20;
            case 14: goto label20;
            case 15: goto label20;
            case 16: goto label20;
            case 17: goto label20;
            case 18: goto label20;
            case 19: goto label20;
            case 20: goto label19;
            case 21: goto label19;
            case 22: goto label19;
            case 23: goto label19;
            case 24: goto label16;
            case 25: goto label16;
            case 26: goto label05;
            default: goto label20;
        };

     label01:
        i13 = 0;

        i14 = 0;

     label02:
        $i10 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: int size()>();

        if i14 >= $i10 goto label04;

        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(i14);

        $i11 = virtualinvoke $r6.<org.apache.xmlbeans.impl.regex.Token: int getMaxLength()>();

        if $i11 >= 0 goto label03;

        $i18 = (int) -1;

        return $i18;

     label03:
        i13 = i13 + $i11;

        i14 = i14 + 1;

        goto label02;

     label04:
        return i13;

     label05:
        $i7 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: int size()>();

        if $i7 != 0 goto label06;

        return 0;

     label06:
        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(0);

        i15 = virtualinvoke $r4.<org.apache.xmlbeans.impl.regex.Token: int getMaxLength()>();

        i16 = 1;

     label07:
        if i15 < 0 goto label10;

        $i8 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: int size()>();

        if i16 >= $i8 goto label10;

        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(i16);

        $i9 = virtualinvoke $r5.<org.apache.xmlbeans.impl.regex.Token: int getMaxLength()>();

        if $i9 >= 0 goto label08;

        $i20 = (int) -1;

        i15 = $i20;

        goto label10;

     label08:
        if $i9 <= i15 goto label09;

        i15 = $i9;

     label09:
        i16 = i16 + 1;

        goto label07;

     label10:
        return i15;

     label11:
        $i3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: int getMax()>();

        if $i3 < 0 goto label12;

        $i4 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: int getMax()>();

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(0);

        $i5 = virtualinvoke $r3.<org.apache.xmlbeans.impl.regex.Token: int getMaxLength()>();

        $i6 = $i4 * $i5;

        return $i6;

     label12:
        $i22 = (int) -1;

        return $i22;

     label13:
        return 0;

     label14:
        return 1;

     label15:
        return 2;

     label16:
        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(0);

        $i2 = virtualinvoke $r2.<org.apache.xmlbeans.impl.regex.Token: int getMaxLength()>();

        return $i2;

     label17:
        $i24 = (int) -1;

        return $i24;

     label18:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: java.lang.String getString()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        return $i1;

     label19:
        return 0;

     label20:
        $r13 = new java.lang.RuntimeException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Token#getMaxLength(): Invalid Type: ");

        $i12 = r0.<org.apache.xmlbeans.impl.regex.Token: int type>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i12);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r13;
    }

    private static final boolean isSet(int, int)
    {
        int i0, i1, $i2;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 & i1;

        if $i2 != i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    final int analyzeFirstCharacter(org.apache.xmlbeans.impl.regex.RangeToken, int)
    {
        byte $b33;
        org.apache.xmlbeans.impl.regex.Token r0, $r1, $r3, $r6, $r10, $r11, $r14, $r17, $r18, $r19;
        java.lang.StringBuffer $r22, $r23, $r25;
        java.lang.String $r7, $r8, $r9, $r24;
        java.lang.RuntimeException $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        org.apache.xmlbeans.impl.regex.RangeToken r2, $r12, $r13, $r15, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i26, i27, i28, i29, i30, i31, $i32, i34, i35, i36, $i37, $i38, $i39, $i40, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51;
        char $c8, $c9, $c10, $c11, $c12, $c14, $c22, $c23, $c24, $c25;
        org.apache.xmlbeans.impl.regex.Token$ModifierToken $r4, $r5;

        r0 := @this: org.apache.xmlbeans.impl.regex.Token;

        r2 := @parameter0: org.apache.xmlbeans.impl.regex.RangeToken;

        i27 := @parameter1: int;

        $i0 = r0.<org.apache.xmlbeans.impl.regex.Token: int type>;

        tableswitch($i0)
        {
            case 0: goto label22;
            case 1: goto label01;
            case 2: goto label05;
            case 3: goto label20;
            case 4: goto label26;
            case 5: goto label29;
            case 6: goto label32;
            case 7: goto label21;
            case 8: goto label21;
            case 9: goto label20;
            case 10: goto label35;
            case 11: goto label24;
            case 12: goto label34;
            case 13: goto label39;
            case 14: goto label39;
            case 15: goto label39;
            case 16: goto label39;
            case 17: goto label39;
            case 18: goto label39;
            case 19: goto label39;
            case 20: goto label38;
            case 21: goto label38;
            case 22: goto label38;
            case 23: goto label38;
            case 24: goto label32;
            case 25: goto label33;
            case 26: goto label13;
            default: goto label39;
        };

     label01:
        i28 = 0;

        i29 = 0;

     label02:
        $i19 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: int size()>();

        if i29 >= $i19 goto label04;

        $r19 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(i29);

        $i20 = virtualinvoke $r19.<org.apache.xmlbeans.impl.regex.Token: int analyzeFirstCharacter(org.apache.xmlbeans.impl.regex.RangeToken,int)>(r2, i27);

        i28 = $i20;

        if $i20 == 0 goto label03;

        goto label04;

     label03:
        i29 = i29 + 1;

        goto label02;

     label04:
        return i28;

     label05:
        $i16 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: int size()>();

        if $i16 != 0 goto label06;

        return 0;

     label06:
        i30 = 0;

        z7 = 0;

        i31 = 0;

     label07:
        $i17 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: int size()>();

        if i31 >= $i17 goto label10;

        $r18 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(i31);

        $i18 = virtualinvoke $r18.<org.apache.xmlbeans.impl.regex.Token: int analyzeFirstCharacter(org.apache.xmlbeans.impl.regex.RangeToken,int)>(r2, i27);

        i30 = $i18;

        if $i18 != 2 goto label08;

        goto label10;

     label08:
        if $i18 != 0 goto label09;

        z7 = 1;

     label09:
        i31 = i31 + 1;

        goto label07;

     label10:
        if z7 == 0 goto label11;

        $i32 = 0;

        goto label12;

     label11:
        $i32 = i30;

     label12:
        return $i32;

     label13:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(0);

        $i1 = virtualinvoke $r1.<org.apache.xmlbeans.impl.regex.Token: int analyzeFirstCharacter(org.apache.xmlbeans.impl.regex.RangeToken,int)>(r2, i27);

        $i2 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: int size()>();

        if $i2 != 1 goto label14;

        return 0;

     label14:
        if $i1 != 2 goto label15;

        return $i1;

     label15:
        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(1);

        $i3 = virtualinvoke $r3.<org.apache.xmlbeans.impl.regex.Token: int analyzeFirstCharacter(org.apache.xmlbeans.impl.regex.RangeToken,int)>(r2, i27);

        if $i3 != 2 goto label16;

        return $i3;

     label16:
        if $i1 == 0 goto label17;

        if $i3 != 0 goto label18;

     label17:
        $b33 = 0;

        goto label19;

     label18:
        $b33 = 1;

     label19:
        return $b33;

     label20:
        $r17 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(0);

        virtualinvoke $r17.<org.apache.xmlbeans.impl.regex.Token: int analyzeFirstCharacter(org.apache.xmlbeans.impl.regex.RangeToken,int)>(r2, i27);

        return 0;

     label21:
        return 0;

     label22:
        $i21 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: int getChar()>();

        virtualinvoke r2.<org.apache.xmlbeans.impl.regex.RangeToken: void addRange(int,int)>($i21, $i21);

        if $i21 >= 65536 goto label23;

        $z6 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: boolean isSet(int,int)>(i27, 2);

        if $z6 == 0 goto label23;

        $c22 = (char) $i21;

        $c23 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c22);

        $i37 = (int) $c23;

        $i38 = (int) $c23;

        virtualinvoke r2.<org.apache.xmlbeans.impl.regex.RangeToken: void addRange(int,int)>($i37, $i38);

        $c24 = (char) $c23;

        $c25 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c24);

        $i39 = (int) $c25;

        $i40 = (int) $c25;

        virtualinvoke r2.<org.apache.xmlbeans.impl.regex.RangeToken: void addRange(int,int)>($i39, $i40);

     label23:
        return 1;

     label24:
        $z0 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: boolean isSet(int,int)>(i27, 4);

        if $z0 == 0 goto label25;

        return 0;

     label25:
        return 0;

     label26:
        $z5 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: boolean isSet(int,int)>(i27, 2);

        if $z5 == 0 goto label27;

        $r15 = (org.apache.xmlbeans.impl.regex.RangeToken) r0;

        $r16 = virtualinvoke $r15.<org.apache.xmlbeans.impl.regex.RangeToken: org.apache.xmlbeans.impl.regex.RangeToken getCaseInsensitiveToken()>();

        virtualinvoke r2.<org.apache.xmlbeans.impl.regex.RangeToken: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r16);

        goto label28;

     label27:
        virtualinvoke r2.<org.apache.xmlbeans.impl.regex.RangeToken: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>(r0);

     label28:
        return 1;

     label29:
        $z4 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: boolean isSet(int,int)>(i27, 2);

        if $z4 == 0 goto label30;

        $r12 = (org.apache.xmlbeans.impl.regex.RangeToken) r0;

        $r13 = virtualinvoke $r12.<org.apache.xmlbeans.impl.regex.RangeToken: org.apache.xmlbeans.impl.regex.RangeToken getCaseInsensitiveToken()>();

        $r14 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token complementRanges(org.apache.xmlbeans.impl.regex.Token)>($r13);

        virtualinvoke r2.<org.apache.xmlbeans.impl.regex.RangeToken: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r14);

        goto label31;

     label30:
        $r11 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token complementRanges(org.apache.xmlbeans.impl.regex.Token)>(r0);

        virtualinvoke r2.<org.apache.xmlbeans.impl.regex.RangeToken: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r11);

     label31:
        return 1;

     label32:
        $r10 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(0);

        $i15 = virtualinvoke $r10.<org.apache.xmlbeans.impl.regex.Token: int analyzeFirstCharacter(org.apache.xmlbeans.impl.regex.RangeToken,int)>(r2, i27);

        return $i15;

     label33:
        $r4 = (org.apache.xmlbeans.impl.regex.Token$ModifierToken) r0;

        $i4 = virtualinvoke $r4.<org.apache.xmlbeans.impl.regex.Token$ModifierToken: int getOptions()>();

        i34 = i27 | $i4;

        $r5 = (org.apache.xmlbeans.impl.regex.Token$ModifierToken) r0;

        $i5 = virtualinvoke $r5.<org.apache.xmlbeans.impl.regex.Token$ModifierToken: int getOptionsMask()>();

        $i42 = (int) -1;

        $i6 = $i5 ^ $i42;

        i35 = i34 & $i6;

        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(0);

        $i7 = virtualinvoke $r6.<org.apache.xmlbeans.impl.regex.Token: int analyzeFirstCharacter(org.apache.xmlbeans.impl.regex.RangeToken,int)>(r2, i35);

        return $i7;

     label34:
        virtualinvoke r2.<org.apache.xmlbeans.impl.regex.RangeToken: void addRange(int,int)>(0, 1114111);

        return 2;

     label35:
        $r7 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: java.lang.String getString()>();

        $c8 = virtualinvoke $r7.<java.lang.String: char charAt(int)>(0);

        $i43 = (int) $c8;

        i36 = $i43;

        $i44 = (int) $c8;

        $z1 = staticinvoke <org.apache.xmlbeans.impl.regex.REUtil: boolean isHighSurrogate(int)>($i44);

        if $z1 == 0 goto label36;

        $r8 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: java.lang.String getString()>();

        $i13 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i13 < 2 goto label36;

        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: java.lang.String getString()>();

        $c14 = virtualinvoke $r9.<java.lang.String: char charAt(int)>(1);

        $i45 = (int) $c14;

        $z3 = staticinvoke <org.apache.xmlbeans.impl.regex.REUtil: boolean isLowSurrogate(int)>($i45);

        if $z3 == 0 goto label36;

        $i46 = (int) $c8;

        $i47 = (int) $c14;

        i36 = staticinvoke <org.apache.xmlbeans.impl.regex.REUtil: int composeFromSurrogates(int,int)>($i46, $i47);

     label36:
        virtualinvoke r2.<org.apache.xmlbeans.impl.regex.RangeToken: void addRange(int,int)>(i36, i36);

        if i36 >= 65536 goto label37;

        $z2 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: boolean isSet(int,int)>(i27, 2);

        if $z2 == 0 goto label37;

        $c9 = (char) i36;

        $c10 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c9);

        $i48 = (int) $c10;

        $i49 = (int) $c10;

        virtualinvoke r2.<org.apache.xmlbeans.impl.regex.RangeToken: void addRange(int,int)>($i48, $i49);

        $c11 = (char) $c10;

        $c12 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c11);

        $i50 = (int) $c12;

        $i51 = (int) $c12;

        virtualinvoke r2.<org.apache.xmlbeans.impl.regex.RangeToken: void addRange(int,int)>($i50, $i51);

     label37:
        return 1;

     label38:
        return 0;

     label39:
        $r26 = new java.lang.RuntimeException;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Token#analyzeHeadCharacter(): Invalid Type: ");

        $i26 = r0.<org.apache.xmlbeans.impl.regex.Token: int type>;

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i26);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.RuntimeException: void <init>(java.lang.String)>($r24);

        throw $r26;
    }

    private final boolean isShorterThan(org.apache.xmlbeans.impl.regex.Token)
    {
        org.apache.xmlbeans.impl.regex.Token r0, r1;
        java.lang.StringBuffer $r3, $r4, $r5, $r9, $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r6, $r7, $r12, $r13;
        boolean $z0;
        java.lang.RuntimeException $r2, $r8;

        r1 := @this: org.apache.xmlbeans.impl.regex.Token;

        r0 := @parameter0: org.apache.xmlbeans.impl.regex.Token;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = r1.<org.apache.xmlbeans.impl.regex.Token: int type>;

        if $i0 != 10 goto label2;

        $r7 = virtualinvoke r1.<org.apache.xmlbeans.impl.regex.Token: java.lang.String getString()>();

        $i2 = virtualinvoke $r7.<java.lang.String: int length()>();

        goto label3;

     label2:
        $r2 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Internal Error: Illegal type: ");

        $i1 = r1.<org.apache.xmlbeans.impl.regex.Token: int type>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        $i3 = r0.<org.apache.xmlbeans.impl.regex.Token: int type>;

        if $i3 != 10 goto label4;

        $r13 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: java.lang.String getString()>();

        $i5 = virtualinvoke $r13.<java.lang.String: int length()>();

        goto label5;

     label4:
        $r8 = new java.lang.RuntimeException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Internal Error: Illegal type: ");

        $i4 = r0.<org.apache.xmlbeans.impl.regex.Token: int type>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label5:
        if $i2 >= $i5 goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        return $z0;
    }

    final void findFixedString(org.apache.xmlbeans.impl.regex.Token$FixedStringContainer, int)
    {
        org.apache.xmlbeans.impl.regex.Token r0, $r3, $r5, $r6, $r7, r13;
        java.lang.StringBuffer $r10, $r11, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10, $i12;
        java.lang.String $r12;
        boolean $z0;
        org.apache.xmlbeans.impl.regex.Token$FixedStringContainer r4;
        java.lang.RuntimeException $r15;
        org.apache.xmlbeans.impl.regex.Token$ModifierToken $r1, $r2;

        r0 := @this: org.apache.xmlbeans.impl.regex.Token;

        r4 := @parameter0: org.apache.xmlbeans.impl.regex.Token$FixedStringContainer;

        i6 := @parameter1: int;

        $i0 = r0.<org.apache.xmlbeans.impl.regex.Token: int type>;

        tableswitch($i0)
        {
            case 0: goto label07;
            case 1: goto label01;
            case 2: goto label06;
            case 3: goto label06;
            case 4: goto label06;
            case 5: goto label06;
            case 6: goto label09;
            case 7: goto label06;
            case 8: goto label06;
            case 9: goto label06;
            case 10: goto label08;
            case 11: goto label06;
            case 12: goto label06;
            case 13: goto label11;
            case 14: goto label11;
            case 15: goto label11;
            case 16: goto label11;
            case 17: goto label11;
            case 18: goto label11;
            case 19: goto label11;
            case 20: goto label06;
            case 21: goto label06;
            case 22: goto label06;
            case 23: goto label06;
            case 24: goto label09;
            case 25: goto label10;
            case 26: goto label06;
            default: goto label11;
        };

     label01:
        r13 = null;

        i7 = 0;

        i8 = 0;

     label02:
        $i4 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: int size()>();

        if i8 >= $i4 goto label05;

        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(i8);

        virtualinvoke $r6.<org.apache.xmlbeans.impl.regex.Token: void findFixedString(org.apache.xmlbeans.impl.regex.Token$FixedStringContainer,int)>(r4, i6);

        if r13 == null goto label03;

        $r7 = r4.<org.apache.xmlbeans.impl.regex.Token$FixedStringContainer: org.apache.xmlbeans.impl.regex.Token token>;

        $z0 = specialinvoke r13.<org.apache.xmlbeans.impl.regex.Token: boolean isShorterThan(org.apache.xmlbeans.impl.regex.Token)>($r7);

        if $z0 == 0 goto label04;

     label03:
        r13 = r4.<org.apache.xmlbeans.impl.regex.Token$FixedStringContainer: org.apache.xmlbeans.impl.regex.Token token>;

        i7 = r4.<org.apache.xmlbeans.impl.regex.Token$FixedStringContainer: int options>;

     label04:
        i8 = i8 + 1;

        goto label02;

     label05:
        r4.<org.apache.xmlbeans.impl.regex.Token$FixedStringContainer: org.apache.xmlbeans.impl.regex.Token token> = r13;

        r4.<org.apache.xmlbeans.impl.regex.Token$FixedStringContainer: int options> = i7;

        return;

     label06:
        r4.<org.apache.xmlbeans.impl.regex.Token$FixedStringContainer: org.apache.xmlbeans.impl.regex.Token token> = null;

        return;

     label07:
        r4.<org.apache.xmlbeans.impl.regex.Token$FixedStringContainer: org.apache.xmlbeans.impl.regex.Token token> = null;

        return;

     label08:
        r4.<org.apache.xmlbeans.impl.regex.Token$FixedStringContainer: org.apache.xmlbeans.impl.regex.Token token> = r0;

        r4.<org.apache.xmlbeans.impl.regex.Token$FixedStringContainer: int options> = i6;

        return;

     label09:
        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(0);

        virtualinvoke $r5.<org.apache.xmlbeans.impl.regex.Token: void findFixedString(org.apache.xmlbeans.impl.regex.Token$FixedStringContainer,int)>(r4, i6);

        return;

     label10:
        $r1 = (org.apache.xmlbeans.impl.regex.Token$ModifierToken) r0;

        $i1 = virtualinvoke $r1.<org.apache.xmlbeans.impl.regex.Token$ModifierToken: int getOptions()>();

        i9 = i6 | $i1;

        $r2 = (org.apache.xmlbeans.impl.regex.Token$ModifierToken) r0;

        $i2 = virtualinvoke $r2.<org.apache.xmlbeans.impl.regex.Token$ModifierToken: int getOptionsMask()>();

        $i12 = (int) -1;

        $i3 = $i2 ^ $i12;

        i10 = i9 & $i3;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token getChild(int)>(0);

        virtualinvoke $r3.<org.apache.xmlbeans.impl.regex.Token: void findFixedString(org.apache.xmlbeans.impl.regex.Token$FixedStringContainer,int)>(r4, i10);

        return;

     label11:
        $r15 = new java.lang.RuntimeException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Token#findFixedString(): Invalid Type: ");

        $i5 = r0.<org.apache.xmlbeans.impl.regex.Token: int type>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r15;
    }

    boolean match(int)
    {
        java.lang.RuntimeException $r0;
        org.apache.xmlbeans.impl.regex.Token r3;
        java.lang.StringBuffer $r1, $r2, $r4;
        int $i0, i1;
        java.lang.String $r5;

        r3 := @this: org.apache.xmlbeans.impl.regex.Token;

        i1 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NFAArrow#match(): Internal error: ");

        $i0 = r3.<org.apache.xmlbeans.impl.regex.Token: int type>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    protected static org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String, boolean)
    {
        byte b21;
        java.lang.Throwable $r80;
        org.apache.xmlbeans.impl.regex.Token $r9, $r15, $r17, $r18, $r19, $r22, $r24, $r27, $r29, $r30, $r33, $r37, $r41, $r43, $r45, $r49, $r57, $r65, $r69, $r72, $r73, $r81, $r82;
        java.lang.StringBuffer $r76, $r77, $r84, $r86;
        java.lang.String r1, $r58, $r59, $r60, $r61, $r63, $r66, $r71, $r78;
        java.lang.RuntimeException $r85;
        int[] $r52, $r53;
        boolean z0, $z1, $z2;
        java.lang.String[] $r7, $r11, $r54, $r62, $r64, $r68;
        org.apache.xmlbeans.impl.regex.RangeToken $r12, $r16, $r23, $r28, $r34, $r38, $r42, $r47, $r51, $r79, $r83;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i14, $i17, i18, i19, i20, i22, i23, i24, i25, i26, $i27, $i28, $i30, $i32, $i33;
        java.util.Hashtable $r0, $r2, $r4, $r6, $r13, $r14, $r20, $r21, $r25, $r26, $r31, $r32, $r35, $r36, $r39, $r40, $r44, $r46, $r48, $r50, $r55, $r56, $r67, $r70;
        org.apache.xmlbeans.impl.regex.Token[] r8;
        char $c11, $c12, $c13, $c15, $c16;
        java.lang.Object $r3, $r5;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r0 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories>;

        $i0 = virtualinvoke $r0.<java.util.Hashtable: int size()>();

        if $i0 != 0 goto label38;

        $r6 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories>;

        entermonitor $r6;

     label01:
        $r7 = <org.apache.xmlbeans.impl.regex.Token: java.lang.String[] categoryNames>;

        $i1 = lengthof $r7;

        r8 = newarray (org.apache.xmlbeans.impl.regex.Token)[$i1];

        i18 = 0;

     label02:
        $i2 = lengthof r8;

        if i18 >= $i2 goto label03;

        $r79 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        r8[i18] = $r79;

        i18 = i18 + 1;

        goto label02;

     label03:
        i19 = 0;

     label04:
        if i19 >= 65536 goto label19;

        $c16 = (char) i19;

        $i17 = staticinvoke <java.lang.Character: int getType(char)>($c16);

        i20 = $i17;

        if $i17 == 21 goto label05;

        if $i17 != 22 goto label09;

     label05:
        if i19 == 171 goto label06;

        if i19 == 8216 goto label06;

        if i19 == 8219 goto label06;

        if i19 == 8220 goto label06;

        if i19 == 8223 goto label06;

        if i19 != 8249 goto label07;

     label06:
        i20 = 29;

     label07:
        if i19 == 187 goto label08;

        if i19 == 8217 goto label08;

        if i19 == 8221 goto label08;

        if i19 != 8250 goto label09;

     label08:
        i20 = 30;

     label09:
        $r81 = r8[i20];

        virtualinvoke $r81.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(i19, i19);

        tableswitch(i20)
        {
            case 0: goto label14;
            case 1: goto label10;
            case 2: goto label10;
            case 3: goto label10;
            case 4: goto label10;
            case 5: goto label10;
            case 6: goto label11;
            case 7: goto label11;
            case 8: goto label11;
            case 9: goto label12;
            case 10: goto label12;
            case 11: goto label12;
            case 12: goto label13;
            case 13: goto label13;
            case 14: goto label13;
            case 15: goto label14;
            case 16: goto label14;
            case 17: goto label17;
            case 18: goto label14;
            case 19: goto label14;
            case 20: goto label15;
            case 21: goto label15;
            case 22: goto label15;
            case 23: goto label15;
            case 24: goto label15;
            case 25: goto label16;
            case 26: goto label16;
            case 27: goto label16;
            case 28: goto label16;
            case 29: goto label15;
            case 30: goto label15;
            default: goto label17;
        };

     label10:
        b21 = 31;

        goto label18;

     label11:
        b21 = 32;

        goto label18;

     label12:
        b21 = 33;

        goto label18;

     label13:
        b21 = 34;

        goto label18;

     label14:
        b21 = 35;

        goto label18;

     label15:
        b21 = 36;

        goto label18;

     label16:
        b21 = 37;

        goto label18;

     label17:
        $r85 = new java.lang.RuntimeException;

        $r84 = new java.lang.StringBuffer;

        specialinvoke $r84.<java.lang.StringBuffer: void <init>()>();

        $r76 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("org.apache.xerces.utils.regex.Token#getRange(): Unknown Unicode category: ");

        $r77 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i20);

        $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r85.<java.lang.RuntimeException: void <init>(java.lang.String)>($r78);

        throw $r85;

     label18:
        $r82 = r8[b21];

        virtualinvoke $r82.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(i19, i19);

        i19 = i19 + 1;

        goto label04;

     label19:
        $r9 = r8[0];

        virtualinvoke $r9.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(65536, 1114111);

        i22 = 0;

     label20:
        $i3 = lengthof r8;

        if i22 >= $i3 goto label23;

        $r62 = <org.apache.xmlbeans.impl.regex.Token: java.lang.String[] categoryNames>;

        $r63 = $r62[i22];

        if $r63 == null goto label22;

        if i22 != 0 goto label21;

        $r73 = r8[i22];

        virtualinvoke $r73.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(65536, 1114111);

     label21:
        $r67 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories>;

        $r64 = <org.apache.xmlbeans.impl.regex.Token: java.lang.String[] categoryNames>;

        $r66 = $r64[i22];

        $r65 = r8[i22];

        virtualinvoke $r67.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r66, $r65);

        $r70 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories2>;

        $r68 = <org.apache.xmlbeans.impl.regex.Token: java.lang.String[] categoryNames>;

        $r71 = $r68[i22];

        $r69 = r8[i22];

        $r72 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token complementRanges(org.apache.xmlbeans.impl.regex.Token)>($r69);

        virtualinvoke $r70.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r71, $r72);

     label22:
        i22 = i22 + 1;

        goto label20;

     label23:
        $r86 = new java.lang.StringBuffer;

        specialinvoke $r86.<java.lang.StringBuffer: void <init>(int)>(50);

        i23 = 0;

     label24:
        $r11 = <org.apache.xmlbeans.impl.regex.Token: java.lang.String[] blockNames>;

        $i4 = lengthof $r11;

        if i23 >= $i4 goto label34;

        $r51 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        if i23 >= 84 goto label25;

        i24 = i23 * 2;

        $r59 = "\u0000\u007f\u0080\u00ff\u0100\u017f\u0180\u024f\u0250\u02af\u02b0\u02ff\u0300\u036f\u0370\u03ff\u0400\u04ff\u0530\u058f\u0590\u05ff\u0600\u06ff\u0700\u074f\u0780\u07bf\u0900\u097f\u0980\u09ff\u0a00\u0a7f\u0a80\u0aff\u0b00\u0b7f\u0b80\u0bff\u0c00\u0c7f\u0c80\u0cff\u0d00\u0d7f\u0d80\u0dff\u0e00\u0e7f\u0e80\u0eff\u0f00\u0fff\u1000\u109f\u10a0\u10ff\u1100\u11ff\u1200\u137f\u13a0\u13ff\u1400\u167f\u1680\u169f\u16a0\u16ff\u1780\u17ff\u1800\u18af\u1e00\u1eff\u1f00\u1fff\u2000\u206f\u2070\u209f\u20a0\u20cf\u20d0\u20ff\u2100\u214f\u2150\u218f\u2190\u21ff\u2200\u22ff\u2300\u23ff\u2400\u243f\u2440\u245f\u2460\u24ff\u2500\u257f\u2580\u259f\u25a0\u25ff\u2600\u26ff\u2700\u27bf\u2800\u28ff\u2e80\u2eff\u2f00\u2fdf\u2ff0\u2fff\u3000\u303f\u3040\u309f\u30a0\u30ff\u3100\u312f\u3130\u318f\u3190\u319f\u31a0\u31bf\u3200\u32ff\u3300\u33ff\u3400\u4db5\u4e00\u9fff\ua000\ua48f\ua490\ua4cf\uac00\ud7a3\ue000\uf8ff\uf900\ufaff\ufb00\ufb4f\ufb50\ufdff\ufe20\ufe2f\ufe30\ufe4f\ufe50\ufe6f\ufe70\ufefe\ufeff\ufeff\uff00\uffef";

        $c13 = virtualinvoke $r59.<java.lang.String: char charAt(int)>(i24);

        $r60 = "\u0000\u007f\u0080\u00ff\u0100\u017f\u0180\u024f\u0250\u02af\u02b0\u02ff\u0300\u036f\u0370\u03ff\u0400\u04ff\u0530\u058f\u0590\u05ff\u0600\u06ff\u0700\u074f\u0780\u07bf\u0900\u097f\u0980\u09ff\u0a00\u0a7f\u0a80\u0aff\u0b00\u0b7f\u0b80\u0bff\u0c00\u0c7f\u0c80\u0cff\u0d00\u0d7f\u0d80\u0dff\u0e00\u0e7f\u0e80\u0eff\u0f00\u0fff\u1000\u109f\u10a0\u10ff\u1100\u11ff\u1200\u137f\u13a0\u13ff\u1400\u167f\u1680\u169f\u16a0\u16ff\u1780\u17ff\u1800\u18af\u1e00\u1eff\u1f00\u1fff\u2000\u206f\u2070\u209f\u20a0\u20cf\u20d0\u20ff\u2100\u214f\u2150\u218f\u2190\u21ff\u2200\u22ff\u2300\u23ff\u2400\u243f\u2440\u245f\u2460\u24ff\u2500\u257f\u2580\u259f\u25a0\u25ff\u2600\u26ff\u2700\u27bf\u2800\u28ff\u2e80\u2eff\u2f00\u2fdf\u2ff0\u2fff\u3000\u303f\u3040\u309f\u30a0\u30ff\u3100\u312f\u3130\u318f\u3190\u319f\u31a0\u31bf\u3200\u32ff\u3300\u33ff\u3400\u4db5\u4e00\u9fff\ua000\ua48f\ua490\ua4cf\uac00\ud7a3\ue000\uf8ff\uf900\ufaff\ufb00\ufb4f\ufb50\ufdff\ufe20\ufe2f\ufe30\ufe4f\ufe50\ufe6f\ufe70\ufefe\ufeff\ufeff\uff00\uffef";

        $i14 = i24 + 1;

        $c15 = virtualinvoke $r60.<java.lang.String: char charAt(int)>($i14);

        $i27 = (int) $c13;

        $i28 = (int) $c15;

        virtualinvoke $r51.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>($i27, $i28);

        goto label26;

     label25:
        $i5 = i23 - 84;

        i25 = $i5 * 2;

        $r52 = <org.apache.xmlbeans.impl.regex.Token: int[] nonBMPBlockRanges>;

        $i8 = $r52[i25];

        $r53 = <org.apache.xmlbeans.impl.regex.Token: int[] nonBMPBlockRanges>;

        $i6 = i25 + 1;

        $i7 = $r53[$i6];

        virtualinvoke $r51.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>($i8, $i7);

     label26:
        $r54 = <org.apache.xmlbeans.impl.regex.Token: java.lang.String[] blockNames>;

        $r61 = $r54[i23];

        $z1 = virtualinvoke $r61.<java.lang.String: boolean equals(java.lang.Object)>("Specials");

        if $z1 == 0 goto label27;

        $i30 = (int) 65520;

        $i32 = (int) 65533;

        virtualinvoke $r51.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>($i30, $i32);

     label27:
        $z2 = virtualinvoke $r61.<java.lang.String: boolean equals(java.lang.Object)>("Private Use");

        if $z2 == 0 goto label28;

        virtualinvoke $r51.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(983040, 1048573);

        virtualinvoke $r51.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(1048576, 1114109);

     label28:
        $r55 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories>;

        virtualinvoke $r55.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r61, $r51);

        $r56 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories2>;

        $r57 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token complementRanges(org.apache.xmlbeans.impl.regex.Token)>($r51);

        virtualinvoke $r56.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r61, $r57);

        virtualinvoke $r86.<java.lang.StringBuffer: void setLength(int)>(0);

        virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Is");

        $i9 = virtualinvoke $r61.<java.lang.String: int indexOf(int)>(32);

        if $i9 < 0 goto label32;

        i26 = 0;

     label29:
        $i10 = virtualinvoke $r61.<java.lang.String: int length()>();

        if i26 >= $i10 goto label31;

        $c11 = virtualinvoke $r61.<java.lang.String: char charAt(int)>(i26);

        $i33 = (int) $c11;

        if $i33 == 32 goto label30;

        $c12 = virtualinvoke $r61.<java.lang.String: char charAt(int)>(i26);

        virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c12);

     label30:
        i26 = i26 + 1;

        goto label29;

     label31:
        goto label33;

     label32:
        virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r61);

     label33:
        $r58 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>($r58, $r61, 1);

        i23 = i23 + 1;

        goto label24;

     label34:
        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("ASSIGNED", "Cn", 0);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("UNASSIGNED", "Cn", 1);

        $r12 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        virtualinvoke $r12.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(0, 1114111);

        $r13 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories>;

        virtualinvoke $r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("ALL", $r12);

        $r14 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories2>;

        $r15 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token complementRanges(org.apache.xmlbeans.impl.regex.Token)>($r12);

        virtualinvoke $r14.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("ALL", $r15);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("ASSIGNED");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("UNASSIGNED");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("ALL");

        $r16 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        $r17 = r8[1];

        virtualinvoke $r16.<org.apache.xmlbeans.impl.regex.Token: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r17);

        $r18 = r8[2];

        virtualinvoke $r16.<org.apache.xmlbeans.impl.regex.Token: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r18);

        $r19 = r8[5];

        virtualinvoke $r16.<org.apache.xmlbeans.impl.regex.Token: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r19);

        $r20 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories>;

        virtualinvoke $r20.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("IsAlpha", $r16);

        $r21 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories2>;

        $r22 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token complementRanges(org.apache.xmlbeans.impl.regex.Token)>($r16);

        virtualinvoke $r21.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("IsAlpha", $r22);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("IsAlpha");

        $r23 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        virtualinvoke $r23.<org.apache.xmlbeans.impl.regex.Token: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r16);

        $r24 = r8[9];

        virtualinvoke $r23.<org.apache.xmlbeans.impl.regex.Token: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r24);

        $r25 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories>;

        virtualinvoke $r25.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("IsAlnum", $r23);

        $r26 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories2>;

        $r27 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token complementRanges(org.apache.xmlbeans.impl.regex.Token)>($r23);

        virtualinvoke $r26.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("IsAlnum", $r27);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("IsAlnum");

        $r28 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        $r29 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_spaces>;

        virtualinvoke $r28.<org.apache.xmlbeans.impl.regex.Token: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r29);

        $r30 = r8[34];

        virtualinvoke $r28.<org.apache.xmlbeans.impl.regex.Token: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r30);

        $r31 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories>;

        virtualinvoke $r31.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("IsSpace", $r28);

        $r32 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories2>;

        $r33 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token complementRanges(org.apache.xmlbeans.impl.regex.Token)>($r28);

        virtualinvoke $r32.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("IsSpace", $r33);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("IsSpace");

        $r34 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        virtualinvoke $r34.<org.apache.xmlbeans.impl.regex.Token: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r23);

        virtualinvoke $r34.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(95, 95);

        $r35 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories>;

        virtualinvoke $r35.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("IsWord", $r34);

        $r36 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories2>;

        $r37 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token complementRanges(org.apache.xmlbeans.impl.regex.Token)>($r34);

        virtualinvoke $r36.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("IsWord", $r37);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("IsWord");

        $r38 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        virtualinvoke $r38.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(0, 127);

        $r39 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories>;

        virtualinvoke $r39.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("IsASCII", $r38);

        $r40 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories2>;

        $r41 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token complementRanges(org.apache.xmlbeans.impl.regex.Token)>($r38);

        virtualinvoke $r40.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("IsASCII", $r41);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("IsASCII");

        $r42 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        $r43 = r8[35];

        virtualinvoke $r42.<org.apache.xmlbeans.impl.regex.Token: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r43);

        virtualinvoke $r42.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(32, 32);

        $r44 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories>;

        $r45 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token complementRanges(org.apache.xmlbeans.impl.regex.Token)>($r42);

        virtualinvoke $r44.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("IsGraph", $r45);

        $r46 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories2>;

        virtualinvoke $r46.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("IsGraph", $r42);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("IsGraph");

        $r47 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        virtualinvoke $r47.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(48, 57);

        virtualinvoke $r47.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(65, 70);

        virtualinvoke $r47.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(97, 102);

        $r48 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories>;

        $r49 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token complementRanges(org.apache.xmlbeans.impl.regex.Token)>($r47);

        virtualinvoke $r48.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("IsXDigit", $r49);

        $r50 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories2>;

        virtualinvoke $r50.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("IsXDigit", $r47);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("IsXDigit");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("IsDigit", "Nd", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("IsUpper", "Lu", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("IsLower", "Ll", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("IsCntrl", "C", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("IsPrint", "C", 0);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("IsPunct", "P", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("IsDigit");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("IsUpper");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("IsLower");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("IsCntrl");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("IsPrint");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("IsPunct");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("alpha", "IsAlpha", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("alnum", "IsAlnum", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("ascii", "IsASCII", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("cntrl", "IsCntrl", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("digit", "IsDigit", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("graph", "IsGraph", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("lower", "IsLower", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("print", "IsPrint", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("punct", "IsPunct", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("space", "IsSpace", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("upper", "IsUpper", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("word", "IsWord", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void setAlias(java.lang.String,java.lang.String,boolean)>("xdigit", "IsXDigit", 1);

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("alpha");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("alnum");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("ascii");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("cntrl");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("digit");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("graph");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("lower");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("print");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("punct");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("space");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("upper");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("word");

        staticinvoke <org.apache.xmlbeans.impl.regex.Token: void registerNonXS(java.lang.String)>("xdigit");

        exitmonitor $r6;

     label35:
        goto label38;

     label36:
        $r80 := @caughtexception;

        exitmonitor $r6;

     label37:
        throw $r80;

     label38:
        if z0 == 0 goto label39;

        $r4 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r83 = (org.apache.xmlbeans.impl.regex.RangeToken) $r5;

        goto label40;

     label39:
        $r2 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories2>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r83 = (org.apache.xmlbeans.impl.regex.RangeToken) $r3;

     label40:
        return $r83;

        catch java.lang.Throwable from label01 to label35 with label36;
        catch java.lang.Throwable from label36 to label37 with label36;
    }

    protected static org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String, boolean, boolean)
    {
        org.apache.xmlbeans.impl.regex.RangeToken $r1, r2;
        java.lang.String r0;
        boolean z0, z1, $z2;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String,boolean)>(r0, z0);

        r2 = $r1;

        if z1 == 0 goto label1;

        if $r1 == null goto label1;

        $z2 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: boolean isRegisterNonXS(java.lang.String)>(r0);

        if $z2 == 0 goto label1;

        r2 = null;

     label1:
        return r2;
    }

    protected static void registerNonXS(java.lang.String)
    {
        java.lang.String r1;
        java.util.Hashtable $r0, $r2, $r3;

        r1 := @parameter0: java.lang.String;

        $r0 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable nonxs>;

        if $r0 != null goto label1;

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>()>();

        <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable nonxs> = $r3;

     label1:
        $r2 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable nonxs>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r1);

        return;
    }

    protected static boolean isRegisterNonXS(java.lang.String)
    {
        java.lang.String r1;
        java.util.Hashtable $r0, $r2;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $r0 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable nonxs>;

        if $r0 != null goto label1;

        return 0;

     label1:
        $r2 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable nonxs>;

        $z0 = virtualinvoke $r2.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    private static void setAlias(java.lang.String, java.lang.String, boolean)
    {
        org.apache.xmlbeans.impl.regex.Token r3, r6;
        java.lang.Object $r2, $r5;
        java.lang.String r0, r7;
        java.util.Hashtable $r1, $r4, $r8, $r9, $r10, $r11;
        boolean z0;

        r7 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r1 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (org.apache.xmlbeans.impl.regex.Token) $r2;

        $r4 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories2>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        r6 = (org.apache.xmlbeans.impl.regex.Token) $r5;

        if z0 == 0 goto label1;

        $r10 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories>;

        virtualinvoke $r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r3);

        $r11 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories2>;

        virtualinvoke $r11.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r6);

        goto label2;

     label1:
        $r8 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories2>;

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r3);

        $r9 = <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories>;

        virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r6);

     label2:
        return;
    }

    static synchronized org.apache.xmlbeans.impl.regex.Token getGraphemePattern()
    {
        org.apache.xmlbeans.impl.regex.Token$ConcatToken $r13, $r15;
        org.apache.xmlbeans.impl.regex.RangeToken $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r12;
        org.apache.xmlbeans.impl.regex.Token $r0, $r10, $r16, $r18;
        int $i0, i1, $i3, $i5;
        org.apache.xmlbeans.impl.regex.Token$UnionToken $r9, $r11;
        java.lang.String $r6, $r17;
        org.apache.xmlbeans.impl.regex.Token$ClosureToken $r14;

        $r0 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_grapheme>;

        if $r0 == null goto label1;

        $r18 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_grapheme>;

        return $r18;

     label1:
        $r1 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        $r2 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String,boolean)>("ASSIGNED", 1);

        virtualinvoke $r1.<org.apache.xmlbeans.impl.regex.Token: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r2);

        $r3 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String,boolean)>("M", 1);

        virtualinvoke $r1.<org.apache.xmlbeans.impl.regex.Token: void subtractRanges(org.apache.xmlbeans.impl.regex.Token)>($r3);

        $r4 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String,boolean)>("C", 1);

        virtualinvoke $r1.<org.apache.xmlbeans.impl.regex.Token: void subtractRanges(org.apache.xmlbeans.impl.regex.Token)>($r4);

        $r5 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        i1 = 0;

     label2:
        $r6 = "\u094d\u09cd\u0a4d\u0acd\u0b4d\u0bcd\u0c4d\u0ccd\u0d4d\u0e3a\u0f84";

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if i1 >= $i0 goto label3;

        $r17 = "\u094d\u09cd\u0a4d\u0acd\u0b4d\u0bcd\u0c4d\u0ccd\u0d4d\u0e3a\u0f84";

        virtualinvoke $r17.<java.lang.String: char charAt(int)>(i1);

        virtualinvoke $r5.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(i1, i1);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r7 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        $r8 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String,boolean)>("M", 1);

        virtualinvoke $r7.<org.apache.xmlbeans.impl.regex.Token: void mergeRanges(org.apache.xmlbeans.impl.regex.Token)>($r8);

        virtualinvoke $r7.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(4448, 4607);

        $i3 = (int) 65438;

        $i5 = (int) 65439;

        virtualinvoke $r7.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>($i3, $i5);

        $r9 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$UnionToken createUnion()>();

        virtualinvoke $r9.<org.apache.xmlbeans.impl.regex.Token: void addChild(org.apache.xmlbeans.impl.regex.Token)>($r1);

        $r10 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_empty>;

        virtualinvoke $r9.<org.apache.xmlbeans.impl.regex.Token: void addChild(org.apache.xmlbeans.impl.regex.Token)>($r10);

        $r11 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$UnionToken createUnion()>();

        $r12 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String,boolean)>("L", 1);

        $r13 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ConcatToken createConcat(org.apache.xmlbeans.impl.regex.Token,org.apache.xmlbeans.impl.regex.Token)>($r5, $r12);

        virtualinvoke $r11.<org.apache.xmlbeans.impl.regex.Token: void addChild(org.apache.xmlbeans.impl.regex.Token)>($r13);

        virtualinvoke $r11.<org.apache.xmlbeans.impl.regex.Token: void addChild(org.apache.xmlbeans.impl.regex.Token)>($r7);

        $r14 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ClosureToken createClosure(org.apache.xmlbeans.impl.regex.Token)>($r11);

        $r15 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ConcatToken createConcat(org.apache.xmlbeans.impl.regex.Token,org.apache.xmlbeans.impl.regex.Token)>($r9, $r14);

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_grapheme> = $r15;

        $r16 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_grapheme>;

        return $r16;
    }

    static synchronized org.apache.xmlbeans.impl.regex.Token getCombiningCharacterSequence()
    {
        org.apache.xmlbeans.impl.regex.Token$ConcatToken $r4;
        org.apache.xmlbeans.impl.regex.RangeToken $r1, $r3;
        org.apache.xmlbeans.impl.regex.Token $r0, $r5, $r6;
        org.apache.xmlbeans.impl.regex.Token$ClosureToken $r2;

        $r0 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_ccs>;

        if $r0 == null goto label1;

        $r6 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_ccs>;

        return $r6;

     label1:
        $r1 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String,boolean)>("M", 1);

        $r2 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ClosureToken createClosure(org.apache.xmlbeans.impl.regex.Token)>($r1);

        $r3 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken getRange(java.lang.String,boolean)>("M", 0);

        $r4 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$ConcatToken createConcat(org.apache.xmlbeans.impl.regex.Token,org.apache.xmlbeans.impl.regex.Token)>($r3, $r2);

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_ccs> = $r4;

        $r5 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_ccs>;

        return $r5;
    }

    static void <clinit>()
    {
        int[] $r35;
        java.lang.String[] $r33, $r34;
        org.apache.xmlbeans.impl.regex.RangeToken $r12, $r14, $r19;
        org.apache.xmlbeans.impl.regex.Token $r0, $r11, $r13, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30;
        java.util.Hashtable $r31, $r32;
        org.apache.xmlbeans.impl.regex.Token$CharToken $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        <org.apache.xmlbeans.impl.regex.Token: java.lang.String viramaString> = "\u094d\u09cd\u0a4d\u0acd\u0b4d\u0bcd\u0c4d\u0ccd\u0d4d\u0e3a\u0f84";

        <org.apache.xmlbeans.impl.regex.Token: int NONBMP_BLOCK_START> = 84;

        <org.apache.xmlbeans.impl.regex.Token: java.lang.String blockRanges> = "\u0000\u007f\u0080\u00ff\u0100\u017f\u0180\u024f\u0250\u02af\u02b0\u02ff\u0300\u036f\u0370\u03ff\u0400\u04ff\u0530\u058f\u0590\u05ff\u0600\u06ff\u0700\u074f\u0780\u07bf\u0900\u097f\u0980\u09ff\u0a00\u0a7f\u0a80\u0aff\u0b00\u0b7f\u0b80\u0bff\u0c00\u0c7f\u0c80\u0cff\u0d00\u0d7f\u0d80\u0dff\u0e00\u0e7f\u0e80\u0eff\u0f00\u0fff\u1000\u109f\u10a0\u10ff\u1100\u11ff\u1200\u137f\u13a0\u13ff\u1400\u167f\u1680\u169f\u16a0\u16ff\u1780\u17ff\u1800\u18af\u1e00\u1eff\u1f00\u1fff\u2000\u206f\u2070\u209f\u20a0\u20cf\u20d0\u20ff\u2100\u214f\u2150\u218f\u2190\u21ff\u2200\u22ff\u2300\u23ff\u2400\u243f\u2440\u245f\u2460\u24ff\u2500\u257f\u2580\u259f\u25a0\u25ff\u2600\u26ff\u2700\u27bf\u2800\u28ff\u2e80\u2eff\u2f00\u2fdf\u2ff0\u2fff\u3000\u303f\u3040\u309f\u30a0\u30ff\u3100\u312f\u3130\u318f\u3190\u319f\u31a0\u31bf\u3200\u32ff\u3300\u33ff\u3400\u4db5\u4e00\u9fff\ua000\ua48f\ua490\ua4cf\uac00\ud7a3\ue000\uf8ff\uf900\ufaff\ufb00\ufb4f\ufb50\ufdff\ufe20\ufe2f\ufe30\ufe4f\ufe50\ufe6f\ufe70\ufefe\ufeff\ufeff\uff00\uffef";

        <org.apache.xmlbeans.impl.regex.Token: int CHAR_SYMBOL> = 37;

        <org.apache.xmlbeans.impl.regex.Token: int CHAR_PUNCTUATION> = 36;

        <org.apache.xmlbeans.impl.regex.Token: int CHAR_OTHER> = 35;

        <org.apache.xmlbeans.impl.regex.Token: int CHAR_SEPARATOR> = 34;

        <org.apache.xmlbeans.impl.regex.Token: int CHAR_NUMBER> = 33;

        <org.apache.xmlbeans.impl.regex.Token: int CHAR_MARK> = 32;

        <org.apache.xmlbeans.impl.regex.Token: int CHAR_LETTER> = 31;

        <org.apache.xmlbeans.impl.regex.Token: int CHAR_FINAL_QUOTE> = 30;

        <org.apache.xmlbeans.impl.regex.Token: int CHAR_INIT_QUOTE> = 29;

        <org.apache.xmlbeans.impl.regex.Token: int FC_ANY> = 2;

        <org.apache.xmlbeans.impl.regex.Token: int FC_TERMINAL> = 1;

        <org.apache.xmlbeans.impl.regex.Token: int FC_CONTINUE> = 0;

        <org.apache.xmlbeans.impl.regex.Token: int UTF16_MAX> = 1114111;

        <org.apache.xmlbeans.impl.regex.Token: int CONDITION> = 26;

        <org.apache.xmlbeans.impl.regex.Token: int MODIFIERGROUP> = 25;

        <org.apache.xmlbeans.impl.regex.Token: int INDEPENDENT> = 24;

        <org.apache.xmlbeans.impl.regex.Token: int NEGATIVELOOKBEHIND> = 23;

        <org.apache.xmlbeans.impl.regex.Token: int LOOKBEHIND> = 22;

        <org.apache.xmlbeans.impl.regex.Token: int NEGATIVELOOKAHEAD> = 21;

        <org.apache.xmlbeans.impl.regex.Token: int LOOKAHEAD> = 20;

        <org.apache.xmlbeans.impl.regex.Token: int BACKREFERENCE> = 12;

        <org.apache.xmlbeans.impl.regex.Token: int STRING> = 10;

        <org.apache.xmlbeans.impl.regex.Token: int NONGREEDYCLOSURE> = 9;

        <org.apache.xmlbeans.impl.regex.Token: int ANCHOR> = 8;

        <org.apache.xmlbeans.impl.regex.Token: int EMPTY> = 7;

        <org.apache.xmlbeans.impl.regex.Token: int PAREN> = 6;

        <org.apache.xmlbeans.impl.regex.Token: int NRANGE> = 5;

        <org.apache.xmlbeans.impl.regex.Token: int RANGE> = 4;

        <org.apache.xmlbeans.impl.regex.Token: int CLOSURE> = 3;

        <org.apache.xmlbeans.impl.regex.Token: int UNION> = 2;

        <org.apache.xmlbeans.impl.regex.Token: int CONCAT> = 1;

        <org.apache.xmlbeans.impl.regex.Token: int DOT> = 11;

        <org.apache.xmlbeans.impl.regex.Token: int CHAR> = 0;

        <org.apache.xmlbeans.impl.regex.Token: boolean COUNTTOKENS> = 1;

        <org.apache.xmlbeans.impl.regex.Token: int tokens> = 0;

        $r0 = new org.apache.xmlbeans.impl.regex.Token;

        specialinvoke $r0.<org.apache.xmlbeans.impl.regex.Token: void <init>(int)>(7);

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_empty> = $r0;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$CharToken createAnchor(int)>(94);

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_linebeginning> = $r1;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$CharToken createAnchor(int)>(64);

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_linebeginning2> = $r2;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$CharToken createAnchor(int)>(36);

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_lineend> = $r3;

        $r4 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$CharToken createAnchor(int)>(65);

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_stringbeginning> = $r4;

        $r5 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$CharToken createAnchor(int)>(122);

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_stringend> = $r5;

        $r6 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$CharToken createAnchor(int)>(90);

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_stringend2> = $r6;

        $r7 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$CharToken createAnchor(int)>(98);

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_wordedge> = $r7;

        $r8 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$CharToken createAnchor(int)>(66);

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_not_wordedge> = $r8;

        $r9 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$CharToken createAnchor(int)>(60);

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_wordbeginning> = $r9;

        $r10 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token$CharToken createAnchor(int)>(62);

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_wordend> = $r10;

        $r11 = new org.apache.xmlbeans.impl.regex.Token;

        specialinvoke $r11.<org.apache.xmlbeans.impl.regex.Token: void <init>(int)>(11);

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_dot> = $r11;

        $r12 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_0to9> = $r12;

        $r13 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_0to9>;

        virtualinvoke $r13.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(48, 57);

        $r14 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_wordchars> = $r14;

        $r15 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_wordchars>;

        virtualinvoke $r15.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(48, 57);

        $r16 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_wordchars>;

        virtualinvoke $r16.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(65, 90);

        $r17 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_wordchars>;

        virtualinvoke $r17.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(95, 95);

        $r18 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_wordchars>;

        virtualinvoke $r18.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(97, 122);

        $r19 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.RangeToken createRange()>();

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_spaces> = $r19;

        $r20 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_spaces>;

        virtualinvoke $r20.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(9, 9);

        $r21 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_spaces>;

        virtualinvoke $r21.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(10, 10);

        $r22 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_spaces>;

        virtualinvoke $r22.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(12, 12);

        $r23 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_spaces>;

        virtualinvoke $r23.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(13, 13);

        $r24 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_spaces>;

        virtualinvoke $r24.<org.apache.xmlbeans.impl.regex.Token: void addRange(int,int)>(32, 32);

        $r25 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_0to9>;

        $r26 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token complementRanges(org.apache.xmlbeans.impl.regex.Token)>($r25);

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_not_0to9> = $r26;

        $r27 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_wordchars>;

        $r28 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token complementRanges(org.apache.xmlbeans.impl.regex.Token)>($r27);

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_not_wordchars> = $r28;

        $r29 = <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_spaces>;

        $r30 = staticinvoke <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token complementRanges(org.apache.xmlbeans.impl.regex.Token)>($r29);

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_not_spaces> = $r30;

        $r31 = new java.util.Hashtable;

        specialinvoke $r31.<java.util.Hashtable: void <init>()>();

        <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories> = $r31;

        $r32 = new java.util.Hashtable;

        specialinvoke $r32.<java.util.Hashtable: void <init>()>();

        <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable categories2> = $r32;

        $r33 = newarray (java.lang.String)[38];

        $r33[0] = "Cn";

        $r33[1] = "Lu";

        $r33[2] = "Ll";

        $r33[3] = "Lt";

        $r33[4] = "Lm";

        $r33[5] = "Lo";

        $r33[6] = "Mn";

        $r33[7] = "Me";

        $r33[8] = "Mc";

        $r33[9] = "Nd";

        $r33[10] = "Nl";

        $r33[11] = "No";

        $r33[12] = "Zs";

        $r33[13] = "Zl";

        $r33[14] = "Zp";

        $r33[15] = "Cc";

        $r33[16] = "Cf";

        $r33[17] = null;

        $r33[18] = "Co";

        $r33[19] = "Cs";

        $r33[20] = "Pd";

        $r33[21] = "Ps";

        $r33[22] = "Pe";

        $r33[23] = "Pc";

        $r33[24] = "Po";

        $r33[25] = "Sm";

        $r33[26] = "Sc";

        $r33[27] = "Sk";

        $r33[28] = "So";

        $r33[29] = "Pi";

        $r33[30] = "Pf";

        $r33[31] = "L";

        $r33[32] = "M";

        $r33[33] = "N";

        $r33[34] = "Z";

        $r33[35] = "C";

        $r33[36] = "P";

        $r33[37] = "S";

        <org.apache.xmlbeans.impl.regex.Token: java.lang.String[] categoryNames> = $r33;

        $r34 = newarray (java.lang.String)[93];

        $r34[0] = "Basic Latin";

        $r34[1] = "Latin-1 Supplement";

        $r34[2] = "Latin Extended-A";

        $r34[3] = "Latin Extended-B";

        $r34[4] = "IPA Extensions";

        $r34[5] = "Spacing Modifier Letters";

        $r34[6] = "Combining Diacritical Marks";

        $r34[7] = "Greek";

        $r34[8] = "Cyrillic";

        $r34[9] = "Armenian";

        $r34[10] = "Hebrew";

        $r34[11] = "Arabic";

        $r34[12] = "Syriac";

        $r34[13] = "Thaana";

        $r34[14] = "Devanagari";

        $r34[15] = "Bengali";

        $r34[16] = "Gurmukhi";

        $r34[17] = "Gujarati";

        $r34[18] = "Oriya";

        $r34[19] = "Tamil";

        $r34[20] = "Telugu";

        $r34[21] = "Kannada";

        $r34[22] = "Malayalam";

        $r34[23] = "Sinhala";

        $r34[24] = "Thai";

        $r34[25] = "Lao";

        $r34[26] = "Tibetan";

        $r34[27] = "Myanmar";

        $r34[28] = "Georgian";

        $r34[29] = "Hangul Jamo";

        $r34[30] = "Ethiopic";

        $r34[31] = "Cherokee";

        $r34[32] = "Unified Canadian Aboriginal Syllabics";

        $r34[33] = "Ogham";

        $r34[34] = "Runic";

        $r34[35] = "Khmer";

        $r34[36] = "Mongolian";

        $r34[37] = "Latin Extended Additional";

        $r34[38] = "Greek Extended";

        $r34[39] = "General Punctuation";

        $r34[40] = "Superscripts and Subscripts";

        $r34[41] = "Currency Symbols";

        $r34[42] = "Combining Marks for Symbols";

        $r34[43] = "Letterlike Symbols";

        $r34[44] = "Number Forms";

        $r34[45] = "Arrows";

        $r34[46] = "Mathematical Operators";

        $r34[47] = "Miscellaneous Technical";

        $r34[48] = "Control Pictures";

        $r34[49] = "Optical Character Recognition";

        $r34[50] = "Enclosed Alphanumerics";

        $r34[51] = "Box Drawing";

        $r34[52] = "Block Elements";

        $r34[53] = "Geometric Shapes";

        $r34[54] = "Miscellaneous Symbols";

        $r34[55] = "Dingbats";

        $r34[56] = "Braille Patterns";

        $r34[57] = "CJK Radicals Supplement";

        $r34[58] = "Kangxi Radicals";

        $r34[59] = "Ideographic Description Characters";

        $r34[60] = "CJK Symbols and Punctuation";

        $r34[61] = "Hiragana";

        $r34[62] = "Katakana";

        $r34[63] = "Bopomofo";

        $r34[64] = "Hangul Compatibility Jamo";

        $r34[65] = "Kanbun";

        $r34[66] = "Bopomofo Extended";

        $r34[67] = "Enclosed CJK Letters and Months";

        $r34[68] = "CJK Compatibility";

        $r34[69] = "CJK Unified Ideographs Extension A";

        $r34[70] = "CJK Unified Ideographs";

        $r34[71] = "Yi Syllables";

        $r34[72] = "Yi Radicals";

        $r34[73] = "Hangul Syllables";

        $r34[74] = "Private Use";

        $r34[75] = "CJK Compatibility Ideographs";

        $r34[76] = "Alphabetic Presentation Forms";

        $r34[77] = "Arabic Presentation Forms-A";

        $r34[78] = "Combining Half Marks";

        $r34[79] = "CJK Compatibility Forms";

        $r34[80] = "Small Form Variants";

        $r34[81] = "Arabic Presentation Forms-B";

        $r34[82] = "Specials";

        $r34[83] = "Halfwidth and Fullwidth Forms";

        $r34[84] = "Old Italic";

        $r34[85] = "Gothic";

        $r34[86] = "Deseret";

        $r34[87] = "Byzantine Musical Symbols";

        $r34[88] = "Musical Symbols";

        $r34[89] = "Mathematical Alphanumeric Symbols";

        $r34[90] = "CJK Unified Ideographs Extension B";

        $r34[91] = "CJK Compatibility Ideographs Supplement";

        $r34[92] = "Tags";

        <org.apache.xmlbeans.impl.regex.Token: java.lang.String[] blockNames> = $r34;

        $r35 = newarray (int)[18];

        $r35[0] = 66304;

        $r35[1] = 66351;

        $r35[2] = 66352;

        $r35[3] = 66383;

        $r35[4] = 66560;

        $r35[5] = 66639;

        $r35[6] = 118784;

        $r35[7] = 119039;

        $r35[8] = 119040;

        $r35[9] = 119295;

        $r35[10] = 119808;

        $r35[11] = 120831;

        $r35[12] = 131072;

        $r35[13] = 173782;

        $r35[14] = 194560;

        $r35[15] = 195103;

        $r35[16] = 917504;

        $r35[17] = 917631;

        <org.apache.xmlbeans.impl.regex.Token: int[] nonBMPBlockRanges> = $r35;

        <org.apache.xmlbeans.impl.regex.Token: java.util.Hashtable nonxs> = null;

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_grapheme> = null;

        <org.apache.xmlbeans.impl.regex.Token: org.apache.xmlbeans.impl.regex.Token token_ccs> = null;

        return;
    }
}
