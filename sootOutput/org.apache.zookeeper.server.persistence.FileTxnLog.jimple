public class org.apache.zookeeper.server.persistence.FileTxnLog extends java.lang.Object implements org.apache.zookeeper.server.persistence.TxnLog
{
    private static final org.slf4j.Logger LOG;
    static long preAllocSize;
    public static final int TXNLOG_MAGIC;
    public static final int VERSION;
    private static final long fsyncWarningThresholdMS;
    long lastZxidSeen;
    volatile java.io.BufferedOutputStream logStream;
    volatile org.apache.jute.OutputArchive oa;
    volatile java.io.FileOutputStream fos;
    java.io.File logDir;
    private final boolean forceSync;
    long dbId;
    private java.util.LinkedList streamsToFlush;
    long currentSize;
    java.io.File logFileWrite;

    public void <init>(java.io.File)
    {
        org.apache.zookeeper.server.persistence.FileTxnLog r0;
        java.lang.String $r1;
        java.util.LinkedList $r2;
        java.io.File r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.zookeeper.server.persistence.FileTxnLog;

        r3 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.BufferedOutputStream logStream> = null;

        r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.FileOutputStream fos> = null;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("zookeeper.forceSync", "yes");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("no");

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<org.apache.zookeeper.server.persistence.FileTxnLog: boolean forceSync> = $z1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.util.LinkedList streamsToFlush> = $r2;

        r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.File logFileWrite> = null;

        r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.File logDir> = r3;

        return;
    }

    public static void setPreallocSize(long)
    {
        long l0;

        l0 := @parameter0: long;

        <org.apache.zookeeper.server.persistence.FileTxnLog: long preAllocSize> = l0;

        return;
    }

    protected java.util.zip.Checksum makeChecksumAlgorithm()
    {
        org.apache.zookeeper.server.persistence.FileTxnLog r1;
        java.util.zip.Adler32 $r0;

        r1 := @this: org.apache.zookeeper.server.persistence.FileTxnLog;

        $r0 = new java.util.zip.Adler32;

        specialinvoke $r0.<java.util.zip.Adler32: void <init>()>();

        return $r0;
    }

    public synchronized void rollLog() throws java.io.IOException
    {
        org.apache.zookeeper.server.persistence.FileTxnLog r0;
        java.io.BufferedOutputStream $r1, $r2;

        r0 := @this: org.apache.zookeeper.server.persistence.FileTxnLog;

        $r1 = r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.BufferedOutputStream logStream>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.BufferedOutputStream logStream>;

        virtualinvoke $r2.<java.io.BufferedOutputStream: void flush()>();

        r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.BufferedOutputStream logStream> = null;

        r0.<org.apache.zookeeper.server.persistence.FileTxnLog: org.apache.jute.OutputArchive oa> = null;

     label1:
        return;
    }

    public synchronized void close() throws java.io.IOException
    {
        org.apache.zookeeper.server.persistence.FileTxnLog r0;
        java.util.Iterator $r3;
        java.io.FileOutputStream r5;
        java.io.BufferedOutputStream $r1, $r6;
        java.lang.Object $r4;
        java.util.LinkedList $r2;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.server.persistence.FileTxnLog;

        $r1 = r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.BufferedOutputStream logStream>;

        if $r1 == null goto label1;

        $r6 = r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.BufferedOutputStream logStream>;

        virtualinvoke $r6.<java.io.BufferedOutputStream: void close()>();

     label1:
        $r2 = r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.util.LinkedList streamsToFlush>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.io.FileOutputStream) $r4;

        virtualinvoke r5.<java.io.FileOutputStream: void close()>();

        goto label2;

     label3:
        return;
    }

    public synchronized boolean append(org.apache.zookeeper.txn.TxnHeader, org.apache.jute.Record) throws java.io.IOException
    {
        org.apache.zookeeper.server.persistence.FileTxnLog r1;
        org.apache.jute.BinaryOutputArchive $r21;
        byte[] $r45;
        byte $b2;
        boolean $z0;
        org.apache.jute.Record r3;
        java.lang.StringBuilder $r12, $r14, $r31, $r33, $r37, $r38, $r39, $r40, $r41, $r42, $r46, $r47, $r48;
        long $l0, $l1, $l5, $l6, $l7, $l9, $l10, $l11, $l12;
        java.io.BufferedOutputStream $r2, $r20, $r24, $r51;
        java.util.zip.Checksum $r5;
        int $i3, $i4, $i8, $i13, $i14;
        org.apache.jute.OutputArchive $r6, $r7, $r23;
        java.lang.String $r13, $r15, $r32, $r34, $r43;
        java.util.LinkedList $r28;
        org.slf4j.Logger $r8, $r30, $r36;
        org.apache.zookeeper.server.persistence.FileHeader $r52;
        java.io.FileOutputStream $r19, $r25, $r27, $r44, $r50;
        org.apache.zookeeper.txn.TxnHeader r0;
        java.io.IOException $r53;
        java.io.File $r11, $r17, $r49;
        java.nio.channels.FileChannel $r26;

        r1 := @this: org.apache.zookeeper.server.persistence.FileTxnLog;

        r0 := @parameter0: org.apache.zookeeper.txn.TxnHeader;

        r3 := @parameter1: org.apache.jute.Record;

        if r0 == null goto label6;

        $l0 = virtualinvoke r0.<org.apache.zookeeper.txn.TxnHeader: long getZxid()>();

        $l1 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: long lastZxidSeen>;

        $b2 = $l0 cmp $l1;

        $i14 = (int) $b2;

        if $i14 > 0 goto label1;

        $r36 = <org.apache.zookeeper.server.persistence.FileTxnLog: org.slf4j.Logger LOG>;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current zxid ");

        $l11 = virtualinvoke r0.<org.apache.zookeeper.txn.TxnHeader: long getZxid()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l11);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is <= ");

        $l12 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: long lastZxidSeen>;

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l12);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $i13 = virtualinvoke r0.<org.apache.zookeeper.txn.TxnHeader: int getType()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r36.<org.slf4j.Logger: void warn(java.lang.String)>($r43);

     label1:
        $r2 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.BufferedOutputStream logStream>;

        if $r2 != null goto label3;

        $r8 = <org.apache.zookeeper.server.persistence.FileTxnLog: org.slf4j.Logger LOG>;

        $z0 = interfaceinvoke $r8.<org.slf4j.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label2;

        $r30 = <org.apache.zookeeper.server.persistence.FileTxnLog: org.slf4j.Logger LOG>;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Creating new log file: log.");

        $l10 = virtualinvoke r0.<org.apache.zookeeper.txn.TxnHeader: long getZxid()>();

        $r32 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l10);

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r30.<org.slf4j.Logger: void info(java.lang.String)>($r34);

     label2:
        $r49 = new java.io.File;

        $r11 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.File logDir>;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("log.");

        $l6 = virtualinvoke r0.<org.apache.zookeeper.txn.TxnHeader: long getZxid()>();

        $r13 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l6);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r49.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, $r15);

        r1.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.File logFileWrite> = $r49;

        $r50 = new java.io.FileOutputStream;

        $r17 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.File logFileWrite>;

        specialinvoke $r50.<java.io.FileOutputStream: void <init>(java.io.File)>($r17);

        r1.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.FileOutputStream fos> = $r50;

        $r51 = new java.io.BufferedOutputStream;

        $r19 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.FileOutputStream fos>;

        specialinvoke $r51.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r19);

        r1.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.BufferedOutputStream logStream> = $r51;

        $r20 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.BufferedOutputStream logStream>;

        $r21 = staticinvoke <org.apache.jute.BinaryOutputArchive: org.apache.jute.BinaryOutputArchive getArchive(java.io.OutputStream)>($r20);

        r1.<org.apache.zookeeper.server.persistence.FileTxnLog: org.apache.jute.OutputArchive oa> = $r21;

        $r52 = new org.apache.zookeeper.server.persistence.FileHeader;

        $i8 = <org.apache.zookeeper.server.persistence.FileTxnLog: int TXNLOG_MAGIC>;

        $l7 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: long dbId>;

        specialinvoke $r52.<org.apache.zookeeper.server.persistence.FileHeader: void <init>(int,int,long)>($i8, 2, $l7);

        $r23 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: org.apache.jute.OutputArchive oa>;

        virtualinvoke $r52.<org.apache.zookeeper.server.persistence.FileHeader: void serialize(org.apache.jute.OutputArchive,java.lang.String)>($r23, "fileheader");

        $r24 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.BufferedOutputStream logStream>;

        virtualinvoke $r24.<java.io.BufferedOutputStream: void flush()>();

        $r25 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.FileOutputStream fos>;

        $r26 = virtualinvoke $r25.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        $l9 = virtualinvoke $r26.<java.nio.channels.FileChannel: long position()>();

        r1.<org.apache.zookeeper.server.persistence.FileTxnLog: long currentSize> = $l9;

        $r28 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: java.util.LinkedList streamsToFlush>;

        $r27 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.FileOutputStream fos>;

        virtualinvoke $r28.<java.util.LinkedList: boolean add(java.lang.Object)>($r27);

     label3:
        $r44 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.FileOutputStream fos>;

        specialinvoke r1.<org.apache.zookeeper.server.persistence.FileTxnLog: void padFile(java.io.FileOutputStream)>($r44);

        $r45 = staticinvoke <org.apache.zookeeper.server.persistence.Util: byte[] marshallTxnEntry(org.apache.zookeeper.txn.TxnHeader,org.apache.jute.Record)>(r0, r3);

        if $r45 == null goto label4;

        $i3 = lengthof $r45;

        if $i3 != 0 goto label5;

     label4:
        $r53 = new java.io.IOException;

        specialinvoke $r53.<java.io.IOException: void <init>(java.lang.String)>("Faulty serialization for header and txn");

        throw $r53;

     label5:
        $r5 = virtualinvoke r1.<org.apache.zookeeper.server.persistence.FileTxnLog: java.util.zip.Checksum makeChecksumAlgorithm()>();

        $i4 = lengthof $r45;

        interfaceinvoke $r5.<java.util.zip.Checksum: void update(byte[],int,int)>($r45, 0, $i4);

        $r6 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: org.apache.jute.OutputArchive oa>;

        $l5 = interfaceinvoke $r5.<java.util.zip.Checksum: long getValue()>();

        interfaceinvoke $r6.<org.apache.jute.OutputArchive: void writeLong(long,java.lang.String)>($l5, "txnEntryCRC");

        $r7 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: org.apache.jute.OutputArchive oa>;

        staticinvoke <org.apache.zookeeper.server.persistence.Util: void writeTxnBytes(org.apache.jute.OutputArchive,byte[])>($r7, $r45);

        return 1;

     label6:
        return 0;
    }

    private void padFile(java.io.FileOutputStream) throws java.io.IOException
    {
        org.apache.zookeeper.server.persistence.FileTxnLog r0;
        java.io.FileOutputStream r1;
        long $l0, $l1, $l2;

        r0 := @this: org.apache.zookeeper.server.persistence.FileTxnLog;

        r1 := @parameter0: java.io.FileOutputStream;

        $l1 = r0.<org.apache.zookeeper.server.persistence.FileTxnLog: long currentSize>;

        $l0 = <org.apache.zookeeper.server.persistence.FileTxnLog: long preAllocSize>;

        $l2 = staticinvoke <org.apache.zookeeper.server.persistence.Util: long padLogFile(java.io.FileOutputStream,long,long)>(r1, $l1, $l0);

        r0.<org.apache.zookeeper.server.persistence.FileTxnLog: long currentSize> = $l2;

        return;
    }

    public static java.io.File[] getLogFiles(java.io.File[], long)
    {
        java.lang.Object[] $r6;
        long $l0, $l2, l3, l6;
        java.util.ArrayList $r14;
        byte $b1, $b4, $b5;
        int $i7, $i8, $i9;
        java.lang.String $r9, $r11;
        boolean $z0, $z1;
        java.util.Iterator $r2, $r4;
        java.io.File r12, r13;
        java.util.List $r1;
        java.lang.Object $r8, $r10;
        java.io.File[] r0, $r5, $r7;

        r0 := @parameter0: java.io.File[];

        l3 := @parameter1: long;

        $r1 = staticinvoke <org.apache.zookeeper.server.persistence.Util: java.util.List sortDataDir(java.io.File[],java.lang.String,boolean)>(r0, "log", 1);

        l6 = 0L;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.io.File) $r10;

        $r11 = virtualinvoke r12.<java.io.File: java.lang.String getName()>();

        $l2 = staticinvoke <org.apache.zookeeper.server.persistence.Util: long getZxidFromName(java.lang.String,java.lang.String)>($r11, "log");

        $b4 = $l2 cmp l3;

        $i7 = (int) $b4;

        if $i7 <= 0 goto label2;

        goto label1;

     label2:
        $b5 = $l2 cmp l6;

        $i8 = (int) $b5;

        if $i8 <= 0 goto label3;

        l6 = $l2;

     label3:
        goto label1;

     label4:
        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>(5);

        $r4 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.io.File) $r8;

        $r9 = virtualinvoke r13.<java.io.File: java.lang.String getName()>();

        $l0 = staticinvoke <org.apache.zookeeper.server.persistence.Util: long getZxidFromName(java.lang.String,java.lang.String)>($r9, "log");

        $b1 = $l0 cmp l6;

        $i9 = (int) $b1;

        if $i9 >= 0 goto label6;

        goto label5;

     label6:
        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>(r13);

        goto label5;

     label7:
        $r5 = newarray (java.io.File)[0];

        $r6 = interfaceinvoke $r14.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.io.File[]) $r6;

        return $r7;
    }

    public long getLastLoggedZxid()
    {
        org.apache.zookeeper.server.persistence.FileTxnLog r0, $r4;
        org.apache.zookeeper.server.persistence.TxnLog$TxnIterator $r6;
        long $l3, l4;
        int $i0, $i1, $i2;
        java.lang.String $r9;
        boolean $z0;
        org.slf4j.Logger $r11;
        org.apache.zookeeper.txn.TxnHeader $r7;
        java.io.IOException $r10;
        java.io.File $r1, $r5, $r8;
        java.io.File[] $r2, $r3;

        r0 := @this: org.apache.zookeeper.server.persistence.FileTxnLog;

        $r1 = r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.File logDir>;

        $r2 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>();

        $r3 = staticinvoke <org.apache.zookeeper.server.persistence.FileTxnLog: java.io.File[] getLogFiles(java.io.File[],long)>($r2, 0L);

        $i0 = lengthof $r3;

        if $i0 <= 0 goto label1;

        $i1 = lengthof $r3;

        $i2 = $i1 - 1;

        $r8 = $r3[$i2];

        $r9 = virtualinvoke $r8.<java.io.File: java.lang.String getName()>();

        $l3 = staticinvoke <org.apache.zookeeper.server.persistence.Util: long getZxidFromName(java.lang.String,java.lang.String)>($r9, "log");

        goto label2;

     label1:
        $l3 = -1L;

     label2:
        l4 = $l3;

     label3:
        $r4 = new org.apache.zookeeper.server.persistence.FileTxnLog;

        $r5 = r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.File logDir>;

        specialinvoke $r4.<org.apache.zookeeper.server.persistence.FileTxnLog: void <init>(java.io.File)>($r5);

        $r6 = virtualinvoke $r4.<org.apache.zookeeper.server.persistence.FileTxnLog: org.apache.zookeeper.server.persistence.TxnLog$TxnIterator read(long)>($l3);

     label4:
        $z0 = interfaceinvoke $r6.<org.apache.zookeeper.server.persistence.TxnLog$TxnIterator: boolean next()>();

        if $z0 != 0 goto label5;

        goto label6;

     label5:
        $r7 = interfaceinvoke $r6.<org.apache.zookeeper.server.persistence.TxnLog$TxnIterator: org.apache.zookeeper.txn.TxnHeader getHeader()>();

        l4 = virtualinvoke $r7.<org.apache.zookeeper.txn.TxnHeader: long getZxid()>();

        goto label4;

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

        $r11 = <org.apache.zookeeper.server.persistence.FileTxnLog: org.slf4j.Logger LOG>;

        interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r10);

     label8:
        return l4;

        catch java.io.IOException from label3 to label6 with label7;
    }

    public synchronized void commit() throws java.io.IOException
    {
        org.apache.zookeeper.server.persistence.FileTxnLog r0;
        byte $b6;
        java.lang.Thread $r15;
        boolean $z0, $z1;
        java.lang.StringBuilder $r14, $r17, $r18, $r19, $r20, $r21, $r24;
        long $l1, $l2, $l3, $l4, $l5;
        java.io.BufferedOutputStream $r1, $r23;
        int $i0, $i7;
        java.lang.String $r16, $r22;
        java.util.LinkedList $r2, $r4, $r5;
        org.slf4j.Logger $r13;
        java.util.Iterator $r3;
        java.io.FileOutputStream $r7, r9;
        java.util.concurrent.TimeUnit $r11;
        java.lang.Object $r6, $r8;
        java.nio.channels.FileChannel $r10;

        r0 := @this: org.apache.zookeeper.server.persistence.FileTxnLog;

        $r1 = r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.BufferedOutputStream logStream>;

        if $r1 == null goto label1;

        $r23 = r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.BufferedOutputStream logStream>;

        virtualinvoke $r23.<java.io.BufferedOutputStream: void flush()>();

     label1:
        $r2 = r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.util.LinkedList streamsToFlush>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.io.FileOutputStream) $r8;

        virtualinvoke r9.<java.io.FileOutputStream: void flush()>();

        $z0 = r0.<org.apache.zookeeper.server.persistence.FileTxnLog: boolean forceSync>;

        if $z0 == 0 goto label3;

        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $r10 = virtualinvoke r9.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        virtualinvoke $r10.<java.nio.channels.FileChannel: void force(boolean)>(0);

        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $l3 = $l2 - $l1;

        $l4 = virtualinvoke $r11.<java.util.concurrent.TimeUnit: long toMillis(long)>($l3);

        $l5 = <org.apache.zookeeper.server.persistence.FileTxnLog: long fsyncWarningThresholdMS>;

        $b6 = $l4 cmp $l5;

        $i7 = (int) $b6;

        if $i7 <= 0 goto label3;

        $r13 = <org.apache.zookeeper.server.persistence.FileTxnLog: org.slf4j.Logger LOG>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fsync-ing the write ahead log in ");

        $r15 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r16 = virtualinvoke $r15.<java.lang.Thread: java.lang.String getName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" took ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms which will adversely effect operation latency. ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("See the ZooKeeper troubleshooting guide");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.slf4j.Logger: void warn(java.lang.String)>($r22);

     label3:
        goto label2;

     label4:
        $r4 = r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.util.LinkedList streamsToFlush>;

        $i0 = virtualinvoke $r4.<java.util.LinkedList: int size()>();

        if $i0 <= 1 goto label5;

        $r5 = r0.<org.apache.zookeeper.server.persistence.FileTxnLog: java.util.LinkedList streamsToFlush>;

        $r6 = virtualinvoke $r5.<java.util.LinkedList: java.lang.Object removeFirst()>();

        $r7 = (java.io.FileOutputStream) $r6;

        virtualinvoke $r7.<java.io.FileOutputStream: void close()>();

        goto label4;

     label5:
        return;
    }

    public org.apache.zookeeper.server.persistence.TxnLog$TxnIterator read(long) throws java.io.IOException
    {
        org.apache.zookeeper.server.persistence.FileTxnLog r1;
        org.apache.zookeeper.server.persistence.FileTxnLog$FileTxnIterator $r0;
        long l0;
        java.io.File $r2;

        r1 := @this: org.apache.zookeeper.server.persistence.FileTxnLog;

        l0 := @parameter0: long;

        $r0 = new org.apache.zookeeper.server.persistence.FileTxnLog$FileTxnIterator;

        $r2 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.File logDir>;

        specialinvoke $r0.<org.apache.zookeeper.server.persistence.FileTxnLog$FileTxnIterator: void <init>(java.io.File,long)>($r2, l0);

        return $r0;
    }

    public boolean truncate(long) throws java.io.IOException
    {
        org.apache.zookeeper.server.persistence.FileTxnLog r1;
        java.io.RandomAccessFile $r4;
        long l0, $l1;
        java.lang.String $r12;
        boolean $z0, $z1;
        org.slf4j.Logger $r8;
        org.apache.zookeeper.server.persistence.FileTxnLog$PositionInputStream r3;
        java.io.File $r2, $r5, $r6, $r10;
        org.apache.zookeeper.server.persistence.FileTxnLog$FileTxnIterator $r0;
        java.lang.StringBuilder $r7, $r9, $r11;

        r1 := @this: org.apache.zookeeper.server.persistence.FileTxnLog;

        l0 := @parameter0: long;

        $r0 = new org.apache.zookeeper.server.persistence.FileTxnLog$FileTxnIterator;

        $r2 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.File logDir>;

        specialinvoke $r0.<org.apache.zookeeper.server.persistence.FileTxnLog$FileTxnIterator: void <init>(java.io.File,long)>($r2, l0);

        r3 = $r0.<org.apache.zookeeper.server.persistence.FileTxnLog$FileTxnIterator: org.apache.zookeeper.server.persistence.FileTxnLog$PositionInputStream inputStream>;

        $l1 = virtualinvoke r3.<org.apache.zookeeper.server.persistence.FileTxnLog$PositionInputStream: long getPosition()>();

        $r4 = new java.io.RandomAccessFile;

        $r5 = $r0.<org.apache.zookeeper.server.persistence.FileTxnLog$FileTxnIterator: java.io.File logFile>;

        specialinvoke $r4.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r5, "rw");

        virtualinvoke $r4.<java.io.RandomAccessFile: void setLength(long)>($l1);

        virtualinvoke $r4.<java.io.RandomAccessFile: void close()>();

     label1:
        $z1 = staticinvoke <org.apache.zookeeper.server.persistence.FileTxnLog$FileTxnIterator: boolean access$000(org.apache.zookeeper.server.persistence.FileTxnLog$FileTxnIterator)>($r0);

        if $z1 == 0 goto label2;

        $r6 = $r0.<org.apache.zookeeper.server.persistence.FileTxnLog$FileTxnIterator: java.io.File logFile>;

        $z0 = virtualinvoke $r6.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label1;

        $r8 = <org.apache.zookeeper.server.persistence.FileTxnLog: org.slf4j.Logger LOG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to truncate ");

        $r10 = $r0.<org.apache.zookeeper.server.persistence.FileTxnLog$FileTxnIterator: java.io.File logFile>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String)>($r12);

        goto label1;

     label2:
        return 1;
    }

    private static org.apache.zookeeper.server.persistence.FileHeader readHeader(java.io.File) throws java.io.IOException
    {
        java.lang.Throwable $r9;
        java.io.BufferedInputStream $r0, r10;
        org.slf4j.Logger $r6, $r8;
        org.apache.zookeeper.server.persistence.FileHeader $r4;
        java.io.IOException $r5, $r7;
        java.io.FileInputStream $r1;
        java.io.File r2;
        org.apache.jute.BinaryInputArchive $r3;

        r2 := @parameter0: java.io.File;

        r10 = null;

     label01:
        $r0 = new java.io.BufferedInputStream;

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r1);

        r10 = $r0;

        $r3 = staticinvoke <org.apache.jute.BinaryInputArchive: org.apache.jute.BinaryInputArchive getArchive(java.io.InputStream)>($r0);

        $r4 = new org.apache.zookeeper.server.persistence.FileHeader;

        specialinvoke $r4.<org.apache.zookeeper.server.persistence.FileHeader: void <init>()>();

        virtualinvoke $r4.<org.apache.zookeeper.server.persistence.FileHeader: void deserialize(org.apache.jute.InputArchive,java.lang.String)>($r3, "fileheader");

        goto label05;

     label02:
        return $r4;

     label03:
        $r9 := @caughtexception;

        goto label09;

     label04:
        throw $r9;

     label05:
        if $r0 == null goto label06;

        virtualinvoke $r0.<java.io.InputStream: void close()>();

     label06:
        goto label08;

     label07:
        $r7 := @caughtexception;

        $r8 = <org.apache.zookeeper.server.persistence.FileTxnLog: org.slf4j.Logger LOG>;

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Ignoring exception during close", $r7);

     label08:
        goto label02;

     label09:
        if r10 == null goto label10;

        virtualinvoke r10.<java.io.InputStream: void close()>();

     label10:
        goto label12;

     label11:
        $r5 := @caughtexception;

        $r6 = <org.apache.zookeeper.server.persistence.FileTxnLog: org.slf4j.Logger LOG>;

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Ignoring exception during close", $r5);

     label12:
        goto label04;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.io.IOException from label09 to label10 with label11;
    }

    public long getDbId() throws java.io.IOException
    {
        org.apache.zookeeper.server.persistence.FileTxnLog r1;
        org.apache.zookeeper.server.persistence.FileHeader $r4;
        org.apache.zookeeper.server.persistence.FileTxnLog$FileTxnIterator $r0;
        long $l0;
        java.io.IOException $r5;
        java.io.File $r2, $r3;

        r1 := @this: org.apache.zookeeper.server.persistence.FileTxnLog;

        $r0 = new org.apache.zookeeper.server.persistence.FileTxnLog$FileTxnIterator;

        $r2 = r1.<org.apache.zookeeper.server.persistence.FileTxnLog: java.io.File logDir>;

        specialinvoke $r0.<org.apache.zookeeper.server.persistence.FileTxnLog$FileTxnIterator: void <init>(java.io.File,long)>($r2, 0L);

        $r3 = $r0.<org.apache.zookeeper.server.persistence.FileTxnLog$FileTxnIterator: java.io.File logFile>;

        $r4 = staticinvoke <org.apache.zookeeper.server.persistence.FileTxnLog: org.apache.zookeeper.server.persistence.FileHeader readHeader(java.io.File)>($r3);

        virtualinvoke $r0.<org.apache.zookeeper.server.persistence.FileTxnLog$FileTxnIterator: void close()>();

        if $r4 != null goto label1;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Unsupported Format.");

        throw $r5;

     label1:
        $l0 = virtualinvoke $r4.<org.apache.zookeeper.server.persistence.FileHeader: long getDbid()>();

        return $l0;
    }

    public boolean isForceSync()
    {
        org.apache.zookeeper.server.persistence.FileTxnLog r0;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.server.persistence.FileTxnLog;

        $z0 = r0.<org.apache.zookeeper.server.persistence.FileTxnLog: boolean forceSync>;

        return $z0;
    }

    static org.slf4j.Logger access$100()
    {
        org.slf4j.Logger $r0;

        $r0 = <org.apache.zookeeper.server.persistence.FileTxnLog: org.slf4j.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        byte[] $r1;
        long $l1, $l2, $l3;
        java.nio.ByteBuffer $r2;
        java.lang.Long $r11;
        int $i0;
        java.lang.String $r0, $r4, $r10;
        org.slf4j.Logger $r3, $r7;
        java.lang.NumberFormatException $r5;
        java.lang.StringBuilder $r6, $r8, $r9;

        <org.apache.zookeeper.server.persistence.FileTxnLog: int VERSION> = 2;

        <org.apache.zookeeper.server.persistence.FileTxnLog: long preAllocSize> = 67108864L;

        $r0 = "ZKLG";

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r1);

        $i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int getInt()>();

        <org.apache.zookeeper.server.persistence.FileTxnLog: int TXNLOG_MAGIC> = $i0;

        $r3 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/server/persistence/FileTxnLog;");

        <org.apache.zookeeper.server.persistence.FileTxnLog: org.slf4j.Logger LOG> = $r3;

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("zookeeper.preAllocSize");

        if $r4 == null goto label4;

     label1:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r4);

        $l2 = $l1 * 1024L;

        <org.apache.zookeeper.server.persistence.FileTxnLog: long preAllocSize> = $l2;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r7 = <org.apache.zookeeper.server.persistence.FileTxnLog: org.slf4j.Logger LOG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a valid value for preAllocSize");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String)>($r10);

     label4:
        $r11 = staticinvoke <java.lang.Long: java.lang.Long getLong(java.lang.String,long)>("fsync.warningthresholdms", 1000L);

        $l3 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

        <org.apache.zookeeper.server.persistence.FileTxnLog: long fsyncWarningThresholdMS> = $l3;

        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
}
