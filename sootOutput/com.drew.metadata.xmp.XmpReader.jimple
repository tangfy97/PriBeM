public class com.drew.metadata.xmp.XmpReader extends java.lang.Object implements com.drew.metadata.MetadataReader
{
    private static final int FMT_STRING;
    private static final int FMT_RATIONAL;
    private static final int FMT_INT;
    private static final int FMT_DOUBLE;
    private static final java.lang.String SCHEMA_EXIF_SPECIFIC_PROPERTIES;
    private static final java.lang.String SCHEMA_EXIF_ADDITIONAL_PROPERTIES;
    private static final java.lang.String SCHEMA_EXIF_TIFF_PROPERTIES;
    private static final java.lang.String SCHEMA_DUBLIN_CORE_SPECIFIC_PROPERTIES;

    public void <init>()
    {
        com.drew.metadata.xmp.XmpReader r0;

        r0 := @this: com.drew.metadata.xmp.XmpReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void extract(com.drew.lang.BufferReader, com.drew.metadata.Metadata)
    {
        byte[] $r6;
        java.lang.NullPointerException $r25, $r26;
        byte $b1;
        boolean $z0, $z1;
        com.adobe.xmp.XMPIterator $r9;
        com.adobe.xmp.XMPMeta $r7;
        com.drew.lang.BufferReader r0;
        com.drew.metadata.xmp.XmpDirectory r3;
        java.lang.StringBuilder $r19, $r21, $r27;
        com.drew.metadata.Metadata r1;
        long $l0, $l2, $l3;
        com.drew.metadata.Directory $r2;
        com.adobe.xmp.XMPException $r17;
        int $i4, $i5;
        java.lang.String $r4, $r5, $r12, $r13, $r14, $r20, $r22;
        com.drew.lang.BufferBoundsException $r23, $r24;
        com.drew.metadata.xmp.XmpReader r8;
        java.lang.Object $r10;
        com.adobe.xmp.properties.XMPPropertyInfo r11;

        r8 := @this: com.drew.metadata.xmp.XmpReader;

        r0 := @parameter0: com.drew.lang.BufferReader;

        r1 := @parameter1: com.drew.metadata.Metadata;

        if r0 != null goto label01;

        $r25 = new java.lang.NullPointerException;

        specialinvoke $r25.<java.lang.NullPointerException: void <init>(java.lang.String)>("reader");

        throw $r25;

     label01:
        if r1 != null goto label02;

        $r26 = new java.lang.NullPointerException;

        specialinvoke $r26.<java.lang.NullPointerException: void <init>(java.lang.String)>("metadata");

        throw $r26;

     label02:
        $r2 = virtualinvoke r1.<com.drew.metadata.Metadata: com.drew.metadata.Directory getOrCreateDirectory(java.lang.Class)>(class "Lcom/drew/metadata/xmp/XmpDirectory;");

        r3 = (com.drew.metadata.xmp.XmpDirectory) $r2;

        $l0 = interfaceinvoke r0.<com.drew.lang.BufferReader: long getLength()>();

        $b1 = $l0 cmp 30L;

        $i5 = (int) $b1;

        if $i5 > 0 goto label03;

        virtualinvoke r3.<com.drew.metadata.xmp.XmpDirectory: void addError(java.lang.String)>("Xmp data segment must contain at least 30 bytes");

        return;

     label03:
        $r4 = interfaceinvoke r0.<com.drew.lang.BufferReader: java.lang.String getString(int,int)>(0, 29);

     label04:
        goto label06;

     label05:
        $r24 := @caughtexception;

        virtualinvoke r3.<com.drew.metadata.xmp.XmpDirectory: void addError(java.lang.String)>("Unable to read XMP preamble");

        return;

     label06:
        $r5 = "http://ns.adobe.com/xap/1.0/\u0000";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label07;

        virtualinvoke r3.<com.drew.metadata.xmp.XmpDirectory: void addError(java.lang.String)>("Xmp data segment doesn\'t begin with \'http://ns.adobe.com/xap/1.0/\'");

        return;

     label07:
        $l2 = interfaceinvoke r0.<com.drew.lang.BufferReader: long getLength()>();

        $l3 = $l2 - 29L;

        $i4 = (int) $l3;

        $r6 = interfaceinvoke r0.<com.drew.lang.BufferReader: byte[] getBytes(int,int)>(29, $i4);

     label08:
        goto label11;

     label09:
        $r23 := @caughtexception;

        virtualinvoke r3.<com.drew.metadata.xmp.XmpDirectory: void addError(java.lang.String)>("Unable to read XMP data");

     label10:
        return;

     label11:
        $r7 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPMeta parseFromBuffer(byte[])>($r6);

        virtualinvoke r3.<com.drew.metadata.xmp.XmpDirectory: void setXMPMeta(com.adobe.xmp.XMPMeta)>($r7);

        specialinvoke r8.<com.drew.metadata.xmp.XmpReader: void processXmpTag(com.adobe.xmp.XMPMeta,com.drew.metadata.xmp.XmpDirectory,java.lang.String,java.lang.String,int,int)>($r7, r3, "http://ns.adobe.com/exif/1.0/aux/", "aux:LensInfo", 6, 1);

        specialinvoke r8.<com.drew.metadata.xmp.XmpReader: void processXmpTag(com.adobe.xmp.XMPMeta,com.drew.metadata.xmp.XmpDirectory,java.lang.String,java.lang.String,int,int)>($r7, r3, "http://ns.adobe.com/exif/1.0/aux/", "aux:Lens", 7, 1);

        specialinvoke r8.<com.drew.metadata.xmp.XmpReader: void processXmpTag(com.adobe.xmp.XMPMeta,com.drew.metadata.xmp.XmpDirectory,java.lang.String,java.lang.String,int,int)>($r7, r3, "http://ns.adobe.com/exif/1.0/aux/", "aux:SerialNumber", 8, 1);

        specialinvoke r8.<com.drew.metadata.xmp.XmpReader: void processXmpTag(com.adobe.xmp.XMPMeta,com.drew.metadata.xmp.XmpDirectory,java.lang.String,java.lang.String,int,int)>($r7, r3, "http://ns.adobe.com/exif/1.0/aux/", "aux:Firmware", 9, 1);

        specialinvoke r8.<com.drew.metadata.xmp.XmpReader: void processXmpTag(com.adobe.xmp.XMPMeta,com.drew.metadata.xmp.XmpDirectory,java.lang.String,java.lang.String,int,int)>($r7, r3, "http://ns.adobe.com/tiff/1.0/", "tiff:Make", 1, 1);

        specialinvoke r8.<com.drew.metadata.xmp.XmpReader: void processXmpTag(com.adobe.xmp.XMPMeta,com.drew.metadata.xmp.XmpDirectory,java.lang.String,java.lang.String,int,int)>($r7, r3, "http://ns.adobe.com/tiff/1.0/", "tiff:Model", 2, 1);

        specialinvoke r8.<com.drew.metadata.xmp.XmpReader: void processXmpTag(com.adobe.xmp.XMPMeta,com.drew.metadata.xmp.XmpDirectory,java.lang.String,java.lang.String,int,int)>($r7, r3, "http://ns.adobe.com/exif/1.0/", "exif:ExposureTime", 3, 1);

        specialinvoke r8.<com.drew.metadata.xmp.XmpReader: void processXmpTag(com.adobe.xmp.XMPMeta,com.drew.metadata.xmp.XmpDirectory,java.lang.String,java.lang.String,int,int)>($r7, r3, "http://ns.adobe.com/exif/1.0/", "exif:ExposureProgram", 12, 3);

        specialinvoke r8.<com.drew.metadata.xmp.XmpReader: void processXmpTag(com.adobe.xmp.XMPMeta,com.drew.metadata.xmp.XmpDirectory,java.lang.String,java.lang.String,int,int)>($r7, r3, "http://ns.adobe.com/exif/1.0/", "exif:ApertureValue", 11, 2);

        specialinvoke r8.<com.drew.metadata.xmp.XmpReader: void processXmpTag(com.adobe.xmp.XMPMeta,com.drew.metadata.xmp.XmpDirectory,java.lang.String,java.lang.String,int,int)>($r7, r3, "http://ns.adobe.com/exif/1.0/", "exif:FNumber", 5, 2);

        specialinvoke r8.<com.drew.metadata.xmp.XmpReader: void processXmpTag(com.adobe.xmp.XMPMeta,com.drew.metadata.xmp.XmpDirectory,java.lang.String,java.lang.String,int,int)>($r7, r3, "http://ns.adobe.com/exif/1.0/", "exif:FocalLength", 10, 2);

        specialinvoke r8.<com.drew.metadata.xmp.XmpReader: void processXmpTag(com.adobe.xmp.XMPMeta,com.drew.metadata.xmp.XmpDirectory,java.lang.String,java.lang.String,int,int)>($r7, r3, "http://ns.adobe.com/exif/1.0/", "exif:ShutterSpeedValue", 4, 2);

        virtualinvoke r8.<com.drew.metadata.xmp.XmpReader: void processXmpDateTag(com.adobe.xmp.XMPMeta,com.drew.metadata.xmp.XmpDirectory,java.lang.String,java.lang.String,int)>($r7, r3, "http://ns.adobe.com/exif/1.0/", "exif:DateTimeOriginal", 13);

        virtualinvoke r8.<com.drew.metadata.xmp.XmpReader: void processXmpDateTag(com.adobe.xmp.XMPMeta,com.drew.metadata.xmp.XmpDirectory,java.lang.String,java.lang.String,int)>($r7, r3, "http://ns.adobe.com/exif/1.0/", "exif:DateTimeDigitized", 14);

        $r9 = interfaceinvoke $r7.<com.adobe.xmp.XMPMeta: com.adobe.xmp.XMPIterator iterator()>();

     label12:
        $z1 = interfaceinvoke $r9.<com.adobe.xmp.XMPIterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r10 = interfaceinvoke $r9.<com.adobe.xmp.XMPIterator: java.lang.Object next()>();

        r11 = (com.adobe.xmp.properties.XMPPropertyInfo) $r10;

        $r12 = interfaceinvoke r11.<com.adobe.xmp.properties.XMPPropertyInfo: java.lang.String getPath()>();

        $r13 = interfaceinvoke r11.<com.adobe.xmp.properties.XMPPropertyInfo: java.lang.String getValue()>();

        if $r12 == null goto label13;

        if $r13 == null goto label13;

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r3.<com.drew.metadata.xmp.XmpDirectory: void addProperty(java.lang.String,java.lang.String)>($r12, $r14);

     label13:
        goto label12;

     label14:
        goto label16;

     label15:
        $r17 := @caughtexception;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing XMP segment: ");

        $r20 = virtualinvoke $r17.<com.adobe.xmp.XMPException: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<com.drew.metadata.xmp.XmpDirectory: void addError(java.lang.String)>($r22);

     label16:
        return;

        catch com.drew.lang.BufferBoundsException from label03 to label04 with label05;
        catch com.drew.lang.BufferBoundsException from label07 to label08 with label09;
        catch com.adobe.xmp.XMPException from label07 to label10 with label15;
        catch com.adobe.xmp.XMPException from label11 to label14 with label15;
    }

    private void processXmpTag(com.adobe.xmp.XMPMeta, com.drew.metadata.xmp.XmpDirectory, java.lang.String, java.lang.String, int, int) throws com.adobe.xmp.XMPException
    {
        java.lang.Integer $r6, $r16, $r17;
        com.adobe.xmp.XMPMeta r0;
        com.drew.metadata.xmp.XmpDirectory r4;
        com.drew.lang.Rational $r12;
        float $f0, $f1;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.Object[] $r15, $r20, $r23, $r26;
        java.lang.Double $r5;
        java.lang.String[] $r7;
        long $l4, $l5;
        int i0, i1, $i2, $i3;
        java.lang.String r1, r2, $r3, $r11, $r13, $r14, $r18, $r21, $r24, $r27;
        com.drew.metadata.xmp.XmpReader r28;
        double $d0;
        java.lang.NumberFormatException $r19, $r22, $r25;

        r28 := @this: com.drew.metadata.xmp.XmpReader;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r4 := @parameter1: com.drew.metadata.xmp.XmpDirectory;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        i0 := @parameter5: int;

        $r3 = interfaceinvoke r0.<com.adobe.xmp.XMPMeta: java.lang.String getPropertyString(java.lang.String,java.lang.String)>(r1, r2);

        if $r3 != null goto label01;

        return;

     label01:
        tableswitch(i0)
        {
            case 1: goto label13;
            case 2: goto label02;
            case 3: goto label07;
            case 4: goto label10;
            default: goto label14;
        };

     label02:
        $r7 = virtualinvoke $r3.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("/", 2);

        $i3 = lengthof $r7;

        if $i3 != 2 goto label06;

     label03:
        $r12 = new com.drew.lang.Rational;

        $r13 = $r7[0];

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r13);

        $l4 = (long) $f0;

        $r14 = $r7[1];

        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r14);

        $l5 = (long) $f1;

        specialinvoke $r12.<com.drew.lang.Rational: void <init>(long,long)>($l4, $l5);

        virtualinvoke r4.<com.drew.metadata.xmp.XmpDirectory: void setRational(int,com.drew.lang.Rational)>(i1, $r12);

     label04:
        goto label15;

     label05:
        $r25 := @caughtexception;

        $r26 = newarray (java.lang.Object)[1];

        $r26[0] = r2;

        $r27 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unable to parse XMP property %s as a Rational.", $r26);

        virtualinvoke r4.<com.drew.metadata.xmp.XmpDirectory: void addError(java.lang.String)>($r27);

        goto label15;

     label06:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in rational format for tag ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<com.drew.metadata.xmp.XmpDirectory: void addError(java.lang.String)>($r11);

        goto label15;

     label07:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r3);

        $i2 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        virtualinvoke r4.<com.drew.metadata.xmp.XmpDirectory: void setInt(int,int)>(i1, $i2);

     label08:
        goto label15;

     label09:
        $r22 := @caughtexception;

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = r2;

        $r24 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unable to parse XMP property %s as an int.", $r23);

        virtualinvoke r4.<com.drew.metadata.xmp.XmpDirectory: void addError(java.lang.String)>($r24);

        goto label15;

     label10:
        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r3);

        $d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        virtualinvoke r4.<com.drew.metadata.xmp.XmpDirectory: void setDouble(int,double)>(i1, $d0);

     label11:
        goto label15;

     label12:
        $r19 := @caughtexception;

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = r2;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unable to parse XMP property %s as an double.", $r20);

        virtualinvoke r4.<com.drew.metadata.xmp.XmpDirectory: void addError(java.lang.String)>($r21);

        goto label15;

     label13:
        virtualinvoke r4.<com.drew.metadata.xmp.XmpDirectory: void setString(int,java.lang.String)>(i1, $r3);

        goto label15;

     label14:
        $r15 = newarray (java.lang.Object)[2];

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r15[0] = $r16;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r15[1] = $r17;

        $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unknown format code %d for tag %d", $r15);

        virtualinvoke r4.<com.drew.metadata.xmp.XmpDirectory: void addError(java.lang.String)>($r18);

     label15:
        return;

        catch java.lang.NumberFormatException from label03 to label04 with label05;
        catch java.lang.NumberFormatException from label07 to label08 with label09;
        catch java.lang.NumberFormatException from label10 to label11 with label12;
    }

    void processXmpDateTag(com.adobe.xmp.XMPMeta, com.drew.metadata.xmp.XmpDirectory, java.lang.String, java.lang.String, int) throws com.adobe.xmp.XMPException
    {
        java.util.Date $r5;
        com.adobe.xmp.XMPMeta r0;
        java.util.Calendar $r3;
        com.drew.metadata.xmp.XmpDirectory r4;
        int i0;
        java.lang.String r1, r2;
        com.drew.metadata.xmp.XmpReader r6;

        r6 := @this: com.drew.metadata.xmp.XmpReader;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r4 := @parameter1: com.drew.metadata.xmp.XmpDirectory;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        $r3 = interfaceinvoke r0.<com.adobe.xmp.XMPMeta: java.util.Calendar getPropertyCalendar(java.lang.String,java.lang.String)>(r1, r2);

        if $r3 != null goto label1;

        return;

     label1:
        $r5 = virtualinvoke $r3.<java.util.Calendar: java.util.Date getTime()>();

        virtualinvoke r4.<com.drew.metadata.xmp.XmpDirectory: void setDate(int,java.util.Date)>(i0, $r5);

        return;
    }

    public static void <clinit>()
    {
        <com.drew.metadata.xmp.XmpReader: java.lang.String SCHEMA_DUBLIN_CORE_SPECIFIC_PROPERTIES> = "http://purl.org/dc/elements/1.1/";

        <com.drew.metadata.xmp.XmpReader: java.lang.String SCHEMA_EXIF_TIFF_PROPERTIES> = "http://ns.adobe.com/tiff/1.0/";

        <com.drew.metadata.xmp.XmpReader: java.lang.String SCHEMA_EXIF_ADDITIONAL_PROPERTIES> = "http://ns.adobe.com/exif/1.0/aux/";

        <com.drew.metadata.xmp.XmpReader: java.lang.String SCHEMA_EXIF_SPECIFIC_PROPERTIES> = "http://ns.adobe.com/exif/1.0/";

        <com.drew.metadata.xmp.XmpReader: int FMT_DOUBLE> = 4;

        <com.drew.metadata.xmp.XmpReader: int FMT_INT> = 3;

        <com.drew.metadata.xmp.XmpReader: int FMT_RATIONAL> = 2;

        <com.drew.metadata.xmp.XmpReader: int FMT_STRING> = 1;

        return;
    }
}
