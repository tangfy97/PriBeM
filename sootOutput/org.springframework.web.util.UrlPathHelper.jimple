public class org.springframework.web.util.UrlPathHelper extends java.lang.Object
{
    private static final java.lang.String WEBSPHERE_URI_ATTRIBUTE;
    private static final org.apache.commons.logging.Log logger;
    static volatile java.lang.Boolean websphereComplianceFlag;
    private boolean alwaysUseFullPath;
    private boolean urlDecode;
    private java.lang.String defaultEncoding;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        <org.springframework.web.util.UrlPathHelper: java.lang.String WEBSPHERE_URI_ATTRIBUTE> = "com.ibm.websphere.servlet.uri_non_decoded";

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/web/util/UrlPathHelper;");

        <org.springframework.web.util.UrlPathHelper: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.web.util.UrlPathHelper r0;

        r0 := @this: org.springframework.web.util.UrlPathHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.web.util.UrlPathHelper: boolean alwaysUseFullPath> = 0;

        r0.<org.springframework.web.util.UrlPathHelper: boolean urlDecode> = 1;

        r0.<org.springframework.web.util.UrlPathHelper: java.lang.String defaultEncoding> = "ISO-8859-1";

        return;
    }

    public void setAlwaysUseFullPath(boolean)
    {
        org.springframework.web.util.UrlPathHelper r0;
        boolean z0;

        r0 := @this: org.springframework.web.util.UrlPathHelper;

        z0 := @parameter0: boolean;

        r0.<org.springframework.web.util.UrlPathHelper: boolean alwaysUseFullPath> = z0;

        return;
    }

    public void setUrlDecode(boolean)
    {
        org.springframework.web.util.UrlPathHelper r0;
        boolean z0;

        r0 := @this: org.springframework.web.util.UrlPathHelper;

        z0 := @parameter0: boolean;

        r0.<org.springframework.web.util.UrlPathHelper: boolean urlDecode> = z0;

        return;
    }

    public void setDefaultEncoding(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.web.util.UrlPathHelper r0;

        r0 := @this: org.springframework.web.util.UrlPathHelper;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.web.util.UrlPathHelper: java.lang.String defaultEncoding> = r1;

        return;
    }

    protected java.lang.String getDefaultEncoding()
    {
        java.lang.String $r1;
        org.springframework.web.util.UrlPathHelper r0;

        r0 := @this: org.springframework.web.util.UrlPathHelper;

        $r1 = r0.<org.springframework.web.util.UrlPathHelper: java.lang.String defaultEncoding>;

        return $r1;
    }

    public java.lang.String getLookupPathForRequest(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r1;
        org.springframework.web.util.UrlPathHelper r0;
        java.lang.String $r2, $r3, $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: org.springframework.web.util.UrlPathHelper;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        $z0 = r0.<org.springframework.web.util.UrlPathHelper: boolean alwaysUseFullPath>;

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.springframework.web.util.UrlPathHelper: java.lang.String getPathWithinApplication(javax.servlet.http.HttpServletRequest)>(r1);

        return $r5;

     label1:
        $r2 = virtualinvoke r0.<org.springframework.web.util.UrlPathHelper: java.lang.String getPathWithinServletMapping(javax.servlet.http.HttpServletRequest)>(r1);

        $r3 = "";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 != 0 goto label2;

        return $r2;

     label2:
        $r4 = virtualinvoke r0.<org.springframework.web.util.UrlPathHelper: java.lang.String getPathWithinApplication(javax.servlet.http.HttpServletRequest)>(r1);

        return $r4;
    }

    public java.lang.String getPathWithinServletMapping(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r1;
        org.springframework.web.util.UrlPathHelper r0;
        int $i0;
        java.lang.String $r2, $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @this: org.springframework.web.util.UrlPathHelper;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r2 = virtualinvoke r0.<org.springframework.web.util.UrlPathHelper: java.lang.String getPathWithinApplication(javax.servlet.http.HttpServletRequest)>(r1);

        $r3 = virtualinvoke r0.<org.springframework.web.util.UrlPathHelper: java.lang.String getServletPath(javax.servlet.http.HttpServletRequest)>(r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>($r3);

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r5 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r5;

     label1:
        $r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>();

        if $r4 == null goto label2;

        $r6 = $r4;

        goto label3;

     label2:
        $r6 = $r3;

     label3:
        return $r6;
    }

    public java.lang.String getPathWithinApplication(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r1;
        org.springframework.web.util.UrlPathHelper r0;
        int $i0;
        java.lang.String $r2, $r3, $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: org.springframework.web.util.UrlPathHelper;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r2 = virtualinvoke r0.<org.springframework.web.util.UrlPathHelper: java.lang.String getContextPath(javax.servlet.http.HttpServletRequest)>(r1);

        $r3 = virtualinvoke r0.<org.springframework.web.util.UrlPathHelper: java.lang.String getRequestUri(javax.servlet.http.HttpServletRequest)>(r1);

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean startsWithIgnoreCase(java.lang.String,java.lang.String)>($r3, $r2);

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i0);

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r4);

        if $z1 == 0 goto label1;

        $r5 = $r4;

        goto label2;

     label1:
        $r5 = "/";

     label2:
        return $r5;

     label3:
        return $r3;
    }

    public java.lang.String getRequestUri(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r0;
        org.springframework.web.util.UrlPathHelper r2;
        java.lang.Object $r1;
        java.lang.String $r3, r4;

        r2 := @this: org.springframework.web.util.UrlPathHelper;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.include.request_uri");

        r4 = (java.lang.String) $r1;

        if r4 != null goto label1;

        r4 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>();

     label1:
        $r3 = specialinvoke r2.<org.springframework.web.util.UrlPathHelper: java.lang.String decodeAndCleanUriString(javax.servlet.http.HttpServletRequest,java.lang.String)>(r0, r4);

        return $r3;
    }

    public java.lang.String getContextPath(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r0;
        org.springframework.web.util.UrlPathHelper r3;
        java.lang.Object $r1;
        java.lang.String $r2, $r4, r5;
        boolean $z0;

        r3 := @this: org.springframework.web.util.UrlPathHelper;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.include.context_path");

        r5 = (java.lang.String) $r1;

        if r5 != null goto label1;

        r5 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getContextPath()>();

     label1:
        $r2 = "/";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label2;

        r5 = "";

     label2:
        $r4 = virtualinvoke r3.<org.springframework.web.util.UrlPathHelper: java.lang.String decodeRequestString(javax.servlet.http.HttpServletRequest,java.lang.String)>(r0, r5);

        return $r4;
    }

    public java.lang.String getServletPath(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r0;
        org.springframework.web.util.UrlPathHelper r2;
        int $i0, $i1, $i2;
        java.lang.Object $r1;
        java.lang.String r3;
        boolean $z0, $z1;

        r2 := @this: org.springframework.web.util.UrlPathHelper;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.include.servlet_path");

        r3 = (java.lang.String) $r1;

        if r3 != null goto label1;

        r3 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getServletPath()>();

     label1:
        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 <= 1 goto label2;

        $z0 = virtualinvoke r3.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 == 0 goto label2;

        $z1 = specialinvoke r2.<org.springframework.web.util.UrlPathHelper: boolean shouldRemoveTrailingServletPathSlash(javax.servlet.http.HttpServletRequest)>(r0);

        if $z1 == 0 goto label2;

        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

     label2:
        return r3;
    }

    public java.lang.String getOriginatingRequestUri(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r0;
        org.springframework.web.util.UrlPathHelper r2;
        java.lang.Object $r1, $r3;
        java.lang.String r4, $r5;

        r2 := @this: org.springframework.web.util.UrlPathHelper;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>("com.ibm.websphere.servlet.uri_non_decoded");

        r4 = (java.lang.String) $r1;

        if r4 != null goto label1;

        $r3 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.forward.request_uri");

        r4 = (java.lang.String) $r3;

        if r4 != null goto label1;

        r4 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>();

     label1:
        $r5 = specialinvoke r2.<org.springframework.web.util.UrlPathHelper: java.lang.String decodeAndCleanUriString(javax.servlet.http.HttpServletRequest,java.lang.String)>(r0, r4);

        return $r5;
    }

    public java.lang.String getOriginatingContextPath(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r0;
        org.springframework.web.util.UrlPathHelper r2;
        java.lang.Object $r1;
        java.lang.String $r3, r4;

        r2 := @this: org.springframework.web.util.UrlPathHelper;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.forward.context_path");

        r4 = (java.lang.String) $r1;

        if r4 != null goto label1;

        r4 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getContextPath()>();

     label1:
        $r3 = virtualinvoke r2.<org.springframework.web.util.UrlPathHelper: java.lang.String decodeRequestString(javax.servlet.http.HttpServletRequest,java.lang.String)>(r0, r4);

        return $r3;
    }

    public java.lang.String getOriginatingQueryString(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r0;
        org.springframework.web.util.UrlPathHelper r2;
        java.lang.Object $r1;
        java.lang.String r3;

        r2 := @this: org.springframework.web.util.UrlPathHelper;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>("javax.servlet.forward.query_string");

        r3 = (java.lang.String) $r1;

        if r3 != null goto label1;

        r3 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getQueryString()>();

     label1:
        return r3;
    }

    private java.lang.String decodeAndCleanUriString(javax.servlet.http.HttpServletRequest, java.lang.String)
    {
        javax.servlet.http.HttpServletRequest r1;
        org.springframework.web.util.UrlPathHelper r0;
        int $i0, $i2;
        java.lang.String $r2, r3, $r4;

        r0 := @this: org.springframework.web.util.UrlPathHelper;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.web.util.UrlPathHelper: java.lang.String decodeRequestString(javax.servlet.http.HttpServletRequest,java.lang.String)>(r1, r3);

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(59);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        goto label2;

     label1:
        $r4 = $r2;

     label2:
        return $r4;
    }

    public java.lang.String decodeRequestString(javax.servlet.http.HttpServletRequest, java.lang.String)
    {
        javax.servlet.http.HttpServletRequest r2;
        java.lang.String r1, $r3, $r4, $r7, $r14, $r16;
        boolean $z0, $z1;
        org.springframework.web.util.UrlPathHelper r0;
        org.apache.commons.logging.Log $r6, $r9;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13, $r15;
        java.io.UnsupportedEncodingException $r5;

        r0 := @this: org.springframework.web.util.UrlPathHelper;

        r2 := @parameter0: javax.servlet.http.HttpServletRequest;

        r1 := @parameter1: java.lang.String;

        $z0 = r0.<org.springframework.web.util.UrlPathHelper: boolean urlDecode>;

        if $z0 == 0 goto label5;

        $r3 = virtualinvoke r0.<org.springframework.web.util.UrlPathHelper: java.lang.String determineEncoding(javax.servlet.http.HttpServletRequest)>(r2);

     label1:
        $r4 = staticinvoke <org.springframework.web.util.UriUtils: java.lang.String decode(java.lang.String,java.lang.String)>(r1, $r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = <org.springframework.web.util.UrlPathHelper: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z1 == 0 goto label4;

        $r9 = <org.springframework.web.util.UrlPathHelper: org.apache.commons.logging.Log logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not decode request string [");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] with encoding \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': falling back to platform default encoding; exception message: ");

        $r14 = virtualinvoke $r5.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r16);

     label4:
        $r7 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String)>(r1);

        return $r7;

     label5:
        return r1;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    protected java.lang.String determineEncoding(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r0;
        org.springframework.web.util.UrlPathHelper r2;
        java.lang.String $r1, r3;

        r2 := @this: org.springframework.web.util.UrlPathHelper;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getCharacterEncoding()>();

        r3 = $r1;

        if $r1 != null goto label1;

        r3 = virtualinvoke r2.<org.springframework.web.util.UrlPathHelper: java.lang.String getDefaultEncoding()>();

     label1:
        return r3;
    }

    private boolean shouldRemoveTrailingServletPathSlash(javax.servlet.http.HttpServletRequest)
    {
        java.lang.Throwable $r12;
        java.lang.Object[] $r8;
        javax.servlet.http.HttpServletRequest r0;
        java.lang.Boolean $r2, $r19, $r20;
        java.lang.String $r11, $r17;
        java.lang.reflect.Method $r7;
        boolean $z0, z1, $z2, $z3;
        java.util.Properties r10;
        java.lang.Class[] $r6;
        org.springframework.web.util.UrlPathHelper r18;
        java.lang.Object $r1, $r9;
        java.lang.Class $r3, $r5;
        org.apache.commons.logging.Log $r13, $r15;
        java.lang.StringBuilder $r14, $r16;
        java.lang.ClassLoader $r4;

        r18 := @this: org.springframework.web.util.UrlPathHelper;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>("com.ibm.websphere.servlet.uri_non_decoded");

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = <org.springframework.web.util.UrlPathHelper: java.lang.Boolean websphereComplianceFlag>;

        if $r2 != null goto label6;

        $r3 = class "Lorg/springframework/web/util/UrlPathHelper;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        z1 = 0;

     label2:
        $r5 = virtualinvoke $r4.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("com.ibm.ws.webcontainer.WebContainer");

        $r6 = newarray (java.lang.Class)[0];

        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getWebContainerProperties", $r6);

        $r8 = newarray (java.lang.Object)[0];

        $r9 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r8);

        r10 = (java.util.Properties) $r9;

        $r11 = virtualinvoke r10.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("com.ibm.ws.webcontainer.removetrailingservletpathslash");

        z1 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r11);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        $r13 = <org.springframework.web.util.UrlPathHelper: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r13.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label5;

        $r15 = <org.springframework.web.util.UrlPathHelper: org.apache.commons.logging.Log logger>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not introspect WebSphere web container properties: ");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r17);

     label5:
        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        <org.springframework.web.util.UrlPathHelper: java.lang.Boolean websphereComplianceFlag> = $r19;

     label6:
        $r20 = <org.springframework.web.util.UrlPathHelper: java.lang.Boolean websphereComplianceFlag>;

        $z2 = virtualinvoke $r20.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 == 0 goto label7;

        $z3 = 0;

        goto label8;

     label7:
        $z3 = 1;

     label8:
        return $z3;

        catch java.lang.Throwable from label2 to label3 with label4;
    }
}
