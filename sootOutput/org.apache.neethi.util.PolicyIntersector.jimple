public class org.apache.neethi.util.PolicyIntersector extends java.lang.Object
{
    private boolean strict;

    public void <init>()
    {
        org.apache.neethi.util.PolicyIntersector r0;

        r0 := @this: org.apache.neethi.util.PolicyIntersector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.neethi.util.PolicyIntersector: boolean strict> = 1;

        return;
    }

    public void <init>(boolean)
    {
        org.apache.neethi.util.PolicyIntersector r0;
        boolean z0;

        r0 := @this: org.apache.neethi.util.PolicyIntersector;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.neethi.util.PolicyIntersector: boolean strict> = z0;

        return;
    }

    public boolean isStrict()
    {
        org.apache.neethi.util.PolicyIntersector r0;
        boolean $z0;

        r0 := @this: org.apache.neethi.util.PolicyIntersector;

        $z0 = r0.<org.apache.neethi.util.PolicyIntersector: boolean strict>;

        return $z0;
    }

    public void setStrict(boolean)
    {
        org.apache.neethi.util.PolicyIntersector r0;
        boolean z0;

        r0 := @this: org.apache.neethi.util.PolicyIntersector;

        z0 := @parameter0: boolean;

        r0.<org.apache.neethi.util.PolicyIntersector: boolean strict> = z0;

        return;
    }

    private org.apache.neethi.Assertion intersect(org.apache.neethi.Assertion, org.apache.neethi.Assertion)
    {
        org.apache.neethi.util.PolicyIntersector $r8, r9;
        org.apache.neethi.IntersectableAssertion $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.neethi.Assertion r0, r2, $r12;
        org.apache.neethi.Policy $r6, $r7;
        org.apache.neethi.PolicyContainingAssertion r4, r5;
        javax.xml.namespace.QName $r1, $r3;

        r9 := @this: org.apache.neethi.util.PolicyIntersector;

        r0 := @parameter0: org.apache.neethi.Assertion;

        r2 := @parameter1: org.apache.neethi.Assertion;

        $z0 = r0 instanceof org.apache.neethi.IntersectableAssertion;

        if $z0 == 0 goto label2;

        $r10 = (org.apache.neethi.IntersectableAssertion) r0;

        $z6 = r9.<org.apache.neethi.util.PolicyIntersector: boolean strict>;

        $z7 = interfaceinvoke $r10.<org.apache.neethi.IntersectableAssertion: boolean isCompatible(org.apache.neethi.Assertion,boolean)>(r2, $z6);

        if $z7 != 0 goto label1;

        return null;

     label1:
        $r11 = (org.apache.neethi.IntersectableAssertion) r0;

        $z8 = r9.<org.apache.neethi.util.PolicyIntersector: boolean strict>;

        $r12 = interfaceinvoke $r11.<org.apache.neethi.IntersectableAssertion: org.apache.neethi.Assertion intersect(org.apache.neethi.Assertion,boolean)>(r2, $z8);

        return $r12;

     label2:
        $r1 = interfaceinvoke r0.<org.apache.neethi.Assertion: javax.xml.namespace.QName getName()>();

        $r3 = interfaceinvoke r2.<org.apache.neethi.Assertion: javax.xml.namespace.QName getName()>();

        $z1 = virtualinvoke $r1.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label5;

        $z2 = r0 instanceof org.apache.neethi.PolicyContainingAssertion;

        if $z2 == 0 goto label4;

        $z3 = r2 instanceof org.apache.neethi.PolicyContainingAssertion;

        if $z3 == 0 goto label4;

        r4 = (org.apache.neethi.PolicyContainingAssertion) r0;

        r5 = (org.apache.neethi.PolicyContainingAssertion) r2;

        $r6 = interfaceinvoke r4.<org.apache.neethi.PolicyContainingAssertion: org.apache.neethi.Policy getPolicy()>();

        $r7 = interfaceinvoke r5.<org.apache.neethi.PolicyContainingAssertion: org.apache.neethi.Policy getPolicy()>();

        $r8 = new org.apache.neethi.util.PolicyIntersector;

        $z4 = r9.<org.apache.neethi.util.PolicyIntersector: boolean strict>;

        specialinvoke $r8.<org.apache.neethi.util.PolicyIntersector: void <init>(boolean)>($z4);

        $z5 = virtualinvoke $r8.<org.apache.neethi.util.PolicyIntersector: boolean compatiblePolicies(org.apache.neethi.Policy,org.apache.neethi.Policy)>($r6, $r7);

        if $z5 == 0 goto label3;

        return r0;

     label3:
        goto label5;

     label4:
        return r0;

     label5:
        return null;
    }

    private org.apache.neethi.Assertion findCompatibleAssertion(org.apache.neethi.Assertion, java.util.Collection, boolean)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        org.apache.neethi.Assertion r5, $r6, $r7;
        org.apache.neethi.util.PolicyIntersector r4;
        org.apache.neethi.PolicyComponent r3;
        java.lang.Object $r2;
        boolean $z0, $z1, z2;

        r4 := @this: org.apache.neethi.util.PolicyIntersector;

        r5 := @parameter0: org.apache.neethi.Assertion;

        r0 := @parameter1: java.util.Collection;

        z2 := @parameter2: boolean;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.neethi.PolicyComponent) $r2;

        $z1 = r3 instanceof org.apache.neethi.Assertion;

        if $z1 == 0 goto label3;

        $r6 = (org.apache.neethi.Assertion) r3;

        $r7 = specialinvoke r4.<org.apache.neethi.util.PolicyIntersector: org.apache.neethi.Assertion intersect(org.apache.neethi.Assertion,org.apache.neethi.Assertion)>(r5, $r6);

        if null == $r7 goto label3;

        if z2 == 0 goto label2;

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

     label2:
        return $r7;

     label3:
        goto label1;

     label4:
        return null;
    }

    boolean compatibleAlternatives(java.util.Collection, java.util.Collection)
    {
        org.apache.neethi.All $r3;
        java.util.Collection r0, r2;
        org.apache.neethi.util.PolicyIntersector r1;
        java.util.List $r4;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.apache.neethi.util.PolicyIntersector;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.util.Collection;

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $z2 = interfaceinvoke r2.<java.util.Collection: boolean isEmpty()>();

        if $z2 == 0 goto label1;

        return 1;

     label1:
        $r3 = virtualinvoke r1.<org.apache.neethi.util.PolicyIntersector: org.apache.neethi.All createCompatibleAlternatives(java.util.Collection,java.util.Collection,boolean)>(r0, r2, 1);

        if $r3 != null goto label2;

        return 0;

     label2:
        $r4 = virtualinvoke $r3.<org.apache.neethi.All: java.util.List getAssertions()>();

        $z1 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    org.apache.neethi.All createCompatibleAlternatives(java.util.Collection, java.util.Collection, boolean)
    {
        org.apache.neethi.util.PolicyIntersector r6;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.util.Collection r16, r17;
        org.apache.neethi.Assertion $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15;
        java.util.ArrayList $r1, $r2;
        org.apache.neethi.All $r0;
        java.util.Iterator $r3, $r4;
        org.apache.neethi.PolicyComponent r18, r19;
        java.lang.Object $r5, $r11;

        r6 := @this: org.apache.neethi.util.PolicyIntersector;

        r16 := @parameter0: java.util.Collection;

        r17 := @parameter1: java.util.Collection;

        z3 := @parameter2: boolean;

        $r0 = new org.apache.neethi.All;

        specialinvoke $r0.<org.apache.neethi.All: void <init>()>();

        $z0 = interfaceinvoke r16.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $z13 = interfaceinvoke r17.<java.util.Collection: boolean isEmpty()>();

        if $z13 == 0 goto label01;

        return $r0;

     label01:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r16);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r17);

        $r3 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z14 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label08;

        $r11 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.apache.neethi.PolicyComponent) $r11;

        $z8 = r18 instanceof org.apache.neethi.Assertion;

        if $z8 == 0 goto label07;

        $r12 = (org.apache.neethi.Assertion) r18;

        $r13 = specialinvoke r6.<org.apache.neethi.util.PolicyIntersector: org.apache.neethi.Assertion findCompatibleAssertion(org.apache.neethi.Assertion,java.util.Collection,boolean)>($r12, $r2, z3);

        if $r13 == null goto label04;

        if z3 == 0 goto label03;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

     label03:
        virtualinvoke $r0.<org.apache.neethi.All: void addPolicyComponent(org.apache.neethi.PolicyComponent)>($r13);

        goto label07;

     label04:
        $z9 = r6.<org.apache.neethi.util.PolicyIntersector: boolean strict>;

        if $z9 != 0 goto label05;

        $r15 = (org.apache.neethi.Assertion) r18;

        $z12 = interfaceinvoke $r15.<org.apache.neethi.Assertion: boolean isIgnorable()>();

        if $z12 == 0 goto label05;

        virtualinvoke $r0.<org.apache.neethi.All: void addPolicyComponent(org.apache.neethi.PolicyComponent)>(r18);

        goto label07;

     label05:
        $z10 = r6.<org.apache.neethi.util.PolicyIntersector: boolean strict>;

        if $z10 != 0 goto label06;

        $r14 = (org.apache.neethi.Assertion) r18;

        $z11 = interfaceinvoke $r14.<org.apache.neethi.Assertion: boolean isIgnorable()>();

        if $z11 != 0 goto label07;

     label06:
        return null;

     label07:
        goto label02;

     label08:
        $r4 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.neethi.PolicyComponent) $r5;

        $z2 = r19 instanceof org.apache.neethi.Assertion;

        if $z2 == 0 goto label13;

        $r7 = (org.apache.neethi.Assertion) r19;

        $r8 = specialinvoke r6.<org.apache.neethi.util.PolicyIntersector: org.apache.neethi.Assertion findCompatibleAssertion(org.apache.neethi.Assertion,java.util.Collection,boolean)>($r7, $r1, z3);

        if $r8 == null goto label10;

        virtualinvoke $r0.<org.apache.neethi.All: void addPolicyComponent(org.apache.neethi.PolicyComponent)>($r8);

        goto label13;

     label10:
        $z4 = r6.<org.apache.neethi.util.PolicyIntersector: boolean strict>;

        if $z4 != 0 goto label11;

        $r10 = (org.apache.neethi.Assertion) r19;

        $z7 = interfaceinvoke $r10.<org.apache.neethi.Assertion: boolean isIgnorable()>();

        if $z7 == 0 goto label11;

        virtualinvoke $r0.<org.apache.neethi.All: void addPolicyComponent(org.apache.neethi.PolicyComponent)>(r19);

        goto label13;

     label11:
        $z5 = r6.<org.apache.neethi.util.PolicyIntersector: boolean strict>;

        if $z5 != 0 goto label12;

        $r9 = (org.apache.neethi.Assertion) r19;

        $z6 = interfaceinvoke $r9.<org.apache.neethi.Assertion: boolean isIgnorable()>();

        if $z6 != 0 goto label13;

     label12:
        return null;

     label13:
        goto label09;

     label14:
        return $r0;
    }

    public boolean compatiblePolicies(org.apache.neethi.Policy, org.apache.neethi.Policy)
    {
        java.util.Iterator $r1, $r5;
        org.apache.neethi.util.PolicyIntersector r8;
        org.apache.neethi.Policy r0, r4;
        java.util.List r3, r7;
        java.lang.Object $r2, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r8 := @this: org.apache.neethi.util.PolicyIntersector;

        r0 := @parameter0: org.apache.neethi.Policy;

        r4 := @parameter1: org.apache.neethi.Policy;

        $r1 = virtualinvoke r0.<org.apache.neethi.Policy: java.util.Iterator getAlternatives()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.List) $r2;

        $r5 = virtualinvoke r4.<org.apache.neethi.Policy: java.util.Iterator getAlternatives()>();

        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $z3 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label1;

        return 1;

     label1:
        $z4 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.List) $r6;

        $z2 = virtualinvoke r8.<org.apache.neethi.util.PolicyIntersector: boolean compatibleAlternatives(java.util.Collection,java.util.Collection)>(r3, r7);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;

     label4:
        return 1;
    }

    public org.apache.neethi.Policy intersect(org.apache.neethi.Policy, org.apache.neethi.Policy)
    {
        org.apache.neethi.util.PolicyIntersector r0;
        org.apache.neethi.Policy r1, r2, $r3;

        r0 := @this: org.apache.neethi.util.PolicyIntersector;

        r1 := @parameter0: org.apache.neethi.Policy;

        r2 := @parameter1: org.apache.neethi.Policy;

        $r3 = virtualinvoke r0.<org.apache.neethi.util.PolicyIntersector: org.apache.neethi.Policy intersect(org.apache.neethi.Policy,org.apache.neethi.Policy,boolean)>(r1, r2, 0);

        return $r3;
    }

    public org.apache.neethi.Policy intersect(org.apache.neethi.Policy, org.apache.neethi.Policy, boolean)
    {
        org.apache.neethi.util.PolicyIntersector r5;
        org.apache.neethi.PolicyRegistry $r2;
        java.lang.String $r3;
        boolean $z0, $z1, $z2, z3, $z4;
        java.util.Iterator $r7, $r10;
        org.apache.neethi.All $r13;
        org.apache.neethi.Policy $r0, r1, r6;
        org.apache.neethi.ExactlyOne $r4;
        java.util.List r9, r12;
        java.lang.Object $r8, $r11;

        r5 := @this: org.apache.neethi.util.PolicyIntersector;

        r1 := @parameter0: org.apache.neethi.Policy;

        r6 := @parameter1: org.apache.neethi.Policy;

        z3 := @parameter2: boolean;

        $r0 = new org.apache.neethi.Policy;

        $r2 = virtualinvoke r1.<org.apache.neethi.Policy: org.apache.neethi.PolicyRegistry getPolicyRegistry()>();

        $r3 = virtualinvoke r1.<org.apache.neethi.Policy: java.lang.String getNamespace()>();

        specialinvoke $r0.<org.apache.neethi.Policy: void <init>(org.apache.neethi.PolicyRegistry,java.lang.String)>($r2, $r3);

        $r4 = new org.apache.neethi.ExactlyOne;

        specialinvoke $r4.<org.apache.neethi.ExactlyOne: void <init>(org.apache.neethi.PolicyOperator)>($r0);

        $z0 = virtualinvoke r5.<org.apache.neethi.util.PolicyIntersector: boolean compatiblePolicies(org.apache.neethi.Policy,org.apache.neethi.Policy)>(r1, r6);

        if $z0 != 0 goto label1;

        return $r0;

     label1:
        $r7 = virtualinvoke r1.<org.apache.neethi.Policy: java.util.Iterator getAlternatives()>();

     label2:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.List) $r8;

        $r10 = virtualinvoke r6.<org.apache.neethi.Policy: java.util.Iterator getAlternatives()>();

     label3:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.List) $r11;

        if z3 != 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        $r13 = virtualinvoke r5.<org.apache.neethi.util.PolicyIntersector: org.apache.neethi.All createCompatibleAlternatives(java.util.Collection,java.util.Collection,boolean)>(r9, r12, $z4);

        if $r13 == null goto label6;

        virtualinvoke $r4.<org.apache.neethi.ExactlyOne: void addPolicyComponent(org.apache.neethi.PolicyComponent)>($r13);

     label6:
        goto label3;

     label7:
        goto label2;

     label8:
        return $r0;
    }
}
