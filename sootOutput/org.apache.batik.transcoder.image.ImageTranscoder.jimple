public abstract class org.apache.batik.transcoder.image.ImageTranscoder extends org.apache.batik.transcoder.SVGAbstractTranscoder
{
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_BACKGROUND_COLOR;
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_FORCE_TRANSPARENT_WHITE;

    protected void <init>()
    {
        org.apache.batik.transcoder.image.ImageTranscoder r0;

        r0 := @this: org.apache.batik.transcoder.image.ImageTranscoder;

        specialinvoke r0.<org.apache.batik.transcoder.SVGAbstractTranscoder: void <init>()>();

        return;
    }

    protected void transcode(org.w3c.dom.Document, java.lang.String, org.apache.batik.transcoder.TranscoderOutput) throws org.apache.batik.transcoder.TranscoderException
    {
        java.awt.geom.Rectangle2D$Float $r7;
        org.w3c.dom.Document r1;
        org.apache.batik.transcoder.TranscodingHints$Key $r14, $r17;
        boolean $z0;
        java.awt.Shape $r10;
        java.awt.image.BufferedImage $r11, $r12;
        org.apache.batik.gvt.GraphicsNode $r6;
        java.awt.geom.AffineTransform $r5, $r8, $r9, $r16;
        java.lang.Exception $r22;
        org.apache.batik.transcoder.TranscodingHints $r15, $r18;
        org.apache.batik.transcoder.image.ImageTranscoder r0;
        java.awt.Paint r20;
        float $f0, $f1, $f2, $f3;
        org.apache.batik.gvt.renderer.ImageRenderer $r4;
        java.awt.AlphaComposite $r21;
        java.awt.Graphics2D $r13;
        int i0, i1;
        java.lang.String r2;
        double $d0, $d1, $d2, $d3;
        org.apache.batik.transcoder.TranscoderOutput r3;
        org.apache.batik.transcoder.TranscoderException $r23;
        java.lang.Object $r19;

        r0 := @this: org.apache.batik.transcoder.image.ImageTranscoder;

        r1 := @parameter0: org.w3c.dom.Document;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.batik.transcoder.TranscoderOutput;

        specialinvoke r0.<org.apache.batik.transcoder.SVGAbstractTranscoder: void transcode(org.w3c.dom.Document,java.lang.String,org.apache.batik.transcoder.TranscoderOutput)>(r1, r2, r3);

        $f0 = r0.<org.apache.batik.transcoder.SVGAbstractTranscoder: float width>;

        $d0 = (double) $f0;

        $d1 = $d0 + 0.5;

        i0 = (int) $d1;

        $f1 = r0.<org.apache.batik.transcoder.SVGAbstractTranscoder: float height>;

        $d2 = (double) $f1;

        $d3 = $d2 + 0.5;

        i1 = (int) $d3;

        $r4 = virtualinvoke r0.<org.apache.batik.transcoder.image.ImageTranscoder: org.apache.batik.gvt.renderer.ImageRenderer createRenderer()>();

        interfaceinvoke $r4.<org.apache.batik.gvt.renderer.ImageRenderer: void updateOffScreen(int,int)>(i0, i1);

        $r5 = r0.<org.apache.batik.transcoder.SVGAbstractTranscoder: java.awt.geom.AffineTransform curTxf>;

        interfaceinvoke $r4.<org.apache.batik.gvt.renderer.ImageRenderer: void setTransform(java.awt.geom.AffineTransform)>($r5);

        $r6 = r0.<org.apache.batik.transcoder.SVGAbstractTranscoder: org.apache.batik.gvt.GraphicsNode root>;

        interfaceinvoke $r4.<org.apache.batik.gvt.renderer.Renderer: void setTree(org.apache.batik.gvt.GraphicsNode)>($r6);

        r0.<org.apache.batik.transcoder.SVGAbstractTranscoder: org.apache.batik.gvt.GraphicsNode root> = null;

     label1:
        $r7 = new java.awt.geom.Rectangle2D$Float;

        $f3 = r0.<org.apache.batik.transcoder.SVGAbstractTranscoder: float width>;

        $f2 = r0.<org.apache.batik.transcoder.SVGAbstractTranscoder: float height>;

        specialinvoke $r7.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(0.0F, 0.0F, $f3, $f2);

        $r8 = r0.<org.apache.batik.transcoder.SVGAbstractTranscoder: java.awt.geom.AffineTransform curTxf>;

        $r9 = virtualinvoke $r8.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

        $r10 = virtualinvoke $r9.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r7);

        interfaceinvoke $r4.<org.apache.batik.gvt.renderer.Renderer: void repaint(java.awt.Shape)>($r10);

        $r11 = interfaceinvoke $r4.<org.apache.batik.gvt.renderer.ImageRenderer: java.awt.image.BufferedImage getOffScreen()>();

        $r12 = virtualinvoke r0.<org.apache.batik.transcoder.image.ImageTranscoder: java.awt.image.BufferedImage createImage(int,int)>(i0, i1);

        $r13 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.Graphics2D createGraphics(java.awt.image.BufferedImage)>($r12);

        $r15 = r0.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r14 = <org.apache.batik.transcoder.image.ImageTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_BACKGROUND_COLOR>;

        $z0 = virtualinvoke $r15.<org.apache.batik.transcoder.TranscodingHints: boolean containsKey(java.lang.Object)>($r14);

        if $z0 == 0 goto label2;

        $r18 = r0.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r17 = <org.apache.batik.transcoder.image.ImageTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_BACKGROUND_COLOR>;

        $r19 = virtualinvoke $r18.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object get(java.lang.Object)>($r17);

        r20 = (java.awt.Paint) $r19;

        $r21 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;

        virtualinvoke $r13.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r21);

        virtualinvoke $r13.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r20);

        virtualinvoke $r13.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, i0, i1);

     label2:
        if $r11 == null goto label3;

        $r16 = new java.awt.geom.AffineTransform;

        specialinvoke $r16.<java.awt.geom.AffineTransform: void <init>()>();

        virtualinvoke $r13.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>($r11, $r16);

     label3:
        virtualinvoke $r13.<java.awt.Graphics: void dispose()>();

        virtualinvoke r0.<org.apache.batik.transcoder.image.ImageTranscoder: void writeImage(java.awt.image.BufferedImage,org.apache.batik.transcoder.TranscoderOutput)>($r12, r3);

     label4:
        goto label6;

     label5:
        $r22 := @caughtexception;

        $r23 = new org.apache.batik.transcoder.TranscoderException;

        specialinvoke $r23.<org.apache.batik.transcoder.TranscoderException: void <init>(java.lang.Exception)>($r22);

        throw $r23;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    protected org.apache.batik.gvt.renderer.ImageRenderer createRenderer()
    {
        org.apache.batik.gvt.renderer.ConcreteImageRendererFactory $r0;
        org.apache.batik.transcoder.image.ImageTranscoder r2;
        org.apache.batik.gvt.renderer.ImageRenderer $r1;

        r2 := @this: org.apache.batik.transcoder.image.ImageTranscoder;

        $r0 = new org.apache.batik.gvt.renderer.ConcreteImageRendererFactory;

        specialinvoke $r0.<org.apache.batik.gvt.renderer.ConcreteImageRendererFactory: void <init>()>();

        $r1 = interfaceinvoke $r0.<org.apache.batik.gvt.renderer.ImageRendererFactory: org.apache.batik.gvt.renderer.ImageRenderer createStaticImageRenderer()>();

        return $r1;
    }

    protected void forceTransparentWhite(java.awt.image.BufferedImage, java.awt.image.SinglePixelPackedSampleModel)
    {
        int[][] $r5;
        int[] r6;
        java.awt.image.BufferedImage r0;
        org.apache.batik.transcoder.image.ImageTranscoder r7;
        java.awt.image.DataBuffer $r2;
        java.awt.image.DataBufferInt r3;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, $i43;
        java.awt.image.SinglePixelPackedSampleModel r4;
        java.awt.image.WritableRaster $r1;

        r7 := @this: org.apache.batik.transcoder.image.ImageTranscoder;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r4 := @parameter1: java.awt.image.SinglePixelPackedSampleModel;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        $r1 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r2 = virtualinvoke $r1.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r3 = (java.awt.image.DataBufferInt) $r2;

        $i2 = virtualinvoke r4.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $i3 = virtualinvoke r3.<java.awt.image.DataBuffer: int getOffset()>();

        $r5 = virtualinvoke r3.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        r6 = $r5[0];

        i31 = $i3;

        i4 = $i2 - $i0;

        i32 = 0;

        goto label4;

     label1:
        i33 = 0;

        goto label3;

     label2:
        i34 = r6[i31];

        $i5 = i34 >> 24;

        i35 = $i5 & 255;

        $i6 = i34 >> 16;

        i36 = $i6 & 255;

        $i7 = i34 >> 8;

        i37 = $i7 & 255;

        i38 = i34 & 255;

        $i8 = 255 - i35;

        $i10 = 255 * $i8;

        $i9 = i35 * i36;

        $i11 = $i10 + $i9;

        i39 = $i11 / 255;

        $i12 = 255 - i35;

        $i14 = 255 * $i12;

        $i13 = i35 * i37;

        $i15 = $i14 + $i13;

        i40 = $i15 / 255;

        $i16 = 255 - i35;

        $i18 = 255 * $i16;

        $i17 = i35 * i38;

        $i19 = $i18 + $i17;

        i41 = $i19 / 255;

        $i20 = i31;

        i31 = i31 + 1;

        $i21 = i35 << 24;

        $i24 = $i21 & -16777216;

        $i22 = i39 << 16;

        $i23 = $i22 & 16711680;

        $i27 = $i24 | $i23;

        $i25 = i40 << 8;

        $i43 = (int) 65280;

        $i26 = $i25 & $i43;

        $i29 = $i27 | $i26;

        $i28 = i41 & 255;

        $i30 = $i29 | $i28;

        r6[$i20] = $i30;

        i33 = i33 + 1;

     label3:
        if i33 < $i0 goto label2;

        i31 = i31 + i4;

        i32 = i32 + 1;

     label4:
        if i32 < $i1 goto label1;

        return;
    }

    public abstract java.awt.image.BufferedImage createImage(int, int);

    public abstract void writeImage(java.awt.image.BufferedImage, org.apache.batik.transcoder.TranscoderOutput) throws org.apache.batik.transcoder.TranscoderException;

    static void <clinit>()
    {
        org.apache.batik.transcoder.keys.PaintKey $r0;
        org.apache.batik.transcoder.keys.BooleanKey $r1;

        $r0 = new org.apache.batik.transcoder.keys.PaintKey;

        specialinvoke $r0.<org.apache.batik.transcoder.keys.PaintKey: void <init>()>();

        <org.apache.batik.transcoder.image.ImageTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_BACKGROUND_COLOR> = $r0;

        $r1 = new org.apache.batik.transcoder.keys.BooleanKey;

        specialinvoke $r1.<org.apache.batik.transcoder.keys.BooleanKey: void <init>()>();

        <org.apache.batik.transcoder.image.ImageTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_FORCE_TRANSPARENT_WHITE> = $r1;

        return;
    }
}
