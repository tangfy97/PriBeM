public final class kodkod.ast.BinaryIntExpression extends kodkod.ast.IntExpression
{
    private final kodkod.ast.operator.IntOperator op;
    private final kodkod.ast.IntExpression left;
    private final kodkod.ast.IntExpression right;

    public void <init>(kodkod.ast.IntExpression, kodkod.ast.operator.IntOperator, kodkod.ast.IntExpression)
    {
        kodkod.ast.operator.IntOperator r1;
        kodkod.ast.IntExpression r2, r3;
        kodkod.ast.BinaryIntExpression r0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: kodkod.ast.BinaryIntExpression;

        r2 := @parameter0: kodkod.ast.IntExpression;

        r1 := @parameter1: kodkod.ast.operator.IntOperator;

        r3 := @parameter2: kodkod.ast.IntExpression;

        specialinvoke r0.<kodkod.ast.IntExpression: void <init>()>();

        $z0 = virtualinvoke r1.<kodkod.ast.operator.IntOperator: boolean binary()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Not a binary operator: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r4;

     label1:
        r0.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression left> = r2;

        r0.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression right> = r3;

        r0.<kodkod.ast.BinaryIntExpression: kodkod.ast.operator.IntOperator op> = r1;

        return;
    }

    public kodkod.ast.IntExpression left()
    {
        kodkod.ast.IntExpression $r1;
        kodkod.ast.BinaryIntExpression r0;

        r0 := @this: kodkod.ast.BinaryIntExpression;

        $r1 = r0.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression left>;

        return $r1;
    }

    public kodkod.ast.IntExpression right()
    {
        kodkod.ast.IntExpression $r1;
        kodkod.ast.BinaryIntExpression r0;

        r0 := @this: kodkod.ast.BinaryIntExpression;

        $r1 = r0.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression right>;

        return $r1;
    }

    public kodkod.ast.operator.IntOperator op()
    {
        kodkod.ast.operator.IntOperator $r1;
        kodkod.ast.BinaryIntExpression r0;

        r0 := @this: kodkod.ast.BinaryIntExpression;

        $r1 = r0.<kodkod.ast.BinaryIntExpression: kodkod.ast.operator.IntOperator op>;

        return $r1;
    }

    public java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)
    {
        java.lang.Object $r2;
        kodkod.ast.visitor.ReturnVisitor r0;
        kodkod.ast.BinaryIntExpression r1;

        r1 := @this: kodkod.ast.BinaryIntExpression;

        r0 := @parameter0: kodkod.ast.visitor.ReturnVisitor;

        $r2 = interfaceinvoke r0.<kodkod.ast.visitor.ReturnVisitor: java.lang.Object visit(kodkod.ast.BinaryIntExpression)>(r1);

        return $r2;
    }

    public void accept(kodkod.ast.visitor.VoidVisitor)
    {
        kodkod.ast.visitor.VoidVisitor r0;
        kodkod.ast.BinaryIntExpression r1;

        r1 := @this: kodkod.ast.BinaryIntExpression;

        r0 := @parameter0: kodkod.ast.visitor.VoidVisitor;

        interfaceinvoke r0.<kodkod.ast.visitor.VoidVisitor: void visit(kodkod.ast.BinaryIntExpression)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        kodkod.ast.IntExpression $r2, $r8;
        kodkod.ast.operator.IntOperator $r5;
        kodkod.ast.BinaryIntExpression r1;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r9, $r10;
        java.lang.String $r11;

        r1 := @this: kodkod.ast.BinaryIntExpression;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("(");

        $r2 = r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression left>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.operator.IntOperator op>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression right>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }
}
