public class org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory extends org.apache.lucene.analysis.util.TokenFilterFactory implements org.apache.lucene.analysis.util.ResourceLoaderAware
{
    public static final java.lang.String PROTECTED_TOKENS;
    public static final java.lang.String TYPES;
    private final java.lang.String wordFiles;
    private final java.lang.String types;
    private final int flags;
    byte[] typeTable;
    private org.apache.lucene.analysis.util.CharArraySet protectedWords;
    private static java.util.regex.Pattern typePattern;
    char[] out;

    public void <init>(java.util.Map)
    {
        short s9;
        java.util.Map r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r3, $r4, $r9;
        boolean $z0;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory r0;
        java.lang.IllegalArgumentException $r5;
        char[] $r2;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.lucene.analysis.util.TokenFilterFactory: void <init>(java.util.Map)>(r1);

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: byte[] typeTable> = null;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: org.apache.lucene.analysis.util.CharArraySet protectedWords> = null;

        $r2 = newarray (char)[256];

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: char[] out> = $r2;

        s9 = 0;

        $i0 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "generateWordParts", 1);

        if $i0 == 0 goto label01;

        s9 = 1;

     label01:
        $i1 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "generateNumberParts", 1);

        if $i1 == 0 goto label02;

        s9 = s9 | 2;

     label02:
        $i2 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "catenateWords", 0);

        if $i2 == 0 goto label03;

        s9 = s9 | 4;

     label03:
        $i3 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "catenateNumbers", 0);

        if $i3 == 0 goto label04;

        s9 = s9 | 8;

     label04:
        $i4 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "catenateAll", 0);

        if $i4 == 0 goto label05;

        s9 = s9 | 16;

     label05:
        $i5 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "splitOnCaseChange", 1);

        if $i5 == 0 goto label06;

        s9 = s9 | 64;

     label06:
        $i6 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "splitOnNumerics", 1);

        if $i6 == 0 goto label07;

        s9 = s9 | 128;

     label07:
        $i7 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "preserveOriginal", 0);

        if $i7 == 0 goto label08;

        s9 = s9 | 32;

     label08:
        $i8 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "stemEnglishPossessive", 1);

        if $i8 == 0 goto label09;

        s9 = s9 | 256;

     label09:
        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: java.lang.String get(java.util.Map,java.lang.String)>(r1, "protected");

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: java.lang.String wordFiles> = $r3;

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: java.lang.String get(java.util.Map,java.lang.String)>(r1, "types");

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: java.lang.String types> = $r4;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: int flags> = s9;

        $z0 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label10;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown parameters: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label10:
        return;
    }

    public void inform(org.apache.lucene.analysis.util.ResourceLoader) throws java.io.IOException
    {
        byte[] $r7;
        java.util.ArrayList $r5;
        org.apache.lucene.analysis.util.ResourceLoader r10;
        java.lang.String $r1, $r2, $r3, r9, $r11, $r13;
        boolean $z0;
        java.util.Iterator $r6;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory r0;
        java.util.List $r4, $r12;
        org.apache.lucene.analysis.util.CharArraySet $r14;
        java.lang.Object $r8;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory;

        r10 := @parameter0: org.apache.lucene.analysis.util.ResourceLoader;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: java.lang.String wordFiles>;

        if $r1 == null goto label1;

        $r13 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: java.lang.String wordFiles>;

        $r14 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: org.apache.lucene.analysis.util.CharArraySet getWordSet(org.apache.lucene.analysis.util.ResourceLoader,java.lang.String,boolean)>(r10, $r13, 0);

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: org.apache.lucene.analysis.util.CharArraySet protectedWords> = $r14;

     label1:
        $r2 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: java.lang.String types>;

        if $r2 == null goto label4;

        $r3 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: java.lang.String types>;

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: java.util.List splitFileNames(java.lang.String)>($r3);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) $r8;

        $r11 = virtualinvoke r9.<java.lang.String: java.lang.String trim()>();

        $r12 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: java.util.List getLines(org.apache.lucene.analysis.util.ResourceLoader,java.lang.String)>(r10, $r11);

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>($r12);

        goto label2;

     label3:
        $r7 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: byte[] parseTypes(java.util.List)>($r5);

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: byte[] typeTable> = $r7;

     label4:
        return;
    }

    public org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter create(org.apache.lucene.analysis.TokenStream)
    {
        byte[] $r3, $r5;
        org.apache.lucene.analysis.TokenStream r1;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory r2;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter $r0;
        int $i0;
        org.apache.lucene.analysis.util.CharArraySet $r4;

        r2 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory;

        r1 := @parameter0: org.apache.lucene.analysis.TokenStream;

        $r0 = new org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        $r3 = r2.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: byte[] typeTable>;

        if $r3 != null goto label1;

        $r5 = <org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: byte[] DEFAULT_WORD_DELIM_TABLE>;

        goto label2;

     label1:
        $r5 = r2.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: byte[] typeTable>;

     label2:
        $i0 = r2.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: int flags>;

        $r4 = r2.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: org.apache.lucene.analysis.util.CharArraySet protectedWords>;

        specialinvoke $r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: void <init>(org.apache.lucene.analysis.TokenStream,byte[],int,org.apache.lucene.analysis.util.CharArraySet)>(r1, $r5, $i0, $r4);

        return $r0;
    }

    private byte[] parseTypes(java.util.List)
    {
        byte[] $r5, r43;
        java.util.regex.Matcher $r15;
        java.lang.Character $r4, $r10, $r23;
        byte $b6, $b7;
        java.lang.Byte $r12, $r22;
        boolean $z0, $z1, $z2;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory r16;
        java.util.Set $r6;
        java.util.List r1;
        java.lang.StringBuilder $r26, $r27, $r28, $r32, $r33, $r34, $r38, $r39, $r40, $r46, $r48, $r50;
        java.util.regex.Pattern $r14;
        int $i1, $i2, $i3, $i4, $i8, i10, $i11, $i12;
        java.lang.String $r17, $r18, $r19, $r20, $r21, $r29, $r35, $r41, r42;
        java.util.Map$Entry r44;
        java.util.Iterator $r2, $r7;
        char $c0, $c5, $c9;
        java.lang.IllegalArgumentException $r47, $r49, $r51;
        java.util.TreeMap $r45;
        java.lang.Object $r3, $r8, $r9, $r11, $r13;

        r16 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory;

        r1 := @parameter0: java.util.List;

        $r45 = new java.util.TreeMap;

        specialinvoke $r45.<java.util.TreeMap: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r13 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r42 = (java.lang.String) $r13;

        $r14 = <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: java.util.regex.Pattern typePattern>;

        $r15 = virtualinvoke $r14.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r42);

        $z2 = virtualinvoke $r15.<java.util.regex.Matcher: boolean find()>();

        if $z2 != 0 goto label2;

        $r47 = new java.lang.IllegalArgumentException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Mapping Rule : [");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r41);

        throw $r47;

     label2:
        $r17 = virtualinvoke $r15.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r18 = virtualinvoke $r17.<java.lang.String: java.lang.String trim()>();

        $r19 = specialinvoke r16.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: java.lang.String parseString(java.lang.String)>($r18);

        $r20 = virtualinvoke $r15.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String trim()>();

        $r22 = specialinvoke r16.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: java.lang.Byte parseType(java.lang.String)>($r21);

        $i8 = virtualinvoke $r19.<java.lang.String: int length()>();

        if $i8 == 1 goto label3;

        $r49 = new java.lang.IllegalArgumentException;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Mapping Rule : [");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Only a single character is allowed.");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r49.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r35);

        throw $r49;

     label3:
        if $r22 != null goto label4;

        $r51 = new java.lang.IllegalArgumentException;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Mapping Rule : [");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Illegal type.");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r51.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r51;

     label4:
        $c9 = virtualinvoke $r19.<java.lang.String: char charAt(int)>(0);

        $r23 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c9);

        interfaceinvoke $r45.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r22);

        goto label1;

     label5:
        $r3 = interfaceinvoke $r45.<java.util.SortedMap: java.lang.Object lastKey()>();

        $r4 = (java.lang.Character) $r3;

        $c0 = virtualinvoke $r4.<java.lang.Character: char charValue()>();

        $i11 = (int) $c0;

        $i2 = $i11 + 1;

        $r5 = <org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: byte[] DEFAULT_WORD_DELIM_TABLE>;

        $i1 = lengthof $r5;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i1);

        r43 = newarray (byte)[$i3];

        i10 = 0;

     label6:
        $i4 = lengthof r43;

        if i10 >= $i4 goto label7;

        $b7 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: byte getType(int)>(i10);

        r43[i10] = $b7;

        i10 = i10 + 1;

        goto label6;

     label7:
        $r6 = interfaceinvoke $r45.<java.util.SortedMap: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label8:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r44 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r44.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.Character) $r9;

        $c5 = virtualinvoke $r10.<java.lang.Character: char charValue()>();

        $r11 = interfaceinvoke r44.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.lang.Byte) $r11;

        $b6 = virtualinvoke $r12.<java.lang.Byte: byte byteValue()>();

        $i12 = (int) $c5;

        r43[$i12] = $b6;

        goto label8;

     label9:
        return r43;
    }

    private java.lang.Byte parseType(java.lang.String)
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory r7;
        java.lang.String r0;
        java.lang.Byte $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r7 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("LOWER");

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(1);

        return $r6;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UPPER");

        if $z1 == 0 goto label2;

        $r5 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(2);

        return $r5;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("ALPHA");

        if $z2 == 0 goto label3;

        $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(3);

        return $r4;

     label3:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("DIGIT");

        if $z3 == 0 goto label4;

        $r3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(4);

        return $r3;

     label4:
        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("ALPHANUM");

        if $z4 == 0 goto label5;

        $r2 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(7);

        return $r2;

     label5:
        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("SUBWORD_DELIM");

        if $z5 == 0 goto label6;

        $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(8);

        return $r1;

     label6:
        return null;
    }

    private java.lang.String parseString(java.lang.String)
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory r2;
        java.lang.StringBuilder $r7, $r8, $r9, $r13, $r14, $r15, $r18, $r20;
        int $i0, $i1, $i3, $i5, $i6, $i7, i8, i9, $i11, $i12, $i13;
        java.lang.String r0, $r4, $r10, $r16, $r22;
        char $c2, $c4, c10;
        java.lang.IllegalArgumentException $r19, $r21;
        char[] $r3, $r17;

        r2 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory;

        r0 := @parameter0: java.lang.String;

        i8 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i9 = 0;

     label01:
        if i8 >= $i0 goto label12;

        $i1 = i8;

        i8 = i8 + 1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        c10 = $c2;

        $i12 = (int) $c2;

        if $i12 != 92 goto label11;

        if i8 < $i0 goto label02;

        $r19 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid escaped char in [");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r19;

     label02:
        $i3 = i8;

        i8 = i8 + 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        c10 = $c4;

        $i13 = (int) $c4;

        lookupswitch($i13)
        {
            case 92: goto label03;
            case 98: goto label07;
            case 102: goto label08;
            case 110: goto label04;
            case 114: goto label06;
            case 116: goto label05;
            case 117: goto label09;
            default: goto label11;
        };

     label03:
        c10 = 92;

        goto label11;

     label04:
        c10 = 10;

        goto label11;

     label05:
        c10 = 9;

        goto label11;

     label06:
        c10 = 13;

        goto label11;

     label07:
        c10 = 8;

        goto label11;

     label08:
        c10 = 12;

        goto label11;

     label09:
        $i5 = i8 + 3;

        if $i5 < $i0 goto label10;

        $r21 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid escaped char in [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r21;

     label10:
        $i6 = i8 + 4;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i8, $i6);

        $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r4, 16);

        c10 = (char) $i7;

        i8 = i8 + 4;

     label11:
        $r17 = r2.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: char[] out>;

        $i11 = i9;

        i9 = i9 + 1;

        $r17[$i11] = c10;

        goto label01;

     label12:
        $r22 = new java.lang.String;

        $r3 = r2.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: char[] out>;

        specialinvoke $r22.<java.lang.String: void <init>(char[],int,int)>($r3, 0, i9);

        return $r22;
    }

    public volatile org.apache.lucene.analysis.TokenStream create(org.apache.lucene.analysis.TokenStream)
    {
        org.apache.lucene.analysis.TokenStream r1;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory r0;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter $r2;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory;

        r1 := @parameter0: org.apache.lucene.analysis.TokenStream;

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter create(org.apache.lucene.analysis.TokenStream)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: java.lang.String TYPES> = "types";

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: java.lang.String PROTECTED_TOKENS> = "protected";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(.*)\\s*=>\\s*(.*)\\s*$");

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilterFactory: java.util.regex.Pattern typePattern> = $r0;

        return;
    }
}
