final class org.apache.poi.ss.formula.LazyAreaEval extends org.apache.poi.ss.formula.eval.AreaEvalBase
{
    private final org.apache.poi.ss.formula.SheetRangeEvaluator _evaluator;

    void <init>(org.apache.poi.ss.formula.ptg.AreaI, org.apache.poi.ss.formula.SheetRangeEvaluator)
    {
        org.apache.poi.ss.formula.SheetRangeEvaluator r2;
        org.apache.poi.ss.formula.LazyAreaEval r0;
        org.apache.poi.ss.formula.ptg.AreaI r1;

        r0 := @this: org.apache.poi.ss.formula.LazyAreaEval;

        r1 := @parameter0: org.apache.poi.ss.formula.ptg.AreaI;

        r2 := @parameter1: org.apache.poi.ss.formula.SheetRangeEvaluator;

        specialinvoke r0.<org.apache.poi.ss.formula.eval.AreaEvalBase: void <init>(org.apache.poi.ss.formula.ptg.AreaI,org.apache.poi.ss.formula.SheetRange)>(r1, r2);

        r0.<org.apache.poi.ss.formula.LazyAreaEval: org.apache.poi.ss.formula.SheetRangeEvaluator _evaluator> = r2;

        return;
    }

    public void <init>(int, int, int, int, org.apache.poi.ss.formula.SheetRangeEvaluator)
    {
        org.apache.poi.ss.formula.SheetRangeEvaluator r1;
        org.apache.poi.ss.formula.LazyAreaEval r0;
        int i0, i1, i2, i3;

        r0 := @this: org.apache.poi.ss.formula.LazyAreaEval;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: org.apache.poi.ss.formula.SheetRangeEvaluator;

        specialinvoke r0.<org.apache.poi.ss.formula.eval.AreaEvalBase: void <init>(org.apache.poi.ss.formula.SheetRange,int,int,int,int)>(r1, i0, i1, i2, i3);

        r0.<org.apache.poi.ss.formula.LazyAreaEval: org.apache.poi.ss.formula.SheetRangeEvaluator _evaluator> = r1;

        return;
    }

    public org.apache.poi.ss.formula.eval.ValueEval getRelativeValue(int, int)
    {
        org.apache.poi.ss.formula.LazyAreaEval r0;
        org.apache.poi.ss.formula.eval.ValueEval $r1;
        int $i0, i1, i2;

        r0 := @this: org.apache.poi.ss.formula.LazyAreaEval;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: int getFirstSheetIndex()>();

        $r1 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: org.apache.poi.ss.formula.eval.ValueEval getRelativeValue(int,int,int)>($i0, i1, i2);

        return $r1;
    }

    public org.apache.poi.ss.formula.eval.ValueEval getRelativeValue(int, int, int)
    {
        org.apache.poi.ss.formula.SheetRangeEvaluator $r1;
        org.apache.poi.ss.formula.LazyAreaEval r0;
        org.apache.poi.ss.formula.eval.ValueEval $r2;
        int i0, $i1, i2, i3, $i4, i5, i6;

        r0 := @this: org.apache.poi.ss.formula.LazyAreaEval;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        $i1 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: int getFirstRow()>();

        i2 = i0 + $i1;

        $i4 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: int getFirstColumn()>();

        i5 = i3 + $i4;

        $r1 = r0.<org.apache.poi.ss.formula.LazyAreaEval: org.apache.poi.ss.formula.SheetRangeEvaluator _evaluator>;

        $r2 = virtualinvoke $r1.<org.apache.poi.ss.formula.SheetRangeEvaluator: org.apache.poi.ss.formula.eval.ValueEval getEvalForCell(int,int,int)>(i6, i2, i5);

        return $r2;
    }

    public org.apache.poi.ss.formula.eval.AreaEval offset(int, int, int, int)
    {
        org.apache.poi.ss.formula.SheetRangeEvaluator $r3;
        org.apache.poi.ss.formula.LazyAreaEval r1, $r2;
        org.apache.poi.ss.formula.ptg.AreaI$OffsetArea $r0;
        int $i0, $i1, i2, i3, i4, i5;

        r1 := @this: org.apache.poi.ss.formula.LazyAreaEval;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        i5 := @parameter3: int;

        $r0 = new org.apache.poi.ss.formula.ptg.AreaI$OffsetArea;

        $i0 = virtualinvoke r1.<org.apache.poi.ss.formula.LazyAreaEval: int getFirstRow()>();

        $i1 = virtualinvoke r1.<org.apache.poi.ss.formula.LazyAreaEval: int getFirstColumn()>();

        specialinvoke $r0.<org.apache.poi.ss.formula.ptg.AreaI$OffsetArea: void <init>(int,int,int,int,int,int)>($i0, $i1, i2, i3, i4, i5);

        $r2 = new org.apache.poi.ss.formula.LazyAreaEval;

        $r3 = r1.<org.apache.poi.ss.formula.LazyAreaEval: org.apache.poi.ss.formula.SheetRangeEvaluator _evaluator>;

        specialinvoke $r2.<org.apache.poi.ss.formula.LazyAreaEval: void <init>(org.apache.poi.ss.formula.ptg.AreaI,org.apache.poi.ss.formula.SheetRangeEvaluator)>($r0, $r3);

        return $r2;
    }

    public org.apache.poi.ss.formula.LazyAreaEval getRow(int)
    {
        org.apache.poi.ss.formula.SheetRangeEvaluator $r2;
        int i0, $i1, $i2, i3, $i4, $i5, $i6;
        java.lang.String $r10;
        org.apache.poi.ss.formula.LazyAreaEval r0, $r1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.poi.ss.formula.LazyAreaEval;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: int getHeight()>();

        if i0 < $i1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid rowIndex ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Allowable range is (0..");

        $i6 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: int getHeight()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label1:
        $i2 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: int getFirstRow()>();

        i3 = $i2 + i0;

        $r1 = new org.apache.poi.ss.formula.LazyAreaEval;

        $i4 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: int getFirstColumn()>();

        $i5 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: int getLastColumn()>();

        $r2 = r0.<org.apache.poi.ss.formula.LazyAreaEval: org.apache.poi.ss.formula.SheetRangeEvaluator _evaluator>;

        specialinvoke $r1.<org.apache.poi.ss.formula.LazyAreaEval: void <init>(int,int,int,int,org.apache.poi.ss.formula.SheetRangeEvaluator)>(i3, $i4, i3, $i5, $r2);

        return $r1;
    }

    public org.apache.poi.ss.formula.LazyAreaEval getColumn(int)
    {
        org.apache.poi.ss.formula.SheetRangeEvaluator $r2;
        int i0, $i1, $i2, i3, $i4, $i5, $i6;
        java.lang.String $r10;
        org.apache.poi.ss.formula.LazyAreaEval r0, $r1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.poi.ss.formula.LazyAreaEval;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: int getWidth()>();

        if i0 < $i1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid columnIndex ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Allowable range is (0..");

        $i6 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: int getWidth()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label1:
        $i2 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: int getFirstColumn()>();

        i3 = $i2 + i0;

        $r1 = new org.apache.poi.ss.formula.LazyAreaEval;

        $i4 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: int getFirstRow()>();

        $i5 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: int getLastRow()>();

        $r2 = r0.<org.apache.poi.ss.formula.LazyAreaEval: org.apache.poi.ss.formula.SheetRangeEvaluator _evaluator>;

        specialinvoke $r1.<org.apache.poi.ss.formula.LazyAreaEval: void <init>(int,int,int,int,org.apache.poi.ss.formula.SheetRangeEvaluator)>($i4, i3, $i5, i3, $r2);

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.poi.ss.formula.SheetRangeEvaluator $r7;
        org.apache.poi.ss.util.CellReference $r0, $r2;
        java.lang.StringBuffer $r3, $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r5, $r8, $r9, $r10, $r11;
        org.apache.poi.ss.formula.LazyAreaEval r1;
        java.lang.Class $r4;

        r1 := @this: org.apache.poi.ss.formula.LazyAreaEval;

        $r0 = new org.apache.poi.ss.util.CellReference;

        $i0 = virtualinvoke r1.<org.apache.poi.ss.formula.LazyAreaEval: int getFirstRow()>();

        $i1 = virtualinvoke r1.<org.apache.poi.ss.formula.LazyAreaEval: int getFirstColumn()>();

        specialinvoke $r0.<org.apache.poi.ss.util.CellReference: void <init>(int,int)>($i0, $i1);

        $r2 = new org.apache.poi.ss.util.CellReference;

        $i2 = virtualinvoke r1.<org.apache.poi.ss.formula.LazyAreaEval: int getLastRow()>();

        $i3 = virtualinvoke r1.<org.apache.poi.ss.formula.LazyAreaEval: int getLastColumn()>();

        specialinvoke $r2.<org.apache.poi.ss.util.CellReference: void <init>(int,int)>($i2, $i3);

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r7 = r1.<org.apache.poi.ss.formula.LazyAreaEval: org.apache.poi.ss.formula.SheetRangeEvaluator _evaluator>;

        $r8 = virtualinvoke $r7.<org.apache.poi.ss.formula.SheetRangeEvaluator: java.lang.String getSheetNameRange()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(33);

        $r9 = virtualinvoke $r0.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r10 = virtualinvoke $r2.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r11 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }

    public boolean isSubTotal(int, int)
    {
        org.apache.poi.ss.formula.SheetRangeEvaluator $r1, $r2;
        org.apache.poi.ss.formula.LazyAreaEval r0;
        org.apache.poi.ss.formula.SheetRefEvaluator $r3;
        int $i0, $i1, i2, $i3, $i4, i5, $i6;
        boolean $z0;

        r0 := @this: org.apache.poi.ss.formula.LazyAreaEval;

        i2 := @parameter0: int;

        i5 := @parameter1: int;

        $r2 = r0.<org.apache.poi.ss.formula.LazyAreaEval: org.apache.poi.ss.formula.SheetRangeEvaluator _evaluator>;

        $r1 = r0.<org.apache.poi.ss.formula.LazyAreaEval: org.apache.poi.ss.formula.SheetRangeEvaluator _evaluator>;

        $i0 = virtualinvoke $r1.<org.apache.poi.ss.formula.SheetRangeEvaluator: int getFirstSheetIndex()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.ss.formula.SheetRangeEvaluator: org.apache.poi.ss.formula.SheetRefEvaluator getSheetEvaluator(int)>($i0);

        $i1 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: int getFirstRow()>();

        $i3 = $i1 + i2;

        $i4 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: int getFirstColumn()>();

        $i6 = $i4 + i5;

        $z0 = virtualinvoke $r3.<org.apache.poi.ss.formula.SheetRefEvaluator: boolean isSubTotal(int,int)>($i3, $i6);

        return $z0;
    }

    public volatile org.apache.poi.ss.formula.TwoDEval getColumn(int)
    {
        int i0;
        org.apache.poi.ss.formula.LazyAreaEval r0, $r1;

        r0 := @this: org.apache.poi.ss.formula.LazyAreaEval;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: org.apache.poi.ss.formula.LazyAreaEval getColumn(int)>(i0);

        return $r1;
    }

    public volatile org.apache.poi.ss.formula.TwoDEval getRow(int)
    {
        int i0;
        org.apache.poi.ss.formula.LazyAreaEval r0, $r1;

        r0 := @this: org.apache.poi.ss.formula.LazyAreaEval;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.poi.ss.formula.LazyAreaEval: org.apache.poi.ss.formula.LazyAreaEval getRow(int)>(i0);

        return $r1;
    }
}
