public class org.springframework.http.HttpHeaders extends java.lang.Object implements org.springframework.util.MultiValueMap
{
    private static final java.lang.String ACCEPT;
    private static final java.lang.String ACCEPT_CHARSET;
    private static final java.lang.String ALLOW;
    private static final java.lang.String CACHE_CONTROL;
    private static final java.lang.String CONTENT_DISPOSITION;
    private static final java.lang.String CONTENT_LENGTH;
    private static final java.lang.String CONTENT_TYPE;
    private static final java.lang.String DATE;
    private static final java.lang.String ETAG;
    private static final java.lang.String EXPIRES;
    private static final java.lang.String IF_MODIFIED_SINCE;
    private static final java.lang.String IF_NONE_MATCH;
    private static final java.lang.String LAST_MODIFIED;
    private static final java.lang.String LOCATION;
    private static final java.lang.String PRAGMA;
    private static final java.lang.String[] DATE_FORMATS;
    private static java.util.TimeZone GMT;
    private final java.util.Map headers;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.TimeZone $r1;

        <org.springframework.http.HttpHeaders: java.lang.String PRAGMA> = "Pragma";

        <org.springframework.http.HttpHeaders: java.lang.String LOCATION> = "Location";

        <org.springframework.http.HttpHeaders: java.lang.String LAST_MODIFIED> = "Last-Modified";

        <org.springframework.http.HttpHeaders: java.lang.String IF_NONE_MATCH> = "If-None-Match";

        <org.springframework.http.HttpHeaders: java.lang.String IF_MODIFIED_SINCE> = "If-Modified-Since";

        <org.springframework.http.HttpHeaders: java.lang.String EXPIRES> = "Expires";

        <org.springframework.http.HttpHeaders: java.lang.String ETAG> = "ETag";

        <org.springframework.http.HttpHeaders: java.lang.String DATE> = "Date";

        <org.springframework.http.HttpHeaders: java.lang.String CONTENT_TYPE> = "Content-Type";

        <org.springframework.http.HttpHeaders: java.lang.String CONTENT_LENGTH> = "Content-Length";

        <org.springframework.http.HttpHeaders: java.lang.String CONTENT_DISPOSITION> = "Content-Disposition";

        <org.springframework.http.HttpHeaders: java.lang.String CACHE_CONTROL> = "Cache-Control";

        <org.springframework.http.HttpHeaders: java.lang.String ALLOW> = "Allow";

        <org.springframework.http.HttpHeaders: java.lang.String ACCEPT_CHARSET> = "Accept-Charset";

        <org.springframework.http.HttpHeaders: java.lang.String ACCEPT> = "Accept";

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        $r0[1] = "EEE, dd-MMM-yy HH:mm:ss zzz";

        $r0[2] = "EEE MMM dd HH:mm:ss yyyy";

        <org.springframework.http.HttpHeaders: java.lang.String[] DATE_FORMATS> = $r0;

        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        <org.springframework.http.HttpHeaders: java.util.TimeZone GMT> = $r1;

        return;
    }

    private void <init>(java.util.Map, boolean)
    {
        org.springframework.util.LinkedCaseInsensitiveMap $r2;
        java.util.Locale $r3;
        java.util.Map r1, $r13;
        int $i0;
        java.lang.String $r12;
        boolean z0, $z1;
        java.util.Map$Entry r7;
        java.util.Iterator $r5;
        org.springframework.http.HttpHeaders r0;
        java.util.Set $r4;
        java.util.List $r9, $r10;
        java.lang.Object $r6, $r8, $r11;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.util.Map;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "\'headers\' must not be null");

        if z0 == 0 goto label3;

        $r2 = new org.springframework.util.LinkedCaseInsensitiveMap;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke $r2.<org.springframework.util.LinkedCaseInsensitiveMap: void <init>(int,java.util.Locale)>($i0, $r3);

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.util.List) $r8;

        $r10 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r9);

        $r11 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.String) $r11;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r10);

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r13 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r2);

        r0.<org.springframework.http.HttpHeaders: java.util.Map headers> = $r13;

        goto label4;

     label3:
        r0.<org.springframework.http.HttpHeaders: java.util.Map headers> = r1;

     label4:
        return;
    }

    public void <init>()
    {
        org.springframework.http.HttpHeaders r0;
        java.util.Locale $r2;
        org.springframework.util.LinkedCaseInsensitiveMap $r1;

        r0 := @this: org.springframework.http.HttpHeaders;

        $r1 = new org.springframework.util.LinkedCaseInsensitiveMap;

        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke $r1.<org.springframework.util.LinkedCaseInsensitiveMap: void <init>(int,java.util.Locale)>(8, $r2);

        specialinvoke r0.<org.springframework.http.HttpHeaders: void <init>(java.util.Map,boolean)>($r1, 0);

        return;
    }

    public static org.springframework.http.HttpHeaders readOnlyHttpHeaders(org.springframework.http.HttpHeaders)
    {
        org.springframework.http.HttpHeaders $r0, r1;

        r1 := @parameter0: org.springframework.http.HttpHeaders;

        $r0 = new org.springframework.http.HttpHeaders;

        specialinvoke $r0.<org.springframework.http.HttpHeaders: void <init>(java.util.Map,boolean)>(r1, 1);

        return $r0;
    }

    public void setAccept(java.util.List)
    {
        java.util.List r1;
        java.lang.String $r2;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.util.List;

        $r2 = staticinvoke <org.springframework.http.MediaType: java.lang.String toString(java.util.Collection)>(r1);

        virtualinvoke r0.<org.springframework.http.HttpHeaders: void set(java.lang.String,java.lang.String)>("Accept", $r2);

        return;
    }

    public java.util.List getAccept()
    {
        java.util.List $r2;
        java.lang.String $r1;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        $r1 = virtualinvoke r0.<org.springframework.http.HttpHeaders: java.lang.String getFirst(java.lang.String)>("Accept");

        if $r1 == null goto label1;

        $r2 = staticinvoke <org.springframework.http.MediaType: java.util.List parseMediaTypes(java.lang.String)>($r1);

        goto label2;

     label1:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label2:
        return $r2;
    }

    public void setAcceptCharset(java.util.List)
    {
        java.util.Iterator $r2;
        org.springframework.http.HttpHeaders r8;
        java.util.List r1;
        java.nio.charset.Charset r4;
        java.util.Locale $r6;
        java.lang.StringBuilder $r0;
        java.lang.Object $r3;
        java.lang.String $r5, $r7, $r9;
        boolean $z0, $z1;

        r8 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.util.List;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.nio.charset.Charset) $r3;

        $r5 = virtualinvoke r4.<java.nio.charset.Charset: java.lang.String name()>();

        $r6 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r7 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r8.<org.springframework.http.HttpHeaders: void set(java.lang.String,java.lang.String)>("Accept-Charset", $r9);

        return;
    }

    public java.util.List getAcceptCharset()
    {
        org.springframework.http.HttpHeaders r1;
        java.lang.String[] $r3;
        java.util.ArrayList $r7;
        java.nio.charset.Charset $r5;
        int i0, $i1, i2, $i4;
        java.lang.String $r2, r4, r6;
        boolean $z0;

        r1 := @this: org.springframework.http.HttpHeaders;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<org.springframework.http.HttpHeaders: java.lang.String getFirst(java.lang.String)>("Accept-Charset");

        if $r2 == null goto label6;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(",\\s*");

        i0 = lengthof $r3;

        i2 = 0;

        goto label5;

     label1:
        r4 = $r3[i2];

        $i1 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(59);

        $i4 = (int) -1;

        if $i1 != $i4 goto label2;

        r6 = r4;

        goto label3;

     label2:
        r6 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label3:
        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z0 != 0 goto label4;

        $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r6);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r5);

     label4:
        i2 = i2 + 1;

     label5:
        if i2 < i0 goto label1;

     label6:
        return $r7;
    }

    public void setAllow(java.util.Set)
    {
        java.util.Set r1;
        java.lang.String $r2;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.util.Set;

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String collectionToCommaDelimitedString(java.util.Collection)>(r1);

        virtualinvoke r0.<org.springframework.http.HttpHeaders: void set(java.lang.String,java.lang.String)>("Allow", $r2);

        return;
    }

    public java.util.Set getAllow()
    {
        org.springframework.http.HttpHeaders r0;
        org.springframework.http.HttpMethod $r7;
        java.util.Set $r3, $r9;
        java.lang.String[] $r5;
        java.util.ArrayList $r4;
        int i0, i1;
        java.lang.String $r1, r6;
        java.util.EnumSet $r2, $r8;

        r0 := @this: org.springframework.http.HttpHeaders;

        $r1 = virtualinvoke r0.<org.springframework.http.HttpHeaders: java.lang.String getFirst(java.lang.String)>("Allow");

        if $r1 == null goto label3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(5);

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",\\s*");

        i0 = lengthof $r5;

        i1 = 0;

        goto label2;

     label1:
        r6 = $r5[i1];

        $r7 = staticinvoke <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod valueOf(java.lang.String)>(r6);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        $r8 = staticinvoke <java.util.EnumSet: java.util.EnumSet copyOf(java.util.Collection)>($r4);

        $r9 = (java.util.Set) $r8;

        return $r9;

     label3:
        $r2 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(class "Lorg/springframework/http/HttpMethod;");

        $r3 = (java.util.Set) $r2;

        return $r3;
    }

    public void setCacheControl(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.springframework.http.HttpHeaders: void set(java.lang.String,java.lang.String)>("Cache-Control", r1);

        return;
    }

    public java.lang.String getCacheControl()
    {
        java.lang.String $r1;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        $r1 = virtualinvoke r0.<org.springframework.http.HttpHeaders: java.lang.String getFirst(java.lang.String)>("Cache-Control");

        return $r1;
    }

    public void setContentDispositionFormData(java.lang.String, java.lang.String)
    {
        org.springframework.http.HttpHeaders r4;
        java.lang.StringBuilder $r1, $r2, $r6;
        java.lang.String r0, r3, $r5;

        r4 := @this: org.springframework.http.HttpHeaders;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'name\' must not be null");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("form-data; name=\"");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        if r3 == null goto label1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; filename=\"");

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

     label1:
        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<org.springframework.http.HttpHeaders: void set(java.lang.String,java.lang.String)>("Content-Disposition", $r5);

        return;
    }

    public void setContentLength(long)
    {
        long l0;
        java.lang.String $r1;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        virtualinvoke r0.<org.springframework.http.HttpHeaders: void set(java.lang.String,java.lang.String)>("Content-Length", $r1);

        return;
    }

    public long getContentLength()
    {
        long $l0;
        java.lang.String $r1;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        $r1 = virtualinvoke r0.<org.springframework.http.HttpHeaders: java.lang.String getFirst(java.lang.String)>("Content-Length");

        if $r1 == null goto label1;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

        goto label2;

     label1:
        $l0 = -1L;

     label2:
        return $l0;
    }

    public void setContentType(org.springframework.http.MediaType)
    {
        org.springframework.http.HttpHeaders r1;
        org.springframework.http.MediaType r0;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.springframework.http.HttpHeaders;

        r0 := @parameter0: org.springframework.http.MediaType;

        $z0 = virtualinvoke r0.<org.springframework.http.MediaType: boolean isWildcardType()>();

        if $z0 == 0 goto label1;

        $z2 = 0;

        goto label2;

     label1:
        $z2 = 1;

     label2:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z2, "\'Content-Type\' cannot contain wildcard type \'*\'");

        $z1 = virtualinvoke r0.<org.springframework.http.MediaType: boolean isWildcardSubtype()>();

        if $z1 == 0 goto label3;

        $z3 = 0;

        goto label4;

     label3:
        $z3 = 1;

     label4:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z3, "\'Content-Type\' cannot contain wildcard subtype \'*\'");

        $r2 = virtualinvoke r0.<org.springframework.http.MediaType: java.lang.String toString()>();

        virtualinvoke r1.<org.springframework.http.HttpHeaders: void set(java.lang.String,java.lang.String)>("Content-Type", $r2);

        return;
    }

    public org.springframework.http.MediaType getContentType()
    {
        java.lang.String $r1;
        org.springframework.http.HttpHeaders r0;
        org.springframework.http.MediaType $r2;

        r0 := @this: org.springframework.http.HttpHeaders;

        $r1 = virtualinvoke r0.<org.springframework.http.HttpHeaders: java.lang.String getFirst(java.lang.String)>("Content-Type");

        if $r1 == null goto label1;

        $r2 = staticinvoke <org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>($r1);

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public void setDate(long)
    {
        long l0;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        l0 := @parameter0: long;

        specialinvoke r0.<org.springframework.http.HttpHeaders: void setDate(java.lang.String,long)>("Date", l0);

        return;
    }

    public long getDate()
    {
        long $l0;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        $l0 = specialinvoke r0.<org.springframework.http.HttpHeaders: long getFirstDate(java.lang.String)>("Date");

        return $l0;
    }

    public void setETag(java.lang.String)
    {
        org.springframework.http.HttpHeaders r1;
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.springframework.http.HttpHeaders;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label3;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("W/");

        if $z1 != 0 goto label1;

        $z2 = 0;

        goto label2;

     label1:
        $z2 = 1;

     label2:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z2, "Invalid eTag, does not start with W/ or \"");

        $z3 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("\"");

        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z3, "Invalid eTag, does not end with \"");

     label3:
        virtualinvoke r1.<org.springframework.http.HttpHeaders: void set(java.lang.String,java.lang.String)>("ETag", r0);

        return;
    }

    public java.lang.String getETag()
    {
        java.lang.String $r1;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        $r1 = virtualinvoke r0.<org.springframework.http.HttpHeaders: java.lang.String getFirst(java.lang.String)>("ETag");

        return $r1;
    }

    public void setExpires(long)
    {
        long l0;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        l0 := @parameter0: long;

        specialinvoke r0.<org.springframework.http.HttpHeaders: void setDate(java.lang.String,long)>("Expires", l0);

        return;
    }

    public long getExpires()
    {
        long $l0;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        $l0 = specialinvoke r0.<org.springframework.http.HttpHeaders: long getFirstDate(java.lang.String)>("Expires");

        return $l0;
    }

    public void setIfModifiedSince(long)
    {
        long l0;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        l0 := @parameter0: long;

        specialinvoke r0.<org.springframework.http.HttpHeaders: void setDate(java.lang.String,long)>("If-Modified-Since", l0);

        return;
    }

    public long getIfNotModifiedSince()
    {
        long $l0;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        $l0 = specialinvoke r0.<org.springframework.http.HttpHeaders: long getFirstDate(java.lang.String)>("If-Modified-Since");

        return $l0;
    }

    public void setIfNoneMatch(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.springframework.http.HttpHeaders: void set(java.lang.String,java.lang.String)>("If-None-Match", r1);

        return;
    }

    public void setIfNoneMatch(java.util.List)
    {
        java.util.Iterator $r2;
        org.springframework.http.HttpHeaders r5;
        java.util.List r1;
        java.lang.StringBuilder $r0;
        java.lang.Object $r3;
        java.lang.String r4, $r6;
        boolean $z0, $z1;

        r5 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.util.List;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<org.springframework.http.HttpHeaders: void set(java.lang.String,java.lang.String)>("If-None-Match", $r6);

        return;
    }

    public java.util.List getIfNoneMatch()
    {
        org.springframework.http.HttpHeaders r1;
        int i0, i1;
        java.lang.String[] $r3;
        java.lang.String $r2, r4;
        java.util.ArrayList $r0;

        r1 := @this: org.springframework.http.HttpHeaders;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<org.springframework.http.HttpHeaders: java.lang.String getFirst(java.lang.String)>("If-None-Match");

        if $r2 == null goto label3;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(",\\s*");

        i0 = lengthof $r3;

        i1 = 0;

        goto label2;

     label1:
        r4 = $r3[i1];

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r4);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

     label3:
        return $r0;
    }

    public void setLastModified(long)
    {
        long l0;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        l0 := @parameter0: long;

        specialinvoke r0.<org.springframework.http.HttpHeaders: void setDate(java.lang.String,long)>("Last-Modified", l0);

        return;
    }

    public long getLastModified()
    {
        long $l0;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        $l0 = specialinvoke r0.<org.springframework.http.HttpHeaders: long getFirstDate(java.lang.String)>("Last-Modified");

        return $l0;
    }

    public void setLocation(java.net.URI)
    {
        java.net.URI r1;
        java.lang.String $r2;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.net.URI;

        $r2 = virtualinvoke r1.<java.net.URI: java.lang.String toASCIIString()>();

        virtualinvoke r0.<org.springframework.http.HttpHeaders: void set(java.lang.String,java.lang.String)>("Location", $r2);

        return;
    }

    public java.net.URI getLocation()
    {
        java.lang.String $r1;
        java.net.URI $r2;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        $r1 = virtualinvoke r0.<org.springframework.http.HttpHeaders: java.lang.String getFirst(java.lang.String)>("Location");

        if $r1 == null goto label1;

        $r2 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>($r1);

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public void setPragma(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.springframework.http.HttpHeaders: void set(java.lang.String,java.lang.String)>("Pragma", r1);

        return;
    }

    public java.lang.String getPragma()
    {
        java.lang.String $r1;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        $r1 = virtualinvoke r0.<org.springframework.http.HttpHeaders: java.lang.String getFirst(java.lang.String)>("Pragma");

        return $r1;
    }

    private long getFirstDate(java.lang.String)
    {
        java.util.Date $r8;
        java.text.SimpleDateFormat $r5;
        java.lang.String[] $r3;
        long $l1;
        java.util.Locale $r6;
        int i0, i2;
        java.lang.String r1, $r2, r4, $r15;
        java.text.ParseException $r16;
        org.springframework.http.HttpHeaders r0;
        java.util.TimeZone $r7;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.http.HttpHeaders: java.lang.String getFirst(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return -1L;

     label1:
        $r3 = <org.springframework.http.HttpHeaders: java.lang.String[] DATE_FORMATS>;

        i0 = lengthof $r3;

        i2 = 0;

        goto label6;

     label2:
        r4 = $r3[i2];

        $r5 = new java.text.SimpleDateFormat;

        $r6 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>(r4, $r6);

        $r7 = <org.springframework.http.HttpHeaders: java.util.TimeZone GMT>;

        virtualinvoke $r5.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r7);

     label3:
        $r8 = virtualinvoke $r5.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r2);

        $l1 = virtualinvoke $r8.<java.util.Date: long getTime()>();

     label4:
        return $l1;

     label5:
        $r16 := @caughtexception;

        i2 = i2 + 1;

     label6:
        if i2 < i0 goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot parse date value \"");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" for \"");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" header");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;

        catch java.text.ParseException from label3 to label4 with label5;
    }

    private void setDate(java.lang.String, long)
    {
        java.util.TimeZone $r4;
        org.springframework.http.HttpHeaders r5;
        java.util.Date $r7;
        java.text.SimpleDateFormat $r0;
        java.lang.String[] $r1;
        long l0;
        java.util.Locale $r2;
        java.lang.String $r3, r6, $r8;

        r5 := @this: org.springframework.http.HttpHeaders;

        r6 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r0 = new java.text.SimpleDateFormat;

        $r1 = <org.springframework.http.HttpHeaders: java.lang.String[] DATE_FORMATS>;

        $r3 = $r1[0];

        $r2 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>($r3, $r2);

        $r4 = <org.springframework.http.HttpHeaders: java.util.TimeZone GMT>;

        virtualinvoke $r0.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r4);

        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>(long)>(l0);

        $r8 = virtualinvoke $r0.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r7);

        virtualinvoke r5.<org.springframework.http.HttpHeaders: void set(java.lang.String,java.lang.String)>(r6, $r8);

        return;
    }

    public java.lang.String getFirst(java.lang.String)
    {
        java.util.List r4;
        org.springframework.http.HttpHeaders r0;
        java.util.Map $r2;
        java.lang.Object $r3, $r5;
        java.lang.String r1, $r6;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.List) $r3;

        if r4 == null goto label1;

        $r5 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (java.lang.String) $r5;

        goto label2;

     label1:
        $r6 = null;

     label2:
        return $r6;
    }

    public void add(java.lang.String, java.lang.String)
    {
        org.springframework.http.HttpHeaders r0;
        java.util.List r7;
        java.util.Map $r2, $r6;
        java.lang.Object $r3;
        java.lang.String r1, r4;
        java.util.LinkedList $r5;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r2 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r7 = (java.util.List) $r3;

        if r7 != null goto label1;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r7 = $r5;

        $r6 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

     label1:
        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r4);

        return;
    }

    public void set(java.lang.String, java.lang.String)
    {
        org.springframework.http.HttpHeaders r2;
        java.util.Map $r4;
        java.lang.String r1, r3;
        java.util.LinkedList $r0;

        r2 := @this: org.springframework.http.HttpHeaders;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r4 = r2.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r0);

        return;
    }

    public void setAll(java.util.Map)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        org.springframework.http.HttpHeaders r5;
        java.util.Set $r1;
        java.util.Map r0;
        java.lang.Object $r3, $r6, $r8;
        java.lang.String $r7, $r9;
        boolean $z0;

        r5 := @this: org.springframework.http.HttpHeaders;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.String) $r8;

        virtualinvoke r5.<org.springframework.http.HttpHeaders: void set(java.lang.String,java.lang.String)>($r7, $r9);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public java.util.Map toSingleValueMap()
    {
        java.util.LinkedHashMap $r0;
        java.util.Map $r2, $r3;
        int $i0;
        java.lang.String $r9, $r13;
        boolean $z0;
        java.util.Map$Entry r7;
        java.util.Iterator $r5;
        org.springframework.http.HttpHeaders r1;
        java.util.Set $r4;
        java.util.List $r11;
        java.lang.Object $r6, $r8, $r10, $r12;

        r1 := @this: org.springframework.http.HttpHeaders;

        $r0 = new java.util.LinkedHashMap;

        $r2 = r1.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r3 = r1.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r8;

        $r10 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.util.List) $r10;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(0);

        $r13 = (java.lang.String) $r12;

        virtualinvoke $r0.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r13);

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r0;
    }

    public int size()
    {
        int $i0;
        org.springframework.http.HttpHeaders r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.http.HttpHeaders;

        $r1 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        org.springframework.http.HttpHeaders r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.springframework.http.HttpHeaders;

        $r1 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.springframework.http.HttpHeaders r0;
        java.util.Map $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.springframework.http.HttpHeaders r0;
        java.util.Map $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.List get(java.lang.Object)
    {
        java.util.List $r4;
        org.springframework.http.HttpHeaders r0;
        java.util.Map $r2;
        java.lang.Object r1, $r3;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public java.util.List put(java.lang.String, java.util.List)
    {
        java.util.List r2, $r5;
        org.springframework.http.HttpHeaders r0;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.String r1;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        $r3 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r5 = (java.util.List) $r4;

        return $r5;
    }

    public java.util.List remove(java.lang.Object)
    {
        java.util.List $r4;
        org.springframework.http.HttpHeaders r0;
        java.util.Map $r2;
        java.lang.Object r1, $r3;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public void putAll(java.util.Map)
    {
        org.springframework.http.HttpHeaders r0;
        java.util.Map r1, $r2;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1);

        return;
    }

    public void clear()
    {
        org.springframework.http.HttpHeaders r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.http.HttpHeaders;

        $r1 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public java.util.Set keySet()
    {
        java.util.Set $r2;
        org.springframework.http.HttpHeaders r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.http.HttpHeaders;

        $r1 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public java.util.Collection values()
    {
        org.springframework.http.HttpHeaders r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: org.springframework.http.HttpHeaders;

        $r1 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public java.util.Set entrySet()
    {
        java.util.Set $r2;
        org.springframework.http.HttpHeaders r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.http.HttpHeaders;

        $r1 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        org.springframework.http.HttpHeaders r0, r2;
        java.util.Map $r3, $r4;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.springframework.http.HttpHeaders;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.springframework.http.HttpHeaders) r1;

        $r4 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $r3 = r2.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public int hashCode()
    {
        int $i0;
        org.springframework.http.HttpHeaders r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.http.HttpHeaders;

        $r1 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        org.springframework.http.HttpHeaders r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.http.HttpHeaders;

        $r1 = r0.<org.springframework.http.HttpHeaders: java.util.Map headers>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public volatile java.lang.Object get(java.lang.Object)
    {
        java.lang.Object r1;
        java.util.List $r2;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.springframework.http.HttpHeaders: java.util.List get(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile void add(java.lang.Object, java.lang.Object)
    {
        org.springframework.http.HttpHeaders r0;
        java.lang.Object r1, r2;
        java.lang.String $r3, $r4;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.String) r1;

        $r3 = (java.lang.String) r2;

        virtualinvoke r0.<org.springframework.http.HttpHeaders: void add(java.lang.String,java.lang.String)>($r4, $r3);

        return;
    }

    public volatile void set(java.lang.Object, java.lang.Object)
    {
        org.springframework.http.HttpHeaders r0;
        java.lang.Object r1, r2;
        java.lang.String $r3, $r4;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.String) r1;

        $r3 = (java.lang.String) r2;

        virtualinvoke r0.<org.springframework.http.HttpHeaders: void set(java.lang.String,java.lang.String)>($r4, $r3);

        return;
    }

    public volatile java.lang.Object getFirst(java.lang.Object)
    {
        org.springframework.http.HttpHeaders r0;
        java.lang.Object r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        $r3 = virtualinvoke r0.<org.springframework.http.HttpHeaders: java.lang.String getFirst(java.lang.String)>($r2);

        return $r3;
    }

    public volatile java.lang.Object remove(java.lang.Object)
    {
        java.lang.Object r1;
        java.util.List $r2;
        org.springframework.http.HttpHeaders r0;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.springframework.http.HttpHeaders: java.util.List remove(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.List $r3, $r5;
        org.springframework.http.HttpHeaders r0;
        java.lang.Object r1, r2;
        java.lang.String $r4;

        r0 := @this: org.springframework.http.HttpHeaders;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.String) r1;

        $r3 = (java.util.List) r2;

        $r5 = virtualinvoke r0.<org.springframework.http.HttpHeaders: java.util.List put(java.lang.String,java.util.List)>($r4, $r3);

        return $r5;
    }
}
