public final class kodkod.util.nodes.AnnotatedNode extends java.lang.Object
{
    private final kodkod.ast.Node node;
    private final java.util.Set sharedNodes;
    private final java.util.Map source;

    private void <init>(kodkod.ast.Node)
    {
        kodkod.util.collections.IdentityHashSet $r3;
        java.util.Map $r5;
        java.util.Set $r4;
        kodkod.util.nodes.AnnotatedNode$SharingDetector $r2;
        kodkod.util.nodes.AnnotatedNode r0;
        kodkod.ast.Node r1;

        r0 := @this: kodkod.util.nodes.AnnotatedNode;

        r1 := @parameter0: kodkod.ast.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node> = r1;

        $r2 = new kodkod.util.nodes.AnnotatedNode$SharingDetector;

        specialinvoke $r2.<kodkod.util.nodes.AnnotatedNode$SharingDetector: void <init>()>();

        virtualinvoke r1.<kodkod.ast.Node: void accept(kodkod.ast.visitor.VoidVisitor)>($r2);

        $r3 = virtualinvoke $r2.<kodkod.util.nodes.AnnotatedNode$SharingDetector: kodkod.util.collections.IdentityHashSet sharedNodes()>();

        $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r3);

        r0.<kodkod.util.nodes.AnnotatedNode: java.util.Set sharedNodes> = $r4;

        $r5 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        r0.<kodkod.util.nodes.AnnotatedNode: java.util.Map source> = $r5;

        return;
    }

    private void <init>(kodkod.ast.Node, java.util.Map)
    {
        kodkod.util.collections.IdentityHashSet $r3;
        java.util.Map r5;
        java.util.Set $r4;
        kodkod.util.nodes.AnnotatedNode$SharingDetector $r2;
        kodkod.util.nodes.AnnotatedNode r0;
        kodkod.ast.Node r1;

        r0 := @this: kodkod.util.nodes.AnnotatedNode;

        r1 := @parameter0: kodkod.ast.Node;

        r5 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node> = r1;

        $r2 = new kodkod.util.nodes.AnnotatedNode$SharingDetector;

        specialinvoke $r2.<kodkod.util.nodes.AnnotatedNode$SharingDetector: void <init>()>();

        virtualinvoke r1.<kodkod.ast.Node: void accept(kodkod.ast.visitor.VoidVisitor)>($r2);

        $r3 = virtualinvoke $r2.<kodkod.util.nodes.AnnotatedNode$SharingDetector: kodkod.util.collections.IdentityHashSet sharedNodes()>();

        $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r3);

        r0.<kodkod.util.nodes.AnnotatedNode: java.util.Set sharedNodes> = $r4;

        r0.<kodkod.util.nodes.AnnotatedNode: java.util.Map source> = r5;

        return;
    }

    public static kodkod.util.nodes.AnnotatedNode annotate(kodkod.ast.Node)
    {
        kodkod.util.nodes.AnnotatedNode $r0;
        kodkod.ast.Node r1;

        r1 := @parameter0: kodkod.ast.Node;

        $r0 = new kodkod.util.nodes.AnnotatedNode;

        specialinvoke $r0.<kodkod.util.nodes.AnnotatedNode: void <init>(kodkod.ast.Node)>(r1);

        return $r0;
    }

    public static kodkod.util.nodes.AnnotatedNode annotate(kodkod.ast.Node, java.util.Map)
    {
        kodkod.util.nodes.AnnotatedNode $r0;
        kodkod.ast.Node r1;
        java.util.Map r2;

        r1 := @parameter0: kodkod.ast.Node;

        r2 := @parameter1: java.util.Map;

        $r0 = new kodkod.util.nodes.AnnotatedNode;

        specialinvoke $r0.<kodkod.util.nodes.AnnotatedNode: void <init>(kodkod.ast.Node,java.util.Map)>(r1, r2);

        return $r0;
    }

    public static kodkod.util.nodes.AnnotatedNode annotateRoots(kodkod.ast.Formula)
    {
        kodkod.ast.Formula r0, $r2;
        java.util.Map $r4;
        java.util.Set $r1;
        kodkod.util.nodes.AnnotatedNode $r3;

        r0 := @parameter0: kodkod.ast.Formula;

        $r1 = staticinvoke <kodkod.util.nodes.Nodes: java.util.Set roots(kodkod.ast.Formula)>(r0);

        $r2 = staticinvoke <kodkod.ast.Formula: kodkod.ast.Formula and(java.util.Collection)>($r1);

        $r3 = new kodkod.util.nodes.AnnotatedNode;

        $r4 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>($r2, r0);

        specialinvoke $r3.<kodkod.util.nodes.AnnotatedNode: void <init>(kodkod.ast.Node,java.util.Map)>($r2, $r4);

        return $r3;
    }

    public final kodkod.ast.Node node()
    {
        kodkod.util.nodes.AnnotatedNode r0;
        kodkod.ast.Node $r1;

        r0 := @this: kodkod.util.nodes.AnnotatedNode;

        $r1 = r0.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node>;

        return $r1;
    }

    public final kodkod.ast.Node sourceOf(kodkod.ast.Node)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        kodkod.util.nodes.AnnotatedNode r0;
        kodkod.ast.Node r1, r4, $r5;

        r0 := @this: kodkod.util.nodes.AnnotatedNode;

        r1 := @parameter0: kodkod.ast.Node;

        $r2 = r0.<kodkod.util.nodes.AnnotatedNode: java.util.Map source>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (kodkod.ast.Node) $r3;

        if r4 != null goto label1;

        $r5 = r1;

        goto label2;

     label1:
        $r5 = r4;

     label2:
        return $r5;
    }

    public final java.util.Set sharedNodes()
    {
        java.util.Set $r1;
        kodkod.util.nodes.AnnotatedNode r0;

        r0 := @this: kodkod.util.nodes.AnnotatedNode;

        $r1 = r0.<kodkod.util.nodes.AnnotatedNode: java.util.Set sharedNodes>;

        return $r1;
    }

    public final java.util.Set relations()
    {
        kodkod.util.collections.IdentityHashSet $r0;
        kodkod.util.nodes.AnnotatedNode$1 $r1;
        kodkod.util.nodes.AnnotatedNode r2;
        kodkod.ast.Node $r3;

        r2 := @this: kodkod.util.nodes.AnnotatedNode;

        $r0 = new kodkod.util.collections.IdentityHashSet;

        specialinvoke $r0.<kodkod.util.collections.IdentityHashSet: void <init>()>();

        $r1 = new kodkod.util.nodes.AnnotatedNode$1;

        specialinvoke $r1.<kodkod.util.nodes.AnnotatedNode$1: void <init>(kodkod.util.nodes.AnnotatedNode,java.util.Set)>(r2, $r0);

        $r3 = r2.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node>;

        virtualinvoke $r3.<kodkod.ast.Node: void accept(kodkod.ast.visitor.VoidVisitor)>($r1);

        return $r0;
    }

    public final boolean usesInts()
    {
        kodkod.util.nodes.AnnotatedNode$2 $r0;
        java.util.Set $r2;
        java.lang.Boolean $r5;
        java.lang.Object $r4;
        kodkod.util.nodes.AnnotatedNode r1;
        kodkod.ast.Node $r3;
        boolean $z0;

        r1 := @this: kodkod.util.nodes.AnnotatedNode;

        $r0 = new kodkod.util.nodes.AnnotatedNode$2;

        $r2 = r1.<kodkod.util.nodes.AnnotatedNode: java.util.Set sharedNodes>;

        specialinvoke $r0.<kodkod.util.nodes.AnnotatedNode$2: void <init>(kodkod.util.nodes.AnnotatedNode,java.util.Set)>(r1, $r2);

        $r3 = r1.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node>;

        $r4 = virtualinvoke $r3.<kodkod.ast.Node: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>($r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public final java.util.Map predicates()
    {
        java.util.EnumMap $r4;
        kodkod.util.nodes.AnnotatedNode$PredicateCollector $r0;
        java.util.Set $r2;
        kodkod.util.nodes.AnnotatedNode r1;
        kodkod.ast.Node $r3;

        r1 := @this: kodkod.util.nodes.AnnotatedNode;

        $r0 = new kodkod.util.nodes.AnnotatedNode$PredicateCollector;

        $r2 = r1.<kodkod.util.nodes.AnnotatedNode: java.util.Set sharedNodes>;

        specialinvoke $r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: void <init>(java.util.Set)>($r2);

        $r3 = r1.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node>;

        virtualinvoke $r3.<kodkod.ast.Node: void accept(kodkod.ast.visitor.VoidVisitor)>($r0);

        $r4 = $r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: java.util.EnumMap preds>;

        return $r4;
    }

    public final kodkod.ast.visitor.AbstractDetector quantifiedFormulaDetector()
    {
        java.util.Set $r2;
        kodkod.util.nodes.AnnotatedNode r1;
        kodkod.util.nodes.AnnotatedNode$3 $r0;

        r1 := @this: kodkod.util.nodes.AnnotatedNode;

        $r0 = new kodkod.util.nodes.AnnotatedNode$3;

        $r2 = r1.<kodkod.util.nodes.AnnotatedNode: java.util.Set sharedNodes>;

        specialinvoke $r0.<kodkod.util.nodes.AnnotatedNode$3: void <init>(kodkod.util.nodes.AnnotatedNode,java.util.Set)>(r1, $r2);

        return $r0;
    }

    public final kodkod.ast.visitor.AbstractDetector freeVariableDetector()
    {
        java.util.Set $r2;
        kodkod.util.nodes.AnnotatedNode$FreeVariableDetector $r0;
        kodkod.util.nodes.AnnotatedNode r1;

        r1 := @this: kodkod.util.nodes.AnnotatedNode;

        $r0 = new kodkod.util.nodes.AnnotatedNode$FreeVariableDetector;

        $r2 = r1.<kodkod.util.nodes.AnnotatedNode: java.util.Set sharedNodes>;

        specialinvoke $r0.<kodkod.util.nodes.AnnotatedNode$FreeVariableDetector: void <init>(java.util.Set)>($r2);

        return $r0;
    }

    public java.lang.String toString()
    {
        java.util.Map $r4;
        java.util.Set $r3;
        java.lang.StringBuilder $r0;
        java.lang.String $r5;
        kodkod.util.nodes.AnnotatedNode r1;
        kodkod.ast.Node $r2;

        r1 := @this: kodkod.util.nodes.AnnotatedNode;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("node: ");

        $r2 = r1.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nshared nodes: ");

        $r3 = r1.<kodkod.util.nodes.AnnotatedNode: java.util.Set sharedNodes>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nsources: ");

        $r4 = r1.<kodkod.util.nodes.AnnotatedNode: java.util.Map source>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    static java.util.Set access$0(kodkod.util.nodes.AnnotatedNode)
    {
        java.util.Set $r1;
        kodkod.util.nodes.AnnotatedNode r0;

        r0 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        $r1 = r0.<kodkod.util.nodes.AnnotatedNode: java.util.Set sharedNodes>;

        return $r1;
    }
}
