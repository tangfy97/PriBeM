public class org.eclipse.jetty.client.ContentExchange extends org.eclipse.jetty.client.CachedExchange
{
    private int _bufferSize;
    private java.lang.String _encoding;
    private java.io.ByteArrayOutputStream _responseContent;
    private java.io.File _fileForUpload;

    public void <init>()
    {
        org.eclipse.jetty.client.ContentExchange r0;

        r0 := @this: org.eclipse.jetty.client.ContentExchange;

        specialinvoke r0.<org.eclipse.jetty.client.CachedExchange: void <init>(boolean)>(0);

        r0.<org.eclipse.jetty.client.ContentExchange: int _bufferSize> = 4096;

        r0.<org.eclipse.jetty.client.ContentExchange: java.lang.String _encoding> = "utf-8";

        return;
    }

    public void <init>(boolean)
    {
        org.eclipse.jetty.client.ContentExchange r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.client.ContentExchange;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.eclipse.jetty.client.CachedExchange: void <init>(boolean)>(z0);

        r0.<org.eclipse.jetty.client.ContentExchange: int _bufferSize> = 4096;

        r0.<org.eclipse.jetty.client.ContentExchange: java.lang.String _encoding> = "utf-8";

        return;
    }

    public synchronized java.lang.String getResponseContent() throws java.io.UnsupportedEncodingException
    {
        java.io.ByteArrayOutputStream $r1, $r3;
        org.eclipse.jetty.client.ContentExchange r0;
        java.lang.String $r2, $r4;

        r0 := @this: org.eclipse.jetty.client.ContentExchange;

        $r1 = r0.<org.eclipse.jetty.client.ContentExchange: java.io.ByteArrayOutputStream _responseContent>;

        if $r1 == null goto label1;

        $r3 = r0.<org.eclipse.jetty.client.ContentExchange: java.io.ByteArrayOutputStream _responseContent>;

        $r2 = r0.<org.eclipse.jetty.client.ContentExchange: java.lang.String _encoding>;

        $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>($r2);

        return $r4;

     label1:
        return null;
    }

    public synchronized byte[] getResponseContentBytes()
    {
        byte[] $r3;
        java.io.ByteArrayOutputStream $r1, $r2;
        org.eclipse.jetty.client.ContentExchange r0;

        r0 := @this: org.eclipse.jetty.client.ContentExchange;

        $r1 = r0.<org.eclipse.jetty.client.ContentExchange: java.io.ByteArrayOutputStream _responseContent>;

        if $r1 == null goto label1;

        $r2 = r0.<org.eclipse.jetty.client.ContentExchange: java.io.ByteArrayOutputStream _responseContent>;

        $r3 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;

     label1:
        return null;
    }

    protected synchronized void onResponseStatus(org.eclipse.jetty.io.Buffer, int, org.eclipse.jetty.io.Buffer) throws java.io.IOException
    {
        java.io.ByteArrayOutputStream $r1, $r4;
        int i0;
        org.eclipse.jetty.client.ContentExchange r0;
        org.eclipse.jetty.io.Buffer r2, r3;

        r0 := @this: org.eclipse.jetty.client.ContentExchange;

        r2 := @parameter0: org.eclipse.jetty.io.Buffer;

        i0 := @parameter1: int;

        r3 := @parameter2: org.eclipse.jetty.io.Buffer;

        $r1 = r0.<org.eclipse.jetty.client.ContentExchange: java.io.ByteArrayOutputStream _responseContent>;

        if $r1 == null goto label1;

        $r4 = r0.<org.eclipse.jetty.client.ContentExchange: java.io.ByteArrayOutputStream _responseContent>;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void reset()>();

     label1:
        specialinvoke r0.<org.eclipse.jetty.client.CachedExchange: void onResponseStatus(org.eclipse.jetty.io.Buffer,int,org.eclipse.jetty.io.Buffer)>(r2, i0, r3);

        return;
    }

    protected synchronized void onResponseHeader(org.eclipse.jetty.io.Buffer, org.eclipse.jetty.io.Buffer) throws java.io.IOException
    {
        org.eclipse.jetty.http.HttpHeaders $r3;
        int $i0, $i1, $i2, $i3, $i4;
        org.eclipse.jetty.client.ContentExchange r0;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9;
        org.eclipse.jetty.io.Buffer r1, r2;

        r0 := @this: org.eclipse.jetty.client.ContentExchange;

        r1 := @parameter0: org.eclipse.jetty.io.Buffer;

        r2 := @parameter1: org.eclipse.jetty.io.Buffer;

        specialinvoke r0.<org.eclipse.jetty.client.CachedExchange: void onResponseHeader(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)>(r1, r2);

        $r3 = <org.eclipse.jetty.http.HttpHeaders: org.eclipse.jetty.http.HttpHeaders CACHE>;

        $i0 = virtualinvoke $r3.<org.eclipse.jetty.http.HttpHeaders: int getOrdinal(org.eclipse.jetty.io.Buffer)>(r1);

        lookupswitch($i0)
        {
            case 12: goto label1;
            case 16: goto label2;
            default: goto label3;
        };

     label1:
        $i4 = staticinvoke <org.eclipse.jetty.io.BufferUtil: int toInt(org.eclipse.jetty.io.Buffer)>(r2);

        r0.<org.eclipse.jetty.client.ContentExchange: int _bufferSize> = $i4;

        goto label3;

     label2:
        $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r5 = staticinvoke <org.eclipse.jetty.util.StringUtil: java.lang.String asciiToLowerCase(java.lang.String)>($r4);

        $i1 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>("charset=");

        if $i1 <= 0 goto label3;

        $i2 = $i1 + 8;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>($i2);

        r0.<org.eclipse.jetty.client.ContentExchange: java.lang.String _encoding> = $r6;

        $r7 = r0.<org.eclipse.jetty.client.ContentExchange: java.lang.String _encoding>;

        $i3 = virtualinvoke $r7.<java.lang.String: int indexOf(int)>(59);

        if $i3 <= 0 goto label3;

        $r8 = r0.<org.eclipse.jetty.client.ContentExchange: java.lang.String _encoding>;

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        r0.<org.eclipse.jetty.client.ContentExchange: java.lang.String _encoding> = $r9;

     label3:
        return;
    }

    protected synchronized void onResponseContent(org.eclipse.jetty.io.Buffer) throws java.io.IOException
    {
        java.io.ByteArrayOutputStream $r2, $r3, $r4;
        int $i0;
        org.eclipse.jetty.client.ContentExchange r0;
        org.eclipse.jetty.io.Buffer r1;

        r0 := @this: org.eclipse.jetty.client.ContentExchange;

        r1 := @parameter0: org.eclipse.jetty.io.Buffer;

        specialinvoke r0.<org.eclipse.jetty.client.CachedExchange: void onResponseContent(org.eclipse.jetty.io.Buffer)>(r1);

        $r2 = r0.<org.eclipse.jetty.client.ContentExchange: java.io.ByteArrayOutputStream _responseContent>;

        if $r2 != null goto label1;

        $r4 = new java.io.ByteArrayOutputStream;

        $i0 = r0.<org.eclipse.jetty.client.ContentExchange: int _bufferSize>;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>(int)>($i0);

        r0.<org.eclipse.jetty.client.ContentExchange: java.io.ByteArrayOutputStream _responseContent> = $r4;

     label1:
        $r3 = r0.<org.eclipse.jetty.client.ContentExchange: java.io.ByteArrayOutputStream _responseContent>;

        interfaceinvoke r1.<org.eclipse.jetty.io.Buffer: void writeTo(java.io.OutputStream)>($r3);

        return;
    }

    protected synchronized void onRetry() throws java.io.IOException
    {
        org.eclipse.jetty.client.ContentExchange r0;
        java.io.File $r1;
        java.io.InputStream $r2;

        r0 := @this: org.eclipse.jetty.client.ContentExchange;

        $r1 = r0.<org.eclipse.jetty.client.ContentExchange: java.io.File _fileForUpload>;

        if $r1 == null goto label1;

        virtualinvoke r0.<org.eclipse.jetty.client.ContentExchange: void setRequestContent(org.eclipse.jetty.io.Buffer)>(null);

        $r2 = specialinvoke r0.<org.eclipse.jetty.client.ContentExchange: java.io.InputStream getInputStream()>();

        virtualinvoke r0.<org.eclipse.jetty.client.ContentExchange: void setRequestContentSource(java.io.InputStream)>($r2);

        goto label2;

     label1:
        specialinvoke r0.<org.eclipse.jetty.client.CachedExchange: void onRetry()>();

     label2:
        return;
    }

    private synchronized java.io.InputStream getInputStream() throws java.io.IOException
    {
        org.eclipse.jetty.client.ContentExchange r1;
        java.io.FileInputStream $r0;
        java.io.File $r2;

        r1 := @this: org.eclipse.jetty.client.ContentExchange;

        $r0 = new java.io.FileInputStream;

        $r2 = r1.<org.eclipse.jetty.client.ContentExchange: java.io.File _fileForUpload>;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

        return $r0;
    }

    public synchronized java.io.File getFileForUpload()
    {
        org.eclipse.jetty.client.ContentExchange r0;
        java.io.File $r1;

        r0 := @this: org.eclipse.jetty.client.ContentExchange;

        $r1 = r0.<org.eclipse.jetty.client.ContentExchange: java.io.File _fileForUpload>;

        return $r1;
    }

    public synchronized void setFileForUpload(java.io.File) throws java.io.IOException
    {
        org.eclipse.jetty.client.ContentExchange r0;
        java.io.File r1;
        java.io.InputStream $r2;

        r0 := @this: org.eclipse.jetty.client.ContentExchange;

        r1 := @parameter0: java.io.File;

        r0.<org.eclipse.jetty.client.ContentExchange: java.io.File _fileForUpload> = r1;

        $r2 = specialinvoke r0.<org.eclipse.jetty.client.ContentExchange: java.io.InputStream getInputStream()>();

        virtualinvoke r0.<org.eclipse.jetty.client.ContentExchange: void setRequestContentSource(java.io.InputStream)>($r2);

        return;
    }
}
