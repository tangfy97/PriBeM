public class arq.qexpr extends java.lang.Object
{

    public void <init>()
    {
        arq.qexpr r0;

        r0 := @this: arq.qexpr;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient void main(java.lang.String[])
    {
        java.io.PrintStream $r2, $r6;
        java.lang.Throwable $r4, $r5;
        java.lang.String[] r0;
        arq.cmd.CmdException $r1;
        int $i0;
        java.lang.String $r3;
        arq.cmd.TerminationException $r7;

        r0 := @parameter0: java.lang.String[];

     label1:
        staticinvoke <arq.qexpr: void main2(java.lang.String[])>(r0);

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        $i0 = virtualinvoke $r7.<arq.cmd.TerminationException: int getCode()>();

        staticinvoke <java.lang.System: void exit(int)>($i0);

        goto label5;

     label4:
        $r1 := @caughtexception;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r3 = virtualinvoke $r1.<arq.cmd.CmdException: java.lang.String getMessage()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r3);

        $r4 = virtualinvoke $r1.<arq.cmd.CmdException: java.lang.Throwable getCause()>();

        if $r4 == null goto label5;

        $r5 = virtualinvoke $r1.<arq.cmd.CmdException: java.lang.Throwable getCause()>();

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r6);

     label5:
        return;

        catch arq.cmd.TerminationException from label1 to label2 with label3;
        catch arq.cmd.CmdException from label1 to label2 with label4;
    }

    public static transient void execAndReturn(java.lang.String[])
    {
        java.io.PrintStream $r2, $r6;
        java.lang.Throwable $r4, $r5;
        java.lang.String[] r0;
        arq.cmd.CmdException $r1;
        java.lang.String $r3;
        arq.cmd.TerminationException $r7;

        r0 := @parameter0: java.lang.String[];

     label1:
        staticinvoke <arq.qexpr: void main2(java.lang.String[])>(r0);

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        return;

     label4:
        $r1 := @caughtexception;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r3 = virtualinvoke $r1.<arq.cmd.CmdException: java.lang.String getMessage()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r3);

        $r4 = virtualinvoke $r1.<arq.cmd.CmdException: java.lang.Throwable getCause()>();

        if $r4 == null goto label5;

        $r5 = virtualinvoke $r1.<arq.cmd.CmdException: java.lang.Throwable getCause()>();

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r6);

     label5:
        return;

        catch arq.cmd.TerminationException from label1 to label2 with label3;
        catch arq.cmd.CmdException from label1 to label2 with label4;
    }

    public static transient void main2(java.lang.String[])
    {
        com.hp.hpl.jena.sparql.core.Prologue $r35;
        arq.cmdline.ArgDecl $r2, $r4, $r6, $r8, $r10, $r12, $r14;
        com.hp.hpl.jena.graph.Node $r25, $r29;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r72;
        arq.cmd.TerminationException $r51, $r62, $r63, $r71, $r79;
        com.hp.hpl.jena.sparql.util.Context $r23, $r27;
        arq.cmd.CmdException $r84;
        java.lang.StringBuilder $r39, $r42, $r43, $r46, $r48, $r49, $r52, $r54, $r56, $r57, $r59, $r60, $r65, $r67, $r69, $r73, $r75, $r77;
        com.hp.hpl.jena.sparql.expr.NodeValue $r28;
        java.lang.String $r18, $r19, $r30, $r38, $r41, $r44, $r50, $r55, $r58, $r61, $r68, $r70, $r76, $r78, $r82, r85;
        org.apache.jena.atlas.io.IndentedWriter $r36;
        com.hp.hpl.jena.sparql.expr.Expr $r22, $r33;
        arq.cmdline.CmdLineArgs $r0;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r32;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, z10, $z11;
        java.util.List $r16;
        com.hp.hpl.jena.shared.PrefixMapping $r20, $r21;
        java.lang.String[] r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15;
        int $i0, i1;
        com.hp.hpl.jena.query.QueryParseException $r64;
        com.hp.hpl.jena.sparql.util.Symbol $r24;
        java.io.PrintStream $r31, $r34, $r37, $r40, $r47, $r53, $r66, $r74, $r81, $r83;
        java.util.Iterator $r17;
        java.lang.IllegalArgumentException $r80;
        java.lang.Object $r45;

        r1 := @parameter0: java.lang.String[];

        $r0 = new arq.cmdline.CmdLineArgs;

        specialinvoke $r0.<arq.cmdline.CmdLineArgs: void <init>(java.lang.String[])>(r1);

        $r2 = new arq.cmdline.ArgDecl;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "help";

        specialinvoke $r2.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "h", $r3);

        virtualinvoke $r0.<arq.cmdline.CmdLineArgs: arq.cmdline.CmdLineArgs add(arq.cmdline.ArgDecl)>($r2);

        $r4 = new arq.cmdline.ArgDecl;

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "verbose";

        specialinvoke $r4.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "v", $r5);

        virtualinvoke $r0.<arq.cmdline.CmdLineArgs: arq.cmdline.CmdLineArgs add(arq.cmdline.ArgDecl)>($r4);

        $r6 = new arq.cmdline.ArgDecl;

        $r7 = newarray (java.lang.String)[2];

        $r7[0] = "version";

        $r7[1] = "V";

        specialinvoke $r6.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "ver", $r7);

        virtualinvoke $r0.<arq.cmdline.CmdLineArgs: arq.cmdline.CmdLineArgs add(arq.cmdline.ArgDecl)>($r6);

        $r8 = new arq.cmdline.ArgDecl;

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = "quiet";

        specialinvoke $r8.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "q", $r9);

        virtualinvoke $r0.<arq.cmdline.CmdLineArgs: arq.cmdline.CmdLineArgs add(arq.cmdline.ArgDecl)>($r8);

        $r10 = new arq.cmdline.ArgDecl;

        $r11 = newarray (java.lang.String)[2];

        $r11[0] = "fold";

        $r11[1] = "simplify";

        specialinvoke $r10.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "reduce", $r11);

        virtualinvoke $r0.<arq.cmdline.CmdLineArgs: arq.cmdline.CmdLineArgs add(arq.cmdline.ArgDecl)>($r10);

        $r12 = new arq.cmdline.ArgDecl;

        $r13 = newarray (java.lang.String)[0];

        specialinvoke $r12.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "strict", $r13);

        virtualinvoke $r0.<arq.cmdline.CmdLineArgs: arq.cmdline.CmdLineArgs add(arq.cmdline.ArgDecl)>($r12);

        $r14 = new arq.cmdline.ArgDecl;

        $r15 = newarray (java.lang.String)[0];

        specialinvoke $r14.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "print", $r15);

        virtualinvoke $r0.<arq.cmdline.CmdLineArgs: arq.cmdline.CmdLineArgs add(arq.cmdline.ArgDecl)>($r14);

     label01:
        virtualinvoke $r0.<arq.cmdline.CmdLineArgs: void process()>();

     label02:
        goto label04;

     label03:
        $r80 := @caughtexception;

        $r81 = <java.lang.System: java.io.PrintStream err>;

        $r82 = virtualinvoke $r80.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        virtualinvoke $r81.<java.io.PrintStream: void println(java.lang.String)>($r82);

        $r83 = <java.lang.System: java.io.PrintStream err>;

        staticinvoke <arq.qexpr: void usage(java.io.PrintStream)>($r83);

        $r84 = new arq.cmd.CmdException;

        specialinvoke $r84.<arq.cmd.CmdException: void <init>()>();

        throw $r84;

     label04:
        $z0 = virtualinvoke $r0.<arq.cmdline.CmdLineArgs: boolean contains(arq.cmdline.ArgDecl)>($r2);

        if $z0 == 0 goto label05;

        staticinvoke <arq.qexpr: void usage()>();

        $r63 = new arq.cmd.TerminationException;

        specialinvoke $r63.<arq.cmd.TerminationException: void <init>(int)>(0);

        throw $r63;

     label05:
        $z1 = virtualinvoke $r0.<arq.cmdline.CmdLineArgs: boolean contains(arq.cmdline.ArgDecl)>($r6);

        if $z1 == 0 goto label06;

        $r53 = <java.lang.System: java.io.PrintStream out>;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ARQ Version: ");

        $r55 = <com.hp.hpl.jena.query.ARQ: java.lang.String VERSION>;

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (Jena: ");

        $r58 = <com.hp.hpl.jena.Jena: java.lang.String VERSION>;

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r53.<java.io.PrintStream: void println(java.lang.String)>($r61);

        $r62 = new arq.cmd.TerminationException;

        specialinvoke $r62.<arq.cmd.TerminationException: void <init>(int)>(0);

        throw $r62;

     label06:
        $z2 = virtualinvoke $r0.<arq.cmdline.CmdLineArgs: boolean contains(arq.cmdline.ArgDecl)>($r4);

        virtualinvoke $r0.<arq.cmdline.CmdLineArgs: boolean contains(arq.cmdline.ArgDecl)>($r8);

        $z3 = virtualinvoke $r0.<arq.cmdline.CmdLineArgs: boolean contains(arq.cmdline.ArgDecl)>($r12);

        if $z3 == 0 goto label07;

        staticinvoke <com.hp.hpl.jena.query.ARQ: void setStrictMode()>();

     label07:
        $z4 = virtualinvoke $r0.<arq.cmdline.CmdLineArgs: boolean contains(arq.cmdline.ArgDecl)>($r10);

        z9 = 0;

        z10 = 0;

        $z5 = virtualinvoke $r0.<arq.cmdline.CmdLineArgs: boolean contains(arq.cmdline.ArgDecl)>($r14);

        $r16 = virtualinvoke $r0.<arq.cmdline.CmdLineArgs: java.util.List getValues(arq.cmdline.ArgDecl)>($r14);

        $r17 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z11 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label13;

        $r45 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r85 = (java.lang.String) $r45;

        $z6 = virtualinvoke r85.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("prefix");

        if $z6 != 0 goto label09;

        $z7 = virtualinvoke r85.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("op");

        if $z7 == 0 goto label10;

     label09:
        z9 = 1;

        goto label12;

     label10:
        $z8 = virtualinvoke r85.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("expr");

        if $z8 == 0 goto label11;

        z10 = 1;

        goto label12;

     label11:
        $r47 = <java.lang.System: java.io.PrintStream err>;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown print form: ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r85);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r47.<java.io.PrintStream: void println(java.lang.String)>($r50);

        $r51 = new arq.cmd.TerminationException;

        specialinvoke $r51.<arq.cmd.TerminationException: void <init>(int)>(0);

        throw $r51;

     label12:
        goto label08;

     label13:
        i1 = 0;

     label14:
        $i0 = virtualinvoke $r0.<arq.cmdline.CmdLineArgs: int getNumPositional()>();

        if i1 >= $i0 goto label26;

        $r18 = virtualinvoke $r0.<arq.cmdline.CmdLineArgs: java.lang.String getPositionalArg(int)>(i1);

        $r19 = virtualinvoke $r0.<arq.cmdline.CmdLineArgs: java.lang.String indirect(java.lang.String)>($r18);

     label15:
        $r20 = staticinvoke <com.hp.hpl.jena.shared.PrefixMapping$Factory: com.hp.hpl.jena.shared.PrefixMapping create()>();

        $r21 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.shared.PrefixMapping getGlobalPrefixMap()>();

        interfaceinvoke $r20.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(com.hp.hpl.jena.shared.PrefixMapping)>($r21);

        interfaceinvoke $r20.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("", "http://example/");

        interfaceinvoke $r20.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("ex", "http://example/ns#");

        $r22 = staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: com.hp.hpl.jena.sparql.expr.Expr parse(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>($r19, $r20);

        if $z2 == 0 goto label16;

        $r40 = <java.lang.System: java.io.PrintStream out>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r22.<java.lang.Object: java.lang.String toString()>();

        $r42 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" => ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r40.<java.io.PrintStream: void print(java.lang.String)>($r44);

     label16:
        if $z5 == 0 goto label19;

        if z10 == 0 goto label17;

        $r37 = <java.lang.System: java.io.PrintStream out>;

        $r38 = staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: java.lang.String fmtSPARQL(com.hp.hpl.jena.sparql.expr.Expr)>($r22);

        virtualinvoke $r37.<java.io.PrintStream: void println(java.lang.String)>($r38);

     label17:
        if z9 == 0 goto label18;

        $r36 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        $r35 = new com.hp.hpl.jena.sparql.core.Prologue;

        specialinvoke $r35.<com.hp.hpl.jena.sparql.core.Prologue: void <init>(com.hp.hpl.jena.shared.PrefixMapping)>($r20);

        staticinvoke <com.hp.hpl.jena.sparql.sse.WriterSSE: void out(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.core.Prologue)>($r36, $r22, $r35);

     label18:
        goto label25;

     label19:
        if $z4 == 0 goto label20;

        $r32 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create()>();

        $r33 = interfaceinvoke $r22.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding,boolean)>($r32, 1);

        $r34 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r34.<java.io.PrintStream: void println(java.lang.Object)>($r33);

        goto label21;

     label20:
        $r23 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r24 = <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol sysCurrentTime>;

        $r25 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node nowAsDateTime()>();

        virtualinvoke $r23.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>($r24, $r25);

        $r26 = new com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r27 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        specialinvoke $r26.<com.hp.hpl.jena.sparql.engine.ExecutionContext: void <init>(com.hp.hpl.jena.sparql.util.Context,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory)>($r27, null, null, null);

        $r28 = interfaceinvoke $r22.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(null, $r26);

        $r29 = virtualinvoke $r28.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r30 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>($r29);

        $r31 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>($r30);

     label21:
        goto label23;

     label22:
        $r72 := @caughtexception;

        $r74 = <java.lang.System: java.io.PrintStream out>;

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r75 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception: ");

        $r76 = virtualinvoke $r72.<com.hp.hpl.jena.sparql.expr.ExprEvalException: java.lang.String getMessage()>();

        $r77 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76);

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r74.<java.io.PrintStream: void println(java.lang.String)>($r78);

        $r79 = new arq.cmd.TerminationException;

        specialinvoke $r79.<arq.cmd.TerminationException: void <init>(int)>(2);

        throw $r79;

     label23:
        goto label25;

     label24:
        $r64 := @caughtexception;

        $r66 = <java.lang.System: java.io.PrintStream err>;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parse error: ");

        $r68 = virtualinvoke $r64.<com.hp.hpl.jena.query.QueryParseException: java.lang.String getMessage()>();

        $r69 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r66.<java.io.PrintStream: void println(java.lang.String)>($r70);

        $r71 = new arq.cmd.TerminationException;

        specialinvoke $r71.<arq.cmd.TerminationException: void <init>(int)>(2);

        throw $r71;

     label25:
        i1 = i1 + 1;

        goto label14;

     label26:
        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch com.hp.hpl.jena.sparql.expr.ExprEvalException from label19 to label21 with label22;
        catch com.hp.hpl.jena.query.QueryParseException from label15 to label18 with label24;
        catch com.hp.hpl.jena.query.QueryParseException from label19 to label23 with label24;
    }

    static void usage()
    {
        java.io.PrintStream $r0;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <arq.qexpr: void usage(java.io.PrintStream)>($r0);

        return;
    }

    static void usage(java.io.PrintStream)
    {
        java.io.PrintStream r0;

        r0 := @parameter0: java.io.PrintStream;

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>("Usage: [--print=[prefix|expr]] expression");

        return;
    }

    static void <clinit>()
    {
        staticinvoke <org.apache.jena.atlas.logging.Log: boolean setLog4j()>();

        staticinvoke <arq.cmd.CmdUtils: void setN3Params()>();

        return;
    }
}
