public class org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder extends org.apache.pdfbox.pdmodel.common.function.type4.Parser$AbstractSyntaxHandler
{
    private org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence mainSequence;
    private java.util.Stack seqStack;
    private static final java.util.regex.Pattern INTEGER_PATTERN;
    private static final java.util.regex.Pattern REAL_PATTERN;

    private void <init>()
    {
        org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence $r1, $r3;
        org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder r0;
        java.util.Stack $r2, $r4;

        r0 := @this: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$AbstractSyntaxHandler: void <init>()>();

        $r1 = new org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence;

        specialinvoke $r1.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence mainSequence> = $r1;

        $r2 = new java.util.Stack;

        specialinvoke $r2.<java.util.Stack: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.Stack seqStack> = $r2;

        $r4 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.Stack seqStack>;

        $r3 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence mainSequence>;

        virtualinvoke $r4.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r3);

        return;
    }

    public org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getInstructionSequence()
    {
        org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence $r1;
        org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder r0;

        r0 := @this: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder;

        $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence mainSequence>;

        return $r1;
    }

    public static org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence parse(java.lang.CharSequence)
    {
        org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence $r2;
        java.lang.CharSequence r1;
        org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder $r0;

        r1 := @parameter0: java.lang.CharSequence;

        $r0 = new org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder;

        specialinvoke $r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: void <init>()>();

        staticinvoke <org.apache.pdfbox.pdmodel.common.function.type4.Parser: void parse(java.lang.CharSequence,org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler)>(r1, $r0);

        $r2 = virtualinvoke $r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getInstructionSequence()>();

        return $r2;
    }

    private org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getCurrentSequence()
    {
        org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence $r3;
        java.lang.Object $r2;
        org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder r0;
        java.util.Stack $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder;

        $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.Stack seqStack>;

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object peek()>();

        $r3 = (org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence) $r2;

        return $r3;
    }

    public void token(java.lang.CharSequence)
    {
        java.lang.String $r1;
        java.lang.CharSequence r0;
        org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder r2;

        r2 := @this: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r2.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: void token(java.lang.String)>($r1);

        return;
    }

    private void token(java.lang.String)
    {
        org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence $r8, $r10, $r11, $r14, $r15;
        java.util.Stack $r13, $r16;
        java.util.regex.Matcher $r4, $r6;
        int $i0;
        java.lang.String r0, $r1, $r2, $r9, $r12;
        boolean $z0, $z1, $z2, $z3;
        org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder r7;
        float $f0;
        java.util.regex.Pattern $r3, $r5;

        r7 := @this: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder;

        r0 := @parameter0: java.lang.String;

        $r1 = "{";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r14 = new org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence;

        specialinvoke $r14.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void <init>()>();

        $r15 = specialinvoke r7.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getCurrentSequence()>();

        virtualinvoke $r15.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void addProc(org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence)>($r14);

        $r16 = r7.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.Stack seqStack>;

        virtualinvoke $r16.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r14);

        goto label5;

     label1:
        $r2 = "}";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $r13 = r7.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.Stack seqStack>;

        virtualinvoke $r13.<java.util.Stack: java.lang.Object pop()>();

        goto label5;

     label2:
        $r3 = <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.regex.Pattern INTEGER_PATTERN>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z2 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();

        if $z2 == 0 goto label3;

        $r11 = specialinvoke r7.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getCurrentSequence()>();

        $r12 = virtualinvoke r0.<java.lang.String: java.lang.String toString()>();

        $i0 = staticinvoke <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: int parseInt(java.lang.String)>($r12);

        virtualinvoke $r11.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void addInteger(int)>($i0);

        return;

     label3:
        $r5 = <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.regex.Pattern REAL_PATTERN>;

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z3 = virtualinvoke $r6.<java.util.regex.Matcher: boolean matches()>();

        if $z3 == 0 goto label4;

        $r10 = specialinvoke r7.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getCurrentSequence()>();

        $f0 = staticinvoke <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: float parseReal(java.lang.String)>(r0);

        virtualinvoke $r10.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void addReal(float)>($f0);

        return;

     label4:
        $r8 = specialinvoke r7.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getCurrentSequence()>();

        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String toString()>();

        virtualinvoke $r8.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void addName(java.lang.String)>($r9);

     label5:
        return;
    }

    public static int parseInt(java.lang.String)
    {
        int $i0;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("+");

        if $z0 == 0 goto label1;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

        return $i0;
    }

    public static float parseReal(java.lang.String)
    {
        float $f0;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r0);

        return $f0;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[\\+\\-]?\\d+");

        <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.regex.Pattern INTEGER_PATTERN> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[\\-]?\\d*\\.\\d*([Ee]\\-?\\d+)?");

        <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.regex.Pattern REAL_PATTERN> = $r1;

        return;
    }
}
