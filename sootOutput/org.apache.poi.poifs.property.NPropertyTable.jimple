public final class org.apache.poi.poifs.property.NPropertyTable extends org.apache.poi.poifs.property.PropertyTableBase
{
    private static final org.apache.poi.util.POILogger _logger;
    private org.apache.poi.poifs.common.POIFSBigBlockSize _bigBigBlockSize;

    public void <init>(org.apache.poi.poifs.storage.HeaderBlock)
    {
        org.apache.poi.poifs.property.NPropertyTable r0;
        org.apache.poi.poifs.storage.HeaderBlock r1;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r2;

        r0 := @this: org.apache.poi.poifs.property.NPropertyTable;

        r1 := @parameter0: org.apache.poi.poifs.storage.HeaderBlock;

        specialinvoke r0.<org.apache.poi.poifs.property.PropertyTableBase: void <init>(org.apache.poi.poifs.storage.HeaderBlock)>(r1);

        $r2 = virtualinvoke r1.<org.apache.poi.poifs.storage.HeaderBlock: org.apache.poi.poifs.common.POIFSBigBlockSize getBigBlockSize()>();

        r0.<org.apache.poi.poifs.property.NPropertyTable: org.apache.poi.poifs.common.POIFSBigBlockSize _bigBigBlockSize> = $r2;

        return;
    }

    public void <init>(org.apache.poi.poifs.storage.HeaderBlock, org.apache.poi.poifs.filesystem.NPOIFSFileSystem) throws java.io.IOException
    {
        java.util.Iterator $r4;
        java.util.List $r6;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r5, $r7;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r3;
        int $i0;
        org.apache.poi.poifs.filesystem.NPOIFSStream $r2;
        org.apache.poi.poifs.property.NPropertyTable r0;
        org.apache.poi.poifs.storage.HeaderBlock r1;

        r0 := @this: org.apache.poi.poifs.property.NPropertyTable;

        r1 := @parameter0: org.apache.poi.poifs.storage.HeaderBlock;

        r3 := @parameter1: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $r2 = new org.apache.poi.poifs.filesystem.NPOIFSStream;

        $i0 = virtualinvoke r1.<org.apache.poi.poifs.storage.HeaderBlock: int getPropertyStart()>();

        specialinvoke $r2.<org.apache.poi.poifs.filesystem.NPOIFSStream: void <init>(org.apache.poi.poifs.filesystem.BlockStore,int)>(r3, $i0);

        $r4 = virtualinvoke $r2.<org.apache.poi.poifs.filesystem.NPOIFSStream: java.util.Iterator iterator()>();

        $r5 = virtualinvoke r1.<org.apache.poi.poifs.storage.HeaderBlock: org.apache.poi.poifs.common.POIFSBigBlockSize getBigBlockSize()>();

        $r6 = staticinvoke <org.apache.poi.poifs.property.NPropertyTable: java.util.List buildProperties(java.util.Iterator,org.apache.poi.poifs.common.POIFSBigBlockSize)>($r4, $r5);

        specialinvoke r0.<org.apache.poi.poifs.property.PropertyTableBase: void <init>(org.apache.poi.poifs.storage.HeaderBlock,java.util.List)>(r1, $r6);

        $r7 = virtualinvoke r1.<org.apache.poi.poifs.storage.HeaderBlock: org.apache.poi.poifs.common.POIFSBigBlockSize getBigBlockSize()>();

        r0.<org.apache.poi.poifs.property.NPropertyTable: org.apache.poi.poifs.common.POIFSBigBlockSize _bigBigBlockSize> = $r7;

        return;
    }

    private static java.util.List buildProperties(java.util.Iterator, org.apache.poi.poifs.common.POIFSBigBlockSize) throws java.io.IOException
    {
        byte[] $r11, r12, $r13;
        java.lang.Integer $r6;
        java.nio.ByteBuffer r3;
        java.util.ArrayList $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8;
        java.lang.String $r10;
        boolean $z0, $z1;
        java.util.Iterator r1;
        org.apache.poi.util.POILogger $r5;
        org.apache.poi.poifs.common.POIFSBigBlockSize r4;
        java.lang.Object $r2;
        java.lang.StringBuilder $r7, $r8, $r9;

        r1 := @parameter0: java.util.Iterator;

        r4 := @parameter1: org.apache.poi.poifs.common.POIFSBigBlockSize;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.nio.ByteBuffer) $r2;

        $z1 = virtualinvoke r3.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z1 == 0 goto label2;

        $i2 = virtualinvoke r3.<java.nio.ByteBuffer: int arrayOffset()>();

        if $i2 != 0 goto label2;

        $r11 = virtualinvoke r3.<java.nio.ByteBuffer: byte[] array()>();

        $i3 = lengthof $r11;

        $i4 = virtualinvoke r4.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBigBlockSize()>();

        if $i3 != $i4 goto label2;

        r12 = virtualinvoke r3.<java.nio.ByteBuffer: byte[] array()>();

        goto label4;

     label2:
        $i5 = virtualinvoke r4.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBigBlockSize()>();

        $r13 = newarray (byte)[$i5];

        r12 = $r13;

        i6 = lengthof $r13;

        $i7 = virtualinvoke r3.<java.nio.ByteBuffer: int remaining()>();

        $i8 = virtualinvoke r4.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBigBlockSize()>();

        if $i7 >= $i8 goto label3;

        $r5 = <org.apache.poi.poifs.property.NPropertyTable: org.apache.poi.util.POILogger _logger>;

        $i0 = virtualinvoke r3.<java.nio.ByteBuffer: int remaining()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes instead of the expected ");

        $i1 = virtualinvoke r4.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBigBlockSize()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<org.apache.poi.util.POILogger: void log(int,java.lang.Object,java.lang.Object,java.lang.Object)>(5, "Short Property Block, ", $r6, $r10);

        i6 = virtualinvoke r3.<java.nio.ByteBuffer: int remaining()>();

     label3:
        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r13, 0, i6);

     label4:
        staticinvoke <org.apache.poi.poifs.property.PropertyFactory: void convertToProperties(byte[],java.util.List)>(r12, $r0);

        goto label1;

     label5:
        return $r0;
    }

    public int countBlocks()
    {
        java.util.List $r1;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r2;
        int $i0, i1, $i2, $i3, $i4;
        org.apache.poi.poifs.property.NPropertyTable r0;
        double $d0, $d1;

        r0 := @this: org.apache.poi.poifs.property.NPropertyTable;

        $r1 = r0.<org.apache.poi.poifs.property.NPropertyTable: java.util.List _properties>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        i1 = $i0 * 128;

        $r2 = r0.<org.apache.poi.poifs.property.NPropertyTable: org.apache.poi.poifs.common.POIFSBigBlockSize _bigBigBlockSize>;

        $i2 = virtualinvoke $r2.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBigBlockSize()>();

        $i3 = i1 / $i2;

        $d0 = (double) $i3;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i4 = (int) $d1;

        return $i4;
    }

    public void preWrite()
    {
        org.apache.poi.poifs.property.Property r7, r8;
        java.util.Iterator $r3, $r4;
        java.util.ArrayList $r0;
        java.util.List $r2;
        int $i0, i1;
        java.lang.Object $r5, $r6;
        org.apache.poi.poifs.property.NPropertyTable r1;
        boolean $z0, $z1;

        r1 := @this: org.apache.poi.poifs.property.NPropertyTable;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i1 = 0;

        $r2 = r1.<org.apache.poi.poifs.property.NPropertyTable: java.util.List _properties>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.poi.poifs.property.Property) $r6;

        if r7 != null goto label2;

        goto label1;

     label2:
        $i0 = i1;

        i1 = i1 + 1;

        virtualinvoke r7.<org.apache.poi.poifs.property.Property: void setIndex(int)>($i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r7);

        goto label1;

     label3:
        $r4 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.poi.poifs.property.Property) $r5;

        virtualinvoke r8.<org.apache.poi.poifs.property.Property: void preWrite()>();

        goto label4;

     label5:
        return;
    }

    public void write(org.apache.poi.poifs.filesystem.NPOIFSStream) throws java.io.IOException
    {
        java.io.OutputStream $r1;
        org.apache.poi.poifs.property.Property r6;
        java.util.Iterator $r4;
        java.util.List $r3;
        int $i0, $i1, $i2;
        org.apache.poi.poifs.filesystem.NPOIFSStream r0;
        java.lang.Object $r5;
        org.apache.poi.poifs.property.NPropertyTable r2;
        boolean $z0;

        r2 := @this: org.apache.poi.poifs.property.NPropertyTable;

        r0 := @parameter0: org.apache.poi.poifs.filesystem.NPOIFSStream;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSStream: java.io.OutputStream getOutputStream()>();

        $r3 = r2.<org.apache.poi.poifs.property.NPropertyTable: java.util.List _properties>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.poi.poifs.property.Property) $r5;

        if r6 == null goto label2;

        virtualinvoke r6.<org.apache.poi.poifs.property.Property: void writeData(java.io.OutputStream)>($r1);

     label2:
        goto label1;

     label3:
        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        $i0 = virtualinvoke r2.<org.apache.poi.poifs.property.NPropertyTable: int getStartBlock()>();

        $i1 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSStream: int getStartBlock()>();

        if $i0 == $i1 goto label4;

        $i2 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NPOIFSStream: int getStartBlock()>();

        virtualinvoke r2.<org.apache.poi.poifs.property.NPropertyTable: void setStartBlock(int)>($i2);

     label4:
        return;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/poifs/property/NPropertyTable;");

        <org.apache.poi.poifs.property.NPropertyTable: org.apache.poi.util.POILogger _logger> = $r0;

        return;
    }
}
