public abstract class org.apache.lucene.index.TermVectorMapper extends java.lang.Object
{
    private boolean ignoringPositions;
    private boolean ignoringOffsets;

    protected void <init>()
    {
        org.apache.lucene.index.TermVectorMapper r0;

        r0 := @this: org.apache.lucene.index.TermVectorMapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected void <init>(boolean, boolean)
    {
        org.apache.lucene.index.TermVectorMapper r0;
        boolean z0, z1;

        r0 := @this: org.apache.lucene.index.TermVectorMapper;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.index.TermVectorMapper: boolean ignoringPositions> = z0;

        r0.<org.apache.lucene.index.TermVectorMapper: boolean ignoringOffsets> = z1;

        return;
    }

    public abstract void setExpectations(java.lang.String, int, boolean, boolean);

    public abstract void map(java.lang.String, int, org.apache.lucene.index.TermVectorOffsetInfo[], int[]);

    public boolean isIgnoringPositions()
    {
        org.apache.lucene.index.TermVectorMapper r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.TermVectorMapper;

        $z0 = r0.<org.apache.lucene.index.TermVectorMapper: boolean ignoringPositions>;

        return $z0;
    }

    public boolean isIgnoringOffsets()
    {
        org.apache.lucene.index.TermVectorMapper r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.TermVectorMapper;

        $z0 = r0.<org.apache.lucene.index.TermVectorMapper: boolean ignoringOffsets>;

        return $z0;
    }

    public void setDocumentNumber(int)
    {
        org.apache.lucene.index.TermVectorMapper r0;
        int i0;

        r0 := @this: org.apache.lucene.index.TermVectorMapper;

        i0 := @parameter0: int;

        return;
    }
}
