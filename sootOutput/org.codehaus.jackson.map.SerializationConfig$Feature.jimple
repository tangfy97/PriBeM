public final enum class org.codehaus.jackson.map.SerializationConfig$Feature extends java.lang.Enum implements org.codehaus.jackson.map.MapperConfig$ConfigFeature
{
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature USE_ANNOTATIONS;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature AUTO_DETECT_GETTERS;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature AUTO_DETECT_IS_GETTERS;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature AUTO_DETECT_FIELDS;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature CAN_OVERRIDE_ACCESS_MODIFIERS;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature REQUIRE_SETTERS_FOR_GETTERS;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature WRITE_NULL_PROPERTIES;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature USE_STATIC_TYPING;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature DEFAULT_VIEW_INCLUSION;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature WRAP_ROOT_VALUE;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature INDENT_OUTPUT;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature SORT_PROPERTIES_ALPHABETICALLY;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature FAIL_ON_EMPTY_BEANS;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature WRAP_EXCEPTIONS;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature CLOSE_CLOSEABLE;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature FLUSH_AFTER_WRITE_VALUE;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature WRITE_DATES_AS_TIMESTAMPS;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature WRITE_DATE_KEYS_AS_TIMESTAMPS;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature WRITE_ENUMS_USING_TO_STRING;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature WRITE_ENUMS_USING_INDEX;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature WRITE_NULL_MAP_VALUES;
    public static final enum org.codehaus.jackson.map.SerializationConfig$Feature WRITE_EMPTY_JSON_ARRAYS;
    final boolean _defaultState;
    private static final org.codehaus.jackson.map.SerializationConfig$Feature[] $VALUES;

    public static org.codehaus.jackson.map.SerializationConfig$Feature[] values()
    {
        java.lang.Object $r1;
        org.codehaus.jackson.map.SerializationConfig$Feature[] $r0, $r2;

        $r0 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.codehaus.jackson.map.SerializationConfig$Feature[]) $r1;

        return $r2;
    }

    public static org.codehaus.jackson.map.SerializationConfig$Feature valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.codehaus.jackson.map.SerializationConfig$Feature $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/codehaus/jackson/map/SerializationConfig$Feature;", r0);

        $r2 = (org.codehaus.jackson.map.SerializationConfig$Feature) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, boolean)
    {
        int i0;
        java.lang.String r1;
        org.codehaus.jackson.map.SerializationConfig$Feature r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig$Feature;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.codehaus.jackson.map.SerializationConfig$Feature: boolean _defaultState> = z0;

        return;
    }

    public boolean enabledByDefault()
    {
        org.codehaus.jackson.map.SerializationConfig$Feature r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig$Feature;

        $z0 = r0.<org.codehaus.jackson.map.SerializationConfig$Feature: boolean _defaultState>;

        return $z0;
    }

    public int getMask()
    {
        int $i0, $i1;
        org.codehaus.jackson.map.SerializationConfig$Feature r0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig$Feature;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig$Feature: int ordinal()>();

        $i1 = 1 << $i0;

        return $i1;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.map.SerializationConfig$Feature[] $r23;
        org.codehaus.jackson.map.SerializationConfig$Feature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46;

        $r0 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r0.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("USE_ANNOTATIONS", 0, 1);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature USE_ANNOTATIONS> = $r0;

        $r1 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r1.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("AUTO_DETECT_GETTERS", 1, 1);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature AUTO_DETECT_GETTERS> = $r1;

        $r2 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r2.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("AUTO_DETECT_IS_GETTERS", 2, 1);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature AUTO_DETECT_IS_GETTERS> = $r2;

        $r3 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r3.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("AUTO_DETECT_FIELDS", 3, 1);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature AUTO_DETECT_FIELDS> = $r3;

        $r4 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r4.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("CAN_OVERRIDE_ACCESS_MODIFIERS", 4, 1);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature CAN_OVERRIDE_ACCESS_MODIFIERS> = $r4;

        $r5 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r5.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("REQUIRE_SETTERS_FOR_GETTERS", 5, 0);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature REQUIRE_SETTERS_FOR_GETTERS> = $r5;

        $r6 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r6.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("WRITE_NULL_PROPERTIES", 6, 1);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_NULL_PROPERTIES> = $r6;

        $r7 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r7.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("USE_STATIC_TYPING", 7, 0);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature USE_STATIC_TYPING> = $r7;

        $r8 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r8.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("DEFAULT_VIEW_INCLUSION", 8, 1);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature DEFAULT_VIEW_INCLUSION> = $r8;

        $r9 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r9.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("WRAP_ROOT_VALUE", 9, 0);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRAP_ROOT_VALUE> = $r9;

        $r10 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r10.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("INDENT_OUTPUT", 10, 0);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature INDENT_OUTPUT> = $r10;

        $r11 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r11.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("SORT_PROPERTIES_ALPHABETICALLY", 11, 0);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature SORT_PROPERTIES_ALPHABETICALLY> = $r11;

        $r12 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r12.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("FAIL_ON_EMPTY_BEANS", 12, 1);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature FAIL_ON_EMPTY_BEANS> = $r12;

        $r13 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r13.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("WRAP_EXCEPTIONS", 13, 1);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRAP_EXCEPTIONS> = $r13;

        $r14 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r14.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("CLOSE_CLOSEABLE", 14, 0);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature CLOSE_CLOSEABLE> = $r14;

        $r15 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r15.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("FLUSH_AFTER_WRITE_VALUE", 15, 1);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature FLUSH_AFTER_WRITE_VALUE> = $r15;

        $r16 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r16.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("WRITE_DATES_AS_TIMESTAMPS", 16, 1);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_DATES_AS_TIMESTAMPS> = $r16;

        $r17 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r17.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("WRITE_DATE_KEYS_AS_TIMESTAMPS", 17, 0);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_DATE_KEYS_AS_TIMESTAMPS> = $r17;

        $r18 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r18.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS", 18, 0);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS> = $r18;

        $r19 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r19.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("WRITE_ENUMS_USING_TO_STRING", 19, 0);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_ENUMS_USING_TO_STRING> = $r19;

        $r20 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r20.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("WRITE_ENUMS_USING_INDEX", 20, 0);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_ENUMS_USING_INDEX> = $r20;

        $r21 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r21.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("WRITE_NULL_MAP_VALUES", 21, 1);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_NULL_MAP_VALUES> = $r21;

        $r22 = new org.codehaus.jackson.map.SerializationConfig$Feature;

        specialinvoke $r22.<org.codehaus.jackson.map.SerializationConfig$Feature: void <init>(java.lang.String,int,boolean)>("WRITE_EMPTY_JSON_ARRAYS", 22, 1);

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_EMPTY_JSON_ARRAYS> = $r22;

        $r23 = newarray (org.codehaus.jackson.map.SerializationConfig$Feature)[23];

        $r24 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature USE_ANNOTATIONS>;

        $r23[0] = $r24;

        $r25 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature AUTO_DETECT_GETTERS>;

        $r23[1] = $r25;

        $r26 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature AUTO_DETECT_IS_GETTERS>;

        $r23[2] = $r26;

        $r27 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature AUTO_DETECT_FIELDS>;

        $r23[3] = $r27;

        $r28 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature CAN_OVERRIDE_ACCESS_MODIFIERS>;

        $r23[4] = $r28;

        $r29 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature REQUIRE_SETTERS_FOR_GETTERS>;

        $r23[5] = $r29;

        $r30 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_NULL_PROPERTIES>;

        $r23[6] = $r30;

        $r31 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature USE_STATIC_TYPING>;

        $r23[7] = $r31;

        $r32 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature DEFAULT_VIEW_INCLUSION>;

        $r23[8] = $r32;

        $r33 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRAP_ROOT_VALUE>;

        $r23[9] = $r33;

        $r34 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature INDENT_OUTPUT>;

        $r23[10] = $r34;

        $r35 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature SORT_PROPERTIES_ALPHABETICALLY>;

        $r23[11] = $r35;

        $r36 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature FAIL_ON_EMPTY_BEANS>;

        $r23[12] = $r36;

        $r37 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRAP_EXCEPTIONS>;

        $r23[13] = $r37;

        $r38 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature CLOSE_CLOSEABLE>;

        $r23[14] = $r38;

        $r39 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature FLUSH_AFTER_WRITE_VALUE>;

        $r23[15] = $r39;

        $r40 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_DATES_AS_TIMESTAMPS>;

        $r23[16] = $r40;

        $r41 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_DATE_KEYS_AS_TIMESTAMPS>;

        $r23[17] = $r41;

        $r42 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS>;

        $r23[18] = $r42;

        $r43 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_ENUMS_USING_TO_STRING>;

        $r23[19] = $r43;

        $r44 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_ENUMS_USING_INDEX>;

        $r23[20] = $r44;

        $r45 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_NULL_MAP_VALUES>;

        $r23[21] = $r45;

        $r46 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_EMPTY_JSON_ARRAYS>;

        $r23[22] = $r46;

        <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature[] $VALUES> = $r23;

        return;
    }
}
