interface  com.google.inject.internal.State extends java.lang.Object
{
    public static final com.google.inject.internal.State NONE;

    public abstract com.google.inject.internal.State parent();

    public abstract com.google.inject.internal.BindingImpl getExplicitBinding(com.google.inject.Key);

    public abstract java.util.Map getExplicitBindingsThisLevel();

    public abstract void putBinding(com.google.inject.Key, com.google.inject.internal.BindingImpl);

    public abstract com.google.inject.Scope getScope(java.lang.Class);

    public abstract void putAnnotation(java.lang.Class, com.google.inject.Scope);

    public abstract void addConverter(com.google.inject.spi.TypeConverterBinding);

    public abstract com.google.inject.spi.TypeConverterBinding getConverter(java.lang.String, com.google.inject.TypeLiteral, com.google.inject.internal.Errors, java.lang.Object);

    public abstract java.lang.Iterable getConvertersThisLevel();

    public abstract void addMethodAspect(com.google.inject.internal.MethodAspect);

    public abstract com.google.inject.internal.util.$ImmutableList getMethodAspects();

    public abstract void addTypeListener(com.google.inject.spi.TypeListenerBinding);

    public abstract java.util.List getTypeListenerBindings();

    public abstract void blacklist(com.google.inject.Key, java.lang.Object);

    public abstract boolean isBlacklisted(com.google.inject.Key);

    public abstract java.util.Set getSourcesForBlacklistedKey(com.google.inject.Key);

    public abstract java.lang.Object lock();

    public abstract java.util.Map getScopes();

    static void <clinit>()
    {
        com.google.inject.internal.State$1 $r0;

        $r0 = new com.google.inject.internal.State$1;

        specialinvoke $r0.<com.google.inject.internal.State$1: void <init>()>();

        <com.google.inject.internal.State: com.google.inject.internal.State NONE> = $r0;

        return;
    }
}
