public class org.waveprotocol.box.server.common.SnapshotSerializer extends java.lang.Object
{

    private void <init>()
    {
        org.waveprotocol.box.server.common.SnapshotSerializer r0;

        r0 := @this: org.waveprotocol.box.server.common.SnapshotSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot serializeWavelet(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot$Builder $r0;
        org.waveprotocol.wave.model.id.WaveletId $r3;
        long $l0, $l1;
        org.waveprotocol.wave.model.wave.ParticipantId $r11, r19;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r1;
        org.waveprotocol.wave.model.version.HashedVersion r9;
        org.waveprotocol.wave.model.wave.data.ReadableBlipData $r15;
        java.lang.String $r4, $r12, $r18, r20;
        boolean $z0, $z1;
        java.util.Iterator $r6, $r8;
        java.util.Set $r5, $r7;
        org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot $r13;
        org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot $r16;
        org.waveprotocol.wave.model.id.ModernIdSerialiser $r2;
        java.lang.Object $r14, $r17;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r10;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r9 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        $r0 = staticinvoke <org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot: org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot$Builder newBuilder()>();

        $r2 = <org.waveprotocol.wave.model.id.ModernIdSerialiser: org.waveprotocol.wave.model.id.ModernIdSerialiser INSTANCE>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r4 = virtualinvoke $r2.<org.waveprotocol.wave.model.id.ModernIdSerialiser: java.lang.String serialiseWaveletId(org.waveprotocol.wave.model.id.WaveletId)>($r3);

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot$Builder setWaveletId(java.lang.String)>($r4);

        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: java.util.Set getParticipants()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r17 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.waveprotocol.wave.model.wave.ParticipantId) $r17;

        $r18 = virtualinvoke r19.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String toString()>();

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot$Builder addParticipantId(java.lang.String)>($r18);

        goto label1;

     label2:
        $r7 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: java.util.Set getDocumentIds()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r14 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.String) $r14;

        $r15 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.wave.data.ReadableBlipData getDocument(java.lang.String)>(r20);

        $r16 = staticinvoke <org.waveprotocol.box.server.common.SnapshotSerializer: org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot serializeDocument(org.waveprotocol.wave.model.wave.data.ReadableBlipData)>($r15);

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot$Builder addDocument(org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot)>($r16);

        goto label3;

     label4:
        $r10 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion serialize(org.waveprotocol.wave.model.version.HashedVersion)>(r9);

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot$Builder setVersion(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r10);

        $l0 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: long getLastModifiedTime()>();

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot$Builder setLastModifiedTime(long)>($l0);

        $r11 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot$Builder setCreator(java.lang.String)>($r12);

        $l1 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: long getCreationTime()>();

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot$Builder setCreationTime(long)>($l1);

        $r13 = virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot build()>();

        return $r13;
    }

    public static org.waveprotocol.wave.model.wave.data.ObservableWaveletData deserializeWavelet(org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot, org.waveprotocol.wave.model.id.WaveId) throws org.waveprotocol.wave.model.operation.OperationException, org.waveprotocol.wave.model.wave.InvalidParticipantAddress, org.waveprotocol.wave.model.id.InvalidIdException
    {
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory $r2;
        org.waveprotocol.wave.model.id.WaveletId $r8;
        long $l0, $l1, $l2;
        org.waveprotocol.wave.model.wave.ParticipantId $r5, $r22;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r13;
        org.waveprotocol.wave.model.wave.data.DocumentFactory $r1;
        org.waveprotocol.wave.model.version.HashedVersion $r12;
        java.lang.String $r4, $r7, r23;
        org.waveprotocol.wave.model.schema.SchemaCollection $r0;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.id.WaveId r10;
        java.util.Iterator $r16, $r18;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r14;
        org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot r3;
        org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot $r9;
        org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot r24;
        java.util.List $r15, $r17;
        org.waveprotocol.wave.model.id.ModernIdSerialiser $r6;
        java.lang.Object $r20, $r21;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r11, $r19;

        r3 := @parameter0: org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot;

        r10 := @parameter1: org.waveprotocol.wave.model.id.WaveId;

        $r0 = staticinvoke <org.waveprotocol.wave.model.schema.SchemaCollection: org.waveprotocol.wave.model.schema.SchemaCollection empty()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument: org.waveprotocol.wave.model.wave.data.DocumentFactory createFactory(org.waveprotocol.wave.model.schema.SchemaProvider)>($r0);

        $r2 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory create(org.waveprotocol.wave.model.wave.data.DocumentFactory)>($r1);

        $r4 = virtualinvoke r3.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot: java.lang.String getCreator()>();

        $r5 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: org.waveprotocol.wave.model.wave.ParticipantId of(java.lang.String)>($r4);

        $r6 = <org.waveprotocol.wave.model.id.ModernIdSerialiser: org.waveprotocol.wave.model.id.ModernIdSerialiser INSTANCE>;

        $r7 = virtualinvoke r3.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot: java.lang.String getWaveletId()>();

        $r8 = virtualinvoke $r6.<org.waveprotocol.wave.model.id.ModernIdSerialiser: org.waveprotocol.wave.model.id.WaveletId deserialiseWaveletId(java.lang.String)>($r7);

        $l0 = virtualinvoke r3.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot: long getCreationTime()>();

        $r9 = new org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot;

        $r11 = virtualinvoke r3.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getVersion()>();

        $r12 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.version.HashedVersion deserialize(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r11);

        specialinvoke $r9.<org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,long)>(r10, $r8, $r5, $r12, $l0);

        $r13 = interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory: org.waveprotocol.wave.model.wave.data.ReadableWaveletData create(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>($r9);

        r14 = (org.waveprotocol.wave.model.wave.data.ObservableWaveletData) $r13;

        $r15 = virtualinvoke r3.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot: java.util.List getParticipantIdList()>();

        $r16 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r21 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.lang.String) $r21;

        $r22 = staticinvoke <org.waveprotocol.box.server.common.SnapshotSerializer: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId(java.lang.String)>(r23);

        interfaceinvoke r14.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: boolean addParticipant(org.waveprotocol.wave.model.wave.ParticipantId)>($r22);

        goto label1;

     label2:
        $r17 = virtualinvoke r3.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot: java.util.List getDocumentList()>();

        $r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r20 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r24 = (org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot) $r20;

        staticinvoke <org.waveprotocol.box.server.common.SnapshotSerializer: void addDocumentSnapshotToWavelet(org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot,org.waveprotocol.wave.model.wave.data.WaveletData)>(r24, r14);

        goto label3;

     label4:
        $r19 = virtualinvoke r3.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getVersion()>();

        $l1 = virtualinvoke $r19.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: long getVersion()>();

        interfaceinvoke r14.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: long setVersion(long)>($l1);

        $l2 = virtualinvoke r3.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot: long getLastModifiedTime()>();

        interfaceinvoke r14.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: long setLastModifiedTime(long)>($l2);

        return r14;
    }

    public static org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot serializeDocument(org.waveprotocol.wave.model.wave.data.ReadableBlipData)
    {
        org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot$Builder $r0;
        long $l0, $l1;
        org.waveprotocol.wave.model.wave.ParticipantId $r6, r12;
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation $r5;
        org.waveprotocol.wave.model.wave.data.DocumentOperationSink $r3;
        org.waveprotocol.wave.model.wave.data.ReadableBlipData r1;
        java.lang.String $r2, $r7, $r13;
        boolean $z0;
        java.util.Iterator $r9;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r4;
        java.util.Set $r8;
        org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot $r10;
        java.lang.Object $r11;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableBlipData;

        $r0 = staticinvoke <org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot: org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot$Builder newBuilder()>();

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableBlipData: java.lang.String getId()>();

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot$Builder setDocumentId(java.lang.String)>($r2);

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableBlipData: org.waveprotocol.wave.model.wave.data.DocumentOperationSink getContent()>();

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.wave.data.DocumentOperationSink: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        $r5 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation serialize(org.waveprotocol.wave.model.document.operation.DocOp)>($r4);

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot$Builder setDocumentOperation(org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation)>($r5);

        $r6 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableBlipData: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot$Builder setAuthor(java.lang.String)>($r7);

        $r8 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableBlipData: java.util.Set getContributors()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.waveprotocol.wave.model.wave.ParticipantId) $r11;

        $r13 = virtualinvoke r12.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot$Builder addContributor(java.lang.String)>($r13);

        goto label1;

     label2:
        $l0 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableBlipData: long getLastModifiedVersion()>();

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot$Builder setLastModifiedVersion(long)>($l0);

        $l1 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableBlipData: long getLastModifiedTime()>();

        virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot$Builder setLastModifiedTime(long)>($l1);

        $r10 = virtualinvoke $r0.<org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot build()>();

        return $r10;
    }

    private static org.waveprotocol.wave.model.wave.ParticipantId getParticipantId(java.lang.String) throws org.waveprotocol.wave.model.wave.InvalidParticipantAddress
    {
        java.lang.String r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: org.waveprotocol.wave.model.wave.ParticipantId of(java.lang.String)>(r0);

        return $r1;
    }

    private static void addDocumentSnapshotToWavelet(org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot, org.waveprotocol.wave.model.wave.data.WaveletData) throws org.waveprotocol.wave.model.wave.InvalidParticipantAddress
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r2;
        long $l0, $l1;
        org.waveprotocol.wave.model.wave.ParticipantId $r10, $r13;
        java.util.ArrayList $r4;
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation $r1;
        java.lang.String $r8, $r9, r12;
        org.waveprotocol.wave.model.wave.data.WaveletData r7;
        boolean $z0;
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r3;
        org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot r0;
        java.util.List $r5;
        java.lang.Object $r11;

        r0 := @parameter0: org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot;

        r7 := @parameter1: org.waveprotocol.wave.model.wave.data.WaveletData;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation getDocumentOperation()>();

        $r2 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.document.operation.DocOp deserialize(org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation)>($r1);

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpUtil: org.waveprotocol.wave.model.document.operation.DocInitialization asInitialization(org.waveprotocol.wave.model.document.operation.DocOp)>($r2);

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        $r5 = virtualinvoke r0.<org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot: java.util.List getContributorList()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r11;

        $r13 = staticinvoke <org.waveprotocol.box.server.common.SnapshotSerializer: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId(java.lang.String)>(r12);

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>($r13);

        goto label1;

     label2:
        $r8 = virtualinvoke r0.<org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot: java.lang.String getDocumentId()>();

        $r9 = virtualinvoke r0.<org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot: java.lang.String getAuthor()>();

        $r10 = staticinvoke <org.waveprotocol.box.server.common.SnapshotSerializer: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId(java.lang.String)>($r9);

        $l0 = virtualinvoke r0.<org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot: long getLastModifiedTime()>();

        $l1 = virtualinvoke r0.<org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot: long getLastModifiedVersion()>();

        interfaceinvoke r7.<org.waveprotocol.wave.model.wave.data.WaveletData: org.waveprotocol.wave.model.wave.data.BlipData createDocument(java.lang.String,org.waveprotocol.wave.model.wave.ParticipantId,java.util.Collection,org.waveprotocol.wave.model.document.operation.DocInitialization,long,long)>($r8, $r10, $r4, $r3, $l0, $l1);

        return;
    }
}
