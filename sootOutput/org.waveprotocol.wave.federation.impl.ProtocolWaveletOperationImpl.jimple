public class org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl extends java.lang.Object implements org.waveprotocol.wave.federation.ProtocolWaveletOperation
{
    private java.lang.String addParticipant;
    private java.lang.String removeParticipant;
    private org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl$MutateDocumentImpl mutateDocument;
    private java.lang.Boolean noOp;

    public void <init>()
    {
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.waveprotocol.wave.federation.ProtocolWaveletOperation)
    {
        org.waveprotocol.wave.federation.ProtocolWaveletOperation r1;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        r1 := @parameter0: org.waveprotocol.wave.federation.ProtocolWaveletOperation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: void copyFrom(org.waveprotocol.wave.federation.ProtocolWaveletOperation)>(r1);

        return;
    }

    public void copyFrom(org.waveprotocol.wave.federation.ProtocolWaveletOperation)
    {
        org.waveprotocol.wave.federation.ProtocolWaveletOperation r0;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r1;
        org.waveprotocol.wave.federation.ProtocolWaveletOperation$MutateDocument $r2;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        r0 := @parameter0: org.waveprotocol.wave.federation.ProtocolWaveletOperation;

        $z0 = interfaceinvoke r0.<org.waveprotocol.wave.federation.ProtocolWaveletOperation: boolean hasAddParticipant()>();

        if $z0 == 0 goto label1;

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.federation.ProtocolWaveletOperation: java.lang.String getAddParticipant()>();

        virtualinvoke r1.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: void setAddParticipant(java.lang.String)>($r4);

        goto label2;

     label1:
        virtualinvoke r1.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: void clearAddParticipant()>();

     label2:
        $z1 = interfaceinvoke r0.<org.waveprotocol.wave.federation.ProtocolWaveletOperation: boolean hasRemoveParticipant()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.federation.ProtocolWaveletOperation: java.lang.String getRemoveParticipant()>();

        virtualinvoke r1.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: void setRemoveParticipant(java.lang.String)>($r3);

        goto label4;

     label3:
        virtualinvoke r1.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: void clearRemoveParticipant()>();

     label4:
        $z2 = interfaceinvoke r0.<org.waveprotocol.wave.federation.ProtocolWaveletOperation: boolean hasMutateDocument()>();

        if $z2 == 0 goto label5;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.federation.ProtocolWaveletOperation: org.waveprotocol.wave.federation.ProtocolWaveletOperation$MutateDocument getMutateDocument()>();

        virtualinvoke r1.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: void setMutateDocument(org.waveprotocol.wave.federation.ProtocolWaveletOperation$MutateDocument)>($r2);

        goto label6;

     label5:
        virtualinvoke r1.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: void clearMutateDocument()>();

     label6:
        $z3 = interfaceinvoke r0.<org.waveprotocol.wave.federation.ProtocolWaveletOperation: boolean hasNoOp()>();

        if $z3 == 0 goto label7;

        $z4 = interfaceinvoke r0.<org.waveprotocol.wave.federation.ProtocolWaveletOperation: boolean getNoOp()>();

        virtualinvoke r1.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: void setNoOp(boolean)>($z4);

        goto label8;

     label7:
        virtualinvoke r1.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: void clearNoOp()>();

     label8:
        return;
    }

    public boolean hasAddParticipant()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        $r1 = r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: java.lang.String addParticipant>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearAddParticipant()
    {
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: java.lang.String addParticipant> = null;

        return;
    }

    public java.lang.String getAddParticipant()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        $r1 = r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: java.lang.String addParticipant>;

        return $r1;
    }

    public void setAddParticipant(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: java.lang.String addParticipant> = r1;

        return;
    }

    public boolean hasRemoveParticipant()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        $r1 = r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: java.lang.String removeParticipant>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearRemoveParticipant()
    {
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: java.lang.String removeParticipant> = null;

        return;
    }

    public java.lang.String getRemoveParticipant()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        $r1 = r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: java.lang.String removeParticipant>;

        return $r1;
    }

    public void setRemoveParticipant(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: java.lang.String removeParticipant> = r1;

        return;
    }

    public boolean hasMutateDocument()
    {
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl$MutateDocumentImpl $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        $r1 = r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl$MutateDocumentImpl mutateDocument>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearMutateDocument()
    {
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl$MutateDocumentImpl mutateDocument> = null;

        return;
    }

    public org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl$MutateDocumentImpl getMutateDocument()
    {
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl$MutateDocumentImpl $r0, $r2;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r1;

        r1 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        $r0 = new org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl$MutateDocumentImpl;

        $r2 = r1.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl$MutateDocumentImpl mutateDocument>;

        specialinvoke $r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl$MutateDocumentImpl: void <init>(org.waveprotocol.wave.federation.ProtocolWaveletOperation$MutateDocument)>($r2);

        return $r0;
    }

    public void setMutateDocument(org.waveprotocol.wave.federation.ProtocolWaveletOperation$MutateDocument)
    {
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl$MutateDocumentImpl $r1;
        org.waveprotocol.wave.federation.ProtocolWaveletOperation$MutateDocument r2;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolWaveletOperation$MutateDocument;

        $r1 = new org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl$MutateDocumentImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl$MutateDocumentImpl: void <init>(org.waveprotocol.wave.federation.ProtocolWaveletOperation$MutateDocument)>(r2);

        r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl$MutateDocumentImpl mutateDocument> = $r1;

        return;
    }

    public boolean hasNoOp()
    {
        java.lang.Boolean $r1;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        $r1 = r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: java.lang.Boolean noOp>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearNoOp()
    {
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: java.lang.Boolean noOp> = null;

        return;
    }

    public boolean getNoOp()
    {
        java.lang.Boolean $r1;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        $r1 = r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: java.lang.Boolean noOp>;

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public void setNoOp(boolean)
    {
        java.lang.Boolean $r1;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: java.lang.Boolean noOp> = $r1;

        return;
    }

    protected void reset()
    {
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: java.lang.String addParticipant> = null;

        r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: java.lang.String removeParticipant> = null;

        r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl$MutateDocumentImpl mutateDocument> = null;

        r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: java.lang.Boolean noOp> = null;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: boolean isEqualTo(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.wave.federation.ProtocolWaveletOperation $r2;
        java.lang.Object r0;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r1;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.waveprotocol.wave.federation.ProtocolWaveletOperation;

        if $z0 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.federation.ProtocolWaveletOperation) r0;

        $z1 = staticinvoke <org.waveprotocol.wave.federation.ProtocolWaveletOperationUtil: boolean isEqual(org.waveprotocol.wave.federation.ProtocolWaveletOperation,org.waveprotocol.wave.federation.ProtocolWaveletOperation)>(r1, $r2);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        $i0 = staticinvoke <org.waveprotocol.wave.federation.ProtocolWaveletOperationUtil: int getHashCode(org.waveprotocol.wave.federation.ProtocolWaveletOperation)>(r0);

        return $i0;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolWaveletOperation$MutateDocument getMutateDocument()
    {
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl r0;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl$MutateDocumentImpl $r1;

        r0 := @this: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl: org.waveprotocol.wave.federation.impl.ProtocolWaveletOperationImpl$MutateDocumentImpl getMutateDocument()>();

        return $r1;
    }
}
