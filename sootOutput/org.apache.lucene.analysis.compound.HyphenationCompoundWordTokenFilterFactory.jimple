public class org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory extends org.apache.lucene.analysis.util.TokenFilterFactory implements org.apache.lucene.analysis.util.ResourceLoaderAware
{
    private org.apache.lucene.analysis.util.CharArraySet dictionary;
    private org.apache.lucene.analysis.compound.hyphenation.HyphenationTree hyphenator;
    private final java.lang.String dictFile;
    private final java.lang.String hypFile;
    private final java.lang.String encoding;
    private final int minWordSize;
    private final int minSubwordSize;
    private final int maxSubwordSize;
    private final boolean onlyLongestMatch;

    public void <init>(java.util.Map)
    {
        org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory r0;
        java.lang.IllegalArgumentException $r5;
        java.util.Map r1;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r2, $r3, $r4, $r9;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.lucene.analysis.util.TokenFilterFactory: void <init>(java.util.Map)>(r1);

        virtualinvoke r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: void assureMatchVersion()>();

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: java.lang.String get(java.util.Map,java.lang.String)>(r1, "dictionary");

        r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: java.lang.String dictFile> = $r2;

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: java.lang.String get(java.util.Map,java.lang.String)>(r1, "encoding");

        r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: java.lang.String encoding> = $r3;

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: java.lang.String require(java.util.Map,java.lang.String)>(r1, "hyphenator");

        r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: java.lang.String hypFile> = $r4;

        $i0 = virtualinvoke r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "minWordSize", 5);

        r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: int minWordSize> = $i0;

        $i1 = virtualinvoke r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "minSubwordSize", 2);

        r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: int minSubwordSize> = $i1;

        $i2 = virtualinvoke r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: int getInt(java.util.Map,java.lang.String,int)>(r1, "maxSubwordSize", 15);

        r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: int maxSubwordSize> = $i2;

        $z0 = virtualinvoke r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: boolean getBoolean(java.util.Map,java.lang.String,boolean)>(r1, "onlyLongestMatch", 0);

        r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: boolean onlyLongestMatch> = $z0;

        $z1 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown parameters: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        return;
    }

    public void inform(org.apache.lucene.analysis.util.ResourceLoader) throws java.io.IOException
    {
        java.lang.Throwable $r12;
        org.xml.sax.InputSource $r5;
        org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory r0;
        java.io.Closeable[] $r9, $r13;
        org.apache.lucene.analysis.util.ResourceLoader r2;
        org.apache.lucene.analysis.util.CharArraySet $r11;
        java.lang.String $r1, $r3, $r6, $r7, $r10;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree $r8;
        java.io.InputStream $r4, r14;

        r0 := @this: org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory;

        r2 := @parameter0: org.apache.lucene.analysis.util.ResourceLoader;

        r14 = null;

     label1:
        $r1 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: java.lang.String dictFile>;

        if $r1 == null goto label2;

        $r10 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: java.lang.String dictFile>;

        $r11 = virtualinvoke r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: org.apache.lucene.analysis.util.CharArraySet getWordSet(org.apache.lucene.analysis.util.ResourceLoader,java.lang.String,boolean)>(r2, $r10, 0);

        r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: org.apache.lucene.analysis.util.CharArraySet dictionary> = $r11;

     label2:
        $r3 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: java.lang.String hypFile>;

        $r4 = interfaceinvoke r2.<org.apache.lucene.analysis.util.ResourceLoader: java.io.InputStream openResource(java.lang.String)>($r3);

        r14 = $r4;

        $r5 = new org.xml.sax.InputSource;

        specialinvoke $r5.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>($r4);

        $r6 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: java.lang.String encoding>;

        virtualinvoke $r5.<org.xml.sax.InputSource: void setEncoding(java.lang.String)>($r6);

        $r7 = r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: java.lang.String hypFile>;

        virtualinvoke $r5.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>($r7);

        $r8 = staticinvoke <org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree getHyphenationTree(org.xml.sax.InputSource)>($r5);

        r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree hyphenator> = $r8;

     label3:
        $r9 = newarray (java.io.Closeable)[1];

        $r9[0] = $r4;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r9);

        goto label6;

     label4:
        $r12 := @caughtexception;

     label5:
        $r13 = newarray (java.io.Closeable)[1];

        $r13[0] = r14;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r13);

        throw $r12;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter create(org.apache.lucene.analysis.TokenStream)
    {
        org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory r1;
        org.apache.lucene.analysis.TokenStream r2;
        org.apache.lucene.util.Version $r5;
        int $i0, $i1, $i2;
        org.apache.lucene.analysis.util.CharArraySet $r3;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree $r4;
        org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter $r0;
        boolean $z0;

        r1 := @this: org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory;

        r2 := @parameter0: org.apache.lucene.analysis.TokenStream;

        $r0 = new org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter;

        $r5 = r1.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: org.apache.lucene.util.Version luceneMatchVersion>;

        $r4 = r1.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree hyphenator>;

        $r3 = r1.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: org.apache.lucene.analysis.util.CharArraySet dictionary>;

        $i2 = r1.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: int minWordSize>;

        $i1 = r1.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: int minSubwordSize>;

        $i0 = r1.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: int maxSubwordSize>;

        $z0 = r1.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: boolean onlyLongestMatch>;

        specialinvoke $r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.compound.hyphenation.HyphenationTree,org.apache.lucene.analysis.util.CharArraySet,int,int,int,boolean)>($r5, r2, $r4, $r3, $i2, $i1, $i0, $z0);

        return $r0;
    }

    public volatile org.apache.lucene.analysis.TokenStream create(org.apache.lucene.analysis.TokenStream)
    {
        org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory r0;
        org.apache.lucene.analysis.TokenStream r1;
        org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter $r2;

        r0 := @this: org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory;

        r1 := @parameter0: org.apache.lucene.analysis.TokenStream;

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilterFactory: org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter create(org.apache.lucene.analysis.TokenStream)>(r1);

        return $r2;
    }
}
