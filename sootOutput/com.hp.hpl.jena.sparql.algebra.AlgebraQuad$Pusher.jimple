class com.hp.hpl.jena.sparql.algebra.AlgebraQuad$Pusher extends com.hp.hpl.jena.sparql.algebra.OpVisitorBase
{
    java.util.Deque stack;
    com.hp.hpl.jena.sparql.core.VarAlloc varAlloc;

    void <init>(java.util.Deque)
    {
        com.hp.hpl.jena.sparql.core.VarAlloc $r1;
        java.util.Deque r2;
        com.hp.hpl.jena.sparql.algebra.AlgebraQuad$Pusher r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraQuad$Pusher;

        r2 := @parameter0: java.util.Deque;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitorBase: void <init>()>();

        $r1 = new com.hp.hpl.jena.sparql.core.VarAlloc;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.VarAlloc: void <init>(java.lang.String)>("*g");

        r0.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$Pusher: com.hp.hpl.jena.sparql.core.VarAlloc varAlloc> = $r1;

        r0.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$Pusher: java.util.Deque stack> = r2;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpGraph)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r0;
        java.util.Collection $r4;
        com.hp.hpl.jena.sparql.algebra.AlgebraQuad$QuadSlot $r8;
        com.hp.hpl.jena.graph.Node $r1, r6;
        java.util.Deque $r7;
        com.hp.hpl.jena.sparql.algebra.AlgebraQuad$Pusher r2;
        com.hp.hpl.jena.sparql.core.VarAlloc $r5;
        com.hp.hpl.jena.sparql.algebra.Op $r3;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraQuad$Pusher;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        r6 = $r1;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r1);

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Collection mentionedVars(com.hp.hpl.jena.sparql.algebra.Op)>($r3);

        $z1 = interfaceinvoke $r4.<java.util.Collection: boolean contains(java.lang.Object)>($r1);

        if $z1 == 0 goto label1;

        $r5 = r2.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$Pusher: com.hp.hpl.jena.sparql.core.VarAlloc varAlloc>;

        r6 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.core.VarAlloc: com.hp.hpl.jena.sparql.core.Var allocVar()>();

     label1:
        $r7 = r2.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$Pusher: java.util.Deque stack>;

        $r8 = new com.hp.hpl.jena.sparql.algebra.AlgebraQuad$QuadSlot;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$QuadSlot: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r1, r6);

        interfaceinvoke $r7.<java.util.Deque: void push(java.lang.Object)>($r8);

        return;
    }
}
