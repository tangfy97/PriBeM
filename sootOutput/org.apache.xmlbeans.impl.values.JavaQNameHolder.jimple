public class org.apache.xmlbeans.impl.values.JavaQNameHolder extends org.apache.xmlbeans.impl.values.XmlObjectBase
{
    private javax.xml.namespace.QName _value;
    private static final org.apache.xmlbeans.impl.values.NamespaceManager PRETTY_PREFIXER;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$xmlbeans$impl$values$JavaQNameHolder;

    public void <init>()
    {
        org.apache.xmlbeans.impl.values.JavaQNameHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaQNameHolder;

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void <init>()>();

        return;
    }

    public org.apache.xmlbeans.SchemaType schemaType()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl $r0;
        org.apache.xmlbeans.impl.values.JavaQNameHolder r1;

        r1 := @this: org.apache.xmlbeans.impl.values.JavaQNameHolder;

        $r0 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_QNAME>;

        return $r0;
    }

    protected int get_wscanon_rule()
    {
        org.apache.xmlbeans.impl.values.JavaQNameHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaQNameHolder;

        return 1;
    }

    public java.lang.String compute_text(org.apache.xmlbeans.impl.values.NamespaceManager)
    {
        java.lang.AssertionError $r11;
        java.lang.StringBuffer $r7, $r8, $r9, $r10;
        int $i0;
        org.apache.xmlbeans.impl.values.JavaQNameHolder r0;
        org.apache.xmlbeans.impl.values.NamespaceManager r12;
        java.lang.String $r2, $r4, $r5, $r6, $r13;
        boolean $z0, $z1;
        javax.xml.namespace.QName $r1, $r3;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaQNameHolder;

        r12 := @parameter0: org.apache.xmlbeans.impl.values.NamespaceManager;

        if r12 != null goto label1;

        r12 = <org.apache.xmlbeans.impl.values.JavaQNameHolder: org.apache.xmlbeans.impl.values.NamespaceManager PRETTY_PREFIXER>;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.values.JavaQNameHolder: javax.xml.namespace.QName _value>;

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r3 = r0.<org.apache.xmlbeans.impl.values.JavaQNameHolder: javax.xml.namespace.QName _value>;

        $r4 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

     label2:
        return $r4;

     label3:
        $r5 = interfaceinvoke r12.<org.apache.xmlbeans.impl.values.NamespaceManager: java.lang.String find_prefix_for_nsuri(java.lang.String,java.lang.String)>($r2, null);

        $z0 = <org.apache.xmlbeans.impl.values.JavaQNameHolder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        if $r5 != null goto label4;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label4:
        $r6 = "";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label5;

        $r13 = $r4;

        goto label6;

     label5:
        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

     label6:
        return $r13;
    }

    public static javax.xml.namespace.QName validateLexical(java.lang.String, org.apache.xmlbeans.impl.common.ValidationContext, org.apache.xmlbeans.impl.common.PrefixResolver)
    {
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r2;
        org.apache.xmlbeans.impl.common.ValidationContext r3;
        java.lang.String r0, $r4;
        javax.xml.namespace.QName r5;
        org.apache.xmlbeans.impl.common.PrefixResolver r1;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.xmlbeans.impl.common.ValidationContext;

        r1 := @parameter2: org.apache.xmlbeans.impl.common.PrefixResolver;

     label1:
        r5 = staticinvoke <org.apache.xmlbeans.impl.values.JavaQNameHolder: javax.xml.namespace.QName parse(java.lang.String,org.apache.xmlbeans.impl.common.PrefixResolver)>(r0, r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r4 = virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: java.lang.String getMessage()>();

        interfaceinvoke r3.<org.apache.xmlbeans.impl.common.ValidationContext: void invalid(java.lang.String)>($r4);

        r5 = null;

     label4:
        return r5;

        catch org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException from label1 to label2 with label3;
    }

    private static javax.xml.namespace.QName parse(java.lang.String, org.apache.xmlbeans.impl.common.PrefixResolver)
    {
        boolean $z0, $z1, $z2, $z3;
        javax.xml.namespace.QName $r35, $r36;
        java.lang.Object[] $r5, $r12, $r19;
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r30, $r32, $r34;
        java.lang.StringBuffer $r7, $r8, $r9, $r14, $r15, $r16, $r21, $r22, $r23, $r29, $r31, $r33;
        int $i0, $i1, $i2, $i3, $i4, $i6, i8, i9, $i10, $i12, $i13;
        java.lang.String r0, $r10, $r17, $r24, r25, r26, $r27, r28;
        org.apache.xmlbeans.impl.common.PrefixResolver r1;
        char $c5, $c7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.xmlbeans.impl.common.PrefixResolver;

        i8 = virtualinvoke r0.<java.lang.String: int length()>();

     label01:
        if i8 <= 0 goto label03;

        $i6 = i8 - 1;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6);

        $i10 = (int) $c7;

        $z3 = staticinvoke <org.apache.xmlbeans.impl.common.XMLChar: boolean isSpace(int)>($i10);

        if $z3 != 0 goto label02;

        goto label03;

     label02:
        $i12 = (int) -1;

        i8 = i8 + $i12;

        goto label01;

     label03:
        i9 = 0;

     label04:
        if i9 >= i8 goto label06;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9);

        $i13 = (int) $c5;

        $z2 = staticinvoke <org.apache.xmlbeans.impl.common.XMLChar: boolean isSpace(int)>($i13);

        if $z2 != 0 goto label05;

        goto label06;

     label05:
        i9 = i9 + 1;

        goto label04;

     label06:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(58, i9);

        if $i0 < 0 goto label07;

        r25 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i9, $i0);

        $i4 = $i0 + 1;

        r26 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i4, i8);

        goto label08;

     label07:
        r25 = "";

        r26 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i9, i8);

     label08:
        $i1 = virtualinvoke r25.<java.lang.String: int length()>();

        if $i1 <= 0 goto label09;

        $z1 = staticinvoke <org.apache.xmlbeans.impl.common.XMLChar: boolean isValidNCName(java.lang.String)>(r25);

        if $z1 != 0 goto label09;

        $r30 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        $r19 = newarray (java.lang.Object)[1];

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Prefix not a valid NCName in \'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        $r19[0] = $r24;

        specialinvoke $r30.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>(java.lang.String,java.lang.Object[])>("QName", $r19);

        throw $r30;

     label09:
        $z0 = staticinvoke <org.apache.xmlbeans.impl.common.XMLChar: boolean isValidNCName(java.lang.String)>(r26);

        if $z0 != 0 goto label10;

        $r32 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        $r12 = newarray (java.lang.Object)[1];

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Localname not a valid NCName in \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        $r12[0] = $r17;

        specialinvoke $r32.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>(java.lang.String,java.lang.Object[])>("QName", $r12);

        throw $r32;

     label10:
        if r1 != null goto label11;

        $r27 = null;

        goto label12;

     label11:
        $r27 = interfaceinvoke r1.<org.apache.xmlbeans.impl.common.PrefixResolver: java.lang.String getNamespaceForPrefix(java.lang.String)>(r25);

     label12:
        r28 = $r27;

        if $r27 != null goto label14;

        $i3 = virtualinvoke r25.<java.lang.String: int length()>();

        if $i3 <= 0 goto label13;

        $r34 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        $r5 = newarray (java.lang.Object)[1];

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t resolve prefix \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        $r5[0] = $r10;

        specialinvoke $r34.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>(java.lang.String,java.lang.Object[])>("QName", $r5);

        throw $r34;

     label13:
        r28 = "";

     label14:
        if r25 == null goto label15;

        $i2 = virtualinvoke r25.<java.lang.String: int length()>();

        if $i2 <= 0 goto label15;

        $r35 = new javax.xml.namespace.QName;

        specialinvoke $r35.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r28, r26, r25);

        return $r35;

     label15:
        $r36 = new javax.xml.namespace.QName;

        specialinvoke $r36.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>(r28, r26);

        return $r36;
    }

    protected void set_text(java.lang.String)
    {
        org.apache.xmlbeans.impl.values.JavaQNameHolder r1;
        java.lang.String r2;
        javax.xml.namespace.QName $r4;
        org.apache.xmlbeans.impl.common.PrefixResolver $r0, r3;
        boolean $z0;

        r1 := @this: org.apache.xmlbeans.impl.values.JavaQNameHolder;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: org.apache.xmlbeans.impl.common.PrefixResolver getCurrent()>();

        r3 = $r0;

        if $r0 != null goto label1;

        $z0 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.JavaQNameHolder: boolean has_store()>();

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r1.<org.apache.xmlbeans.impl.values.JavaQNameHolder: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

     label1:
        $r4 = staticinvoke <org.apache.xmlbeans.impl.values.JavaQNameHolder: javax.xml.namespace.QName parse(java.lang.String,org.apache.xmlbeans.impl.common.PrefixResolver)>(r2, r3);

        r1.<org.apache.xmlbeans.impl.values.JavaQNameHolder: javax.xml.namespace.QName _value> = $r4;

        return;
    }

    protected void set_QName(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.values.JavaQNameHolder r0;
        javax.xml.namespace.QName r1;
        org.apache.xmlbeans.impl.values.TypeStore $r2;
        java.lang.String $r3;
        java.lang.AssertionError $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaQNameHolder;

        r1 := @parameter0: javax.xml.namespace.QName;

        $z0 = <org.apache.xmlbeans.impl.values.JavaQNameHolder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaQNameHolder: boolean has_store()>();

        if $z1 == 0 goto label2;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaQNameHolder: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        $r3 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        interfaceinvoke $r2.<org.apache.xmlbeans.impl.values.TypeStore: java.lang.String find_prefix_for_nsuri(java.lang.String,java.lang.String)>($r3, null);

     label2:
        r0.<org.apache.xmlbeans.impl.values.JavaQNameHolder: javax.xml.namespace.QName _value> = r1;

        return;
    }

    protected void set_xmlanysimple(org.apache.xmlbeans.XmlAnySimpleType)
    {
        org.apache.xmlbeans.XmlAnySimpleType r1;
        org.apache.xmlbeans.impl.values.JavaQNameHolder r0;
        java.lang.String $r2;
        javax.xml.namespace.QName $r4;
        org.apache.xmlbeans.impl.common.PrefixResolver $r3;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaQNameHolder;

        r1 := @parameter0: org.apache.xmlbeans.XmlAnySimpleType;

        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.XmlAnySimpleType: java.lang.String getStringValue()>();

        $r3 = staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: org.apache.xmlbeans.impl.common.PrefixResolver getCurrent()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.values.JavaQNameHolder: javax.xml.namespace.QName parse(java.lang.String,org.apache.xmlbeans.impl.common.PrefixResolver)>($r2, $r3);

        r0.<org.apache.xmlbeans.impl.values.JavaQNameHolder: javax.xml.namespace.QName _value> = $r4;

        return;
    }

    protected void set_nil()
    {
        org.apache.xmlbeans.impl.values.JavaQNameHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaQNameHolder;

        r0.<org.apache.xmlbeans.impl.values.JavaQNameHolder: javax.xml.namespace.QName _value> = null;

        return;
    }

    public javax.xml.namespace.QName getQNameValue()
    {
        org.apache.xmlbeans.impl.values.JavaQNameHolder r0;
        javax.xml.namespace.QName $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaQNameHolder;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaQNameHolder: void check_dated()>();

        $r1 = r0.<org.apache.xmlbeans.impl.values.JavaQNameHolder: javax.xml.namespace.QName _value>;

        return $r1;
    }

    protected boolean equal_to(org.apache.xmlbeans.XmlObject)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase $r2;
        org.apache.xmlbeans.impl.values.JavaQNameHolder r0;
        org.apache.xmlbeans.XmlObject r1;
        javax.xml.namespace.QName $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaQNameHolder;

        r1 := @parameter0: org.apache.xmlbeans.XmlObject;

        $r3 = r0.<org.apache.xmlbeans.impl.values.JavaQNameHolder: javax.xml.namespace.QName _value>;

        $r2 = (org.apache.xmlbeans.impl.values.XmlObjectBase) r1;

        $r4 = virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: javax.xml.namespace.QName qNameValue()>();

        $z0 = virtualinvoke $r3.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }

    protected int value_hash_code()
    {
        int $i0;
        org.apache.xmlbeans.impl.values.JavaQNameHolder r0;
        javax.xml.namespace.QName $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaQNameHolder;

        $r1 = r0.<org.apache.xmlbeans.impl.values.JavaQNameHolder: javax.xml.namespace.QName _value>;

        $i0 = virtualinvoke $r1.<javax.xml.namespace.QName: int hashCode()>();

        return $i0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.xmlbeans.impl.values.JavaQNameHolder$PrettyNamespaceManager $r1;
        java.lang.Class $r0, $r2;
        boolean $z0, $z1;

        $r0 = <org.apache.xmlbeans.impl.values.JavaQNameHolder: java.lang.Class class$org$apache$xmlbeans$impl$values$JavaQNameHolder>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.values.JavaQNameHolder: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.values.JavaQNameHolder");

        <org.apache.xmlbeans.impl.values.JavaQNameHolder: java.lang.Class class$org$apache$xmlbeans$impl$values$JavaQNameHolder> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.xmlbeans.impl.values.JavaQNameHolder: java.lang.Class class$org$apache$xmlbeans$impl$values$JavaQNameHolder>;

     label2:
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.values.JavaQNameHolder: boolean $assertionsDisabled> = $z1;

        $r1 = new org.apache.xmlbeans.impl.values.JavaQNameHolder$PrettyNamespaceManager;

        specialinvoke $r1.<org.apache.xmlbeans.impl.values.JavaQNameHolder$PrettyNamespaceManager: void <init>(org.apache.xmlbeans.impl.values.JavaQNameHolder$1)>(null);

        <org.apache.xmlbeans.impl.values.JavaQNameHolder: org.apache.xmlbeans.impl.values.NamespaceManager PRETTY_PREFIXER> = $r1;

        return;
    }
}
