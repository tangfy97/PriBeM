public class org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.ResponseStatus
{
    private org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode status;
    private java.lang.String failureReason;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus r1;
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ResponseStatus;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>(r1);

        return;
    }

    public void copyFrom(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode $r2;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus r1;
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl r0;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ResponseStatus;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode getStatus()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl: void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode)>($r2);

        $z0 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus: boolean hasFailureReason()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus: java.lang.String getFailureReason()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl: void setFailureReason(java.lang.String)>($r3);

        goto label2;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl: void clearFailureReason()>();

     label2:
        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode getStatus()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode status>;

        return $r1;
    }

    public void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode status> = r1;

        return;
    }

    public boolean hasFailureReason()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl: java.lang.String failureReason>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearFailureReason()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl: java.lang.String failureReason> = null;

        return;
    }

    public java.lang.String getFailureReason()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl: java.lang.String failureReason>;

        return $r1;
    }

    public void setFailureReason(java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl: java.lang.String failureReason> = r1;

        return;
    }

    protected void reset()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode status> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl: java.lang.String failureReason> = null;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl: boolean isEqualTo(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        java.lang.Object r0;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl r1;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.ResponseStatus;

        if $z0 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.ResponseStatus) r0;

        $z1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ResponseStatusUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.ResponseStatus,org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>(r1, $r2);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        $i0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ResponseStatusUtil: int getHashCode(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>(r0);

        return $i0;
    }
}
