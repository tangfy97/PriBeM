public class com.hp.hpl.jena.tdb.sys.SystemTDB extends java.lang.Object
{
    private static final org.slf4j.Logger log;
    public static final org.slf4j.Logger syslog;
    public static final org.slf4j.Logger errlog;
    public static final int SizeOfLong;
    public static final int SizeOfInt;
    public static final int SizeOfNodeId;
    public static final int SizeOfPointer;
    public static final int LenIndexTripleRecord;
    public static final int LenIndexQuadRecord;
    public static final int LenNodeHash;
    public static final com.hp.hpl.jena.tdb.base.record.RecordFactory indexRecordTripleFactory;
    public static final com.hp.hpl.jena.tdb.base.record.RecordFactory indexRecordQuadFactory;
    public static final com.hp.hpl.jena.tdb.base.record.RecordFactory nodeRecordFactory;
    public static final java.lang.String symbolNamespace;
    public static final java.lang.String tdbSymbolPrefix;
    public static final java.lang.String tdbPropertyRoot;
    public static final com.hp.hpl.jena.sparql.util.Symbol symLogDuplicates;
    public static final com.hp.hpl.jena.sparql.util.Symbol symFileMode;
    public static final com.hp.hpl.jena.sparql.util.Symbol symIndexType;
    public static final com.hp.hpl.jena.sparql.util.Symbol symTupleFilter;
    private static final java.lang.String propertyFileKey1;
    private static final java.lang.String propertyFileKey2;
    private static java.lang.String propertyFileName;
    public static final boolean is64bitSystem;
    private static java.util.Properties properties;
    public static final int BlockSize;
    public static final int BlockSizeTest;
    public static final int BlockSizeTestMem;
    public static final int OrderMem;
    public static java.util.Properties global;
    public static final int SegmentSize;
    public static final int ObjectFileWriteCacheSize;
    public static final int Node2NodeIdCacheSize;
    public static final int NodeId2NodeCacheSize;
    public static final int NodeMissCacheSize;
    public static final int BlockWriteCacheSize;
    public static final int BlockReadCacheSize;
    public static com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation defaultOptimizer;
    public static final java.nio.ByteOrder NetworkOrder;
    public static boolean NullOut;
    public static final byte FillByte;
    public static boolean Checking;
    public static final boolean isWindows;
    private static com.hp.hpl.jena.tdb.base.block.FileMode fileMode;
    public static final java.lang.String indexTypeBTree;
    public static final java.lang.String indexTypeBPlusTree;
    public static final java.lang.String indexTypeExtHash;
    public static final java.lang.String defaultIndexType;
    private static com.hp.hpl.jena.tdb.index.IndexType indexType;

    public void <init>()
    {
        com.hp.hpl.jena.tdb.sys.SystemTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.sys.SystemTDB;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void init()
    {
        return;
    }

    public static void panic(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1;
        com.hp.hpl.jena.tdb.TDBException $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.apache.jena.atlas.logging.Log: void fatal(java.lang.Class,java.lang.String)>(r0, r1);

        $r2 = new com.hp.hpl.jena.tdb.TDBException;

        specialinvoke $r2.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>(r1);

        throw $r2;
    }

    public static com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)
    {
        com.hp.hpl.jena.tdb.TDBException $r2, $r7;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r9, $r10;
        java.lang.String r0, $r6, $r11;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.util.Symbol $r1;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("tdb");

        if $z0 == 0 goto label1;

        $r7 = new com.hp.hpl.jena.tdb.TDBException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Symbol short name begins with the TDB namespace prefix: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("http:");

        if $z1 == 0 goto label2;

        $r2 = new com.hp.hpl.jena.tdb.TDBException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Symbol short name begins with http: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        $r1 = staticinvoke <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String,java.lang.String)>("http://jena.hpl.hp.com/TDB#", r0);

        return $r1;
    }

    private static com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r0, $r2, $r4;
        java.lang.String r1, r3, $r5;
        com.hp.hpl.jena.sparql.util.Symbol $r6;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.util.Symbol: com.hp.hpl.jena.sparql.util.Symbol create(java.lang.String)>($r5);

        return $r6;
    }

    private static int intValue(java.lang.String, java.lang.String, int)
    {
        int i0, $i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.String r0, r8, r9;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".");

        if $z0 != 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $i1 = staticinvoke <com.hp.hpl.jena.tdb.sys.SystemTDB: int intValue(java.lang.String,int)>(r9, i0);

        return $i1;
    }

    private static int intValue(java.lang.String, int)
    {
        java.util.Properties $r1, $r2;
        org.slf4j.Logger $r5;
        com.hp.hpl.jena.tdb.TDBException $r11;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9;
        java.lang.String r0, $r3, $r10;

        r0 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        if r0 != null goto label1;

        return i2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        $r11 = new com.hp.hpl.jena.tdb.TDBException;

        specialinvoke $r11.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>("Empty string for value name");

        throw $r11;

     label2:
        $r1 = <com.hp.hpl.jena.tdb.sys.SystemTDB: java.util.Properties properties>;

        if $r1 != null goto label3;

        return i2;

     label3:
        $r2 = <com.hp.hpl.jena.tdb.sys.SystemTDB: java.util.Properties properties>;

        $r3 = virtualinvoke $r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r0);

        if $r3 != null goto label4;

        return i2;

     label4:
        $r5 = <com.hp.hpl.jena.tdb.TDB: org.slf4j.Logger logInfo>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Set: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>($r10);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        return $i1;
    }

    private static java.util.Properties readPropertiesFile()
    {
        java.lang.String $r0, $r5, $r8, $r9, $r15, $r18;
        java.util.Properties $r1;
        org.slf4j.Logger $r3, $r13;
        java.io.IOException $r10;
        java.io.FileNotFoundException $r11;
        java.lang.StringBuilder $r2, $r4, $r6, $r7, $r12, $r14, $r16, $r17;

        $r0 = <com.hp.hpl.jena.tdb.sys.SystemTDB: java.lang.String propertyFileName>;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.util.Properties;

        specialinvoke $r1.<java.util.Properties: void <init>()>();

     label2:
        $r3 = <com.hp.hpl.jena.tdb.TDB: org.slf4j.Logger logInfo>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using properties from \'");

        $r5 = <com.hp.hpl.jena.tdb.sys.SystemTDB: java.lang.String propertyFileName>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>($r8);

        $r9 = <com.hp.hpl.jena.tdb.sys.SystemTDB: java.lang.String propertyFileName>;

        staticinvoke <org.apache.jena.atlas.lib.PropertyUtils: void loadFromFile(java.util.Properties,java.lang.String)>($r1, $r9);

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        $r13 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger log>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No system properties file (");

        $r15 = <com.hp.hpl.jena.tdb.sys.SystemTDB: java.lang.String propertyFileName>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String)>($r18);

        return null;

     label5:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.io.IOException: void printStackTrace()>();

     label6:
        return $r1;

        catch java.io.FileNotFoundException from label2 to label3 with label4;
        catch java.io.IOException from label2 to label3 with label5;
    }

    private static boolean determineIfWindows()
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        if $r0 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("Windows ");

        return $z0;
    }

    private static boolean determineIf64Bit()
    {
        java.lang.String $r0, $r1, $r7, $r13, $r14, $r15;
        boolean $z0, $z1;
        org.slf4j.Logger $r2, $r4, $r8, $r10;
        java.lang.StringBuilder $r3, $r5, $r6, $r9, $r11, $r12;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("sun.arch.data.model");

        if $r0 == null goto label3;

        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("64");

        $r10 = <com.hp.hpl.jena.tdb.TDB: org.slf4j.Logger logInfo>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System architecture: ");

        if $z1 == 0 goto label1;

        $r14 = "64 bit";

        goto label2;

     label1:
        $r14 = "32 bit";

     label2:
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>($r13);

        return $z1;

     label3:
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.info");

        if $r1 != null goto label4;

        $r8 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger log>;

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String)>("Can\'t determine the data model");

        return 0;

     label4:
        $r2 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger log>;

        interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String)>("Can\'t determine the data model from \'sun.arch.data.model\' - using java.vm.info");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("64");

        $r4 = <com.hp.hpl.jena.tdb.TDB: org.slf4j.Logger logInfo>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System architecture: (from java.vm.info) ");

        if $z0 == 0 goto label5;

        $r15 = "64 bit";

        goto label6;

     label5:
        $r15 = "32 bit";

     label6:
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String)>($r7);

        return $z0;
    }

    public static com.hp.hpl.jena.tdb.base.block.FileMode fileMode()
    {
        com.hp.hpl.jena.tdb.base.block.FileMode $r0, $r1, $r2;

        $r0 = <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.tdb.base.block.FileMode fileMode>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.tdb.base.block.FileMode determineFileMode()>();

        <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.tdb.base.block.FileMode fileMode> = $r2;

     label1:
        $r1 = <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.tdb.base.block.FileMode fileMode>;

        return $r1;
    }

    public static void setFileMode(com.hp.hpl.jena.tdb.base.block.FileMode)
    {
        org.slf4j.Logger $r2;
        com.hp.hpl.jena.tdb.base.block.FileMode $r0, r1;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.block.FileMode;

        $r0 = <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.tdb.base.block.FileMode fileMode>;

        if $r0 == null goto label1;

        $r2 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger log>;

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String)>("System file mode already determined - setting it has no effect");

        return;

     label1:
        <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.tdb.base.block.FileMode fileMode> = r1;

        return;
    }

    static void internalSetFileMode(com.hp.hpl.jena.tdb.base.block.FileMode)
    {
        com.hp.hpl.jena.tdb.base.block.FileMode r0;

        r0 := @parameter0: com.hp.hpl.jena.tdb.base.block.FileMode;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.tdb.base.block.FileMode fileMode> = r0;

        return;
    }

    private static com.hp.hpl.jena.tdb.base.block.FileMode determineFileMode()
    {
        com.hp.hpl.jena.tdb.base.block.FileMode $r9, $r11, $r13, $r15;
        java.lang.String $r2, $r7;
        com.hp.hpl.jena.sparql.util.Symbol $r1;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.tdb.TDBException $r3;
        org.slf4j.Logger $r8, $r10, $r12, $r14;
        com.hp.hpl.jena.sparql.util.Context $r0;
        java.lang.StringBuilder $r4, $r5, $r6;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r1 = <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.sparql.util.Symbol symFileMode>;

        $r2 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: java.lang.String getAsString(com.hp.hpl.jena.sparql.util.Symbol,java.lang.String)>($r1, "default");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("direct");

        if $z0 == 0 goto label1;

        $r14 = <com.hp.hpl.jena.tdb.TDB: org.slf4j.Logger logInfo>;

        interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String)>("File mode: direct (forced)");

        $r15 = <com.hp.hpl.jena.tdb.base.block.FileMode: com.hp.hpl.jena.tdb.base.block.FileMode direct>;

        return $r15;

     label1:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("mapped");

        if $z1 == 0 goto label2;

        $r12 = <com.hp.hpl.jena.tdb.TDB: org.slf4j.Logger logInfo>;

        interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>("File mode: mapped (forced)");

        $r13 = <com.hp.hpl.jena.tdb.base.block.FileMode: com.hp.hpl.jena.tdb.base.block.FileMode mapped>;

        return $r13;

     label2:
        $z2 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("default");

        if $z2 == 0 goto label4;

        $z3 = <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean is64bitSystem>;

        if $z3 == 0 goto label3;

        $r10 = <com.hp.hpl.jena.tdb.TDB: org.slf4j.Logger logInfo>;

        interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>("File mode: Mapped");

        $r11 = <com.hp.hpl.jena.tdb.base.block.FileMode: com.hp.hpl.jena.tdb.base.block.FileMode mapped>;

        return $r11;

     label3:
        $r8 = <com.hp.hpl.jena.tdb.TDB: org.slf4j.Logger logInfo>;

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String)>("File mode: Direct");

        $r9 = <com.hp.hpl.jena.tdb.base.block.FileMode: com.hp.hpl.jena.tdb.base.block.FileMode direct>;

        return $r9;

     label4:
        $r3 = new com.hp.hpl.jena.tdb.TDBException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized file mode (not one of \'default\', \'direct\' or \'mapped\': ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public static com.hp.hpl.jena.tdb.index.IndexType getIndexType()
    {
        org.slf4j.Logger $r5;
        com.hp.hpl.jena.tdb.index.IndexType $r0, $r4, $r10;
        com.hp.hpl.jena.sparql.util.Context $r1;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r3, $r9, r11;
        com.hp.hpl.jena.sparql.util.Symbol $r2;
        boolean z0;

        $r0 = <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.tdb.index.IndexType indexType>;

        if $r0 == null goto label1;

        $r10 = <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.tdb.index.IndexType indexType>;

        return $r10;

     label1:
        z0 = 0;

        $r1 = staticinvoke <com.hp.hpl.jena.tdb.TDB: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r2 = <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.sparql.util.Symbol symIndexType>;

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.util.Context: java.lang.String getAsString(com.hp.hpl.jena.sparql.util.Symbol)>($r2);

        r11 = $r3;

        if $r3 != null goto label2;

        z0 = 1;

        r11 = "BPlusTree";

     label2:
        $r4 = staticinvoke <com.hp.hpl.jena.tdb.index.IndexType: com.hp.hpl.jena.tdb.index.IndexType get(java.lang.String)>(r11);

        if z0 != 0 goto label3;

        $r5 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/tdb/index/IndexType;");

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index type: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>($r9);

     label3:
        <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.tdb.index.IndexType indexType> = $r4;

        return $r4;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;
        java.lang.String $r10, $r11, $r16;
        com.hp.hpl.jena.sparql.util.Symbol $r6, $r7, $r8, $r9;
        boolean $z0, $z1, $z2, $z3;
        org.slf4j.Logger $r0, $r1, $r2;
        java.util.Properties $r12, $r20;
        java.nio.ByteOrder $r15;
        com.hp.hpl.jena.tdb.base.record.RecordFactory $r17, $r18, $r19;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: java.lang.String defaultIndexType> = "BPlusTree";

        <com.hp.hpl.jena.tdb.sys.SystemTDB: java.lang.String indexTypeExtHash> = "ExtHash";

        <com.hp.hpl.jena.tdb.sys.SystemTDB: java.lang.String indexTypeBPlusTree> = "BPlusTree";

        <com.hp.hpl.jena.tdb.sys.SystemTDB: java.lang.String indexTypeBTree> = "BTree";

        <com.hp.hpl.jena.tdb.sys.SystemTDB: byte FillByte> = -1;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int NodeMissCacheSize> = 100;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int ObjectFileWriteCacheSize> = 8192;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int SegmentSize> = 8388608;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int OrderMem> = 5;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int BlockSizeTestMem> = 500;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int BlockSizeTest> = 1024;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int BlockSize> = 8192;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: java.lang.String propertyFileKey2> = "tdb:settings";

        <com.hp.hpl.jena.tdb.sys.SystemTDB: java.lang.String propertyFileKey1> = "com.hp.hpl.jena.tdb.settings";

        <com.hp.hpl.jena.tdb.sys.SystemTDB: java.lang.String tdbPropertyRoot> = "com.hp.hpl.jena.tdb";

        <com.hp.hpl.jena.tdb.sys.SystemTDB: java.lang.String tdbSymbolPrefix> = "tdb";

        <com.hp.hpl.jena.tdb.sys.SystemTDB: java.lang.String symbolNamespace> = "http://jena.hpl.hp.com/TDB#";

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int LenNodeHash> = 16;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int LenIndexQuadRecord> = 32;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int LenIndexTripleRecord> = 24;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int SizeOfPointer> = 4;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int SizeOfNodeId> = 8;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int SizeOfInt> = 4;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int SizeOfLong> = 8;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/tdb/TDB;");

        <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger log> = $r0;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>("TDB");

        <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger syslog> = $r1;

        $r2 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>("TDB");

        <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger errlog> = $r2;

        $r17 = new com.hp.hpl.jena.tdb.base.record.RecordFactory;

        specialinvoke $r17.<com.hp.hpl.jena.tdb.base.record.RecordFactory: void <init>(int,int)>(24, 0);

        <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.tdb.base.record.RecordFactory indexRecordTripleFactory> = $r17;

        $r18 = new com.hp.hpl.jena.tdb.base.record.RecordFactory;

        specialinvoke $r18.<com.hp.hpl.jena.tdb.base.record.RecordFactory: void <init>(int,int)>(32, 0);

        <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.tdb.base.record.RecordFactory indexRecordQuadFactory> = $r18;

        $r19 = new com.hp.hpl.jena.tdb.base.record.RecordFactory;

        specialinvoke $r19.<com.hp.hpl.jena.tdb.base.record.RecordFactory: void <init>(int,int)>(16, 8);

        <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.tdb.base.record.RecordFactory nodeRecordFactory> = $r19;

        $r6 = staticinvoke <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("logDuplicates");

        <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.sparql.util.Symbol symLogDuplicates> = $r6;

        $r7 = staticinvoke <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("fileMode");

        <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.sparql.util.Symbol symFileMode> = $r7;

        $r8 = staticinvoke <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("indexType");

        <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.sparql.util.Symbol symIndexType> = $r8;

        $r9 = staticinvoke <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("tupleFilter");

        <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.sparql.util.Symbol symTupleFilter> = $r9;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: java.lang.String propertyFileName> = null;

        $r10 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("com.hp.hpl.jena.tdb.settings");

        <com.hp.hpl.jena.tdb.sys.SystemTDB: java.lang.String propertyFileName> = $r10;

        $r11 = <com.hp.hpl.jena.tdb.sys.SystemTDB: java.lang.String propertyFileName>;

        if $r11 != null goto label1;

        $r16 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("tdb:settings");

        <com.hp.hpl.jena.tdb.sys.SystemTDB: java.lang.String propertyFileName> = $r16;

     label1:
        $z0 = staticinvoke <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean determineIf64Bit()>();

        <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean is64bitSystem> = $z0;

        $r12 = staticinvoke <com.hp.hpl.jena.tdb.sys.SystemTDB: java.util.Properties readPropertiesFile()>();

        <com.hp.hpl.jena.tdb.sys.SystemTDB: java.util.Properties properties> = $r12;

        $r20 = new java.util.Properties;

        specialinvoke $r20.<java.util.Properties: void <init>()>();

        <com.hp.hpl.jena.tdb.sys.SystemTDB: java.util.Properties global> = $r20;

        $z1 = <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean is64bitSystem>;

        if $z1 == 0 goto label2;

        $i4 = 100000;

        goto label3;

     label2:
        $i7 = (int) 50000;

        $i4 = $i7;

     label3:
        $i0 = staticinvoke <com.hp.hpl.jena.tdb.sys.SystemTDB: int intValue(java.lang.String,int)>("Node2NodeIdCacheSize", $i4);

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int Node2NodeIdCacheSize> = $i0;

        $z2 = <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean is64bitSystem>;

        if $z2 == 0 goto label4;

        $i5 = 500000;

        goto label5;

     label4:
        $i9 = (int) 50000;

        $i5 = $i9;

     label5:
        $i1 = staticinvoke <com.hp.hpl.jena.tdb.sys.SystemTDB: int intValue(java.lang.String,int)>("NodeId2NodeCacheSize", $i5);

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int NodeId2NodeCacheSize> = $i1;

        $i2 = staticinvoke <com.hp.hpl.jena.tdb.sys.SystemTDB: int intValue(java.lang.String,int)>("BlockWriteCacheSize", 2000);

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int BlockWriteCacheSize> = $i2;

        $i3 = staticinvoke <com.hp.hpl.jena.tdb.sys.SystemTDB: int intValue(java.lang.String,int)>("BlockReadCacheSize", 10000);

        <com.hp.hpl.jena.tdb.sys.SystemTDB: int BlockReadCacheSize> = $i3;

        $r14 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderLib: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation fixed()>();

        <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation defaultOptimizer> = $r14;

        $r15 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: java.nio.ByteOrder NetworkOrder> = $r15;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean NullOut> = 0;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean Checking> = 0;

        $z3 = staticinvoke <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean determineIfWindows()>();

        <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean isWindows> = $z3;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.tdb.base.block.FileMode fileMode> = null;

        <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.tdb.index.IndexType indexType> = null;

        return;
    }
}
