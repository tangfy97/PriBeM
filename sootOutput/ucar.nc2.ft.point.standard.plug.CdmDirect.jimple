public class ucar.nc2.ft.point.standard.plug.CdmDirect extends ucar.nc2.ft.point.standard.TableConfigurerImpl
{
    private static final java.lang.String Convention;

    public void <init>()
    {
        ucar.nc2.ft.point.standard.plug.CdmDirect r0;

        r0 := @this: ucar.nc2.ft.point.standard.plug.CdmDirect;

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableConfigurerImpl: void <init>()>();

        return;
    }

    public boolean isMine(ucar.nc2.constants.FeatureType, ucar.nc2.dataset.NetcdfDataset)
    {
        ucar.nc2.ft.point.standard.plug.CdmDirect r8;
        java.util.StringTokenizer $r2;
        java.lang.String $r1, $r6, $r7;
        ucar.nc2.constants.FeatureType r9;
        boolean $z0, $z1, z2, $z3, $z4;
        ucar.nc2.constants.CF$FeatureType $r3, $r4, $r5, r10;
        ucar.nc2.dataset.NetcdfDataset r0;

        r8 := @this: ucar.nc2.ft.point.standard.plug.CdmDirect;

        r9 := @parameter0: ucar.nc2.constants.FeatureType;

        r0 := @parameter1: ucar.nc2.dataset.NetcdfDataset;

        z2 = 0;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "Conventions", null);

        if $r1 != null goto label01;

        return 0;

     label01:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("CDM");

        if $z0 == 0 goto label02;

        z2 = 1;

     label02:
        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, ",");

     label03:
        $z3 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z3 == 0 goto label05;

        $r6 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("CDM");

        if $z1 == 0 goto label04;

        z2 = 1;

     label04:
        goto label03;

     label05:
        if z2 != 0 goto label06;

        return 0;

     label06:
        $r3 = staticinvoke <ucar.nc2.constants.CF$FeatureType: ucar.nc2.constants.CF$FeatureType getFeatureTypeFromGlobalAttribute(ucar.nc2.NetcdfFile)>(r0);

        r10 = $r3;

        if $r3 != null goto label07;

        r10 = <ucar.nc2.constants.CF$FeatureType: ucar.nc2.constants.CF$FeatureType point>;

     label07:
        $r4 = <ucar.nc2.constants.CF$FeatureType: ucar.nc2.constants.CF$FeatureType timeSeries>;

        if r10 == $r4 goto label08;

        $r5 = <ucar.nc2.constants.CF$FeatureType: ucar.nc2.constants.CF$FeatureType timeSeriesProfile>;

        if r10 != $r5 goto label09;

     label08:
        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        return $z4;
    }

    public ucar.nc2.ft.point.standard.TableConfig getConfig(ucar.nc2.constants.FeatureType, ucar.nc2.dataset.NetcdfDataset, java.util.Formatter) throws java.io.IOException
    {
        java.lang.IllegalStateException $r6;
        ucar.nc2.ft.point.standard.plug.CdmDirect r3;
        java.util.Formatter r4;
        ucar.nc2.ft.point.standard.TableConfig $r5;
        int[] $r2;
        int $i0, $i1;
        ucar.nc2.constants.CF$FeatureType $r1, r12;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        ucar.nc2.dataset.NetcdfDataset r0;
        ucar.nc2.constants.FeatureType r11;

        r3 := @this: ucar.nc2.ft.point.standard.plug.CdmDirect;

        r11 := @parameter0: ucar.nc2.constants.FeatureType;

        r0 := @parameter1: ucar.nc2.dataset.NetcdfDataset;

        r4 := @parameter2: java.util.Formatter;

        $r1 = staticinvoke <ucar.nc2.constants.CF$FeatureType: ucar.nc2.constants.CF$FeatureType getFeatureTypeFromGlobalAttribute(ucar.nc2.NetcdfFile)>(r0);

        r12 = $r1;

        if $r1 != null goto label1;

        r12 = <ucar.nc2.constants.CF$FeatureType: ucar.nc2.constants.CF$FeatureType point>;

     label1:
        $r2 = <ucar.nc2.ft.point.standard.plug.CdmDirect$1: int[] $SwitchMap$ucar$nc2$constants$CF$FeatureType>;

        $i0 = virtualinvoke r12.<ucar.nc2.constants.CF$FeatureType: int ordinal()>();

        $i1 = $r2[$i0];

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label2:
        return null;

     label3:
        $r5 = virtualinvoke r3.<ucar.nc2.ft.point.standard.plug.CdmDirect: ucar.nc2.ft.point.standard.TableConfig getStationConfig(ucar.nc2.dataset.NetcdfDataset,java.util.Formatter)>(r0, r4);

        return $r5;

     label4:
        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unimplemented feature ftype= ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r6;
    }

    protected ucar.nc2.ft.point.standard.TableConfig getStationConfig(ucar.nc2.dataset.NetcdfDataset, java.util.Formatter) throws java.io.IOException
    {
        java.lang.Object[] $r22, $r24, $r25, $r26;
        ucar.nc2.ft.point.standard.plug.CdmDirect r27;
        java.util.Formatter r21;
        ucar.nc2.dataset.CoordinateAxis $r2, $r4, $r12;
        ucar.nc2.ft.point.standard.TableConfig $r5, $r17;
        ucar.nc2.ft.point.standard.Table$Type $r6, $r18;
        ucar.nc2.ft.point.standard.TableConfig$StructureType $r8;
        ucar.nc2.constants.AxisType $r1, $r3, $r11, $r19;
        int $i0, $i1;
        java.lang.String $r9, $r10, $r13, $r14, $r15, $r16, $r20, $r23;
        ucar.nc2.constants.FeatureType $r7;
        ucar.nc2.dataset.NetcdfDataset r0;

        r27 := @this: ucar.nc2.ft.point.standard.plug.CdmDirect;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r21 := @parameter1: java.util.Formatter;

        $r1 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lat>;

        $r2 = staticinvoke <ucar.nc2.ft.point.standard.CoordSysEvaluator: ucar.nc2.dataset.CoordinateAxis findCoordByType(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.constants.AxisType)>(r0, $r1);

        if $r2 != null goto label1;

        $r26 = newarray (java.lang.Object)[0];

        virtualinvoke r21.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("CdmDirect: Must have a Latitude coordinate%n", $r26);

        return null;

     label1:
        $r3 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lon>;

        $r4 = staticinvoke <ucar.nc2.ft.point.standard.CoordSysEvaluator: ucar.nc2.dataset.CoordinateAxis findCoordByType(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.constants.AxisType)>(r0, $r3);

        if $r4 != null goto label2;

        $r25 = newarray (java.lang.Object)[0];

        virtualinvoke r21.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("CdmDirect: Must have a Longitude coordinate%n", $r25);

        return null;

     label2:
        $i0 = virtualinvoke $r2.<ucar.nc2.Variable: int getRank()>();

        $i1 = virtualinvoke $r4.<ucar.nc2.Variable: int getRank()>();

        if $i0 == $i1 goto label3;

        $r24 = newarray (java.lang.Object)[0];

        virtualinvoke r21.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("CdmDirect: Lat and Lon coordinate must have same rank", $r24);

        return null;

     label3:
        $r5 = new ucar.nc2.ft.point.standard.TableConfig;

        $r6 = <ucar.nc2.ft.point.standard.Table$Type: ucar.nc2.ft.point.standard.Table$Type Structure>;

        specialinvoke $r5.<ucar.nc2.ft.point.standard.TableConfig: void <init>(ucar.nc2.ft.point.standard.Table$Type,java.lang.String)>($r6, "station");

        $r7 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType STATION>;

        $r5.<ucar.nc2.ft.point.standard.TableConfig: ucar.nc2.constants.FeatureType featureType> = $r7;

        $r8 = <ucar.nc2.ft.point.standard.TableConfig$StructureType: ucar.nc2.ft.point.standard.TableConfig$StructureType Structure>;

        $r5.<ucar.nc2.ft.point.standard.TableConfig: ucar.nc2.ft.point.standard.TableConfig$StructureType structureType> = $r8;

        $r9 = virtualinvoke $r2.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r5.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String lat> = $r9;

        $r10 = virtualinvoke $r4.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r5.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String lon> = $r10;

        $r11 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Height>;

        $r12 = staticinvoke <ucar.nc2.ft.point.standard.CoordSysEvaluator: ucar.nc2.dataset.CoordinateAxis findCoordByType(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.constants.AxisType)>(r0, $r11);

        if $r12 == null goto label4;

        $r23 = virtualinvoke $r12.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r5.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String stnAlt> = $r23;

     label4:
        $r13 = staticinvoke <ucar.nc2.ft.point.standard.Evaluator: java.lang.String getNameOfVariableWithAttribute(ucar.nc2.dataset.NetcdfDataset,java.lang.String,java.lang.String)>(r0, "standard_name", "station_id");

        $r5.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String stnId> = $r13;

        $r14 = $r5.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String stnId>;

        if $r14 != null goto label5;

        $r22 = newarray (java.lang.Object)[0];

        virtualinvoke r21.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("Must have a Station id variable with standard name station_id%n", $r22);

        return null;

     label5:
        $r15 = staticinvoke <ucar.nc2.ft.point.standard.Evaluator: java.lang.String getNameOfVariableWithAttribute(ucar.nc2.dataset.NetcdfDataset,java.lang.String,java.lang.String)>(r0, "standard_name", "station_desc");

        $r5.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String stnDesc> = $r15;

        $r16 = staticinvoke <ucar.nc2.ft.point.standard.Evaluator: java.lang.String getNameOfVariableWithAttribute(ucar.nc2.dataset.NetcdfDataset,java.lang.String,java.lang.String)>(r0, "standard_name", "station_WMO_id");

        $r5.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String stnWmoId> = $r16;

        $r17 = new ucar.nc2.ft.point.standard.TableConfig;

        $r18 = <ucar.nc2.ft.point.standard.Table$Type: ucar.nc2.ft.point.standard.Table$Type NestedStructure>;

        specialinvoke $r17.<ucar.nc2.ft.point.standard.TableConfig: void <init>(ucar.nc2.ft.point.standard.Table$Type,java.lang.String)>($r18, "station.stn_data");

        $r17.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String nestedTableName> = "stn_data";

        $r19 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Time>;

        $r20 = staticinvoke <ucar.nc2.ft.point.standard.CoordSysEvaluator: java.lang.String findCoordShortNameByType(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.constants.AxisType)>(r0, $r19);

        $r17.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String time> = $r20;

        virtualinvoke $r5.<ucar.nc2.ft.point.standard.TableConfig: void addChild(ucar.nc2.ft.point.standard.TableConfig)>($r17);

        return $r5;
    }

    public static void <clinit>()
    {
        <ucar.nc2.ft.point.standard.plug.CdmDirect: java.lang.String Convention> = "CDM";

        return;
    }
}
