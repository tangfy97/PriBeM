public abstract class org.mortbay.jetty.handler.AbstractHandlerContainer extends org.mortbay.jetty.handler.AbstractHandler implements org.mortbay.jetty.HandlerContainer
{
    static java.lang.Class class$org$mortbay$jetty$Handler;

    public void <init>()
    {
        org.mortbay.jetty.handler.AbstractHandlerContainer r0;

        r0 := @this: org.mortbay.jetty.handler.AbstractHandlerContainer;

        specialinvoke r0.<org.mortbay.jetty.handler.AbstractHandler: void <init>()>();

        return;
    }

    public org.mortbay.jetty.Handler[] getChildHandlers()
    {
        org.mortbay.jetty.handler.AbstractHandlerContainer r0;
        org.mortbay.jetty.Handler[] $r4, $r5;
        java.lang.Object $r1, $r3;
        java.lang.Class $r2, $r6;

        r0 := @this: org.mortbay.jetty.handler.AbstractHandlerContainer;

        $r1 = virtualinvoke r0.<org.mortbay.jetty.handler.AbstractHandlerContainer: java.lang.Object expandChildren(java.lang.Object,java.lang.Class)>(null, null);

        $r2 = <org.mortbay.jetty.handler.AbstractHandlerContainer: java.lang.Class class$org$mortbay$jetty$Handler>;

        if $r2 != null goto label1;

        $r6 = staticinvoke <org.mortbay.jetty.handler.AbstractHandlerContainer: java.lang.Class class$(java.lang.String)>("org.mortbay.jetty.Handler");

        <org.mortbay.jetty.handler.AbstractHandlerContainer: java.lang.Class class$org$mortbay$jetty$Handler> = $r6;

        goto label2;

     label1:
        $r6 = <org.mortbay.jetty.handler.AbstractHandlerContainer: java.lang.Class class$org$mortbay$jetty$Handler>;

     label2:
        $r3 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object toArray(java.lang.Object,java.lang.Class)>($r1, $r6);

        $r4 = (org.mortbay.jetty.Handler[]) $r3;

        $r5 = (org.mortbay.jetty.Handler[]) $r4;

        return $r5;
    }

    public org.mortbay.jetty.Handler[] getChildHandlersByClass(java.lang.Class)
    {
        org.mortbay.jetty.handler.AbstractHandlerContainer r0;
        org.mortbay.jetty.Handler[] $r5, $r6;
        java.lang.Class r1, $r3, $r7;
        java.lang.Object $r2, $r4;

        r0 := @this: org.mortbay.jetty.handler.AbstractHandlerContainer;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.mortbay.jetty.handler.AbstractHandlerContainer: java.lang.Object expandChildren(java.lang.Object,java.lang.Class)>(null, r1);

        $r3 = <org.mortbay.jetty.handler.AbstractHandlerContainer: java.lang.Class class$org$mortbay$jetty$Handler>;

        if $r3 != null goto label1;

        $r7 = staticinvoke <org.mortbay.jetty.handler.AbstractHandlerContainer: java.lang.Class class$(java.lang.String)>("org.mortbay.jetty.Handler");

        <org.mortbay.jetty.handler.AbstractHandlerContainer: java.lang.Class class$org$mortbay$jetty$Handler> = $r7;

        goto label2;

     label1:
        $r7 = <org.mortbay.jetty.handler.AbstractHandlerContainer: java.lang.Class class$org$mortbay$jetty$Handler>;

     label2:
        $r4 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object toArray(java.lang.Object,java.lang.Class)>($r2, $r7);

        $r5 = (org.mortbay.jetty.Handler[]) $r4;

        $r6 = (org.mortbay.jetty.Handler[]) $r5;

        return $r6;
    }

    public org.mortbay.jetty.Handler getChildHandlerByClass(java.lang.Class)
    {
        org.mortbay.jetty.handler.AbstractHandlerContainer r0;
        java.lang.Class r1;
        java.lang.Object $r2, $r3;
        org.mortbay.jetty.Handler $r4;

        r0 := @this: org.mortbay.jetty.handler.AbstractHandlerContainer;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.mortbay.jetty.handler.AbstractHandlerContainer: java.lang.Object expandChildren(java.lang.Object,java.lang.Class)>(null, r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object get(java.lang.Object,int)>($r2, 0);

        $r4 = (org.mortbay.jetty.Handler) $r3;

        return $r4;
    }

    protected java.lang.Object expandChildren(java.lang.Object, java.lang.Class)
    {
        org.mortbay.jetty.handler.AbstractHandlerContainer r1;
        java.lang.Object r0;
        java.lang.Class r2;

        r1 := @this: org.mortbay.jetty.handler.AbstractHandlerContainer;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        return r0;
    }

    protected java.lang.Object expandHandler(org.mortbay.jetty.Handler, java.lang.Object, java.lang.Class)
    {
        org.mortbay.jetty.HandlerContainer r1;
        org.mortbay.jetty.Handler r0;
        org.mortbay.jetty.handler.AbstractHandlerContainer $r3, r5;
        org.mortbay.jetty.Handler[] $r7;
        java.lang.Class r2, $r4;
        java.lang.Object r6;
        boolean $z0, $z1, $z2;

        r5 := @this: org.mortbay.jetty.handler.AbstractHandlerContainer;

        r0 := @parameter0: org.mortbay.jetty.Handler;

        r6 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Class;

        if r0 != null goto label1;

        return r6;

     label1:
        if r0 == null goto label3;

        if r2 == null goto label2;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z1 == 0 goto label3;

     label2:
        r6 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object add(java.lang.Object,java.lang.Object)>(r6, r0);

     label3:
        $z2 = r0 instanceof org.mortbay.jetty.handler.AbstractHandlerContainer;

        if $z2 == 0 goto label4;

        $r3 = (org.mortbay.jetty.handler.AbstractHandlerContainer) r0;

        r6 = virtualinvoke $r3.<org.mortbay.jetty.handler.AbstractHandlerContainer: java.lang.Object expandChildren(java.lang.Object,java.lang.Class)>(r6, r2);

        goto label7;

     label4:
        $z0 = r0 instanceof org.mortbay.jetty.HandlerContainer;

        if $z0 == 0 goto label7;

        r1 = (org.mortbay.jetty.HandlerContainer) r0;

        if r2 != null goto label5;

        $r7 = interfaceinvoke r1.<org.mortbay.jetty.HandlerContainer: org.mortbay.jetty.Handler[] getChildHandlers()>();

        goto label6;

     label5:
        $r7 = interfaceinvoke r1.<org.mortbay.jetty.HandlerContainer: org.mortbay.jetty.Handler[] getChildHandlersByClass(java.lang.Class)>(r2);

     label6:
        r6 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object addArray(java.lang.Object,java.lang.Object[])>(r6, $r7);

     label7:
        return r6;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
