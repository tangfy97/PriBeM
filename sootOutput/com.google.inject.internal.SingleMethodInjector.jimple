final class com.google.inject.internal.SingleMethodInjector extends java.lang.Object implements com.google.inject.internal.SingleMemberInjector
{
    private final com.google.inject.internal.InjectorImpl$MethodInvoker methodInvoker;
    private final com.google.inject.internal.SingleParameterInjector[] parameterInjectors;
    private final com.google.inject.spi.InjectionPoint injectionPoint;

    void <init>(com.google.inject.internal.InjectorImpl, com.google.inject.spi.InjectionPoint, com.google.inject.internal.Errors) throws com.google.inject.internal.ErrorsException
    {
        java.lang.reflect.Member $r2;
        com.google.inject.internal.InjectorImpl$MethodInvoker $r4;
        com.google.inject.internal.Errors r7;
        java.util.List $r6;
        com.google.inject.internal.InjectorImpl r5;
        com.google.inject.internal.SingleMethodInjector r0;
        com.google.inject.spi.InjectionPoint r1;
        com.google.inject.internal.SingleParameterInjector[] $r8;
        java.lang.reflect.Method r3;

        r0 := @this: com.google.inject.internal.SingleMethodInjector;

        r5 := @parameter0: com.google.inject.internal.InjectorImpl;

        r1 := @parameter1: com.google.inject.spi.InjectionPoint;

        r7 := @parameter2: com.google.inject.internal.Errors;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.inject.internal.SingleMethodInjector: com.google.inject.spi.InjectionPoint injectionPoint> = r1;

        $r2 = virtualinvoke r1.<com.google.inject.spi.InjectionPoint: java.lang.reflect.Member getMember()>();

        r3 = (java.lang.reflect.Method) $r2;

        $r4 = specialinvoke r0.<com.google.inject.internal.SingleMethodInjector: com.google.inject.internal.InjectorImpl$MethodInvoker createMethodInvoker(java.lang.reflect.Method)>(r3);

        r0.<com.google.inject.internal.SingleMethodInjector: com.google.inject.internal.InjectorImpl$MethodInvoker methodInvoker> = $r4;

        $r6 = virtualinvoke r1.<com.google.inject.spi.InjectionPoint: java.util.List getDependencies()>();

        $r8 = virtualinvoke r5.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.SingleParameterInjector[] getParametersInjectors(java.util.List,com.google.inject.internal.Errors)>($r6, r7);

        r0.<com.google.inject.internal.SingleMethodInjector: com.google.inject.internal.SingleParameterInjector[] parameterInjectors> = $r8;

        return;
    }

    private com.google.inject.internal.InjectorImpl$MethodInvoker createMethodInvoker(java.lang.reflect.Method)
    {
        com.google.inject.internal.cglib.reflect.$FastClass $r5;
        com.google.inject.internal.SingleMethodInjector$2 $r9;
        com.google.inject.internal.SingleMethodInjector$1 $r7;
        int $i0, $i1;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2, $z3;
        com.google.inject.internal.cglib.core.$CodeGenerationException $r8;
        com.google.inject.internal.SingleMethodInjector r1;
        com.google.inject.internal.cglib.reflect.$FastMethod $r6;
        java.lang.Class $r2, $r3;
        com.google.inject.internal.BytecodeGen$Visibility $r4;

        r1 := @this: com.google.inject.internal.SingleMethodInjector;

        r0 := @parameter0: java.lang.reflect.Method;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i0);

        if $z0 != 0 goto label4;

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>($i0);

        if $z2 != 0 goto label4;

     label1:
        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r4 = staticinvoke <com.google.inject.internal.BytecodeGen$Visibility: com.google.inject.internal.BytecodeGen$Visibility forMember(java.lang.reflect.Member)>(r0);

        $r5 = staticinvoke <com.google.inject.internal.BytecodeGen: com.google.inject.internal.cglib.reflect.$FastClass newFastClass(java.lang.Class,com.google.inject.internal.BytecodeGen$Visibility)>($r3, $r4);

        $r6 = virtualinvoke $r5.<com.google.inject.internal.cglib.reflect.$FastClass: com.google.inject.internal.cglib.reflect.$FastMethod getMethod(java.lang.reflect.Method)>(r0);

        $r7 = new com.google.inject.internal.SingleMethodInjector$1;

        specialinvoke $r7.<com.google.inject.internal.SingleMethodInjector$1: void <init>(com.google.inject.internal.SingleMethodInjector,com.google.inject.internal.cglib.reflect.$FastMethod)>(r1, $r6);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

     label4:
        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z3 == 0 goto label5;

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $i1 = virtualinvoke $r2.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z1 != 0 goto label6;

     label5:
        virtualinvoke r0.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label6:
        $r9 = new com.google.inject.internal.SingleMethodInjector$2;

        specialinvoke $r9.<com.google.inject.internal.SingleMethodInjector$2: void <init>(com.google.inject.internal.SingleMethodInjector,java.lang.reflect.Method)>(r1, r0);

        return $r9;

        catch com.google.inject.internal.cglib.core.$CodeGenerationException from label1 to label2 with label3;
    }

    public com.google.inject.spi.InjectionPoint getInjectionPoint()
    {
        com.google.inject.internal.SingleMethodInjector r0;
        com.google.inject.spi.InjectionPoint $r1;

        r0 := @this: com.google.inject.internal.SingleMethodInjector;

        $r1 = r0.<com.google.inject.internal.SingleMethodInjector: com.google.inject.spi.InjectionPoint injectionPoint>;

        return $r1;
    }

    public void inject(com.google.inject.internal.Errors, com.google.inject.internal.InternalContext, java.lang.Object)
    {
        java.lang.Throwable $r8, $r15;
        java.lang.Object[] $r4;
        com.google.inject.internal.InternalContext r1;
        com.google.inject.internal.InjectorImpl$MethodInvoker $r6;
        java.lang.AssertionError $r12;
        com.google.inject.internal.ErrorsException $r13;
        java.lang.IllegalAccessException $r11;
        java.lang.reflect.InvocationTargetException $r7;
        com.google.inject.internal.Errors r0, $r10, $r14;
        com.google.inject.internal.SingleMethodInjector r2;
        com.google.inject.spi.InjectionPoint $r9;
        java.lang.Object r5;
        com.google.inject.internal.SingleParameterInjector[] $r3;

        r2 := @this: com.google.inject.internal.SingleMethodInjector;

        r0 := @parameter0: com.google.inject.internal.Errors;

        r1 := @parameter1: com.google.inject.internal.InternalContext;

        r5 := @parameter2: java.lang.Object;

     label01:
        $r3 = r2.<com.google.inject.internal.SingleMethodInjector: com.google.inject.internal.SingleParameterInjector[] parameterInjectors>;

        $r4 = staticinvoke <com.google.inject.internal.SingleParameterInjector: java.lang.Object[] getAll(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,com.google.inject.internal.SingleParameterInjector[])>(r0, r1, $r3);

     label02:
        goto label04;

     label03:
        $r13 := @caughtexception;

        $r14 = virtualinvoke $r13.<com.google.inject.internal.ErrorsException: com.google.inject.internal.Errors getErrors()>();

        virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors merge(com.google.inject.internal.Errors)>($r14);

        return;

     label04:
        $r6 = r2.<com.google.inject.internal.SingleMethodInjector: com.google.inject.internal.InjectorImpl$MethodInvoker methodInvoker>;

        interfaceinvoke $r6.<com.google.inject.internal.InjectorImpl$MethodInvoker: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r5, $r4);

     label05:
        goto label10;

     label06:
        $r11 := @caughtexception;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r12;

     label07:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        if $r8 == null goto label08;

        $r15 = virtualinvoke $r7.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        goto label09;

     label08:
        $r15 = $r7;

     label09:
        $r9 = r2.<com.google.inject.internal.SingleMethodInjector: com.google.inject.spi.InjectionPoint injectionPoint>;

        $r10 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors withSource(java.lang.Object)>($r9);

        virtualinvoke $r10.<com.google.inject.internal.Errors: com.google.inject.internal.Errors errorInjectingMethod(java.lang.Throwable)>($r15);

     label10:
        return;

        catch com.google.inject.internal.ErrorsException from label01 to label02 with label03;
        catch java.lang.IllegalAccessException from label04 to label05 with label06;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label07;
    }
}
