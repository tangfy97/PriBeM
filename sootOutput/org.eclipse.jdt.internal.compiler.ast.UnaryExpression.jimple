public class org.eclipse.jdt.internal.compiler.ast.UnaryExpression extends org.eclipse.jdt.internal.compiler.ast.OperatorExpression
{
    public org.eclipse.jdt.internal.compiler.ast.Expression expression;
    public org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant;

    public void <init>(org.eclipse.jdt.internal.compiler.ast.Expression, int)
    {
        org.eclipse.jdt.internal.compiler.ast.UnaryExpression r0;
        org.eclipse.jdt.internal.compiler.ast.Expression r1;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.UnaryExpression;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Expression;

        i0 := @parameter1: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.OperatorExpression: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression> = r1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: int bits>;

        $i1 = i0 << 6;

        $i3 = $i2 | $i1;

        r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: int bits> = $i3;

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.ast.UnaryExpression r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r3, $r6, $r8, $r9;
        org.eclipse.jdt.internal.compiler.ast.Expression $r4, $r5, $r7;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r2;
        int $i0, $i1, $i2;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.UnaryExpression;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r3 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: void checkNPE(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r1, r2, r3);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: int bits>;

        $i1 = $i0 & 4032;

        $i2 = $i1 >> 6;

        if $i2 != 11 goto label1;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r8 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r1, r2, r3);

        $r9 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo asNegatedCondition()>();

        return $r9;

     label1:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r6 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r1, r2, r3);

        return $r6;
    }

    public org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()
    {
        org.eclipse.jdt.internal.compiler.impl.Constant $r1, $r2;
        org.eclipse.jdt.internal.compiler.ast.UnaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.UnaryExpression;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant>;

        if $r1 != null goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        goto label2;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant>;

     label2:
        return $r2;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r5, $r8, $r9, $r10, $r15, $r16, $r17, $r18, $r20;
        boolean z0;
        org.eclipse.jdt.internal.compiler.impl.Constant $r2, $r3, $r6, $r7, $r11, $r12, $r13, $r14, $r22;
        float $f0, $f1;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r4;
        long $l14, $l15;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel $r23, $r24;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26;
        double $d0, $d1;
        org.eclipse.jdt.internal.compiler.ast.UnaryExpression r1;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.UnaryExpression;

        r4 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        z0 := @parameter2: boolean;

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r2 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r3 == $r2 goto label02;

        if z0 == 0 goto label01;

        $r22 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i24 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateConstant(org.eclipse.jdt.internal.compiler.impl.Constant,int)>($r22, $i24);

     label01:
        $i23 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i23);

        return;

     label02:
        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: int bits>;

        $i2 = $i1 & 4032;

        $i3 = $i2 >> 6;

        tableswitch($i3)
        {
            case 11: goto label03;
            case 12: goto label07;
            case 13: goto label11;
            case 14: goto label23;
            default: goto label24;
        };

     label03:
        $r18 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $i19 = $r18.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i20 = $i19 & 255;

        $i21 = $i20 >> 4;

        tableswitch($i21)
        {
            case 5: goto label04;
            default: goto label06;
        };

     label04:
        $r20 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r23 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r23.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r0);

        virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r4, r0, null, $r23, z0);

        if z0 == 0 goto label05;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

        $i22 = virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: int forwardReferenceCount()>();

        if $i22 <= 0 goto label24;

        $r24 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r24.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void goto_(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>($r24);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void decrStackSize(int)>(1);

        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_1()>();

        virtualinvoke $r24.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        goto label24;

     label05:
        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

     label06:
        goto label24;

     label07:
        $r15 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $i16 = $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i17 = $i16 & 255;

        $i18 = $i17 >> 4;

        tableswitch($i18)
        {
            case 7: goto label09;
            case 8: goto label10;
            case 9: goto label10;
            case 10: goto label08;
            default: goto label10;
        };

     label08:
        $r16 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label24;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_m1()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ixor()>();

        goto label24;

     label09:
        $r17 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label24;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ldc2_w(long)>(-1L);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lxor()>();

     label10:
        goto label24;

     label11:
        $r7 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r6 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r7 == $r6 goto label17;

        if z0 == 0 goto label24;

        $r10 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $i9 = $r10.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i10 = $i9 & 255;

        $i11 = $i10 >> 4;

        tableswitch($i11)
        {
            case 7: goto label14;
            case 8: goto label15;
            case 9: goto label13;
            case 10: goto label12;
            default: goto label16;
        };

     label12:
        $r11 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i12 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.impl.Constant: int intValue()>();

        $i26 = (int) -1;

        $i13 = $i12 * $i26;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateInlinedValue(int)>($i13);

        goto label24;

     label13:
        $r12 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $f0 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.impl.Constant: float floatValue()>();

        $f1 = $f0 * -1.0F;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateInlinedValue(float)>($f1);

        goto label24;

     label14:
        $r14 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $l14 = virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.impl.Constant: long longValue()>();

        $l15 = $l14 * -1L;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateInlinedValue(long)>($l15);

        goto label24;

     label15:
        $r13 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $d0 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.impl.Constant: double doubleValue()>();

        $d1 = $d0 * -1.0;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateInlinedValue(double)>($d1);

     label16:
        goto label24;

     label17:
        $r8 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label24;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $i6 = $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i7 = $i6 & 255;

        $i8 = $i7 >> 4;

        tableswitch($i8)
        {
            case 7: goto label20;
            case 8: goto label21;
            case 9: goto label19;
            case 10: goto label18;
            default: goto label22;
        };

     label18:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ineg()>();

        goto label24;

     label19:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void fneg()>();

        goto label24;

     label20:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lneg()>();

        goto label24;

     label21:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dneg()>();

     label22:
        goto label24;

     label23:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

     label24:
        if z0 == 0 goto label25;

        $i5 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i5);

     label25:
        $i4 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i4);

        return;
    }

    public void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.UnaryExpression r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r3;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r4;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r5, r6;
        org.eclipse.jdt.internal.compiler.impl.Constant $r1, $r2, $r8;
        org.eclipse.jdt.internal.compiler.ast.Expression $r7;
        int $i0, $i1, $i2, $i3;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.UnaryExpression;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r4 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r5 := @parameter2: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        r6 := @parameter3: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        z0 := @parameter4: boolean;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r1 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r2 == $r1 goto label1;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i3 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.impl.Constant: int typeID()>();

        if $i3 != 5 goto label1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.OperatorExpression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r3, r4, r5, r6, z0);

        return;

     label1:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: int bits>;

        $i1 = $i0 & 4032;

        $i2 = $i1 >> 6;

        if $i2 != 11 goto label2;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r3, r4, r6, r5, z0);

        goto label3;

     label2:
        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.OperatorExpression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r3, r4, r5, r6, z0);

     label3:
        return;
    }

    public java.lang.StringBuffer printExpressionNoParenthesis(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.UnaryExpression r1;
        org.eclipse.jdt.internal.compiler.ast.Expression $r4;
        java.lang.StringBuffer r0, $r3, $r5;
        int i0;
        java.lang.String $r2;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.UnaryExpression;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        $r2 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: java.lang.String operatorToString()>();

        $r3 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r5 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(0, r0);

        return $r5;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        byte $b1, b14, b24, b25;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r4, $r8, $r28, $r34;
        org.eclipse.jdt.internal.compiler.impl.Constant $r7, $r11, $r12, $r15, $r16, $r23, $r25, $r29, $r36, $r37;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r5;
        org.eclipse.jdt.internal.compiler.impl.BooleanConstant $r13;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        long $l0;
        org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment $r27;
        int[][] $r31;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r24, $r26;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r3, $r9, $r10, $r14, $r30, $r33, $r35;
        int[] $r32;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i26;
        org.eclipse.jdt.internal.compiler.ast.UnaryExpression r0;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r6, $r17, $r18, $r19, $r20, $r21, $r22;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.UnaryExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $z0 = $r1 instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression;

        if $z0 == 0 goto label01;

        $r30 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $i11 = $r30.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i12 = $i11 | 32;

        $r30.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits> = $i12;

     label01:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r4 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r2);

        if $r4 != null goto label02;

        $r29 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r29;

        return null;

     label02:
        i13 = $r4.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        $r5 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions()>();

        $l0 = $r5.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b1 = $l0 cmp 3211264L;

        $i26 = (int) $b1;

        if $i26 < 0 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        if $z3 == 0 goto label05;

        $z2 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isBaseType()>();

        if $z2 != 0 goto label05;

        $r27 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment environment()>();

        $r28 = virtualinvoke $r27.<org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment: org.eclipse.jdt.internal.compiler.lookup.TypeBinding computeBoxingType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r4);

        i13 = $r28.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

     label05:
        if i13 <= 15 goto label06;

        $r25 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r25;

        $r26 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r26.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidOperator(org.eclipse.jdt.internal.compiler.ast.UnaryExpression,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r0, $r4);

        return null;

     label06:
        $i2 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: int bits>;

        $i3 = $i2 & 4032;

        $i4 = $i3 >> 6;

        tableswitch($i4)
        {
            case 11: goto label07;
            case 12: goto label08;
            default: goto label09;
        };

     label07:
        b14 = 0;

        b25 = 0;

        b24 = 0;

        goto label10;

     label08:
        b14 = 10;

        b25 = 10;

        b24 = 10;

        goto label10;

     label09:
        b14 = 13;

        b25 = 13;

        b24 = 13;

     label10:
        $r31 = <org.eclipse.jdt.internal.compiler.ast.UnaryExpression: int[][] OperatorSignatures>;

        $r32 = $r31[b24];

        $i15 = i13 << 4;

        $i16 = $i15 + i13;

        $i17 = $r32[$i16];

        $r33 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $i18 = $i17 >>> 16;

        $i19 = $i18 & 15;

        $r34 = staticinvoke <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding wellKnownType(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i19);

        virtualinvoke $r33.<org.eclipse.jdt.internal.compiler.ast.Expression: void computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r2, $r34, $r4);

        $i20 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: int bits>;

        $i21 = $i17 & 15;

        $i22 = $i20 | $i21;

        r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: int bits> = $i22;

        $i23 = $i17 & 15;

        tableswitch($i23)
        {
            case 2: goto label13;
            case 3: goto label12;
            case 4: goto label18;
            case 5: goto label11;
            case 6: goto label18;
            case 7: goto label17;
            case 8: goto label14;
            case 9: goto label15;
            case 10: goto label16;
            default: goto label18;
        };

     label11:
        $r20 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding BOOLEAN>;

        r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r20;

        goto label20;

     label12:
        $r21 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding BYTE>;

        r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r21;

        goto label20;

     label13:
        $r22 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding CHAR>;

        r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r22;

        goto label20;

     label14:
        $r18 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding DOUBLE>;

        r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r18;

        goto label20;

     label15:
        $r17 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding FLOAT>;

        r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r17;

        goto label20;

     label16:
        $r6 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding INT>;

        r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r6;

        goto label20;

     label17:
        $r19 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding LONG>;

        r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r19;

        goto label20;

     label18:
        $r23 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r23;

        if i13 == 0 goto label19;

        $r24 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r24.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidOperator(org.eclipse.jdt.internal.compiler.ast.UnaryExpression,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r0, $r4);

     label19:
        return null;

     label20:
        $r35 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r36 = $r35.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r37 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r36 == $r37 goto label21;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r15 = $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: int bits>;

        $i9 = $i8 & 4032;

        $i10 = $i9 >> 6;

        $r16 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant computeConstantOperation(org.eclipse.jdt.internal.compiler.impl.Constant,int,int)>($r15, i13, $i10);

        r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r16;

        goto label24;

     label21:
        $r7 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r7;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: int bits>;

        $i6 = $i5 & 4032;

        $i7 = $i6 >> 6;

        if $i7 != 11 goto label24;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r11 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r12 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r11 == $r12 goto label24;

        $z1 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z1 == 0 goto label22;

        $z4 = 0;

        goto label23;

     label22:
        $z4 = 1;

     label23:
        $r13 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.BooleanConstant: org.eclipse.jdt.internal.compiler.impl.BooleanConstant fromValue(boolean)>($z4);

        r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant> = $r13;

     label24:
        if $z0 == 0 goto label25;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        staticinvoke <org.eclipse.jdt.internal.compiler.ast.CastExpression: void checkNeedForArgumentCast(org.eclipse.jdt.internal.compiler.lookup.BlockScope,int,int,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r2, b25, $i17, $r9, i13);

     label25:
        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        return $r8;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.ast.UnaryExpression r1;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.UnaryExpression;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.UnaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.UnaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.UnaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
