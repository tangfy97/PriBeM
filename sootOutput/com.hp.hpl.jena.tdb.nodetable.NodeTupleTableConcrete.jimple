public class com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete extends java.lang.Object implements com.hp.hpl.jena.tdb.nodetable.NodeTupleTable
{
    protected final com.hp.hpl.jena.tdb.nodetable.NodeTable nodeTable;
    protected final com.hp.hpl.jena.tdb.index.TupleTable tupleTable;
    private final com.hp.hpl.jena.tdb.sys.DatasetControl dsPolicy;

    public void <init>(int, com.hp.hpl.jena.tdb.index.TupleIndex[], com.hp.hpl.jena.tdb.nodetable.NodeTable, com.hp.hpl.jena.tdb.sys.DatasetControl)
    {
        com.hp.hpl.jena.tdb.index.TupleIndex[] r1;
        java.lang.Object[] $r9;
        java.lang.Integer $r10, $r12;
        com.hp.hpl.jena.tdb.index.TupleTable $r5;
        com.hp.hpl.jena.tdb.nodetable.NodeTable r6;
        int $i0, i1, i2, $i3, $i4, i5;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;
        java.lang.String $r11, $r13;
        com.hp.hpl.jena.tdb.TDBException $r2, $r8;
        com.hp.hpl.jena.tdb.sys.DatasetControl r4;
        com.hp.hpl.jena.tdb.index.TupleIndex $r3, r7;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        i2 := @parameter0: int;

        r1 := @parameter1: com.hp.hpl.jena.tdb.index.TupleIndex[];

        r6 := @parameter2: com.hp.hpl.jena.tdb.nodetable.NodeTable;

        r4 := @parameter3: com.hp.hpl.jena.tdb.sys.DatasetControl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        if $i0 == 0 goto label1;

        $r3 = r1[0];

        if $r3 != null goto label2;

     label1:
        $r2 = new com.hp.hpl.jena.tdb.TDBException;

        specialinvoke $r2.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>("A primary index is required");

        throw $r2;

     label2:
        i1 = lengthof r1;

        i5 = 0;

     label3:
        if i5 >= i1 goto label5;

        r7 = r1[i5];

        $i3 = interfaceinvoke r7.<com.hp.hpl.jena.tdb.index.TupleIndex: int getTupleLength()>();

        if i2 == $i3 goto label4;

        $r8 = new com.hp.hpl.jena.tdb.TDBException;

        $r9 = newarray (java.lang.Object)[3];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r9[0] = $r10;

        $r11 = interfaceinvoke r7.<com.hp.hpl.jena.tdb.index.TupleIndex: java.lang.String getMapping()>();

        $r9[1] = $r11;

        $i4 = interfaceinvoke r7.<com.hp.hpl.jena.tdb.index.TupleIndex: int getTupleLength()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r9[2] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Inconsistent: TupleTable width is %d but index %s is %d", $r9);

        specialinvoke $r8.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.sys.DatasetControl dsPolicy> = r4;

        $r5 = new com.hp.hpl.jena.tdb.index.TupleTable;

        specialinvoke $r5.<com.hp.hpl.jena.tdb.index.TupleTable: void <init>(int,com.hp.hpl.jena.tdb.index.TupleIndex[])>(i2, r1);

        r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.index.TupleTable tupleTable> = $r5;

        r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.nodetable.NodeTable nodeTable> = r6;

        return;
    }

    private void startWrite()
    {
        com.hp.hpl.jena.tdb.sys.DatasetControl $r1;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        $r1 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.sys.DatasetControl dsPolicy>;

        interfaceinvoke $r1.<com.hp.hpl.jena.tdb.sys.DatasetControl: void startUpdate()>();

        return;
    }

    private void finishWrite()
    {
        com.hp.hpl.jena.tdb.sys.DatasetControl $r1;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        $r1 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.sys.DatasetControl dsPolicy>;

        interfaceinvoke $r1.<com.hp.hpl.jena.tdb.sys.DatasetControl: void finishUpdate()>();

        return;
    }

    private void startRead()
    {
        com.hp.hpl.jena.tdb.sys.DatasetControl $r1;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        $r1 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.sys.DatasetControl dsPolicy>;

        interfaceinvoke $r1.<com.hp.hpl.jena.tdb.sys.DatasetControl: void startRead()>();

        return;
    }

    private void finishRead()
    {
        com.hp.hpl.jena.tdb.sys.DatasetControl $r1;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        $r1 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.sys.DatasetControl dsPolicy>;

        interfaceinvoke $r1.<com.hp.hpl.jena.tdb.sys.DatasetControl: void finishRead()>();

        return;
    }

    public com.hp.hpl.jena.tdb.sys.DatasetControl getPolicy()
    {
        com.hp.hpl.jena.tdb.sys.DatasetControl $r1;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        $r1 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.sys.DatasetControl dsPolicy>;

        return $r1;
    }

    public transient boolean addRow(com.hp.hpl.jena.graph.Node[])
    {
        java.lang.Throwable $r8;
        com.hp.hpl.jena.graph.Node[] r1;
        org.apache.jena.atlas.lib.Tuple $r3;
        com.hp.hpl.jena.tdb.store.NodeId[] r2;
        com.hp.hpl.jena.graph.Node $r5;
        com.hp.hpl.jena.tdb.index.TupleTable $r4;
        com.hp.hpl.jena.tdb.nodetable.NodeTable $r6;
        com.hp.hpl.jena.tdb.store.NodeId $r7;
        int $i0, $i1, i2;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node[];

     label1:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void startWrite()>();

        $i0 = lengthof r1;

        r2 = newarray (com.hp.hpl.jena.tdb.store.NodeId)[$i0];

        i2 = 0;

     label2:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label3;

        $r6 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.nodetable.NodeTable nodeTable>;

        $r5 = r1[i2];

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.tdb.nodetable.NodeTable: com.hp.hpl.jena.tdb.store.NodeId getAllocateNodeId(com.hp.hpl.jena.graph.Node)>($r5);

        r2[i2] = $r7;

        i2 = i2 + 1;

        goto label2;

     label3:
        $r3 = staticinvoke <org.apache.jena.atlas.lib.Tuple: org.apache.jena.atlas.lib.Tuple create(java.lang.Object[])>(r2);

        $r4 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.index.TupleTable tupleTable>;

        $z0 = virtualinvoke $r4.<com.hp.hpl.jena.tdb.index.TupleTable: boolean add(org.apache.jena.atlas.lib.Tuple)>($r3);

     label4:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishWrite()>();

        return $z0;

     label5:
        $r8 := @caughtexception;

     label6:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishWrite()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public transient boolean deleteRow(com.hp.hpl.jena.graph.Node[])
    {
        java.lang.Throwable $r7;
        com.hp.hpl.jena.graph.Node[] r1;
        org.apache.jena.atlas.lib.Tuple $r3;
        com.hp.hpl.jena.tdb.store.NodeId[] r2;
        com.hp.hpl.jena.graph.Node $r5;
        com.hp.hpl.jena.tdb.index.TupleTable $r4;
        com.hp.hpl.jena.tdb.store.NodeId $r6;
        int $i0, $i1, i2;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node[];

     label1:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void startWrite()>();

        $i0 = lengthof r1;

        r2 = newarray (com.hp.hpl.jena.tdb.store.NodeId)[$i0];

        i2 = 0;

     label2:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label5;

        $r5 = r1[i2];

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.store.NodeId idForNode(com.hp.hpl.jena.graph.Node)>($r5);

        $z1 = staticinvoke <com.hp.hpl.jena.tdb.store.NodeId: boolean isDoesNotExist(com.hp.hpl.jena.tdb.store.NodeId)>($r6);

        if $z1 == 0 goto label4;

     label3:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishWrite()>();

        return 0;

     label4:
        r2[i2] = $r6;

        i2 = i2 + 1;

        goto label2;

     label5:
        $r3 = staticinvoke <org.apache.jena.atlas.lib.Tuple: org.apache.jena.atlas.lib.Tuple create(java.lang.Object[])>(r2);

        $r4 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.index.TupleTable tupleTable>;

        $z0 = virtualinvoke $r4.<com.hp.hpl.jena.tdb.index.TupleTable: boolean delete(org.apache.jena.atlas.lib.Tuple)>($r3);

     label6:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishWrite()>();

        return $z0;

     label7:
        $r7 := @caughtexception;

     label8:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishWrite()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public transient java.util.Iterator find(com.hp.hpl.jena.graph.Node[])
    {
        java.lang.Throwable $r7;
        com.hp.hpl.jena.graph.Node[] r1;
        java.util.Iterator $r2, $r4, $r5;
        org.apache.jena.atlas.iterator.NullIterator $r6;
        com.hp.hpl.jena.tdb.nodetable.NodeTable $r3;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node[];

     label1:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void startRead()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: java.util.Iterator findAsNodeIds(com.hp.hpl.jena.graph.Node[])>(r1);

        if $r2 != null goto label3;

        $r6 = new org.apache.jena.atlas.iterator.NullIterator;

        specialinvoke $r6.<org.apache.jena.atlas.iterator.NullIterator: void <init>()>();

     label2:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishRead()>();

        return $r6;

     label3:
        $r3 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.nodetable.NodeTable nodeTable>;

        $r4 = staticinvoke <com.hp.hpl.jena.tdb.lib.TupleLib: java.util.Iterator convertToNodes(com.hp.hpl.jena.tdb.nodetable.NodeTable,java.util.Iterator)>($r3, $r2);

        $r5 = specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: java.util.Iterator iteratorControl(java.util.Iterator)>($r4);

     label4:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishRead()>();

        return $r5;

     label5:
        $r7 := @caughtexception;

     label6:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishRead()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public transient java.util.Iterator findAsNodeIds(com.hp.hpl.jena.graph.Node[])
    {
        java.lang.Throwable $r7;
        com.hp.hpl.jena.graph.Node[] r0;
        java.util.Iterator $r3, $r6;
        com.hp.hpl.jena.tdb.store.NodeId[] r1;
        com.hp.hpl.jena.graph.Node $r4;
        com.hp.hpl.jena.tdb.store.NodeId $r5;
        int $i0, $i1, i2;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r2;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node[];

        $i0 = lengthof r0;

        r1 = newarray (com.hp.hpl.jena.tdb.store.NodeId)[$i0];

     label1:
        specialinvoke r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void startRead()>();

        i2 = 0;

     label2:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label5;

        $r4 = r0[i2];

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.store.NodeId idForNode(com.hp.hpl.jena.graph.Node)>($r4);

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.store.NodeId: boolean isDoesNotExist(com.hp.hpl.jena.tdb.store.NodeId)>($r5);

        if $z0 == 0 goto label4;

        $r6 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator nullIterator()>();

     label3:
        specialinvoke r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishRead()>();

        return $r6;

     label4:
        r1[i2] = $r5;

        i2 = i2 + 1;

        goto label2;

     label5:
        $r3 = virtualinvoke r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: java.util.Iterator find(com.hp.hpl.jena.tdb.store.NodeId[])>(r1);

     label6:
        specialinvoke r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishRead()>();

        return $r3;

     label7:
        $r7 := @caughtexception;

     label8:
        specialinvoke r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishRead()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public transient java.util.Iterator find(com.hp.hpl.jena.tdb.store.NodeId[])
    {
        java.lang.Throwable $r4;
        java.util.Iterator $r3;
        org.apache.jena.atlas.lib.Tuple $r1;
        com.hp.hpl.jena.tdb.store.NodeId[] r0;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r2;

        r2 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        r0 := @parameter0: com.hp.hpl.jena.tdb.store.NodeId[];

        $r1 = staticinvoke <org.apache.jena.atlas.lib.Tuple: org.apache.jena.atlas.lib.Tuple create(java.lang.Object[])>(r0);

     label1:
        specialinvoke r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void startRead()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: java.util.Iterator find(org.apache.jena.atlas.lib.Tuple)>($r1);

     label2:
        specialinvoke r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishRead()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

     label4:
        specialinvoke r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishRead()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.Iterator find(org.apache.jena.atlas.lib.Tuple)
    {
        java.lang.Throwable $r5;
        com.hp.hpl.jena.tdb.index.TupleTable $r2;
        java.util.Iterator $r3, $r4;
        org.apache.jena.atlas.lib.Tuple r1;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        r1 := @parameter0: org.apache.jena.atlas.lib.Tuple;

     label1:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void startRead()>();

        $r2 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.index.TupleTable tupleTable>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.TupleTable: java.util.Iterator find(org.apache.jena.atlas.lib.Tuple)>(r1);

        $r4 = specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: java.util.Iterator iteratorControl(java.util.Iterator)>($r3);

     label2:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishRead()>();

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishRead()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.Iterator findAll()
    {
        java.lang.Throwable $r5;
        com.hp.hpl.jena.tdb.index.TupleTable $r1;
        java.util.Iterator $r3, $r4;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;
        com.hp.hpl.jena.tdb.index.TupleIndex $r2;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

     label1:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void startRead()>();

        $r1 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.index.TupleTable tupleTable>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex getIndex(int)>(0);

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.tdb.index.TupleIndex: java.util.Iterator all()>();

        $r4 = specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: java.util.Iterator iteratorControl(java.util.Iterator)>($r3);

     label2:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishRead()>();

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishRead()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected final com.hp.hpl.jena.tdb.store.NodeId idForNode(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.TDBException $r6;
        com.hp.hpl.jena.graph.Node r0, $r2;
        com.hp.hpl.jena.tdb.nodetable.NodeTable $r4;
        com.hp.hpl.jena.tdb.store.NodeId $r1, $r5;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r3;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        if r0 == null goto label1;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        if r0 != $r2 goto label2;

     label1:
        $r1 = <com.hp.hpl.jena.tdb.store.NodeId: com.hp.hpl.jena.tdb.store.NodeId NodeIdAny>;

        return $r1;

     label2:
        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label3;

        $r6 = new com.hp.hpl.jena.tdb.TDBException;

        specialinvoke $r6.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>("Can\'t pass variables to NodeTupleTable.find*");

        throw $r6;

     label3:
        $r4 = r3.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.nodetable.NodeTable nodeTable>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.tdb.nodetable.NodeTable: com.hp.hpl.jena.tdb.store.NodeId getNodeIdForNode(com.hp.hpl.jena.graph.Node)>(r0);

        return $r5;
    }

    public final com.hp.hpl.jena.tdb.index.TupleTable getTupleTable()
    {
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;
        com.hp.hpl.jena.tdb.index.TupleTable $r1;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        $r1 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.index.TupleTable tupleTable>;

        return $r1;
    }

    public final com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()
    {
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;
        com.hp.hpl.jena.tdb.nodetable.NodeTable $r1;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        $r1 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.nodetable.NodeTable nodeTable>;

        return $r1;
    }

    public boolean isEmpty()
    {
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;
        com.hp.hpl.jena.tdb.index.TupleTable $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        $r1 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.index.TupleTable tupleTable>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.TupleTable: boolean isEmpty()>();

        return $z0;
    }

    public void clear()
    {
        java.lang.Throwable $r2;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;
        com.hp.hpl.jena.tdb.index.TupleTable $r1;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

     label1:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void startWrite()>();

        $r1 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.index.TupleTable tupleTable>;

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.TupleTable: void clear()>();

     label2:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishWrite()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

     label4:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishWrite()>();

        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public long size()
    {
        long $l0;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;
        com.hp.hpl.jena.tdb.index.TupleTable $r1;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        $r1 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.index.TupleTable tupleTable>;

        $l0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.TupleTable: long size()>();

        return $l0;
    }

    public final void close()
    {
        java.lang.Throwable $r3;
        com.hp.hpl.jena.tdb.index.TupleTable $r1;
        com.hp.hpl.jena.tdb.nodetable.NodeTable $r2;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

     label1:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void startWrite()>();

        $r1 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.index.TupleTable tupleTable>;

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.TupleTable: void close()>();

        $r2 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.nodetable.NodeTable nodeTable>;

        interfaceinvoke $r2.<com.hp.hpl.jena.tdb.nodetable.NodeTable: void close()>();

     label2:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishWrite()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishWrite()>();

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void sync()
    {
        java.lang.Throwable $r3;
        com.hp.hpl.jena.tdb.index.TupleTable $r1;
        com.hp.hpl.jena.tdb.nodetable.NodeTable $r2;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

     label1:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void startWrite()>();

        $r1 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.index.TupleTable tupleTable>;

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.TupleTable: void sync()>();

        $r2 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.nodetable.NodeTable nodeTable>;

        interfaceinvoke $r2.<com.hp.hpl.jena.tdb.nodetable.NodeTable: void sync()>();

     label2:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishWrite()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: void finishWrite()>();

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.util.Iterator iteratorControl(java.util.Iterator)
    {
        java.util.Iterator r1, $r3;
        com.hp.hpl.jena.tdb.sys.DatasetControl $r2;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete r0;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete;

        r1 := @parameter0: java.util.Iterator;

        $r2 = r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTableConcrete: com.hp.hpl.jena.tdb.sys.DatasetControl dsPolicy>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.tdb.sys.DatasetControl: java.util.Iterator iteratorControl(java.util.Iterator)>(r1);

        return $r3;
    }
}
