final class kodkod.util.collections.FixedMap$EntryIterator extends kodkod.util.collections.FixedMap$Entry implements java.util.Iterator
{
    int next;
    final kodkod.util.collections.FixedMap this$0;

    void <init>(kodkod.util.collections.FixedMap)
    {
        kodkod.util.collections.FixedMap$EntryIterator r0;
        int $i1;
        kodkod.util.collections.FixedMap r1;

        r0 := @this: kodkod.util.collections.FixedMap$EntryIterator;

        r1 := @parameter0: kodkod.util.collections.FixedMap;

        r0.<kodkod.util.collections.FixedMap$EntryIterator: kodkod.util.collections.FixedMap this$0> = r1;

        $i1 = (int) -1;

        specialinvoke r0.<kodkod.util.collections.FixedMap$Entry: void <init>(kodkod.util.collections.FixedMap,int)>(r1, $i1);

        r0.<kodkod.util.collections.FixedMap$EntryIterator: int next> = 0;

        return;
    }

    public java.lang.Object setValue(java.lang.Object)
    {
        java.lang.Object[] $r2, $r5;
        kodkod.util.collections.FixedMap $r1, $r4;
        kodkod.util.collections.FixedMap$EntryIterator r0;
        int $i0, $i1;
        java.lang.Object r3, r6;

        r0 := @this: kodkod.util.collections.FixedMap$EntryIterator;

        r6 := @parameter0: java.lang.Object;

        $r1 = r0.<kodkod.util.collections.FixedMap$EntryIterator: kodkod.util.collections.FixedMap this$0>;

        $r2 = staticinvoke <kodkod.util.collections.FixedMap: java.lang.Object[] access$1(kodkod.util.collections.FixedMap)>($r1);

        $i0 = r0.<kodkod.util.collections.FixedMap$EntryIterator: int index>;

        r3 = $r2[$i0];

        $r4 = r0.<kodkod.util.collections.FixedMap$EntryIterator: kodkod.util.collections.FixedMap this$0>;

        $r5 = staticinvoke <kodkod.util.collections.FixedMap: java.lang.Object[] access$1(kodkod.util.collections.FixedMap)>($r4);

        $i1 = r0.<kodkod.util.collections.FixedMap$EntryIterator: int index>;

        $r5[$i1] = r6;

        return r3;
    }

    public boolean hasNext()
    {
        java.lang.Object[] $r2;
        kodkod.util.collections.FixedMap $r1;
        kodkod.util.collections.FixedMap$EntryIterator r0;
        int $i0, $i1;

        r0 := @this: kodkod.util.collections.FixedMap$EntryIterator;

        $i0 = r0.<kodkod.util.collections.FixedMap$EntryIterator: int next>;

        $r1 = r0.<kodkod.util.collections.FixedMap$EntryIterator: kodkod.util.collections.FixedMap this$0>;

        $r2 = staticinvoke <kodkod.util.collections.FixedMap: java.lang.Object[] access$0(kodkod.util.collections.FixedMap)>($r1);

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Map$Entry next()
    {
        kodkod.util.collections.FixedMap$EntryIterator r0;
        int $i0, $i1;
        java.util.NoSuchElementException $r1;
        boolean $z0;

        r0 := @this: kodkod.util.collections.FixedMap$EntryIterator;

        $z0 = virtualinvoke r0.<kodkod.util.collections.FixedMap$EntryIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;

     label1:
        $i0 = r0.<kodkod.util.collections.FixedMap$EntryIterator: int next>;

        $i1 = $i0 + 1;

        r0.<kodkod.util.collections.FixedMap$EntryIterator: int next> = $i1;

        r0.<kodkod.util.collections.FixedMap$EntryIterator: int index> = $i0;

        return r0;
    }

    public int hashCode()
    {
        kodkod.util.collections.FixedMap$EntryIterator r0;
        int $i0, $i1;

        r0 := @this: kodkod.util.collections.FixedMap$EntryIterator;

        $i0 = r0.<kodkod.util.collections.FixedMap$EntryIterator: int index>;

        if $i0 >= 0 goto label1;

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        goto label2;

     label1:
        $i1 = specialinvoke r0.<kodkod.util.collections.FixedMap$Entry: int hashCode()>();

     label2:
        return $i1;
    }

    public boolean equals(java.lang.Object)
    {
        kodkod.util.collections.FixedMap$EntryIterator r0;
        int $i0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: kodkod.util.collections.FixedMap$EntryIterator;

        r1 := @parameter0: java.lang.Object;

        $i0 = r0.<kodkod.util.collections.FixedMap$EntryIterator: int index>;

        if $i0 >= 0 goto label2;

        if r0 != r1 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = specialinvoke r0.<kodkod.util.collections.FixedMap$Entry: boolean equals(java.lang.Object)>(r1);

     label3:
        return $z0;
    }

    public void remove()
    {
        kodkod.util.collections.FixedMap$EntryIterator r1;
        java.lang.UnsupportedOperationException $r0;

        r1 := @this: kodkod.util.collections.FixedMap$EntryIterator;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.lang.String toString()
    {
        kodkod.util.collections.FixedMap$EntryIterator r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: kodkod.util.collections.FixedMap$EntryIterator;

        $i0 = r0.<kodkod.util.collections.FixedMap$EntryIterator: int index>;

        if $i0 >= 0 goto label1;

        $r1 = "[]";

        goto label2;

     label1:
        $r1 = specialinvoke r0.<kodkod.util.collections.FixedMap$Entry: java.lang.String toString()>();

     label2:
        return $r1;
    }

    public volatile java.lang.Object next()
    {
        kodkod.util.collections.FixedMap$EntryIterator r0;
        java.util.Map$Entry $r1;

        r0 := @this: kodkod.util.collections.FixedMap$EntryIterator;

        $r1 = virtualinvoke r0.<kodkod.util.collections.FixedMap$EntryIterator: java.util.Map$Entry next()>();

        return $r1;
    }
}
