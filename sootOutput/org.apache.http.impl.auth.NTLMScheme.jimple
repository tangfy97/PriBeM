public class org.apache.http.impl.auth.NTLMScheme extends org.apache.http.impl.auth.AuthSchemeBase
{
    private final org.apache.http.impl.auth.NTLMEngine engine;
    private org.apache.http.impl.auth.NTLMScheme$State state;
    private java.lang.String challenge;

    public void <init>(org.apache.http.impl.auth.NTLMEngine)
    {
        org.apache.http.impl.auth.NTLMScheme$State $r2;
        org.apache.http.impl.auth.NTLMScheme r0;
        org.apache.http.impl.auth.NTLMEngine r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.http.impl.auth.NTLMScheme;

        r1 := @parameter0: org.apache.http.impl.auth.NTLMEngine;

        specialinvoke r0.<org.apache.http.impl.auth.AuthSchemeBase: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("NTLM engine may not be null");

        throw $r3;

     label1:
        r0.<org.apache.http.impl.auth.NTLMScheme: org.apache.http.impl.auth.NTLMEngine engine> = r1;

        $r2 = <org.apache.http.impl.auth.NTLMScheme$State: org.apache.http.impl.auth.NTLMScheme$State UNINITIATED>;

        r0.<org.apache.http.impl.auth.NTLMScheme: org.apache.http.impl.auth.NTLMScheme$State state> = $r2;

        r0.<org.apache.http.impl.auth.NTLMScheme: java.lang.String challenge> = null;

        return;
    }

    public java.lang.String getSchemeName()
    {
        org.apache.http.impl.auth.NTLMScheme r0;

        r0 := @this: org.apache.http.impl.auth.NTLMScheme;

        return "ntlm";
    }

    public java.lang.String getParameter(java.lang.String)
    {
        java.lang.String r1;
        org.apache.http.impl.auth.NTLMScheme r0;

        r0 := @this: org.apache.http.impl.auth.NTLMScheme;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.lang.String getRealm()
    {
        org.apache.http.impl.auth.NTLMScheme r0;

        r0 := @this: org.apache.http.impl.auth.NTLMScheme;

        return null;
    }

    public boolean isConnectionBased()
    {
        org.apache.http.impl.auth.NTLMScheme r0;

        r0 := @this: org.apache.http.impl.auth.NTLMScheme;

        return 1;
    }

    protected void parseChallenge(org.apache.http.util.CharArrayBuffer, int, int) throws org.apache.http.auth.MalformedChallengeException
    {
        org.apache.http.impl.auth.NTLMScheme$State $r3, $r4, $r5, $r6, $r7;
        org.apache.http.util.CharArrayBuffer r0;
        org.apache.http.impl.auth.NTLMScheme r2;
        int i0, i1, $i2;
        java.lang.String $r1;

        r2 := @this: org.apache.http.impl.auth.NTLMScheme;

        r0 := @parameter0: org.apache.http.util.CharArrayBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i0, i1);

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i2 != 0 goto label3;

        $r5 = r2.<org.apache.http.impl.auth.NTLMScheme: org.apache.http.impl.auth.NTLMScheme$State state>;

        $r4 = <org.apache.http.impl.auth.NTLMScheme$State: org.apache.http.impl.auth.NTLMScheme$State UNINITIATED>;

        if $r5 != $r4 goto label1;

        $r7 = <org.apache.http.impl.auth.NTLMScheme$State: org.apache.http.impl.auth.NTLMScheme$State CHALLENGE_RECEIVED>;

        r2.<org.apache.http.impl.auth.NTLMScheme: org.apache.http.impl.auth.NTLMScheme$State state> = $r7;

        goto label2;

     label1:
        $r6 = <org.apache.http.impl.auth.NTLMScheme$State: org.apache.http.impl.auth.NTLMScheme$State FAILED>;

        r2.<org.apache.http.impl.auth.NTLMScheme: org.apache.http.impl.auth.NTLMScheme$State state> = $r6;

     label2:
        r2.<org.apache.http.impl.auth.NTLMScheme: java.lang.String challenge> = null;

        goto label4;

     label3:
        $r3 = <org.apache.http.impl.auth.NTLMScheme$State: org.apache.http.impl.auth.NTLMScheme$State MSG_TYPE2_RECEVIED>;

        r2.<org.apache.http.impl.auth.NTLMScheme: org.apache.http.impl.auth.NTLMScheme$State state> = $r3;

        r2.<org.apache.http.impl.auth.NTLMScheme: java.lang.String challenge> = $r1;

     label4:
        return;
    }

    public org.apache.http.Header authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest) throws org.apache.http.auth.AuthenticationException
    {
        org.apache.http.auth.NTCredentials r36;
        boolean $z0;
        org.apache.http.impl.auth.NTLMEngine $r4, $r20;
        org.apache.http.message.BufferedHeader $r9;
        org.apache.http.HttpRequest r35;
        java.lang.StringBuilder $r15, $r16, $r18, $r29, $r30, $r33;
        org.apache.http.auth.AuthenticationException $r14;
        org.apache.http.impl.auth.NTLMScheme$State $r2, $r3, $r7, $r10, $r11, $r12, $r13, $r17, $r26;
        java.lang.ClassCastException $r27;
        org.apache.http.auth.InvalidCredentialsException $r28;
        org.apache.http.auth.Credentials r0;
        java.lang.String $r5, $r6, $r19, $r21, $r22, $r23, $r24, $r25, $r32, $r34, r37;
        org.apache.http.util.CharArrayBuffer $r8;
        org.apache.http.impl.auth.NTLMScheme r1;
        java.lang.Class $r31;

        r1 := @this: org.apache.http.impl.auth.NTLMScheme;

        r0 := @parameter0: org.apache.http.auth.Credentials;

        r35 := @parameter1: org.apache.http.HttpRequest;

     label01:
        r36 = (org.apache.http.auth.NTCredentials) r0;

     label02:
        goto label04;

     label03:
        $r27 := @caughtexception;

        $r28 = new org.apache.http.auth.InvalidCredentialsException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Credentials cannot be used for NTLM authentication: ");

        $r31 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r32 = virtualinvoke $r31.<java.lang.Class: java.lang.String getName()>();

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<org.apache.http.auth.InvalidCredentialsException: void <init>(java.lang.String)>($r34);

        throw $r28;

     label04:
        $r3 = r1.<org.apache.http.impl.auth.NTLMScheme: org.apache.http.impl.auth.NTLMScheme$State state>;

        $r2 = <org.apache.http.impl.auth.NTLMScheme$State: org.apache.http.impl.auth.NTLMScheme$State CHALLENGE_RECEIVED>;

        if $r3 == $r2 goto label05;

        $r11 = r1.<org.apache.http.impl.auth.NTLMScheme: org.apache.http.impl.auth.NTLMScheme$State state>;

        $r10 = <org.apache.http.impl.auth.NTLMScheme$State: org.apache.http.impl.auth.NTLMScheme$State FAILED>;

        if $r11 != $r10 goto label06;

     label05:
        $r4 = r1.<org.apache.http.impl.auth.NTLMScheme: org.apache.http.impl.auth.NTLMEngine engine>;

        $r5 = virtualinvoke r36.<org.apache.http.auth.NTCredentials: java.lang.String getDomain()>();

        $r6 = virtualinvoke r36.<org.apache.http.auth.NTCredentials: java.lang.String getWorkstation()>();

        r37 = interfaceinvoke $r4.<org.apache.http.impl.auth.NTLMEngine: java.lang.String generateType1Msg(java.lang.String,java.lang.String)>($r5, $r6);

        $r7 = <org.apache.http.impl.auth.NTLMScheme$State: org.apache.http.impl.auth.NTLMScheme$State MSG_TYPE1_GENERATED>;

        r1.<org.apache.http.impl.auth.NTLMScheme: org.apache.http.impl.auth.NTLMScheme$State state> = $r7;

        goto label08;

     label06:
        $r13 = r1.<org.apache.http.impl.auth.NTLMScheme: org.apache.http.impl.auth.NTLMScheme$State state>;

        $r12 = <org.apache.http.impl.auth.NTLMScheme$State: org.apache.http.impl.auth.NTLMScheme$State MSG_TYPE2_RECEVIED>;

        if $r13 != $r12 goto label07;

        $r20 = r1.<org.apache.http.impl.auth.NTLMScheme: org.apache.http.impl.auth.NTLMEngine engine>;

        $r21 = virtualinvoke r36.<org.apache.http.auth.NTCredentials: java.lang.String getUserName()>();

        $r22 = virtualinvoke r36.<org.apache.http.auth.NTCredentials: java.lang.String getPassword()>();

        $r23 = virtualinvoke r36.<org.apache.http.auth.NTCredentials: java.lang.String getDomain()>();

        $r24 = virtualinvoke r36.<org.apache.http.auth.NTCredentials: java.lang.String getWorkstation()>();

        $r25 = r1.<org.apache.http.impl.auth.NTLMScheme: java.lang.String challenge>;

        r37 = interfaceinvoke $r20.<org.apache.http.impl.auth.NTLMEngine: java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r21, $r22, $r23, $r24, $r25);

        $r26 = <org.apache.http.impl.auth.NTLMScheme$State: org.apache.http.impl.auth.NTLMScheme$State MSG_TYPE3_GENERATED>;

        r1.<org.apache.http.impl.auth.NTLMScheme: org.apache.http.impl.auth.NTLMScheme$State state> = $r26;

        goto label08;

     label07:
        $r14 = new org.apache.http.auth.AuthenticationException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected state: ");

        $r17 = r1.<org.apache.http.impl.auth.NTLMScheme: org.apache.http.impl.auth.NTLMScheme$State state>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.apache.http.auth.AuthenticationException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label08:
        $r8 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r8.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(32);

        $z0 = virtualinvoke r1.<org.apache.http.impl.auth.NTLMScheme: boolean isProxy()>();

        if $z0 == 0 goto label09;

        virtualinvoke $r8.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>("Proxy-Authorization");

        goto label10;

     label09:
        virtualinvoke $r8.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>("Authorization");

     label10:
        virtualinvoke $r8.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(": NTLM ");

        virtualinvoke $r8.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r37);

        $r9 = new org.apache.http.message.BufferedHeader;

        specialinvoke $r9.<org.apache.http.message.BufferedHeader: void <init>(org.apache.http.util.CharArrayBuffer)>($r8);

        return $r9;

        catch java.lang.ClassCastException from label01 to label02 with label03;
    }

    public boolean isComplete()
    {
        org.apache.http.impl.auth.NTLMScheme$State $r1, $r2, $r3, $r4;
        org.apache.http.impl.auth.NTLMScheme r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.auth.NTLMScheme;

        $r2 = r0.<org.apache.http.impl.auth.NTLMScheme: org.apache.http.impl.auth.NTLMScheme$State state>;

        $r1 = <org.apache.http.impl.auth.NTLMScheme$State: org.apache.http.impl.auth.NTLMScheme$State MSG_TYPE3_GENERATED>;

        if $r2 == $r1 goto label1;

        $r4 = r0.<org.apache.http.impl.auth.NTLMScheme: org.apache.http.impl.auth.NTLMScheme$State state>;

        $r3 = <org.apache.http.impl.auth.NTLMScheme$State: org.apache.http.impl.auth.NTLMScheme$State FAILED>;

        if $r4 != $r3 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }
}
