public class org.waveprotocol.wave.model.testing.DeltaTestUtil extends java.lang.Object
{
    private static final org.waveprotocol.wave.model.operation.wave.WaveletOperationContext DUMMY;
    private final org.waveprotocol.wave.model.wave.ParticipantId author;
    private final java.util.Random random;

    public void <init>(java.lang.String)
    {
        org.waveprotocol.wave.model.testing.DeltaTestUtil r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r1;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.model.testing.DeltaTestUtil;

        r2 := @parameter0: java.lang.String;

        $r1 = new org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke $r1.<org.waveprotocol.wave.model.wave.ParticipantId: void <init>(java.lang.String)>(r2);

        specialinvoke r0.<org.waveprotocol.wave.model.testing.DeltaTestUtil: void <init>(org.waveprotocol.wave.model.wave.ParticipantId)>($r1);

        return;
    }

    public void <init>(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.testing.DeltaTestUtil r0;
        java.util.Random $r1;
        org.waveprotocol.wave.model.wave.ParticipantId r2;

        r0 := @this: org.waveprotocol.wave.model.testing.DeltaTestUtil;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>(long)>(42L);

        r0.<org.waveprotocol.wave.model.testing.DeltaTestUtil: java.util.Random random> = $r1;

        r0.<org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.wave.ParticipantId author> = r2;

        return;
    }

    public org.waveprotocol.wave.model.wave.ParticipantId getAuthor()
    {
        org.waveprotocol.wave.model.testing.DeltaTestUtil r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.DeltaTestUtil;

        $r1 = r0.<org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.wave.ParticipantId author>;

        return $r1;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletOperation delete(int, java.lang.String, int)
    {
        org.waveprotocol.wave.model.testing.DeltaTestUtil r8;
        org.waveprotocol.wave.model.document.operation.DocOp $r5;
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder $r0, $r1, $r3, $r4;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r7;
        org.waveprotocol.wave.model.wave.ParticipantId $r9;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation $r10;
        int i0, i1;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation $r6;
        java.lang.String r2;

        r8 := @this: org.waveprotocol.wave.model.testing.DeltaTestUtil;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r0 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder retain(int)>(i0);

        $r3 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder deleteCharacters(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder retain(int)>(i1);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.DocOp build()>();

        $r6 = new org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        $r7 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $r9 = r8.<org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.wave.ParticipantId author>;

        specialinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long)>($r9, 0L, 1L);

        specialinvoke $r6.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.document.operation.DocOp)>($r7, $r5);

        $r10 = new org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        specialinvoke $r10.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.wave.BlipOperation)>("blip id", $r6);

        return $r10;
    }

    public org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta delta(long, org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r4;
        org.waveprotocol.wave.model.testing.DeltaTestUtil r0;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r6;
        long l0, $l1;
        org.waveprotocol.wave.model.wave.ParticipantId $r1;
        java.util.List $r5;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation[] $r3;
        org.waveprotocol.wave.model.version.HashedVersion $r2;

        r0 := @this: org.waveprotocol.wave.model.testing.DeltaTestUtil;

        l0 := @parameter0: long;

        r4 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $r1 = r0.<org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.wave.ParticipantId author>;

        $l1 = l0 + 1L;

        $r2 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: org.waveprotocol.wave.model.version.HashedVersion unsigned(long)>($l1);

        $r3 = newarray (org.waveprotocol.wave.model.operation.wave.WaveletOperation)[1];

        $r3[0] = r4;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $r6 = staticinvoke <org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta cloneOperations(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,long,java.util.List)>($r1, $r2, 0L, $r5);

        return $r6;
    }

    public org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta noOpDelta(long)
    {
        org.waveprotocol.wave.model.testing.DeltaTestUtil r0;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r2;
        org.waveprotocol.wave.model.version.HashedVersion $r1;
        long l0, $l1;

        r0 := @this: org.waveprotocol.wave.model.testing.DeltaTestUtil;

        l0 := @parameter0: long;

        $l1 = l0 + 1L;

        $r1 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: org.waveprotocol.wave.model.version.HashedVersion unsigned(long)>($l1);

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta makeTransformedDelta(long,org.waveprotocol.wave.model.version.HashedVersion,int)>(0L, $r1, 1);

        return $r2;
    }

    public org.waveprotocol.wave.model.operation.wave.NoOp noOp()
    {
        org.waveprotocol.wave.model.testing.DeltaTestUtil r2;
        org.waveprotocol.wave.model.operation.wave.NoOp $r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r3;

        r2 := @this: org.waveprotocol.wave.model.testing.DeltaTestUtil;

        $r0 = new org.waveprotocol.wave.model.operation.wave.NoOp;

        $r1 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $r3 = r2.<org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.wave.ParticipantId author>;

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long)>($r3, 0L, 1L);

        specialinvoke $r0.<org.waveprotocol.wave.model.operation.wave.NoOp: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r1);

        return $r0;
    }

    public org.waveprotocol.wave.model.operation.wave.AddParticipant addParticipant(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.testing.DeltaTestUtil r2;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r3, r4;
        org.waveprotocol.wave.model.operation.wave.AddParticipant $r0;

        r2 := @this: org.waveprotocol.wave.model.testing.DeltaTestUtil;

        r4 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r0 = new org.waveprotocol.wave.model.operation.wave.AddParticipant;

        $r1 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $r3 = r2.<org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.wave.ParticipantId author>;

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long)>($r3, 0L, 1L);

        specialinvoke $r0.<org.waveprotocol.wave.model.operation.wave.AddParticipant: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.wave.ParticipantId)>($r1, r4);

        return $r0;
    }

    public org.waveprotocol.wave.model.operation.wave.RemoveParticipant removeParticipant(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.operation.wave.RemoveParticipant $r0;
        org.waveprotocol.wave.model.testing.DeltaTestUtil r2;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r3, r4;

        r2 := @this: org.waveprotocol.wave.model.testing.DeltaTestUtil;

        r4 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r0 = new org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        $r1 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $r3 = r2.<org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.wave.ParticipantId author>;

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long)>($r3, 0L, 1L);

        specialinvoke $r0.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.wave.ParticipantId)>($r1, r4);

        return $r0;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletOperation noOpDocOp(java.lang.String)
    {
        org.waveprotocol.wave.model.testing.DeltaTestUtil r1;
        org.waveprotocol.wave.model.document.operation.DocOp $r5;
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder $r4;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r2;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation $r6;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation $r3;
        java.lang.String r7;

        r1 := @this: org.waveprotocol.wave.model.testing.DeltaTestUtil;

        r7 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $r2 = r1.<org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.wave.ParticipantId author>;

        specialinvoke $r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long)>($r2, 0L, 1L);

        $r3 = new org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        $r4 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.DocOp build()>();

        specialinvoke $r3.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.document.operation.DocOp)>($r0, $r5);

        $r6 = new org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        specialinvoke $r6.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.wave.BlipOperation)>(r7, $r3);

        return $r6;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletOperation insert(int, java.lang.String, int, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.testing.DeltaTestUtil r5;
        org.waveprotocol.wave.model.document.operation.DocOp $r8;
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder $r0, $r1;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r4;
        org.waveprotocol.wave.model.wave.ParticipantId $r7;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation $r9;
        int i0, i1;
        org.waveprotocol.wave.model.version.HashedVersion r6;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation $r3;
        java.lang.String r2;

        r5 := @this: org.waveprotocol.wave.model.testing.DeltaTestUtil;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r6 := @parameter3: org.waveprotocol.wave.model.version.HashedVersion;

        $r0 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder retain(int)>(i0);

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder characters(java.lang.String)>(r2);

        if i1 <= 0 goto label1;

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder retain(int)>(i1);

     label1:
        $r3 = new org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        $r4 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $r7 = r5.<org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.wave.ParticipantId author>;

        specialinvoke $r4.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long,org.waveprotocol.wave.model.version.HashedVersion)>($r7, 0L, 1L, r6);

        $r8 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.DocOp build()>();

        specialinvoke $r3.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.document.operation.DocOp)>($r4, $r8);

        $r9 = new org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        specialinvoke $r9.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.wave.BlipOperation)>("blip id", $r3);

        return $r9;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletDelta makeDelta(org.waveprotocol.wave.model.version.HashedVersion, long, int)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r7;
        org.waveprotocol.wave.model.testing.DeltaTestUtil r2;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta $r4;
        long l1;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r3, $r6;
        java.util.ArrayList $r0;
        int i0, i2;
        org.waveprotocol.wave.model.version.HashedVersion r5;

        r2 := @this: org.waveprotocol.wave.model.testing.DeltaTestUtil;

        r5 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        l1 := @parameter1: long;

        i0 := @parameter2: int;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        $r1 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $r3 = r2.<org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.wave.ParticipantId author>;

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long)>($r3, -1L, 1L);

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r7 = specialinvoke r2.<org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.operation.wave.WaveletOperation randomOp(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = new org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        $r6 = r2.<org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.wave.ParticipantId author>;

        specialinvoke $r4.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,java.lang.Iterable)>($r6, r5, $r0);

        return $r4;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletDelta makeNoOpDelta(org.waveprotocol.wave.model.version.HashedVersion, long, int)
    {
        org.waveprotocol.wave.model.testing.DeltaTestUtil r2;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta $r4;
        long l1;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r3, $r6;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.operation.wave.NoOp $r7;
        int i0, i2;
        org.waveprotocol.wave.model.version.HashedVersion r5;

        r2 := @this: org.waveprotocol.wave.model.testing.DeltaTestUtil;

        r5 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        l1 := @parameter1: long;

        i0 := @parameter2: int;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        $r1 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $r3 = r2.<org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.wave.ParticipantId author>;

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long)>($r3, -1L, 1L);

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r7 = new org.waveprotocol.wave.model.operation.wave.NoOp;

        specialinvoke $r7.<org.waveprotocol.wave.model.operation.wave.NoOp: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = new org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        $r6 = r2.<org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.wave.ParticipantId author>;

        specialinvoke $r4.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,java.lang.Iterable)>($r6, r5, $r0);

        return $r4;
    }

    public org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta makeTransformedDelta(long, org.waveprotocol.wave.model.version.HashedVersion, int)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r6;
        org.waveprotocol.wave.model.testing.DeltaTestUtil r1;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r4;
        long l1;
        org.waveprotocol.wave.model.wave.ParticipantId $r3;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r5;
        java.util.ArrayList $r0;
        int i0, i2;
        org.waveprotocol.wave.model.version.HashedVersion r2;

        r1 := @this: org.waveprotocol.wave.model.testing.DeltaTestUtil;

        l1 := @parameter0: long;

        r2 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        i0 := @parameter2: int;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r5 = <org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext DUMMY>;

        $r6 = specialinvoke r1.<org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.operation.wave.WaveletOperation randomOp(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r5);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = r1.<org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.wave.ParticipantId author>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta cloneOperations(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,long,java.util.List)>($r3, r2, l1, $r0);

        return $r4;
    }

    private org.waveprotocol.wave.model.operation.wave.WaveletOperation randomOp(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r10;
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder $r0, $r3, $r9;
        java.util.Random $r2, $r6, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r8, $r16;
        org.waveprotocol.wave.model.testing.DeltaTestUtil r1;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation $r11;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext r18;
        java.lang.StringBuilder $r4, $r5, $r7, $r12, $r13, $r15;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation $r17;

        r1 := @this: org.waveprotocol.wave.model.testing.DeltaTestUtil;

        r18 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $r0 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.model.testing.DeltaTestUtil: java.util.Random random>;

        $i0 = virtualinvoke $r2.<java.util.Random: int nextInt()>();

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        $i2 = $i1 / 2;

        $i3 = $i2 + 1;

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder retain(int)>($i3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createRndOp#");

        $r6 = r1.<org.waveprotocol.wave.model.testing.DeltaTestUtil: java.util.Random random>;

        $i4 = virtualinvoke $r6.<java.util.Random: int nextInt()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder characters(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.DocOp build()>();

        $r11 = new org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createRndId#");

        $r14 = r1.<org.waveprotocol.wave.model.testing.DeltaTestUtil: java.util.Random random>;

        $i5 = virtualinvoke $r14.<java.util.Random: int nextInt()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = new org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        specialinvoke $r17.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.document.operation.DocOp)>(r18, $r10);

        specialinvoke $r11.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.wave.BlipOperation)>($r16, $r17);

        return $r11;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r0;

        $r0 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        specialinvoke $r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long)>(null, 0L, 0L);

        <org.waveprotocol.wave.model.testing.DeltaTestUtil: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext DUMMY> = $r0;

        return;
    }
}
