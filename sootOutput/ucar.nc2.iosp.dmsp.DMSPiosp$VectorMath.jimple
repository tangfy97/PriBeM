class ucar.nc2.iosp.dmsp.DMSPiosp$VectorMath extends java.lang.Object
{

    void <init>()
    {
        ucar.nc2.iosp.dmsp.DMSPiosp$VectorMath r0;

        r0 := @this: ucar.nc2.iosp.dmsp.DMSPiosp$VectorMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static double vectorMagnitude(double[])
    {
        double[] r0;
        int $i0, $i1;
        java.lang.String $r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;

        r0 := @parameter0: double[];

        $i0 = lengthof r0;

        if $i0 == 3 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Argument not a 3-D vector <dim=");

        $i1 = lengthof r0;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        $d0 = r0[0];

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, 2.0);

        $d2 = r0[1];

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>($d2, 2.0);

        $d5 = $d1 + $d3;

        $d4 = r0[2];

        $d6 = staticinvoke <java.lang.Math: double pow(double,double)>($d4, 2.0);

        $d7 = $d5 + $d6;

        $d8 = staticinvoke <java.lang.Math: double sqrt(double)>($d7);

        return $d8;
    }

    static double[] unitVector(double[])
    {
        double[] r0, $r1;
        int $i0, $i1;
        java.lang.String $r7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;

        r0 := @parameter0: double[];

        $i0 = lengthof r0;

        if $i0 == 3 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Argument not a 3-D vector <dim=");

        $i1 = lengthof r0;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        $d0 = staticinvoke <ucar.nc2.iosp.dmsp.DMSPiosp$VectorMath: double vectorMagnitude(double[])>(r0);

        $r1 = newarray (double)[3];

        $d1 = r0[0];

        $d2 = $d1 / $d0;

        $r1[0] = $d2;

        $d3 = r0[1];

        $d4 = $d3 / $d0;

        $r1[1] = $d4;

        $d5 = r0[2];

        $d6 = $d5 / $d0;

        $r1[2] = $d6;

        return $r1;
    }

    static double[] vectorScalarMultiplication(double[], double)
    {
        double[] r0, $r1;
        int $i0, $i1;
        java.lang.String $r7;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        $i0 = lengthof r0;

        if $i0 == 3 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Argument not a 3-D vector <dim=");

        $i1 = lengthof r0;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        $r1 = newarray (double)[3];

        $d1 = r0[0];

        $d2 = d0 * $d1;

        $r1[0] = $d2;

        $d3 = r0[1];

        $d4 = d0 * $d3;

        $r1[1] = $d4;

        $d5 = r0[2];

        $d6 = d0 * $d5;

        $r1[2] = $d6;

        return $r1;
    }

    static double vectorDotProduct(double[], double[])
    {
        double[] r0, r1;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r7, $r13;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        java.lang.IllegalArgumentException $r2, $r8;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $i0 = lengthof r0;

        if $i0 == 3 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("First argument not a 3-D vector <dim=");

        $i3 = lengthof r0;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label1:
        $i1 = lengthof r1;

        if $i1 == 3 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Second argument not a 3-D vector <dim=");

        $i2 = lengthof r1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label2:
        $d1 = r0[0];

        $d0 = r1[0];

        $d5 = $d1 * $d0;

        $d3 = r0[1];

        $d2 = r1[1];

        $d4 = $d3 * $d2;

        $d9 = $d5 + $d4;

        $d7 = r0[2];

        $d6 = r1[2];

        $d8 = $d7 * $d6;

        $d10 = $d9 + $d8;

        return $d10;
    }

    static double[] vectorCrossProduct(double[], double[])
    {
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r13;
        double[] r0, r1, $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r8, $r14;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20;
        java.lang.IllegalArgumentException $r3, $r9;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $i0 = lengthof r0;

        if $i0 == 3 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("First argument not a 3-D vector <dim=");

        $i3 = lengthof r0;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label1:
        $i1 = lengthof r1;

        if $i1 == 3 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Second argument not a 3-D vector <dim=");

        $i2 = lengthof r1;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        $r2 = newarray (double)[3];

        $d1 = r0[1];

        $d0 = r1[2];

        $d5 = $d1 * $d0;

        $d3 = r0[2];

        $d2 = r1[1];

        $d4 = $d3 * $d2;

        $d6 = $d5 - $d4;

        $r2[0] = $d6;

        $d8 = r0[2];

        $d7 = r1[0];

        $d12 = $d8 * $d7;

        $d10 = r0[0];

        $d9 = r1[2];

        $d11 = $d10 * $d9;

        $d13 = $d12 - $d11;

        $r2[1] = $d13;

        $d15 = r0[0];

        $d14 = r1[1];

        $d19 = $d15 * $d14;

        $d17 = r0[1];

        $d16 = r1[0];

        $d18 = $d17 * $d16;

        $d20 = $d19 - $d18;

        $r2[2] = $d20;

        return $r2;
    }
}
