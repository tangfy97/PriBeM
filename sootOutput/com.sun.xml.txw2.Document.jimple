public final class com.sun.xml.txw2.Document extends java.lang.Object
{
    private final com.sun.xml.txw2.output.XmlSerializer out;
    private boolean started;
    private com.sun.xml.txw2.Content current;
    private final java.util.Map datatypeWriters;
    private int iota;
    private final com.sun.xml.txw2.NamespaceSupport inscopeNamespace;
    private com.sun.xml.txw2.NamespaceDecl activeNamespaces;
    private final com.sun.xml.txw2.ContentVisitor visitor;
    private final java.lang.StringBuilder prefixSeed;
    private int prefixIota;
    static final char MAGIC;
    static final boolean $assertionsDisabled;

    void <init>(com.sun.xml.txw2.output.XmlSerializer)
    {
        java.util.Iterator $r7;
        java.util.HashMap $r1;
        com.sun.xml.txw2.Document r0;
        com.sun.xml.txw2.output.XmlSerializer r5;
        java.util.List $r6;
        com.sun.xml.txw2.NamespaceSupport $r2;
        java.util.Map $r10;
        java.lang.StringBuilder $r4;
        java.lang.Object $r8;
        java.lang.Class $r11;
        com.sun.xml.txw2.DatatypeWriter r9;
        com.sun.xml.txw2.Document$1 $r3;
        boolean $z0;

        r0 := @this: com.sun.xml.txw2.Document;

        r5 := @parameter0: com.sun.xml.txw2.output.XmlSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.sun.xml.txw2.Document: boolean started> = 0;

        r0.<com.sun.xml.txw2.Document: com.sun.xml.txw2.Content current> = null;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.sun.xml.txw2.Document: java.util.Map datatypeWriters> = $r1;

        r0.<com.sun.xml.txw2.Document: int iota> = 1;

        $r2 = new com.sun.xml.txw2.NamespaceSupport;

        specialinvoke $r2.<com.sun.xml.txw2.NamespaceSupport: void <init>()>();

        r0.<com.sun.xml.txw2.Document: com.sun.xml.txw2.NamespaceSupport inscopeNamespace> = $r2;

        $r3 = new com.sun.xml.txw2.Document$1;

        specialinvoke $r3.<com.sun.xml.txw2.Document$1: void <init>(com.sun.xml.txw2.Document)>(r0);

        r0.<com.sun.xml.txw2.Document: com.sun.xml.txw2.ContentVisitor visitor> = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("ns");

        r0.<com.sun.xml.txw2.Document: java.lang.StringBuilder prefixSeed> = $r4;

        r0.<com.sun.xml.txw2.Document: int prefixIota> = 0;

        r0.<com.sun.xml.txw2.Document: com.sun.xml.txw2.output.XmlSerializer out> = r5;

        $r6 = <com.sun.xml.txw2.DatatypeWriter: java.util.List BUILTIN>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.sun.xml.txw2.DatatypeWriter) $r8;

        $r10 = r0.<com.sun.xml.txw2.Document: java.util.Map datatypeWriters>;

        $r11 = interfaceinvoke r9.<com.sun.xml.txw2.DatatypeWriter: java.lang.Class getType()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r9);

        goto label1;

     label2:
        return;
    }

    void flush()
    {
        com.sun.xml.txw2.Document r0;
        com.sun.xml.txw2.output.XmlSerializer $r1;

        r0 := @this: com.sun.xml.txw2.Document;

        $r1 = r0.<com.sun.xml.txw2.Document: com.sun.xml.txw2.output.XmlSerializer out>;

        interfaceinvoke $r1.<com.sun.xml.txw2.output.XmlSerializer: void flush()>();

        return;
    }

    void setFirstContent(com.sun.xml.txw2.Content)
    {
        com.sun.xml.txw2.StartDocument $r1;
        com.sun.xml.txw2.Content r2, $r3, $r4;
        com.sun.xml.txw2.Document r0;
        java.lang.AssertionError $r5;
        boolean $z0;

        r0 := @this: com.sun.xml.txw2.Document;

        r2 := @parameter0: com.sun.xml.txw2.Content;

        $z0 = <com.sun.xml.txw2.Document: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = r0.<com.sun.xml.txw2.Document: com.sun.xml.txw2.Content current>;

        if $r4 == null goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r1 = new com.sun.xml.txw2.StartDocument;

        specialinvoke $r1.<com.sun.xml.txw2.StartDocument: void <init>()>();

        r0.<com.sun.xml.txw2.Document: com.sun.xml.txw2.Content current> = $r1;

        $r3 = r0.<com.sun.xml.txw2.Document: com.sun.xml.txw2.Content current>;

        virtualinvoke $r3.<com.sun.xml.txw2.Content: void setNext(com.sun.xml.txw2.Document,com.sun.xml.txw2.Content)>(r0, r2);

        return;
    }

    public void addDatatypeWriter(com.sun.xml.txw2.DatatypeWriter)
    {
        java.util.Map $r2;
        java.lang.Class $r3;
        com.sun.xml.txw2.Document r0;
        com.sun.xml.txw2.DatatypeWriter r1;

        r0 := @this: com.sun.xml.txw2.Document;

        r1 := @parameter0: com.sun.xml.txw2.DatatypeWriter;

        $r2 = r0.<com.sun.xml.txw2.Document: java.util.Map datatypeWriters>;

        $r3 = interfaceinvoke r1.<com.sun.xml.txw2.DatatypeWriter: java.lang.Class getType()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    void run()
    {
        com.sun.xml.txw2.Content $r1, $r2;
        com.sun.xml.txw2.ContentVisitor $r3;
        com.sun.xml.txw2.Document r0;
        boolean $z0;

        r0 := @this: com.sun.xml.txw2.Document;

     label1:
        $r1 = r0.<com.sun.xml.txw2.Document: com.sun.xml.txw2.Content current>;

        $r2 = virtualinvoke $r1.<com.sun.xml.txw2.Content: com.sun.xml.txw2.Content getNext()>();

        if $r2 == null goto label2;

        $z0 = virtualinvoke $r2.<com.sun.xml.txw2.Content: boolean isReadyToCommit()>();

        if $z0 != 0 goto label3;

     label2:
        return;

     label3:
        $r3 = r0.<com.sun.xml.txw2.Document: com.sun.xml.txw2.ContentVisitor visitor>;

        virtualinvoke $r2.<com.sun.xml.txw2.Content: void accept(com.sun.xml.txw2.ContentVisitor)>($r3);

        virtualinvoke $r2.<com.sun.xml.txw2.Content: void written()>();

        r0.<com.sun.xml.txw2.Document: com.sun.xml.txw2.Content current> = $r2;

        goto label1;
    }

    void writeValue(java.lang.Object, com.sun.xml.txw2.NamespaceResolver, java.lang.StringBuilder)
    {
        java.lang.Object[] $r9, r12;
        com.sun.xml.txw2.Document r2;
        java.lang.Iterable $r6;
        java.util.Map $r3;
        int $i0, i1, i2;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r7;
        java.lang.IllegalArgumentException $r11;
        java.lang.Object r0, $r4, $r8, r10;
        java.lang.StringBuilder r1;
        java.lang.Class r13;
        com.sun.xml.txw2.DatatypeWriter r14;
        com.sun.xml.txw2.NamespaceResolver r5;

        r2 := @this: com.sun.xml.txw2.Document;

        r0 := @parameter0: java.lang.Object;

        r5 := @parameter1: com.sun.xml.txw2.NamespaceResolver;

        r1 := @parameter2: java.lang.StringBuilder;

        if r0 != null goto label01;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("argument contains null");

        throw $r11;

     label01:
        $z0 = r0 instanceof java.lang.Object[];

        if $z0 == 0 goto label04;

        $r9 = (java.lang.Object[]) r0;

        r12 = (java.lang.Object[]) $r9;

        i1 = lengthof r12;

        i2 = 0;

     label02:
        if i2 >= i1 goto label03;

        r10 = r12[i2];

        virtualinvoke r2.<com.sun.xml.txw2.Document: void writeValue(java.lang.Object,com.sun.xml.txw2.NamespaceResolver,java.lang.StringBuilder)>(r10, r5, r1);

        i2 = i2 + 1;

        goto label02;

     label03:
        return;

     label04:
        $z1 = r0 instanceof java.lang.Iterable;

        if $z1 == 0 goto label07;

        $r6 = (java.lang.Iterable) r0;

        $r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r2.<com.sun.xml.txw2.Document: void writeValue(java.lang.Object,com.sun.xml.txw2.NamespaceResolver,java.lang.StringBuilder)>($r8, r5, r1);

        goto label05;

     label06:
        return;

     label07:
        $i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label08;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label08:
        r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label09:
        if r13 == null goto label11;

        $r3 = r2.<com.sun.xml.txw2.Document: java.util.Map datatypeWriters>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13);

        r14 = (com.sun.xml.txw2.DatatypeWriter) $r4;

        if r14 == null goto label10;

        interfaceinvoke r14.<com.sun.xml.txw2.DatatypeWriter: void print(java.lang.Object,com.sun.xml.txw2.NamespaceResolver,java.lang.StringBuilder)>(r0, r5, r1);

        return;

     label10:
        r13 = virtualinvoke r13.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label09;

     label11:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        return;
    }

    private java.lang.String newPrefix()
    {
        int $i0, $i1;
        java.lang.StringBuilder $r1, $r2, $r3;
        com.sun.xml.txw2.Document r0;
        java.lang.String $r4;

        r0 := @this: com.sun.xml.txw2.Document;

        $r1 = r0.<com.sun.xml.txw2.Document: java.lang.StringBuilder prefixSeed>;

        virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(2);

        $r2 = r0.<com.sun.xml.txw2.Document: java.lang.StringBuilder prefixSeed>;

        $i0 = r0.<com.sun.xml.txw2.Document: int prefixIota>;

        $i1 = $i0 + 1;

        r0.<com.sun.xml.txw2.Document: int prefixIota> = $i1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = r0.<com.sun.xml.txw2.Document: java.lang.StringBuilder prefixSeed>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private java.lang.StringBuilder fixPrefix(java.lang.StringBuilder)
    {
        java.lang.IllegalStateException $r18, $r20;
        byte b17, b18, b19;
        boolean $z0;
        java.lang.StringBuilder r0, $r5, $r6, $r10, $r11, $r17, $r19;
        com.sun.xml.txw2.Document r1;
        java.lang.AssertionError $r16;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i12, i15, i16, $i20, $i21, $i22;
        java.lang.String r2, $r7, $r12;
        char $c2, $c7, $c11, $c13, $c14;
        com.sun.xml.txw2.NamespaceDecl $r13, r15;

        r1 := @this: com.sun.xml.txw2.Document;

        r0 := @parameter0: java.lang.StringBuilder;

        $z0 = <com.sun.xml.txw2.Document: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r13 = r1.<com.sun.xml.txw2.Document: com.sun.xml.txw2.NamespaceDecl activeNamespaces>;

        if $r13 != null goto label01;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label01:
        $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        i15 = $i0;

        i16 = 0;

     label02:
        if i16 >= $i0 goto label04;

        $c14 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>(i16);

        if $c14 != 0 goto label03;

        goto label04;

     label03:
        i16 = i16 + 1;

        goto label02;

     label04:
        if i16 != $i0 goto label05;

        return r0;

     label05:
        if i16 >= i15 goto label14;

        $i1 = i16 + 1;

        $c2 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>($i1);

        r15 = r1.<com.sun.xml.txw2.Document: com.sun.xml.txw2.NamespaceDecl activeNamespaces>;

     label06:
        if r15 == null goto label07;

        $c13 = r15.<com.sun.xml.txw2.NamespaceDecl: char uniqueId>;

        $i20 = (int) $c13;

        $i21 = (int) $c2;

        if $i20 == $i21 goto label07;

        r15 = r15.<com.sun.xml.txw2.NamespaceDecl: com.sun.xml.txw2.NamespaceDecl next>;

        goto label06;

     label07:
        if r15 != null goto label08;

        $r18 = new java.lang.IllegalStateException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected use of prefixes ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r18;

     label08:
        b17 = 2;

        b19 = 2;

        b18 = 2;

        r2 = r15.<com.sun.xml.txw2.NamespaceDecl: java.lang.String prefix>;

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i3 != 0 goto label11;

        $i8 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        $i9 = i16 + 2;

        if $i8 <= $i9 goto label09;

        $i10 = i16 + 2;

        $c11 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>($i10);

        $i22 = (int) $c11;

        if $i22 == 58 goto label10;

     label09:
        $r20 = new java.lang.IllegalStateException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected use of prefixes ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r20;

     label10:
        b17 = 3;

        b19 = 3;

        b18 = 3;

     label11:
        $i4 = i16 + b19;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>(i16, $i4, r2);

        $i5 = virtualinvoke r2.<java.lang.String: int length()>();

        $i6 = $i5 - b18;

        $i12 = i15 + $i6;

        i15 = $i12;

     label12:
        if i16 >= $i12 goto label13;

        $c7 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>(i16);

        if $c7 == 0 goto label13;

        i16 = i16 + 1;

        goto label12;

     label13:
        goto label05;

     label14:
        return r0;
    }

    char assignNewId()
    {
        int $i0, $i1;
        char $c2;
        com.sun.xml.txw2.Document r0;

        r0 := @this: com.sun.xml.txw2.Document;

        $i0 = r0.<com.sun.xml.txw2.Document: int iota>;

        $i1 = $i0 + 1;

        r0.<com.sun.xml.txw2.Document: int iota> = $i1;

        $c2 = (char) $i0;

        return $c2;
    }

    static com.sun.xml.txw2.output.XmlSerializer access$000(com.sun.xml.txw2.Document)
    {
        com.sun.xml.txw2.Document r0;
        com.sun.xml.txw2.output.XmlSerializer $r1;

        r0 := @parameter0: com.sun.xml.txw2.Document;

        $r1 = r0.<com.sun.xml.txw2.Document: com.sun.xml.txw2.output.XmlSerializer out>;

        return $r1;
    }

    static com.sun.xml.txw2.NamespaceSupport access$100(com.sun.xml.txw2.Document)
    {
        com.sun.xml.txw2.Document r0;
        com.sun.xml.txw2.NamespaceSupport $r1;

        r0 := @parameter0: com.sun.xml.txw2.Document;

        $r1 = r0.<com.sun.xml.txw2.Document: com.sun.xml.txw2.NamespaceSupport inscopeNamespace>;

        return $r1;
    }

    static com.sun.xml.txw2.NamespaceDecl access$202(com.sun.xml.txw2.Document, com.sun.xml.txw2.NamespaceDecl)
    {
        com.sun.xml.txw2.Document r0;
        com.sun.xml.txw2.NamespaceDecl r1;

        r0 := @parameter0: com.sun.xml.txw2.Document;

        r1 := @parameter1: com.sun.xml.txw2.NamespaceDecl;

        r0.<com.sun.xml.txw2.Document: com.sun.xml.txw2.NamespaceDecl activeNamespaces> = r1;

        return r1;
    }

    static com.sun.xml.txw2.NamespaceDecl access$200(com.sun.xml.txw2.Document)
    {
        com.sun.xml.txw2.Document r0;
        com.sun.xml.txw2.NamespaceDecl $r1;

        r0 := @parameter0: com.sun.xml.txw2.Document;

        $r1 = r0.<com.sun.xml.txw2.Document: com.sun.xml.txw2.NamespaceDecl activeNamespaces>;

        return $r1;
    }

    static java.lang.StringBuilder access$300(com.sun.xml.txw2.Document, java.lang.StringBuilder)
    {
        java.lang.StringBuilder r1, $r2;
        com.sun.xml.txw2.Document r0;

        r0 := @parameter0: com.sun.xml.txw2.Document;

        r1 := @parameter1: java.lang.StringBuilder;

        $r2 = specialinvoke r0.<com.sun.xml.txw2.Document: java.lang.StringBuilder fixPrefix(java.lang.StringBuilder)>(r1);

        return $r2;
    }

    static boolean access$400(com.sun.xml.txw2.Document)
    {
        com.sun.xml.txw2.Document r0;
        boolean $z0;

        r0 := @parameter0: com.sun.xml.txw2.Document;

        $z0 = r0.<com.sun.xml.txw2.Document: boolean started>;

        return $z0;
    }

    static boolean access$402(com.sun.xml.txw2.Document, boolean)
    {
        com.sun.xml.txw2.Document r0;
        boolean z0;

        r0 := @parameter0: com.sun.xml.txw2.Document;

        z0 := @parameter1: boolean;

        r0.<com.sun.xml.txw2.Document: boolean started> = z0;

        return z0;
    }

    static java.lang.String access$500(com.sun.xml.txw2.Document)
    {
        com.sun.xml.txw2.Document r0;
        java.lang.String $r1;

        r0 := @parameter0: com.sun.xml.txw2.Document;

        $r1 = specialinvoke r0.<com.sun.xml.txw2.Document: java.lang.String newPrefix()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <com.sun.xml.txw2.Document: char MAGIC> = 0;

        $r0 = class "Lcom/sun/xml/txw2/Document;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.txw2.Document: boolean $assertionsDisabled> = $z1;

        return;
    }
}
