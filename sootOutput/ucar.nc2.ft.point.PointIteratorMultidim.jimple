public abstract class ucar.nc2.ft.point.PointIteratorMultidim extends java.lang.Object implements ucar.nc2.ft.PointFeatureIterator
{
    private static org.slf4j.Logger log;
    private java.util.List vars;
    private ucar.ma2.StructureMembers members;
    private int outerIndex;
    private ucar.nc2.ft.PointFeatureIterator$Filter filter;
    private int count;
    private int npts;
    private ucar.nc2.ft.PointFeature feature;

    protected abstract ucar.nc2.ft.PointFeature makeFeature(int, ucar.ma2.StructureData) throws java.io.IOException;

    public void <init>(java.lang.String, java.util.List, int, ucar.nc2.ft.PointFeatureIterator$Filter)
    {
        ucar.nc2.ft.point.PointIteratorMultidim r0;
        int[] $r11, r12;
        int i0, $i1, $i2, $i3, $i4, $i5;
        ucar.nc2.Variable r4, r10;
        java.lang.String r7, $r14, $r15, $r16;
        boolean $z0;
        java.util.Iterator $r8;
        ucar.ma2.DataType $r17;
        java.util.List r1;
        ucar.ma2.StructureMembers $r6, $r13;
        java.lang.Object $r3, $r9;
        ucar.nc2.Dimension $r5;
        ucar.nc2.ft.PointFeatureIterator$Filter r2;

        r0 := @this: ucar.nc2.ft.point.PointIteratorMultidim;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        r2 := @parameter3: ucar.nc2.ft.PointFeatureIterator$Filter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.ft.point.PointIteratorMultidim: java.util.List vars> = r1;

        r0.<ucar.nc2.ft.point.PointIteratorMultidim: int outerIndex> = i0;

        r0.<ucar.nc2.ft.point.PointIteratorMultidim: ucar.nc2.ft.PointFeatureIterator$Filter filter> = r2;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        r4 = (ucar.nc2.Variable) $r3;

        $r5 = virtualinvoke r4.<ucar.nc2.Variable: ucar.nc2.Dimension getDimension(int)>(1);

        $i1 = virtualinvoke $r5.<ucar.nc2.Dimension: int getLength()>();

        r0.<ucar.nc2.ft.point.PointIteratorMultidim: int npts> = $i1;

        $r6 = new ucar.ma2.StructureMembers;

        specialinvoke $r6.<ucar.ma2.StructureMembers: void <init>(java.lang.String)>(r7);

        r0.<ucar.nc2.ft.point.PointIteratorMultidim: ucar.ma2.StructureMembers members> = $r6;

        $r8 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (ucar.nc2.Variable) $r9;

        $r11 = virtualinvoke r10.<ucar.nc2.Variable: int[] getShape()>();

        $i2 = lengthof $r11;

        $i3 = $i2 - 2;

        r12 = newarray (int)[$i3];

        $i4 = lengthof $r11;

        $i5 = $i4 - 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 2, r12, 0, $i5);

        $r13 = r0.<ucar.nc2.ft.point.PointIteratorMultidim: ucar.ma2.StructureMembers members>;

        $r14 = virtualinvoke r10.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r15 = virtualinvoke r10.<ucar.nc2.Variable: java.lang.String getDescription()>();

        $r16 = virtualinvoke r10.<ucar.nc2.Variable: java.lang.String getUnitsString()>();

        $r17 = virtualinvoke r10.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        virtualinvoke $r13.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member addMember(java.lang.String,java.lang.String,java.lang.String,ucar.ma2.DataType,int[])>($r14, $r15, $r16, $r17, r12);

        goto label1;

     label2:
        return;
    }

    public boolean hasNext() throws java.io.IOException
    {
        ucar.ma2.StructureData $r1;
        ucar.nc2.ft.PointFeature $r2, $r4;
        ucar.nc2.ft.point.PointIteratorMultidim r0;
        int $i0, $i1, $i2, $i3, $i4;
        ucar.nc2.ft.PointFeatureIterator$Filter $r3, $r5;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.point.PointIteratorMultidim;

     label1:
        $i1 = r0.<ucar.nc2.ft.point.PointIteratorMultidim: int count>;

        $i0 = r0.<ucar.nc2.ft.point.PointIteratorMultidim: int npts>;

        if $i1 >= $i0 goto label3;

        $r1 = specialinvoke r0.<ucar.nc2.ft.point.PointIteratorMultidim: ucar.ma2.StructureData nextStructureData()>();

        $i2 = r0.<ucar.nc2.ft.point.PointIteratorMultidim: int count>;

        $r2 = virtualinvoke r0.<ucar.nc2.ft.point.PointIteratorMultidim: ucar.nc2.ft.PointFeature makeFeature(int,ucar.ma2.StructureData)>($i2, $r1);

        r0.<ucar.nc2.ft.point.PointIteratorMultidim: ucar.nc2.ft.PointFeature feature> = $r2;

        $i3 = r0.<ucar.nc2.ft.point.PointIteratorMultidim: int count>;

        $i4 = $i3 + 1;

        r0.<ucar.nc2.ft.point.PointIteratorMultidim: int count> = $i4;

        $r3 = r0.<ucar.nc2.ft.point.PointIteratorMultidim: ucar.nc2.ft.PointFeatureIterator$Filter filter>;

        if $r3 == null goto label2;

        $r5 = r0.<ucar.nc2.ft.point.PointIteratorMultidim: ucar.nc2.ft.PointFeatureIterator$Filter filter>;

        $r4 = r0.<ucar.nc2.ft.point.PointIteratorMultidim: ucar.nc2.ft.PointFeature feature>;

        $z0 = interfaceinvoke $r5.<ucar.nc2.ft.PointFeatureIterator$Filter: boolean filter(ucar.nc2.ft.PointFeature)>($r4);

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        return 1;

     label3:
        r0.<ucar.nc2.ft.point.PointIteratorMultidim: ucar.nc2.ft.PointFeature feature> = null;

        return 0;
    }

    public ucar.nc2.ft.PointFeature next() throws java.io.IOException
    {
        ucar.nc2.ft.PointFeature $r1;
        ucar.nc2.ft.point.PointIteratorMultidim r0;

        r0 := @this: ucar.nc2.ft.point.PointIteratorMultidim;

        $r1 = r0.<ucar.nc2.ft.point.PointIteratorMultidim: ucar.nc2.ft.PointFeature feature>;

        return $r1;
    }

    private ucar.ma2.StructureData nextStructureData() throws java.io.IOException
    {
        ucar.ma2.Section $r7;
        ucar.ma2.StructureDataW $r0;
        ucar.nc2.ft.point.PointIteratorMultidim r1;
        int $i0, $i1, $i2, $i3, $i4, i5;
        ucar.nc2.Variable r6;
        java.lang.String $r9;
        boolean $z0;
        java.util.Iterator $r4;
        ucar.ma2.Array $r8;
        java.util.List $r3;
        ucar.ma2.InvalidRangeException $r10;
        ucar.ma2.StructureMembers $r2;
        java.lang.Object $r5;

        r1 := @this: ucar.nc2.ft.point.PointIteratorMultidim;

        $r0 = new ucar.ma2.StructureDataW;

        $r2 = r1.<ucar.nc2.ft.point.PointIteratorMultidim: ucar.ma2.StructureMembers members>;

        specialinvoke $r0.<ucar.ma2.StructureDataW: void <init>(ucar.ma2.StructureMembers)>($r2);

        $r3 = r1.<ucar.nc2.ft.point.PointIteratorMultidim: java.util.List vars>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (ucar.nc2.Variable) $r5;

        $r7 = new ucar.ma2.Section;

        specialinvoke $r7.<ucar.ma2.Section: void <init>()>();

     label2:
        $i1 = r1.<ucar.nc2.ft.point.PointIteratorMultidim: int outerIndex>;

        $i0 = r1.<ucar.nc2.ft.point.PointIteratorMultidim: int outerIndex>;

        virtualinvoke $r7.<ucar.ma2.Section: ucar.ma2.Section appendRange(int,int)>($i1, $i0);

        $i3 = r1.<ucar.nc2.ft.point.PointIteratorMultidim: int count>;

        $i2 = r1.<ucar.nc2.ft.point.PointIteratorMultidim: int count>;

        virtualinvoke $r7.<ucar.ma2.Section: ucar.ma2.Section appendRange(int,int)>($i3, $i2);

        i5 = 2;

     label3:
        $i4 = virtualinvoke r6.<ucar.nc2.Variable: int getRank()>();

        if i5 >= $i4 goto label4;

        virtualinvoke $r7.<ucar.ma2.Section: ucar.ma2.Section appendRange(ucar.ma2.Range)>(null);

        i5 = i5 + 1;

        goto label3;

     label4:
        $r8 = virtualinvoke r6.<ucar.nc2.Variable: ucar.ma2.Array read(ucar.ma2.Section)>($r7);

        $r9 = virtualinvoke r6.<ucar.nc2.Variable: java.lang.String getShortName()>();

        virtualinvoke $r0.<ucar.ma2.StructureDataW: void setMemberData(java.lang.String,ucar.ma2.Array)>($r9, $r8);

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;

        virtualinvoke $r10.<ucar.ma2.InvalidRangeException: void printStackTrace()>();

     label7:
        goto label1;

     label8:
        return $r0;

        catch ucar.ma2.InvalidRangeException from label2 to label5 with label6;
    }

    public void setBufferSize(int)
    {
        int i0;
        ucar.nc2.ft.point.PointIteratorMultidim r0;

        r0 := @this: ucar.nc2.ft.point.PointIteratorMultidim;

        i0 := @parameter0: int;

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/ft/point/PointIteratorMultidim;");

        <ucar.nc2.ft.point.PointIteratorMultidim: org.slf4j.Logger log> = $r0;

        return;
    }
}
