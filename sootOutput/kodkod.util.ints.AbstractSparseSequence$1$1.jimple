final class kodkod.util.ints.AbstractSparseSequence$1$1 extends java.lang.Object implements kodkod.util.ints.IntIterator
{
    java.util.Iterator iter;
    final kodkod.util.ints.AbstractSparseSequence$1 this$1;

    void <init>(kodkod.util.ints.AbstractSparseSequence$1, int, int)
    {
        kodkod.util.ints.AbstractSparseSequence$1$1 r0;
        kodkod.util.ints.AbstractSparseSequence$1 r1;
        java.util.Iterator $r3;
        kodkod.util.ints.AbstractSparseSequence $r2;
        int i0, i1;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$1$1;

        r1 := @parameter0: kodkod.util.ints.AbstractSparseSequence$1;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<kodkod.util.ints.AbstractSparseSequence$1$1: kodkod.util.ints.AbstractSparseSequence$1 this$1> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <kodkod.util.ints.AbstractSparseSequence$1: kodkod.util.ints.AbstractSparseSequence access$0(kodkod.util.ints.AbstractSparseSequence$1)>(r1);

        $r3 = virtualinvoke $r2.<kodkod.util.ints.AbstractSparseSequence: java.util.Iterator iterator(int,int)>(i0, i1);

        r0.<kodkod.util.ints.AbstractSparseSequence$1$1: java.util.Iterator iter> = $r3;

        return;
    }

    public boolean hasNext()
    {
        kodkod.util.ints.AbstractSparseSequence$1$1 r0;
        java.util.Iterator $r1;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$1$1;

        $r1 = r0.<kodkod.util.ints.AbstractSparseSequence$1$1: java.util.Iterator iter>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public int next()
    {
        kodkod.util.ints.AbstractSparseSequence$1$1 r0;
        java.util.Iterator $r1;
        kodkod.util.ints.IndexedEntry $r3;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$1$1;

        $r1 = r0.<kodkod.util.ints.AbstractSparseSequence$1$1: java.util.Iterator iter>;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (kodkod.util.ints.IndexedEntry) $r2;

        $i0 = interfaceinvoke $r3.<kodkod.util.ints.IndexedEntry: int index()>();

        return $i0;
    }

    public void remove()
    {
        kodkod.util.ints.AbstractSparseSequence$1$1 r0;
        java.util.Iterator $r1;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$1$1;

        $r1 = r0.<kodkod.util.ints.AbstractSparseSequence$1$1: java.util.Iterator iter>;

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

        return;
    }
}
