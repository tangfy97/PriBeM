public class org.apache.tika.parser.pkg.PackageParser extends org.apache.tika.parser.AbstractParser
{
    private static final long serialVersionUID;
    private static final org.apache.tika.mime.MediaType ZIP;
    private static final org.apache.tika.mime.MediaType JAR;
    private static final org.apache.tika.mime.MediaType AR;
    private static final org.apache.tika.mime.MediaType CPIO;
    private static final org.apache.tika.mime.MediaType DUMP;
    private static final org.apache.tika.mime.MediaType TAR;
    private static final org.apache.tika.mime.MediaType SEVENZ;
    private static final java.util.Set SUPPORTED_TYPES;

    public void <init>()
    {
        org.apache.tika.parser.pkg.PackageParser r0;

        r0 := @this: org.apache.tika.parser.pkg.PackageParser;

        specialinvoke r0.<org.apache.tika.parser.AbstractParser: void <init>()>();

        return;
    }

    static org.apache.tika.mime.MediaType getMediaType(org.apache.commons.compress.archivers.ArchiveInputStream)
    {
        org.apache.tika.mime.MediaType $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        org.apache.commons.compress.archivers.ArchiveInputStream r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @parameter0: org.apache.commons.compress.archivers.ArchiveInputStream;

        $z0 = r0 instanceof org.apache.commons.compress.archivers.jar.JarArchiveInputStream;

        if $z0 == 0 goto label1;

        $r8 = <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType JAR>;

        return $r8;

     label1:
        $z1 = r0 instanceof org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

        if $z1 == 0 goto label2;

        $r7 = <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType ZIP>;

        return $r7;

     label2:
        $z2 = r0 instanceof org.apache.commons.compress.archivers.ar.ArArchiveInputStream;

        if $z2 == 0 goto label3;

        $r6 = <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType AR>;

        return $r6;

     label3:
        $z3 = r0 instanceof org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        if $z3 == 0 goto label4;

        $r5 = <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType CPIO>;

        return $r5;

     label4:
        $z4 = r0 instanceof org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        if $z4 == 0 goto label5;

        $r4 = <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType DUMP>;

        return $r4;

     label5:
        $z5 = r0 instanceof org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        if $z5 == 0 goto label6;

        $r3 = <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType TAR>;

        return $r3;

     label6:
        $z6 = r0 instanceof org.apache.tika.parser.pkg.PackageParser$SevenZWrapper;

        if $z6 == 0 goto label7;

        $r2 = <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType SEVENZ>;

        return $r2;

     label7:
        $r1 = <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType OCTET_STREAM>;

        return $r1;
    }

    static boolean isZipArchive(org.apache.tika.mime.MediaType)
    {
        org.apache.tika.mime.MediaType r0, $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.apache.tika.mime.MediaType;

        $r1 = <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType ZIP>;

        $z0 = virtualinvoke r0.<org.apache.tika.mime.MediaType: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r2 = <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType JAR>;

        $z1 = virtualinvoke r0.<org.apache.tika.mime.MediaType: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public java.util.Set getSupportedTypes(org.apache.tika.parser.ParseContext)
    {
        java.util.Set $r0;
        org.apache.tika.parser.pkg.PackageParser r1;
        org.apache.tika.parser.ParseContext r2;

        r1 := @this: org.apache.tika.parser.pkg.PackageParser;

        r2 := @parameter0: org.apache.tika.parser.ParseContext;

        $r0 = <org.apache.tika.parser.pkg.PackageParser: java.util.Set SUPPORTED_TYPES>;

        return $r0;
    }

    public void parse(java.io.InputStream, org.xml.sax.ContentHandler, org.apache.tika.metadata.Metadata, org.apache.tika.parser.ParseContext) throws java.io.IOException, org.xml.sax.SAXException, org.apache.tika.exception.TikaException
    {
        java.io.BufferedInputStream $r14;
        org.apache.tika.metadata.Metadata r10;
        org.apache.commons.compress.archivers.ArchiveInputStream r33;
        boolean $z0, $z1, $z2, $z3;
        org.apache.tika.extractor.ParsingEmbeddedDocumentExtractor $r6;
        org.apache.commons.compress.archivers.ArchiveException $r17;
        org.apache.commons.compress.archivers.StreamingNotSupportedException $r19;
        org.apache.tika.parser.pkg.PackageParser r11;
        org.apache.tika.io.CloseShieldInputStream $r0;
        org.apache.tika.parser.ParseContext r1;
        java.lang.StringBuilder $r22, $r23, $r25;
        java.lang.Throwable $r16;
        org.apache.commons.compress.archivers.ArchiveEntry r34;
        org.apache.tika.mime.MediaType $r4, $r5;
        org.apache.tika.extractor.EmbeddedDocumentExtractor $r13;
        org.apache.commons.compress.archivers.sevenz.SevenZFile $r29;
        java.io.FilterInputStream r32;
        org.apache.tika.exception.TikaException $r18, $r21;
        org.apache.tika.io.TikaInputStream $r27;
        org.xml.sax.ContentHandler r9;
        java.lang.String $r12, $r20, $r24, $r26;
        org.apache.commons.compress.archivers.ArchiveStreamFactory $r2, $r15;
        org.apache.tika.sax.XHTMLContentHandler $r8;
        java.io.File $r30;
        org.apache.tika.parser.pkg.PackageParser$SevenZWrapper $r28;
        java.lang.Object $r3, $r7;
        java.io.InputStream r31;

        r11 := @this: org.apache.tika.parser.pkg.PackageParser;

        r31 := @parameter0: java.io.InputStream;

        r9 := @parameter1: org.xml.sax.ContentHandler;

        r10 := @parameter2: org.apache.tika.metadata.Metadata;

        r1 := @parameter3: org.apache.tika.parser.ParseContext;

        $r0 = new org.apache.tika.io.CloseShieldInputStream;

        specialinvoke $r0.<org.apache.tika.io.CloseShieldInputStream: void <init>(java.io.InputStream)>(r31);

        r32 = $r0;

        $z0 = staticinvoke <org.apache.tika.io.TikaInputStream: boolean isTikaInputStream(java.io.InputStream)>($r0);

        if $z0 != 0 goto label01;

        $r14 = new java.io.BufferedInputStream;

        specialinvoke $r14.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r0);

        r32 = $r14;

     label01:
        $r2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory;

        specialinvoke $r2.<org.apache.commons.compress.archivers.ArchiveStreamFactory: void <init>()>();

        $r3 = virtualinvoke r1.<org.apache.tika.parser.ParseContext: java.lang.Object get(java.lang.Class,java.lang.Object)>(class "Lorg/apache/commons/compress/archivers/ArchiveStreamFactory;", $r2);

        $r15 = (org.apache.commons.compress.archivers.ArchiveStreamFactory) $r3;

        r33 = virtualinvoke $r15.<org.apache.commons.compress.archivers.ArchiveStreamFactory: org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)>(r32);

     label02:
        goto label07;

     label03:
        $r19 := @caughtexception;

        $r20 = virtualinvoke $r19.<org.apache.commons.compress.archivers.StreamingNotSupportedException: java.lang.String getFormat()>();

        $z3 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("7z");

        if $z3 == 0 goto label04;

        virtualinvoke r32.<java.io.InputStream: void reset()>();

        $r27 = staticinvoke <org.apache.tika.io.TikaInputStream: org.apache.tika.io.TikaInputStream get(java.io.InputStream)>(r32);

        $r28 = new org.apache.tika.parser.pkg.PackageParser$SevenZWrapper;

        $r29 = new org.apache.commons.compress.archivers.sevenz.SevenZFile;

        $r30 = virtualinvoke $r27.<org.apache.tika.io.TikaInputStream: java.io.File getFile()>();

        specialinvoke $r29.<org.apache.commons.compress.archivers.sevenz.SevenZFile: void <init>(java.io.File)>($r30);

        specialinvoke $r28.<org.apache.tika.parser.pkg.PackageParser$SevenZWrapper: void <init>(org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.tika.parser.pkg.PackageParser$1)>($r29, null);

        r33 = $r28;

        goto label05;

     label04:
        $r21 = new org.apache.tika.exception.TikaException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown non-streaming format ");

        $r24 = virtualinvoke $r19.<org.apache.commons.compress.archivers.StreamingNotSupportedException: java.lang.String getFormat()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>($r26, $r19);

        throw $r21;

     label05:
        goto label07;

     label06:
        $r17 := @caughtexception;

        $r18 = new org.apache.tika.exception.TikaException;

        specialinvoke $r18.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to unpack document stream", $r17);

        throw $r18;

     label07:
        $r4 = staticinvoke <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType getMediaType(org.apache.commons.compress.archivers.ArchiveInputStream)>(r33);

        $r5 = <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType OCTET_STREAM>;

        $z1 = virtualinvoke $r4.<org.apache.tika.mime.MediaType: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label08;

        $r12 = virtualinvoke $r4.<org.apache.tika.mime.MediaType: java.lang.String toString()>();

        virtualinvoke r10.<org.apache.tika.metadata.Metadata: void set(java.lang.String,java.lang.String)>("Content-Type", $r12);

     label08:
        $r6 = new org.apache.tika.extractor.ParsingEmbeddedDocumentExtractor;

        specialinvoke $r6.<org.apache.tika.extractor.ParsingEmbeddedDocumentExtractor: void <init>(org.apache.tika.parser.ParseContext)>(r1);

        $r7 = virtualinvoke r1.<org.apache.tika.parser.ParseContext: java.lang.Object get(java.lang.Class,java.lang.Object)>(class "Lorg/apache/tika/extractor/EmbeddedDocumentExtractor;", $r6);

        $r13 = (org.apache.tika.extractor.EmbeddedDocumentExtractor) $r7;

        $r8 = new org.apache.tika.sax.XHTMLContentHandler;

        specialinvoke $r8.<org.apache.tika.sax.XHTMLContentHandler: void <init>(org.xml.sax.ContentHandler,org.apache.tika.metadata.Metadata)>(r9, r10);

        virtualinvoke $r8.<org.apache.tika.sax.XHTMLContentHandler: void startDocument()>();

     label09:
        r34 = virtualinvoke r33.<org.apache.commons.compress.archivers.ArchiveInputStream: org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()>();

     label10:
        if r34 == null goto label12;

        $z2 = interfaceinvoke r34.<org.apache.commons.compress.archivers.ArchiveEntry: boolean isDirectory()>();

        if $z2 != 0 goto label11;

        specialinvoke r11.<org.apache.tika.parser.pkg.PackageParser: void parseEntry(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveEntry,org.apache.tika.extractor.EmbeddedDocumentExtractor,org.apache.tika.sax.XHTMLContentHandler)>(r33, r34, $r13, $r8);

     label11:
        r34 = virtualinvoke r33.<org.apache.commons.compress.archivers.ArchiveInputStream: org.apache.commons.compress.archivers.ArchiveEntry getNextEntry()>();

        goto label10;

     label12:
        virtualinvoke r33.<org.apache.commons.compress.archivers.ArchiveInputStream: void close()>();

        goto label15;

     label13:
        $r16 := @caughtexception;

     label14:
        virtualinvoke r33.<org.apache.commons.compress.archivers.ArchiveInputStream: void close()>();

        throw $r16;

     label15:
        virtualinvoke $r8.<org.apache.tika.sax.XHTMLContentHandler: void endDocument()>();

        return;

        catch org.apache.commons.compress.archivers.StreamingNotSupportedException from label01 to label02 with label03;
        catch org.apache.commons.compress.archivers.ArchiveException from label01 to label02 with label06;
        catch java.lang.Throwable from label09 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private void parseEntry(org.apache.commons.compress.archivers.ArchiveInputStream, org.apache.commons.compress.archivers.ArchiveEntry, org.apache.tika.extractor.EmbeddedDocumentExtractor, org.apache.tika.sax.XHTMLContentHandler) throws org.xml.sax.SAXException, java.io.IOException, org.apache.tika.exception.TikaException
    {
        org.xml.sax.helpers.AttributesImpl $r8;
        java.lang.Throwable $r9;
        org.apache.tika.io.TemporaryResources $r6;
        org.apache.commons.compress.archivers.ArchiveEntry r0;
        org.apache.tika.sax.XHTMLContentHandler r3;
        org.apache.tika.parser.pkg.PackageParser r10;
        org.apache.tika.extractor.EmbeddedDocumentExtractor r5;
        org.apache.tika.metadata.Metadata $r4;
        int $i0, $i1;
        org.apache.tika.io.TikaInputStream $r7;
        java.lang.String $r1;
        org.apache.commons.compress.archivers.ArchiveInputStream r2;
        boolean $z0, $z1;

        r10 := @this: org.apache.tika.parser.pkg.PackageParser;

        r2 := @parameter0: org.apache.commons.compress.archivers.ArchiveInputStream;

        r0 := @parameter1: org.apache.commons.compress.archivers.ArchiveEntry;

        r5 := @parameter2: org.apache.tika.extractor.EmbeddedDocumentExtractor;

        r3 := @parameter3: org.apache.tika.sax.XHTMLContentHandler;

        $r1 = interfaceinvoke r0.<org.apache.commons.compress.archivers.ArchiveEntry: java.lang.String getName()>();

        $z0 = virtualinvoke r2.<org.apache.commons.compress.archivers.ArchiveInputStream: boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry)>(r0);

        if $z0 == 0 goto label7;

        $r4 = new org.apache.tika.metadata.Metadata;

        specialinvoke $r4.<org.apache.tika.metadata.Metadata: void <init>()>();

        if $r1 == null goto label1;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 <= 0 goto label1;

        virtualinvoke $r4.<org.apache.tika.metadata.Metadata: void set(java.lang.String,java.lang.String)>("resourceName", $r1);

        $r8 = new org.xml.sax.helpers.AttributesImpl;

        specialinvoke $r8.<org.xml.sax.helpers.AttributesImpl: void <init>()>();

        virtualinvoke $r8.<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("", "class", "class", "CDATA", "embedded");

        virtualinvoke $r8.<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("", "id", "id", "CDATA", $r1);

        virtualinvoke r3.<org.apache.tika.sax.XHTMLContentHandler: void startElement(java.lang.String,org.xml.sax.helpers.AttributesImpl)>("div", $r8);

        virtualinvoke r3.<org.apache.tika.sax.XHTMLContentHandler: void endElement(java.lang.String)>("div");

        virtualinvoke $r4.<org.apache.tika.metadata.Metadata: void set(java.lang.String,java.lang.String)>("embeddedRelationshipId", $r1);

     label1:
        $z1 = interfaceinvoke r5.<org.apache.tika.extractor.EmbeddedDocumentExtractor: boolean shouldParseEmbedded(org.apache.tika.metadata.Metadata)>($r4);

        if $z1 == 0 goto label6;

        $r6 = new org.apache.tika.io.TemporaryResources;

        specialinvoke $r6.<org.apache.tika.io.TemporaryResources: void <init>()>();

     label2:
        $r7 = staticinvoke <org.apache.tika.io.TikaInputStream: org.apache.tika.io.TikaInputStream get(java.io.InputStream,org.apache.tika.io.TemporaryResources)>(r2, $r6);

        interfaceinvoke r5.<org.apache.tika.extractor.EmbeddedDocumentExtractor: void parseEmbedded(java.io.InputStream,org.xml.sax.ContentHandler,org.apache.tika.metadata.Metadata,boolean)>($r7, r3, $r4, 1);

     label3:
        virtualinvoke $r6.<org.apache.tika.io.TemporaryResources: void dispose()>();

        goto label6;

     label4:
        $r9 := @caughtexception;

     label5:
        virtualinvoke $r6.<org.apache.tika.io.TemporaryResources: void dispose()>();

        throw $r9;

     label6:
        goto label8;

     label7:
        if $r1 == null goto label8;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label8;

        virtualinvoke r3.<org.apache.tika.sax.XHTMLContentHandler: void element(java.lang.String,java.lang.String)>("p", $r1);

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    static void <clinit>()
    {
        org.apache.tika.mime.MediaType $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        org.apache.tika.mime.MediaType[] $r7;
        java.util.Set $r15;

        <org.apache.tika.parser.pkg.PackageParser: long serialVersionUID> = -5331043266963888708L;

        $r0 = <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType APPLICATION_ZIP>;

        <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType ZIP> = $r0;

        $r1 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("java-archive");

        <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType JAR> = $r1;

        $r2 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("x-archive");

        <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType AR> = $r2;

        $r3 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("x-cpio");

        <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType CPIO> = $r3;

        $r4 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("x-tika-unix-dump");

        <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType DUMP> = $r4;

        $r5 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("x-tar");

        <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType TAR> = $r5;

        $r6 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("x-7z-compressed");

        <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType SEVENZ> = $r6;

        $r7 = newarray (org.apache.tika.mime.MediaType)[7];

        $r8 = <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType ZIP>;

        $r7[0] = $r8;

        $r9 = <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType JAR>;

        $r7[1] = $r9;

        $r10 = <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType AR>;

        $r7[2] = $r10;

        $r11 = <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType CPIO>;

        $r7[3] = $r11;

        $r12 = <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType DUMP>;

        $r7[4] = $r12;

        $r13 = <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType TAR>;

        $r7[5] = $r13;

        $r14 = <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType SEVENZ>;

        $r7[6] = $r14;

        $r15 = staticinvoke <org.apache.tika.mime.MediaType: java.util.Set set(org.apache.tika.mime.MediaType[])>($r7);

        <org.apache.tika.parser.pkg.PackageParser: java.util.Set SUPPORTED_TYPES> = $r15;

        return;
    }
}
