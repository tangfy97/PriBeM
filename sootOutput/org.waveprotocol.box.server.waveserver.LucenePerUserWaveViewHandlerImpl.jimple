public class org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl extends java.lang.Object implements org.waveprotocol.box.server.waveserver.PerUserWaveViewHandler, java.io.Closeable
{
    private static final java.util.logging.Logger LOG;
    private static final java.util.concurrent.Executor executor;
    private static final org.apache.lucene.util.Version LUCENE_VERSION;
    private static org.apache.lucene.search.Sort LMT_ASC_SORT;
    private static final double MIN_STALE_SEC;
    private static final double MAX_STALE_SEC;
    private static final int MAX_WAVES;
    private final org.apache.lucene.analysis.standard.StandardAnalyzer analyzer;
    private final org.waveprotocol.box.server.waveserver.TextCollator textCollator;
    private final org.apache.lucene.index.IndexWriter indexWriter;
    private final org.apache.lucene.search.NRTManager nrtManager;
    private final org.apache.lucene.search.NRTManagerReopenThread nrtManagerReopenThread;
    private final org.waveprotocol.box.server.waveserver.ReadableWaveletDataProvider waveletProvider;
    private boolean isClosed;

    public void <init>(org.waveprotocol.box.server.persistence.lucene.IndexDirectory, org.waveprotocol.box.server.waveserver.ReadableWaveletDataProvider, org.waveprotocol.box.server.waveserver.TextCollator, java.lang.String)
    {
        org.apache.lucene.search.NRTManager $r12, $r17;
        org.apache.lucene.search.NRTManagerReopenThread $r16, $r18;
        org.apache.lucene.index.IndexWriterConfig$OpenMode $r8;
        org.apache.lucene.store.Directory $r11;
        java.lang.String r14;
        org.waveprotocol.box.server.persistence.lucene.IndexDirectory r10;
        org.waveprotocol.box.server.waveserver.IndexException $r20;
        org.waveprotocol.box.server.waveserver.ReadableWaveletDataProvider r2;
        java.io.IOException $r19;
        org.apache.lucene.util.Version $r4, $r7;
        org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$WaveSearchWarmer $r13;
        org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl r0;
        org.apache.lucene.index.IndexWriter $r9, $r15;
        org.apache.lucene.analysis.standard.StandardAnalyzer $r3, $r6;
        org.waveprotocol.box.server.waveserver.TextCollator r1;
        org.apache.lucene.index.IndexWriterConfig $r5;

        r0 := @this: org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl;

        r10 := @parameter0: org.waveprotocol.box.server.persistence.lucene.IndexDirectory;

        r2 := @parameter1: org.waveprotocol.box.server.waveserver.ReadableWaveletDataProvider;

        r1 := @parameter2: org.waveprotocol.box.server.waveserver.TextCollator;

        r14 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: boolean isClosed> = 0;

        r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.waveprotocol.box.server.waveserver.TextCollator textCollator> = r1;

        r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.waveprotocol.box.server.waveserver.ReadableWaveletDataProvider waveletProvider> = r2;

        $r3 = new org.apache.lucene.analysis.standard.StandardAnalyzer;

        $r4 = <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.util.Version LUCENE_VERSION>;

        specialinvoke $r3.<org.apache.lucene.analysis.standard.StandardAnalyzer: void <init>(org.apache.lucene.util.Version)>($r4);

        r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.analysis.standard.StandardAnalyzer analyzer> = $r3;

     label1:
        $r5 = new org.apache.lucene.index.IndexWriterConfig;

        $r7 = <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.util.Version LUCENE_VERSION>;

        $r6 = r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.analysis.standard.StandardAnalyzer analyzer>;

        specialinvoke $r5.<org.apache.lucene.index.IndexWriterConfig: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.Analyzer)>($r7, $r6);

        $r8 = <org.apache.lucene.index.IndexWriterConfig$OpenMode: org.apache.lucene.index.IndexWriterConfig$OpenMode CREATE_OR_APPEND>;

        virtualinvoke $r5.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexWriterConfig setOpenMode(org.apache.lucene.index.IndexWriterConfig$OpenMode)>($r8);

        $r9 = new org.apache.lucene.index.IndexWriter;

        $r11 = interfaceinvoke r10.<org.waveprotocol.box.server.persistence.lucene.IndexDirectory: org.apache.lucene.store.Directory getDirectory()>();

        specialinvoke $r9.<org.apache.lucene.index.IndexWriter: void <init>(org.apache.lucene.store.Directory,org.apache.lucene.index.IndexWriterConfig)>($r11, $r5);

        r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.index.IndexWriter indexWriter> = $r9;

        $r12 = new org.apache.lucene.search.NRTManager;

        $r15 = r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.index.IndexWriter indexWriter>;

        $r13 = new org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$WaveSearchWarmer;

        specialinvoke $r13.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$WaveSearchWarmer: void <init>(java.lang.String)>(r14);

        specialinvoke $r12.<org.apache.lucene.search.NRTManager: void <init>(org.apache.lucene.index.IndexWriter,org.apache.lucene.search.SearcherWarmer)>($r15, $r13);

        r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.search.NRTManager nrtManager> = $r12;

     label2:
        goto label4;

     label3:
        $r19 := @caughtexception;

        $r20 = new org.waveprotocol.box.server.waveserver.IndexException;

        specialinvoke $r20.<org.waveprotocol.box.server.waveserver.IndexException: void <init>(java.lang.Throwable)>($r19);

        throw $r20;

     label4:
        $r16 = new org.apache.lucene.search.NRTManagerReopenThread;

        $r17 = r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.search.NRTManager nrtManager>;

        specialinvoke $r16.<org.apache.lucene.search.NRTManagerReopenThread: void <init>(org.apache.lucene.search.NRTManager,double,double)>($r17, 1.0, 0.025);

        r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.search.NRTManagerReopenThread nrtManagerReopenThread> = $r16;

        $r18 = r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.search.NRTManagerReopenThread nrtManagerReopenThread>;

        virtualinvoke $r18.<org.apache.lucene.search.NRTManagerReopenThread: void start()>();

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public synchronized void close()
    {
        org.apache.lucene.search.NRTManager $r1;
        org.apache.lucene.store.AlreadyClosedException $r7;
        java.io.IOException $r8;
        java.util.logging.Logger $r5, $r10;
        org.apache.lucene.search.NRTManagerReopenThread $r3;
        java.util.logging.Level $r9;
        org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl r0;
        org.apache.lucene.index.IndexWriter $r4;
        org.apache.lucene.analysis.standard.StandardAnalyzer $r2, $r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl;

        $z0 = r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r7 = new org.apache.lucene.store.AlreadyClosedException;

        specialinvoke $r7.<org.apache.lucene.store.AlreadyClosedException: void <init>(java.lang.String)>("Already closed");

        throw $r7;

     label1:
        r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: boolean isClosed> = 1;

     label2:
        $r1 = r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.search.NRTManager nrtManager>;

        virtualinvoke $r1.<org.apache.lucene.search.NRTManager: void close()>();

        $r2 = r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.analysis.standard.StandardAnalyzer analyzer>;

        if $r2 == null goto label3;

        $r6 = r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.analysis.standard.StandardAnalyzer analyzer>;

        virtualinvoke $r6.<org.apache.lucene.analysis.standard.StandardAnalyzer: void close()>();

     label3:
        $r3 = r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.search.NRTManagerReopenThread nrtManagerReopenThread>;

        virtualinvoke $r3.<org.apache.lucene.search.NRTManagerReopenThread: void close()>();

        $r4 = r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.index.IndexWriter indexWriter>;

        virtualinvoke $r4.<org.apache.lucene.index.IndexWriter: void close()>();

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $r10 = <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: java.util.logging.Logger LOG>;

        $r9 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r9, "Failed to close the Lucene index", $r8);

     label6:
        $r5 = <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: java.util.logging.Logger LOG>;

        virtualinvoke $r5.<java.util.logging.Logger: void info(java.lang.String)>("Successfully closed the Lucene index...");

        return;

        catch java.io.IOException from label2 to label4 with label5;
    }

    public void forceReopen() throws java.io.IOException
    {
        org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl r0;
        org.apache.lucene.search.NRTManager $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.search.NRTManager nrtManager>;

        virtualinvoke $r1.<org.apache.lucene.search.NRTManager: boolean maybeReopen(boolean)>(1);

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture onParticipantAdded(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl r4;
        org.waveprotocol.wave.model.id.WaveletName r0;
        com.google.common.util.concurrent.ListenableFutureTask $r2;
        java.util.concurrent.Executor $r5;
        org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$1 $r3;
        org.waveprotocol.wave.model.wave.ParticipantId r1;

        r4 := @this: org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = new com.google.common.util.concurrent.ListenableFutureTask;

        $r3 = new org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$1;

        specialinvoke $r3.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$1: void <init>(org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl,org.waveprotocol.wave.model.id.WaveletName)>(r4, r0);

        specialinvoke $r2.<com.google.common.util.concurrent.ListenableFutureTask: void <init>(java.util.concurrent.Callable)>($r3);

        $r5 = <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: java.util.concurrent.Executor executor>;

        interfaceinvoke $r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture onParticipantRemoved(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl r4;
        org.waveprotocol.wave.model.id.WaveletName r0;
        com.google.common.util.concurrent.ListenableFutureTask $r2;
        java.util.concurrent.Executor $r5;
        org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$2 $r3;
        org.waveprotocol.wave.model.wave.ParticipantId r1;

        r4 := @this: org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = new com.google.common.util.concurrent.ListenableFutureTask;

        $r3 = new org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$2;

        specialinvoke $r3.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$2: void <init>(org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl,org.waveprotocol.wave.model.id.WaveletName)>(r4, r0);

        specialinvoke $r2.<com.google.common.util.concurrent.ListenableFutureTask: void <init>(java.util.concurrent.Callable)>($r3);

        $r5 = <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: java.util.concurrent.Executor executor>;

        interfaceinvoke $r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture onWaveInit(org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl r3;
        org.waveprotocol.wave.model.id.WaveletName r0;
        com.google.common.util.concurrent.ListenableFutureTask $r1;
        org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$3 $r2;
        java.util.concurrent.Executor $r4;

        r3 := @this: org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.google.common.util.concurrent.ListenableFutureTask;

        $r2 = new org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$3;

        specialinvoke $r2.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$3: void <init>(org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl,org.waveprotocol.wave.model.id.WaveletName)>(r3, r0);

        specialinvoke $r1.<com.google.common.util.concurrent.ListenableFutureTask: void <init>(java.util.concurrent.Callable)>($r2);

        $r4 = <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: java.util.concurrent.Executor executor>;

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r1);

        return $r1;
    }

    private void updateIndex(org.waveprotocol.wave.model.wave.data.ReadableWaveletData) throws org.waveprotocol.box.server.waveserver.IndexException
    {
        org.apache.lucene.search.NRTManager $r2, $r4;
        java.io.IOException $r7;
        org.waveprotocol.wave.model.id.WaveletId $r9, $r13;
        org.apache.lucene.index.CorruptIndexException $r11;
        org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl r1;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r0;
        org.apache.lucene.index.IndexWriter $r5, $r6;
        org.waveprotocol.box.server.waveserver.TextCollator $r3;
        java.lang.String $r10, $r14;
        org.waveprotocol.box.server.waveserver.IndexException $r8, $r12;

        r1 := @this: org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

     label1:
        $r2 = r1.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.search.NRTManager nrtManager>;

        staticinvoke <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: void removeIndex(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.apache.lucene.search.NRTManager)>(r0, $r2);

        $r5 = r1.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.index.IndexWriter indexWriter>;

        $r4 = r1.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.search.NRTManager nrtManager>;

        $r3 = r1.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.waveprotocol.box.server.waveserver.TextCollator textCollator>;

        staticinvoke <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: void addIndex(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.apache.lucene.index.IndexWriter,org.apache.lucene.search.NRTManager,org.waveprotocol.box.server.waveserver.TextCollator)>(r0, $r5, $r4, $r3);

        $r6 = r1.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.index.IndexWriter indexWriter>;

        virtualinvoke $r6.<org.apache.lucene.index.IndexWriter: void commit()>();

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        $r12 = new org.waveprotocol.box.server.waveserver.IndexException;

        $r13 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r13);

        specialinvoke $r12.<org.waveprotocol.box.server.waveserver.IndexException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r11);

        throw $r12;

     label4:
        $r7 := @caughtexception;

        $r8 = new org.waveprotocol.box.server.waveserver.IndexException;

        $r9 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        specialinvoke $r8.<org.waveprotocol.box.server.waveserver.IndexException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r7);

        throw $r8;

     label5:
        return;

        catch org.apache.lucene.index.CorruptIndexException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
    }

    private static void addIndex(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.apache.lucene.index.IndexWriter, org.apache.lucene.search.NRTManager, org.waveprotocol.box.server.waveserver.TextCollator) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.document.Document $r0;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r1;
        org.apache.lucene.index.IndexWriter r4;
        org.apache.lucene.search.NRTManager r3;
        org.waveprotocol.box.server.waveserver.TextCollator r2;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r4 := @parameter1: org.apache.lucene.index.IndexWriter;

        r3 := @parameter2: org.apache.lucene.search.NRTManager;

        r2 := @parameter3: org.waveprotocol.box.server.waveserver.TextCollator;

        $r0 = new org.apache.lucene.document.Document;

        specialinvoke $r0.<org.apache.lucene.document.Document: void <init>()>();

        staticinvoke <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: void addWaveletFieldsToIndex(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.waveprotocol.box.server.waveserver.TextCollator,org.apache.lucene.document.Document)>(r1, r2, $r0);

        virtualinvoke r3.<org.apache.lucene.search.NRTManager: long addDocument(org.apache.lucene.document.Document)>($r0);

        return;
    }

    private static void addWaveletFieldsToIndex(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.waveprotocol.box.server.waveserver.TextCollator, org.apache.lucene.document.Document)
    {
        org.waveprotocol.wave.model.wave.ParticipantId r25;
        org.apache.lucene.document.Document r0;
        boolean $z0;
        org.waveprotocol.wave.model.id.WaveId $r5;
        java.util.Set $r22;
        org.waveprotocol.box.server.waveserver.IndexFieldType $r2, $r10, $r17, $r27;
        org.waveprotocol.wave.model.id.WaveletId $r12;
        long $l0;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r4;
        java.lang.String $r3, $r6, $r11, $r13, $r18, $r19, $r28, $r29;
        org.apache.lucene.document.Field$Store $r8, $r15, $r21, $r31;
        org.apache.lucene.document.Field$Index $r7, $r14, $r20, $r30;
        java.util.Iterator $r23;
        org.apache.lucene.document.Field $r1, $r9, $r16, $r26;
        org.waveprotocol.box.server.waveserver.TextCollator r32;
        java.lang.Object $r24;

        r4 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r32 := @parameter1: org.waveprotocol.box.server.waveserver.TextCollator;

        r0 := @parameter2: org.apache.lucene.document.Document;

        $r1 = new org.apache.lucene.document.Field;

        $r2 = <org.waveprotocol.box.server.waveserver.IndexFieldType: org.waveprotocol.box.server.waveserver.IndexFieldType WAVEID>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.box.server.waveserver.IndexFieldType: java.lang.String toString()>();

        $r5 = interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.id.WaveId: java.lang.String serialise()>();

        $r8 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>;

        $r7 = <org.apache.lucene.document.Field$Index: org.apache.lucene.document.Field$Index NOT_ANALYZED>;

        specialinvoke $r1.<org.apache.lucene.document.Field: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store,org.apache.lucene.document.Field$Index)>($r3, $r6, $r8, $r7);

        virtualinvoke r0.<org.apache.lucene.document.Document: void add(org.apache.lucene.document.Fieldable)>($r1);

        $r9 = new org.apache.lucene.document.Field;

        $r10 = <org.waveprotocol.box.server.waveserver.IndexFieldType: org.waveprotocol.box.server.waveserver.IndexFieldType WAVELETID>;

        $r11 = virtualinvoke $r10.<org.waveprotocol.box.server.waveserver.IndexFieldType: java.lang.String toString()>();

        $r12 = interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r13 = virtualinvoke $r12.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String serialise()>();

        $r15 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>;

        $r14 = <org.apache.lucene.document.Field$Index: org.apache.lucene.document.Field$Index NOT_ANALYZED>;

        specialinvoke $r9.<org.apache.lucene.document.Field: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store,org.apache.lucene.document.Field$Index)>($r11, $r13, $r15, $r14);

        virtualinvoke r0.<org.apache.lucene.document.Document: void add(org.apache.lucene.document.Fieldable)>($r9);

        $r16 = new org.apache.lucene.document.Field;

        $r17 = <org.waveprotocol.box.server.waveserver.IndexFieldType: org.waveprotocol.box.server.waveserver.IndexFieldType LMT>;

        $r18 = virtualinvoke $r17.<org.waveprotocol.box.server.waveserver.IndexFieldType: java.lang.String toString()>();

        $l0 = interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: long getLastModifiedTime()>();

        $r19 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r21 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store NO>;

        $r20 = <org.apache.lucene.document.Field$Index: org.apache.lucene.document.Field$Index NOT_ANALYZED>;

        specialinvoke $r16.<org.apache.lucene.document.Field: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store,org.apache.lucene.document.Field$Index)>($r18, $r19, $r21, $r20);

        virtualinvoke r0.<org.apache.lucene.document.Document: void add(org.apache.lucene.document.Fieldable)>($r16);

        $r22 = interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: java.util.Set getParticipants()>();

        $r23 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r24 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r25 = (org.waveprotocol.wave.model.wave.ParticipantId) $r24;

        $r26 = new org.apache.lucene.document.Field;

        $r27 = <org.waveprotocol.box.server.waveserver.IndexFieldType: org.waveprotocol.box.server.waveserver.IndexFieldType WITH>;

        $r28 = virtualinvoke $r27.<org.waveprotocol.box.server.waveserver.IndexFieldType: java.lang.String toString()>();

        $r29 = virtualinvoke r25.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String toString()>();

        $r31 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>;

        $r30 = <org.apache.lucene.document.Field$Index: org.apache.lucene.document.Field$Index NOT_ANALYZED>;

        specialinvoke $r26.<org.apache.lucene.document.Field: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.Field$Store,org.apache.lucene.document.Field$Index)>($r28, $r29, $r31, $r30);

        virtualinvoke r0.<org.apache.lucene.document.Document: void add(org.apache.lucene.document.Fieldable)>($r26);

        goto label1;

     label2:
        return;
    }

    private static void removeIndex(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.apache.lucene.search.NRTManager) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.waveprotocol.box.server.waveserver.IndexFieldType $r3, $r11;
        org.apache.lucene.search.NRTManager r16;
        org.apache.lucene.index.Term $r2, $r10;
        org.waveprotocol.wave.model.id.WaveletId $r13;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r5;
        java.lang.String $r4, $r7, $r12, $r14;
        org.apache.lucene.search.BooleanClause$Occur $r8, $r15;
        org.waveprotocol.wave.model.id.WaveId $r6;
        org.apache.lucene.search.TermQuery $r1, $r9;
        org.apache.lucene.search.BooleanQuery $r0;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r16 := @parameter1: org.apache.lucene.search.NRTManager;

        $r0 = new org.apache.lucene.search.BooleanQuery;

        specialinvoke $r0.<org.apache.lucene.search.BooleanQuery: void <init>()>();

        $r1 = new org.apache.lucene.search.TermQuery;

        $r2 = new org.apache.lucene.index.Term;

        $r3 = <org.waveprotocol.box.server.waveserver.IndexFieldType: org.waveprotocol.box.server.waveserver.IndexFieldType WAVEID>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.box.server.waveserver.IndexFieldType: java.lang.String toString()>();

        $r6 = interfaceinvoke r5.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.id.WaveId: java.lang.String serialise()>();

        specialinvoke $r2.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>($r4, $r7);

        specialinvoke $r1.<org.apache.lucene.search.TermQuery: void <init>(org.apache.lucene.index.Term)>($r2);

        $r8 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur MUST>;

        virtualinvoke $r0.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r1, $r8);

        $r9 = new org.apache.lucene.search.TermQuery;

        $r10 = new org.apache.lucene.index.Term;

        $r11 = <org.waveprotocol.box.server.waveserver.IndexFieldType: org.waveprotocol.box.server.waveserver.IndexFieldType WAVELETID>;

        $r12 = virtualinvoke $r11.<org.waveprotocol.box.server.waveserver.IndexFieldType: java.lang.String toString()>();

        $r13 = interfaceinvoke r5.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String serialise()>();

        specialinvoke $r10.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>($r12, $r14);

        specialinvoke $r9.<org.apache.lucene.search.TermQuery: void <init>(org.apache.lucene.index.Term)>($r10);

        $r15 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur MUST>;

        virtualinvoke $r0.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r9, $r15);

        virtualinvoke r16.<org.apache.lucene.search.NRTManager: long deleteDocuments(org.apache.lucene.search.Query)>($r0);

        return;
    }

    public com.google.common.collect.Multimap retrievePerUserWaveView(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.apache.lucene.search.ScoreDoc r16;
        org.apache.lucene.index.Term $r4;
        org.waveprotocol.wave.model.wave.ParticipantId r0;
        org.apache.lucene.document.Document $r17;
        com.google.common.collect.HashMultimap $r1;
        org.apache.lucene.search.ScoreDoc[] r15;
        org.apache.lucene.search.BooleanClause$Occur $r8;
        org.waveprotocol.wave.model.id.WaveId $r21;
        org.apache.lucene.search.Sort $r13;
        java.util.logging.Logger $r28, $r36, $r43, $r50;
        java.lang.StringBuilder $r27, $r30, $r31, $r35, $r38, $r39, $r42, $r45, $r46, $r49, $r52, $r53;
        org.apache.lucene.search.TopFieldDocs $r14;
        org.apache.lucene.search.IndexSearcher $r12;
        org.waveprotocol.box.server.waveserver.IndexFieldType $r5, $r18, $r22;
        java.lang.Throwable $r33;
        org.apache.lucene.search.NRTManager $r10;
        org.waveprotocol.wave.model.id.WaveletId $r25;
        java.util.logging.Level $r29, $r37, $r44, $r51;
        int i0, $i1, i2;
        java.lang.String $r6, $r7, $r19, $r20, $r23, $r24, $r32, $r40, $r47, $r54;
        java.io.IOException $r26, $r34, $r41, $r48;
        org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl r9;
        org.apache.lucene.search.TermQuery $r3;
        org.apache.lucene.search.BooleanQuery $r2;
        org.apache.lucene.search.SearcherManager $r11;

        r9 := @this: org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = staticinvoke <com.google.common.collect.HashMultimap: com.google.common.collect.HashMultimap create()>();

        $r2 = new org.apache.lucene.search.BooleanQuery;

        specialinvoke $r2.<org.apache.lucene.search.BooleanQuery: void <init>()>();

        $r3 = new org.apache.lucene.search.TermQuery;

        $r4 = new org.apache.lucene.index.Term;

        $r5 = <org.waveprotocol.box.server.waveserver.IndexFieldType: org.waveprotocol.box.server.waveserver.IndexFieldType WITH>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.box.server.waveserver.IndexFieldType: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        specialinvoke $r4.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>($r6, $r7);

        specialinvoke $r3.<org.apache.lucene.search.TermQuery: void <init>(org.apache.lucene.index.Term)>($r4);

        $r8 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        virtualinvoke $r2.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r3, $r8);

        $r10 = r9.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.search.NRTManager nrtManager>;

        $r11 = virtualinvoke $r10.<org.apache.lucene.search.NRTManager: org.apache.lucene.search.SearcherManager getSearcherManager(boolean)>(1);

        $r12 = virtualinvoke $r11.<org.apache.lucene.search.SearcherManager: org.apache.lucene.search.IndexSearcher acquire()>();

     label01:
        $r13 = <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.search.Sort LMT_ASC_SORT>;

        $r14 = virtualinvoke $r12.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.search.TopFieldDocs search(org.apache.lucene.search.Query,int,org.apache.lucene.search.Sort)>($r2, 10000, $r13);

        r15 = $r14.<org.apache.lucene.search.TopDocs: org.apache.lucene.search.ScoreDoc[] scoreDocs>;

        i0 = lengthof r15;

        i2 = 0;

     label02:
        if i2 >= i0 goto label03;

        r16 = r15[i2];

        $i1 = r16.<org.apache.lucene.search.ScoreDoc: int doc>;

        $r17 = virtualinvoke $r12.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.document.Document doc(int)>($i1);

        $r18 = <org.waveprotocol.box.server.waveserver.IndexFieldType: org.waveprotocol.box.server.waveserver.IndexFieldType WAVEID>;

        $r19 = virtualinvoke $r18.<org.waveprotocol.box.server.waveserver.IndexFieldType: java.lang.String toString()>();

        $r20 = virtualinvoke $r17.<org.apache.lucene.document.Document: java.lang.String get(java.lang.String)>($r19);

        $r21 = staticinvoke <org.waveprotocol.wave.model.id.WaveId: org.waveprotocol.wave.model.id.WaveId deserialise(java.lang.String)>($r20);

        $r22 = <org.waveprotocol.box.server.waveserver.IndexFieldType: org.waveprotocol.box.server.waveserver.IndexFieldType WAVELETID>;

        $r23 = virtualinvoke $r22.<org.waveprotocol.box.server.waveserver.IndexFieldType: java.lang.String toString()>();

        $r24 = virtualinvoke $r17.<org.apache.lucene.document.Document: java.lang.String get(java.lang.String)>($r23);

        $r25 = staticinvoke <org.waveprotocol.wave.model.id.WaveletId: org.waveprotocol.wave.model.id.WaveletId deserialise(java.lang.String)>($r24);

        interfaceinvoke $r1.<com.google.common.collect.Multimap: boolean put(java.lang.Object,java.lang.Object)>($r21, $r25);

        i2 = i2 + 1;

        goto label02;

     label03:
        virtualinvoke $r11.<org.apache.lucene.search.SearcherManager: void release(org.apache.lucene.search.IndexSearcher)>($r12);

     label04:
        goto label06;

     label05:
        $r48 := @caughtexception;

        $r50 = <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: java.util.logging.Logger LOG>;

        $r51 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close searcher. ");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r50.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r51, $r54, $r48);

     label06:
        goto label17;

     label07:
        $r41 := @caughtexception;

        $r43 = <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: java.util.logging.Logger LOG>;

        $r44 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Search failed: ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r43.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r44, $r47, $r41);

     label08:
        virtualinvoke $r11.<org.apache.lucene.search.SearcherManager: void release(org.apache.lucene.search.IndexSearcher)>($r12);

     label09:
        goto label11;

     label10:
        $r34 := @caughtexception;

        $r36 = <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: java.util.logging.Logger LOG>;

        $r37 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close searcher. ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r36.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r37, $r40, $r34);

     label11:
        goto label17;

     label12:
        $r33 := @caughtexception;

     label13:
        virtualinvoke $r11.<org.apache.lucene.search.SearcherManager: void release(org.apache.lucene.search.IndexSearcher)>($r12);

     label14:
        goto label16;

     label15:
        $r26 := @caughtexception;

        $r28 = <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: java.util.logging.Logger LOG>;

        $r29 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close searcher. ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r28.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r29, $r32, $r26);

     label16:
        throw $r33;

     label17:
        return $r1;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label01 to label03 with label07;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label03 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    static org.waveprotocol.box.server.waveserver.ReadableWaveletDataProvider access$000(org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl)
    {
        org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl r0;
        org.waveprotocol.box.server.waveserver.ReadableWaveletDataProvider $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.waveprotocol.box.server.waveserver.ReadableWaveletDataProvider waveletProvider>;

        return $r1;
    }

    static void access$100(org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl, org.waveprotocol.wave.model.wave.data.ReadableWaveletData) throws org.waveprotocol.box.server.waveserver.IndexException
    {
        org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl r0;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: void updateIndex(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>(r1);

        return;
    }

    static java.util.logging.Logger access$200()
    {
        java.util.logging.Logger $r0;

        $r0 = <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: java.util.logging.Logger LOG>;

        return $r0;
    }

    static org.apache.lucene.search.NRTManager access$300(org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl)
    {
        org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl r0;
        org.apache.lucene.search.NRTManager $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.search.NRTManager nrtManager>;

        return $r1;
    }

    static void access$400(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.apache.lucene.search.NRTManager) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r0;
        org.apache.lucene.search.NRTManager r1;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r1 := @parameter1: org.apache.lucene.search.NRTManager;

        staticinvoke <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: void removeIndex(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.apache.lucene.search.NRTManager)>(r0, r1);

        return;
    }

    static void <clinit>()
    {
        org.apache.lucene.search.Sort $r5;
        java.lang.Class $r0;
        java.lang.String $r1;
        org.apache.lucene.search.SortField $r6;
        java.util.logging.Logger $r2;
        org.apache.lucene.util.Version $r4;
        java.util.concurrent.ExecutorService $r3;

        <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: int MAX_WAVES> = 10000;

        <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: double MAX_STALE_SEC> = 1.0;

        <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: double MIN_STALE_SEC> = 0.025;

        $r0 = class "Lorg/waveprotocol/box/server/waveserver/LucenePerUserWaveViewHandlerImpl;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: java.util.logging.Logger LOG> = $r2;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>();

        <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: java.util.concurrent.Executor executor> = $r3;

        $r4 = <org.apache.lucene.util.Version: org.apache.lucene.util.Version LUCENE_35>;

        <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.util.Version LUCENE_VERSION> = $r4;

        $r5 = new org.apache.lucene.search.Sort;

        $r6 = new org.apache.lucene.search.SortField;

        specialinvoke $r6.<org.apache.lucene.search.SortField: void <init>(java.lang.String,int)>("title", 6);

        specialinvoke $r5.<org.apache.lucene.search.Sort: void <init>(org.apache.lucene.search.SortField)>($r6);

        <org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl: org.apache.lucene.search.Sort LMT_ASC_SORT> = $r5;

        return;
    }
}
