abstract class org.codehaus.stax2.ri.typed.Base64DecoderBase extends java.lang.Object
{
    static final int STATE_INITIAL;
    static final int STATE_VALID_1;
    static final int STATE_VALID_2;
    static final int STATE_VALID_3;
    static final int STATE_OUTPUT_3;
    static final int STATE_OUTPUT_2;
    static final int STATE_OUTPUT_1;
    static final int STATE_VALID_2_AND_PADDING;
    static final int INT_SPACE;
    org.codehaus.stax2.typed.Base64Variant _variant;
    int _state;
    int _decodedData;
    org.codehaus.stax2.ri.Stax2Util$ByteAggregator _byteAggr;

    protected void <init>()
    {
        org.codehaus.stax2.ri.typed.Base64DecoderBase r0;

        r0 := @this: org.codehaus.stax2.ri.typed.Base64DecoderBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: int _state> = 0;

        r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: org.codehaus.stax2.ri.Stax2Util$ByteAggregator _byteAggr> = null;

        return;
    }

    public abstract int decode(byte[], int, int) throws java.lang.IllegalArgumentException;

    public final boolean hasData()
    {
        org.codehaus.stax2.ri.typed.Base64DecoderBase r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.codehaus.stax2.ri.typed.Base64DecoderBase;

        $i0 = r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: int _state>;

        if $i0 < 4 goto label1;

        $i1 = r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: int _state>;

        if $i1 > 6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final int endOfContent()
    {
        org.codehaus.stax2.ri.typed.Base64DecoderBase r0;
        org.codehaus.stax2.typed.Base64Variant $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i13;
        boolean $z0;

        r0 := @this: org.codehaus.stax2.ri.typed.Base64DecoderBase;

        $i0 = r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: int _state>;

        if $i0 == 0 goto label1;

        $i1 = r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: int _state>;

        if $i1 == 4 goto label1;

        $i2 = r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: int _state>;

        if $i2 == 5 goto label1;

        $i3 = r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: int _state>;

        if $i3 != 6 goto label2;

     label1:
        return 0;

     label2:
        $r1 = r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: org.codehaus.stax2.typed.Base64Variant _variant>;

        $z0 = virtualinvoke $r1.<org.codehaus.stax2.typed.Base64Variant: boolean usesPadding()>();

        if $z0 == 0 goto label3;

        $i11 = (int) -1;

        return $i11;

     label3:
        $i4 = r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: int _state>;

        if $i4 != 2 goto label4;

        r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: int _state> = 6;

        $i8 = r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: int _decodedData>;

        $i9 = $i8 >> 4;

        r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: int _decodedData> = $i9;

        return 1;

     label4:
        $i5 = r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: int _state>;

        if $i5 != 3 goto label5;

        $i6 = r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: int _decodedData>;

        $i7 = $i6 >> 2;

        r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: int _decodedData> = $i7;

        r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: int _state> = 5;

        return 2;

     label5:
        $i13 = (int) -1;

        return $i13;
    }

    public byte[] decodeCompletely()
    {
        byte[] $r2, r4;
        org.codehaus.stax2.ri.Stax2Util$ByteAggregator $r1;
        org.codehaus.stax2.ri.typed.Base64DecoderBase r0;
        java.lang.IllegalArgumentException $r3;
        int $i0, i1, i2, $i3;

        r0 := @this: org.codehaus.stax2.ri.typed.Base64DecoderBase;

        $r1 = virtualinvoke r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: org.codehaus.stax2.ri.Stax2Util$ByteAggregator getByteAggregator()>();

        r4 = virtualinvoke $r1.<org.codehaus.stax2.ri.Stax2Util$ByteAggregator: byte[] startAggregation()>();

     label1:
        i1 = 0;

        i2 = lengthof r4;

     label2:
        $i3 = virtualinvoke r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: int decode(byte[],int,int)>(r4, i1, i2);

        if $i3 >= 1 goto label5;

        $i0 = virtualinvoke r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: int endOfContent()>();

        if $i0 >= 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incomplete base64 triplet at the end of decoded content");

        throw $r3;

     label3:
        if $i0 <= 0 goto label4;

        goto label6;

     label4:
        $r2 = virtualinvoke $r1.<org.codehaus.stax2.ri.Stax2Util$ByteAggregator: byte[] aggregateAll(byte[],int)>(r4, i1);

        return $r2;

     label5:
        i1 = i1 + $i3;

        i2 = i2 - $i3;

     label6:
        if i2 > 0 goto label2;

        r4 = virtualinvoke $r1.<org.codehaus.stax2.ri.Stax2Util$ByteAggregator: byte[] addFullBlock(byte[])>(r4);

        goto label1;
    }

    public org.codehaus.stax2.ri.Stax2Util$ByteAggregator getByteAggregator()
    {
        org.codehaus.stax2.ri.Stax2Util$ByteAggregator $r1, $r2, $r3;
        org.codehaus.stax2.ri.typed.Base64DecoderBase r0;

        r0 := @this: org.codehaus.stax2.ri.typed.Base64DecoderBase;

        $r1 = r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: org.codehaus.stax2.ri.Stax2Util$ByteAggregator _byteAggr>;

        if $r1 != null goto label1;

        $r3 = new org.codehaus.stax2.ri.Stax2Util$ByteAggregator;

        specialinvoke $r3.<org.codehaus.stax2.ri.Stax2Util$ByteAggregator: void <init>()>();

        r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: org.codehaus.stax2.ri.Stax2Util$ByteAggregator _byteAggr> = $r3;

     label1:
        $r2 = r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: org.codehaus.stax2.ri.Stax2Util$ByteAggregator _byteAggr>;

        return $r2;
    }

    protected java.lang.IllegalArgumentException reportInvalidChar(char, int) throws java.lang.IllegalArgumentException
    {
        org.codehaus.stax2.ri.typed.Base64DecoderBase r0;
        int i1;
        char c0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.codehaus.stax2.ri.typed.Base64DecoderBase;

        c0 := @parameter0: char;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: java.lang.IllegalArgumentException reportInvalidChar(char,int,java.lang.String)>(c0, i1, null);

        return $r1;
    }

    protected java.lang.IllegalArgumentException reportInvalidChar(char, int, java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.codehaus.stax2.ri.typed.Base64DecoderBase r0;
        org.codehaus.stax2.typed.Base64Variant $r1, $r22;
        boolean $z0, $z1, $z2;
        java.lang.StringBuffer $r3, $r5, $r6, $r10, $r11, $r12, $r14, $r15, $r16, $r18, $r19, $r21, $r23, $r24, $r25, $r26, $r28, $r30, $r31, $r32, $r33, $r35, $r36, $r37, $r38, $r39;
        int i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r4, r7, $r17, $r29, r34;
        char c0, $c1;
        java.lang.IllegalArgumentException $r40;

        r0 := @this: org.codehaus.stax2.ri.typed.Base64DecoderBase;

        c0 := @parameter0: char;

        i2 := @parameter1: int;

        r7 := @parameter2: java.lang.String;

        $i5 = (int) c0;

        if $i5 > 32 goto label1;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal white space character (code 0x");

        $i6 = (int) c0;

        $r29 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        $r30 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") as character #");

        $i4 = i2 + 1;

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" of 4-char base64 unit: can only used between units");

        r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label5;

     label1:
        $r1 = r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: org.codehaus.stax2.typed.Base64Variant _variant>;

        $z0 = virtualinvoke $r1.<org.codehaus.stax2.typed.Base64Variant: boolean usesPaddingChar(char)>(c0);

        if $z0 == 0 goto label2;

        $r36 = new java.lang.StringBuffer;

        specialinvoke $r36.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected padding character (\'");

        $r22 = r0.<org.codehaus.stax2.ri.typed.Base64DecoderBase: org.codehaus.stax2.typed.Base64Variant _variant>;

        $c1 = virtualinvoke $r22.<org.codehaus.stax2.typed.Base64Variant: char getPaddingChar()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\') as character #");

        $i3 = i2 + 1;

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" of 4-char base64 unit: padding only legal as 3rd or 4th character");

        r34 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label5;

     label2:
        $z1 = staticinvoke <java.lang.Character: boolean isDefined(char)>(c0);

        if $z1 == 0 goto label3;

        $z2 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(c0);

        if $z2 == 0 goto label4;

     label3:
        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal character (code 0x");

        $i7 = (int) c0;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i7);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") in base64 content");

        r34 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label5;

     label4:
        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal character \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' (code 0x");

        $i8 = (int) c0;

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i8);

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") in base64 content");

        r34 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

     label5:
        if r7 == null goto label6;

        $r39 = new java.lang.StringBuffer;

        specialinvoke $r39.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r34);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        r34 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

     label6:
        $r40 = new java.lang.IllegalArgumentException;

        specialinvoke $r40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r34);

        return $r40;
    }

    public static void <clinit>()
    {
        <org.codehaus.stax2.ri.typed.Base64DecoderBase: int INT_SPACE> = 32;

        <org.codehaus.stax2.ri.typed.Base64DecoderBase: int STATE_VALID_2_AND_PADDING> = 7;

        <org.codehaus.stax2.ri.typed.Base64DecoderBase: int STATE_OUTPUT_1> = 6;

        <org.codehaus.stax2.ri.typed.Base64DecoderBase: int STATE_OUTPUT_2> = 5;

        <org.codehaus.stax2.ri.typed.Base64DecoderBase: int STATE_OUTPUT_3> = 4;

        <org.codehaus.stax2.ri.typed.Base64DecoderBase: int STATE_VALID_3> = 3;

        <org.codehaus.stax2.ri.typed.Base64DecoderBase: int STATE_VALID_2> = 2;

        <org.codehaus.stax2.ri.typed.Base64DecoderBase: int STATE_VALID_1> = 1;

        <org.codehaus.stax2.ri.typed.Base64DecoderBase: int STATE_INITIAL> = 0;

        return;
    }
}
