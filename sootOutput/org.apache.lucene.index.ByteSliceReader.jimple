final class org.apache.lucene.index.ByteSliceReader extends org.apache.lucene.store.DataInput
{
    org.apache.lucene.util.ByteBlockPool pool;
    int bufferUpto;
    byte[] buffer;
    public int upto;
    int limit;
    int level;
    public int bufferOffset;
    public int endIndex;
    static final boolean $assertionsDisabled;

    void <init>()
    {
        org.apache.lucene.index.ByteSliceReader r0;

        r0 := @this: org.apache.lucene.index.ByteSliceReader;

        specialinvoke r0.<org.apache.lucene.store.DataInput: void <init>()>();

        return;
    }

    public void init(org.apache.lucene.util.ByteBlockPool, int, int)
    {
        byte[] $r3;
        java.lang.AssertionError $r8, $r9, $r10;
        org.apache.lucene.util.ByteBlockPool r1;
        int[] $r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i17;
        org.apache.lucene.index.ByteSliceReader r0;
        boolean $z0, $z1, $z2;
        byte[][] $r2;

        r0 := @this: org.apache.lucene.index.ByteSliceReader;

        r1 := @parameter0: org.apache.lucene.util.ByteBlockPool;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $z0 = <org.apache.lucene.index.ByteSliceReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i13 = i0 - i1;

        if $i13 >= 0 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $z1 = <org.apache.lucene.index.ByteSliceReader: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i1 >= 0 goto label2;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label2:
        $z2 = <org.apache.lucene.index.ByteSliceReader: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        if i0 >= 0 goto label3;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label3:
        r0.<org.apache.lucene.index.ByteSliceReader: org.apache.lucene.util.ByteBlockPool pool> = r1;

        r0.<org.apache.lucene.index.ByteSliceReader: int endIndex> = i0;

        r0.<org.apache.lucene.index.ByteSliceReader: int level> = 0;

        $i15 = (int) 32768;

        $i2 = i1 / $i15;

        r0.<org.apache.lucene.index.ByteSliceReader: int bufferUpto> = $i2;

        $i3 = r0.<org.apache.lucene.index.ByteSliceReader: int bufferUpto>;

        $i17 = (int) 32768;

        $i4 = $i3 * $i17;

        r0.<org.apache.lucene.index.ByteSliceReader: int bufferOffset> = $i4;

        $r2 = r1.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers>;

        $i5 = r0.<org.apache.lucene.index.ByteSliceReader: int bufferUpto>;

        $r3 = $r2[$i5];

        r0.<org.apache.lucene.index.ByteSliceReader: byte[] buffer> = $r3;

        $i6 = i1 & 32767;

        r0.<org.apache.lucene.index.ByteSliceReader: int upto> = $i6;

        $r4 = <org.apache.lucene.util.ByteBlockPool: int[] LEVEL_SIZE_ARRAY>;

        $i12 = $r4[0];

        $i7 = i1 + $i12;

        if $i7 < i0 goto label4;

        $i11 = i0 & 32767;

        r0.<org.apache.lucene.index.ByteSliceReader: int limit> = $i11;

        goto label5;

     label4:
        $i8 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        $i9 = $i8 + $i12;

        $i10 = $i9 - 4;

        r0.<org.apache.lucene.index.ByteSliceReader: int limit> = $i10;

     label5:
        return;
    }

    public boolean eof()
    {
        java.lang.AssertionError $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.lucene.index.ByteSliceReader r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.ByteSliceReader;

        $z0 = <org.apache.lucene.index.ByteSliceReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i5 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        $i4 = r0.<org.apache.lucene.index.ByteSliceReader: int bufferOffset>;

        $i7 = $i5 + $i4;

        $i6 = r0.<org.apache.lucene.index.ByteSliceReader: int endIndex>;

        if $i7 <= $i6 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i1 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        $i0 = r0.<org.apache.lucene.index.ByteSliceReader: int bufferOffset>;

        $i3 = $i1 + $i0;

        $i2 = r0.<org.apache.lucene.index.ByteSliceReader: int endIndex>;

        if $i3 != $i2 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public byte readByte()
    {
        byte[] $r1;
        java.lang.AssertionError $r2, $r3;
        byte $b4;
        int $i0, $i1, $i2, $i3, $i5, $i6;
        org.apache.lucene.index.ByteSliceReader r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.index.ByteSliceReader;

        $z0 = <org.apache.lucene.index.ByteSliceReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.lucene.index.ByteSliceReader: boolean eof()>();

        if $z2 == 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $z1 = <org.apache.lucene.index.ByteSliceReader: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i6 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        $i5 = r0.<org.apache.lucene.index.ByteSliceReader: int limit>;

        if $i6 <= $i5 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $i1 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        $i0 = r0.<org.apache.lucene.index.ByteSliceReader: int limit>;

        if $i1 != $i0 goto label3;

        virtualinvoke r0.<org.apache.lucene.index.ByteSliceReader: void nextSlice()>();

     label3:
        $r1 = r0.<org.apache.lucene.index.ByteSliceReader: byte[] buffer>;

        $i2 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        $i3 = $i2 + 1;

        r0.<org.apache.lucene.index.ByteSliceReader: int upto> = $i3;

        $b4 = $r1[$i2];

        return $b4;
    }

    public long writeTo(org.apache.lucene.store.DataOutput) throws java.io.IOException
    {
        byte[] $r2, $r3;
        boolean $z0;
        org.apache.lucene.store.DataOutput r1;
        long $l11, $l19, $l24, l25;
        java.lang.AssertionError $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23;
        org.apache.lucene.index.ByteSliceReader r0;

        r0 := @this: org.apache.lucene.index.ByteSliceReader;

        r1 := @parameter0: org.apache.lucene.store.DataOutput;

        l25 = 0L;

     label1:
        $i1 = r0.<org.apache.lucene.index.ByteSliceReader: int limit>;

        $i0 = r0.<org.apache.lucene.index.ByteSliceReader: int bufferOffset>;

        $i3 = $i1 + $i0;

        $i2 = r0.<org.apache.lucene.index.ByteSliceReader: int endIndex>;

        if $i3 != $i2 goto label3;

        $z0 = <org.apache.lucene.index.ByteSliceReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i21 = r0.<org.apache.lucene.index.ByteSliceReader: int endIndex>;

        $i20 = r0.<org.apache.lucene.index.ByteSliceReader: int bufferOffset>;

        $i23 = $i21 - $i20;

        $i22 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        if $i23 >= $i22 goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $r3 = r0.<org.apache.lucene.index.ByteSliceReader: byte[] buffer>;

        $i15 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        $i13 = r0.<org.apache.lucene.index.ByteSliceReader: int limit>;

        $i12 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        $i14 = $i13 - $i12;

        virtualinvoke r1.<org.apache.lucene.store.DataOutput: void writeBytes(byte[],int,int)>($r3, $i15, $i14);

        $i17 = r0.<org.apache.lucene.index.ByteSliceReader: int limit>;

        $i16 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        $i18 = $i17 - $i16;

        $l19 = (long) $i18;

        $l24 = l25 + $l19;

        goto label4;

     label3:
        $r2 = r0.<org.apache.lucene.index.ByteSliceReader: byte[] buffer>;

        $i7 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        $i5 = r0.<org.apache.lucene.index.ByteSliceReader: int limit>;

        $i4 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        $i6 = $i5 - $i4;

        virtualinvoke r1.<org.apache.lucene.store.DataOutput: void writeBytes(byte[],int,int)>($r2, $i7, $i6);

        $i9 = r0.<org.apache.lucene.index.ByteSliceReader: int limit>;

        $i8 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        $i10 = $i9 - $i8;

        $l11 = (long) $i10;

        l25 = l25 + $l11;

        virtualinvoke r0.<org.apache.lucene.index.ByteSliceReader: void nextSlice()>();

        goto label1;

     label4:
        return $l24;
    }

    public void nextSlice()
    {
        byte[] $r1, $r2, $r3, $r4, $r9;
        byte $b1, $b5, $b11, $b17;
        int[] $r5, $r6;
        boolean $z0;
        byte[][] $r8;
        java.lang.AssertionError $r11;
        org.apache.lucene.util.ByteBlockPool $r7;
        short $s2, $s6, $s12, $s18, $s40, $s42, $s44, $s46;
        int $i0, $i3, $i4, $i7, $i8, $i9, $i10, $i13, $i14, $i15, $i16, $i19, i20, $i21, $i22, $i23, i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i41, $i43, $i45, $i47, $i49, $i51;
        org.apache.lucene.index.ByteSliceReader r0;

        r0 := @this: org.apache.lucene.index.ByteSliceReader;

        $r1 = r0.<org.apache.lucene.index.ByteSliceReader: byte[] buffer>;

        $i0 = r0.<org.apache.lucene.index.ByteSliceReader: int limit>;

        $b1 = $r1[$i0];

        $s40 = (short) $b1;

        $s2 = $s40 & 255;

        $i41 = (int) $s2;

        $i8 = $i41 << 24;

        $r2 = r0.<org.apache.lucene.index.ByteSliceReader: byte[] buffer>;

        $i3 = r0.<org.apache.lucene.index.ByteSliceReader: int limit>;

        $i4 = 1 + $i3;

        $b5 = $r2[$i4];

        $s42 = (short) $b5;

        $s6 = $s42 & 255;

        $i43 = (int) $s6;

        $i7 = $i43 << 16;

        $i14 = $i8 + $i7;

        $r3 = r0.<org.apache.lucene.index.ByteSliceReader: byte[] buffer>;

        $i9 = r0.<org.apache.lucene.index.ByteSliceReader: int limit>;

        $i10 = 2 + $i9;

        $b11 = $r3[$i10];

        $s44 = (short) $b11;

        $s12 = $s44 & 255;

        $i45 = (int) $s12;

        $i13 = $i45 << 8;

        $i19 = $i14 + $i13;

        $r4 = r0.<org.apache.lucene.index.ByteSliceReader: byte[] buffer>;

        $i15 = r0.<org.apache.lucene.index.ByteSliceReader: int limit>;

        $i16 = 3 + $i15;

        $b17 = $r4[$i16];

        $s46 = (short) $b17;

        $s18 = $s46 & 255;

        $i47 = (int) $s18;

        i20 = $i19 + $i47;

        $r5 = <org.apache.lucene.util.ByteBlockPool: int[] NEXT_LEVEL_ARRAY>;

        $i21 = r0.<org.apache.lucene.index.ByteSliceReader: int level>;

        $i22 = $r5[$i21];

        r0.<org.apache.lucene.index.ByteSliceReader: int level> = $i22;

        $r6 = <org.apache.lucene.util.ByteBlockPool: int[] LEVEL_SIZE_ARRAY>;

        $i23 = r0.<org.apache.lucene.index.ByteSliceReader: int level>;

        i24 = $r6[$i23];

        $i49 = (int) 32768;

        $i25 = i20 / $i49;

        r0.<org.apache.lucene.index.ByteSliceReader: int bufferUpto> = $i25;

        $i26 = r0.<org.apache.lucene.index.ByteSliceReader: int bufferUpto>;

        $i51 = (int) 32768;

        $i27 = $i26 * $i51;

        r0.<org.apache.lucene.index.ByteSliceReader: int bufferOffset> = $i27;

        $r7 = r0.<org.apache.lucene.index.ByteSliceReader: org.apache.lucene.util.ByteBlockPool pool>;

        $r8 = $r7.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers>;

        $i28 = r0.<org.apache.lucene.index.ByteSliceReader: int bufferUpto>;

        $r9 = $r8[$i28];

        r0.<org.apache.lucene.index.ByteSliceReader: byte[] buffer> = $r9;

        $i29 = i20 & 32767;

        r0.<org.apache.lucene.index.ByteSliceReader: int upto> = $i29;

        $i31 = i20 + i24;

        $i30 = r0.<org.apache.lucene.index.ByteSliceReader: int endIndex>;

        if $i31 < $i30 goto label2;

        $z0 = <org.apache.lucene.index.ByteSliceReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i38 = r0.<org.apache.lucene.index.ByteSliceReader: int endIndex>;

        $i39 = $i38 - i20;

        if $i39 > 0 goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        $i36 = r0.<org.apache.lucene.index.ByteSliceReader: int endIndex>;

        $i35 = r0.<org.apache.lucene.index.ByteSliceReader: int bufferOffset>;

        $i37 = $i36 - $i35;

        r0.<org.apache.lucene.index.ByteSliceReader: int limit> = $i37;

        goto label3;

     label2:
        $i32 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        $i33 = $i32 + i24;

        $i34 = $i33 - 4;

        r0.<org.apache.lucene.index.ByteSliceReader: int limit> = $i34;

     label3:
        return;
    }

    public void readBytes(byte[], int, int)
    {
        byte[] r1, $r2, $r3;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, i7, i8;
        org.apache.lucene.index.ByteSliceReader r0;

        r0 := @this: org.apache.lucene.index.ByteSliceReader;

        r1 := @parameter0: byte[];

        i7 := @parameter1: int;

        i8 := @parameter2: int;

     label1:
        if i8 <= 0 goto label4;

        $i1 = r0.<org.apache.lucene.index.ByteSliceReader: int limit>;

        $i0 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        i2 = $i1 - $i0;

        if i2 >= i8 goto label2;

        $r3 = r0.<org.apache.lucene.index.ByteSliceReader: byte[] buffer>;

        $i6 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i6, r1, i7, i2);

        i7 = i7 + i2;

        i8 = i8 - i2;

        virtualinvoke r0.<org.apache.lucene.index.ByteSliceReader: void nextSlice()>();

        goto label3;

     label2:
        $r2 = r0.<org.apache.lucene.index.ByteSliceReader: byte[] buffer>;

        $i3 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i3, r1, i7, i8);

        $i4 = r0.<org.apache.lucene.index.ByteSliceReader: int upto>;

        $i5 = $i4 + i8;

        r0.<org.apache.lucene.index.ByteSliceReader: int upto> = $i5;

        goto label4;

     label3:
        goto label1;

     label4:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/ByteSliceReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.ByteSliceReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
