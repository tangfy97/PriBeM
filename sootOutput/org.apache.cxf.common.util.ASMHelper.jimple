public class org.apache.cxf.common.util.ASMHelper extends java.lang.Object
{
    protected static final java.util.Map PRIMITIVE_MAP;
    protected static final java.util.Map NONPRIMITIVE_MAP;
    protected static final java.util.Map PRIMITIVE_ZERO_MAP;
    protected static final java.util.Map LOADER_MAP;
    protected static boolean badASM;
    private static java.lang.Class cwClass;

    public void <init>()
    {
        org.apache.cxf.common.util.ASMHelper r0;

        r0 := @this: org.apache.cxf.common.util.ASMHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void tryClass(java.lang.String)
    {
        java.lang.Throwable $r12;
        java.lang.Package $r4;
        java.lang.Class[] $r10;
        java.lang.Class $r0, $r2, $r9, $r11;
        java.lang.StringBuilder $r3, $r6, $r7;
        java.lang.String r1, $r5, $r8;

        r1 := @parameter0: java.lang.String;

        $r0 = <org.apache.cxf.common.util.ASMHelper: java.lang.Class cwClass>;

        if $r0 != null goto label4;

     label1:
        $r2 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>(r1, class "Lorg/apache/cxf/common/util/ASMHelper;");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.Package getPackage()>();

        $r5 = virtualinvoke $r4.<java.lang.Package: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".MethodVisitor");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>($r8, $r2);

        $r10 = newarray (java.lang.Class)[4];

        $r11 = <java.lang.Integer: java.lang.Class TYPE>;

        $r10[0] = $r11;

        $r10[1] = class "Ljava/lang/String;";

        $r10[2] = class "Ljava/lang/String;";

        $r10[3] = class "Ljava/lang/String;";

        virtualinvoke $r9.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("visitFrame", $r10);

        <org.apache.cxf.common.util.ASMHelper: java.lang.Class cwClass> = $r2;

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static java.lang.Class getASMClassWriterClass()
    {
        return class "Lorg/objectweb/asm/ClassWriter;";
    }

    private static synchronized java.lang.Class getASMClass() throws java.lang.ClassNotFoundException
    {
        java.lang.Class $r0, $r1, $r2, $r3;

        $r0 = <org.apache.cxf.common.util.ASMHelper: java.lang.Class cwClass>;

        if $r0 != null goto label1;

        staticinvoke <org.apache.cxf.common.util.ASMHelper: void tryClass(java.lang.String)>("org.objectweb.asm.ClassWriter");

        staticinvoke <org.apache.cxf.common.util.ASMHelper: void tryClass(java.lang.String)>("org.apache.xbean.asm4.ClassWriter");

        staticinvoke <org.apache.cxf.common.util.ASMHelper: void tryClass(java.lang.String)>("org.apache.xbean.asm.ClassWriter");

        staticinvoke <org.apache.cxf.common.util.ASMHelper: void tryClass(java.lang.String)>("org.springframework.asm.ClassWriter");

        $r1 = <org.apache.cxf.common.util.ASMHelper: java.lang.Class cwClass>;

        if $r1 != null goto label1;

        $r2 = staticinvoke <org.apache.cxf.common.util.ASMHelper: java.lang.Class getASMClassWriterClass()>();

        <org.apache.cxf.common.util.ASMHelper: java.lang.Class cwClass> = $r2;

     label1:
        $r3 = <org.apache.cxf.common.util.ASMHelper: java.lang.Class cwClass>;

        return $r3;
    }

    protected static java.lang.String getMethodSignature(java.lang.reflect.Method)
    {
        java.lang.Class[] $r2;
        int i0, i1;
        java.lang.StringBuilder $r0;
        java.lang.Class $r3, r6;
        java.lang.String $r4, $r5, $r7;
        java.lang.reflect.Method r1;

        r1 := @parameter0: java.lang.reflect.Method;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("(");

        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r6 = $r2[i1];

        $r7 = staticinvoke <org.apache.cxf.common.util.ASMHelper: java.lang.String getClassCode(java.lang.Class)>(r6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r4 = staticinvoke <org.apache.cxf.common.util.ASMHelper: java.lang.String getClassCode(java.lang.Class)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String periodToSlashes(java.lang.String)
    {
        int $i0, i2, $i3;
        char[] $r1;
        char $c1;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        i2 = 0;

     label1:
        $i0 = lengthof $r1;

        if i2 >= $i0 goto label3;

        $c1 = $r1[i2];

        $i3 = (int) $c1;

        if $i3 != 46 goto label2;

        $r1[i2] = 47;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>($r1);

        return $r3;
    }

    public static java.lang.String getClassCode(java.lang.Class)
    {
        java.util.Map $r15;
        java.lang.String $r4, $r5, $r8, $r12, $r14, $r17;
        boolean $z0, $z1;
        java.lang.Class r0, $r1, $r11;
        java.lang.StringBuilder $r2, $r3, $r6, $r7, $r9, $r10, $r13;
        java.lang.Object $r16;

        r0 := @parameter0: java.lang.Class;

        $r1 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 != $r1 goto label1;

        return "V";

     label1:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label2;

        $r15 = <org.apache.cxf.common.util.ASMHelper: java.util.Map PRIMITIVE_MAP>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r17 = (java.lang.String) $r16;

        return $r17;

     label2:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r11 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $r12 = staticinvoke <org.apache.cxf.common.util.ASMHelper: java.lang.String getClassCode(java.lang.Class)>($r11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("L");

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r5 = staticinvoke <org.apache.cxf.common.util.ASMHelper: java.lang.String periodToSlashes(java.lang.String)>($r4);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String getClassCode(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.reflect.Type r0, $r8, $r10, $r20, $r24, r33, r35, r36;
        java.lang.reflect.Type[] $r2, $r3, $r12, $r14;
        java.lang.StringBuilder $r1, $r7, $r16, $r17, $r18, $r22, $r23, $r26;
        java.lang.reflect.WildcardType r34;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i8;
        java.lang.String $r4, $r5, $r6, $r9, $r11, $r13, $r19, $r21, $r25, $r27, $r29;
        java.lang.reflect.TypeVariable r31;
        java.lang.IllegalArgumentException $r15;
        java.lang.reflect.ParameterizedType r32;
        java.lang.Class $r28;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label01;

        $r28 = (java.lang.Class) r0;

        $r29 = staticinvoke <org.apache.cxf.common.util.ASMHelper: java.lang.String getClassCode(java.lang.Class)>($r28);

        return $r29;

     label01:
        $z1 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z1 == 0 goto label02;

        r30 = (java.lang.reflect.GenericArrayType) r0;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r24 = interfaceinvoke r30.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r25 = staticinvoke <org.apache.cxf.common.util.ASMHelper: java.lang.String getClassCode(java.lang.reflect.Type)>($r24);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r27;

     label02:
        $z2 = r0 instanceof java.lang.reflect.TypeVariable;

        if $z2 == 0 goto label04;

        r31 = (java.lang.reflect.TypeVariable) r0;

        $r14 = interfaceinvoke r31.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        if $r14 == null goto label03;

        $i2 = lengthof $r14;

        if $i2 != 1 goto label03;

        $r20 = $r14[0];

        $r21 = staticinvoke <org.apache.cxf.common.util.ASMHelper: java.lang.String getClassCode(java.lang.reflect.Type)>($r20);

        return $r21;

     label03:
        $r15 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to determine type for: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label04:
        $z3 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z3 == 0 goto label08;

        r32 = (java.lang.reflect.ParameterizedType) r0;

        $r7 = new java.lang.StringBuilder;

        $r8 = interfaceinvoke r32.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r9 = staticinvoke <org.apache.cxf.common.util.ASMHelper: java.lang.String getClassCode(java.lang.reflect.Type)>($r8);

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        $r10 = interfaceinvoke r32.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z5 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Enum;");

        if $z5 != 0 goto label07;

        $i0 = virtualinvoke $r7.<java.lang.StringBuilder: int length()>();

        $i1 = $i0 - 1;

        virtualinvoke $r7.<java.lang.StringBuilder: void setLength(int)>($i1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);

        $r12 = interfaceinvoke r32.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        i3 = lengthof $r12;

        i4 = 0;

     label05:
        if i4 >= i3 goto label06;

        r33 = $r12[i4];

        $r13 = staticinvoke <org.apache.cxf.common.util.ASMHelper: java.lang.String getClassCode(java.lang.reflect.Type)>(r33);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        i4 = i4 + 1;

        goto label05;

     label06:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">;");

     label07:
        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

     label08:
        $z4 = r0 instanceof java.lang.reflect.WildcardType;

        if $z4 == 0 goto label13;

        r34 = (java.lang.reflect.WildcardType) r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r34.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $r3 = interfaceinvoke r34.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        i5 = lengthof $r3;

        i6 = 0;

     label09:
        if i6 >= i5 goto label10;

        r35 = $r3[i6];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        $r6 = staticinvoke <org.apache.cxf.common.util.ASMHelper: java.lang.String getClassCode(java.lang.reflect.Type)>(r35);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        i6 = i6 + 1;

        goto label09;

     label10:
        i7 = lengthof $r2;

        i8 = 0;

     label11:
        if i8 >= i7 goto label12;

        r36 = $r2[i8];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r5 = staticinvoke <org.apache.cxf.common.util.ASMHelper: java.lang.String getClassCode(java.lang.reflect.Type)>(r36);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i8 = i8 + 1;

        goto label11;

     label12:
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label13:
        return null;
    }

    public org.apache.cxf.common.util.ASMHelper$ClassWriter createClassWriter()
    {
        java.lang.Integer $r22;
        boolean $z0;
        org.apache.cxf.common.util.ASMHelper r28;
        java.lang.Throwable $r11, $r12, $r23, $r26;
        java.lang.Object[] $r21, $r24;
        java.lang.reflect.Constructor $r6, $r16;
        int $i0, $i1, i2;
        java.lang.Boolean $r25;
        java.lang.Class[] $r3, $r7, $r13;
        java.lang.RuntimeException $r27;
        java.lang.reflect.Field $r18, $r20;
        org.apache.cxf.common.util.ASMHelper$ClassWriter $r1;
        java.lang.Object $r0, r29;
        java.lang.Class $r2, $r4, $r5, $r8, $r9, $r10, $r14, $r15, $r17, $r19;

        r28 := @this: org.apache.cxf.common.util.ASMHelper;

        r29 = null;

        $z0 = <org.apache.cxf.common.util.ASMHelper: boolean badASM>;

        if $z0 != 0 goto label13;

        $r2 = <org.apache.cxf.common.util.ASMHelper: java.lang.Class cwClass>;

        if $r2 != null goto label04;

     label01:
        $r10 = staticinvoke <org.apache.cxf.common.util.ASMHelper: java.lang.Class getASMClass()>();

        <org.apache.cxf.common.util.ASMHelper: java.lang.Class cwClass> = $r10;

     label02:
        goto label04;

     label03:
        $r26 := @caughtexception;

        <org.apache.cxf.common.util.ASMHelper: boolean badASM> = 1;

        $r27 = new java.lang.RuntimeException;

        specialinvoke $r27.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("No ASM ClassWriterFound", $r26);

        throw $r27;

     label04:
        $r5 = <org.apache.cxf.common.util.ASMHelper: java.lang.Class cwClass>;

        $r3 = newarray (java.lang.Class)[1];

        $r4 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r3[0] = $r4;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

     label05:
        $r9 = <org.apache.cxf.common.util.ASMHelper: java.lang.Class cwClass>;

        $r7 = newarray (java.lang.Class)[1];

        $r8 = <java.lang.Integer: java.lang.Class TYPE>;

        $r7[0] = $r8;

        virtualinvoke $r9.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("newConstInt", $r7);

        <org.apache.cxf.common.util.ASMHelper: boolean badASM> = 1;

     label06:
        goto label08;

     label07:
        $r23 := @caughtexception;

        $r24 = newarray (java.lang.Object)[1];

        $r25 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r24[0] = $r25;

        r29 = virtualinvoke $r6.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r24);

     label08:
        goto label13;

     label09:
        $r12 := @caughtexception;

     label10:
        $r15 = <org.apache.cxf.common.util.ASMHelper: java.lang.Class cwClass>;

        $r13 = newarray (java.lang.Class)[1];

        $r14 = <java.lang.Integer: java.lang.Class TYPE>;

        $r13[0] = $r14;

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r13);

        $r17 = <org.apache.cxf.common.util.ASMHelper: java.lang.Class cwClass>;

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("COMPUTE_MAXS");

        $i0 = virtualinvoke $r18.<java.lang.reflect.Field: int getInt(java.lang.Object)>(null);

        $r19 = <org.apache.cxf.common.util.ASMHelper: java.lang.Class cwClass>;

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("COMPUTE_FRAMES");

        $i1 = virtualinvoke $r20.<java.lang.reflect.Field: int getInt(java.lang.Object)>(null);

        i2 = $i0 | $i1;

        $r21 = newarray (java.lang.Object)[1];

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r21[0] = $r22;

        r29 = virtualinvoke $r16.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r21);

     label11:
        goto label13;

     label12:
        $r11 := @caughtexception;

     label13:
        if r29 == null goto label14;

        $r0 = staticinvoke <org.apache.cxf.common.util.ReflectionInvokationHandler: java.lang.Object createProxyWrapper(java.lang.Object,java.lang.Class)>(r29, class "Lorg/apache/cxf/common/util/ASMHelper$ClassWriter;");

        $r1 = (org.apache.cxf.common.util.ASMHelper$ClassWriter) $r0;

        return $r1;

     label14:
        return null;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public java.lang.Class loadClass(java.lang.String, java.lang.Class, byte[])
    {
        java.lang.Throwable $r6;
        byte[] r4;
        org.apache.cxf.common.util.ASMHelper r7;
        java.lang.Class r0, $r3, $r5;
        java.lang.String r2;
        org.apache.cxf.common.util.ASMHelper$TypeHelperClassLoader $r1;

        r7 := @this: org.apache.cxf.common.util.ASMHelper;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        r4 := @parameter2: byte[];

        $r1 = staticinvoke <org.apache.cxf.common.util.ASMHelper: org.apache.cxf.common.util.ASMHelper$TypeHelperClassLoader getTypeHelperClassLoader(java.lang.Class)>(r0);

        entermonitor $r1;

     label1:
        $r3 = virtualinvoke $r1.<org.apache.cxf.common.util.ASMHelper$TypeHelperClassLoader: java.lang.Class lookupDefinedClass(java.lang.String)>(r2);

        if $r3 != null goto label3;

        $r5 = virtualinvoke $r1.<org.apache.cxf.common.util.ASMHelper$TypeHelperClassLoader: java.lang.Class defineClass(java.lang.String,byte[])>(r2, r4);

        exitmonitor $r1;

     label2:
        return $r5;

     label3:
        exitmonitor $r1;

     label4:
        return $r3;

     label5:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.lang.Class findClass(java.lang.String, java.lang.Class)
    {
        org.apache.cxf.common.util.ASMHelper r4;
        java.lang.Class r0, $r3;
        java.lang.String r2;
        org.apache.cxf.common.util.ASMHelper$TypeHelperClassLoader $r1;

        r4 := @this: org.apache.cxf.common.util.ASMHelper;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        $r1 = staticinvoke <org.apache.cxf.common.util.ASMHelper: org.apache.cxf.common.util.ASMHelper$TypeHelperClassLoader getTypeHelperClassLoader(java.lang.Class)>(r0);

        $r3 = virtualinvoke $r1.<org.apache.cxf.common.util.ASMHelper$TypeHelperClassLoader: java.lang.Class lookupDefinedClass(java.lang.String)>(r2);

        return $r3;
    }

    private static synchronized org.apache.cxf.common.util.ASMHelper$TypeHelperClassLoader getTypeHelperClassLoader(java.lang.Class)
    {
        java.util.Map $r1, $r7;
        java.lang.Class r0;
        java.lang.Object $r2, $r8, $r9;
        java.lang.ClassLoader $r5;
        java.lang.ref.WeakReference r3, $r6;
        org.apache.cxf.common.util.ASMHelper$TypeHelperClassLoader $r4, r10;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.apache.cxf.common.util.ASMHelper: java.util.Map LOADER_MAP>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.lang.ref.WeakReference) $r2;

        if r3 == null goto label1;

        $r8 = virtualinvoke r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if $r8 != null goto label2;

     label1:
        $r4 = new org.apache.cxf.common.util.ASMHelper$TypeHelperClassLoader;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r4.<org.apache.cxf.common.util.ASMHelper$TypeHelperClassLoader: void <init>(java.lang.ClassLoader)>($r5);

        r10 = $r4;

        $r7 = <org.apache.cxf.common.util.ASMHelper: java.util.Map LOADER_MAP>;

        $r6 = new java.lang.ref.WeakReference;

        specialinvoke $r6.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r4);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r6);

        goto label3;

     label2:
        $r9 = virtualinvoke r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r10 = (org.apache.cxf.common.util.ASMHelper$TypeHelperClassLoader) $r9;

     label3:
        return r10;
    }

    public org.apache.cxf.common.util.ASMHelper$ASMType getType(java.lang.String)
    {
        org.apache.cxf.common.util.ASMHelper$1 $r14;
        java.lang.String $r3, $r6, r16;
        java.lang.reflect.Method $r10, $r13;
        java.lang.Package $r2;
        java.lang.Class[] $r9, $r11;
        java.lang.RuntimeException $r18;
        java.lang.Exception $r17;
        org.apache.cxf.common.util.ASMHelper r15;
        java.lang.StringBuilder $r0, $r4, $r5;
        java.lang.Class $r1, $r7, $r8, $r12;

        r15 := @this: org.apache.cxf.common.util.ASMHelper;

        r16 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = <org.apache.cxf.common.util.ASMHelper: java.lang.Class cwClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Package getPackage()>();

        $r3 = virtualinvoke $r2.<java.lang.Package: java.lang.String getName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".Type");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = <org.apache.cxf.common.util.ASMHelper: java.lang.Class cwClass>;

        $r8 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>($r6, $r7);

        $r9 = newarray (java.lang.Class)[1];

        $r9[0] = class "Ljava/lang/String;";

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getType", $r9);

        $r11 = newarray (java.lang.Class)[1];

        $r12 = <java.lang.Integer: java.lang.Class TYPE>;

        $r11[0] = $r12;

        $r13 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getOpcode", $r11);

        $r14 = new org.apache.cxf.common.util.ASMHelper$1;

        specialinvoke $r14.<org.apache.cxf.common.util.ASMHelper$1: void <init>(org.apache.cxf.common.util.ASMHelper,java.lang.reflect.Method,java.lang.String,java.lang.Class,java.lang.reflect.Method)>(r15, $r10, r16, $r8, $r13);

     label2:
        return $r14;

     label3:
        $r17 := @caughtexception;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r17);

        throw $r18;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.apache.cxf.common.util.ASMHelper$Label createLabel()
    {
        java.lang.Package $r2;
        org.apache.cxf.common.util.ASMHelper$2 $r9;
        java.lang.RuntimeException $r12;
        java.lang.Exception $r11;
        org.apache.cxf.common.util.ASMHelper r10;
        java.lang.StringBuilder $r0, $r4, $r5;
        java.lang.Class $r1, $r7, $r8;
        java.lang.String $r3, $r6;

        r10 := @this: org.apache.cxf.common.util.ASMHelper;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = <org.apache.cxf.common.util.ASMHelper: java.lang.Class cwClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Package getPackage()>();

        $r3 = virtualinvoke $r2.<java.lang.Package: java.lang.String getName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".Label");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = <org.apache.cxf.common.util.ASMHelper: java.lang.Class cwClass>;

        $r8 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>($r6, $r7);

        $r9 = new org.apache.cxf.common.util.ASMHelper$2;

        specialinvoke $r9.<org.apache.cxf.common.util.ASMHelper$2: void <init>(org.apache.cxf.common.util.ASMHelper,java.lang.Class)>(r10, $r8);

     label2:
        return $r9;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static java.lang.Class access$000() throws java.lang.ClassNotFoundException
    {
        java.lang.Class $r0;

        $r0 = staticinvoke <org.apache.cxf.common.util.ASMHelper: java.lang.Class getASMClass()>();

        return $r0;
    }

    static void <clinit>()
    {
        java.util.Map $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r26, $r31, $r36, $r41, $r46, $r51, $r56;
        org.apache.cxf.common.util.WeakIdentityHashMap $r3;
        java.util.HashMap $r0, $r1, $r2;
        java.lang.String $r23, $r24, $r28, $r29, $r33, $r34, $r38, $r39, $r43, $r44, $r48, $r49, $r53, $r54, $r58, $r59;
        java.lang.Class $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r25, $r27, $r30, $r32, $r35, $r37, $r40, $r42, $r45, $r47, $r50, $r52, $r55, $r57;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.cxf.common.util.ASMHelper: java.util.Map PRIMITIVE_MAP> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.apache.cxf.common.util.ASMHelper: java.util.Map NONPRIMITIVE_MAP> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <org.apache.cxf.common.util.ASMHelper: java.util.Map PRIMITIVE_ZERO_MAP> = $r2;

        $r3 = new org.apache.cxf.common.util.WeakIdentityHashMap;

        specialinvoke $r3.<org.apache.cxf.common.util.WeakIdentityHashMap: void <init>()>();

        <org.apache.cxf.common.util.ASMHelper: java.util.Map LOADER_MAP> = $r3;

        $r5 = <org.apache.cxf.common.util.ASMHelper: java.util.Map PRIMITIVE_MAP>;

        $r4 = <java.lang.Byte: java.lang.Class TYPE>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "B");

        $r7 = <org.apache.cxf.common.util.ASMHelper: java.util.Map PRIMITIVE_MAP>;

        $r6 = <java.lang.Boolean: java.lang.Class TYPE>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, "Z");

        $r9 = <org.apache.cxf.common.util.ASMHelper: java.util.Map PRIMITIVE_MAP>;

        $r8 = <java.lang.Long: java.lang.Class TYPE>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, "J");

        $r11 = <org.apache.cxf.common.util.ASMHelper: java.util.Map PRIMITIVE_MAP>;

        $r10 = <java.lang.Integer: java.lang.Class TYPE>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, "I");

        $r13 = <org.apache.cxf.common.util.ASMHelper: java.util.Map PRIMITIVE_MAP>;

        $r12 = <java.lang.Short: java.lang.Class TYPE>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, "S");

        $r15 = <org.apache.cxf.common.util.ASMHelper: java.util.Map PRIMITIVE_MAP>;

        $r14 = <java.lang.Character: java.lang.Class TYPE>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, "C");

        $r17 = <org.apache.cxf.common.util.ASMHelper: java.util.Map PRIMITIVE_MAP>;

        $r16 = <java.lang.Float: java.lang.Class TYPE>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, "F");

        $r19 = <org.apache.cxf.common.util.ASMHelper: java.util.Map PRIMITIVE_MAP>;

        $r18 = <java.lang.Double: java.lang.Class TYPE>;

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, "D");

        $r21 = <org.apache.cxf.common.util.ASMHelper: java.util.Map NONPRIMITIVE_MAP>;

        $r22 = <java.lang.Byte: java.lang.Class TYPE>;

        $r20 = class "Ljava/lang/Byte;";

        $r23 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        $r24 = virtualinvoke $r23.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\.", "/");

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r24);

        $r26 = <org.apache.cxf.common.util.ASMHelper: java.util.Map NONPRIMITIVE_MAP>;

        $r27 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r25 = class "Ljava/lang/Boolean;";

        $r28 = virtualinvoke $r25.<java.lang.Class: java.lang.String getName()>();

        $r29 = virtualinvoke $r28.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\.", "/");

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r29);

        $r31 = <org.apache.cxf.common.util.ASMHelper: java.util.Map NONPRIMITIVE_MAP>;

        $r32 = <java.lang.Long: java.lang.Class TYPE>;

        $r30 = class "Ljava/lang/Long;";

        $r33 = virtualinvoke $r30.<java.lang.Class: java.lang.String getName()>();

        $r34 = virtualinvoke $r33.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\.", "/");

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, $r34);

        $r36 = <org.apache.cxf.common.util.ASMHelper: java.util.Map NONPRIMITIVE_MAP>;

        $r37 = <java.lang.Integer: java.lang.Class TYPE>;

        $r35 = class "Ljava/lang/Integer;";

        $r38 = virtualinvoke $r35.<java.lang.Class: java.lang.String getName()>();

        $r39 = virtualinvoke $r38.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\.", "/");

        interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, $r39);

        $r41 = <org.apache.cxf.common.util.ASMHelper: java.util.Map NONPRIMITIVE_MAP>;

        $r42 = <java.lang.Short: java.lang.Class TYPE>;

        $r40 = class "Ljava/lang/Short;";

        $r43 = virtualinvoke $r40.<java.lang.Class: java.lang.String getName()>();

        $r44 = virtualinvoke $r43.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\.", "/");

        interfaceinvoke $r41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r42, $r44);

        $r46 = <org.apache.cxf.common.util.ASMHelper: java.util.Map NONPRIMITIVE_MAP>;

        $r47 = <java.lang.Character: java.lang.Class TYPE>;

        $r45 = class "Ljava/lang/Character;";

        $r48 = virtualinvoke $r45.<java.lang.Class: java.lang.String getName()>();

        $r49 = virtualinvoke $r48.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\.", "/");

        interfaceinvoke $r46.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r47, $r49);

        $r51 = <org.apache.cxf.common.util.ASMHelper: java.util.Map NONPRIMITIVE_MAP>;

        $r52 = <java.lang.Float: java.lang.Class TYPE>;

        $r50 = class "Ljava/lang/Float;";

        $r53 = virtualinvoke $r50.<java.lang.Class: java.lang.String getName()>();

        $r54 = virtualinvoke $r53.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\.", "/");

        interfaceinvoke $r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r52, $r54);

        $r56 = <org.apache.cxf.common.util.ASMHelper: java.util.Map NONPRIMITIVE_MAP>;

        $r57 = <java.lang.Double: java.lang.Class TYPE>;

        $r55 = class "Ljava/lang/Double;";

        $r58 = virtualinvoke $r55.<java.lang.Class: java.lang.String getName()>();

        $r59 = virtualinvoke $r58.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\.", "/");

        interfaceinvoke $r56.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r57, $r59);

        return;
    }
}
