public abstract class org.springframework.http.client.support.HttpAccessor extends java.lang.Object
{
    protected final org.apache.commons.logging.Log logger;
    private org.springframework.http.client.ClientHttpRequestFactory requestFactory;

    public void <init>()
    {
        org.springframework.http.client.SimpleClientHttpRequestFactory $r3;
        org.springframework.http.client.support.HttpAccessor r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.springframework.http.client.support.HttpAccessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.http.client.support.HttpAccessor: org.apache.commons.logging.Log logger> = $r2;

        $r3 = new org.springframework.http.client.SimpleClientHttpRequestFactory;

        specialinvoke $r3.<org.springframework.http.client.SimpleClientHttpRequestFactory: void <init>()>();

        r0.<org.springframework.http.client.support.HttpAccessor: org.springframework.http.client.ClientHttpRequestFactory requestFactory> = $r3;

        return;
    }

    public void setRequestFactory(org.springframework.http.client.ClientHttpRequestFactory)
    {
        org.springframework.http.client.support.HttpAccessor r1;
        org.springframework.http.client.ClientHttpRequestFactory r0;

        r1 := @this: org.springframework.http.client.support.HttpAccessor;

        r0 := @parameter0: org.springframework.http.client.ClientHttpRequestFactory;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'requestFactory\' must not be null");

        r1.<org.springframework.http.client.support.HttpAccessor: org.springframework.http.client.ClientHttpRequestFactory requestFactory> = r0;

        return;
    }

    public org.springframework.http.client.ClientHttpRequestFactory getRequestFactory()
    {
        org.springframework.http.client.support.HttpAccessor r0;
        org.springframework.http.client.ClientHttpRequestFactory $r1;

        r0 := @this: org.springframework.http.client.support.HttpAccessor;

        $r1 = r0.<org.springframework.http.client.support.HttpAccessor: org.springframework.http.client.ClientHttpRequestFactory requestFactory>;

        return $r1;
    }

    protected org.springframework.http.client.ClientHttpRequest createRequest(java.net.URI, org.springframework.http.HttpMethod) throws java.io.IOException
    {
        org.springframework.http.client.ClientHttpRequestFactory $r1;
        org.springframework.http.HttpMethod r3;
        org.springframework.http.client.ClientHttpRequest $r4;
        org.springframework.http.client.support.HttpAccessor r0;
        org.apache.commons.logging.Log $r5, $r7;
        java.lang.StringBuilder $r6, $r9, $r10, $r11, $r12;
        java.net.URI r2;
        java.lang.String $r8, $r13;
        boolean $z0;

        r0 := @this: org.springframework.http.client.support.HttpAccessor;

        r2 := @parameter0: java.net.URI;

        r3 := @parameter1: org.springframework.http.HttpMethod;

        $r1 = virtualinvoke r0.<org.springframework.http.client.support.HttpAccessor: org.springframework.http.client.ClientHttpRequestFactory getRequestFactory()>();

        $r4 = interfaceinvoke $r1.<org.springframework.http.client.ClientHttpRequestFactory: org.springframework.http.client.ClientHttpRequest createRequest(java.net.URI,org.springframework.http.HttpMethod)>(r2, r3);

        $r5 = r0.<org.springframework.http.client.support.HttpAccessor: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<org.springframework.http.client.support.HttpAccessor: org.apache.commons.logging.Log logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Created ");

        $r8 = virtualinvoke r3.<org.springframework.http.HttpMethod: java.lang.String name()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" request for \"");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r13);

     label1:
        return $r4;
    }
}
