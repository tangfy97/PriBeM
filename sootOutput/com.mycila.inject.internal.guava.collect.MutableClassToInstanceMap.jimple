public final class com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap extends com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap implements com.mycila.inject.internal.guava.collect.ClassToInstanceMap
{
    private static final com.mycila.inject.internal.guava.collect.MapConstraint VALUE_CAN_BE_CAST_TO_KEY;
    private static final long serialVersionUID;

    public static com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap create()
    {
        java.util.HashMap $r1;
        com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap $r0;

        $r0 = new com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap: void <init>(java.util.Map)>($r1);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap create(java.util.Map)
    {
        com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap $r0;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        $r0 = new com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap: void <init>(java.util.Map)>(r1);

        return $r0;
    }

    private void <init>(java.util.Map)
    {
        com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap r0;
        com.mycila.inject.internal.guava.collect.MapConstraint $r2;
        java.util.Map r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap;

        r1 := @parameter0: java.util.Map;

        $r2 = <com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap: com.mycila.inject.internal.guava.collect.MapConstraint VALUE_CAN_BE_CAST_TO_KEY>;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: void <init>(java.util.Map,com.mycila.inject.internal.guava.collect.MapConstraint)>(r1, $r2);

        return;
    }

    public java.lang.Object putInstance(java.lang.Class, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap r1;
        java.lang.Class r0;
        java.lang.Object r2, $r3, $r4;

        r1 := @this: com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap: java.lang.Object cast(java.lang.Class,java.lang.Object)>(r0, $r3);

        return $r4;
    }

    public java.lang.Object getInstance(java.lang.Class)
    {
        com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap r1;
        java.lang.Class r0;
        java.lang.Object $r2, $r3;

        r1 := @this: com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap;

        r0 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap: java.lang.Object cast(java.lang.Class,java.lang.Object)>(r0, $r2);

        return $r3;
    }

    private static java.lang.Object cast(java.lang.Class, java.lang.Object)
    {
        java.lang.Class r0, $r1;
        java.lang.Object r2, $r3;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.primitives.Primitives: java.lang.Class wrap(java.lang.Class)>(r0);

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r2);

        return $r3;
    }

    public volatile void putAll(java.util.Map)
    {
        com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap r0;
        java.util.Map r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: void putAll(java.util.Map)>(r1);

        return;
    }

    public volatile java.util.Set entrySet()
    {
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: java.util.Set entrySet()>();

        return $r1;
    }

    static java.lang.Object access$000(java.lang.Class, java.lang.Object)
    {
        java.lang.Class r0;
        java.lang.Object r1, $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap: java.lang.Object cast(java.lang.Class,java.lang.Object)>(r0, r1);

        return $r2;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap$1 $r0;

        <com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap: long serialVersionUID> = 0L;

        $r0 = new com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap$1;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap$1: void <init>()>();

        <com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap: com.mycila.inject.internal.guava.collect.MapConstraint VALUE_CAN_BE_CAST_TO_KEY> = $r0;

        return;
    }
}
