public final class org.apache.lucene.index.FieldInfo extends java.lang.Object
{
    public final java.lang.String name;
    public final int number;
    private boolean indexed;
    private org.apache.lucene.index.FieldInfo$DocValuesType docValueType;
    private boolean storeTermVector;
    private org.apache.lucene.index.FieldInfo$DocValuesType normType;
    private boolean omitNorms;
    private org.apache.lucene.index.FieldInfo$IndexOptions indexOptions;
    private boolean storePayloads;
    private java.util.Map attributes;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.String, boolean, int, boolean, boolean, boolean, org.apache.lucene.index.FieldInfo$IndexOptions, org.apache.lucene.index.FieldInfo$DocValuesType, org.apache.lucene.index.FieldInfo$DocValuesType, java.util.Map)
    {
        org.apache.lucene.index.FieldInfo$IndexOptions r5;
        java.lang.AssertionError $r4;
        org.apache.lucene.index.FieldInfo$DocValuesType r2, r6, $r7;
        java.util.Map r3;
        int i0;
        org.apache.lucene.index.FieldInfo r0;
        java.lang.String r1;
        boolean z0, $z1, $z2, z3, z4, z5;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        z3 := @parameter3: boolean;

        z5 := @parameter4: boolean;

        z4 := @parameter5: boolean;

        r5 := @parameter6: org.apache.lucene.index.FieldInfo$IndexOptions;

        r2 := @parameter7: org.apache.lucene.index.FieldInfo$DocValuesType;

        r6 := @parameter8: org.apache.lucene.index.FieldInfo$DocValuesType;

        r3 := @parameter9: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.index.FieldInfo: java.lang.String name> = r1;

        r0.<org.apache.lucene.index.FieldInfo: boolean indexed> = z0;

        r0.<org.apache.lucene.index.FieldInfo: int number> = i0;

        r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType docValueType> = r2;

        if z0 == 0 goto label3;

        r0.<org.apache.lucene.index.FieldInfo: boolean storeTermVector> = z3;

        r0.<org.apache.lucene.index.FieldInfo: boolean storePayloads> = z4;

        r0.<org.apache.lucene.index.FieldInfo: boolean omitNorms> = z5;

        r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions> = r5;

        if z5 != 0 goto label1;

        $r7 = r6;

        goto label2;

     label1:
        $r7 = null;

     label2:
        r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType normType> = $r7;

        goto label4;

     label3:
        r0.<org.apache.lucene.index.FieldInfo: boolean storeTermVector> = 0;

        r0.<org.apache.lucene.index.FieldInfo: boolean storePayloads> = 0;

        r0.<org.apache.lucene.index.FieldInfo: boolean omitNorms> = 0;

        r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions> = null;

        r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType normType> = null;

     label4:
        r0.<org.apache.lucene.index.FieldInfo: java.util.Map attributes> = r3;

        $z1 = <org.apache.lucene.index.FieldInfo: boolean $assertionsDisabled>;

        if $z1 != 0 goto label5;

        $z2 = specialinvoke r0.<org.apache.lucene.index.FieldInfo: boolean checkConsistency()>();

        if $z2 != 0 goto label5;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label5:
        return;
    }

    private boolean checkConsistency()
    {
        java.lang.AssertionError $r3, $r5, $r7, $r9, $r11, $r12, $r13, $r14;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        org.apache.lucene.index.FieldInfo$IndexOptions $r1, $r2, $r6, $r8;
        org.apache.lucene.index.FieldInfo$DocValuesType $r4, $r10;
        org.apache.lucene.index.FieldInfo r0;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        $z0 = r0.<org.apache.lucene.index.FieldInfo: boolean indexed>;

        if $z0 != 0 goto label5;

        $z5 = <org.apache.lucene.index.FieldInfo: boolean $assertionsDisabled>;

        if $z5 != 0 goto label1;

        $z12 = r0.<org.apache.lucene.index.FieldInfo: boolean storeTermVector>;

        if $z12 == 0 goto label1;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label1:
        $z6 = <org.apache.lucene.index.FieldInfo: boolean $assertionsDisabled>;

        if $z6 != 0 goto label2;

        $z11 = r0.<org.apache.lucene.index.FieldInfo: boolean storePayloads>;

        if $z11 == 0 goto label2;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label2:
        $z7 = <org.apache.lucene.index.FieldInfo: boolean $assertionsDisabled>;

        if $z7 != 0 goto label3;

        $z10 = r0.<org.apache.lucene.index.FieldInfo: boolean omitNorms>;

        if $z10 == 0 goto label3;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label3:
        $z8 = <org.apache.lucene.index.FieldInfo: boolean $assertionsDisabled>;

        if $z8 != 0 goto label4;

        $r10 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType normType>;

        if $r10 == null goto label4;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label4:
        $z9 = <org.apache.lucene.index.FieldInfo: boolean $assertionsDisabled>;

        if $z9 != 0 goto label8;

        $r8 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        if $r8 == null goto label8;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label5:
        $z1 = <org.apache.lucene.index.FieldInfo: boolean $assertionsDisabled>;

        if $z1 != 0 goto label6;

        $r6 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        if $r6 != null goto label6;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label6:
        $z2 = r0.<org.apache.lucene.index.FieldInfo: boolean omitNorms>;

        if $z2 == 0 goto label7;

        $z4 = <org.apache.lucene.index.FieldInfo: boolean $assertionsDisabled>;

        if $z4 != 0 goto label7;

        $r4 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType normType>;

        if $r4 == null goto label7;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label7:
        $z13 = <org.apache.lucene.index.FieldInfo: boolean $assertionsDisabled>;

        if $z13 != 0 goto label8;

        $r2 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        $r1 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS_AND_POSITIONS>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.index.FieldInfo$IndexOptions: int compareTo(java.lang.Enum)>($r1);

        if $i0 >= 0 goto label8;

        $z3 = r0.<org.apache.lucene.index.FieldInfo: boolean storePayloads>;

        if $z3 == 0 goto label8;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label8:
        return 1;
    }

    void update(org.apache.lucene.index.IndexableFieldType)
    {
        org.apache.lucene.index.FieldInfo$IndexOptions $r2;
        org.apache.lucene.index.IndexableFieldType r1;
        org.apache.lucene.index.FieldInfo r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        r1 := @parameter0: org.apache.lucene.index.IndexableFieldType;

        $z0 = interfaceinvoke r1.<org.apache.lucene.index.IndexableFieldType: boolean indexed()>();

        $z1 = interfaceinvoke r1.<org.apache.lucene.index.IndexableFieldType: boolean omitNorms()>();

        $r2 = interfaceinvoke r1.<org.apache.lucene.index.IndexableFieldType: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions()>();

        virtualinvoke r0.<org.apache.lucene.index.FieldInfo: void update(boolean,boolean,boolean,boolean,org.apache.lucene.index.FieldInfo$IndexOptions)>($z0, 0, $z1, 0, $r2);

        return;
    }

    void update(boolean, boolean, boolean, boolean, org.apache.lucene.index.FieldInfo$IndexOptions)
    {
        java.lang.AssertionError $r1;
        int $i0, $i1;
        boolean z0, $z1, $z2, z3, $z4, z5, $z6, z7, $z8, $z9;
        org.apache.lucene.index.FieldInfo$IndexOptions r2, $r3, $r4, $r5, $r6, $r7, $r8;
        org.apache.lucene.index.FieldInfo r0;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        z0 := @parameter0: boolean;

        z3 := @parameter1: boolean;

        z7 := @parameter2: boolean;

        z5 := @parameter3: boolean;

        r2 := @parameter4: org.apache.lucene.index.FieldInfo$IndexOptions;

        $z1 = r0.<org.apache.lucene.index.FieldInfo: boolean indexed>;

        if $z1 == z0 goto label01;

        r0.<org.apache.lucene.index.FieldInfo: boolean indexed> = 1;

     label01:
        if z0 == 0 goto label09;

        $z4 = r0.<org.apache.lucene.index.FieldInfo: boolean storeTermVector>;

        if $z4 == z3 goto label02;

        r0.<org.apache.lucene.index.FieldInfo: boolean storeTermVector> = 1;

     label02:
        $z6 = r0.<org.apache.lucene.index.FieldInfo: boolean storePayloads>;

        if $z6 == z5 goto label03;

        r0.<org.apache.lucene.index.FieldInfo: boolean storePayloads> = 1;

     label03:
        $z8 = r0.<org.apache.lucene.index.FieldInfo: boolean omitNorms>;

        if $z8 == z7 goto label04;

        r0.<org.apache.lucene.index.FieldInfo: boolean omitNorms> = 1;

        r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType normType> = null;

     label04:
        $r3 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        if $r3 == r2 goto label09;

        $r4 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        if $r4 != null goto label05;

        r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions> = r2;

        goto label08;

     label05:
        $r5 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        $i0 = virtualinvoke $r5.<org.apache.lucene.index.FieldInfo$IndexOptions: int compareTo(java.lang.Enum)>(r2);

        if $i0 >= 0 goto label06;

        $r6 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        goto label07;

     label06:
        $r6 = r2;

     label07:
        r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions> = $r6;

     label08:
        $r7 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        $r8 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS_AND_POSITIONS>;

        $i1 = virtualinvoke $r7.<org.apache.lucene.index.FieldInfo$IndexOptions: int compareTo(java.lang.Enum)>($r8);

        if $i1 >= 0 goto label09;

        r0.<org.apache.lucene.index.FieldInfo: boolean storePayloads> = 0;

     label09:
        $z9 = <org.apache.lucene.index.FieldInfo: boolean $assertionsDisabled>;

        if $z9 != 0 goto label10;

        $z2 = specialinvoke r0.<org.apache.lucene.index.FieldInfo: boolean checkConsistency()>();

        if $z2 != 0 goto label10;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label10:
        return;
    }

    void setDocValuesType(org.apache.lucene.index.FieldInfo$DocValuesType)
    {
        java.lang.AssertionError $r3;
        java.lang.String $r13, $r16;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r5;
        org.apache.lucene.index.FieldInfo$DocValuesType $r1, r2, $r4, $r8;
        org.apache.lucene.index.FieldInfo r0;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r11, $r12, $r14, $r15;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        r2 := @parameter0: org.apache.lucene.index.FieldInfo$DocValuesType;

        $r1 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType docValueType>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType docValueType>;

        if $r4 == r2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot change DocValues type from ");

        $r8 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType docValueType>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for field \"");

        $r13 = r0.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r5;

     label1:
        r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType docValueType> = r2;

        $z0 = <org.apache.lucene.index.FieldInfo: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $z1 = specialinvoke r0.<org.apache.lucene.index.FieldInfo: boolean checkConsistency()>();

        if $z1 != 0 goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        return;
    }

    public org.apache.lucene.index.FieldInfo$IndexOptions getIndexOptions()
    {
        org.apache.lucene.index.FieldInfo r0;
        org.apache.lucene.index.FieldInfo$IndexOptions $r1;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        $r1 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        return $r1;
    }

    public boolean hasDocValues()
    {
        org.apache.lucene.index.FieldInfo r0;
        org.apache.lucene.index.FieldInfo$DocValuesType $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        $r1 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType docValueType>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.lucene.index.FieldInfo$DocValuesType getDocValuesType()
    {
        org.apache.lucene.index.FieldInfo r0;
        org.apache.lucene.index.FieldInfo$DocValuesType $r1;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        $r1 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType docValueType>;

        return $r1;
    }

    public org.apache.lucene.index.FieldInfo$DocValuesType getNormType()
    {
        org.apache.lucene.index.FieldInfo r0;
        org.apache.lucene.index.FieldInfo$DocValuesType $r1;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        $r1 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType normType>;

        return $r1;
    }

    void setStoreTermVectors()
    {
        org.apache.lucene.index.FieldInfo r0;
        java.lang.AssertionError $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        r0.<org.apache.lucene.index.FieldInfo: boolean storeTermVector> = 1;

        $z0 = <org.apache.lucene.index.FieldInfo: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<org.apache.lucene.index.FieldInfo: boolean checkConsistency()>();

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    void setStorePayloads()
    {
        org.apache.lucene.index.FieldInfo$IndexOptions $r2, $r3;
        java.lang.AssertionError $r1;
        int $i0;
        org.apache.lucene.index.FieldInfo r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        $z0 = r0.<org.apache.lucene.index.FieldInfo: boolean indexed>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        $r2 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS_AND_POSITIONS>;

        $i0 = virtualinvoke $r3.<org.apache.lucene.index.FieldInfo$IndexOptions: int compareTo(java.lang.Enum)>($r2);

        if $i0 < 0 goto label1;

        r0.<org.apache.lucene.index.FieldInfo: boolean storePayloads> = 1;

     label1:
        $z2 = <org.apache.lucene.index.FieldInfo: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $z1 = specialinvoke r0.<org.apache.lucene.index.FieldInfo: boolean checkConsistency()>();

        if $z1 != 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        return;
    }

    void setNormValueType(org.apache.lucene.index.FieldInfo$DocValuesType)
    {
        java.lang.AssertionError $r3;
        java.lang.String $r13, $r16;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r5;
        org.apache.lucene.index.FieldInfo$DocValuesType $r1, r2, $r4, $r8;
        org.apache.lucene.index.FieldInfo r0;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r11, $r12, $r14, $r15;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        r2 := @parameter0: org.apache.lucene.index.FieldInfo$DocValuesType;

        $r1 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType normType>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType normType>;

        if $r4 == r2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot change Norm type from ");

        $r8 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType normType>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for field \"");

        $r13 = r0.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r5;

     label1:
        r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType normType> = r2;

        $z0 = <org.apache.lucene.index.FieldInfo: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $z1 = specialinvoke r0.<org.apache.lucene.index.FieldInfo: boolean checkConsistency()>();

        if $z1 != 0 goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        return;
    }

    public boolean omitsNorms()
    {
        org.apache.lucene.index.FieldInfo r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        $z0 = r0.<org.apache.lucene.index.FieldInfo: boolean omitNorms>;

        return $z0;
    }

    public boolean hasNorms()
    {
        org.apache.lucene.index.FieldInfo r0;
        org.apache.lucene.index.FieldInfo$DocValuesType $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        $r1 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType normType>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isIndexed()
    {
        org.apache.lucene.index.FieldInfo r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        $z0 = r0.<org.apache.lucene.index.FieldInfo: boolean indexed>;

        return $z0;
    }

    public boolean hasPayloads()
    {
        org.apache.lucene.index.FieldInfo r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        $z0 = r0.<org.apache.lucene.index.FieldInfo: boolean storePayloads>;

        return $z0;
    }

    public boolean hasVectors()
    {
        org.apache.lucene.index.FieldInfo r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        $z0 = r0.<org.apache.lucene.index.FieldInfo: boolean storeTermVector>;

        return $z0;
    }

    public java.lang.String getAttribute(java.lang.String)
    {
        java.util.Map $r1, $r3;
        org.apache.lucene.index.FieldInfo r0;
        java.lang.Object $r4;
        java.lang.String r2, $r5;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.lucene.index.FieldInfo: java.util.Map attributes>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.lucene.index.FieldInfo: java.util.Map attributes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r5 = (java.lang.String) $r4;

        return $r5;
    }

    public java.lang.String putAttribute(java.lang.String, java.lang.String)
    {
        java.util.HashMap $r7;
        java.util.Map $r1, $r4;
        org.apache.lucene.index.FieldInfo r0;
        java.lang.Object $r5;
        java.lang.String r2, r3, $r6;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.lucene.index.FieldInfo: java.util.Map attributes>;

        if $r1 != null goto label1;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.index.FieldInfo: java.util.Map attributes> = $r7;

     label1:
        $r4 = r0.<org.apache.lucene.index.FieldInfo: java.util.Map attributes>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        $r6 = (java.lang.String) $r5;

        return $r6;
    }

    public java.util.Map attributes()
    {
        org.apache.lucene.index.FieldInfo r0;
        java.util.Map $r1;

        r0 := @this: org.apache.lucene.index.FieldInfo;

        $r1 = r0.<org.apache.lucene.index.FieldInfo: java.util.Map attributes>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/FieldInfo;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.FieldInfo: boolean $assertionsDisabled> = $z1;

        return;
    }
}
