final class org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State extends java.lang.Object
{
    private static final int[] NO_LABELS;
    private static final org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] NO_STATES;
    int[] labels;
    org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] states;
    boolean is_final;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State r0;
        int[] $r1;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] $r2;

        r0 := @this: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] NO_LABELS>;

        r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] labels> = $r1;

        $r2 = <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] NO_STATES>;

        r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] states> = $r2;

        return;
    }

    org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State getState(int)
    {
        int[] $r1;
        int i0, $i1;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State r0, $r3;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] $r2;

        r0 := @this: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] labels>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r1, i0);

        if $i1 < 0 goto label1;

        $r2 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] states>;

        $r3 = $r2[$i1];

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State r1, r2;
        int[] $r3, $r4;
        java.lang.Object r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] $r5, $r6;

        r2 := @this: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State;

        r0 := @parameter0: java.lang.Object;

        r1 = (org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State) r0;

        $z1 = r2.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: boolean is_final>;

        $z0 = r1.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: boolean is_final>;

        if $z1 != $z0 goto label1;

        $r4 = r2.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] labels>;

        $r3 = r1.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] labels>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r4, $r3);

        if $z2 == 0 goto label1;

        $r6 = r2.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] states>;

        $r5 = r1.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] states>;

        $z3 = staticinvoke <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: boolean referenceEquals(java.lang.Object[],java.lang.Object[])>($r6, $r5);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    public int hashCode()
    {
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State r0, r4;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11;
        boolean $z0, $z2, $z3;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] r3;

        r0 := @this: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State;

        $z0 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: boolean is_final>;

        if $z0 == 0 goto label1;

        $z3 = 1;

        $z2 = 1;

        goto label2;

     label1:
        $z3 = 0;

        $z2 = 0;

     label2:
        $i1 = $z2 * 31;

        $r1 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] labels>;

        $i0 = lengthof $r1;

        $i2 = $i1 + $i0;

        i7 = $z3 ^ $i2;

        $r2 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] labels>;

        $i6 = lengthof $r2;

        i8 = 0;

     label3:
        if i8 >= $i6 goto label4;

        i9 = $r2[i8];

        $i4 = i7 * 31;

        $i5 = $i4 + i9;

        i7 = i7 ^ $i5;

        i8 = i8 + 1;

        goto label3;

     label4:
        r3 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] states>;

        i10 = lengthof r3;

        i11 = 0;

     label5:
        if i11 >= i10 goto label6;

        r4 = r3[i11];

        $i3 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r4);

        i7 = i7 ^ $i3;

        i11 = i11 + 1;

        goto label5;

     label6:
        return i7;
    }

    boolean hasChildren()
    {
        int[] $r1;
        int $i0;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State;

        $r1 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] labels>;

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State newState(int)
    {
        java.lang.Object[] $r6;
        java.lang.AssertionError $r14;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State r0, $r11;
        int[] $r1, $r2, $r3, $r8, $r9, $r13;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9;
        java.lang.String $r18;
        boolean $z0;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] $r4, $r5, $r7, $r10, $r12;
        java.lang.StringBuilder $r15, $r16, $r17;

        r0 := @this: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State;

        i5 := @parameter0: int;

        $z0 = <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r13 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] labels>;

        $i9 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r13, i5);

        if $i9 < 0 goto label1;

        $r14 = new java.lang.AssertionError;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("State already has transition labeled: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>($r18);

        throw $r14;

     label1:
        $r2 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] labels>;

        $r1 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] labels>;

        $i0 = lengthof $r1;

        $i1 = $i0 + 1;

        $r3 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r2, $i1);

        r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] labels> = $r3;

        $r5 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] states>;

        $r4 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] states>;

        $i2 = lengthof $r4;

        $i3 = $i2 + 1;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, $i3);

        $r7 = (org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[]) $r6;

        r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] states> = $r7;

        $r9 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] labels>;

        $r8 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] labels>;

        $i4 = lengthof $r8;

        $i6 = $i4 - 1;

        $r9[$i6] = i5;

        $r12 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] states>;

        $r10 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] states>;

        $i7 = lengthof $r10;

        $i8 = $i7 - 1;

        $r11 = new org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State;

        specialinvoke $r11.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: void <init>()>();

        $r12[$i8] = $r11;

        return $r11;
    }

    org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State lastChild()
    {
        java.lang.AssertionError $r4;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State r0, $r3;
        int $i0, $i1;
        boolean $z0, $z1;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] $r1, $r2;

        r0 := @this: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State;

        $z0 = <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: boolean hasChildren()>();

        if $z1 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("No outgoing transitions.");

        throw $r4;

     label1:
        $r2 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] states>;

        $r1 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] states>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        $r3 = $r2[$i1];

        return $r3;
    }

    org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State lastChild(int)
    {
        java.lang.AssertionError $r3;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State r0, $r2, r6;
        int[] $r1, $r4;
        int $i0, i1, i2, $i3;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] $r5;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State;

        i2 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] labels>;

        $i0 = lengthof $r1;

        i1 = $i0 - 1;

        r6 = null;

        if i1 < 0 goto label1;

        $r4 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] labels>;

        $i3 = $r4[i1];

        if $i3 != i2 goto label1;

        $r5 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] states>;

        r6 = $r5[i1];

     label1:
        $z0 = <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r2 = virtualinvoke r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State getState(int)>(i2);

        if r6 == $r2 goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        return r6;
    }

    void replaceLastChild(org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State)
    {
        java.lang.AssertionError $r4;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State r0, r2;
        int $i0, $i1;
        boolean $z0, $z1;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] $r1, $r3;

        r0 := @this: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State;

        r2 := @parameter0: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State;

        $z0 = <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: boolean hasChildren()>();

        if $z1 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("No outgoing transitions.");

        throw $r4;

     label1:
        $r3 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] states>;

        $r1 = r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] states>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        $r3[$i1] = r2;

        return;
    }

    private static boolean referenceEquals(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r2, $r3;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label4;

        $r3 = r0[i3];

        $r2 = r1[i3];

        if $r3 == $r2 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    void <init>(org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$1)
    {
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State r0;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$1 r1;

        r0 := @this: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State;

        r1 := @parameter0: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$1;

        specialinvoke r0.<org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        int[] $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;
        org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] $r2;

        $r0 = class "Lorg/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (int)[0];

        <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: int[] NO_LABELS> = $r1;

        $r2 = newarray (org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State)[0];

        <org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State: org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State[] NO_STATES> = $r2;

        return;
    }
}
