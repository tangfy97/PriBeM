public abstract class com.hp.hpl.jena.mem.HashCommon extends java.lang.Object
{
    protected static final double loadFactor;
    protected java.lang.Object[] keys;
    public int capacity;
    protected int threshold;
    protected int size;
    protected int changes;
    static final int[] primes;

    protected void <init>(int)
    {
        java.lang.Object[] $r1;
        int i0, $i1, $i2;
        com.hp.hpl.jena.mem.HashCommon r0;
        double $d0, $d1;

        r0 := @this: com.hp.hpl.jena.mem.HashCommon;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.mem.HashCommon: int size> = 0;

        r0.<com.hp.hpl.jena.mem.HashCommon: int capacity> = i0;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashCommon: java.lang.Object[] newKeyArray(int)>(i0);

        r0.<com.hp.hpl.jena.mem.HashCommon: java.lang.Object[] keys> = $r1;

        $i1 = r0.<com.hp.hpl.jena.mem.HashCommon: int capacity>;

        $d0 = (double) $i1;

        $d1 = $d0 * 0.5;

        $i2 = (int) $d1;

        r0.<com.hp.hpl.jena.mem.HashCommon: int threshold> = $i2;

        return;
    }

    protected abstract java.lang.Object[] newKeyArray(int);

    protected void removeAssociatedValues(int)
    {
        int i0;
        com.hp.hpl.jena.mem.HashCommon r0;

        r0 := @this: com.hp.hpl.jena.mem.HashCommon;

        i0 := @parameter0: int;

        return;
    }

    protected void moveAssociatedValues(int, int)
    {
        int i0, i1;
        com.hp.hpl.jena.mem.HashCommon r0;

        r0 := @this: com.hp.hpl.jena.mem.HashCommon;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public java.lang.Object getItemForTestingAt(int)
    {
        java.lang.Object[] $r1;
        int i0;
        java.lang.Object $r2;
        com.hp.hpl.jena.mem.HashCommon r0;

        r0 := @this: com.hp.hpl.jena.mem.HashCommon;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.mem.HashCommon: java.lang.Object[] keys>;

        $r2 = $r1[i0];

        return $r2;
    }

    protected final int initialIndexFor(java.lang.Object)
    {
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1;
        com.hp.hpl.jena.mem.HashCommon r0;

        r0 := @this: com.hp.hpl.jena.mem.HashCommon;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $i1 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashCommon: int improveHashCode(int)>($i0);

        $i3 = $i1 & 2147483647;

        $i2 = r0.<com.hp.hpl.jena.mem.HashCommon: int capacity>;

        $i4 = $i3 % $i2;

        return $i4;
    }

    protected int improveHashCode(int)
    {
        int i0, $i1;
        com.hp.hpl.jena.mem.HashCommon r0;

        r0 := @this: com.hp.hpl.jena.mem.HashCommon;

        i0 := @parameter0: int;

        $i1 = i0 * 127;

        return $i1;
    }

    protected final int findSlot(java.lang.Object)
    {
        java.lang.Object[] $r2;
        com.hp.hpl.jena.mem.HashCommon r0;
        int $i0, $i1, i2, $i4, $i6;
        java.lang.Object r1, $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.HashCommon;

        r1 := @parameter0: java.lang.Object;

        i2 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashCommon: int initialIndexFor(java.lang.Object)>(r1);

     label1:
        $r2 = r0.<com.hp.hpl.jena.mem.HashCommon: java.lang.Object[] keys>;

        $r3 = $r2[i2];

        if $r3 != null goto label2;

        return i2;

     label2:
        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        $i4 = (int) -1;

        $i1 = i2 ^ $i4;

        return $i1;

     label3:
        $i6 = (int) -1;

        i2 = i2 + $i6;

        if i2 >= 0 goto label4;

        $i0 = r0.<com.hp.hpl.jena.mem.HashCommon: int capacity>;

        i2 = i2 + $i0;

     label4:
        goto label1;
    }

    public void remove(java.lang.Object)
    {
        java.lang.Object r1;
        com.hp.hpl.jena.mem.HashCommon r0;

        r0 := @this: com.hp.hpl.jena.mem.HashCommon;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.hp.hpl.jena.mem.HashCommon: void primitiveRemove(java.lang.Object)>(r1);

        return;
    }

    private void primitiveRemove(java.lang.Object)
    {
        int $i0, $i1, $i3;
        java.lang.Object r1;
        com.hp.hpl.jena.mem.HashCommon r0;

        r0 := @this: com.hp.hpl.jena.mem.HashCommon;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashCommon: int findSlot(java.lang.Object)>(r1);

        if $i0 >= 0 goto label1;

        $i3 = (int) -1;

        $i1 = $i0 ^ $i3;

        virtualinvoke r0.<com.hp.hpl.jena.mem.HashCommon: java.lang.Object removeFrom(int)>($i1);

     label1:
        return;
    }

    protected void growCapacityAndThreshold()
    {
        com.hp.hpl.jena.mem.HashCommon r0;
        int $i0, $i1, $i2, $i3, $i4;
        double $d0, $d1;

        r0 := @this: com.hp.hpl.jena.mem.HashCommon;

        $i0 = r0.<com.hp.hpl.jena.mem.HashCommon: int capacity>;

        $i1 = $i0 * 2;

        $i2 = staticinvoke <com.hp.hpl.jena.mem.HashCommon: int nextSize(int)>($i1);

        r0.<com.hp.hpl.jena.mem.HashCommon: int capacity> = $i2;

        $i3 = r0.<com.hp.hpl.jena.mem.HashCommon: int capacity>;

        $d0 = (double) $i3;

        $d1 = $d0 * 0.5;

        $i4 = (int) $d1;

        r0.<com.hp.hpl.jena.mem.HashCommon: int threshold> = $i4;

        return;
    }

    protected static int nextSize(int)
    {
        int[] $r0, $r1, $r2;
        int $i0, i1, $i2, $i3, i4;

        i1 := @parameter0: int;

        i4 = 0;

     label1:
        $r0 = <com.hp.hpl.jena.mem.HashCommon: int[] primes>;

        $i0 = lengthof $r0;

        if i4 >= $i0 goto label3;

        $r1 = <com.hp.hpl.jena.mem.HashCommon: int[] primes>;

        $i2 = $r1[i4];

        if $i2 <= i1 goto label2;

        $r2 = <com.hp.hpl.jena.mem.HashCommon: int[] primes>;

        $i3 = $r2[i4];

        return $i3;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return i1;
    }

    protected java.lang.Object removeFrom(int)
    {
        java.lang.Object[] $r1, $r2, $r3, $r6, $r7;
        com.hp.hpl.jena.mem.HashCommon r0;
        int i0, $i1, $i2, $i3, $i4, i5, i6, $i8;
        java.lang.Object $r4, r5, $r8;

        r0 := @this: com.hp.hpl.jena.mem.HashCommon;

        i5 := @parameter0: int;

        i0 = i5;

        r5 = null;

        $i1 = r0.<com.hp.hpl.jena.mem.HashCommon: int size>;

        $i2 = $i1 - 1;

        r0.<com.hp.hpl.jena.mem.HashCommon: int size> = $i2;

     label01:
        $r1 = r0.<com.hp.hpl.jena.mem.HashCommon: java.lang.Object[] keys>;

        $r1[i5] = null;

        virtualinvoke r0.<com.hp.hpl.jena.mem.HashCommon: void removeAssociatedValues(int)>(i5);

        i6 = i5;

     label02:
        $i8 = (int) -1;

        i6 = i6 + $i8;

        if i6 >= 0 goto label03;

        $i4 = r0.<com.hp.hpl.jena.mem.HashCommon: int capacity>;

        i6 = i6 + $i4;

     label03:
        $r2 = r0.<com.hp.hpl.jena.mem.HashCommon: java.lang.Object[] keys>;

        $r4 = $r2[i6];

        if $r4 != null goto label04;

        return r5;

     label04:
        $i3 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashCommon: int initialIndexFor(java.lang.Object)>($r4);

        if i6 > $i3 goto label05;

        if $i3 < i5 goto label09;

     label05:
        if $i3 >= i5 goto label06;

        if i5 < i6 goto label09;

     label06:
        if i5 >= i6 goto label07;

        if i6 > $i3 goto label07;

        goto label09;

     label07:
        if i5 > i0 goto label08;

        if i6 <= i0 goto label08;

        $r3 = r0.<com.hp.hpl.jena.mem.HashCommon: java.lang.Object[] keys>;

        r5 = $r3[i6];

     label08:
        $r6 = r0.<com.hp.hpl.jena.mem.HashCommon: java.lang.Object[] keys>;

        $r7 = r0.<com.hp.hpl.jena.mem.HashCommon: java.lang.Object[] keys>;

        $r8 = $r7[i6];

        $r6[i5] = $r8;

        virtualinvoke r0.<com.hp.hpl.jena.mem.HashCommon: void moveAssociatedValues(int,int)>(i5, i6);

        i5 = i6;

        goto label10;

     label09:
        goto label02;

     label10:
        goto label01;
    }

    void showkeys()
    {
        com.hp.hpl.jena.mem.HashCommon r0;

        r0 := @this: com.hp.hpl.jena.mem.HashCommon;

        return;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator keyIterator()
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.mem.HashCommon r0;
        com.hp.hpl.jena.mem.HashCommon$NotifyEmpty $r1;

        r0 := @this: com.hp.hpl.jena.mem.HashCommon;

        $r1 = <com.hp.hpl.jena.mem.HashCommon$NotifyEmpty: com.hp.hpl.jena.mem.HashCommon$NotifyEmpty ignore>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashCommon: com.hp.hpl.jena.util.iterator.ExtendedIterator keyIterator(com.hp.hpl.jena.mem.HashCommon$NotifyEmpty)>($r1);

        return $r2;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator keyIterator(com.hp.hpl.jena.mem.HashCommon$NotifyEmpty)
    {
        com.hp.hpl.jena.mem.HashCommon$BasicKeyIterator $r2;
        com.hp.hpl.jena.mem.HashCommon$NotifyEmpty r3;
        com.hp.hpl.jena.mem.HashCommon r0;
        java.util.ArrayList $r1;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        int $i0, $i1;
        com.hp.hpl.jena.mem.HashCommon$MovedKeysIterator $r4;

        r0 := @this: com.hp.hpl.jena.mem.HashCommon;

        r3 := @parameter0: com.hp.hpl.jena.mem.HashCommon$NotifyEmpty;

        virtualinvoke r0.<com.hp.hpl.jena.mem.HashCommon: void showkeys()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = new com.hp.hpl.jena.mem.HashCommon$BasicKeyIterator;

        $i0 = r0.<com.hp.hpl.jena.mem.HashCommon: int changes>;

        specialinvoke $r2.<com.hp.hpl.jena.mem.HashCommon$BasicKeyIterator: void <init>(com.hp.hpl.jena.mem.HashCommon,int,com.hp.hpl.jena.mem.HashCommon$NotifyEmpty,java.util.List)>(r0, $i0, r3, $r1);

        $r4 = new com.hp.hpl.jena.mem.HashCommon$MovedKeysIterator;

        $i1 = r0.<com.hp.hpl.jena.mem.HashCommon: int changes>;

        specialinvoke $r4.<com.hp.hpl.jena.mem.HashCommon$MovedKeysIterator: void <init>(com.hp.hpl.jena.mem.HashCommon,int,com.hp.hpl.jena.mem.HashCommon$NotifyEmpty,java.util.List)>(r0, $i1, r3, $r1);

        $r5 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator andThen(java.util.Iterator)>($r4);

        return $r5;
    }

    static void access$000(com.hp.hpl.jena.mem.HashCommon, java.lang.Object)
    {
        java.lang.Object r1;
        com.hp.hpl.jena.mem.HashCommon r0;

        r0 := @parameter0: com.hp.hpl.jena.mem.HashCommon;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.hp.hpl.jena.mem.HashCommon: void primitiveRemove(java.lang.Object)>(r1);

        return;
    }

    static void <clinit>()
    {
        int $i1;
        int[] $r0;

        <com.hp.hpl.jena.mem.HashCommon: double loadFactor> = 0.5;

        $r0 = newarray (int)[20];

        $r0[0] = 7;

        $r0[1] = 19;

        $r0[2] = 37;

        $r0[3] = 79;

        $r0[4] = 149;

        $r0[5] = 307;

        $r0[6] = 617;

        $r0[7] = 1237;

        $r0[8] = 2477;

        $r0[9] = 4957;

        $r0[10] = 9923;

        $r0[11] = 19853;

        $i1 = (int) 39709;

        $r0[12] = $i1;

        $r0[13] = 79423;

        $r0[14] = 158849;

        $r0[15] = 317701;

        $r0[16] = 635413;

        $r0[17] = 1270849;

        $r0[18] = 2541701;

        $r0[19] = 5083423;

        <com.hp.hpl.jena.mem.HashCommon: int[] primes> = $r0;

        return;
    }
}
