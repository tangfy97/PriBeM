public class org.wiztools.commons.Base58Util extends java.lang.Object
{
    private static final java.util.Map MAP_BASE58;

    public void <init>()
    {
        org.wiztools.commons.Base58Util r0;

        r0 := @this: org.wiztools.commons.Base58Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String encode(long)
    {
        byte $b4, $b11;
        java.lang.Long $r1, $r4, $r7, $r12;
        boolean $z0;
        java.lang.StringBuilder $r17;
        long l0, $l2, $l3, $l6, $l8, $l10, $l12, $l13, $l14, l19;
        int $i1, $i5, $i7, $i9, $i15, $i17, $i20, $i21;
        java.lang.String $r10, $r15;
        java.util.LinkedList $r16;
        java.util.Iterator $r9;
        char $c16, $c18;
        char[] $r0, $r3, $r5, $r6, $r13, $r14;
        java.lang.Object $r11;

        l0 := @parameter0: long;

        l19 = l0;

        $r0 = <org.wiztools.commons.Characters: char[] BASE58>;

        $i1 = lengthof $r0;

        $l2 = (long) $i1;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $l3 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        $b4 = l0 cmp $l3;

        $i20 = (int) $b4;

        if $i20 >= 0 goto label1;

        $r14 = <org.wiztools.commons.Characters: char[] BASE58>;

        $i17 = (int) l0;

        $c18 = $r14[$i17];

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c18);

        return $r15;

     label1:
        $r16 = new java.util.LinkedList;

        specialinvoke $r16.<java.util.LinkedList: void <init>()>();

     label2:
        $r3 = <org.wiztools.commons.Characters: char[] BASE58>;

        $i5 = lengthof $r3;

        $l6 = (long) $i5;

        $l12 = l19 % $l6;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l12);

        virtualinvoke $r16.<java.util.LinkedList: void addFirst(java.lang.Object)>($r4);

        $r5 = <org.wiztools.commons.Characters: char[] BASE58>;

        $i7 = lengthof $r5;

        $l8 = (long) $i7;

        $l13 = l19 / $l8;

        l19 = $l13;

        $r6 = <org.wiztools.commons.Characters: char[] BASE58>;

        $i9 = lengthof $r6;

        $l10 = (long) $i9;

        $b11 = $l13 cmp $l10;

        $i21 = (int) $b11;

        if $i21 >= 0 goto label3;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l13);

        virtualinvoke $r16.<java.util.LinkedList: void addFirst(java.lang.Object)>($r7);

        goto label4;

     label3:
        goto label2;

     label4:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r16.<java.util.LinkedList: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r11 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.Long) $r11;

        $l14 = virtualinvoke $r12.<java.lang.Long: long longValue()>();

        $r13 = <org.wiztools.commons.Characters: char[] BASE58>;

        $i15 = (int) $l14;

        $c16 = $r13[$i15];

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c16);

        goto label5;

     label6:
        $r10 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public static long decode(java.lang.String)
    {
        long $l3, $l4, $l6, l8, l9;
        java.lang.Character $r4, $r7;
        java.lang.Long $r9;
        java.util.Map $r3, $r6;
        int $i0, $i5, i10;
        java.lang.String r0, $r1, $r15;
        char $c1, $c2, $c7;
        java.lang.IllegalArgumentException $r11;
        char[] $r2, $r10;
        java.lang.Object $r5, $r8;
        java.lang.StringBuilder $r12, $r13, $r14;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        staticinvoke <org.wiztools.commons.ArrayUtil: void reverse(char[])>($r2);

        l8 = 0L;

        l9 = 1L;

        i10 = 0;

     label1:
        $i0 = lengthof $r2;

        if i10 >= $i0 goto label3;

        $r3 = <org.wiztools.commons.Base58Util: java.util.Map MAP_BASE58>;

        $c1 = $r2[i10];

        $r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        if $r5 != null goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid character encountered: ");

        $c7 = $r2[i10];

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label2:
        $r6 = <org.wiztools.commons.Base58Util: java.util.Map MAP_BASE58>;

        $c2 = $r2[i10];

        $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r9 = (java.lang.Long) $r8;

        $l3 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        $l4 = $l3 * l9;

        l8 = l8 + $l4;

        $r10 = <org.wiztools.commons.Characters: char[] BASE58>;

        $i5 = lengthof $r10;

        $l6 = (long) $i5;

        l9 = l9 * $l6;

        i10 = i10 + 1;

        goto label1;

     label3:
        return l8;
    }

    static void <clinit>()
    {
        long $l1, l5;
        char $c4;
        java.util.HashMap $r6;
        byte $b2;
        java.lang.Character $r4;
        java.lang.Long $r5;
        java.util.Map $r2;
        int $i0, $i3, $i6;
        char[] $r1, $r3;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        l5 = 0L;

     label1:
        $r1 = <org.wiztools.commons.Characters: char[] BASE58>;

        $i0 = lengthof $r1;

        $l1 = (long) $i0;

        $b2 = l5 cmp $l1;

        $i6 = (int) $b2;

        if $i6 >= 0 goto label2;

        $r3 = <org.wiztools.commons.Characters: char[] BASE58>;

        $i3 = (int) l5;

        $c4 = $r3[$i3];

        $r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        l5 = l5 + 1L;

        goto label1;

     label2:
        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r6);

        <org.wiztools.commons.Base58Util: java.util.Map MAP_BASE58> = $r2;

        return;
    }
}
