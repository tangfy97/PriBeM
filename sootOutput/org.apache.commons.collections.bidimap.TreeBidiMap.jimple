public class org.apache.commons.collections.bidimap.TreeBidiMap extends java.lang.Object implements org.apache.commons.collections.OrderedBidiMap
{
    private static final int KEY;
    private static final int VALUE;
    private static final int MAPENTRY;
    private static final int INVERSEMAPENTRY;
    private static final int SUM_OF_INDICES;
    private static final int FIRST_INDEX;
    private static final int NUMBER_OF_INDICES;
    private static final java.lang.String[] dataName;
    private org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode;
    private int nodeCount;
    private int modifications;
    private java.util.Set keySet;
    private java.util.Set valuesSet;
    private java.util.Set entrySet;
    private org.apache.commons.collections.bidimap.TreeBidiMap$Inverse inverse;

    public void <init>()
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node[] $r1;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (org.apache.commons.collections.bidimap.TreeBidiMap$Node)[2];

        r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode> = $r1;

        r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int nodeCount> = 0;

        r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int modifications> = 0;

        r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Inverse inverse> = null;

        return;
    }

    public void <init>(java.util.Map)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node[] $r1;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;
        java.util.Map r2;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r2 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (org.apache.commons.collections.bidimap.TreeBidiMap$Node)[2];

        r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode> = $r1;

        r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int nodeCount> = 0;

        r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int modifications> = 0;

        r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Inverse inverse> = null;

        virtualinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: void putAll(java.util.Map)>(r2);

        return;
    }

    public int size()
    {
        int $i0;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        $i0 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int nodeCount>;

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        $i0 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int nodeCount>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node $r3;
        java.lang.Object r0;
        java.lang.Comparable $r2;
        org.apache.commons.collections.bidimap.TreeBidiMap r1;
        boolean $z0;

        r1 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void checkKey(java.lang.Object)>(r0);

        $r2 = (java.lang.Comparable) r0;

        $r3 = specialinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node lookup(java.lang.Comparable,int)>($r2, 0);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node $r3;
        java.lang.Object r0;
        java.lang.Comparable $r2;
        org.apache.commons.collections.bidimap.TreeBidiMap r1;
        boolean $z0;

        r1 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void checkValue(java.lang.Object)>(r0);

        $r2 = (java.lang.Comparable) r0;

        $r3 = specialinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node lookup(java.lang.Comparable,int)>($r2, 1);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.Object r1, $r3;
        java.lang.Comparable $r2;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $r3 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: java.lang.Object doGet(java.lang.Comparable,int)>($r2, 0);

        return $r3;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2, $r5;
        java.lang.Comparable $r3, $r4;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Comparable) r1;

        $r3 = (java.lang.Comparable) r2;

        $r5 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: java.lang.Object doPut(java.lang.Comparable,java.lang.Comparable,int)>($r4, $r3, 0);

        return $r5;
    }

    public void putAll(java.util.Map)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.util.Map r0;
        java.lang.Object $r3, $r6, $r7;
        org.apache.commons.collections.bidimap.TreeBidiMap r5;
        boolean $z0;

        r5 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r5.<org.apache.commons.collections.bidimap.TreeBidiMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label1;

     label2:
        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.lang.Object r1, $r3;
        java.lang.Comparable $r2;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $r3 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: java.lang.Object doRemove(java.lang.Comparable,int)>($r2, 0);

        return $r3;
    }

    public void clear()
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node[] $r1, $r2;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: void modify()>();

        r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int nodeCount> = 0;

        $r1 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r1[0] = null;

        $r2 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r2[1] = null;

        return;
    }

    public java.lang.Object getKey(java.lang.Object)
    {
        java.lang.Object r1, $r3;
        java.lang.Comparable $r2;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $r3 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: java.lang.Object doGet(java.lang.Comparable,int)>($r2, 1);

        return $r3;
    }

    public java.lang.Object removeValue(java.lang.Object)
    {
        java.lang.Object r1, $r3;
        java.lang.Comparable $r2;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $r3 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: java.lang.Object doRemove(java.lang.Comparable,int)>($r2, 1);

        return $r3;
    }

    public java.lang.Object firstKey()
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node $r2, $r3;
        int $i0;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node[] $r1;
        java.lang.Object $r4;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;
        java.util.NoSuchElementException $r5;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        $i0 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int nodeCount>;

        if $i0 != 0 goto label1;

        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Map is empty");

        throw $r5;

     label1:
        $r1 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r2 = $r1[0];

        $r3 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node leastNode(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r2, 0);

        $r4 = virtualinvoke $r3.<org.apache.commons.collections.bidimap.TreeBidiMap$Node: java.lang.Object getKey()>();

        return $r4;
    }

    public java.lang.Object lastKey()
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node $r2, $r3;
        int $i0;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node[] $r1;
        java.lang.Object $r4;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;
        java.util.NoSuchElementException $r5;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        $i0 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int nodeCount>;

        if $i0 != 0 goto label1;

        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Map is empty");

        throw $r5;

     label1:
        $r1 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r2 = $r1[0];

        $r3 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node greatestNode(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r2, 0);

        $r4 = virtualinvoke $r3.<org.apache.commons.collections.bidimap.TreeBidiMap$Node: java.lang.Object getKey()>();

        return $r4;
    }

    public java.lang.Object nextKey(java.lang.Object)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node $r3, $r4;
        java.lang.Object r0, $r5;
        java.lang.Comparable $r2;
        org.apache.commons.collections.bidimap.TreeBidiMap r1;

        r1 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void checkKey(java.lang.Object)>(r0);

        $r2 = (java.lang.Comparable) r0;

        $r3 = specialinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node lookup(java.lang.Comparable,int)>($r2, 0);

        $r4 = specialinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node nextGreater(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r3, 0);

        if $r4 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = virtualinvoke $r4.<org.apache.commons.collections.bidimap.TreeBidiMap$Node: java.lang.Object getKey()>();

     label2:
        return $r5;
    }

    public java.lang.Object previousKey(java.lang.Object)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node $r3, $r4;
        java.lang.Object r0, $r5;
        java.lang.Comparable $r2;
        org.apache.commons.collections.bidimap.TreeBidiMap r1;

        r1 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void checkKey(java.lang.Object)>(r0);

        $r2 = (java.lang.Comparable) r0;

        $r3 = specialinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node lookup(java.lang.Comparable,int)>($r2, 0);

        $r4 = specialinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node nextSmaller(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r3, 0);

        if $r4 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = virtualinvoke $r4.<org.apache.commons.collections.bidimap.TreeBidiMap$Node: java.lang.Object getKey()>();

     label2:
        return $r5;
    }

    public java.util.Set keySet()
    {
        java.util.Set $r1, $r2;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;
        org.apache.commons.collections.bidimap.TreeBidiMap$View $r3;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        $r1 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: java.util.Set keySet>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections.bidimap.TreeBidiMap$View;

        specialinvoke $r3.<org.apache.commons.collections.bidimap.TreeBidiMap$View: void <init>(org.apache.commons.collections.bidimap.TreeBidiMap,int,int)>(r0, 0, 0);

        r0.<org.apache.commons.collections.bidimap.TreeBidiMap: java.util.Set keySet> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: java.util.Set keySet>;

        return $r2;
    }

    public java.util.Collection values()
    {
        java.util.Set $r1, $r2;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;
        org.apache.commons.collections.bidimap.TreeBidiMap$View $r3;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        $r1 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: java.util.Set valuesSet>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections.bidimap.TreeBidiMap$View;

        specialinvoke $r3.<org.apache.commons.collections.bidimap.TreeBidiMap$View: void <init>(org.apache.commons.collections.bidimap.TreeBidiMap,int,int)>(r0, 0, 1);

        r0.<org.apache.commons.collections.bidimap.TreeBidiMap: java.util.Set valuesSet> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: java.util.Set valuesSet>;

        return $r2;
    }

    public java.util.Set entrySet()
    {
        java.util.Set $r1, $r2;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;
        org.apache.commons.collections.bidimap.TreeBidiMap$EntryView $r3;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        $r1 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: java.util.Set entrySet>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections.bidimap.TreeBidiMap$EntryView;

        specialinvoke $r3.<org.apache.commons.collections.bidimap.TreeBidiMap$EntryView: void <init>(org.apache.commons.collections.bidimap.TreeBidiMap,int,int)>(r0, 0, 2);

        return $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: java.util.Set entrySet>;

        return $r2;
    }

    public org.apache.commons.collections.MapIterator mapIterator()
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$ViewMapIterator $r1;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;
        org.apache.commons.collections.OrderedMapIterator $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = <org.apache.commons.collections.iterators.EmptyOrderedMapIterator: org.apache.commons.collections.OrderedMapIterator INSTANCE>;

        return $r2;

     label1:
        $r1 = new org.apache.commons.collections.bidimap.TreeBidiMap$ViewMapIterator;

        specialinvoke $r1.<org.apache.commons.collections.bidimap.TreeBidiMap$ViewMapIterator: void <init>(org.apache.commons.collections.bidimap.TreeBidiMap,int)>(r0, 0);

        return $r1;
    }

    public org.apache.commons.collections.OrderedMapIterator orderedMapIterator()
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$ViewMapIterator $r1;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;
        org.apache.commons.collections.OrderedMapIterator $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = <org.apache.commons.collections.iterators.EmptyOrderedMapIterator: org.apache.commons.collections.OrderedMapIterator INSTANCE>;

        return $r2;

     label1:
        $r1 = new org.apache.commons.collections.bidimap.TreeBidiMap$ViewMapIterator;

        specialinvoke $r1.<org.apache.commons.collections.bidimap.TreeBidiMap$ViewMapIterator: void <init>(org.apache.commons.collections.bidimap.TreeBidiMap,int)>(r0, 0);

        return $r1;
    }

    public org.apache.commons.collections.BidiMap inverseBidiMap()
    {
        org.apache.commons.collections.OrderedBidiMap $r1;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.OrderedBidiMap inverseOrderedBidiMap()>();

        return $r1;
    }

    public org.apache.commons.collections.OrderedBidiMap inverseOrderedBidiMap()
    {
        org.apache.commons.collections.bidimap.TreeBidiMap r0;
        org.apache.commons.collections.bidimap.TreeBidiMap$Inverse $r1, $r2, $r3;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        $r1 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Inverse inverse>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections.bidimap.TreeBidiMap$Inverse;

        specialinvoke $r3.<org.apache.commons.collections.bidimap.TreeBidiMap$Inverse: void <init>(org.apache.commons.collections.bidimap.TreeBidiMap)>(r0);

        r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Inverse inverse> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Inverse inverse>;

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: boolean doEquals(java.lang.Object,int)>(r1, 0);

        return $z0;
    }

    public int hashCode()
    {
        int $i0;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        $i0 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int doHashCode(int)>(0);

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        $r1 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: java.lang.String doToString(int)>(0);

        return $r1;
    }

    private java.lang.Object doGet(java.lang.Comparable, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node $r2;
        int i0, $i1;
        java.lang.Comparable r0, $r3;
        org.apache.commons.collections.bidimap.TreeBidiMap r1;

        r1 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r0 := @parameter0: java.lang.Comparable;

        i0 := @parameter1: int;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void checkNonNullComparable(java.lang.Object,int)>(r0, i0);

        $r2 = specialinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node lookup(java.lang.Comparable,int)>(r0, i0);

        if $r2 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $i1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: int oppositeIndex(int)>(i0);

        $r3 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: java.lang.Comparable access$000(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r2, $i1);

     label2:
        return $r3;
    }

    private java.lang.Object doPut(java.lang.Comparable, java.lang.Comparable, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node[] $r4, $r17, $r18;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node $r6, $r7, $r8, $r9, $r16, $r19, r21;
        java.lang.StringBuffer $r11, $r12, $r13, $r14;
        int i0, $i1;
        java.lang.String $r15;
        org.apache.commons.collections.bidimap.TreeBidiMap r2;
        java.lang.IllegalArgumentException $r10;
        java.lang.Comparable r0, r1, $r5;
        java.lang.Object r3, $r20;

        r2 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r0 := @parameter0: java.lang.Comparable;

        r1 := @parameter1: java.lang.Comparable;

        i0 := @parameter2: int;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void checkKeyAndValue(java.lang.Object,java.lang.Object)>(r0, r1);

        if i0 != 0 goto label1;

        $r20 = specialinvoke r2.<org.apache.commons.collections.bidimap.TreeBidiMap: java.lang.Object doGet(java.lang.Comparable,int)>(r0, 0);

        goto label2;

     label1:
        $r20 = specialinvoke r2.<org.apache.commons.collections.bidimap.TreeBidiMap: java.lang.Object doGet(java.lang.Comparable,int)>(r1, 1);

     label2:
        r3 = $r20;

        specialinvoke r2.<org.apache.commons.collections.bidimap.TreeBidiMap: java.lang.Object doRemove(java.lang.Comparable,int)>(r0, 0);

        specialinvoke r2.<org.apache.commons.collections.bidimap.TreeBidiMap: java.lang.Object doRemove(java.lang.Comparable,int)>(r1, 1);

        $r4 = r2.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r19 = $r4[0];

        r21 = $r19;

        if $r19 != null goto label3;

        $r16 = new org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        specialinvoke $r16.<org.apache.commons.collections.bidimap.TreeBidiMap$Node: void <init>(java.lang.Comparable,java.lang.Comparable)>(r0, r1);

        $r17 = r2.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r17[0] = $r16;

        $r18 = r2.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r18[1] = $r16;

        specialinvoke r2.<org.apache.commons.collections.bidimap.TreeBidiMap: void grow()>();

        goto label9;

     label3:
        $r5 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: java.lang.Comparable access$000(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r21, 0);

        $i1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: int compare(java.lang.Comparable,java.lang.Comparable)>(r0, $r5);

        if $i1 != 0 goto label4;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot store a duplicate key (\"");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\") in this Map");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label4:
        if $i1 >= 0 goto label6;

        $r8 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r21, 0);

        if $r8 == null goto label5;

        r21 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r21, 0);

        goto label8;

     label5:
        $r9 = new org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        specialinvoke $r9.<org.apache.commons.collections.bidimap.TreeBidiMap$Node: void <init>(java.lang.Comparable,java.lang.Comparable)>(r0, r1);

        specialinvoke r2.<org.apache.commons.collections.bidimap.TreeBidiMap: void insertValue(org.apache.commons.collections.bidimap.TreeBidiMap$Node)>($r9);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r21, $r9, 0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r9, r21, 0);

        specialinvoke r2.<org.apache.commons.collections.bidimap.TreeBidiMap: void doRedBlackInsert(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r9, 0);

        specialinvoke r2.<org.apache.commons.collections.bidimap.TreeBidiMap: void grow()>();

        goto label9;

     label6:
        $r6 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r21, 0);

        if $r6 == null goto label7;

        r21 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r21, 0);

        goto label8;

     label7:
        $r7 = new org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        specialinvoke $r7.<org.apache.commons.collections.bidimap.TreeBidiMap$Node: void <init>(java.lang.Comparable,java.lang.Comparable)>(r0, r1);

        specialinvoke r2.<org.apache.commons.collections.bidimap.TreeBidiMap: void insertValue(org.apache.commons.collections.bidimap.TreeBidiMap$Node)>($r7);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$500(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r21, $r7, 0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r7, r21, 0);

        specialinvoke r2.<org.apache.commons.collections.bidimap.TreeBidiMap: void doRedBlackInsert(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r7, 0);

        specialinvoke r2.<org.apache.commons.collections.bidimap.TreeBidiMap: void grow()>();

        goto label9;

     label8:
        goto label3;

     label9:
        return r3;
    }

    private java.lang.Object doRemove(java.lang.Comparable, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node $r2;
        int i0, $i1;
        java.lang.Comparable r1, r3;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r1 := @parameter0: java.lang.Comparable;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node lookup(java.lang.Comparable,int)>(r1, i0);

        r3 = null;

        if $r2 == null goto label1;

        $i1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: int oppositeIndex(int)>(i0);

        r3 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: java.lang.Comparable access$000(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r2, $i1);

        specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: void doRedBlackDelete(org.apache.commons.collections.bidimap.TreeBidiMap$Node)>($r2);

     label1:
        return r3;
    }

    private org.apache.commons.collections.bidimap.TreeBidiMap$Node lookup(java.lang.Comparable, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node[] $r1;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r4, r5, $r6;
        int i0, $i1;
        java.lang.Comparable r2, $r3;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r2 := @parameter0: java.lang.Comparable;

        i0 := @parameter1: int;

        r4 = null;

        $r1 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        r5 = $r1[i0];

     label1:
        if r5 == null goto label5;

        $r3 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: java.lang.Comparable access$000(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r5, i0);

        $i1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: int compare(java.lang.Comparable,java.lang.Comparable)>(r2, $r3);

        if $i1 != 0 goto label2;

        r4 = r5;

        goto label5;

     label2:
        if $i1 >= 0 goto label3;

        $r6 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r5, i0);

        goto label4;

     label3:
        $r6 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r5, i0);

     label4:
        r5 = $r6;

        goto label1;

     label5:
        return r4;
    }

    private org.apache.commons.collections.bidimap.TreeBidiMap$Node nextGreater(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, $r1, $r2, $r3, r5, r6, r7;
        int i0;
        org.apache.commons.collections.bidimap.TreeBidiMap r4;

        r4 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        r5 = null;

        goto label5;

     label1:
        $r1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        if $r1 == null goto label2;

        $r3 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        r5 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node leastNode(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r3, i0);

        goto label5;

     label2:
        r6 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        r7 = r0;

     label3:
        if r6 == null goto label4;

        $r2 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r6, i0);

        if r7 != $r2 goto label4;

        r7 = r6;

        r6 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r6, i0);

        goto label3;

     label4:
        r5 = r6;

     label5:
        return r5;
    }

    private org.apache.commons.collections.bidimap.TreeBidiMap$Node nextSmaller(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, $r1, $r2, $r3, r5, r6, r7;
        int i0;
        org.apache.commons.collections.bidimap.TreeBidiMap r4;

        r4 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        r5 = null;

        goto label5;

     label1:
        $r1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        if $r1 == null goto label2;

        $r3 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        r5 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node greatestNode(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r3, i0);

        goto label5;

     label2:
        r6 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        r7 = r0;

     label3:
        if r6 == null goto label4;

        $r2 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r6, i0);

        if r7 != $r2 goto label4;

        r7 = r6;

        r6 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r6, i0);

        goto label3;

     label4:
        r5 = r6;

     label5:
        return r5;
    }

    private static int oppositeIndex(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = 1 - i0;

        return $i1;
    }

    private static int compare(java.lang.Comparable, java.lang.Comparable)
    {
        int $i0;
        java.lang.Comparable r0, r1;

        r0 := @parameter0: java.lang.Comparable;

        r1 := @parameter1: java.lang.Comparable;

        $i0 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        return $i0;
    }

    private static org.apache.commons.collections.bidimap.TreeBidiMap$Node leastNode(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, $r1, r2;
        int i0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        r2 = r0;

        if r0 == null goto label2;

     label1:
        $r1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r2, i0);

        if $r1 == null goto label2;

        r2 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r2, i0);

        goto label1;

     label2:
        return r2;
    }

    private static org.apache.commons.collections.bidimap.TreeBidiMap$Node greatestNode(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, $r1, r2;
        int i0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        r2 = r0;

        if r0 == null goto label2;

     label1:
        $r1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r2, i0);

        if $r1 == null goto label2;

        r2 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r2, i0);

        goto label1;

     label2:
        return r2;
    }

    private static void copyColor(org.apache.commons.collections.bidimap.TreeBidiMap$Node, org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, r1;

        r1 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        r0 := @parameter1: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter2: int;

        if r0 == null goto label2;

        if r1 != null goto label1;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$700(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        goto label2;

     label1:
        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$800(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, r1, i0);

     label2:
        return;
    }

    private static boolean isRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $z0 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: boolean access$900(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

     label2:
        return $z0;
    }

    private static boolean isBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: boolean access$1000(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

     label2:
        return $z0;
    }

    private static void makeRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        if r0 == null goto label1;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$1100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

     label1:
        return;
    }

    private static void makeBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        if r0 == null goto label1;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$700(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

     label1:
        return;
    }

    private static org.apache.commons.collections.bidimap.TreeBidiMap$Node getGrandParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, $r1, $r2;
        int i0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        $r2 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r1, i0);

        return $r2;
    }

    private static org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, $r1;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

     label2:
        return $r1;
    }

    private static org.apache.commons.collections.bidimap.TreeBidiMap$Node getRightChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, $r1;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

     label2:
        return $r1;
    }

    private static org.apache.commons.collections.bidimap.TreeBidiMap$Node getLeftChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, $r1;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

     label2:
        return $r1;
    }

    private static boolean isLeftChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, $r1, $r2, $r3;
        int i0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $z0 = 1;

        goto label4;

     label1:
        $r1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        if $r1 != null goto label2;

        $z0 = 0;

        goto label4;

     label2:
        $r2 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        $r3 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r2, i0);

        if r0 != $r3 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private static boolean isRightChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, $r1, $r2, $r3;
        int i0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $z0 = 1;

        goto label4;

     label1:
        $r1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        if $r1 != null goto label2;

        $z0 = 0;

        goto label4;

     label2:
        $r2 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        $r3 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r2, i0);

        if r0 != $r3 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private void rotateLeft(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node[] $r11;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r12;
        int i0;
        org.apache.commons.collections.bidimap.TreeBidiMap r10;

        r10 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        $r2 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r1, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$500(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, $r2, i0);

        $r3 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r1, i0);

        if $r3 == null goto label1;

        $r12 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r1, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r12, r0, i0);

     label1:
        $r4 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r1, $r4, i0);

        $r5 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        if $r5 != null goto label2;

        $r11 = r10.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r11[i0] = $r1;

        goto label4;

     label2:
        $r6 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        $r7 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r6, i0);

        if $r7 != r0 goto label3;

        $r9 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r9, $r1, i0);

        goto label4;

     label3:
        $r8 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$500(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r8, $r1, i0);

     label4:
        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r1, r0, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, $r1, i0);

        return;
    }

    private void rotateRight(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node[] $r11;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r12;
        int i0;
        org.apache.commons.collections.bidimap.TreeBidiMap r10;

        r10 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        $r2 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r1, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, $r2, i0);

        $r3 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r1, i0);

        if $r3 == null goto label1;

        $r12 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r1, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r12, r0, i0);

     label1:
        $r4 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r1, $r4, i0);

        $r5 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        if $r5 != null goto label2;

        $r11 = r10.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r11[i0] = $r1;

        goto label4;

     label2:
        $r6 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        $r7 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r6, i0);

        if $r7 != r0 goto label3;

        $r9 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$500(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r9, $r1, i0);

        goto label4;

     label3:
        $r8 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r8, $r1, i0);

     label4:
        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$500(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r1, r0, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, $r1, i0);

        return;
    }

    private void doRedBlackInsert(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node[] $r2, $r25;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, r24, $r26;
        org.apache.commons.collections.bidimap.TreeBidiMap r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int i0;

        r1 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        r24 = r0;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

     label1:
        if r24 == null goto label9;

        $r2 = r1.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r3 = $r2[i0];

        if r24 == $r3 goto label9;

        $r4 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        $z0 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r4, i0);

        if $z0 == 0 goto label9;

        $r5 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        $z1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isLeftChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r5, i0);

        if $z1 == 0 goto label5;

        $r15 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getGrandParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        $r16 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getRightChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r15, i0);

        $z4 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r16, i0);

        if $z4 == 0 goto label2;

        $r22 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r22, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r16, i0);

        $r23 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getGrandParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r23, i0);

        r24 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getGrandParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        goto label4;

     label2:
        $z5 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isRightChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        if $z5 == 0 goto label3;

        $r21 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        r24 = $r21;

        specialinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: void rotateLeft(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r21, i0);

     label3:
        $r17 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r17, i0);

        $r18 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getGrandParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r18, i0);

        $r19 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getGrandParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        if $r19 == null goto label4;

        $r20 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getGrandParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        specialinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: void rotateRight(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r20, i0);

     label4:
        goto label1;

     label5:
        $r6 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getGrandParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        $r7 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getLeftChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r6, i0);

        $z2 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r7, i0);

        if $z2 == 0 goto label6;

        $r13 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r13, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r7, i0);

        $r14 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getGrandParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r14, i0);

        r24 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getGrandParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        goto label8;

     label6:
        $z3 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isLeftChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        if $z3 == 0 goto label7;

        $r12 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        r24 = $r12;

        specialinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: void rotateRight(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r12, i0);

     label7:
        $r8 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r8, i0);

        $r9 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getGrandParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r9, i0);

        $r10 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getGrandParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        if $r10 == null goto label8;

        $r11 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getGrandParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r24, i0);

        specialinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: void rotateLeft(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r11, i0);

     label8:
        goto label1;

     label9:
        $r25 = r1.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r26 = $r25[i0];

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r26, i0);

        return;
    }

    private void doRedBlackDelete(org.apache.commons.collections.bidimap.TreeBidiMap$Node)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node[] $r10, $r17;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r1, $r2, r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21;
        int i0;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r1 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 = 0;

     label01:
        if i0 >= 2 goto label14;

        $r2 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        if $r2 == null goto label02;

        $r18 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        if $r18 == null goto label02;

        $r19 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node nextGreater(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: void swapPosition(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r19, r1, i0);

     label02:
        $r20 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        if $r20 == null goto label03;

        $r21 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        goto label04;

     label03:
        $r21 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

     label04:
        r3 = $r21;

        if $r21 == null goto label08;

        $r11 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r21, $r11, i0);

        $r12 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        if $r12 != null goto label05;

        $r17 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r17[i0] = $r21;

        goto label07;

     label05:
        $r13 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        $r14 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r13, i0);

        if r1 != $r14 goto label06;

        $r16 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r16, $r21, i0);

        goto label07;

     label06:
        $r15 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$500(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r15, $r21, i0);

     label07:
        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, null, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$500(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, null, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, null, i0);

        $z1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        if $z1 == 0 goto label13;

        specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: void doRedBlackDeleteFixup(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r3, i0);

        goto label13;

     label08:
        $r4 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        if $r4 != null goto label09;

        $r10 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r10[i0] = null;

        goto label13;

     label09:
        $z0 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        if $z0 == 0 goto label10;

        specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: void doRedBlackDeleteFixup(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

     label10:
        $r5 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        if $r5 == null goto label13;

        $r6 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        $r7 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r6, i0);

        if r1 != $r7 goto label11;

        $r9 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r9, null, i0);

        goto label12;

     label11:
        $r8 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$500(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r8, null, i0);

     label12:
        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, null, i0);

     label13:
        i0 = i0 + 1;

        goto label01;

     label14:
        specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: void shrink()>();

        return;
    }

    private void doRedBlackDeleteFixup(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node[] $r10, $r25, $r33;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r26, $r27, $r28, $r29, $r30, $r31, r32, $r34, r35, r36;
        org.apache.commons.collections.bidimap.TreeBidiMap r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        int i0;

        r1 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        r32 = r0;

     label01:
        $r33 = r1.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r34 = $r33[i0];

        if r32 == $r34 goto label11;

        $z0 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        if $z0 == 0 goto label11;

        $z1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isLeftChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        if $z1 == 0 goto label06;

        $r17 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        $r18 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getRightChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r17, i0);

        r35 = $r18;

        $z6 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r18, i0);

        if $z6 == 0 goto label02;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r18, i0);

        $r29 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r29, i0);

        $r30 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        specialinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: void rotateLeft(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r30, i0);

        $r31 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        r35 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getRightChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r31, i0);

     label02:
        $r19 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getLeftChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r35, i0);

        $z7 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r19, i0);

        if $z7 == 0 goto label03;

        $r28 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getRightChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r35, i0);

        $z9 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r28, i0);

        if $z9 == 0 goto label03;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r35, i0);

        r32 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        goto label05;

     label03:
        $r20 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getRightChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r35, i0);

        $z8 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r20, i0);

        if $z8 == 0 goto label04;

        $r26 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getLeftChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r35, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r26, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r35, i0);

        specialinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: void rotateRight(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r35, i0);

        $r27 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        r35 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getRightChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r27, i0);

     label04:
        $r21 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void copyColor(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r21, r35, i0);

        $r22 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r22, i0);

        $r23 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getRightChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r35, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r23, i0);

        $r24 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        specialinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: void rotateLeft(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r24, i0);

        $r25 = r1.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        r32 = $r25[i0];

     label05:
        goto label01;

     label06:
        $r2 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        $r3 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getLeftChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r2, i0);

        r36 = $r3;

        $z2 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r3, i0);

        if $z2 == 0 goto label07;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r3, i0);

        $r14 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r14, i0);

        $r15 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        specialinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: void rotateRight(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r15, i0);

        $r16 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        r36 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getLeftChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r16, i0);

     label07:
        $r4 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getRightChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r36, i0);

        $z3 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r4, i0);

        if $z3 == 0 goto label08;

        $r13 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getLeftChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r36, i0);

        $z5 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r13, i0);

        if $z5 == 0 goto label08;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r36, i0);

        r32 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        goto label10;

     label08:
        $r5 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getLeftChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r36, i0);

        $z4 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: boolean isBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r5, i0);

        if $z4 == 0 goto label09;

        $r11 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getRightChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r36, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r11, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeRed(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r36, i0);

        specialinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: void rotateLeft(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r36, i0);

        $r12 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        r36 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getLeftChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r12, i0);

     label09:
        $r6 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void copyColor(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r6, r36, i0);

        $r7 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r7, i0);

        $r8 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getLeftChild(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r36, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r8, i0);

        $r9 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node getParent(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        specialinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: void rotateRight(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r9, i0);

        $r10 = r1.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        r32 = $r10[i0];

     label10:
        goto label01;

     label11:
        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void makeBlack(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r32, i0);

        return;
    }

    private void swapPosition(org.apache.commons.collections.bidimap.TreeBidiMap$Node, org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node[] $r13, $r15, $r17, $r18;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, $r1, $r2, $r3, r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r14, $r16, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;
        org.apache.commons.collections.bidimap.TreeBidiMap r12;
        boolean z0, $z1, $z3, $z4;
        int i0;

        r12 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        r4 := @parameter1: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter2: int;

        $r1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        $r2 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        $r3 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        $r5 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r4, i0);

        $r6 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r4, i0);

        $r7 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r4, i0);

        $r8 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        if $r8 == null goto label01;

        $r25 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        $r26 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r25, i0);

        if r0 != $r26 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        z0 = $z1;

        $r27 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r4, i0);

        if $r27 == null goto label03;

        $r23 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$600(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r4, i0);

        $r24 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r23, i0);

        if r4 != $r24 goto label03;

        $z4 = 1;

        $z3 = 1;

        goto label04;

     label03:
        $z4 = 0;

        $z3 = 0;

     label04:
        if r0 != $r5 goto label06;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, r4, i0);

        if $z4 == 0 goto label05;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r4, r0, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$500(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r4, $r3, i0);

        goto label09;

     label05:
        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$500(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r4, r0, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r4, $r2, i0);

        goto label09;

     label06:
        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, $r5, i0);

        if $r5 == null goto label08;

        if $z3 == 0 goto label07;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r5, r0, i0);

        goto label08;

     label07:
        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$500(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r5, r0, i0);

     label08:
        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r4, $r2, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$500(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r4, $r3, i0);

     label09:
        if r4 != $r1 goto label11;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r4, r0, i0);

        if z0 == 0 goto label10;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, r4, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$500(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, $r7, i0);

        goto label14;

     label10:
        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$500(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, r4, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, $r6, i0);

        goto label14;

     label11:
        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r4, $r1, i0);

        if $r1 == null goto label13;

        if z0 == 0 goto label12;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r1, r4, i0);

        goto label13;

     label12:
        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$500(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r1, r4, i0);

     label13:
        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, $r6, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$500(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, $r7, i0);

     label14:
        $r28 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        if $r28 == null goto label15;

        $r22 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r22, r0, i0);

     label15:
        $r9 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        if $r9 == null goto label16;

        $r21 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r21, r0, i0);

     label16:
        $r10 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r4, i0);

        if $r10 == null goto label17;

        $r20 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r4, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r20, r4, i0);

     label17:
        $r11 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r4, i0);

        if $r11 == null goto label18;

        $r19 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r4, i0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>($r19, r4, i0);

     label18:
        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$1200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, r4, i0);

        $r13 = r12.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r14 = $r13[i0];

        if $r14 != r0 goto label19;

        $r18 = r12.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r18[i0] = r4;

        goto label20;

     label19:
        $r15 = r12.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r16 = $r15[i0];

        if $r16 != r4 goto label20;

        $r17 = r12.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        $r17[i0] = r0;

     label20:
        return;
    }

    private static void checkNonNullComparable(java.lang.Object, int)
    {
        java.lang.String[] $r3, $r10;
        java.lang.ClassCastException $r1;
        java.lang.NullPointerException $r8;
        java.lang.StringBuffer $r2, $r5, $r6, $r9, $r12, $r13;
        int i0;
        java.lang.String $r4, $r7, $r11, $r14;
        boolean $z0;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = <org.apache.commons.collections.bidimap.TreeBidiMap: java.lang.String[] dataName>;

        $r11 = $r10[i0];

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" cannot be null");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label1:
        $z0 = r0 instanceof java.lang.Comparable;

        if $z0 != 0 goto label2;

        $r1 = new java.lang.ClassCastException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = <org.apache.commons.collections.bidimap.TreeBidiMap: java.lang.String[] dataName>;

        $r4 = $r3[i0];

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must be Comparable");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ClassCastException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label2:
        return;
    }

    private static void checkKey(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void checkNonNullComparable(java.lang.Object,int)>(r0, 0);

        return;
    }

    private static void checkValue(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void checkNonNullComparable(java.lang.Object,int)>(r0, 1);

        return;
    }

    private static void checkKeyAndValue(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void checkKey(java.lang.Object)>(r0);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void checkValue(java.lang.Object)>(r1);

        return;
    }

    private void modify()
    {
        int $i0, $i1;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        $i0 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int modifications>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int modifications> = $i1;

        return;
    }

    private void grow()
    {
        int $i0, $i1;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: void modify()>();

        $i0 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int nodeCount>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int nodeCount> = $i1;

        return;
    }

    private void shrink()
    {
        int $i0, $i1;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: void modify()>();

        $i0 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int nodeCount>;

        $i1 = $i0 - 1;

        r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int nodeCount> = $i1;

        return;
    }

    private void insertValue(org.apache.commons.collections.bidimap.TreeBidiMap$Node) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node[] $r1;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r2, $r5, $r6, r14;
        java.lang.StringBuffer $r8, $r9, $r11, $r12;
        int $i0;
        java.lang.String $r13;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;
        java.lang.IllegalArgumentException $r7;
        java.lang.Comparable $r3, $r4, $r10;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r2 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        $r1 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        r14 = $r1[1];

     label1:
        $r3 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: java.lang.Comparable access$000(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r2, 1);

        $r4 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: java.lang.Comparable access$000(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r14, 1);

        $i0 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: int compare(java.lang.Comparable,java.lang.Comparable)>($r3, $r4);

        if $i0 != 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot store a duplicate value (\"");

        $r10 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: java.lang.Comparable access$000(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r2, 1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\") in this Map");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label2:
        if $i0 >= 0 goto label4;

        $r6 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r14, 1);

        if $r6 == null goto label3;

        r14 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$100(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r14, 1);

        goto label6;

     label3:
        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$200(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r14, r2, 1);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r2, r14, 1);

        specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: void doRedBlackInsert(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r2, 1);

        goto label7;

     label4:
        $r5 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r14, 1);

        if $r5 == null goto label5;

        r14 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: org.apache.commons.collections.bidimap.TreeBidiMap$Node access$400(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r14, 1);

        goto label6;

     label5:
        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$500(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r14, r2, 1);

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap$Node: void access$300(org.apache.commons.collections.bidimap.TreeBidiMap$Node,org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r2, r14, 1);

        specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: void doRedBlackInsert(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r2, 1);

        goto label7;

     label6:
        goto label1;

     label7:
        return;
    }

    private boolean doEquals(java.lang.Object, int)
    {
        java.lang.ClassCastException $r8;
        java.lang.NullPointerException $r7;
        java.util.Map r2;
        int $i0, $i1, $i2, i3;
        org.apache.commons.collections.bidimap.TreeBidiMap r1;
        boolean $z0, $z1, $z2;
        org.apache.commons.collections.bidimap.TreeBidiMap$ViewMapIterator $r3;
        java.lang.Object r0, $r4, $r5, $r6;

        r1 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        r0 := @parameter0: java.lang.Object;

        i3 := @parameter1: int;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $z0 = r0 instanceof java.util.Map;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        r2 = (java.util.Map) r0;

        $i0 = interfaceinvoke r2.<java.util.Map: int size()>();

        $i1 = virtualinvoke r1.<org.apache.commons.collections.bidimap.TreeBidiMap: int size()>();

        if $i0 == $i1 goto label03;

        return 0;

     label03:
        $i2 = r1.<org.apache.commons.collections.bidimap.TreeBidiMap: int nodeCount>;

        if $i2 <= 0 goto label11;

     label04:
        $r3 = new org.apache.commons.collections.bidimap.TreeBidiMap$ViewMapIterator;

        specialinvoke $r3.<org.apache.commons.collections.bidimap.TreeBidiMap$ViewMapIterator: void <init>(org.apache.commons.collections.bidimap.TreeBidiMap,int)>(r1, i3);

     label05:
        $z1 = interfaceinvoke $r3.<org.apache.commons.collections.MapIterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r4 = interfaceinvoke $r3.<org.apache.commons.collections.MapIterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r3.<org.apache.commons.collections.MapIterator: java.lang.Object getValue()>();

        $r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $z2 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z2 != 0 goto label07;

     label06:
        return 0;

     label07:
        goto label05;

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

        return 0;

     label10:
        $r7 := @caughtexception;

        return 0;

     label11:
        return 1;

        catch java.lang.ClassCastException from label04 to label06 with label09;
        catch java.lang.ClassCastException from label07 to label08 with label09;
        catch java.lang.NullPointerException from label04 to label06 with label10;
        catch java.lang.NullPointerException from label07 to label08 with label10;
    }

    private int doHashCode(int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$ViewMapIterator $r1;
        int $i0, i1, $i2, $i3, $i4, i5;
        java.lang.Object $r2, $r3;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        i1 := @parameter0: int;

        i5 = 0;

        $i0 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int nodeCount>;

        if $i0 <= 0 goto label2;

        $r1 = new org.apache.commons.collections.bidimap.TreeBidiMap$ViewMapIterator;

        specialinvoke $r1.<org.apache.commons.collections.bidimap.TreeBidiMap$ViewMapIterator: void <init>(org.apache.commons.collections.bidimap.TreeBidiMap,int)>(r0, i1);

     label1:
        $z0 = interfaceinvoke $r1.<org.apache.commons.collections.MapIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<org.apache.commons.collections.MapIterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<org.apache.commons.collections.MapIterator: java.lang.Object getValue()>();

        $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i3 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        $i4 = $i2 ^ $i3;

        i5 = i5 + $i4;

        goto label1;

     label2:
        return i5;
    }

    private java.lang.String doToString(int)
    {
        java.lang.StringBuffer $r1, $r6, $r7;
        int $i0, $i1, $i2, i3;
        java.lang.String $r3;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;
        boolean $z0, z1;
        org.apache.commons.collections.bidimap.TreeBidiMap$ViewMapIterator $r2;
        java.lang.Object $r4, $r5, $r8, $r9;

        r0 := @this: org.apache.commons.collections.bidimap.TreeBidiMap;

        i3 := @parameter0: int;

        $i0 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int nodeCount>;

        if $i0 != 0 goto label1;

        return "{}";

     label1:
        $r1 = new java.lang.StringBuffer;

        $i1 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int nodeCount>;

        $i2 = $i1 * 32;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>($i2);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(123);

        $r2 = new org.apache.commons.collections.bidimap.TreeBidiMap$ViewMapIterator;

        specialinvoke $r2.<org.apache.commons.collections.bidimap.TreeBidiMap$ViewMapIterator: void <init>(org.apache.commons.collections.bidimap.TreeBidiMap,int)>(r0, i3);

        z1 = interfaceinvoke $r2.<org.apache.commons.collections.MapIterator: boolean hasNext()>();

     label2:
        if z1 == 0 goto label8;

        $r4 = interfaceinvoke $r2.<org.apache.commons.collections.MapIterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r2.<org.apache.commons.collections.MapIterator: java.lang.Object getValue()>();

        if $r4 != r0 goto label3;

        $r8 = "(this Map)";

        goto label4;

     label3:
        $r8 = $r4;

     label4:
        $r6 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(61);

        if $r5 != r0 goto label5;

        $r9 = "(this Map)";

        goto label6;

     label5:
        $r9 = $r5;

     label6:
        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        $z0 = interfaceinvoke $r2.<org.apache.commons.collections.MapIterator: boolean hasNext()>();

        z1 = $z0;

        if $z0 == 0 goto label7;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label7:
        goto label2;

     label8:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    static void access$1300(java.lang.Object, int)
    {
        int i0;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void checkNonNullComparable(java.lang.Object,int)>(r0, i0);

        return;
    }

    static org.apache.commons.collections.bidimap.TreeBidiMap$Node access$1400(org.apache.commons.collections.bidimap.TreeBidiMap, java.lang.Comparable, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node $r2;
        int i0;
        java.lang.Comparable r1;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap;

        r1 := @parameter1: java.lang.Comparable;

        i0 := @parameter2: int;

        $r2 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node lookup(java.lang.Comparable,int)>(r1, i0);

        return $r2;
    }

    static java.lang.Object access$1500(org.apache.commons.collections.bidimap.TreeBidiMap, java.lang.Comparable, int)
    {
        int i0;
        java.lang.Comparable r1;
        java.lang.Object $r2;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap;

        r1 := @parameter1: java.lang.Comparable;

        i0 := @parameter2: int;

        $r2 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: java.lang.Object doRemove(java.lang.Comparable,int)>(r1, i0);

        return $r2;
    }

    static int access$1600(org.apache.commons.collections.bidimap.TreeBidiMap)
    {
        int $i0;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap;

        $i0 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int modifications>;

        return $i0;
    }

    static org.apache.commons.collections.bidimap.TreeBidiMap$Node[] access$1700(org.apache.commons.collections.bidimap.TreeBidiMap)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node[] $r1;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap;

        $r1 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node[] rootNode>;

        return $r1;
    }

    static org.apache.commons.collections.bidimap.TreeBidiMap$Node access$1800(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, $r1;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node leastNode(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        return $r1;
    }

    static org.apache.commons.collections.bidimap.TreeBidiMap$Node access$1900(org.apache.commons.collections.bidimap.TreeBidiMap, org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r1, $r2;
        int i0;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap;

        r1 := @parameter1: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter2: int;

        $r2 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node nextGreater(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        return $r2;
    }

    static org.apache.commons.collections.bidimap.TreeBidiMap$Node access$2000(org.apache.commons.collections.bidimap.TreeBidiMap, org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r1, $r2;
        int i0;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap;

        r1 := @parameter1: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter2: int;

        $r2 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node nextSmaller(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r1, i0);

        return $r2;
    }

    static void access$2100(org.apache.commons.collections.bidimap.TreeBidiMap, org.apache.commons.collections.bidimap.TreeBidiMap$Node)
    {
        org.apache.commons.collections.bidimap.TreeBidiMap r0;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r1;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap;

        r1 := @parameter1: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: void doRedBlackDelete(org.apache.commons.collections.bidimap.TreeBidiMap$Node)>(r1);

        return;
    }

    static org.apache.commons.collections.bidimap.TreeBidiMap$Node access$2200(org.apache.commons.collections.bidimap.TreeBidiMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.bidimap.TreeBidiMap$Node r0, $r1;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap$Node;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: org.apache.commons.collections.bidimap.TreeBidiMap$Node greatestNode(org.apache.commons.collections.bidimap.TreeBidiMap$Node,int)>(r0, i0);

        return $r1;
    }

    static int access$2300(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: int oppositeIndex(int)>(i0);

        return $i1;
    }

    static int access$2400(org.apache.commons.collections.bidimap.TreeBidiMap)
    {
        int $i0;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap;

        $i0 = r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int nodeCount>;

        return $i0;
    }

    static void access$2500(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.apache.commons.collections.bidimap.TreeBidiMap: void checkKey(java.lang.Object)>(r0);

        return;
    }

    static java.lang.Object access$2600(org.apache.commons.collections.bidimap.TreeBidiMap, java.lang.Comparable, java.lang.Comparable, int)
    {
        int i0;
        java.lang.Comparable r1, r2;
        java.lang.Object $r3;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap;

        r1 := @parameter1: java.lang.Comparable;

        r2 := @parameter2: java.lang.Comparable;

        i0 := @parameter3: int;

        $r3 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: java.lang.Object doPut(java.lang.Comparable,java.lang.Comparable,int)>(r1, r2, i0);

        return $r3;
    }

    static boolean access$2700(org.apache.commons.collections.bidimap.TreeBidiMap, java.lang.Object, int)
    {
        int i0;
        java.lang.Object r1;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap;

        r1 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        $z0 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: boolean doEquals(java.lang.Object,int)>(r1, i0);

        return $z0;
    }

    static int access$2800(org.apache.commons.collections.bidimap.TreeBidiMap, int)
    {
        int i0, $i1;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: int doHashCode(int)>(i0);

        return $i1;
    }

    static java.lang.String access$2900(org.apache.commons.collections.bidimap.TreeBidiMap, int)
    {
        int i0;
        java.lang.String $r1;
        org.apache.commons.collections.bidimap.TreeBidiMap r0;

        r0 := @parameter0: org.apache.commons.collections.bidimap.TreeBidiMap;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.apache.commons.collections.bidimap.TreeBidiMap: java.lang.String doToString(int)>(i0);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <org.apache.commons.collections.bidimap.TreeBidiMap: int NUMBER_OF_INDICES> = 2;

        <org.apache.commons.collections.bidimap.TreeBidiMap: int FIRST_INDEX> = 0;

        <org.apache.commons.collections.bidimap.TreeBidiMap: int SUM_OF_INDICES> = 1;

        <org.apache.commons.collections.bidimap.TreeBidiMap: int INVERSEMAPENTRY> = 3;

        <org.apache.commons.collections.bidimap.TreeBidiMap: int MAPENTRY> = 2;

        <org.apache.commons.collections.bidimap.TreeBidiMap: int VALUE> = 1;

        <org.apache.commons.collections.bidimap.TreeBidiMap: int KEY> = 0;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "key";

        $r0[1] = "value";

        <org.apache.commons.collections.bidimap.TreeBidiMap: java.lang.String[] dataName> = $r0;

        return;
    }
}
