public class org.springframework.aop.aspectj.AspectJExpressionPointcut extends org.springframework.aop.support.AbstractExpressionPointcut implements org.springframework.aop.ClassFilter, org.springframework.aop.IntroductionAwareMethodMatcher, org.springframework.beans.factory.BeanFactoryAware
{
    private static final java.util.Set SUPPORTED_PRIMITIVES;
    private static final org.apache.commons.logging.Log logger;
    private java.lang.Class pointcutDeclarationScope;
    private java.lang.String[] pointcutParameterNames;
    private java.lang.Class[] pointcutParameterTypes;
    private org.springframework.beans.factory.BeanFactory beanFactory;
    private transient org.aspectj.weaver.tools.PointcutExpression pointcutExpression;
    private transient java.util.Map shadowMatchCache;

    static void <clinit>()
    {
        java.util.HashSet $r0;
        org.aspectj.weaver.tools.PointcutPrimitive $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19;
        java.util.Set $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20;
        org.apache.commons.logging.Log $r21;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        <org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Set SUPPORTED_PRIMITIVES> = $r0;

        $r2 = <org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Set SUPPORTED_PRIMITIVES>;

        $r1 = <org.aspectj.weaver.tools.PointcutPrimitive: org.aspectj.weaver.tools.PointcutPrimitive EXECUTION>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        $r4 = <org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Set SUPPORTED_PRIMITIVES>;

        $r3 = <org.aspectj.weaver.tools.PointcutPrimitive: org.aspectj.weaver.tools.PointcutPrimitive ARGS>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r6 = <org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Set SUPPORTED_PRIMITIVES>;

        $r5 = <org.aspectj.weaver.tools.PointcutPrimitive: org.aspectj.weaver.tools.PointcutPrimitive REFERENCE>;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r5);

        $r8 = <org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Set SUPPORTED_PRIMITIVES>;

        $r7 = <org.aspectj.weaver.tools.PointcutPrimitive: org.aspectj.weaver.tools.PointcutPrimitive THIS>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r7);

        $r10 = <org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Set SUPPORTED_PRIMITIVES>;

        $r9 = <org.aspectj.weaver.tools.PointcutPrimitive: org.aspectj.weaver.tools.PointcutPrimitive TARGET>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r9);

        $r12 = <org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Set SUPPORTED_PRIMITIVES>;

        $r11 = <org.aspectj.weaver.tools.PointcutPrimitive: org.aspectj.weaver.tools.PointcutPrimitive WITHIN>;

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>($r11);

        $r14 = <org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Set SUPPORTED_PRIMITIVES>;

        $r13 = <org.aspectj.weaver.tools.PointcutPrimitive: org.aspectj.weaver.tools.PointcutPrimitive AT_ANNOTATION>;

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>($r13);

        $r16 = <org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Set SUPPORTED_PRIMITIVES>;

        $r15 = <org.aspectj.weaver.tools.PointcutPrimitive: org.aspectj.weaver.tools.PointcutPrimitive AT_WITHIN>;

        interfaceinvoke $r16.<java.util.Set: boolean add(java.lang.Object)>($r15);

        $r18 = <org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Set SUPPORTED_PRIMITIVES>;

        $r17 = <org.aspectj.weaver.tools.PointcutPrimitive: org.aspectj.weaver.tools.PointcutPrimitive AT_ARGS>;

        interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>($r17);

        $r20 = <org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Set SUPPORTED_PRIMITIVES>;

        $r19 = <org.aspectj.weaver.tools.PointcutPrimitive: org.aspectj.weaver.tools.PointcutPrimitive AT_TARGET>;

        interfaceinvoke $r20.<java.util.Set: boolean add(java.lang.Object)>($r19);

        $r21 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/aop/aspectj/AspectJExpressionPointcut;");

        <org.springframework.aop.aspectj.AspectJExpressionPointcut: org.apache.commons.logging.Log logger> = $r21;

        return;
    }

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.Class[] $r2;
        java.lang.String[] $r1;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        specialinvoke r0.<org.springframework.aop.support.AbstractExpressionPointcut: void <init>()>();

        $r1 = newarray (java.lang.String)[0];

        r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String[] pointcutParameterNames> = $r1;

        $r2 = newarray (java.lang.Class)[0];

        r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class[] pointcutParameterTypes> = $r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(32);

        r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Map shadowMatchCache> = $r3;

        return;
    }

    public void <init>(java.lang.Class, java.lang.String[], java.lang.Class[])
    {
        java.lang.IllegalStateException $r7;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.Class[] $r2, r6;
        java.lang.String[] $r1, r5;
        int $i0, $i1;
        java.lang.Class r4;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r4 := @parameter0: java.lang.Class;

        r5 := @parameter1: java.lang.String[];

        r6 := @parameter2: java.lang.Class[];

        specialinvoke r0.<org.springframework.aop.support.AbstractExpressionPointcut: void <init>()>();

        $r1 = newarray (java.lang.String)[0];

        r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String[] pointcutParameterNames> = $r1;

        $r2 = newarray (java.lang.Class)[0];

        r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class[] pointcutParameterTypes> = $r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(32);

        r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Map shadowMatchCache> = $r3;

        r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class pointcutDeclarationScope> = r4;

        $i1 = lengthof r5;

        $i0 = lengthof r6;

        if $i1 == $i0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Number of pointcut parameter names must match number of pointcut parameter types");

        throw $r7;

     label1:
        r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String[] pointcutParameterNames> = r5;

        r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class[] pointcutParameterTypes> = r6;

        return;
    }

    public void setPointcutDeclarationScope(java.lang.Class)
    {
        java.lang.Class r1;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r1 := @parameter0: java.lang.Class;

        r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class pointcutDeclarationScope> = r1;

        return;
    }

    public void setParameterNames(java.lang.String[])
    {
        java.lang.String[] r1;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r1 := @parameter0: java.lang.String[];

        r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String[] pointcutParameterNames> = r1;

        return;
    }

    public void setParameterTypes(java.lang.Class[])
    {
        java.lang.Class[] r1;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r1 := @parameter0: java.lang.Class[];

        r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class[] pointcutParameterTypes> = r1;

        return;
    }

    public void setBeanFactory(org.springframework.beans.factory.BeanFactory)
    {
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;
        org.springframework.beans.factory.BeanFactory r1;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r1 := @parameter0: org.springframework.beans.factory.BeanFactory;

        r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.springframework.beans.factory.BeanFactory beanFactory> = r1;

        return;
    }

    public org.springframework.aop.ClassFilter getClassFilter()
    {
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        specialinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: void checkReadyToMatch()>();

        return r0;
    }

    public org.springframework.aop.MethodMatcher getMethodMatcher()
    {
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        specialinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: void checkReadyToMatch()>();

        return r0;
    }

    private void checkReadyToMatch()
    {
        java.lang.IllegalStateException $r4;
        org.aspectj.weaver.tools.PointcutExpression $r2, $r3;
        java.lang.String $r1;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        $r1 = virtualinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String getExpression()>();

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must set property \'expression\' before attempting to match");

        throw $r4;

     label1:
        $r2 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.aspectj.weaver.tools.PointcutExpression pointcutExpression>;

        if $r2 != null goto label2;

        $r3 = specialinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.aspectj.weaver.tools.PointcutExpression buildPointcutExpression()>();

        r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.aspectj.weaver.tools.PointcutExpression pointcutExpression> = $r3;

     label2:
        return;
    }

    private org.aspectj.weaver.tools.PointcutExpression buildPointcutExpression()
    {
        org.aspectj.weaver.tools.PointcutParameter $r8;
        java.lang.String[] $r2, $r4;
        int $i0, $i1, i2;
        java.lang.String $r7, $r9, $r10;
        org.aspectj.weaver.tools.PointcutParser $r1;
        java.lang.Class[] $r5;
        org.aspectj.weaver.tools.PointcutExpression $r12;
        java.lang.Class $r6, $r11;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;
        org.aspectj.weaver.tools.PointcutParameter[] r3;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        $r1 = specialinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.aspectj.weaver.tools.PointcutParser initializePointcutParser()>();

        $r2 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String[] pointcutParameterNames>;

        $i0 = lengthof $r2;

        r3 = newarray (org.aspectj.weaver.tools.PointcutParameter)[$i0];

        i2 = 0;

        goto label2;

     label1:
        $r4 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String[] pointcutParameterNames>;

        $r7 = $r4[i2];

        $r5 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class[] pointcutParameterTypes>;

        $r6 = $r5[i2];

        $r8 = virtualinvoke $r1.<org.aspectj.weaver.tools.PointcutParser: org.aspectj.weaver.tools.PointcutParameter createPointcutParameter(java.lang.String,java.lang.Class)>($r7, $r6);

        r3[i2] = $r8;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r3;

        if i2 < $i1 goto label1;

        $r9 = virtualinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String getExpression()>();

        $r10 = specialinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String replaceBooleanOperators(java.lang.String)>($r9);

        $r11 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class pointcutDeclarationScope>;

        $r12 = virtualinvoke $r1.<org.aspectj.weaver.tools.PointcutParser: org.aspectj.weaver.tools.PointcutExpression parsePointcutExpression(java.lang.String,java.lang.Class,org.aspectj.weaver.tools.PointcutParameter[])>($r10, $r11, r3);

        return $r12;
    }

    private org.aspectj.weaver.tools.PointcutParser initializePointcutParser()
    {
        org.aspectj.weaver.tools.PointcutParser $r4;
        java.util.Set $r3;
        org.springframework.beans.factory.BeanFactory $r1, $r6;
        java.lang.Thread $r2;
        org.springframework.aop.aspectj.AspectJExpressionPointcut$BeanNamePointcutDesignatorHandler $r5;
        java.lang.ClassLoader $r8;
        org.springframework.beans.factory.config.ConfigurableBeanFactory $r7;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;
        boolean $z0;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        $r1 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.springframework.beans.factory.BeanFactory beanFactory>;

        $z0 = $r1 instanceof org.springframework.beans.factory.config.ConfigurableBeanFactory;

        if $z0 == 0 goto label1;

        $r6 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.springframework.beans.factory.BeanFactory beanFactory>;

        $r7 = (org.springframework.beans.factory.config.ConfigurableBeanFactory) $r6;

        $r8 = interfaceinvoke $r7.<org.springframework.beans.factory.config.ConfigurableBeanFactory: java.lang.ClassLoader getBeanClassLoader()>();

        goto label2;

     label1:
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r8 = virtualinvoke $r2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label2:
        $r3 = <org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Set SUPPORTED_PRIMITIVES>;

        $r4 = staticinvoke <org.aspectj.weaver.tools.PointcutParser: org.aspectj.weaver.tools.PointcutParser getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(java.util.Set,java.lang.ClassLoader)>($r3, $r8);

        $r5 = new org.springframework.aop.aspectj.AspectJExpressionPointcut$BeanNamePointcutDesignatorHandler;

        specialinvoke $r5.<org.springframework.aop.aspectj.AspectJExpressionPointcut$BeanNamePointcutDesignatorHandler: void <init>(org.springframework.aop.aspectj.AspectJExpressionPointcut,org.springframework.aop.aspectj.AspectJExpressionPointcut$BeanNamePointcutDesignatorHandler)>(r0, null);

        virtualinvoke $r4.<org.aspectj.weaver.tools.PointcutParser: void registerPointcutDesignatorHandler(org.aspectj.weaver.tools.PointcutDesignatorHandler)>($r5);

        return $r4;
    }

    private java.lang.String replaceBooleanOperators(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r4;

        r4 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.springframework.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(r0, " and ", " && ");

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>($r1, " or ", " || ");

        $r3 = staticinvoke <org.springframework.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>($r2, " not ", " ! ");

        return $r3;
    }

    public org.aspectj.weaver.tools.PointcutExpression getPointcutExpression()
    {
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;
        org.aspectj.weaver.tools.PointcutExpression $r1;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        specialinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: void checkReadyToMatch()>();

        $r1 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.aspectj.weaver.tools.PointcutExpression pointcutExpression>;

        return $r1;
    }

    public boolean matches(java.lang.Class)
    {
        java.lang.Throwable $r3;
        org.aspectj.weaver.tools.PointcutExpression $r2;
        java.lang.Class r1;
        org.apache.commons.logging.Log $r4;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;
        boolean $z0;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: void checkReadyToMatch()>();

     label1:
        $r2 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.aspectj.weaver.tools.PointcutExpression pointcutExpression>;

        $z0 = interfaceinvoke $r2.<org.aspectj.weaver.tools.PointcutExpression: boolean couldMatchJoinPointsInType(java.lang.Class)>(r1);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        $r4 = <org.springframework.aop.aspectj.AspectJExpressionPointcut: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("PointcutExpression matching rejected target class", $r3);

        return 0;

        catch org.aspectj.weaver.BCException from label1 to label2 with label3;
    }

    public boolean matches(java.lang.reflect.Method, java.lang.Class, boolean)
    {
        org.aspectj.weaver.tools.ShadowMatch $r4;
        java.lang.Class r2;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;
        java.lang.reflect.Method r1, $r3;
        boolean $z0, $z1, z2, $z3, $z4;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.Class;

        z2 := @parameter2: boolean;

        specialinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: void checkReadyToMatch()>();

        $r3 = staticinvoke <org.springframework.aop.support.AopUtils: java.lang.reflect.Method getMostSpecificMethod(java.lang.reflect.Method,java.lang.Class)>(r1, r2);

        $r4 = specialinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.aspectj.weaver.tools.ShadowMatch getShadowMatch(java.lang.reflect.Method,java.lang.reflect.Method)>($r3, r1);

        $z0 = interfaceinvoke $r4.<org.aspectj.weaver.tools.ShadowMatch: boolean alwaysMatches()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = interfaceinvoke $r4.<org.aspectj.weaver.tools.ShadowMatch: boolean neverMatches()>();

        if $z1 == 0 goto label2;

        return 0;

     label2:
        if z2 != 0 goto label3;

        $z3 = specialinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: boolean matchesIgnoringSubtypes(org.aspectj.weaver.tools.ShadowMatch)>($r4);

        if $z3 != 0 goto label3;

        $z4 = specialinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: boolean matchesTarget(org.aspectj.weaver.tools.ShadowMatch,java.lang.Class)>($r4, r2);

        if $z4 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public boolean matches(java.lang.reflect.Method, java.lang.Class)
    {
        java.lang.Class r2;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;
        java.lang.reflect.Method r1;
        boolean $z0;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: boolean matches(java.lang.reflect.Method,java.lang.Class,boolean)>(r1, r2, 0);

        return $z0;
    }

    public boolean isRuntime()
    {
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;
        org.aspectj.weaver.tools.PointcutExpression $r1;
        boolean $z0;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        specialinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: void checkReadyToMatch()>();

        $r1 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.aspectj.weaver.tools.PointcutExpression pointcutExpression>;

        $z0 = interfaceinvoke $r1.<org.aspectj.weaver.tools.PointcutExpression: boolean mayNeedDynamicTest()>();

        return $z0;
    }

    public boolean matches(java.lang.reflect.Method, java.lang.Class, java.lang.Object[])
    {
        java.lang.IllegalStateException $r11, $r15;
        java.lang.Object[] r7;
        org.aspectj.weaver.tools.JoinPointMatch $r8;
        org.aspectj.weaver.tools.ShadowMatch $r4, $r5;
        org.aopalliance.intercept.MethodInvocation $r6;
        java.lang.String $r14, $r19;
        java.lang.reflect.Method r1, $r3;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.aop.aspectj.RuntimeTestWalker $r9;
        java.lang.Class r2, $r10;
        java.lang.StringBuilder $r12, $r13, $r16, $r18;
        org.apache.commons.logging.Log $r17;
        java.lang.Object r21, r22;
        org.springframework.aop.ProxyMethodInvocation r20;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.Class;

        r7 := @parameter2: java.lang.Object[];

        specialinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: void checkReadyToMatch()>();

        $r3 = staticinvoke <org.springframework.aop.support.AopUtils: java.lang.reflect.Method getMostSpecificMethod(java.lang.reflect.Method,java.lang.Class)>(r1, r2);

        $r4 = specialinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.aspectj.weaver.tools.ShadowMatch getShadowMatch(java.lang.reflect.Method,java.lang.reflect.Method)>($r3, r1);

        $r5 = specialinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.aspectj.weaver.tools.ShadowMatch getShadowMatch(java.lang.reflect.Method,java.lang.reflect.Method)>(r1, r1);

        r20 = null;

        r21 = null;

        r22 = null;

     label1:
        $r6 = staticinvoke <org.springframework.aop.interceptor.ExposeInvocationInterceptor: org.aopalliance.intercept.MethodInvocation currentInvocation()>();

        r21 = interfaceinvoke $r6.<org.aopalliance.intercept.MethodInvocation: java.lang.Object getThis()>();

        $z0 = $r6 instanceof org.springframework.aop.ProxyMethodInvocation;

        if $z0 != 0 goto label2;

        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("MethodInvocation is not a Spring ProxyMethodInvocation: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label2:
        r20 = (org.springframework.aop.ProxyMethodInvocation) $r6;

        r22 = interfaceinvoke r20.<org.springframework.aop.ProxyMethodInvocation: java.lang.Object getProxy()>();

     label3:
        goto label5;

     label4:
        $r15 := @caughtexception;

        $r17 = <org.springframework.aop.aspectj.AspectJExpressionPointcut: org.apache.commons.logging.Log logger>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Couldn\'t access current invocation - matching with limited context: ");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r19);

     label5:
        $r8 = interfaceinvoke $r4.<org.aspectj.weaver.tools.ShadowMatch: org.aspectj.weaver.tools.JoinPointMatch matchesJoinPoint(java.lang.Object,java.lang.Object,java.lang.Object[])>(r22, r21, r7);

        if r20 == null goto label6;

        $r9 = new org.springframework.aop.aspectj.RuntimeTestWalker;

        specialinvoke $r9.<org.springframework.aop.aspectj.RuntimeTestWalker: void <init>(org.aspectj.weaver.tools.ShadowMatch)>($r5);

        $r10 = virtualinvoke r22.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = virtualinvoke $r9.<org.springframework.aop.aspectj.RuntimeTestWalker: boolean testThisInstanceOfResidue(java.lang.Class)>($r10);

        if $z2 != 0 goto label6;

        return 0;

     label6:
        $z1 = interfaceinvoke $r8.<org.aspectj.weaver.tools.JoinPointMatch: boolean matches()>();

        if $z1 == 0 goto label7;

        if r20 == null goto label7;

        specialinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: void bindParameters(org.springframework.aop.ProxyMethodInvocation,org.aspectj.weaver.tools.JoinPointMatch)>(r20, $r8);

     label7:
        $z3 = interfaceinvoke $r8.<org.aspectj.weaver.tools.JoinPointMatch: boolean matches()>();

        return $z3;

        catch java.lang.IllegalStateException from label1 to label3 with label4;
    }

    protected java.lang.String getCurrentProxiedBeanName()
    {
        java.lang.String $r0;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r1;

        r1 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        $r0 = staticinvoke <org.springframework.aop.framework.autoproxy.ProxyCreationContext: java.lang.String getCurrentProxiedBeanName()>();

        return $r0;
    }

    private boolean matchesIgnoringSubtypes(org.aspectj.weaver.tools.ShadowMatch)
    {
        org.aspectj.weaver.tools.ShadowMatch r1;
        org.springframework.aop.aspectj.RuntimeTestWalker $r0;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r2;
        boolean $z0, $z1;

        r2 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r1 := @parameter0: org.aspectj.weaver.tools.ShadowMatch;

        $r0 = new org.springframework.aop.aspectj.RuntimeTestWalker;

        specialinvoke $r0.<org.springframework.aop.aspectj.RuntimeTestWalker: void <init>(org.aspectj.weaver.tools.ShadowMatch)>(r1);

        $z0 = virtualinvoke $r0.<org.springframework.aop.aspectj.RuntimeTestWalker: boolean testsSubtypeSensitiveVars()>();

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        return $z1;
    }

    private boolean matchesTarget(org.aspectj.weaver.tools.ShadowMatch, java.lang.Class)
    {
        org.aspectj.weaver.tools.ShadowMatch r1;
        org.springframework.aop.aspectj.RuntimeTestWalker $r0;
        java.lang.Class r2;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r3;
        boolean $z0;

        r3 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r1 := @parameter0: org.aspectj.weaver.tools.ShadowMatch;

        r2 := @parameter1: java.lang.Class;

        $r0 = new org.springframework.aop.aspectj.RuntimeTestWalker;

        specialinvoke $r0.<org.springframework.aop.aspectj.RuntimeTestWalker: void <init>(org.aspectj.weaver.tools.ShadowMatch)>(r1);

        $z0 = virtualinvoke $r0.<org.springframework.aop.aspectj.RuntimeTestWalker: boolean testTargetInstanceOfResidue(java.lang.Class)>(r2);

        return $z0;
    }

    private void bindParameters(org.springframework.aop.ProxyMethodInvocation, org.aspectj.weaver.tools.JoinPointMatch)
    {
        org.aspectj.weaver.tools.JoinPointMatch r3;
        java.lang.String $r2;
        org.springframework.aop.ProxyMethodInvocation r0;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r1;

        r1 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r0 := @parameter0: org.springframework.aop.ProxyMethodInvocation;

        r3 := @parameter1: org.aspectj.weaver.tools.JoinPointMatch;

        $r2 = virtualinvoke r1.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String getExpression()>();

        interfaceinvoke r0.<org.springframework.aop.ProxyMethodInvocation: void setUserAttribute(java.lang.String,java.lang.Object)>($r2, r3);

        return;
    }

    private org.aspectj.weaver.tools.ShadowMatch getShadowMatch(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        java.lang.Throwable $r8, $r9, $r12;
        org.aspectj.util.FuzzyBoolean $r11, $r16;
        org.aspectj.weaver.tools.ShadowMatch $r21;
        java.util.Map $r2, $r4, $r5, $r18;
        java.lang.reflect.Method r1, r13;
        org.aspectj.weaver.reflect.ShadowMatchImpl $r19, $r20;
        org.aspectj.weaver.tools.PointcutExpression $r7, $r14;
        java.lang.Object $r3, $r6, r17;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r1 := @parameter0: java.lang.reflect.Method;

        r13 := @parameter1: java.lang.reflect.Method;

        $r2 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Map shadowMatchCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r17 = (org.aspectj.weaver.tools.ShadowMatch) $r3;

        if r17 != null goto label13;

        $r4 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Map shadowMatchCache>;

        entermonitor $r4;

     label01:
        $r5 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Map shadowMatchCache>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r17 = (org.aspectj.weaver.tools.ShadowMatch) $r6;

        if r17 != null goto label09;

     label02:
        $r7 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.aspectj.weaver.tools.PointcutExpression pointcutExpression>;

        r17 = interfaceinvoke $r7.<org.aspectj.weaver.tools.PointcutExpression: org.aspectj.weaver.tools.ShadowMatch matchesMethodExecution(java.lang.reflect.Method)>(r1);

     label03:
        goto label08;

     label04:
        $r12 := @caughtexception;

        if r1 != r13 goto label05;

        $r19 = new org.aspectj.weaver.reflect.ShadowMatchImpl;

        $r16 = <org.aspectj.util.FuzzyBoolean: org.aspectj.util.FuzzyBoolean NO>;

        specialinvoke $r19.<org.aspectj.weaver.reflect.ShadowMatchImpl: void <init>(org.aspectj.util.FuzzyBoolean,org.aspectj.weaver.ast.Test,org.aspectj.weaver.patterns.ExposedState,org.aspectj.weaver.tools.PointcutParameter[])>($r16, null, null, null);

        r17 = $r19;

        goto label08;

     label05:
        $r14 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.aspectj.weaver.tools.PointcutExpression pointcutExpression>;

        r17 = interfaceinvoke $r14.<org.aspectj.weaver.tools.PointcutExpression: org.aspectj.weaver.tools.ShadowMatch matchesMethodExecution(java.lang.reflect.Method)>(r13);

     label06:
        goto label08;

     label07:
        $r9 := @caughtexception;

        $r20 = new org.aspectj.weaver.reflect.ShadowMatchImpl;

        $r11 = <org.aspectj.util.FuzzyBoolean: org.aspectj.util.FuzzyBoolean NO>;

        specialinvoke $r20.<org.aspectj.weaver.reflect.ShadowMatchImpl: void <init>(org.aspectj.util.FuzzyBoolean,org.aspectj.weaver.ast.Test,org.aspectj.weaver.patterns.ExposedState,org.aspectj.weaver.tools.PointcutParameter[])>($r11, null, null, null);

        r17 = $r20;

     label08:
        $r18 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Map shadowMatchCache>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r17);

     label09:
        exitmonitor $r4;

     label10:
        goto label13;

     label11:
        $r8 := @caughtexception;

        exitmonitor $r4;

     label12:
        throw $r8;

     label13:
        $r21 = (org.aspectj.weaver.tools.ShadowMatch) r17;

        return $r21;

        catch org.aspectj.weaver.reflect.ReflectionWorld$ReflectionWorldException from label02 to label03 with label04;
        catch org.aspectj.weaver.reflect.ReflectionWorld$ReflectionWorldException from label05 to label06 with label07;
        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.String[] $r7, $r8;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Class[] $r9, $r10;
        java.lang.Object r1;
        java.lang.Class $r5, $r6;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0, r2;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.springframework.aop.aspectj.AspectJExpressionPointcut;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.springframework.aop.aspectj.AspectJExpressionPointcut) r1;

        $r3 = virtualinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String getExpression()>();

        $r4 = virtualinvoke r2.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String getExpression()>();

        $z1 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z1 == 0 goto label3;

        $r6 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class pointcutDeclarationScope>;

        $r5 = r2.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class pointcutDeclarationScope>;

        $z2 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z2 == 0 goto label3;

        $r8 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String[] pointcutParameterNames>;

        $r7 = r2.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String[] pointcutParameterNames>;

        $z3 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $z3 == 0 goto label3;

        $r10 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class[] pointcutParameterTypes>;

        $r9 = r2.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class[] pointcutParameterTypes>;

        $z4 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r10, $r9);

        if $z4 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        java.lang.Class[] $r4;
        java.lang.String[] $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        java.lang.Class $r2;
        java.lang.String $r1;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        $r1 = virtualinvoke r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String getExpression()>();

        $i0 = staticinvoke <org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>($r1);

        $i1 = 31 * $i0;

        $r2 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class pointcutDeclarationScope>;

        $i2 = staticinvoke <org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>($r2);

        i7 = $i1 + $i2;

        $i3 = 31 * i7;

        $r3 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String[] pointcutParameterNames>;

        $i4 = staticinvoke <org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object[])>($r3);

        i8 = $i3 + $i4;

        $i5 = 31 * i8;

        $r4 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class[] pointcutParameterTypes>;

        $i6 = staticinvoke <org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object[])>($r4);

        i9 = $i5 + $i6;

        return i9;
    }

    public java.lang.String toString()
    {
        java.lang.String[] $r2, $r9;
        int $i0, $i1, i2, $i3;
        java.lang.String $r3, $r4, $r8, $r10, $r13;
        java.lang.Class[] $r5, $r6, $r11, $r12;
        java.lang.StringBuilder $r0;
        java.lang.Class $r7;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r1;

        r1 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AspectJExpressionPointcut: ");

        $r2 = r1.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String[] pointcutParameterNames>;

        if $r2 == null goto label4;

        $r5 = r1.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class[] pointcutParameterTypes>;

        if $r5 == null goto label4;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        i2 = 0;

        goto label3;

     label1:
        $r6 = r1.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class[] pointcutParameterTypes>;

        $r7 = $r6[i2];

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = r1.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String[] pointcutParameterNames>;

        $r10 = $r9[i2];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $i1 = i2 + 1;

        $r11 = r1.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class[] pointcutParameterTypes>;

        $i0 = lengthof $r11;

        if $i1 >= $i0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i2 = i2 + 1;

     label3:
        $r12 = r1.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.Class[] pointcutParameterTypes>;

        $i3 = lengthof $r12;

        if i2 < $i3 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r13 = virtualinvoke r1.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String getExpression()>();

        if $r13 == null goto label5;

        $r4 = virtualinvoke r1.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.lang.String getExpression()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        goto label6;

     label5:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<pointcut expression not set>");

     label6:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        java.util.concurrent.ConcurrentHashMap $r2;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r1;

        r1 := @this: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(32);

        r1.<org.springframework.aop.aspectj.AspectJExpressionPointcut: java.util.Map shadowMatchCache> = $r2;

        return;
    }

    static org.springframework.beans.factory.BeanFactory access$0(org.springframework.aop.aspectj.AspectJExpressionPointcut)
    {
        org.springframework.aop.aspectj.AspectJExpressionPointcut r0;
        org.springframework.beans.factory.BeanFactory $r1;

        r0 := @parameter0: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        $r1 = r0.<org.springframework.aop.aspectj.AspectJExpressionPointcut: org.springframework.beans.factory.BeanFactory beanFactory>;

        return $r1;
    }
}
