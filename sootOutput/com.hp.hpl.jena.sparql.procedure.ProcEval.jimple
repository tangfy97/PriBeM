public class com.hp.hpl.jena.sparql.procedure.ProcEval extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.procedure.ProcEval r0;

        r0 := @this: com.hp.hpl.jena.sparql.procedure.ProcEval;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.procedure.Procedure build(com.hp.hpl.jena.sparql.algebra.op.OpProcedure, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.expr.ExprList $r2;
        com.hp.hpl.jena.sparql.procedure.Procedure $r4;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r3;
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.graph.Node getProcId()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.sparql.expr.ExprList getArgs()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.procedure.ProcEval: com.hp.hpl.jena.sparql.procedure.Procedure build(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r1, $r2, r3);

        return $r4;
    }

    public static com.hp.hpl.jena.sparql.procedure.Procedure build(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node r3;
        com.hp.hpl.jena.sparql.util.Context $r1;
        com.hp.hpl.jena.sparql.procedure.ProcedureRegistry $r2;
        com.hp.hpl.jena.sparql.procedure.ProcedureFactory $r5;
        com.hp.hpl.jena.sparql.procedure.Procedure $r7;
        com.hp.hpl.jena.sparql.expr.ExprList r8;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r0;
        java.lang.String $r4, $r6;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        r8 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        r0 := @parameter2: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.procedure.ProcEval: com.hp.hpl.jena.sparql.procedure.ProcedureRegistry chooseProcedureRegistry(com.hp.hpl.jena.sparql.util.Context)>($r1);

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r5 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.procedure.ProcedureRegistry: com.hp.hpl.jena.sparql.procedure.ProcedureFactory get(java.lang.String)>($r4);

        $r6 = virtualinvoke r3.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r7 = interfaceinvoke $r5.<com.hp.hpl.jena.sparql.procedure.ProcedureFactory: com.hp.hpl.jena.sparql.procedure.Procedure create(java.lang.String)>($r6);

        virtualinvoke r8.<com.hp.hpl.jena.sparql.expr.ExprList: void prepareExprs(com.hp.hpl.jena.sparql.util.Context)>($r1);

        interfaceinvoke $r7.<com.hp.hpl.jena.sparql.procedure.Procedure: void build(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r3, r8, r0);

        return $r7;
    }

    private static com.hp.hpl.jena.sparql.procedure.ProcedureRegistry chooseProcedureRegistry(com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.procedure.ProcedureRegistry $r1, r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.Context;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.procedure.ProcedureRegistry: com.hp.hpl.jena.sparql.procedure.ProcedureRegistry get(com.hp.hpl.jena.sparql.util.Context)>(r0);

        r2 = $r1;

        if $r1 != null goto label1;

        r2 = staticinvoke <com.hp.hpl.jena.sparql.procedure.ProcedureRegistry: com.hp.hpl.jena.sparql.procedure.ProcedureRegistry get()>();

     label1:
        return r2;
    }

    public static com.hp.hpl.jena.sparql.procedure.Procedure build(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.pfunction.PropertyFunctionFactory $r5;
        com.hp.hpl.jena.graph.Node r3;
        com.hp.hpl.jena.sparql.pfunction.PropertyFunction $r7;
        com.hp.hpl.jena.sparql.util.Context $r1;
        com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry $r2;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r8, r9;
        com.hp.hpl.jena.sparql.pfunction.ProcedurePF $r10;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r0;
        java.lang.String $r4, $r6;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        r8 := @parameter1: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r9 := @parameter2: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r0 := @parameter3: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.procedure.ProcEval: com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry choosePropFuncRegistry(com.hp.hpl.jena.sparql.util.Context)>($r1);

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r5 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry: com.hp.hpl.jena.sparql.pfunction.PropertyFunctionFactory get(java.lang.String)>($r4);

        $r6 = virtualinvoke r3.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r7 = interfaceinvoke $r5.<com.hp.hpl.jena.sparql.pfunction.PropertyFunctionFactory: com.hp.hpl.jena.sparql.pfunction.PropertyFunction create(java.lang.String)>($r6);

        interfaceinvoke $r7.<com.hp.hpl.jena.sparql.pfunction.PropertyFunction: void build(com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r8, r3, r9, r0);

        $r10 = new com.hp.hpl.jena.sparql.pfunction.ProcedurePF;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.pfunction.ProcedurePF: void <init>(com.hp.hpl.jena.sparql.pfunction.PropertyFunction,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.pfunction.PropFuncArg)>($r7, r8, r3, r9);

        return $r10;
    }

    public static com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry choosePropFuncRegistry(com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry $r1, r2;
        com.hp.hpl.jena.sparql.util.Context r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.Context;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry: com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry get(com.hp.hpl.jena.sparql.util.Context)>(r0);

        r2 = $r1;

        if $r1 != null goto label1;

        r2 = staticinvoke <com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry: com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry get()>();

     label1:
        return r2;
    }

    public static com.hp.hpl.jena.sparql.engine.QueryIterator eval(com.hp.hpl.jena.sparql.engine.QueryIterator, com.hp.hpl.jena.sparql.procedure.Procedure, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.procedure.Procedure r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r1, $r3;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r0 := @parameter1: com.hp.hpl.jena.sparql.procedure.Procedure;

        r2 := @parameter2: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.procedure.Procedure: com.hp.hpl.jena.sparql.engine.QueryIterator proc(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, r2);

        return $r3;
    }
}
