final class com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain extends com.mycila.inject.internal.guava.collect.DiscreteDomain implements java.io.Serializable
{
    private static final com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain INSTANCE;
    private static final java.math.BigInteger MIN_LONG;
    private static final java.math.BigInteger MAX_LONG;
    private static final long serialVersionUID;

    private void <init>()
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.DiscreteDomain: void <init>()>();

        return;
    }

    public java.math.BigInteger next(java.math.BigInteger)
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain r3;
        java.math.BigInteger r0, $r1, $r2;

        r3 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain;

        r0 := @parameter0: java.math.BigInteger;

        $r1 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);

        return $r2;
    }

    public java.math.BigInteger previous(java.math.BigInteger)
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain r3;
        java.math.BigInteger r0, $r1, $r2;

        r3 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain;

        r0 := @parameter0: java.math.BigInteger;

        $r1 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

        return $r2;
    }

    public long distance(java.math.BigInteger, java.math.BigInteger)
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain r7;
        long $l0;
        java.math.BigInteger r0, r1, $r2, $r3, $r4, $r5, $r6;

        r7 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r1);

        $r3 = <com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain: java.math.BigInteger MIN_LONG>;

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger max(java.math.BigInteger)>($r3);

        $r5 = <com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain: java.math.BigInteger MAX_LONG>;

        $r6 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger min(java.math.BigInteger)>($r5);

        $l0 = virtualinvoke $r6.<java.math.BigInteger: long longValue()>();

        return $l0;
    }

    private java.lang.Object readResolve()
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain $r0, r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain;

        $r0 = <com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain: com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain INSTANCE>;

        return $r0;
    }

    public volatile long distance(java.lang.Comparable, java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain r0;
        java.lang.Comparable r1, r2;
        java.math.BigInteger $r3, $r4;
        long $l0;

        r0 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain;

        r1 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: java.lang.Comparable;

        $r4 = (java.math.BigInteger) r1;

        $r3 = (java.math.BigInteger) r2;

        $l0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain: long distance(java.math.BigInteger,java.math.BigInteger)>($r4, $r3);

        return $l0;
    }

    public volatile java.lang.Comparable previous(java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain r0;
        java.lang.Comparable r1;
        java.math.BigInteger $r2, $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = (java.math.BigInteger) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain: java.math.BigInteger previous(java.math.BigInteger)>($r2);

        return $r3;
    }

    public volatile java.lang.Comparable next(java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain r0;
        java.lang.Comparable r1;
        java.math.BigInteger $r2, $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = (java.math.BigInteger) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain: java.math.BigInteger next(java.math.BigInteger)>($r2);

        return $r3;
    }

    static com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain access$200()
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain $r0;

        $r0 = <com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain: com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain INSTANCE>;

        return $r0;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain $r0;
        java.math.BigInteger $r1, $r2;

        <com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain: long serialVersionUID> = 0L;

        $r0 = new com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain: void <init>()>();

        <com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain: com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain INSTANCE> = $r0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-9223372036854775808L);

        <com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain: java.math.BigInteger MIN_LONG> = $r1;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(9223372036854775807L);

        <com.mycila.inject.internal.guava.collect.DiscreteDomains$BigIntegerDomain: java.math.BigInteger MAX_LONG> = $r2;

        return;
    }
}
