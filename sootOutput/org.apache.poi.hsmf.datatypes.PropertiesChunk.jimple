public abstract class org.apache.poi.hsmf.datatypes.PropertiesChunk extends org.apache.poi.hsmf.datatypes.Chunk
{
    public static final java.lang.String NAME;
    private org.apache.poi.util.POILogger logger;
    private java.util.Map properties;
    private org.apache.poi.hsmf.datatypes.ChunkGroup parentGroup;

    protected void <init>(org.apache.poi.hsmf.datatypes.ChunkGroup)
    {
        org.apache.poi.hsmf.datatypes.PropertiesChunk r0;
        int $i1;
        org.apache.poi.util.POILogger $r2;
        java.util.HashMap $r5;
        org.apache.poi.hsmf.datatypes.Types$MAPIType $r1;
        org.apache.poi.hsmf.datatypes.ChunkGroup r4;

        r0 := @this: org.apache.poi.hsmf.datatypes.PropertiesChunk;

        r4 := @parameter0: org.apache.poi.hsmf.datatypes.ChunkGroup;

        $r1 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType UNKNOWN>;

        $i1 = (int) -1;

        specialinvoke r0.<org.apache.poi.hsmf.datatypes.Chunk: void <init>(java.lang.String,int,org.apache.poi.hsmf.datatypes.Types$MAPIType)>("__properties_version1.0", $i1, $r1);

        $r2 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/hsmf/datatypes/PropertiesChunk;");

        r0.<org.apache.poi.hsmf.datatypes.PropertiesChunk: org.apache.poi.util.POILogger logger> = $r2;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.apache.poi.hsmf.datatypes.PropertiesChunk: java.util.Map properties> = $r5;

        r0.<org.apache.poi.hsmf.datatypes.PropertiesChunk: org.apache.poi.hsmf.datatypes.ChunkGroup parentGroup> = r4;

        return;
    }

    public java.lang.String getEntryName()
    {
        org.apache.poi.hsmf.datatypes.PropertiesChunk r0;

        r0 := @this: org.apache.poi.hsmf.datatypes.PropertiesChunk;

        return "__properties_version1.0";
    }

    public java.util.Map getRawProperties()
    {
        org.apache.poi.hsmf.datatypes.PropertiesChunk r0;
        java.util.Map $r1;

        r0 := @this: org.apache.poi.hsmf.datatypes.PropertiesChunk;

        $r1 = r0.<org.apache.poi.hsmf.datatypes.PropertiesChunk: java.util.Map properties>;

        return $r1;
    }

    public java.util.Map getProperties()
    {
        java.util.Iterator $r5;
        org.apache.poi.hsmf.datatypes.MAPIProperty r7;
        java.util.Set $r4;
        java.util.HashMap $r0;
        java.util.List $r8;
        org.apache.poi.hsmf.datatypes.PropertiesChunk r1;
        java.util.Map $r2, $r3;
        int $i0;
        java.lang.Object $r6;
        boolean $z0;

        r1 := @this: org.apache.poi.hsmf.datatypes.PropertiesChunk;

        $r0 = new java.util.HashMap;

        $r2 = r1.<org.apache.poi.hsmf.datatypes.PropertiesChunk: java.util.Map properties>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>($i0);

        $r3 = r1.<org.apache.poi.hsmf.datatypes.PropertiesChunk: java.util.Map properties>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.poi.hsmf.datatypes.MAPIProperty) $r6;

        $r8 = virtualinvoke r1.<org.apache.poi.hsmf.datatypes.PropertiesChunk: java.util.List getValues(org.apache.poi.hsmf.datatypes.MAPIProperty)>(r7);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r8);

        goto label1;

     label2:
        return $r0;
    }

    public java.util.List getValues(org.apache.poi.hsmf.datatypes.MAPIProperty)
    {
        org.apache.poi.hsmf.datatypes.ChunkBasedPropertyValue r6;
        org.apache.poi.hsmf.datatypes.MAPIProperty r1;
        java.util.List $r5, $r7;
        org.apache.poi.hsmf.datatypes.PropertyValue r4;
        org.apache.poi.hsmf.datatypes.PropertiesChunk r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.apache.poi.hsmf.datatypes.PropertiesChunk;

        r1 := @parameter0: org.apache.poi.hsmf.datatypes.MAPIProperty;

        $r2 = r0.<org.apache.poi.hsmf.datatypes.PropertiesChunk: java.util.Map properties>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.poi.hsmf.datatypes.PropertyValue) $r3;

        if r4 != null goto label1;

        return null;

     label1:
        $z0 = r4 instanceof org.apache.poi.hsmf.datatypes.ChunkBasedPropertyValue;

        if $z0 == 0 goto label2;

        r6 = (org.apache.poi.hsmf.datatypes.ChunkBasedPropertyValue) r4;

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r7;

     label2:
        $r5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r4);

        return $r5;
    }

    public org.apache.poi.hsmf.datatypes.PropertyValue getRawValue(org.apache.poi.hsmf.datatypes.MAPIProperty)
    {
        org.apache.poi.hsmf.datatypes.PropertyValue $r4;
        org.apache.poi.hsmf.datatypes.PropertiesChunk r0;
        java.util.Map $r2;
        org.apache.poi.hsmf.datatypes.MAPIProperty r1;
        java.lang.Object $r3;

        r0 := @this: org.apache.poi.hsmf.datatypes.PropertiesChunk;

        r1 := @parameter0: org.apache.poi.hsmf.datatypes.MAPIProperty;

        $r2 = r0.<org.apache.poi.hsmf.datatypes.PropertiesChunk: java.util.Map properties>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.poi.hsmf.datatypes.PropertyValue) $r3;

        return $r4;
    }

    protected void matchVariableSizedPropertiesToChunks()
    {
        java.util.HashMap $r0;
        java.lang.Integer $r9, $r16;
        org.apache.poi.hsmf.datatypes.PropertiesChunk r1;
        java.util.Map $r4;
        int $i0, $i1, i2, i3;
        org.apache.poi.hsmf.datatypes.ChunkGroup $r2;
        java.lang.String $r15;
        boolean $z0, $z1;
        org.apache.poi.hsmf.datatypes.ChunkBasedPropertyValue r19;
        java.util.Iterator $r6;
        java.util.Collection $r5;
        org.apache.poi.hsmf.datatypes.MAPIProperty $r8;
        org.apache.poi.hsmf.datatypes.Chunk r17, r20;
        org.apache.poi.util.POILogger $r12;
        org.apache.poi.hsmf.datatypes.PropertyValue r18;
        java.lang.Object $r7, $r10;
        java.lang.StringBuilder $r11, $r13, $r14;
        org.apache.poi.hsmf.datatypes.Chunk[] $r3;

        r1 := @this: org.apache.poi.hsmf.datatypes.PropertiesChunk;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = r1.<org.apache.poi.hsmf.datatypes.PropertiesChunk: org.apache.poi.hsmf.datatypes.ChunkGroup parentGroup>;

        $r3 = interfaceinvoke $r2.<org.apache.poi.hsmf.datatypes.ChunkGroup: org.apache.poi.hsmf.datatypes.Chunk[] getChunks()>();

        i2 = lengthof $r3;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        r17 = $r3[i3];

        $i1 = r17.<org.apache.poi.hsmf.datatypes.Chunk: int chunkId>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r17);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r4 = r1.<org.apache.poi.hsmf.datatypes.PropertiesChunk: java.util.Map properties>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.apache.poi.hsmf.datatypes.PropertyValue) $r7;

        $z1 = r18 instanceof org.apache.poi.hsmf.datatypes.ChunkBasedPropertyValue;

        if $z1 == 0 goto label5;

        r19 = (org.apache.poi.hsmf.datatypes.ChunkBasedPropertyValue) r18;

        $r8 = virtualinvoke r19.<org.apache.poi.hsmf.datatypes.ChunkBasedPropertyValue: org.apache.poi.hsmf.datatypes.MAPIProperty getProperty()>();

        $i0 = $r8.<org.apache.poi.hsmf.datatypes.MAPIProperty: int id>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r10 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        r20 = (org.apache.poi.hsmf.datatypes.Chunk) $r10;

        if r20 == null goto label4;

        virtualinvoke r19.<org.apache.poi.hsmf.datatypes.ChunkBasedPropertyValue: void setValue(org.apache.poi.hsmf.datatypes.Chunk)>(r20);

        goto label5;

     label4:
        $r12 = r1.<org.apache.poi.hsmf.datatypes.PropertiesChunk: org.apache.poi.util.POILogger logger>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No chunk found matching Property ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, $r15);

     label5:
        goto label3;

     label6:
        return;
    }

    protected void readProperties(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r32, r53;
        java.lang.Integer $r46;
        java.util.Map $r16, $r55;
        org.apache.poi.hsmf.datatypes.PropertyValue$LongLongPropertyValue $r26;
        org.apache.poi.hsmf.datatypes.PropertyValue$NullPropertyValue $r30;
        java.lang.StringBuilder $r17, $r19, $r20, $r47, $r48, $r49;
        org.apache.poi.hsmf.datatypes.PropertyValue$FloatPropertyValue $r25;
        long $l2;
        java.lang.String $r21, $r50;
        org.apache.poi.hsmf.datatypes.ChunkBasedPropertyValue $r31;
        org.apache.poi.hsmf.datatypes.PropertyValue$DoublePropertyValue $r24;
        org.apache.poi.hsmf.datatypes.PropertyValue$TimePropertyValue $r22;
        org.apache.poi.hsmf.datatypes.PropertyValue$LongPropertyValue $r27;
        org.apache.poi.hsmf.datatypes.PropertiesChunk r15;
        org.apache.poi.util.LittleEndian$BufferUnderrunException $r51;
        boolean z0, z1, $z2;
        org.apache.poi.hsmf.datatypes.MAPIProperty $r2, $r3, r52;
        org.apache.poi.util.POILogger $r18, $r38, $r39, $r44;
        org.apache.poi.hsmf.datatypes.PropertyValue $r14, r54;
        int $i0, $i1, $i3, i4;
        org.apache.poi.hsmf.datatypes.Types$MAPIType $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r33, $r34, $r35, $r36, $r37, $r40, $r41, $r42, $r43, $r45;
        org.apache.poi.hsmf.datatypes.PropertyValue$ShortPropertyValue $r28;
        org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue $r23;
        java.lang.Object $r56;
        org.apache.poi.hsmf.datatypes.PropertyValue$BooleanPropertyValue $r29;
        java.io.InputStream r0;

        r15 := @this: org.apache.poi.hsmf.datatypes.PropertiesChunk;

        r0 := @parameter0: java.io.InputStream;

        z0 = 1;

     label01:
        if z0 == 0 goto label27;

     label02:
        $i0 = staticinvoke <org.apache.poi.util.LittleEndian: int readUShort(java.io.InputStream)>(r0);

        $i1 = staticinvoke <org.apache.poi.util.LittleEndian: int readUShort(java.io.InputStream)>(r0);

        $l2 = staticinvoke <org.apache.poi.util.LittleEndian: long readUInt(java.io.InputStream)>(r0);

        $r1 = staticinvoke <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType getById(int)>($i0);

        $r2 = staticinvoke <org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.MAPIProperty get(int)>($i1);

        r52 = $r2;

        $r3 = <org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.MAPIProperty UNKNOWN>;

        if $r2 != $r3 goto label03;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        r52 = staticinvoke <org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.MAPIProperty createCustom(int,org.apache.poi.hsmf.datatypes.Types$MAPIType,java.lang.String)>($i1, $r1, $r50);

     label03:
        if $r1 != null goto label05;

        $r44 = r15.<org.apache.poi.hsmf.datatypes.PropertiesChunk: org.apache.poi.util.POILogger logger>;

        $r45 = r52.<org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.Types$MAPIType usualType>;

        $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r44.<org.apache.poi.util.POILogger: void log(int,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(5, "Invalid type found, expected ", $r45, " but got ", $r46, " for property ", r52);

     label04:
        goto label27;

     label05:
        $r4 = r52.<org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.Types$MAPIType usualType>;

        if $r4 == $r1 goto label10;

        $r33 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType ASCII_STRING>;

        if $r1 != $r33 goto label06;

        $r43 = r52.<org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.Types$MAPIType usualType>;

        $r42 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType UNICODE_STRING>;

        if $r43 == $r42 goto label10;

     label06:
        $r34 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType UNICODE_STRING>;

        if $r1 != $r34 goto label07;

        $r41 = r52.<org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.Types$MAPIType usualType>;

        $r40 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType ASCII_STRING>;

        if $r41 != $r40 goto label07;

        goto label10;

     label07:
        $r36 = r52.<org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.Types$MAPIType usualType>;

        $r35 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType UNKNOWN>;

        if $r36 != $r35 goto label08;

        $r39 = r15.<org.apache.poi.hsmf.datatypes.PropertiesChunk: org.apache.poi.util.POILogger logger>;

        virtualinvoke $r39.<org.apache.poi.util.POILogger: void log(int,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(3, "Property definition for ", r52, " is missing a type definition, found a value with type ", $r1);

        goto label10;

     label08:
        $r38 = r15.<org.apache.poi.hsmf.datatypes.PropertiesChunk: org.apache.poi.util.POILogger logger>;

        $r37 = r52.<org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.Types$MAPIType usualType>;

        virtualinvoke $r38.<org.apache.poi.util.POILogger: void log(int,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(5, "Type mismatch, expected ", $r37, " but got ", $r1, " for property ", r52);

     label09:
        goto label27;

     label10:
        z1 = 0;

        i4 = virtualinvoke $r1.<org.apache.poi.hsmf.datatypes.Types$MAPIType: int getLength()>();

        $z2 = virtualinvoke $r1.<org.apache.poi.hsmf.datatypes.Types$MAPIType: boolean isFixedLength()>();

        if $z2 != 0 goto label11;

        z1 = 1;

        i4 = 8;

     label11:
        $r32 = newarray (byte)[i4];

        staticinvoke <org.apache.poi.util.IOUtils: int readFully(java.io.InputStream,byte[])>(r0, $r32);

        if i4 >= 8 goto label12;

        $i3 = 8 - i4;

        r53 = newarray (byte)[$i3];

        staticinvoke <org.apache.poi.util.IOUtils: int readFully(java.io.InputStream,byte[])>(r0, r53);

     label12:
        if z1 == 0 goto label13;

        $r31 = new org.apache.poi.hsmf.datatypes.ChunkBasedPropertyValue;

        specialinvoke $r31.<org.apache.poi.hsmf.datatypes.ChunkBasedPropertyValue: void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty,long,byte[])>(r52, $l2, $r32);

        r54 = $r31;

        goto label23;

     label13:
        $r5 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType NULL>;

        if $r1 != $r5 goto label14;

        $r30 = new org.apache.poi.hsmf.datatypes.PropertyValue$NullPropertyValue;

        specialinvoke $r30.<org.apache.poi.hsmf.datatypes.PropertyValue$NullPropertyValue: void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty,long,byte[])>(r52, $l2, $r32);

        r54 = $r30;

        goto label23;

     label14:
        $r6 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType BOOLEAN>;

        if $r1 != $r6 goto label15;

        $r29 = new org.apache.poi.hsmf.datatypes.PropertyValue$BooleanPropertyValue;

        specialinvoke $r29.<org.apache.poi.hsmf.datatypes.PropertyValue$BooleanPropertyValue: void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty,long,byte[])>(r52, $l2, $r32);

        r54 = $r29;

        goto label23;

     label15:
        $r7 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType SHORT>;

        if $r1 != $r7 goto label16;

        $r28 = new org.apache.poi.hsmf.datatypes.PropertyValue$ShortPropertyValue;

        specialinvoke $r28.<org.apache.poi.hsmf.datatypes.PropertyValue$ShortPropertyValue: void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty,long,byte[])>(r52, $l2, $r32);

        r54 = $r28;

        goto label23;

     label16:
        $r8 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType LONG>;

        if $r1 != $r8 goto label17;

        $r27 = new org.apache.poi.hsmf.datatypes.PropertyValue$LongPropertyValue;

        specialinvoke $r27.<org.apache.poi.hsmf.datatypes.PropertyValue$LongPropertyValue: void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty,long,byte[])>(r52, $l2, $r32);

        r54 = $r27;

        goto label23;

     label17:
        $r9 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType LONG_LONG>;

        if $r1 != $r9 goto label18;

        $r26 = new org.apache.poi.hsmf.datatypes.PropertyValue$LongLongPropertyValue;

        specialinvoke $r26.<org.apache.poi.hsmf.datatypes.PropertyValue$LongLongPropertyValue: void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty,long,byte[])>(r52, $l2, $r32);

        r54 = $r26;

        goto label23;

     label18:
        $r10 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType FLOAT>;

        if $r1 != $r10 goto label19;

        $r25 = new org.apache.poi.hsmf.datatypes.PropertyValue$FloatPropertyValue;

        specialinvoke $r25.<org.apache.poi.hsmf.datatypes.PropertyValue$FloatPropertyValue: void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty,long,byte[])>(r52, $l2, $r32);

        r54 = $r25;

        goto label23;

     label19:
        $r11 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType DOUBLE>;

        if $r1 != $r11 goto label20;

        $r24 = new org.apache.poi.hsmf.datatypes.PropertyValue$DoublePropertyValue;

        specialinvoke $r24.<org.apache.poi.hsmf.datatypes.PropertyValue$DoublePropertyValue: void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty,long,byte[])>(r52, $l2, $r32);

        r54 = $r24;

        goto label23;

     label20:
        $r12 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType CURRENCY>;

        if $r1 != $r12 goto label21;

        $r23 = new org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue;

        specialinvoke $r23.<org.apache.poi.hsmf.datatypes.PropertyValue$CurrencyPropertyValue: void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty,long,byte[])>(r52, $l2, $r32);

        r54 = $r23;

        goto label23;

     label21:
        $r13 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType TIME>;

        if $r1 != $r13 goto label22;

        $r22 = new org.apache.poi.hsmf.datatypes.PropertyValue$TimePropertyValue;

        specialinvoke $r22.<org.apache.poi.hsmf.datatypes.PropertyValue$TimePropertyValue: void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty,long,byte[])>(r52, $l2, $r32);

        r54 = $r22;

        goto label23;

     label22:
        $r14 = new org.apache.poi.hsmf.datatypes.PropertyValue;

        specialinvoke $r14.<org.apache.poi.hsmf.datatypes.PropertyValue: void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty,long,byte[])>(r52, $l2, $r32);

        r54 = $r14;

     label23:
        $r55 = r15.<org.apache.poi.hsmf.datatypes.PropertiesChunk: java.util.Map properties>;

        $r56 = interfaceinvoke $r55.<java.util.Map: java.lang.Object get(java.lang.Object)>(r52);

        if $r56 == null goto label24;

        $r18 = r15.<org.apache.poi.hsmf.datatypes.PropertiesChunk: org.apache.poi.util.POILogger logger>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate values found for ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r52);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, $r21);

     label24:
        $r16 = r15.<org.apache.poi.hsmf.datatypes.PropertiesChunk: java.util.Map properties>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r52, r54);

     label25:
        goto label01;

     label26:
        $r51 := @caughtexception;

        z0 = 0;

        goto label01;

     label27:
        return;

        catch org.apache.poi.util.LittleEndian$BufferUnderrunException from label02 to label04 with label26;
        catch org.apache.poi.util.LittleEndian$BufferUnderrunException from label05 to label09 with label26;
        catch org.apache.poi.util.LittleEndian$BufferUnderrunException from label10 to label25 with label26;
    }

    protected void writeProperties(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.poi.hsmf.datatypes.PropertiesChunk r0;

        r0 := @this: org.apache.poi.hsmf.datatypes.PropertiesChunk;

        r1 := @parameter0: java.io.OutputStream;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.poi.hsmf.datatypes.PropertiesChunk: java.lang.String NAME> = "__properties_version1.0";

        return;
    }
}
