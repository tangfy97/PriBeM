public class org.waveprotocol.box.server.waveserver.LuceneWaveIndexerImpl extends org.waveprotocol.box.server.waveserver.AbstractWaveIndexer
{
    private final org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener listener;

    public void <init>(org.waveprotocol.box.server.waveserver.WaveMap, org.waveprotocol.box.server.waveserver.WaveletProvider, org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener)
    {
        org.waveprotocol.box.server.waveserver.LuceneWaveIndexerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletProvider r2;
        org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener r3;
        org.waveprotocol.box.server.waveserver.WaveMap r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.LuceneWaveIndexerImpl;

        r1 := @parameter0: org.waveprotocol.box.server.waveserver.WaveMap;

        r2 := @parameter1: org.waveprotocol.box.server.waveserver.WaveletProvider;

        r3 := @parameter2: org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener;

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.AbstractWaveIndexer: void <init>(org.waveprotocol.box.server.waveserver.WaveMap,org.waveprotocol.box.server.waveserver.WaveletProvider)>(r1, r2);

        r0.<org.waveprotocol.box.server.waveserver.LuceneWaveIndexerImpl: org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener listener> = r3;

        return;
    }

    protected void processWavelet(org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener $r2;
        org.waveprotocol.box.server.waveserver.LuceneWaveIndexerImpl r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.LuceneWaveIndexerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.LuceneWaveIndexerImpl: org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener listener>;

        interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener: com.google.common.util.concurrent.ListenableFuture onWaveInit(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        return;
    }

    protected void postIndexHook()
    {
        org.waveprotocol.box.server.waveserver.LuceneWaveIndexerImpl r0;
        org.waveprotocol.box.server.waveserver.WaveletStateException $r2;
        org.waveprotocol.box.server.waveserver.IndexException $r3;
        org.waveprotocol.box.server.waveserver.WaveMap $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.LuceneWaveIndexerImpl;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.LuceneWaveIndexerImpl: org.waveprotocol.box.server.waveserver.WaveMap getWaveMap()>();

        virtualinvoke $r1.<org.waveprotocol.box.server.waveserver.WaveMap: void unloadAllWavelets()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new org.waveprotocol.box.server.waveserver.IndexException;

        specialinvoke $r3.<org.waveprotocol.box.server.waveserver.IndexException: void <init>(java.lang.String,java.lang.Throwable)>("Problem encountered while cleaning up", $r2);

        throw $r3;

     label4:
        return;

        catch org.waveprotocol.box.server.waveserver.WaveletStateException from label1 to label2 with label3;
    }
}
