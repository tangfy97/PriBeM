final class org.apache.jena.riot.writer.TurtleShell$ShellGraph extends java.lang.Object
{
    private final com.hp.hpl.jena.graph.Graph graph;
    private final java.util.Set nestedObjects;
    private final java.util.Set freeBnodes;
    private final java.util.Map lists;
    private final java.util.Map freeLists;
    private final java.util.Map nLinkedLists;
    private final java.util.Collection listElts;
    final org.apache.jena.riot.writer.TurtleShell this$0;

    private void <init>(org.apache.jena.riot.writer.TurtleShell, com.hp.hpl.jena.graph.Graph)
    {
        java.util.Collection $r9;
        java.util.Set $r10;
        java.util.HashMap $r5, $r6, $r7;
        java.util.HashSet $r3, $r4, $r8;
        org.apache.jena.riot.writer.TurtleShell r1;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r0;
        com.hp.hpl.jena.graph.Graph r2;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        r1 := @parameter0: org.apache.jena.riot.writer.TurtleShell;

        r2 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: com.hp.hpl.jena.graph.Graph graph> = r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Set nestedObjects> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Set freeBnodes> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Map lists> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Map freeLists> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Map nLinkedLists> = $r7;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Collection listElts> = $r8;

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void findLists()>();

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void findBNodesSyntax()>();

        $r10 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Set nestedObjects>;

        $r9 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Collection listElts>;

        interfaceinvoke $r10.<java.util.Set: boolean removeAll(java.util.Collection)>($r9);

        return;
    }

    private void findBNodesSyntax()
    {
        java.lang.Throwable $r13;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r9, $r14;
        java.util.HashSet $r0;
        java.util.Map $r11;
        int $i0, $i1;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r1;
        com.hp.hpl.jena.graph.Graph $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Set $r10, $r12;
        com.hp.hpl.jena.graph.Triple r8;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6;
        java.lang.Object $r7;

        r1 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r5 = r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: com.hp.hpl.jena.graph.Graph graph>;

        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r3, $r2);

     label1:
        $z3 = interfaceinvoke $r6.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Triple) $r7;

        $r9 = virtualinvoke r8.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z0 = virtualinvoke $r9.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 == 0 goto label2;

        $r11 = r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Map lists>;

        $z2 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>($r9);

        if $z2 != 0 goto label2;

        $i1 = specialinvoke r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: int inLinks(com.hp.hpl.jena.graph.Node)>($r9);

        if $i1 != 0 goto label2;

        $r12 = r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Set freeBnodes>;

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>($r9);

     label2:
        $r14 = virtualinvoke r8.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z4 = virtualinvoke $r14.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z4 != 0 goto label3;

        goto label1;

     label3:
        $z1 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>($r14);

        if $z1 == 0 goto label4;

        goto label1;

     label4:
        $i0 = specialinvoke r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: int inLinks(com.hp.hpl.jena.graph.Node)>($r14);

        if $i0 != 1 goto label5;

        $r10 = r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Set nestedObjects>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r14);

     label5:
        goto label1;

     label6:
        interfaceinvoke $r6.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        goto label9;

     label7:
        $r13 := @caughtexception;

     label8:
        interfaceinvoke $r6.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        throw $r13;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private int inLinks(com.hp.hpl.jena.graph.Node)
    {
        java.lang.Throwable $r6;
        com.hp.hpl.jena.graph.Node r1, $r2, $r3;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r0;
        com.hp.hpl.jena.graph.Graph $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r4 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: com.hp.hpl.jena.graph.Graph graph>;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r2, r1);

     label1:
        $z0 = interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

     label2:
        interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return 0;

     label3:
        interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        $z1 = interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z1 != 0 goto label5;

     label4:
        interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return 1;

     label5:
        interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return 2;

     label6:
        $r6 := @caughtexception;

     label7:
        interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void findLists()
    {
        long $l0;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r10, r13;
        java.util.HashSet $r9;
        byte $b1, $b2;
        java.util.Map $r17, $r18, $r19;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r0;
        com.hp.hpl.jena.graph.Graph $r4, $r16;
        boolean $z0;
        java.util.Iterator $r6;
        java.util.Collection $r20;
        com.hp.hpl.jena.graph.Triple r8;
        java.util.List $r5, r15;
        org.apache.jena.atlas.lib.Pair $r11;
        java.lang.Object $r7, $r12, $r14;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        $r4 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: com.hp.hpl.jena.graph.Graph graph>;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r2 = <org.apache.jena.riot.writer.WriterConst: com.hp.hpl.jena.graph.Node RDF_Rest>;

        $r1 = <org.apache.jena.riot.writer.WriterConst: com.hp.hpl.jena.graph.Node RDF_Nil>;

        $r5 = staticinvoke <org.apache.jena.riot.system.RiotLib: java.util.List triples(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r3, $r2, $r1);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Triple) $r7;

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        $r10 = virtualinvoke r8.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r11 = specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.atlas.lib.Pair followTailToHead(com.hp.hpl.jena.graph.Node,java.util.Collection)>($r10, $r9);

        if $r11 == null goto label5;

        $r12 = virtualinvoke $r11.<org.apache.jena.atlas.lib.Pair: java.lang.Object getLeft()>();

        r13 = (com.hp.hpl.jena.graph.Node) $r12;

        $r14 = virtualinvoke $r11.<org.apache.jena.atlas.lib.Pair: java.lang.Object getRight()>();

        r15 = (java.util.List) $r14;

        $r16 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: com.hp.hpl.jena.graph.Graph graph>;

        $l0 = staticinvoke <org.apache.jena.riot.system.RiotLib: long countTriples(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r16, null, null, r13);

        $b1 = $l0 cmp 1L;

        if $b1 != 0 goto label2;

        $r19 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Map lists>;

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r15);

        goto label4;

     label2:
        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label3;

        $r18 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Map freeLists>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r15);

        goto label4;

     label3:
        $r17 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Map nLinkedLists>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r15);

     label4:
        $r20 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Collection listElts>;

        interfaceinvoke $r20.<java.util.Collection: boolean addAll(java.util.Collection)>($r9);

     label5:
        goto label1;

     label6:
        return;
    }

    private org.apache.jena.atlas.lib.Pair followTailToHead(com.hp.hpl.jena.graph.Node, java.util.Collection)
    {
        long $l0;
        com.hp.hpl.jena.graph.Node r3, $r5, $r8, $r11, r17;
        java.util.ArrayList $r0, $r1, $r2;
        byte $b1;
        int $i2, $i3, $i4, $i5;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r4;
        com.hp.hpl.jena.graph.Graph $r6, $r9, $r12;
        boolean $z0;
        java.util.Collection r15;
        com.hp.hpl.jena.graph.Triple $r7, r14;
        java.util.List $r10;
        org.apache.jena.atlas.lib.Pair $r18;
        java.lang.Object $r13, $r16;

        r4 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        r15 := @parameter1: java.util.Collection;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r17 = r3;

     label1:
        $z0 = specialinvoke r4.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: boolean validListElement(com.hp.hpl.jena.graph.Node,java.util.List)>(r17, $r2);

        if $z0 != 0 goto label3;

        $i3 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i3 != 0 goto label2;

        return null;

     label2:
        $i4 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        $r16 = interfaceinvoke $r0.<java.util.List: java.lang.Object remove(int)>($i5);

        r17 = (com.hp.hpl.jena.graph.Node) $r16;

        goto label7;

     label3:
        $r6 = r4.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: com.hp.hpl.jena.graph.Graph graph>;

        $r5 = <org.apache.jena.riot.writer.WriterConst: com.hp.hpl.jena.graph.Node RDF_First>;

        $r7 = staticinvoke <org.apache.jena.riot.system.RiotLib: com.hp.hpl.jena.graph.Triple triple1(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r6, r17, $r5, null);

        if $r7 != null goto label4;

        return null;

     label4:
        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r8);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r17);

        $r9 = r4.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: com.hp.hpl.jena.graph.Graph graph>;

        $r10 = staticinvoke <org.apache.jena.riot.system.RiotLib: java.util.List triples(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r9, null, null, r17);

        $r12 = r4.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: com.hp.hpl.jena.graph.Graph graph>;

        $r11 = <org.apache.jena.riot.writer.WriterConst: com.hp.hpl.jena.graph.Node RDF_Rest>;

        $l0 = staticinvoke <org.apache.jena.riot.system.RiotLib: long countTriples(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r12, null, $r11, r17);

        $b1 = $l0 cmp 1L;

        if $b1 == 0 goto label5;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r17);

        goto label7;

     label5:
        $i2 = interfaceinvoke $r10.<java.util.List: int size()>();

        if $i2 <= 1 goto label6;

        goto label7;

     label6:
        $r13 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(0);

        r14 = (com.hp.hpl.jena.graph.Triple) $r13;

        r17 = virtualinvoke r14.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        goto label1;

     label7:
        interfaceinvoke r15.<java.util.Collection: boolean addAll(java.util.Collection)>($r0);

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r1);

        $r18 = staticinvoke <org.apache.jena.atlas.lib.Pair: org.apache.jena.atlas.lib.Pair create(java.lang.Object,java.lang.Object)>(r17, $r1);

        return $r18;
    }

    private boolean validListElement(com.hp.hpl.jena.graph.Node, java.util.List)
    {
        long $l0;
        com.hp.hpl.jena.graph.Node r1, $r2, $r5;
        com.hp.hpl.jena.graph.Triple $r4, $r7;
        java.util.List r9;
        byte $b1;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r0;
        com.hp.hpl.jena.graph.Graph $r3, $r6, $r8;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r9 := @parameter1: java.util.List;

        $r3 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: com.hp.hpl.jena.graph.Graph graph>;

        $r2 = <org.apache.jena.riot.writer.WriterConst: com.hp.hpl.jena.graph.Node RDF_Rest>;

        $r4 = staticinvoke <org.apache.jena.riot.system.RiotLib: com.hp.hpl.jena.graph.Triple triple1(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, r1, $r2, null);

        if $r4 != null goto label1;

        return 0;

     label1:
        $r6 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: com.hp.hpl.jena.graph.Graph graph>;

        $r5 = <org.apache.jena.riot.writer.WriterConst: com.hp.hpl.jena.graph.Node RDF_First>;

        $r7 = staticinvoke <org.apache.jena.riot.system.RiotLib: com.hp.hpl.jena.graph.Triple triple1(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r6, r1, $r5, null);

        if $r7 != null goto label2;

        return 0;

     label2:
        $r8 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: com.hp.hpl.jena.graph.Graph graph>;

        $l0 = staticinvoke <org.apache.jena.riot.system.RiotLib: long countTriples(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r8, r1, null, null);

        $b1 = $l0 cmp 2L;

        if $b1 == 0 goto label3;

        return 0;

     label3:
        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r4);

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r7);

        return 1;
    }

    private void writeGraph()
    {
        java.util.Iterator $r2;
        java.util.Map $r3, $r4;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r0;
        com.hp.hpl.jena.graph.Graph $r1;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        $r1 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: com.hp.hpl.jena.graph.Graph graph>;

        $r2 = staticinvoke <org.apache.jena.riot.other.GLib: java.util.Iterator listSubjects(com.hp.hpl.jena.graph.Graph)>($r1);

        $z0 = specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: boolean writeBySubject(java.util.Iterator)>($r2);

        z3 = $z0;

        $r3 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Map nLinkedLists>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        z3 = specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: boolean writeNLinkedLists(boolean)>($z0);

     label1:
        $r4 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Map freeLists>;

        $z2 = interfaceinvoke $r4.<java.util.Map: boolean isEmpty()>();

        if $z2 != 0 goto label2;

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: boolean writeFreeLists(boolean)>(z3);

     label2:
        return;
    }

    private boolean writeNLinkedLists(boolean)
    {
        com.hp.hpl.jena.graph.Node r5, $r16, $r21, $r24;
        java.util.Map $r1, $r6;
        boolean $z0, z1;
        java.util.Set $r2;
        java.util.List $r27, $r35;
        int $i0, $i1;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r0;
        java.util.Iterator $r3;
        org.apache.jena.atlas.io.IndentedWriter $r10, $r13, $r15, $r30, $r34;
        org.apache.jena.riot.writer.TurtleShell $r8, $r9, $r11, $r12, $r14, $r17, $r18, $r19, $r22, $r23, $r25, $r26, $r28, $r29, $r31, $r32, $r33;
        java.lang.Object $r4, $r7, $r20;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        z1 := @parameter0: boolean;

        $r1 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Map nLinkedLists>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.graph.Node) $r4;

        if z1 == 0 goto label2;

        $r33 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r34 = $r33.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r34.<org.apache.jena.atlas.io.IndentedWriter: void println()>();

     label2:
        z1 = 1;

        $r6 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Map nLinkedLists>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        $r35 = (java.util.List) $r7;

        $r8 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        virtualinvoke $r8.<org.apache.jena.riot.writer.TurtleShell: void writeNode(com.hp.hpl.jena.graph.Node)>(r5);

        $r9 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r10 = $r9.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        $i0 = virtualinvoke $r10.<org.apache.jena.atlas.io.IndentedWriter: int getCol()>();

        if $i0 <= 20 goto label3;

        $r32 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$200(org.apache.jena.riot.writer.TurtleShell)>($r32);

        goto label4;

     label3:
        $r11 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$300(org.apache.jena.riot.writer.TurtleShell,int)>($r11, 2);

     label4:
        $r12 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r13 = $r12.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r13.<org.apache.jena.atlas.io.IndentedWriter: void incIndent(int)>(8);

        $r14 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r15 = $r14.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r15.<org.apache.jena.atlas.io.IndentedWriter: void pad()>();

        $r17 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r16 = <org.apache.jena.riot.writer.WriterConst: com.hp.hpl.jena.graph.Node RDF_First>;

        virtualinvoke $r17.<org.apache.jena.riot.writer.TurtleShell: void writeNode(com.hp.hpl.jena.graph.Node)>($r16);

        $r18 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$400(org.apache.jena.riot.writer.TurtleShell,java.lang.String)>($r18, " ");

        $r19 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r20 = interfaceinvoke $r35.<java.util.List: java.lang.Object get(int)>(0);

        $r21 = (com.hp.hpl.jena.graph.Node) $r20;

        virtualinvoke $r19.<org.apache.jena.riot.writer.TurtleShell: void writeNode(com.hp.hpl.jena.graph.Node)>($r21);

        $r22 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$400(org.apache.jena.riot.writer.TurtleShell,java.lang.String)>($r22, " ;");

        $r23 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$200(org.apache.jena.riot.writer.TurtleShell)>($r23);

        $r25 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r24 = <org.apache.jena.riot.writer.WriterConst: com.hp.hpl.jena.graph.Node RDF_Rest>;

        virtualinvoke $r25.<org.apache.jena.riot.writer.TurtleShell: void writeNode(com.hp.hpl.jena.graph.Node)>($r24);

        $r26 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$400(org.apache.jena.riot.writer.TurtleShell,java.lang.String)>($r26, "  ");

        $i1 = interfaceinvoke $r35.<java.util.List: int size()>();

        $r27 = interfaceinvoke $r35.<java.util.List: java.util.List subList(int,int)>(1, $i1);

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void list(java.util.List)>($r27);

        $r28 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$400(org.apache.jena.riot.writer.TurtleShell,java.lang.String)>($r28, " .");

        $r29 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r30 = $r29.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r30.<org.apache.jena.atlas.io.IndentedWriter: void decIndent(int)>(8);

        $r31 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$200(org.apache.jena.riot.writer.TurtleShell)>($r31);

        goto label1;

     label5:
        return z1;
    }

    private boolean writeFreeLists(boolean)
    {
        com.hp.hpl.jena.graph.Node r5, $r10, $r15, $r17;
        java.util.Map $r1, $r6;
        int $i0;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r0;
        boolean $z0, z1;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.jena.atlas.io.IndentedWriter $r9, $r22, $r24;
        java.util.List $r20, $r25;
        org.apache.jena.riot.writer.TurtleShell $r8, $r11, $r12, $r13, $r16, $r18, $r19, $r21, $r23;
        java.lang.Object $r4, $r7, $r14;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        z1 := @parameter0: boolean;

        $r1 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Map freeLists>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.graph.Node) $r4;

        if z1 == 0 goto label2;

        $r23 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r24 = $r23.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r24.<org.apache.jena.atlas.io.IndentedWriter: void println()>();

     label2:
        z1 = 1;

        $r6 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Map freeLists>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        $r25 = (java.util.List) $r7;

        $r8 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r9 = $r8.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r9.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>("[ ");

        $r11 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r10 = <org.apache.jena.riot.writer.WriterConst: com.hp.hpl.jena.graph.Node RDF_First>;

        virtualinvoke $r11.<org.apache.jena.riot.writer.TurtleShell: void writeNode(com.hp.hpl.jena.graph.Node)>($r10);

        $r12 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$400(org.apache.jena.riot.writer.TurtleShell,java.lang.String)>($r12, " ");

        $r13 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r14 = interfaceinvoke $r25.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = (com.hp.hpl.jena.graph.Node) $r14;

        virtualinvoke $r13.<org.apache.jena.riot.writer.TurtleShell: void writeNode(com.hp.hpl.jena.graph.Node)>($r15);

        $r16 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$400(org.apache.jena.riot.writer.TurtleShell,java.lang.String)>($r16, " ; ");

        $r18 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r17 = <org.apache.jena.riot.writer.WriterConst: com.hp.hpl.jena.graph.Node RDF_Rest>;

        virtualinvoke $r18.<org.apache.jena.riot.writer.TurtleShell: void writeNode(com.hp.hpl.jena.graph.Node)>($r17);

        $r19 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$400(org.apache.jena.riot.writer.TurtleShell,java.lang.String)>($r19, " ");

        $i0 = interfaceinvoke $r25.<java.util.List: int size()>();

        $r20 = interfaceinvoke $r25.<java.util.List: java.util.List subList(int,int)>(1, $i0);

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void list(java.util.List)>($r20);

        $r21 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r22 = $r21.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r22.<org.apache.jena.atlas.io.IndentedWriter: void println(java.lang.String)>(" ] .");

        goto label1;

     label3:
        return z1;
    }

    private boolean writeBySubject(java.util.Iterator)
    {
        com.hp.hpl.jena.graph.Node r2;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r3;
        com.hp.hpl.jena.graph.Graph $r7;
        boolean $z0, $z1, $z2, z3, $z4, $z5, z6, z7;
        java.util.Iterator r0;
        java.util.Collection $r5, $r8;
        java.util.Set $r4, $r6;
        org.apache.jena.atlas.io.IndentedWriter $r10, $r12;
        org.apache.jena.riot.writer.TurtleShell $r9, $r11;
        java.lang.Object $r1;

        r3 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        r0 := @parameter0: java.util.Iterator;

        z3 = 1;

        z7 = 1;

        z6 = 1;

     label1:
        $z4 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label6;

        $r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.hp.hpl.jena.graph.Node) $r1;

        $r4 = r3.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Set nestedObjects>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $r5 = r3.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Collection listElts>;

        $z1 = interfaceinvoke $r5.<java.util.Collection: boolean contains(java.lang.Object)>(r2);

        if $z1 == 0 goto label3;

        goto label1;

     label3:
        if z6 != 0 goto label4;

        $r11 = r3.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r12 = $r11.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r12.<org.apache.jena.atlas.io.IndentedWriter: void println()>();

     label4:
        z3 = 0;

        z7 = 0;

        z6 = 0;

        $r6 = r3.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Set freeBnodes>;

        $z2 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z2 == 0 goto label5;

        specialinvoke r3.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void nestedObject(com.hp.hpl.jena.graph.Node)>(r2);

        $r9 = r3.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r10 = $r9.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r10.<org.apache.jena.atlas.io.IndentedWriter: void println(java.lang.String)>(" .");

        goto label1;

     label5:
        $r7 = r3.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: com.hp.hpl.jena.graph.Graph graph>;

        $r8 = staticinvoke <org.apache.jena.riot.system.RiotLib: java.util.Collection triplesOfSubject(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node)>($r7, r2);

        specialinvoke r3.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void writeCluster(com.hp.hpl.jena.graph.Node,java.util.Collection)>(r2, $r8);

        goto label1;

     label6:
        if z7 != 0 goto label7;

        $z5 = 1;

        goto label8;

     label7:
        $z5 = 0;

     label8:
        return $z5;
    }

    private void writeCluster(com.hp.hpl.jena.graph.Node, java.util.Collection)
    {
        com.hp.hpl.jena.graph.Node r2;
        int $i0;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r1;
        boolean $z0;
        java.util.Collection r0;
        org.apache.jena.atlas.io.IndentedWriter $r5, $r8, $r10, $r12, $r16;
        org.apache.jena.riot.writer.TurtleShell $r3, $r4, $r6, $r7, $r9, $r11, $r13, $r14, $r15;

        r1 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0 := @parameter1: java.util.Collection;

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        virtualinvoke $r3.<org.apache.jena.riot.writer.TurtleShell: void writeNode(com.hp.hpl.jena.graph.Node)>(r2);

        $r4 = r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r5 = $r4.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        $i0 = virtualinvoke $r5.<org.apache.jena.atlas.io.IndentedWriter: int getCol()>();

        if $i0 <= 20 goto label2;

        $r15 = r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r16 = $r15.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r16.<org.apache.jena.atlas.io.IndentedWriter: void println()>();

        goto label3;

     label2:
        $r6 = r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$300(org.apache.jena.riot.writer.TurtleShell,int)>($r6, 2);

     label3:
        $r7 = r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r8 = $r7.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r8.<org.apache.jena.atlas.io.IndentedWriter: void incIndent(int)>(8);

        $r9 = r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r10 = $r9.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r10.<org.apache.jena.atlas.io.IndentedWriter: void pad()>();

        specialinvoke r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void writePredicateObjectList(java.util.Collection)>(r0);

        $r11 = r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r12 = $r11.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r12.<org.apache.jena.atlas.io.IndentedWriter: void decIndent(int)>(8);

        $r13 = r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$400(org.apache.jena.riot.writer.TurtleShell,java.lang.String)>($r13, " .");

        $r14 = r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$200(org.apache.jena.riot.writer.TurtleShell)>($r14);

        return;
    }

    private void writePredicateObjectList(java.util.Collection)
    {
        com.hp.hpl.jena.graph.Node r25, r26, r27, r28, r29;
        java.util.Map $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, $z8, z9, z10, z11, z12;
        java.util.Collection r1;
        java.util.Set $r3;
        java.util.List $r14, $r22;
        java.util.ArrayList $r10, $r11, $r12;
        org.apache.jena.riot.system.PrefixMap $r7;
        int $i0, $i1, $i2;
        java.lang.String $r6;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r0;
        java.util.Iterator $r8, $r15, $r16, $r19, $r23;
        org.apache.jena.riot.writer.TurtleShell $r4, $r5;
        java.lang.Object $r9, $r13, $r17, $r18, $r20, $r21, $r24;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        r1 := @parameter0: java.util.Collection;

        $r2 = specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Map groupByPredicates(java.util.Collection)>(r1);

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r7 = $r4.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.riot.system.PrefixMap prefixMap>;

        $r5 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r6 = $r5.<org.apache.jena.riot.writer.TurtleShell: java.lang.String baseURI>;

        $i0 = staticinvoke <org.apache.jena.riot.system.RiotLib: int calcWidth(org.apache.jena.riot.system.PrefixMap,java.lang.String,java.util.Collection,int,int)>($r7, $r6, $r3, 4, 30);

        z6 = 1;

        z12 = 1;

        z11 = 1;

        z10 = 1;

        z9 = 1;

        $z0 = <org.apache.jena.riot.writer.WriterConst: boolean OBJECT_LISTS>;

        if $z0 != 0 goto label05;

        $r19 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z4 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label04;

        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r25 = (com.hp.hpl.jena.graph.Node) $r20;

        $r21 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r25);

        $r22 = (java.util.List) $r21;

        $r23 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z5 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label03;

        $r24 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r26 = (com.hp.hpl.jena.graph.Node) $r24;

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void writePredicateObject(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,int,boolean)>(r25, r26, $i0, z10);

        z6 = 0;

        z10 = 0;

        goto label02;

     label03:
        goto label01;

     label04:
        return;

     label05:
        $r8 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label15;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r27 = (com.hp.hpl.jena.graph.Node) $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        $r13 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r27);

        $r14 = (java.util.List) $r13;

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z7 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label10;

        $r18 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r28 = (com.hp.hpl.jena.graph.Node) $r18;

        $z2 = virtualinvoke r28.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label08;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r28);

        goto label07;

     label08:
        $z3 = specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: boolean isPrettyNode(com.hp.hpl.jena.graph.Node)>(r28);

        if $z3 == 0 goto label09;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r28);

        goto label07;

     label09:
        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r28);

        goto label07;

     label10:
        $i1 = interfaceinvoke $r10.<java.util.List: int size()>();

        if $i1 == 0 goto label11;

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void writePredicateObjectList(com.hp.hpl.jena.graph.Node,java.util.List,int,boolean)>(r27, $r10, $i0, z9);

        z6 = 0;

        z12 = 0;

        z11 = 0;

        z9 = 0;

     label11:
        $i2 = interfaceinvoke $r11.<java.util.List: int size()>();

        if $i2 == 0 goto label12;

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void writePredicateObjectList(com.hp.hpl.jena.graph.Node,java.util.List,int,boolean)>(r27, $r11, $i0, z11);

        z6 = 0;

        z12 = 0;

        z11 = 0;

        z9 = 0;

     label12:
        $r16 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z8 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label14;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r29 = (com.hp.hpl.jena.graph.Node) $r17;

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void writePredicateObject(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,int,boolean)>(r27, r29, $i0, z12);

        z6 = 0;

        z12 = 0;

        z11 = 0;

        z9 = 0;

        goto label13;

     label14:
        goto label06;

     label15:
        return;
    }

    private void writePredicateObject(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, int, boolean)
    {
        com.hp.hpl.jena.graph.Node r1, r4;
        org.apache.jena.atlas.io.IndentedWriter $r3, $r6;
        int i0;
        org.apache.jena.riot.writer.TurtleShell $r2, $r5;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r0;
        boolean z0;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: com.hp.hpl.jena.graph.Node;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void writePredicate(com.hp.hpl.jena.graph.Node,int,boolean)>(r1, i0, z0);

        $r2 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r3 = $r2.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r3.<org.apache.jena.atlas.io.IndentedWriter: void incIndent(int)>(8);

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void writeNodePretty(com.hp.hpl.jena.graph.Node)>(r4);

        $r5 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r6 = $r5.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r6.<org.apache.jena.atlas.io.IndentedWriter: void decIndent(int)>(8);

        return;
    }

    private void writePredicateObjectList(com.hp.hpl.jena.graph.Node, java.util.List, int, boolean)
    {
        com.hp.hpl.jena.graph.Node r1, r9;
        int i0;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r0;
        boolean z0, $z1, z2;
        java.util.Iterator $r5;
        org.apache.jena.atlas.io.IndentedWriter $r3, $r7, $r12;
        java.util.List r4;
        org.apache.jena.riot.writer.TurtleShell $r2, $r6, $r10, $r11;
        java.lang.Object $r8;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void writePredicate(com.hp.hpl.jena.graph.Node,int,boolean)>(r1, i0, z0);

        $r2 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r3 = $r2.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r3.<org.apache.jena.atlas.io.IndentedWriter: void incIndent(int)>(8);

        z2 = 1;

        $r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.graph.Node) $r8;

        if z2 != 0 goto label2;

        $r11 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r12 = $r11.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r12.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(" , ");

        goto label3;

     label2:
        z2 = 0;

     label3:
        $r10 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        virtualinvoke $r10.<org.apache.jena.riot.writer.TurtleShell: void writeNode(com.hp.hpl.jena.graph.Node)>(r9);

        goto label1;

     label4:
        $r6 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r7 = $r6.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r7.<org.apache.jena.atlas.io.IndentedWriter: void decIndent(int)>(8);

        return;
    }

    private void writePredicate(com.hp.hpl.jena.graph.Node, int, boolean)
    {
        com.hp.hpl.jena.graph.Node r8, $r14;
        org.apache.jena.riot.system.PrefixMap $r7;
        int $i0, i1, $i2, $i3;
        java.lang.String $r6;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r0;
        boolean $z0, $z1, z2;
        org.apache.jena.atlas.io.IndentedWriter $r4, $r11, $r17;
        org.apache.jena.riot.writer.TurtleShell $r1, $r2, $r3, $r5, $r9, $r10, $r12, $r13, $r15, $r16;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        r8 := @parameter0: com.hp.hpl.jena.graph.Node;

        i1 := @parameter1: int;

        z2 := @parameter2: boolean;

        if z2 == 0 goto label1;

        goto label2;

     label1:
        $r1 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$400(org.apache.jena.riot.writer.TurtleShell,java.lang.String)>($r1, " ;");

        $r2 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$200(org.apache.jena.riot.writer.TurtleShell)>($r2);

     label2:
        $r3 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r4 = $r3.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        $i0 = virtualinvoke $r4.<org.apache.jena.atlas.io.IndentedWriter: int getAbsoluteIndent()>();

        $r5 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r7 = $r5.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.riot.system.PrefixMap prefixMap>;

        $r6 = <org.apache.jena.riot.writer.WriterConst: java.lang.String rdfNS>;

        $z0 = interfaceinvoke $r7.<org.apache.jena.riot.system.PrefixMap: boolean contains(java.lang.String)>($r6);

        if $z0 != 0 goto label3;

        $r14 = <org.apache.jena.riot.writer.WriterConst: com.hp.hpl.jena.graph.Node RDF_type>;

        $z1 = virtualinvoke $r14.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r8);

        if $z1 == 0 goto label3;

        $r15 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$400(org.apache.jena.riot.writer.TurtleShell,java.lang.String)>($r15, "a");

        goto label4;

     label3:
        $r9 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        virtualinvoke $r9.<org.apache.jena.riot.writer.TurtleShell: void writeNode(com.hp.hpl.jena.graph.Node)>(r8);

     label4:
        $r16 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r17 = $r16.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        $i2 = virtualinvoke $r17.<org.apache.jena.atlas.io.IndentedWriter: int getCol()>();

        $i3 = $i2 - $i0;

        if $i3 <= 30 goto label5;

        $r13 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$200(org.apache.jena.riot.writer.TurtleShell)>($r13);

        goto label6;

     label5:
        $r10 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r11 = $r10.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r11.<org.apache.jena.atlas.io.IndentedWriter: void pad(int)>(i1);

        $r12 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$300(org.apache.jena.riot.writer.TurtleShell,int)>($r12, 2);

     label6:
        return;
    }

    private java.util.Map groupByPredicates(java.util.Collection)
    {
        java.util.Iterator $r3;
        java.util.Collection r2;
        com.hp.hpl.jena.graph.Node $r6, $r9;
        com.hp.hpl.jena.graph.Triple r5;
        java.util.ArrayList $r10;
        java.util.List $r8;
        java.util.TreeMap $r0;
        java.lang.Object $r4, $r7;
        java.util.Comparator $r1;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r11;
        boolean $z0, $z1;

        r11 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        r2 := @parameter0: java.util.Collection;

        $r0 = new java.util.TreeMap;

        $r1 = staticinvoke <org.apache.jena.riot.writer.TurtleShell: java.util.Comparator access$500()>();

        specialinvoke $r0.<java.util.TreeMap: void <init>(java.util.Comparator)>($r1);

        $r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.graph.Triple) $r4;

        $r6 = virtualinvoke r5.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z1 = interfaceinvoke $r0.<java.util.SortedMap: boolean containsKey(java.lang.Object)>($r6);

        if $z1 != 0 goto label2;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r10);

     label2:
        $r7 = interfaceinvoke $r0.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>($r6);

        $r8 = (java.util.List) $r7;

        $r9 = virtualinvoke r5.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label3:
        return $r0;
    }

    private int countPredicates(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        com.hp.hpl.jena.graph.Node $r5;
        com.hp.hpl.jena.graph.Triple r4;
        java.util.HashSet $r0;
        int $i0;
        java.lang.Object $r3;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r6;
        boolean $z0;

        r6 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        r1 := @parameter0: java.util.Collection;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.graph.Triple) $r3;

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        return $i0;
    }

    private void nestedObject(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1;
        int $i0, $i1, $i2;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r0;
        com.hp.hpl.jena.graph.Graph $r2;
        boolean $z0;
        java.util.Collection $r3;
        org.apache.jena.atlas.io.IndentedWriter $r5, $r7, $r9, $r12, $r14, $r18, $r21, $r23;
        org.apache.jena.riot.writer.TurtleShell $r4, $r6, $r8, $r10, $r11, $r13, $r15, $r16, $r17, $r19, $r20, $r22, $r24, $r25;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: com.hp.hpl.jena.graph.Graph graph>;

        $r3 = staticinvoke <org.apache.jena.riot.system.RiotLib: java.util.Collection triplesOfSubject(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node)>($r2, r1);

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r25 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$400(org.apache.jena.riot.writer.TurtleShell,java.lang.String)>($r25, "[] ");

        return;

     label1:
        $i0 = specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: int countPredicates(java.util.Collection)>($r3);

        if $i0 != 1 goto label2;

        $r19 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$400(org.apache.jena.riot.writer.TurtleShell,java.lang.String)>($r19, "[ ");

        $r20 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r21 = $r20.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r21.<org.apache.jena.atlas.io.IndentedWriter: void incIndent(int)>(2);

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void writePredicateObjectList(java.util.Collection)>($r3);

        $r22 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r23 = $r22.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r23.<org.apache.jena.atlas.io.IndentedWriter: void decIndent(int)>(2);

        $r24 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$400(org.apache.jena.riot.writer.TurtleShell,java.lang.String)>($r24, " ]");

        return;

     label2:
        $r4 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r5 = $r4.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        $i1 = virtualinvoke $r5.<org.apache.jena.atlas.io.IndentedWriter: int getAbsoluteIndent()>();

        $r6 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r7 = $r6.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        $i2 = virtualinvoke $r7.<org.apache.jena.atlas.io.IndentedWriter: int getCol()>();

        $r8 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r9 = $r8.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r9.<org.apache.jena.atlas.io.IndentedWriter: void setAbsoluteIndent(int)>($i2);

        $r10 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$400(org.apache.jena.riot.writer.TurtleShell,java.lang.String)>($r10, "[ ");

        $r11 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r12 = $r11.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r12.<org.apache.jena.atlas.io.IndentedWriter: void incIndent(int)>(2);

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void writePredicateObjectList(java.util.Collection)>($r3);

        $r13 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r14 = $r13.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r14.<org.apache.jena.atlas.io.IndentedWriter: void decIndent(int)>(2);

        $r15 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$200(org.apache.jena.riot.writer.TurtleShell)>($r15);

        $r16 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        staticinvoke <org.apache.jena.riot.writer.TurtleShell: void access$400(org.apache.jena.riot.writer.TurtleShell,java.lang.String)>($r16, "]");

        $r17 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r18 = $r17.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r18.<org.apache.jena.atlas.io.IndentedWriter: void setAbsoluteIndent(int)>($i1);

        return;
    }

    private void list(java.util.List)
    {
        java.util.Iterator $r4;
        com.hp.hpl.jena.graph.Node r8;
        org.apache.jena.atlas.io.IndentedWriter $r3, $r6, $r10, $r12;
        java.util.List r0;
        int $i0;
        org.apache.jena.riot.writer.TurtleShell $r2, $r5, $r9, $r11;
        java.lang.Object $r7;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r1;
        boolean $z0;

        r1 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r11 = r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r12 = $r11.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r12.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>("()");

        return;

     label1:
        $r2 = r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r3 = $r2.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r3.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>("(");

        $r4 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Node) $r7;

        $r9 = r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r10 = $r9.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r10.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(" ");

        specialinvoke r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void writeNodePretty(com.hp.hpl.jena.graph.Node)>(r8);

        goto label2;

     label3:
        $r5 = r1.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r6 = $r5.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r6.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(" )");

        return;
    }

    private boolean isPrettyNode(com.hp.hpl.jena.graph.Node)
    {
        java.util.Set $r3;
        com.hp.hpl.jena.graph.Node r1, $r4;
        java.util.Map $r2;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Map lists>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Set nestedObjects>;

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r4 = <org.apache.jena.riot.writer.WriterConst: com.hp.hpl.jena.graph.Node RDF_Nil>;

        $z2 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private void writeNodePretty(com.hp.hpl.jena.graph.Node)
    {
        java.util.Set $r3;
        com.hp.hpl.jena.graph.Node r1, $r4;
        org.apache.jena.atlas.io.IndentedWriter $r7;
        java.util.List $r10;
        java.util.Map $r2, $r8;
        org.apache.jena.riot.writer.TurtleShell $r5, $r6;
        java.lang.Object $r9;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Map lists>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Map lists>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (java.util.List) $r9;

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void list(java.util.List)>($r10);

        goto label4;

     label1:
        $r3 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: java.util.Set nestedObjects>;

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void nestedObject(com.hp.hpl.jena.graph.Node)>(r1);

        goto label4;

     label2:
        $r4 = <org.apache.jena.riot.writer.WriterConst: com.hp.hpl.jena.graph.Node RDF_Nil>;

        $z2 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        $r6 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        $r7 = $r6.<org.apache.jena.riot.writer.TurtleShell: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r7.<org.apache.jena.atlas.io.IndentedWriter: void println(java.lang.String)>("()");

        goto label4;

     label3:
        $r5 = r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: org.apache.jena.riot.writer.TurtleShell this$0>;

        virtualinvoke $r5.<org.apache.jena.riot.writer.TurtleShell: void writeNode(com.hp.hpl.jena.graph.Node)>(r1);

     label4:
        return;
    }

    void <init>(org.apache.jena.riot.writer.TurtleShell, com.hp.hpl.jena.graph.Graph, org.apache.jena.riot.writer.TurtleShell$1)
    {
        org.apache.jena.riot.writer.TurtleShell$1 r3;
        org.apache.jena.riot.writer.TurtleShell r1;
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r0;
        com.hp.hpl.jena.graph.Graph r2;

        r0 := @this: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        r1 := @parameter0: org.apache.jena.riot.writer.TurtleShell;

        r2 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r3 := @parameter2: org.apache.jena.riot.writer.TurtleShell$1;

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void <init>(org.apache.jena.riot.writer.TurtleShell,com.hp.hpl.jena.graph.Graph)>(r1, r2);

        return;
    }

    static void access$100(org.apache.jena.riot.writer.TurtleShell$ShellGraph)
    {
        org.apache.jena.riot.writer.TurtleShell$ShellGraph r0;

        r0 := @parameter0: org.apache.jena.riot.writer.TurtleShell$ShellGraph;

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell$ShellGraph: void writeGraph()>();

        return;
    }
}
