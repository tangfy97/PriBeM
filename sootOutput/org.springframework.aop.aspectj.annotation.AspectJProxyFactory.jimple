public class org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory extends org.springframework.aop.framework.ProxyCreatorSupport
{
    private static final java.util.Map aspectCache;
    private final org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory aspectFactory;

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: java.util.Map aspectCache> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory $r1;
        org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory r0;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory;

        specialinvoke r0.<org.springframework.aop.framework.ProxyCreatorSupport: void <init>()>();

        $r1 = new org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory;

        specialinvoke $r1.<org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: void <init>()>();

        r0.<org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory aspectFactory> = $r1;

        return;
    }

    public void <init>(java.lang.Object)
    {
        java.lang.Class[] $r3;
        java.lang.Object r2;
        org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory $r1;
        org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory r0;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory;

        r2 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.springframework.aop.framework.ProxyCreatorSupport: void <init>()>();

        $r1 = new org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory;

        specialinvoke $r1.<org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: void <init>()>();

        r0.<org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory aspectFactory> = $r1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "Target object must not be null");

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfaces(java.lang.Object)>(r2);

        virtualinvoke r0.<org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: void setInterfaces(java.lang.Class[])>($r3);

        virtualinvoke r0.<org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: void setTarget(java.lang.Object)>(r2);

        return;
    }

    public void <init>(java.lang.Class[])
    {
        java.lang.Class[] r2;
        org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory $r1;
        org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory r0;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory;

        r2 := @parameter0: java.lang.Class[];

        specialinvoke r0.<org.springframework.aop.framework.ProxyCreatorSupport: void <init>()>();

        $r1 = new org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory;

        specialinvoke $r1.<org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: void <init>()>();

        r0.<org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory aspectFactory> = $r1;

        virtualinvoke r0.<org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: void setInterfaces(java.lang.Class[])>(r2);

        return;
    }

    public void addAspect(java.lang.Object)
    {
        org.aspectj.lang.reflect.AjType $r5;
        java.lang.String $r2, $r12, $r15;
        org.aspectj.lang.reflect.PerClause $r6;
        org.springframework.aop.aspectj.'annotation'.SingletonMetadataAwareAspectInstanceFactory $r9;
        org.springframework.aop.aspectj.'annotation'.AspectMetadata $r4;
        org.aspectj.lang.reflect.PerClauseKind $r7, $r8;
        java.lang.IllegalArgumentException $r10;
        org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory r3;
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.StringBuilder $r11, $r13, $r14;

        r3 := @this: org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = specialinvoke r3.<org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: org.springframework.aop.aspectj.'annotation'.AspectMetadata createAspectMetadata(java.lang.Class,java.lang.String)>($r1, $r2);

        $r5 = virtualinvoke $r4.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: org.aspectj.lang.reflect.AjType getAjType()>();

        $r6 = interfaceinvoke $r5.<org.aspectj.lang.reflect.AjType: org.aspectj.lang.reflect.PerClause getPerClause()>();

        $r7 = interfaceinvoke $r6.<org.aspectj.lang.reflect.PerClause: org.aspectj.lang.reflect.PerClauseKind getKind()>();

        $r8 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind SINGLETON>;

        if $r7 == $r8 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Aspect class [");

        $r12 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does not define a singleton aspect");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label1:
        $r9 = new org.springframework.aop.aspectj.'annotation'.SingletonMetadataAwareAspectInstanceFactory;

        specialinvoke $r9.<org.springframework.aop.aspectj.'annotation'.SingletonMetadataAwareAspectInstanceFactory: void <init>(java.lang.Object,java.lang.String)>(r0, $r2);

        specialinvoke r3.<org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: void addAdvisorsFromAspectInstanceFactory(org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory)>($r9);

        return;
    }

    public void addAspect(java.lang.Class)
    {
        org.springframework.aop.aspectj.'annotation'.AspectMetadata $r3;
        org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory $r4;
        java.lang.Class r0;
        java.lang.String $r1;
        org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory r2;

        r2 := @this: org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r3 = specialinvoke r2.<org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: org.springframework.aop.aspectj.'annotation'.AspectMetadata createAspectMetadata(java.lang.Class,java.lang.String)>(r0, $r1);

        $r4 = specialinvoke r2.<org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory createAspectInstanceFactory(org.springframework.aop.aspectj.'annotation'.AspectMetadata,java.lang.Class,java.lang.String)>($r3, r0, $r1);

        specialinvoke r2.<org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: void addAdvisorsFromAspectInstanceFactory(org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory)>($r4);

        return;
    }

    private void addAdvisorsFromAspectInstanceFactory(org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory)
    {
        org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory r1;
        java.util.List $r3, $r5;
        org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory $r2;
        java.lang.Class $r4;
        org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory r0;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory;

        r1 := @parameter0: org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory;

        $r2 = r0.<org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory aspectFactory>;

        $r3 = interfaceinvoke $r2.<org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory: java.util.List getAdvisors(org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory)>(r1);

        $r4 = virtualinvoke r0.<org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: java.lang.Class getTargetClass()>();

        $r5 = staticinvoke <org.springframework.aop.support.AopUtils: java.util.List findAdvisorsThatCanApply(java.util.List,java.lang.Class)>($r3, $r4);

        staticinvoke <org.springframework.aop.aspectj.AspectJProxyUtils: boolean makeAdvisorChainAspectJCapableIfNecessary(java.util.List)>($r5);

        staticinvoke <org.springframework.core.OrderComparator: void sort(java.util.List)>($r5);

        virtualinvoke r0.<org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: void addAdvisors(java.util.Collection)>($r5);

        return;
    }

    private org.springframework.aop.aspectj.'annotation'.AspectMetadata createAspectMetadata(java.lang.Class, java.lang.String)
    {
        org.springframework.aop.aspectj.'annotation'.AspectMetadata $r0;
        org.aspectj.lang.reflect.AjType $r3;
        java.lang.IllegalArgumentException $r4;
        org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory r10;
        java.lang.Class r1;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String r2, $r6, $r9;
        boolean $z0;

        r10 := @this: org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.springframework.aop.aspectj.'annotation'.AspectMetadata;

        specialinvoke $r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: void <init>(java.lang.Class,java.lang.String)>(r1, r2);

        $r3 = virtualinvoke $r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: org.aspectj.lang.reflect.AjType getAjType()>();

        $z0 = interfaceinvoke $r3.<org.aspectj.lang.reflect.AjType: boolean isAspect()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Class [");

        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a valid aspect type");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        return $r0;
    }

    private org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory createAspectInstanceFactory(org.springframework.aop.aspectj.'annotation'.AspectMetadata, java.lang.Class, java.lang.String)
    {
        org.springframework.aop.aspectj.'annotation'.AspectMetadata r0;
        org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory r11;
        org.springframework.aop.aspectj.'annotation'.SimpleMetadataAwareAspectInstanceFactory $r5;
        org.aspectj.lang.reflect.AjType $r1;
        org.aspectj.lang.reflect.PerClauseKind $r3, $r4;
        org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory r8;
        java.lang.Class r6;
        java.lang.Object $r9;
        org.aspectj.lang.reflect.PerClause $r2;
        java.lang.String r7;
        org.springframework.aop.aspectj.'annotation'.SingletonMetadataAwareAspectInstanceFactory $r10;

        r8 := @this: org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory;

        r0 := @parameter0: org.springframework.aop.aspectj.'annotation'.AspectMetadata;

        r6 := @parameter1: java.lang.Class;

        r7 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: org.aspectj.lang.reflect.AjType getAjType()>();

        $r2 = interfaceinvoke $r1.<org.aspectj.lang.reflect.AjType: org.aspectj.lang.reflect.PerClause getPerClause()>();

        $r3 = interfaceinvoke $r2.<org.aspectj.lang.reflect.PerClause: org.aspectj.lang.reflect.PerClauseKind getKind()>();

        $r4 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind SINGLETON>;

        if $r3 != $r4 goto label1;

        $r9 = specialinvoke r8.<org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: java.lang.Object getSingletonAspectInstance(java.lang.Class)>(r6);

        $r10 = new org.springframework.aop.aspectj.'annotation'.SingletonMetadataAwareAspectInstanceFactory;

        specialinvoke $r10.<org.springframework.aop.aspectj.'annotation'.SingletonMetadataAwareAspectInstanceFactory: void <init>(java.lang.Object,java.lang.String)>($r9, r7);

        r11 = $r10;

        goto label2;

     label1:
        $r5 = new org.springframework.aop.aspectj.'annotation'.SimpleMetadataAwareAspectInstanceFactory;

        specialinvoke $r5.<org.springframework.aop.aspectj.'annotation'.SimpleMetadataAwareAspectInstanceFactory: void <init>(java.lang.Class,java.lang.String)>(r6, r7);

        r11 = $r5;

     label2:
        return r11;
    }

    private java.lang.Object getSingletonAspectInstance(java.lang.Class)
    {
        java.lang.Throwable $r6;
        org.springframework.aop.framework.AopConfigException $r8, $r15;
        java.util.Map $r0, $r2, $r5;
        java.lang.InstantiationException $r14;
        java.lang.String $r10, $r13, $r17, $r20;
        java.lang.IllegalAccessException $r7;
        org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory r21;
        java.lang.Class r1;
        java.lang.Object $r3, $r4;
        java.lang.StringBuilder $r9, $r11, $r12, $r16, $r18, $r19;

        r21 := @this: org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory;

        r1 := @parameter0: java.lang.Class;

        $r0 = <org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: java.util.Map aspectCache>;

        entermonitor $r0;

     label1:
        $r2 = <org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: java.util.Map aspectCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label3;

        exitmonitor $r0;

     label2:
        return $r3;

     label3:
        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.Object newInstance()>();

        $r5 = <org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: java.util.Map aspectCache>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label4:
        exitmonitor $r0;

     label5:
        return $r4;

     label6:
        $r14 := @caughtexception;

        $r15 = new org.springframework.aop.framework.AopConfigException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to instantiate aspect class [");

        $r17 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.springframework.aop.framework.AopConfigException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r14);

        throw $r15;

     label7:
        $r7 := @caughtexception;

        $r8 = new org.springframework.aop.framework.AopConfigException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot access aspect class [");

        $r10 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.aop.framework.AopConfigException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r7);

        throw $r8;

     label8:
        $r6 := @caughtexception;

        exitmonitor $r0;

     label9:
        throw $r6;

        catch java.lang.InstantiationException from label3 to label4 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label7;
        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label5 with label8;
        catch java.lang.Throwable from label6 to label9 with label8;
    }

    public java.lang.Object getProxy()
    {
        org.springframework.aop.framework.AopProxy $r1;
        java.lang.Object $r2;
        org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory r0;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory;

        $r1 = virtualinvoke r0.<org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: org.springframework.aop.framework.AopProxy createAopProxy()>();

        $r2 = interfaceinvoke $r1.<org.springframework.aop.framework.AopProxy: java.lang.Object getProxy()>();

        return $r2;
    }

    public java.lang.Object getProxy(java.lang.ClassLoader)
    {
        org.springframework.aop.framework.AopProxy $r1;
        java.lang.Object $r3;
        java.lang.ClassLoader r2;
        org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory r0;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory;

        r2 := @parameter0: java.lang.ClassLoader;

        $r1 = virtualinvoke r0.<org.springframework.aop.aspectj.'annotation'.AspectJProxyFactory: org.springframework.aop.framework.AopProxy createAopProxy()>();

        $r3 = interfaceinvoke $r1.<org.springframework.aop.framework.AopProxy: java.lang.Object getProxy(java.lang.ClassLoader)>(r2);

        return $r3;
    }
}
