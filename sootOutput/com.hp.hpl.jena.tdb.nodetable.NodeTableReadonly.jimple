public class com.hp.hpl.jena.tdb.nodetable.NodeTableReadonly extends com.hp.hpl.jena.tdb.nodetable.NodeTableWrapper
{

    public void <init>(com.hp.hpl.jena.tdb.nodetable.NodeTable)
    {
        com.hp.hpl.jena.tdb.nodetable.NodeTableReadonly r0;
        com.hp.hpl.jena.tdb.nodetable.NodeTable r1;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTableReadonly;

        r1 := @parameter0: com.hp.hpl.jena.tdb.nodetable.NodeTable;

        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTableWrapper: void <init>(com.hp.hpl.jena.tdb.nodetable.NodeTable)>(r1);

        return;
    }

    public com.hp.hpl.jena.tdb.store.NodeId getAllocateNodeId(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.nodetable.NodeTableReadonly r0;
        com.hp.hpl.jena.tdb.TDBException $r3;
        com.hp.hpl.jena.tdb.store.NodeId $r2;
        com.hp.hpl.jena.graph.Node r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTableReadonly;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTableReadonly: com.hp.hpl.jena.tdb.store.NodeId getNodeIdForNode(com.hp.hpl.jena.graph.Node)>(r1);

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.store.NodeId: boolean isDoesNotExist(com.hp.hpl.jena.tdb.store.NodeId)>($r2);

        if $z0 == 0 goto label1;

        $r3 = new com.hp.hpl.jena.tdb.TDBException;

        specialinvoke $r3.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>("Allocation attempt on NodeTableReadonly");

        throw $r3;

     label1:
        return $r2;
    }
}
