public class org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler extends org.springframework.jmx.export.assembler.AbstractConfigurableMBeanInfoAssembler implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean
{
    private java.lang.Class[] managedInterfaces;
    private java.util.Properties interfaceMappings;
    private java.lang.ClassLoader beanClassLoader;
    private java.util.Map resolvedInterfaceMappings;

    public void <init>()
    {
        org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler r0;
        java.lang.ClassLoader $r1;

        r0 := @this: org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler;

        specialinvoke r0.<org.springframework.jmx.export.assembler.AbstractConfigurableMBeanInfoAssembler: void <init>()>();

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        r0.<org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler: java.lang.ClassLoader beanClassLoader> = $r1;

        return;
    }

    public void setManagedInterfaces(java.lang.Class[])
    {
        java.lang.Class[] r0;
        java.lang.IllegalArgumentException $r3;
        int i0, i1;
        org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler r1;
        java.lang.Class r2;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8;
        boolean $z0;

        r1 := @this: org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler;

        r0 := @parameter0: java.lang.Class[];

        if r0 == null goto label4;

        i0 = lengthof r0;

        i1 = 0;

        goto label3;

     label1:
        r2 = r0[i1];

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Management interface [");

        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not an interface");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

     label4:
        r1.<org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler: java.lang.Class[] managedInterfaces> = r0;

        return;
    }

    public void setInterfaceMappings(java.util.Properties)
    {
        org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler r0;
        java.util.Properties r1;

        r0 := @this: org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler;

        r1 := @parameter0: java.util.Properties;

        r0.<org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler: java.util.Properties interfaceMappings> = r1;

        return;
    }

    public void setBeanClassLoader(java.lang.ClassLoader)
    {
        org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler r0;
        java.lang.ClassLoader r1;

        r0 := @this: org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler: java.lang.ClassLoader beanClassLoader> = r1;

        return;
    }

    public void afterPropertiesSet()
    {
        java.util.Properties $r1, $r2;
        java.util.Map $r3;
        org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler r0;

        r0 := @this: org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler;

        $r1 = r0.<org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler: java.util.Properties interfaceMappings>;

        if $r1 == null goto label1;

        $r2 = r0.<org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler: java.util.Properties interfaceMappings>;

        $r3 = specialinvoke r0.<org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler: java.util.Map resolveInterfaceMappings(java.util.Properties)>($r2);

        r0.<org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler: java.util.Map resolvedInterfaceMappings> = $r3;

     label1:
        return;
    }

    private java.util.Map resolveInterfaceMappings(java.util.Properties)
    {
        java.util.Properties r1;
        java.util.Enumeration $r2;
        java.lang.Class[] $r8;
        java.util.HashMap $r0;
        java.lang.String[] $r6;
        int $i0;
        java.lang.Object $r3;
        org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler r7;
        java.lang.String r4, $r5;
        boolean $z0;

        r7 := @this: org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler;

        r1 := @parameter0: java.util.Properties;

        $r0 = new java.util.HashMap;

        $i0 = virtualinvoke r1.<java.util.Properties: int size()>();

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>($i0);

        $r2 = virtualinvoke r1.<java.util.Properties: java.util.Enumeration propertyNames()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (java.lang.String) $r3;

        $r5 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r4);

        $r6 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] commaDelimitedListToStringArray(java.lang.String)>($r5);

        $r8 = specialinvoke r7.<org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler: java.lang.Class[] resolveClassNames(java.lang.String[],java.lang.String)>($r6, r4);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r8);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        return $r0;
    }

    private java.lang.Class[] resolveClassNames(java.lang.String[], java.lang.String)
    {
        java.lang.String[] r0;
        int $i0, $i1, i2;
        org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler r4;
        java.lang.String $r2, $r3, $r9, r12, $r15;
        boolean $z0;
        java.lang.Class[] r1;
        java.lang.IllegalArgumentException $r7;
        java.lang.Class $r6;
        java.lang.StringBuilder $r8, $r10, $r11, $r13, $r14;
        java.lang.ClassLoader $r5;

        r4 := @this: org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler;

        r0 := @parameter0: java.lang.String[];

        r12 := @parameter1: java.lang.String;

        $i0 = lengthof r0;

        r1 = newarray (java.lang.Class)[$i0];

        i2 = 0;

        goto label3;

     label1:
        $r2 = r0[i2];

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r5 = r4.<org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler: java.lang.ClassLoader beanClassLoader>;

        $r6 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class resolveClassName(java.lang.String,java.lang.ClassLoader)>($r3, $r5);

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Class [");

        $r9 = r0[i2];

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] mapped to bean key [");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is no interface");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r7;

     label2:
        r1[i2] = $r6;

        i2 = i2 + 1;

     label3:
        $i1 = lengthof r1;

        if i2 < $i1 goto label1;

        return r1;
    }

    protected boolean includeReadAttribute(java.lang.reflect.Method, java.lang.String)
    {
        org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler r0;
        java.lang.String r2;
        java.lang.reflect.Method r1;
        boolean $z0;

        r0 := @this: org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler: boolean isPublicInInterface(java.lang.reflect.Method,java.lang.String)>(r1, r2);

        return $z0;
    }

    protected boolean includeWriteAttribute(java.lang.reflect.Method, java.lang.String)
    {
        org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler r0;
        java.lang.String r2;
        java.lang.reflect.Method r1;
        boolean $z0;

        r0 := @this: org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler: boolean isPublicInInterface(java.lang.reflect.Method,java.lang.String)>(r1, r2);

        return $z0;
    }

    protected boolean includeOperation(java.lang.reflect.Method, java.lang.String)
    {
        org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler r0;
        java.lang.String r2;
        java.lang.reflect.Method r1;
        boolean $z0;

        r0 := @this: org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler: boolean isPublicInInterface(java.lang.reflect.Method,java.lang.String)>(r1, r2);

        return $z0;
    }

    private boolean isPublicInInterface(java.lang.reflect.Method, java.lang.String)
    {
        int $i0, $i1;
        org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler r1;
        java.lang.String r2;
        java.lang.reflect.Method r0;
        boolean $z0;

        r1 := @this: org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler;

        r0 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $i1 = $i0 & 1;

        if $i1 <= 0 goto label1;

        $z0 = specialinvoke r1.<org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler: boolean isDeclaredInInterface(java.lang.reflect.Method,java.lang.String)>(r0, r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isDeclaredInInterface(java.lang.reflect.Method, java.lang.String)
    {
        java.lang.reflect.Method[] $r4;
        java.util.Map $r1, $r13;
        int i0, i1, i2, i3;
        org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler r0;
        java.lang.String $r6, $r8, r12;
        java.lang.reflect.Method r5, r7;
        boolean $z0, $z1;
        java.lang.Class[] r2, $r9, $r10, r15;
        java.lang.Class r3, $r11;
        java.lang.Object $r14;

        r0 := @this: org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler;

        r7 := @parameter0: java.lang.reflect.Method;

        r12 := @parameter1: java.lang.String;

        r15 = (java.lang.Class[]) null;

        $r1 = r0.<org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler: java.util.Map resolvedInterfaceMappings>;

        if $r1 == null goto label1;

        $r13 = r0.<org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler: java.util.Map resolvedInterfaceMappings>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        r15 = (java.lang.Class[]) $r14;

     label1:
        if r15 != null goto label2;

        r15 = r0.<org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler: java.lang.Class[] managedInterfaces>;

        if r15 != null goto label2;

        $r11 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        r15 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfacesForClass(java.lang.Class)>($r11);

     label2:
        if r15 == null goto label8;

        r2 = r15;

        i0 = lengthof r15;

        i2 = 0;

        goto label7;

     label3:
        r3 = r2[i2];

        $r4 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i1 = lengthof $r4;

        i3 = 0;

        goto label6;

     label4:
        r5 = $r4[i3];

        $r6 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $r8 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label5;

        $r9 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r10 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r9, $r10);

        if $z1 == 0 goto label5;

        return 1;

     label5:
        i3 = i3 + 1;

     label6:
        if i3 < i1 goto label4;

        i2 = i2 + 1;

     label7:
        if i2 < i0 goto label3;

     label8:
        return 0;
    }
}
