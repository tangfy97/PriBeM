public class org.springframework.jmx.support.WebSphereMBeanServerFactoryBean extends java.lang.Object implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.InitializingBean
{
    private static final java.lang.String ADMIN_SERVICE_FACTORY_CLASS;
    private static final java.lang.String GET_MBEAN_FACTORY_METHOD;
    private static final java.lang.String GET_MBEAN_SERVER_METHOD;
    private javax.management.MBeanServer mbeanServer;

    public void <init>()
    {
        org.springframework.jmx.support.WebSphereMBeanServerFactoryBean r0;

        r0 := @this: org.springframework.jmx.support.WebSphereMBeanServerFactoryBean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void afterPropertiesSet() throws org.springframework.jmx.MBeanServerNotFoundException
    {
        java.lang.Throwable $r18;
        java.lang.Object[] $r6, $r11;
        org.springframework.jmx.MBeanServerNotFoundException $r15, $r17, $r20;
        javax.management.MBeanServer $r13;
        java.lang.reflect.Method $r5, $r10;
        java.lang.Class[] $r4, $r9;
        java.lang.Exception $r14;
        org.springframework.jmx.support.WebSphereMBeanServerFactoryBean r0;
        java.lang.reflect.InvocationTargetException $r16;
        java.lang.Class $r1, $r3, $r8;
        java.lang.Object $r7, $r12;
        java.lang.ClassNotFoundException $r19;
        java.lang.ClassLoader $r2;

        r0 := @this: org.springframework.jmx.support.WebSphereMBeanServerFactoryBean;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("com.ibm.websphere.management.AdminServiceFactory");

        $r4 = newarray (java.lang.Class)[0];

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getMBeanFactory", $r4);

        $r6 = newarray (java.lang.Object)[0];

        $r7 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r6);

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = newarray (java.lang.Class)[0];

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getMBeanServer", $r9);

        $r11 = newarray (java.lang.Object)[0];

        $r12 = virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r7, $r11);

        $r13 = (javax.management.MBeanServer) $r12;

        r0.<org.springframework.jmx.support.WebSphereMBeanServerFactoryBean: javax.management.MBeanServer mbeanServer> = $r13;

     label2:
        goto label6;

     label3:
        $r19 := @caughtexception;

        $r20 = new org.springframework.jmx.MBeanServerNotFoundException;

        specialinvoke $r20.<org.springframework.jmx.MBeanServerNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>("Could not find WebSphere\'s AdminServiceFactory class", $r19);

        throw $r20;

     label4:
        $r16 := @caughtexception;

        $r17 = new org.springframework.jmx.MBeanServerNotFoundException;

        $r18 = virtualinvoke $r16.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        specialinvoke $r17.<org.springframework.jmx.MBeanServerNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>("WebSphere\'s AdminServiceFactory.getMBeanFactory/getMBeanServer method failed", $r18);

        throw $r17;

     label5:
        $r14 := @caughtexception;

        $r15 = new org.springframework.jmx.MBeanServerNotFoundException;

        specialinvoke $r15.<org.springframework.jmx.MBeanServerNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>("Could not access WebSphere\'s AdminServiceFactory.getMBeanFactory/getMBeanServer method", $r14);

        throw $r15;

     label6:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label5;
    }

    public javax.management.MBeanServer getObject()
    {
        org.springframework.jmx.support.WebSphereMBeanServerFactoryBean r0;
        javax.management.MBeanServer $r1;

        r0 := @this: org.springframework.jmx.support.WebSphereMBeanServerFactoryBean;

        $r1 = r0.<org.springframework.jmx.support.WebSphereMBeanServerFactoryBean: javax.management.MBeanServer mbeanServer>;

        return $r1;
    }

    public java.lang.Class getObjectType()
    {
        javax.management.MBeanServer $r1, $r2;
        java.lang.Class $r3;
        org.springframework.jmx.support.WebSphereMBeanServerFactoryBean r0;

        r0 := @this: org.springframework.jmx.support.WebSphereMBeanServerFactoryBean;

        $r1 = r0.<org.springframework.jmx.support.WebSphereMBeanServerFactoryBean: javax.management.MBeanServer mbeanServer>;

        if $r1 == null goto label1;

        $r2 = r0.<org.springframework.jmx.support.WebSphereMBeanServerFactoryBean: javax.management.MBeanServer mbeanServer>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        goto label2;

     label1:
        $r3 = class "Ljavax/management/MBeanServer;";

     label2:
        return $r3;
    }

    public boolean isSingleton()
    {
        org.springframework.jmx.support.WebSphereMBeanServerFactoryBean r0;

        r0 := @this: org.springframework.jmx.support.WebSphereMBeanServerFactoryBean;

        return 1;
    }

    public volatile java.lang.Object getObject() throws java.lang.Exception
    {
        org.springframework.jmx.support.WebSphereMBeanServerFactoryBean r0;
        javax.management.MBeanServer $r1;

        r0 := @this: org.springframework.jmx.support.WebSphereMBeanServerFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.jmx.support.WebSphereMBeanServerFactoryBean: javax.management.MBeanServer getObject()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.springframework.jmx.support.WebSphereMBeanServerFactoryBean: java.lang.String GET_MBEAN_SERVER_METHOD> = "getMBeanServer";

        <org.springframework.jmx.support.WebSphereMBeanServerFactoryBean: java.lang.String GET_MBEAN_FACTORY_METHOD> = "getMBeanFactory";

        <org.springframework.jmx.support.WebSphereMBeanServerFactoryBean: java.lang.String ADMIN_SERVICE_FACTORY_CLASS> = "com.ibm.websphere.management.AdminServiceFactory";

        return;
    }
}
