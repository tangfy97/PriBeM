class com.google.inject.internal.InjectorShell$LoggerFactory extends java.lang.Object implements com.google.inject.internal.InternalFactory, com.google.inject.Provider
{

    private void <init>()
    {
        com.google.inject.internal.InjectorShell$LoggerFactory r0;

        r0 := @this: com.google.inject.internal.InjectorShell$LoggerFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.logging.Logger get(com.google.inject.internal.Errors, com.google.inject.internal.InternalContext, com.google.inject.spi.Dependency, boolean)
    {
        com.google.inject.internal.InternalContext r7;
        com.google.inject.spi.Dependency r0;
        java.lang.reflect.Member $r2;
        java.util.logging.Logger $r8;
        com.google.inject.internal.Errors r6;
        com.google.inject.spi.InjectionPoint $r1;
        com.google.inject.internal.InjectorShell$LoggerFactory r5;
        java.lang.Class $r3;
        java.lang.String $r4;
        boolean z0;

        r5 := @this: com.google.inject.internal.InjectorShell$LoggerFactory;

        r6 := @parameter0: com.google.inject.internal.Errors;

        r7 := @parameter1: com.google.inject.internal.InternalContext;

        r0 := @parameter2: com.google.inject.spi.Dependency;

        z0 := @parameter3: boolean;

        $r1 = virtualinvoke r0.<com.google.inject.spi.Dependency: com.google.inject.spi.InjectionPoint getInjectionPoint()>();

        if $r1 != null goto label1;

        $r8 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger()>();

        goto label2;

     label1:
        $r2 = virtualinvoke $r1.<com.google.inject.spi.InjectionPoint: java.lang.reflect.Member getMember()>();

        $r3 = interfaceinvoke $r2.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r8 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r4);

     label2:
        return $r8;
    }

    public java.util.logging.Logger get()
    {
        java.util.logging.Logger $r0;
        com.google.inject.internal.InjectorShell$LoggerFactory r1;

        r1 := @this: com.google.inject.internal.InjectorShell$LoggerFactory;

        $r0 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger()>();

        return $r0;
    }

    public java.lang.String toString()
    {
        com.google.inject.internal.InjectorShell$LoggerFactory r0;

        r0 := @this: com.google.inject.internal.InjectorShell$LoggerFactory;

        return "Provider<Logger>";
    }

    public volatile java.lang.Object get(com.google.inject.internal.Errors, com.google.inject.internal.InternalContext, com.google.inject.spi.Dependency, boolean) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.Errors r1;
        com.google.inject.internal.InjectorShell$LoggerFactory r0;
        com.google.inject.internal.InternalContext r2;
        com.google.inject.spi.Dependency r3;
        java.util.logging.Logger $r4;
        boolean z0;

        r0 := @this: com.google.inject.internal.InjectorShell$LoggerFactory;

        r1 := @parameter0: com.google.inject.internal.Errors;

        r2 := @parameter1: com.google.inject.internal.InternalContext;

        r3 := @parameter2: com.google.inject.spi.Dependency;

        z0 := @parameter3: boolean;

        $r4 = virtualinvoke r0.<com.google.inject.internal.InjectorShell$LoggerFactory: java.util.logging.Logger get(com.google.inject.internal.Errors,com.google.inject.internal.InternalContext,com.google.inject.spi.Dependency,boolean)>(r1, r2, r3, z0);

        return $r4;
    }

    public volatile java.lang.Object get()
    {
        java.util.logging.Logger $r1;
        com.google.inject.internal.InjectorShell$LoggerFactory r0;

        r0 := @this: com.google.inject.internal.InjectorShell$LoggerFactory;

        $r1 = virtualinvoke r0.<com.google.inject.internal.InjectorShell$LoggerFactory: java.util.logging.Logger get()>();

        return $r1;
    }

    void <init>(com.google.inject.internal.InjectorShell$1)
    {
        com.google.inject.internal.InjectorShell$1 r1;
        com.google.inject.internal.InjectorShell$LoggerFactory r0;

        r0 := @this: com.google.inject.internal.InjectorShell$LoggerFactory;

        r1 := @parameter0: com.google.inject.internal.InjectorShell$1;

        specialinvoke r0.<com.google.inject.internal.InjectorShell$LoggerFactory: void <init>()>();

        return;
    }
}
