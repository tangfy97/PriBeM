public class org.apache.log4j.net.JMSSink extends java.lang.Object implements javax.jms.MessageListener
{
    static org.apache.log4j.Logger logger;
    static java.lang.Class class$org$apache$log4j$net$JMSSink;

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        int $i0;
        java.lang.String $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1;
        java.io.PrintStream $r5, $r6;
        java.io.InputStreamReader $r3;
        org.apache.log4j.net.JMSSink $r1;
        java.io.BufferedReader $r2;
        java.io.InputStream $r4;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 == 5 goto label1;

        staticinvoke <org.apache.log4j.net.JMSSink: void usage(java.lang.String)>("Wrong number of arguments.");

     label1:
        $r7 = r0[0];

        $r8 = r0[1];

        $r9 = r0[2];

        $r10 = r0[3];

        $r11 = r0[4];

        $z0 = virtualinvoke $r11.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        if $z0 == 0 goto label2;

        staticinvoke <org.apache.log4j.xml.DOMConfigurator: void configure(java.lang.String)>($r11);

        goto label3;

     label2:
        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>($r11);

     label3:
        $r1 = new org.apache.log4j.net.JMSSink;

        specialinvoke $r1.<org.apache.log4j.net.JMSSink: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r7, $r8, $r9, $r10);

        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

        $r4 = <java.lang.System: java.io.InputStream in>;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r4);

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Type \"exit\" to quit JMSSink.");

     label4:
        $r12 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>();

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("exit");

        if $z1 == 0 goto label5;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("Exiting. Kill the application if it does not exit due to daemon threads.");

        return;

     label5:
        goto label4;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r17;
        javax.naming.NamingException $r15;
        org.apache.log4j.Logger $r14, $r16, $r18;
        javax.jms.TopicSession $r8;
        java.lang.String r2, r5, r6, r9;
        javax.jms.TopicSubscriber $r12;
        javax.naming.InitialContext $r19;
        javax.jms.Connection $r20;
        javax.jms.TopicConnection $r7;
        javax.jms.Topic r11;
        java.lang.RuntimeException $r13;
        javax.jms.MessageConsumer $r21;
        org.apache.log4j.net.JMSSink r0;
        java.lang.Object $r3, $r10;
        javax.jms.TopicConnectionFactory r4;

        r0 := @this: org.apache.log4j.net.JMSSink;

        r2 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r19 = new javax.naming.InitialContext;

        specialinvoke $r19.<javax.naming.InitialContext: void <init>()>();

        $r3 = staticinvoke <org.apache.log4j.net.JMSSink: java.lang.Object lookup(javax.naming.Context,java.lang.String)>($r19, r2);

        r4 = (javax.jms.TopicConnectionFactory) $r3;

        $r7 = interfaceinvoke r4.<javax.jms.TopicConnectionFactory: javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)>(r5, r6);

        $r20 = (javax.jms.Connection) $r7;

        interfaceinvoke $r20.<javax.jms.Connection: void start()>();

        $r8 = interfaceinvoke $r7.<javax.jms.TopicConnection: javax.jms.TopicSession createTopicSession(boolean,int)>(0, 1);

        $r10 = interfaceinvoke $r19.<javax.naming.Context: java.lang.Object lookup(java.lang.String)>(r9);

        r11 = (javax.jms.Topic) $r10;

        $r12 = interfaceinvoke $r8.<javax.jms.TopicSession: javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)>(r11);

        $r21 = (javax.jms.MessageConsumer) $r12;

        interfaceinvoke $r21.<javax.jms.MessageConsumer: void setMessageListener(javax.jms.MessageListener)>(r0);

     label2:
        goto label6;

     label3:
        $r17 := @caughtexception;

        $r18 = <org.apache.log4j.net.JMSSink: org.apache.log4j.Logger logger>;

        virtualinvoke $r18.<org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>("Could not read JMS message.", $r17);

        goto label6;

     label4:
        $r15 := @caughtexception;

        $r16 = <org.apache.log4j.net.JMSSink: org.apache.log4j.Logger logger>;

        virtualinvoke $r16.<org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>("Could not read JMS message.", $r15);

        goto label6;

     label5:
        $r13 := @caughtexception;

        $r14 = <org.apache.log4j.net.JMSSink: org.apache.log4j.Logger logger>;

        virtualinvoke $r14.<org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>("Could not read JMS message.", $r13);

     label6:
        return;

        catch javax.jms.JMSException from label1 to label2 with label3;
        catch javax.naming.NamingException from label1 to label2 with label4;
        catch java.lang.RuntimeException from label1 to label2 with label5;
    }

    public void onMessage(javax.jms.Message)
    {
        java.lang.Throwable $r12;
        javax.jms.ObjectMessage r15;
        org.apache.log4j.Logger $r2, $r11, $r13;
        java.lang.StringBuffer $r1, $r3, $r5, $r6;
        java.lang.String $r4, $r7, $r10;
        javax.jms.Message r0;
        boolean $z0;
        org.apache.log4j.spi.LoggingEvent r9;
        java.io.Serializable $r8;
        org.apache.log4j.net.JMSSink r14;

        r14 := @this: org.apache.log4j.net.JMSSink;

        r0 := @parameter0: javax.jms.Message;

     label1:
        $z0 = r0 instanceof javax.jms.ObjectMessage;

        if $z0 == 0 goto label2;

        r15 = (javax.jms.ObjectMessage) r0;

        $r8 = interfaceinvoke r15.<javax.jms.ObjectMessage: java.io.Serializable getObject()>();

        r9 = (org.apache.log4j.spi.LoggingEvent) $r8;

        $r10 = virtualinvoke r9.<org.apache.log4j.spi.LoggingEvent: java.lang.String getLoggerName()>();

        $r11 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.String)>($r10);

        virtualinvoke $r11.<org.apache.log4j.Category: void callAppenders(org.apache.log4j.spi.LoggingEvent)>(r9);

        goto label3;

     label2:
        $r2 = <org.apache.log4j.net.JMSSink: org.apache.log4j.Logger logger>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Received message is of type ");

        $r4 = interfaceinvoke r0.<javax.jms.Message: java.lang.String getJMSType()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", was expecting ObjectMessage.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<org.apache.log4j.Category: void warn(java.lang.Object)>($r7);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        $r13 = <org.apache.log4j.net.JMSSink: org.apache.log4j.Logger logger>;

        virtualinvoke $r13.<org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>("Exception thrown while processing incoming message.", $r12);

     label5:
        return;

        catch javax.jms.JMSException from label1 to label3 with label4;
    }

    protected static java.lang.Object lookup(javax.naming.Context, java.lang.String) throws javax.naming.NamingException
    {
        org.apache.log4j.Logger $r5;
        java.lang.StringBuffer $r4, $r6, $r7, $r8;
        java.lang.Object $r2;
        javax.naming.Context r0;
        java.lang.String r1, $r9;
        javax.naming.NameNotFoundException $r3;

        r0 := @parameter0: javax.naming.Context;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = interfaceinvoke r0.<javax.naming.Context: java.lang.Object lookup(java.lang.String)>(r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r5 = <org.apache.log4j.net.JMSSink: org.apache.log4j.Logger logger>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not find name [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<org.apache.log4j.Category: void error(java.lang.Object)>($r9);

        throw $r3;

        catch javax.naming.NameNotFoundException from label1 to label2 with label3;
    }

    static void usage(java.lang.String)
    {
        java.io.PrintStream $r1, $r3;
        java.lang.StringBuffer $r2, $r4, $r7, $r8;
        java.lang.Class $r5, $r10;
        java.lang.String r0, $r6, $r9;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Usage: java ");

        $r5 = <org.apache.log4j.net.JMSSink: java.lang.Class class$org$apache$log4j$net$JMSSink>;

        if $r5 != null goto label1;

        $r10 = staticinvoke <org.apache.log4j.net.JMSSink: java.lang.Class class$(java.lang.String)>("org.apache.log4j.net.JMSSink");

        <org.apache.log4j.net.JMSSink: java.lang.Class class$org$apache$log4j$net$JMSSink> = $r10;

        goto label2;

     label1:
        $r10 = <org.apache.log4j.net.JMSSink: java.lang.Class class$org$apache$log4j$net$JMSSink>;

     label2:
        $r6 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" TopicConnectionFactoryBindingName TopicBindingName username password configFile");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r9);

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.log4j.Logger $r1;
        java.lang.Class $r0, $r2;

        $r0 = <org.apache.log4j.net.JMSSink: java.lang.Class class$org$apache$log4j$net$JMSSink>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.log4j.net.JMSSink: java.lang.Class class$(java.lang.String)>("org.apache.log4j.net.JMSSink");

        <org.apache.log4j.net.JMSSink: java.lang.Class class$org$apache$log4j$net$JMSSink> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.log4j.net.JMSSink: java.lang.Class class$org$apache$log4j$net$JMSSink>;

     label2:
        $r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>($r2);

        <org.apache.log4j.net.JMSSink: org.apache.log4j.Logger logger> = $r1;

        return;
    }
}
