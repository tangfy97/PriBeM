public class com.jhlabs.image.CropFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    private int x;
    private int y;
    private int width;
    private int height;

    public void <init>()
    {
        com.jhlabs.image.CropFilter r0;

        r0 := @this: com.jhlabs.image.CropFilter;

        specialinvoke r0.<com.jhlabs.image.CropFilter: void <init>(int,int,int,int)>(0, 0, 32, 32);

        return;
    }

    public void <init>(int, int, int, int)
    {
        int i0, i1, i2, i3;
        com.jhlabs.image.CropFilter r0;

        r0 := @this: com.jhlabs.image.CropFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.CropFilter: int x> = i0;

        r0.<com.jhlabs.image.CropFilter: int y> = i1;

        r0.<com.jhlabs.image.CropFilter: int width> = i2;

        r0.<com.jhlabs.image.CropFilter: int height> = i3;

        return;
    }

    public void setX(int)
    {
        int i0;
        com.jhlabs.image.CropFilter r0;

        r0 := @this: com.jhlabs.image.CropFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.CropFilter: int x> = i0;

        return;
    }

    public int getX()
    {
        int $i0;
        com.jhlabs.image.CropFilter r0;

        r0 := @this: com.jhlabs.image.CropFilter;

        $i0 = r0.<com.jhlabs.image.CropFilter: int x>;

        return $i0;
    }

    public void setY(int)
    {
        int i0;
        com.jhlabs.image.CropFilter r0;

        r0 := @this: com.jhlabs.image.CropFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.CropFilter: int y> = i0;

        return;
    }

    public int getY()
    {
        int $i0;
        com.jhlabs.image.CropFilter r0;

        r0 := @this: com.jhlabs.image.CropFilter;

        $i0 = r0.<com.jhlabs.image.CropFilter: int y>;

        return $i0;
    }

    public void setWidth(int)
    {
        int i0;
        com.jhlabs.image.CropFilter r0;

        r0 := @this: com.jhlabs.image.CropFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.CropFilter: int width> = i0;

        return;
    }

    public int getWidth()
    {
        int $i0;
        com.jhlabs.image.CropFilter r0;

        r0 := @this: com.jhlabs.image.CropFilter;

        $i0 = r0.<com.jhlabs.image.CropFilter: int width>;

        return $i0;
    }

    public void setHeight(int)
    {
        int i0;
        com.jhlabs.image.CropFilter r0;

        r0 := @this: com.jhlabs.image.CropFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.CropFilter: int height> = i0;

        return;
    }

    public int getHeight()
    {
        int $i0;
        com.jhlabs.image.CropFilter r0;

        r0 := @this: com.jhlabs.image.CropFilter;

        $i0 = r0.<com.jhlabs.image.CropFilter: int height>;

        return $i0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.Graphics2D $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double $d0, $d1;
        boolean $z0;
        java.awt.image.BufferedImage r0, $r5, r7;
        java.awt.geom.AffineTransform $r3;
        com.jhlabs.image.CropFilter r2;
        java.awt.image.ColorModel $r4;
        java.awt.image.WritableRaster $r6;

        r2 := @this: com.jhlabs.image.CropFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r7 := @parameter1: java.awt.image.BufferedImage;

        virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        if r7 != null goto label1;

        $r4 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $r5 = new java.awt.image.BufferedImage;

        $i5 = r2.<com.jhlabs.image.CropFilter: int width>;

        $i4 = r2.<com.jhlabs.image.CropFilter: int height>;

        $r6 = virtualinvoke $r4.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i5, $i4);

        $z0 = virtualinvoke $r4.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r5.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r4, $r6, $z0, null);

        r7 = $r5;

     label1:
        $r1 = virtualinvoke r7.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $i0 = r2.<com.jhlabs.image.CropFilter: int x>;

        $i1 = neg $i0;

        $d1 = (double) $i1;

        $i2 = r2.<com.jhlabs.image.CropFilter: int y>;

        $i3 = neg $i2;

        $d0 = (double) $i3;

        $r3 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d1, $d0);

        virtualinvoke $r1.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>(r0, $r3);

        virtualinvoke $r1.<java.awt.Graphics: void dispose()>();

        return r7;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.CropFilter r0;

        r0 := @this: com.jhlabs.image.CropFilter;

        return "Distort/Crop";
    }
}
