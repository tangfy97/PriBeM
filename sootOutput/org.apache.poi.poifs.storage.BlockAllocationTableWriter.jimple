public final class org.apache.poi.poifs.storage.BlockAllocationTableWriter extends java.lang.Object implements org.apache.poi.poifs.storage.BlockWritable, org.apache.poi.poifs.filesystem.BATManaged
{
    private org.apache.poi.util.IntList _entries;
    private org.apache.poi.poifs.storage.BATBlock[] _blocks;
    private int _start_block;
    private org.apache.poi.poifs.common.POIFSBigBlockSize _bigBlockSize;

    public void <init>(org.apache.poi.poifs.common.POIFSBigBlockSize)
    {
        org.apache.poi.poifs.storage.BATBlock[] $r3;
        org.apache.poi.poifs.storage.BlockAllocationTableWriter r0;
        org.apache.poi.poifs.common.POIFSBigBlockSize r1;
        int $i1;
        org.apache.poi.util.IntList $r4;

        r0 := @this: org.apache.poi.poifs.storage.BlockAllocationTableWriter;

        r1 := @parameter0: org.apache.poi.poifs.common.POIFSBigBlockSize;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: org.apache.poi.poifs.common.POIFSBigBlockSize _bigBlockSize> = r1;

        $i1 = (int) -2;

        r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: int _start_block> = $i1;

        $r4 = new org.apache.poi.util.IntList;

        specialinvoke $r4.<org.apache.poi.util.IntList: void <init>()>();

        r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: org.apache.poi.util.IntList _entries> = $r4;

        $r3 = newarray (org.apache.poi.poifs.storage.BATBlock)[0];

        r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: org.apache.poi.poifs.storage.BATBlock[] _blocks> = $r3;

        return;
    }

    public int createBlocks()
    {
        org.apache.poi.poifs.storage.BlockAllocationTableWriter r0;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        org.apache.poi.util.IntList $r1;

        r0 := @this: org.apache.poi.poifs.storage.BlockAllocationTableWriter;

        i6 = 0;

        i7 = 0;

     label1:
        $r2 = r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: org.apache.poi.poifs.common.POIFSBigBlockSize _bigBlockSize>;

        $i0 = i7 + i6;

        $r1 = r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: org.apache.poi.util.IntList _entries>;

        $i1 = virtualinvoke $r1.<org.apache.poi.util.IntList: int size()>();

        $i2 = $i0 + $i1;

        $i3 = staticinvoke <org.apache.poi.poifs.storage.BATBlock: int calculateStorageRequirements(org.apache.poi.poifs.common.POIFSBigBlockSize,int)>($r2, $i2);

        $r3 = r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: org.apache.poi.poifs.common.POIFSBigBlockSize _bigBlockSize>;

        $i4 = staticinvoke <org.apache.poi.poifs.storage.HeaderBlockWriter: int calculateXBATStorageRequirements(org.apache.poi.poifs.common.POIFSBigBlockSize,int)>($r3, $i3);

        if i7 != $i3 goto label2;

        if i6 != $i4 goto label2;

        goto label3;

     label2:
        i7 = $i3;

        i6 = $i4;

        goto label1;

     label3:
        $i5 = virtualinvoke r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: int allocateSpace(int)>(i7);

        virtualinvoke r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: int allocateSpace(int)>(i6);

        virtualinvoke r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: void simpleCreateBlocks()>();

        return $i5;
    }

    public int allocateSpace(int)
    {
        org.apache.poi.poifs.storage.BlockAllocationTableWriter r0;
        int $i0, i1, i2, $i3, i4, i5, $i7;
        org.apache.poi.util.IntList $r1, $r2, $r3;

        r0 := @this: org.apache.poi.poifs.storage.BlockAllocationTableWriter;

        i1 := @parameter0: int;

        $r1 = r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: org.apache.poi.util.IntList _entries>;

        $i0 = virtualinvoke $r1.<org.apache.poi.util.IntList: int size()>();

        if i1 <= 0 goto label3;

        i2 = i1 - 1;

        i4 = $i0 + 1;

        i5 = 0;

     label1:
        if i5 >= i2 goto label2;

        $r3 = r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: org.apache.poi.util.IntList _entries>;

        $i3 = i4;

        i4 = i4 + 1;

        virtualinvoke $r3.<org.apache.poi.util.IntList: boolean add(int)>($i3);

        i5 = i5 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: org.apache.poi.util.IntList _entries>;

        $i7 = (int) -2;

        virtualinvoke $r2.<org.apache.poi.util.IntList: boolean add(int)>($i7);

     label3:
        return $i0;
    }

    public int getStartBlock()
    {
        int $i0;
        org.apache.poi.poifs.storage.BlockAllocationTableWriter r0;

        r0 := @this: org.apache.poi.poifs.storage.BlockAllocationTableWriter;

        $i0 = r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: int _start_block>;

        return $i0;
    }

    void simpleCreateBlocks()
    {
        org.apache.poi.poifs.storage.BATBlock[] $r4;
        org.apache.poi.poifs.storage.BlockAllocationTableWriter r0;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r2;
        int[] $r3;
        org.apache.poi.util.IntList $r1;

        r0 := @this: org.apache.poi.poifs.storage.BlockAllocationTableWriter;

        $r2 = r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: org.apache.poi.poifs.common.POIFSBigBlockSize _bigBlockSize>;

        $r1 = r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: org.apache.poi.util.IntList _entries>;

        $r3 = virtualinvoke $r1.<org.apache.poi.util.IntList: int[] toArray()>();

        $r4 = staticinvoke <org.apache.poi.poifs.storage.BATBlock: org.apache.poi.poifs.storage.BATBlock[] createBATBlocks(org.apache.poi.poifs.common.POIFSBigBlockSize,int[])>($r2, $r3);

        r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: org.apache.poi.poifs.storage.BATBlock[] _blocks> = $r4;

        return;
    }

    public void writeBlocks(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.poi.poifs.storage.BATBlock[] $r1, $r2;
        java.io.OutputStream r3;
        org.apache.poi.poifs.storage.BlockAllocationTableWriter r0;
        org.apache.poi.poifs.storage.BATBlock $r4;
        int $i0, i1;

        r0 := @this: org.apache.poi.poifs.storage.BlockAllocationTableWriter;

        r3 := @parameter0: java.io.OutputStream;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: org.apache.poi.poifs.storage.BATBlock[] _blocks>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r2 = r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: org.apache.poi.poifs.storage.BATBlock[] _blocks>;

        $r4 = $r2[i1];

        virtualinvoke $r4.<org.apache.poi.poifs.storage.BATBlock: void writeBlocks(java.io.OutputStream)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void writeBlock(org.apache.poi.poifs.storage.BATBlock, java.nio.ByteBuffer) throws java.io.IOException
    {
        org.apache.poi.poifs.storage.BATBlock r0;
        java.nio.ByteBuffer r1;

        r0 := @parameter0: org.apache.poi.poifs.storage.BATBlock;

        r1 := @parameter1: java.nio.ByteBuffer;

        virtualinvoke r0.<org.apache.poi.poifs.storage.BATBlock: void writeData(java.nio.ByteBuffer)>(r1);

        return;
    }

    public int countBlocks()
    {
        org.apache.poi.poifs.storage.BATBlock[] $r1;
        int $i0;
        org.apache.poi.poifs.storage.BlockAllocationTableWriter r0;

        r0 := @this: org.apache.poi.poifs.storage.BlockAllocationTableWriter;

        $r1 = r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: org.apache.poi.poifs.storage.BATBlock[] _blocks>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public void setStartBlock(int)
    {
        int i0;
        org.apache.poi.poifs.storage.BlockAllocationTableWriter r0;

        r0 := @this: org.apache.poi.poifs.storage.BlockAllocationTableWriter;

        i0 := @parameter0: int;

        r0.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: int _start_block> = i0;

        return;
    }
}
