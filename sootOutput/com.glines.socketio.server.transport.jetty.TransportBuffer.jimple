final class com.glines.socketio.server.transport.jetty.TransportBuffer extends java.lang.Object
{
    private final int bufferSize;
    private final java.util.concurrent.Semaphore inputSemaphore;
    private final java.util.concurrent.BlockingQueue queue;
    private java.util.concurrent.atomic.AtomicReference listenerRef;

    public void <init>(int)
    {
        com.glines.socketio.server.transport.jetty.TransportBuffer r0;
        java.util.concurrent.Semaphore $r3;
        int i0;
        java.util.concurrent.LinkedBlockingQueue $r1;
        java.util.concurrent.atomic.AtomicReference $r2;

        r0 := @this: com.glines.socketio.server.transport.jetty.TransportBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r1.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.BlockingQueue queue> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.atomic.AtomicReference listenerRef> = $r2;

        r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: int bufferSize> = i0;

        $r3 = new java.util.concurrent.Semaphore;

        specialinvoke $r3.<java.util.concurrent.Semaphore: void <init>(int)>(i0);

        r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.Semaphore inputSemaphore> = $r3;

        return;
    }

    public void setListener(com.glines.socketio.server.transport.jetty.TransportBuffer$BufferListener)
    {
        com.glines.socketio.server.transport.jetty.TransportBuffer r0;
        com.glines.socketio.server.transport.jetty.TransportBuffer$BufferListener r1;
        java.util.concurrent.atomic.AtomicReference $r2;

        r0 := @this: com.glines.socketio.server.transport.jetty.TransportBuffer;

        r1 := @parameter0: com.glines.socketio.server.transport.jetty.TransportBuffer$BufferListener;

        $r2 = r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.atomic.AtomicReference listenerRef>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r1);

        return;
    }

    public int getBufferSize()
    {
        int $i0;
        com.glines.socketio.server.transport.jetty.TransportBuffer r0;

        r0 := @this: com.glines.socketio.server.transport.jetty.TransportBuffer;

        $i0 = r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: int bufferSize>;

        return $i0;
    }

    public int getAvailableBytes()
    {
        com.glines.socketio.server.transport.jetty.TransportBuffer r0;
        java.util.concurrent.Semaphore $r1;
        int $i0, $i1, $i2;

        r0 := @this: com.glines.socketio.server.transport.jetty.TransportBuffer;

        $i0 = r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: int bufferSize>;

        $r1 = r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.Semaphore inputSemaphore>;

        $i1 = virtualinvoke $r1.<java.util.concurrent.Semaphore: int availablePermits()>();

        $i2 = $i0 - $i1;

        return $i2;
    }

    public int getFreeBytes()
    {
        int $i0;
        com.glines.socketio.server.transport.jetty.TransportBuffer r0;
        java.util.concurrent.Semaphore $r1;

        r0 := @this: com.glines.socketio.server.transport.jetty.TransportBuffer;

        $r1 = r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.Semaphore inputSemaphore>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.Semaphore: int availablePermits()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        com.glines.socketio.server.transport.jetty.TransportBuffer r0;
        java.util.concurrent.BlockingQueue $r1;
        boolean $z0;

        r0 := @this: com.glines.socketio.server.transport.jetty.TransportBuffer;

        $r1 = r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.BlockingQueue queue>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();

        return $z0;
    }

    public void clear()
    {
        com.glines.socketio.server.transport.jetty.TransportBuffer r1;
        java.util.Iterator $r3;
        java.util.concurrent.Semaphore $r6;
        java.util.concurrent.BlockingQueue $r2;
        java.util.ArrayList $r0;
        int $i0;
        java.lang.Object $r4;
        java.lang.String r5;
        boolean $z0;

        r1 := @this: com.glines.socketio.server.transport.jetty.TransportBuffer;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.BlockingQueue queue>;

        interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection)>($r0);

        $r3 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = r1.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.Semaphore inputSemaphore>;

        $i0 = virtualinvoke r5.<java.lang.String: int length()>();

        virtualinvoke $r6.<java.util.concurrent.Semaphore: void release(int)>($i0);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public java.util.List drainMessages()
    {
        com.glines.socketio.server.transport.jetty.TransportBuffer r1;
        java.util.Iterator $r3;
        java.util.concurrent.Semaphore $r6;
        java.util.concurrent.BlockingQueue $r2;
        java.util.ArrayList $r0;
        int $i0;
        java.lang.Object $r4;
        java.lang.String r5;
        boolean $z0;

        r1 := @this: com.glines.socketio.server.transport.jetty.TransportBuffer;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.BlockingQueue queue>;

        interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection)>($r0);

        $r3 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = r1.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.Semaphore inputSemaphore>;

        $i0 = virtualinvoke r5.<java.lang.String: int length()>();

        virtualinvoke $r6.<java.util.concurrent.Semaphore: void release(int)>($i0);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r0;
    }

    public java.lang.String getMessage(long)
    {
        com.glines.socketio.server.transport.jetty.TransportBuffer r0;
        java.util.concurrent.Semaphore $r4;
        long l0;
        java.util.concurrent.BlockingQueue $r2;
        java.util.concurrent.TimeUnit $r1;
        java.lang.InterruptedException $r5;
        int $i1;
        java.lang.Object $r3;
        java.lang.String r6;

        r0 := @this: com.glines.socketio.server.transport.jetty.TransportBuffer;

        l0 := @parameter0: long;

     label1:
        $r2 = r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.BlockingQueue queue>;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>(l0, $r1);

        r6 = (java.lang.String) $r3;

        if r6 == null goto label2;

        $r4 = r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.Semaphore inputSemaphore>;

        $i1 = virtualinvoke r6.<java.lang.String: int length()>();

        virtualinvoke $r4.<java.util.concurrent.Semaphore: void release(int)>($i1);

     label2:
        return r6;

     label3:
        $r5 := @caughtexception;

        return null;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public boolean putMessage(java.lang.String, long)
    {
        java.lang.Throwable $r13;
        com.glines.socketio.server.transport.jetty.TransportBuffer$BufferListener r3;
        long l1;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.util.ArrayList $r9;
        int $i0, $i2, $i3, $i4;
        java.lang.String r4;
        boolean $z0, $z1, $z2;
        com.glines.socketio.server.transport.jetty.TransportBuffer r0;
        java.util.concurrent.Semaphore $r5;
        java.util.concurrent.BlockingQueue $r7, $r8, $r10, $r11;
        java.util.concurrent.TimeUnit $r6;
        java.lang.InterruptedException $r12;
        java.lang.Object $r2;

        r0 := @this: com.glines.socketio.server.transport.jetty.TransportBuffer;

        r4 := @parameter0: java.lang.String;

        l1 := @parameter1: long;

        $r1 = r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.atomic.AtomicReference listenerRef>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (com.glines.socketio.server.transport.jetty.TransportBuffer$BufferListener) $r2;

        if r3 == null goto label06;

     label01:
        $r8 = r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.BlockingQueue queue>;

        $i2 = interfaceinvoke $r8.<java.util.concurrent.BlockingQueue: int size()>();

        if $i2 != 0 goto label03;

        $z2 = interfaceinvoke r3.<com.glines.socketio.server.transport.jetty.TransportBuffer$BufferListener: boolean onMessage(java.lang.String)>(r4);

     label02:
        return $z2;

     label03:
        $r9 = new java.util.ArrayList;

        $r10 = r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.BlockingQueue queue>;

        $i3 = interfaceinvoke $r10.<java.util.concurrent.BlockingQueue: int size()>();

        $i4 = $i3 + 1;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i4);

        $r11 = r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.BlockingQueue queue>;

        interfaceinvoke $r11.<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection)>($r9);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        $z1 = interfaceinvoke r3.<com.glines.socketio.server.transport.jetty.TransportBuffer$BufferListener: boolean onMessages(java.util.List)>($r9);

     label04:
        return $z1;

     label05:
        $r13 := @caughtexception;

        return 0;

     label06:
        $r5 = r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.Semaphore inputSemaphore>;

        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z0 = virtualinvoke $r5.<java.util.concurrent.Semaphore: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>($i0, l1, $r6);

        if $z0 != 0 goto label08;

     label07:
        return 0;

     label08:
        $r7 = r0.<com.glines.socketio.server.transport.jetty.TransportBuffer: java.util.concurrent.BlockingQueue queue>;

        interfaceinvoke $r7.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>(r4);

     label09:
        return 1;

     label10:
        $r12 := @caughtexception;

        return 0;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.InterruptedException from label06 to label07 with label10;
        catch java.lang.InterruptedException from label08 to label09 with label10;
    }
}
