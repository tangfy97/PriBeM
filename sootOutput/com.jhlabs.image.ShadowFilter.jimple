public class com.jhlabs.image.ShadowFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    static final long serialVersionUID;
    private float radius;
    private float angle;
    private float distance;
    private float opacity;
    private boolean addMargins;
    private boolean shadowOnly;
    private int shadowColor;

    public void <init>()
    {
        com.jhlabs.image.ShadowFilter r0;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.ShadowFilter: float radius> = 5.0F;

        r0.<com.jhlabs.image.ShadowFilter: float angle> = 4.712389F;

        r0.<com.jhlabs.image.ShadowFilter: float distance> = 5.0F;

        r0.<com.jhlabs.image.ShadowFilter: float opacity> = 0.5F;

        r0.<com.jhlabs.image.ShadowFilter: boolean addMargins> = 0;

        r0.<com.jhlabs.image.ShadowFilter: boolean shadowOnly> = 0;

        r0.<com.jhlabs.image.ShadowFilter: int shadowColor> = -16777216;

        return;
    }

    public void <init>(float, float, float, float)
    {
        com.jhlabs.image.ShadowFilter r0;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, f8;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        f0 := @parameter0: float;

        f2 := @parameter1: float;

        f1 := @parameter2: float;

        f8 := @parameter3: float;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.ShadowFilter: float radius> = 5.0F;

        r0.<com.jhlabs.image.ShadowFilter: float angle> = 4.712389F;

        r0.<com.jhlabs.image.ShadowFilter: float distance> = 5.0F;

        r0.<com.jhlabs.image.ShadowFilter: float opacity> = 0.5F;

        r0.<com.jhlabs.image.ShadowFilter: boolean addMargins> = 0;

        r0.<com.jhlabs.image.ShadowFilter: boolean shadowOnly> = 0;

        r0.<com.jhlabs.image.ShadowFilter: int shadowColor> = -16777216;

        r0.<com.jhlabs.image.ShadowFilter: float radius> = f0;

        $d1 = (double) f1;

        $d0 = (double) f2;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d1, $d0);

        $f3 = (float) $d2;

        r0.<com.jhlabs.image.ShadowFilter: float angle> = $f3;

        $f5 = f2 * f2;

        $f4 = f1 * f1;

        $f6 = $f5 + $f4;

        $d3 = (double) $f6;

        $d4 = staticinvoke <java.lang.Math: double sqrt(double)>($d3);

        $f7 = (float) $d4;

        r0.<com.jhlabs.image.ShadowFilter: float distance> = $f7;

        r0.<com.jhlabs.image.ShadowFilter: float opacity> = f8;

        return;
    }

    public void setAngle(float)
    {
        com.jhlabs.image.ShadowFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.ShadowFilter: float angle> = f0;

        return;
    }

    public float getAngle()
    {
        com.jhlabs.image.ShadowFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        $f0 = r0.<com.jhlabs.image.ShadowFilter: float angle>;

        return $f0;
    }

    public void setDistance(float)
    {
        com.jhlabs.image.ShadowFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.ShadowFilter: float distance> = f0;

        return;
    }

    public float getDistance()
    {
        com.jhlabs.image.ShadowFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        $f0 = r0.<com.jhlabs.image.ShadowFilter: float distance>;

        return $f0;
    }

    public void setRadius(float)
    {
        com.jhlabs.image.ShadowFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.ShadowFilter: float radius> = f0;

        return;
    }

    public float getRadius()
    {
        com.jhlabs.image.ShadowFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        $f0 = r0.<com.jhlabs.image.ShadowFilter: float radius>;

        return $f0;
    }

    public void setOpacity(float)
    {
        com.jhlabs.image.ShadowFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.ShadowFilter: float opacity> = f0;

        return;
    }

    public float getOpacity()
    {
        com.jhlabs.image.ShadowFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        $f0 = r0.<com.jhlabs.image.ShadowFilter: float opacity>;

        return $f0;
    }

    public void setShadowColor(int)
    {
        int i0;
        com.jhlabs.image.ShadowFilter r0;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.ShadowFilter: int shadowColor> = i0;

        return;
    }

    public int getShadowColor()
    {
        int $i0;
        com.jhlabs.image.ShadowFilter r0;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        $i0 = r0.<com.jhlabs.image.ShadowFilter: int shadowColor>;

        return $i0;
    }

    public void setAddMargins(boolean)
    {
        com.jhlabs.image.ShadowFilter r0;
        boolean z0;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        z0 := @parameter0: boolean;

        r0.<com.jhlabs.image.ShadowFilter: boolean addMargins> = z0;

        return;
    }

    public boolean getAddMargins()
    {
        com.jhlabs.image.ShadowFilter r0;
        boolean $z0;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        $z0 = r0.<com.jhlabs.image.ShadowFilter: boolean addMargins>;

        return $z0;
    }

    public void setShadowOnly(boolean)
    {
        com.jhlabs.image.ShadowFilter r0;
        boolean z0;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        z0 := @parameter0: boolean;

        r0.<com.jhlabs.image.ShadowFilter: boolean shadowOnly> = z0;

        return;
    }

    public boolean getShadowOnly()
    {
        com.jhlabs.image.ShadowFilter r0;
        boolean $z0;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        $z0 = r0.<com.jhlabs.image.ShadowFilter: boolean shadowOnly>;

        return $z0;
    }

    protected void transformSpace(java.awt.Rectangle)
    {
        java.awt.Rectangle r1;
        com.jhlabs.image.ShadowFilter r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        double $d0, $d1, $d2, $d3;
        float $f0, $f1, $f2, f3, $f4, $f5, $f6, $f7, f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        r1 := @parameter0: java.awt.Rectangle;

        $z0 = r0.<com.jhlabs.image.ShadowFilter: boolean addMargins>;

        if $z0 == 0 goto label1;

        $f1 = r0.<com.jhlabs.image.ShadowFilter: float distance>;

        $f0 = r0.<com.jhlabs.image.ShadowFilter: float angle>;

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        $f2 = (float) $d1;

        f3 = $f1 * $f2;

        $f4 = r0.<com.jhlabs.image.ShadowFilter: float distance>;

        $f6 = neg $f4;

        $f5 = r0.<com.jhlabs.image.ShadowFilter: float angle>;

        $d2 = (double) $f5;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        $f7 = (float) $d3;

        f8 = $f6 * $f7;

        $i0 = r1.<java.awt.Rectangle: int width>;

        $f9 = staticinvoke <java.lang.Math: float abs(float)>(f3);

        $f10 = r0.<com.jhlabs.image.ShadowFilter: float radius>;

        $f11 = 2.0F * $f10;

        $f12 = $f9 + $f11;

        $i1 = (int) $f12;

        $i2 = $i0 + $i1;

        r1.<java.awt.Rectangle: int width> = $i2;

        $i3 = r1.<java.awt.Rectangle: int height>;

        $f13 = staticinvoke <java.lang.Math: float abs(float)>(f8);

        $f14 = r0.<com.jhlabs.image.ShadowFilter: float radius>;

        $f15 = 2.0F * $f14;

        $f16 = $f13 + $f15;

        $i4 = (int) $f16;

        $i5 = $i3 + $i4;

        r1.<java.awt.Rectangle: int height> = $i5;

     label1:
        return;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.geom.AffineTransform $r2;
        java.awt.image.BandCombineOp $r14;
        float[] $r9, $r10, $r11, $r12;
        com.jhlabs.image.GaussianFilter $r17;
        java.awt.AlphaComposite $r3, $r20;
        boolean $z0, $z1, $z2, $z3;
        java.awt.image.BufferedImage r0, $r5, r7, $r13, $r18;
        float $f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25;
        com.jhlabs.image.ShadowFilter r1;
        java.awt.Graphics2D $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        float[][] $r8;
        java.awt.image.ColorModel $r4;
        java.awt.image.WritableRaster $r6, $r15, $r16;

        r1 := @this: com.jhlabs.image.ShadowFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r7 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        if r7 != null goto label2;

        $z1 = r1.<com.jhlabs.image.ShadowFilter: boolean addMargins>;

        if $z1 == 0 goto label1;

        $r4 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $r5 = new java.awt.image.BufferedImage;

        $i2 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i3 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        $r6 = virtualinvoke $r4.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i2, $i3);

        $z2 = virtualinvoke $r4.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r5.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r4, $r6, $z2, null);

        r7 = $r5;

        goto label2;

     label1:
        r7 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label2:
        $i4 = r1.<com.jhlabs.image.ShadowFilter: int shadowColor>;

        $i5 = $i4 >> 16;

        $i6 = $i5 & 255;

        $f8 = (float) $i6;

        $f9 = $f8 / 255.0F;

        $i7 = r1.<com.jhlabs.image.ShadowFilter: int shadowColor>;

        $i8 = $i7 >> 8;

        $i9 = $i8 & 255;

        $f10 = (float) $i9;

        $f11 = $f10 / 255.0F;

        $i10 = r1.<com.jhlabs.image.ShadowFilter: int shadowColor>;

        $i11 = $i10 & 255;

        $f12 = (float) $i11;

        $f13 = $f12 / 255.0F;

        $r8 = newarray (float[])[4];

        $r9 = newarray (float)[4];

        $r9[0] = 0.0F;

        $r9[1] = 0.0F;

        $r9[2] = 0.0F;

        $r9[3] = $f9;

        $r8[0] = $r9;

        $r10 = newarray (float)[4];

        $r10[0] = 0.0F;

        $r10[1] = 0.0F;

        $r10[2] = 0.0F;

        $r10[3] = $f11;

        $r8[1] = $r10;

        $r11 = newarray (float)[4];

        $r11[0] = 0.0F;

        $r11[1] = 0.0F;

        $r11[2] = 0.0F;

        $r11[3] = $f13;

        $r8[2] = $r11;

        $r12 = newarray (float)[4];

        $r12[0] = 0.0F;

        $r12[1] = 0.0F;

        $r12[2] = 0.0F;

        $f14 = r1.<com.jhlabs.image.ShadowFilter: float opacity>;

        $r12[3] = $f14;

        $r8[3] = $r12;

        $r13 = new java.awt.image.BufferedImage;

        specialinvoke $r13.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 2);

        $r14 = new java.awt.image.BandCombineOp;

        specialinvoke $r14.<java.awt.image.BandCombineOp: void <init>(float[][],java.awt.RenderingHints)>($r8, null);

        $r15 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r16 = virtualinvoke $r13.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        virtualinvoke $r14.<java.awt.image.BandCombineOp: java.awt.image.WritableRaster filter(java.awt.image.Raster,java.awt.image.WritableRaster)>($r15, $r16);

        $r17 = new com.jhlabs.image.GaussianFilter;

        $f15 = r1.<com.jhlabs.image.ShadowFilter: float radius>;

        specialinvoke $r17.<com.jhlabs.image.GaussianFilter: void <init>(float)>($f15);

        $r18 = virtualinvoke $r17.<com.jhlabs.image.GaussianFilter: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r13, null);

        $f16 = r1.<com.jhlabs.image.ShadowFilter: float distance>;

        $f17 = r1.<com.jhlabs.image.ShadowFilter: float angle>;

        $d4 = (double) $f17;

        $d5 = staticinvoke <java.lang.Math: double cos(double)>($d4);

        $f18 = (float) $d5;

        $f19 = $f16 * $f18;

        $f20 = r1.<com.jhlabs.image.ShadowFilter: float distance>;

        $f21 = neg $f20;

        $f22 = r1.<com.jhlabs.image.ShadowFilter: float angle>;

        $d6 = (double) $f22;

        $d7 = staticinvoke <java.lang.Math: double sin(double)>($d6);

        $f23 = (float) $d7;

        $f24 = $f21 * $f23;

        $r19 = virtualinvoke r7.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $f25 = r1.<com.jhlabs.image.ShadowFilter: float opacity>;

        $r20 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, $f25);

        virtualinvoke $r19.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r20);

        $z3 = r1.<com.jhlabs.image.ShadowFilter: boolean addMargins>;

        if $z3 == 0 goto label3;

        $f0 = r1.<com.jhlabs.image.ShadowFilter: float radius>;

        f1 = $f0 / 2.0F;

        $f2 = r1.<com.jhlabs.image.ShadowFilter: float radius>;

        $f3 = $f2 - $f24;

        $f4 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f3);

        $f5 = r1.<com.jhlabs.image.ShadowFilter: float radius>;

        $f6 = $f5 - $f19;

        $f7 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f6);

        $d3 = (double) $f4;

        $d2 = (double) $f7;

        virtualinvoke $r19.<java.awt.Graphics2D: void translate(double,double)>($d3, $d2);

     label3:
        $d1 = (double) $f19;

        $d0 = (double) $f24;

        $r2 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d1, $d0);

        virtualinvoke $r19.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>($r18, $r2);

        $z0 = r1.<com.jhlabs.image.ShadowFilter: boolean shadowOnly>;

        if $z0 != 0 goto label4;

        $r3 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;

        virtualinvoke $r19.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r3);

        virtualinvoke $r19.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>(r0, null);

     label4:
        virtualinvoke $r19.<java.awt.Graphics: void dispose()>();

        return r7;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.ShadowFilter r0;

        r0 := @this: com.jhlabs.image.ShadowFilter;

        return "Stylize/Drop Shadow...";
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.ShadowFilter: long serialVersionUID> = 6310370419462785691L;

        return;
    }
}
