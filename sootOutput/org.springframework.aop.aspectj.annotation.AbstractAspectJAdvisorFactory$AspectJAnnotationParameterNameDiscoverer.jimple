class org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer extends java.lang.Object implements org.springframework.core.ParameterNameDiscoverer
{

    private void <init>()
    {
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer r0;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String[] getParameterNames(java.lang.reflect.Method)
    {
        java.lang.Class[] $r1;
        java.lang.String[] r5, $r7;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer r8;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation $r2;
        java.util.StringTokenizer $r3;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r4, $r6;
        java.lang.reflect.Method r0;

        r8 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        $r7 = newarray (java.lang.String)[0];

        return $r7;

     label1:
        $r2 = staticinvoke <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation findAspectJAnnotationOnMethod(java.lang.reflect.Method)>(r0);

        if $r2 != null goto label2;

        return null;

     label2:
        $r3 = new java.util.StringTokenizer;

        $r4 = virtualinvoke $r2.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.lang.String getArgumentNames()>();

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r4, ",");

        $i1 = virtualinvoke $r3.<java.util.StringTokenizer: int countTokens()>();

        if $i1 <= 0 goto label5;

        $i2 = virtualinvoke $r3.<java.util.StringTokenizer: int countTokens()>();

        r5 = newarray (java.lang.String)[$i2];

        i4 = 0;

        goto label4;

     label3:
        $r6 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r5[i4] = $r6;

        i4 = i4 + 1;

     label4:
        $i3 = lengthof r5;

        if i4 < $i3 goto label3;

        return r5;

     label5:
        return null;
    }

    public java.lang.String[] getParameterNames(java.lang.reflect.Constructor)
    {
        java.lang.UnsupportedOperationException $r0;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer r1;
        java.lang.reflect.Constructor r2;

        r1 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer;

        r2 := @parameter0: java.lang.reflect.Constructor;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Spring AOP cannot handle constructor advice");

        throw $r0;
    }

    void <init>(org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer)
    {
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer r0, r1;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer;

        r1 := @parameter0: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer;

        specialinvoke r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationParameterNameDiscoverer: void <init>()>();

        return;
    }
}
