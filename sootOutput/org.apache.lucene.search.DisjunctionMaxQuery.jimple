public class org.apache.lucene.search.DisjunctionMaxQuery extends org.apache.lucene.search.Query implements java.lang.Iterable
{
    private java.util.ArrayList disjuncts;
    private float tieBreakerMultiplier;

    public void <init>(float)
    {
        float f0;
        org.apache.lucene.search.DisjunctionMaxQuery r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery;

        f0 := @parameter0: float;

        specialinvoke r0.<org.apache.lucene.search.Query: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts> = $r1;

        r0.<org.apache.lucene.search.DisjunctionMaxQuery: float tieBreakerMultiplier> = 0.0F;

        r0.<org.apache.lucene.search.DisjunctionMaxQuery: float tieBreakerMultiplier> = f0;

        return;
    }

    public void <init>(java.util.Collection, float)
    {
        org.apache.lucene.search.DisjunctionMaxQuery r0;
        java.util.Collection r2;
        float f0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery;

        r2 := @parameter0: java.util.Collection;

        f0 := @parameter1: float;

        specialinvoke r0.<org.apache.lucene.search.Query: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts> = $r1;

        r0.<org.apache.lucene.search.DisjunctionMaxQuery: float tieBreakerMultiplier> = 0.0F;

        r0.<org.apache.lucene.search.DisjunctionMaxQuery: float tieBreakerMultiplier> = f0;

        virtualinvoke r0.<org.apache.lucene.search.DisjunctionMaxQuery: void add(java.util.Collection)>(r2);

        return;
    }

    public void add(org.apache.lucene.search.Query)
    {
        org.apache.lucene.search.Query r1;
        org.apache.lucene.search.DisjunctionMaxQuery r0;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery;

        r1 := @parameter0: org.apache.lucene.search.Query;

        $r2 = r0.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void add(java.util.Collection)
    {
        org.apache.lucene.search.DisjunctionMaxQuery r0;
        java.util.Collection r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts>;

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public java.util.Iterator iterator()
    {
        org.apache.lucene.search.DisjunctionMaxQuery r0;
        java.util.Iterator $r2;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery;

        $r1 = r0.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

        return $r2;
    }

    public java.util.ArrayList getDisjuncts()
    {
        org.apache.lucene.search.DisjunctionMaxQuery r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery;

        $r1 = r0.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts>;

        return $r1;
    }

    public float getTieBreakerMultiplier()
    {
        float $f0;
        org.apache.lucene.search.DisjunctionMaxQuery r0;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery;

        $f0 = r0.<org.apache.lucene.search.DisjunctionMaxQuery: float tieBreakerMultiplier>;

        return $f0;
    }

    public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        org.apache.lucene.search.DisjunctionMaxQuery r1;
        org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight $r0;
        org.apache.lucene.search.IndexSearcher r2;

        r1 := @this: org.apache.lucene.search.DisjunctionMaxQuery;

        r2 := @parameter0: org.apache.lucene.search.IndexSearcher;

        $r0 = new org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight;

        specialinvoke $r0.<org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight: void <init>(org.apache.lucene.search.DisjunctionMaxQuery,org.apache.lucene.search.IndexSearcher)>(r1, r2);

        return $r0;
    }

    public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException
    {
        org.apache.lucene.search.Query r4, $r6, $r10, r11, r12;
        java.util.ArrayList $r1, $r2, $r7, $r8;
        byte $b1;
        int $i0, i2;
        org.apache.lucene.search.DisjunctionMaxQuery r0, r13;
        float $f0, $f1, $f2, $f3;
        java.lang.Object $r3, $r9;
        org.apache.lucene.index.IndexReader r5;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery;

        r5 := @parameter0: org.apache.lucene.index.IndexReader;

        $r1 = r0.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 != 1 goto label3;

        $r8 = r0.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r11 = (org.apache.lucene.search.Query) $r9;

        $r10 = virtualinvoke r11.<org.apache.lucene.search.Query: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)>(r5);

        r12 = $r10;

        $f0 = virtualinvoke r0.<org.apache.lucene.search.DisjunctionMaxQuery: float getBoost()>();

        $b1 = $f0 cmpl 1.0F;

        if $b1 == 0 goto label2;

        if $r10 != r11 goto label1;

        r12 = virtualinvoke $r10.<org.apache.lucene.search.Query: org.apache.lucene.search.Query clone()>();

     label1:
        $f1 = virtualinvoke r0.<org.apache.lucene.search.DisjunctionMaxQuery: float getBoost()>();

        $f2 = virtualinvoke r12.<org.apache.lucene.search.Query: float getBoost()>();

        $f3 = $f1 * $f2;

        virtualinvoke r12.<org.apache.lucene.search.Query: void setBoost(float)>($f3);

     label2:
        return r12;

     label3:
        r13 = null;

        i2 = 0;

     label4:
        if i2 >= $i0 goto label7;

        $r2 = r0.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r4 = (org.apache.lucene.search.Query) $r3;

        $r6 = virtualinvoke r4.<org.apache.lucene.search.Query: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)>(r5);

        if $r6 == r4 goto label6;

        if r13 != null goto label5;

        r13 = virtualinvoke r0.<org.apache.lucene.search.DisjunctionMaxQuery: org.apache.lucene.search.DisjunctionMaxQuery clone()>();

     label5:
        $r7 = r13.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts>;

        virtualinvoke $r7.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i2, $r6);

     label6:
        i2 = i2 + 1;

        goto label4;

     label7:
        if r13 == null goto label8;

        return r13;

     label8:
        return r0;
    }

    public org.apache.lucene.search.DisjunctionMaxQuery clone()
    {
        org.apache.lucene.search.Query $r1;
        org.apache.lucene.search.DisjunctionMaxQuery r0, r2;
        java.lang.Object $r4;
        java.util.ArrayList $r3, $r5;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery;

        $r1 = specialinvoke r0.<org.apache.lucene.search.Query: org.apache.lucene.search.Query clone()>();

        r2 = (org.apache.lucene.search.DisjunctionMaxQuery) $r1;

        $r3 = r0.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object clone()>();

        $r5 = (java.util.ArrayList) $r4;

        r2.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts> = $r5;

        return r2;
    }

    public void extractTerms(java.util.Set)
    {
        org.apache.lucene.search.Query r4;
        org.apache.lucene.search.DisjunctionMaxQuery r0;
        java.util.Iterator $r2;
        java.util.Set r5;
        java.lang.Object $r3;
        java.util.ArrayList $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery;

        r5 := @parameter0: java.util.Set;

        $r1 = r0.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.search.Query) $r3;

        virtualinvoke r4.<org.apache.lucene.search.Query: void extractTerms(java.util.Set)>(r5);

        goto label1;

     label2:
        return;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.apache.lucene.search.Query r6;
        java.util.ArrayList $r2, $r4;
        byte $b1, $b2;
        int $i0, $i3, i4;
        java.lang.String $r3, r7, $r8, $r9;
        double $d0;
        boolean $z0;
        org.apache.lucene.search.DisjunctionMaxQuery r1;
        float $f0, $f1, $f2, $f3;
        java.lang.StringBuilder $r0;
        java.lang.Object $r5;

        r1 := @this: org.apache.lucene.search.DisjunctionMaxQuery;

        r7 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r2 = r1.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i4 = 0;

     label1:
        if i4 >= $i0 goto label5;

        $r4 = r1.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r6 = (org.apache.lucene.search.Query) $r5;

        $z0 = r6 instanceof org.apache.lucene.search.BooleanQuery;

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r9 = virtualinvoke r6.<org.apache.lucene.search.Query: java.lang.String toString(java.lang.String)>(r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        goto label3;

     label2:
        $r8 = virtualinvoke r6.<org.apache.lucene.search.Query: java.lang.String toString(java.lang.String)>(r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label3:
        $i3 = $i0 - 1;

        if i4 == $i3 goto label4;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" | ");

     label4:
        i4 = i4 + 1;

        goto label1;

     label5:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $f0 = r1.<org.apache.lucene.search.DisjunctionMaxQuery: float tieBreakerMultiplier>;

        $b1 = $f0 cmpl 0.0F;

        if $b1 == 0 goto label6;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("~");

        $f3 = r1.<org.apache.lucene.search.DisjunctionMaxQuery: float tieBreakerMultiplier>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

     label6:
        $f1 = virtualinvoke r1.<org.apache.lucene.search.DisjunctionMaxQuery: float getBoost()>();

        $d0 = (double) $f1;

        $b2 = $d0 cmpl 1.0;

        if $b2 == 0 goto label7;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^");

        $f2 = virtualinvoke r1.<org.apache.lucene.search.DisjunctionMaxQuery: float getBoost()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

     label7:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.ArrayList $r3, $r4;
        org.apache.lucene.search.DisjunctionMaxQuery r1, r2;
        byte $b0, $b1;
        float $f0, $f1, $f2, $f3;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r2 := @this: org.apache.lucene.search.DisjunctionMaxQuery;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.lucene.search.DisjunctionMaxQuery;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.apache.lucene.search.DisjunctionMaxQuery) r0;

        $f0 = virtualinvoke r2.<org.apache.lucene.search.DisjunctionMaxQuery: float getBoost()>();

        $f1 = virtualinvoke r1.<org.apache.lucene.search.DisjunctionMaxQuery: float getBoost()>();

        $b0 = $f0 cmpl $f1;

        if $b0 != 0 goto label2;

        $f3 = r2.<org.apache.lucene.search.DisjunctionMaxQuery: float tieBreakerMultiplier>;

        $f2 = r1.<org.apache.lucene.search.DisjunctionMaxQuery: float tieBreakerMultiplier>;

        $b1 = $f3 cmpl $f2;

        if $b1 != 0 goto label2;

        $r4 = r2.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts>;

        $r3 = r1.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts>;

        $z1 = virtualinvoke $r4.<java.util.ArrayList: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public int hashCode()
    {
        java.util.ArrayList $r1;
        org.apache.lucene.search.DisjunctionMaxQuery r0;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0, $f1;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery;

        $f0 = virtualinvoke r0.<org.apache.lucene.search.DisjunctionMaxQuery: float getBoost()>();

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        $f1 = r0.<org.apache.lucene.search.DisjunctionMaxQuery: float tieBreakerMultiplier>;

        $i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f1);

        $i2 = $i0 + $i1;

        $r1 = r0.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts>;

        $i3 = virtualinvoke $r1.<java.util.ArrayList: int hashCode()>();

        $i4 = $i2 + $i3;

        return $i4;
    }

    public volatile org.apache.lucene.search.Query clone()
    {
        org.apache.lucene.search.DisjunctionMaxQuery r0, $r1;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.DisjunctionMaxQuery: org.apache.lucene.search.DisjunctionMaxQuery clone()>();

        return $r1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.search.DisjunctionMaxQuery r0, $r1;

        r0 := @this: org.apache.lucene.search.DisjunctionMaxQuery;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.DisjunctionMaxQuery: org.apache.lucene.search.DisjunctionMaxQuery clone()>();

        return $r1;
    }

    static java.util.ArrayList access$000(org.apache.lucene.search.DisjunctionMaxQuery)
    {
        org.apache.lucene.search.DisjunctionMaxQuery r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: org.apache.lucene.search.DisjunctionMaxQuery;

        $r1 = r0.<org.apache.lucene.search.DisjunctionMaxQuery: java.util.ArrayList disjuncts>;

        return $r1;
    }

    static float access$100(org.apache.lucene.search.DisjunctionMaxQuery)
    {
        float $f0;
        org.apache.lucene.search.DisjunctionMaxQuery r0;

        r0 := @parameter0: org.apache.lucene.search.DisjunctionMaxQuery;

        $f0 = r0.<org.apache.lucene.search.DisjunctionMaxQuery: float tieBreakerMultiplier>;

        return $f0;
    }
}
