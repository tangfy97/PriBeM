public class org.bouncycastle.crypto.tls.TlsUtils extends java.lang.Object
{

    public void <init>()
    {
        org.bouncycastle.crypto.tls.TlsUtils r0;

        r0 := @this: org.bouncycastle.crypto.tls.TlsUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static byte[] toByteArray(java.lang.String)
    {
        byte[] r2;
        char $c2;
        byte $b3;
        int $i0, $i1, i4;
        char[] $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $i0 = lengthof $r1;

        r2 = newarray (byte)[$i0];

        i4 = 0;

     label1:
        $i1 = lengthof r2;

        if i4 == $i1 goto label2;

        $c2 = $r1[i4];

        $b3 = (byte) $c2;

        r2[i4] = $b3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r2;
    }

    protected static void writeUint8(short, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        int $i1;
        short s0;

        s0 := @parameter0: short;

        r0 := @parameter1: java.io.OutputStream;

        $i1 = (int) s0;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i1);

        return;
    }

    protected static void writeUint8(short, byte[], int)
    {
        byte[] r0;
        short s1;
        byte $b2;
        int i0;

        s1 := @parameter0: short;

        r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        $b2 = (byte) s1;

        r0[i0] = $b2;

        return;
    }

    protected static void writeUint16(int, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        int i0, $i1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.io.OutputStream;

        $i1 = i0 >> 8;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i1);

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(i0);

        return;
    }

    protected static void writeUint16(int, byte[], int)
    {
        byte[] r0;
        byte $b3, $b4;
        int i0, i1, $i2, $i5;

        i1 := @parameter0: int;

        r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        $i2 = i1 >> 8;

        $b3 = (byte) $i2;

        r0[i0] = $b3;

        $i5 = i0 + 1;

        $b4 = (byte) i1;

        r0[$i5] = $b4;

        return;
    }

    protected static void writeUint24(int, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.io.OutputStream;

        $i1 = i0 >> 16;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i1);

        $i2 = i0 >> 8;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i2);

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(i0);

        return;
    }

    protected static void writeUint24(int, byte[], int)
    {
        byte[] r0;
        byte $b3, $b5, $b7;
        int i0, i1, $i2, $i4, $i6, $i8;

        i1 := @parameter0: int;

        r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        $i2 = i1 >> 16;

        $b3 = (byte) $i2;

        r0[i0] = $b3;

        $i6 = i0 + 1;

        $i4 = i1 >> 8;

        $b5 = (byte) $i4;

        r0[$i6] = $b5;

        $i8 = i0 + 2;

        $b7 = (byte) i1;

        r0[$i8] = $b7;

        return;
    }

    protected static void writeUint32(long, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        long l0, $l1, $l3, $l5;
        int $i2, $i4, $i6, $i7;

        l0 := @parameter0: long;

        r0 := @parameter1: java.io.OutputStream;

        $l1 = l0 >> 24;

        $i2 = (int) $l1;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i2);

        $l3 = l0 >> 16;

        $i4 = (int) $l3;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i4);

        $l5 = l0 >> 8;

        $i6 = (int) $l5;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i6);

        $i7 = (int) l0;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i7);

        return;
    }

    protected static void writeUint32(long, byte[], int)
    {
        byte[] r0;
        long l1, $l2, $l5, $l9;
        byte $b4, $b7, $b11, $b14;
        int i0, $i3, $i6, $i8, $i10, $i12, $i13, $i15;

        l1 := @parameter0: long;

        r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        $l2 = l1 >> 24;

        $i3 = (int) $l2;

        $b4 = (byte) $i3;

        r0[i0] = $b4;

        $i8 = i0 + 1;

        $l5 = l1 >> 16;

        $i6 = (int) $l5;

        $b7 = (byte) $i6;

        r0[$i8] = $b7;

        $i12 = i0 + 2;

        $l9 = l1 >> 8;

        $i10 = (int) $l9;

        $b11 = (byte) $i10;

        r0[$i12] = $b11;

        $i15 = i0 + 3;

        $i13 = (int) l1;

        $b14 = (byte) $i13;

        r0[$i15] = $b14;

        return;
    }

    protected static void writeUint64(long, java.io.OutputStream) throws java.io.IOException
    {
        long l0, $l1, $l3, $l5, $l7, $l9, $l11, $l13;
        int $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i15;
        java.io.OutputStream r0;

        l0 := @parameter0: long;

        r0 := @parameter1: java.io.OutputStream;

        $l1 = l0 >> 56;

        $i2 = (int) $l1;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i2);

        $l3 = l0 >> 48;

        $i4 = (int) $l3;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i4);

        $l5 = l0 >> 40;

        $i6 = (int) $l5;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i6);

        $l7 = l0 >> 32;

        $i8 = (int) $l7;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i8);

        $l9 = l0 >> 24;

        $i10 = (int) $l9;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i10);

        $l11 = l0 >> 16;

        $i12 = (int) $l11;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i12);

        $l13 = l0 >> 8;

        $i14 = (int) $l13;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i14);

        $i15 = (int) l0;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i15);

        return;
    }

    protected static void writeUint64(long, byte[], int)
    {
        byte[] r0;
        byte $b4, $b7, $b11, $b15, $b19, $b23, $b27, $b30;
        long l1, $l2, $l5, $l9, $l13, $l17, $l21, $l25;
        int i0, $i3, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26, $i28, $i29, $i31;

        l1 := @parameter0: long;

        r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        $l2 = l1 >> 56;

        $i3 = (int) $l2;

        $b4 = (byte) $i3;

        r0[i0] = $b4;

        $i8 = i0 + 1;

        $l5 = l1 >> 48;

        $i6 = (int) $l5;

        $b7 = (byte) $i6;

        r0[$i8] = $b7;

        $i12 = i0 + 2;

        $l9 = l1 >> 40;

        $i10 = (int) $l9;

        $b11 = (byte) $i10;

        r0[$i12] = $b11;

        $i16 = i0 + 3;

        $l13 = l1 >> 32;

        $i14 = (int) $l13;

        $b15 = (byte) $i14;

        r0[$i16] = $b15;

        $i20 = i0 + 4;

        $l17 = l1 >> 24;

        $i18 = (int) $l17;

        $b19 = (byte) $i18;

        r0[$i20] = $b19;

        $i24 = i0 + 5;

        $l21 = l1 >> 16;

        $i22 = (int) $l21;

        $b23 = (byte) $i22;

        r0[$i24] = $b23;

        $i28 = i0 + 6;

        $l25 = l1 >> 8;

        $i26 = (int) $l25;

        $b27 = (byte) $i26;

        r0[$i28] = $b27;

        $i31 = i0 + 7;

        $i29 = (int) l1;

        $b30 = (byte) $i29;

        r0[$i31] = $b30;

        return;
    }

    protected static void writeOpaque8(byte[], java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        byte[] r0;
        short $s1;
        int $i0;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.io.OutputStream;

        $i0 = lengthof r0;

        $s1 = (short) $i0;

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>($s1, r1);

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r0);

        return;
    }

    protected static void writeOpaque16(byte[], java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        int $i0;
        byte[] r0;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.io.OutputStream;

        $i0 = lengthof r0;

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeUint16(int,java.io.OutputStream)>($i0, r1);

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r0);

        return;
    }

    protected static short readUint8(java.io.InputStream) throws java.io.IOException
    {
        short $s1;
        int $i0, $i3;
        java.io.EOFException $r2;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label1:
        $s1 = (short) $i0;

        return $s1;
    }

    protected static int readUint16(java.io.InputStream) throws java.io.IOException
    {
        int $i0, $i1, $i2, $i3, $i4;
        java.io.EOFException $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i1 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i2 = $i0 | $i1;

        if $i2 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $i3 = $i0 << 8;

        $i4 = $i3 | $i1;

        return $i4;
    }

    protected static int readUint24(java.io.InputStream) throws java.io.IOException
    {
        java.io.EOFException $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i1 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i2 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i3 = $i0 | $i1;

        $i4 = $i3 | $i2;

        if $i4 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $i6 = $i0 << 16;

        $i5 = $i1 << 8;

        $i7 = $i6 | $i5;

        $i8 = $i7 | $i2;

        return $i8;
    }

    protected static long readUint32(java.io.InputStream) throws java.io.IOException
    {
        long $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.io.EOFException $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i1 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i2 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i3 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i4 = $i0 | $i1;

        $i5 = $i4 | $i2;

        $i6 = $i5 | $i3;

        if $i6 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $l7 = (long) $i0;

        $l10 = $l7 << 24;

        $l8 = (long) $i1;

        $l9 = $l8 << 16;

        $l13 = $l10 | $l9;

        $l11 = (long) $i2;

        $l12 = $l11 << 8;

        $l15 = $l13 | $l12;

        $l14 = (long) $i3;

        $l16 = $l15 | $l14;

        return $l16;
    }

    protected static void readFully(byte[], java.io.InputStream) throws java.io.IOException
    {
        byte[] r0;
        java.io.EOFException $r3;
        int $i0, $i1, $i2, $i3, i4, $i6;
        java.io.InputStream r1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.io.InputStream;

        i4 = 0;

     label1:
        $i0 = lengthof r0;

        if i4 == $i0 goto label3;

        $i1 = lengthof r0;

        $i2 = $i1 - i4;

        $i3 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>(r0, i4, $i2);

        $i6 = (int) -1;

        if $i3 != $i6 goto label2;

        $r3 = new java.io.EOFException;

        specialinvoke $r3.<java.io.EOFException: void <init>()>();

        throw $r3;

     label2:
        i4 = i4 + $i3;

        goto label1;

     label3:
        return;
    }

    protected static byte[] readOpaque8(java.io.InputStream) throws java.io.IOException
    {
        byte[] r1;
        short $s0;
        int $i1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $s0 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: short readUint8(java.io.InputStream)>(r0);

        $i1 = (int) $s0;

        r1 = newarray (byte)[$i1];

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void readFully(byte[],java.io.InputStream)>(r1, r0);

        return r1;
    }

    protected static byte[] readOpaque16(java.io.InputStream) throws java.io.IOException
    {
        int $i0;
        byte[] r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $i0 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: int readUint16(java.io.InputStream)>(r0);

        r1 = newarray (byte)[$i0];

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void readFully(byte[],java.io.InputStream)>(r1, r0);

        return r1;
    }

    protected static void checkVersion(byte[], org.bouncycastle.crypto.tls.TlsProtocolHandler) throws java.io.IOException
    {
        byte[] r0;
        byte $b0, $b1;
        int $i2;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        $b0 = r0[0];

        $i2 = (int) $b0;

        if $i2 != 3 goto label1;

        $b1 = r0[1];

        if $b1 == 1 goto label2;

     label1:
        virtualinvoke r1.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 70);

     label2:
        return;
    }

    protected static void checkVersion(java.io.InputStream, org.bouncycastle.crypto.tls.TlsProtocolHandler) throws java.io.IOException
    {
        int $i0, $i1;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        $i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i1 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if $i0 != 3 goto label1;

        if $i1 == 1 goto label2;

     label1:
        virtualinvoke r1.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 70);

     label2:
        return;
    }

    protected static void writeVersion(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;

        r0 := @parameter0: java.io.OutputStream;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(3);

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(1);

        return;
    }

    private static void hmac_hash(org.bouncycastle.crypto.Digest, byte[], byte[], byte[])
    {
        byte[] r3, r4, r5, r6, r7, r8;
        org.bouncycastle.crypto.Digest r1;
        org.bouncycastle.crypto.macs.HMac $r0;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        org.bouncycastle.crypto.params.KeyParameter $r2;

        r1 := @parameter0: org.bouncycastle.crypto.Digest;

        r3 := @parameter1: byte[];

        r4 := @parameter2: byte[];

        r5 := @parameter3: byte[];

        $r0 = new org.bouncycastle.crypto.macs.HMac;

        specialinvoke $r0.<org.bouncycastle.crypto.macs.HMac: void <init>(org.bouncycastle.crypto.Digest)>(r1);

        $r2 = new org.bouncycastle.crypto.params.KeyParameter;

        specialinvoke $r2.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[])>(r3);

        r8 = r4;

        $i0 = interfaceinvoke r1.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        $i1 = lengthof r5;

        $i2 = $i1 + $i0;

        $i3 = $i2 - 1;

        i4 = $i3 / $i0;

        $i5 = virtualinvoke $r0.<org.bouncycastle.crypto.macs.HMac: int getMacSize()>();

        r6 = newarray (byte)[$i5];

        $i6 = virtualinvoke $r0.<org.bouncycastle.crypto.macs.HMac: int getMacSize()>();

        r7 = newarray (byte)[$i6];

        i15 = 0;

     label1:
        if i15 >= i4 goto label2;

        virtualinvoke $r0.<org.bouncycastle.crypto.macs.HMac: void init(org.bouncycastle.crypto.CipherParameters)>($r2);

        $i7 = lengthof r8;

        virtualinvoke $r0.<org.bouncycastle.crypto.macs.HMac: void update(byte[],int,int)>(r8, 0, $i7);

        virtualinvoke $r0.<org.bouncycastle.crypto.macs.HMac: int doFinal(byte[],int)>(r6, 0);

        r8 = r6;

        virtualinvoke $r0.<org.bouncycastle.crypto.macs.HMac: void init(org.bouncycastle.crypto.CipherParameters)>($r2);

        $i8 = lengthof r6;

        virtualinvoke $r0.<org.bouncycastle.crypto.macs.HMac: void update(byte[],int,int)>(r6, 0, $i8);

        $i9 = lengthof r4;

        virtualinvoke $r0.<org.bouncycastle.crypto.macs.HMac: void update(byte[],int,int)>(r4, 0, $i9);

        virtualinvoke $r0.<org.bouncycastle.crypto.macs.HMac: int doFinal(byte[],int)>(r7, 0);

        $i13 = $i0 * i15;

        $i11 = lengthof r5;

        $i10 = $i0 * i15;

        $i12 = $i11 - $i10;

        $i14 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i12);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r5, $i13, $i14);

        i15 = i15 + 1;

        goto label1;

     label2:
        return;
    }

    protected static void PRF(byte[], byte[], byte[], byte[])
    {
        byte[] r0, r1, r2, r3, r4, r5, r6, r7;
        byte $b13, $b14, $b15, $b16;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i17;
        org.bouncycastle.crypto.digests.MD5Digest $r8;
        org.bouncycastle.crypto.digests.SHA1Digest $r9;

        r0 := @parameter0: byte[];

        r3 := @parameter1: byte[];

        r4 := @parameter2: byte[];

        r6 := @parameter3: byte[];

        $i0 = lengthof r0;

        $i1 = $i0 + 1;

        i2 = $i1 / 2;

        r1 = newarray (byte)[i2];

        r2 = newarray (byte)[i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, i2);

        $i3 = lengthof r0;

        $i4 = $i3 - i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i4, r2, 0, i2);

        $i6 = lengthof r3;

        $i5 = lengthof r4;

        $i7 = $i6 + $i5;

        r5 = newarray (byte)[$i7];

        $i8 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r5, 0, $i8);

        $i10 = lengthof r3;

        $i9 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r5, $i10, $i9);

        $i11 = lengthof r6;

        r7 = newarray (byte)[$i11];

        $r8 = new org.bouncycastle.crypto.digests.MD5Digest;

        specialinvoke $r8.<org.bouncycastle.crypto.digests.MD5Digest: void <init>()>();

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void hmac_hash(org.bouncycastle.crypto.Digest,byte[],byte[],byte[])>($r8, r1, r5, r7);

        $r9 = new org.bouncycastle.crypto.digests.SHA1Digest;

        specialinvoke $r9.<org.bouncycastle.crypto.digests.SHA1Digest: void <init>()>();

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void hmac_hash(org.bouncycastle.crypto.Digest,byte[],byte[],byte[])>($r9, r2, r5, r6);

        i17 = 0;

     label1:
        $i12 = lengthof r6;

        if i17 >= $i12 goto label2;

        $b14 = r6[i17];

        $b13 = r7[i17];

        $b15 = $b14 ^ $b13;

        $b16 = (byte) $b15;

        r6[i17] = $b16;

        i17 = i17 + 1;

        goto label1;

     label2:
        return;
    }
}
