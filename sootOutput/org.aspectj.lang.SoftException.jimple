public class org.aspectj.lang.SoftException extends java.lang.RuntimeException
{
    private static final boolean HAVE_JAVA_14;
    java.lang.Throwable inner;

    public void <init>(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        org.aspectj.lang.SoftException r0;

        r0 := @this: org.aspectj.lang.SoftException;

        r1 := @parameter0: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>()>();

        r0.<org.aspectj.lang.SoftException: java.lang.Throwable inner> = r1;

        return;
    }

    public java.lang.Throwable getWrappedThrowable()
    {
        java.lang.Throwable $r1;
        org.aspectj.lang.SoftException r0;

        r0 := @this: org.aspectj.lang.SoftException;

        $r1 = r0.<org.aspectj.lang.SoftException: java.lang.Throwable inner>;

        return $r1;
    }

    public java.lang.Throwable getCause()
    {
        java.lang.Throwable $r1;
        org.aspectj.lang.SoftException r0;

        r0 := @this: org.aspectj.lang.SoftException;

        $r1 = r0.<org.aspectj.lang.SoftException: java.lang.Throwable inner>;

        return $r1;
    }

    public void printStackTrace()
    {
        java.io.PrintStream $r1;
        org.aspectj.lang.SoftException r0;

        r0 := @this: org.aspectj.lang.SoftException;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke r0.<org.aspectj.lang.SoftException: void printStackTrace(java.io.PrintStream)>($r1);

        return;
    }

    public void printStackTrace(java.io.PrintStream)
    {
        java.io.PrintStream r1;
        java.lang.Throwable r2;
        org.aspectj.lang.SoftException r0;
        boolean $z0;

        r0 := @this: org.aspectj.lang.SoftException;

        r1 := @parameter0: java.io.PrintStream;

        specialinvoke r0.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>(r1);

        r2 = r0.<org.aspectj.lang.SoftException: java.lang.Throwable inner>;

        $z0 = <org.aspectj.lang.SoftException: boolean HAVE_JAVA_14>;

        if $z0 != 0 goto label1;

        if null == r2 goto label1;

        virtualinvoke r1.<java.io.PrintStream: void print(java.lang.String)>("Caused by: ");

        virtualinvoke r2.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>(r1);

     label1:
        return;
    }

    public void printStackTrace(java.io.PrintWriter)
    {
        java.io.PrintWriter r1;
        java.lang.Throwable r2;
        org.aspectj.lang.SoftException r0;
        boolean $z0;

        r0 := @this: org.aspectj.lang.SoftException;

        r1 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(r1);

        r2 = r0.<org.aspectj.lang.SoftException: java.lang.Throwable inner>;

        $z0 = <org.aspectj.lang.SoftException: boolean HAVE_JAVA_14>;

        if $z0 != 0 goto label1;

        if null == r2 goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Caused by: ");

        virtualinvoke r2.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(r1);

     label1:
        return;
    }

    static void <clinit>()
    {
        java.lang.Throwable $r0;
        boolean z0;

        z0 = 0;

     label1:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.nio.Buffer");

        z0 = 1;

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

     label4:
        <org.aspectj.lang.SoftException: boolean HAVE_JAVA_14> = z0;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
