public abstract class com.google.gxp.compiler.cpp.BaseCppCodeGenerator$InterfaceWorker extends com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker
{
    protected final com.google.gxp.compiler.base.Interface iface;

    protected void <init>(java.lang.Appendable, com.google.gxp.compiler.alerts.AlertSink, com.google.gxp.compiler.base.Interface)
    {
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$InterfaceWorker r0;
        com.google.gxp.compiler.alerts.AlertSink r2;
        java.lang.Appendable r1;
        java.lang.Object $r4;
        com.google.gxp.compiler.base.Interface r3, $r5;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$InterfaceWorker;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: com.google.gxp.compiler.alerts.AlertSink;

        r3 := @parameter2: com.google.gxp.compiler.base.Interface;

        specialinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: void <init>(java.lang.Appendable,com.google.gxp.compiler.alerts.AlertSink)>(r1, r2);

        $r4 = staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r5 = (com.google.gxp.compiler.base.Interface) $r4;

        r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$InterfaceWorker: com.google.gxp.compiler.base.Interface iface> = $r5;

        return;
    }

    protected abstract void appendClass();

    public void run()
    {
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$InterfaceWorker r0;
        com.google.gxp.compiler.base.Interface $r1;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$InterfaceWorker;

        $r1 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$InterfaceWorker: com.google.gxp.compiler.base.Interface iface>;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$InterfaceWorker: void appendHeader(com.google.gxp.compiler.base.Root)>($r1);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$InterfaceWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$InterfaceWorker: void appendClass()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$InterfaceWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$InterfaceWorker: void appendFooter()>();

        return;
    }
}
