class org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator extends java.lang.Object implements org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator
{
    private final org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate pred;

    public void <init>(org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate)
    {
        org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator r0;
        org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator: org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate pred> = r1;

        return;
    }

    private int findForwards(java.lang.String, int)
    {
        org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator r1;
        char $c2;
        org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate $r2;
        int i0, $i1, i3, $i5;
        java.lang.String r0;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i3 = i0;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i1 goto label3;

        $r2 = r1.<org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator: org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate pred>;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate: boolean apply(char)>($c2);

        if $z0 == 0 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $i5 = (int) -1;

        return $i5;
    }

    private int findBackwards(java.lang.String, int)
    {
        org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator r0;
        char $c1;
        org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate $r2;
        int i0, $i2, i3, $i5, $i7;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i3 = i0 - 1;

     label1:
        if i3 < 0 goto label3;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator: org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate pred>;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate: boolean apply(char)>($c1);

        if $z0 == 0 goto label2;

        $i2 = i3 + 1;

        return $i2;

     label2:
        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label1;

     label3:
        $i7 = (int) -1;

        return $i7;
    }

    public int indexOf(java.lang.String, int, boolean)
    {
        org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator r0;
        int i0, $i1;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $i1 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator: int findForwards(java.lang.String,int)>(r1, i0);

        goto label2;

     label1:
        $i1 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator: int findBackwards(java.lang.String,int)>(r1, i0);

     label2:
        return $i1;
    }
}
