class com.google.inject.internal.SingleMethodInjector$1 extends java.lang.Object implements com.google.inject.internal.InjectorImpl$MethodInvoker
{
    final com.google.inject.internal.cglib.reflect.$FastMethod val$fastMethod;
    final com.google.inject.internal.SingleMethodInjector this$0;

    void <init>(com.google.inject.internal.SingleMethodInjector, com.google.inject.internal.cglib.reflect.$FastMethod)
    {
        com.google.inject.internal.cglib.reflect.$FastMethod r2;
        com.google.inject.internal.SingleMethodInjector$1 r0;
        com.google.inject.internal.SingleMethodInjector r1;

        r0 := @this: com.google.inject.internal.SingleMethodInjector$1;

        r1 := @parameter0: com.google.inject.internal.SingleMethodInjector;

        r2 := @parameter1: com.google.inject.internal.cglib.reflect.$FastMethod;

        r0.<com.google.inject.internal.SingleMethodInjector$1: com.google.inject.internal.SingleMethodInjector this$0> = r1;

        r0.<com.google.inject.internal.SingleMethodInjector$1: com.google.inject.internal.cglib.reflect.$FastMethod val$fastMethod> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public transient java.lang.Object invoke(java.lang.Object, java.lang.Object[]) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        com.google.inject.internal.SingleMethodInjector$1 r0;
        java.lang.Object[] r2;
        com.google.inject.internal.cglib.reflect.$FastMethod $r3;
        java.lang.Object r1, $r4;

        r0 := @this: com.google.inject.internal.SingleMethodInjector$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        $r3 = r0.<com.google.inject.internal.SingleMethodInjector$1: com.google.inject.internal.cglib.reflect.$FastMethod val$fastMethod>;

        $r4 = virtualinvoke $r3.<com.google.inject.internal.cglib.reflect.$FastMethod: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, r2);

        return $r4;
    }
}
