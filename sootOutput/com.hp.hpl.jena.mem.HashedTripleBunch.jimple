public class com.hp.hpl.jena.mem.HashedTripleBunch extends com.hp.hpl.jena.mem.HashCommon implements com.hp.hpl.jena.mem.TripleBunch
{

    public void <init>(com.hp.hpl.jena.mem.TripleBunch)
    {
        com.hp.hpl.jena.mem.TripleBunch r1;
        com.hp.hpl.jena.mem.HashedTripleBunch r0;
        com.hp.hpl.jena.graph.Triple $r4;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.HashedTripleBunch;

        r1 := @parameter0: com.hp.hpl.jena.mem.TripleBunch;

        $i0 = interfaceinvoke r1.<com.hp.hpl.jena.mem.TripleBunch: int size()>();

        $d0 = (double) $i0;

        $d1 = $d0 / 0.5;

        $i1 = (int) $d1;

        $i2 = staticinvoke <com.hp.hpl.jena.mem.HashedTripleBunch: int nextSize(int)>($i1);

        specialinvoke r0.<com.hp.hpl.jena.mem.HashCommon: void <init>(int)>($i2);

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.mem.TripleBunch: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.hp.hpl.jena.graph.Triple) $r3;

        virtualinvoke r0.<com.hp.hpl.jena.mem.HashedTripleBunch: void add(com.hp.hpl.jena.graph.Triple)>($r4);

        goto label1;

     label2:
        r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int changes> = 0;

        return;
    }

    protected com.hp.hpl.jena.graph.Triple[] newKeyArray(int)
    {
        int i0;
        com.hp.hpl.jena.mem.HashedTripleBunch r1;
        com.hp.hpl.jena.graph.Triple[] $r0;

        r1 := @this: com.hp.hpl.jena.mem.HashedTripleBunch;

        i0 := @parameter0: int;

        $r0 = newarray (com.hp.hpl.jena.graph.Triple)[i0];

        return $r0;
    }

    public boolean contains(com.hp.hpl.jena.graph.Triple)
    {
        int $i0;
        com.hp.hpl.jena.mem.HashedTripleBunch r0;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.HashedTripleBunch;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int findSlot(java.lang.Object)>(r1);

        if $i0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected int findSlotBySameValueAs(com.hp.hpl.jena.graph.Triple)
    {
        java.lang.Object[] $r2;
        com.hp.hpl.jena.mem.HashedTripleBunch r0;
        com.hp.hpl.jena.graph.Triple r1, $r4, $r5;
        int $i0, $i1, i2, $i4, $i6;
        com.hp.hpl.jena.graph.Triple[] $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.HashedTripleBunch;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        i2 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int initialIndexFor(java.lang.Object)>(r1);

     label1:
        $r2 = r0.<com.hp.hpl.jena.mem.HashedTripleBunch: java.lang.Object[] keys>;

        $r3 = (com.hp.hpl.jena.graph.Triple[]) $r2;

        $r5 = $r3[i2];

        if $r5 != null goto label2;

        return i2;

     label2:
        $r4 = (com.hp.hpl.jena.graph.Triple) $r5;

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: boolean matches(com.hp.hpl.jena.graph.Triple)>($r4);

        if $z0 == 0 goto label3;

        $i4 = (int) -1;

        $i1 = i2 ^ $i4;

        return $i1;

     label3:
        $i6 = (int) -1;

        i2 = i2 + $i6;

        if i2 >= 0 goto label4;

        $i0 = r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int capacity>;

        i2 = i2 + $i0;

     label4:
        goto label1;
    }

    public boolean containsBySameValueAs(com.hp.hpl.jena.graph.Triple)
    {
        int $i0;
        com.hp.hpl.jena.mem.HashedTripleBunch r0;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.HashedTripleBunch;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int findSlotBySameValueAs(com.hp.hpl.jena.graph.Triple)>(r1);

        if $i0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int size()
    {
        int $i0;
        com.hp.hpl.jena.mem.HashedTripleBunch r0;

        r0 := @this: com.hp.hpl.jena.mem.HashedTripleBunch;

        $i0 = r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int size>;

        return $i0;
    }

    public int currentCapacity()
    {
        int $i0;
        com.hp.hpl.jena.mem.HashedTripleBunch r0;

        r0 := @this: com.hp.hpl.jena.mem.HashedTripleBunch;

        $i0 = r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int capacity>;

        return $i0;
    }

    public void add(com.hp.hpl.jena.graph.Triple)
    {
        java.lang.Object[] $r1;
        com.hp.hpl.jena.mem.HashedTripleBunch r0;
        com.hp.hpl.jena.graph.Triple r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.hp.hpl.jena.graph.Triple[] $r3;

        r0 := @this: com.hp.hpl.jena.mem.HashedTripleBunch;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.mem.HashedTripleBunch: java.lang.Object[] keys>;

        $r3 = (com.hp.hpl.jena.graph.Triple[]) $r1;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int findSlot(java.lang.Object)>(r2);

        $r3[$i0] = r2;

        $i1 = r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int changes>;

        $i2 = $i1 + 1;

        r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int changes> = $i2;

        $i3 = r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int size>;

        $i4 = $i3 + 1;

        r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int size> = $i4;

        $i5 = r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int threshold>;

        if $i4 <= $i5 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.mem.HashedTripleBunch: void grow()>();

     label1:
        return;
    }

    protected void grow()
    {
        java.lang.Object[] r1;
        com.hp.hpl.jena.mem.HashedTripleBunch r0;
        com.hp.hpl.jena.graph.Triple r4;
        int i0, $i1, $i2, i3;
        java.lang.Object $r3;
        com.hp.hpl.jena.graph.Triple[] $r2;

        r0 := @this: com.hp.hpl.jena.mem.HashedTripleBunch;

        r1 = r0.<com.hp.hpl.jena.mem.HashedTripleBunch: java.lang.Object[] keys>;

        i0 = r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int capacity>;

        virtualinvoke r0.<com.hp.hpl.jena.mem.HashedTripleBunch: void growCapacityAndThreshold()>();

        $i1 = r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int capacity>;

        $r2 = newarray (com.hp.hpl.jena.graph.Triple)[$i1];

        r0.<com.hp.hpl.jena.mem.HashedTripleBunch: java.lang.Object[] keys> = $r2;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $r3 = r1[i3];

        r4 = (com.hp.hpl.jena.graph.Triple) $r3;

        if r4 == null goto label2;

        $i2 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int findSlot(java.lang.Object)>(r4);

        $r2[$i2] = r4;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    public void remove(com.hp.hpl.jena.graph.Triple)
    {
        int $i0, $i1;
        com.hp.hpl.jena.mem.HashedTripleBunch r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.mem.HashedTripleBunch;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        specialinvoke r0.<com.hp.hpl.jena.mem.HashCommon: void remove(java.lang.Object)>(r1);

        $i0 = r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int changes>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.mem.HashedTripleBunch: int changes> = $i1;

        return;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()
    {
        com.hp.hpl.jena.mem.HashedTripleBunch r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.mem.HashCommon$NotifyEmpty $r1;

        r0 := @this: com.hp.hpl.jena.mem.HashedTripleBunch;

        $r1 = <com.hp.hpl.jena.mem.HashCommon$NotifyEmpty: com.hp.hpl.jena.mem.HashCommon$NotifyEmpty ignore>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashedTripleBunch: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator(com.hp.hpl.jena.mem.HashCommon$NotifyEmpty)>($r1);

        return $r2;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator iterator(com.hp.hpl.jena.mem.HashCommon$NotifyEmpty)
    {
        com.hp.hpl.jena.mem.HashedTripleBunch r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.mem.HashCommon$NotifyEmpty r1;

        r0 := @this: com.hp.hpl.jena.mem.HashedTripleBunch;

        r1 := @parameter0: com.hp.hpl.jena.mem.HashCommon$NotifyEmpty;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashedTripleBunch: com.hp.hpl.jena.util.iterator.ExtendedIterator keyIterator(com.hp.hpl.jena.mem.HashCommon$NotifyEmpty)>(r1);

        return $r2;
    }

    public volatile void remove(java.lang.Object)
    {
        com.hp.hpl.jena.mem.HashedTripleBunch r0;
        java.lang.Object r1;
        com.hp.hpl.jena.graph.Triple $r2;

        r0 := @this: com.hp.hpl.jena.mem.HashedTripleBunch;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.hp.hpl.jena.graph.Triple) r1;

        virtualinvoke r0.<com.hp.hpl.jena.mem.HashedTripleBunch: void remove(com.hp.hpl.jena.graph.Triple)>($r2);

        return;
    }

    protected volatile java.lang.Object[] newKeyArray(int)
    {
        int i0;
        com.hp.hpl.jena.mem.HashedTripleBunch r0;
        com.hp.hpl.jena.graph.Triple[] $r1;

        r0 := @this: com.hp.hpl.jena.mem.HashedTripleBunch;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashedTripleBunch: com.hp.hpl.jena.graph.Triple[] newKeyArray(int)>(i0);

        return $r1;
    }
}
