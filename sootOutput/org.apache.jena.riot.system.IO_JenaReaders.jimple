public class org.apache.jena.riot.system.IO_JenaReaders extends java.lang.Object
{
    private static java.lang.String riotBase;
    private static java.lang.String streamManagerSymbolStr;
    public static com.hp.hpl.jena.sparql.util.Symbol streamManagerSymbol;
    static java.lang.String jenaNTriplesReader;
    static java.lang.String jenaTurtleReader;
    static java.lang.String jenaN3Reader;
    static java.lang.String jenaRDFReader;

    public void <init>()
    {
        org.apache.jena.riot.system.IO_JenaReaders r0;

        r0 := @this: org.apache.jena.riot.system.IO_JenaReaders;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void wireIntoJena()
    {
        staticinvoke <org.apache.jena.riot.system.IO_JenaReaders: void registerForModelRead(java.lang.String,java.lang.Class)>("RDF/XML", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFReaderRIOT_RDFXML;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaReaders: void registerForModelRead(java.lang.String,java.lang.Class)>("RDF/XML-ABBREV", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFReaderRIOT_RDFXML;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaReaders: void registerForModelRead(java.lang.String,java.lang.Class)>("N-TRIPLES", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFReaderRIOT_NT;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaReaders: void registerForModelRead(java.lang.String,java.lang.Class)>("N-Triples", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFReaderRIOT_NT;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaReaders: void registerForModelRead(java.lang.String,java.lang.Class)>("N-TRIPLE", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFReaderRIOT_NT;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaReaders: void registerForModelRead(java.lang.String,java.lang.Class)>("N3", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFReaderRIOT_TTL;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaReaders: void registerForModelRead(java.lang.String,java.lang.Class)>("TURTLE", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFReaderRIOT_TTL;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaReaders: void registerForModelRead(java.lang.String,java.lang.Class)>("Turtle", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFReaderRIOT_TTL;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaReaders: void registerForModelRead(java.lang.String,java.lang.Class)>("TTL", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFReaderRIOT_TTL;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaReaders: void registerForModelRead(java.lang.String,java.lang.Class)>("RDF/JSON", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFReaderRIOT_RDFJSON;");

        return;
    }

    public static void resetJena()
    {
        java.lang.String $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        $r0 = <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String jenaRDFReader>;

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFReaderFImpl: java.lang.String setBaseReaderClassName(java.lang.String,java.lang.String)>("RDF/XML", $r0);

        $r1 = <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String jenaRDFReader>;

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFReaderFImpl: java.lang.String setBaseReaderClassName(java.lang.String,java.lang.String)>("RDF/XML-ABBREV", $r1);

        $r2 = <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String jenaNTriplesReader>;

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFReaderFImpl: java.lang.String setBaseReaderClassName(java.lang.String,java.lang.String)>("N-TRIPLES", $r2);

        $r3 = <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String jenaNTriplesReader>;

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFReaderFImpl: java.lang.String setBaseReaderClassName(java.lang.String,java.lang.String)>("N-Triples", $r3);

        $r4 = <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String jenaNTriplesReader>;

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFReaderFImpl: java.lang.String setBaseReaderClassName(java.lang.String,java.lang.String)>("N-TRIPLE", $r4);

        $r5 = <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String jenaTurtleReader>;

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFReaderFImpl: java.lang.String setBaseReaderClassName(java.lang.String,java.lang.String)>("N3", $r5);

        $r6 = <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String jenaTurtleReader>;

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFReaderFImpl: java.lang.String setBaseReaderClassName(java.lang.String,java.lang.String)>("TURTLE", $r6);

        $r7 = <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String jenaTurtleReader>;

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFReaderFImpl: java.lang.String setBaseReaderClassName(java.lang.String,java.lang.String)>("Turtle", $r7);

        $r8 = <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String jenaTurtleReader>;

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFReaderFImpl: java.lang.String setBaseReaderClassName(java.lang.String,java.lang.String)>("TTL", $r8);

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFReaderFImpl: java.lang.String setBaseReaderClassName(java.lang.String,java.lang.String)>("RDF/JSON", "");

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFReaderFImpl: java.lang.String setBaseReaderClassName(java.lang.String,java.lang.String)>("RDFJSON", "");

        return;
    }

    public static void registerForModelRead(java.lang.String, java.lang.Class)
    {
        java.lang.Class r1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFReaderFImpl: java.lang.String setBaseReaderClassName(java.lang.String,java.lang.String)>(r0, $r2);

        return;
    }

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.String $r1, $r4, $r5, $r7;
        com.hp.hpl.jena.sparql.util.Symbol $r6;

        <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String riotBase> = "http://jena.apache.org/riot/";

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String riotBase>;

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("streammanager");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String streamManagerSymbolStr> = $r4;

        $r5 = <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String streamManagerSymbolStr>;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.util.Symbol: com.hp.hpl.jena.sparql.util.Symbol create(java.lang.String)>($r5);

        <org.apache.jena.riot.system.IO_JenaReaders: com.hp.hpl.jena.sparql.util.Symbol streamManagerSymbol> = $r6;

        <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String jenaNTriplesReader> = "com.hp.hpl.jena.rdf.model.impl.NTripleReader";

        <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String jenaTurtleReader> = "com.hp.hpl.jena.n3.turtle.TurtleReader";

        $r7 = <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String jenaTurtleReader>;

        <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String jenaN3Reader> = $r7;

        <org.apache.jena.riot.system.IO_JenaReaders: java.lang.String jenaRDFReader> = "com.hp.hpl.jena.rdf.arp.JenaReader";

        return;
    }
}
