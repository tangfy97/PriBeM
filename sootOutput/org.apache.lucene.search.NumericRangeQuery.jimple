public final class org.apache.lucene.search.NumericRangeQuery extends org.apache.lucene.search.MultiTermQuery
{
    final int precisionStep;
    final org.apache.lucene.document.FieldType$NumericType dataType;
    final java.lang.Number min;
    final java.lang.Number max;
    final boolean minInclusive;
    final boolean maxInclusive;
    static final long LONG_NEGATIVE_INFINITY;
    static final long LONG_POSITIVE_INFINITY;
    static final int INT_NEGATIVE_INFINITY;
    static final int INT_POSITIVE_INFINITY;

    private void <init>(java.lang.String, int, org.apache.lucene.document.FieldType$NumericType, java.lang.Number, java.lang.Number, boolean, boolean)
    {
        org.apache.lucene.document.FieldType$NumericType r2;
        org.apache.lucene.search.NumericRangeQuery r0;
        java.lang.IllegalArgumentException $r5;
        int i0;
        java.lang.String r1;
        java.lang.Number r3, r4;
        boolean z0, z1;

        r0 := @this: org.apache.lucene.search.NumericRangeQuery;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.lucene.document.FieldType$NumericType;

        r3 := @parameter3: java.lang.Number;

        r4 := @parameter4: java.lang.Number;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        specialinvoke r0.<org.apache.lucene.search.MultiTermQuery: void <init>(java.lang.String)>(r1);

        if i0 >= 1 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("precisionStep must be >=1");

        throw $r5;

     label1:
        r0.<org.apache.lucene.search.NumericRangeQuery: int precisionStep> = i0;

        r0.<org.apache.lucene.search.NumericRangeQuery: org.apache.lucene.document.FieldType$NumericType dataType> = r2;

        r0.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number min> = r3;

        r0.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number max> = r4;

        r0.<org.apache.lucene.search.NumericRangeQuery: boolean minInclusive> = z0;

        r0.<org.apache.lucene.search.NumericRangeQuery: boolean maxInclusive> = z1;

        return;
    }

    public static org.apache.lucene.search.NumericRangeQuery newLongRange(java.lang.String, int, java.lang.Long, java.lang.Long, boolean, boolean)
    {
        org.apache.lucene.document.FieldType$NumericType $r4;
        org.apache.lucene.search.NumericRangeQuery $r0;
        java.lang.Long r2, r3;
        int i0;
        java.lang.String r1;
        boolean z0, z1;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Long;

        r3 := @parameter3: java.lang.Long;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        $r0 = new org.apache.lucene.search.NumericRangeQuery;

        $r4 = <org.apache.lucene.document.FieldType$NumericType: org.apache.lucene.document.FieldType$NumericType LONG>;

        specialinvoke $r0.<org.apache.lucene.search.NumericRangeQuery: void <init>(java.lang.String,int,org.apache.lucene.document.FieldType$NumericType,java.lang.Number,java.lang.Number,boolean,boolean)>(r1, i0, $r4, r2, r3, z0, z1);

        return $r0;
    }

    public static org.apache.lucene.search.NumericRangeQuery newLongRange(java.lang.String, java.lang.Long, java.lang.Long, boolean, boolean)
    {
        org.apache.lucene.document.FieldType$NumericType $r4;
        org.apache.lucene.search.NumericRangeQuery $r0;
        java.lang.Long r2, r3;
        java.lang.String r1;
        boolean z0, z1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Long;

        r3 := @parameter2: java.lang.Long;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $r0 = new org.apache.lucene.search.NumericRangeQuery;

        $r4 = <org.apache.lucene.document.FieldType$NumericType: org.apache.lucene.document.FieldType$NumericType LONG>;

        specialinvoke $r0.<org.apache.lucene.search.NumericRangeQuery: void <init>(java.lang.String,int,org.apache.lucene.document.FieldType$NumericType,java.lang.Number,java.lang.Number,boolean,boolean)>(r1, 4, $r4, r2, r3, z0, z1);

        return $r0;
    }

    public static org.apache.lucene.search.NumericRangeQuery newIntRange(java.lang.String, int, java.lang.Integer, java.lang.Integer, boolean, boolean)
    {
        org.apache.lucene.document.FieldType$NumericType $r4;
        org.apache.lucene.search.NumericRangeQuery $r0;
        java.lang.Integer r2, r3;
        int i0;
        java.lang.String r1;
        boolean z0, z1;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Integer;

        r3 := @parameter3: java.lang.Integer;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        $r0 = new org.apache.lucene.search.NumericRangeQuery;

        $r4 = <org.apache.lucene.document.FieldType$NumericType: org.apache.lucene.document.FieldType$NumericType INT>;

        specialinvoke $r0.<org.apache.lucene.search.NumericRangeQuery: void <init>(java.lang.String,int,org.apache.lucene.document.FieldType$NumericType,java.lang.Number,java.lang.Number,boolean,boolean)>(r1, i0, $r4, r2, r3, z0, z1);

        return $r0;
    }

    public static org.apache.lucene.search.NumericRangeQuery newIntRange(java.lang.String, java.lang.Integer, java.lang.Integer, boolean, boolean)
    {
        org.apache.lucene.document.FieldType$NumericType $r4;
        org.apache.lucene.search.NumericRangeQuery $r0;
        java.lang.String r1;
        java.lang.Integer r2, r3;
        boolean z0, z1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Integer;

        r3 := @parameter2: java.lang.Integer;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $r0 = new org.apache.lucene.search.NumericRangeQuery;

        $r4 = <org.apache.lucene.document.FieldType$NumericType: org.apache.lucene.document.FieldType$NumericType INT>;

        specialinvoke $r0.<org.apache.lucene.search.NumericRangeQuery: void <init>(java.lang.String,int,org.apache.lucene.document.FieldType$NumericType,java.lang.Number,java.lang.Number,boolean,boolean)>(r1, 4, $r4, r2, r3, z0, z1);

        return $r0;
    }

    public static org.apache.lucene.search.NumericRangeQuery newDoubleRange(java.lang.String, int, java.lang.Double, java.lang.Double, boolean, boolean)
    {
        org.apache.lucene.document.FieldType$NumericType $r4;
        org.apache.lucene.search.NumericRangeQuery $r0;
        java.lang.Double r2, r3;
        int i0;
        java.lang.String r1;
        boolean z0, z1;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Double;

        r3 := @parameter3: java.lang.Double;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        $r0 = new org.apache.lucene.search.NumericRangeQuery;

        $r4 = <org.apache.lucene.document.FieldType$NumericType: org.apache.lucene.document.FieldType$NumericType DOUBLE>;

        specialinvoke $r0.<org.apache.lucene.search.NumericRangeQuery: void <init>(java.lang.String,int,org.apache.lucene.document.FieldType$NumericType,java.lang.Number,java.lang.Number,boolean,boolean)>(r1, i0, $r4, r2, r3, z0, z1);

        return $r0;
    }

    public static org.apache.lucene.search.NumericRangeQuery newDoubleRange(java.lang.String, java.lang.Double, java.lang.Double, boolean, boolean)
    {
        org.apache.lucene.document.FieldType$NumericType $r4;
        org.apache.lucene.search.NumericRangeQuery $r0;
        java.lang.Double r2, r3;
        java.lang.String r1;
        boolean z0, z1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Double;

        r3 := @parameter2: java.lang.Double;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $r0 = new org.apache.lucene.search.NumericRangeQuery;

        $r4 = <org.apache.lucene.document.FieldType$NumericType: org.apache.lucene.document.FieldType$NumericType DOUBLE>;

        specialinvoke $r0.<org.apache.lucene.search.NumericRangeQuery: void <init>(java.lang.String,int,org.apache.lucene.document.FieldType$NumericType,java.lang.Number,java.lang.Number,boolean,boolean)>(r1, 4, $r4, r2, r3, z0, z1);

        return $r0;
    }

    public static org.apache.lucene.search.NumericRangeQuery newFloatRange(java.lang.String, int, java.lang.Float, java.lang.Float, boolean, boolean)
    {
        org.apache.lucene.document.FieldType$NumericType $r4;
        org.apache.lucene.search.NumericRangeQuery $r0;
        java.lang.Float r2, r3;
        int i0;
        java.lang.String r1;
        boolean z0, z1;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Float;

        r3 := @parameter3: java.lang.Float;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        $r0 = new org.apache.lucene.search.NumericRangeQuery;

        $r4 = <org.apache.lucene.document.FieldType$NumericType: org.apache.lucene.document.FieldType$NumericType FLOAT>;

        specialinvoke $r0.<org.apache.lucene.search.NumericRangeQuery: void <init>(java.lang.String,int,org.apache.lucene.document.FieldType$NumericType,java.lang.Number,java.lang.Number,boolean,boolean)>(r1, i0, $r4, r2, r3, z0, z1);

        return $r0;
    }

    public static org.apache.lucene.search.NumericRangeQuery newFloatRange(java.lang.String, java.lang.Float, java.lang.Float, boolean, boolean)
    {
        org.apache.lucene.document.FieldType$NumericType $r4;
        org.apache.lucene.search.NumericRangeQuery $r0;
        java.lang.Float r2, r3;
        java.lang.String r1;
        boolean z0, z1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Float;

        r3 := @parameter2: java.lang.Float;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $r0 = new org.apache.lucene.search.NumericRangeQuery;

        $r4 = <org.apache.lucene.document.FieldType$NumericType: org.apache.lucene.document.FieldType$NumericType FLOAT>;

        specialinvoke $r0.<org.apache.lucene.search.NumericRangeQuery: void <init>(java.lang.String,int,org.apache.lucene.document.FieldType$NumericType,java.lang.Number,java.lang.Number,boolean,boolean)>(r1, 4, $r4, r2, r3, z0, z1);

        return $r0;
    }

    protected org.apache.lucene.index.TermsEnum getTermsEnum(org.apache.lucene.index.Terms, org.apache.lucene.util.AttributeSource) throws java.io.IOException
    {
        org.apache.lucene.search.NumericRangeQuery r0;
        org.apache.lucene.index.Terms r2;
        org.apache.lucene.search.NumericRangeQuery$NumericRangeTermsEnum $r9;
        org.apache.lucene.index.TermsEnum $r7, $r10;
        int $i0;
        org.apache.lucene.util.AttributeSource r8;
        java.lang.Comparable $r6;
        java.lang.Number $r1, $r3, $r4, $r5;

        r0 := @this: org.apache.lucene.search.NumericRangeQuery;

        r2 := @parameter0: org.apache.lucene.index.Terms;

        r8 := @parameter1: org.apache.lucene.util.AttributeSource;

        $r1 = r0.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number min>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number max>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number min>;

        $r6 = (java.lang.Comparable) $r4;

        $r5 = r0.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number max>;

        $i0 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>($r5);

        if $i0 <= 0 goto label1;

        $r7 = <org.apache.lucene.index.TermsEnum: org.apache.lucene.index.TermsEnum EMPTY>;

        return $r7;

     label1:
        $r9 = new org.apache.lucene.search.NumericRangeQuery$NumericRangeTermsEnum;

        $r10 = virtualinvoke r2.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null);

        specialinvoke $r9.<org.apache.lucene.search.NumericRangeQuery$NumericRangeTermsEnum: void <init>(org.apache.lucene.search.NumericRangeQuery,org.apache.lucene.index.TermsEnum)>(r0, $r10);

        return $r9;
    }

    public boolean includesMin()
    {
        org.apache.lucene.search.NumericRangeQuery r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.NumericRangeQuery;

        $z0 = r0.<org.apache.lucene.search.NumericRangeQuery: boolean minInclusive>;

        return $z0;
    }

    public boolean includesMax()
    {
        org.apache.lucene.search.NumericRangeQuery r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.NumericRangeQuery;

        $z0 = r0.<org.apache.lucene.search.NumericRangeQuery: boolean maxInclusive>;

        return $z0;
    }

    public java.lang.Number getMin()
    {
        org.apache.lucene.search.NumericRangeQuery r0;
        java.lang.Number $r1;

        r0 := @this: org.apache.lucene.search.NumericRangeQuery;

        $r1 = r0.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number min>;

        return $r1;
    }

    public java.lang.Number getMax()
    {
        org.apache.lucene.search.NumericRangeQuery r0;
        java.lang.Number $r1;

        r0 := @this: org.apache.lucene.search.NumericRangeQuery;

        $r1 = r0.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number max>;

        return $r1;
    }

    public int getPrecisionStep()
    {
        int $i0;
        org.apache.lucene.search.NumericRangeQuery r0;

        r0 := @this: org.apache.lucene.search.NumericRangeQuery;

        $i0 = r0.<org.apache.lucene.search.NumericRangeQuery: int precisionStep>;

        return $i0;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.apache.lucene.search.NumericRangeQuery r1;
        java.lang.String $r2, r3, $r13, $r15, $r16, $r18, $r19;
        java.lang.Number $r5, $r6, $r9, $r10;
        boolean $z0, $z1, $z2;
        char $c0, $c1;
        float $f0;
        java.lang.StringBuilder $r0, $r4, $r7, $r8, $r11, $r12, $r14, $r17;

        r1 := @this: org.apache.lucene.search.NumericRangeQuery;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.lucene.search.NumericRangeQuery: java.lang.String getField()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        $r16 = virtualinvoke r1.<org.apache.lucene.search.NumericRangeQuery: java.lang.String getField()>();

        $r17 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

     label1:
        $z1 = r1.<org.apache.lucene.search.NumericRangeQuery: boolean minInclusive>;

        if $z1 == 0 goto label2;

        $c0 = 91;

        goto label3;

     label2:
        $c0 = 123;

     label3:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r5 = r1.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number min>;

        if $r5 != null goto label4;

        $r18 = "*";

        goto label5;

     label4:
        $r6 = r1.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number min>;

        $r18 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

     label5:
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TO ");

        $r9 = r1.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number max>;

        if $r9 != null goto label6;

        $r19 = "*";

        goto label7;

     label6:
        $r10 = r1.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number max>;

        $r19 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

     label7:
        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $z2 = r1.<org.apache.lucene.search.NumericRangeQuery: boolean maxInclusive>;

        if $z2 == 0 goto label8;

        $c1 = 93;

        goto label9;

     label8:
        $c1 = 125;

     label9:
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $f0 = virtualinvoke r1.<org.apache.lucene.search.NumericRangeQuery: float getBoost()>();

        $r13 = staticinvoke <org.apache.lucene.util.ToStringUtils: java.lang.String boost(float)>($f0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    public final boolean equals(java.lang.Object)
    {
        org.apache.lucene.search.NumericRangeQuery r1, r2;
        int $i0, $i1;
        java.lang.Number $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Object r0;

        r1 := @this: org.apache.lucene.search.NumericRangeQuery;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r1.<org.apache.lucene.search.MultiTermQuery: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $z1 = r0 instanceof org.apache.lucene.search.NumericRangeQuery;

        if $z1 == 0 goto label9;

        r2 = (org.apache.lucene.search.NumericRangeQuery) r0;

        $r3 = r2.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number min>;

        if $r3 != null goto label3;

        $r10 = r1.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number min>;

        if $r10 != null goto label7;

        goto label4;

     label3:
        $r5 = r2.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number min>;

        $r4 = r1.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number min>;

        $z2 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label7;

     label4:
        $r6 = r2.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number max>;

        if $r6 != null goto label5;

        $r9 = r1.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number max>;

        if $r9 != null goto label7;

        goto label6;

     label5:
        $r8 = r2.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number max>;

        $r7 = r1.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number max>;

        $z3 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label7;

     label6:
        $z5 = r1.<org.apache.lucene.search.NumericRangeQuery: boolean minInclusive>;

        $z4 = r2.<org.apache.lucene.search.NumericRangeQuery: boolean minInclusive>;

        if $z5 != $z4 goto label7;

        $z7 = r1.<org.apache.lucene.search.NumericRangeQuery: boolean maxInclusive>;

        $z6 = r2.<org.apache.lucene.search.NumericRangeQuery: boolean maxInclusive>;

        if $z7 != $z6 goto label7;

        $i1 = r1.<org.apache.lucene.search.NumericRangeQuery: int precisionStep>;

        $i0 = r2.<org.apache.lucene.search.NumericRangeQuery: int precisionStep>;

        if $i1 != $i0 goto label7;

        $z8 = 1;

        goto label8;

     label7:
        $z8 = 0;

     label8:
        return $z8;

     label9:
        return 0;
    }

    public final int hashCode()
    {
        org.apache.lucene.search.NumericRangeQuery r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;
        java.lang.Boolean $r3, $r4;
        java.lang.Number $r1, $r2, $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.search.NumericRangeQuery;

        $i0 = specialinvoke r0.<org.apache.lucene.search.MultiTermQuery: int hashCode()>();

        $i1 = r0.<org.apache.lucene.search.NumericRangeQuery: int precisionStep>;

        $i2 = $i1 ^ 1681282149;

        i13 = $i0 + $i2;

        $r1 = r0.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number min>;

        if $r1 == null goto label1;

        $r6 = r0.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number min>;

        $i11 = virtualinvoke $r6.<java.lang.Object: int hashCode()>();

        $i12 = $i11 ^ 351950331;

        i13 = i13 + $i12;

     label1:
        $r2 = r0.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number max>;

        if $r2 == null goto label2;

        $r5 = r0.<org.apache.lucene.search.NumericRangeQuery: java.lang.Number max>;

        $i9 = virtualinvoke $r5.<java.lang.Object: int hashCode()>();

        $i10 = $i9 ^ 1933551102;

        i13 = i13 + $i10;

     label2:
        $z0 = r0.<org.apache.lucene.search.NumericRangeQuery: boolean minInclusive>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $i3 = virtualinvoke $r3.<java.lang.Boolean: int hashCode()>();

        $i4 = $i3 ^ 351950331;

        $i5 = i13 + $i4;

        $z1 = r0.<org.apache.lucene.search.NumericRangeQuery: boolean maxInclusive>;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $i6 = virtualinvoke $r4.<java.lang.Boolean: int hashCode()>();

        $i7 = $i6 ^ 1933551102;

        $i8 = $i5 + $i7;

        return $i8;
    }

    static void <clinit>()
    {
        int $i2, $i3;
        long $l0, $l1;

        $l0 = staticinvoke <org.apache.lucene.util.NumericUtils: long doubleToSortableLong(double)>(#-Infinity);

        <org.apache.lucene.search.NumericRangeQuery: long LONG_NEGATIVE_INFINITY> = $l0;

        $l1 = staticinvoke <org.apache.lucene.util.NumericUtils: long doubleToSortableLong(double)>(#Infinity);

        <org.apache.lucene.search.NumericRangeQuery: long LONG_POSITIVE_INFINITY> = $l1;

        $i2 = staticinvoke <org.apache.lucene.util.NumericUtils: int floatToSortableInt(float)>(#-InfinityF);

        <org.apache.lucene.search.NumericRangeQuery: int INT_NEGATIVE_INFINITY> = $i2;

        $i3 = staticinvoke <org.apache.lucene.util.NumericUtils: int floatToSortableInt(float)>(#InfinityF);

        <org.apache.lucene.search.NumericRangeQuery: int INT_POSITIVE_INFINITY> = $i3;

        return;
    }
}
