class org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer extends org.waveprotocol.wave.client.editor.RenderingMutationHandler
{
    private static final int NOTIFY_SCHEDULE_DELAY_MS;
    private static final int MOUSE_LISTENER_EVENTS;
    private final java.util.Set mutatedElements;
    private final org.waveprotocol.wave.client.scheduler.Scheduler$Task mutationNotificationTask;

    void <init>()
    {
        java.util.HashSet $r1;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r0;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$1 $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.RenderingMutationHandler: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: java.util.Set mutatedElements> = $r1;

        $r2 = new org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$1;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$1: void <init>(org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer)>(r0);

        r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: org.waveprotocol.wave.client.scheduler.Scheduler$Task mutationNotificationTask> = $r2;

        return;
    }

    private static org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint$MutationHandler getMutationHandler(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        java.util.Map $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r3;
        java.lang.String $r1;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint$MutationHandler $r4;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>("mutationListener");

        if $r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r2 = <org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint: java.util.Map mutationHandlerRegistry>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint$MutationHandler) $r3;

     label2:
        return $r4;
    }

    public void onActivationStart(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: void fanoutAttrs(org.waveprotocol.wave.client.editor.content.ContentElement)>(r1);

        return;
    }

    public void onAttributeModified(org.waveprotocol.wave.client.editor.content.ContentElement, java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r1;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$2 $r5;
        org.waveprotocol.wave.model.util.StringMap $r4;
        org.waveprotocol.wave.client.editor.content.ContentElement r2;
        java.lang.String r0, r3, r6;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r0 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("link");

        if $z0 == 0 goto label3;

        if r3 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        specialinvoke r1.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: void maybeConvertToAnchor(org.waveprotocol.wave.client.editor.content.ContentElement,boolean)>(r2, $z1);

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.util.StringMap getAttributes()>();

        $r5 = new org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$2;

        specialinvoke $r5.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$2: void <init>(org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer,org.waveprotocol.wave.client.editor.content.ContentElement)>(r1, r2);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r5);

        goto label4;

     label3:
        specialinvoke r1.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: void applyAttribute(org.waveprotocol.wave.client.editor.content.ContentElement,java.lang.String,java.lang.String)>(r2, r0, r3);

     label4:
        return;
    }

    private void applyAttribute(org.waveprotocol.wave.client.editor.content.ContentElement, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.common.logging.Logger $r9;
        com.google.gwt.dom.client.Style $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.String r2, r4, $r6, $r15;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r5;
        java.lang.RuntimeException $r7;
        org.waveprotocol.wave.common.logging.LoggerBundle $r8;
        com.google.gwt.dom.client.Element $r1;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14;

        r5 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("link");

        if $z0 == 0 goto label4;

        if r4 == null goto label3;

        $r6 = staticinvoke <org.waveprotocol.wave.client.common.scrub.Scrub: java.lang.String scrub(java.lang.String)>(r4);

        virtualinvoke $r1.<com.google.gwt.dom.client.Element: void setAttribute(java.lang.String,java.lang.String)>("href", $r6);

        $z2 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z2 == 0 goto label1;

        virtualinvoke $r1.<com.google.gwt.dom.client.Element: void removeAttribute(java.lang.String)>("target");

        goto label2;

     label1:
        virtualinvoke $r1.<com.google.gwt.dom.client.Element: void setAttribute(java.lang.String,java.lang.String)>("target", "_blank");

     label2:
        goto label8;

     label3:
        virtualinvoke $r1.<com.google.gwt.dom.client.Element: void removeAttribute(java.lang.String)>("href");

        goto label8;

     label4:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("mouseListener");

        if $z1 == 0 goto label5;

        specialinvoke r5.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: void updateEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement,java.lang.String)>(r0, r4);

        goto label8;

     label5:
        $r3 = virtualinvoke $r1.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Style getStyle()>();

        virtualinvoke $r3.<com.google.gwt.dom.client.Style: void setProperty(java.lang.String,java.lang.String)>(r2, r4);

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        $r8 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to set CSS property ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r15);

     label8:
        return;

        catch java.lang.RuntimeException from label5 to label6 with label7;
    }

    private void updateEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement, java.lang.String)
    {
        com.google.gwt.user.client.Element $r6, $r7, $r8;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r5;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$3 $r9;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint$EventHandler $r10;
        java.util.Map $r3;
        com.google.gwt.dom.client.Element $r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r4;
        java.lang.String r2;

        r5 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        if r2 != null goto label1;

        $r10 = null;

        goto label2;

     label1:
        $r3 = <org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint: java.util.Map eventHandlerRegistry>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r10 = (org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint$EventHandler) $r4;

     label2:
        if $r10 == null goto label3;

        $r7 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: com.google.gwt.user.client.Element castToOld(com.google.gwt.dom.client.Element)>($r1);

        staticinvoke <com.google.gwt.user.client.DOM: void sinkEvents(com.google.gwt.user.client.Element,int)>($r7, 125);

        $r8 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: com.google.gwt.user.client.Element castToOld(com.google.gwt.dom.client.Element)>($r1);

        $r9 = new org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$3;

        specialinvoke $r9.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$3: void <init>(org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer,org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint$EventHandler,org.waveprotocol.wave.client.editor.content.ContentElement)>(r5, $r10, r0);

        staticinvoke <com.google.gwt.user.client.DOM: void setEventListener(com.google.gwt.user.client.Element,com.google.gwt.user.client.EventListener)>($r8, $r9);

        goto label4;

     label3:
        $r6 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: com.google.gwt.user.client.Element castToOld(com.google.gwt.dom.client.Element)>($r1);

        specialinvoke r5.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: void removeListener(com.google.gwt.user.client.Element)>($r6);

     label4:
        return;
    }

    private static com.google.gwt.dom.client.Element createHtml(boolean)
    {
        com.google.gwt.dom.client.Element $r4, $r5;
        java.lang.Object r1, $r3;
        com.google.gwt.dom.client.Document $r0, $r2;
        boolean z0, $z1;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r3 = virtualinvoke $r2.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.AnchorElement createAnchorElement()>();

        goto label2;

     label1:
        $r0 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r3 = virtualinvoke $r0.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.SpanElement createSpanElement()>();

     label2:
        r1 = $r3;

        $z1 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isWebkit()>();

        if $z1 == 0 goto label3;

        $r4 = (com.google.gwt.dom.client.Element) $r3;

        virtualinvoke $r4.<com.google.gwt.dom.client.Element: void setAttribute(java.lang.String,java.lang.String)>("x", "y");

     label3:
        $r5 = (com.google.gwt.dom.client.Element) r1;

        return $r5;
    }

    private void maybeConvertToAnchor(org.waveprotocol.wave.client.editor.content.ContentElement, boolean)
    {
        com.google.gwt.user.client.Element $r4;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r3;
        com.google.gwt.dom.client.Element $r1, $r5;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.String $r2;
        boolean $z0, z1;

        r3 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        z1 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $r2 = virtualinvoke $r1.<com.google.gwt.dom.client.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("a");

        if $z0 == z1 goto label1;

        $r4 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: com.google.gwt.user.client.Element castToOld(com.google.gwt.dom.client.Element)>($r1);

        specialinvoke r3.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: void removeListener(com.google.gwt.user.client.Element)>($r4);

        $r5 = staticinvoke <org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: com.google.gwt.dom.client.Element createHtml(boolean)>(z1);

        staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: void replaceElement(com.google.gwt.dom.client.Element,com.google.gwt.dom.client.Element)>($r1, $r5);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void setBothNodelets(com.google.gwt.dom.client.Element)>($r5);

     label1:
        return;
    }

    public void onRemovedFromParent(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        com.google.gwt.user.client.Element $r4;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r1;
        com.google.gwt.dom.client.Element $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r0, r2;

        r1 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r0 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        if r0 == null goto label1;

        return;

     label1:
        $r3 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $r4 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: com.google.gwt.user.client.Element castToOld(com.google.gwt.dom.client.Element)>($r3);

        specialinvoke r1.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: void removeListener(com.google.gwt.user.client.Element)>($r4);

        specialinvoke r1.<org.waveprotocol.wave.client.editor.RenderingMutationHandler: void onRemovedFromParent(java.lang.Object,java.lang.Object)>(r2, r0);

        return;
    }

    private void removeListener(com.google.gwt.user.client.Element)
    {
        com.google.gwt.user.client.Element r0;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r1;
        int $i0, $i1, $i3;

        r1 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        r0 := @parameter0: com.google.gwt.user.client.Element;

        staticinvoke <com.google.gwt.user.client.DOM: void setEventListener(com.google.gwt.user.client.Element,com.google.gwt.user.client.EventListener)>(r0, null);

        $i0 = staticinvoke <com.google.gwt.user.client.DOM: int getEventsSunk(com.google.gwt.user.client.Element)>(r0);

        $i3 = (int) -126;

        $i1 = $i0 & $i3;

        staticinvoke <com.google.gwt.user.client.DOM: void sinkEvents(com.google.gwt.user.client.Element,int)>(r0, $i1);

        return;
    }

    public com.google.gwt.dom.client.Element createDomImpl(org.waveprotocol.wave.client.editor.content.Renderer$Renderable)
    {
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r3;
        org.waveprotocol.wave.client.editor.content.Renderer$Renderable r0;
        com.google.gwt.dom.client.Element $r1, $r2;

        r3 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.Renderer$Renderable;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: com.google.gwt.dom.client.Element createHtml(boolean)>(0);

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.content.Renderer$Renderable: com.google.gwt.dom.client.Element setAutoAppendContainer(com.google.gwt.dom.client.Element)>($r1);

        return $r2;
    }

    private void scheduleMutationNotification(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r3;
        org.waveprotocol.wave.client.scheduler.Scheduler $r2;
        java.util.Set $r7;
        org.waveprotocol.wave.client.scheduler.Scheduler$Priority $r6;
        org.waveprotocol.wave.client.scheduler.Scheduler$Task $r4, $r5;
        org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable $r8;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint$MutationHandler $r1;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint$MutationHandler getMutationHandler(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        if $r1 == null goto label1;

        $r7 = r3.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: java.util.Set mutatedElements>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r0);

     label1:
        $r2 = staticinvoke <org.waveprotocol.wave.client.scheduler.SchedulerInstance: org.waveprotocol.wave.client.scheduler.Scheduler get()>();

        $r4 = r3.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: org.waveprotocol.wave.client.scheduler.Scheduler$Task mutationNotificationTask>;

        $r8 = (org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable) $r4;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.client.scheduler.Scheduler: boolean isScheduled(org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable)>($r8);

        if $z0 != 0 goto label2;

        $r6 = <org.waveprotocol.wave.client.scheduler.Scheduler$Priority: org.waveprotocol.wave.client.scheduler.Scheduler$Priority MEDIUM>;

        $r5 = r3.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: org.waveprotocol.wave.client.scheduler.Scheduler$Task mutationNotificationTask>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.scheduler.Scheduler: void scheduleDelayed(org.waveprotocol.wave.client.scheduler.Scheduler$Priority,org.waveprotocol.wave.client.scheduler.Scheduler$Task,int)>($r6, $r5, 200);

     label2:
        return;
    }

    public void onDescendantsMutated(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: void scheduleMutationNotification(org.waveprotocol.wave.client.editor.content.ContentElement)>(r1);

        return;
    }

    public volatile void onRemovedFromParent(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r0;
        java.lang.Object r1, r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3, $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        $r3 = (org.waveprotocol.wave.client.editor.content.ContentElement) r2;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: void onRemovedFromParent(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentElement)>($r4, $r3);

        return;
    }

    public volatile void onAttributeModified(java.lang.Object, java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r0;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r5;
        java.lang.String r2, r3, r4;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r5 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: void onAttributeModified(org.waveprotocol.wave.client.editor.content.ContentElement,java.lang.String,java.lang.String,java.lang.String)>($r5, r2, r3, r4);

        return;
    }

    public volatile void onDescendantsMutated(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: void onDescendantsMutated(org.waveprotocol.wave.client.editor.content.ContentElement)>($r2);

        return;
    }

    public volatile void onActivationStart(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: void onActivationStart(org.waveprotocol.wave.client.editor.content.ContentElement)>($r2);

        return;
    }

    static java.util.Set access$000(org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer)
    {
        java.util.Set $r1;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: java.util.Set mutatedElements>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint$MutationHandler access$100(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint$MutationHandler $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint$MutationHandler getMutationHandler(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        return $r1;
    }

    static void access$200(org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer, org.waveprotocol.wave.client.editor.content.ContentElement, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        java.lang.String r2, r3;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: void applyAttribute(org.waveprotocol.wave.client.editor.content.ContentElement,java.lang.String,java.lang.String)>(r1, r2, r3);

        return;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: int MOUSE_LISTENER_EVENTS> = 125;

        <org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: int NOTIFY_SCHEDULE_DELAY_MS> = 200;

        return;
    }
}
