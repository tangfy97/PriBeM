public class org.apache.poi.hssf.usermodel.FontDetails extends java.lang.Object
{
    private java.lang.String _fontName;
    private int _height;
    private final java.util.Map charWidths;

    public void <init>(java.lang.String, int)
    {
        org.apache.poi.hssf.usermodel.FontDetails r0;
        int i0;
        java.util.HashMap $r1;
        java.lang.String r2;

        r0 := @this: org.apache.poi.hssf.usermodel.FontDetails;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.poi.hssf.usermodel.FontDetails: java.util.Map charWidths> = $r1;

        r0.<org.apache.poi.hssf.usermodel.FontDetails: java.lang.String _fontName> = r2;

        r0.<org.apache.poi.hssf.usermodel.FontDetails: int _height> = i0;

        return;
    }

    public java.lang.String getFontName()
    {
        org.apache.poi.hssf.usermodel.FontDetails r0;
        java.lang.String $r1;

        r0 := @this: org.apache.poi.hssf.usermodel.FontDetails;

        $r1 = r0.<org.apache.poi.hssf.usermodel.FontDetails: java.lang.String _fontName>;

        return $r1;
    }

    public int getHeight()
    {
        org.apache.poi.hssf.usermodel.FontDetails r0;
        int $i0;

        r0 := @this: org.apache.poi.hssf.usermodel.FontDetails;

        $i0 = r0.<org.apache.poi.hssf.usermodel.FontDetails: int _height>;

        return $i0;
    }

    public void addChar(char, int)
    {
        org.apache.poi.hssf.usermodel.FontDetails r0;
        java.lang.Character $r2;
        java.util.Map $r1;
        int i1;
        char c0;
        java.lang.Integer $r3;

        r0 := @this: org.apache.poi.hssf.usermodel.FontDetails;

        c0 := @parameter0: char;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.poi.hssf.usermodel.FontDetails: java.util.Map charWidths>;

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }

    public int getCharWidth(char)
    {
        org.apache.poi.hssf.usermodel.FontDetails r0;
        char c0;
        java.lang.Integer r4;
        java.lang.Character $r2;
        java.util.Map $r1;
        int $i1, $i2, $i3;
        java.lang.Object $r3;

        r0 := @this: org.apache.poi.hssf.usermodel.FontDetails;

        c0 := @parameter0: char;

        $r1 = r0.<org.apache.poi.hssf.usermodel.FontDetails: java.util.Map charWidths>;

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (java.lang.Integer) $r3;

        if r4 != null goto label3;

        $i3 = (int) c0;

        if 87 != $i3 goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i2 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.FontDetails: int getCharWidth(char)>(87);

     label2:
        return $i2;

     label3:
        $i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        return $i1;
    }

    public void addChars(char[], int[])
    {
        org.apache.poi.hssf.usermodel.FontDetails r1;
        char $c1;
        java.lang.Integer $r5;
        java.lang.Character $r3;
        int[] r4;
        java.util.Map $r2;
        int $i0, $i2, i3;
        char[] r0;

        r1 := @this: org.apache.poi.hssf.usermodel.FontDetails;

        r0 := @parameter0: char[];

        r4 := @parameter1: int[];

        i3 = 0;

     label1:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label2;

        $r2 = r1.<org.apache.poi.hssf.usermodel.FontDetails: java.util.Map charWidths>;

        $c1 = r0[i3];

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $i2 = r4[i3];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    protected static java.lang.String buildFontHeightProperty(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.String r2, $r5;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("font.");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".height");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected static java.lang.String buildFontWidthsProperty(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.String r2, $r5;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("font.");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".widths");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected static java.lang.String buildFontCharactersProperty(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.String r2, $r5;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("font.");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".characters");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static org.apache.poi.hssf.usermodel.FontDetails create(java.lang.String, java.util.Properties)
    {
        java.lang.StringBuilder $r16, $r17, $r21, $r22, $r23, $r25, $r28;
        org.apache.poi.hssf.usermodel.FontDetails $r27;
        java.lang.String[] $r9, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i6, i7, $i9, $i11;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7, $r11, $r12, $r13, $r18, $r24;
        java.util.Properties r0;
        char $c5;
        java.lang.RuntimeException $r29;
        java.lang.IllegalArgumentException $r26;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.Properties;

        $r2 = staticinvoke <org.apache.poi.hssf.usermodel.FontDetails: java.lang.String buildFontHeightProperty(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r2);

        $r4 = staticinvoke <org.apache.poi.hssf.usermodel.FontDetails: java.lang.String buildFontWidthsProperty(java.lang.String)>(r1);

        $r5 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        $r6 = staticinvoke <org.apache.poi.hssf.usermodel.FontDetails: java.lang.String buildFontCharactersProperty(java.lang.String)>(r1);

        $r7 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r6);

        if $r3 == null goto label1;

        if $r5 == null goto label1;

        if $r7 != null goto label2;

     label1:
        $r26 = new java.lang.IllegalArgumentException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The supplied FontMetrics doesn\'t know about the font \'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', so we can\'t use it. Please add it to your font metrics file (see StaticFontMetrics.getFontDetails");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r26;

     label2:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r27 = new org.apache.poi.hssf.usermodel.FontDetails;

        specialinvoke $r27.<org.apache.poi.hssf.usermodel.FontDetails: void <init>(java.lang.String,int)>(r1, $i0);

        $i9 = (int) -1;

        $r9 = staticinvoke <org.apache.poi.hssf.usermodel.FontDetails: java.lang.String[] split(java.lang.String,java.lang.String,int)>($r7, ",", $i9);

        $i11 = (int) -1;

        $r10 = staticinvoke <org.apache.poi.hssf.usermodel.FontDetails: java.lang.String[] split(java.lang.String,java.lang.String,int)>($r5, ",", $i11);

        $i2 = lengthof $r9;

        $i1 = lengthof $r10;

        if $i2 == $i1 goto label3;

        $r29 = new java.lang.RuntimeException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of characters does not number of widths for font ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18);

        throw $r29;

     label3:
        i7 = 0;

     label4:
        $i3 = lengthof $r10;

        if i7 >= $i3 goto label6;

        $r11 = $r9[i7];

        $i4 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i4 == 0 goto label5;

        $r12 = $r9[i7];

        $c5 = virtualinvoke $r12.<java.lang.String: char charAt(int)>(0);

        $r13 = $r10[i7];

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13);

        virtualinvoke $r27.<org.apache.poi.hssf.usermodel.FontDetails: void addChar(char,int)>($c5, $i6);

     label5:
        i7 = i7 + 1;

        goto label4;

     label6:
        return $r27;
    }

    public int getStringWidth(java.lang.String)
    {
        org.apache.poi.hssf.usermodel.FontDetails r1;
        int $i0, $i2, i3, i4;
        char $c1;
        java.lang.String r0;

        r1 := @this: org.apache.poi.hssf.usermodel.FontDetails;

        r0 := @parameter0: java.lang.String;

        i3 = 0;

        i4 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i4 >= $i0 goto label2;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i2 = virtualinvoke r1.<org.apache.poi.hssf.usermodel.FontDetails: int getCharWidth(char)>($c1);

        i3 = i3 + $i2;

        i4 = i4 + 1;

        goto label1;

     label2:
        return i3;
    }

    private static java.lang.String[] split(java.lang.String, java.lang.String, int)
    {
        java.lang.String[] $r9;
        java.util.StringTokenizer $r10;
        java.lang.StringBuffer $r11;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i10, $i12;
        java.lang.String r1, r2, $r3, $r4, $r6, $r7, $r8;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r10 = new java.util.StringTokenizer;

        specialinvoke $r10.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        $i0 = virtualinvoke $r10.<java.util.StringTokenizer: int countTokens()>();

        i7 = $i0;

        $i10 = (int) -1;

        if i1 == $i10 goto label1;

        if $i0 <= i1 goto label1;

        i7 = i1;

     label1:
        $r9 = newarray (java.lang.String)[i7];

        i8 = 0;

     label2:
        $z1 = virtualinvoke $r10.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label6;

        $i12 = (int) -1;

        if i1 == $i12 goto label5;

        $i2 = i7 - 1;

        if i8 != $i2 goto label5;

        $r11 = new java.lang.StringBuffer;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = i7 - i8;

        $i5 = $i3 * $i4;

        $i6 = $i5 / i7;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>(int)>($i6);

     label3:
        $z2 = virtualinvoke $r10.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label4;

        $r8 = virtualinvoke $r10.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $z0 = virtualinvoke $r10.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        goto label3;

     label4:
        $r6 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $r9[i8] = $r7;

        goto label6;

     label5:
        $r3 = virtualinvoke $r10.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $r9[i8] = $r4;

        i8 = i8 + 1;

        goto label2;

     label6:
        return $r9;
    }
}
