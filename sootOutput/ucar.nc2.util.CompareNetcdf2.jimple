public class ucar.nc2.util.CompareNetcdf2 extends java.lang.Object
{
    private java.util.Formatter f;
    private boolean showCompare;
    private boolean showEach;
    private boolean compareData;
    private static final double TOL;
    private static final float TOLF;

    public static void compareFiles(ucar.nc2.NetcdfFile, ucar.nc2.NetcdfFile, java.util.Formatter)
    {
        ucar.nc2.NetcdfFile r0, r1;
        java.util.Formatter r2;

        r0 := @parameter0: ucar.nc2.NetcdfFile;

        r1 := @parameter1: ucar.nc2.NetcdfFile;

        r2 := @parameter2: java.util.Formatter;

        staticinvoke <ucar.nc2.util.CompareNetcdf2: void compareFiles(ucar.nc2.NetcdfFile,ucar.nc2.NetcdfFile,java.util.Formatter,boolean,boolean,boolean)>(r0, r1, r2, 0, 0, 0);

        return;
    }

    public static void compareFiles(ucar.nc2.NetcdfFile, ucar.nc2.NetcdfFile, java.util.Formatter, boolean, boolean, boolean)
    {
        ucar.nc2.NetcdfFile r2, r3;
        ucar.nc2.util.CompareNetcdf2 $r0;
        java.util.Formatter r1;
        boolean z0, z1, z2;

        r2 := @parameter0: ucar.nc2.NetcdfFile;

        r3 := @parameter1: ucar.nc2.NetcdfFile;

        r1 := @parameter2: java.util.Formatter;

        z2 := @parameter3: boolean;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        $r0 = new ucar.nc2.util.CompareNetcdf2;

        specialinvoke $r0.<ucar.nc2.util.CompareNetcdf2: void <init>(java.util.Formatter,boolean,boolean,boolean)>(r1, z0, z1, z2);

        virtualinvoke $r0.<ucar.nc2.util.CompareNetcdf2: boolean compare(ucar.nc2.NetcdfFile,ucar.nc2.NetcdfFile)>(r2, r3);

        return;
    }

    public void <init>()
    {
        java.io.PrintStream $r2;
        ucar.nc2.util.CompareNetcdf2 r0;
        java.util.Formatter $r1;

        r0 := @this: ucar.nc2.util.CompareNetcdf2;

        $r1 = new java.util.Formatter;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r1.<java.util.Formatter: void <init>(java.io.PrintStream)>($r2);

        specialinvoke r0.<ucar.nc2.util.CompareNetcdf2: void <init>(java.util.Formatter,boolean,boolean,boolean)>($r1, 0, 0, 0);

        return;
    }

    public void <init>(java.util.Formatter, boolean, boolean, boolean)
    {
        ucar.nc2.util.CompareNetcdf2 r0;
        java.util.Formatter r1;
        boolean z0, z1, z2;

        r0 := @this: ucar.nc2.util.CompareNetcdf2;

        r1 := @parameter0: java.util.Formatter;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.util.CompareNetcdf2: boolean showCompare> = 0;

        r0.<ucar.nc2.util.CompareNetcdf2: boolean showEach> = 0;

        r0.<ucar.nc2.util.CompareNetcdf2: boolean compareData> = 0;

        r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f> = r1;

        r0.<ucar.nc2.util.CompareNetcdf2: boolean compareData> = z0;

        r0.<ucar.nc2.util.CompareNetcdf2: boolean showCompare> = z1;

        r0.<ucar.nc2.util.CompareNetcdf2: boolean showEach> = z2;

        return;
    }

    public boolean compare(ucar.nc2.NetcdfFile, ucar.nc2.NetcdfFile)
    {
        ucar.nc2.NetcdfFile r1, r2;
        ucar.nc2.util.CompareNetcdf2 r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: ucar.nc2.util.CompareNetcdf2;

        r1 := @parameter0: ucar.nc2.NetcdfFile;

        r2 := @parameter1: ucar.nc2.NetcdfFile;

        $z2 = r0.<ucar.nc2.util.CompareNetcdf2: boolean showCompare>;

        $z1 = r0.<ucar.nc2.util.CompareNetcdf2: boolean showEach>;

        $z0 = r0.<ucar.nc2.util.CompareNetcdf2: boolean compareData>;

        $z3 = virtualinvoke r0.<ucar.nc2.util.CompareNetcdf2: boolean compare(ucar.nc2.NetcdfFile,ucar.nc2.NetcdfFile,boolean,boolean,boolean)>(r1, r2, $z2, $z1, $z0);

        return $z3;
    }

    public boolean compare(ucar.nc2.NetcdfFile, ucar.nc2.NetcdfFile, boolean, boolean, boolean)
    {
        java.lang.Object[] $r1, $r5, $r11, $r14;
        long $l0, $l1, l2;
        java.util.Formatter $r3, $r7, $r12, $r15;
        java.lang.Long $r16;
        java.lang.Boolean $r13;
        java.lang.String $r4, $r8;
        boolean z0, z1, z2, $z3;
        ucar.nc2.util.CompareNetcdf2 r0;
        ucar.nc2.Group $r9, $r10;
        ucar.nc2.NetcdfFile r2, r6;

        r0 := @this: ucar.nc2.util.CompareNetcdf2;

        r2 := @parameter0: ucar.nc2.NetcdfFile;

        r6 := @parameter1: ucar.nc2.NetcdfFile;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        z0 := @parameter4: boolean;

        r0.<ucar.nc2.util.CompareNetcdf2: boolean compareData> = z0;

        r0.<ucar.nc2.util.CompareNetcdf2: boolean showCompare> = z1;

        r0.<ucar.nc2.util.CompareNetcdf2: boolean showEach> = z2;

        $r3 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r1 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r2.<ucar.nc2.NetcdfFile: java.lang.String getLocation()>();

        $r1[0] = $r4;

        virtualinvoke $r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("First file = %s%n", $r1);

        $r7 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r5 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke r6.<ucar.nc2.NetcdfFile: java.lang.String getLocation()>();

        $r5[0] = $r8;

        virtualinvoke $r7.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("Second file= %s%n", $r5);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r9 = virtualinvoke r2.<ucar.nc2.NetcdfFile: ucar.nc2.Group getRootGroup()>();

        $r10 = virtualinvoke r6.<ucar.nc2.NetcdfFile: ucar.nc2.Group getRootGroup()>();

        $z3 = specialinvoke r0.<ucar.nc2.util.CompareNetcdf2: boolean compareGroups(ucar.nc2.Group,ucar.nc2.Group)>($r9, $r10);

        $r12 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r11 = newarray (java.lang.Object)[1];

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        $r11[0] = $r13;

        virtualinvoke $r12.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" Files are the same = %s%n", $r11);

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = $l1 - $l0;

        $r15 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r14 = newarray (java.lang.Object)[1];

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r14[0] = $r16;

        virtualinvoke $r15.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" Time to compare = %d msecs%n", $r14);

        return $z3;
    }

    public boolean compareVariables(ucar.nc2.NetcdfFile, ucar.nc2.NetcdfFile)
    {
        java.util.Formatter $r3, $r7, $r12, $r19, $r27, $r31;
        boolean $z0, $z1, $z2, z3, $z4, $z5;
        java.util.List $r9, $r13, $r24, $r25;
        ucar.nc2.NetcdfFile r2, r6;
        java.lang.Object[] $r1, $r5, $r11, $r18, $r26, $r30;
        ucar.nc2.Variable $r17, $r23, r33, r34;
        java.lang.String $r4, $r8, $r16, $r20, $r22, $r28, $r29, $r32;
        java.util.Iterator $r10, $r14;
        ucar.nc2.util.CompareNetcdf2 r0;
        java.lang.Object $r15, $r21;

        r0 := @this: ucar.nc2.util.CompareNetcdf2;

        r2 := @parameter0: ucar.nc2.NetcdfFile;

        r6 := @parameter1: ucar.nc2.NetcdfFile;

        $r3 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r1 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r2.<ucar.nc2.NetcdfFile: java.lang.String getLocation()>();

        $r1[0] = $r4;

        virtualinvoke $r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("Original = %s%n", $r1);

        $r7 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r5 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke r6.<ucar.nc2.NetcdfFile: java.lang.String getLocation()>();

        $r5[0] = $r8;

        virtualinvoke $r7.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("CompareTo= %s%n", $r5);

        z3 = 1;

        $r9 = virtualinvoke r2.<ucar.nc2.NetcdfFile: java.util.List getVariables()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label5;

        $r21 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r33 = (ucar.nc2.Variable) $r21;

        $z1 = virtualinvoke r33.<ucar.nc2.Variable: boolean isCoordinateVariable()>();

        if $z1 == 0 goto label2;

        goto label1;

     label2:
        $r22 = virtualinvoke r33.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r23 = virtualinvoke r6.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>($r22);

        if $r23 != null goto label3;

        $r31 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r30 = newarray (java.lang.Object)[1];

        $r32 = virtualinvoke r33.<ucar.nc2.Variable: java.lang.String getName()>();

        $r30[0] = $r32;

        virtualinvoke $r31.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" MISSING \'%s\' in 2nd file%n", $r30);

        z3 = 0;

        goto label4;

     label3:
        $r24 = virtualinvoke r33.<ucar.nc2.Variable: java.util.List getDimensions()>();

        $r25 = virtualinvoke $r23.<ucar.nc2.Variable: java.util.List getDimensions()>();

        $z2 = specialinvoke r0.<ucar.nc2.util.CompareNetcdf2: boolean compare(java.util.List,java.util.List)>($r24, $r25);

        if $z2 != 0 goto label4;

        $r27 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r26 = newarray (java.lang.Object)[2];

        $r28 = virtualinvoke r33.<ucar.nc2.Variable: java.lang.String getNameAndDimensions()>();

        $r26[0] = $r28;

        $r29 = virtualinvoke $r23.<ucar.nc2.Variable: java.lang.String getNameAndDimensions()>();

        $r26[1] = $r29;

        virtualinvoke $r27.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" %s != %s%n", $r26);

     label4:
        goto label1;

     label5:
        $r12 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r11 = newarray (java.lang.Object)[0];

        virtualinvoke $r12.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n", $r11);

        $r13 = virtualinvoke r6.<ucar.nc2.NetcdfFile: java.util.List getVariables()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z5 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label9;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r34 = (ucar.nc2.Variable) $r15;

        $z0 = virtualinvoke r34.<ucar.nc2.Variable: boolean isCoordinateVariable()>();

        if $z0 == 0 goto label7;

        goto label6;

     label7:
        $r16 = virtualinvoke r34.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r17 = virtualinvoke r2.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>($r16);

        if $r17 != null goto label8;

        $r19 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r18 = newarray (java.lang.Object)[1];

        $r20 = virtualinvoke r34.<ucar.nc2.Variable: java.lang.String getName()>();

        $r18[0] = $r20;

        virtualinvoke $r19.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" MISSING \'%s\' in 1st file%n", $r18);

        z3 = 0;

     label8:
        goto label6;

     label9:
        return z3;
    }

    private boolean compare(java.util.List, java.util.List)
    {
        ucar.nc2.util.CompareNetcdf2 r6;
        java.util.List r0, r1;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object $r2, $r4;
        ucar.nc2.Dimension r3, r5;

        r6 := @this: ucar.nc2.util.CompareNetcdf2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        i5 = 0;

     label2:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i5 >= $i2 goto label4;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i5);

        r3 = (ucar.nc2.Dimension) $r2;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        r5 = (ucar.nc2.Dimension) $r4;

        $i3 = virtualinvoke r3.<ucar.nc2.Dimension: int getLength()>();

        $i4 = virtualinvoke r5.<ucar.nc2.Dimension: int getLength()>();

        if $i3 == $i4 goto label3;

        return 0;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return 1;
    }

    private boolean compareGroups(ucar.nc2.Group, ucar.nc2.Group)
    {
        java.util.Formatter $r23, $r29, $r32, $r36;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, z11, $z12, z13;
        ucar.nc2.Group r1, r3, r18, r41;
        java.util.List $r5, $r6, $r7, $r8, $r9, $r11, $r14, $r15;
        java.lang.Object[] $r22, $r28, $r31, $r35;
        java.util.ArrayList $r13;
        int $i0, $i1, i2;
        ucar.nc2.Variable $r21, $r27, r39, r40;
        java.lang.String $r2, $r4, $r20, $r24, $r26, $r30, $r33, $r34, $r37, $r38;
        java.util.Iterator $r10, $r12;
        ucar.nc2.util.CompareNetcdf2 r0;
        java.lang.Object $r16, $r17, $r19, $r25;

        r0 := @this: ucar.nc2.util.CompareNetcdf2;

        r1 := @parameter0: ucar.nc2.Group;

        r3 := @parameter1: ucar.nc2.Group;

        $z0 = r0.<ucar.nc2.util.CompareNetcdf2: boolean showCompare>;

        if $z0 == 0 goto label01;

        $r36 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r35 = newarray (java.lang.Object)[2];

        $r37 = virtualinvoke r1.<ucar.nc2.Group: java.lang.String getName()>();

        $r35[0] = $r37;

        $r38 = virtualinvoke r3.<ucar.nc2.Group: java.lang.String getName()>();

        $r35[1] = $r38;

        virtualinvoke $r36.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("compare Group %s to %s %n", $r35);

     label01:
        z10 = 1;

        $r2 = virtualinvoke r1.<ucar.nc2.Group: java.lang.String getName()>();

        $r4 = virtualinvoke r3.<ucar.nc2.Group: java.lang.String getName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label02;

        $r32 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r31 = newarray (java.lang.Object)[2];

        $r33 = virtualinvoke r1.<ucar.nc2.Group: java.lang.String getName()>();

        $r31[0] = $r33;

        $r34 = virtualinvoke r3.<ucar.nc2.Group: java.lang.String getName()>();

        $r31[1] = $r34;

        virtualinvoke $r32.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" ** names are different %s != %s %n", $r31);

        z10 = 0;

     label02:
        $r5 = virtualinvoke r1.<ucar.nc2.Group: java.util.List getDimensions()>();

        $r6 = virtualinvoke r3.<ucar.nc2.Group: java.util.List getDimensions()>();

        $z2 = specialinvoke r0.<ucar.nc2.util.CompareNetcdf2: boolean checkAll(java.util.List,java.util.List,java.util.List)>($r5, $r6, null);

        $z9 = z10 & $z2;

        $r7 = virtualinvoke r1.<ucar.nc2.Group: java.util.List getAttributes()>();

        $r8 = virtualinvoke r3.<ucar.nc2.Group: java.util.List getAttributes()>();

        $z3 = specialinvoke r0.<ucar.nc2.util.CompareNetcdf2: boolean checkAll(java.util.List,java.util.List,java.util.List)>($r7, $r8, null);

        z11 = $z9 & $z3;

        $r9 = virtualinvoke r1.<ucar.nc2.Group: java.util.List getVariables()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z12 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label06;

        $r25 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r39 = (ucar.nc2.Variable) $r25;

        $r26 = virtualinvoke r39.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r27 = virtualinvoke r3.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r26);

        if $r27 != null goto label04;

        $r29 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r28 = newarray (java.lang.Object)[1];

        $r30 = virtualinvoke r39.<ucar.nc2.Variable: java.lang.String getName()>();

        $r28[0] = $r30;

        virtualinvoke $r29.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" ** cant find variable %s in 2nd file%n", $r28);

        z11 = 0;

        goto label05;

     label04:
        $z7 = r0.<ucar.nc2.util.CompareNetcdf2: boolean compareData>;

        $z8 = virtualinvoke r0.<ucar.nc2.util.CompareNetcdf2: boolean compareVariables(ucar.nc2.Variable,ucar.nc2.Variable,boolean,boolean)>(r39, $r27, $z7, 1);

        z11 = z11 & $z8;

     label05:
        goto label03;

     label06:
        $r11 = virtualinvoke r3.<ucar.nc2.Group: java.util.List getVariables()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z4 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label09;

        $r19 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r40 = (ucar.nc2.Variable) $r19;

        $r20 = virtualinvoke r40.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r21 = virtualinvoke r1.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r20);

        if $r21 != null goto label08;

        $r23 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r22 = newarray (java.lang.Object)[1];

        $r24 = virtualinvoke r40.<ucar.nc2.Variable: java.lang.String getName()>();

        $r22[0] = $r24;

        virtualinvoke $r23.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" ** cant find variable %s in 1st file%n", $r22);

        z11 = 0;

     label08:
        goto label07;

     label09:
        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $r14 = virtualinvoke r1.<ucar.nc2.Group: java.util.List getGroups()>();

        $r15 = virtualinvoke r3.<ucar.nc2.Group: java.util.List getGroups()>();

        $z5 = specialinvoke r0.<ucar.nc2.util.CompareNetcdf2: boolean checkAll(java.util.List,java.util.List,java.util.List)>($r14, $r15, $r13);

        z13 = z11 & $z5;

        i2 = 0;

     label10:
        $i0 = interfaceinvoke $r13.<java.util.List: int size()>();

        if i2 >= $i0 goto label11;

        $r16 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i2);

        r41 = (ucar.nc2.Group) $r16;

        $i1 = i2 + 1;

        $r17 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>($i1);

        r18 = (ucar.nc2.Group) $r17;

        $z6 = specialinvoke r0.<ucar.nc2.util.CompareNetcdf2: boolean compareGroups(ucar.nc2.Group,ucar.nc2.Group)>(r41, r18);

        z13 = z13 & $z6;

        i2 = i2 + 2;

        goto label10;

     label11:
        return z13;
    }

    public boolean compareVariable(ucar.nc2.Variable, ucar.nc2.Variable)
    {
        ucar.nc2.Variable r1, r2;
        ucar.nc2.util.CompareNetcdf2 r0;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.util.CompareNetcdf2;

        r1 := @parameter0: ucar.nc2.Variable;

        r2 := @parameter1: ucar.nc2.Variable;

        $z0 = r0.<ucar.nc2.util.CompareNetcdf2: boolean compareData>;

        $z1 = virtualinvoke r0.<ucar.nc2.util.CompareNetcdf2: boolean compareVariables(ucar.nc2.Variable,ucar.nc2.Variable,boolean,boolean)>(r1, r2, $z0, 1);

        return $z1;
    }

    public boolean compareVariables(ucar.nc2.Variable, ucar.nc2.Variable, boolean, boolean)
    {
        java.util.Formatter $r17, $r21, $r25, $r32;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6, $z7, $z8, z9, $z10, $z11, $z12, $z13, $z14, z15, z16, $z17;
        java.util.List $r5, $r6, $r7, $r8, $r10, $r11, $r18, $r19;
        java.lang.Object[] $r16, $r20, $r24, $r31;
        java.io.ByteArrayOutputStream $r29;
        ucar.nc2.Structure r36, r37;
        java.util.ArrayList $r9;
        int $i0, $i1, i2;
        ucar.nc2.Variable r1, r3, r13, r15;
        java.lang.String $r2, $r4, $r22, $r23, $r26, $r27, $r33;
        java.io.PrintStream $r30;
        java.io.IOException $r28;
        ucar.nc2.util.CompareNetcdf2 r0;
        ucar.nc2.dataset.VariableEnhanced r34, r35;
        java.lang.Object $r12, $r14;

        r0 := @this: ucar.nc2.util.CompareNetcdf2;

        r1 := @parameter0: ucar.nc2.Variable;

        r3 := @parameter1: ucar.nc2.Variable;

        z5 := @parameter2: boolean;

        z9 := @parameter3: boolean;

        z15 = 1;

        $z0 = r0.<ucar.nc2.util.CompareNetcdf2: boolean showCompare>;

        if $z0 == 0 goto label01;

        $r25 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r24 = newarray (java.lang.Object)[2];

        $r26 = virtualinvoke r1.<ucar.nc2.Variable: java.lang.String getName()>();

        $r24[0] = $r26;

        $r27 = virtualinvoke r3.<ucar.nc2.Variable: java.lang.String getName()>();

        $r24[1] = $r27;

        virtualinvoke $r25.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("compare Variable %s to %s %n", $r24);

     label01:
        $r2 = virtualinvoke r1.<ucar.nc2.Variable: java.lang.String getName()>();

        $r4 = virtualinvoke r3.<ucar.nc2.Variable: java.lang.String getName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label02;

        $r21 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r20 = newarray (java.lang.Object)[2];

        $r22 = virtualinvoke r1.<ucar.nc2.Variable: java.lang.String getName()>();

        $r20[0] = $r22;

        $r23 = virtualinvoke r3.<ucar.nc2.Variable: java.lang.String getName()>();

        $r20[1] = $r23;

        virtualinvoke $r21.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" ** names are different %s != %s %n", $r20);

        z15 = 0;

     label02:
        $r5 = virtualinvoke r1.<ucar.nc2.Variable: java.util.List getDimensions()>();

        $r6 = virtualinvoke r3.<ucar.nc2.Variable: java.util.List getDimensions()>();

        $z2 = specialinvoke r0.<ucar.nc2.util.CompareNetcdf2: boolean checkAll(java.util.List,java.util.List,java.util.List)>($r5, $r6, null);

        $z13 = z15 & $z2;

        $r7 = virtualinvoke r1.<ucar.nc2.Variable: java.util.List getAttributes()>();

        $r8 = virtualinvoke r3.<ucar.nc2.Variable: java.util.List getAttributes()>();

        $z3 = specialinvoke r0.<ucar.nc2.util.CompareNetcdf2: boolean checkAll(java.util.List,java.util.List,java.util.List)>($r7, $r8, null);

        $z14 = $z13 & $z3;

        z16 = $z14;

        $z4 = r1 instanceof ucar.nc2.dataset.VariableEnhanced;

        if $z4 == 0 goto label03;

        $z11 = r3 instanceof ucar.nc2.dataset.VariableEnhanced;

        if $z11 == 0 goto label03;

        r34 = (ucar.nc2.dataset.VariableEnhanced) r1;

        r35 = (ucar.nc2.dataset.VariableEnhanced) r3;

        $r18 = interfaceinvoke r34.<ucar.nc2.dataset.VariableEnhanced: java.util.List getCoordinateSystems()>();

        $r19 = interfaceinvoke r35.<ucar.nc2.dataset.VariableEnhanced: java.util.List getCoordinateSystems()>();

        $z12 = specialinvoke r0.<ucar.nc2.util.CompareNetcdf2: boolean checkAll(java.util.List,java.util.List,java.util.List)>($r18, $r19, null);

        z16 = $z14 & $z12;

     label03:
        if z5 == 0 goto label07;

     label04:
        $z10 = r0.<ucar.nc2.util.CompareNetcdf2: boolean showCompare>;

        specialinvoke r0.<ucar.nc2.util.CompareNetcdf2: void compareVariableData(ucar.nc2.Variable,ucar.nc2.Variable,boolean,boolean)>(r1, r3, $z10, z9);

     label05:
        goto label07;

     label06:
        $r28 := @caughtexception;

        $r29 = new java.io.ByteArrayOutputStream;

        specialinvoke $r29.<java.io.ByteArrayOutputStream: void <init>(int)>(10000);

        $r30 = new java.io.PrintStream;

        specialinvoke $r30.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r29);

        virtualinvoke $r28.<java.io.IOException: void printStackTrace(java.io.PrintStream)>($r30);

        $r32 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r31 = newarray (java.lang.Object)[1];

        $r33 = virtualinvoke $r29.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        $r31[0] = $r33;

        virtualinvoke $r32.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s", $r31);

     label07:
        $z17 = r1 instanceof ucar.nc2.Structure;

        if $z17 == 0 goto label10;

        $z6 = r3 instanceof ucar.nc2.Structure;

        if $z6 != 0 goto label08;

        $r17 = r0.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = r1;

        virtualinvoke $r17.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  ** %s not Structure%n", $r16);

        z16 = 0;

        goto label10;

     label08:
        r36 = (ucar.nc2.Structure) r1;

        r37 = (ucar.nc2.Structure) r3;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = virtualinvoke r36.<ucar.nc2.Structure: java.util.List getVariables()>();

        $r11 = virtualinvoke r37.<ucar.nc2.Structure: java.util.List getVariables()>();

        $z7 = specialinvoke r0.<ucar.nc2.util.CompareNetcdf2: boolean checkAll(java.util.List,java.util.List,java.util.List)>($r10, $r11, $r9);

        z16 = z16 & $z7;

        i2 = 0;

     label09:
        $i0 = interfaceinvoke $r9.<java.util.List: int size()>();

        if i2 >= $i0 goto label10;

        $r12 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i2);

        r13 = (ucar.nc2.Variable) $r12;

        $i1 = i2 + 1;

        $r14 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>($i1);

        r15 = (ucar.nc2.Variable) $r14;

        $z8 = virtualinvoke r0.<ucar.nc2.util.CompareNetcdf2: boolean compareVariables(ucar.nc2.Variable,ucar.nc2.Variable,boolean,boolean)>(r13, r15, 0, 1);

        z16 = z16 & $z8;

        i2 = i2 + 2;

        goto label09;

     label10:
        return z16;

        catch java.io.IOException from label04 to label05 with label06;
    }

    private boolean checkContains(java.util.List, java.util.List)
    {
        java.lang.Object[] $r5;
        java.util.Iterator $r1;
        ucar.nc2.util.CompareNetcdf2 r4;
        java.util.Formatter $r6;
        java.util.List r0, r3;
        int $i0;
        java.lang.Object $r2;
        java.lang.Class $r7;
        java.lang.String $r8;
        boolean $z0, z1;

        r4 := @this: ucar.nc2.util.CompareNetcdf2;

        r3 := @parameter0: java.util.List;

        r0 := @parameter1: java.util.List;

        z1 = 1;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $i0 = interfaceinvoke r3.<java.util.List: int indexOf(java.lang.Object)>($r2);

        if $i0 >= 0 goto label2;

        $r6 = r4.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r5 = newarray (java.lang.Object)[2];

        $r7 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r5[0] = $r8;

        $r5[1] = $r2;

        virtualinvoke $r6.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  ** %s %s missing %n", $r5);

        z1 = 0;

     label2:
        goto label1;

     label3:
        return z1;
    }

    private boolean checkAll(java.util.List, java.util.List, java.util.List)
    {
        java.util.Iterator $r1, $r3;
        ucar.nc2.util.CompareNetcdf2 r5;
        java.util.List r0, r2, r6;
        java.lang.Object $r4, $r7;
        boolean $z0, $z1, $z2, $z3, z4;

        r5 := @this: ucar.nc2.util.CompareNetcdf2;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r6 := @parameter2: java.util.List;

        z4 = 1;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z3 = specialinvoke r5.<ucar.nc2.util.CompareNetcdf2: boolean checkEach(java.lang.Object,java.lang.String,java.util.List,java.lang.String,java.util.List,java.util.List)>($r7, "file1", r0, "file2", r2, r6);

        z4 = z4 & $z3;

        goto label1;

     label2:
        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z2 = specialinvoke r5.<ucar.nc2.util.CompareNetcdf2: boolean checkEach(java.lang.Object,java.lang.String,java.util.List,java.lang.String,java.util.List,java.util.List)>($r4, "file2", r2, "file1", r0, r6);

        z4 = z4 & $z2;

        goto label3;

     label4:
        return z4;
    }

    private boolean checkEach(java.lang.Object, java.lang.String, java.util.List, java.lang.String, java.util.List, java.util.List)
    {
        java.lang.Integer $r13, $r15, $r21, $r26;
        java.util.Formatter $r8, $r10, $r18, $r23, $r29;
        boolean $z0, $z1, z2;
        java.util.List r0, r3, r6;
        java.lang.Throwable $r27;
        java.lang.Object[] $r7, $r9, $r17, $r22, $r28;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r12, r14, r16, $r20, $r25, $r30;
        ucar.nc2.util.CompareNetcdf2 r5;
        java.lang.Object r1, $r2, $r4;
        java.lang.Class $r11, $r19, $r24;

        r5 := @this: ucar.nc2.util.CompareNetcdf2;

        r1 := @parameter0: java.lang.Object;

        r14 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        r16 := @parameter3: java.lang.String;

        r0 := @parameter4: java.util.List;

        r6 := @parameter5: java.util.List;

        z2 = 1;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int indexOf(java.lang.Object)>(r1);

        if $i0 >= 0 goto label2;

        $r23 = r5.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r22 = newarray (java.lang.Object)[5];

        $r24 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.String getName()>();

        $r22[0] = $r25;

        $r22[1] = r1;

        $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r22[2] = $r26;

        $r22[3] = r14;

        $r22[4] = r16;

        virtualinvoke $r23.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  ** %s %s 0x%x (%s) not in %s %n", $r22);

        z2 = 0;

        goto label6;

     label2:
        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i0);

        $i1 = interfaceinvoke r3.<java.util.List: int indexOf(java.lang.Object)>($r2);

        if $i1 >= 0 goto label3;

        $r18 = r5.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r17 = newarray (java.lang.Object)[5];

        $r19 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        $r17[0] = $r20;

        $r17[1] = $r2;

        $i4 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r17[2] = $r21;

        $r17[3] = r16;

        $r17[4] = r14;

        virtualinvoke $r18.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  ** %s %s 0x%x (%s) not in %s %n", $r17);

        z2 = 0;

        goto label6;

     label3:
        $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label4;

        $r10 = r5.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r9 = newarray (java.lang.Object)[7];

        $r11 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r9[0] = $r12;

        $r9[1] = r1;

        $i2 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r9[2] = $r13;

        $r9[3] = r14;

        $r9[4] = $r2;

        $i3 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r9[5] = $r15;

        $r9[6] = r16;

        virtualinvoke $r10.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  ** %s %s 0x%x (%s) not equal to %s 0x%x (%s) %n", $r9);

        z2 = 0;

        goto label6;

     label4:
        $z1 = r5.<ucar.nc2.util.CompareNetcdf2: boolean showEach>;

        if $z1 == 0 goto label5;

        $r8 = r5.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r1;

        $r7[1] = $r2;

        virtualinvoke $r8.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  OK <%s> equals <%s>%n", $r7);

     label5:
        if r6 == null goto label6;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r1);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r2);

     label6:
        goto label8;

     label7:
        $r27 := @caughtexception;

        virtualinvoke $r27.<java.lang.Throwable: void printStackTrace()>();

        $r29 = r5.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r28 = newarray (java.lang.Object)[1];

        $r30 = virtualinvoke $r27.<java.lang.Throwable: java.lang.String getMessage()>();

        $r28[0] = $r30;

        virtualinvoke $r29.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" *** Throwable= %s %n", $r28);

     label8:
        return z2;

        catch java.lang.Throwable from label1 to label6 with label7;
    }

    private void compareVariableData(ucar.nc2.Variable, ucar.nc2.Variable, boolean, boolean) throws java.io.IOException
    {
        java.lang.Object[] $r6, $r8;
        long $l0;
        java.util.Formatter $r7, $r9;
        java.lang.Long $r12;
        java.lang.Boolean $r11;
        ucar.nc2.Variable r0, r2;
        java.lang.String $r5, $r10;
        boolean z0, z1, $z2;
        ucar.nc2.util.CompareNetcdf2 r4;
        ucar.ma2.Array $r1, $r3;

        r4 := @this: ucar.nc2.util.CompareNetcdf2;

        r0 := @parameter0: ucar.nc2.Variable;

        r2 := @parameter1: ucar.nc2.Variable;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $r3 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        if z0 == 0 goto label1;

        $r9 = r4.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r8 = newarray (java.lang.Object)[3];

        $r10 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getNameAndDimensions()>();

        $r8[0] = $r10;

        $z2 = virtualinvoke r0.<ucar.nc2.Variable: boolean isUnlimited()>();

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r8[1] = $r11;

        $l0 = virtualinvoke $r1.<ucar.ma2.Array: long getSize()>();

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r8[2] = $r12;

        virtualinvoke $r9.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" compareArrays %s unlimited=%s size=%d%n", $r8);

     label1:
        $r5 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        virtualinvoke r4.<ucar.nc2.util.CompareNetcdf2: boolean compareData(java.lang.String,ucar.ma2.Array,ucar.ma2.Array,boolean)>($r5, $r1, $r3, z1);

        if z0 == 0 goto label2;

        $r7 = r4.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r6 = newarray (java.lang.Object)[0];

        virtualinvoke $r7.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("   ok%n", $r6);

     label2:
        return;
    }

    public boolean compareData(java.lang.String, ucar.ma2.Array, ucar.ma2.Array, boolean)
    {
        java.lang.String r1;
        ucar.nc2.util.CompareNetcdf2 r0;
        ucar.ma2.Array r2, r3;
        boolean z0, $z1;

        r0 := @this: ucar.nc2.util.CompareNetcdf2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: ucar.ma2.Array;

        r3 := @parameter2: ucar.ma2.Array;

        z0 := @parameter3: boolean;

        $z1 = specialinvoke r0.<ucar.nc2.util.CompareNetcdf2: boolean compareData(java.lang.String,ucar.ma2.Array,ucar.ma2.Array,double,boolean)>(r1, r2, r3, 1.0E-5, z0);

        return $z1;
    }

    private boolean compareData(java.lang.String, ucar.ma2.Array, ucar.ma2.Array, double, boolean)
    {
        java.lang.Integer $r34, $r35;
        byte $b2, $b3, $b4;
        java.lang.Long $r56, $r57;
        java.lang.Object[] $r19, $r26, $r32, $r38, $r44, $r50, $r54;
        long $l0, $l1, $l9, $l10;
        short $s5, $s6;
        ucar.ma2.Array r0, r1;
        java.lang.Short $r28, $r29;
        ucar.ma2.DataType $r5, $r8, $r9, $r10, $r11, $r12, $r13;
        int $i7, $i8, $i11, $i12, $i13, $i14;
        ucar.nc2.util.CompareNetcdf2 r14;
        java.lang.Class $r2, $r3, $r4, $r52, $r53;
        java.lang.Object $r15, $r17;
        java.lang.Float $r40, $r41;
        java.lang.Double $r24, $r25, $r30, $r31, $r36, $r37, $r42, $r43, $r46, $r47, $r48, $r49;
        java.lang.String r20;
        java.util.Formatter $r21, $r27, $r33, $r39, $r45, $r51, $r55;
        ucar.ma2.StructureData $r16, $r18;
        java.lang.Byte $r22, $r23;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, z19, z20, z21;
        float $f0, $f1, $f2;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31;
        ucar.ma2.IndexIterator $r6, $r7;

        r14 := @this: ucar.nc2.util.CompareNetcdf2;

        r20 := @parameter0: java.lang.String;

        r0 := @parameter1: ucar.ma2.Array;

        r1 := @parameter2: ucar.ma2.Array;

        d0 := @parameter3: double;

        z2 := @parameter4: boolean;

        z19 = 1;

        z21 = 1;

        z20 = 1;

        $l0 = virtualinvoke r0.<ucar.ma2.Array: long getSize()>();

        $l1 = virtualinvoke r1.<ucar.ma2.Array: long getSize()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label01;

        $r55 = r14.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r54 = newarray (java.lang.Object)[3];

        $r54[0] = r20;

        $l9 = virtualinvoke r0.<ucar.ma2.Array: long getSize()>();

        $r56 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l9);

        $r54[1] = $r56;

        $l10 = virtualinvoke r1.<ucar.ma2.Array: long getSize()>();

        $r57 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l10);

        $r54[2] = $r57;

        virtualinvoke $r55.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" DIFF %s: size %d !== %d%n", $r54);

        z19 = 0;

        z21 = 0;

        z20 = 0;

     label01:
        $r2 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r3 = virtualinvoke r1.<ucar.ma2.Array: java.lang.Class getElementType()>();

        if $r2 == $r3 goto label02;

        $r51 = r14.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r50 = newarray (java.lang.Object)[3];

        $r50[0] = r20;

        $r52 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r50[1] = $r52;

        $r53 = virtualinvoke r1.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r50[2] = $r53;

        virtualinvoke $r51.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" DIFF %s: element type %s !== %s%n", $r50);

        z19 = 0;

        z21 = 0;

        z20 = 0;

     label02:
        if z21 != 0 goto label03;

        return 0;

     label03:
        $r4 = virtualinvoke r0.<ucar.ma2.Array: java.lang.Class getElementType()>();

        $r5 = staticinvoke <ucar.ma2.DataType: ucar.ma2.DataType getType(java.lang.Class)>($r4);

        $r6 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r7 = virtualinvoke r1.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if $r5 != $r8 goto label07;

     label04:
        $z14 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z14 == 0 goto label22;

        $z15 = interfaceinvoke $r7.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z15 == 0 goto label22;

        $d28 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $d29 = interfaceinvoke $r7.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $z16 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d28);

        if $z16 == 0 goto label05;

        $z18 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d29);

        if $z18 != 0 goto label06;

     label05:
        $z17 = staticinvoke <ucar.nc2.util.CompareNetcdf2: boolean closeEnough(double,double,double)>($d28, $d29, d0);

        if $z17 != 0 goto label06;

        $r45 = r14.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r44 = newarray (java.lang.Object)[6];

        $r44[0] = r20;

        $r46 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d28);

        $r44[1] = $r46;

        $r47 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d29);

        $r44[2] = $r47;

        $r44[3] = $r6;

        $d30 = staticinvoke <ucar.nc2.util.CompareNetcdf2: double diff(double,double)>($d28, $d29);

        $r48 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d30);

        $r44[4] = $r48;

        $d31 = staticinvoke <ucar.nc2.util.CompareNetcdf2: double pdiff(double,double)>($d28, $d29);

        $r49 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d31);

        $r44[5] = $r49;

        virtualinvoke $r45.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" DIFF %s: %f != %f count=%s diff = %f pdiff = %f %n", $r44);

        z19 = 0;

        z20 = 0;

        if z2 == 0 goto label06;

        goto label22;

     label06:
        goto label04;

     label07:
        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if $r5 != $r9 goto label11;

     label08:
        $z9 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z9 == 0 goto label22;

        $z10 = interfaceinvoke $r7.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z10 == 0 goto label22;

        $f0 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: float getFloatNext()>();

        $f1 = interfaceinvoke $r7.<ucar.ma2.IndexIterator: float getFloatNext()>();

        $z11 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z11 == 0 goto label09;

        $z13 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f1);

        if $z13 != 0 goto label10;

     label09:
        $d21 = (double) $f0;

        $d20 = (double) $f1;

        $f2 = (float) d0;

        $d19 = (double) $f2;

        $z12 = staticinvoke <ucar.nc2.util.CompareNetcdf2: boolean closeEnough(double,double,double)>($d21, $d20, $d19);

        if $z12 != 0 goto label10;

        $r39 = r14.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r38 = newarray (java.lang.Object)[6];

        $r38[0] = r20;

        $r40 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r38[1] = $r40;

        $r41 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        $r38[2] = $r41;

        $r38[3] = $r6;

        $d23 = (double) $f0;

        $d22 = (double) $f1;

        $d24 = staticinvoke <ucar.nc2.util.CompareNetcdf2: double diff(double,double)>($d23, $d22);

        $r42 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d24);

        $r38[4] = $r42;

        $d26 = (double) $f0;

        $d25 = (double) $f1;

        $d27 = staticinvoke <ucar.nc2.util.CompareNetcdf2: double pdiff(double,double)>($d26, $d25);

        $r43 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d27);

        $r38[5] = $r43;

        virtualinvoke $r39.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" DIFF %s: %f != %f count=%s diff = %f pdiff = %f %n", $r38);

        z19 = 0;

        z20 = 0;

        if z2 == 0 goto label10;

        goto label22;

     label10:
        goto label08;

     label11:
        $r10 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if $r5 != $r10 goto label14;

     label12:
        $z7 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z7 == 0 goto label22;

        $z8 = interfaceinvoke $r7.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z8 == 0 goto label22;

        $i7 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: int getIntNext()>();

        $i8 = interfaceinvoke $r7.<ucar.ma2.IndexIterator: int getIntNext()>();

        if $i7 == $i8 goto label13;

        $r33 = r14.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r32 = newarray (java.lang.Object)[6];

        $r32[0] = r20;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r32[1] = $r34;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r32[2] = $r35;

        $r32[3] = $r6;

        $d14 = (double) $i7;

        $d13 = (double) $i8;

        $d15 = staticinvoke <ucar.nc2.util.CompareNetcdf2: double diff(double,double)>($d14, $d13);

        $r36 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d15);

        $r32[4] = $r36;

        $d17 = (double) $i7;

        $d16 = (double) $i8;

        $d18 = staticinvoke <ucar.nc2.util.CompareNetcdf2: double pdiff(double,double)>($d17, $d16);

        $r37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d18);

        $r32[5] = $r37;

        virtualinvoke $r33.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" DIFF %s: %d != %d count=%s diff = %f pdiff = %f %n", $r32);

        z19 = 0;

        z20 = 0;

        if z2 == 0 goto label13;

        goto label22;

     label13:
        goto label12;

     label14:
        $r11 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if $r5 != $r11 goto label17;

     label15:
        $z5 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z5 == 0 goto label22;

        $z6 = interfaceinvoke $r7.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z6 == 0 goto label22;

        $s5 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: short getShortNext()>();

        $s6 = interfaceinvoke $r7.<ucar.ma2.IndexIterator: short getShortNext()>();

        $i11 = (int) $s5;

        $i12 = (int) $s6;

        if $i11 == $i12 goto label16;

        $r27 = r14.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r26 = newarray (java.lang.Object)[6];

        $r26[0] = r20;

        $r28 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s5);

        $r26[1] = $r28;

        $r29 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s6);

        $r26[2] = $r29;

        $r26[3] = $r6;

        $d8 = (double) $s5;

        $d7 = (double) $s6;

        $d9 = staticinvoke <ucar.nc2.util.CompareNetcdf2: double diff(double,double)>($d8, $d7);

        $r30 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d9);

        $r26[4] = $r30;

        $d11 = (double) $s5;

        $d10 = (double) $s6;

        $d12 = staticinvoke <ucar.nc2.util.CompareNetcdf2: double pdiff(double,double)>($d11, $d10);

        $r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d12);

        $r26[5] = $r31;

        virtualinvoke $r27.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" DIFF %s: %d != %d count=%s diff = %f pdiff = %f %n", $r26);

        z19 = 0;

        z20 = 0;

        if z2 == 0 goto label16;

        goto label22;

     label16:
        goto label15;

     label17:
        $r12 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if $r5 != $r12 goto label20;

     label18:
        $z3 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z3 == 0 goto label22;

        $z4 = interfaceinvoke $r7.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z4 == 0 goto label22;

        $b3 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: byte getByteNext()>();

        $b4 = interfaceinvoke $r7.<ucar.ma2.IndexIterator: byte getByteNext()>();

        $i13 = (int) $b3;

        $i14 = (int) $b4;

        if $i13 == $i14 goto label19;

        $r21 = r14.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r19 = newarray (java.lang.Object)[6];

        $r19[0] = r20;

        $r22 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b3);

        $r19[1] = $r22;

        $r23 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b4);

        $r19[2] = $r23;

        $r19[3] = $r6;

        $d2 = (double) $b3;

        $d1 = (double) $b4;

        $d3 = staticinvoke <ucar.nc2.util.CompareNetcdf2: double diff(double,double)>($d2, $d1);

        $r24 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $r19[4] = $r24;

        $d5 = (double) $b3;

        $d4 = (double) $b4;

        $d6 = staticinvoke <ucar.nc2.util.CompareNetcdf2: double pdiff(double,double)>($d5, $d4);

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        $r19[5] = $r25;

        virtualinvoke $r21.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" DIFF %s: %d != %d count=%s diff = %f pdiff = %f %n", $r19);

        z19 = 0;

        z20 = 0;

        if z2 == 0 goto label19;

        goto label22;

     label19:
        goto label18;

     label20:
        $r13 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if $r5 != $r13 goto label22;

     label21:
        $z0 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label22;

        $z1 = interfaceinvoke $r7.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label22;

        $r15 = interfaceinvoke $r6.<ucar.ma2.IndexIterator: java.lang.Object next()>();

        $r16 = (ucar.ma2.StructureData) $r15;

        $r17 = interfaceinvoke $r7.<ucar.ma2.IndexIterator: java.lang.Object next()>();

        $r18 = (ucar.ma2.StructureData) $r17;

        virtualinvoke r14.<ucar.nc2.util.CompareNetcdf2: boolean compareStructureData(ucar.ma2.StructureData,ucar.ma2.StructureData,double,boolean)>($r16, $r18, d0, z2);

        goto label21;

     label22:
        return z20;
    }

    public boolean compareStructureData(ucar.ma2.StructureData, ucar.ma2.StructureData, double, boolean)
    {
        java.lang.Integer $r20, $r22;
        ucar.ma2.StructureMembers$Member r9, $r12;
        java.util.Formatter $r18;
        ucar.ma2.StructureData r0, r2;
        boolean $z0, z1, $z2, z3, $z4;
        java.util.List $r4, $r5, $r6, $r19, $r21;
        ucar.ma2.StructureMembers $r1, $r3;
        java.lang.Object[] $r17;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r10, $r11, $r16;
        double d0;
        java.util.Iterator $r7;
        ucar.nc2.util.CompareNetcdf2 r15;
        ucar.ma2.Array $r13, $r14;
        java.lang.Object $r8;

        r15 := @this: ucar.nc2.util.CompareNetcdf2;

        r0 := @parameter0: ucar.ma2.StructureData;

        r2 := @parameter1: ucar.ma2.StructureData;

        d0 := @parameter2: double;

        z1 := @parameter3: boolean;

        z3 = 1;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureData: ucar.ma2.StructureMembers getStructureMembers()>();

        $r3 = virtualinvoke r2.<ucar.ma2.StructureData: ucar.ma2.StructureMembers getStructureMembers()>();

        $r4 = virtualinvoke $r1.<ucar.ma2.StructureMembers: java.util.List getMembers()>();

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = virtualinvoke $r3.<ucar.ma2.StructureMembers: java.util.List getMembers()>();

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        $r18 = r15.<ucar.nc2.util.CompareNetcdf2: java.util.Formatter f>;

        $r17 = newarray (java.lang.Object)[2];

        $r19 = virtualinvoke $r1.<ucar.ma2.StructureMembers: java.util.List getMembers()>();

        $i2 = interfaceinvoke $r19.<java.util.List: int size()>();

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r17[0] = $r20;

        $r21 = virtualinvoke $r3.<ucar.ma2.StructureMembers: java.util.List getMembers()>();

        $i3 = interfaceinvoke $r21.<java.util.List: int size()>();

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r17[1] = $r22;

        virtualinvoke $r18.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" size %d !== %d%n", $r17);

        z3 = 0;

     label1:
        $r6 = virtualinvoke $r1.<ucar.ma2.StructureMembers: java.util.List getMembers()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z4 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label4;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (ucar.ma2.StructureMembers$Member) $r8;

        $r10 = virtualinvoke r9.<ucar.ma2.StructureMembers$Member: java.lang.String getName()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("time");

        if $z0 == 0 goto label3;

        goto label2;

     label3:
        $r11 = virtualinvoke r9.<ucar.ma2.StructureMembers$Member: java.lang.String getName()>();

        $r12 = virtualinvoke $r3.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>($r11);

        $r13 = virtualinvoke r0.<ucar.ma2.StructureData: ucar.ma2.Array getArray(ucar.ma2.StructureMembers$Member)>(r9);

        $r14 = virtualinvoke r2.<ucar.ma2.StructureData: ucar.ma2.Array getArray(ucar.ma2.StructureMembers$Member)>($r12);

        $r16 = virtualinvoke r9.<ucar.ma2.StructureMembers$Member: java.lang.String getName()>();

        $z2 = specialinvoke r15.<ucar.nc2.util.CompareNetcdf2: boolean compareData(java.lang.String,ucar.ma2.Array,ucar.ma2.Array,double,boolean)>($r16, $r13, $r14, d0, z1);

        z3 = z3 & $z2;

        goto label2;

     label4:
        return z3;
    }

    public static boolean closeEnoughP(double, double)
    {
        byte $b0, $b1, $b2;
        int $i3, $i4, $i5;
        double d0, $d1, d2, $d3, $d4, $d5, $d6, $d7;
        boolean $z0, $z1;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $b0 = $d1 cmpg 1.0E-5;

        $i3 = (int) $b0;

        if $i3 >= 0 goto label3;

        $d6 = d0 - d2;

        $d7 = staticinvoke <java.lang.Math: double abs(double)>($d6);

        $b2 = $d7 cmpg 1.0E-5;

        $i4 = (int) $b2;

        if $i4 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $d3 = d0 - d2;

        $d4 = $d3 / d0;

        $d5 = staticinvoke <java.lang.Math: double abs(double)>($d4);

        $b1 = $d5 cmpg 1.0E-5;

        $i5 = (int) $b1;

        if $i5 >= 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    public static boolean closeEnough(double, double)
    {
        byte $b0;
        int $i1;
        double d0, d1, $d2, $d3;
        boolean $z0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = d0 - d1;

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $b0 = $d3 cmpg 1.0E-5;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean closeEnough(double, double, double)
    {
        byte $b0;
        int $i1;
        double d0, d1, $d2, $d3, d4;
        boolean $z0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d4 := @parameter2: double;

        $d2 = d0 - d1;

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $b0 = $d3 cmpg d4;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean closeEnoughP(double, double, double)
    {
        byte $b0, $b1, $b2;
        int $i3, $i4, $i5;
        double d0, $d1, d2, d3, $d4, $d5, $d6, $d7, $d8;
        boolean $z0, $z1;

        d0 := @parameter0: double;

        d3 := @parameter1: double;

        d2 := @parameter2: double;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $b0 = $d1 cmpg d2;

        $i3 = (int) $b0;

        if $i3 >= 0 goto label3;

        $d7 = d0 - d3;

        $d8 = staticinvoke <java.lang.Math: double abs(double)>($d7);

        $b2 = $d8 cmpg d2;

        $i4 = (int) $b2;

        if $i4 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $d4 = d0 - d3;

        $d5 = $d4 / d0;

        $d6 = staticinvoke <java.lang.Math: double abs(double)>($d5);

        $b1 = $d6 cmpg d2;

        $i5 = (int) $b1;

        if $i5 >= 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    public static double diff(double, double)
    {
        double d0, d1, $d2, $d3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = d0 - d1;

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        return $d3;
    }

    public static double pdiff(double, double)
    {
        double d0, d1, $d2, $d3, $d4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = d0 - d1;

        $d3 = $d2 / d0;

        $d4 = staticinvoke <java.lang.Math: double abs(double)>($d3);

        return $d4;
    }

    public static boolean closeEnough(float, float)
    {
        byte $b0;
        int $i1;
        float f0, f1, $f2, $f3;
        boolean $z0;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = f0 - f1;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        $b0 = $f3 cmpg 1.0E-5F;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean closeEnoughP(float, float)
    {
        byte $b0, $b1, $b2;
        int $i3, $i4, $i5;
        boolean $z0, $z1;
        float f0, $f1, f2, $f3, $f4, $f5, $f6, $f7;

        f0 := @parameter0: float;

        f2 := @parameter1: float;

        $f1 = staticinvoke <java.lang.Math: float abs(float)>(f0);

        $b0 = $f1 cmpg 1.0E-5F;

        $i3 = (int) $b0;

        if $i3 >= 0 goto label3;

        $f6 = f0 - f2;

        $f7 = staticinvoke <java.lang.Math: float abs(float)>($f6);

        $b2 = $f7 cmpg 1.0E-5F;

        $i4 = (int) $b2;

        if $i4 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $f3 = f0 - f2;

        $f4 = $f3 / f0;

        $f5 = staticinvoke <java.lang.Math: float abs(float)>($f4);

        $b1 = $f5 cmpg 1.0E-5F;

        $i5 = (int) $b1;

        if $i5 >= 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        java.io.PrintStream $r3;
        java.lang.String[] r4;
        ucar.nc2.NetcdfFile $r0, $r1;
        java.util.Formatter $r2;

        r4 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <ucar.nc2.dataset.NetcdfDataset: ucar.nc2.NetcdfFile openFile(java.lang.String,ucar.nc2.util.CancelTask)>("dods://thredds.cise-nsf.gov:8080/thredds/dodsC/satellite/SFC-T/SUPER-NATIONAL_1km/20090516/SUPER-NATIONAL_1km_SFC-T_20090516_2200.gini", null);

        $r1 = staticinvoke <ucar.nc2.dataset.NetcdfDataset: ucar.nc2.NetcdfFile openFile(java.lang.String,ucar.nc2.util.CancelTask)>("dods://motherlode.ucar.edu:8080/thredds/dodsC/satellite/SFC-T/SUPER-NATIONAL_1km/20090516/SUPER-NATIONAL_1km_SFC-T_20090516_2200.gini", null);

        $r2 = new java.util.Formatter;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r2.<java.util.Formatter: void <init>(java.io.PrintStream)>($r3);

        staticinvoke <ucar.nc2.util.CompareNetcdf2: void compareFiles(ucar.nc2.NetcdfFile,ucar.nc2.NetcdfFile,java.util.Formatter,boolean,boolean,boolean)>($r0, $r1, $r2, 0, 1, 0);

        return;
    }

    public static void <clinit>()
    {
        <ucar.nc2.util.CompareNetcdf2: float TOLF> = 1.0E-5F;

        <ucar.nc2.util.CompareNetcdf2: double TOL> = 1.0E-5;

        return;
    }
}
