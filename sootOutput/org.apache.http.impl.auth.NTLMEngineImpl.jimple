final class org.apache.http.impl.auth.NTLMEngineImpl extends java.lang.Object implements org.apache.http.impl.auth.NTLMEngine
{
    protected static final int FLAG_REQUEST_UNICODE_ENCODING;
    protected static final int FLAG_REQUEST_TARGET;
    protected static final int FLAG_REQUEST_SIGN;
    protected static final int FLAG_REQUEST_SEAL;
    protected static final int FLAG_REQUEST_LAN_MANAGER_KEY;
    protected static final int FLAG_REQUEST_NTLMv1;
    protected static final int FLAG_DOMAIN_PRESENT;
    protected static final int FLAG_WORKSTATION_PRESENT;
    protected static final int FLAG_REQUEST_ALWAYS_SIGN;
    protected static final int FLAG_REQUEST_NTLM2_SESSION;
    protected static final int FLAG_REQUEST_VERSION;
    protected static final int FLAG_TARGETINFO_PRESENT;
    protected static final int FLAG_REQUEST_128BIT_KEY_EXCH;
    protected static final int FLAG_REQUEST_EXPLICIT_KEY_EXCH;
    protected static final int FLAG_REQUEST_56BIT_ENCRYPTION;
    private static final java.security.SecureRandom RND_GEN;
    static final java.lang.String DEFAULT_CHARSET;
    private java.lang.String credentialCharset;
    private static byte[] SIGNATURE;

    void <init>()
    {
        org.apache.http.impl.auth.NTLMEngineImpl r0;

        r0 := @this: org.apache.http.impl.auth.NTLMEngineImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String credentialCharset> = "ASCII";

        return;
    }

    final java.lang.String getResponseFor(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] $r8, $r10;
        org.apache.http.impl.auth.NTLMEngineImpl$Type2Message $r5;
        int $i0;
        java.lang.String r0, r2, r3, $r4, r6, r7, $r9, r11;
        org.apache.http.impl.auth.NTLMEngineImpl r1;
        boolean $z0;

        r1 := @this: org.apache.http.impl.auth.NTLMEngineImpl;

        r0 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        if r0 == null goto label1;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

     label1:
        r11 = virtualinvoke r1.<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType1Message(java.lang.String,java.lang.String)>(r2, r3);

        goto label3;

     label2:
        $r5 = new org.apache.http.impl.auth.NTLMEngineImpl$Type2Message;

        specialinvoke $r5.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: void <init>(java.lang.String)>(r0);

        $r8 = virtualinvoke $r5.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] getChallenge()>();

        $i0 = virtualinvoke $r5.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: int getFlags()>();

        $r9 = virtualinvoke $r5.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: java.lang.String getTarget()>();

        $r10 = virtualinvoke $r5.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] getTargetInfo()>();

        r11 = virtualinvoke r1.<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>(r6, r7, r2, r3, $r8, $i0, $r9, $r10);

     label3:
        return r11;
    }

    java.lang.String getType1Message(java.lang.String, java.lang.String) throws org.apache.http.impl.auth.NTLMEngineException
    {
        org.apache.http.impl.auth.NTLMEngineImpl$Type1Message $r0;
        java.lang.String r1, r2, $r3;
        org.apache.http.impl.auth.NTLMEngineImpl r4;

        r4 := @this: org.apache.http.impl.auth.NTLMEngineImpl;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r0 = new org.apache.http.impl.auth.NTLMEngineImpl$Type1Message;

        specialinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type1Message: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        $r3 = virtualinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type1Message: java.lang.String getResponse()>();

        return $r3;
    }

    java.lang.String getType3Message(java.lang.String, java.lang.String, java.lang.String, java.lang.String, byte[], int, java.lang.String, byte[]) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] r5, r7;
        org.apache.http.impl.auth.NTLMEngineImpl$Type3Message $r0;
        int i0;
        java.lang.String r1, r2, r3, r4, r6, $r8;
        org.apache.http.impl.auth.NTLMEngineImpl r9;

        r9 := @this: org.apache.http.impl.auth.NTLMEngineImpl;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        r5 := @parameter4: byte[];

        i0 := @parameter5: int;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: byte[];

        $r0 = new org.apache.http.impl.auth.NTLMEngineImpl$Type3Message;

        specialinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>(r1, r2, r3, r4, r5, i0, r6, r7);

        $r8 = virtualinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type3Message: java.lang.String getResponse()>();

        return $r8;
    }

    java.lang.String getCredentialCharset()
    {
        java.lang.String $r1;
        org.apache.http.impl.auth.NTLMEngineImpl r0;

        r0 := @this: org.apache.http.impl.auth.NTLMEngineImpl;

        $r1 = r0.<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String credentialCharset>;

        return $r1;
    }

    void setCredentialCharset(java.lang.String)
    {
        java.lang.String r1;
        org.apache.http.impl.auth.NTLMEngineImpl r0;

        r0 := @this: org.apache.http.impl.auth.NTLMEngineImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String credentialCharset> = r1;

        return;
    }

    private static java.lang.String stripDotSuffix(java.lang.String)
    {
        int $i0, $i2;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(".");

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r1;

     label1:
        return r0;
    }

    private static java.lang.String convertHost(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String stripDotSuffix(java.lang.String)>(r0);

        return $r1;
    }

    private static java.lang.String convertDomain(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String stripDotSuffix(java.lang.String)>(r0);

        return $r1;
    }

    private static int readULong(byte[], int) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] r0;
        org.apache.http.impl.auth.NTLMEngineException $r2;
        short $s6, $s8, $s11, $s16, $s20, $s21, $s24, $s26;
        byte $b3, $b5, $b10, $b15;
        int i0, $i1, $i2, $i4, $i7, $i9, $i12, $i13, $i14, $i17, $i18, $i19, $i22, $i23, $i25, $i27;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i2 = lengthof r0;

        $i1 = i0 + 4;

        if $i2 >= $i1 goto label1;

        $r2 = new org.apache.http.impl.auth.NTLMEngineException;

        specialinvoke $r2.<org.apache.http.impl.auth.NTLMEngineException: void <init>(java.lang.String)>("NTLM authentication - buffer too small for DWORD");

        throw $r2;

     label1:
        $b3 = r0[i0];

        $s20 = (short) $b3;

        $s8 = $s20 & 255;

        $i4 = i0 + 1;

        $b5 = r0[$i4];

        $s21 = (short) $b5;

        $s6 = $s21 & 255;

        $i22 = (int) $s6;

        $i7 = $i22 << 8;

        $i23 = (int) $s8;

        $i13 = $i23 | $i7;

        $i9 = i0 + 2;

        $b10 = r0[$i9];

        $s24 = (short) $b10;

        $s11 = $s24 & 255;

        $i25 = (int) $s11;

        $i12 = $i25 << 16;

        $i18 = $i13 | $i12;

        $i14 = i0 + 3;

        $b15 = r0[$i14];

        $s26 = (short) $b15;

        $s16 = $s26 & 255;

        $i27 = (int) $s16;

        $i17 = $i27 << 24;

        $i19 = $i18 | $i17;

        return $i19;
    }

    private static int readUShort(byte[], int) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] r0;
        org.apache.http.impl.auth.NTLMEngineException $r2;
        short $s6, $s8, $s10, $s11;
        byte $b3, $b5;
        int i0, $i1, $i2, $i4, $i7, $i9, $i12, $i13;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i2 = lengthof r0;

        $i1 = i0 + 2;

        if $i2 >= $i1 goto label1;

        $r2 = new org.apache.http.impl.auth.NTLMEngineException;

        specialinvoke $r2.<org.apache.http.impl.auth.NTLMEngineException: void <init>(java.lang.String)>("NTLM authentication - buffer too small for WORD");

        throw $r2;

     label1:
        $b3 = r0[i0];

        $s10 = (short) $b3;

        $s8 = $s10 & 255;

        $i4 = i0 + 1;

        $b5 = r0[$i4];

        $s11 = (short) $b5;

        $s6 = $s11 & 255;

        $i12 = (int) $s6;

        $i7 = $i12 << 8;

        $i13 = (int) $s8;

        $i9 = $i13 | $i7;

        return $i9;
    }

    private static byte[] readSecurityBuffer(byte[], int) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] r0, r1;
        org.apache.http.impl.auth.NTLMEngineException $r2;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: int readUShort(byte[],int)>(r0, i0);

        $i2 = i0 + 4;

        $i3 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: int readULong(byte[],int)>(r0, $i2);

        $i5 = lengthof r0;

        $i4 = $i3 + $i1;

        if $i5 >= $i4 goto label1;

        $r2 = new org.apache.http.impl.auth.NTLMEngineException;

        specialinvoke $r2.<org.apache.http.impl.auth.NTLMEngineException: void <init>(java.lang.String)>("NTLM authentication - buffer too small for data item");

        throw $r2;

     label1:
        r1 = newarray (byte)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i3, r1, 0, $i1);

        return r1;
    }

    private static byte[] makeRandomChallenge() throws org.apache.http.impl.auth.NTLMEngineException
    {
        java.security.SecureRandom $r0, $r2, $r3;
        java.lang.Throwable $r5;
        byte[] r1;
        org.apache.http.impl.auth.NTLMEngineException $r4;

        $r0 = <org.apache.http.impl.auth.NTLMEngineImpl: java.security.SecureRandom RND_GEN>;

        if $r0 != null goto label1;

        $r4 = new org.apache.http.impl.auth.NTLMEngineException;

        specialinvoke $r4.<org.apache.http.impl.auth.NTLMEngineException: void <init>(java.lang.String)>("Random generator not available");

        throw $r4;

     label1:
        r1 = newarray (byte)[8];

        $r2 = <org.apache.http.impl.auth.NTLMEngineImpl: java.security.SecureRandom RND_GEN>;

        entermonitor $r2;

     label2:
        $r3 = <org.apache.http.impl.auth.NTLMEngineImpl: java.security.SecureRandom RND_GEN>;

        virtualinvoke $r3.<java.security.SecureRandom: void nextBytes(byte[])>(r1);

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r5;

     label6:
        return r1;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static byte[] makeSecondaryKey() throws org.apache.http.impl.auth.NTLMEngineException
    {
        java.security.SecureRandom $r0, $r2, $r3;
        java.lang.Throwable $r5;
        byte[] r1;
        org.apache.http.impl.auth.NTLMEngineException $r4;

        $r0 = <org.apache.http.impl.auth.NTLMEngineImpl: java.security.SecureRandom RND_GEN>;

        if $r0 != null goto label1;

        $r4 = new org.apache.http.impl.auth.NTLMEngineException;

        specialinvoke $r4.<org.apache.http.impl.auth.NTLMEngineException: void <init>(java.lang.String)>("Random generator not available");

        throw $r4;

     label1:
        r1 = newarray (byte)[16];

        $r2 = <org.apache.http.impl.auth.NTLMEngineImpl: java.security.SecureRandom RND_GEN>;

        entermonitor $r2;

     label2:
        $r3 = <org.apache.http.impl.auth.NTLMEngineImpl: java.security.SecureRandom RND_GEN>;

        virtualinvoke $r3.<java.security.SecureRandom: void nextBytes(byte[])>(r1);

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r5;

     label6:
        return r1;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    static byte[] hmacMD5(byte[], byte[]) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] r1, r2, $r3;
        org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5 $r0;

        r2 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        $r0 = new org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5;

        specialinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>(r1);

        virtualinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>(r2);

        $r3 = virtualinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: byte[] getOutput()>();

        return $r3;
    }

    static byte[] RC4(byte[], byte[]) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] r2, r3, $r4;
        javax.crypto.spec.SecretKeySpec $r1;
        org.apache.http.impl.auth.NTLMEngineException $r6;
        javax.crypto.Cipher $r0;
        java.lang.Exception $r5;
        java.lang.String $r7;

        r3 := @parameter0: byte[];

        r2 := @parameter1: byte[];

     label1:
        $r0 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RC4");

        $r1 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, "RC4");

        virtualinvoke $r0.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r1);

        $r4 = virtualinvoke $r0.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.http.impl.auth.NTLMEngineException;

        $r7 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r6.<org.apache.http.impl.auth.NTLMEngineException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r5);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static byte[] ntlm2SessionResponse(byte[], byte[], byte[]) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] r1, r2, $r3, r4, r5, $r6;
        java.security.MessageDigest $r0;
        org.apache.http.impl.auth.NTLMEngineException $r8, $r10;
        java.lang.Exception $r7;
        java.lang.String $r9;
        boolean $z0;

        r5 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

     label1:
        $r0 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        virtualinvoke $r0.<java.security.MessageDigest: void update(byte[])>(r1);

        virtualinvoke $r0.<java.security.MessageDigest: void update(byte[])>(r2);

        $r3 = virtualinvoke $r0.<java.security.MessageDigest: byte[] digest()>();

        r4 = newarray (byte)[8];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r4, 0, 8);

        $r6 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>(r5, r4);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $z0 = $r7 instanceof org.apache.http.impl.auth.NTLMEngineException;

        if $z0 == 0 goto label4;

        $r10 = (org.apache.http.impl.auth.NTLMEngineException) $r7;

        throw $r10;

     label4:
        $r8 = new org.apache.http.impl.auth.NTLMEngineException;

        $r9 = virtualinvoke $r7.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r8.<org.apache.http.impl.auth.NTLMEngineException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r7);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static byte[] lmHash(java.lang.String) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] $r3, r4, $r8, $r10, $r11, r12;
        org.apache.http.impl.auth.NTLMEngineException $r14;
        javax.crypto.Cipher $r9;
        java.util.Locale $r1;
        int $i0, $i1;
        java.lang.String r0, $r2, $r7, $r15;
        java.lang.Exception $r13;
        java.security.Key $r5, $r6;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = <java.util.Locale: java.util.Locale US>;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        $i0 = lengthof $r3;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 14);

        r4 = newarray (byte)[14];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r4, 0, $i1);

        $r5 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: java.security.Key createDESKey(byte[],int)>(r4, 0);

        $r6 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: java.security.Key createDESKey(byte[],int)>(r4, 7);

        $r7 = "KGS!@#$%";

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        $r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DES/ECB/NoPadding");

        virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r5);

        $r10 = virtualinvoke $r9.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r8);

        virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r6);

        $r11 = virtualinvoke $r9.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r8);

        r12 = newarray (byte)[16];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, r12, 0, 8);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r12, 8, 8);

     label2:
        return r12;

     label3:
        $r13 := @caughtexception;

        $r14 = new org.apache.http.impl.auth.NTLMEngineException;

        $r15 = virtualinvoke $r13.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r14.<org.apache.http.impl.auth.NTLMEngineException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r13);

        throw $r14;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static byte[] ntlmHash(java.lang.String) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] $r1, $r3;
        org.apache.http.impl.auth.NTLMEngineException $r5;
        org.apache.http.impl.auth.NTLMEngineImpl$MD4 $r2;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String r0, $r8, $r10;
        java.io.UnsupportedEncodingException $r4;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UnicodeLittleUnmarked");

        $r2 = new org.apache.http.impl.auth.NTLMEngineImpl$MD4;

        specialinvoke $r2.<org.apache.http.impl.auth.NTLMEngineImpl$MD4: void <init>()>();

        virtualinvoke $r2.<org.apache.http.impl.auth.NTLMEngineImpl$MD4: void update(byte[])>($r1);

        $r3 = virtualinvoke $r2.<org.apache.http.impl.auth.NTLMEngineImpl$MD4: byte[] getOutput()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.http.impl.auth.NTLMEngineException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unicode not supported: ");

        $r8 = virtualinvoke $r4.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.apache.http.impl.auth.NTLMEngineException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r5;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    private static byte[] ntlmv2Hash(java.lang.String, java.lang.String, java.lang.String) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] $r1, $r6, $r8, $r9;
        org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5 $r2;
        org.apache.http.impl.auth.NTLMEngineException $r11;
        java.util.Locale $r4;
        java.lang.String r0, r3, $r5, r7, $r14, $r16;
        java.lang.StringBuilder $r12, $r13, $r15;
        java.io.UnsupportedEncodingException $r10;

        r7 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

     label1:
        $r1 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlmHash(java.lang.String)>(r0);

        $r2 = new org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5;

        specialinvoke $r2.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>($r1);

        $r4 = <java.util.Locale: java.util.Locale US>;

        $r5 = virtualinvoke r3.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes(java.lang.String)>("UnicodeLittleUnmarked");

        virtualinvoke $r2.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>($r6);

        $r8 = virtualinvoke r7.<java.lang.String: byte[] getBytes(java.lang.String)>("UnicodeLittleUnmarked");

        virtualinvoke $r2.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>($r8);

        $r9 = virtualinvoke $r2.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: byte[] getOutput()>();

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;

        $r11 = new org.apache.http.impl.auth.NTLMEngineException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unicode not supported! ");

        $r14 = virtualinvoke $r10.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.http.impl.auth.NTLMEngineException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r10);

        throw $r11;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    private static byte[] lmResponse(byte[], byte[]) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] r0, r5, $r6, $r7, $r8, r9, r13;
        org.apache.http.impl.auth.NTLMEngineException $r11;
        javax.crypto.Cipher $r4;
        java.lang.Exception $r10;
        java.security.Key $r1, $r2, $r3;
        java.lang.String $r12;

        r0 := @parameter0: byte[];

        r5 := @parameter1: byte[];

     label1:
        r13 = newarray (byte)[21];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r13, 0, 16);

        $r1 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: java.security.Key createDESKey(byte[],int)>(r13, 0);

        $r2 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: java.security.Key createDESKey(byte[],int)>(r13, 7);

        $r3 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: java.security.Key createDESKey(byte[],int)>(r13, 14);

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DES/ECB/NoPadding");

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r1);

        $r6 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5);

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r2);

        $r7 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5);

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r3);

        $r8 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5);

        r9 = newarray (byte)[24];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r9, 0, 8);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r9, 8, 8);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r9, 16, 8);

     label2:
        return r9;

     label3:
        $r10 := @caughtexception;

        $r11 = new org.apache.http.impl.auth.NTLMEngineException;

        $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r11.<org.apache.http.impl.auth.NTLMEngineException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r10);

        throw $r11;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static byte[] lmv2Response(byte[], byte[], byte[]) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] r1, r2, r3, $r4, r5;
        org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5 $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        r3 := @parameter2: byte[];

        $r0 = new org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5;

        specialinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>(r1);

        virtualinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>(r2);

        virtualinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void update(byte[])>(r3);

        $r4 = virtualinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: byte[] getOutput()>();

        $i1 = lengthof $r4;

        $i0 = lengthof r3;

        $i2 = $i1 + $i0;

        r5 = newarray (byte)[$i2];

        $i3 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r5, 0, $i3);

        $i5 = lengthof $r4;

        $i4 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r5, $i5, $i4);

        return r5;
    }

    private static byte[] createBlob(byte[], byte[], byte[])
    {
        byte[] $r0, $r1, $r2, $r3, r4, r5, r6, r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25, i26, i27, i28, i29;

        r7 := @parameter0: byte[];

        r5 := @parameter1: byte[];

        r4 := @parameter2: byte[];

        $r0 = newarray (byte)[4];

        $r0[0] = 1;

        $r0[1] = 1;

        $r0[2] = 0;

        $r0[3] = 0;

        $r1 = newarray (byte)[4];

        $r1[0] = 0;

        $r1[1] = 0;

        $r1[2] = 0;

        $r1[3] = 0;

        $r2 = newarray (byte)[4];

        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = 0;

        $r3 = newarray (byte)[4];

        $r3[0] = 0;

        $r3[1] = 0;

        $r3[2] = 0;

        $r3[3] = 0;

        $i1 = lengthof $r0;

        $i0 = lengthof $r1;

        $i3 = $i1 + $i0;

        $i2 = lengthof r4;

        $i4 = $i3 + $i2;

        $i6 = $i4 + 8;

        $i5 = lengthof $r2;

        $i8 = $i6 + $i5;

        $i7 = lengthof r5;

        $i10 = $i8 + $i7;

        $i9 = lengthof $r3;

        $i11 = $i10 + $i9;

        r6 = newarray (byte)[$i11];

        $i12 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r6, 0, $i12);

        $i13 = lengthof $r0;

        i24 = 0 + $i13;

        $i14 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r6, i24, $i14);

        $i15 = lengthof $r1;

        i25 = i24 + $i15;

        $i16 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r6, i25, $i16);

        $i17 = lengthof r4;

        i26 = i25 + $i17;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r6, i26, 8);

        i27 = i26 + 8;

        $i18 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r6, i27, $i18);

        $i19 = lengthof $r2;

        i28 = i27 + $i19;

        $i20 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r6, i28, $i20);

        $i21 = lengthof r5;

        i29 = i28 + $i21;

        $i22 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r6, i29, $i22);

        $i23 = lengthof $r3;

        return r6;
    }

    private static java.security.Key createDESKey(byte[], int)
    {
        byte[] r0, r1, r2;
        javax.crypto.spec.SecretKeySpec $r4;
        byte $b1, $b2, $b3, $b8, $b9, $b10, $b15, $b16, $b17, $b22, $b23, $b24, $b29, $b30, $b31, $b36, $b37, $b38, $b43, $b44, $b46;
        short $s4, $s11, $s18, $s25, $s32, $s39, $s48, $s51, $s54, $s57, $s60, $s63;
        int i0, $i5, $i6, $i7, $i12, $i13, $i14, $i19, $i20, $i21, $i26, $i27, $i28, $i33, $i34, $i35, $i40, $i41, $i42, $i45, $i47, $i49, $i50, $i52, $i53, $i55, $i56, $i58, $i59, $i61, $i62, $i64, $i65;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r0 = newarray (byte)[7];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, r0, 0, 7);

        r2 = newarray (byte)[8];

        $b1 = r0[0];

        r2[0] = $b1;

        $b2 = r0[0];

        $i47 = (int) $b2;

        $i6 = $i47 << 7;

        $b3 = r0[1];

        $s48 = (short) $b3;

        $s4 = $s48 & 255;

        $i49 = (int) $s4;

        $i5 = $i49 >>> 1;

        $i7 = $i6 | $i5;

        $b8 = (byte) $i7;

        r2[1] = $b8;

        $b9 = r0[1];

        $i50 = (int) $b9;

        $i13 = $i50 << 6;

        $b10 = r0[2];

        $s51 = (short) $b10;

        $s11 = $s51 & 255;

        $i52 = (int) $s11;

        $i12 = $i52 >>> 2;

        $i14 = $i13 | $i12;

        $b15 = (byte) $i14;

        r2[2] = $b15;

        $b16 = r0[2];

        $i53 = (int) $b16;

        $i20 = $i53 << 5;

        $b17 = r0[3];

        $s54 = (short) $b17;

        $s18 = $s54 & 255;

        $i55 = (int) $s18;

        $i19 = $i55 >>> 3;

        $i21 = $i20 | $i19;

        $b22 = (byte) $i21;

        r2[3] = $b22;

        $b23 = r0[3];

        $i56 = (int) $b23;

        $i27 = $i56 << 4;

        $b24 = r0[4];

        $s57 = (short) $b24;

        $s25 = $s57 & 255;

        $i58 = (int) $s25;

        $i26 = $i58 >>> 4;

        $i28 = $i27 | $i26;

        $b29 = (byte) $i28;

        r2[4] = $b29;

        $b30 = r0[4];

        $i59 = (int) $b30;

        $i34 = $i59 << 3;

        $b31 = r0[5];

        $s60 = (short) $b31;

        $s32 = $s60 & 255;

        $i61 = (int) $s32;

        $i33 = $i61 >>> 5;

        $i35 = $i34 | $i33;

        $b36 = (byte) $i35;

        r2[5] = $b36;

        $b37 = r0[5];

        $i62 = (int) $b37;

        $i41 = $i62 << 2;

        $b38 = r0[6];

        $s63 = (short) $b38;

        $s39 = $s63 & 255;

        $i64 = (int) $s39;

        $i40 = $i64 >>> 6;

        $i42 = $i41 | $i40;

        $b43 = (byte) $i42;

        r2[6] = $b43;

        $b44 = r0[6];

        $i65 = (int) $b44;

        $i45 = $i65 << 1;

        $b46 = (byte) $i45;

        r2[7] = $b46;

        staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: void oddParity(byte[])>(r2);

        $r4 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r2, "DES");

        return $r4;
    }

    private static void oddParity(byte[])
    {
        byte[] r0;
        byte b1, $b16, $b17, $b18, $b19, $b20, $b21;
        boolean $z0;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;

        r0 := @parameter0: byte[];

        i22 = 0;

     label1:
        $i0 = lengthof r0;

        if i22 >= $i0 goto label6;

        b1 = r0[i22];

        $i23 = (int) b1;

        $i3 = $i23 >>> 7;

        $i24 = (int) b1;

        $i2 = $i24 >>> 6;

        $i5 = $i3 ^ $i2;

        $i25 = (int) b1;

        $i4 = $i25 >>> 5;

        $i7 = $i5 ^ $i4;

        $i26 = (int) b1;

        $i6 = $i26 >>> 4;

        $i9 = $i7 ^ $i6;

        $i27 = (int) b1;

        $i8 = $i27 >>> 3;

        $i11 = $i9 ^ $i8;

        $i28 = (int) b1;

        $i10 = $i28 >>> 2;

        $i13 = $i11 ^ $i10;

        $i29 = (int) b1;

        $i12 = $i29 >>> 1;

        $i14 = $i13 ^ $i12;

        $i15 = $i14 & 1;

        if $i15 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        $b19 = r0[i22];

        $b20 = $b19 | 1;

        $b21 = (byte) $b20;

        r0[i22] = $b21;

        goto label5;

     label4:
        $b16 = r0[i22];

        $b17 = $b16 & -2;

        $b18 = (byte) $b17;

        r0[i22] = $b18;

     label5:
        i22 = i22 + 1;

        goto label1;

     label6:
        return;
    }

    static void writeULong(byte[], int, int)
    {
        byte[] r0;
        byte $b3, $b6, $b10, $b14;
        int i0, i1, $i2, $i4, $i5, $i7, $i8, $i9, $i11, $i12, $i13, $i15;

        r0 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $i2 = i1 & 255;

        $b3 = (byte) $i2;

        r0[i0] = $b3;

        $i7 = i0 + 1;

        $i4 = i1 >> 8;

        $i5 = $i4 & 255;

        $b6 = (byte) $i5;

        r0[$i7] = $b6;

        $i11 = i0 + 2;

        $i8 = i1 >> 16;

        $i9 = $i8 & 255;

        $b10 = (byte) $i9;

        r0[$i11] = $b10;

        $i15 = i0 + 3;

        $i12 = i1 >> 24;

        $i13 = $i12 & 255;

        $b14 = (byte) $i13;

        r0[$i15] = $b14;

        return;
    }

    static int F(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i8;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i5 = i0 & i1;

        $i8 = (int) -1;

        $i3 = i0 ^ $i8;

        $i4 = $i3 & i2;

        $i6 = $i5 | $i4;

        return $i6;
    }

    static int G(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i4 = i0 & i1;

        $i3 = i0 & i2;

        $i6 = $i4 | $i3;

        $i5 = i1 & i2;

        $i7 = $i6 | $i5;

        return $i7;
    }

    static int H(int, int, int)
    {
        int i0, i1, i2, $i3, $i4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = i0 ^ i1;

        $i4 = $i3 ^ i2;

        return $i4;
    }

    static int rotintlft(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = i0 << i1;

        $i2 = 32 - i1;

        $i3 = i0 >>> $i2;

        $i5 = $i4 | $i3;

        return $i5;
    }

    public java.lang.String generateType1Msg(java.lang.String, java.lang.String) throws org.apache.http.impl.auth.NTLMEngineException
    {
        java.lang.String r1, r2, $r3;
        org.apache.http.impl.auth.NTLMEngineImpl r0;

        r0 := @this: org.apache.http.impl.auth.NTLMEngineImpl;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType1Message(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public java.lang.String generateType3Msg(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] $r7, $r9;
        org.apache.http.impl.auth.NTLMEngineImpl$Type2Message $r0;
        int $i0;
        java.lang.String r1, r3, r4, r5, r6, $r8, $r10;
        org.apache.http.impl.auth.NTLMEngineImpl r2;

        r2 := @this: org.apache.http.impl.auth.NTLMEngineImpl;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        r1 := @parameter4: java.lang.String;

        $r0 = new org.apache.http.impl.auth.NTLMEngineImpl$Type2Message;

        specialinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: void <init>(java.lang.String)>(r1);

        $r7 = virtualinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] getChallenge()>();

        $i0 = virtualinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: int getFlags()>();

        $r8 = virtualinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: java.lang.String getTarget()>();

        $r9 = virtualinvoke $r0.<org.apache.http.impl.auth.NTLMEngineImpl$Type2Message: byte[] getTargetInfo()>();

        $r10 = virtualinvoke r2.<org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[])>(r3, r4, r5, r6, $r7, $i0, $r8, $r9);

        return $r10;
    }

    static byte[] access$000() throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] $r0;

        $r0 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] makeRandomChallenge()>();

        return $r0;
    }

    static byte[] access$100() throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] $r0;

        $r0 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] makeSecondaryKey()>();

        return $r0;
    }

    static byte[] access$200(java.lang.String) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmHash(java.lang.String)>(r0);

        return $r1;
    }

    static byte[] access$300(byte[], byte[]) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] r0, r1, $r2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        $r2 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>(r0, r1);

        return $r2;
    }

    static byte[] access$400(java.lang.String) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlmHash(java.lang.String)>(r0);

        return $r1;
    }

    static byte[] access$500(java.lang.String, java.lang.String, java.lang.String) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] $r3;
        java.lang.String r0, r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlmv2Hash(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2);

        return $r3;
    }

    static byte[] access$600(byte[], byte[], byte[])
    {
        byte[] r0, r1, r2, $r3;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        $r3 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] createBlob(byte[],byte[],byte[])>(r0, r1, r2);

        return $r3;
    }

    static byte[] access$700(byte[], byte[], byte[]) throws org.apache.http.impl.auth.NTLMEngineException
    {
        byte[] r0, r1, r2, $r3;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        $r3 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmv2Response(byte[],byte[],byte[])>(r0, r1, r2);

        return $r3;
    }

    static java.security.Key access$800(byte[], int)
    {
        int i0;
        java.security.Key $r1;
        byte[] r0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: java.security.Key createDESKey(byte[],int)>(r0, i0);

        return $r1;
    }

    static byte[] access$900()
    {
        byte[] $r0;

        $r0 = <org.apache.http.impl.auth.NTLMEngineImpl: byte[] SIGNATURE>;

        return $r0;
    }

    static int access$1000(byte[], int) throws org.apache.http.impl.auth.NTLMEngineException
    {
        int i0, $i1;
        byte[] r0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: int readUShort(byte[],int)>(r0, i0);

        return $i1;
    }

    static int access$1100(byte[], int) throws org.apache.http.impl.auth.NTLMEngineException
    {
        int i0, $i1;
        byte[] r0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: int readULong(byte[],int)>(r0, i0);

        return $i1;
    }

    static byte[] access$1200(byte[], int) throws org.apache.http.impl.auth.NTLMEngineException
    {
        int i0;
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: byte[] readSecurityBuffer(byte[],int)>(r0, i0);

        return $r1;
    }

    static java.lang.String access$1300(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String convertHost(java.lang.String)>(r0);

        return $r1;
    }

    static java.lang.String access$1400(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String convertDomain(java.lang.String)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2, $r3;
        java.lang.Exception $r4;
        java.security.SecureRandom r5;
        int $i0, $i1, $i2, $i3;

        <org.apache.http.impl.auth.NTLMEngineImpl: java.lang.String DEFAULT_CHARSET> = "ASCII";

        <org.apache.http.impl.auth.NTLMEngineImpl: int FLAG_REQUEST_56BIT_ENCRYPTION> = -2147483648;

        <org.apache.http.impl.auth.NTLMEngineImpl: int FLAG_REQUEST_EXPLICIT_KEY_EXCH> = 1073741824;

        <org.apache.http.impl.auth.NTLMEngineImpl: int FLAG_REQUEST_128BIT_KEY_EXCH> = 536870912;

        <org.apache.http.impl.auth.NTLMEngineImpl: int FLAG_TARGETINFO_PRESENT> = 8388608;

        <org.apache.http.impl.auth.NTLMEngineImpl: int FLAG_REQUEST_VERSION> = 33554432;

        <org.apache.http.impl.auth.NTLMEngineImpl: int FLAG_REQUEST_NTLM2_SESSION> = 524288;

        <org.apache.http.impl.auth.NTLMEngineImpl: int FLAG_REQUEST_ALWAYS_SIGN> = 32768;

        <org.apache.http.impl.auth.NTLMEngineImpl: int FLAG_WORKSTATION_PRESENT> = 8192;

        <org.apache.http.impl.auth.NTLMEngineImpl: int FLAG_DOMAIN_PRESENT> = 4096;

        <org.apache.http.impl.auth.NTLMEngineImpl: int FLAG_REQUEST_NTLMv1> = 512;

        <org.apache.http.impl.auth.NTLMEngineImpl: int FLAG_REQUEST_LAN_MANAGER_KEY> = 128;

        <org.apache.http.impl.auth.NTLMEngineImpl: int FLAG_REQUEST_SEAL> = 32;

        <org.apache.http.impl.auth.NTLMEngineImpl: int FLAG_REQUEST_SIGN> = 16;

        <org.apache.http.impl.auth.NTLMEngineImpl: int FLAG_REQUEST_TARGET> = 4;

        <org.apache.http.impl.auth.NTLMEngineImpl: int FLAG_REQUEST_UNICODE_ENCODING> = 1;

        r5 = null;

     label1:
        r5 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>("SHA1PRNG");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        <org.apache.http.impl.auth.NTLMEngineImpl: java.security.SecureRandom RND_GEN> = r5;

        $r0 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getBytes(java.lang.String,java.lang.String)>("NTLMSSP", "ASCII");

        $i0 = lengthof $r0;

        $i1 = $i0 + 1;

        $r1 = newarray (byte)[$i1];

        <org.apache.http.impl.auth.NTLMEngineImpl: byte[] SIGNATURE> = $r1;

        $r2 = <org.apache.http.impl.auth.NTLMEngineImpl: byte[] SIGNATURE>;

        $i2 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r2, 0, $i2);

        $r3 = <org.apache.http.impl.auth.NTLMEngineImpl: byte[] SIGNATURE>;

        $i3 = lengthof $r0;

        $r3[$i3] = 0;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
