public class org.apache.jempbox.xmp.XMPSchema extends java.lang.Object
{
    public static final java.lang.String NS_NAMESPACE;
    protected java.lang.String prefix;
    protected org.w3c.dom.Element schema;

    public void <init>(org.apache.jempbox.xmp.XMPMetadata, java.lang.String, java.lang.String)
    {
        org.w3c.dom.Element $r3, $r6;
        org.apache.jempbox.xmp.XMPMetadata r1;
        org.w3c.dom.Document $r2;
        org.apache.jempbox.xmp.XMPSchema r0;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String r4, $r9, r10;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: org.apache.jempbox.xmp.XMPMetadata;

        r4 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema> = null;

        $r2 = r1.<org.apache.jempbox.xmp.XMPMetadata: org.w3c.dom.Document xmpDocument>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("http://www.w3.org/1999/02/22-rdf-syntax-ns#", "rdf:Description");

        r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema> = $r3;

        r0.<org.apache.jempbox.xmp.XMPSchema: java.lang.String prefix> = r4;

        $r6 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlns:");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2000/xmlns/", $r9, r10);

        return;
    }

    public void <init>(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.Element r1;
        java.lang.String r2;
        org.apache.jempbox.xmp.XMPSchema r0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema> = null;

        r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema> = r1;

        if r2 == null goto label1;

        r0.<org.apache.jempbox.xmp.XMPSchema: java.lang.String prefix> = r2;

        goto label2;

     label1:
        r0.<org.apache.jempbox.xmp.XMPSchema: java.lang.String prefix> = "";

     label2:
        return;
    }

    public org.w3c.dom.Element getElement()
    {
        org.w3c.dom.Element $r1;
        org.apache.jempbox.xmp.XMPSchema r0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        $r1 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        return $r1;
    }

    public java.lang.String getAbout()
    {
        java.lang.String $r1;
        org.apache.jempbox.xmp.XMPSchema r0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        $r1 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchema: java.lang.String getTextProperty(java.lang.String)>("rdf:about");

        return $r1;
    }

    public void setAbout(java.lang.String)
    {
        org.w3c.dom.Element $r2, $r3;
        org.apache.jempbox.xmp.XMPSchema r1;
        java.lang.String r0;

        r1 := @this: org.apache.jempbox.xmp.XMPSchema;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r3 = r1.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        interfaceinvoke $r3.<org.w3c.dom.Element: void removeAttribute(java.lang.String)>("rdf:about");

        goto label2;

     label1:
        $r2 = r1.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        interfaceinvoke $r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("rdf:about", r0);

     label2:
        return;
    }

    public void setTextProperty(java.lang.String, java.lang.String)
    {
        org.w3c.dom.Document $r9;
        org.w3c.dom.Node $r12, $r18;
        int $i0, $i1, i2;
        java.lang.String r0, r2;
        boolean $z0, $z1;
        org.w3c.dom.NodeList $r7, $r16;
        org.w3c.dom.Element $r3, $r4, $r5, $r6, $r8, $r10, $r11, $r13, $r14, $r15, $r17, r19;
        org.apache.jempbox.xmp.XMPSchema r1;

        r1 := @this: org.apache.jempbox.xmp.XMPSchema;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label3;

        $r14 = r1.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        interfaceinvoke $r14.<org.w3c.dom.Element: void removeAttribute(java.lang.String)>(r2);

        $r15 = r1.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r16 = interfaceinvoke $r15.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r2);

        i2 = 0;

     label1:
        $i1 = interfaceinvoke $r16.<org.w3c.dom.NodeList: int getLength()>();

        if i2 >= $i1 goto label2;

        $r17 = r1.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r18 = interfaceinvoke $r16.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        interfaceinvoke $r17.<org.w3c.dom.Element: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>($r18);

        i2 = i2 + 1;

        goto label1;

     label2:
        goto label8;

     label3:
        $r3 = r1.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $z0 = interfaceinvoke $r3.<org.w3c.dom.Element: boolean hasAttribute(java.lang.String)>(r2);

        if $z0 == 0 goto label4;

        $r13 = r1.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        interfaceinvoke $r13.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>(r2, r0);

        goto label8;

     label4:
        $r4 = r1.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $z1 = interfaceinvoke $r4.<org.w3c.dom.Element: boolean hasChildNodes()>();

        if $z1 == 0 goto label7;

        $r6 = r1.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r2);

        $i0 = interfaceinvoke $r7.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label5;

        $r12 = interfaceinvoke $r7.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r19 = (org.w3c.dom.Element) $r12;

        interfaceinvoke r19.<org.w3c.dom.Element: void setNodeValue(java.lang.String)>(r0);

        goto label6;

     label5:
        $r8 = r1.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r9 = interfaceinvoke $r8.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r10 = interfaceinvoke $r9.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>(r2);

        staticinvoke <org.apache.jempbox.impl.XMLUtil: void setStringValue(org.w3c.dom.Element,java.lang.String)>($r10, r0);

        $r11 = r1.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        interfaceinvoke $r11.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r10);

     label6:
        goto label8;

     label7:
        $r5 = r1.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        interfaceinvoke $r5.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>(r2, r0);

     label8:
        return;
    }

    public java.lang.String getTextProperty(java.lang.String)
    {
        org.w3c.dom.NodeList $r4;
        org.w3c.dom.Element $r2, $r3, r6, $r8;
        org.apache.jempbox.xmp.XMPSchema r0;
        org.w3c.dom.Node $r5;
        int $i0;
        java.lang.String r1, $r7, $r9;
        boolean $z0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $z0 = interfaceinvoke $r2.<org.w3c.dom.Element: boolean hasAttribute(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r9 = interfaceinvoke $r8.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>(r1);

        return $r9;

     label1:
        $r3 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r1);

        $i0 = interfaceinvoke $r4.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label2;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r6 = (org.w3c.dom.Element) $r5;

        $r7 = staticinvoke <org.apache.jempbox.impl.XMLUtil: java.lang.String getStringValue(org.w3c.dom.Element)>(r6);

        return $r7;

     label2:
        return null;
    }

    public java.util.Calendar getDateProperty(java.lang.String) throws java.io.IOException
    {
        java.util.Calendar $r3;
        org.apache.jempbox.xmp.XMPSchema r0;
        java.lang.String r1, $r2;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchema: java.lang.String getTextProperty(java.lang.String)>(r1);

        $r3 = staticinvoke <org.apache.jempbox.impl.DateConverter: java.util.Calendar toCalendar(java.lang.String)>($r2);

        return $r3;
    }

    public void setDateProperty(java.lang.String, java.util.Calendar)
    {
        java.util.Calendar r0;
        org.apache.jempbox.xmp.XMPSchema r1;
        java.lang.String r2, $r3;

        r1 := @this: org.apache.jempbox.xmp.XMPSchema;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.Calendar;

        if r0 == null goto label1;

        $r3 = staticinvoke <org.apache.jempbox.impl.DateConverter: java.lang.String toISO8601(java.util.Calendar)>(r0);

        virtualinvoke r1.<org.apache.jempbox.xmp.XMPSchema: void setTextProperty(java.lang.String,java.lang.String)>(r2, $r3);

        goto label2;

     label1:
        virtualinvoke r1.<org.apache.jempbox.xmp.XMPSchema: void setTextProperty(java.lang.String,java.lang.String)>(r2, null);

     label2:
        return;
    }

    public java.lang.Boolean getBooleanProperty(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchema r0;
        java.lang.Boolean r3, $r4;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        r3 = null;

        $r2 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchema: java.lang.String getTextProperty(java.lang.String)>(r1);

        if $r2 == null goto label3;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("True");

        if $z0 == 0 goto label1;

        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label2;

     label1:
        $r4 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label2:
        r3 = $r4;

     label3:
        return r3;
    }

    public void setBooleanProperty(java.lang.String, java.lang.Boolean)
    {
        org.apache.jempbox.xmp.XMPSchema r1;
        java.lang.Boolean r0;
        java.lang.String r2, r3, $r4;
        boolean $z0;

        r1 := @this: org.apache.jempbox.xmp.XMPSchema;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Boolean;

        r3 = null;

        if r0 == null goto label3;

        $z0 = virtualinvoke r0.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $r4 = "True";

        goto label2;

     label1:
        $r4 = "False";

     label2:
        r3 = $r4;

     label3:
        virtualinvoke r1.<org.apache.jempbox.xmp.XMPSchema: void setTextProperty(java.lang.String,java.lang.String)>(r2, r3);

        return;
    }

    public java.lang.Integer getIntegerProperty(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchema r0;
        int $i0;
        java.lang.String r1, $r2;
        java.lang.Integer $r3, r4;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        r4 = null;

        $r2 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchema: java.lang.String getTextProperty(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(java.lang.String)>($r2);

        r4 = $r3;

     label1:
        return r4;
    }

    public void setIntegerProperty(java.lang.String, java.lang.Integer)
    {
        org.apache.jempbox.xmp.XMPSchema r1;
        java.lang.String r2, r3;
        java.lang.Integer r0;

        r1 := @this: org.apache.jempbox.xmp.XMPSchema;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Integer;

        r3 = null;

        if r0 == null goto label1;

        r3 = virtualinvoke r0.<java.lang.Integer: java.lang.String toString()>();

     label1:
        virtualinvoke r1.<org.apache.jempbox.xmp.XMPSchema: void setTextProperty(java.lang.String,java.lang.String)>(r2, r3);

        return;
    }

    public void removeBagValue(java.lang.String, java.lang.String)
    {
        org.w3c.dom.Node $r4, $r7, $r9;
        int $i0, $i1, $i2, i3, $i5;
        java.lang.String r1, $r11, r12;
        boolean $z0;
        org.w3c.dom.NodeList $r3, $r6, $r8;
        org.w3c.dom.Element $r2, r5, r10, r13;
        org.apache.jempbox.xmp.XMPSchema r0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        r12 := @parameter1: java.lang.String;

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r1);

        $i0 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label3;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r5 = (org.w3c.dom.Element) $r4;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Bag");

        $i1 = interfaceinvoke $r6.<org.w3c.dom.NodeList: int getLength()>();

        if $i1 <= 0 goto label3;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r13 = (org.w3c.dom.Element) $r7;

        $r8 = interfaceinvoke r13.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:li");

        $i2 = interfaceinvoke $r8.<org.w3c.dom.NodeList: int getLength()>();

        i3 = $i2 - 1;

     label1:
        if i3 < 0 goto label3;

        $r9 = interfaceinvoke $r8.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i3);

        r10 = (org.w3c.dom.Element) $r9;

        $r11 = staticinvoke <org.apache.jempbox.impl.XMLUtil: java.lang.String getStringValue(org.w3c.dom.Element)>(r10);

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z0 == 0 goto label2;

        interfaceinvoke r13.<org.w3c.dom.Element: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r10);

     label2:
        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label1;

     label3:
        return;
    }

    public void addBagValue(java.lang.String, java.lang.String)
    {
        org.w3c.dom.Document $r5, $r9, $r12;
        org.w3c.dom.Node $r15, $r17;
        int $i0, $i1;
        java.lang.String r1, r14;
        org.w3c.dom.NodeList $r3, $r16;
        org.w3c.dom.Element $r2, $r4, $r6, $r7, $r8, $r10, $r11, $r13, r18, r19;
        org.apache.jempbox.xmp.XMPSchema r0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        r14 := @parameter1: java.lang.String;

        r18 = null;

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r1);

        $i0 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label2;

        $r15 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r19 = (org.w3c.dom.Element) $r15;

        $r16 = interfaceinvoke r19.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Bag");

        $i1 = interfaceinvoke $r16.<org.w3c.dom.NodeList: int getLength()>();

        if $i1 <= 0 goto label1;

        $r17 = interfaceinvoke $r16.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r18 = (org.w3c.dom.Element) $r17;

     label1:
        goto label3;

     label2:
        $r4 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>(r1);

        $r7 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        interfaceinvoke $r7.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

        $r8 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r9 = interfaceinvoke $r8.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r10 = interfaceinvoke $r9.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("rdf:Bag");

        r18 = $r10;

        interfaceinvoke $r6.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r10);

     label3:
        $r11 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r12 = interfaceinvoke $r11.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r13 = interfaceinvoke $r12.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("rdf:li");

        staticinvoke <org.apache.jempbox.impl.XMLUtil: void setStringValue(org.w3c.dom.Element,java.lang.String)>($r13, r14);

        interfaceinvoke r18.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r13);

        return;
    }

    public java.util.List getBagList(java.lang.String)
    {
        java.util.ArrayList $r9;
        org.w3c.dom.Node $r4, $r7, $r11;
        int $i0, $i1, $i2, i3;
        java.lang.String r1, $r13;
        org.w3c.dom.NodeList $r3, $r6, $r10;
        java.util.List r14;
        org.w3c.dom.Element $r2, r5, r8, r12;
        org.apache.jempbox.xmp.XMPSchema r0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        r14 = null;

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r1);

        $i0 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label3;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r5 = (org.w3c.dom.Element) $r4;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Bag");

        $i1 = interfaceinvoke $r6.<org.w3c.dom.NodeList: int getLength()>();

        if $i1 <= 0 goto label3;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r8 = (org.w3c.dom.Element) $r7;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = interfaceinvoke r8.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:li");

        i3 = 0;

     label1:
        $i2 = interfaceinvoke $r10.<org.w3c.dom.NodeList: int getLength()>();

        if i3 >= $i2 goto label2;

        $r11 = interfaceinvoke $r10.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i3);

        r12 = (org.w3c.dom.Element) $r11;

        $r13 = staticinvoke <org.apache.jempbox.impl.XMLUtil: java.lang.String getStringValue(org.w3c.dom.Element)>(r12);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r13);

        i3 = i3 + 1;

        goto label1;

     label2:
        r14 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r9);

     label3:
        return r14;
    }

    public void removeSequenceValue(java.lang.String, java.lang.String)
    {
        org.w3c.dom.Node $r4, $r7, $r9;
        int $i0, $i1, $i2, i3, $i5;
        java.lang.String r1, $r11, r12;
        boolean $z0;
        org.w3c.dom.NodeList $r3, $r6, $r8;
        org.w3c.dom.Element $r2, r5, r10, r13;
        org.apache.jempbox.xmp.XMPSchema r0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        r12 := @parameter1: java.lang.String;

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r1);

        $i0 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label3;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r5 = (org.w3c.dom.Element) $r4;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Seq");

        $i1 = interfaceinvoke $r6.<org.w3c.dom.NodeList: int getLength()>();

        if $i1 <= 0 goto label3;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r13 = (org.w3c.dom.Element) $r7;

        $r8 = interfaceinvoke r13.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:li");

        $i2 = interfaceinvoke $r8.<org.w3c.dom.NodeList: int getLength()>();

        i3 = $i2 - 1;

     label1:
        if i3 < 0 goto label3;

        $r9 = interfaceinvoke $r8.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i3);

        r10 = (org.w3c.dom.Element) $r9;

        $r11 = staticinvoke <org.apache.jempbox.impl.XMLUtil: java.lang.String getStringValue(org.w3c.dom.Element)>(r10);

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z0 == 0 goto label2;

        interfaceinvoke r13.<org.w3c.dom.Element: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r10);

     label2:
        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label1;

     label3:
        return;
    }

    public void removeSequenceValue(java.lang.String, org.apache.jempbox.xmp.Elementable)
    {
        org.w3c.dom.Node $r4, $r7, $r9;
        int $i0, $i1, $i2, i3;
        java.lang.String r1;
        org.apache.jempbox.xmp.Elementable r11;
        org.w3c.dom.NodeList $r3, $r6, $r8;
        org.w3c.dom.Element $r2, r5, r10, $r12, r13;
        org.apache.jempbox.xmp.XMPSchema r0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        r11 := @parameter1: org.apache.jempbox.xmp.Elementable;

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r1);

        $i0 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label3;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r5 = (org.w3c.dom.Element) $r4;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Seq");

        $i1 = interfaceinvoke $r6.<org.w3c.dom.NodeList: int getLength()>();

        if $i1 <= 0 goto label3;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r13 = (org.w3c.dom.Element) $r7;

        $r8 = interfaceinvoke r13.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:li");

        i3 = 0;

     label1:
        $i2 = interfaceinvoke $r8.<org.w3c.dom.NodeList: int getLength()>();

        if i3 >= $i2 goto label3;

        $r9 = interfaceinvoke $r8.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i3);

        r10 = (org.w3c.dom.Element) $r9;

        $r12 = interfaceinvoke r11.<org.apache.jempbox.xmp.Elementable: org.w3c.dom.Element getElement()>();

        if r10 != $r12 goto label2;

        interfaceinvoke r13.<org.w3c.dom.Element: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r10);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    public void addSequenceValue(java.lang.String, java.lang.String)
    {
        org.w3c.dom.Text $r10;
        org.w3c.dom.Document $r5, $r8, $r12, $r16;
        org.w3c.dom.Node $r18, $r21, $r22;
        int $i0, $i1;
        java.lang.String r1, r9;
        org.w3c.dom.NodeList $r3, $r19;
        org.w3c.dom.Element $r2, $r4, $r6, $r7, $r11, $r13, $r14, $r15, $r17, $r20, r23, r24;
        org.apache.jempbox.xmp.XMPSchema r0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        r23 = null;

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r1);

        $i0 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label2;

        $r18 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r24 = (org.w3c.dom.Element) $r18;

        $r19 = interfaceinvoke r24.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Seq");

        $i1 = interfaceinvoke $r19.<org.w3c.dom.NodeList: int getLength()>();

        if $i1 <= 0 goto label1;

        $r22 = interfaceinvoke $r19.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r23 = (org.w3c.dom.Element) $r22;

        goto label2;

     label1:
        $r20 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r21 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        interfaceinvoke $r20.<org.w3c.dom.Element: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>($r21);

     label2:
        if r23 != null goto label3;

        $r11 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r12 = interfaceinvoke $r11.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r13 = interfaceinvoke $r12.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>(r1);

        $r14 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        interfaceinvoke $r14.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r13);

        $r15 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r16 = interfaceinvoke $r15.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r17 = interfaceinvoke $r16.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("rdf:Seq");

        r23 = $r17;

        interfaceinvoke $r13.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r17);

     label3:
        $r4 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("rdf:li");

        $r7 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r8 = interfaceinvoke $r7.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r10 = interfaceinvoke $r8.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>(r9);

        interfaceinvoke $r6.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r10);

        interfaceinvoke r23.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

        return;
    }

    public void addSequenceValue(java.lang.String, org.apache.jempbox.xmp.Elementable)
    {
        org.w3c.dom.Document $r5, $r9;
        org.w3c.dom.Node $r13, $r15;
        int $i0, $i1;
        java.lang.String r1;
        org.apache.jempbox.xmp.Elementable r11;
        org.w3c.dom.NodeList $r3, $r14;
        org.w3c.dom.Element $r2, $r4, $r6, $r7, $r8, $r10, $r12, r16, r17;
        org.apache.jempbox.xmp.XMPSchema r0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        r11 := @parameter1: org.apache.jempbox.xmp.Elementable;

        r16 = null;

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r1);

        $i0 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label2;

        $r13 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r17 = (org.w3c.dom.Element) $r13;

        $r14 = interfaceinvoke r17.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Seq");

        $i1 = interfaceinvoke $r14.<org.w3c.dom.NodeList: int getLength()>();

        if $i1 <= 0 goto label1;

        $r15 = interfaceinvoke $r14.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r16 = (org.w3c.dom.Element) $r15;

     label1:
        goto label3;

     label2:
        $r4 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>(r1);

        $r7 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        interfaceinvoke $r7.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

        $r8 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r9 = interfaceinvoke $r8.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r10 = interfaceinvoke $r9.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("rdf:Seq");

        r16 = $r10;

        interfaceinvoke $r6.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r10);

     label3:
        $r12 = interfaceinvoke r11.<org.apache.jempbox.xmp.Elementable: org.w3c.dom.Element getElement()>();

        interfaceinvoke r16.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r12);

        return;
    }

    public java.util.List getSequenceList(java.lang.String)
    {
        java.util.ArrayList $r9;
        org.w3c.dom.Node $r4, $r7, $r11;
        int $i0, $i1, $i2, i3;
        java.lang.String r1, $r13;
        org.w3c.dom.NodeList $r3, $r6, $r10;
        java.util.List r14;
        org.w3c.dom.Element $r2, r5, r8, r12;
        org.apache.jempbox.xmp.XMPSchema r0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        r14 = null;

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r1);

        $i0 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label3;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r5 = (org.w3c.dom.Element) $r4;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Seq");

        $i1 = interfaceinvoke $r6.<org.w3c.dom.NodeList: int getLength()>();

        if $i1 <= 0 goto label3;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r8 = (org.w3c.dom.Element) $r7;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = interfaceinvoke r8.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:li");

        i3 = 0;

     label1:
        $i2 = interfaceinvoke $r10.<org.w3c.dom.NodeList: int getLength()>();

        if i3 >= $i2 goto label2;

        $r11 = interfaceinvoke $r10.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i3);

        r12 = (org.w3c.dom.Element) $r11;

        $r13 = staticinvoke <org.apache.jempbox.impl.XMLUtil: java.lang.String getStringValue(org.w3c.dom.Element)>(r12);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r13);

        i3 = i3 + 1;

        goto label1;

     label2:
        r14 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r9);

     label3:
        return r14;
    }

    public java.util.List getEventSequenceList(java.lang.String)
    {
        java.util.ArrayList $r9;
        org.w3c.dom.Node $r4, $r7, $r11;
        int $i0, $i1, $i2, i3;
        java.lang.String r1;
        org.w3c.dom.NodeList $r3, $r6, $r10;
        java.util.List r14;
        org.w3c.dom.Element $r2, r5, r8, r12;
        org.apache.jempbox.xmp.XMPSchema r0;
        org.apache.jempbox.xmp.ResourceEvent $r13;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        r14 = null;

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r1);

        $i0 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label3;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r5 = (org.w3c.dom.Element) $r4;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Seq");

        $i1 = interfaceinvoke $r6.<org.w3c.dom.NodeList: int getLength()>();

        if $i1 <= 0 goto label3;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r8 = (org.w3c.dom.Element) $r7;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = interfaceinvoke r8.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:li");

        i3 = 0;

     label1:
        $i2 = interfaceinvoke $r10.<org.w3c.dom.NodeList: int getLength()>();

        if i3 >= $i2 goto label2;

        $r11 = interfaceinvoke $r10.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i3);

        r12 = (org.w3c.dom.Element) $r11;

        $r13 = new org.apache.jempbox.xmp.ResourceEvent;

        specialinvoke $r13.<org.apache.jempbox.xmp.ResourceEvent: void <init>(org.w3c.dom.Element)>(r12);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r13);

        i3 = i3 + 1;

        goto label1;

     label2:
        r14 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r9);

     label3:
        return r14;
    }

    public void removeSequenceDateValue(java.lang.String, java.util.Calendar)
    {
        java.util.Calendar r0;
        org.apache.jempbox.xmp.XMPSchema r2;
        java.lang.String $r1, r3;

        r2 := @this: org.apache.jempbox.xmp.XMPSchema;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.Calendar;

        $r1 = staticinvoke <org.apache.jempbox.impl.DateConverter: java.lang.String toISO8601(java.util.Calendar)>(r0);

        virtualinvoke r2.<org.apache.jempbox.xmp.XMPSchema: void removeSequenceValue(java.lang.String,java.lang.String)>(r3, $r1);

        return;
    }

    public void addSequenceDateValue(java.lang.String, java.util.Calendar)
    {
        java.util.Calendar r0;
        org.apache.jempbox.xmp.XMPSchema r2;
        java.lang.String $r1, r3;

        r2 := @this: org.apache.jempbox.xmp.XMPSchema;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.Calendar;

        $r1 = staticinvoke <org.apache.jempbox.impl.DateConverter: java.lang.String toISO8601(java.util.Calendar)>(r0);

        virtualinvoke r2.<org.apache.jempbox.xmp.XMPSchema: void addSequenceValue(java.lang.String,java.lang.String)>(r3, $r1);

        return;
    }

    public java.util.List getSequenceDateList(java.lang.String) throws java.io.IOException
    {
        java.util.ArrayList $r3, r7;
        java.util.List $r2;
        java.util.Calendar $r6;
        org.apache.jempbox.xmp.XMPSchema r0;
        int $i0, i1;
        java.lang.Object $r4;
        java.lang.String r1, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchema: java.util.List getSequenceList(java.lang.String)>(r1);

        r7 = null;

        if $r2 == null goto label2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r7 = $r3;

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (java.lang.String) $r4;

        $r6 = staticinvoke <org.apache.jempbox.impl.DateConverter: java.util.Calendar toCalendar(java.lang.String)>($r5);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r7;
    }

    public void setLanguageProperty(java.lang.String, java.lang.String, java.lang.String)
    {
        org.w3c.dom.Document $r10, $r17, $r20;
        boolean $z0, $z1, z2;
        org.w3c.dom.Node $r4, $r6, $r12, $r13;
        int $i0, $i1, i2, $i3;
        java.lang.String r1, r8, $r15, r23;
        org.w3c.dom.NodeList $r3, $r5, $r7;
        org.w3c.dom.Element $r2, $r9, $r11, r14, $r16, $r18, $r19, $r21, $r22, r24, r25;
        org.apache.jempbox.xmp.XMPSchema r0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        r23 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r1);

        $i0 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 != 0 goto label02;

        if r8 != null goto label01;

        return;

     label01:
        $r19 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r20 = interfaceinvoke $r19.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r21 = interfaceinvoke $r20.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>(r1);

        r24 = $r21;

        $r22 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        interfaceinvoke $r22.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r21);

        goto label03;

     label02:
        $r4 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r24 = (org.w3c.dom.Element) $r4;

     label03:
        $r5 = interfaceinvoke r24.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Alt");

        $i1 = interfaceinvoke $r5.<org.w3c.dom.NodeList: int getLength()>();

        if $i1 != 0 goto label05;

        if r8 != null goto label04;

        return;

     label04:
        $r16 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r17 = interfaceinvoke $r16.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r18 = interfaceinvoke $r17.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("rdf:Alt");

        r25 = $r18;

        interfaceinvoke r24.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r18);

        goto label06;

     label05:
        $r6 = interfaceinvoke $r5.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r25 = (org.w3c.dom.Element) $r6;

     label06:
        $r7 = interfaceinvoke r25.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:li");

        if r23 != null goto label07;

        r23 = "x-default";

     label07:
        z2 = 0;

        i2 = 0;

     label08:
        $i3 = interfaceinvoke $r7.<org.w3c.dom.NodeList: int getLength()>();

        if i2 >= $i3 goto label11;

        $r13 = interfaceinvoke $r7.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        r14 = (org.w3c.dom.Element) $r13;

        if r8 != null goto label09;

        interfaceinvoke r25.<org.w3c.dom.Element: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r14);

        goto label10;

     label09:
        $r15 = interfaceinvoke r14.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("xml:lang");

        $z1 = virtualinvoke r23.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z1 == 0 goto label10;

        z2 = 1;

        staticinvoke <org.apache.jempbox.impl.XMLUtil: void setStringValue(org.w3c.dom.Element,java.lang.String)>(r14, r8);

     label10:
        i2 = i2 + 1;

        goto label08;

     label11:
        if r8 == null goto label13;

        if z2 != 0 goto label13;

        $r9 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r10 = interfaceinvoke $r9.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r11 = interfaceinvoke $r10.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("rdf:li");

        interfaceinvoke $r11.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xml:lang", r23);

        staticinvoke <org.apache.jempbox.impl.XMLUtil: void setStringValue(org.w3c.dom.Element,java.lang.String)>($r11, r8);

        $z0 = virtualinvoke r23.<java.lang.String: boolean equals(java.lang.Object)>("x-default");

        if $z0 == 0 goto label12;

        $r12 = interfaceinvoke r25.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

        interfaceinvoke r25.<org.w3c.dom.Element: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>($r11, $r12);

        goto label13;

     label12:
        interfaceinvoke r25.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r11);

     label13:
        return;
    }

    public java.lang.String getLanguageProperty(java.lang.String, java.lang.String)
    {
        short $s3;
        org.w3c.dom.Node $r4, $r8, $r9, $r10, $r13;
        int $i0, $i1, $i2, $i4, i5, $i6;
        java.lang.String r1, $r15, r16, r17;
        boolean $z0;
        org.w3c.dom.NodeList $r3, $r6, $r7, $r12;
        org.w3c.dom.Element $r2, r5, r11, r14;
        org.apache.jempbox.xmp.XMPSchema r0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        r16 := @parameter1: java.lang.String;

        r17 = null;

        if r16 != null goto label1;

        r16 = "x-default";

     label1:
        $r2 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r1);

        $i0 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label6;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r5 = (org.w3c.dom.Element) $r4;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Alt");

        $i1 = interfaceinvoke $r6.<org.w3c.dom.NodeList: int getLength()>();

        if $i1 <= 0 goto label5;

        $r10 = interfaceinvoke $r6.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r11 = (org.w3c.dom.Element) $r10;

        $r12 = interfaceinvoke r11.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:li");

        i5 = 0;

     label2:
        $i4 = interfaceinvoke $r12.<org.w3c.dom.NodeList: int getLength()>();

        if i5 >= $i4 goto label4;

        if r17 != null goto label4;

        $r13 = interfaceinvoke $r12.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i5);

        r14 = (org.w3c.dom.Element) $r13;

        $r15 = interfaceinvoke r14.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("xml:lang");

        $z0 = virtualinvoke r16.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z0 == 0 goto label3;

        r17 = staticinvoke <org.apache.jempbox.impl.XMLUtil: java.lang.String getStringValue(org.w3c.dom.Element)>(r14);

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        goto label6;

     label5:
        $r7 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        $i2 = interfaceinvoke $r7.<org.w3c.dom.NodeList: int getLength()>();

        if $i2 != 1 goto label6;

        $r8 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

        $s3 = interfaceinvoke $r8.<org.w3c.dom.Node: short getNodeType()>();

        $i6 = (int) $s3;

        if 3 != $i6 goto label6;

        $r9 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

        r17 = interfaceinvoke $r9.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

     label6:
        return r17;
    }

    public void setThumbnailProperty(java.lang.String, java.lang.String, org.apache.jempbox.xmp.Thumbnail)
    {
        org.w3c.dom.Document $r16, $r19;
        boolean $z0, $z1, z2;
        org.apache.jempbox.xmp.Thumbnail r8;
        org.w3c.dom.Node $r4, $r6, $r10, $r11;
        int $i0, $i1, i2, $i3;
        java.lang.String r1, $r13, r22;
        org.w3c.dom.NodeList $r3, $r5, $r7;
        org.w3c.dom.Element $r2, $r9, r12, $r14, $r15, $r17, $r18, $r20, $r21, r23, r24;
        org.apache.jempbox.xmp.XMPSchema r0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        r22 := @parameter1: java.lang.String;

        r8 := @parameter2: org.apache.jempbox.xmp.Thumbnail;

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r1);

        $i0 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 != 0 goto label02;

        if r8 != null goto label01;

        return;

     label01:
        $r18 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r19 = interfaceinvoke $r18.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r20 = interfaceinvoke $r19.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>(r1);

        r23 = $r20;

        $r21 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        interfaceinvoke $r21.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r20);

        goto label03;

     label02:
        $r4 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r23 = (org.w3c.dom.Element) $r4;

     label03:
        $r5 = interfaceinvoke r23.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Alt");

        $i1 = interfaceinvoke $r5.<org.w3c.dom.NodeList: int getLength()>();

        if $i1 != 0 goto label05;

        if r8 != null goto label04;

        return;

     label04:
        $r15 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r16 = interfaceinvoke $r15.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r17 = interfaceinvoke $r16.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("rdf:Alt");

        r24 = $r17;

        interfaceinvoke r23.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r17);

        goto label06;

     label05:
        $r6 = interfaceinvoke $r5.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r24 = (org.w3c.dom.Element) $r6;

     label06:
        $r7 = interfaceinvoke r24.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:li");

        if r22 != null goto label07;

        r22 = "x-default";

     label07:
        z2 = 0;

        i2 = 0;

     label08:
        $i3 = interfaceinvoke $r7.<org.w3c.dom.NodeList: int getLength()>();

        if i2 >= $i3 goto label11;

        $r11 = interfaceinvoke $r7.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        r12 = (org.w3c.dom.Element) $r11;

        if r8 != null goto label09;

        interfaceinvoke r24.<org.w3c.dom.Element: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r12);

        goto label10;

     label09:
        $r13 = interfaceinvoke r12.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("xml:lang");

        $z1 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z1 == 0 goto label10;

        z2 = 1;

        $r14 = virtualinvoke r8.<org.apache.jempbox.xmp.Thumbnail: org.w3c.dom.Element getElement()>();

        interfaceinvoke r24.<org.w3c.dom.Element: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)>(r12, $r14);

     label10:
        i2 = i2 + 1;

        goto label08;

     label11:
        if r8 == null goto label13;

        if z2 != 0 goto label13;

        $r9 = virtualinvoke r8.<org.apache.jempbox.xmp.Thumbnail: org.w3c.dom.Element getElement()>();

        interfaceinvoke $r9.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("xml:lang", r22);

        $z0 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>("x-default");

        if $z0 == 0 goto label12;

        $r10 = interfaceinvoke r24.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

        interfaceinvoke r24.<org.w3c.dom.Element: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>($r9, $r10);

        goto label13;

     label12:
        interfaceinvoke r24.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r9);

     label13:
        return;
    }

    public org.apache.jempbox.xmp.Thumbnail getThumbnailProperty(java.lang.String, java.lang.String)
    {
        org.apache.jempbox.xmp.Thumbnail $r13, r15;
        org.w3c.dom.Node $r4, $r7, $r10;
        int $i0, $i1, $i2, i3;
        java.lang.String r1, $r12, r14;
        boolean $z0;
        org.w3c.dom.NodeList $r3, $r6, $r9;
        org.w3c.dom.Element $r2, r5, r8, r11;
        org.apache.jempbox.xmp.XMPSchema r0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchema;

        r1 := @parameter0: java.lang.String;

        r14 := @parameter1: java.lang.String;

        r15 = null;

        if r14 != null goto label1;

        r14 = "x-default";

     label1:
        $r2 = r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r1);

        $i0 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label4;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r5 = (org.w3c.dom.Element) $r4;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Alt");

        $i1 = interfaceinvoke $r6.<org.w3c.dom.NodeList: int getLength()>();

        if $i1 <= 0 goto label4;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r8 = (org.w3c.dom.Element) $r7;

        $r9 = interfaceinvoke r8.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:li");

        i3 = 0;

     label2:
        $i2 = interfaceinvoke $r9.<org.w3c.dom.NodeList: int getLength()>();

        if i3 >= $i2 goto label4;

        if r15 != null goto label4;

        $r10 = interfaceinvoke $r9.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i3);

        r11 = (org.w3c.dom.Element) $r10;

        $r12 = interfaceinvoke r11.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("xml:lang");

        $z0 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label3;

        $r13 = new org.apache.jempbox.xmp.Thumbnail;

        specialinvoke $r13.<org.apache.jempbox.xmp.Thumbnail: void <init>(org.w3c.dom.Element)>(r11);

        r15 = $r13;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return r15;
    }

    public java.util.List getLanguagePropertyLanguages(java.lang.String)
    {
        java.util.ArrayList $r0;
        org.w3c.dom.Node $r5, $r8, $r11;
        int $i0, $i1, $i2, i3;
        java.lang.String r2, $r13;
        org.w3c.dom.NodeList $r4, $r7, $r10;
        org.w3c.dom.Element $r3, r6, r9, r12;
        org.apache.jempbox.xmp.XMPSchema r1;

        r1 := @this: org.apache.jempbox.xmp.XMPSchema;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r1.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element schema>;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r2);

        $i0 = interfaceinvoke $r4.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label4;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r6 = (org.w3c.dom.Element) $r5;

        $r7 = interfaceinvoke r6.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Alt");

        $i1 = interfaceinvoke $r7.<org.w3c.dom.NodeList: int getLength()>();

        if $i1 <= 0 goto label4;

        $r8 = interfaceinvoke $r7.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r9 = (org.w3c.dom.Element) $r8;

        $r10 = interfaceinvoke r9.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:li");

        i3 = 0;

     label1:
        $i2 = interfaceinvoke $r10.<org.w3c.dom.NodeList: int getLength()>();

        if i3 >= $i2 goto label4;

        $r11 = interfaceinvoke $r10.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i3);

        r12 = (org.w3c.dom.Element) $r11;

        $r13 = interfaceinvoke r12.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("xml:lang");

        if $r13 != null goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("x-default");

        goto label3;

     label2:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r13);

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return $r0;
    }

    public void merge(org.apache.jempbox.xmp.XMPSchema) throws java.io.IOException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.List $r13, $r14, $r18, $r19;
        org.w3c.dom.Node $r8, $r22;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        org.w3c.dom.NamedNodeMap $r5;
        java.lang.String $r9, $r10, r17, $r23, $r24, $r25, r28, $r29;
        org.w3c.dom.NodeList $r7, $r11, $r12;
        java.util.Iterator $r15, $r20;
        java.io.IOException $r26;
        org.w3c.dom.Element $r4, $r6, r27;
        org.apache.jempbox.xmp.XMPSchema r0, r2;
        java.lang.Class $r1, $r3;
        java.lang.Object $r16, $r21;

        r2 := @this: org.apache.jempbox.xmp.XMPSchema;

        r0 := @parameter0: org.apache.jempbox.xmp.XMPSchema;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label01;

        $r26 = new java.io.IOException;

        specialinvoke $r26.<java.io.IOException: void <init>(java.lang.String)>("Can only merge schemas of the same type.");

        throw $r26;

     label01:
        $r4 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element getElement()>();

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        i5 = 0;

     label02:
        $i0 = interfaceinvoke $r5.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i5 >= $i0 goto label04;

        $r22 = interfaceinvoke $r5.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i5);

        $r23 = interfaceinvoke $r22.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r24 = r2.<org.apache.jempbox.xmp.XMPSchema: java.lang.String prefix>;

        $z7 = virtualinvoke $r23.<java.lang.String: boolean startsWith(java.lang.String)>($r24);

        if $z7 == 0 goto label03;

        $r25 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchema: java.lang.String getTextProperty(java.lang.String)>($r23);

        virtualinvoke r2.<org.apache.jempbox.xmp.XMPSchema: void setTextProperty(java.lang.String,java.lang.String)>($r23, $r25);

     label03:
        i5 = i5 + 1;

        goto label02;

     label04:
        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchema: org.w3c.dom.Element getElement()>();

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i6 = 0;

     label05:
        $i1 = interfaceinvoke $r7.<org.w3c.dom.NodeList: int getLength()>();

        if i6 >= $i1 goto label15;

        $r8 = interfaceinvoke $r7.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i6);

        $r9 = interfaceinvoke $r8.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r10 = r2.<org.apache.jempbox.xmp.XMPSchema: java.lang.String prefix>;

        $z1 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>($r10);

        if $z1 == 0 goto label14;

        $z2 = $r8 instanceof org.w3c.dom.Element;

        if $z2 == 0 goto label13;

        r27 = (org.w3c.dom.Element) $r8;

        $i2 = interfaceinvoke $r7.<org.w3c.dom.NodeList: int getLength()>();

        if $i2 <= 0 goto label13;

        $r11 = interfaceinvoke r27.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Seq");

        $i3 = interfaceinvoke $r11.<org.w3c.dom.NodeList: int getLength()>();

        if $i3 <= 0 goto label09;

        $r18 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchema: java.util.List getSequenceList(java.lang.String)>($r9);

        $r19 = virtualinvoke r2.<org.apache.jempbox.xmp.XMPSchema: java.util.List getSequenceList(java.lang.String)>($r9);

        $r20 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z5 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label14;

        $r21 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r28 = (java.lang.String) $r21;

        if $r19 == null goto label07;

        $z6 = interfaceinvoke $r19.<java.util.List: boolean contains(java.lang.Object)>(r28);

        if $z6 != 0 goto label08;

     label07:
        virtualinvoke r2.<org.apache.jempbox.xmp.XMPSchema: void addSequenceValue(java.lang.String,java.lang.String)>($r9, r28);

     label08:
        goto label06;

     label09:
        $r12 = interfaceinvoke r27.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("rdf:Bag");

        $i4 = interfaceinvoke $r12.<org.w3c.dom.NodeList: int getLength()>();

        if $i4 <= 0 goto label13;

        $r13 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchema: java.util.List getBagList(java.lang.String)>($r9);

        $r14 = virtualinvoke r2.<org.apache.jempbox.xmp.XMPSchema: java.util.List getBagList(java.lang.String)>($r9);

        $r15 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z3 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label14;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r16;

        if $r14 == null goto label11;

        $z4 = interfaceinvoke $r14.<java.util.List: boolean contains(java.lang.Object)>(r17);

        if $z4 != 0 goto label12;

     label11:
        virtualinvoke r2.<org.apache.jempbox.xmp.XMPSchema: void addBagValue(java.lang.String,java.lang.String)>($r9, r17);

     label12:
        goto label10;

     label13:
        $r29 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchema: java.lang.String getTextProperty(java.lang.String)>($r9);

        virtualinvoke r2.<org.apache.jempbox.xmp.XMPSchema: void setTextProperty(java.lang.String,java.lang.String)>($r9, $r29);

     label14:
        i6 = i6 + 1;

        goto label05;

     label15:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.jempbox.xmp.XMPSchema: java.lang.String NS_NAMESPACE> = "http://www.w3.org/2000/xmlns/";

        return;
    }
}
