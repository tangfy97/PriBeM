public class org.apache.jena.riot.RDFDataMgr extends java.lang.Object
{
    static org.slf4j.Logger log;
    private static java.lang.String riotBase;
    private static java.lang.String streamManagerSymbolStr;
    public static com.hp.hpl.jena.sparql.util.Symbol streamManagerSymbol;

    public void <init>()
    {
        org.apache.jena.riot.RDFDataMgr r0;

        r0 := @this: org.apache.jena.riot.RDFDataMgr;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void read(com.hp.hpl.jena.rdf.model.Model, java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.Model r0;
        java.lang.String r2;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.graph.Graph,java.lang.String)>($r1, r2);

        return;
    }

    public static void read(com.hp.hpl.jena.graph.Graph, java.lang.String)
    {
        java.lang.String r1;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.graph.Graph,java.lang.String,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>(r0, r1, null, null, null);

        return;
    }

    public static void read(com.hp.hpl.jena.rdf.model.Model, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r3;
        com.hp.hpl.jena.rdf.model.Model r0;
        java.lang.String r2;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.jena.riot.Lang;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.graph.Graph,java.lang.String,org.apache.jena.riot.Lang)>($r1, r2, r3);

        return;
    }

    public static void read(com.hp.hpl.jena.graph.Graph, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r2;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.jena.riot.Lang;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.graph.Graph,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>(r0, r1, r2, null);

        return;
    }

    public static void read(com.hp.hpl.jena.rdf.model.Model, java.lang.String, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r4;
        com.hp.hpl.jena.rdf.model.Model r0;
        java.lang.String r2, r3;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.Lang;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.graph.Graph,java.lang.String,java.lang.String,org.apache.jena.riot.Lang)>($r1, r2, r3, r4);

        return;
    }

    public static void read(com.hp.hpl.jena.graph.Graph, java.lang.String, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r3;
        java.lang.String r1, r2;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: org.apache.jena.riot.Lang;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.graph.Graph,java.lang.String,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>(r0, r1, r2, r3, null);

        return;
    }

    public static void read(com.hp.hpl.jena.rdf.model.Model, java.lang.String, com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.rdf.model.Model r0;
        java.lang.String r2;
        com.hp.hpl.jena.sparql.util.Context r3;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.hp.hpl.jena.sparql.util.Context;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.graph.Graph,java.lang.String,com.hp.hpl.jena.sparql.util.Context)>($r1, r2, r3);

        return;
    }

    public static void read(com.hp.hpl.jena.graph.Graph, java.lang.String, com.hp.hpl.jena.sparql.util.Context)
    {
        java.lang.String r1;
        com.hp.hpl.jena.sparql.util.Context r2;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.hp.hpl.jena.sparql.util.Context;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.graph.Graph,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>(r0, r1, null, r2);

        return;
    }

    public static void read(com.hp.hpl.jena.rdf.model.Model, java.lang.String, org.apache.jena.riot.Lang, com.hp.hpl.jena.sparql.util.Context)
    {
        org.apache.jena.riot.Lang r2;
        com.hp.hpl.jena.rdf.model.Model r0;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.util.Context r3;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.jena.riot.Lang;

        r3 := @parameter3: com.hp.hpl.jena.sparql.util.Context;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.rdf.model.Model,java.lang.String,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>(r0, r1, r1, r2, r3);

        return;
    }

    public static void read(com.hp.hpl.jena.graph.Graph, java.lang.String, org.apache.jena.riot.Lang, com.hp.hpl.jena.sparql.util.Context)
    {
        org.apache.jena.riot.Lang r2;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.util.Context r3;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.jena.riot.Lang;

        r3 := @parameter3: com.hp.hpl.jena.sparql.util.Context;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.graph.Graph,java.lang.String,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>(r0, r1, r1, r2, r3);

        return;
    }

    public static void read(com.hp.hpl.jena.rdf.model.Model, java.lang.String, java.lang.String, org.apache.jena.riot.Lang, com.hp.hpl.jena.sparql.util.Context)
    {
        org.apache.jena.riot.Lang r4;
        com.hp.hpl.jena.rdf.model.Model r0;
        java.lang.String r2, r3;
        com.hp.hpl.jena.sparql.util.Context r5;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.Lang;

        r5 := @parameter4: com.hp.hpl.jena.sparql.util.Context;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.graph.Graph,java.lang.String,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>($r1, r2, r3, r4, r5);

        return;
    }

    public static void read(com.hp.hpl.jena.graph.Graph, java.lang.String, java.lang.String, org.apache.jena.riot.Lang, com.hp.hpl.jena.sparql.util.Context)
    {
        org.apache.jena.riot.Lang r4;
        org.apache.jena.riot.system.StreamRDF $r1;
        java.lang.String r2, r3;
        com.hp.hpl.jena.sparql.util.Context r5;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.Lang;

        r5 := @parameter4: com.hp.hpl.jena.sparql.util.Context;

        $r1 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF graph(com.hp.hpl.jena.graph.Graph)>(r0);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void parse(org.apache.jena.riot.system.StreamRDF,java.lang.String,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>($r1, r2, r3, r4, r5);

        return;
    }

    public static void read(com.hp.hpl.jena.rdf.model.Model, java.io.InputStream, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r3;
        com.hp.hpl.jena.rdf.model.Model r0;
        com.hp.hpl.jena.graph.Graph $r1;
        java.io.InputStream r2;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: java.io.InputStream;

        r3 := @parameter2: org.apache.jena.riot.Lang;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.graph.Graph,java.io.InputStream,org.apache.jena.riot.Lang)>($r1, r2, r3);

        return;
    }

    public static void read(com.hp.hpl.jena.graph.Graph, java.io.InputStream, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r2;
        com.hp.hpl.jena.graph.Graph r0;
        java.io.InputStream r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: java.io.InputStream;

        r2 := @parameter2: org.apache.jena.riot.Lang;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.graph.Graph,java.io.InputStream,java.lang.String,org.apache.jena.riot.Lang)>(r0, r1, null, r2);

        return;
    }

    public static void read(com.hp.hpl.jena.rdf.model.Model, java.io.InputStream, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r4;
        com.hp.hpl.jena.rdf.model.Model r0;
        java.lang.String r3;
        com.hp.hpl.jena.graph.Graph $r1;
        java.io.InputStream r2;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: java.io.InputStream;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.Lang;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.graph.Graph,java.io.InputStream,java.lang.String,org.apache.jena.riot.Lang)>($r1, r2, r3, r4);

        return;
    }

    public static void read(com.hp.hpl.jena.graph.Graph, java.io.InputStream, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.atlas.web.TypedInputStream $r2;
        org.apache.jena.riot.Lang r5;
        org.apache.jena.riot.system.StreamRDF $r1;
        java.lang.String r4;
        com.hp.hpl.jena.graph.Graph r0;
        java.io.InputStream r3;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r3 := @parameter1: java.io.InputStream;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: org.apache.jena.riot.Lang;

        $r1 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF graph(com.hp.hpl.jena.graph.Graph)>(r0);

        $r2 = new org.apache.jena.atlas.web.TypedInputStream;

        specialinvoke $r2.<org.apache.jena.atlas.web.TypedInputStream: void <init>(java.io.InputStream)>(r3);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void process(org.apache.jena.riot.system.StreamRDF,org.apache.jena.atlas.web.TypedInputStream,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>($r1, $r2, r4, r5, null);

        return;
    }

    public static void read(com.hp.hpl.jena.rdf.model.Model, java.io.Reader, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r4;
        com.hp.hpl.jena.rdf.model.Model r0;
        java.io.Reader r2;
        java.lang.String r3;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: java.io.Reader;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.Lang;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.graph.Graph,java.io.Reader,java.lang.String,org.apache.jena.riot.Lang)>($r1, r2, r3, r4);

        return;
    }

    public static void read(com.hp.hpl.jena.graph.Graph, java.io.Reader, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r4;
        org.apache.jena.riot.system.StreamRDF $r1;
        java.lang.String r2;
        java.io.Reader r3;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r3 := @parameter1: java.io.Reader;

        r2 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.Lang;

        $r1 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF graph(com.hp.hpl.jena.graph.Graph)>(r0);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void processTriples(org.apache.jena.riot.system.StreamRDF,java.lang.String,java.io.Reader,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>($r1, r2, r3, r4, null);

        return;
    }

    public static void read(com.hp.hpl.jena.rdf.model.Model, java.io.StringReader, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r5;
        java.io.StringReader r4;
        com.hp.hpl.jena.rdf.model.Model r0;
        org.apache.jena.riot.system.StreamRDF $r2;
        java.lang.String r3;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r4 := @parameter1: java.io.StringReader;

        r3 := @parameter2: java.lang.String;

        r5 := @parameter3: org.apache.jena.riot.Lang;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        $r2 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF graph(com.hp.hpl.jena.graph.Graph)>($r1);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void processTriples(org.apache.jena.riot.system.StreamRDF,java.lang.String,java.io.Reader,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>($r2, r3, r4, r5, null);

        return;
    }

    public static void read(com.hp.hpl.jena.graph.Graph, java.io.StringReader, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r4;
        java.io.StringReader r3;
        org.apache.jena.riot.system.StreamRDF $r1;
        java.lang.String r2;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r3 := @parameter1: java.io.StringReader;

        r2 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.Lang;

        $r1 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF graph(com.hp.hpl.jena.graph.Graph)>(r0);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void processTriples(org.apache.jena.riot.system.StreamRDF,java.lang.String,java.io.Reader,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>($r1, r2, r3, r4, null);

        return;
    }

    private static com.hp.hpl.jena.rdf.model.Model createModel()
    {
        com.hp.hpl.jena.rdf.model.Model $r0;

        $r0 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        return $r0;
    }

    private static com.hp.hpl.jena.graph.Graph createGraph()
    {
        com.hp.hpl.jena.graph.Graph $r0;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphFactory: com.hp.hpl.jena.graph.Graph createDefaultGraph()>();

        return $r0;
    }

    private static com.hp.hpl.jena.query.Dataset createDataset()
    {
        com.hp.hpl.jena.query.Dataset $r0;

        $r0 = staticinvoke <com.hp.hpl.jena.query.DatasetFactory: com.hp.hpl.jena.query.Dataset createMem()>();

        return $r0;
    }

    private static com.hp.hpl.jena.sparql.core.DatasetGraph createDatasetGraph()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraph $r0;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphFactory: com.hp.hpl.jena.sparql.core.DatasetGraph createMem()>();

        return $r0;
    }

    public static com.hp.hpl.jena.rdf.model.Model loadModel(java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.Model $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.apache.jena.riot.RDFDataMgr: com.hp.hpl.jena.rdf.model.Model createModel()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.rdf.model.Model,java.lang.String)>($r0, r1);

        return $r0;
    }

    public static com.hp.hpl.jena.rdf.model.Model loadModel(java.lang.String, org.apache.jena.riot.Lang)
    {
        com.hp.hpl.jena.rdf.model.Model $r0;
        org.apache.jena.riot.Lang r2;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.jena.riot.Lang;

        $r0 = staticinvoke <org.apache.jena.riot.RDFDataMgr: com.hp.hpl.jena.rdf.model.Model createModel()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.rdf.model.Model,java.lang.String,org.apache.jena.riot.Lang)>($r0, r1, r2);

        return $r0;
    }

    public static com.hp.hpl.jena.graph.Graph loadGraph(java.lang.String)
    {
        java.lang.String r1;
        com.hp.hpl.jena.graph.Graph $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.apache.jena.riot.RDFDataMgr: com.hp.hpl.jena.graph.Graph createGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.graph.Graph,java.lang.String)>($r0, r1);

        return $r0;
    }

    public static com.hp.hpl.jena.graph.Graph loadGraph(java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r2;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Graph $r0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.jena.riot.Lang;

        $r0 = staticinvoke <org.apache.jena.riot.RDFDataMgr: com.hp.hpl.jena.graph.Graph createGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.graph.Graph,java.lang.String,org.apache.jena.riot.Lang)>($r0, r1, r2);

        return $r0;
    }

    public static com.hp.hpl.jena.query.Dataset loadDataset(java.lang.String)
    {
        com.hp.hpl.jena.query.Dataset $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.apache.jena.riot.RDFDataMgr: com.hp.hpl.jena.query.Dataset createDataset()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.query.Dataset,java.lang.String)>($r0, r1);

        return $r0;
    }

    public static com.hp.hpl.jena.query.Dataset loadDataset(java.lang.String, org.apache.jena.riot.Lang)
    {
        com.hp.hpl.jena.query.Dataset $r0;
        org.apache.jena.riot.Lang r2;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.jena.riot.Lang;

        $r0 = staticinvoke <org.apache.jena.riot.RDFDataMgr: com.hp.hpl.jena.query.Dataset createDataset()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.query.Dataset,java.lang.String,org.apache.jena.riot.Lang)>($r0, r1, r2);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.core.DatasetGraph loadDatasetGraph(java.lang.String)
    {
        java.lang.String r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.apache.jena.riot.RDFDataMgr: com.hp.hpl.jena.sparql.core.DatasetGraph createDatasetGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.sparql.core.DatasetGraph,java.lang.String)>($r0, r1);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.core.DatasetGraph loadDatasetGraph(java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r2;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.jena.riot.Lang;

        $r0 = staticinvoke <org.apache.jena.riot.RDFDataMgr: com.hp.hpl.jena.sparql.core.DatasetGraph createDatasetGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.sparql.core.DatasetGraph,java.lang.String,org.apache.jena.riot.Lang)>($r0, r1, r2);

        return $r0;
    }

    public static void read(com.hp.hpl.jena.query.Dataset, java.lang.String)
    {
        com.hp.hpl.jena.query.Dataset r0;
        java.lang.String r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @parameter0: com.hp.hpl.jena.query.Dataset;

        r2 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.sparql.core.DatasetGraph,java.lang.String)>($r1, r2);

        return;
    }

    public static void read(com.hp.hpl.jena.sparql.core.DatasetGraph, java.lang.String)
    {
        java.lang.String r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.sparql.core.DatasetGraph,java.lang.String,org.apache.jena.riot.Lang)>(r0, r1, null);

        return;
    }

    public static void read(com.hp.hpl.jena.query.Dataset, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r3;
        com.hp.hpl.jena.query.Dataset r0;
        java.lang.String r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @parameter0: com.hp.hpl.jena.query.Dataset;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.jena.riot.Lang;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.sparql.core.DatasetGraph,java.lang.String,org.apache.jena.riot.Lang)>($r1, r2, r3);

        return;
    }

    public static void read(com.hp.hpl.jena.sparql.core.DatasetGraph, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r2;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.jena.riot.Lang;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.sparql.core.DatasetGraph,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>(r0, r1, r2, null);

        return;
    }

    public static void read(com.hp.hpl.jena.query.Dataset, java.lang.String, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r4;
        com.hp.hpl.jena.query.Dataset r0;
        java.lang.String r2, r3;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @parameter0: com.hp.hpl.jena.query.Dataset;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.Lang;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.sparql.core.DatasetGraph,java.lang.String,java.lang.String,org.apache.jena.riot.Lang)>($r1, r2, r3, r4);

        return;
    }

    public static void read(com.hp.hpl.jena.sparql.core.DatasetGraph, java.lang.String, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r3;
        java.lang.String r1, r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: org.apache.jena.riot.Lang;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.sparql.core.DatasetGraph,java.lang.String,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>(r0, r1, r2, r3, null);

        return;
    }

    public static void read(com.hp.hpl.jena.query.Dataset, java.lang.String, org.apache.jena.riot.Lang, com.hp.hpl.jena.sparql.util.Context)
    {
        org.apache.jena.riot.Lang r3;
        com.hp.hpl.jena.query.Dataset r0;
        java.lang.String r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;
        com.hp.hpl.jena.sparql.util.Context r4;

        r0 := @parameter0: com.hp.hpl.jena.query.Dataset;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.jena.riot.Lang;

        r4 := @parameter3: com.hp.hpl.jena.sparql.util.Context;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.sparql.core.DatasetGraph,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>($r1, r2, r3, r4);

        return;
    }

    public static void read(com.hp.hpl.jena.sparql.core.DatasetGraph, java.lang.String, org.apache.jena.riot.Lang, com.hp.hpl.jena.sparql.util.Context)
    {
        org.apache.jena.riot.Lang r2;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph r0;
        com.hp.hpl.jena.sparql.util.Context r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.jena.riot.Lang;

        r3 := @parameter3: com.hp.hpl.jena.sparql.util.Context;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.sparql.core.DatasetGraph,java.lang.String,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>(r0, r1, r1, r2, r3);

        return;
    }

    public static void read(com.hp.hpl.jena.query.Dataset, java.lang.String, java.lang.String, org.apache.jena.riot.Lang, com.hp.hpl.jena.sparql.util.Context)
    {
        org.apache.jena.riot.Lang r3;
        com.hp.hpl.jena.query.Dataset r0;
        java.lang.String r2, r5;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;
        com.hp.hpl.jena.sparql.util.Context r4;

        r0 := @parameter0: com.hp.hpl.jena.query.Dataset;

        r2 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r3 := @parameter3: org.apache.jena.riot.Lang;

        r4 := @parameter4: com.hp.hpl.jena.sparql.util.Context;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.sparql.core.DatasetGraph,java.lang.String,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>($r1, r2, r2, r3, r4);

        return;
    }

    public static void read(com.hp.hpl.jena.sparql.core.DatasetGraph, java.lang.String, java.lang.String, org.apache.jena.riot.Lang, com.hp.hpl.jena.sparql.util.Context)
    {
        org.apache.jena.riot.Lang r4;
        org.apache.jena.riot.system.StreamRDF $r1;
        java.lang.String r2, r3;
        com.hp.hpl.jena.sparql.core.DatasetGraph r0;
        com.hp.hpl.jena.sparql.util.Context r5;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.Lang;

        r5 := @parameter4: com.hp.hpl.jena.sparql.util.Context;

        $r1 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF dataset(com.hp.hpl.jena.sparql.core.DatasetGraph)>(r0);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void parse(org.apache.jena.riot.system.StreamRDF,java.lang.String,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>($r1, r2, r3, r4, r5);

        return;
    }

    public static void read(com.hp.hpl.jena.query.Dataset, java.io.InputStream, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r3;
        com.hp.hpl.jena.query.Dataset r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;
        java.io.InputStream r2;

        r0 := @parameter0: com.hp.hpl.jena.query.Dataset;

        r2 := @parameter1: java.io.InputStream;

        r3 := @parameter2: org.apache.jena.riot.Lang;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.sparql.core.DatasetGraph,java.io.InputStream,org.apache.jena.riot.Lang)>($r1, r2, r3);

        return;
    }

    public static void read(com.hp.hpl.jena.sparql.core.DatasetGraph, java.io.InputStream, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph r0;
        java.io.InputStream r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r1 := @parameter1: java.io.InputStream;

        r2 := @parameter2: org.apache.jena.riot.Lang;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.sparql.core.DatasetGraph,java.io.InputStream,java.lang.String,org.apache.jena.riot.Lang)>(r0, r1, null, r2);

        return;
    }

    public static void read(com.hp.hpl.jena.query.Dataset, java.io.InputStream, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r4;
        com.hp.hpl.jena.query.Dataset r0;
        java.lang.String r3;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;
        java.io.InputStream r2;

        r0 := @parameter0: com.hp.hpl.jena.query.Dataset;

        r2 := @parameter1: java.io.InputStream;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.Lang;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.sparql.core.DatasetGraph,java.io.InputStream,java.lang.String,org.apache.jena.riot.Lang)>($r1, r2, r3, r4);

        return;
    }

    public static void read(com.hp.hpl.jena.sparql.core.DatasetGraph, java.io.InputStream, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.atlas.web.TypedInputStream $r2;
        org.apache.jena.riot.Lang r5;
        org.apache.jena.riot.system.StreamRDF $r1;
        java.lang.String r4;
        com.hp.hpl.jena.sparql.core.DatasetGraph r0;
        java.io.InputStream r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r3 := @parameter1: java.io.InputStream;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: org.apache.jena.riot.Lang;

        $r1 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF dataset(com.hp.hpl.jena.sparql.core.DatasetGraph)>(r0);

        $r2 = new org.apache.jena.atlas.web.TypedInputStream;

        specialinvoke $r2.<org.apache.jena.atlas.web.TypedInputStream: void <init>(java.io.InputStream)>(r3);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void process(org.apache.jena.riot.system.StreamRDF,org.apache.jena.atlas.web.TypedInputStream,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>($r1, $r2, r4, r5, null);

        return;
    }

    public static void read(com.hp.hpl.jena.query.Dataset, java.io.Reader, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r4;
        com.hp.hpl.jena.query.Dataset r0;
        java.io.Reader r2;
        java.lang.String r3;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @parameter0: com.hp.hpl.jena.query.Dataset;

        r2 := @parameter1: java.io.Reader;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.Lang;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.sparql.core.DatasetGraph,java.io.Reader,java.lang.String,org.apache.jena.riot.Lang)>($r1, r2, r3, r4);

        return;
    }

    public static void read(com.hp.hpl.jena.sparql.core.DatasetGraph, java.io.Reader, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r4;
        org.apache.jena.riot.system.StreamRDF $r1;
        java.lang.String r2;
        java.io.Reader r3;
        com.hp.hpl.jena.sparql.core.DatasetGraph r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r3 := @parameter1: java.io.Reader;

        r2 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.Lang;

        $r1 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF dataset(com.hp.hpl.jena.sparql.core.DatasetGraph)>(r0);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void process(org.apache.jena.riot.system.StreamRDF,java.lang.String,java.io.Reader,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>($r1, r2, r3, r4, null);

        return;
    }

    public static void read(com.hp.hpl.jena.query.Dataset, java.io.StringReader, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r4;
        java.io.StringReader r2;
        com.hp.hpl.jena.query.Dataset r0;
        java.lang.String r3;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @parameter0: com.hp.hpl.jena.query.Dataset;

        r2 := @parameter1: java.io.StringReader;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.Lang;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.sparql.core.DatasetGraph,java.io.StringReader,java.lang.String,org.apache.jena.riot.Lang)>($r1, r2, r3, r4);

        return;
    }

    public static void read(com.hp.hpl.jena.sparql.core.DatasetGraph, java.io.StringReader, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r4;
        java.io.StringReader r3;
        org.apache.jena.riot.system.StreamRDF $r1;
        java.lang.String r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r3 := @parameter1: java.io.StringReader;

        r2 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.Lang;

        $r1 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF dataset(com.hp.hpl.jena.sparql.core.DatasetGraph)>(r0);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void process(org.apache.jena.riot.system.StreamRDF,java.lang.String,java.io.Reader,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>($r1, r2, r3, r4, null);

        return;
    }

    public static void parse(org.apache.jena.riot.system.StreamRDF, java.lang.String)
    {
        org.apache.jena.riot.system.StreamRDF r0;
        java.lang.String r1;

        r0 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void parse(org.apache.jena.riot.system.StreamRDF,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>(r0, r1, null, null);

        return;
    }

    public static void parse(org.apache.jena.riot.system.StreamRDF, java.lang.String, org.apache.jena.riot.Lang, com.hp.hpl.jena.sparql.util.Context)
    {
        org.apache.jena.riot.Lang r2;
        org.apache.jena.riot.system.StreamRDF r0;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.util.Context r3;

        r0 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.jena.riot.Lang;

        r3 := @parameter3: com.hp.hpl.jena.sparql.util.Context;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void parse(org.apache.jena.riot.system.StreamRDF,java.lang.String,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>(r0, r1, r1, r2, r3);

        return;
    }

    public static void parse(org.apache.jena.riot.system.StreamRDF, java.lang.String, java.lang.String, org.apache.jena.riot.Lang, com.hp.hpl.jena.sparql.util.Context)
    {
        org.apache.jena.atlas.web.TypedInputStream $r2;
        org.apache.jena.riot.Lang r11;
        org.apache.jena.riot.RiotException $r4;
        org.apache.jena.riot.system.StreamRDF r3;
        java.lang.IllegalArgumentException $r9;
        com.hp.hpl.jena.sparql.util.Context r1;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String r0, $r8, r10;

        r3 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r0 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.String;

        r11 := @parameter3: org.apache.jena.riot.Lang;

        r1 := @parameter4: com.hp.hpl.jena.sparql.util.Context;

        if r0 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("URI to read from is null");

        throw $r9;

     label1:
        if r10 != null goto label2;

        r10 = staticinvoke <org.apache.jena.riot.system.IRIResolver: java.lang.String resolveFileURL(java.lang.String)>(r0);

     label2:
        if r11 != null goto label3;

        r11 = staticinvoke <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang filenameToLang(java.lang.String)>(r0);

     label3:
        $r2 = staticinvoke <org.apache.jena.riot.RDFDataMgr: org.apache.jena.atlas.web.TypedInputStream open(java.lang.String,com.hp.hpl.jena.sparql.util.Context)>(r0, r1);

        if $r2 != null goto label4;

        $r4 = new org.apache.jena.riot.RiotException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not found: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label4:
        staticinvoke <org.apache.jena.riot.RDFDataMgr: void process(org.apache.jena.riot.system.StreamRDF,org.apache.jena.atlas.web.TypedInputStream,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>(r3, $r2, r10, r11, r1);

        staticinvoke <org.apache.jena.atlas.io.IO: void close(java.io.Closeable)>($r2);

        return;
    }

    public static void parse(org.apache.jena.riot.system.StreamRDF, java.io.InputStream, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.system.StreamRDF r0;
        org.apache.jena.riot.Lang r2;
        java.io.InputStream r1;

        r0 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r1 := @parameter1: java.io.InputStream;

        r2 := @parameter2: org.apache.jena.riot.Lang;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void parse(org.apache.jena.riot.system.StreamRDF,java.io.InputStream,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>(r0, r1, null, r2, null);

        return;
    }

    public static void parse(org.apache.jena.riot.system.StreamRDF, java.io.InputStream, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r3;
        org.apache.jena.riot.system.StreamRDF r0;
        java.lang.String r2;
        java.io.InputStream r1;

        r0 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r1 := @parameter1: java.io.InputStream;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: org.apache.jena.riot.Lang;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void parse(org.apache.jena.riot.system.StreamRDF,java.io.InputStream,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>(r0, r1, r2, r3, null);

        return;
    }

    public static void parse(org.apache.jena.riot.system.StreamRDF, java.io.InputStream, java.lang.String, org.apache.jena.riot.Lang, com.hp.hpl.jena.sparql.util.Context)
    {
        org.apache.jena.atlas.web.TypedInputStream $r1;
        org.apache.jena.riot.Lang r4;
        org.apache.jena.riot.system.StreamRDF r0;
        java.lang.String r3;
        com.hp.hpl.jena.sparql.util.Context r5;
        java.io.InputStream r2;

        r0 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r2 := @parameter1: java.io.InputStream;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.jena.riot.Lang;

        r5 := @parameter4: com.hp.hpl.jena.sparql.util.Context;

        $r1 = new org.apache.jena.atlas.web.TypedInputStream;

        specialinvoke $r1.<org.apache.jena.atlas.web.TypedInputStream: void <init>(java.io.InputStream)>(r2);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void process(org.apache.jena.riot.system.StreamRDF,org.apache.jena.atlas.web.TypedInputStream,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>(r0, $r1, r3, r4, r5);

        return;
    }

    public static void parse(org.apache.jena.riot.system.StreamRDF, org.apache.jena.atlas.web.TypedInputStream)
    {
        org.apache.jena.atlas.web.TypedInputStream r1;
        org.apache.jena.riot.system.StreamRDF r0;

        r0 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r1 := @parameter1: org.apache.jena.atlas.web.TypedInputStream;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void parse(org.apache.jena.riot.system.StreamRDF,org.apache.jena.atlas.web.TypedInputStream,java.lang.String)>(r0, r1, null);

        return;
    }

    public static void parse(org.apache.jena.riot.system.StreamRDF, org.apache.jena.atlas.web.TypedInputStream, java.lang.String)
    {
        org.apache.jena.atlas.web.TypedInputStream r1;
        org.apache.jena.riot.system.StreamRDF r0;
        java.lang.String r2;

        r0 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r1 := @parameter1: org.apache.jena.atlas.web.TypedInputStream;

        r2 := @parameter2: java.lang.String;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void parse(org.apache.jena.riot.system.StreamRDF,org.apache.jena.atlas.web.TypedInputStream,java.lang.String,com.hp.hpl.jena.sparql.util.Context)>(r0, r1, r2, null);

        return;
    }

    public static void parse(org.apache.jena.riot.system.StreamRDF, org.apache.jena.atlas.web.TypedInputStream, java.lang.String, com.hp.hpl.jena.sparql.util.Context)
    {
        org.apache.jena.atlas.web.TypedInputStream r0, $r4;
        org.apache.jena.riot.Lang $r2;
        org.apache.jena.riot.system.StreamRDF r3;
        java.lang.String r5;
        com.hp.hpl.jena.sparql.util.Context r6;
        org.apache.jena.atlas.web.ContentType $r1;

        r3 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r0 := @parameter1: org.apache.jena.atlas.web.TypedInputStream;

        r5 := @parameter2: java.lang.String;

        r6 := @parameter3: com.hp.hpl.jena.sparql.util.Context;

        $r1 = virtualinvoke r0.<org.apache.jena.atlas.web.TypedInputStream: org.apache.jena.atlas.web.ContentType getMediaType()>();

        $r2 = staticinvoke <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang contentTypeToLang(org.apache.jena.atlas.web.ContentType)>($r1);

        $r4 = new org.apache.jena.atlas.web.TypedInputStream;

        specialinvoke $r4.<org.apache.jena.atlas.web.TypedInputStream: void <init>(java.io.InputStream)>(r0);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void process(org.apache.jena.riot.system.StreamRDF,org.apache.jena.atlas.web.TypedInputStream,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>(r3, $r4, r5, $r2, r6);

        return;
    }

    public static org.apache.jena.atlas.web.TypedInputStream open(java.lang.String)
    {
        org.apache.jena.atlas.web.TypedInputStream $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.jena.riot.RDFDataMgr: org.apache.jena.atlas.web.TypedInputStream open(java.lang.String,com.hp.hpl.jena.sparql.util.Context)>(r0, null);

        return $r1;
    }

    public static org.apache.jena.atlas.web.TypedInputStream open(java.lang.String, com.hp.hpl.jena.sparql.util.Context)
    {
        java.lang.ClassCastException $r4;
        java.lang.String r1, $r11, $r13;
        com.hp.hpl.jena.sparql.util.Symbol $r2, $r8;
        org.apache.jena.atlas.web.TypedInputStream $r15;
        org.slf4j.Logger $r6;
        org.apache.jena.riot.stream.StreamManager r14;
        com.hp.hpl.jena.sparql.util.Context r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5, $r7, $r9, $r10, $r12;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.sparql.util.Context;

        r14 = staticinvoke <org.apache.jena.riot.stream.StreamManager: org.apache.jena.riot.stream.StreamManager get()>();

        if r0 == null goto label4;

     label1:
        $r2 = <org.apache.jena.riot.RDFDataMgr: com.hp.hpl.jena.sparql.util.Symbol streamManagerSymbol>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>($r2, r0);

        r14 = (org.apache.jena.riot.stream.StreamManager) $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r6 = <org.apache.jena.riot.RDFDataMgr: org.slf4j.Logger log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Context symbol \'");

        $r8 = <org.apache.jena.riot.RDFDataMgr: com.hp.hpl.jena.sparql.util.Symbol streamManagerSymbol>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a ");

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String classShortName(java.lang.Class)>(class "Lorg/apache/jena/riot/stream/StreamManager;");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String)>($r13);

     label4:
        $r15 = staticinvoke <org.apache.jena.riot.RDFDataMgr: org.apache.jena.atlas.web.TypedInputStream open(java.lang.String,org.apache.jena.riot.stream.StreamManager)>(r1, r14);

        return $r15;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public static org.apache.jena.atlas.web.TypedInputStream open(java.lang.String, org.apache.jena.riot.stream.StreamManager)
    {
        java.lang.String r1, $r8, $r14, $r19;
        boolean $z0, $z1;
        org.apache.jena.atlas.web.TypedInputStream $r2;
        org.slf4j.Logger $r3, $r5, $r9, $r16;
        org.apache.jena.riot.stream.StreamManager r0;
        java.lang.StringBuilder $r4, $r6, $r7, $r11, $r12, $r13, $r15, $r17, $r18;
        org.apache.jena.riot.RiotNotFoundException $r10;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: org.apache.jena.riot.stream.StreamManager;

        $r2 = virtualinvoke r0.<org.apache.jena.riot.stream.StreamManager: org.apache.jena.atlas.web.TypedInputStream open(java.lang.String)>(r1);

        if $r2 != null goto label2;

        $r9 = <org.apache.jena.riot.RDFDataMgr: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r9.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label1;

        $r16 = <org.apache.jena.riot.RDFDataMgr: org.slf4j.Logger log>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not Found: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String)>($r19);

     label1:
        $r10 = new org.apache.jena.riot.RiotNotFoundException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not found: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.jena.riot.RiotNotFoundException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label2:
        $r3 = <org.apache.jena.riot.RDFDataMgr: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r3.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label3;

        $r5 = <org.apache.jena.riot.RDFDataMgr: org.slf4j.Logger log>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String)>($r8);

     label3:
        return $r2;
    }

    private static void process(org.apache.jena.riot.system.StreamRDF, org.apache.jena.atlas.web.TypedInputStream, java.lang.String, org.apache.jena.riot.Lang, com.hp.hpl.jena.sparql.util.Context)
    {
        org.apache.jena.riot.RiotException $r8, $r14;
        org.apache.jena.riot.ReaderRIOT $r5;
        java.lang.String r0, $r2, $r11, $r13, $r19, $r24;
        org.apache.jena.atlas.web.TypedInputStream r1;
        org.apache.jena.riot.Lang r3;
        org.apache.jena.riot.system.StreamRDF r6;
        com.hp.hpl.jena.sparql.util.Context r7;
        java.lang.StringBuilder $r9, $r10, $r12, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r23;
        org.apache.jena.atlas.web.ContentType $r4;

        r6 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r1 := @parameter1: org.apache.jena.atlas.web.TypedInputStream;

        r0 := @parameter2: java.lang.String;

        r3 := @parameter3: org.apache.jena.riot.Lang;

        r7 := @parameter4: com.hp.hpl.jena.sparql.util.Context;

        $r2 = virtualinvoke r1.<org.apache.jena.atlas.web.TypedInputStream: java.lang.String getContentType()>();

        $r4 = staticinvoke <org.apache.jena.riot.RDFDataMgr: org.apache.jena.atlas.web.ContentType determineCT(java.lang.String,java.lang.String,org.apache.jena.riot.Lang)>(r0, $r2, r3);

        if $r4 != null goto label1;

        $r14 = new org.apache.jena.riot.RiotException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to determine the triples content type: (URI=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : stream=");

        $r19 = virtualinvoke r1.<org.apache.jena.atlas.web.TypedInputStream: java.lang.String getContentType()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : hint=");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>($r24);

        throw $r14;

     label1:
        $r5 = staticinvoke <org.apache.jena.riot.RDFDataMgr: org.apache.jena.riot.ReaderRIOT getReader(org.apache.jena.atlas.web.ContentType)>($r4);

        if $r5 != null goto label2;

        $r8 = new org.apache.jena.riot.RiotException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No triples reader for content type: ");

        $r11 = virtualinvoke $r4.<org.apache.jena.atlas.web.ContentType: java.lang.String getContentType()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label2:
        interfaceinvoke $r5.<org.apache.jena.riot.ReaderRIOT: void read(java.io.InputStream,java.lang.String,org.apache.jena.atlas.web.ContentType,org.apache.jena.riot.system.StreamRDF,com.hp.hpl.jena.sparql.util.Context)>(r1, r0, $r4, r6, r7);

        return;
    }

    private static org.apache.jena.riot.ReaderRIOT getReader(org.apache.jena.atlas.web.ContentType)
    {
        org.apache.jena.riot.Lang $r1;
        org.apache.jena.riot.ReaderRIOTFactory $r2;
        org.apache.jena.riot.ReaderRIOT $r3;
        org.apache.jena.atlas.web.ContentType r0;

        r0 := @parameter0: org.apache.jena.atlas.web.ContentType;

        $r1 = staticinvoke <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang contentTypeToLang(org.apache.jena.atlas.web.ContentType)>(r0);

        $r2 = staticinvoke <org.apache.jena.riot.RDFParserRegistry: org.apache.jena.riot.ReaderRIOTFactory getFactory(org.apache.jena.riot.Lang)>($r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<org.apache.jena.riot.ReaderRIOTFactory: org.apache.jena.riot.ReaderRIOT create(org.apache.jena.riot.Lang)>($r1);

        return $r3;
    }

    private static void processTriples(org.apache.jena.riot.system.StreamRDF, java.lang.String, java.io.Reader, org.apache.jena.riot.Lang, com.hp.hpl.jena.sparql.util.Context)
    {
        org.apache.jena.riot.RiotException $r22, $r23;
        org.apache.jena.atlas.io.PeekReader $r7;
        org.apache.jena.riot.system.ErrorHandler $r8;
        org.apache.jena.riot.lang.LangRIOT r19;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON $r24;
        java.lang.String r0, $r17;
        boolean $z0, $z1;
        org.apache.jena.riot.Lang r1, $r3, $r4;
        org.apache.jena.riot.system.StreamRDF r6;
        java.io.Reader r5;
        com.hp.hpl.jena.sparql.util.Context r18;
        org.apache.jena.riot.tokens.Tokenizer $r20;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r21;
        org.apache.jena.atlas.web.ContentType $r2;

        r6 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r0 := @parameter1: java.lang.String;

        r5 := @parameter2: java.io.Reader;

        r1 := @parameter3: org.apache.jena.riot.Lang;

        r18 := @parameter4: com.hp.hpl.jena.sparql.util.Context;

        $r2 = staticinvoke <org.apache.jena.riot.RDFDataMgr: org.apache.jena.atlas.web.ContentType determineCT(java.lang.String,java.lang.String,org.apache.jena.riot.Lang)>(r0, null, r1);

        if $r2 != null goto label1;

        $r22 = new org.apache.jena.riot.RiotException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to determine the triples content type: (URI=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : hint=");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>($r17);

        throw $r22;

     label1:
        if r1 != null goto label2;

        $r23 = new org.apache.jena.riot.RiotException;

        specialinvoke $r23.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>("No language specificied");

        throw $r23;

     label2:
        $r3 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFXML>;

        $z0 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean sameLang(org.apache.jena.riot.Lang,org.apache.jena.riot.Lang)>($r3, r1);

        if $z0 == 0 goto label3;

        $r8 = <org.apache.jena.riot.system.ErrorHandlerFactory: org.apache.jena.riot.system.ErrorHandler errorHandlerStd>;

        r19 = staticinvoke <org.apache.jena.riot.lang.LangRDFXML: org.apache.jena.riot.lang.LangRDFXML create(java.io.Reader,java.lang.String,java.lang.String,org.apache.jena.riot.system.ErrorHandler,org.apache.jena.riot.system.StreamRDF)>(r5, r0, r0, $r8, r6);

        goto label6;

     label3:
        $r4 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFJSON>;

        $z1 = virtualinvoke $r4.<org.apache.jena.riot.Lang: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label4;

        $r24 = new org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $r20 = $r24;

        $r7 = staticinvoke <org.apache.jena.atlas.io.PeekReader: org.apache.jena.atlas.io.PeekReader make(java.io.Reader)>(r5);

        specialinvoke $r24.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void <init>(org.apache.jena.atlas.io.PeekReader)>($r7);

        goto label5;

     label4:
        $r20 = staticinvoke <org.apache.jena.riot.tokens.TokenizerFactory: org.apache.jena.riot.tokens.Tokenizer makeTokenizer(java.io.Reader)>(r5);

     label5:
        r19 = staticinvoke <org.apache.jena.riot.RiotReader: org.apache.jena.riot.lang.LangRIOT createParser(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.riot.system.StreamRDF)>($r20, r1, r0, r6);

     label6:
        interfaceinvoke r19.<org.apache.jena.riot.lang.LangRIOT: void parse()>();

        return;
    }

    private static void process(org.apache.jena.riot.system.StreamRDF, java.lang.String, java.io.Reader, org.apache.jena.riot.Lang, com.hp.hpl.jena.sparql.util.Context)
    {
        org.apache.jena.riot.Lang r2;
        org.apache.jena.riot.lang.LangRIOT $r5;
        org.apache.jena.riot.tokens.Tokenizer $r1;
        org.apache.jena.riot.system.StreamRDF r4;
        java.io.Reader r0;
        java.lang.String r3;
        com.hp.hpl.jena.sparql.util.Context r6;

        r4 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r3 := @parameter1: java.lang.String;

        r0 := @parameter2: java.io.Reader;

        r2 := @parameter3: org.apache.jena.riot.Lang;

        r6 := @parameter4: com.hp.hpl.jena.sparql.util.Context;

        $r1 = staticinvoke <org.apache.jena.riot.tokens.TokenizerFactory: org.apache.jena.riot.tokens.Tokenizer makeTokenizer(java.io.Reader)>(r0);

        $r5 = staticinvoke <org.apache.jena.riot.RiotReader: org.apache.jena.riot.lang.LangRIOT createParser(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.Lang,java.lang.String,org.apache.jena.riot.system.StreamRDF)>($r1, r2, r3, r4);

        interfaceinvoke $r5.<org.apache.jena.riot.lang.LangRIOT: void parse()>();

        return;
    }

    public static org.apache.jena.riot.Lang determineLang(java.lang.String, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r2, $r4;
        java.lang.String r0, r1;
        org.apache.jena.atlas.web.ContentType $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.jena.riot.Lang;

        $r3 = staticinvoke <org.apache.jena.riot.RDFDataMgr: org.apache.jena.atlas.web.ContentType determineCT(java.lang.String,java.lang.String,org.apache.jena.riot.Lang)>(r0, r1, r2);

        if $r3 != null goto label1;

        return r2;

     label1:
        $r4 = staticinvoke <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang contentTypeToLang(org.apache.jena.atlas.web.ContentType)>($r3);

        if $r4 != null goto label2;

        return r2;

     label2:
        return $r4;
    }

    static org.apache.jena.atlas.web.ContentType determineCT(java.lang.String, java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r2;
        java.lang.String $r0, r1, r3;
        org.apache.jena.atlas.web.ContentType r4, $r5;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.jena.riot.Lang;

        $r0 = "text/plain";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if r3 == null goto label1;

        r3 = staticinvoke <org.apache.jena.riot.WebContent: java.lang.String contentTypeCanonical(java.lang.String)>(r3);

     label1:
        r4 = null;

        if $z0 != 0 goto label4;

        if r3 != null goto label2;

        $r5 = null;

        goto label3;

     label2:
        $r5 = staticinvoke <org.apache.jena.atlas.web.ContentType: org.apache.jena.atlas.web.ContentType create(java.lang.String)>(r3);

     label3:
        r4 = $r5;

     label4:
        if r4 != null goto label5;

        if r2 == null goto label5;

        r4 = virtualinvoke r2.<org.apache.jena.riot.Lang: org.apache.jena.atlas.web.ContentType getContentType()>();

     label5:
        if r4 != null goto label6;

        r4 = staticinvoke <org.apache.jena.riot.RDFLanguages: org.apache.jena.atlas.web.ContentType guessContentType(java.lang.String)>(r1);

     label6:
        return r4;
    }

    public static void write(java.io.OutputStream, com.hp.hpl.jena.rdf.model.Model, org.apache.jena.riot.Lang)
    {
        java.io.OutputStream r0;
        org.apache.jena.riot.Lang r3;
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.graph.Graph $r2;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        r3 := @parameter2: org.apache.jena.riot.Lang;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write(java.io.OutputStream,com.hp.hpl.jena.graph.Graph,org.apache.jena.riot.Lang)>(r0, $r2, r3);

        return;
    }

    public static void write(java.io.OutputStream, com.hp.hpl.jena.rdf.model.Model, org.apache.jena.riot.RDFFormat)
    {
        java.io.OutputStream r0;
        com.hp.hpl.jena.rdf.model.Model r1;
        org.apache.jena.riot.RDFFormat r3;
        com.hp.hpl.jena.graph.Graph $r2;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        r3 := @parameter2: org.apache.jena.riot.RDFFormat;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write(java.io.OutputStream,com.hp.hpl.jena.graph.Graph,org.apache.jena.riot.RDFFormat)>(r0, $r2, r3);

        return;
    }

    public static void write(java.io.StringWriter, com.hp.hpl.jena.rdf.model.Model, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r3;
        java.io.StringWriter r0;
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.graph.Graph $r2;

        r0 := @parameter0: java.io.StringWriter;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        r3 := @parameter2: org.apache.jena.riot.Lang;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write(java.io.StringWriter,com.hp.hpl.jena.graph.Graph,org.apache.jena.riot.Lang)>(r0, $r2, r3);

        return;
    }

    public static void write(java.io.StringWriter, com.hp.hpl.jena.rdf.model.Model, org.apache.jena.riot.RDFFormat)
    {
        java.io.StringWriter r0;
        com.hp.hpl.jena.rdf.model.Model r1;
        org.apache.jena.riot.RDFFormat r3;
        com.hp.hpl.jena.graph.Graph $r2;

        r0 := @parameter0: java.io.StringWriter;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        r3 := @parameter2: org.apache.jena.riot.RDFFormat;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write(java.io.StringWriter,com.hp.hpl.jena.graph.Graph,org.apache.jena.riot.RDFFormat)>(r0, $r2, r3);

        return;
    }

    public static void write(java.io.Writer, com.hp.hpl.jena.rdf.model.Model, org.apache.jena.riot.RDFFormat)
    {
        java.io.Writer r0;
        com.hp.hpl.jena.rdf.model.Model r1;
        org.apache.jena.riot.RDFFormat r3;
        com.hp.hpl.jena.graph.Graph $r2;

        r0 := @parameter0: java.io.Writer;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        r3 := @parameter2: org.apache.jena.riot.RDFFormat;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write(java.io.Writer,com.hp.hpl.jena.graph.Graph,org.apache.jena.riot.RDFFormat)>(r0, $r2, r3);

        return;
    }

    public static void write(java.io.OutputStream, com.hp.hpl.jena.graph.Graph, org.apache.jena.riot.Lang)
    {
        java.io.OutputStream r2;
        org.apache.jena.riot.Lang r0;
        org.apache.jena.riot.RDFFormat $r1;
        com.hp.hpl.jena.graph.Graph r3;

        r2 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter2: org.apache.jena.riot.Lang;

        $r1 = staticinvoke <org.apache.jena.riot.RDFWriterRegistry: org.apache.jena.riot.RDFFormat defaultSerialization(org.apache.jena.riot.Lang)>(r0);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write(java.io.OutputStream,com.hp.hpl.jena.graph.Graph,org.apache.jena.riot.RDFFormat)>(r2, r3, $r1);

        return;
    }

    public static void write(java.io.OutputStream, com.hp.hpl.jena.graph.Graph, org.apache.jena.riot.RDFFormat)
    {
        java.io.OutputStream r0;
        org.apache.jena.riot.RDFFormat r2;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter2: org.apache.jena.riot.RDFFormat;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write$(java.io.OutputStream,com.hp.hpl.jena.graph.Graph,org.apache.jena.riot.RDFFormat)>(r0, r1, r2);

        return;
    }

    public static void write(java.io.StringWriter, com.hp.hpl.jena.graph.Graph, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r2;
        java.io.StringWriter r0;
        org.apache.jena.riot.RDFFormat $r3;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @parameter0: java.io.StringWriter;

        r1 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter2: org.apache.jena.riot.Lang;

        $r3 = staticinvoke <org.apache.jena.riot.RDFWriterRegistry: org.apache.jena.riot.RDFFormat defaultSerialization(org.apache.jena.riot.Lang)>(r2);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write$(java.io.Writer,com.hp.hpl.jena.graph.Graph,org.apache.jena.riot.RDFFormat)>(r0, r1, $r3);

        return;
    }

    public static void write(java.io.StringWriter, com.hp.hpl.jena.graph.Graph, org.apache.jena.riot.RDFFormat)
    {
        org.apache.jena.riot.RDFFormat r2;
        com.hp.hpl.jena.graph.Graph r1;
        java.io.StringWriter r0;

        r0 := @parameter0: java.io.StringWriter;

        r1 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter2: org.apache.jena.riot.RDFFormat;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write$(java.io.Writer,com.hp.hpl.jena.graph.Graph,org.apache.jena.riot.RDFFormat)>(r0, r1, r2);

        return;
    }

    public static void write(java.io.Writer, com.hp.hpl.jena.graph.Graph, org.apache.jena.riot.RDFFormat)
    {
        java.io.Writer r0;
        org.apache.jena.riot.RDFFormat r2;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @parameter0: java.io.Writer;

        r1 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter2: org.apache.jena.riot.RDFFormat;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write$(java.io.Writer,com.hp.hpl.jena.graph.Graph,org.apache.jena.riot.RDFFormat)>(r0, r1, r2);

        return;
    }

    public static void write(java.io.OutputStream, com.hp.hpl.jena.query.Dataset, org.apache.jena.riot.Lang)
    {
        java.io.OutputStream r0;
        org.apache.jena.riot.Lang r3;
        com.hp.hpl.jena.query.Dataset r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r2;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.hp.hpl.jena.query.Dataset;

        r3 := @parameter2: org.apache.jena.riot.Lang;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write(java.io.OutputStream,com.hp.hpl.jena.sparql.core.DatasetGraph,org.apache.jena.riot.Lang)>(r0, $r2, r3);

        return;
    }

    public static void write(java.io.OutputStream, com.hp.hpl.jena.query.Dataset, org.apache.jena.riot.RDFFormat)
    {
        java.io.OutputStream r0;
        com.hp.hpl.jena.query.Dataset r1;
        org.apache.jena.riot.RDFFormat r3;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r2;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.hp.hpl.jena.query.Dataset;

        r3 := @parameter2: org.apache.jena.riot.RDFFormat;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write(java.io.OutputStream,com.hp.hpl.jena.sparql.core.DatasetGraph,org.apache.jena.riot.RDFFormat)>(r0, $r2, r3);

        return;
    }

    public static void write(java.io.StringWriter, com.hp.hpl.jena.query.Dataset, org.apache.jena.riot.RDFFormat)
    {
        java.io.StringWriter r0;
        com.hp.hpl.jena.query.Dataset r1;
        org.apache.jena.riot.RDFFormat r3;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r2;

        r0 := @parameter0: java.io.StringWriter;

        r1 := @parameter1: com.hp.hpl.jena.query.Dataset;

        r3 := @parameter2: org.apache.jena.riot.RDFFormat;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write$(java.io.Writer,com.hp.hpl.jena.sparql.core.DatasetGraph,org.apache.jena.riot.RDFFormat)>(r0, $r2, r3);

        return;
    }

    public static void write(java.io.StringWriter, com.hp.hpl.jena.query.Dataset, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r0;
        java.io.StringWriter r2;
        com.hp.hpl.jena.query.Dataset r3;
        org.apache.jena.riot.RDFFormat $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r4;

        r2 := @parameter0: java.io.StringWriter;

        r3 := @parameter1: com.hp.hpl.jena.query.Dataset;

        r0 := @parameter2: org.apache.jena.riot.Lang;

        $r1 = staticinvoke <org.apache.jena.riot.RDFWriterRegistry: org.apache.jena.riot.RDFFormat defaultSerialization(org.apache.jena.riot.Lang)>(r0);

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write$(java.io.Writer,com.hp.hpl.jena.sparql.core.DatasetGraph,org.apache.jena.riot.RDFFormat)>(r2, $r4, $r1);

        return;
    }

    public static void write(java.io.Writer, com.hp.hpl.jena.query.Dataset, org.apache.jena.riot.RDFFormat)
    {
        java.io.Writer r0;
        com.hp.hpl.jena.query.Dataset r1;
        org.apache.jena.riot.RDFFormat r3;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r2;

        r0 := @parameter0: java.io.Writer;

        r1 := @parameter1: com.hp.hpl.jena.query.Dataset;

        r3 := @parameter2: org.apache.jena.riot.RDFFormat;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write$(java.io.Writer,com.hp.hpl.jena.sparql.core.DatasetGraph,org.apache.jena.riot.RDFFormat)>(r0, $r2, r3);

        return;
    }

    public static void write(java.io.OutputStream, com.hp.hpl.jena.sparql.core.DatasetGraph, org.apache.jena.riot.Lang)
    {
        java.io.OutputStream r2;
        org.apache.jena.riot.Lang r0;
        org.apache.jena.riot.RDFFormat $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph r3;

        r2 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r0 := @parameter2: org.apache.jena.riot.Lang;

        $r1 = staticinvoke <org.apache.jena.riot.RDFWriterRegistry: org.apache.jena.riot.RDFFormat defaultSerialization(org.apache.jena.riot.Lang)>(r0);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write(java.io.OutputStream,com.hp.hpl.jena.sparql.core.DatasetGraph,org.apache.jena.riot.RDFFormat)>(r2, r3, $r1);

        return;
    }

    public static void write(java.io.OutputStream, com.hp.hpl.jena.sparql.core.DatasetGraph, org.apache.jena.riot.RDFFormat)
    {
        java.io.OutputStream r0;
        org.apache.jena.riot.RDFFormat r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r2 := @parameter2: org.apache.jena.riot.RDFFormat;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write$(java.io.OutputStream,com.hp.hpl.jena.sparql.core.DatasetGraph,org.apache.jena.riot.RDFFormat)>(r0, r1, r2);

        return;
    }

    public static void write(java.io.StringWriter, com.hp.hpl.jena.sparql.core.DatasetGraph, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r0;
        java.io.StringWriter r2;
        org.apache.jena.riot.RDFFormat $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph r3;

        r2 := @parameter0: java.io.StringWriter;

        r3 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r0 := @parameter2: org.apache.jena.riot.Lang;

        $r1 = staticinvoke <org.apache.jena.riot.RDFWriterRegistry: org.apache.jena.riot.RDFFormat defaultSerialization(org.apache.jena.riot.Lang)>(r0);

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write(java.io.StringWriter,com.hp.hpl.jena.sparql.core.DatasetGraph,org.apache.jena.riot.RDFFormat)>(r2, r3, $r1);

        return;
    }

    public static void write(java.io.StringWriter, com.hp.hpl.jena.sparql.core.DatasetGraph, org.apache.jena.riot.RDFFormat)
    {
        org.apache.jena.riot.RDFFormat r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;
        java.io.StringWriter r0;

        r0 := @parameter0: java.io.StringWriter;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r2 := @parameter2: org.apache.jena.riot.RDFFormat;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write$(java.io.Writer,com.hp.hpl.jena.sparql.core.DatasetGraph,org.apache.jena.riot.RDFFormat)>(r0, r1, r2);

        return;
    }

    public static void write(java.io.Writer, com.hp.hpl.jena.sparql.core.DatasetGraph, org.apache.jena.riot.RDFFormat)
    {
        java.io.Writer r0;
        org.apache.jena.riot.RDFFormat r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;

        r0 := @parameter0: java.io.Writer;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r2 := @parameter2: org.apache.jena.riot.RDFFormat;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write$(java.io.Writer,com.hp.hpl.jena.sparql.core.DatasetGraph,org.apache.jena.riot.RDFFormat)>(r0, r1, r2);

        return;
    }

    public static void writeTriples(java.io.OutputStream, java.util.Iterator)
    {
        java.io.OutputStream r0;
        java.util.Iterator r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.util.Iterator;

        staticinvoke <org.apache.jena.riot.writer.NTriplesWriter: void write(java.io.OutputStream,java.util.Iterator)>(r0, r1);

        return;
    }

    public static void writeQuads(java.io.OutputStream, java.util.Iterator)
    {
        java.io.OutputStream r0;
        java.util.Iterator r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.util.Iterator;

        staticinvoke <org.apache.jena.riot.writer.NQuadsWriter: void write(java.io.OutputStream,java.util.Iterator)>(r0, r1);

        return;
    }

    public static org.apache.jena.riot.WriterGraphRIOT createGraphWriter(org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r0;
        org.apache.jena.riot.RDFFormat $r1;
        org.apache.jena.riot.WriterGraphRIOT $r2;

        r0 := @parameter0: org.apache.jena.riot.Lang;

        $r1 = staticinvoke <org.apache.jena.riot.RDFWriterRegistry: org.apache.jena.riot.RDFFormat defaultSerialization(org.apache.jena.riot.Lang)>(r0);

        $r2 = staticinvoke <org.apache.jena.riot.RDFDataMgr: org.apache.jena.riot.WriterGraphRIOT createGraphWriter$(org.apache.jena.riot.RDFFormat)>($r1);

        return $r2;
    }

    public static org.apache.jena.riot.WriterGraphRIOT createGraphWriter(org.apache.jena.riot.RDFFormat)
    {
        org.apache.jena.riot.RDFFormat r0;
        org.apache.jena.riot.WriterGraphRIOT $r1;

        r0 := @parameter0: org.apache.jena.riot.RDFFormat;

        $r1 = staticinvoke <org.apache.jena.riot.RDFDataMgr: org.apache.jena.riot.WriterGraphRIOT createGraphWriter$(org.apache.jena.riot.RDFFormat)>(r0);

        return $r1;
    }

    public static org.apache.jena.riot.WriterDatasetRIOT createDatasetWriter(org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r0;
        org.apache.jena.riot.RDFFormat $r1;
        org.apache.jena.riot.WriterDatasetRIOT $r2;

        r0 := @parameter0: org.apache.jena.riot.Lang;

        $r1 = staticinvoke <org.apache.jena.riot.RDFWriterRegistry: org.apache.jena.riot.RDFFormat defaultSerialization(org.apache.jena.riot.Lang)>(r0);

        $r2 = staticinvoke <org.apache.jena.riot.RDFDataMgr: org.apache.jena.riot.WriterDatasetRIOT createDatasetWriter$(org.apache.jena.riot.RDFFormat)>($r1);

        return $r2;
    }

    public static org.apache.jena.riot.WriterDatasetRIOT createDatasetWriter(org.apache.jena.riot.RDFFormat)
    {
        org.apache.jena.riot.RDFFormat r0;
        org.apache.jena.riot.WriterDatasetRIOT $r1;

        r0 := @parameter0: org.apache.jena.riot.RDFFormat;

        $r1 = staticinvoke <org.apache.jena.riot.RDFDataMgr: org.apache.jena.riot.WriterDatasetRIOT createDatasetWriter$(org.apache.jena.riot.RDFFormat)>(r0);

        return $r1;
    }

    private static org.apache.jena.riot.WriterGraphRIOT createGraphWriter$(org.apache.jena.riot.RDFFormat)
    {
        org.apache.jena.riot.RiotException $r3;
        org.apache.jena.riot.WriterGraphRIOTFactory $r1;
        java.lang.StringBuilder $r4, $r5, $r6;
        org.apache.jena.riot.RDFFormat r0;
        org.apache.jena.riot.WriterGraphRIOT $r2;
        java.lang.String $r7;

        r0 := @parameter0: org.apache.jena.riot.RDFFormat;

        $r1 = staticinvoke <org.apache.jena.riot.RDFWriterRegistry: org.apache.jena.riot.WriterGraphRIOTFactory getWriterGraphFactory(org.apache.jena.riot.RDFFormat)>(r0);

        if $r1 != null goto label1;

        $r3 = new org.apache.jena.riot.RiotException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No graph writer for ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r2 = interfaceinvoke $r1.<org.apache.jena.riot.WriterGraphRIOTFactory: org.apache.jena.riot.WriterGraphRIOT create(org.apache.jena.riot.RDFFormat)>(r0);

        return $r2;
    }

    private static org.apache.jena.riot.WriterDatasetRIOT createDatasetWriter$(org.apache.jena.riot.RDFFormat)
    {
        org.apache.jena.riot.RiotException $r3;
        org.apache.jena.riot.WriterDatasetRIOTFactory $r1;
        java.lang.StringBuilder $r4, $r5, $r6;
        org.apache.jena.riot.RDFFormat r0;
        java.lang.String $r7;
        org.apache.jena.riot.WriterDatasetRIOT $r2;

        r0 := @parameter0: org.apache.jena.riot.RDFFormat;

        $r1 = staticinvoke <org.apache.jena.riot.RDFWriterRegistry: org.apache.jena.riot.WriterDatasetRIOTFactory getWriterDatasetFactory(org.apache.jena.riot.RDFFormat)>(r0);

        if $r1 != null goto label1;

        $r3 = new org.apache.jena.riot.RiotException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No dataset writer for ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r2 = interfaceinvoke $r1.<org.apache.jena.riot.WriterDatasetRIOTFactory: org.apache.jena.riot.WriterDatasetRIOT create(org.apache.jena.riot.RDFFormat)>(r0);

        return $r2;
    }

    private static void write$(java.io.OutputStream, com.hp.hpl.jena.graph.Graph, org.apache.jena.riot.RDFFormat)
    {
        java.io.OutputStream r2;
        org.apache.jena.riot.system.PrefixMap $r4;
        org.apache.jena.riot.RDFFormat r0;
        org.apache.jena.riot.WriterGraphRIOT $r1;
        com.hp.hpl.jena.graph.Graph r3;

        r2 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter2: org.apache.jena.riot.RDFFormat;

        $r1 = staticinvoke <org.apache.jena.riot.RDFDataMgr: org.apache.jena.riot.WriterGraphRIOT createGraphWriter$(org.apache.jena.riot.RDFFormat)>(r0);

        $r4 = staticinvoke <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.PrefixMap prefixMap(com.hp.hpl.jena.graph.Graph)>(r3);

        interfaceinvoke $r1.<org.apache.jena.riot.WriterGraphRIOT: void write(java.io.OutputStream,com.hp.hpl.jena.graph.Graph,org.apache.jena.riot.system.PrefixMap,java.lang.String,com.hp.hpl.jena.sparql.util.Context)>(r2, r3, $r4, null, null);

        return;
    }

    private static void write$(java.io.Writer, com.hp.hpl.jena.graph.Graph, org.apache.jena.riot.RDFFormat)
    {
        org.apache.jena.riot.system.PrefixMap $r4;
        java.io.Writer r2;
        org.apache.jena.riot.RDFFormat r0;
        org.apache.jena.riot.WriterGraphRIOT $r1;
        com.hp.hpl.jena.graph.Graph r3;

        r2 := @parameter0: java.io.Writer;

        r3 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter2: org.apache.jena.riot.RDFFormat;

        $r1 = staticinvoke <org.apache.jena.riot.RDFDataMgr: org.apache.jena.riot.WriterGraphRIOT createGraphWriter$(org.apache.jena.riot.RDFFormat)>(r0);

        $r4 = staticinvoke <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.PrefixMap prefixMap(com.hp.hpl.jena.graph.Graph)>(r3);

        interfaceinvoke $r1.<org.apache.jena.riot.WriterGraphRIOT: void write(java.io.Writer,com.hp.hpl.jena.graph.Graph,org.apache.jena.riot.system.PrefixMap,java.lang.String,com.hp.hpl.jena.sparql.util.Context)>(r2, r3, $r4, null, null);

        return;
    }

    private static void write$(java.io.OutputStream, com.hp.hpl.jena.sparql.core.DatasetGraph, org.apache.jena.riot.RDFFormat)
    {
        java.io.OutputStream r2;
        org.apache.jena.riot.system.PrefixMap $r4;
        org.apache.jena.riot.RDFFormat r0;
        org.apache.jena.riot.WriterDatasetRIOT $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph r3;

        r2 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r0 := @parameter2: org.apache.jena.riot.RDFFormat;

        $r1 = staticinvoke <org.apache.jena.riot.RDFDataMgr: org.apache.jena.riot.WriterDatasetRIOT createDatasetWriter$(org.apache.jena.riot.RDFFormat)>(r0);

        $r4 = staticinvoke <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.PrefixMap prefixMap(com.hp.hpl.jena.sparql.core.DatasetGraph)>(r3);

        interfaceinvoke $r1.<org.apache.jena.riot.WriterDatasetRIOT: void write(java.io.OutputStream,com.hp.hpl.jena.sparql.core.DatasetGraph,org.apache.jena.riot.system.PrefixMap,java.lang.String,com.hp.hpl.jena.sparql.util.Context)>(r2, r3, $r4, null, null);

        return;
    }

    private static void write$(java.io.Writer, com.hp.hpl.jena.sparql.core.DatasetGraph, org.apache.jena.riot.RDFFormat)
    {
        org.apache.jena.riot.system.PrefixMap $r4;
        java.io.Writer r2;
        org.apache.jena.riot.RDFFormat r0;
        org.apache.jena.riot.WriterDatasetRIOT $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph r3;

        r2 := @parameter0: java.io.Writer;

        r3 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r0 := @parameter2: org.apache.jena.riot.RDFFormat;

        $r1 = staticinvoke <org.apache.jena.riot.RDFDataMgr: org.apache.jena.riot.WriterDatasetRIOT createDatasetWriter$(org.apache.jena.riot.RDFFormat)>(r0);

        $r4 = staticinvoke <org.apache.jena.riot.system.RiotLib: org.apache.jena.riot.system.PrefixMap prefixMap(com.hp.hpl.jena.sparql.core.DatasetGraph)>(r3);

        interfaceinvoke $r1.<org.apache.jena.riot.WriterDatasetRIOT: void write(java.io.Writer,com.hp.hpl.jena.sparql.core.DatasetGraph,org.apache.jena.riot.system.PrefixMap,java.lang.String,com.hp.hpl.jena.sparql.util.Context)>(r2, r3, $r4, null, null);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, $r6;
        com.hp.hpl.jena.sparql.util.Symbol $r7;

        staticinvoke <org.apache.jena.riot.RIOT: void init()>();

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jena/riot/RDFDataMgr;");

        <org.apache.jena.riot.RDFDataMgr: org.slf4j.Logger log> = $r0;

        <org.apache.jena.riot.RDFDataMgr: java.lang.String riotBase> = "http://jena.apache.org/riot/";

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = <org.apache.jena.riot.RDFDataMgr: java.lang.String riotBase>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("streamManager");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.jena.riot.RDFDataMgr: java.lang.String streamManagerSymbolStr> = $r5;

        $r6 = <org.apache.jena.riot.RDFDataMgr: java.lang.String streamManagerSymbolStr>;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.util.Symbol: com.hp.hpl.jena.sparql.util.Symbol create(java.lang.String)>($r6);

        <org.apache.jena.riot.RDFDataMgr: com.hp.hpl.jena.sparql.util.Symbol streamManagerSymbol> = $r7;

        return;
    }
}
