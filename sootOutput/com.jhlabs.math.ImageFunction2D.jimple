public class com.jhlabs.math.ImageFunction2D extends java.lang.Object implements com.jhlabs.math.Function2D
{
    public static final int ZERO;
    public static final int CLAMP;
    public static final int WRAP;
    protected int[] pixels;
    protected int width;
    protected int height;
    protected int edgeAction;
    protected boolean alpha;

    public void <init>(java.awt.image.BufferedImage)
    {
        com.jhlabs.math.ImageFunction2D r0;
        java.awt.image.BufferedImage r1;

        r0 := @this: com.jhlabs.math.ImageFunction2D;

        r1 := @parameter0: java.awt.image.BufferedImage;

        specialinvoke r0.<com.jhlabs.math.ImageFunction2D: void <init>(java.awt.image.BufferedImage,boolean)>(r1, 0);

        return;
    }

    public void <init>(java.awt.image.BufferedImage, boolean)
    {
        com.jhlabs.math.ImageFunction2D r0;
        java.awt.image.BufferedImage r1;
        boolean z0;

        r0 := @this: com.jhlabs.math.ImageFunction2D;

        r1 := @parameter0: java.awt.image.BufferedImage;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.jhlabs.math.ImageFunction2D: void <init>(java.awt.image.BufferedImage,int,boolean)>(r1, 0, z0);

        return;
    }

    public void <init>(java.awt.image.BufferedImage, int, boolean)
    {
        java.awt.image.BufferedImage r1;
        com.jhlabs.math.ImageFunction2D r0;
        int[] $r2;
        int $i0, $i1, $i2, $i3, i4;
        boolean z0;

        r0 := @this: com.jhlabs.math.ImageFunction2D;

        r1 := @parameter0: java.awt.image.BufferedImage;

        i4 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jhlabs.math.ImageFunction2D: int edgeAction> = 0;

        r0.<com.jhlabs.math.ImageFunction2D: boolean alpha> = 0;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        $r2 = virtualinvoke r0.<com.jhlabs.math.ImageFunction2D: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r1, 0, 0, $i0, $i1, null);

        $i2 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i3 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r0.<com.jhlabs.math.ImageFunction2D: void init(int[],int,int,int,boolean)>($r2, $i2, $i3, i4, z0);

        return;
    }

    public void <init>(int[], int, int, int, boolean)
    {
        com.jhlabs.math.ImageFunction2D r0;
        int[] r1;
        int i0, i1, i2;
        boolean z0;

        r0 := @this: com.jhlabs.math.ImageFunction2D;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jhlabs.math.ImageFunction2D: int edgeAction> = 0;

        r0.<com.jhlabs.math.ImageFunction2D: boolean alpha> = 0;

        virtualinvoke r0.<com.jhlabs.math.ImageFunction2D: void init(int[],int,int,int,boolean)>(r1, i0, i1, i2, z0);

        return;
    }

    public void <init>(java.awt.Image)
    {
        com.jhlabs.math.ImageFunction2D r0;
        java.awt.Image r1;

        r0 := @this: com.jhlabs.math.ImageFunction2D;

        r1 := @parameter0: java.awt.Image;

        specialinvoke r0.<com.jhlabs.math.ImageFunction2D: void <init>(java.awt.Image,int,boolean)>(r1, 0, 0);

        return;
    }

    public void <init>(java.awt.Image, int, boolean)
    {
        com.jhlabs.math.ImageFunction2D r0;
        int[] $r4, $r5;
        int $i0, $i1, $i2, $i3, i4, $i6, $i8, $i10;
        boolean z0;
        java.awt.image.PixelGrabber $r9;
        java.awt.Image r2;
        java.lang.RuntimeException $r10, $r11;
        java.lang.InterruptedException $r7;
        java.lang.Object $r3;

        r0 := @this: com.jhlabs.math.ImageFunction2D;

        r2 := @parameter0: java.awt.Image;

        i4 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jhlabs.math.ImageFunction2D: int edgeAction> = 0;

        r0.<com.jhlabs.math.ImageFunction2D: boolean alpha> = 0;

        $r9 = new java.awt.image.PixelGrabber;

        $i6 = (int) -1;

        $i8 = (int) -1;

        $i10 = (int) -1;

        specialinvoke $r9.<java.awt.image.PixelGrabber: void <init>(java.awt.Image,int,int,int,int,int[],int,int)>(r2, 0, 0, $i6, $i8, null, 0, $i10);

     label1:
        virtualinvoke $r9.<java.awt.image.PixelGrabber: boolean grabPixels()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("interrupted waiting for pixels!");

        throw $r10;

     label4:
        $i0 = virtualinvoke $r9.<java.awt.image.PixelGrabber: int status()>();

        $i1 = $i0 & 128;

        if $i1 == 0 goto label5;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("image fetch aborted");

        throw $r11;

     label5:
        $r3 = virtualinvoke $r9.<java.awt.image.PixelGrabber: java.lang.Object getPixels()>();

        $r4 = (int[]) $r3;

        $r5 = (int[]) $r4;

        $i2 = virtualinvoke $r9.<java.awt.image.PixelGrabber: int getWidth()>();

        $i3 = virtualinvoke $r9.<java.awt.image.PixelGrabber: int getHeight()>();

        virtualinvoke r0.<com.jhlabs.math.ImageFunction2D: void init(int[],int,int,int,boolean)>($r5, $i2, $i3, i4, z0);

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public int[] getRGB(java.awt.image.BufferedImage, int, int, int, int, int[])
    {
        java.awt.image.BufferedImage r0;
        com.jhlabs.math.ImageFunction2D r7;
        int[] r2, $r4, $r5, $r6;
        int $i0, i1, i2, i3, i4;
        java.awt.image.WritableRaster $r1;
        java.lang.Object $r3;

        r7 := @this: com.jhlabs.math.ImageFunction2D;

        r0 := @parameter0: java.awt.image.BufferedImage;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r2 := @parameter5: int[];

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getType()>();

        if $i0 == 2 goto label1;

        if $i0 != 1 goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r3 = virtualinvoke $r1.<java.awt.image.Raster: java.lang.Object getDataElements(int,int,int,int,java.lang.Object)>(i1, i2, i3, i4, r2);

        $r4 = (int[]) $r3;

        $r5 = (int[]) $r4;

        return $r5;

     label2:
        $r6 = virtualinvoke r0.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(i1, i2, i3, i4, r2, 0, i3);

        return $r6;
    }

    public void init(int[], int, int, int, boolean)
    {
        com.jhlabs.math.ImageFunction2D r0;
        int[] r1;
        int i0, i1, i2;
        boolean z0;

        r0 := @this: com.jhlabs.math.ImageFunction2D;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        r0.<com.jhlabs.math.ImageFunction2D: int[] pixels> = r1;

        r0.<com.jhlabs.math.ImageFunction2D: int width> = i0;

        r0.<com.jhlabs.math.ImageFunction2D: int height> = i1;

        r0.<com.jhlabs.math.ImageFunction2D: int edgeAction> = i2;

        r0.<com.jhlabs.math.ImageFunction2D: boolean alpha> = z0;

        return;
    }

    public float evaluate(float, float)
    {
        int[] $r1, $r2;
        boolean $z0;
        float f0, f1, $f2, $f3, $f4;
        com.jhlabs.math.ImageFunction2D r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, $i22;

        r0 := @this: com.jhlabs.math.ImageFunction2D;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i20 = (int) f0;

        i21 = (int) f1;

        $i0 = r0.<com.jhlabs.math.ImageFunction2D: int edgeAction>;

        if $i0 != 2 goto label1;

        $i18 = r0.<com.jhlabs.math.ImageFunction2D: int width>;

        i20 = staticinvoke <com.jhlabs.image.ImageMath: int mod(int,int)>(i20, $i18);

        $i19 = r0.<com.jhlabs.math.ImageFunction2D: int height>;

        i21 = staticinvoke <com.jhlabs.image.ImageMath: int mod(int,int)>(i21, $i19);

        goto label7;

     label1:
        if i20 < 0 goto label2;

        if i21 < 0 goto label2;

        $i16 = r0.<com.jhlabs.math.ImageFunction2D: int width>;

        if i20 >= $i16 goto label2;

        $i17 = r0.<com.jhlabs.math.ImageFunction2D: int height>;

        if i21 < $i17 goto label7;

     label2:
        $i22 = r0.<com.jhlabs.math.ImageFunction2D: int edgeAction>;

        if $i22 != 0 goto label3;

        return 0.0F;

     label3:
        if i20 >= 0 goto label4;

        i20 = 0;

        goto label5;

     label4:
        $i1 = r0.<com.jhlabs.math.ImageFunction2D: int width>;

        if i20 < $i1 goto label5;

        $i15 = r0.<com.jhlabs.math.ImageFunction2D: int width>;

        i20 = $i15 - 1;

     label5:
        if i21 >= 0 goto label6;

        i21 = 0;

        goto label7;

     label6:
        $i2 = r0.<com.jhlabs.math.ImageFunction2D: int height>;

        if i21 < $i2 goto label7;

        $i14 = r0.<com.jhlabs.math.ImageFunction2D: int height>;

        i21 = $i14 - 1;

     label7:
        $z0 = r0.<com.jhlabs.math.ImageFunction2D: boolean alpha>;

        if $z0 == 0 goto label8;

        $r2 = r0.<com.jhlabs.math.ImageFunction2D: int[] pixels>;

        $i8 = r0.<com.jhlabs.math.ImageFunction2D: int width>;

        $i9 = i21 * $i8;

        $i10 = $i9 + i20;

        $i11 = $r2[$i10];

        $i12 = $i11 >> 24;

        $i13 = $i12 & 255;

        $f3 = (float) $i13;

        $f4 = $f3 / 255.0F;

        goto label9;

     label8:
        $r1 = r0.<com.jhlabs.math.ImageFunction2D: int[] pixels>;

        $i3 = r0.<com.jhlabs.math.ImageFunction2D: int width>;

        $i4 = i21 * $i3;

        $i5 = $i4 + i20;

        $i6 = $r1[$i5];

        $i7 = staticinvoke <com.jhlabs.image.PixelUtils: int brightness(int)>($i6);

        $f2 = (float) $i7;

        $f4 = $f2 / 255.0F;

     label9:
        return $f4;
    }

    public void setEdgeAction(int)
    {
        com.jhlabs.math.ImageFunction2D r0;
        int i0;

        r0 := @this: com.jhlabs.math.ImageFunction2D;

        i0 := @parameter0: int;

        r0.<com.jhlabs.math.ImageFunction2D: int edgeAction> = i0;

        return;
    }

    public int getEdgeAction()
    {
        com.jhlabs.math.ImageFunction2D r0;
        int $i0;

        r0 := @this: com.jhlabs.math.ImageFunction2D;

        $i0 = r0.<com.jhlabs.math.ImageFunction2D: int edgeAction>;

        return $i0;
    }

    public int getWidth()
    {
        com.jhlabs.math.ImageFunction2D r0;
        int $i0;

        r0 := @this: com.jhlabs.math.ImageFunction2D;

        $i0 = r0.<com.jhlabs.math.ImageFunction2D: int width>;

        return $i0;
    }

    public int getHeight()
    {
        com.jhlabs.math.ImageFunction2D r0;
        int $i0;

        r0 := @this: com.jhlabs.math.ImageFunction2D;

        $i0 = r0.<com.jhlabs.math.ImageFunction2D: int height>;

        return $i0;
    }

    public int[] getPixels()
    {
        com.jhlabs.math.ImageFunction2D r0;
        int[] $r1;

        r0 := @this: com.jhlabs.math.ImageFunction2D;

        $r1 = r0.<com.jhlabs.math.ImageFunction2D: int[] pixels>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.jhlabs.math.ImageFunction2D: int WRAP> = 2;

        <com.jhlabs.math.ImageFunction2D: int CLAMP> = 1;

        <com.jhlabs.math.ImageFunction2D: int ZERO> = 0;

        return;
    }
}
