public class com.hp.hpl.jena.sparql.algebra.op.OpMinus extends com.hp.hpl.jena.sparql.algebra.op.Op2
{

    public static com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpMinus $r0;
        com.hp.hpl.jena.sparql.algebra.Op r1, r2;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpMinus;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpMinus: void <init>(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r0;
    }

    private void <init>(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpMinus r0;
        com.hp.hpl.jena.sparql.algebra.Op r1, r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpMinus;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op2: void <init>(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpMinus r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpMinus;

        return "minus";
    }

    public com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Transform r0;
        com.hp.hpl.jena.sparql.algebra.op.OpMinus r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, r3, $r4;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpMinus;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpMinus,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2, r3);

        return $r4;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpMinus r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpMinus;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitor: void visit(com.hp.hpl.jena.sparql.algebra.op.OpMinus)>(r1);

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.op.Op2 copy(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpMinus $r0, r3;
        com.hp.hpl.jena.sparql.algebra.Op r1, r2;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.op.OpMinus;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpMinus;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpMinus: void <init>(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r0;
    }

    public boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.algebra.op.Op2 $r3;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r2;
        com.hp.hpl.jena.sparql.algebra.op.OpMinus r1;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpMinus;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpMinus;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = (com.hp.hpl.jena.sparql.algebra.op.Op2) r0;

        $z1 = specialinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op2: boolean sameArgumentsAs(com.hp.hpl.jena.sparql.algebra.op.Op2,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r3, r2);

        return $z1;
    }
}
