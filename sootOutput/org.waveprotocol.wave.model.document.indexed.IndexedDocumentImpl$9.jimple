class org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$9 extends java.lang.Object implements java.lang.Iterable
{
    final java.lang.Iterable val$iterable;
    final org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0;

    void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl, java.lang.Iterable)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$9 r0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r1;
        java.lang.Iterable r2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$9;

        r1 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r2 := @parameter1: java.lang.Iterable;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$9: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0> = r1;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$9: java.lang.Iterable val$iterable> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.Iterator iterator()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$9 r0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$9$1 $r3;
        java.util.Iterator $r2;
        java.lang.Iterable $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$9;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$9: java.lang.Iterable val$iterable>;

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$9$1;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$9$1: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$9,java.util.Iterator)>(r0, $r2);

        return $r3;
    }
}
