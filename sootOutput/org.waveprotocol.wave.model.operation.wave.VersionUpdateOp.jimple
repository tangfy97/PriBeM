public final class org.waveprotocol.wave.model.operation.wave.VersionUpdateOp extends org.waveprotocol.wave.model.operation.wave.WaveletOperation
{
    private final java.lang.String docId;
    private final boolean useFixedDocInfo;
    private final long docVersion;

    void <init>(org.waveprotocol.wave.model.wave.ParticipantId, long, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.version.HashedVersion r2;
        long l0;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.operation.wave.VersionUpdateOp r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        l0 := @parameter1: long;

        r2 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        specialinvoke r0.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,org.waveprotocol.wave.model.version.HashedVersion,java.lang.String)>(r1, l0, r2, null);

        return;
    }

    void <init>(org.waveprotocol.wave.model.wave.ParticipantId, long, org.waveprotocol.wave.model.version.HashedVersion, java.lang.String)
    {
        org.waveprotocol.wave.model.version.HashedVersion r2;
        long l0;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        java.lang.String r3;
        org.waveprotocol.wave.model.operation.wave.VersionUpdateOp r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        l0 := @parameter1: long;

        r2 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,org.waveprotocol.wave.model.version.HashedVersion,java.lang.String,long,boolean)>(r1, l0, r2, r3, -1L, 0);

        return;
    }

    void <init>(org.waveprotocol.wave.model.wave.ParticipantId, long, org.waveprotocol.wave.model.version.HashedVersion, java.lang.String, long, boolean)
    {
        long l0, l1;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r1;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        org.waveprotocol.wave.model.version.HashedVersion r3;
        java.lang.String r4;
        org.waveprotocol.wave.model.operation.wave.VersionUpdateOp r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        l0 := @parameter1: long;

        r3 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        r4 := @parameter3: java.lang.String;

        l1 := @parameter4: long;

        z0 := @parameter5: boolean;

        $r1 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long,org.waveprotocol.wave.model.version.HashedVersion)>(r2, -1L, l0, r3);

        specialinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r1);

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "Null participant ID");

        r0.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: java.lang.String docId> = r4;

        r0.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: long docVersion> = l1;

        r0.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: boolean useFixedDocInfo> = z0;

        return;
    }

    protected void doApply(org.waveprotocol.wave.model.wave.data.WaveletData)
    {
        org.waveprotocol.wave.model.operation.wave.VersionUpdateOp r0;
        org.waveprotocol.wave.model.wave.data.WaveletData r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        specialinvoke r0.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: org.waveprotocol.wave.model.operation.wave.VersionUpdateOp doInternalApply(org.waveprotocol.wave.model.wave.data.WaveletData)>(r1);

        return;
    }

    private org.waveprotocol.wave.model.operation.wave.VersionUpdateOp doInternalApply(org.waveprotocol.wave.model.wave.data.WaveletData)
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r9;
        long $l0, $l1, $l2, $l3, l4, $l5, $l6, $l7, $l8;
        org.waveprotocol.wave.model.wave.ParticipantId $r6, $r13;
        org.waveprotocol.wave.model.version.HashedVersion $r1;
        java.lang.String $r3, $r8, $r15;
        org.waveprotocol.wave.model.operation.wave.VersionUpdateOp r2, $r4, $r11;
        org.waveprotocol.wave.model.wave.data.WaveletData r0;
        boolean $z0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r5, $r7, $r10, $r12, $r14;

        r2 := @this: org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.WaveletData: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        $r3 = r2.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: java.lang.String docId>;

        if $r3 == null goto label3;

        $r8 = r2.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: java.lang.String docId>;

        $r9 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.WaveletData: org.waveprotocol.wave.model.wave.data.BlipData getDocument(java.lang.String)>($r8);

        $l2 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.WaveletData: long getVersion()>();

        $r10 = r2.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $l3 = virtualinvoke $r10.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getVersionIncrement()>();

        l4 = $l2 + $l3;

        $z0 = r2.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: boolean useFixedDocInfo>;

        if $z0 == 0 goto label1;

        $l8 = r2.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: long docVersion>;

        goto label2;

     label1:
        $l8 = l4;

     label2:
        $l5 = interfaceinvoke $r9.<org.waveprotocol.wave.model.wave.data.BlipData: long setLastModifiedVersion(long)>($l8);

        $r11 = new org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        $r12 = r2.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $r13 = virtualinvoke $r12.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r14 = r2.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $l6 = virtualinvoke $r14.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getVersionIncrement()>();

        $l7 = neg $l6;

        $r15 = r2.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: java.lang.String docId>;

        specialinvoke $r11.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,org.waveprotocol.wave.model.version.HashedVersion,java.lang.String,long,boolean)>($r13, $l7, $r1, $r15, $l5, 1);

        return $r11;

     label3:
        $r4 = new org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        $r5 = r2.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r7 = r2.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $l0 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getVersionIncrement()>();

        $l1 = neg $l0;

        specialinvoke $r4.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,org.waveprotocol.wave.model.version.HashedVersion)>($r6, $l1, $r1);

        return $r4;
    }

    public void acceptVisitor(org.waveprotocol.wave.model.operation.wave.WaveletOperationVisitor)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperationVisitor r0;
        org.waveprotocol.wave.model.operation.wave.VersionUpdateOp r1;

        r1 := @this: org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperationVisitor;

        interfaceinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperationVisitor: void visitVersionUpdateOp(org.waveprotocol.wave.model.operation.wave.VersionUpdateOp)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        long $l0;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r6;
        java.lang.String $r3, $r7;
        org.waveprotocol.wave.model.operation.wave.VersionUpdateOp r2;

        r2 := @this: org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("version update op, blip id ");

        $r3 = r2.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: java.lang.String docId>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" blipVersion ");

        $l0 = r2.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: long docVersion>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public java.util.List applyAndReturnReverse(org.waveprotocol.wave.model.wave.data.WaveletData)
    {
        java.util.List $r3;
        org.waveprotocol.wave.model.operation.wave.VersionUpdateOp r0, $r2;
        org.waveprotocol.wave.model.wave.data.WaveletData r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: org.waveprotocol.wave.model.operation.wave.VersionUpdateOp doInternalApply(org.waveprotocol.wave.model.wave.data.WaveletData)>(r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r2);

        virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: void update(org.waveprotocol.wave.model.wave.data.WaveletData)>(r1);

        return $r3;
    }

    public int hashCode()
    {
        long $l2, $l3, $l4, $l5;
        int $i0, $i1, $i6, $i7;
        java.lang.String $r1, $r2;
        org.waveprotocol.wave.model.operation.wave.VersionUpdateOp r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        $r1 = r0.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: java.lang.String docId>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: java.lang.String docId>;

        $i0 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

     label2:
        $z0 = r0.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: boolean useFixedDocInfo>;

        if $z0 == 0 goto label3;

        $z1 = 0;

        goto label4;

     label3:
        $z1 = 1;

     label4:
        $i1 = $i0 ^ $z1;

        $l2 = r0.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: long docVersion>;

        $l3 = r0.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: long docVersion>;

        $l4 = $l3 >>> 32;

        $l5 = $l2 ^ $l4;

        $i6 = (int) $l5;

        $i7 = $i1 ^ $i6;

        return $i7;
    }

    public boolean equals(java.lang.Object)
    {
        long $l0, $l1;
        byte $b2;
        java.lang.Object r0;
        java.lang.String $r3, $r4;
        org.waveprotocol.wave.model.operation.wave.VersionUpdateOp r1, r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r2 := @this: org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.waveprotocol.wave.model.operation.wave.VersionUpdateOp) r0;

        $r4 = r2.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: java.lang.String docId>;

        $r3 = r1.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: java.lang.String docId>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $z3 = r2.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: boolean useFixedDocInfo>;

        $z2 = r1.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: boolean useFixedDocInfo>;

        if $z3 != $z2 goto label2;

        $l1 = r2.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: long docVersion>;

        $l0 = r1.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: long docVersion>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    public volatile java.util.List applyAndReturnReverse(java.lang.Object) throws org.waveprotocol.wave.model.operation.OperationException
    {
        java.util.List $r3;
        java.lang.Object r1;
        org.waveprotocol.wave.model.operation.wave.VersionUpdateOp r0;
        org.waveprotocol.wave.model.wave.data.WaveletData $r2;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.data.WaveletData) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: java.util.List applyAndReturnReverse(org.waveprotocol.wave.model.wave.data.WaveletData)>($r2);

        return $r3;
    }

    public volatile void acceptVisitor(org.waveprotocol.wave.model.operation.Visitor)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperationVisitor $r2;
        org.waveprotocol.wave.model.operation.wave.VersionUpdateOp r0;
        org.waveprotocol.wave.model.operation.Visitor r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.Visitor;

        $r2 = (org.waveprotocol.wave.model.operation.wave.WaveletOperationVisitor) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: void acceptVisitor(org.waveprotocol.wave.model.operation.wave.WaveletOperationVisitor)>($r2);

        return;
    }
}
