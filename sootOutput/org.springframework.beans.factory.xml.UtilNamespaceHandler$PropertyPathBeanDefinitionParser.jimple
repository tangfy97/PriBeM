class org.springframework.beans.factory.xml.UtilNamespaceHandler$PropertyPathBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser
{

    private void <init>()
    {
        org.springframework.beans.factory.xml.UtilNamespaceHandler$PropertyPathBeanDefinitionParser r0;

        r0 := @this: org.springframework.beans.factory.xml.UtilNamespaceHandler$PropertyPathBeanDefinitionParser;

        specialinvoke r0.<org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser: void <init>()>();

        return;
    }

    protected java.lang.Class getBeanClass(org.w3c.dom.Element)
    {
        org.springframework.beans.factory.xml.UtilNamespaceHandler$PropertyPathBeanDefinitionParser r0;
        org.w3c.dom.Element r1;

        r0 := @this: org.springframework.beans.factory.xml.UtilNamespaceHandler$PropertyPathBeanDefinitionParser;

        r1 := @parameter0: org.w3c.dom.Element;

        return class "Lorg/springframework/beans/factory/config/PropertyPathFactoryBean;";
    }

    protected void doParse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext, org.springframework.beans.factory.support.BeanDefinitionBuilder)
    {
        org.springframework.beans.factory.xml.UtilNamespaceHandler$PropertyPathBeanDefinitionParser r8;
        org.springframework.beans.factory.support.BeanDefinitionBuilder r4;
        org.springframework.beans.factory.xml.XmlReaderContext $r6, $r7;
        org.w3c.dom.Element r0;
        org.springframework.beans.factory.xml.ParserContext r5;
        int $i0, $i1, $i3;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;

        r8 := @this: org.springframework.beans.factory.xml.UtilNamespaceHandler$PropertyPathBeanDefinitionParser;

        r0 := @parameter0: org.w3c.dom.Element;

        r5 := @parameter1: org.springframework.beans.factory.xml.ParserContext;

        r4 := @parameter2: org.springframework.beans.factory.support.BeanDefinitionBuilder;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("path");

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r7 = virtualinvoke r5.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        virtualinvoke $r7.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object)>("Attribute \'path\' must not be empty", r0);

        return;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>(".");

        $i3 = (int) -1;

        if $i0 != $i3 goto label2;

        $r6 = virtualinvoke r5.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        virtualinvoke $r6.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object)>("Attribute \'path\' must follow pattern \'beanName.propertyName\'", r0);

        return;

     label2:
        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        virtualinvoke r4.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("targetBeanName", $r2);

        virtualinvoke r4.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("propertyPath", $r3);

        return;
    }

    protected java.lang.String resolveId(org.w3c.dom.Element, org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.factory.xml.ParserContext)
    {
        org.springframework.beans.factory.xml.UtilNamespaceHandler$PropertyPathBeanDefinitionParser r0;
        org.w3c.dom.Element r1;
        org.springframework.beans.factory.xml.ParserContext r3;
        org.springframework.beans.factory.support.AbstractBeanDefinition r2;
        java.lang.String $r4, r5;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.xml.UtilNamespaceHandler$PropertyPathBeanDefinitionParser;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r3 := @parameter2: org.springframework.beans.factory.xml.ParserContext;

        $r4 = specialinvoke r0.<org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser: java.lang.String resolveId(org.w3c.dom.Element,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.factory.xml.ParserContext)>(r1, r2, r3);

        r5 = $r4;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r4);

        if $z0 != 0 goto label1;

        r5 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("path");

     label1:
        return r5;
    }

    void <init>(org.springframework.beans.factory.xml.UtilNamespaceHandler$PropertyPathBeanDefinitionParser)
    {
        org.springframework.beans.factory.xml.UtilNamespaceHandler$PropertyPathBeanDefinitionParser r0, r1;

        r0 := @this: org.springframework.beans.factory.xml.UtilNamespaceHandler$PropertyPathBeanDefinitionParser;

        r1 := @parameter0: org.springframework.beans.factory.xml.UtilNamespaceHandler$PropertyPathBeanDefinitionParser;

        specialinvoke r0.<org.springframework.beans.factory.xml.UtilNamespaceHandler$PropertyPathBeanDefinitionParser: void <init>()>();

        return;
    }
}
