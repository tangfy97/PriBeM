final class org.apache.poi.hssf.record.crypto.Biff8RC4 extends java.lang.Object implements org.apache.poi.hssf.record.crypto.Biff8Cipher
{
    private static final int RC4_REKEYING_INTERVAL;
    private javax.crypto.Cipher _rc4;
    private int _streamPos;
    private int _nextRC4BlockStart;
    private int _currentKeyIndex;
    private boolean _shouldSkipEncryptionOnCurrentRecord;
    private final org.apache.poi.hssf.record.crypto.Biff8RC4Key _key;
    private java.nio.ByteBuffer _buffer;

    public void <init>(int, org.apache.poi.hssf.record.crypto.Biff8RC4Key)
    {
        byte[] $r7;
        javax.crypto.Cipher $r6;
        java.nio.ByteBuffer $r1, $r3;
        int i0;
        java.lang.String $r15;
        java.lang.RuntimeException $r8;
        java.nio.ByteOrder $r2;
        org.apache.poi.hssf.record.crypto.Biff8RC4 r0;
        org.apache.poi.hssf.record.crypto.Biff8RC4Key r4, $r5;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8RC4;

        i0 := @parameter0: int;

        r4 := @parameter1: org.apache.poi.hssf.record.crypto.Biff8RC4Key;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8);

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r3 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r2);

        r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: java.nio.ByteBuffer _buffer> = $r3;

        if i0 < 1024 goto label1;

        $r8 = new java.lang.RuntimeException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("initialOffset (");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")>");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(1024);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported yet");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label1:
        r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: org.apache.poi.hssf.record.crypto.Biff8RC4Key _key> = r4;

        $r5 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: org.apache.poi.hssf.record.crypto.Biff8RC4Key _key>;

        $r6 = virtualinvoke $r5.<org.apache.poi.hssf.record.crypto.Biff8RC4Key: javax.crypto.Cipher getCipher()>();

        r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: javax.crypto.Cipher _rc4> = $r6;

        r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: int _streamPos> = 0;

        specialinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: void rekeyForNextBlock()>();

        r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: int _streamPos> = i0;

        r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: boolean _shouldSkipEncryptionOnCurrentRecord> = 0;

        $r7 = newarray (byte)[i0];

        specialinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: void encryptBytes(byte[],int,int)>($r7, 0, i0);

        return;
    }

    private void rekeyForNextBlock()
    {
        javax.crypto.Cipher $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.poi.hssf.record.crypto.Biff8RC4 r0;
        org.apache.poi.hssf.record.crypto.Biff8RC4Key $r2;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8RC4;

        $i0 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: int _streamPos>;

        $i1 = $i0 / 1024;

        r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: int _currentKeyIndex> = $i1;

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: org.apache.poi.hssf.record.crypto.Biff8RC4Key _key>;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: javax.crypto.Cipher _rc4>;

        $i2 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: int _currentKeyIndex>;

        virtualinvoke $r2.<org.apache.poi.hssf.record.crypto.Biff8RC4Key: void initCipherForBlock(javax.crypto.Cipher,int)>($r1, $i2);

        $i3 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: int _currentKeyIndex>;

        $i4 = $i3 + 1;

        $i5 = $i4 * 1024;

        r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: int _nextRC4BlockStart> = $i5;

        return;
    }

    private void encryptBytes(byte[], int, int)
    {
        byte[] r4, r5;
        javax.crypto.Cipher $r1;
        org.apache.poi.EncryptedDocumentException $r3;
        int i0, i1;
        org.apache.poi.hssf.record.crypto.Biff8RC4 r0;
        boolean $z0;
        javax.crypto.ShortBufferException $r2;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8RC4;

        r4 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 != 0 goto label1;

        return;

     label1:
        $z0 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: boolean _shouldSkipEncryptionOnCurrentRecord>;

        if $z0 == 0 goto label2;

        r5 = newarray (byte)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, i1, r5, 0, i0);

        r4 = r5;

        i1 = 0;

     label2:
        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: javax.crypto.Cipher _rc4>;

        virtualinvoke $r1.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>(r4, i1, i0, r4, i1);

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

        $r3 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r3.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String,java.lang.Throwable)>("input buffer too small", $r2);

        throw $r3;

     label5:
        return;

        catch javax.crypto.ShortBufferException from label2 to label3 with label4;
    }

    public void startRecord(int)
    {
        int i0;
        org.apache.poi.hssf.record.crypto.Biff8RC4 r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8RC4;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.poi.hssf.record.crypto.Biff8RC4: boolean isNeverEncryptedRecord(int)>(i0);

        r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: boolean _shouldSkipEncryptionOnCurrentRecord> = $z0;

        return;
    }

    private static boolean isNeverEncryptedRecord(int)
    {
        int i0;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 47: goto label1;
            case 225: goto label1;
            case 2057: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    public void skipTwoBytes()
    {
        org.apache.poi.hssf.record.crypto.Biff8RC4 r0;
        byte[] $r2;
        java.nio.ByteBuffer $r1;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8RC4;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: java.nio.ByteBuffer _buffer>;

        $r2 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: void xor(byte[],int,int)>($r2, 0, 2);

        return;
    }

    public void xor(byte[], int, int)
    {
        byte[] r1;
        int $i0, $i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, $i16;
        org.apache.poi.hssf.record.crypto.Biff8RC4 r0;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8RC4;

        r1 := @parameter0: byte[];

        i4 := @parameter1: int;

        i3 := @parameter2: int;

        $i1 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: int _nextRC4BlockStart>;

        $i0 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: int _streamPos>;

        i2 = $i1 - $i0;

        if i3 > i2 goto label1;

        specialinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: void encryptBytes(byte[],int,int)>(r1, i4, i3);

        $i11 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: int _streamPos>;

        $i12 = $i11 + i3;

        r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: int _streamPos> = $i12;

        return;

     label1:
        i13 = i4;

        i14 = i3;

        if i3 <= i2 goto label3;

        if i2 <= 0 goto label2;

        specialinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: void encryptBytes(byte[],int,int)>(r1, i4, i2);

        $i9 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: int _streamPos>;

        $i10 = $i9 + i2;

        r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: int _streamPos> = $i10;

        i13 = i4 + i2;

        i14 = i3 - i2;

     label2:
        specialinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: void rekeyForNextBlock()>();

     label3:
        if i14 <= 1024 goto label4;

        specialinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: void encryptBytes(byte[],int,int)>(r1, i13, 1024);

        $i7 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: int _streamPos>;

        $i8 = $i7 + 1024;

        r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: int _streamPos> = $i8;

        i13 = i13 + 1024;

        $i16 = (int) -1024;

        i14 = i14 + $i16;

        specialinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: void rekeyForNextBlock()>();

        goto label3;

     label4:
        specialinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: void encryptBytes(byte[],int,int)>(r1, i13, i14);

        $i5 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: int _streamPos>;

        $i6 = $i5 + i14;

        r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: int _streamPos> = $i6;

        return;
    }

    public int xorByte(int)
    {
        byte[] $r3;
        java.nio.ByteBuffer $r1, $r2, $r4;
        byte $b1, $b2;
        int i0, $i3;
        org.apache.poi.hssf.record.crypto.Biff8RC4 r0;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8RC4;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: java.nio.ByteBuffer _buffer>;

        $b1 = (byte) i0;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(0, $b1);

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: java.nio.ByteBuffer _buffer>;

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: void xor(byte[],int,int)>($r3, 0, 1);

        $r4 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: java.nio.ByteBuffer _buffer>;

        $b2 = virtualinvoke $r4.<java.nio.ByteBuffer: byte get(int)>(0);

        $i3 = (int) $b2;

        return $i3;
    }

    public int xorShort(int)
    {
        byte[] $r3;
        java.nio.ByteBuffer $r1, $r2, $r4;
        short $s1, $s2;
        int i0, $i3;
        org.apache.poi.hssf.record.crypto.Biff8RC4 r0;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8RC4;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: java.nio.ByteBuffer _buffer>;

        $s1 = (short) i0;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(int,short)>(0, $s1);

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: java.nio.ByteBuffer _buffer>;

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: void xor(byte[],int,int)>($r3, 0, 2);

        $r4 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: java.nio.ByteBuffer _buffer>;

        $s2 = virtualinvoke $r4.<java.nio.ByteBuffer: short getShort(int)>(0);

        $i3 = (int) $s2;

        return $i3;
    }

    public int xorInt(int)
    {
        byte[] $r3;
        int i0, $i1;
        org.apache.poi.hssf.record.crypto.Biff8RC4 r0;
        java.nio.ByteBuffer $r1, $r2, $r4;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8RC4;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: java.nio.ByteBuffer _buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(0, i0);

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: java.nio.ByteBuffer _buffer>;

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: void xor(byte[],int,int)>($r3, 0, 4);

        $r4 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: java.nio.ByteBuffer _buffer>;

        $i1 = virtualinvoke $r4.<java.nio.ByteBuffer: int getInt(int)>(0);

        return $i1;
    }

    public long xorLong(long)
    {
        byte[] $r3;
        org.apache.poi.hssf.record.crypto.Biff8RC4 r0;
        long l0, $l1;
        java.nio.ByteBuffer $r1, $r2, $r4;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8RC4;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: java.nio.ByteBuffer _buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(int,long)>(0, l0);

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: java.nio.ByteBuffer _buffer>;

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: void xor(byte[],int,int)>($r3, 0, 8);

        $r4 = r0.<org.apache.poi.hssf.record.crypto.Biff8RC4: java.nio.ByteBuffer _buffer>;

        $l1 = virtualinvoke $r4.<java.nio.ByteBuffer: long getLong(int)>(0);

        return $l1;
    }

    public void setNextRecordSize(int)
    {
        int i0;
        org.apache.poi.hssf.record.crypto.Biff8RC4 r0;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8RC4;

        i0 := @parameter0: int;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.poi.hssf.record.crypto.Biff8RC4: int RC4_REKEYING_INTERVAL> = 1024;

        return;
    }
}
