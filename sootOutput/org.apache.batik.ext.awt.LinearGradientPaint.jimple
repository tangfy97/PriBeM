public final class org.apache.batik.ext.awt.LinearGradientPaint extends org.apache.batik.ext.awt.MultipleGradientPaint
{
    private java.awt.geom.Point2D start;
    private java.awt.geom.Point2D end;

    public void <init>(float, float, float, float, float[], java.awt.Color[])
    {
        org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum $r6;
        float[] r3;
        org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum $r5;
        java.awt.geom.Point2D$Float $r1, $r2;
        float f0, f1, f2, f3;
        org.apache.batik.ext.awt.LinearGradientPaint r0;
        java.awt.Color[] r4;

        r0 := @this: org.apache.batik.ext.awt.LinearGradientPaint;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r3 := @parameter4: float[];

        r4 := @parameter5: java.awt.Color[];

        $r1 = new java.awt.geom.Point2D$Float;

        specialinvoke $r1.<java.awt.geom.Point2D$Float: void <init>(float,float)>(f0, f1);

        $r2 = new java.awt.geom.Point2D$Float;

        specialinvoke $r2.<java.awt.geom.Point2D$Float: void <init>(float,float)>(f2, f3);

        $r6 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum NO_CYCLE>;

        $r5 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum SRGB>;

        specialinvoke r0.<org.apache.batik.ext.awt.LinearGradientPaint: void <init>(java.awt.geom.Point2D,java.awt.geom.Point2D,float[],java.awt.Color[],org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum,org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum)>($r1, $r2, r3, r4, $r6, $r5);

        return;
    }

    public void <init>(float, float, float, float, float[], java.awt.Color[], org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum)
    {
        org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum r5;
        float[] r3;
        org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum $r6;
        java.awt.geom.Point2D$Float $r1, $r2;
        float f0, f1, f2, f3;
        org.apache.batik.ext.awt.LinearGradientPaint r0;
        java.awt.Color[] r4;

        r0 := @this: org.apache.batik.ext.awt.LinearGradientPaint;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r3 := @parameter4: float[];

        r4 := @parameter5: java.awt.Color[];

        r5 := @parameter6: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum;

        $r1 = new java.awt.geom.Point2D$Float;

        specialinvoke $r1.<java.awt.geom.Point2D$Float: void <init>(float,float)>(f0, f1);

        $r2 = new java.awt.geom.Point2D$Float;

        specialinvoke $r2.<java.awt.geom.Point2D$Float: void <init>(float,float)>(f2, f3);

        $r6 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum SRGB>;

        specialinvoke r0.<org.apache.batik.ext.awt.LinearGradientPaint: void <init>(java.awt.geom.Point2D,java.awt.geom.Point2D,float[],java.awt.Color[],org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum,org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum)>($r1, $r2, r3, r4, r5, $r6);

        return;
    }

    public void <init>(java.awt.geom.Point2D, java.awt.geom.Point2D, float[], java.awt.Color[])
    {
        org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum $r5;
        org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum $r6;
        java.awt.geom.Point2D r1, r2;
        org.apache.batik.ext.awt.LinearGradientPaint r0;
        float[] r3;
        java.awt.Color[] r4;

        r0 := @this: org.apache.batik.ext.awt.LinearGradientPaint;

        r1 := @parameter0: java.awt.geom.Point2D;

        r2 := @parameter1: java.awt.geom.Point2D;

        r3 := @parameter2: float[];

        r4 := @parameter3: java.awt.Color[];

        $r6 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum NO_CYCLE>;

        $r5 = <org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum SRGB>;

        specialinvoke r0.<org.apache.batik.ext.awt.LinearGradientPaint: void <init>(java.awt.geom.Point2D,java.awt.geom.Point2D,float[],java.awt.Color[],org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum,org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum)>(r1, r2, r3, r4, $r6, $r5);

        return;
    }

    public void <init>(java.awt.geom.Point2D, java.awt.geom.Point2D, float[], java.awt.Color[], org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum, org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum)
    {
        org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum r5;
        java.awt.geom.Point2D r1, r2;
        float[] r3;
        java.awt.geom.AffineTransform $r7;
        org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum r6;
        org.apache.batik.ext.awt.LinearGradientPaint r0;
        java.awt.Color[] r4;

        r0 := @this: org.apache.batik.ext.awt.LinearGradientPaint;

        r1 := @parameter0: java.awt.geom.Point2D;

        r2 := @parameter1: java.awt.geom.Point2D;

        r3 := @parameter2: float[];

        r4 := @parameter3: java.awt.Color[];

        r5 := @parameter4: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum;

        r6 := @parameter5: org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum;

        $r7 = new java.awt.geom.AffineTransform;

        specialinvoke $r7.<java.awt.geom.AffineTransform: void <init>()>();

        specialinvoke r0.<org.apache.batik.ext.awt.LinearGradientPaint: void <init>(java.awt.geom.Point2D,java.awt.geom.Point2D,float[],java.awt.Color[],org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum,org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum,java.awt.geom.AffineTransform)>(r1, r2, r3, r4, r5, r6, $r7);

        return;
    }

    public void <init>(java.awt.geom.Point2D, java.awt.geom.Point2D, float[], java.awt.Color[], org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum, org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum, java.awt.geom.AffineTransform)
    {
        org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum r3;
        java.awt.geom.Point2D r6, r8, $r10, $r12;
        float[] r1;
        java.awt.geom.AffineTransform r5;
        java.lang.IllegalArgumentException $r13;
        java.lang.NullPointerException $r7;
        org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum r4;
        org.apache.batik.ext.awt.LinearGradientPaint r0;
        java.lang.Object $r9, $r11;
        java.awt.Color[] r2;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.LinearGradientPaint;

        r6 := @parameter0: java.awt.geom.Point2D;

        r8 := @parameter1: java.awt.geom.Point2D;

        r1 := @parameter2: float[];

        r2 := @parameter3: java.awt.Color[];

        r3 := @parameter4: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum;

        r4 := @parameter5: org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum;

        r5 := @parameter6: java.awt.geom.AffineTransform;

        specialinvoke r0.<org.apache.batik.ext.awt.MultipleGradientPaint: void <init>(float[],java.awt.Color[],org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum,org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum,java.awt.geom.AffineTransform)>(r1, r2, r3, r4, r5);

        if r6 == null goto label1;

        if r8 != null goto label2;

     label1:
        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("Start and end points must benon-null");

        throw $r7;

     label2:
        $z0 = virtualinvoke r6.<java.awt.geom.Point2D: boolean equals(java.lang.Object)>(r8);

        if $z0 == 0 goto label3;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Start point cannot equalendpoint");

        throw $r13;

     label3:
        $r9 = virtualinvoke r6.<java.awt.geom.Point2D: java.lang.Object clone()>();

        $r10 = (java.awt.geom.Point2D) $r9;

        r0.<org.apache.batik.ext.awt.LinearGradientPaint: java.awt.geom.Point2D start> = $r10;

        $r11 = virtualinvoke r8.<java.awt.geom.Point2D: java.lang.Object clone()>();

        $r12 = (java.awt.geom.Point2D) $r11;

        r0.<org.apache.batik.ext.awt.LinearGradientPaint: java.awt.geom.Point2D end> = $r12;

        return;
    }

    public java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints)
    {
        java.awt.Rectangle r5;
        org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum $r13;
        java.awt.geom.Point2D $r8, $r9;
        java.awt.geom.Rectangle2D r6;
        java.awt.RenderingHints r7;
        float[] $r10;
        org.apache.batik.ext.awt.LinearGradientPaintContext $r3;
        java.awt.geom.NoninvertibleTransformException $r14;
        java.awt.geom.AffineTransform $r0, $r2, r16;
        java.lang.IllegalArgumentException $r15;
        org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum $r12;
        java.awt.image.ColorModel r4;
        org.apache.batik.ext.awt.LinearGradientPaint r1;
        java.awt.Color[] $r11;

        r1 := @this: org.apache.batik.ext.awt.LinearGradientPaint;

        r4 := @parameter0: java.awt.image.ColorModel;

        r5 := @parameter1: java.awt.Rectangle;

        r6 := @parameter2: java.awt.geom.Rectangle2D;

        r16 := @parameter3: java.awt.geom.AffineTransform;

        r7 := @parameter4: java.awt.RenderingHints;

        $r0 = new java.awt.geom.AffineTransform;

        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r16);

        $r2 = r1.<org.apache.batik.ext.awt.MultipleGradientPaint: java.awt.geom.AffineTransform gradientTransform>;

        virtualinvoke $r0.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r2);

     label1:
        $r3 = new org.apache.batik.ext.awt.LinearGradientPaintContext;

        $r8 = r1.<org.apache.batik.ext.awt.LinearGradientPaint: java.awt.geom.Point2D start>;

        $r9 = r1.<org.apache.batik.ext.awt.LinearGradientPaint: java.awt.geom.Point2D end>;

        $r10 = r1.<org.apache.batik.ext.awt.MultipleGradientPaint: float[] fractions>;

        $r11 = virtualinvoke r1.<org.apache.batik.ext.awt.MultipleGradientPaint: java.awt.Color[] getColors()>();

        $r13 = r1.<org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum cycleMethod>;

        $r12 = r1.<org.apache.batik.ext.awt.MultipleGradientPaint: org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum colorSpace>;

        specialinvoke $r3.<org.apache.batik.ext.awt.LinearGradientPaintContext: void <init>(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints,java.awt.geom.Point2D,java.awt.geom.Point2D,float[],java.awt.Color[],org.apache.batik.ext.awt.MultipleGradientPaint$CycleMethodEnum,org.apache.batik.ext.awt.MultipleGradientPaint$ColorSpaceEnum)>(r4, r5, r6, $r0, r7, $r8, $r9, $r10, $r11, $r13, $r12);

        return $r3;

     label2:
        $r14 := @caughtexception;

        virtualinvoke $r14.<java.lang.Throwable: void printStackTrace()>();

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("transform should beinvertible");

        throw $r15;

        catch java.awt.geom.NoninvertibleTransformException from label1 to label2 with label2;
    }

    public java.awt.geom.Point2D getStartPoint()
    {
        java.awt.geom.Point2D$Double $r0;
        java.awt.geom.Point2D $r2, $r3;
        org.apache.batik.ext.awt.LinearGradientPaint r1;
        double $d0, $d1;

        r1 := @this: org.apache.batik.ext.awt.LinearGradientPaint;

        $r0 = new java.awt.geom.Point2D$Double;

        $r2 = r1.<org.apache.batik.ext.awt.LinearGradientPaint: java.awt.geom.Point2D start>;

        $d0 = virtualinvoke $r2.<java.awt.geom.Point2D: double getX()>();

        $r3 = r1.<org.apache.batik.ext.awt.LinearGradientPaint: java.awt.geom.Point2D start>;

        $d1 = virtualinvoke $r3.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, $d1);

        return $r0;
    }

    public java.awt.geom.Point2D getEndPoint()
    {
        java.awt.geom.Point2D$Double $r0;
        java.awt.geom.Point2D $r2, $r3;
        org.apache.batik.ext.awt.LinearGradientPaint r1;
        double $d0, $d1;

        r1 := @this: org.apache.batik.ext.awt.LinearGradientPaint;

        $r0 = new java.awt.geom.Point2D$Double;

        $r2 = r1.<org.apache.batik.ext.awt.LinearGradientPaint: java.awt.geom.Point2D end>;

        $d0 = virtualinvoke $r2.<java.awt.geom.Point2D: double getX()>();

        $r3 = r1.<org.apache.batik.ext.awt.LinearGradientPaint: java.awt.geom.Point2D end>;

        $d1 = virtualinvoke $r3.<java.awt.geom.Point2D: double getY()>();

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, $d1);

        return $r0;
    }
}
