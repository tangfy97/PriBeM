public class org.apache.tika.config.ServiceLoader extends java.lang.Object
{
    private static volatile java.lang.ClassLoader contextClassLoader;
    private static final java.util.Map services;
    private final java.lang.ClassLoader loader;
    private final org.apache.tika.config.LoadErrorHandler handler;
    private final boolean dynamic;
    private static final java.util.regex.Pattern COMMENT;
    private static final java.util.regex.Pattern WHITESPACE;

    static java.lang.ClassLoader getContextClassLoader()
    {
        java.lang.Class $r0;
        java.lang.ClassLoader r1;

        r1 = <org.apache.tika.config.ServiceLoader: java.lang.ClassLoader contextClassLoader>;

        if r1 != null goto label1;

        $r0 = class "Lorg/apache/tika/config/ServiceLoader;";

        r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label1:
        if r1 != null goto label2;

        r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label2:
        return r1;
    }

    public static void setContextClassLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;

        r0 := @parameter0: java.lang.ClassLoader;

        <org.apache.tika.config.ServiceLoader: java.lang.ClassLoader contextClassLoader> = r0;

        return;
    }

    static void addService(java.lang.Object, java.lang.Object, int)
    {
        org.apache.tika.config.ServiceLoader$RankedService $r2;
        java.lang.Throwable $r5;
        java.util.Map $r0, $r4;
        int i0;
        java.lang.Object r1, r3;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        $r0 = <org.apache.tika.config.ServiceLoader: java.util.Map services>;

        entermonitor $r0;

     label1:
        $r4 = <org.apache.tika.config.ServiceLoader: java.util.Map services>;

        $r2 = new org.apache.tika.config.ServiceLoader$RankedService;

        specialinvoke $r2.<org.apache.tika.config.ServiceLoader$RankedService: void <init>(java.lang.Object,int)>(r3, i0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        exitmonitor $r0;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static java.lang.Object removeService(java.lang.Object)
    {
        java.lang.Throwable $r4;
        java.util.Map $r0, $r2;
        java.lang.Object r1, $r3;

        r1 := @parameter0: java.lang.Object;

        $r0 = <org.apache.tika.config.ServiceLoader: java.util.Map services>;

        entermonitor $r0;

     label1:
        $r2 = <org.apache.tika.config.ServiceLoader: java.util.Map services>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        exitmonitor $r0;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void <init>(java.lang.ClassLoader, org.apache.tika.config.LoadErrorHandler, boolean)
    {
        org.apache.tika.config.ServiceLoader r0;
        java.lang.ClassLoader r1;
        org.apache.tika.config.LoadErrorHandler r2;
        boolean z0;

        r0 := @this: org.apache.tika.config.ServiceLoader;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: org.apache.tika.config.LoadErrorHandler;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.tika.config.ServiceLoader: java.lang.ClassLoader loader> = r1;

        r0.<org.apache.tika.config.ServiceLoader: org.apache.tika.config.LoadErrorHandler handler> = r2;

        r0.<org.apache.tika.config.ServiceLoader: boolean dynamic> = z0;

        return;
    }

    public void <init>(java.lang.ClassLoader, org.apache.tika.config.LoadErrorHandler)
    {
        org.apache.tika.config.ServiceLoader r0;
        java.lang.ClassLoader r1;
        org.apache.tika.config.LoadErrorHandler r2;

        r0 := @this: org.apache.tika.config.ServiceLoader;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: org.apache.tika.config.LoadErrorHandler;

        specialinvoke r0.<org.apache.tika.config.ServiceLoader: void <init>(java.lang.ClassLoader,org.apache.tika.config.LoadErrorHandler,boolean)>(r1, r2, 0);

        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        org.apache.tika.config.ServiceLoader r0;
        java.lang.ClassLoader r1;
        org.apache.tika.config.LoadErrorHandler $r2;

        r0 := @this: org.apache.tika.config.ServiceLoader;

        r1 := @parameter0: java.lang.ClassLoader;

        $r2 = <org.apache.tika.config.LoadErrorHandler: org.apache.tika.config.LoadErrorHandler IGNORE>;

        specialinvoke r0.<org.apache.tika.config.ServiceLoader: void <init>(java.lang.ClassLoader,org.apache.tika.config.LoadErrorHandler)>(r1, $r2);

        return;
    }

    public void <init>()
    {
        org.apache.tika.config.ServiceLoader r0;
        java.lang.ClassLoader $r1;
        org.apache.tika.config.LoadErrorHandler $r2;

        r0 := @this: org.apache.tika.config.ServiceLoader;

        $r1 = staticinvoke <org.apache.tika.config.ServiceLoader: java.lang.ClassLoader getContextClassLoader()>();

        $r2 = <org.apache.tika.config.LoadErrorHandler: org.apache.tika.config.LoadErrorHandler IGNORE>;

        specialinvoke r0.<org.apache.tika.config.ServiceLoader: void <init>(java.lang.ClassLoader,org.apache.tika.config.LoadErrorHandler,boolean)>($r1, $r2, 1);

        return;
    }

    public org.apache.tika.config.LoadErrorHandler getLoadErrorHandler()
    {
        org.apache.tika.config.ServiceLoader r0;
        org.apache.tika.config.LoadErrorHandler $r1;

        r0 := @this: org.apache.tika.config.ServiceLoader;

        $r1 = r0.<org.apache.tika.config.ServiceLoader: org.apache.tika.config.LoadErrorHandler handler>;

        return $r1;
    }

    public java.io.InputStream getResourceAsStream(java.lang.String)
    {
        org.apache.tika.config.ServiceLoader r0;
        java.lang.ClassLoader $r1, $r3;
        java.lang.String r2;
        java.io.InputStream $r4;

        r0 := @this: org.apache.tika.config.ServiceLoader;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.tika.config.ServiceLoader: java.lang.ClassLoader loader>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.tika.config.ServiceLoader: java.lang.ClassLoader loader>;

        $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r2);

        return $r4;

     label1:
        return null;
    }

    public java.lang.Class getServiceClass(java.lang.Class, java.lang.String) throws java.lang.ClassNotFoundException
    {
        org.apache.tika.config.ServiceLoader r0;
        java.lang.String r2, $r11, $r13, $r19, $r25;
        boolean $z0, $z1;
        java.lang.Class $r4, r5;
        java.lang.ClassNotFoundException $r6, $r14, $r20;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24;
        java.lang.ClassLoader $r1, $r3;

        r0 := @this: org.apache.tika.config.ServiceLoader;

        r5 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.tika.config.ServiceLoader: java.lang.ClassLoader loader>;

        if $r1 != null goto label1;

        $r20 = new java.lang.ClassNotFoundException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service class ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not available");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>($r25);

        throw $r20;

     label1:
        $r3 = r0.<org.apache.tika.config.ServiceLoader: java.lang.ClassLoader loader>;

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r2, 1, $r3);

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label2;

        $r14 = new java.lang.ClassNotFoundException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service class ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is an interface");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label2:
        $z1 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z1 != 0 goto label3;

        $r6 = new java.lang.ClassNotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service class ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not implement ");

        $r11 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>($r13);

        throw $r6;

     label3:
        return $r4;
    }

    public java.util.Enumeration findServiceResources(java.lang.String)
    {
        org.apache.tika.config.ServiceLoader r0;
        java.util.List $r5;
        java.util.Enumeration $r3, $r6;
        java.io.IOException $r4;
        java.lang.String r1;
        java.lang.ClassLoader $r2;

        r0 := @this: org.apache.tika.config.ServiceLoader;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = r0.<org.apache.tika.config.ServiceLoader: java.lang.ClassLoader loader>;

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r6 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($r5);

        return $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.util.List loadServiceProviders(java.lang.Class)
    {
        org.apache.tika.config.ServiceLoader r1;
        java.util.List $r3, $r4;
        java.lang.Class r2;
        java.util.ArrayList $r0;

        r1 := @this: org.apache.tika.config.ServiceLoader;

        r2 := @parameter0: java.lang.Class;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r1.<org.apache.tika.config.ServiceLoader: java.util.List loadDynamicServiceProviders(java.lang.Class)>(r2);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        $r4 = virtualinvoke r1.<org.apache.tika.config.ServiceLoader: java.util.List loadStaticServiceProviders(java.lang.Class)>(r2);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        return $r0;
    }

    public java.util.List loadDynamicServiceProviders(java.lang.Class)
    {
        java.lang.Throwable $r12;
        org.apache.tika.config.ServiceLoader r0;
        java.util.ArrayList $r1, $r3, $r6;
        java.util.Map $r2, $r4;
        int $i0;
        boolean $z0, $z1, $z2;
        org.apache.tika.config.ServiceLoader$RankedService r9;
        java.util.Iterator $r7;
        java.util.Collection $r5;
        java.lang.Object $r8, $r11;
        java.lang.Class r10;

        r0 := @this: org.apache.tika.config.ServiceLoader;

        r10 := @parameter0: java.lang.Class;

        $z0 = r0.<org.apache.tika.config.ServiceLoader: boolean dynamic>;

        if $z0 == 0 goto label8;

        $r2 = <org.apache.tika.config.ServiceLoader: java.util.Map services>;

        entermonitor $r2;

     label1:
        $r3 = new java.util.ArrayList;

        $r4 = <org.apache.tika.config.ServiceLoader: java.util.Map services>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r3);

        $r6 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i0);

        $r7 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.tika.config.ServiceLoader$RankedService) $r8;

        $z2 = virtualinvoke r9.<org.apache.tika.config.ServiceLoader$RankedService: boolean isInstanceOf(java.lang.Class)>(r10);

        if $z2 == 0 goto label3;

        $r11 = staticinvoke <org.apache.tika.config.ServiceLoader$RankedService: java.lang.Object access$000(org.apache.tika.config.ServiceLoader$RankedService)>(r9);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r11);

     label3:
        goto label2;

     label4:
        exitmonitor $r2;

     label5:
        return $r6;

     label6:
        $r12 := @caughtexception;

        exitmonitor $r2;

     label7:
        throw $r12;

     label8:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(0);

        return $r1;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected java.util.List identifyStaticServiceProviders(java.lang.Class)
    {
        org.apache.tika.config.ServiceLoader r1;
        java.util.Enumeration $r9;
        java.net.URL r13;
        java.util.ArrayList $r0, $r10;
        java.lang.String $r4, $r8;
        boolean $z0;
        org.apache.tika.config.LoadErrorHandler $r15;
        java.util.Iterator $r11;
        java.io.IOException $r14;
        java.lang.Class r3;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.Object $r12;
        java.lang.ClassLoader $r2;

        r1 := @this: org.apache.tika.config.ServiceLoader;

        r3 := @parameter0: java.lang.Class;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.apache.tika.config.ServiceLoader: java.lang.ClassLoader loader>;

        if $r2 == null goto label6;

        $r4 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("META-INF/services/");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke r1.<org.apache.tika.config.ServiceLoader: java.util.Enumeration findServiceResources(java.lang.String)>($r8);

        $r10 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>($r9);

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.net.URL) $r12;

     label2:
        specialinvoke r1.<org.apache.tika.config.ServiceLoader: void collectServiceClassNames(java.net.URL,java.util.Collection)>(r13, $r0);

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

        $r15 = r1.<org.apache.tika.config.ServiceLoader: org.apache.tika.config.LoadErrorHandler handler>;

        interfaceinvoke $r15.<org.apache.tika.config.LoadErrorHandler: void handleLoadError(java.lang.String,java.lang.Throwable)>($r4, $r14);

     label5:
        goto label1;

     label6:
        return $r0;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public java.util.List loadStaticServiceProviders(java.lang.Class)
    {
        java.lang.Throwable $r11;
        org.apache.tika.config.ServiceLoader r1;
        java.util.Iterator $r5;
        java.util.ArrayList $r0;
        java.util.List $r4;
        java.lang.Class r3, $r9;
        java.lang.Object $r6, $r10;
        java.lang.ClassLoader $r2, $r8;
        java.lang.String r7;
        boolean $z0, $z1;
        org.apache.tika.config.LoadErrorHandler $r12;

        r1 := @this: org.apache.tika.config.ServiceLoader;

        r3 := @parameter0: java.lang.Class;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.apache.tika.config.ServiceLoader: java.lang.ClassLoader loader>;

        if $r2 == null goto label6;

        $r4 = virtualinvoke r1.<org.apache.tika.config.ServiceLoader: java.util.List identifyStaticServiceProviders(java.lang.Class)>(r3);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

     label2:
        $r8 = r1.<org.apache.tika.config.ServiceLoader: java.lang.ClassLoader loader>;

        $r9 = virtualinvoke $r8.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r7);

        $z1 = virtualinvoke r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r9);

        if $z1 == 0 goto label3;

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Object newInstance()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r10);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r12 = r1.<org.apache.tika.config.ServiceLoader: org.apache.tika.config.LoadErrorHandler handler>;

        interfaceinvoke $r12.<org.apache.tika.config.LoadErrorHandler: void handleLoadError(java.lang.String,java.lang.Throwable)>(r7, $r11);

     label5:
        goto label1;

     label6:
        return $r0;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void collectServiceClassNames(java.net.URL, java.util.Collection) throws java.io.IOException
    {
        java.lang.Throwable $r11;
        org.apache.tika.config.ServiceLoader r12;
        java.net.URL r0;
        java.util.Collection r10;
        java.io.InputStreamReader $r3;
        java.util.regex.Matcher $r5, $r8;
        int $i0;
        java.io.BufferedReader $r2;
        java.util.regex.Pattern $r4, $r7;
        java.lang.String $r6, $r9, r13;
        java.io.InputStream $r1;

        r12 := @this: org.apache.tika.config.ServiceLoader;

        r0 := @parameter0: java.net.URL;

        r10 := @parameter1: java.util.Collection;

        $r1 = virtualinvoke r0.<java.net.URL: java.io.InputStream openStream()>();

     label1:
        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r1, "UTF-8");

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

        r13 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>();

     label2:
        if r13 == null goto label4;

        $r4 = <org.apache.tika.config.ServiceLoader: java.util.regex.Pattern COMMENT>;

        $r5 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r13);

        $r6 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>("");

        $r7 = <org.apache.tika.config.ServiceLoader: java.util.regex.Pattern WHITESPACE>;

        $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r6);

        $r9 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");

        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        interfaceinvoke r10.<java.util.Collection: boolean add(java.lang.Object)>($r9);

     label3:
        r13 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>();

        goto label2;

     label4:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

        goto label7;

     label5:
        $r11 := @caughtexception;

     label6:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

        throw $r11;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.regex.Pattern $r1, $r2;

        <org.apache.tika.config.ServiceLoader: java.lang.ClassLoader contextClassLoader> = null;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.tika.config.ServiceLoader: java.util.Map services> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("#.*");

        <org.apache.tika.config.ServiceLoader: java.util.regex.Pattern COMMENT> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s+");

        <org.apache.tika.config.ServiceLoader: java.util.regex.Pattern WHITESPACE> = $r2;

        return;
    }
}
