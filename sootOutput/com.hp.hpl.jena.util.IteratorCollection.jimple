public class com.hp.hpl.jena.util.IteratorCollection extends java.lang.Object
{

    private void <init>()
    {
        com.hp.hpl.jena.util.IteratorCollection r0;

        r0 := @this: com.hp.hpl.jena.util.IteratorCollection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Set iteratorToSet(java.util.Iterator)
    {
        java.lang.Throwable $r3;
        java.util.Iterator r1;
        java.util.Set $r0;
        java.lang.Object $r2;
        boolean $z0;

        r1 := @parameter0: java.util.Iterator;

        $r0 = staticinvoke <com.hp.hpl.jena.util.CollectionFactory: java.util.Set createHashedSet()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r2);

        goto label1;

     label2:
        staticinvoke <com.hp.hpl.jena.util.iterator.NiceIterator: void close(java.util.Iterator)>(r1);

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <com.hp.hpl.jena.util.iterator.NiceIterator: void close(java.util.Iterator)>(r1);

        throw $r3;

     label5:
        return $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.util.List iteratorToList(java.util.Iterator)
    {
        java.lang.Throwable $r3;
        java.util.Iterator r1;
        java.lang.Object $r2;
        java.util.ArrayList $r0;
        boolean $z0;

        r1 := @parameter0: java.util.Iterator;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label1;

     label2:
        staticinvoke <com.hp.hpl.jena.util.iterator.NiceIterator: void close(java.util.Iterator)>(r1);

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <com.hp.hpl.jena.util.iterator.NiceIterator: void close(java.util.Iterator)>(r1);

        throw $r3;

     label5:
        return $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
