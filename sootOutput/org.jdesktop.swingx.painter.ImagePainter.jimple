public class org.jdesktop.swingx.painter.ImagePainter extends org.jdesktop.swingx.painter.AbstractAreaPainter
{
    private static final java.util.logging.Logger LOG;
    private transient java.awt.image.BufferedImage img;
    private java.net.URL imageURL;
    private boolean horizontalRepeat;
    private boolean verticalRepeat;
    private boolean scaleToFit;
    private org.jdesktop.swingx.painter.ImagePainter$ScaleType scaleType;
    private double imageScale;
    private java.util.logging.Logger log;
    private java.lang.String imageString;

    public void <init>()
    {
        org.jdesktop.swingx.painter.ImagePainter r0;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        specialinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void <init>(java.awt.image.BufferedImage)>(null);

        return;
    }

    public void <init>(java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage r1;
        org.jdesktop.swingx.painter.ImagePainter r0;
        org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment $r3;
        org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment $r2;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        $r3 = <org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment: org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment CENTER>;

        $r2 = <org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment: org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment CENTER>;

        specialinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void <init>(java.awt.image.BufferedImage,org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment,org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment)>(r1, $r3, $r2);

        return;
    }

    public void <init>(java.awt.image.BufferedImage, org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment, org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment)
    {
        java.awt.image.BufferedImage r5;
        org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment r7;
        org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment r6;
        org.jdesktop.swingx.painter.ImagePainter$ScaleType $r1;
        java.util.logging.Logger $r4;
        org.jdesktop.swingx.painter.ImagePainter r0;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        r5 := @parameter0: java.awt.image.BufferedImage;

        r7 := @parameter1: org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment;

        r6 := @parameter2: org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment;

        specialinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void <init>()>();

        r0.<org.jdesktop.swingx.painter.ImagePainter: boolean scaleToFit> = 0;

        $r1 = <org.jdesktop.swingx.painter.ImagePainter$ScaleType: org.jdesktop.swingx.painter.ImagePainter$ScaleType InsideFit>;

        r0.<org.jdesktop.swingx.painter.ImagePainter: org.jdesktop.swingx.painter.ImagePainter$ScaleType scaleType> = $r1;

        r0.<org.jdesktop.swingx.painter.ImagePainter: double imageScale> = 1.0;

        $r2 = class "Lorg/jdesktop/swingx/painter/ImagePainter;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r3);

        r0.<org.jdesktop.swingx.painter.ImagePainter: java.util.logging.Logger log> = $r4;

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void setCacheable(boolean)>(1);

        r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.image.BufferedImage img> = r5;

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void setVerticalAlignment(org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment)>(r6);

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void setHorizontalAlignment(org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment)>(r7);

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void setFillPaint(java.awt.Paint)>(null);

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void setBorderPaint(java.awt.Paint)>(null);

        return;
    }

    public void <init>(java.net.URL) throws java.io.IOException
    {
        java.awt.image.BufferedImage $r2;
        org.jdesktop.swingx.painter.ImagePainter r0;
        java.net.URL r1;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        r1 := @parameter0: java.net.URL;

        $r2 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.net.URL)>(r1);

        specialinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void <init>(java.awt.image.BufferedImage)>($r2);

        return;
    }

    public void <init>(java.net.URL, org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment, org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment) throws java.io.IOException
    {
        java.awt.image.BufferedImage $r2;
        org.jdesktop.swingx.painter.ImagePainter r0;
        java.net.URL r1;
        org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment r3;
        org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment r4;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        r1 := @parameter0: java.net.URL;

        r3 := @parameter1: org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment;

        r4 := @parameter2: org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment;

        $r2 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.net.URL)>(r1);

        specialinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void <init>(java.awt.image.BufferedImage,org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment,org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment)>($r2, r3, r4);

        return;
    }

    public void setImage(java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage r0, $r2, r3, $r4;
        org.jdesktop.swingx.painter.ImagePainter r1;

        r1 := @this: org.jdesktop.swingx.painter.ImagePainter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        $r2 = r1.<org.jdesktop.swingx.painter.ImagePainter: java.awt.image.BufferedImage img>;

        if r0 == $r2 goto label1;

        r3 = r1.<org.jdesktop.swingx.painter.ImagePainter: java.awt.image.BufferedImage img>;

        r1.<org.jdesktop.swingx.painter.ImagePainter: java.awt.image.BufferedImage img> = r0;

        virtualinvoke r1.<org.jdesktop.swingx.painter.ImagePainter: void setDirty(boolean)>(1);

        $r4 = r1.<org.jdesktop.swingx.painter.ImagePainter: java.awt.image.BufferedImage img>;

        virtualinvoke r1.<org.jdesktop.swingx.painter.ImagePainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("image", r3, $r4);

     label1:
        return;
    }

    public java.awt.image.BufferedImage getImage()
    {
        java.awt.image.BufferedImage $r1, $r3;
        org.jdesktop.swingx.painter.ImagePainter r0;
        java.net.URL $r2;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        $r1 = r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.image.BufferedImage img>;

        if $r1 != null goto label1;

        $r2 = r0.<org.jdesktop.swingx.painter.ImagePainter: java.net.URL imageURL>;

        if $r2 == null goto label1;

        specialinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void loadImage()>();

     label1:
        $r3 = r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.image.BufferedImage img>;

        return $r3;
    }

    protected void doPaint(java.awt.Graphics2D, java.lang.Object, int, int)
    {
        java.awt.Shape $r5;
        java.awt.image.BufferedImage $r1;
        java.net.URL $r4;
        java.awt.Graphics2D r2;
        int[] $r6;
        org.jdesktop.swingx.painter.ImagePainter r0;
        int i0, i1, $i2, $i3;
        org.jdesktop.swingx.painter.AbstractAreaPainter$Style $r7;
        java.lang.Object r3;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        r2 := @parameter0: java.awt.Graphics2D;

        r3 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.image.BufferedImage img>;

        if $r1 != null goto label1;

        $r4 = r0.<org.jdesktop.swingx.painter.ImagePainter: java.net.URL imageURL>;

        if $r4 == null goto label1;

        specialinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void loadImage()>();

     label1:
        $r5 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.Shape provideShape(java.awt.Graphics2D,java.lang.Object,int,int)>(r2, r3, i0, i1);

        $r6 = <org.jdesktop.swingx.painter.ImagePainter$1: int[] $SwitchMap$org$jdesktop$swingx$painter$AbstractAreaPainter$Style>;

        $r7 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: org.jdesktop.swingx.painter.AbstractAreaPainter$Style getStyle()>();

        $i2 = virtualinvoke $r7.<org.jdesktop.swingx.painter.AbstractAreaPainter$Style: int ordinal()>();

        $i3 = $r6[$i2];

        tableswitch($i3)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label5;
        };

     label2:
        specialinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void drawBackground(java.awt.Graphics2D,java.awt.Shape,int,int)>(r2, $r5, i0, i1);

        specialinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void drawBorder(java.awt.Graphics2D,java.awt.Shape,int,int)>(r2, $r5, i0, i1);

        goto label5;

     label3:
        specialinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void drawBackground(java.awt.Graphics2D,java.awt.Shape,int,int)>(r2, $r5, i0, i1);

        goto label5;

     label4:
        specialinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void drawBorder(java.awt.Graphics2D,java.awt.Shape,int,int)>(r2, $r5, i0, i1);

        goto label5;

     label5:
        return;
    }

    private void drawBackground(java.awt.Graphics2D, java.awt.Shape, int, int)
    {
        byte $b18;
        org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment $r25;
        org.jdesktop.swingx.painter.effects.AreaEffect[] $r26, $r28;
        java.awt.geom.Area $r41, $r43, $r45, $r47, $r49;
        org.jdesktop.swingx.painter.ImagePainter$ScaleType $r22, $r23, $r33, $r34, $r35, $r36;
        int[] $r24, $r37;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.awt.Shape r5, $r8, $r9, r30;
        java.awt.image.BufferedImage $r2, $r3, $r4, $r21, $r32, $r39;
        org.jdesktop.swingx.painter.effects.AreaEffect r29;
        org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment $r38;
        java.awt.Paint $r1, r27;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, f24, f25, f26, f27;
        java.awt.Rectangle $r6, $r40, $r42, $r44, $r46, $r48;
        java.awt.Insets $r11;
        java.awt.TexturePaint $r50;
        java.awt.Graphics2D r7;
        org.jdesktop.swingx.painter.ImagePainter r0;
        int $i0, $i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, i30, i31, i32, $i33, $i34, i35, i36, $i38, $i40;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        r7 := @parameter0: java.awt.Graphics2D;

        r5 := @parameter1: java.awt.Shape;

        i2 := @parameter2: int;

        i6 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.Paint getFillPaint()>();

        r27 = $r1;

        if $r1 == null goto label02;

        $z6 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: boolean isPaintStretched()>();

        if $z6 == 0 goto label01;

        r27 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.Paint calculateSnappedPaint(java.awt.Paint,int,int)>($r1, i2, i6);

     label01:
        virtualinvoke r7.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r27);

        virtualinvoke r7.<java.awt.Graphics2D: void fill(java.awt.Shape)>(r5);

     label02:
        $r28 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: org.jdesktop.swingx.painter.effects.AreaEffect[] getAreaEffects()>();

        if $r28 == null goto label04;

        $r26 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: org.jdesktop.swingx.painter.effects.AreaEffect[] getAreaEffects()>();

        i27 = lengthof $r26;

        i28 = 0;

     label03:
        if i28 >= i27 goto label04;

        r29 = $r26[i28];

        interfaceinvoke r29.<org.jdesktop.swingx.painter.effects.AreaEffect: void apply(java.awt.Graphics2D,java.awt.Shape,int,int)>(r7, r5, i2, i6);

        i28 = i28 + 1;

        goto label03;

     label04:
        $r2 = r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.image.BufferedImage img>;

        if $r2 == null goto label25;

        $r3 = r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.image.BufferedImage img>;

        $i0 = virtualinvoke $r3.<java.awt.image.BufferedImage: int getWidth(java.awt.image.ImageObserver)>(null);

        $r4 = r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.image.BufferedImage img>;

        $i1 = virtualinvoke $r4.<java.awt.image.BufferedImage: int getHeight(java.awt.image.ImageObserver)>(null);

        $i38 = (int) -1;

        if $i0 == $i38 goto label25;

        $i40 = (int) -1;

        if $i1 != $i40 goto label05;

        goto label25;

     label05:
        $r6 = interfaceinvoke r5.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $z0 = r0.<org.jdesktop.swingx.painter.ImagePainter: boolean verticalRepeat>;

        if $z0 != 0 goto label06;

        $z4 = r0.<org.jdesktop.swingx.painter.ImagePainter: boolean horizontalRepeat>;

        if $z4 == 0 goto label11;

     label06:
        $r8 = virtualinvoke r7.<java.awt.Graphics2D: java.awt.Shape getClip()>();

        $r9 = virtualinvoke r7.<java.awt.Graphics2D: java.awt.Shape getClip()>();

        r30 = $r9;

        if $r9 != null goto label07;

        $r40 = new java.awt.Rectangle;

        specialinvoke $r40.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, i2, i6);

        r30 = $r40;

     label07:
        $r41 = new java.awt.geom.Area;

        specialinvoke $r41.<java.awt.geom.Area: void <init>(java.awt.Shape)>(r30);

        $r11 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.Insets getInsets()>();

        $r43 = new java.awt.geom.Area;

        $r42 = new java.awt.Rectangle;

        $i13 = $r11.<java.awt.Insets: int left>;

        $i12 = $r11.<java.awt.Insets: int top>;

        $i3 = $r11.<java.awt.Insets: int left>;

        $i5 = i2 - $i3;

        $i4 = $r11.<java.awt.Insets: int right>;

        $i11 = $i5 - $i4;

        $i7 = $r11.<java.awt.Insets: int top>;

        $i9 = i6 - $i7;

        $i8 = $r11.<java.awt.Insets: int bottom>;

        $i10 = $i9 - $i8;

        specialinvoke $r42.<java.awt.Rectangle: void <init>(int,int,int,int)>($i13, $i12, $i11, $i10);

        specialinvoke $r43.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r42);

        virtualinvoke $r41.<java.awt.geom.Area: void intersect(java.awt.geom.Area)>($r43);

        $z1 = r0.<org.jdesktop.swingx.painter.ImagePainter: boolean verticalRepeat>;

        if $z1 == 0 goto label08;

        $z3 = r0.<org.jdesktop.swingx.painter.ImagePainter: boolean horizontalRepeat>;

        if $z3 == 0 goto label08;

        $r45 = new java.awt.geom.Area;

        $r44 = new java.awt.Rectangle;

        specialinvoke $r44.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, i2, i6);

        specialinvoke $r45.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r44);

        virtualinvoke $r41.<java.awt.geom.Area: void intersect(java.awt.geom.Area)>($r45);

        virtualinvoke r7.<java.awt.Graphics2D: void setClip(java.awt.Shape)>($r41);

        goto label10;

     label08:
        $z2 = r0.<org.jdesktop.swingx.painter.ImagePainter: boolean verticalRepeat>;

        if $z2 == 0 goto label09;

        $r47 = new java.awt.geom.Area;

        $r46 = new java.awt.Rectangle;

        $i17 = $r6.<java.awt.Rectangle: int x>;

        $i16 = $r6.<java.awt.Rectangle: int width>;

        specialinvoke $r46.<java.awt.Rectangle: void <init>(int,int,int,int)>($i17, 0, $i16, i6);

        specialinvoke $r47.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r46);

        virtualinvoke $r41.<java.awt.geom.Area: void intersect(java.awt.geom.Area)>($r47);

        virtualinvoke r7.<java.awt.Graphics2D: void setClip(java.awt.Shape)>($r41);

        goto label10;

     label09:
        $r49 = new java.awt.geom.Area;

        $r48 = new java.awt.Rectangle;

        $i15 = $r6.<java.awt.Rectangle: int y>;

        $i14 = $r6.<java.awt.Rectangle: int height>;

        specialinvoke $r48.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, $i15, i2, $i14);

        specialinvoke $r49.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r48);

        virtualinvoke $r41.<java.awt.geom.Area: void intersect(java.awt.geom.Area)>($r49);

        virtualinvoke r7.<java.awt.Graphics2D: void setClip(java.awt.Shape)>($r41);

     label10:
        $r50 = new java.awt.TexturePaint;

        $r32 = r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.image.BufferedImage img>;

        specialinvoke $r50.<java.awt.TexturePaint: void <init>(java.awt.image.BufferedImage,java.awt.geom.Rectangle2D)>($r32, $r6);

        virtualinvoke r7.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r50);

        virtualinvoke r7.<java.awt.Graphics2D: void fillRect(int,int,int,int)>(0, 0, i2, i6);

        virtualinvoke r7.<java.awt.Graphics2D: void setClip(java.awt.Shape)>($r8);

        goto label25;

     label11:
        $z5 = r0.<org.jdesktop.swingx.painter.ImagePainter: boolean scaleToFit>;

        if $z5 == 0 goto label23;

        i29 = $i0;

        i30 = $i1;

        $r23 = r0.<org.jdesktop.swingx.painter.ImagePainter: org.jdesktop.swingx.painter.ImagePainter$ScaleType scaleType>;

        $r22 = <org.jdesktop.swingx.painter.ImagePainter$ScaleType: org.jdesktop.swingx.painter.ImagePainter$ScaleType InsideFit>;

        if $r23 != $r22 goto label13;

        if $i0 <= i2 goto label12;

        $f19 = (float) i2;

        $f18 = (float) $i0;

        f24 = $f19 / $f18;

        $f20 = (float) $i0;

        $f21 = $f20 * f24;

        i29 = (int) $f21;

        $f22 = (float) $i1;

        $f23 = $f22 * f24;

        i30 = (int) $f23;

     label12:
        if i30 <= i6 goto label13;

        $f13 = (float) i6;

        $f12 = (float) i30;

        f25 = $f13 / $f12;

        $f14 = (float) i29;

        $f15 = $f14 * f25;

        i29 = (int) $f15;

        $f16 = (float) i30;

        $f17 = $f16 * f25;

        i30 = (int) $f17;

     label13:
        $r33 = r0.<org.jdesktop.swingx.painter.ImagePainter: org.jdesktop.swingx.painter.ImagePainter$ScaleType scaleType>;

        $r34 = <org.jdesktop.swingx.painter.ImagePainter$ScaleType: org.jdesktop.swingx.painter.ImagePainter$ScaleType OutsideFit>;

        if $r33 != $r34 goto label15;

        if i29 <= i2 goto label14;

        $f7 = (float) i2;

        $f6 = (float) i29;

        f26 = $f7 / $f6;

        $f8 = (float) i29;

        $f9 = $f8 * f26;

        i29 = (int) $f9;

        $f10 = (float) i30;

        $f11 = $f10 * f26;

        i30 = (int) $f11;

     label14:
        if i30 >= i6 goto label15;

        $f1 = (float) i6;

        $f0 = (float) i30;

        f27 = $f1 / $f0;

        $f2 = (float) i29;

        $f3 = $f2 * f27;

        i29 = (int) $f3;

        $f4 = (float) i30;

        $f5 = $f4 * f27;

        i30 = (int) $f5;

     label15:
        $r35 = r0.<org.jdesktop.swingx.painter.ImagePainter: org.jdesktop.swingx.painter.ImagePainter$ScaleType scaleType>;

        $r36 = <org.jdesktop.swingx.painter.ImagePainter$ScaleType: org.jdesktop.swingx.painter.ImagePainter$ScaleType Distort>;

        if $r35 != $r36 goto label16;

        i29 = i2;

        i30 = i6;

     label16:
        i31 = 0;

        i32 = 0;

        $r24 = <org.jdesktop.swingx.painter.ImagePainter$1: int[] $SwitchMap$org$jdesktop$swingx$painter$AbstractLayoutPainter$HorizontalAlignment>;

        $r25 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment getHorizontalAlignment()>();

        $i21 = virtualinvoke $r25.<org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment: int ordinal()>();

        $i22 = $r24[$i21];

        lookupswitch($i22)
        {
            case 1: goto label17;
            case 2: goto label18;
            default: goto label19;
        };

     label17:
        $i26 = i2 / 2;

        $i25 = i29 / 2;

        i31 = $i26 - $i25;

        goto label19;

     label18:
        i31 = i2 - i29;

     label19:
        $r37 = <org.jdesktop.swingx.painter.ImagePainter$1: int[] $SwitchMap$org$jdesktop$swingx$painter$AbstractLayoutPainter$VerticalAlignment>;

        $r38 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment getVerticalAlignment()>();

        $i33 = virtualinvoke $r38.<org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment: int ordinal()>();

        $i34 = $r37[$i33];

        lookupswitch($i34)
        {
            case 1: goto label20;
            case 2: goto label21;
            default: goto label22;
        };

     label20:
        $i24 = i6 / 2;

        $i23 = i30 / 2;

        i32 = $i24 - $i23;

        goto label22;

     label21:
        i32 = i6 - i30;

     label22:
        $r39 = r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.image.BufferedImage img>;

        virtualinvoke r7.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)>($r39, i31, i32, i29, i30, null);

        goto label25;

     label23:
        i35 = $r6.<java.awt.Rectangle: int width>;

        i36 = $r6.<java.awt.Rectangle: int height>;

        $d0 = r0.<org.jdesktop.swingx.painter.ImagePainter: double imageScale>;

        $b18 = $d0 cmpl 1.0;

        if $b18 == 0 goto label24;

        $d2 = (double) i35;

        $d1 = r0.<org.jdesktop.swingx.painter.ImagePainter: double imageScale>;

        $d3 = $d2 * $d1;

        i35 = (int) $d3;

        $d5 = (double) i36;

        $d4 = r0.<org.jdesktop.swingx.painter.ImagePainter: double imageScale>;

        $d6 = $d5 * $d4;

        i36 = (int) $d6;

     label24:
        $r21 = r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.image.BufferedImage img>;

        $i20 = $r6.<java.awt.Rectangle: int x>;

        $i19 = $r6.<java.awt.Rectangle: int y>;

        virtualinvoke r7.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)>($r21, $i20, $i19, i35, i36, null);

     label25:
        return;
    }

    private void drawBorder(java.awt.Graphics2D, java.awt.Shape, int, int)
    {
        java.awt.Shape r5;
        java.awt.Paint $r1, $r3;
        java.awt.Graphics2D r2;
        org.jdesktop.swingx.painter.ImagePainter r0;
        int i0, i1;
        float $f0;
        java.awt.BasicStroke $r4;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        r2 := @parameter0: java.awt.Graphics2D;

        r5 := @parameter1: java.awt.Shape;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.Paint getBorderPaint()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.Paint getBorderPaint()>();

        virtualinvoke r2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r3);

        $r4 = new java.awt.BasicStroke;

        $f0 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: float getBorderWidth()>();

        specialinvoke $r4.<java.awt.BasicStroke: void <init>(float)>($f0);

        virtualinvoke r2.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r4);

        virtualinvoke r2.<java.awt.Graphics2D: void draw(java.awt.Shape)>(r5);

     label1:
        return;
    }

    public void setScaleToFit(boolean)
    {
        org.jdesktop.swingx.painter.ImagePainter r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: boolean isScaleToFit()>();

        r0.<org.jdesktop.swingx.painter.ImagePainter: boolean scaleToFit> = z1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void setDirty(boolean)>(1);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: boolean isScaleToFit()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("scaleToFit", $r1, $r2);

        return;
    }

    public boolean isScaleToFit()
    {
        org.jdesktop.swingx.painter.ImagePainter r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        $z0 = r0.<org.jdesktop.swingx.painter.ImagePainter: boolean scaleToFit>;

        return $z0;
    }

    public void setImageScale(double)
    {
        java.lang.Double $r1, $r2;
        org.jdesktop.swingx.painter.ImagePainter r0;
        double $d0, d1, $d2;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        d1 := @parameter0: double;

        $d0 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: double getImageScale()>();

        r0.<org.jdesktop.swingx.painter.ImagePainter: double imageScale> = d1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void setDirty(boolean)>(1);

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $d2 = r0.<org.jdesktop.swingx.painter.ImagePainter: double imageScale>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("imageScale", $r1, $r2);

        return;
    }

    public double getImageScale()
    {
        org.jdesktop.swingx.painter.ImagePainter r0;
        double $d0;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        $d0 = r0.<org.jdesktop.swingx.painter.ImagePainter: double imageScale>;

        return $d0;
    }

    private void loadImage()
    {
        java.awt.image.BufferedImage $r3;
        java.net.URL $r2;
        java.io.IOException $r4;
        java.util.logging.Logger $r6;
        org.jdesktop.swingx.painter.ImagePainter r0;
        java.lang.StringBuilder $r5, $r7, $r9;
        java.lang.String $r1, $r8, $r10;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

     label1:
        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: java.lang.String getImageString()>();

        if $r1 == null goto label2;

        $r2 = new java.net.URL;

        specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>($r1);

        $r3 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.net.URL)>($r2);

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void setImage(java.awt.image.BufferedImage)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r6 = r0.<org.jdesktop.swingx.painter.ImagePainter: java.util.logging.Logger log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ex: ");

        $r8 = virtualinvoke $r4.<java.io.IOException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void severe(java.lang.String)>($r10);

        virtualinvoke $r4.<java.io.IOException: void printStackTrace()>();

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String getImageString()
    {
        java.lang.String $r1;
        org.jdesktop.swingx.painter.ImagePainter r0;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        $r1 = r0.<org.jdesktop.swingx.painter.ImagePainter: java.lang.String imageString>;

        return $r1;
    }

    public void setImageString(java.lang.String)
    {
        java.util.logging.Logger $r2;
        org.jdesktop.swingx.painter.ImagePainter r0;
        java.lang.StringBuilder $r1, $r3, $r5;
        java.lang.String r4, $r6, $r7;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        r4 := @parameter0: java.lang.String;

        $r2 = r0.<org.jdesktop.swingx.painter.ImagePainter: java.util.logging.Logger log>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setting image string to: ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.util.logging.Logger: void fine(java.lang.String)>($r6);

        $r7 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: java.lang.String getImageString()>();

        r0.<org.jdesktop.swingx.painter.ImagePainter: java.lang.String imageString> = r4;

        specialinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void loadImage()>();

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void setDirty(boolean)>(1);

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("imageString", $r7, r4);

        return;
    }

    public boolean isHorizontalRepeat()
    {
        org.jdesktop.swingx.painter.ImagePainter r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        $z0 = r0.<org.jdesktop.swingx.painter.ImagePainter: boolean horizontalRepeat>;

        return $z0;
    }

    public void setHorizontalRepeat(boolean)
    {
        org.jdesktop.swingx.painter.ImagePainter r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: boolean isHorizontalRepeat()>();

        r0.<org.jdesktop.swingx.painter.ImagePainter: boolean horizontalRepeat> = z1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void setDirty(boolean)>(1);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $z2 = r0.<org.jdesktop.swingx.painter.ImagePainter: boolean horizontalRepeat>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("horizontalRepeat", $r1, $r2);

        return;
    }

    public boolean isVerticalRepeat()
    {
        org.jdesktop.swingx.painter.ImagePainter r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        $z0 = r0.<org.jdesktop.swingx.painter.ImagePainter: boolean verticalRepeat>;

        return $z0;
    }

    public void setVerticalRepeat(boolean)
    {
        org.jdesktop.swingx.painter.ImagePainter r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: boolean isVerticalRepeat()>();

        r0.<org.jdesktop.swingx.painter.ImagePainter: boolean verticalRepeat> = z1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void setDirty(boolean)>(1);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $z2 = r0.<org.jdesktop.swingx.painter.ImagePainter: boolean verticalRepeat>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("verticalRepeat", $r1, $r2);

        return;
    }

    protected java.awt.Shape provideShape(java.awt.Graphics2D, java.lang.Object, int, int)
    {
        java.awt.Rectangle $r2, $r4;
        java.awt.image.BufferedImage $r1, $r3;
        java.awt.Graphics2D r5;
        org.jdesktop.swingx.painter.ImagePainter r0;
        int $i0, $i1, i2, i3;
        java.lang.Object r6;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        r5 := @parameter0: java.awt.Graphics2D;

        r6 := @parameter1: java.lang.Object;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.image.BufferedImage getImage()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.image.BufferedImage getImage()>();

        $i0 = virtualinvoke $r3.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke $r3.<java.awt.image.BufferedImage: int getHeight()>();

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: java.awt.Rectangle calculateLayout(int,int,int,int)>($i0, $i1, i2, i3);

        return $r4;

     label1:
        $r2 = new java.awt.Rectangle;

        specialinvoke $r2.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, 0, 0);

        return $r2;
    }

    public org.jdesktop.swingx.painter.ImagePainter$ScaleType getScaleType()
    {
        org.jdesktop.swingx.painter.ImagePainter$ScaleType $r1;
        org.jdesktop.swingx.painter.ImagePainter r0;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        $r1 = r0.<org.jdesktop.swingx.painter.ImagePainter: org.jdesktop.swingx.painter.ImagePainter$ScaleType scaleType>;

        return $r1;
    }

    public void setScaleType(org.jdesktop.swingx.painter.ImagePainter$ScaleType)
    {
        org.jdesktop.swingx.painter.ImagePainter r0;
        org.jdesktop.swingx.painter.ImagePainter$ScaleType $r1, r2, $r3;

        r0 := @this: org.jdesktop.swingx.painter.ImagePainter;

        r2 := @parameter0: org.jdesktop.swingx.painter.ImagePainter$ScaleType;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: org.jdesktop.swingx.painter.ImagePainter$ScaleType getScaleType()>();

        r0.<org.jdesktop.swingx.painter.ImagePainter: org.jdesktop.swingx.painter.ImagePainter$ScaleType scaleType> = r2;

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void setDirty(boolean)>(1);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: org.jdesktop.swingx.painter.ImagePainter$ScaleType getScaleType()>();

        virtualinvoke r0.<org.jdesktop.swingx.painter.ImagePainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("scaleType", $r1, $r3);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lorg/jdesktop/swingx/painter/ImagePainter;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.jdesktop.swingx.painter.ImagePainter: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
