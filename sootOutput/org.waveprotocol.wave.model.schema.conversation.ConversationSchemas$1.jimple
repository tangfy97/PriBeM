final class org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1 extends org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints
{

    void <init>()
    {
        org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1 r0;
        java.lang.String[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1;

        specialinvoke r0.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: void <init>()>();

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "conversation";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1: void addChildren(java.lang.String,java.lang.String[])>(null, $r1);

        $r2 = newarray (java.lang.String)[6];

        $r2[0] = "anchorWavelet";

        $r2[1] = "anchorManifestOffset";

        $r2[2] = "anchorVersion";

        $r2[3] = "anchorBlip";

        $r2[4] = "anchorOffset";

        $r2[5] = "sort";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1: void addAttrs(java.lang.String,java.lang.String[])>("conversation", $r2);

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "blip";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1: void addChildren(java.lang.String,java.lang.String[])>("conversation", $r3);

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "id";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1: void addAttrs(java.lang.String,java.lang.String[])>("blip", $r4);

        $r5 = <org.waveprotocol.wave.model.schema.SchemaUtils: java.lang.String[] BOOLEAN_VALUES>;

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1: void addAttrWithValues(java.lang.String,java.lang.String,java.lang.String[])>("blip", "deleted", $r5);

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "thread";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1: void addChildren(java.lang.String,java.lang.String[])>("blip", $r6);

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "peer";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1: void addChildren(java.lang.String,java.lang.String[])>("blip", $r7);

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = "id";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1: void addAttrs(java.lang.String,java.lang.String[])>("thread", $r8);

        $r9 = <org.waveprotocol.wave.model.schema.SchemaUtils: java.lang.String[] BOOLEAN_VALUES>;

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1: void addAttrWithValues(java.lang.String,java.lang.String,java.lang.String[])>("thread", "inline", $r9);

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = "blip";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1: void addChildren(java.lang.String,java.lang.String[])>("thread", $r10);

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = "id";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1: void addAttrs(java.lang.String,java.lang.String[])>("peer", $r11);

        return;
    }

    public boolean permitsAttribute(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String[] $r8;
        org.waveprotocol.wave.model.id.WaveletId $r13;
        java.lang.String r0, $r1, $r2, r4, r5, $r6, $r7, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1 r3;
        org.waveprotocol.wave.model.util.Serializer $r11;
        java.util.List $r9;
        java.lang.Object $r12;

        r3 := @this: org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$1;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        $r1 = "conversation";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label3;

        $r7 = "anchorWavelet";

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z5 == 0 goto label1;

        $r11 = <org.waveprotocol.wave.model.id.WaveletIdSerializer: org.waveprotocol.wave.model.util.Serializer INSTANCE>;

        $r12 = interfaceinvoke $r11.<org.waveprotocol.wave.model.util.Serializer: java.lang.Object fromString(java.lang.String)>(r5);

        $r13 = (org.waveprotocol.wave.model.id.WaveletId) $r12;

        $z10 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isConversationalId(org.waveprotocol.wave.model.id.WaveletId)>($r13);

        return $z10;

     label1:
        $r8 = newarray (java.lang.String)[3];

        $r8[0] = "anchorManifestOffset";

        $r8[1] = "anchorVersion";

        $r8[2] = "anchorOffset";

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        $z6 = interfaceinvoke $r9.<java.util.List: boolean contains(java.lang.Object)>(r4);

        if $z6 == 0 goto label2;

        $z9 = staticinvoke <org.waveprotocol.wave.model.schema.SchemaUtils: boolean isNonNegativeInteger(java.lang.String)>(r5);

        return $z9;

     label2:
        $r10 = "anchorBlip";

        $z7 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z7 == 0 goto label3;

        $z8 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isBlipId(java.lang.String)>(r5);

        return $z8;

     label3:
        $r2 = "blip";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label4;

        $r6 = "id";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z3 == 0 goto label4;

        $z4 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isBlipId(java.lang.String)>(r5);

        return $z4;

     label4:
        $z2 = specialinvoke r3.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: boolean permitsAttribute(java.lang.String,java.lang.String,java.lang.String)>(r0, r4, r5);

        return $z2;
    }
}
