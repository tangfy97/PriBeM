public class com.jhlabs.math.Noise extends java.lang.Object implements com.jhlabs.math.Function1D, com.jhlabs.math.Function2D, com.jhlabs.math.Function3D
{
    private static java.util.Random randomGenerator;
    private static final int B;
    private static final int BM;
    private static final int N;
    static int[] p;
    static float[][] g3;
    static float[][] g2;
    static float[] g1;
    static boolean start;

    public void <init>()
    {
        com.jhlabs.math.Noise r0;

        r0 := @this: com.jhlabs.math.Noise;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public float evaluate(float)
    {
        float f0, $f1;
        com.jhlabs.math.Noise r0;

        r0 := @this: com.jhlabs.math.Noise;

        f0 := @parameter0: float;

        $f1 = staticinvoke <com.jhlabs.math.Noise: float noise1(float)>(f0);

        return $f1;
    }

    public float evaluate(float, float)
    {
        com.jhlabs.math.Noise r0;
        float f0, f1, $f2;

        r0 := @this: com.jhlabs.math.Noise;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = staticinvoke <com.jhlabs.math.Noise: float noise2(float,float)>(f0, f1);

        return $f2;
    }

    public float evaluate(float, float, float)
    {
        com.jhlabs.math.Noise r0;
        float f0, f1, f2, $f3;

        r0 := @this: com.jhlabs.math.Noise;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f3 = staticinvoke <com.jhlabs.math.Noise: float noise3(float,float,float)>(f0, f1, f2);

        return $f3;
    }

    public static float turbulence2(float, float, float)
    {
        byte $b0;
        int $i1;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, f8, f9;

        f1 := @parameter0: float;

        f2 := @parameter1: float;

        f0 := @parameter2: float;

        f8 = 0.0F;

        f9 = 1.0F;

     label1:
        $b0 = f9 cmpg f0;

        $i1 = (int) $b0;

        if $i1 > 0 goto label2;

        $f4 = f9 * f1;

        $f3 = f9 * f2;

        $f5 = staticinvoke <com.jhlabs.math.Noise: float noise2(float,float)>($f4, $f3);

        $f6 = staticinvoke <java.lang.Math: float abs(float)>($f5);

        $f7 = $f6 / f9;

        f8 = f8 + $f7;

        f9 = f9 * 2.0F;

        goto label1;

     label2:
        return f8;
    }

    public static float turbulence3(float, float, float, float)
    {
        byte $b0;
        int $i1;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, f10, f11;

        f1 := @parameter0: float;

        f2 := @parameter1: float;

        f3 := @parameter2: float;

        f0 := @parameter3: float;

        f10 = 0.0F;

        f11 = 1.0F;

     label1:
        $b0 = f11 cmpg f0;

        $i1 = (int) $b0;

        if $i1 > 0 goto label2;

        $f6 = f11 * f1;

        $f5 = f11 * f2;

        $f4 = f11 * f3;

        $f7 = staticinvoke <com.jhlabs.math.Noise: float noise3(float,float,float)>($f6, $f5, $f4);

        $f8 = staticinvoke <java.lang.Math: float abs(float)>($f7);

        $f9 = $f8 / f11;

        f10 = f10 + $f9;

        f11 = f11 * 2.0F;

        goto label1;

     label2:
        return f10;
    }

    private static float sCurve(float)
    {
        float f0, $f1, $f2, $f3, $f4;

        f0 := @parameter0: float;

        $f3 = f0 * f0;

        $f1 = 2.0F * f0;

        $f2 = 3.0F - $f1;

        $f4 = $f3 * $f2;

        return $f4;
    }

    public static float noise1(float)
    {
        float[] $r1, $r3;
        int[] $r0, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;

        f0 := @parameter0: float;

        $z0 = <com.jhlabs.math.Noise: boolean start>;

        if $z0 == 0 goto label1;

        <com.jhlabs.math.Noise: boolean start> = 0;

        staticinvoke <com.jhlabs.math.Noise: void init()>();

     label1:
        $f7 = f0 + 4096.0F;

        $i0 = (int) $f7;

        $i5 = $i0 & 255;

        $i1 = $i5 + 1;

        $i6 = $i1 & 255;

        $i2 = (int) $f7;

        $f1 = (float) $i2;

        $f8 = $f7 - $f1;

        $f9 = $f8 - 1.0F;

        $f2 = staticinvoke <com.jhlabs.math.Noise: float sCurve(float)>($f8);

        $r1 = <com.jhlabs.math.Noise: float[] g1>;

        $r0 = <com.jhlabs.math.Noise: int[] p>;

        $i3 = $r0[$i5];

        $f3 = $r1[$i3];

        $f10 = $f8 * $f3;

        $r3 = <com.jhlabs.math.Noise: float[] g1>;

        $r2 = <com.jhlabs.math.Noise: int[] p>;

        $i4 = $r2[$i6];

        $f4 = $r3[$i4];

        $f11 = $f9 * $f4;

        $f5 = staticinvoke <com.jhlabs.math.Noise: float lerp(float,float,float)>($f2, $f10, $f11);

        $f6 = 2.3F * $f5;

        return $f6;
    }

    public static float noise2(float, float)
    {
        float[] $r10, $r11, $r12, $r13;
        int[] $r0, $r1, $r2, $r3, $r4, $r5;
        boolean $z0;
        float f0, $f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        float[][] $r6, $r7, $r8, $r9;

        f0 := @parameter0: float;

        f2 := @parameter1: float;

        $z0 = <com.jhlabs.math.Noise: boolean start>;

        if $z0 == 0 goto label1;

        <com.jhlabs.math.Noise: boolean start> = 0;

        staticinvoke <com.jhlabs.math.Noise: void init()>();

     label1:
        $f26 = f0 + 4096.0F;

        $i0 = (int) $f26;

        $i10 = $i0 & 255;

        $i1 = $i10 + 1;

        $i11 = $i1 & 255;

        $i2 = (int) $f26;

        $f1 = (float) $i2;

        $f27 = $f26 - $f1;

        $f28 = $f27 - 1.0F;

        $f29 = f2 + 4096.0F;

        $i3 = (int) $f29;

        $i12 = $i3 & 255;

        $i4 = $i12 + 1;

        $i13 = $i4 & 255;

        $i5 = (int) $f29;

        $f3 = (float) $i5;

        $f30 = $f29 - $f3;

        $f31 = $f30 - 1.0F;

        $r0 = <com.jhlabs.math.Noise: int[] p>;

        $i14 = $r0[$i10];

        $r1 = <com.jhlabs.math.Noise: int[] p>;

        $i15 = $r1[$i11];

        $r2 = <com.jhlabs.math.Noise: int[] p>;

        $i6 = $i14 + $i12;

        $i16 = $r2[$i6];

        $r3 = <com.jhlabs.math.Noise: int[] p>;

        $i7 = $i15 + $i12;

        $i17 = $r3[$i7];

        $r4 = <com.jhlabs.math.Noise: int[] p>;

        $i8 = $i14 + $i13;

        $i18 = $r4[$i8];

        $r5 = <com.jhlabs.math.Noise: int[] p>;

        $i9 = $i15 + $i13;

        $i19 = $r5[$i9];

        $f4 = staticinvoke <com.jhlabs.math.Noise: float sCurve(float)>($f27);

        $f5 = staticinvoke <com.jhlabs.math.Noise: float sCurve(float)>($f30);

        $r6 = <com.jhlabs.math.Noise: float[][] g2>;

        $r10 = $r6[$i16];

        $f6 = $r10[0];

        $f9 = $f27 * $f6;

        $f7 = $r10[1];

        $f8 = $f30 * $f7;

        $f32 = $f9 + $f8;

        $r7 = <com.jhlabs.math.Noise: float[][] g2>;

        $r11 = $r7[$i17];

        $f10 = $r11[0];

        $f13 = $f28 * $f10;

        $f11 = $r11[1];

        $f12 = $f30 * $f11;

        $f33 = $f13 + $f12;

        $f14 = staticinvoke <com.jhlabs.math.Noise: float lerp(float,float,float)>($f4, $f32, $f33);

        $r8 = <com.jhlabs.math.Noise: float[][] g2>;

        $r12 = $r8[$i18];

        $f15 = $r12[0];

        $f18 = $f27 * $f15;

        $f16 = $r12[1];

        $f17 = $f31 * $f16;

        $f34 = $f18 + $f17;

        $r9 = <com.jhlabs.math.Noise: float[][] g2>;

        $r13 = $r9[$i19];

        $f19 = $r13[0];

        $f22 = $f28 * $f19;

        $f20 = $r13[1];

        $f21 = $f31 * $f20;

        $f35 = $f22 + $f21;

        $f23 = staticinvoke <com.jhlabs.math.Noise: float lerp(float,float,float)>($f4, $f34, $f35);

        $f24 = staticinvoke <com.jhlabs.math.Noise: float lerp(float,float,float)>($f5, $f14, $f23);

        $f25 = 1.5F * $f24;

        return $f25;
    }

    public static float noise3(float, float, float)
    {
        float[] $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        int[] $r0, $r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        float[][] $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        boolean $z0;
        float f0, $f1, f2, $f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, $f52, $f53, $f54, $f55, $f56, $f57, $f58, $f59, $f60, $f61, $f62, $f63, $f64, $f65, $f66, $f67, $f68, $f69, $f70, $f71, $f72, $f73, $f74, $f75, $f76, $f77, $f78, $f79, $f80, $f81, $f82, $f83, $f84, $f85, $f86, $f87, $f88, $f89;

        f0 := @parameter0: float;

        f2 := @parameter1: float;

        f4 := @parameter2: float;

        $z0 = <com.jhlabs.math.Noise: boolean start>;

        if $z0 == 0 goto label1;

        <com.jhlabs.math.Noise: boolean start> = 0;

        staticinvoke <com.jhlabs.math.Noise: void init()>();

     label1:
        $f73 = f0 + 4096.0F;

        $i0 = (int) $f73;

        $i21 = $i0 & 255;

        $i1 = $i21 + 1;

        $i22 = $i1 & 255;

        $i2 = (int) $f73;

        $f1 = (float) $i2;

        $f74 = $f73 - $f1;

        $f75 = $f74 - 1.0F;

        $f76 = f2 + 4096.0F;

        $i3 = (int) $f76;

        $i23 = $i3 & 255;

        $i4 = $i23 + 1;

        $i24 = $i4 & 255;

        $i5 = (int) $f76;

        $f3 = (float) $i5;

        $f77 = $f76 - $f3;

        $f78 = $f77 - 1.0F;

        $f79 = f4 + 4096.0F;

        $i6 = (int) $f79;

        $i25 = $i6 & 255;

        $i7 = $i25 + 1;

        $i26 = $i7 & 255;

        $i8 = (int) $f79;

        $f5 = (float) $i8;

        $f80 = $f79 - $f5;

        $f81 = $f80 - 1.0F;

        $r0 = <com.jhlabs.math.Noise: int[] p>;

        $i27 = $r0[$i21];

        $r1 = <com.jhlabs.math.Noise: int[] p>;

        $i28 = $r1[$i22];

        $r2 = <com.jhlabs.math.Noise: int[] p>;

        $i9 = $i27 + $i23;

        $i29 = $r2[$i9];

        $r3 = <com.jhlabs.math.Noise: int[] p>;

        $i10 = $i28 + $i23;

        $i30 = $r3[$i10];

        $r4 = <com.jhlabs.math.Noise: int[] p>;

        $i11 = $i27 + $i24;

        $i31 = $r4[$i11];

        $r5 = <com.jhlabs.math.Noise: int[] p>;

        $i12 = $i28 + $i24;

        $i32 = $r5[$i12];

        $f6 = staticinvoke <com.jhlabs.math.Noise: float sCurve(float)>($f74);

        $f7 = staticinvoke <com.jhlabs.math.Noise: float sCurve(float)>($f77);

        $f8 = staticinvoke <com.jhlabs.math.Noise: float sCurve(float)>($f80);

        $r6 = <com.jhlabs.math.Noise: float[][] g3>;

        $i13 = $i29 + $i25;

        $r14 = $r6[$i13];

        $f9 = $r14[0];

        $f12 = $f74 * $f9;

        $f10 = $r14[1];

        $f11 = $f77 * $f10;

        $f15 = $f12 + $f11;

        $f13 = $r14[2];

        $f14 = $f80 * $f13;

        $f82 = $f15 + $f14;

        $r7 = <com.jhlabs.math.Noise: float[][] g3>;

        $i14 = $i30 + $i25;

        $r15 = $r7[$i14];

        $f16 = $r15[0];

        $f19 = $f75 * $f16;

        $f17 = $r15[1];

        $f18 = $f77 * $f17;

        $f22 = $f19 + $f18;

        $f20 = $r15[2];

        $f21 = $f80 * $f20;

        $f83 = $f22 + $f21;

        $f23 = staticinvoke <com.jhlabs.math.Noise: float lerp(float,float,float)>($f6, $f82, $f83);

        $r8 = <com.jhlabs.math.Noise: float[][] g3>;

        $i15 = $i31 + $i25;

        $r16 = $r8[$i15];

        $f24 = $r16[0];

        $f27 = $f74 * $f24;

        $f25 = $r16[1];

        $f26 = $f78 * $f25;

        $f30 = $f27 + $f26;

        $f28 = $r16[2];

        $f29 = $f80 * $f28;

        $f84 = $f30 + $f29;

        $r9 = <com.jhlabs.math.Noise: float[][] g3>;

        $i16 = $i32 + $i25;

        $r17 = $r9[$i16];

        $f31 = $r17[0];

        $f34 = $f75 * $f31;

        $f32 = $r17[1];

        $f33 = $f78 * $f32;

        $f37 = $f34 + $f33;

        $f35 = $r17[2];

        $f36 = $f80 * $f35;

        $f85 = $f37 + $f36;

        $f38 = staticinvoke <com.jhlabs.math.Noise: float lerp(float,float,float)>($f6, $f84, $f85);

        $f39 = staticinvoke <com.jhlabs.math.Noise: float lerp(float,float,float)>($f7, $f23, $f38);

        $r10 = <com.jhlabs.math.Noise: float[][] g3>;

        $i17 = $i29 + $i26;

        $r18 = $r10[$i17];

        $f40 = $r18[0];

        $f43 = $f74 * $f40;

        $f41 = $r18[1];

        $f42 = $f77 * $f41;

        $f46 = $f43 + $f42;

        $f44 = $r18[2];

        $f45 = $f81 * $f44;

        $f86 = $f46 + $f45;

        $r11 = <com.jhlabs.math.Noise: float[][] g3>;

        $i18 = $i30 + $i26;

        $r19 = $r11[$i18];

        $f47 = $r19[0];

        $f50 = $f75 * $f47;

        $f48 = $r19[1];

        $f49 = $f77 * $f48;

        $f53 = $f50 + $f49;

        $f51 = $r19[2];

        $f52 = $f81 * $f51;

        $f87 = $f53 + $f52;

        $f54 = staticinvoke <com.jhlabs.math.Noise: float lerp(float,float,float)>($f6, $f86, $f87);

        $r12 = <com.jhlabs.math.Noise: float[][] g3>;

        $i19 = $i31 + $i26;

        $r20 = $r12[$i19];

        $f55 = $r20[0];

        $f58 = $f74 * $f55;

        $f56 = $r20[1];

        $f57 = $f78 * $f56;

        $f61 = $f58 + $f57;

        $f59 = $r20[2];

        $f60 = $f81 * $f59;

        $f88 = $f61 + $f60;

        $r13 = <com.jhlabs.math.Noise: float[][] g3>;

        $i20 = $i32 + $i26;

        $r21 = $r13[$i20];

        $f62 = $r21[0];

        $f65 = $f75 * $f62;

        $f63 = $r21[1];

        $f64 = $f78 * $f63;

        $f68 = $f65 + $f64;

        $f66 = $r21[2];

        $f67 = $f81 * $f66;

        $f89 = $f68 + $f67;

        $f69 = staticinvoke <com.jhlabs.math.Noise: float lerp(float,float,float)>($f6, $f88, $f89);

        $f70 = staticinvoke <com.jhlabs.math.Noise: float lerp(float,float,float)>($f7, $f54, $f69);

        $f71 = staticinvoke <com.jhlabs.math.Noise: float lerp(float,float,float)>($f8, $f39, $f70);

        $f72 = 1.5F * $f71;

        return $f72;
    }

    public static float lerp(float, float, float)
    {
        float f0, f1, f2, $f3, $f4, $f5;

        f1 := @parameter0: float;

        f0 := @parameter1: float;

        f2 := @parameter2: float;

        $f3 = f2 - f0;

        $f4 = f1 * $f3;

        $f5 = f0 + $f4;

        return $f5;
    }

    private static void normalize2(float[])
    {
        float[] r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, f7, $f8, $f9, $f10, $f11;
        double $d0, $d1;

        r0 := @parameter0: float[];

        $f1 = r0[0];

        $f0 = r0[0];

        $f5 = $f1 * $f0;

        $f3 = r0[1];

        $f2 = r0[1];

        $f4 = $f3 * $f2;

        $f6 = $f5 + $f4;

        $d0 = (double) $f6;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        f7 = (float) $d1;

        $f8 = r0[0];

        $f9 = $f8 / f7;

        r0[0] = $f9;

        $f10 = r0[1];

        $f11 = $f10 / f7;

        r0[1] = $f11;

        return;
    }

    static void normalize3(float[])
    {
        float[] r0;
        double $d0, $d1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, f11, $f12, $f13, $f14, $f15, $f16, $f17;

        r0 := @parameter0: float[];

        $f1 = r0[0];

        $f0 = r0[0];

        $f5 = $f1 * $f0;

        $f3 = r0[1];

        $f2 = r0[1];

        $f4 = $f3 * $f2;

        $f9 = $f5 + $f4;

        $f7 = r0[2];

        $f6 = r0[2];

        $f8 = $f7 * $f6;

        $f10 = $f9 + $f8;

        $d0 = (double) $f10;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        f11 = (float) $d1;

        $f12 = r0[0];

        $f13 = $f12 / f11;

        r0[0] = $f13;

        $f14 = r0[1];

        $f15 = $f14 / f11;

        r0[1] = $f15;

        $f16 = r0[2];

        $f17 = $f16 / f11;

        r0[2] = $f17;

        return;
    }

    private static int random()
    {
        int $i0, $i1;
        java.util.Random $r0;

        $r0 = <com.jhlabs.math.Noise: java.util.Random randomGenerator>;

        $i0 = virtualinvoke $r0.<java.util.Random: int nextInt()>();

        $i1 = $i0 & 2147483647;

        return $i1;
    }

    private static void init()
    {
        int[] $r0, $r1, $r12, $r13, $r14, $r15, $r16;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        float[] $r2, $r3, $r6, $r7, $r10, $r11, $r17, $r19, $r21, $r23, $r25;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, i21, i22, i23, i24, $i26;
        float[][] $r4, $r5, $r8, $r9, $r18, $r20, $r22, $r24;

        i18 = 0;

     label01:
        if i18 >= 256 goto label06;

        $r16 = <com.jhlabs.math.Noise: int[] p>;

        $r16[i18] = i18;

        $r17 = <com.jhlabs.math.Noise: float[] g1>;

        $i9 = staticinvoke <com.jhlabs.math.Noise: int random()>();

        $i10 = $i9 % 512;

        $i11 = $i10 - 256;

        $f3 = (float) $i11;

        $f4 = $f3 / 256.0F;

        $r17[i18] = $f4;

        i19 = 0;

     label02:
        if i19 >= 2 goto label03;

        $r24 = <com.jhlabs.math.Noise: float[][] g2>;

        $r25 = $r24[i18];

        $i15 = staticinvoke <com.jhlabs.math.Noise: int random()>();

        $i16 = $i15 % 512;

        $i17 = $i16 - 256;

        $f7 = (float) $i17;

        $f8 = $f7 / 256.0F;

        $r25[i19] = $f8;

        i19 = i19 + 1;

        goto label02;

     label03:
        $r18 = <com.jhlabs.math.Noise: float[][] g2>;

        $r19 = $r18[i18];

        staticinvoke <com.jhlabs.math.Noise: void normalize2(float[])>($r19);

        i20 = 0;

     label04:
        if i20 >= 3 goto label05;

        $r22 = <com.jhlabs.math.Noise: float[][] g3>;

        $r23 = $r22[i18];

        $i12 = staticinvoke <com.jhlabs.math.Noise: int random()>();

        $i13 = $i12 % 512;

        $i14 = $i13 - 256;

        $f5 = (float) $i14;

        $f6 = $f5 / 256.0F;

        $r23[i20] = $f6;

        i20 = i20 + 1;

        goto label04;

     label05:
        $r20 = <com.jhlabs.math.Noise: float[][] g3>;

        $r21 = $r20[i18];

        staticinvoke <com.jhlabs.math.Noise: void normalize3(float[])>($r21);

        i18 = i18 + 1;

        goto label01;

     label06:
        i21 = 255;

     label07:
        if i21 < 0 goto label08;

        $r12 = <com.jhlabs.math.Noise: int[] p>;

        i5 = $r12[i21];

        $r13 = <com.jhlabs.math.Noise: int[] p>;

        $r14 = <com.jhlabs.math.Noise: int[] p>;

        $i6 = staticinvoke <com.jhlabs.math.Noise: int random()>();

        $i7 = $i6 % 256;

        $i8 = $r14[$i7];

        $r13[i21] = $i8;

        $r15 = <com.jhlabs.math.Noise: int[] p>;

        $r15[$i7] = i5;

        $i26 = (int) -1;

        i21 = i21 + $i26;

        goto label07;

     label08:
        i22 = 0;

     label09:
        if i22 >= 258 goto label14;

        $r1 = <com.jhlabs.math.Noise: int[] p>;

        $i1 = 256 + i22;

        $r0 = <com.jhlabs.math.Noise: int[] p>;

        $i0 = $r0[i22];

        $r1[$i1] = $i0;

        $r3 = <com.jhlabs.math.Noise: float[] g1>;

        $i2 = 256 + i22;

        $r2 = <com.jhlabs.math.Noise: float[] g1>;

        $f0 = $r2[i22];

        $r3[$i2] = $f0;

        i23 = 0;

     label10:
        if i23 >= 2 goto label11;

        $r8 = <com.jhlabs.math.Noise: float[][] g2>;

        $i4 = 256 + i22;

        $r11 = $r8[$i4];

        $r9 = <com.jhlabs.math.Noise: float[][] g2>;

        $r10 = $r9[i22];

        $f2 = $r10[i23];

        $r11[i23] = $f2;

        i23 = i23 + 1;

        goto label10;

     label11:
        i24 = 0;

     label12:
        if i24 >= 3 goto label13;

        $r4 = <com.jhlabs.math.Noise: float[][] g3>;

        $i3 = 256 + i22;

        $r7 = $r4[$i3];

        $r5 = <com.jhlabs.math.Noise: float[][] g3>;

        $r6 = $r5[i22];

        $f1 = $r6[i24];

        $r7[i24] = $f1;

        i24 = i24 + 1;

        goto label12;

     label13:
        i22 = i22 + 1;

        goto label09;

     label14:
        return;
    }

    public static float[] findRange(com.jhlabs.math.Function1D, float[])
    {
        com.jhlabs.math.Function1D r0;
        float[] r1;
        byte $b0;
        int $i1;
        float $f0, f1, f2, f3;
        double $d0, $d1;

        r0 := @parameter0: com.jhlabs.math.Function1D;

        r1 := @parameter1: float[];

        if r1 != null goto label1;

        r1 = newarray (float)[2];

     label1:
        f1 = 0.0F;

        f2 = 0.0F;

        f3 = -100.0F;

     label2:
        $b0 = f3 cmpg 100.0F;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label3;

        $f0 = interfaceinvoke r0.<com.jhlabs.math.Function1D: float evaluate(float)>(f3);

        f1 = staticinvoke <java.lang.Math: float min(float,float)>(f1, $f0);

        f2 = staticinvoke <java.lang.Math: float max(float,float)>(f2, $f0);

        $d0 = (double) f3;

        $d1 = $d0 + 1.27139;

        f3 = (float) $d1;

        goto label2;

     label3:
        r1[0] = f1;

        r1[1] = f2;

        return r1;
    }

    public static float[] findRange(com.jhlabs.math.Function2D, float[])
    {
        com.jhlabs.math.Function2D r0;
        float[] r1;
        byte $b0, $b1;
        int $i2, $i3;
        float $f0, f1, f2, f3, f4;
        double $d0, $d1, $d2, $d3;

        r0 := @parameter0: com.jhlabs.math.Function2D;

        r1 := @parameter1: float[];

        if r1 != null goto label1;

        r1 = newarray (float)[2];

     label1:
        f1 = 0.0F;

        f2 = 0.0F;

        f3 = -100.0F;

     label2:
        $b1 = f3 cmpg 100.0F;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label5;

        f4 = -100.0F;

     label3:
        $b0 = f4 cmpg 100.0F;

        $i3 = (int) $b0;

        if $i3 >= 0 goto label4;

        $f0 = interfaceinvoke r0.<com.jhlabs.math.Function2D: float evaluate(float,float)>(f4, f3);

        f1 = staticinvoke <java.lang.Math: float min(float,float)>(f1, $f0);

        f2 = staticinvoke <java.lang.Math: float max(float,float)>(f2, $f0);

        $d2 = (double) f4;

        $d3 = $d2 + 10.77139;

        f4 = (float) $d3;

        goto label3;

     label4:
        $d0 = (double) f3;

        $d1 = $d0 + 10.35173;

        f3 = (float) $d1;

        goto label2;

     label5:
        r1[0] = f1;

        r1[1] = f2;

        return r1;
    }

    static void <clinit>()
    {
        float[][] $r2, $r3;
        int[] $r1;
        java.util.Random $r0;
        float[] $r4;

        <com.jhlabs.math.Noise: int N> = 4096;

        <com.jhlabs.math.Noise: int BM> = 255;

        <com.jhlabs.math.Noise: int B> = 256;

        $r0 = new java.util.Random;

        specialinvoke $r0.<java.util.Random: void <init>()>();

        <com.jhlabs.math.Noise: java.util.Random randomGenerator> = $r0;

        $r1 = newarray (int)[514];

        <com.jhlabs.math.Noise: int[] p> = $r1;

        $r2 = newmultiarray (float)[514][3];

        <com.jhlabs.math.Noise: float[][] g3> = $r2;

        $r3 = newmultiarray (float)[514][2];

        <com.jhlabs.math.Noise: float[][] g2> = $r3;

        $r4 = newarray (float)[514];

        <com.jhlabs.math.Noise: float[] g1> = $r4;

        <com.jhlabs.math.Noise: boolean start> = 1;

        return;
    }
}
