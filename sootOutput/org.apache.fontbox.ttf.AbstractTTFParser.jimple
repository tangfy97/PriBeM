abstract class org.apache.fontbox.ttf.AbstractTTFParser extends java.lang.Object
{
    protected boolean isEmbedded;
    protected boolean parseOnDemandOnly;

    public void <init>(boolean)
    {
        org.apache.fontbox.ttf.AbstractTTFParser r0;
        boolean z0;

        r0 := @this: org.apache.fontbox.ttf.AbstractTTFParser;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.fontbox.ttf.AbstractTTFParser: void <init>(boolean,boolean)>(z0, 0);

        return;
    }

    public void <init>(boolean, boolean)
    {
        org.apache.fontbox.ttf.AbstractTTFParser r0;
        boolean z0, z1;

        r0 := @this: org.apache.fontbox.ttf.AbstractTTFParser;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.fontbox.ttf.AbstractTTFParser: boolean isEmbedded> = 0;

        r0.<org.apache.fontbox.ttf.AbstractTTFParser: boolean parseOnDemandOnly> = 0;

        r0.<org.apache.fontbox.ttf.AbstractTTFParser: boolean isEmbedded> = z0;

        r0.<org.apache.fontbox.ttf.AbstractTTFParser: boolean parseOnDemandOnly> = z1;

        return;
    }

    public org.apache.fontbox.ttf.TrueTypeFont parseTTF(java.lang.String) throws java.io.IOException
    {
        org.apache.fontbox.ttf.AbstractTTFParser r2;
        org.apache.fontbox.ttf.TrueTypeFont $r3;
        org.apache.fontbox.ttf.RAFDataStream $r0;
        java.lang.String r1;

        r2 := @this: org.apache.fontbox.ttf.AbstractTTFParser;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.fontbox.ttf.RAFDataStream;

        specialinvoke $r0.<org.apache.fontbox.ttf.RAFDataStream: void <init>(java.lang.String,java.lang.String)>(r1, "r");

        $r3 = virtualinvoke r2.<org.apache.fontbox.ttf.AbstractTTFParser: org.apache.fontbox.ttf.TrueTypeFont parseTTF(org.apache.fontbox.ttf.TTFDataStream)>($r0);

        return $r3;
    }

    public org.apache.fontbox.ttf.TrueTypeFont parseTTF(java.io.File) throws java.io.IOException
    {
        org.apache.fontbox.ttf.AbstractTTFParser r2;
        org.apache.fontbox.ttf.TrueTypeFont $r3;
        org.apache.fontbox.ttf.RAFDataStream $r0;
        java.io.File r1;

        r2 := @this: org.apache.fontbox.ttf.AbstractTTFParser;

        r1 := @parameter0: java.io.File;

        $r0 = new org.apache.fontbox.ttf.RAFDataStream;

        specialinvoke $r0.<org.apache.fontbox.ttf.RAFDataStream: void <init>(java.io.File,java.lang.String)>(r1, "r");

        $r3 = virtualinvoke r2.<org.apache.fontbox.ttf.AbstractTTFParser: org.apache.fontbox.ttf.TrueTypeFont parseTTF(org.apache.fontbox.ttf.TTFDataStream)>($r0);

        return $r3;
    }

    public org.apache.fontbox.ttf.TrueTypeFont parseTTF(java.io.InputStream) throws java.io.IOException
    {
        org.apache.fontbox.ttf.AbstractTTFParser r0;
        org.apache.fontbox.ttf.TrueTypeFont $r3;
        org.apache.fontbox.ttf.MemoryTTFDataStream $r1;
        java.io.InputStream r2;

        r0 := @this: org.apache.fontbox.ttf.AbstractTTFParser;

        r2 := @parameter0: java.io.InputStream;

        $r1 = new org.apache.fontbox.ttf.MemoryTTFDataStream;

        specialinvoke $r1.<org.apache.fontbox.ttf.MemoryTTFDataStream: void <init>(java.io.InputStream)>(r2);

        $r3 = virtualinvoke r0.<org.apache.fontbox.ttf.AbstractTTFParser: org.apache.fontbox.ttf.TrueTypeFont parseTTF(org.apache.fontbox.ttf.TTFDataStream)>($r1);

        return $r3;
    }

    public org.apache.fontbox.ttf.TrueTypeFont parseTTF(org.apache.fontbox.ttf.TTFDataStream) throws java.io.IOException
    {
        org.apache.fontbox.ttf.TTFTable $r3;
        org.apache.fontbox.ttf.TrueTypeFont $r0;
        org.apache.fontbox.ttf.AbstractTTFParser r2;
        int $i0, i1;
        float $f0;
        org.apache.fontbox.ttf.TTFDataStream r1;
        boolean $z0;

        r2 := @this: org.apache.fontbox.ttf.AbstractTTFParser;

        r1 := @parameter0: org.apache.fontbox.ttf.TTFDataStream;

        $r0 = new org.apache.fontbox.ttf.TrueTypeFont;

        specialinvoke $r0.<org.apache.fontbox.ttf.TrueTypeFont: void <init>(org.apache.fontbox.ttf.TTFDataStream)>(r1);

        $f0 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: float read32Fixed()>();

        virtualinvoke $r0.<org.apache.fontbox.ttf.TrueTypeFont: void setVersion(float)>($f0);

        $i0 = virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: int readUnsignedShort()>();

        virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: int readUnsignedShort()>();

        virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: int readUnsignedShort()>();

        virtualinvoke r1.<org.apache.fontbox.ttf.TTFDataStream: int readUnsignedShort()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r3 = specialinvoke r2.<org.apache.fontbox.ttf.AbstractTTFParser: org.apache.fontbox.ttf.TTFTable readTableDirectory(org.apache.fontbox.ttf.TTFDataStream)>(r1);

        virtualinvoke $r0.<org.apache.fontbox.ttf.TrueTypeFont: void addTable(org.apache.fontbox.ttf.TTFTable)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        $z0 = r2.<org.apache.fontbox.ttf.AbstractTTFParser: boolean parseOnDemandOnly>;

        if $z0 != 0 goto label3;

        virtualinvoke r2.<org.apache.fontbox.ttf.AbstractTTFParser: void parseTables(org.apache.fontbox.ttf.TrueTypeFont,org.apache.fontbox.ttf.TTFDataStream)>($r0, r1);

     label3:
        return $r0;
    }

    protected void parseTables(org.apache.fontbox.ttf.TrueTypeFont, org.apache.fontbox.ttf.TTFDataStream) throws java.io.IOException
    {
        org.apache.fontbox.ttf.HorizontalMetricsTable $r10;
        org.apache.fontbox.ttf.HorizontalHeaderTable $r4;
        org.apache.fontbox.ttf.IndexToLocationTable $r7;
        org.apache.fontbox.ttf.AbstractTTFParser r12;
        org.apache.fontbox.ttf.HeaderTable $r3;
        org.apache.fontbox.ttf.NamingTable $r9;
        org.apache.fontbox.ttf.TTFDataStream r21;
        boolean $z0, $z1, $z2, $z3;
        org.apache.fontbox.ttf.MaximumProfileTable $r5;
        java.util.Iterator $r2;
        org.apache.fontbox.ttf.TTFTable r22;
        java.util.Collection $r1;
        java.io.IOException $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        org.apache.fontbox.ttf.TrueTypeFont r0;
        org.apache.fontbox.ttf.GlyphTable $r8;
        org.apache.fontbox.ttf.PostScriptTable $r6;
        java.lang.Object $r20;

        r12 := @this: org.apache.fontbox.ttf.AbstractTTFParser;

        r0 := @parameter0: org.apache.fontbox.ttf.TrueTypeFont;

        r21 := @parameter1: org.apache.fontbox.ttf.TTFDataStream;

        $r1 = virtualinvoke r0.<org.apache.fontbox.ttf.TrueTypeFont: java.util.Collection getTables()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r20 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r22 = (org.apache.fontbox.ttf.TTFTable) $r20;

        $z3 = virtualinvoke r22.<org.apache.fontbox.ttf.TTFTable: boolean getInitialized()>();

        if $z3 != 0 goto label02;

        virtualinvoke r0.<org.apache.fontbox.ttf.TrueTypeFont: void initializeTable(org.apache.fontbox.ttf.TTFTable)>(r22);

     label02:
        goto label01;

     label03:
        $r3 = virtualinvoke r0.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.HeaderTable getHeader()>();

        if $r3 != null goto label04;

        $r19 = new java.io.IOException;

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>("head is mandatory");

        throw $r19;

     label04:
        $r4 = virtualinvoke r0.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.HorizontalHeaderTable getHorizontalHeader()>();

        if $r4 != null goto label05;

        $r18 = new java.io.IOException;

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>("hhead is mandatory");

        throw $r18;

     label05:
        $r5 = virtualinvoke r0.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.MaximumProfileTable getMaximumProfile()>();

        if $r5 != null goto label06;

        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>("maxp is mandatory");

        throw $r17;

     label06:
        $r6 = virtualinvoke r0.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.PostScriptTable getPostScript()>();

        if $r6 != null goto label07;

        $z2 = r12.<org.apache.fontbox.ttf.AbstractTTFParser: boolean isEmbedded>;

        if $z2 != 0 goto label07;

        $r16 = new java.io.IOException;

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>("post is mandatory");

        throw $r16;

     label07:
        $r7 = virtualinvoke r0.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.IndexToLocationTable getIndexToLocation()>();

        if $r7 != null goto label08;

        $r15 = new java.io.IOException;

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>("loca is mandatory");

        throw $r15;

     label08:
        $r8 = virtualinvoke r0.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.GlyphTable getGlyph()>();

        if $r8 != null goto label09;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("glyf is mandatory");

        throw $r14;

     label09:
        $r9 = virtualinvoke r0.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.NamingTable getNaming()>();

        if $r9 != null goto label10;

        $z1 = r12.<org.apache.fontbox.ttf.AbstractTTFParser: boolean isEmbedded>;

        if $z1 != 0 goto label10;

        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("name is mandatory");

        throw $r13;

     label10:
        $r10 = virtualinvoke r0.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.HorizontalMetricsTable getHorizontalMetrics()>();

        if $r10 != null goto label11;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("hmtx is mandatory");

        throw $r11;

     label11:
        return;
    }

    private org.apache.fontbox.ttf.TTFTable readTableDirectory(org.apache.fontbox.ttf.TTFDataStream) throws java.io.IOException
    {
        long $l0, $l1, $l2;
        org.apache.fontbox.ttf.DigitalSignatureTable $r3;
        org.apache.fontbox.ttf.HorizontalMetricsTable $r9;
        org.apache.fontbox.ttf.HorizontalHeaderTable $r10;
        org.apache.fontbox.ttf.IndexToLocationTable $r8;
        org.apache.fontbox.ttf.CMAPTable $r13;
        org.apache.fontbox.ttf.AbstractTTFParser r14;
        org.apache.fontbox.ttf.HeaderTable $r11;
        org.apache.fontbox.ttf.TTFDataStream r0;
        org.apache.fontbox.ttf.NamingTable $r6;
        java.lang.String $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.apache.fontbox.ttf.MaximumProfileTable $r7;
        org.apache.fontbox.ttf.TTFTable $r2, r15;
        org.apache.fontbox.ttf.OS2WindowsMetricsTable $r5;
        org.apache.fontbox.ttf.GlyphTable $r12;
        org.apache.fontbox.ttf.PostScriptTable $r4;

        r14 := @this: org.apache.fontbox.ttf.AbstractTTFParser;

        r0 := @parameter0: org.apache.fontbox.ttf.TTFDataStream;

        $r1 = virtualinvoke r0.<org.apache.fontbox.ttf.TTFDataStream: java.lang.String readString(int)>(4);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("cmap");

        if $z0 == 0 goto label01;

        $r13 = new org.apache.fontbox.ttf.CMAPTable;

        specialinvoke $r13.<org.apache.fontbox.ttf.CMAPTable: void <init>()>();

        r15 = $r13;

        goto label12;

     label01:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("glyf");

        if $z1 == 0 goto label02;

        $r12 = new org.apache.fontbox.ttf.GlyphTable;

        specialinvoke $r12.<org.apache.fontbox.ttf.GlyphTable: void <init>()>();

        r15 = $r12;

        goto label12;

     label02:
        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("head");

        if $z2 == 0 goto label03;

        $r11 = new org.apache.fontbox.ttf.HeaderTable;

        specialinvoke $r11.<org.apache.fontbox.ttf.HeaderTable: void <init>()>();

        r15 = $r11;

        goto label12;

     label03:
        $z3 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("hhea");

        if $z3 == 0 goto label04;

        $r10 = new org.apache.fontbox.ttf.HorizontalHeaderTable;

        specialinvoke $r10.<org.apache.fontbox.ttf.HorizontalHeaderTable: void <init>()>();

        r15 = $r10;

        goto label12;

     label04:
        $z4 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("hmtx");

        if $z4 == 0 goto label05;

        $r9 = new org.apache.fontbox.ttf.HorizontalMetricsTable;

        specialinvoke $r9.<org.apache.fontbox.ttf.HorizontalMetricsTable: void <init>()>();

        r15 = $r9;

        goto label12;

     label05:
        $z5 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("loca");

        if $z5 == 0 goto label06;

        $r8 = new org.apache.fontbox.ttf.IndexToLocationTable;

        specialinvoke $r8.<org.apache.fontbox.ttf.IndexToLocationTable: void <init>()>();

        r15 = $r8;

        goto label12;

     label06:
        $z6 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("maxp");

        if $z6 == 0 goto label07;

        $r7 = new org.apache.fontbox.ttf.MaximumProfileTable;

        specialinvoke $r7.<org.apache.fontbox.ttf.MaximumProfileTable: void <init>()>();

        r15 = $r7;

        goto label12;

     label07:
        $z7 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("name");

        if $z7 == 0 goto label08;

        $r6 = new org.apache.fontbox.ttf.NamingTable;

        specialinvoke $r6.<org.apache.fontbox.ttf.NamingTable: void <init>()>();

        r15 = $r6;

        goto label12;

     label08:
        $z8 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("OS/2");

        if $z8 == 0 goto label09;

        $r5 = new org.apache.fontbox.ttf.OS2WindowsMetricsTable;

        specialinvoke $r5.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: void <init>()>();

        r15 = $r5;

        goto label12;

     label09:
        $z9 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("post");

        if $z9 == 0 goto label10;

        $r4 = new org.apache.fontbox.ttf.PostScriptTable;

        specialinvoke $r4.<org.apache.fontbox.ttf.PostScriptTable: void <init>()>();

        r15 = $r4;

        goto label12;

     label10:
        $z10 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("DSIG");

        if $z10 == 0 goto label11;

        $r3 = new org.apache.fontbox.ttf.DigitalSignatureTable;

        specialinvoke $r3.<org.apache.fontbox.ttf.DigitalSignatureTable: void <init>()>();

        r15 = $r3;

        goto label12;

     label11:
        $r2 = new org.apache.fontbox.ttf.TTFTable;

        specialinvoke $r2.<org.apache.fontbox.ttf.TTFTable: void <init>()>();

        r15 = $r2;

     label12:
        virtualinvoke r15.<org.apache.fontbox.ttf.TTFTable: void setTag(java.lang.String)>($r1);

        $l0 = virtualinvoke r0.<org.apache.fontbox.ttf.TTFDataStream: long readUnsignedInt()>();

        virtualinvoke r15.<org.apache.fontbox.ttf.TTFTable: void setCheckSum(long)>($l0);

        $l1 = virtualinvoke r0.<org.apache.fontbox.ttf.TTFDataStream: long readUnsignedInt()>();

        virtualinvoke r15.<org.apache.fontbox.ttf.TTFTable: void setOffset(long)>($l1);

        $l2 = virtualinvoke r0.<org.apache.fontbox.ttf.TTFDataStream: long readUnsignedInt()>();

        virtualinvoke r15.<org.apache.fontbox.ttf.TTFTable: void setLength(long)>($l2);

        return r15;
    }
}
