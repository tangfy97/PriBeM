public class nu.xom.canonical.Canonicalizer extends java.lang.Object
{
    private boolean withComments;
    private boolean exclusive;
    private nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer serializer;
    private java.util.List inclusiveNamespacePrefixes;
    private static java.util.Comparator comparator;
    public static final java.lang.String CANONICAL_XML;
    public static final java.lang.String CANONICAL_XML_WITH_COMMENTS;
    public static final java.lang.String EXCLUSIVE_XML_CANONICALIZATION;
    public static final java.lang.String EXCLUSIVE_XML_CANONICALIZATION_WITH_COMMENTS;

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        nu.xom.canonical.Canonicalizer r0;

        r0 := @this: nu.xom.canonical.Canonicalizer;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<nu.xom.canonical.Canonicalizer: void <init>(java.io.OutputStream,boolean,boolean)>(r1, 1, 0);

        return;
    }

    public void <init>(java.io.OutputStream, boolean)
    {
        java.io.OutputStream r1;
        nu.xom.canonical.Canonicalizer r0;
        boolean z0;

        r0 := @this: nu.xom.canonical.Canonicalizer;

        r1 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        specialinvoke r0.<nu.xom.canonical.Canonicalizer: void <init>(java.io.OutputStream,boolean,boolean)>(r1, z0, 0);

        return;
    }

    private void <init>(java.io.OutputStream, boolean, boolean)
    {
        java.io.OutputStream r3;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer $r2, $r4;
        nu.xom.canonical.Canonicalizer r0;
        java.util.ArrayList $r1;
        boolean z0, z1;

        r0 := @this: nu.xom.canonical.Canonicalizer;

        r3 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<nu.xom.canonical.Canonicalizer: boolean exclusive> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<nu.xom.canonical.Canonicalizer: java.util.List inclusiveNamespacePrefixes> = $r1;

        $r2 = new nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        specialinvoke $r2.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void <init>(nu.xom.canonical.Canonicalizer,java.io.OutputStream)>(r0, r3);

        r0.<nu.xom.canonical.Canonicalizer: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer serializer> = $r2;

        $r4 = r0.<nu.xom.canonical.Canonicalizer: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer serializer>;

        virtualinvoke $r4.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void setLineSeparator(java.lang.String)>("\n");

        r0.<nu.xom.canonical.Canonicalizer: boolean withComments> = z0;

        r0.<nu.xom.canonical.Canonicalizer: boolean exclusive> = z1;

        return;
    }

    public void <init>(java.io.OutputStream, java.lang.String)
    {
        nu.xom.canonical.Canonicalizer r0;
        nu.xom.canonical.CanonicalizationException $r6;
        java.lang.NullPointerException $r11;
        java.util.ArrayList $r1;
        java.lang.StringBuffer $r7, $r8, $r9;
        java.lang.String r2, $r10;
        boolean $z0, $z1, $z2, $z3;
        java.io.OutputStream r4;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer $r3, $r5;

        r0 := @this: nu.xom.canonical.Canonicalizer;

        r4 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<nu.xom.canonical.Canonicalizer: boolean exclusive> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<nu.xom.canonical.Canonicalizer: java.util.List inclusiveNamespacePrefixes> = $r1;

        if r2 != null goto label1;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null algorithm");

        throw $r11;

     label1:
        $r3 = new nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        specialinvoke $r3.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void <init>(nu.xom.canonical.Canonicalizer,java.io.OutputStream)>(r0, r4);

        r0.<nu.xom.canonical.Canonicalizer: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer serializer> = $r3;

        $r5 = r0.<nu.xom.canonical.Canonicalizer: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer serializer>;

        virtualinvoke $r5.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void setLineSeparator(java.lang.String)>("\n");

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/TR/2001/REC-xml-c14n-20010315");

        if $z0 == 0 goto label2;

        r0.<nu.xom.canonical.Canonicalizer: boolean withComments> = 0;

        r0.<nu.xom.canonical.Canonicalizer: boolean exclusive> = 0;

        goto label6;

     label2:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments");

        if $z1 == 0 goto label3;

        r0.<nu.xom.canonical.Canonicalizer: boolean withComments> = 1;

        r0.<nu.xom.canonical.Canonicalizer: boolean exclusive> = 0;

        goto label6;

     label3:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2001/10/xml-exc-c14n#");

        if $z2 == 0 goto label4;

        r0.<nu.xom.canonical.Canonicalizer: boolean withComments> = 0;

        r0.<nu.xom.canonical.Canonicalizer: boolean exclusive> = 1;

        goto label6;

     label4:
        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2001/10/xml-exc-c14n#WithComments");

        if $z3 == 0 goto label5;

        r0.<nu.xom.canonical.Canonicalizer: boolean withComments> = 1;

        r0.<nu.xom.canonical.Canonicalizer: boolean exclusive> = 1;

        goto label6;

     label5:
        $r6 = new nu.xom.canonical.CanonicalizationException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported canonicalization algorithm: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<nu.xom.canonical.CanonicalizationException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label6:
        return;
    }

    public final void write(nu.xom.Node) throws java.io.IOException
    {
        nu.xom.canonical.Canonicalizer r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        nu.xom.Node r0, $r8, $r11;
        java.lang.Throwable $r20;
        nu.xom.Element $r15, r21, $r23;
        java.util.HashSet $r25;
        nu.xom.Namespace $r9;
        int $i0, $i1, $i2, i3, i4, $i6;
        nu.xom.Nodes $r6;
        java.lang.String $r10, $r13, $r14, $r16;
        nu.xom.ParentNode $r19, r22;
        nu.xom.Attribute $r12;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer $r2, $r3, $r4;
        nu.xom.Document $r5, $r24;

        r1 := @this: nu.xom.canonical.Canonicalizer;

        r0 := @parameter0: nu.xom.Node;

        $z0 = r0 instanceof nu.xom.Element;

        if $z0 == 0 goto label16;

        $r5 = virtualinvoke r0.<nu.xom.Node: nu.xom.Document getDocument()>();

        r21 = null;

        if $r5 != null goto label03;

        $r23 = new nu.xom.Element;

        specialinvoke $r23.<nu.xom.Element: void <init>(java.lang.String)>("pseudo");

        r21 = $r23;

        $r24 = new nu.xom.Document;

        specialinvoke $r24.<nu.xom.Document: void <init>(nu.xom.Element)>($r23);

        r22 = (nu.xom.ParentNode) r0;

     label01:
        $r19 = virtualinvoke r22.<nu.xom.ParentNode: nu.xom.ParentNode getParent()>();

        if $r19 == null goto label02;

        r22 = virtualinvoke r22.<nu.xom.ParentNode: nu.xom.ParentNode getParent()>();

        goto label01;

     label02:
        virtualinvoke $r23.<nu.xom.Element: void appendChild(nu.xom.Node)>(r22);

     label03:
        $r6 = virtualinvoke r0.<nu.xom.Node: nu.xom.Nodes query(java.lang.String)>(".//. | .//@* | .//namespace::*");

        $z1 = r1.<nu.xom.canonical.Canonicalizer: boolean exclusive>;

        if $z1 == 0 goto label10;

        $r25 = new java.util.HashSet;

        $i0 = virtualinvoke $r6.<nu.xom.Nodes: int size()>();

        specialinvoke $r25.<java.util.HashSet: void <init>(int)>($i0);

        i3 = 0;

     label04:
        $i1 = virtualinvoke $r6.<nu.xom.Nodes: int size()>();

        if i3 >= $i1 goto label07;

        $r11 = virtualinvoke $r6.<nu.xom.Nodes: nu.xom.Node get(int)>(i3);

        $z4 = $r11 instanceof nu.xom.Element;

        if $z4 == 0 goto label05;

        $r15 = (nu.xom.Element) $r11;

        $r16 = virtualinvoke $r15.<nu.xom.Element: java.lang.String getNamespacePrefix()>();

        interfaceinvoke $r25.<java.util.Set: boolean add(java.lang.Object)>($r16);

        goto label06;

     label05:
        $z5 = $r11 instanceof nu.xom.Attribute;

        if $z5 == 0 goto label06;

        $r12 = (nu.xom.Attribute) $r11;

        $r13 = virtualinvoke $r12.<nu.xom.Attribute: java.lang.String getNamespacePrefix()>();

        $r14 = "";

        $z6 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z6 != 0 goto label06;

        interfaceinvoke $r25.<java.util.Set: boolean add(java.lang.Object)>($r13);

     label06:
        i3 = i3 + 1;

        goto label04;

     label07:
        i4 = 0;

     label08:
        $i2 = virtualinvoke $r6.<nu.xom.Nodes: int size()>();

        if i4 >= $i2 goto label10;

        $r8 = virtualinvoke $r6.<nu.xom.Nodes: nu.xom.Node get(int)>(i4);

        $z2 = $r8 instanceof nu.xom.Namespace;

        if $z2 == 0 goto label09;

        $r9 = (nu.xom.Namespace) $r8;

        $r10 = virtualinvoke $r9.<nu.xom.Namespace: java.lang.String getPrefix()>();

        $z3 = interfaceinvoke $r25.<java.util.Set: boolean contains(java.lang.Object)>($r10);

        if $z3 != 0 goto label09;

        virtualinvoke $r6.<nu.xom.Nodes: nu.xom.Node remove(int)>(i4);

        $i6 = (int) -1;

        i4 = i4 + $i6;

     label09:
        i4 = i4 + 1;

        goto label08;

     label10:
        virtualinvoke r1.<nu.xom.canonical.Canonicalizer: void write(nu.xom.Nodes)>($r6);

     label11:
        if r21 == null goto label15;

        virtualinvoke r21.<nu.xom.Element: nu.xom.Node removeChild(int)>(0);

        goto label15;

     label12:
        $r20 := @caughtexception;

     label13:
        if r21 == null goto label14;

        virtualinvoke r21.<nu.xom.Element: nu.xom.Node removeChild(int)>(0);

     label14:
        throw $r20;

     label15:
        goto label17;

     label16:
        $r2 = r1.<nu.xom.canonical.Canonicalizer: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer serializer>;

        staticinvoke <nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes access$502(nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer,nu.xom.Nodes)>($r2, null);

        $r3 = r1.<nu.xom.canonical.Canonicalizer: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer serializer>;

        virtualinvoke $r3.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void write(nu.xom.Node)>(r0);

     label17:
        $r4 = r1.<nu.xom.canonical.Canonicalizer: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer serializer>;

        virtualinvoke $r4.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void flush()>();

        return;

        catch java.lang.Throwable from label03 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public final void write(nu.xom.Nodes) throws java.io.IOException
    {
        nu.xom.canonical.Canonicalizer r3;
        nu.xom.canonical.CanonicalizationException $r8;
        nu.xom.Node $r1;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer $r5, $r6, $r7;
        int $i0;
        nu.xom.Nodes r0, $r4;
        nu.xom.Document $r2;

        r3 := @this: nu.xom.canonical.Canonicalizer;

        r0 := @parameter0: nu.xom.Nodes;

        $i0 = virtualinvoke r0.<nu.xom.Nodes: int size()>();

        if $i0 <= 0 goto label2;

        $r1 = virtualinvoke r0.<nu.xom.Nodes: nu.xom.Node get(int)>(0);

        $r2 = virtualinvoke $r1.<nu.xom.Node: nu.xom.Document getDocument()>();

        if $r2 != null goto label1;

        $r8 = new nu.xom.canonical.CanonicalizationException;

        specialinvoke $r8.<nu.xom.canonical.CanonicalizationException: void <init>(java.lang.String)>("Canonicalization is not defined for detached nodes");

        throw $r8;

     label1:
        $r4 = specialinvoke r3.<nu.xom.canonical.Canonicalizer: nu.xom.Nodes sort(nu.xom.Nodes)>(r0);

        $r5 = r3.<nu.xom.canonical.Canonicalizer: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer serializer>;

        staticinvoke <nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes access$502(nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer,nu.xom.Nodes)>($r5, $r4);

        $r6 = r3.<nu.xom.canonical.Canonicalizer: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer serializer>;

        virtualinvoke $r6.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void write(nu.xom.Document)>($r2);

        $r7 = r3.<nu.xom.canonical.Canonicalizer: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer serializer>;

        virtualinvoke $r7.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void flush()>();

     label2:
        return;
    }

    public final void setInclusiveNamespacePrefixList(java.lang.String) throws java.io.IOException
    {
        nu.xom.canonical.Canonicalizer r0;
        java.util.List $r1, $r4;
        java.util.StringTokenizer $r3;
        java.lang.String r2, $r5;
        boolean $z0, $z1;

        r0 := @this: nu.xom.canonical.Canonicalizer;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<nu.xom.canonical.Canonicalizer: java.util.List inclusiveNamespacePrefixes>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $z0 = r0.<nu.xom.canonical.Canonicalizer: boolean exclusive>;

        if $z0 == 0 goto label2;

        if r2 == null goto label2;

        $r3 = new java.util.StringTokenizer;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r2, " \t\r\n", 0);

     label1:
        $z1 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label2;

        $r4 = r0.<nu.xom.canonical.Canonicalizer: java.util.List inclusiveNamespacePrefixes>;

        $r5 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return;
    }

    private nu.xom.Nodes sort(nu.xom.Nodes)
    {
        nu.xom.canonical.Canonicalizer r14;
        nu.xom.canonical.CanonicalizationException $r12;
        java.util.ArrayList $r6, $r7;
        int $i0, $i1, $i2, i3;
        nu.xom.Nodes r0, $r3, $r5;
        nu.xom.ParentNode $r8;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r9;
        nu.xom.Node $r1, $r4, $r13, r15;
        java.lang.Object $r10;
        nu.xom.Document $r2, $r11;

        r14 := @this: nu.xom.canonical.Canonicalizer;

        r0 := @parameter0: nu.xom.Nodes;

        $r1 = virtualinvoke r0.<nu.xom.Nodes: nu.xom.Node get(int)>(0);

        $r2 = virtualinvoke $r1.<nu.xom.Node: nu.xom.Document getDocument()>();

        $i0 = virtualinvoke r0.<nu.xom.Nodes: int size()>();

        if $i0 <= 1 goto label7;

        $r5 = new nu.xom.Nodes;

        specialinvoke $r5.<nu.xom.Nodes: void <init>()>();

        $r6 = new java.util.ArrayList;

        $i1 = virtualinvoke r0.<nu.xom.Nodes: int size()>();

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i1);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        i3 = 0;

     label1:
        $i2 = virtualinvoke r0.<nu.xom.Nodes: int size()>();

        if i3 >= $i2 goto label3;

        $r13 = virtualinvoke r0.<nu.xom.Nodes: nu.xom.Node get(int)>(i3);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $z2 = $r13 instanceof nu.xom.Namespace;

        if $z2 == 0 goto label2;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r13);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r8 = (nu.xom.ParentNode) $r2;

        staticinvoke <nu.xom.canonical.Canonicalizer: void sort(java.util.List,java.util.List,nu.xom.Nodes,nu.xom.ParentNode)>($r6, $r7, $r5, $r8);

        $z0 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $r9 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r15 = (nu.xom.Node) $r10;

        $r11 = virtualinvoke r15.<nu.xom.Node: nu.xom.Document getDocument()>();

        if $r2 == $r11 goto label5;

        $r12 = new nu.xom.canonical.CanonicalizationException;

        specialinvoke $r12.<nu.xom.canonical.CanonicalizationException: void <init>(java.lang.String)>("Cannot canonicalize subsets that contain nodes from more than one document");

        throw $r12;

     label5:
        goto label4;

     label6:
        return $r5;

     label7:
        $r3 = new nu.xom.Nodes;

        $r4 = virtualinvoke r0.<nu.xom.Nodes: nu.xom.Node get(int)>(0);

        specialinvoke $r3.<nu.xom.Nodes: void <init>(nu.xom.Node)>($r4);

        return $r3;
    }

    private static void sort(java.util.List, java.util.List, nu.xom.Nodes, nu.xom.ParentNode)
    {
        nu.xom.Element r4;
        nu.xom.Namespace r9;
        int $i0, i1, i2, $i3;
        nu.xom.Nodes r3;
        nu.xom.ParentNode r1, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.util.Iterator $r7;
        nu.xom.Node $r2;
        nu.xom.Attribute $r6;
        java.util.List r0, r5;
        java.lang.Object $r8;

        r0 := @parameter0: java.util.List;

        r5 := @parameter1: java.util.List;

        r3 := @parameter2: nu.xom.Nodes;

        r1 := @parameter3: nu.xom.ParentNode;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $z1 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label02;

        virtualinvoke r3.<nu.xom.Nodes: void append(nu.xom.Node)>(r1);

        interfaceinvoke r0.<java.util.List: boolean remove(java.lang.Object)>(r1);

     label02:
        $i0 = virtualinvoke r1.<nu.xom.ParentNode: int getChildCount()>();

        i1 = 0;

     label03:
        if i1 >= $i0 goto label13;

        $r2 = virtualinvoke r1.<nu.xom.ParentNode: nu.xom.Node getChild(int)>(i1);

        $z2 = $r2 instanceof nu.xom.Element;

        if $z2 == 0 goto label11;

        r4 = (nu.xom.Element) $r2;

        $z5 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>(r4);

        if $z5 == 0 goto label04;

        virtualinvoke r3.<nu.xom.Nodes: void append(nu.xom.Node)>(r4);

        interfaceinvoke r0.<java.util.List: boolean remove(java.lang.Object)>(r4);

     label04:
        $z6 = interfaceinvoke r5.<java.util.List: boolean isEmpty()>();

        if $z6 != 0 goto label07;

        $r7 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z9 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label07;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $z10 = $r8 instanceof nu.xom.Namespace;

        if $z10 == 0 goto label06;

        r9 = (nu.xom.Namespace) $r8;

        $r10 = virtualinvoke r9.<nu.xom.Namespace: nu.xom.ParentNode getParent()>();

        if r4 != $r10 goto label06;

        virtualinvoke r3.<nu.xom.Nodes: void append(nu.xom.Node)>(r9);

        interfaceinvoke $r7.<java.util.Iterator: void remove()>();

     label06:
        goto label05;

     label07:
        i2 = 0;

     label08:
        $i3 = virtualinvoke r4.<nu.xom.Element: int getAttributeCount()>();

        if i2 >= $i3 goto label10;

        $r6 = virtualinvoke r4.<nu.xom.Element: nu.xom.Attribute getAttribute(int)>(i2);

        $z7 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>($r6);

        if $z7 == 0 goto label09;

        virtualinvoke r3.<nu.xom.Nodes: void append(nu.xom.Node)>($r6);

        interfaceinvoke r0.<java.util.List: boolean remove(java.lang.Object)>($r6);

        $z8 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z8 == 0 goto label09;

        return;

     label09:
        i2 = i2 + 1;

        goto label08;

     label10:
        staticinvoke <nu.xom.canonical.Canonicalizer: void sort(java.util.List,java.util.List,nu.xom.Nodes,nu.xom.ParentNode)>(r0, r5, r3, r4);

        goto label12;

     label11:
        $z3 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>($r2);

        if $z3 == 0 goto label12;

        virtualinvoke r3.<nu.xom.Nodes: void append(nu.xom.Node)>($r2);

        interfaceinvoke r0.<java.util.List: boolean remove(java.lang.Object)>($r2);

        $z4 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label12;

        return;

     label12:
        i1 = i1 + 1;

        goto label03;

     label13:
        return;
    }

    static boolean access$100(nu.xom.canonical.Canonicalizer)
    {
        nu.xom.canonical.Canonicalizer r0;
        boolean $z0;

        r0 := @parameter0: nu.xom.canonical.Canonicalizer;

        $z0 = r0.<nu.xom.canonical.Canonicalizer: boolean withComments>;

        return $z0;
    }

    static boolean access$200(nu.xom.canonical.Canonicalizer)
    {
        nu.xom.canonical.Canonicalizer r0;
        boolean $z0;

        r0 := @parameter0: nu.xom.canonical.Canonicalizer;

        $z0 = r0.<nu.xom.canonical.Canonicalizer: boolean exclusive>;

        return $z0;
    }

    static java.util.List access$300(nu.xom.canonical.Canonicalizer)
    {
        nu.xom.canonical.Canonicalizer r0;
        java.util.List $r1;

        r0 := @parameter0: nu.xom.canonical.Canonicalizer;

        $r1 = r0.<nu.xom.canonical.Canonicalizer: java.util.List inclusiveNamespacePrefixes>;

        return $r1;
    }

    static java.util.Comparator access$400()
    {
        java.util.Comparator $r0;

        $r0 = <nu.xom.canonical.Canonicalizer: java.util.Comparator comparator>;

        return $r0;
    }

    static void <clinit>()
    {
        nu.xom.canonical.Canonicalizer$AttributeComparator $r0;

        <nu.xom.canonical.Canonicalizer: java.lang.String EXCLUSIVE_XML_CANONICALIZATION_WITH_COMMENTS> = "http://www.w3.org/2001/10/xml-exc-c14n#WithComments";

        <nu.xom.canonical.Canonicalizer: java.lang.String EXCLUSIVE_XML_CANONICALIZATION> = "http://www.w3.org/2001/10/xml-exc-c14n#";

        <nu.xom.canonical.Canonicalizer: java.lang.String CANONICAL_XML_WITH_COMMENTS> = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments";

        <nu.xom.canonical.Canonicalizer: java.lang.String CANONICAL_XML> = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315";

        $r0 = new nu.xom.canonical.Canonicalizer$AttributeComparator;

        specialinvoke $r0.<nu.xom.canonical.Canonicalizer$AttributeComparator: void <init>(nu.xom.canonical.Canonicalizer$1)>(null);

        <nu.xom.canonical.Canonicalizer: java.util.Comparator comparator> = $r0;

        return;
    }
}
