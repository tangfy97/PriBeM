public class org.apache.pdfbox.pdmodel.common.function.PDFunctionType4 extends org.apache.pdfbox.pdmodel.common.function.PDFunction
{
    private static final org.apache.pdfbox.pdmodel.common.function.type4.Operators OPERATORS;
    private final org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence instructions;

    public void <init>(org.apache.pdfbox.cos.COSBase) throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSBase r1;
        org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence $r4;
        org.apache.pdfbox.pdmodel.common.function.PDFunctionType4 r0;
        org.apache.pdfbox.pdmodel.common.PDStream $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.pdfbox.pdmodel.common.function.PDFunctionType4;

        r1 := @parameter0: org.apache.pdfbox.cos.COSBase;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: void <init>(org.apache.pdfbox.cos.COSBase)>(r1);

        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: org.apache.pdfbox.pdmodel.common.PDStream getPDStream()>();

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.common.PDStream: java.lang.String getInputStreamAsString()>();

        $r4 = staticinvoke <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence parse(java.lang.CharSequence)>($r3);

        r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence instructions> = $r4;

        return;
    }

    public int getFunctionType()
    {
        org.apache.pdfbox.pdmodel.common.function.PDFunctionType4 r0;

        r0 := @this: org.apache.pdfbox.pdmodel.common.function.PDFunctionType4;

        return 4;
    }

    public float[] eval(float[]) throws java.io.IOException
    {
        java.lang.Float $r17;
        java.lang.IllegalStateException $r21;
        org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence $r4;
        org.apache.pdfbox.pdmodel.common.function.type4.Operators $r1;
        org.apache.pdfbox.pdmodel.common.PDRange $r6, $r15;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r20;
        float[] r2, r18;
        java.util.Stack $r5, $r16;
        int $i0, $i1, $i2, i3, i4, $i6;
        org.apache.pdfbox.pdmodel.common.function.PDFunctionType4 r3;
        java.lang.String $r14;
        org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext $r19;

        r3 := @this: org.apache.pdfbox.pdmodel.common.function.PDFunctionType4;

        r2 := @parameter0: float[];

        $r19 = new org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext;

        $r1 = <org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: org.apache.pdfbox.pdmodel.common.function.type4.Operators OPERATORS>;

        specialinvoke $r19.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: void <init>(org.apache.pdfbox.pdmodel.common.function.type4.Operators)>($r1);

        i3 = 0;

     label1:
        $i0 = lengthof r2;

        if i3 >= $i0 goto label2;

        $r15 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: org.apache.pdfbox.pdmodel.common.PDRange getDomainForInput(int)>(i3);

        $f5 = r2[i3];

        $f6 = virtualinvoke $r15.<org.apache.pdfbox.pdmodel.common.PDRange: float getMin()>();

        $f7 = virtualinvoke $r15.<org.apache.pdfbox.pdmodel.common.PDRange: float getMax()>();

        $f8 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: float clipToRange(float,float,float)>($f5, $f6, $f7);

        $r16 = virtualinvoke $r19.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>();

        $r17 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f8);

        virtualinvoke $r16.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r17);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r4 = r3.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence instructions>;

        virtualinvoke $r4.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)>($r19);

        $i1 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: int getNumberOfOutputParameters()>();

        $r5 = virtualinvoke $r19.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>();

        $i2 = virtualinvoke $r5.<java.util.Stack: int size()>();

        if $i2 >= $i1 goto label3;

        $r21 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The type 4 function returned ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" values but the Range entry indicates that ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" values be returned.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r21;

     label3:
        r18 = newarray (float)[$i1];

        i4 = $i1 - 1;

     label4:
        if i4 < 0 goto label5;

        $r6 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: org.apache.pdfbox.pdmodel.common.PDRange getRangeForOutput(int)>(i4);

        $f0 = virtualinvoke $r19.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: float popReal()>();

        r18[i4] = $f0;

        $f1 = r18[i4];

        $f2 = virtualinvoke $r6.<org.apache.pdfbox.pdmodel.common.PDRange: float getMin()>();

        $f3 = virtualinvoke $r6.<org.apache.pdfbox.pdmodel.common.PDRange: float getMax()>();

        $f4 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: float clipToRange(float,float,float)>($f1, $f2, $f3);

        r18[i4] = $f4;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label4;

     label5:
        return r18;
    }

    static void <clinit>()
    {
        org.apache.pdfbox.pdmodel.common.function.type4.Operators $r0;

        $r0 = new org.apache.pdfbox.pdmodel.common.function.type4.Operators;

        specialinvoke $r0.<org.apache.pdfbox.pdmodel.common.function.type4.Operators: void <init>()>();

        <org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: org.apache.pdfbox.pdmodel.common.function.type4.Operators OPERATORS> = $r0;

        return;
    }
}
