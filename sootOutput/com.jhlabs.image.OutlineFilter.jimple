public class com.jhlabs.image.OutlineFilter extends com.jhlabs.image.BinaryFilter
{

    public void <init>()
    {
        int $i1;
        com.jhlabs.image.OutlineFilter r0;

        r0 := @this: com.jhlabs.image.OutlineFilter;

        specialinvoke r0.<com.jhlabs.image.BinaryFilter: void <init>()>();

        $i1 = (int) -1;

        r0.<com.jhlabs.image.BinaryFilter: int newColor> = $i1;

        return;
    }

    protected int[] filterPixels(int, int, int[], java.awt.Rectangle)
    {
        java.awt.Rectangle r5;
        com.jhlabs.math.BinaryFunction $r3, $r4;
        int[] r0, r1;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7, $i8, i9, i10, i11, i12, i13, i14, i15, i16, $i17, $i19, $i21;
        com.jhlabs.image.OutlineFilter r2;
        boolean $z0, $z1;

        r2 := @this: com.jhlabs.image.OutlineFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r5 := @parameter3: java.awt.Rectangle;

        i10 = 0;

        $i2 = i0 * i1;

        r0 = newarray (int)[$i2];

        i11 = 0;

     label01:
        if i11 >= i1 goto label13;

        i12 = 0;

     label02:
        if i12 >= i0 goto label12;

        $i3 = i11 * i0;

        $i4 = $i3 + i12;

        i13 = r1[$i4];

        $r3 = r2.<com.jhlabs.image.BinaryFilter: com.jhlabs.math.BinaryFunction blackFunction>;

        $z0 = interfaceinvoke $r3.<com.jhlabs.math.BinaryFunction: boolean isBlack(int)>(i13);

        if $z0 == 0 goto label11;

        i14 = 0;

        $i19 = (int) -1;

        i15 = $i19;

     label03:
        if i15 > 1 goto label10;

        i5 = i11 + i15;

        if 0 > i5 goto label09;

        if i5 >= i1 goto label09;

        i6 = i5 * i0;

        $i21 = (int) -1;

        i16 = $i21;

     label04:
        if i16 > 1 goto label09;

        i7 = i12 + i16;

        if i15 != 0 goto label05;

        if i16 == 0 goto label07;

     label05:
        if 0 > i7 goto label07;

        if i7 >= i0 goto label07;

        $i8 = i6 + i7;

        i9 = r1[$i8];

        $r4 = r2.<com.jhlabs.image.BinaryFilter: com.jhlabs.math.BinaryFunction blackFunction>;

        $z1 = interfaceinvoke $r4.<com.jhlabs.math.BinaryFunction: boolean isBlack(int)>(i9);

        if $z1 == 0 goto label06;

        i14 = i14 + 1;

     label06:
        goto label08;

     label07:
        i14 = i14 + 1;

     label08:
        i16 = i16 + 1;

        goto label04;

     label09:
        i15 = i15 + 1;

        goto label03;

     label10:
        if i14 != 9 goto label11;

        i13 = r2.<com.jhlabs.image.BinaryFilter: int newColor>;

     label11:
        $i17 = i10;

        i10 = i10 + 1;

        r0[$i17] = i13;

        i12 = i12 + 1;

        goto label02;

     label12:
        i11 = i11 + 1;

        goto label01;

     label13:
        return r0;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.OutlineFilter r0;

        r0 := @this: com.jhlabs.image.OutlineFilter;

        return "Binary/Outline...";
    }
}
