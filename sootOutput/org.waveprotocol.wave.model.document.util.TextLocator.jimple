public final class org.waveprotocol.wave.model.document.util.TextLocator extends java.lang.Object
{
    private static final org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator wordCharactersBoundaryLocator;
    private static final org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator nonWordCharactersBoundaryLocator;
    private static final java.lang.String INLINE_WHITESPACE;
    public static final org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate WHITESPACE_MATCHER;
    public static final org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate NON_WHITESPACE_MATCHER;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.waveprotocol.wave.model.document.util.TextLocator r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.TextLocator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean isInlineWhitespace(char)
    {
        int $i1, $i2, $i4;
        char c0;
        java.lang.String $r0;
        boolean $z0;

        c0 := @parameter0: char;

        $r0 = " \t";

        $i2 = (int) c0;

        $i1 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>($i2);

        $i4 = (int) -1;

        if $i1 == $i4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isWordCharacter(char)
    {
        int $i1;
        char c0;
        boolean $z0, $z1;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(c0);

        if $z0 != 0 goto label1;

        $i1 = (int) c0;

        if $i1 != 95 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private static org.waveprotocol.wave.model.document.util.Point$Tx findCharacterInNode(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point$Tx, org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator, boolean)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.AssertionError $r12;
        org.waveprotocol.wave.model.document.util.Point$Tx r1, $r7;
        int $i0, $i1, $i3;
        java.lang.String $r4;
        boolean $z0, z1;
        org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator r5;
        java.lang.Object $r2, $r3, $r6, $r8, $r10, $r11;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point$Tx;

        r5 := @parameter2: org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator;

        z1 := @parameter3: boolean;

        $z0 = <org.waveprotocol.wave.model.document.util.TextLocator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r8 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point$Tx: java.lang.Object getContainer()>();

        if $r8 == null goto label1;

        $r10 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point$Tx: java.lang.Object getContainer()>();

        $r11 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r10);

        if $r11 != null goto label2;

     label1:
        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label2:
        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point$Tx: java.lang.Object getContainer()>();

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r2);

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getData(java.lang.Object)>($r3);

        $i0 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point$Tx: int getTextOffset()>();

        $i1 = interfaceinvoke r5.<org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator: int indexOf(java.lang.String,int,boolean)>($r4, $i0, z1);

        $i3 = (int) -1;

        if $i1 == $i3 goto label3;

        $r6 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point$Tx: java.lang.Object getContainer()>();

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r6, $i1);

        return $r7;

     label3:
        return null;
    }

    private static org.waveprotocol.wave.model.document.util.Point$Tx locateCharacters(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point$Tx, org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator, boolean)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        org.waveprotocol.wave.model.document.util.Point$Tx r0, $r2, $r4, r7, $r10;
        org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator r3;
        int $i0;
        java.lang.Object $r5, $r6, r8, $r9;
        boolean z0;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: org.waveprotocol.wave.model.document.util.Point$Tx;

        r3 := @parameter2: org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator;

        z0 := @parameter3: boolean;

        r7 = r0;

        r8 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point$Tx: java.lang.Object getContainer()>();

     label1:
        $r2 = virtualinvoke r7.<org.waveprotocol.wave.model.document.util.Point$Tx: org.waveprotocol.wave.model.document.util.Point$Tx asTextPoint()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.TextLocator: org.waveprotocol.wave.model.document.util.Point$Tx findCharacterInNode(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$Tx,org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator,boolean)>(r1, $r2, r3, z0);

        if $r4 == null goto label2;

        return $r4;

     label2:
        if z0 == 0 goto label3;

        $r9 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r8);

        goto label4;

     label3:
        $r9 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getPreviousSibling(java.lang.Object)>(r8);

     label4:
        r8 = $r9;

        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r9);

        if $r5 == null goto label7;

        if z0 == 0 goto label5;

        $r10 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r9, 0);

        goto label6;

     label5:
        $r6 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r9);

        $i0 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: int getLength(java.lang.Object)>($r6);

        $r10 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r9, $i0);

     label6:
        r7 = $r10;

        goto label1;

     label7:
        return null;
    }

    public static org.waveprotocol.wave.model.document.util.Point$Tx findCharacter(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point$Tx, java.lang.String, boolean)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocatorImpl $r0;
        org.waveprotocol.wave.model.document.util.Point$Tx r3, $r4, r5;
        boolean z0;

        r2 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r3 := @parameter1: org.waveprotocol.wave.model.document.util.Point$Tx;

        r1 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r0 = new org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocatorImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocatorImpl: void <init>(java.lang.String)>(r1);

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.TextLocator: org.waveprotocol.wave.model.document.util.Point$Tx locateCharacters(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$Tx,org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator,boolean)>(r2, r3, $r0, z0);

        r5 = $r4;

        if $r4 != null goto label1;

        r5 = staticinvoke <org.waveprotocol.wave.model.document.util.TextLocator: org.waveprotocol.wave.model.document.util.Point$Tx lastPointInTextSequence(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$Tx,boolean)>(r2, r3, z0);

     label1:
        return r5;
    }

    public static org.waveprotocol.wave.model.document.util.Point$Tx findCharacterBoundary(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point$Tx, org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate, boolean)
    {
        org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator $r0;
        org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate r1;
        org.waveprotocol.wave.model.document.ReadableDocument r2;
        org.waveprotocol.wave.model.document.util.Point$Tx r3, $r4, r5;
        boolean z0;

        r2 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r3 := @parameter1: org.waveprotocol.wave.model.document.util.Point$Tx;

        r1 := @parameter2: org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate;

        z0 := @parameter3: boolean;

        $r0 = new org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator: void <init>(org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate)>(r1);

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.TextLocator: org.waveprotocol.wave.model.document.util.Point$Tx locateCharacters(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$Tx,org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator,boolean)>(r2, r3, $r0, z0);

        r5 = $r4;

        if $r4 != null goto label1;

        r5 = staticinvoke <org.waveprotocol.wave.model.document.util.TextLocator: org.waveprotocol.wave.model.document.util.Point$Tx lastPointInTextSequence(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$Tx,boolean)>(r2, r3, z0);

     label1:
        return r5;
    }

    public static org.waveprotocol.wave.model.document.util.Point$Tx getWordBoundary(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.ReadableDocument, boolean)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r2;
        org.waveprotocol.wave.model.document.util.Point$Tx $r1, $r4, r6;
        org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator $r3, $r5;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r2 := @parameter1: org.waveprotocol.wave.model.document.ReadableDocument;

        z0 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx asTextPoint()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = <org.waveprotocol.wave.model.document.util.TextLocator: org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator wordCharactersBoundaryLocator>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.TextLocator: org.waveprotocol.wave.model.document.util.Point$Tx locateCharacters(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$Tx,org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator,boolean)>(r2, $r1, $r3, z0);

        r6 = null;

        if $r4 == null goto label2;

        $r5 = <org.waveprotocol.wave.model.document.util.TextLocator: org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator nonWordCharactersBoundaryLocator>;

        r6 = staticinvoke <org.waveprotocol.wave.model.document.util.TextLocator: org.waveprotocol.wave.model.document.util.Point$Tx locateCharacters(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$Tx,org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator,boolean)>(r2, $r4, $r5, z0);

     label2:
        if r6 != null goto label3;

        r6 = staticinvoke <org.waveprotocol.wave.model.document.util.TextLocator: org.waveprotocol.wave.model.document.util.Point$Tx lastPointInTextSequence(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$Tx,boolean)>(r2, $r1, z0);

     label3:
        return r6;
    }

    private static org.waveprotocol.wave.model.document.util.Point$Tx lastPointInTextSequence(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point$Tx, boolean)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        org.waveprotocol.wave.model.document.util.Point$Tx r1, r12;
        int $i0;
        boolean z0;
        java.lang.Object $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, r10, r11, r13, r14;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point$Tx;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label3;

        $r6 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point$Tx: java.lang.Object getCanonicalNode()>();

        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r6);

        r10 = $r7;

        $r8 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>($r7);

        r11 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r8);

     label1:
        if r11 == null goto label2;

        r10 = r11;

        $r9 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r11);

        r11 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r9);

        goto label1;

     label2:
        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: int getLength(java.lang.Object)>(r10);

        r12 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>(r10, $i0);

        goto label6;

     label3:
        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point$Tx: java.lang.Object getCanonicalNode()>();

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r2);

        r13 = $r3;

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getPreviousSibling(java.lang.Object)>($r3);

        r14 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r4);

     label4:
        if r14 == null goto label5;

        r13 = r14;

        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getPreviousSibling(java.lang.Object)>(r14);

        r14 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>($r5);

        goto label4;

     label5:
        r12 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>(r13, 0);

     label6:
        return r12;
    }

    static boolean access$000(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.TextLocator: boolean isWordCharacter(char)>(c0);

        return $z0;
    }

    static boolean access$100(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.TextLocator: boolean isInlineWhitespace(char)>(c0);

        return $z0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator $r1, $r3;
        org.waveprotocol.wave.model.document.util.TextLocator$2 $r4;
        org.waveprotocol.wave.model.document.util.TextLocator$1 $r2;
        java.lang.Class $r0;
        org.waveprotocol.wave.model.document.util.TextLocator$4 $r6;
        org.waveprotocol.wave.model.document.util.TextLocator$3 $r5;
        boolean $z0, $z1;

        <org.waveprotocol.wave.model.document.util.TextLocator: java.lang.String INLINE_WHITESPACE> = " \t";

        $r0 = class "Lorg/waveprotocol/wave/model/document/util/TextLocator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.util.TextLocator: boolean $assertionsDisabled> = $z1;

        $r1 = new org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator;

        $r2 = new org.waveprotocol.wave.model.document.util.TextLocator$1;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.util.TextLocator$1: void <init>()>();

        specialinvoke $r1.<org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator: void <init>(org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate)>($r2);

        <org.waveprotocol.wave.model.document.util.TextLocator: org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator wordCharactersBoundaryLocator> = $r1;

        $r3 = new org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator;

        $r4 = new org.waveprotocol.wave.model.document.util.TextLocator$2;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.util.TextLocator$2: void <init>()>();

        specialinvoke $r3.<org.waveprotocol.wave.model.document.util.TextLocator$PredicateBoundaryLocator: void <init>(org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate)>($r4);

        <org.waveprotocol.wave.model.document.util.TextLocator: org.waveprotocol.wave.model.document.util.TextLocator$CharacterLocator nonWordCharactersBoundaryLocator> = $r3;

        $r5 = new org.waveprotocol.wave.model.document.util.TextLocator$3;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.util.TextLocator$3: void <init>()>();

        <org.waveprotocol.wave.model.document.util.TextLocator: org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate WHITESPACE_MATCHER> = $r5;

        $r6 = new org.waveprotocol.wave.model.document.util.TextLocator$4;

        specialinvoke $r6.<org.waveprotocol.wave.model.document.util.TextLocator$4: void <init>()>();

        <org.waveprotocol.wave.model.document.util.TextLocator: org.waveprotocol.wave.model.document.util.TextLocator$CharacterPredicate NON_WHITESPACE_MATCHER> = $r6;

        return;
    }
}
