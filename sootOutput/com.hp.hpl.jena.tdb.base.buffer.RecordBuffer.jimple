public final class com.hp.hpl.jena.tdb.base.buffer.RecordBuffer extends com.hp.hpl.jena.tdb.base.buffer.BufferBase
{
    private com.hp.hpl.jena.tdb.base.record.RecordFactory factory;

    public void <init>(com.hp.hpl.jena.tdb.base.record.RecordFactory, int)
    {
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;
        int $i0, i1, $i2;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int recordLength()>();

        $i2 = $i0 * i1;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i2);

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void <init>(java.nio.ByteBuffer,com.hp.hpl.jena.tdb.base.record.RecordFactory,int)>($r2, r1, 0);

        return;
    }

    public void <init>(java.nio.ByteBuffer, com.hp.hpl.jena.tdb.base.record.RecordFactory, int)
    {
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;
        int $i0, i1;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r2;
        java.nio.ByteBuffer r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        i1 := @parameter2: int;

        $i0 = virtualinvoke r2.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int recordLength()>();

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void <init>(java.nio.ByteBuffer,int,int)>(r1, $i0, i1);

        r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.RecordFactory factory> = r2;

        return;
    }

    public com.hp.hpl.jena.tdb.base.record.Record get(int)
    {
        com.hp.hpl.jena.tdb.base.record.Record $r1;
        int i0, $i1;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        i0 := @parameter0: int;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot>;

        staticinvoke <com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void checkBounds(int,int)>(i0, $i1);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record _get(int)>(i0);

        return $r1;
    }

    public com.hp.hpl.jena.tdb.base.record.Record getLow()
    {
        com.hp.hpl.jena.tdb.base.record.Record $r1;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot>;

        if $i0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("getLow: Empty RecordBuffer");

        throw $r2;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record _get(int)>(0);

        return $r1;
    }

    public com.hp.hpl.jena.tdb.base.record.Record getHigh()
    {
        com.hp.hpl.jena.tdb.base.record.Record $r1;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot>;

        if $i0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("getHigh: Empty RecordBuffer");

        throw $r2;

     label1:
        $i1 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot>;

        $i2 = $i1 - 1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record _get(int)>($i2);

        return $r1;
    }

    public void add(com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;
        int $i0;
        com.hp.hpl.jena.tdb.base.record.Record r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot>;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void add(int,com.hp.hpl.jena.tdb.base.record.Record)>($i0, r1);

        return;
    }

    public void add(int, com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.base.buffer.BufferException $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        com.hp.hpl.jena.tdb.base.record.Record r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;
        java.lang.String $r6;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        i0 := @parameter0: int;

        r1 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot>;

        if i0 == $i1 goto label1;

        $i7 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot>;

        staticinvoke <com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void checkBounds(int,int)>(i0, $i7);

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void shiftUp(int)>(i0);

        goto label3;

     label1:
        $i3 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot>;

        $i2 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int maxSlot>;

        if $i3 < $i2 goto label2;

        $r2 = new com.hp.hpl.jena.tdb.base.buffer.BufferException;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r4;

        $i6 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int maxSlot>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Out of bounds: idx=%d, ptrs=%d", $r3);

        specialinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.BufferException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        $i4 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot>;

        $i5 = $i4 + 1;

        r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot> = $i5;

     label3:
        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void _set(int,com.hp.hpl.jena.tdb.base.record.Record)>(i0, r1);

        return;
    }

    public void set(int, com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.base.record.Record r1;
        int i0, $i1, $i2;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        i0 := @parameter0: int;

        r1 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot>;

        if i0 != $i1 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void add(int,com.hp.hpl.jena.tdb.base.record.Record)>(i0, r1);

        return;

     label1:
        $i2 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot>;

        staticinvoke <com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void checkBounds(int,int)>(i0, $i2);

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void _set(int,com.hp.hpl.jena.tdb.base.record.Record)>(i0, r1);

        return;
    }

    public com.hp.hpl.jena.tdb.base.record.Record _get(int)
    {
        com.hp.hpl.jena.tdb.base.record.Record $r3;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;
        int i0;
        com.hp.hpl.jena.tdb.base.record.RecordFactory $r2;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        i0 := @parameter0: int;

        $r2 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.RecordFactory factory>;

        $r1 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: java.nio.ByteBuffer bb>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.record.RecordFactory: com.hp.hpl.jena.tdb.base.record.Record buildFrom(java.nio.ByteBuffer,int)>($r1, i0);

        return $r3;
    }

    void _set(int, com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.base.record.Record r1;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;
        int i0;
        com.hp.hpl.jena.tdb.base.record.RecordFactory $r3;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        i0 := @parameter0: int;

        r1 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

        $r3 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.RecordFactory factory>;

        $r2 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: java.nio.ByteBuffer bb>;

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.record.RecordFactory: void insertInto(com.hp.hpl.jena.tdb.base.record.Record,java.nio.ByteBuffer,int)>(r1, $r2, i0);

        return;
    }

    int find1(byte[])
    {
        byte[] r1;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;
        int $i0, $i1, $i2, $i3, $i4, i5;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        r1 := @parameter0: byte[];

        i5 = 0;

     label1:
        $i0 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot>;

        if i5 >= $i0 goto label4;

        $i3 = specialinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int compare(int,byte[])>(i5, r1);

        if $i3 != 0 goto label2;

        return i5;

     label2:
        if $i3 <= 0 goto label3;

        $i4 = staticinvoke <org.apache.jena.atlas.lib.Alg: int encodeIndex(int)>(i5);

        return $i4;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        $i1 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot>;

        $i2 = staticinvoke <org.apache.jena.atlas.lib.Alg: int encodeIndex(int)>($i1);

        return $i2;
    }

    public int find(com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.base.record.Record r1;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;
        int $i0, $i1;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot>;

        $i1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int find(com.hp.hpl.jena.tdb.base.record.Record,int,int)>(r1, 0, $i0);

        return $i1;
    }

    public java.util.Iterator iterator()
    {
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r1;
        com.hp.hpl.jena.tdb.base.buffer.RecordBufferIterator $r0;

        r1 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        $r0 = new com.hp.hpl.jena.tdb.base.buffer.RecordBufferIterator;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBufferIterator: void <init>(com.hp.hpl.jena.tdb.base.buffer.RecordBuffer)>(r1);

        return $r0;
    }

    public java.util.Iterator iterator(com.hp.hpl.jena.tdb.base.record.Record, com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.base.record.Record r2, r3;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r1;
        com.hp.hpl.jena.tdb.base.buffer.RecordBufferIterator $r0;

        r1 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        r2 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        r3 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

        $r0 = new com.hp.hpl.jena.tdb.base.buffer.RecordBufferIterator;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBufferIterator: void <init>(com.hp.hpl.jena.tdb.base.buffer.RecordBuffer,com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>(r1, r2, r3);

        return $r0;
    }

    public com.hp.hpl.jena.tdb.base.record.Record findGet(com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.base.record.Record r1, $r2;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;
        int $i0;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int find(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        if $i0 < 0 goto label1;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>($i0);

        return $r2;

     label1:
        return null;
    }

    public boolean removeByKey(com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;
        int $i0;
        com.hp.hpl.jena.tdb.base.record.Record r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int find(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        if $i0 >= 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void remove(int)>($i0);

        return 1;
    }

    public int find(com.hp.hpl.jena.tdb.base.record.Record, int, int)
    {
        byte[] $r1;
        com.hp.hpl.jena.tdb.base.record.Record r0;
        int i0, i1, $i2, $i3, i4, $i5, i6, i7;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r2;

        r2 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        r0 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i6 = i0;

        i7 = i1 - 1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.record.Record: byte[] getKey()>();

     label1:
        if i6 > i7 goto label5;

        $i3 = i6 + i7;

        i4 = $i3 >>> 1;

        $i5 = specialinvoke r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int compare(int,byte[])>(i4, $r1);

        if $i5 >= 0 goto label2;

        i6 = i4 + 1;

        goto label4;

     label2:
        if $i5 <= 0 goto label3;

        i7 = i4 - 1;

        goto label4;

     label3:
        return i4;

     label4:
        goto label1;

     label5:
        $i2 = staticinvoke <org.apache.jena.atlas.lib.Alg: int encodeIndex(int)>(i6);

        return $i2;
    }

    private int compare(int, byte[])
    {
        byte[] r1;
        java.nio.ByteBuffer $r2;
        short $s5, $s6, $s13, $s14;
        byte $b3, b4;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;
        int $i0, $i1, $i2, $i7, i8, i9, i10, $i11, $i12, $i15, $i16;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        i8 := @parameter0: int;

        r1 := @parameter1: byte[];

        $i0 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int slotLen>;

        i9 = i8 * $i0;

        i10 = 0;

     label1:
        $i1 = lengthof r1;

        if i10 >= $i1 goto label4;

        $r2 = r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: java.nio.ByteBuffer bb>;

        $i2 = i9 + i10;

        $b3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte get(int)>($i2);

        b4 = r1[i10];

        $i11 = (int) $b3;

        $i12 = (int) b4;

        if $i11 != $i12 goto label2;

        goto label3;

     label2:
        $s13 = (short) $b3;

        $s6 = $s13 & 255;

        $s14 = (short) b4;

        $s5 = $s14 & 255;

        $i15 = (int) $s6;

        $i16 = (int) $s5;

        $i7 = $i15 - $i16;

        return $i7;

     label3:
        i10 = i10 + 1;

        goto label1;

     label4:
        return 0;
    }

    public java.lang.String toString()
    {
        java.lang.Object[] $r1;
        java.lang.Integer $r3, $r5;
        java.nio.ByteBuffer $r4;
        com.hp.hpl.jena.tdb.base.record.Record $r8;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r2;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7;
        java.lang.String $r6, $r7, $r9;
        java.lang.StringBuilder $r10;

        r2 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        $r10 = new java.lang.StringBuilder;

        $i7 = (int) 40000;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(int)>($i7);

        $r1 = newarray (java.lang.Object)[2];

        $i0 = r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r3;

        $r4 = r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: java.nio.ByteBuffer bb>;

        $i1 = virtualinvoke $r4.<java.nio.ByteBuffer: int limit()>();

        $i2 = r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int slotLen>;

        $i3 = $i1 / $i2;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r1[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Len=%d Max=%d: ", $r1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        i5 = 0;

     label1:
        $i4 = r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot>;

        if i5 >= $i4 goto label3;

        if i5 == 0 goto label2;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label2:
        $r8 = virtualinvoke r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record _get(int)>(i5);

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.tdb.base.record.Record: java.lang.String toString()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        i5 = i5 + 1;

        goto label1;

     label3:
        $r7 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private static void checkBounds(int, int)
    {
        java.lang.Object[] $r1;
        int i0, i1;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r0;
        java.lang.Integer $r2, $r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 < i1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Out of bounds: idx=%d, size=%d", $r1);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        return;
    }

    public com.hp.hpl.jena.tdb.base.buffer.RecordBuffer duplicate()
    {
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r0, r1;
        int $i0, $i1, $i2;
        com.hp.hpl.jena.tdb.base.record.RecordFactory $r2;

        r1 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        $r0 = new com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        $r2 = r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.RecordFactory factory>;

        $i0 = r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int maxSlot>;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void <init>(com.hp.hpl.jena.tdb.base.record.RecordFactory,int)>($r2, $i0);

        $i1 = r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int maxSlot>;

        virtualinvoke r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void copy(int,com.hp.hpl.jena.tdb.base.buffer.BufferBase,int,int)>(0, $r0, 0, $i1);

        $i2 = r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot>;

        $r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int numSlot> = $i2;

        return $r0;
    }

    public volatile void shiftLeft(com.hp.hpl.jena.tdb.base.buffer.BufferBase)
    {
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void shiftLeft(com.hp.hpl.jena.tdb.base.buffer.BufferBase)>(r1);

        return;
    }

    public volatile void shiftRight(com.hp.hpl.jena.tdb.base.buffer.BufferBase)
    {
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;
        com.hp.hpl.jena.tdb.base.buffer.BufferBase r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.buffer.BufferBase;

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.BufferBase: void shiftRight(com.hp.hpl.jena.tdb.base.buffer.BufferBase)>(r1);

        return;
    }
}
