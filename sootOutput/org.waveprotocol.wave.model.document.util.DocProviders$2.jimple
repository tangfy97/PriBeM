final class org.waveprotocol.wave.model.document.util.DocProviders$2 extends java.lang.Object implements org.waveprotocol.wave.model.operation.OperationSequencer
{
    final org.waveprotocol.wave.model.document.indexed.IndexedDocument val$doc;
    final org.waveprotocol.wave.model.operation.OperationSink val$outputSink;

    void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocument, org.waveprotocol.wave.model.operation.OperationSink)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument r1;
        org.waveprotocol.wave.model.document.util.DocProviders$2 r0;
        org.waveprotocol.wave.model.operation.OperationSink r2;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocProviders$2;

        r1 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocument;

        r2 := @parameter1: org.waveprotocol.wave.model.operation.OperationSink;

        r0.<org.waveprotocol.wave.model.document.util.DocProviders$2: org.waveprotocol.wave.model.document.indexed.IndexedDocument val$doc> = r1;

        r0.<org.waveprotocol.wave.model.document.util.DocProviders$2: org.waveprotocol.wave.model.operation.OperationSink val$outputSink> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void begin()
    {
        org.waveprotocol.wave.model.document.util.DocProviders$2 r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocProviders$2;

        return;
    }

    public void end()
    {
        org.waveprotocol.wave.model.document.util.DocProviders$2 r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocProviders$2;

        return;
    }

    public void consume(org.waveprotocol.wave.model.document.operation.Nindo)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r2;
        org.waveprotocol.wave.model.document.operation.DocOp $r3;
        org.waveprotocol.wave.model.document.util.DocProviders$2 r0;
        org.waveprotocol.wave.model.operation.OperationSink $r4, $r5;
        org.waveprotocol.wave.model.document.operation.Nindo r1;
        org.waveprotocol.wave.model.operation.OperationException $r6;
        org.waveprotocol.wave.model.operation.OperationRuntimeException $r7;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocProviders$2;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.util.DocProviders$2: org.waveprotocol.wave.model.document.indexed.IndexedDocument val$doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: org.waveprotocol.wave.model.document.operation.DocOp consumeAndReturnInvertible(org.waveprotocol.wave.model.document.operation.Nindo)>(r1);

        $r4 = r0.<org.waveprotocol.wave.model.document.util.DocProviders$2: org.waveprotocol.wave.model.operation.OperationSink val$outputSink>;

        if $r4 == null goto label2;

        $r5 = r0.<org.waveprotocol.wave.model.document.util.DocProviders$2: org.waveprotocol.wave.model.operation.OperationSink val$outputSink>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.operation.OperationSink: void consume(org.waveprotocol.wave.model.operation.Operation)>($r3);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.waveprotocol.wave.model.operation.OperationRuntimeException;

        specialinvoke $r7.<org.waveprotocol.wave.model.operation.OperationRuntimeException: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.OperationException)>("DocProviders trivial sequencer consume failed.", $r6);

        throw $r7;

     label4:
        return;

        catch org.waveprotocol.wave.model.operation.OperationException from label1 to label2 with label3;
    }

    public volatile void consume(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.DocProviders$2 r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.operation.Nindo $r2;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocProviders$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.operation.Nindo) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.util.DocProviders$2: void consume(org.waveprotocol.wave.model.document.operation.Nindo)>($r2);

        return;
    }
}
