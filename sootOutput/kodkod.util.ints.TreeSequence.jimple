public final class kodkod.util.ints.TreeSequence extends kodkod.util.ints.AbstractSparseSequence implements java.lang.Cloneable
{
    private final kodkod.util.ints.IntTree tree;
    private int size;

    public void <init>()
    {
        kodkod.util.ints.IntTree $r1;
        kodkod.util.ints.TreeSequence r0;

        r0 := @this: kodkod.util.ints.TreeSequence;

        specialinvoke r0.<kodkod.util.ints.AbstractSparseSequence: void <init>()>();

        $r1 = new kodkod.util.ints.IntTree;

        specialinvoke $r1.<kodkod.util.ints.IntTree: void <init>()>();

        r0.<kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree tree> = $r1;

        r0.<kodkod.util.ints.TreeSequence: int size> = 0;

        return;
    }

    private void <init>(kodkod.util.ints.TreeSequence)
    {
        kodkod.util.ints.TreeSequence r0, r1;
        int $i0;
        java.lang.InternalError $r5;
        kodkod.util.ints.IntTree $r2, $r3;
        java.lang.CloneNotSupportedException $r4;

        r0 := @this: kodkod.util.ints.TreeSequence;

        r1 := @parameter0: kodkod.util.ints.TreeSequence;

        specialinvoke r0.<kodkod.util.ints.AbstractSparseSequence: void <init>()>();

        $i0 = r1.<kodkod.util.ints.TreeSequence: int size>;

        r0.<kodkod.util.ints.TreeSequence: int size> = $i0;

     label1:
        $r2 = r1.<kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree tree>;

        $r3 = virtualinvoke $r2.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree clone()>();

        r0.<kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree tree> = $r3;

        goto label3;

     label2:
        $r4 := @caughtexception;

        $r5 = new java.lang.InternalError;

        specialinvoke $r5.<java.lang.InternalError: void <init>()>();

        throw $r5;

     label3:
        return;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label2;
    }

    public java.util.Iterator iterator(int, int)
    {
        kodkod.util.ints.TreeSequence$EntryIterator $r1;
        kodkod.util.ints.TreeSequence r0;
        int i0, i1;
        kodkod.util.ints.TreeSequence$AscendingIterator $r2;
        kodkod.util.ints.TreeSequence$DescendingIterator $r3;

        r0 := @this: kodkod.util.ints.TreeSequence;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 > i1 goto label1;

        $r2 = new kodkod.util.ints.TreeSequence$AscendingIterator;

        $r1 = $r2;

        specialinvoke $r2.<kodkod.util.ints.TreeSequence$AscendingIterator: void <init>(kodkod.util.ints.TreeSequence,int,int)>(r0, i0, i1);

        goto label2;

     label1:
        $r3 = new kodkod.util.ints.TreeSequence$DescendingIterator;

        $r1 = $r3;

        specialinvoke $r3.<kodkod.util.ints.TreeSequence$DescendingIterator: void <init>(kodkod.util.ints.TreeSequence,int,int)>(r0, i0, i1);

     label2:
        return $r1;
    }

    public int size()
    {
        int $i0;
        kodkod.util.ints.TreeSequence r0;

        r0 := @this: kodkod.util.ints.TreeSequence;

        $i0 = r0.<kodkod.util.ints.TreeSequence: int size>;

        return $i0;
    }

    public void clear()
    {
        kodkod.util.ints.IntTree $r1;
        kodkod.util.ints.TreeSequence r0;

        r0 := @this: kodkod.util.ints.TreeSequence;

        $r1 = r0.<kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree tree>;

        virtualinvoke $r1.<kodkod.util.ints.IntTree: void clear()>();

        r0.<kodkod.util.ints.TreeSequence: int size> = 0;

        return;
    }

    public java.lang.Object put(int, java.lang.Object)
    {
        kodkod.util.ints.IntTree$Node $r2;
        kodkod.util.ints.TreeSequence$Entry r3, $r6;
        kodkod.util.ints.TreeSequence r0;
        int i0, $i1, $i2;
        java.lang.Object r4, $r5;
        kodkod.util.ints.IntTree $r1, $r7;

        r0 := @this: kodkod.util.ints.TreeSequence;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.Object;

        $r1 = r0.<kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node search(int)>(i0);

        r3 = (kodkod.util.ints.TreeSequence$Entry) $r2;

        if r3 != null goto label1;

        $i1 = r0.<kodkod.util.ints.TreeSequence: int size>;

        $i2 = $i1 + 1;

        r0.<kodkod.util.ints.TreeSequence: int size> = $i2;

        $r7 = r0.<kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree tree>;

        $r6 = new kodkod.util.ints.TreeSequence$Entry;

        specialinvoke $r6.<kodkod.util.ints.TreeSequence$Entry: void <init>(int,java.lang.Object)>(i0, r4);

        virtualinvoke $r7.<kodkod.util.ints.IntTree: void insert(kodkod.util.ints.IntTree$Node)>($r6);

        return null;

     label1:
        $r5 = virtualinvoke r3.<kodkod.util.ints.TreeSequence$Entry: java.lang.Object setValue(java.lang.Object)>(r4);

        return $r5;
    }

    public java.lang.Object get(int)
    {
        kodkod.util.ints.IntTree$Node $r2;
        kodkod.util.ints.TreeSequence$Entry r3;
        kodkod.util.ints.TreeSequence r0;
        int i0;
        java.lang.Object $r4;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.TreeSequence;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node search(int)>(i0);

        r3 = (kodkod.util.ints.TreeSequence$Entry) $r2;

        if r3 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = r3.<kodkod.util.ints.TreeSequence$Entry: java.lang.Object value>;

     label2:
        return $r4;
    }

    public java.lang.Object remove(int)
    {
        kodkod.util.ints.IntTree$Node $r2;
        kodkod.util.ints.TreeSequence$Entry r3;
        kodkod.util.ints.TreeSequence r0;
        int i0, $i1, $i2;
        java.lang.Object $r5;
        kodkod.util.ints.IntTree $r1, $r4;

        r0 := @this: kodkod.util.ints.TreeSequence;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node search(int)>(i0);

        r3 = (kodkod.util.ints.TreeSequence$Entry) $r2;

        if r3 != null goto label1;

        return null;

     label1:
        $i1 = r0.<kodkod.util.ints.TreeSequence: int size>;

        $i2 = $i1 - 1;

        r0.<kodkod.util.ints.TreeSequence: int size> = $i2;

        $r4 = r0.<kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree tree>;

        virtualinvoke $r4.<kodkod.util.ints.IntTree: void delete(kodkod.util.ints.IntTree$Node)>(r3);

        $r5 = r3.<kodkod.util.ints.TreeSequence$Entry: java.lang.Object value>;

        return $r5;
    }

    public boolean containsIndex(int)
    {
        kodkod.util.ints.IntTree$Node $r2;
        kodkod.util.ints.TreeSequence r0;
        int i0;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.TreeSequence;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node search(int)>(i0);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public kodkod.util.ints.IndexedEntry first()
    {
        kodkod.util.ints.IntTree$Node $r2;
        kodkod.util.ints.TreeSequence r0;
        kodkod.util.ints.IndexedEntry $r3;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.TreeSequence;

        $r1 = r0.<kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node min()>();

        $r3 = (kodkod.util.ints.IndexedEntry) $r2;

        return $r3;
    }

    public kodkod.util.ints.IndexedEntry last()
    {
        kodkod.util.ints.IntTree$Node $r2;
        kodkod.util.ints.TreeSequence r0;
        kodkod.util.ints.IndexedEntry $r3;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.TreeSequence;

        $r1 = r0.<kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node max()>();

        $r3 = (kodkod.util.ints.IndexedEntry) $r2;

        return $r3;
    }

    public kodkod.util.ints.IndexedEntry ceil(int)
    {
        kodkod.util.ints.IntTree$Node $r2;
        kodkod.util.ints.TreeSequence r0;
        kodkod.util.ints.IndexedEntry $r3;
        int i0;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.TreeSequence;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchGTE(int)>(i0);

        $r3 = (kodkod.util.ints.IndexedEntry) $r2;

        return $r3;
    }

    public kodkod.util.ints.IndexedEntry floor(int)
    {
        kodkod.util.ints.IntTree$Node $r2;
        kodkod.util.ints.TreeSequence r0;
        kodkod.util.ints.IndexedEntry $r3;
        int i0;
        kodkod.util.ints.IntTree $r1;

        r0 := @this: kodkod.util.ints.TreeSequence;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree tree>;

        $r2 = virtualinvoke $r1.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchLTE(int)>(i0);

        $r3 = (kodkod.util.ints.IndexedEntry) $r2;

        return $r3;
    }

    public kodkod.util.ints.TreeSequence clone()
    {
        kodkod.util.ints.TreeSequence $r0, r1;

        r1 := @this: kodkod.util.ints.TreeSequence;

        $r0 = new kodkod.util.ints.TreeSequence;

        specialinvoke $r0.<kodkod.util.ints.TreeSequence: void <init>(kodkod.util.ints.TreeSequence)>(r1);

        return $r0;
    }

    public volatile kodkod.util.ints.SparseSequence clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.SparseSequence $r2;
        kodkod.util.ints.TreeSequence r0, $r1;

        r0 := @this: kodkod.util.ints.TreeSequence;

        $r1 = virtualinvoke r0.<kodkod.util.ints.TreeSequence: kodkod.util.ints.TreeSequence clone()>();

        $r2 = (kodkod.util.ints.SparseSequence) $r1;

        return $r2;
    }

    static kodkod.util.ints.IntTree access$1(kodkod.util.ints.TreeSequence)
    {
        kodkod.util.ints.IntTree $r1;
        kodkod.util.ints.TreeSequence r0;

        r0 := @parameter0: kodkod.util.ints.TreeSequence;

        $r1 = r0.<kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree tree>;

        return $r1;
    }
}
