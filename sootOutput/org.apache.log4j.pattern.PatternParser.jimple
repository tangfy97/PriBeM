public final class org.apache.log4j.pattern.PatternParser extends java.lang.Object
{
    private static final char ESCAPE_CHAR;
    private static final int LITERAL_STATE;
    private static final int CONVERTER_STATE;
    private static final int DOT_STATE;
    private static final int MIN_STATE;
    private static final int MAX_STATE;
    private static final java.util.Map PATTERN_LAYOUT_RULES;
    private static final java.util.Map FILENAME_PATTERN_RULES;
    static java.lang.Class class$org$apache$log4j$pattern$LoggerPatternConverter;
    static java.lang.Class class$org$apache$log4j$pattern$ClassNamePatternConverter;
    static java.lang.Class class$org$apache$log4j$pattern$DatePatternConverter;
    static java.lang.Class class$org$apache$log4j$pattern$FileLocationPatternConverter;
    static java.lang.Class class$org$apache$log4j$pattern$FullLocationPatternConverter;
    static java.lang.Class class$org$apache$log4j$pattern$LineLocationPatternConverter;
    static java.lang.Class class$org$apache$log4j$pattern$MessagePatternConverter;
    static java.lang.Class class$org$apache$log4j$pattern$LineSeparatorPatternConverter;
    static java.lang.Class class$org$apache$log4j$pattern$MethodLocationPatternConverter;
    static java.lang.Class class$org$apache$log4j$pattern$LevelPatternConverter;
    static java.lang.Class class$org$apache$log4j$pattern$RelativeTimePatternConverter;
    static java.lang.Class class$org$apache$log4j$pattern$ThreadPatternConverter;
    static java.lang.Class class$org$apache$log4j$pattern$NDCPatternConverter;
    static java.lang.Class class$org$apache$log4j$pattern$PropertiesPatternConverter;
    static java.lang.Class class$org$apache$log4j$pattern$SequenceNumberPatternConverter;
    static java.lang.Class class$org$apache$log4j$pattern$ThrowableInformationPatternConverter;
    static java.lang.Class class$org$apache$log4j$pattern$FileDatePatternConverter;
    static java.lang.Class class$org$apache$log4j$pattern$IntegerPatternConverter;

    private void <init>()
    {
        org.apache.log4j.pattern.PatternParser r0;

        r0 := @this: org.apache.log4j.pattern.PatternParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Map getPatternLayoutRules()
    {
        java.util.Map $r0;

        $r0 = <org.apache.log4j.pattern.PatternParser: java.util.Map PATTERN_LAYOUT_RULES>;

        return $r0;
    }

    public static java.util.Map getFileNamePatternRules()
    {
        java.util.Map $r0;

        $r0 = <org.apache.log4j.pattern.PatternParser: java.util.Map FILENAME_PATTERN_RULES>;

        return $r0;
    }

    private static int extractConverter(char, java.lang.String, int, java.lang.StringBuffer, java.lang.StringBuffer)
    {
        char c0, $c2, $c3, $c4;
        java.lang.StringBuffer r0, r2;
        int $i1, i5;
        java.lang.String r1;
        boolean $z0, $z1;

        c0 := @parameter0: char;

        r1 := @parameter1: java.lang.String;

        i5 := @parameter2: int;

        r0 := @parameter3: java.lang.StringBuffer;

        r2 := @parameter4: java.lang.StringBuffer;

        virtualinvoke r0.<java.lang.StringBuffer: void setLength(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isUnicodeIdentifierStart(char)>(c0);

        if $z0 != 0 goto label1;

        return i5;

     label1:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

     label2:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if i5 >= $i1 goto label3;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        $z1 = staticinvoke <java.lang.Character: boolean isUnicodeIdentifierPart(char)>($c2);

        if $z1 == 0 goto label3;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        i5 = i5 + 1;

        goto label2;

     label3:
        return i5;
    }

    private static int extractOptions(java.lang.String, int, java.util.List)
    {
        char $c1;
        java.util.List r2;
        int $i0, $i2, $i3, i4, $i5, $i7;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        i4 := @parameter1: int;

        r2 := @parameter2: java.util.List;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i4 >= $i0 goto label3;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i5 = (int) $c1;

        if $i5 != 123 goto label3;

        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(125, i4);

        $i7 = (int) -1;

        if $i2 != $i7 goto label2;

        goto label3;

     label2:
        $i3 = i4 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i3, $i2);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        i4 = $i2 + 1;

        goto label1;

     label3:
        return i4;
    }

    public static void parse(java.lang.String, java.util.List, java.util.List, java.util.Map, java.util.Map)
    {
        byte b22;
        java.util.Map r7, r8;
        org.apache.log4j.pattern.FormattingInfo $r6, $r23, r25, $r29, $r30, $r31, $r32, $r34;
        org.apache.log4j.pattern.LiteralPatternConverter $r28, $r35;
        java.lang.StringBuffer $r12, $r13, $r14, $r15, $r16, $r27, $r33;
        java.lang.String r0, $r4, $r17, $r22;
        java.lang.NullPointerException $r26;
        boolean $z0, $z1, $z2, $z3;
        java.util.List r2, r5;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39;
        char $c3, $c20;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        r5 := @parameter2: java.util.List;

        r7 := @parameter3: java.util.Map;

        r8 := @parameter4: java.util.Map;

        if r0 != null goto label01;

        $r26 = new java.lang.NullPointerException;

        specialinvoke $r26.<java.lang.NullPointerException: void <init>(java.lang.String)>("pattern");

        throw $r26;

     label01:
        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>(int)>(32);

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        b22 = 0;

        i23 = 0;

        r25 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

     label02:
        if i23 >= $i0 goto label22;

        $i2 = i23;

        i23 = i23 + 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        tableswitch(b22)
        {
            case 0: goto label03;
            case 1: goto label09;
            case 2: goto label21;
            case 3: goto label17;
            case 4: goto label14;
            case 5: goto label19;
            default: goto label21;
        };

     label03:
        if i23 != $i0 goto label04;

        virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        goto label02;

     label04:
        $i24 = (int) $c3;

        if $i24 != 37 goto label08;

        $c20 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i23);

        $i25 = (int) $c20;

        lookupswitch($i25)
        {
            case 37: goto label05;
            default: goto label06;
        };

     label05:
        virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        i23 = i23 + 1;

        goto label21;

     label06:
        $i21 = virtualinvoke $r27.<java.lang.StringBuffer: int length()>();

        if $i21 == 0 goto label07;

        $r28 = new org.apache.log4j.pattern.LiteralPatternConverter;

        $r22 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r28.<org.apache.log4j.pattern.LiteralPatternConverter: void <init>(java.lang.String)>($r22);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r28);

        $r23 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r23);

     label07:
        virtualinvoke $r27.<java.lang.StringBuffer: void setLength(int)>(0);

        virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        b22 = 1;

        r25 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        goto label21;

     label08:
        virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        goto label21;

     label09:
        virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $i26 = (int) $c3;

        lookupswitch($i26)
        {
            case 45: goto label10;
            case 46: goto label11;
            default: goto label12;
        };

     label10:
        $r29 = new org.apache.log4j.pattern.FormattingInfo;

        $i16 = virtualinvoke r25.<org.apache.log4j.pattern.FormattingInfo: int getMinLength()>();

        $i17 = virtualinvoke r25.<org.apache.log4j.pattern.FormattingInfo: int getMaxLength()>();

        specialinvoke $r29.<org.apache.log4j.pattern.FormattingInfo: void <init>(boolean,int,int)>(1, $i16, $i17);

        r25 = $r29;

        goto label21;

     label11:
        b22 = 3;

        goto label21;

     label12:
        $i27 = (int) $c3;

        if $i27 < 48 goto label13;

        $i28 = (int) $c3;

        if $i28 > 57 goto label13;

        $r30 = new org.apache.log4j.pattern.FormattingInfo;

        $z3 = virtualinvoke r25.<org.apache.log4j.pattern.FormattingInfo: boolean isLeftAligned()>();

        $i29 = (int) $c3;

        $i18 = $i29 - 48;

        $i19 = virtualinvoke r25.<org.apache.log4j.pattern.FormattingInfo: int getMaxLength()>();

        specialinvoke $r30.<org.apache.log4j.pattern.FormattingInfo: void <init>(boolean,int,int)>($z3, $i18, $i19);

        r25 = $r30;

        b22 = 4;

        goto label21;

     label13:
        i23 = staticinvoke <org.apache.log4j.pattern.PatternParser: int finalizeConverter(char,java.lang.String,int,java.lang.StringBuffer,org.apache.log4j.pattern.FormattingInfo,java.util.Map,java.util.Map,java.util.List,java.util.List)>($c3, r0, i23, $r27, r25, r7, r8, r2, r5);

        b22 = 0;

        r25 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        virtualinvoke $r27.<java.lang.StringBuffer: void setLength(int)>(0);

        goto label21;

     label14:
        virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $i30 = (int) $c3;

        if $i30 < 48 goto label15;

        $i31 = (int) $c3;

        if $i31 > 57 goto label15;

        $r31 = new org.apache.log4j.pattern.FormattingInfo;

        $z1 = virtualinvoke r25.<org.apache.log4j.pattern.FormattingInfo: boolean isLeftAligned()>();

        $i9 = virtualinvoke r25.<org.apache.log4j.pattern.FormattingInfo: int getMinLength()>();

        $i11 = $i9 * 10;

        $i32 = (int) $c3;

        $i10 = $i32 - 48;

        $i12 = $i11 + $i10;

        $i13 = virtualinvoke r25.<org.apache.log4j.pattern.FormattingInfo: int getMaxLength()>();

        specialinvoke $r31.<org.apache.log4j.pattern.FormattingInfo: void <init>(boolean,int,int)>($z1, $i12, $i13);

        r25 = $r31;

        goto label21;

     label15:
        $i33 = (int) $c3;

        if $i33 != 46 goto label16;

        b22 = 3;

        goto label21;

     label16:
        i23 = staticinvoke <org.apache.log4j.pattern.PatternParser: int finalizeConverter(char,java.lang.String,int,java.lang.StringBuffer,org.apache.log4j.pattern.FormattingInfo,java.util.Map,java.util.Map,java.util.List,java.util.List)>($c3, r0, i23, $r27, r25, r7, r8, r2, r5);

        b22 = 0;

        r25 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        virtualinvoke $r27.<java.lang.StringBuffer: void setLength(int)>(0);

        goto label21;

     label17:
        virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $i34 = (int) $c3;

        if $i34 < 48 goto label18;

        $i35 = (int) $c3;

        if $i35 > 57 goto label18;

        $r32 = new org.apache.log4j.pattern.FormattingInfo;

        $z2 = virtualinvoke r25.<org.apache.log4j.pattern.FormattingInfo: boolean isLeftAligned()>();

        $i14 = virtualinvoke r25.<org.apache.log4j.pattern.FormattingInfo: int getMinLength()>();

        $i36 = (int) $c3;

        $i15 = $i36 - 48;

        specialinvoke $r32.<org.apache.log4j.pattern.FormattingInfo: void <init>(boolean,int,int)>($z2, $i14, $i15);

        r25 = $r32;

        b22 = 5;

        goto label21;

     label18:
        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error occured in position ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i23);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".\n Was expecting digit, instead got char \"");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\".");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r17);

        b22 = 0;

        goto label21;

     label19:
        virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $i37 = (int) $c3;

        if $i37 < 48 goto label20;

        $i38 = (int) $c3;

        if $i38 > 57 goto label20;

        $r34 = new org.apache.log4j.pattern.FormattingInfo;

        $z0 = virtualinvoke r25.<org.apache.log4j.pattern.FormattingInfo: boolean isLeftAligned()>();

        $i4 = virtualinvoke r25.<org.apache.log4j.pattern.FormattingInfo: int getMinLength()>();

        $i5 = virtualinvoke r25.<org.apache.log4j.pattern.FormattingInfo: int getMaxLength()>();

        $i7 = $i5 * 10;

        $i39 = (int) $c3;

        $i6 = $i39 - 48;

        $i8 = $i7 + $i6;

        specialinvoke $r34.<org.apache.log4j.pattern.FormattingInfo: void <init>(boolean,int,int)>($z0, $i4, $i8);

        r25 = $r34;

        goto label21;

     label20:
        i23 = staticinvoke <org.apache.log4j.pattern.PatternParser: int finalizeConverter(char,java.lang.String,int,java.lang.StringBuffer,org.apache.log4j.pattern.FormattingInfo,java.util.Map,java.util.Map,java.util.List,java.util.List)>($c3, r0, i23, $r27, r25, r7, r8, r2, r5);

        b22 = 0;

        r25 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        virtualinvoke $r27.<java.lang.StringBuffer: void setLength(int)>(0);

     label21:
        goto label02;

     label22:
        $i1 = virtualinvoke $r27.<java.lang.StringBuffer: int length()>();

        if $i1 == 0 goto label23;

        $r35 = new org.apache.log4j.pattern.LiteralPatternConverter;

        $r4 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r35.<org.apache.log4j.pattern.LiteralPatternConverter: void <init>(java.lang.String)>($r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r35);

        $r6 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r6);

     label23:
        return;
    }

    private static org.apache.log4j.pattern.PatternConverter createConverter(java.lang.String, java.lang.StringBuffer, java.util.Map, java.util.Map, java.util.List)
    {
        java.util.Map r31, r32;
        java.lang.Exception $r33, $r38;
        java.lang.Object[] $r11, $r13;
        java.lang.StringBuffer $r2, $r3, $r4, $r16, $r18, $r19, r21, $r26, $r27, $r28, $r35, $r36, $r40, $r41, $r46, $r47, $r48, $r54, $r55, $r56, $r57, $r58, $r59;
        java.lang.String r0, $r5, $r6, $r17, $r20, $r29, $r30, $r37, $r42, $r49, r50;
        java.lang.Class[] $r7;
        java.lang.ClassNotFoundException $r44;
        java.lang.reflect.Method $r9;
        boolean $z0, $z1, $z2;
        java.util.List r10;
        java.lang.String[] $r12, $r23, $r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i13;
        org.apache.log4j.pattern.PatternConverter $r22, r53;
        java.lang.Class $r8, r52;
        java.lang.Object $r14, $r43, r51;

        r0 := @parameter0: java.lang.String;

        r21 := @parameter1: java.lang.StringBuffer;

        r31 := @parameter2: java.util.Map;

        r32 := @parameter3: java.util.Map;

        r10 := @parameter4: java.util.List;

        r50 = r0;

        r51 = null;

        i11 = virtualinvoke r0.<java.lang.String: int length()>();

     label01:
        if i11 <= 0 goto label04;

        if r51 != null goto label04;

        $r30 = virtualinvoke r50.<java.lang.String: java.lang.String substring(int,int)>(0, i11);

        r50 = $r30;

        if r31 == null goto label02;

        r51 = interfaceinvoke r31.<java.util.Map: java.lang.Object get(java.lang.Object)>($r30);

     label02:
        if r51 != null goto label03;

        if r32 == null goto label03;

        r51 = interfaceinvoke r32.<java.util.Map: java.lang.Object get(java.lang.Object)>($r30);

     label03:
        $i13 = (int) -1;

        i11 = i11 + $i13;

        goto label01;

     label04:
        if r51 != null goto label05;

        $r54 = new java.lang.StringBuffer;

        specialinvoke $r54.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unrecognized format specifier [");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r29);

        return null;

     label05:
        $z0 = r51 instanceof java.lang.Class;

        if $z0 == 0 goto label06;

        r52 = (java.lang.Class) r51;

        goto label11;

     label06:
        $z1 = r51 instanceof java.lang.String;

        if $z1 == 0 goto label10;

     label07:
        $r6 = (java.lang.String) r51;

        r52 = staticinvoke <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>($r6);

     label08:
        goto label11;

     label09:
        $r44 := @caughtexception;

        $r55 = new java.lang.StringBuffer;

        specialinvoke $r55.<java.lang.StringBuffer: void <init>()>();

        $r46 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class for conversion pattern %");

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r50);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not found");

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String,java.lang.Throwable)>($r49, $r44);

        return null;

     label10:
        $r56 = new java.lang.StringBuffer;

        specialinvoke $r56.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad map entry for conversion pattern %");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r50);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r5);

        return null;

     label11:
        $r7 = newarray (java.lang.Class)[1];

        $r8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("[Ljava.lang.String;");

        $r7[0] = $r8;

        $r9 = virtualinvoke r52.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("newInstance", $r7);

        $i0 = interfaceinvoke r10.<java.util.List: int size()>();

        $r23 = newarray (java.lang.String)[$i0];

        $r11 = interfaceinvoke r10.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r23);

        $r12 = (java.lang.String[]) $r11;

        $r24 = (java.lang.String[]) $r12;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = $r24;

        $r14 = virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r13);

        $z2 = $r14 instanceof org.apache.log4j.pattern.PatternConverter;

        if $z2 == 0 goto label13;

        $i1 = virtualinvoke r21.<java.lang.StringBuffer: int length()>();

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = virtualinvoke r50.<java.lang.String: int length()>();

        $i4 = $i2 - $i3;

        $i5 = $i1 - $i4;

        virtualinvoke r21.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>(0, $i5);

        $r22 = (org.apache.log4j.pattern.PatternConverter) $r14;

     label12:
        return $r22;

     label13:
        $r57 = new java.lang.StringBuffer;

        specialinvoke $r57.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class ");

        $r17 = virtualinvoke r52.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not extend PatternConverter.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r20);

     label14:
        goto label19;

     label15:
        $r38 := @caughtexception;

        $r58 = new java.lang.StringBuffer;

        specialinvoke $r58.<java.lang.StringBuffer: void <init>()>();

        $r40 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error creating converter for ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r42, $r38);

     label16:
        $r43 = virtualinvoke r52.<java.lang.Class: java.lang.Object newInstance()>();

        r53 = (org.apache.log4j.pattern.PatternConverter) $r43;

        $i6 = virtualinvoke r21.<java.lang.StringBuffer: int length()>();

        $i7 = virtualinvoke r0.<java.lang.String: int length()>();

        $i8 = virtualinvoke r50.<java.lang.String: int length()>();

        $i9 = $i7 - $i8;

        $i10 = $i6 - $i9;

        virtualinvoke r21.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>(0, $i10);

     label17:
        return r53;

     label18:
        $r33 := @caughtexception;

        $r59 = new java.lang.StringBuffer;

        specialinvoke $r59.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error creating converter for ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r37, $r33);

     label19:
        return null;

        catch java.lang.ClassNotFoundException from label07 to label08 with label09;
        catch java.lang.Exception from label11 to label12 with label15;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
    }

    private static int finalizeConverter(char, java.lang.String, int, java.lang.StringBuffer, org.apache.log4j.pattern.FormattingInfo, java.util.Map, java.util.Map, java.util.List, java.util.List)
    {
        org.apache.log4j.pattern.LiteralPatternConverter $r11, $r17;
        java.util.ArrayList $r4;
        java.lang.StringBuffer $r0, r2, $r14, $r20, r21;
        java.util.Map r5, r6;
        int $i1, $i2, $i3, $i4, i5;
        java.lang.String r1, $r3, $r12, $r15, $r16, $r18;
        org.apache.log4j.pattern.PatternConverter $r7;
        char c0;
        java.util.List r8, r9;
        org.apache.log4j.pattern.FormattingInfo r10, $r13, $r19;

        c0 := @parameter0: char;

        r1 := @parameter1: java.lang.String;

        i5 := @parameter2: int;

        r2 := @parameter3: java.lang.StringBuffer;

        r10 := @parameter4: org.apache.log4j.pattern.FormattingInfo;

        r5 := @parameter5: java.util.Map;

        r6 := @parameter6: java.util.Map;

        r8 := @parameter7: java.util.List;

        r9 := @parameter8: java.util.List;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $i1 = staticinvoke <org.apache.log4j.pattern.PatternParser: int extractConverter(char,java.lang.String,int,java.lang.StringBuffer,java.lang.StringBuffer)>(c0, r1, i5, $r0, r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $i2 = staticinvoke <org.apache.log4j.pattern.PatternParser: int extractOptions(java.lang.String,int,java.util.List)>(r1, $i1, $r4);

        $r7 = staticinvoke <org.apache.log4j.pattern.PatternParser: org.apache.log4j.pattern.PatternConverter createConverter(java.lang.String,java.lang.StringBuffer,java.util.Map,java.util.Map,java.util.List)>($r3, r2, r5, r6, $r4);

        if $r7 != null goto label4;

        if $r3 == null goto label1;

        $i4 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i4 != 0 goto label2;

     label1:
        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>(java.lang.String)>("Empty conversion specifier starting at position ");

        r21 = $r14;

        goto label3;

     label2:
        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>(java.lang.String)>("Unrecognized conversion specifier [");

        r21 = $r20;

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] starting at position ");

     label3:
        $r15 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        virtualinvoke r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        virtualinvoke r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in conversion pattern.");

        $r16 = virtualinvoke r21.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r16);

        $r17 = new org.apache.log4j.pattern.LiteralPatternConverter;

        $r18 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r17.<org.apache.log4j.pattern.LiteralPatternConverter: void <init>(java.lang.String)>($r18);

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r17);

        $r19 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r19);

        goto label5;

     label4:
        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r7);

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>(r10);

        $i3 = virtualinvoke r2.<java.lang.StringBuffer: int length()>();

        if $i3 <= 0 goto label5;

        $r11 = new org.apache.log4j.pattern.LiteralPatternConverter;

        $r12 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.log4j.pattern.LiteralPatternConverter: void <init>(java.lang.String)>($r12);

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r13 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r13);

     label5:
        virtualinvoke r2.<java.lang.StringBuffer: void setLength(int)>(0);

        return $i2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0, $r31;
        org.apache.log4j.pattern.PatternParser$ReadOnlyMap $r30, $r36;
        java.lang.Class $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r32, $r33, $r34, $r35, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69;

        <org.apache.log4j.pattern.PatternParser: int MAX_STATE> = 5;

        <org.apache.log4j.pattern.PatternParser: int MIN_STATE> = 4;

        <org.apache.log4j.pattern.PatternParser: int DOT_STATE> = 3;

        <org.apache.log4j.pattern.PatternParser: int CONVERTER_STATE> = 1;

        <org.apache.log4j.pattern.PatternParser: int LITERAL_STATE> = 0;

        <org.apache.log4j.pattern.PatternParser: char ESCAPE_CHAR> = 37;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(17);

        $r1 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LoggerPatternConverter>;

        if $r1 != null goto label01;

        $r37 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.LoggerPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LoggerPatternConverter> = $r37;

        goto label02;

     label01:
        $r37 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LoggerPatternConverter>;

     label02:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("c", $r37);

        $r2 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LoggerPatternConverter>;

        if $r2 != null goto label03;

        $r38 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.LoggerPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LoggerPatternConverter> = $r38;

        goto label04;

     label03:
        $r38 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LoggerPatternConverter>;

     label04:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("logger", $r38);

        $r3 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$ClassNamePatternConverter>;

        if $r3 != null goto label05;

        $r39 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.ClassNamePatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$ClassNamePatternConverter> = $r39;

        goto label06;

     label05:
        $r39 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$ClassNamePatternConverter>;

     label06:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("C", $r39);

        $r4 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$ClassNamePatternConverter>;

        if $r4 != null goto label07;

        $r40 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.ClassNamePatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$ClassNamePatternConverter> = $r40;

        goto label08;

     label07:
        $r40 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$ClassNamePatternConverter>;

     label08:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("class", $r40);

        $r5 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$DatePatternConverter>;

        if $r5 != null goto label09;

        $r41 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.DatePatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$DatePatternConverter> = $r41;

        goto label10;

     label09:
        $r41 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$DatePatternConverter>;

     label10:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("d", $r41);

        $r6 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$DatePatternConverter>;

        if $r6 != null goto label11;

        $r42 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.DatePatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$DatePatternConverter> = $r42;

        goto label12;

     label11:
        $r42 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$DatePatternConverter>;

     label12:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("date", $r42);

        $r7 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$FileLocationPatternConverter>;

        if $r7 != null goto label13;

        $r43 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.FileLocationPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$FileLocationPatternConverter> = $r43;

        goto label14;

     label13:
        $r43 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$FileLocationPatternConverter>;

     label14:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("F", $r43);

        $r8 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$FileLocationPatternConverter>;

        if $r8 != null goto label15;

        $r44 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.FileLocationPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$FileLocationPatternConverter> = $r44;

        goto label16;

     label15:
        $r44 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$FileLocationPatternConverter>;

     label16:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("file", $r44);

        $r9 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$FullLocationPatternConverter>;

        if $r9 != null goto label17;

        $r45 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.FullLocationPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$FullLocationPatternConverter> = $r45;

        goto label18;

     label17:
        $r45 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$FullLocationPatternConverter>;

     label18:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("l", $r45);

        $r10 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LineLocationPatternConverter>;

        if $r10 != null goto label19;

        $r46 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.LineLocationPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LineLocationPatternConverter> = $r46;

        goto label20;

     label19:
        $r46 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LineLocationPatternConverter>;

     label20:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("L", $r46);

        $r11 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LineLocationPatternConverter>;

        if $r11 != null goto label21;

        $r47 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.LineLocationPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LineLocationPatternConverter> = $r47;

        goto label22;

     label21:
        $r47 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LineLocationPatternConverter>;

     label22:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("line", $r47);

        $r12 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$MessagePatternConverter>;

        if $r12 != null goto label23;

        $r48 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.MessagePatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$MessagePatternConverter> = $r48;

        goto label24;

     label23:
        $r48 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$MessagePatternConverter>;

     label24:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("m", $r48);

        $r13 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$MessagePatternConverter>;

        if $r13 != null goto label25;

        $r49 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.MessagePatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$MessagePatternConverter> = $r49;

        goto label26;

     label25:
        $r49 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$MessagePatternConverter>;

     label26:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("message", $r49);

        $r14 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LineSeparatorPatternConverter>;

        if $r14 != null goto label27;

        $r50 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.LineSeparatorPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LineSeparatorPatternConverter> = $r50;

        goto label28;

     label27:
        $r50 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LineSeparatorPatternConverter>;

     label28:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("n", $r50);

        $r15 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$MethodLocationPatternConverter>;

        if $r15 != null goto label29;

        $r51 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.MethodLocationPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$MethodLocationPatternConverter> = $r51;

        goto label30;

     label29:
        $r51 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$MethodLocationPatternConverter>;

     label30:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("M", $r51);

        $r16 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$MethodLocationPatternConverter>;

        if $r16 != null goto label31;

        $r52 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.MethodLocationPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$MethodLocationPatternConverter> = $r52;

        goto label32;

     label31:
        $r52 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$MethodLocationPatternConverter>;

     label32:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("method", $r52);

        $r17 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LevelPatternConverter>;

        if $r17 != null goto label33;

        $r53 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.LevelPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LevelPatternConverter> = $r53;

        goto label34;

     label33:
        $r53 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LevelPatternConverter>;

     label34:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("p", $r53);

        $r18 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LevelPatternConverter>;

        if $r18 != null goto label35;

        $r54 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.LevelPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LevelPatternConverter> = $r54;

        goto label36;

     label35:
        $r54 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$LevelPatternConverter>;

     label36:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("level", $r54);

        $r19 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$RelativeTimePatternConverter>;

        if $r19 != null goto label37;

        $r55 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.RelativeTimePatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$RelativeTimePatternConverter> = $r55;

        goto label38;

     label37:
        $r55 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$RelativeTimePatternConverter>;

     label38:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("r", $r55);

        $r20 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$RelativeTimePatternConverter>;

        if $r20 != null goto label39;

        $r56 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.RelativeTimePatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$RelativeTimePatternConverter> = $r56;

        goto label40;

     label39:
        $r56 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$RelativeTimePatternConverter>;

     label40:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("relative", $r56);

        $r21 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$ThreadPatternConverter>;

        if $r21 != null goto label41;

        $r57 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.ThreadPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$ThreadPatternConverter> = $r57;

        goto label42;

     label41:
        $r57 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$ThreadPatternConverter>;

     label42:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("t", $r57);

        $r22 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$ThreadPatternConverter>;

        if $r22 != null goto label43;

        $r58 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.ThreadPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$ThreadPatternConverter> = $r58;

        goto label44;

     label43:
        $r58 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$ThreadPatternConverter>;

     label44:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("thread", $r58);

        $r23 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$NDCPatternConverter>;

        if $r23 != null goto label45;

        $r59 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.NDCPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$NDCPatternConverter> = $r59;

        goto label46;

     label45:
        $r59 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$NDCPatternConverter>;

     label46:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("x", $r59);

        $r24 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$NDCPatternConverter>;

        if $r24 != null goto label47;

        $r60 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.NDCPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$NDCPatternConverter> = $r60;

        goto label48;

     label47:
        $r60 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$NDCPatternConverter>;

     label48:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ndc", $r60);

        $r25 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$PropertiesPatternConverter>;

        if $r25 != null goto label49;

        $r61 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.PropertiesPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$PropertiesPatternConverter> = $r61;

        goto label50;

     label49:
        $r61 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$PropertiesPatternConverter>;

     label50:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("X", $r61);

        $r26 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$PropertiesPatternConverter>;

        if $r26 != null goto label51;

        $r62 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.PropertiesPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$PropertiesPatternConverter> = $r62;

        goto label52;

     label51:
        $r62 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$PropertiesPatternConverter>;

     label52:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("properties", $r62);

        $r27 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$SequenceNumberPatternConverter>;

        if $r27 != null goto label53;

        $r63 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.SequenceNumberPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$SequenceNumberPatternConverter> = $r63;

        goto label54;

     label53:
        $r63 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$SequenceNumberPatternConverter>;

     label54:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sn", $r63);

        $r28 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$SequenceNumberPatternConverter>;

        if $r28 != null goto label55;

        $r64 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.SequenceNumberPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$SequenceNumberPatternConverter> = $r64;

        goto label56;

     label55:
        $r64 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$SequenceNumberPatternConverter>;

     label56:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sequenceNumber", $r64);

        $r29 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$ThrowableInformationPatternConverter>;

        if $r29 != null goto label57;

        $r65 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.ThrowableInformationPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$ThrowableInformationPatternConverter> = $r65;

        goto label58;

     label57:
        $r65 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$ThrowableInformationPatternConverter>;

     label58:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("throwable", $r65);

        $r30 = new org.apache.log4j.pattern.PatternParser$ReadOnlyMap;

        specialinvoke $r30.<org.apache.log4j.pattern.PatternParser$ReadOnlyMap: void <init>(java.util.Map)>($r0);

        <org.apache.log4j.pattern.PatternParser: java.util.Map PATTERN_LAYOUT_RULES> = $r30;

        $r31 = new java.util.HashMap;

        specialinvoke $r31.<java.util.HashMap: void <init>(int)>(4);

        $r32 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$FileDatePatternConverter>;

        if $r32 != null goto label59;

        $r66 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.FileDatePatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$FileDatePatternConverter> = $r66;

        goto label60;

     label59:
        $r66 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$FileDatePatternConverter>;

     label60:
        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("d", $r66);

        $r33 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$FileDatePatternConverter>;

        if $r33 != null goto label61;

        $r67 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.FileDatePatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$FileDatePatternConverter> = $r67;

        goto label62;

     label61:
        $r67 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$FileDatePatternConverter>;

     label62:
        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("date", $r67);

        $r34 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$IntegerPatternConverter>;

        if $r34 != null goto label63;

        $r68 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.IntegerPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$IntegerPatternConverter> = $r68;

        goto label64;

     label63:
        $r68 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$IntegerPatternConverter>;

     label64:
        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("i", $r68);

        $r35 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$IntegerPatternConverter>;

        if $r35 != null goto label65;

        $r69 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.lang.Class class$(java.lang.String)>("org.apache.log4j.pattern.IntegerPatternConverter");

        <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$IntegerPatternConverter> = $r69;

        goto label66;

     label65:
        $r69 = <org.apache.log4j.pattern.PatternParser: java.lang.Class class$org$apache$log4j$pattern$IntegerPatternConverter>;

     label66:
        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("index", $r69);

        $r36 = new org.apache.log4j.pattern.PatternParser$ReadOnlyMap;

        specialinvoke $r36.<org.apache.log4j.pattern.PatternParser$ReadOnlyMap: void <init>(java.util.Map)>($r31);

        <org.apache.log4j.pattern.PatternParser: java.util.Map FILENAME_PATTERN_RULES> = $r36;

        return;
    }
}
