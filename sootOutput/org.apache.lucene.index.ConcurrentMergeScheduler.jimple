public class org.apache.lucene.index.ConcurrentMergeScheduler extends org.apache.lucene.index.MergeScheduler
{
    private int mergeThreadPriority;
    protected java.util.List mergeThreads;
    private int maxThreadCount;
    private int maxMergeCount;
    protected org.apache.lucene.store.Directory dir;
    protected org.apache.lucene.index.IndexWriter writer;
    protected int mergeThreadCount;
    protected static final java.util.Comparator compareByMergeDocCount;
    private boolean suppressExceptions;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        int $i1;
        org.apache.lucene.index.ConcurrentMergeScheduler r0;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        specialinvoke r0.<org.apache.lucene.index.MergeScheduler: void <init>()>();

        $i1 = (int) -1;

        r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int mergeThreadPriority> = $i1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.index.ConcurrentMergeScheduler: java.util.List mergeThreads> = $r2;

        r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int maxThreadCount> = 1;

        r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int maxMergeCount> = 2;

        return;
    }

    public void setMaxThreadCount(int)
    {
        java.lang.IllegalArgumentException $r1, $r7;
        org.apache.lucene.index.ConcurrentMergeScheduler r0;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("count should be at least 1");

        throw $r7;

     label1:
        $i1 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int maxMergeCount>;

        if i0 <= $i1 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("count should be <= maxMergeCount (= ");

        $i2 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int maxMergeCount>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label2:
        r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int maxThreadCount> = i0;

        return;
    }

    public int getMaxThreadCount()
    {
        int $i0;
        org.apache.lucene.index.ConcurrentMergeScheduler r0;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        $i0 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int maxThreadCount>;

        return $i0;
    }

    public void setMaxMergeCount(int)
    {
        java.lang.IllegalArgumentException $r1, $r7;
        org.apache.lucene.index.ConcurrentMergeScheduler r0;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("count should be at least 1");

        throw $r7;

     label1:
        $i1 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int maxThreadCount>;

        if i0 >= $i1 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("count should be >= maxThreadCount (= ");

        $i2 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int maxThreadCount>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label2:
        r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int maxMergeCount> = i0;

        return;
    }

    public int getMaxMergeCount()
    {
        int $i0;
        org.apache.lucene.index.ConcurrentMergeScheduler r0;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        $i0 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int maxMergeCount>;

        return $i0;
    }

    public synchronized int getMergeThreadPriority()
    {
        int $i0;
        org.apache.lucene.index.ConcurrentMergeScheduler r0;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        specialinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: void initMergeThreadPriority()>();

        $i0 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int mergeThreadPriority>;

        return $i0;
    }

    public synchronized void setMergeThreadPriority(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        org.apache.lucene.index.ConcurrentMergeScheduler r1;

        r1 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        i0 := @parameter0: int;

        if i0 > 10 goto label1;

        if i0 >= 1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("priority must be in range 1 .. 10 inclusive");

        throw $r0;

     label2:
        r1.<org.apache.lucene.index.ConcurrentMergeScheduler: int mergeThreadPriority> = i0;

        virtualinvoke r1.<org.apache.lucene.index.ConcurrentMergeScheduler: void updateMergeThreads()>();

        return;
    }

    protected synchronized void updateMergeThreads()
    {
        boolean z0, $z1, $z2, $z3, $z4, $z6, $z7, $z8, $z9;
        java.util.List $r23, $r26, $r27;
        org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread r4, r28;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r11, $r13, $r14, $r16, $r18, $r19, $r21;
        org.apache.lucene.index.ConcurrentMergeScheduler r1;
        java.util.ArrayList $r0;
        int $i0, $i1, $i2, $i3, i4, $i5, i6, i7;
        java.lang.String $r8, $r12, $r15, $r17, $r20, $r22;
        org.apache.lucene.index.MergePolicy$OneMerge $r5, $r25;
        java.lang.Object $r3, $r24;
        java.util.Comparator $r2;

        r1 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i4 = 0;

     label01:
        $r27 = r1.<org.apache.lucene.index.ConcurrentMergeScheduler: java.util.List mergeThreads>;

        $i5 = interfaceinvoke $r27.<java.util.List: int size()>();

        if i4 >= $i5 goto label04;

        $r23 = r1.<org.apache.lucene.index.ConcurrentMergeScheduler: java.util.List mergeThreads>;

        $r24 = interfaceinvoke $r23.<java.util.List: java.lang.Object get(int)>(i4);

        r28 = (org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread) $r24;

        $z4 = virtualinvoke r28.<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: boolean isAlive()>();

        if $z4 != 0 goto label02;

        $r26 = r1.<org.apache.lucene.index.ConcurrentMergeScheduler: java.util.List mergeThreads>;

        interfaceinvoke $r26.<java.util.List: java.lang.Object remove(int)>(i4);

        goto label01;

     label02:
        $r25 = virtualinvoke r28.<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: org.apache.lucene.index.MergePolicy$OneMerge getCurrentMerge()>();

        if $r25 == null goto label03;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r28);

     label03:
        i4 = i4 + 1;

        goto label01;

     label04:
        $r2 = <org.apache.lucene.index.ConcurrentMergeScheduler: java.util.Comparator compareByMergeDocCount>;

        staticinvoke <org.apache.lucene.util.CollectionUtil: void mergeSort(java.util.List,java.util.Comparator)>($r0, $r2);

        i6 = r1.<org.apache.lucene.index.ConcurrentMergeScheduler: int mergeThreadPriority>;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        i7 = 0;

     label05:
        if i7 >= $i0 goto label14;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i7);

        r4 = (org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread) $r3;

        $r5 = virtualinvoke r4.<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: org.apache.lucene.index.MergePolicy$OneMerge getCurrentMerge()>();

        if $r5 != null goto label06;

        goto label13;

     label06:
        $i1 = r1.<org.apache.lucene.index.ConcurrentMergeScheduler: int maxThreadCount>;

        $i2 = $i0 - $i1;

        if i7 >= $i2 goto label07;

        $z9 = 1;

        $z8 = 1;

        $z7 = 1;

        goto label08;

     label07:
        $z9 = 0;

        $z8 = 0;

        $z7 = 0;

     label08:
        z0 = $z7;

        $z1 = virtualinvoke r1.<org.apache.lucene.index.ConcurrentMergeScheduler: boolean verbose()>();

        if $z1 == 0 goto label10;

        $z3 = virtualinvoke $r5.<org.apache.lucene.index.MergePolicy$OneMerge: boolean getPause()>();

        if $z8 == $z3 goto label10;

        if $z9 == 0 goto label09;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pause thread ");

        $r20 = virtualinvoke r4.<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: java.lang.String getName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.lucene.index.ConcurrentMergeScheduler: void message(java.lang.String)>($r22);

        goto label10;

     label09:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unpause thread ");

        $r15 = virtualinvoke r4.<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.lucene.index.ConcurrentMergeScheduler: void message(java.lang.String)>($r17);

     label10:
        $z6 = virtualinvoke $r5.<org.apache.lucene.index.MergePolicy$OneMerge: boolean getPause()>();

        if z0 == $z6 goto label11;

        virtualinvoke $r5.<org.apache.lucene.index.MergePolicy$OneMerge: void setPause(boolean)>(z0);

     label11:
        if z0 != 0 goto label13;

        $z2 = virtualinvoke r1.<org.apache.lucene.index.ConcurrentMergeScheduler: boolean verbose()>();

        if $z2 == 0 goto label12;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("set priority of merge thread ");

        $r8 = virtualinvoke r4.<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.lucene.index.ConcurrentMergeScheduler: void message(java.lang.String)>($r12);

     label12:
        virtualinvoke r4.<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: void setThreadPriority(int)>(i6);

        $i3 = 1 + i6;

        i6 = staticinvoke <java.lang.Math: int min(int,int)>(10, $i3);

     label13:
        i7 = i7 + 1;

        goto label05;

     label14:
        return;
    }

    protected boolean verbose()
    {
        org.apache.lucene.index.IndexWriter $r1, $r2;
        org.apache.lucene.util.InfoStream $r3;
        org.apache.lucene.index.ConcurrentMergeScheduler r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        $r1 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: org.apache.lucene.index.IndexWriter writer>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: org.apache.lucene.index.IndexWriter writer>;

        $r3 = $r2.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r3.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("CMS");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected void message(java.lang.String)
    {
        org.apache.lucene.index.IndexWriter $r1;
        org.apache.lucene.util.InfoStream $r3;
        java.lang.String r2;
        org.apache.lucene.index.ConcurrentMergeScheduler r0;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: org.apache.lucene.index.IndexWriter writer>;

        $r3 = $r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r3.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("CMS", r2);

        return;
    }

    private synchronized void initMergeThreadPriority()
    {
        java.lang.Thread $r1;
        int $i0, $i1, $i2, $i3, $i5;
        org.apache.lucene.index.ConcurrentMergeScheduler r0;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        $i0 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int mergeThreadPriority>;

        $i5 = (int) -1;

        if $i0 != $i5 goto label1;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $i1 = virtualinvoke $r1.<java.lang.Thread: int getPriority()>();

        $i2 = 1 + $i1;

        r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int mergeThreadPriority> = $i2;

        $i3 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int mergeThreadPriority>;

        if $i3 <= 10 goto label1;

        r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int mergeThreadPriority> = 10;

     label1:
        return;
    }

    public void close()
    {
        org.apache.lucene.index.ConcurrentMergeScheduler r0;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: void sync()>();

        return;
    }

    public void sync()
    {
        java.lang.Throwable $r6, $r9;
        org.apache.lucene.index.ConcurrentMergeScheduler r0;
        java.lang.Thread $r3, $r7;
        boolean $z0, z1, $z2, z3, z4;
        java.util.Iterator $r2;
        java.util.List $r1;
        java.lang.InterruptedException $r8;
        java.lang.Object $r4;
        org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread r5, r10;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        z1 = 0;

        z4 = 0;

        z3 = 0;

     label01:
        r10 = null;

        entermonitor r0;

     label02:
        $r1 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: java.util.List mergeThreads>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label05;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread) $r4;

        $z0 = virtualinvoke r5.<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: boolean isAlive()>();

        if $z0 == 0 goto label04;

        r10 = r5;

        goto label05;

     label04:
        goto label03;

     label05:
        exitmonitor r0;

     label06:
        goto label09;

     label07:
        $r9 := @caughtexception;

        exitmonitor r0;

     label08:
        throw $r9;

     label09:
        if r10 == null goto label14;

     label10:
        virtualinvoke r10.<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: void join()>();

     label11:
        goto label13;

     label12:
        $r8 := @caughtexception;

        z1 = 1;

        z4 = 1;

        z3 = 1;

     label13:
        goto label01;

     label14:
        if z4 == 0 goto label18;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

        goto label18;

     label15:
        $r6 := @caughtexception;

     label16:
        if z3 == 0 goto label17;

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

     label17:
        throw $r6;

     label18:
        return;

        catch java.lang.Throwable from label02 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.InterruptedException from label10 to label11 with label12;
        catch java.lang.Throwable from label01 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    protected synchronized int mergeThreadCount()
    {
        java.util.Iterator $r2;
        org.apache.lucene.index.ConcurrentMergeScheduler r0;
        java.util.List $r1;
        org.apache.lucene.index.MergePolicy$OneMerge $r5;
        int i0;
        java.lang.Object $r3;
        org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        i0 = 0;

        $r1 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: java.util.List mergeThreads>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread) $r3;

        $z1 = virtualinvoke r4.<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: boolean isAlive()>();

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke r4.<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: org.apache.lucene.index.MergePolicy$OneMerge getCurrentMerge()>();

        if $r5 == null goto label2;

        i0 = i0 + 1;

     label2:
        goto label1;

     label3:
        return i0;
    }

    public synchronized void merge(org.apache.lucene.index.IndexWriter) throws java.io.IOException
    {
        byte $b0;
        org.apache.lucene.store.Directory $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.lucene.index.IndexWriter r1;
        java.util.List $r4, $r13;
        org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread $r3;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r11, $r12, $r15, $r17, $r18, $r19, $r20, $r22, $r23, $r25;
        org.apache.lucene.util.ThreadInterruptedException $r30;
        java.lang.Throwable $r28;
        long $l1, $l2, l5;
        java.lang.AssertionError $r27;
        org.apache.lucene.index.ConcurrentMergeScheduler r0;
        int $i3, $i4;
        java.lang.String $r7, $r10, $r14, $r16, $r21, $r24, $r26;
        org.apache.lucene.index.MergePolicy$OneMerge $r31;
        java.lang.InterruptedException $r29;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        r1 := @parameter0: org.apache.lucene.index.IndexWriter;

        $z0 = <org.apache.lucene.index.ConcurrentMergeScheduler: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z7 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r1);

        if $z7 == 0 goto label01;

        $r27 = new java.lang.AssertionError;

        specialinvoke $r27.<java.lang.AssertionError: void <init>()>();

        throw $r27;

     label01:
        r0.<org.apache.lucene.index.ConcurrentMergeScheduler: org.apache.lucene.index.IndexWriter writer> = r1;

        specialinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: void initMergeThreadPriority()>();

        $r2 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory getDirectory()>();

        r0.<org.apache.lucene.index.ConcurrentMergeScheduler: org.apache.lucene.store.Directory dir> = $r2;

        $z1 = virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: boolean verbose()>();

        if $z1 == 0 goto label02;

        virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: void message(java.lang.String)>("now merge");

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  index: ");

        $r24 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: java.lang.String segString()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: void message(java.lang.String)>($r26);

     label02:
        l5 = 0L;

     label03:
        $z8 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: boolean hasPendingMerges()>();

        if $z8 == 0 goto label07;

        $i3 = virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int mergeThreadCount()>();

        $i4 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: int maxMergeCount>;

        if $i3 < $i4 goto label07;

        l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z6 = virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: boolean verbose()>();

        if $z6 == 0 goto label04;

        virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: void message(java.lang.String)>("    too many merges; stalling...");

     label04:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label05:
        goto label03;

     label06:
        $r29 := @caughtexception;

        $r30 = new org.apache.lucene.util.ThreadInterruptedException;

        specialinvoke $r30.<org.apache.lucene.util.ThreadInterruptedException: void <init>(java.lang.InterruptedException)>($r29);

        throw $r30;

     label07:
        $z2 = virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: boolean verbose()>();

        if $z2 == 0 goto label08;

        $b0 = l5 cmp 0L;

        if $b0 == 0 goto label08;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  stalled for ");

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = $l1 - l5;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" msec");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: void message(java.lang.String)>($r21);

     label08:
        $r31 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy$OneMerge getNextMerge()>();

        if $r31 != null goto label10;

        $z5 = virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: boolean verbose()>();

        if $z5 == 0 goto label09;

        virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: void message(java.lang.String)>("  no more merges pending; now return");

     label09:
        return;

     label10:
        $z3 = virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: boolean verbose()>();

        if $z3 == 0 goto label11;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  consider merge ");

        $r13 = $r31.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r14 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: void message(java.lang.String)>($r16);

     label11:
        $r3 = virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread getMergeThread(org.apache.lucene.index.IndexWriter,org.apache.lucene.index.MergePolicy$OneMerge)>(r1, $r31);

        $r4 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: java.util.List mergeThreads>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        $z4 = virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: boolean verbose()>();

        if $z4 == 0 goto label12;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    launch new thread [");

        $r7 = virtualinvoke $r3.<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: void message(java.lang.String)>($r10);

     label12:
        virtualinvoke $r3.<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: void start()>();

        virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: void updateMergeThreads()>();

     label13:
        if 1 != 0 goto label17;

        virtualinvoke r1.<org.apache.lucene.index.IndexWriter: void mergeFinish(org.apache.lucene.index.MergePolicy$OneMerge)>($r31);

        goto label17;

     label14:
        $r28 := @caughtexception;

     label15:
        if 0 != 0 goto label16;

        virtualinvoke r1.<org.apache.lucene.index.IndexWriter: void mergeFinish(org.apache.lucene.index.MergePolicy$OneMerge)>($r31);

     label16:
        throw $r28;

     label17:
        goto label02;

        catch java.lang.InterruptedException from label04 to label05 with label06;
        catch java.lang.Throwable from label10 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    protected void doMerge(org.apache.lucene.index.MergePolicy$OneMerge) throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter $r2;
        org.apache.lucene.index.MergePolicy$OneMerge r1;
        org.apache.lucene.index.ConcurrentMergeScheduler r0;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        r1 := @parameter0: org.apache.lucene.index.MergePolicy$OneMerge;

        $r2 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: org.apache.lucene.index.IndexWriter writer>;

        virtualinvoke $r2.<org.apache.lucene.index.IndexWriter: void merge(org.apache.lucene.index.MergePolicy$OneMerge)>(r1);

        return;
    }

    protected synchronized org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread getMergeThread(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergePolicy$OneMerge) throws java.io.IOException
    {
        org.apache.lucene.index.ConcurrentMergeScheduler r1;
        org.apache.lucene.index.IndexWriter r2;
        org.apache.lucene.index.MergePolicy$OneMerge r3;
        int $i0, $i1, $i2;
        org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread $r0;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r1 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        r2 := @parameter0: org.apache.lucene.index.IndexWriter;

        r3 := @parameter1: org.apache.lucene.index.MergePolicy$OneMerge;

        $r0 = new org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread;

        specialinvoke $r0.<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: void <init>(org.apache.lucene.index.ConcurrentMergeScheduler,org.apache.lucene.index.IndexWriter,org.apache.lucene.index.MergePolicy$OneMerge)>(r1, r2, r3);

        $i0 = r1.<org.apache.lucene.index.ConcurrentMergeScheduler: int mergeThreadPriority>;

        virtualinvoke $r0.<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: void setThreadPriority(int)>($i0);

        virtualinvoke $r0.<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: void setDaemon(boolean)>(1);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lucene Merge Thread #");

        $i1 = r1.<org.apache.lucene.index.ConcurrentMergeScheduler: int mergeThreadCount>;

        $i2 = $i1 + 1;

        r1.<org.apache.lucene.index.ConcurrentMergeScheduler: int mergeThreadCount> = $i2;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: void setName(java.lang.String)>($r7);

        return $r0;
    }

    protected void handleMergeException(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        java.lang.InterruptedException $r4;
        org.apache.lucene.store.Directory $r3;
        org.apache.lucene.index.MergePolicy$MergeException $r0;
        org.apache.lucene.index.ConcurrentMergeScheduler r2;
        org.apache.lucene.util.ThreadInterruptedException $r5;

        r2 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        r1 := @parameter0: java.lang.Throwable;

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(250L);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.lucene.util.ThreadInterruptedException;

        specialinvoke $r5.<org.apache.lucene.util.ThreadInterruptedException: void <init>(java.lang.InterruptedException)>($r4);

        throw $r5;

     label4:
        $r0 = new org.apache.lucene.index.MergePolicy$MergeException;

        $r3 = r2.<org.apache.lucene.index.ConcurrentMergeScheduler: org.apache.lucene.store.Directory dir>;

        specialinvoke $r0.<org.apache.lucene.index.MergePolicy$MergeException: void <init>(java.lang.Throwable,org.apache.lucene.store.Directory)>(r1, $r3);

        throw $r0;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    void setSuppressExceptions()
    {
        org.apache.lucene.index.ConcurrentMergeScheduler r0;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        r0.<org.apache.lucene.index.ConcurrentMergeScheduler: boolean suppressExceptions> = 1;

        return;
    }

    void clearSuppressExceptions()
    {
        org.apache.lucene.index.ConcurrentMergeScheduler r0;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        r0.<org.apache.lucene.index.ConcurrentMergeScheduler: boolean suppressExceptions> = 0;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.index.ConcurrentMergeScheduler r2;
        int $i0, $i1, $i2;
        java.lang.String $r4, $r7, $r13;
        java.lang.StringBuilder $r0, $r1, $r5, $r6, $r8, $r9, $r10, $r11, $r12;
        java.lang.Class $r3;

        r2 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        $r0 = new java.lang.StringBuilder;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r7);

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxThreadCount=");

        $i0 = r2.<org.apache.lucene.index.ConcurrentMergeScheduler: int maxThreadCount>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r10 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxMergeCount=");

        $i1 = r2.<org.apache.lucene.index.ConcurrentMergeScheduler: int maxMergeCount>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r12 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mergeThreadPriority=");

        $i2 = r2.<org.apache.lucene.index.ConcurrentMergeScheduler: int mergeThreadPriority>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public org.apache.lucene.index.MergeScheduler clone()
    {
        org.apache.lucene.index.MergeScheduler $r1;
        org.apache.lucene.index.ConcurrentMergeScheduler r0, r2;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        $r1 = specialinvoke r0.<org.apache.lucene.index.MergeScheduler: org.apache.lucene.index.MergeScheduler clone()>();

        r2 = (org.apache.lucene.index.ConcurrentMergeScheduler) $r1;

        r2.<org.apache.lucene.index.ConcurrentMergeScheduler: org.apache.lucene.index.IndexWriter writer> = null;

        r2.<org.apache.lucene.index.ConcurrentMergeScheduler: org.apache.lucene.store.Directory dir> = null;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r2.<org.apache.lucene.index.ConcurrentMergeScheduler: java.util.List mergeThreads> = $r3;

        return r2;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.index.MergeScheduler $r1;
        org.apache.lucene.index.ConcurrentMergeScheduler r0;

        r0 := @this: org.apache.lucene.index.ConcurrentMergeScheduler;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.ConcurrentMergeScheduler: org.apache.lucene.index.MergeScheduler clone()>();

        return $r1;
    }

    static boolean access$000(org.apache.lucene.index.ConcurrentMergeScheduler)
    {
        org.apache.lucene.index.ConcurrentMergeScheduler r0;
        boolean $z0;

        r0 := @parameter0: org.apache.lucene.index.ConcurrentMergeScheduler;

        $z0 = r0.<org.apache.lucene.index.ConcurrentMergeScheduler: boolean suppressExceptions>;

        return $z0;
    }

    static void <clinit>()
    {
        org.apache.lucene.index.ConcurrentMergeScheduler$1 $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/ConcurrentMergeScheduler;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.ConcurrentMergeScheduler: boolean $assertionsDisabled> = $z1;

        $r1 = new org.apache.lucene.index.ConcurrentMergeScheduler$1;

        specialinvoke $r1.<org.apache.lucene.index.ConcurrentMergeScheduler$1: void <init>()>();

        <org.apache.lucene.index.ConcurrentMergeScheduler: java.util.Comparator compareByMergeDocCount> = $r1;

        return;
    }
}
