public class org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity extends java.lang.Object implements org.apache.commons.httpclient.methods.RequestEntity
{
    private static final org.apache.commons.logging.Log log;
    private static final java.lang.String MULTIPART_FORM_CONTENT_TYPE;
    private static byte[] MULTIPART_CHARS;
    protected org.apache.commons.httpclient.methods.multipart.Part[] parts;
    private byte[] multipartBoundary;
    private org.apache.commons.httpclient.params.HttpMethodParams params;
    static java.lang.Class class$org$apache$commons$httpclient$methods$multipart$MultipartRequestEntity;

    private static byte[] generateMultipartBoundary()
    {
        byte[] r1, $r2, $r3;
        java.util.Random $r0;
        byte $b5;
        int $i0, $i1, $i2, $i3, $i4, i6;

        $r0 = new java.util.Random;

        specialinvoke $r0.<java.util.Random: void <init>()>();

        $i0 = virtualinvoke $r0.<java.util.Random: int nextInt(int)>(11);

        $i1 = $i0 + 30;

        r1 = newarray (byte)[$i1];

        i6 = 0;

     label1:
        $i2 = lengthof r1;

        if i6 >= $i2 goto label2;

        $r3 = <org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] MULTIPART_CHARS>;

        $r2 = <org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] MULTIPART_CHARS>;

        $i3 = lengthof $r2;

        $i4 = virtualinvoke $r0.<java.util.Random: int nextInt(int)>($i3);

        $b5 = $r3[$i4];

        r1[i6] = $b5;

        i6 = i6 + 1;

        goto label1;

     label2:
        return r1;
    }

    public void <init>(org.apache.commons.httpclient.methods.multipart.Part[], org.apache.commons.httpclient.params.HttpMethodParams)
    {
        org.apache.commons.httpclient.methods.multipart.Part[] r1;
        org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity r0;
        org.apache.commons.httpclient.params.HttpMethodParams r2;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;

        r1 := @parameter0: org.apache.commons.httpclient.methods.multipart.Part[];

        r2 := @parameter1: org.apache.commons.httpclient.params.HttpMethodParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("parts cannot be null");

        throw $r4;

     label1:
        if r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("params cannot be null");

        throw $r3;

     label2:
        r0.<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: org.apache.commons.httpclient.methods.multipart.Part[] parts> = r1;

        r0.<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: org.apache.commons.httpclient.params.HttpMethodParams params> = r2;

        return;
    }

    protected byte[] getMultipartBoundary()
    {
        org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity r0;
        byte[] $r1, $r5, $r6, $r7;
        org.apache.commons.httpclient.params.HttpMethodParams $r2;
        java.lang.Object $r3;
        java.lang.String r4;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;

        $r1 = r0.<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] multipartBoundary>;

        if $r1 != null goto label2;

        $r2 = r0.<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: org.apache.commons.httpclient.params.HttpMethodParams params>;

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Object getParameter(java.lang.String)>("http.method.multipart.boundary");

        r4 = (java.lang.String) $r3;

        if r4 == null goto label1;

        $r6 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>(r4);

        r0.<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] multipartBoundary> = $r6;

        goto label2;

     label1:
        $r5 = staticinvoke <org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] generateMultipartBoundary()>();

        r0.<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] multipartBoundary> = $r5;

     label2:
        $r7 = r0.<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] multipartBoundary>;

        return $r7;
    }

    public boolean isRepeatable()
    {
        org.apache.commons.httpclient.methods.multipart.Part[] $r1, $r2;
        org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity r0;
        org.apache.commons.httpclient.methods.multipart.Part $r3;
        int $i0, i1;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: org.apache.commons.httpclient.methods.multipart.Part[] parts>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label3;

        $r2 = r0.<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: org.apache.commons.httpclient.methods.multipart.Part[] parts>;

        $r3 = $r2[i1];

        $z0 = virtualinvoke $r3.<org.apache.commons.httpclient.methods.multipart.Part: boolean isRepeatable()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    public void writeRequest(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        org.apache.commons.httpclient.methods.multipart.Part[] $r2;
        org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity r1;
        byte[] $r3;

        r1 := @this: org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;

        r0 := @parameter0: java.io.OutputStream;

        $r2 = r1.<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: org.apache.commons.httpclient.methods.multipart.Part[] parts>;

        $r3 = virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] getMultipartBoundary()>();

        staticinvoke <org.apache.commons.httpclient.methods.multipart.Part: void sendParts(java.io.OutputStream,org.apache.commons.httpclient.methods.multipart.Part[],byte[])>(r0, $r2, $r3);

        return;
    }

    public long getContentLength()
    {
        org.apache.commons.httpclient.methods.multipart.Part[] $r1;
        org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity r0;
        byte[] $r2;
        long $l0;
        org.apache.commons.logging.Log $r4;
        java.lang.Exception $r3;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: org.apache.commons.httpclient.methods.multipart.Part[] parts>;

        $r2 = virtualinvoke r0.<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] getMultipartBoundary()>();

        $l0 = staticinvoke <org.apache.commons.httpclient.methods.multipart.Part: long getLengthOfParts(org.apache.commons.httpclient.methods.multipart.Part[],byte[])>($r1, $r2);

     label2:
        return $l0;

     label3:
        $r3 := @caughtexception;

        $r4 = <org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: org.apache.commons.logging.Log log>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("An exception occurred while getting the length of the parts", $r3);

        return 0L;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String getContentType()
    {
        org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity r1;
        byte[] $r2;
        java.lang.StringBuffer $r0;
        java.lang.String $r3, $r4;

        r1 := @this: org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("multipart/form-data");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; boundary=");

        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] getMultipartBoundary()>();

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[])>($r2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        byte[] $r2;
        java.lang.Class $r0, $r3;
        org.apache.commons.logging.Log $r1;

        <org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.String MULTIPART_FORM_CONTENT_TYPE> = "multipart/form-data";

        $r0 = <org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.Class class$org$apache$commons$httpclient$methods$multipart$MultipartRequestEntity>;

        if $r0 != null goto label1;

        $r3 = staticinvoke <org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity");

        <org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.Class class$org$apache$commons$httpclient$methods$multipart$MultipartRequestEntity> = $r3;

        goto label2;

     label1:
        $r3 = <org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: java.lang.Class class$org$apache$commons$httpclient$methods$multipart$MultipartRequestEntity>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r3);

        <org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: org.apache.commons.logging.Log log> = $r1;

        $r2 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");

        <org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] MULTIPART_CHARS> = $r2;

        return;
    }
}
