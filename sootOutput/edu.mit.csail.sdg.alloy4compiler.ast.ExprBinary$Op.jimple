public final enum class edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op extends java.lang.Enum
{
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ARROW;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ANY_ARROW_SOME;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ANY_ARROW_ONE;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ANY_ARROW_LONE;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SOME_ARROW_ANY;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SOME_ARROW_SOME;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SOME_ARROW_ONE;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SOME_ARROW_LONE;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ONE_ARROW_ANY;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ONE_ARROW_SOME;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ONE_ARROW_ONE;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ONE_ARROW_LONE;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LONE_ARROW_ANY;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LONE_ARROW_SOME;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LONE_ARROW_ONE;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LONE_ARROW_LONE;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ISSEQ_ARROW_LONE;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op JOIN;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op DOMAIN;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op RANGE;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op INTERSECT;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op PLUSPLUS;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op PLUS;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op MINUS;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op MUL;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op DIV;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op REM;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op EQUALS;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_EQUALS;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op IMPLIES;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LT;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LTE;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op GT;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op GTE;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_LT;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_LTE;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_GT;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_GTE;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SHL;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SHA;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SHR;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op IN;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_IN;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op AND;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op OR;
    public static final enum edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op IFF;
    private final java.lang.String label;
    public final boolean isArrow;
    private static final edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op[] $VALUES;

    public static final edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op[] values()
    {
        java.lang.Object $r1;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op[] $r0, $r2;

        $r0 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op[]) $r1;

        return $r2;
    }

    public static edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op valueOf(java.lang.String)
    {
        edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op $r2;
        java.lang.String r0;
        java.lang.Enum $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Ledu/mit/csail/sdg/alloy4compiler/ast/ExprBinary$Op;", r0);

        $r2 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, java.lang.String, boolean)
    {
        edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op r0;
        int i0;
        java.lang.String r1, r2;
        boolean z0;

        r0 := @this: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: java.lang.String label> = r2;

        r0.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: boolean isArrow> = z0;

        return;
    }

    public final edu.mit.csail.sdg.alloy4compiler.ast.Expr make(edu.mit.csail.sdg.alloy4.Pos, edu.mit.csail.sdg.alloy4.Pos, edu.mit.csail.sdg.alloy4compiler.ast.Expr, edu.mit.csail.sdg.alloy4compiler.ast.Expr)
    {
        java.lang.StringBuilder $r20, $r21, $r23, $r33, $r34, $r35, $r60, $r61, $r63, $r89, $r90, $r91;
        java.lang.String $r24, $r36, $r64, $r92;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprList $r75, $r76;
        edu.mit.csail.sdg.alloy4compiler.ast.Expr $r29, $r71, $r74, r77, r78;
        int[] $r1, $r9;
        edu.mit.csail.sdg.alloy4.ErrorSyntax $r5, $r7;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig $r67, $r69;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field $r72;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary $r94;
        edu.mit.csail.sdg.alloy4.Pos r2, r3, $r6, $r8, $r19, $r59;
        edu.mit.csail.sdg.alloy4compiler.ast.Type $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r22, $r25, $r26, $r27, $r28, $r30, $r31, $r32, $r37, $r38, $r39, $r40, $r42, $r43, $r44, $r45, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r62, $r65, $r66, $r68, $r70, r79, r80, r82, $r87, $r88, $r93;
        edu.mit.csail.sdg.alloy4.ErrorType $r18, $r58, r81;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig $r73;
        edu.mit.csail.sdg.alloy4.JoinableList $r83, $r84, $r85, r86, $r95;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op r0, $r4, $r41, $r46, $r47;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        r2 := @parameter0: edu.mit.csail.sdg.alloy4.Pos;

        r3 := @parameter1: edu.mit.csail.sdg.alloy4.Pos;

        r77 := @parameter2: edu.mit.csail.sdg.alloy4compiler.ast.Expr;

        r78 := @parameter3: edu.mit.csail.sdg.alloy4compiler.ast.Expr;

        $r1 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$1: int[] $SwitchMap$edu$mit$csail$sdg$alloy4compiler$ast$ExprBinary$Op>;

        $i0 = virtualinvoke r0.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label04;
            case 6: goto label04;
            case 7: goto label04;
            case 8: goto label04;
            case 9: goto label04;
            case 10: goto label04;
            case 11: goto label04;
            case 12: goto label04;
            case 13: goto label04;
            case 14: goto label04;
            case 15: goto label04;
            case 16: goto label04;
            case 17: goto label04;
            case 18: goto label05;
            case 19: goto label05;
            case 20: goto label06;
            case 21: goto label06;
            case 22: goto label06;
            case 23: goto label06;
            default: goto label11;
        };

     label01:
        $r76 = staticinvoke <edu.mit.csail.sdg.alloy4compiler.ast.ExprList: edu.mit.csail.sdg.alloy4compiler.ast.ExprList makeAND(edu.mit.csail.sdg.alloy4.Pos,edu.mit.csail.sdg.alloy4.Pos,edu.mit.csail.sdg.alloy4compiler.ast.Expr,edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r2, r3, r77, r78);

        return $r76;

     label02:
        $r75 = staticinvoke <edu.mit.csail.sdg.alloy4compiler.ast.ExprList: edu.mit.csail.sdg.alloy4compiler.ast.ExprList makeOR(edu.mit.csail.sdg.alloy4.Pos,edu.mit.csail.sdg.alloy4.Pos,edu.mit.csail.sdg.alloy4compiler.ast.Expr,edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r2, r3, r77, r78);

        return $r75;

     label03:
        $r71 = virtualinvoke r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Expr deNOP()>();

        $z19 = $r71 instanceof edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field;

        if $z19 == 0 goto label12;

        $r72 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field) $r71;

        $r73 = $r72.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field: edu.mit.csail.sdg.alloy4compiler.ast.Sig sig>;

        $r74 = virtualinvoke r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Expr deNOP()>();

        if $r73 != $r74 goto label12;

        return r78;

     label04:
        r77 = virtualinvoke r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Expr typecheck_as_int()>();

        r78 = virtualinvoke r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Expr typecheck_as_int()>();

        goto label12;

     label05:
        r77 = virtualinvoke r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Expr typecheck_as_formula()>();

        r78 = virtualinvoke r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Expr typecheck_as_formula()>();

        goto label12;

     label06:
        r79 = r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        r80 = r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $z0 = virtualinvoke r79.<edu.mit.csail.sdg.alloy4compiler.ast.Type: boolean hasCommonArity(edu.mit.csail.sdg.alloy4compiler.ast.Type)>(r80);

        if $z0 != 0 goto label12;

        $z9 = r79.<edu.mit.csail.sdg.alloy4compiler.ast.Type: boolean is_int>;

        if $z9 == 0 goto label07;

        $z18 = r80.<edu.mit.csail.sdg.alloy4compiler.ast.Type: boolean is_int>;

        if $z18 == 0 goto label07;

        goto label12;

     label07:
        $z10 = r79.<edu.mit.csail.sdg.alloy4compiler.ast.Type: boolean is_int>;

        if $z10 == 0 goto label08;

        $r69 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig SIGINT>;

        $r70 = $r69.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $z17 = virtualinvoke r80.<edu.mit.csail.sdg.alloy4compiler.ast.Type: boolean intersects(edu.mit.csail.sdg.alloy4compiler.ast.Type)>($r70);

        if $z17 == 0 goto label08;

        r78 = virtualinvoke r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Expr cast2int()>();

        goto label12;

     label08:
        $z11 = r80.<edu.mit.csail.sdg.alloy4compiler.ast.Type: boolean is_int>;

        if $z11 == 0 goto label09;

        $r67 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig SIGINT>;

        $r68 = $r67.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $z16 = virtualinvoke r79.<edu.mit.csail.sdg.alloy4compiler.ast.Type: boolean intersects(edu.mit.csail.sdg.alloy4compiler.ast.Type)>($r68);

        if $z16 == 0 goto label09;

        r77 = virtualinvoke r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Expr cast2int()>();

        goto label12;

     label09:
        $z12 = r79.<edu.mit.csail.sdg.alloy4compiler.ast.Type: boolean is_int>;

        if $z12 == 0 goto label10;

        $z15 = virtualinvoke r80.<edu.mit.csail.sdg.alloy4compiler.ast.Type: boolean hasArity(int)>(1);

        if $z15 == 0 goto label10;

        r77 = virtualinvoke r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Expr cast2sigint()>();

        goto label12;

     label10:
        $z13 = r80.<edu.mit.csail.sdg.alloy4compiler.ast.Type: boolean is_int>;

        if $z13 == 0 goto label12;

        $z14 = virtualinvoke r79.<edu.mit.csail.sdg.alloy4compiler.ast.Type: boolean hasArity(int)>(1);

        if $z14 == 0 goto label12;

        r78 = virtualinvoke r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Expr cast2sigint()>();

        goto label12;

     label11:
        r77 = virtualinvoke r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Expr typecheck_as_set()>();

        r78 = virtualinvoke r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Expr typecheck_as_set()>();

     label12:
        r81 = null;

        r82 = <edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type EMPTY>;

        $r83 = r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4.JoinableList errors>;

        $r84 = r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4.JoinableList errors>;

        $r85 = virtualinvoke $r83.<edu.mit.csail.sdg.alloy4.JoinableList: edu.mit.csail.sdg.alloy4.JoinableList make(edu.mit.csail.sdg.alloy4.JoinableList)>($r84);

        r86 = $r85;

        $z20 = virtualinvoke $r85.<edu.mit.csail.sdg.alloy4.JoinableList: boolean isEmpty()>();

        if $z20 == 0 goto label32;

        $r9 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$1: int[] $SwitchMap$edu$mit$csail$sdg$alloy4compiler$ast$ExprBinary$Op>;

        $i6 = virtualinvoke r0.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        $i7 = $r9[$i6];

        tableswitch($i7)
        {
            case 1: goto label13;
            case 2: goto label13;
            case 3: goto label28;
            case 4: goto label14;
            case 5: goto label14;
            case 6: goto label14;
            case 7: goto label13;
            case 8: goto label13;
            case 9: goto label13;
            case 10: goto label13;
            case 11: goto label14;
            case 12: goto label14;
            case 13: goto label14;
            case 14: goto label13;
            case 15: goto label13;
            case 16: goto label13;
            case 17: goto label13;
            case 18: goto label13;
            case 19: goto label13;
            case 20: goto label16;
            case 21: goto label16;
            case 22: goto label16;
            case 23: goto label16;
            case 24: goto label15;
            case 25: goto label24;
            case 26: goto label24;
            case 27: goto label27;
            case 28: goto label29;
            case 29: goto label30;
            default: goto label31;
        };

     label13:
        r82 = <edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type FORMULA>;

        goto label32;

     label14:
        r82 = <edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type INT>;

        goto label32;

     label15:
        $r38 = r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r37 = r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r39 = virtualinvoke $r38.<edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type unionWithCommonArity(edu.mit.csail.sdg.alloy4compiler.ast.Type)>($r37);

        r82 = $r39;

        $r40 = <edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type EMPTY>;

        if $r39 != $r40 goto label32;

        r81 = staticinvoke <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary: edu.mit.csail.sdg.alloy4.ErrorType access$000(edu.mit.csail.sdg.alloy4.Pos,java.lang.String,edu.mit.csail.sdg.alloy4compiler.ast.Expr,edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r2, "++ can be used only between two expressions of the same arity.", r77, r78);

        goto label32;

     label16:
        $r41 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op EQUALS>;

        if r0 == $r41 goto label17;

        $r46 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_EQUALS>;

        if r0 != $r46 goto label19;

     label17:
        $r43 = r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r42 = r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $z4 = virtualinvoke $r43.<edu.mit.csail.sdg.alloy4compiler.ast.Type: boolean hasCommonArity(edu.mit.csail.sdg.alloy4compiler.ast.Type)>($r42);

        if $z4 != 0 goto label18;

        $r44 = r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $z5 = $r44.<edu.mit.csail.sdg.alloy4compiler.ast.Type: boolean is_int>;

        if $z5 == 0 goto label23;

        $r45 = r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $z6 = $r45.<edu.mit.csail.sdg.alloy4compiler.ast.Type: boolean is_int>;

        if $z6 == 0 goto label23;

     label18:
        r82 = <edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type FORMULA>;

        goto label32;

     label19:
        $r47 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op PLUS>;

        if r0 != $r47 goto label20;

        $r53 = r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r52 = r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r87 = virtualinvoke $r53.<edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type unionWithCommonArity(edu.mit.csail.sdg.alloy4compiler.ast.Type)>($r52);

        goto label21;

     label20:
        $r49 = r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r48 = r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r87 = virtualinvoke $r49.<edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type pickCommonArity(edu.mit.csail.sdg.alloy4compiler.ast.Type)>($r48);

     label21:
        r82 = $r87;

        $r50 = r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $z7 = $r50.<edu.mit.csail.sdg.alloy4compiler.ast.Type: boolean is_int>;

        if $z7 == 0 goto label22;

        $r51 = r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $z8 = $r51.<edu.mit.csail.sdg.alloy4compiler.ast.Type: boolean is_int>;

        if $z8 == 0 goto label22;

        r82 = staticinvoke <edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type makeInt(edu.mit.csail.sdg.alloy4compiler.ast.Type)>($r87);

     label22:
        $r88 = <edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type EMPTY>;

        if r82 == $r88 goto label23;

        goto label32;

     label23:
        $r89 = new java.lang.StringBuilder;

        specialinvoke $r89.<java.lang.StringBuilder: void <init>()>();

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can be used only between 2 expressions of the same arity, or between 2 integer expressions.");

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.String toString()>();

        r81 = staticinvoke <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary: edu.mit.csail.sdg.alloy4.ErrorType access$000(edu.mit.csail.sdg.alloy4.Pos,java.lang.String,edu.mit.csail.sdg.alloy4compiler.ast.Expr,edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r2, $r92, r77, r78);

        goto label32;

     label24:
        $r31 = r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r30 = r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $z3 = virtualinvoke $r31.<edu.mit.csail.sdg.alloy4compiler.ast.Type: boolean hasCommonArity(edu.mit.csail.sdg.alloy4compiler.ast.Type)>($r30);

        if $z3 == 0 goto label25;

        $r93 = <edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type FORMULA>;

        goto label26;

     label25:
        $r93 = <edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type EMPTY>;

     label26:
        r82 = $r93;

        $r32 = <edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type EMPTY>;

        if $r93 != $r32 goto label32;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can be used only between 2 expressions of the same arity.");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        r81 = staticinvoke <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary: edu.mit.csail.sdg.alloy4.ErrorType access$000(edu.mit.csail.sdg.alloy4.Pos,java.lang.String,edu.mit.csail.sdg.alloy4compiler.ast.Expr,edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r2, $r36, r77, r78);

        goto label32;

     label27:
        $r26 = r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r25 = r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r27 = virtualinvoke $r26.<edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type join(edu.mit.csail.sdg.alloy4compiler.ast.Type)>($r25);

        r82 = $r27;

        $r28 = <edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type EMPTY>;

        if $r27 != $r28 goto label32;

        $r29 = staticinvoke <edu.mit.csail.sdg.alloy4compiler.ast.ExprBadJoin: edu.mit.csail.sdg.alloy4compiler.ast.Expr make(edu.mit.csail.sdg.alloy4.Pos,edu.mit.csail.sdg.alloy4.Pos,edu.mit.csail.sdg.alloy4compiler.ast.Expr,edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r2, r3, r77, r78);

        return $r29;

     label28:
        $r55 = r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r54 = r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r56 = virtualinvoke $r55.<edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type domainRestrict(edu.mit.csail.sdg.alloy4compiler.ast.Type)>($r54);

        r82 = $r56;

        $r57 = <edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type EMPTY>;

        if $r56 != $r57 goto label32;

        $r58 = new edu.mit.csail.sdg.alloy4.ErrorType;

        $r59 = virtualinvoke r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4.Pos span()>();

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This must be a unary set, but instead it has the following possible type(s):\n");

        $r62 = r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r62);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r58.<edu.mit.csail.sdg.alloy4.ErrorType: void <init>(edu.mit.csail.sdg.alloy4.Pos,java.lang.String)>($r59, $r64);

        r81 = $r58;

        goto label32;

     label29:
        $r15 = r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r14 = r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r16 = virtualinvoke $r15.<edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type rangeRestrict(edu.mit.csail.sdg.alloy4compiler.ast.Type)>($r14);

        r82 = $r16;

        $r17 = <edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type EMPTY>;

        if $r16 != $r17 goto label32;

        $r18 = new edu.mit.csail.sdg.alloy4.ErrorType;

        $r19 = virtualinvoke r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4.Pos span()>();

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This must be a unary set, but instead it has the following possible type(s):\n");

        $r22 = r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<edu.mit.csail.sdg.alloy4.ErrorType: void <init>(edu.mit.csail.sdg.alloy4.Pos,java.lang.String)>($r19, $r24);

        r81 = $r18;

        goto label32;

     label30:
        $r11 = r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r10 = r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r12 = virtualinvoke $r11.<edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type intersect(edu.mit.csail.sdg.alloy4compiler.ast.Type)>($r10);

        r82 = $r12;

        $r13 = <edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type EMPTY>;

        if $r12 != $r13 goto label32;

        r81 = staticinvoke <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary: edu.mit.csail.sdg.alloy4.ErrorType access$000(edu.mit.csail.sdg.alloy4.Pos,java.lang.String,edu.mit.csail.sdg.alloy4compiler.ast.Expr,edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r2, "& can be used only between 2 expressions of the same arity.", r77, r78);

        goto label32;

     label31:
        $r66 = r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        $r65 = r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type>;

        r82 = virtualinvoke $r66.<edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type product(edu.mit.csail.sdg.alloy4compiler.ast.Type)>($r65);

     label32:
        $z21 = r0.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: boolean isArrow>;

        if $z21 == 0 goto label33;

        $i5 = r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: int mult>;

        if $i5 == 1 goto label34;

     label33:
        $z1 = r0.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: boolean isArrow>;

        if $z1 != 0 goto label35;

        $i4 = r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: int mult>;

        if $i4 == 0 goto label35;

     label34:
        $r7 = new edu.mit.csail.sdg.alloy4.ErrorSyntax;

        $r8 = virtualinvoke r77.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4.Pos span()>();

        specialinvoke $r7.<edu.mit.csail.sdg.alloy4.ErrorSyntax: void <init>(edu.mit.csail.sdg.alloy4.Pos,java.lang.String)>($r8, "Multiplicity expression not allowed here.");

        r86 = virtualinvoke $r85.<edu.mit.csail.sdg.alloy4.JoinableList: edu.mit.csail.sdg.alloy4.JoinableList make(java.lang.Object)>($r7);

     label35:
        $z22 = r0.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: boolean isArrow>;

        if $z22 == 0 goto label36;

        $i3 = r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: int mult>;

        if $i3 == 1 goto label37;

     label36:
        $z2 = r0.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: boolean isArrow>;

        if $z2 != 0 goto label38;

        $r4 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op IN>;

        if r0 == $r4 goto label38;

        $i2 = r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: int mult>;

        if $i2 == 0 goto label38;

     label37:
        $r5 = new edu.mit.csail.sdg.alloy4.ErrorSyntax;

        $r6 = virtualinvoke r78.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4.Pos span()>();

        specialinvoke $r5.<edu.mit.csail.sdg.alloy4.ErrorSyntax: void <init>(edu.mit.csail.sdg.alloy4.Pos,java.lang.String)>($r6, "Multiplicity expression not allowed here.");

        r86 = virtualinvoke r86.<edu.mit.csail.sdg.alloy4.JoinableList: edu.mit.csail.sdg.alloy4.JoinableList make(java.lang.Object)>($r5);

     label38:
        $r94 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary;

        $r95 = virtualinvoke r86.<edu.mit.csail.sdg.alloy4.JoinableList: edu.mit.csail.sdg.alloy4.JoinableList make(java.lang.Object)>(r81);

        specialinvoke $r94.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary: void <init>(edu.mit.csail.sdg.alloy4.Pos,edu.mit.csail.sdg.alloy4.Pos,edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op,edu.mit.csail.sdg.alloy4compiler.ast.Expr,edu.mit.csail.sdg.alloy4compiler.ast.Expr,edu.mit.csail.sdg.alloy4compiler.ast.Type,edu.mit.csail.sdg.alloy4.JoinableList,edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$1)>(r2, r3, r0, r77, r78, r82, $r95, null);

        return $r94;
    }

    public final java.lang.String toString()
    {
        edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op r0;
        java.lang.String $r1;

        r0 := @this: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        $r1 = r0.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: java.lang.String label>;

        return $r1;
    }

    public final java.lang.String toHTML()
    {
        edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op r2;
        java.lang.StringBuilder $r0, $r1, $r5, $r6;
        java.lang.String $r3, $r4, $r7;

        r2 := @this: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<b>");

        $r3 = r2.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: java.lang.String label>;

        $r4 = staticinvoke <edu.mit.csail.sdg.alloy4.Util: java.lang.String encode(java.lang.String)>($r3);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</b>");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    static void <clinit>()
    {
        edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op[] $r46;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92;

        $r0 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r0.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("ARROW", 0, "->", 1);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ARROW> = $r0;

        $r1 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r1.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("ANY_ARROW_SOME", 1, "->some", 1);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ANY_ARROW_SOME> = $r1;

        $r2 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r2.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("ANY_ARROW_ONE", 2, "->one", 1);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ANY_ARROW_ONE> = $r2;

        $r3 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r3.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("ANY_ARROW_LONE", 3, "->lone", 1);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ANY_ARROW_LONE> = $r3;

        $r4 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r4.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("SOME_ARROW_ANY", 4, "some->", 1);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SOME_ARROW_ANY> = $r4;

        $r5 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r5.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("SOME_ARROW_SOME", 5, "some->some", 1);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SOME_ARROW_SOME> = $r5;

        $r6 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r6.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("SOME_ARROW_ONE", 6, "some->one", 1);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SOME_ARROW_ONE> = $r6;

        $r7 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r7.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("SOME_ARROW_LONE", 7, "some->lone", 1);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SOME_ARROW_LONE> = $r7;

        $r8 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r8.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("ONE_ARROW_ANY", 8, "one->", 1);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ONE_ARROW_ANY> = $r8;

        $r9 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r9.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("ONE_ARROW_SOME", 9, "one->some", 1);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ONE_ARROW_SOME> = $r9;

        $r10 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r10.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("ONE_ARROW_ONE", 10, "one->one", 1);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ONE_ARROW_ONE> = $r10;

        $r11 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r11.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("ONE_ARROW_LONE", 11, "one->lone", 1);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ONE_ARROW_LONE> = $r11;

        $r12 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r12.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("LONE_ARROW_ANY", 12, "lone->", 1);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LONE_ARROW_ANY> = $r12;

        $r13 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r13.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("LONE_ARROW_SOME", 13, "lone->some", 1);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LONE_ARROW_SOME> = $r13;

        $r14 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r14.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("LONE_ARROW_ONE", 14, "lone->one", 1);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LONE_ARROW_ONE> = $r14;

        $r15 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r15.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("LONE_ARROW_LONE", 15, "lone->lone", 1);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LONE_ARROW_LONE> = $r15;

        $r16 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r16.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("ISSEQ_ARROW_LONE", 16, "isSeq->lone", 1);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ISSEQ_ARROW_LONE> = $r16;

        $r17 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r17.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("JOIN", 17, ".", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op JOIN> = $r17;

        $r18 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r18.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("DOMAIN", 18, "<:", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op DOMAIN> = $r18;

        $r19 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r19.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("RANGE", 19, ":>", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op RANGE> = $r19;

        $r20 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r20.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("INTERSECT", 20, "&", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op INTERSECT> = $r20;

        $r21 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r21.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("PLUSPLUS", 21, "++", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op PLUSPLUS> = $r21;

        $r22 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r22.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("PLUS", 22, "+", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op PLUS> = $r22;

        $r23 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r23.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("MINUS", 23, "-", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op MINUS> = $r23;

        $r24 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r24.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("MUL", 24, "*", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op MUL> = $r24;

        $r25 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r25.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("DIV", 25, "/", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op DIV> = $r25;

        $r26 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r26.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("REM", 26, "%", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op REM> = $r26;

        $r27 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r27.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("EQUALS", 27, "=", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op EQUALS> = $r27;

        $r28 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r28.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("NOT_EQUALS", 28, "!=", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_EQUALS> = $r28;

        $r29 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r29.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("IMPLIES", 29, "=>", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op IMPLIES> = $r29;

        $r30 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r30.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("LT", 30, "<", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LT> = $r30;

        $r31 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r31.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("LTE", 31, "<=", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LTE> = $r31;

        $r32 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r32.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("GT", 32, ">", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op GT> = $r32;

        $r33 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r33.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("GTE", 33, ">=", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op GTE> = $r33;

        $r34 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r34.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("NOT_LT", 34, "!<", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_LT> = $r34;

        $r35 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r35.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("NOT_LTE", 35, "!<=", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_LTE> = $r35;

        $r36 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r36.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("NOT_GT", 36, "!>", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_GT> = $r36;

        $r37 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r37.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("NOT_GTE", 37, "!>=", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_GTE> = $r37;

        $r38 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r38.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("SHL", 38, "<<", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SHL> = $r38;

        $r39 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r39.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("SHA", 39, ">>", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SHA> = $r39;

        $r40 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r40.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("SHR", 40, ">>>", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SHR> = $r40;

        $r41 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r41.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("IN", 41, "in", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op IN> = $r41;

        $r42 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r42.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("NOT_IN", 42, "!in", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_IN> = $r42;

        $r43 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r43.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("AND", 43, "&&", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op AND> = $r43;

        $r44 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r44.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("OR", 44, "||", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op OR> = $r44;

        $r45 = new edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op;

        specialinvoke $r45.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: void <init>(java.lang.String,int,java.lang.String,boolean)>("IFF", 45, "<=>", 0);

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op IFF> = $r45;

        $r46 = newarray (edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op)[46];

        $r47 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ARROW>;

        $r46[0] = $r47;

        $r48 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ANY_ARROW_SOME>;

        $r46[1] = $r48;

        $r49 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ANY_ARROW_ONE>;

        $r46[2] = $r49;

        $r50 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ANY_ARROW_LONE>;

        $r46[3] = $r50;

        $r51 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SOME_ARROW_ANY>;

        $r46[4] = $r51;

        $r52 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SOME_ARROW_SOME>;

        $r46[5] = $r52;

        $r53 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SOME_ARROW_ONE>;

        $r46[6] = $r53;

        $r54 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SOME_ARROW_LONE>;

        $r46[7] = $r54;

        $r55 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ONE_ARROW_ANY>;

        $r46[8] = $r55;

        $r56 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ONE_ARROW_SOME>;

        $r46[9] = $r56;

        $r57 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ONE_ARROW_ONE>;

        $r46[10] = $r57;

        $r58 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ONE_ARROW_LONE>;

        $r46[11] = $r58;

        $r59 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LONE_ARROW_ANY>;

        $r46[12] = $r59;

        $r60 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LONE_ARROW_SOME>;

        $r46[13] = $r60;

        $r61 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LONE_ARROW_ONE>;

        $r46[14] = $r61;

        $r62 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LONE_ARROW_LONE>;

        $r46[15] = $r62;

        $r63 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ISSEQ_ARROW_LONE>;

        $r46[16] = $r63;

        $r64 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op JOIN>;

        $r46[17] = $r64;

        $r65 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op DOMAIN>;

        $r46[18] = $r65;

        $r66 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op RANGE>;

        $r46[19] = $r66;

        $r67 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op INTERSECT>;

        $r46[20] = $r67;

        $r68 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op PLUSPLUS>;

        $r46[21] = $r68;

        $r69 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op PLUS>;

        $r46[22] = $r69;

        $r70 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op MINUS>;

        $r46[23] = $r70;

        $r71 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op MUL>;

        $r46[24] = $r71;

        $r72 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op DIV>;

        $r46[25] = $r72;

        $r73 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op REM>;

        $r46[26] = $r73;

        $r74 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op EQUALS>;

        $r46[27] = $r74;

        $r75 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_EQUALS>;

        $r46[28] = $r75;

        $r76 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op IMPLIES>;

        $r46[29] = $r76;

        $r77 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LT>;

        $r46[30] = $r77;

        $r78 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LTE>;

        $r46[31] = $r78;

        $r79 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op GT>;

        $r46[32] = $r79;

        $r80 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op GTE>;

        $r46[33] = $r80;

        $r81 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_LT>;

        $r46[34] = $r81;

        $r82 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_LTE>;

        $r46[35] = $r82;

        $r83 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_GT>;

        $r46[36] = $r83;

        $r84 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_GTE>;

        $r46[37] = $r84;

        $r85 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SHL>;

        $r46[38] = $r85;

        $r86 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SHA>;

        $r46[39] = $r86;

        $r87 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SHR>;

        $r46[40] = $r87;

        $r88 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op IN>;

        $r46[41] = $r88;

        $r89 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_IN>;

        $r46[42] = $r89;

        $r90 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op AND>;

        $r46[43] = $r90;

        $r91 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op OR>;

        $r46[44] = $r91;

        $r92 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op IFF>;

        $r46[45] = $r92;

        <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op[] $VALUES> = $r46;

        return;
    }
}
