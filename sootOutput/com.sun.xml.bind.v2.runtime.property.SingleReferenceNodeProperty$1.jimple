class com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty$1 extends com.sun.xml.bind.v2.runtime.reflect.Accessor
{
    final com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl val$ebi;
    final com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty this$0;

    void <init>(com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty, java.lang.Class, com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl)
    {
        com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty$1 r0;
        com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl r2;
        java.lang.Class r3;
        com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty r1;

        r0 := @this: com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty$1;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty;

        r3 := @parameter1: java.lang.Class;

        r2 := @parameter2: com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl;

        r0.<com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty$1: com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty this$0> = r1;

        r0.<com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty$1: com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl val$ebi> = r2;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor: void <init>(java.lang.Class)>(r3);

        return;
    }

    public java.lang.Object get(java.lang.Object) throws com.sun.xml.bind.api.AccessorException
    {
        com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty$1 r0;
        javax.xml.bind.JAXBElement $r5;
        com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty $r1;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r2;
        java.lang.Object r3, $r4, $r6;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty$1;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty$1: com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty this$0>;

        $r2 = staticinvoke <com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty: com.sun.xml.bind.v2.runtime.reflect.Accessor access$000(com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty)>($r1);

        $r4 = virtualinvoke $r2.<com.sun.xml.bind.v2.runtime.reflect.Accessor: java.lang.Object get(java.lang.Object)>(r3);

        $z0 = $r4 instanceof javax.xml.bind.JAXBElement;

        if $z0 == 0 goto label1;

        $r5 = (javax.xml.bind.JAXBElement) $r4;

        $r6 = virtualinvoke $r5.<javax.xml.bind.JAXBElement: java.lang.Object getValue()>();

        return $r6;

     label1:
        return $r4;
    }

    public void set(java.lang.Object, java.lang.Object) throws com.sun.xml.bind.api.AccessorException
    {
        java.lang.IllegalAccessException $r9;
        com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty$1 r0;
        com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty $r1;
        java.lang.reflect.InvocationTargetException $r7;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r2;
        com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl $r4;
        java.lang.InstantiationException $r5;
        java.lang.Object r3, r11;
        com.sun.xml.bind.api.AccessorException $r6, $r8, $r10;

        r0 := @this: com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty$1;

        r3 := @parameter0: java.lang.Object;

        r11 := @parameter1: java.lang.Object;

        if r11 == null goto label6;

     label1:
        $r4 = r0.<com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty$1: com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl val$ebi>;

        r11 = virtualinvoke $r4.<com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl: javax.xml.bind.JAXBElement createInstanceFromValue(java.lang.Object)>(r11);

     label2:
        goto label6;

     label3:
        $r9 := @caughtexception;

        $r10 = new com.sun.xml.bind.api.AccessorException;

        specialinvoke $r10.<com.sun.xml.bind.api.AccessorException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label4:
        $r7 := @caughtexception;

        $r8 = new com.sun.xml.bind.api.AccessorException;

        specialinvoke $r8.<com.sun.xml.bind.api.AccessorException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label5:
        $r5 := @caughtexception;

        $r6 = new com.sun.xml.bind.api.AccessorException;

        specialinvoke $r6.<com.sun.xml.bind.api.AccessorException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label6:
        $r1 = r0.<com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty$1: com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty this$0>;

        $r2 = staticinvoke <com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty: com.sun.xml.bind.v2.runtime.reflect.Accessor access$000(com.sun.xml.bind.v2.runtime.property.SingleReferenceNodeProperty)>($r1);

        virtualinvoke $r2.<com.sun.xml.bind.v2.runtime.reflect.Accessor: void set(java.lang.Object,java.lang.Object)>(r3, r11);

        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
        catch java.lang.InstantiationException from label1 to label2 with label5;
    }
}
