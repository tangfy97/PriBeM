class org.apache.lucene.util.packed.Packed64 extends org.apache.lucene.util.packed.PackedInts$MutableImpl
{
    static final int BLOCK_SIZE;
    static final int BLOCK_BITS;
    static final int MOD_MASK;
    private final long[] blocks;
    private final long maskRight;
    private final int bpvMinusBlockSize;
    static final boolean $assertionsDisabled;

    public void <init>(int, int)
    {
        org.apache.lucene.util.packed.PackedInts$Format r1;
        long $l5, $l6;
        long[] $r2;
        int i0, i1, $i2, $i3, $i4, $i7;
        org.apache.lucene.util.packed.Packed64 r0;

        r0 := @this: org.apache.lucene.util.packed.Packed64;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$MutableImpl: void <init>(int,int)>(i0, i1);

        r1 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $i2 = virtualinvoke r1.<org.apache.lucene.util.packed.PackedInts$Format: int longCount(int,int,int)>(1, i0, i1);

        $r2 = newarray (long)[$i2];

        r0.<org.apache.lucene.util.packed.Packed64: long[] blocks> = $r2;

        $i3 = 64 - i1;

        $l5 = -1L << $i3;

        $i4 = 64 - i1;

        $l6 = $l5 >>> $i4;

        r0.<org.apache.lucene.util.packed.Packed64: long maskRight> = $l6;

        $i7 = i1 - 64;

        r0.<org.apache.lucene.util.packed.Packed64: int bpvMinusBlockSize> = $i7;

        return;
    }

    public void <init>(int, org.apache.lucene.store.DataInput, int, int) throws java.io.IOException
    {
        byte $b7, $b16;
        org.apache.lucene.store.DataInput r5;
        long $l3, $l5, $l6, $l8, $l11, $l12, $l17, $l20, $l21, $l22, l25;
        long[] $r2, $r3, $r4, $r6;
        int i0, i1, i2, $i4, $i9, $i10, $i13, $i14, $i15, $i18, $i19, i23, i24, i26, $i27;
        org.apache.lucene.util.packed.PackedInts$Format r1;
        org.apache.lucene.util.packed.Packed64 r0;

        r0 := @this: org.apache.lucene.util.packed.Packed64;

        i2 := @parameter0: int;

        r5 := @parameter1: org.apache.lucene.store.DataInput;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$MutableImpl: void <init>(int,int)>(i0, i1);

        r1 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $l3 = virtualinvoke r1.<org.apache.lucene.util.packed.PackedInts$Format: long byteCount(int,int,int)>(i2, i0, i1);

        $i4 = virtualinvoke r1.<org.apache.lucene.util.packed.PackedInts$Format: int longCount(int,int,int)>(1, i0, i1);

        $r2 = newarray (long)[$i4];

        r0.<org.apache.lucene.util.packed.Packed64: long[] blocks> = $r2;

        i23 = 0;

     label1:
        $l6 = (long) i23;

        $l5 = $l3 / 8L;

        $b7 = $l6 cmp $l5;

        $i27 = (int) $b7;

        if $i27 >= 0 goto label2;

        $r6 = r0.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        $l22 = virtualinvoke r5.<org.apache.lucene.store.DataInput: long readLong()>();

        $r6[i23] = $l22;

        i23 = i23 + 1;

        goto label1;

     label2:
        $l8 = $l3 % 8L;

        i24 = (int) $l8;

        if i24 == 0 goto label5;

        l25 = 0L;

        i26 = 0;

     label3:
        if i26 >= i24 goto label4;

        $b16 = virtualinvoke r5.<org.apache.lucene.store.DataInput: byte readByte()>();

        $l17 = (long) $b16;

        $l20 = $l17 & 255L;

        $i18 = i26 * 8;

        $i19 = 56 - $i18;

        $l21 = $l20 << $i19;

        l25 = l25 | $l21;

        i26 = i26 + 1;

        goto label3;

     label4:
        $r4 = r0.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        $r3 = r0.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        $i14 = lengthof $r3;

        $i15 = $i14 - 1;

        $r4[$i15] = l25;

     label5:
        $i9 = 64 - i1;

        $l11 = -1L << $i9;

        $i10 = 64 - i1;

        $l12 = $l11 >>> $i10;

        r0.<org.apache.lucene.util.packed.Packed64: long maskRight> = $l12;

        $i13 = i1 - 64;

        r0.<org.apache.lucene.util.packed.Packed64: int bpvMinusBlockSize> = $i13;

        return;
    }

    public long get(int)
    {
        byte $b11;
        long $l2, $l3, l4, $l5, $l8, $l9, l10, $l13, $l15, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l25, $l26, $l27, $l28;
        long[] $r1, $r2, $r3;
        int i0, $i1, i6, $i7, $i12, $i14, $i16, $i24, $i29;
        org.apache.lucene.util.packed.Packed64 r0;

        r0 := @this: org.apache.lucene.util.packed.Packed64;

        i0 := @parameter0: int;

        $l3 = (long) i0;

        $i1 = r0.<org.apache.lucene.util.packed.Packed64: int bitsPerValue>;

        $l2 = (long) $i1;

        l4 = $l3 * $l2;

        $l5 = l4 >>> 6;

        i6 = (int) $l5;

        $l9 = l4 & 63L;

        $i7 = r0.<org.apache.lucene.util.packed.Packed64: int bpvMinusBlockSize>;

        $l8 = (long) $i7;

        l10 = $l9 + $l8;

        $b11 = l10 cmp 0L;

        $i29 = (int) $b11;

        if $i29 > 0 goto label1;

        $r3 = r0.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        $l25 = $r3[i6];

        $l23 = neg l10;

        $i24 = (int) $l23;

        $l27 = $l25 >>> $i24;

        $l26 = r0.<org.apache.lucene.util.packed.Packed64: long maskRight>;

        $l28 = $l27 & $l26;

        return $l28;

     label1:
        $r1 = r0.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        $l13 = $r1[i6];

        $i12 = (int) l10;

        $l19 = $l13 << $i12;

        $r2 = r0.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        $i14 = i6 + 1;

        $l17 = $r2[$i14];

        $l15 = 64L - l10;

        $i16 = (int) $l15;

        $l18 = $l17 >>> $i16;

        $l21 = $l19 | $l18;

        $l20 = r0.<org.apache.lucene.util.packed.Packed64: long maskRight>;

        $l22 = $l21 & $l20;

        return $l22;
    }

    public int get(int, long[], int, int)
    {
        byte $b20;
        java.lang.StringBuilder $r13, $r14, $r15, $r17;
        long $l7, $l8, $l9, $l10, $l16, $l17, $l18, $l19, $l32;
        java.lang.AssertionError $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        java.lang.String $r16;
        org.apache.lucene.util.packed.PackedInts$Format $r1;
        org.apache.lucene.util.packed.Packed64 r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.lucene.util.packed.BulkOperation $r2;
        long[] r3, $r4;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i11, $i12, $i13, $i14, $i15, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i33, $i34, $i35, $i36, i37, i38, i39, i40, i41, $i43;

        r0 := @this: org.apache.lucene.util.packed.Packed64;

        i37 := @parameter0: int;

        r3 := @parameter1: long[];

        i38 := @parameter2: int;

        i39 := @parameter3: int;

        $z0 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if i39 > 0 goto label01;

        $r18 = new java.lang.AssertionError;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("len must be > 0 (got ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i39);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw $r18;

     label01:
        $z1 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        if i37 < 0 goto label02;

        $i36 = r0.<org.apache.lucene.util.packed.Packed64: int valueCount>;

        if i37 < $i36 goto label03;

     label02:
        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label03:
        $i0 = r0.<org.apache.lucene.util.packed.Packed64: int valueCount>;

        $i1 = $i0 - i37;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i39, $i1);

        i40 = $i2;

        $z2 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z2 != 0 goto label04;

        $i34 = i38 + $i2;

        $i33 = lengthof r3;

        if $i34 <= $i33 goto label04;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label04:
        i3 = i37;

        $r1 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $i4 = r0.<org.apache.lucene.util.packed.Packed64: int bitsPerValue>;

        $r2 = staticinvoke <org.apache.lucene.util.packed.BulkOperation: org.apache.lucene.util.packed.BulkOperation of(org.apache.lucene.util.packed.PackedInts$Format,int)>($r1, $i4);

        $i5 = interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Decoder: int longValueCount()>();

        $i35 = i37 % $i5;

        if $i35 == 0 goto label07;

        i41 = $i35;

     label05:
        $i28 = interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Decoder: int longValueCount()>();

        if i41 >= $i28 goto label06;

        if i40 <= 0 goto label06;

        $i30 = i38;

        i38 = i38 + 1;

        $i31 = i37;

        i37 = i37 + 1;

        $l32 = virtualinvoke r0.<org.apache.lucene.util.packed.Packed64: long get(int)>($i31);

        r3[$i30] = $l32;

        $i43 = (int) -1;

        i40 = i40 + $i43;

        i41 = i41 + 1;

        goto label05;

     label06:
        if i40 != 0 goto label07;

        $i29 = i37 - i3;

        return $i29;

     label07:
        $z3 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z3 != 0 goto label08;

        $i25 = interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Decoder: int longValueCount()>();

        $i26 = i37 % $i25;

        if $i26 == 0 goto label08;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label08:
        $l8 = (long) i37;

        $i6 = r0.<org.apache.lucene.util.packed.Packed64: int bitsPerValue>;

        $l7 = (long) $i6;

        $l9 = $l8 * $l7;

        $l10 = $l9 >>> 6;

        $i27 = (int) $l10;

        $z4 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z4 != 0 goto label09;

        $l17 = (long) i37;

        $i15 = r0.<org.apache.lucene.util.packed.Packed64: int bitsPerValue>;

        $l16 = (long) $i15;

        $l18 = $l17 * $l16;

        $l19 = $l18 & 63L;

        $b20 = $l19 cmp 0L;

        if $b20 == 0 goto label09;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label09:
        $i11 = interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Decoder: int longValueCount()>();

        $i21 = i40 / $i11;

        $r4 = r0.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Decoder: void decode(long[],int,long[],int,int)>($r4, $i27, r3, i38, $i21);

        $i12 = interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Decoder: int longValueCount()>();

        $i22 = $i21 * $i12;

        $i23 = i37 + $i22;

        $i24 = i40 - $i22;

        $z5 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z5 != 0 goto label10;

        if $i24 >= 0 goto label10;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label10:
        if $i23 <= i3 goto label11;

        $i14 = $i23 - i3;

        return $i14;

     label11:
        $z6 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z6 != 0 goto label12;

        if $i23 == i3 goto label12;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label12:
        $i13 = specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$MutableImpl: int get(int,long[],int,int)>($i23, r3, i38, $i24);

        return $i13;
    }

    public void set(int, long)
    {
        byte $b11;
        long $l2, $l3, l4, $l5, $l8, $l9, l10, $l13, $l14, $l15, $l16, l17, $l19, $l20, $l21, $l24, $l25, $l26, $l28, $l29, $l30, $l32, $l34, $l35, $l36, $l37, $l38, $l40, $l41, $l42;
        long[] $r1, $r2, $r3, $r4, $r5, $r6;
        int i0, $i1, i6, $i7, $i12, $i18, $i22, $i23, $i27, $i31, $i33, $i39, $i43;
        org.apache.lucene.util.packed.Packed64 r0;

        r0 := @this: org.apache.lucene.util.packed.Packed64;

        i0 := @parameter0: int;

        l17 := @parameter1: long;

        $l3 = (long) i0;

        $i1 = r0.<org.apache.lucene.util.packed.Packed64: int bitsPerValue>;

        $l2 = (long) $i1;

        l4 = $l3 * $l2;

        $l5 = l4 >>> 6;

        i6 = (int) $l5;

        $l9 = l4 & 63L;

        $i7 = r0.<org.apache.lucene.util.packed.Packed64: int bpvMinusBlockSize>;

        $l8 = (long) $i7;

        l10 = $l9 + $l8;

        $b11 = l10 cmp 0L;

        $i43 = (int) $b11;

        if $i43 > 0 goto label1;

        $r6 = r0.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        $r5 = r0.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        $l37 = $r5[i6];

        $l34 = r0.<org.apache.lucene.util.packed.Packed64: long maskRight>;

        $l32 = neg l10;

        $i33 = (int) $l32;

        $l35 = $l34 << $i33;

        $l36 = $l35 ^ -1L;

        $l41 = $l37 & $l36;

        $l38 = neg l10;

        $i39 = (int) $l38;

        $l40 = l17 << $i39;

        $l42 = $l41 | $l40;

        $r6[i6] = $l42;

        return;

     label1:
        $r2 = r0.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        $r1 = r0.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        $l16 = $r1[i6];

        $l13 = r0.<org.apache.lucene.util.packed.Packed64: long maskRight>;

        $i12 = (int) l10;

        $l14 = $l13 >>> $i12;

        $l15 = $l14 ^ -1L;

        $l20 = $l16 & $l15;

        $i18 = (int) l10;

        $l19 = l17 >>> $i18;

        $l21 = $l20 | $l19;

        $r2[i6] = $l21;

        $r4 = r0.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        $i31 = i6 + 1;

        $r3 = r0.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        $i22 = i6 + 1;

        $l25 = $r3[$i22];

        $i23 = (int) l10;

        $l24 = -1L >>> $i23;

        $l29 = $l25 & $l24;

        $l26 = 64L - l10;

        $i27 = (int) $l26;

        $l28 = l17 << $i27;

        $l30 = $l29 | $l28;

        $r4[$i31] = $l30;

        return;
    }

    public int set(int, long[], int, int)
    {
        byte $b20;
        java.lang.StringBuilder $r13, $r14, $r15, $r17;
        long $l7, $l8, $l9, $l10, $l16, $l17, $l18, $l19, $l32;
        java.lang.AssertionError $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        java.lang.String $r16;
        org.apache.lucene.util.packed.PackedInts$Format $r1;
        org.apache.lucene.util.packed.Packed64 r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.lucene.util.packed.BulkOperation $r2;
        long[] r3, $r4;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i11, $i12, $i13, $i14, $i15, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i33, $i34, $i35, $i36, i37, i38, i39, i40, i41, $i43;

        r0 := @this: org.apache.lucene.util.packed.Packed64;

        i37 := @parameter0: int;

        r3 := @parameter1: long[];

        i38 := @parameter2: int;

        i39 := @parameter3: int;

        $z0 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if i39 > 0 goto label01;

        $r18 = new java.lang.AssertionError;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("len must be > 0 (got ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i39);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw $r18;

     label01:
        $z1 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        if i37 < 0 goto label02;

        $i36 = r0.<org.apache.lucene.util.packed.Packed64: int valueCount>;

        if i37 < $i36 goto label03;

     label02:
        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label03:
        $i0 = r0.<org.apache.lucene.util.packed.Packed64: int valueCount>;

        $i1 = $i0 - i37;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i39, $i1);

        i40 = $i2;

        $z2 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z2 != 0 goto label04;

        $i34 = i38 + $i2;

        $i33 = lengthof r3;

        if $i34 <= $i33 goto label04;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label04:
        i3 = i37;

        $r1 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $i4 = r0.<org.apache.lucene.util.packed.Packed64: int bitsPerValue>;

        $r2 = staticinvoke <org.apache.lucene.util.packed.BulkOperation: org.apache.lucene.util.packed.BulkOperation of(org.apache.lucene.util.packed.PackedInts$Format,int)>($r1, $i4);

        $i5 = interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Encoder: int longValueCount()>();

        $i35 = i37 % $i5;

        if $i35 == 0 goto label07;

        i41 = $i35;

     label05:
        $i28 = interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Encoder: int longValueCount()>();

        if i41 >= $i28 goto label06;

        if i40 <= 0 goto label06;

        $i30 = i37;

        i37 = i37 + 1;

        $i31 = i38;

        i38 = i38 + 1;

        $l32 = r3[$i31];

        virtualinvoke r0.<org.apache.lucene.util.packed.Packed64: void set(int,long)>($i30, $l32);

        $i43 = (int) -1;

        i40 = i40 + $i43;

        i41 = i41 + 1;

        goto label05;

     label06:
        if i40 != 0 goto label07;

        $i29 = i37 - i3;

        return $i29;

     label07:
        $z3 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z3 != 0 goto label08;

        $i25 = interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Encoder: int longValueCount()>();

        $i26 = i37 % $i25;

        if $i26 == 0 goto label08;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label08:
        $l8 = (long) i37;

        $i6 = r0.<org.apache.lucene.util.packed.Packed64: int bitsPerValue>;

        $l7 = (long) $i6;

        $l9 = $l8 * $l7;

        $l10 = $l9 >>> 6;

        $i27 = (int) $l10;

        $z4 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z4 != 0 goto label09;

        $l17 = (long) i37;

        $i15 = r0.<org.apache.lucene.util.packed.Packed64: int bitsPerValue>;

        $l16 = (long) $i15;

        $l18 = $l17 * $l16;

        $l19 = $l18 & 63L;

        $b20 = $l19 cmp 0L;

        if $b20 == 0 goto label09;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label09:
        $i11 = interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Encoder: int longValueCount()>();

        $i21 = i40 / $i11;

        $r4 = r0.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Encoder: void encode(long[],int,long[],int,int)>(r3, i38, $r4, $i27, $i21);

        $i12 = interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Encoder: int longValueCount()>();

        $i22 = $i21 * $i12;

        $i23 = i37 + $i22;

        $i24 = i40 - $i22;

        $z5 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z5 != 0 goto label10;

        if $i24 >= 0 goto label10;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label10:
        if $i23 <= i3 goto label11;

        $i14 = $i23 - i3;

        return $i14;

     label11:
        $z6 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z6 != 0 goto label12;

        if $i23 == i3 goto label12;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label12:
        $i13 = specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$MutableImpl: int set(int,long[],int,int)>($i23, r3, i38, $i24);

        return $i13;
    }

    public java.lang.String toString()
    {
        long[] $r7;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r8, $r9;
        java.lang.String $r10;
        org.apache.lucene.util.packed.Packed64 r2;

        r2 := @this: org.apache.lucene.util.packed.Packed64;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Packed64(bitsPerValue=");

        $i0 = r2.<org.apache.lucene.util.packed.Packed64: int bitsPerValue>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size=");

        $i1 = virtualinvoke r2.<org.apache.lucene.util.packed.Packed64: int size()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", elements.length=");

        $r7 = r2.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        $i2 = lengthof $r7;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public long ramBytesUsed()
    {
        long $l5, $l6, $l7, $l8;
        long[] $r1;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.lucene.util.packed.Packed64 r0;

        r0 := @this: org.apache.lucene.util.packed.Packed64;

        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_HEADER>;

        $i1 = $i0 + 12;

        $i3 = $i1 + 8;

        $i2 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i4 = $i3 + $i2;

        $l5 = (long) $i4;

        $l6 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>($l5);

        $r1 = r0.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        $l7 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long sizeOf(long[])>($r1);

        $l8 = $l6 + $l7;

        return $l8;
    }

    public void fill(int, int, long)
    {
        boolean $z0, $z1, $z2, $z3;
        long $l9, $l10, $l11, $l12, $l14, $l15, $l16, $l17, $l18, $l20, $l21, $l22, l23, l25;
        java.lang.AssertionError $r4, $r5, $r6, $r7;
        long[] r2, $r3;
        int $i0, $i1, i2, $i3, i4, $i5, $i6, $i7, $i8, $i13, $i19, $i24, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, i35, i36, i37, i38, i39;
        org.apache.lucene.util.packed.Packed64 r0, $r1;

        r0 := @this: org.apache.lucene.util.packed.Packed64;

        i35 := @parameter0: int;

        i2 := @parameter1: int;

        l23 := @parameter2: long;

        $z0 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i33 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>(l23);

        $i34 = virtualinvoke r0.<org.apache.lucene.util.packed.Packed64: int getBitsPerValue()>();

        if $i33 <= $i34 goto label01;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label01:
        $z1 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        if i35 <= i2 goto label02;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label02:
        $i0 = r0.<org.apache.lucene.util.packed.Packed64: int bitsPerValue>;

        $i1 = staticinvoke <org.apache.lucene.util.packed.Packed64: int gcd(int,int)>(64, $i0);

        $i31 = 64 / $i1;

        $i32 = i2 - i35;

        $i3 = 3 * $i31;

        if $i32 > $i3 goto label03;

        specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$MutableImpl: void fill(int,int,long)>(i35, i2, l23);

        return;

     label03:
        i4 = i35 % $i31;

        if i4 == 0 goto label05;

        i36 = i4;

     label04:
        if i36 >= $i31 goto label05;

        $i30 = i35;

        i35 = i35 + 1;

        virtualinvoke r0.<org.apache.lucene.util.packed.Packed64: void set(int,long)>($i30, l23);

        i36 = i36 + 1;

        goto label04;

     label05:
        $z2 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z2 != 0 goto label06;

        $i28 = i35 % $i31;

        if $i28 == 0 goto label06;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label06:
        $i5 = r0.<org.apache.lucene.util.packed.Packed64: int bitsPerValue>;

        $i6 = $i31 * $i5;

        $i29 = $i6 >> 6;

        $r1 = new org.apache.lucene.util.packed.Packed64;

        $i7 = r0.<org.apache.lucene.util.packed.Packed64: int bitsPerValue>;

        specialinvoke $r1.<org.apache.lucene.util.packed.Packed64: void <init>(int,int)>($i31, $i7);

        i37 = 0;

     label07:
        if i37 >= $i31 goto label08;

        virtualinvoke $r1.<org.apache.lucene.util.packed.Packed64: void set(int,long)>(i37, l23);

        i37 = i37 + 1;

        goto label07;

     label08:
        r2 = $r1.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        $z3 = <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled>;

        if $z3 != 0 goto label09;

        $i26 = lengthof r2;

        if $i29 <= $i26 goto label09;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label09:
        $l10 = (long) i35;

        $i8 = r0.<org.apache.lucene.util.packed.Packed64: int bitsPerValue>;

        $l9 = (long) $i8;

        $l11 = $l10 * $l9;

        $l12 = $l11 >>> 6;

        $l15 = (long) i2;

        $i13 = r0.<org.apache.lucene.util.packed.Packed64: int bitsPerValue>;

        $l14 = (long) $i13;

        $l16 = $l15 * $l14;

        $l17 = $l16 >>> 6;

        $i27 = (int) $l17;

        i38 = (int) $l12;

     label10:
        if i38 >= $i27 goto label11;

        $i24 = i38 % $i29;

        l25 = r2[$i24];

        $r3 = r0.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        $r3[i38] = l25;

        i38 = i38 + 1;

        goto label10;

     label11:
        $l18 = (long) $i27;

        $l21 = $l18 << 6;

        $i19 = r0.<org.apache.lucene.util.packed.Packed64: int bitsPerValue>;

        $l20 = (long) $i19;

        $l22 = $l21 / $l20;

        i39 = (int) $l22;

     label12:
        if i39 >= i2 goto label13;

        virtualinvoke r0.<org.apache.lucene.util.packed.Packed64: void set(int,long)>(i39, l23);

        i39 = i39 + 1;

        goto label12;

     label13:
        return;
    }

    private static int gcd(int, int)
    {
        int i0, i1, $i2, $i3, $i4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= i1 goto label1;

        $i4 = staticinvoke <org.apache.lucene.util.packed.Packed64: int gcd(int,int)>(i1, i0);

        return $i4;

     label1:
        if i1 != 0 goto label2;

        return i0;

     label2:
        $i2 = i0 % i1;

        $i3 = staticinvoke <org.apache.lucene.util.packed.Packed64: int gcd(int,int)>(i1, $i2);

        return $i3;
    }

    public void clear()
    {
        long[] $r1;
        org.apache.lucene.util.packed.Packed64 r0;

        r0 := @this: org.apache.lucene.util.packed.Packed64;

        $r1 = r0.<org.apache.lucene.util.packed.Packed64: long[] blocks>;

        staticinvoke <java.util.Arrays: void fill(long[],long)>($r1, 0L);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.util.packed.Packed64: int MOD_MASK> = 63;

        <org.apache.lucene.util.packed.Packed64: int BLOCK_BITS> = 6;

        <org.apache.lucene.util.packed.Packed64: int BLOCK_SIZE> = 64;

        $r0 = class "Lorg/apache/lucene/util/packed/Packed64;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.Packed64: boolean $assertionsDisabled> = $z1;

        return;
    }
}
