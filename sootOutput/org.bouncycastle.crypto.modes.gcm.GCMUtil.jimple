abstract class org.bouncycastle.crypto.modes.gcm.GCMUtil extends java.lang.Object
{

    void <init>()
    {
        org.bouncycastle.crypto.modes.gcm.GCMUtil r0;

        r0 := @this: org.bouncycastle.crypto.modes.gcm.GCMUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static int[] asInts(byte[])
    {
        byte[] r1;
        int[] r0;
        int $i0, $i1, $i2, $i3;

        r1 := @parameter0: byte[];

        r0 = newarray (int)[4];

        $i0 = staticinvoke <org.bouncycastle.crypto.util.Pack: int bigEndianToInt(byte[],int)>(r1, 0);

        r0[0] = $i0;

        $i1 = staticinvoke <org.bouncycastle.crypto.util.Pack: int bigEndianToInt(byte[],int)>(r1, 4);

        r0[1] = $i1;

        $i2 = staticinvoke <org.bouncycastle.crypto.util.Pack: int bigEndianToInt(byte[],int)>(r1, 8);

        r0[2] = $i2;

        $i3 = staticinvoke <org.bouncycastle.crypto.util.Pack: int bigEndianToInt(byte[],int)>(r1, 12);

        r0[3] = $i3;

        return r0;
    }

    static void multiplyP(int[])
    {
        int[] r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @parameter0: int[];

        $i0 = r0[3];

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.bouncycastle.crypto.modes.gcm.GCMUtil: void shiftRight(int[])>(r0);

        if $z0 == 0 goto label3;

        $i2 = r0[0];

        $i3 = $i2 ^ -520093696;

        r0[0] = $i3;

     label3:
        return;
    }

    static void multiplyP8(int[])
    {
        int i0, $i2;
        int[] r0;

        r0 := @parameter0: int[];

        i0 = 8;

     label1:
        if i0 == 0 goto label2;

        staticinvoke <org.bouncycastle.crypto.modes.gcm.GCMUtil: void multiplyP(int[])>(r0);

        $i2 = (int) -1;

        i0 = i0 + $i2;

        goto label1;

     label2:
        return;
    }

    static void shiftRight(byte[])
    {
        byte[] r0;
        short $s4, $s5, $s8;
        byte $b0, $b3;
        int $i1, $i2, i6, i7, $i9, $i10;

        r0 := @parameter0: byte[];

        i6 = 0;

        i7 = 0;

     label1:
        $b0 = r0[i6];

        $s8 = (short) $b0;

        $s5 = $s8 & 255;

        $i9 = (int) $s5;

        $i1 = $i9 >>> 1;

        $i2 = $i1 | i7;

        $b3 = (byte) $i2;

        r0[i6] = $b3;

        i6 = i6 + 1;

        if i6 != 16 goto label2;

        goto label3;

     label2:
        $s4 = $s5 & 1;

        $i10 = (int) $s4;

        i7 = $i10 << 7;

        goto label1;

     label3:
        return;
    }

    static void shiftRight(int[])
    {
        int[] r0;
        int $i0, $i1, $i2, i3, i4;

        r0 := @parameter0: int[];

        i3 = 0;

        i4 = 0;

     label1:
        $i2 = r0[i3];

        $i0 = $i2 >>> 1;

        $i1 = $i0 | i4;

        r0[i3] = $i1;

        i3 = i3 + 1;

        if i3 != 4 goto label2;

        goto label3;

     label2:
        i4 = $i2 << 31;

        goto label1;

     label3:
        return;
    }

    static void xor(byte[], byte[])
    {
        byte[] r0, r1;
        byte $b0, $b1, $b2, $b3;
        int i4, $i6;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i4 = 15;

     label1:
        if i4 < 0 goto label2;

        $b1 = r0[i4];

        $b0 = r1[i4];

        $b2 = $b1 ^ $b0;

        $b3 = (byte) $b2;

        r0[i4] = $b3;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label1;

     label2:
        return;
    }

    static void xor(int[], int[])
    {
        int[] r0, r1;
        int $i0, $i1, $i2, i3, $i5;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i3 = 3;

     label1:
        if i3 < 0 goto label2;

        $i1 = r0[i3];

        $i0 = r1[i3];

        $i2 = $i1 ^ $i0;

        r0[i3] = $i2;

        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label1;

     label2:
        return;
    }
}
