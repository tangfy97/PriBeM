public class org.apache.xml.utils.NodeVector extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
{
    private int m_blocksize;
    private int[] m_map;
    protected int m_firstFree;
    private int m_mapSize;

    public void <init>()
    {
        org.apache.xml.utils.NodeVector r0;

        r0 := @this: org.apache.xml.utils.NodeVector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = 0;

        r0.<org.apache.xml.utils.NodeVector: int m_blocksize> = 32;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = 0;

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.xml.utils.NodeVector r0;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = 0;

        r0.<org.apache.xml.utils.NodeVector: int m_blocksize> = i0;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = 0;

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.xml.utils.NodeVector r0, r2;
        int[] $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1;
        java.lang.Object $r1;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (org.apache.xml.utils.NodeVector) $r1;

        $r3 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if null == $r3 goto label1;

        $r5 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r4 = r2.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if $r5 != $r4 goto label1;

        $r6 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i0 = lengthof $r6;

        $r7 = newarray (int)[$i0];

        r2.<org.apache.xml.utils.NodeVector: int[] m_map> = $r7;

        $r10 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r9 = r2.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r8 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i1 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, $i1);

     label1:
        return r2;
    }

    public int size()
    {
        int $i0;
        org.apache.xml.utils.NodeVector r0;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        return $i0;
    }

    public void addElement(int)
    {
        org.apache.xml.utils.NodeVector r0;
        int[] $r1, r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i3 := @parameter0: int;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i2 = $i0 + 1;

        $i1 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        if $i2 < $i1 goto label2;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if null != $r1 goto label1;

        $i10 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $r4 = newarray (int)[$i10];

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = $r4;

        $i11 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i11;

        goto label2;

     label1:
        $i5 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        $i4 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $i6 = $i5 + $i4;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i6;

        $i7 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        r2 = newarray (int)[$i7];

        $r3 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i8 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i9 = $i8 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i9);

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = r2;

     label2:
        $r5 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i12 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $r5[$i12] = i3;

        $i13 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i14 = $i13 + 1;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i14;

        return;
    }

    public final void push(int)
    {
        org.apache.xml.utils.NodeVector r0;
        int[] $r1, r2, $r3, $r4, $r5;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i2 := @parameter0: int;

        i10 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i1 = i10 + 1;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        if $i1 < $i0 goto label2;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if null != $r1 goto label1;

        $i8 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $r4 = newarray (int)[$i8];

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = $r4;

        $i9 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i9;

        goto label2;

     label1:
        $i4 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        $i3 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $i5 = $i4 + $i3;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i5;

        $i6 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        r2 = newarray (int)[$i6];

        $r3 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i7 = i10 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i7);

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = r2;

     label2:
        $r5 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r5[i10] = i2;

        i11 = i10 + 1;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = i11;

        return;
    }

    public final int pop()
    {
        org.apache.xml.utils.NodeVector r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, i3, $i4, $i6;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i1 = $i0 - 1;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i1;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        i3 = $r1[$i2];

        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i4 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i6 = (int) -1;

        $r2[$i4] = $i6;

        return i3;
    }

    public final int popAndTop()
    {
        org.apache.xml.utils.NodeVector r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i1 = $i0 - 1;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i1;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i8 = (int) -1;

        $r1[$i2] = $i8;

        $i3 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if $i3 != 0 goto label1;

        $i10 = (int) -1;

        $i6 = $i10;

        goto label2;

     label1:
        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i4 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i5 = $i4 - 1;

        $i6 = $r2[$i5];

     label2:
        return $i6;
    }

    public final void popQuick()
    {
        int[] $r1;
        org.apache.xml.utils.NodeVector r0;
        int $i0, $i1, $i2, $i4;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i1 = $i0 - 1;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i1;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i4 = (int) -1;

        $r1[$i2] = $i4;

        return;
    }

    public final int peepOrNull()
    {
        org.apache.xml.utils.NodeVector r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i5;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if null == $r1 goto label1;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i1 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i2 = $i1 - 1;

        $i3 = $r2[$i2];

        goto label2;

     label1:
        $i5 = (int) -1;

        $i3 = $i5;

     label2:
        return $i3;
    }

    public final void pushPair(int, int)
    {
        org.apache.xml.utils.NodeVector r0;
        int[] $r1, r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i3 := @parameter0: int;

        i4 := @parameter1: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if null != $r1 goto label1;

        $i10 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $r4 = newarray (int)[$i10];

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = $r4;

        $i11 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i11;

        goto label2;

     label1:
        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i2 = $i0 + 2;

        $i1 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        if $i2 < $i1 goto label2;

        $i6 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        $i5 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $i7 = $i6 + $i5;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i7;

        $i8 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        r2 = newarray (int)[$i8];

        $r3 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i9 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i9);

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = r2;

     label2:
        $r5 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i12 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $r5[$i12] = i3;

        $r6 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i13 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i14 = $i13 + 1;

        $r6[$i14] = i4;

        $i15 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i16 = $i15 + 2;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i16;

        return;
    }

    public final void popPair()
    {
        org.apache.xml.utils.NodeVector r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i1 = $i0 - 2;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i1;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i6 = (int) -1;

        $r1[$i2] = $i6;

        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i3 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i4 = $i3 + 1;

        $i8 = (int) -1;

        $r2[$i4] = $i8;

        return;
    }

    public final void setTail(int)
    {
        int[] $r1;
        org.apache.xml.utils.NodeVector r0;
        int $i0, i1, $i2;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i1 := @parameter0: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i2 = $i0 - 1;

        $r1[$i2] = i1;

        return;
    }

    public final void setTailSub1(int)
    {
        int[] $r1;
        org.apache.xml.utils.NodeVector r0;
        int $i0, i1, $i2;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i1 := @parameter0: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i2 = $i0 - 2;

        $r1[$i2] = i1;

        return;
    }

    public final int peepTail()
    {
        int[] $r1;
        org.apache.xml.utils.NodeVector r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i1 = $i0 - 1;

        $i2 = $r1[$i1];

        return $i2;
    }

    public final int peepTailSub1()
    {
        int[] $r1;
        org.apache.xml.utils.NodeVector r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i1 = $i0 - 2;

        $i2 = $r1[$i1];

        return $i2;
    }

    public void insertInOrder(int)
    {
        int[] $r1;
        org.apache.xml.utils.NodeVector r0;
        int $i0, i1, $i2, i3;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i1 := @parameter0: int;

        i3 = 0;

        goto label3;

     label1:
        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i2 = $r1[i3];

        if i1 >= $i2 goto label2;

        virtualinvoke r0.<org.apache.xml.utils.NodeVector: void insertElementAt(int,int)>(i1, i3);

        return;

     label2:
        i3 = i3 + 1;

     label3:
        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if i3 < $i0 goto label1;

        virtualinvoke r0.<org.apache.xml.utils.NodeVector: void addElement(int)>(i1);

        return;
    }

    public void insertElementAt(int, int)
    {
        org.apache.xml.utils.NodeVector r0;
        int[] $r1, $r2, $r3, $r4, r5, $r6, $r7;
        int $i0, $i1, $i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i4 := @parameter0: int;

        i3 := @parameter1: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if null != $r1 goto label1;

        $i16 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $r7 = newarray (int)[$i16];

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = $r7;

        $i17 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i17;

        goto label2;

     label1:
        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i2 = $i0 + 1;

        $i1 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        if $i2 < $i1 goto label2;

        $i11 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        $i10 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $i12 = $i11 + $i10;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i12;

        $i13 = r0.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        r5 = newarray (int)[$i13];

        $r6 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i14 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i15 = $i14 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r5, 0, $i15);

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = r5;

     label2:
        $i18 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i19 = $i18 - 1;

        if i3 > $i19 goto label3;

        $r4 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r3 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i9 = i3 + 1;

        $i7 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i8 = $i7 - i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i3, $r3, $i9, $i8);

     label3:
        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r2[i3] = i4;

        $i5 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i6 = $i5 + 1;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i6;

        return;
    }

    public void appendNodes(org.apache.xml.utils.NodeVector)
    {
        org.apache.xml.utils.NodeVector r0, r1;
        int[] $r2, r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;

        r1 := @this: org.apache.xml.utils.NodeVector;

        r0 := @parameter0: org.apache.xml.utils.NodeVector;

        $i0 = virtualinvoke r0.<org.apache.xml.utils.NodeVector: int size()>();

        $r2 = r1.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if null != $r2 goto label1;

        $i11 = r1.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $i12 = $i0 + $i11;

        r1.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i12;

        $i13 = r1.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        $r5 = newarray (int)[$i13];

        r1.<org.apache.xml.utils.NodeVector: int[] m_map> = $r5;

        goto label2;

     label1:
        $i1 = r1.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i3 = $i1 + $i0;

        $i2 = r1.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        if $i3 < $i2 goto label2;

        $i6 = r1.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        $i4 = r1.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $i5 = $i0 + $i4;

        $i7 = $i6 + $i5;

        r1.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i7;

        $i8 = r1.<org.apache.xml.utils.NodeVector: int m_mapSize>;

        r3 = newarray (int)[$i8];

        $r4 = r1.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i9 = r1.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i10 = $i9 + $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r3, 0, $i10);

        r1.<org.apache.xml.utils.NodeVector: int[] m_map> = r3;

     label2:
        $r6 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r7 = r1.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i14 = r1.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r7, $i14, $i0);

        $i15 = r1.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i16 = $i15 + $i0;

        r1.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i16;

        return;
    }

    public void removeAllElements()
    {
        int[] $r1, $r2;
        org.apache.xml.utils.NodeVector r0;
        int $i0, i1, $i3;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if null != $r1 goto label1;

        return;

     label1:
        i1 = 0;

        goto label3;

     label2:
        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i3 = (int) -1;

        $r2[i1] = $i3;

        i1 = i1 + 1;

     label3:
        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if i1 < $i0 goto label2;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = 0;

        return;
    }

    public void RemoveAllNoClear()
    {
        int[] $r1;
        org.apache.xml.utils.NodeVector r0;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if null != $r1 goto label1;

        return;

     label1:
        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = 0;

        return;
    }

    public boolean removeElement(int)
    {
        org.apache.xml.utils.NodeVector r0;
        int[] $r1, $r2, $r3, $r4, $r5;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i12;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i2 := @parameter0: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if null != $r1 goto label1;

        return 0;

     label1:
        i10 = 0;

        goto label6;

     label2:
        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        i1 = $r2[i10];

        if i1 != i2 goto label5;

        $i3 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if i10 <= $i3 goto label3;

        $r5 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i9 = i10 + 1;

        $r4 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i8 = i10 - 1;

        $i6 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i7 = $i6 - i10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i9, $r4, $i8, $i7);

        goto label4;

     label3:
        $r3 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i12 = (int) -1;

        $r3[i10] = $i12;

     label4:
        $i4 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i5 = $i4 - 1;

        r0.<org.apache.xml.utils.NodeVector: int m_firstFree> = $i5;

        return 1;

     label5:
        i10 = i10 + 1;

     label6:
        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if i10 < $i0 goto label2;

        return 0;
    }

    public void removeElementAt(int)
    {
        org.apache.xml.utils.NodeVector r0;
        int[] $r1, $r2, $r3, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if null != $r1 goto label1;

        return;

     label1:
        $i1 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if i0 <= $i1 goto label2;

        $r4 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i5 = i0 + 1;

        $r3 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i4 = i0 - 1;

        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i3 = $i2 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i5, $r3, $i4, $i3);

        goto label3;

     label2:
        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i7 = (int) -1;

        $r2[i0] = $i7;

     label3:
        return;
    }

    public void setElementAt(int, int)
    {
        org.apache.xml.utils.NodeVector r0;
        int[] $r1, $r2, $r3;
        int i0, i1, $i2, $i3, $i5;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if null != $r1 goto label1;

        $i2 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        $r3 = newarray (int)[$i2];

        r0.<org.apache.xml.utils.NodeVector: int[] m_map> = $r3;

        $i3 = r0.<org.apache.xml.utils.NodeVector: int m_blocksize>;

        r0.<org.apache.xml.utils.NodeVector: int m_mapSize> = $i3;

     label1:
        $i5 = (int) -1;

        if i0 != $i5 goto label2;

        virtualinvoke r0.<org.apache.xml.utils.NodeVector: void addElement(int)>(i1);

     label2:
        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $r2[i0] = i1;

        return;
    }

    public int elementAt(int)
    {
        int[] $r1, $r2;
        org.apache.xml.utils.NodeVector r0;
        int i0, $i1, $i3;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if null != $r1 goto label1;

        $i3 = (int) -1;

        return $i3;

     label1:
        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i1 = $r2[i0];

        return $i1;
    }

    public boolean contains(int)
    {
        int[] $r1, $r2;
        org.apache.xml.utils.NodeVector r0;
        int $i0, i1, i2, i3;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i2 := @parameter0: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if null != $r1 goto label1;

        return 0;

     label1:
        i3 = 0;

        goto label4;

     label2:
        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        i1 = $r2[i3];

        if i1 != i2 goto label3;

        return 1;

     label3:
        i3 = i3 + 1;

     label4:
        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if i3 < $i0 goto label2;

        return 0;
    }

    public int indexOf(int, int)
    {
        org.apache.xml.utils.NodeVector r0;
        int[] $r1, $r2;
        int i0, $i1, i2, i3, i4, $i6, $i8;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if null != $r1 goto label1;

        $i6 = (int) -1;

        return $i6;

     label1:
        i4 = i0;

        goto label4;

     label2:
        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        i2 = $r2[i4];

        if i2 != i3 goto label3;

        return i4;

     label3:
        i4 = i4 + 1;

     label4:
        $i1 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if i4 < $i1 goto label2;

        $i8 = (int) -1;

        return $i8;
    }

    public int indexOf(int)
    {
        org.apache.xml.utils.NodeVector r0;
        int[] $r1, $r2;
        int $i0, i1, i2, i3, $i5, $i7;

        r0 := @this: org.apache.xml.utils.NodeVector;

        i2 := @parameter0: int;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        if null != $r1 goto label1;

        $i5 = (int) -1;

        return $i5;

     label1:
        i3 = 0;

        goto label4;

     label2:
        $r2 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        i1 = $r2[i3];

        if i1 != i2 goto label3;

        return i3;

     label3:
        i3 = i3 + 1;

     label4:
        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        if i3 < $i0 goto label2;

        $i7 = (int) -1;

        return $i7;
    }

    public void sort(int[], int, int) throws java.lang.Exception
    {
        org.apache.xml.utils.NodeVector r1;
        int[] r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20, $i21, $i23;

        r1 := @this: org.apache.xml.utils.NodeVector;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i17 = i0;

        i18 = i1;

        if i0 < i1 goto label1;

        return;

     label1:
        $i2 = i1 - 1;

        if i0 != $i2 goto label3;

        $i15 = r0[i0];

        $i14 = r0[i1];

        if $i15 <= $i14 goto label2;

        i19 = r0[i0];

        $i16 = r0[i1];

        r0[i0] = $i16;

        r0[i1] = i19;

     label2:
        return;

     label3:
        $i3 = i0 + i1;

        $i4 = $i3 / 2;

        i20 = r0[$i4];

        $i5 = i0 + i1;

        $i7 = $i5 / 2;

        $i6 = r0[i1];

        r0[$i7] = $i6;

        r0[i1] = i20;

        goto label9;

     label4:
        i17 = i17 + 1;

     label5:
        $i8 = r0[i17];

        if $i8 > i20 goto label7;

        if i17 < i18 goto label4;

        goto label7;

     label6:
        $i23 = (int) -1;

        i18 = i18 + $i23;

     label7:
        $i21 = r0[i18];

        if i20 > $i21 goto label8;

        if i17 < i18 goto label6;

     label8:
        if i17 >= i18 goto label9;

        i9 = r0[i17];

        $i10 = r0[i18];

        r0[i17] = $i10;

        r0[i18] = i9;

     label9:
        if i17 < i18 goto label5;

        $i11 = r0[i18];

        r0[i1] = $i11;

        r0[i18] = i20;

        $i12 = i17 - 1;

        virtualinvoke r1.<org.apache.xml.utils.NodeVector: void sort(int[],int,int)>(r0, i0, $i12);

        $i13 = i18 + 1;

        virtualinvoke r1.<org.apache.xml.utils.NodeVector: void sort(int[],int,int)>(r0, $i13, i1);

        return;
    }

    public void sort() throws java.lang.Exception
    {
        int[] $r1;
        org.apache.xml.utils.NodeVector r0;
        int $i0, $i1;

        r0 := @this: org.apache.xml.utils.NodeVector;

        $r1 = r0.<org.apache.xml.utils.NodeVector: int[] m_map>;

        $i0 = r0.<org.apache.xml.utils.NodeVector: int m_firstFree>;

        $i1 = $i0 - 1;

        virtualinvoke r0.<org.apache.xml.utils.NodeVector: void sort(int[],int,int)>($r1, 0, $i1);

        return;
    }
}
