final class com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry extends com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongEntry implements com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry
{
    volatile long time;
    com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry nextExpirable;
    com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry previousExpirable;

    void <init>(java.lang.Object, int, com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry r2, $r3, $r4;
        int i0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongEntry: void <init>(java.lang.Object,int,com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)>(r1, i0, r2);

        r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry: long time> = 9223372036854775807L;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry nullEntry()>();

        r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry nextExpirable> = $r3;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry nullEntry()>();

        r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry previousExpirable> = $r4;

        return;
    }

    public long getExpirationTime()
    {
        long $l0;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry;

        $l0 = r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry: long time>;

        return $l0;
    }

    public void setExpirationTime(long)
    {
        long l0;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry;

        l0 := @parameter0: long;

        r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry: long time> = l0;

        return;
    }

    public com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry getNextExpirable()
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry $r1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry nextExpirable>;

        return $r1;
    }

    public void setNextExpirable(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry r1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry;

        r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry nextExpirable> = r1;

        return;
    }

    public com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry getPreviousExpirable()
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry $r1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry previousExpirable>;

        return $r1;
    }

    public void setPreviousExpirable(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry r1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry;

        r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongExpirableEntry: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry previousExpirable> = r1;

        return;
    }
}
