public class riotcmd.infer extends arq.cmdline.CmdGeneral
{
    static final arq.cmdline.ArgDecl argRDFS;
    private com.hp.hpl.jena.rdf.model.Model vocab;

    public static transient void main(java.lang.String[])
    {
        riotcmd.infer $r0;
        java.lang.String[] r1;

        r1 := @parameter0: java.lang.String[];

        $r0 = new riotcmd.infer;

        specialinvoke $r0.<riotcmd.infer: void <init>(java.lang.String[])>(r1);

        virtualinvoke $r0.<riotcmd.infer: void mainRun()>();

        return;
    }

    protected void <init>(java.lang.String[])
    {
        riotcmd.infer r0;
        arq.cmdline.ArgDecl $r2;
        java.lang.String[] r1;

        r0 := @this: riotcmd.infer;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<arq.cmdline.CmdGeneral: void <init>(java.lang.String[])>(r1);

        $r2 = <riotcmd.infer: arq.cmdline.ArgDecl argRDFS>;

        specialinvoke r0.<arq.cmdline.CmdGeneral: arq.cmdline.CmdLineArgs add(arq.cmdline.ArgDecl)>($r2);

        return;
    }

    protected java.lang.String getSummary()
    {
        riotcmd.infer r0;

        r0 := @this: riotcmd.infer;

        return "infer --rdfs=vocab FILE ...";
    }

    protected void processModulesAndArgs()
    {
        arq.cmdline.ArgDecl $r1, $r2, $r9;
        riotcmd.infer r0;
        com.hp.hpl.jena.util.FileManager $r4;
        com.hp.hpl.jena.rdf.model.Model $r5;
        arq.cmd.CmdException $r6;
        java.lang.StringBuilder $r7, $r8, $r11;
        java.lang.String $r3, $r10, $r12;
        boolean $z0;

        r0 := @this: riotcmd.infer;

        $r1 = <riotcmd.infer: arq.cmdline.ArgDecl argRDFS>;

        $z0 = virtualinvoke r0.<riotcmd.infer: boolean contains(arq.cmdline.ArgDecl)>($r1);

        if $z0 != 0 goto label1;

        $r6 = new arq.cmd.CmdException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Required argument missing: --");

        $r9 = <riotcmd.infer: arq.cmdline.ArgDecl argRDFS>;

        $r10 = virtualinvoke $r9.<arq.cmdline.ArgDecl: java.lang.String getKeyName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<arq.cmd.CmdException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        $r2 = <riotcmd.infer: arq.cmdline.ArgDecl argRDFS>;

        $r3 = virtualinvoke r0.<riotcmd.infer: java.lang.String getValue(arq.cmdline.ArgDecl)>($r2);

        $r4 = staticinvoke <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager get()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model loadModel(java.lang.String)>($r3);

        r0.<riotcmd.infer: com.hp.hpl.jena.rdf.model.Model vocab> = $r5;

        return;
    }

    protected void exec()
    {
        java.io.PrintStream $r0, $r7;
        java.util.Iterator $r6;
        org.apache.jena.riot.system.StreamRDF $r1, $r4;
        java.util.List $r5;
        riotcmd.infer r2;
        com.hp.hpl.jena.rdf.model.Model $r3;
        java.lang.Object $r8;
        java.lang.String r9;
        boolean $z0, $z1;

        r2 := @this: riotcmd.infer;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        $r1 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF writer(java.io.OutputStream)>($r0);

        $r3 = r2.<riotcmd.infer: com.hp.hpl.jena.rdf.model.Model vocab>;

        $r4 = staticinvoke <org.apache.jena.riot.process.inf.InfFactory: org.apache.jena.riot.system.StreamRDF inf(org.apache.jena.riot.system.StreamRDF,com.hp.hpl.jena.rdf.model.Model)>($r1, $r3);

        $r5 = virtualinvoke r2.<riotcmd.infer: java.util.List getPositionalOrStdin()>();

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("-");

     label1:
        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) $r8;

        specialinvoke r2.<riotcmd.infer: void processFile(java.lang.String,org.apache.jena.riot.system.StreamRDF)>(r9, $r4);

        goto label2;

     label3:
        $r7 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <org.apache.jena.atlas.io.IO: void flush(java.io.OutputStream)>($r7);

        return;
    }

    private void processFile(java.lang.String, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.Lang $r1, $r3, $r6;
        org.apache.jena.riot.system.StreamRDF r2;
        riotcmd.infer r5;
        java.lang.String r0;
        boolean $z0, $z1;
        java.io.InputStream $r4;

        r5 := @this: riotcmd.infer;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.jena.riot.system.StreamRDF;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("-");

        if $z0 == 0 goto label1;

        $r6 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NQUADS>;

        goto label2;

     label1:
        $r1 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NQUADS>;

        staticinvoke <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang filenameToLang(java.lang.String,org.apache.jena.riot.Lang)>(r0, $r1);

     label2:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("-");

        if $z1 == 0 goto label3;

        $r4 = <java.lang.System: java.io.InputStream in>;

        $r3 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NQUADS>;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void parse(org.apache.jena.riot.system.StreamRDF,java.io.InputStream,java.lang.String,org.apache.jena.riot.Lang,com.hp.hpl.jena.sparql.util.Context)>(r2, $r4, null, $r3, null);

        goto label4;

     label3:
        staticinvoke <org.apache.jena.riot.RDFDataMgr: void parse(org.apache.jena.riot.system.StreamRDF,java.lang.String)>(r2, r0);

     label4:
        return;
    }

    protected java.lang.String getCommandName()
    {
        riotcmd.infer r0;

        r0 := @this: riotcmd.infer;

        return "infer";
    }

    static void <clinit>()
    {
        arq.cmdline.ArgDecl $r0;
        java.lang.String[] $r1;

        $r0 = new arq.cmdline.ArgDecl;

        $r1 = newarray (java.lang.String)[0];

        specialinvoke $r0.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "rdfs", $r1);

        <riotcmd.infer: arq.cmdline.ArgDecl argRDFS> = $r0;

        return;
    }
}
