public class nu.xom.Serializer extends java.lang.Object
{
    private nu.xom.TextWriter escaper;
    private boolean preserveBaseURI;
    private org.xml.sax.helpers.NamespaceSupport namespaces;

    public void <init>(java.io.OutputStream)
    {
        org.xml.sax.helpers.NamespaceSupport $r1;
        java.io.OutputStream r2;
        nu.xom.Serializer r0;
        java.lang.RuntimeException $r4;
        java.io.UnsupportedEncodingException $r3;

        r0 := @this: nu.xom.Serializer;

        r2 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<nu.xom.Serializer: boolean preserveBaseURI> = 0;

        $r1 = new org.xml.sax.helpers.NamespaceSupport;

        specialinvoke $r1.<org.xml.sax.helpers.NamespaceSupport: void <init>()>();

        r0.<nu.xom.Serializer: org.xml.sax.helpers.NamespaceSupport namespaces> = $r1;

     label1:
        specialinvoke r0.<nu.xom.Serializer: void setOutputStream(java.io.OutputStream,java.lang.String)>(r2, "UTF-8");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("The VM is broken. It does not understand UTF-8.");

        throw $r4;

     label4:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public void <init>(java.io.OutputStream, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        org.xml.sax.helpers.NamespaceSupport $r1;
        java.io.OutputStream r3;
        nu.xom.Serializer r0;
        java.lang.String r2;
        java.lang.NullPointerException $r4;

        r0 := @this: nu.xom.Serializer;

        r3 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<nu.xom.Serializer: boolean preserveBaseURI> = 0;

        $r1 = new org.xml.sax.helpers.NamespaceSupport;

        specialinvoke $r1.<org.xml.sax.helpers.NamespaceSupport: void <init>()>();

        r0.<nu.xom.Serializer: org.xml.sax.helpers.NamespaceSupport namespaces> = $r1;

        if r2 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null encoding");

        throw $r4;

     label1:
        specialinvoke r0.<nu.xom.Serializer: void setOutputStream(java.io.OutputStream,java.lang.String)>(r3, r2);

        return;
    }

    public void setOutputStream(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r5;
        nu.xom.TextWriter $r2, $r4;
        nu.xom.Serializer r0;
        int $i0, $i1;
        java.lang.String $r1, $r3;
        boolean $z0, z1;

        r0 := @this: nu.xom.Serializer;

        r5 := @parameter0: java.io.OutputStream;

        virtualinvoke r0.<nu.xom.Serializer: void flush()>();

        $i0 = virtualinvoke r0.<nu.xom.Serializer: int getMaxLength()>();

        $i1 = virtualinvoke r0.<nu.xom.Serializer: int getIndent()>();

        $r1 = virtualinvoke r0.<nu.xom.Serializer: java.lang.String getLineSeparator()>();

        $z0 = virtualinvoke r0.<nu.xom.Serializer: boolean getUnicodeNormalizationFormC()>();

        $r2 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $r3 = virtualinvoke $r2.<nu.xom.TextWriter: java.lang.String getEncoding()>();

        $r4 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        z1 = $r4.<nu.xom.TextWriter: boolean lineSeparatorSet>;

        specialinvoke r0.<nu.xom.Serializer: void setOutputStream(java.io.OutputStream,java.lang.String)>(r5, $r3);

        virtualinvoke r0.<nu.xom.Serializer: void setIndent(int)>($i1);

        virtualinvoke r0.<nu.xom.Serializer: void setMaxLength(int)>($i0);

        virtualinvoke r0.<nu.xom.Serializer: void setUnicodeNormalizationFormC(boolean)>($z0);

        if z1 == 0 goto label1;

        virtualinvoke r0.<nu.xom.Serializer: void setLineSeparator(java.lang.String)>($r1);

     label1:
        return;
    }

    private void setOutputStream(java.io.OutputStream, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        nu.xom.TextWriter $r13;
        nu.xom.EBCDICWriter $r11;
        java.lang.NullPointerException $r9;
        nu.xom.Serializer r5;
        java.util.Locale $r2;
        java.io.OutputStreamWriter $r4, $r6, $r7, $r8, r10;
        java.lang.String r1, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.io.OutputStream r0;
        nu.xom.UnsynchronizedBufferedWriter $r12;

        r5 := @this: nu.xom.Serializer;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null OutputStream");

        throw $r9;

     label1:
        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("UTF-8");

        if $z0 == 0 goto label2;

        $r8 = new java.io.OutputStreamWriter;

        specialinvoke $r8.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r0, "UTF-8");

        r10 = $r8;

        goto label9;

     label2:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16");

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("ISO-10646-UCS-2");

        if $z2 == 0 goto label4;

     label3:
        $r4 = new java.io.OutputStreamWriter;

        specialinvoke $r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r0, "UnicodeBig");

        r10 = $r4;

        goto label9;

     label4:
        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("IBM037");

        if $z3 != 0 goto label5;

        $z4 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("CP037");

        if $z4 != 0 goto label5;

        $z5 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("EBCDIC-CP-US");

        if $z5 != 0 goto label5;

        $z6 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("EBCDIC-CP-CA");

        if $z6 != 0 goto label5;

        $z7 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("EBCDIC-CP-WA");

        if $z7 != 0 goto label5;

        $z8 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("EBCDIC-CP-NL");

        if $z8 != 0 goto label5;

        $z9 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("CSIBM037");

        if $z9 == 0 goto label6;

     label5:
        $r11 = new nu.xom.EBCDICWriter;

        specialinvoke $r11.<nu.xom.EBCDICWriter: void <init>(java.io.OutputStream)>(r0);

        r10 = $r11;

        goto label9;

     label6:
        $z10 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("ISO-8859-11");

        if $z10 != 0 goto label7;

        $z11 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("TIS-620");

        if $z11 == 0 goto label8;

     label7:
        $r6 = new java.io.OutputStreamWriter;

        specialinvoke $r6.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r0, "TIS620");

        r10 = $r6;

        goto label9;

     label8:
        $r7 = new java.io.OutputStreamWriter;

        specialinvoke $r7.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r0, r1);

        r10 = $r7;

     label9:
        $r12 = new nu.xom.UnsynchronizedBufferedWriter;

        specialinvoke $r12.<nu.xom.UnsynchronizedBufferedWriter: void <init>(java.io.Writer)>(r10);

        $r13 = staticinvoke <nu.xom.TextWriterFactory: nu.xom.TextWriter getTextWriter(java.io.Writer,java.lang.String)>($r12, r1);

        r5.<nu.xom.Serializer: nu.xom.TextWriter escaper> = $r13;

        return;
    }

    public void write(nu.xom.Document) throws java.io.IOException
    {
        org.xml.sax.helpers.NamespaceSupport $r2, $r3;
        nu.xom.TextWriter $r1, $r5, $r7;
        nu.xom.Node $r6;
        nu.xom.Serializer r0;
        int $i0, i1;
        nu.xom.Document r4;

        r0 := @this: nu.xom.Serializer;

        r4 := @parameter0: nu.xom.Document;

        $r1 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r1.<nu.xom.TextWriter: void reset()>();

        $r2 = r0.<nu.xom.Serializer: org.xml.sax.helpers.NamespaceSupport namespaces>;

        virtualinvoke $r2.<org.xml.sax.helpers.NamespaceSupport: void reset()>();

        $r3 = r0.<nu.xom.Serializer: org.xml.sax.helpers.NamespaceSupport namespaces>;

        virtualinvoke $r3.<org.xml.sax.helpers.NamespaceSupport: boolean declarePrefix(java.lang.String,java.lang.String)>("", "");

        virtualinvoke r0.<nu.xom.Serializer: void writeXMLDeclaration()>();

        $i0 = virtualinvoke r4.<nu.xom.Document: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r6 = virtualinvoke r4.<nu.xom.Document: nu.xom.Node getChild(int)>(i1);

        virtualinvoke r0.<nu.xom.Serializer: void writeChild(nu.xom.Node)>($r6);

        $r7 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r7.<nu.xom.TextWriter: void breakLine()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r5.<nu.xom.TextWriter: void flush()>();

        return;
    }

    protected void writeXMLDeclaration() throws java.io.IOException
    {
        nu.xom.TextWriter $r1, $r2, $r3, $r5, $r6;
        nu.xom.Serializer r0;
        java.lang.String $r4;

        r0 := @this: nu.xom.Serializer;

        $r1 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r1.<nu.xom.TextWriter: void writeUncheckedMarkup(java.lang.String)>("<?xml version=\"1.0\" encoding=\"");

        $r3 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $r2 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $r4 = virtualinvoke $r2.<nu.xom.TextWriter: java.lang.String getEncoding()>();

        virtualinvoke $r3.<nu.xom.TextWriter: void writeUncheckedMarkup(java.lang.String)>($r4);

        $r5 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r5.<nu.xom.TextWriter: void writeUncheckedMarkup(java.lang.String)>("\"?>");

        $r6 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r6.<nu.xom.TextWriter: void breakLine()>();

        return;
    }

    protected void write(nu.xom.Element) throws java.io.IOException
    {
        nu.xom.TextWriter $r2, $r3, $r5;
        nu.xom.Element r0;
        nu.xom.Serializer r1;
        java.lang.StringBuffer $r8, $r10, $r12;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String $r9, $r11, $r13;
        nu.xom.Text $r7, r15, r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        nu.xom.Node $r4, $r6, $r14;

        r1 := @this: nu.xom.Serializer;

        r0 := @parameter0: nu.xom.Element;

        z6 = 0;

        $i0 = virtualinvoke r0.<nu.xom.Element: int getChildCount()>();

        i3 = 0;

     label01:
        if i3 >= $i0 goto label04;

        $r14 = virtualinvoke r0.<nu.xom.Element: nu.xom.Node getChild(int)>(i3);

        $z4 = virtualinvoke $r14.<nu.xom.Node: boolean isText()>();

        if $z4 == 0 goto label02;

        r15 = (nu.xom.Text) $r14;

        $z5 = virtualinvoke r15.<nu.xom.Text: boolean isEmpty()>();

        if $z5 == 0 goto label02;

        goto label03;

     label02:
        z6 = 1;

        goto label04;

     label03:
        i3 = i3 + 1;

        goto label01;

     label04:
        if z6 == 0 goto label11;

        $r2 = r1.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $z0 = virtualinvoke $r2.<nu.xom.TextWriter: boolean isPreserveSpace()>();

        virtualinvoke r1.<nu.xom.Serializer: void writeStartTag(nu.xom.Element)>(r0);

        i4 = 0;

     label05:
        if i4 >= $i0 goto label10;

        $r4 = virtualinvoke r0.<nu.xom.Element: nu.xom.Node getChild(int)>(i4);

        $r5 = r1.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $z1 = virtualinvoke $r5.<nu.xom.TextWriter: boolean getNFC()>();

        if $z1 == 0 goto label08;

        $z2 = virtualinvoke $r4.<nu.xom.Node: boolean isText()>();

        if $z2 == 0 goto label08;

        r16 = (nu.xom.Text) $r4;

     label06:
        $i1 = $i0 - 1;

        if i4 >= $i1 goto label07;

        $i2 = i4 + 1;

        $r6 = virtualinvoke r0.<nu.xom.Element: nu.xom.Node getChild(int)>($i2);

        $z3 = virtualinvoke $r6.<nu.xom.Node: boolean isText()>();

        if $z3 == 0 goto label07;

        $r7 = new nu.xom.Text;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke r16.<nu.xom.Text: java.lang.String getValue()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r6.<nu.xom.Node: java.lang.String getValue()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<nu.xom.Text: void <init>(java.lang.String)>($r13);

        r16 = $r7;

        i4 = i4 + 1;

        goto label06;

     label07:
        virtualinvoke r1.<nu.xom.Serializer: void writeChild(nu.xom.Node)>(r16);

        goto label09;

     label08:
        virtualinvoke r1.<nu.xom.Serializer: void writeChild(nu.xom.Node)>($r4);

     label09:
        i4 = i4 + 1;

        goto label05;

     label10:
        virtualinvoke r1.<nu.xom.Serializer: void writeEndTag(nu.xom.Element)>(r0);

        $r3 = r1.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r3.<nu.xom.TextWriter: void setPreserveSpace(boolean)>($z0);

        goto label12;

     label11:
        virtualinvoke r1.<nu.xom.Serializer: void writeEmptyElementTag(nu.xom.Element)>(r0);

     label12:
        return;
    }

    private boolean hasNonTextChildren(nu.xom.Element)
    {
        nu.xom.Serializer r2;
        nu.xom.Element r0;
        int $i0, i1;
        nu.xom.Node $r1;
        boolean $z0;

        r2 := @this: nu.xom.Serializer;

        r0 := @parameter0: nu.xom.Element;

        $i0 = virtualinvoke r0.<nu.xom.Element: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label3;

        $r1 = virtualinvoke r0.<nu.xom.Element: nu.xom.Node getChild(int)>(i1);

        $z0 = virtualinvoke $r1.<nu.xom.Node: boolean isText()>();

        if $z0 != 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    protected void writeEndTag(nu.xom.Element) throws java.io.IOException
    {
        org.xml.sax.helpers.NamespaceSupport $r11;
        nu.xom.TextWriter $r1, $r2, $r4, $r5, $r6, $r7, $r8, $r10;
        nu.xom.Element r3;
        nu.xom.Serializer r0;
        int $i0;
        java.lang.String $r9;
        boolean $z0, $z1;

        r0 := @this: nu.xom.Serializer;

        r3 := @parameter0: nu.xom.Element;

        $r1 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r1.<nu.xom.TextWriter: void decrementIndent()>();

        $r2 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $i0 = virtualinvoke $r2.<nu.xom.TextWriter: int getIndent()>();

        if $i0 <= 0 goto label1;

        $r4 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $z0 = virtualinvoke $r4.<nu.xom.TextWriter: boolean isPreserveSpace()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<nu.xom.Serializer: boolean hasNonTextChildren(nu.xom.Element)>(r3);

        if $z1 == 0 goto label1;

        $r5 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r5.<nu.xom.TextWriter: void breakLine()>();

     label1:
        $r6 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r6.<nu.xom.TextWriter: void write(char)>(60);

        $r7 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r7.<nu.xom.TextWriter: void write(char)>(47);

        $r8 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $r9 = virtualinvoke r3.<nu.xom.Element: java.lang.String getQualifiedName()>();

        virtualinvoke $r8.<nu.xom.TextWriter: void writeName(java.lang.String)>($r9);

        $r10 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r10.<nu.xom.TextWriter: void write(char)>(62);

        $r11 = r0.<nu.xom.Serializer: org.xml.sax.helpers.NamespaceSupport namespaces>;

        virtualinvoke $r11.<org.xml.sax.helpers.NamespaceSupport: void popContext()>();

        return;
    }

    protected void writeStartTag(nu.xom.Element) throws java.io.IOException
    {
        nu.xom.TextWriter $r2, $r3, $r7, $r8;
        nu.xom.Element r1;
        nu.xom.Serializer r0;
        java.lang.String $r4, $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: nu.xom.Serializer;

        r1 := @parameter0: nu.xom.Element;

        specialinvoke r0.<nu.xom.Serializer: void writeTagBeginning(nu.xom.Element)>(r1);

        $r2 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r2.<nu.xom.TextWriter: void write(char)>(62);

        $r3 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r3.<nu.xom.TextWriter: void incrementIndent()>();

        $r4 = virtualinvoke r1.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("space", "http://www.w3.org/XML/1998/namespace");

        if $r4 == null goto label2;

        $r5 = "preserve";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r8 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r8.<nu.xom.TextWriter: void setPreserveSpace(boolean)>(1);

        goto label2;

     label1:
        $r6 = "default";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        $r7 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r7.<nu.xom.TextWriter: void setPreserveSpace(boolean)>(0);

     label2:
        return;
    }

    protected void writeEmptyElementTag(nu.xom.Element) throws java.io.IOException
    {
        org.xml.sax.helpers.NamespaceSupport $r4;
        nu.xom.TextWriter $r2, $r3;
        nu.xom.Serializer r0;
        nu.xom.Element r1;

        r0 := @this: nu.xom.Serializer;

        r1 := @parameter0: nu.xom.Element;

        specialinvoke r0.<nu.xom.Serializer: void writeTagBeginning(nu.xom.Element)>(r1);

        $r2 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r2.<nu.xom.TextWriter: void write(char)>(47);

        $r3 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r3.<nu.xom.TextWriter: void write(char)>(62);

        $r4 = r0.<nu.xom.Serializer: org.xml.sax.helpers.NamespaceSupport namespaces>;

        virtualinvoke $r4.<org.xml.sax.helpers.NamespaceSupport: void popContext()>();

        return;
    }

    private void writeTagBeginning(nu.xom.Element) throws java.io.IOException
    {
        org.xml.sax.helpers.NamespaceSupport $r1;
        nu.xom.TextWriter $r2, $r4, $r5, $r6, $r7, $r8;
        nu.xom.Element r3;
        nu.xom.Serializer r0;
        java.lang.String $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: nu.xom.Serializer;

        r3 := @parameter0: nu.xom.Element;

        $r1 = r0.<nu.xom.Serializer: org.xml.sax.helpers.NamespaceSupport namespaces>;

        virtualinvoke $r1.<org.xml.sax.helpers.NamespaceSupport: void pushContext()>();

        $r2 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $z0 = virtualinvoke $r2.<nu.xom.TextWriter: boolean isIndenting()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $z1 = virtualinvoke $r4.<nu.xom.TextWriter: boolean isPreserveSpace()>();

        if $z1 != 0 goto label1;

        $r5 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $z2 = virtualinvoke $r5.<nu.xom.TextWriter: boolean justBroke()>();

        if $z2 != 0 goto label1;

        $r6 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r6.<nu.xom.TextWriter: void breakLine()>();

     label1:
        $r7 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r7.<nu.xom.TextWriter: void write(char)>(60);

        $r8 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $r9 = virtualinvoke r3.<nu.xom.Element: java.lang.String getQualifiedName()>();

        virtualinvoke $r8.<nu.xom.TextWriter: void writeName(java.lang.String)>($r9);

        virtualinvoke r0.<nu.xom.Serializer: void writeAttributes(nu.xom.Element)>(r3);

        virtualinvoke r0.<nu.xom.Serializer: void writeNamespaceDeclarations(nu.xom.Element)>(r3);

        return;
    }

    protected void writeAttributes(nu.xom.Element) throws java.io.IOException
    {
        nu.xom.TextWriter $r3, $r9;
        nu.xom.Element r1;
        nu.xom.Serializer r0;
        int $i0, i1;
        nu.xom.ParentNode $r4;
        java.lang.String $r6, $r7, $r8;
        boolean $z0, $z1, $z2;
        nu.xom.Attribute $r2, $r5, $r10;

        r0 := @this: nu.xom.Serializer;

        r1 := @parameter0: nu.xom.Element;

        $z0 = r0.<nu.xom.Serializer: boolean preserveBaseURI>;

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r1.<nu.xom.Element: nu.xom.ParentNode getParent()>();

        $r5 = virtualinvoke r1.<nu.xom.Element: nu.xom.Attribute getAttribute(java.lang.String,java.lang.String)>("base", "http://www.w3.org/XML/1998/namespace");

        if $r5 != null goto label2;

        $r6 = virtualinvoke r1.<nu.xom.Element: java.lang.String getBaseURI()>();

        if $r4 == null goto label1;

        $z1 = virtualinvoke $r4.<nu.xom.ParentNode: boolean isDocument()>();

        if $z1 != 0 goto label1;

        $r7 = virtualinvoke r1.<nu.xom.Element: java.lang.String getBaseURI()>();

        $r8 = virtualinvoke $r4.<nu.xom.ParentNode: java.lang.String getBaseURI()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z2 != 0 goto label2;

     label1:
        $r9 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r9.<nu.xom.TextWriter: void write(char)>(32);

        $r10 = new nu.xom.Attribute;

        specialinvoke $r10.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String,java.lang.String)>("xml:base", "http://www.w3.org/XML/1998/namespace", $r6);

        virtualinvoke r0.<nu.xom.Serializer: void write(nu.xom.Attribute)>($r10);

     label2:
        $i0 = virtualinvoke r1.<nu.xom.Element: int getAttributeCount()>();

        i1 = 0;

     label3:
        if i1 >= $i0 goto label4;

        $r2 = virtualinvoke r1.<nu.xom.Element: nu.xom.Attribute getAttribute(int)>(i1);

        $r3 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r3.<nu.xom.TextWriter: void write(char)>(32);

        virtualinvoke r0.<nu.xom.Serializer: void write(nu.xom.Attribute)>($r2);

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }

    protected void writeNamespaceDeclarations(nu.xom.Element) throws java.io.IOException
    {
        nu.xom.Element r0;
        nu.xom.Serializer r5;
        int $i0, $i1, $i2, i3, i4;
        nu.xom.Namespaces r11;
        java.lang.String $r1, $r2, $r3, $r4, $r7, $r8, $r9, $r10;
        boolean $z0, $z1;
        nu.xom.Attribute $r6;

        r5 := @this: nu.xom.Serializer;

        r0 := @parameter0: nu.xom.Element;

        $r1 = virtualinvoke r0.<nu.xom.Element: java.lang.String getNamespacePrefix()>();

        $r2 = "xml";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r10 = virtualinvoke r0.<nu.xom.Element: java.lang.String getNamespaceURI()>();

        specialinvoke r5.<nu.xom.Serializer: void writeNamespaceDeclarationIfNecessary(java.lang.String,java.lang.String)>($r1, $r10);

     label1:
        $i0 = virtualinvoke r0.<nu.xom.Element: int getAttributeCount()>();

        i3 = 0;

     label2:
        if i3 >= $i0 goto label4;

        $r6 = virtualinvoke r0.<nu.xom.Element: nu.xom.Attribute getAttribute(int)>(i3);

        $r7 = virtualinvoke $r6.<nu.xom.Attribute: java.lang.String getNamespacePrefix()>();

        $i2 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i2 == 0 goto label3;

        $r8 = "xml";

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label3;

        $r9 = virtualinvoke $r6.<nu.xom.Attribute: java.lang.String getNamespaceURI()>();

        specialinvoke r5.<nu.xom.Serializer: void writeNamespaceDeclarationIfNecessary(java.lang.String,java.lang.String)>($r7, $r9);

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        r11 = r0.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        if r11 != null goto label5;

        return;

     label5:
        $i1 = virtualinvoke r11.<nu.xom.Namespaces: int size()>();

        i4 = 0;

     label6:
        if i4 >= $i1 goto label7;

        $r3 = virtualinvoke r11.<nu.xom.Namespaces: java.lang.String getPrefix(int)>(i4);

        $r4 = virtualinvoke r11.<nu.xom.Namespaces: java.lang.String getURI(java.lang.String)>($r3);

        specialinvoke r5.<nu.xom.Serializer: void writeNamespaceDeclarationIfNecessary(java.lang.String,java.lang.String)>($r3, $r4);

        i4 = i4 + 1;

        goto label6;

     label7:
        return;
    }

    private void writeNamespaceDeclarationIfNecessary(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.xml.sax.helpers.NamespaceSupport $r2;
        nu.xom.TextWriter $r5;
        nu.xom.Serializer r0;
        java.lang.String r1, $r3, r4, $r6;
        boolean $z0, $z1;

        r0 := @this: nu.xom.Serializer;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r2 = r0.<nu.xom.Serializer: org.xml.sax.helpers.NamespaceSupport namespaces>;

        $r3 = virtualinvoke $r2.<org.xml.sax.helpers.NamespaceSupport: java.lang.String getURI(java.lang.String)>(r1);

        if $r3 != null goto label1;

        $r6 = "";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label1;

        return;

     label1:
        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return;

     label2:
        $r5 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r5.<nu.xom.TextWriter: void write(char)>(32);

        virtualinvoke r0.<nu.xom.Serializer: void writeNamespaceDeclaration(java.lang.String,java.lang.String)>(r1, r4);

        return;
    }

    protected void writeNamespaceDeclaration(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.xml.sax.helpers.NamespaceSupport $r3;
        nu.xom.TextWriter $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        nu.xom.Serializer r0;
        java.lang.String r1, r2, $r4;
        boolean $z0;

        r0 := @this: nu.xom.Serializer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<nu.xom.Serializer: org.xml.sax.helpers.NamespaceSupport namespaces>;

        virtualinvoke $r3.<org.xml.sax.helpers.NamespaceSupport: boolean declarePrefix(java.lang.String,java.lang.String)>(r1, r2);

        $r4 = "";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r11 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r11.<nu.xom.TextWriter: void writeUncheckedMarkup(java.lang.String)>("xmlns");

        goto label2;

     label1:
        $r5 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r5.<nu.xom.TextWriter: void writeUncheckedMarkup(java.lang.String)>("xmlns:");

        $r6 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r6.<nu.xom.TextWriter: void writeName(java.lang.String)>(r1);

     label2:
        $r7 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r7.<nu.xom.TextWriter: void write(char)>(61);

        $r8 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r8.<nu.xom.TextWriter: void write(char)>(34);

        $r9 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r9.<nu.xom.TextWriter: void writePCDATA(java.lang.String)>(r2);

        $r10 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r10.<nu.xom.TextWriter: void write(char)>(34);

        return;
    }

    protected void write(nu.xom.Attribute) throws java.io.IOException
    {
        nu.xom.TextWriter $r2, $r4, $r5, $r6, $r8;
        nu.xom.Attribute r1;
        nu.xom.Serializer r0;
        java.lang.String $r3, $r7;

        r0 := @this: nu.xom.Serializer;

        r1 := @parameter0: nu.xom.Attribute;

        $r2 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $r3 = virtualinvoke r1.<nu.xom.Attribute: java.lang.String getQualifiedName()>();

        virtualinvoke $r2.<nu.xom.TextWriter: void writeName(java.lang.String)>($r3);

        $r4 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r4.<nu.xom.TextWriter: void write(char)>(61);

        $r5 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r5.<nu.xom.TextWriter: void write(char)>(34);

        $r6 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $r7 = virtualinvoke r1.<nu.xom.Attribute: java.lang.String getValue()>();

        virtualinvoke $r6.<nu.xom.TextWriter: void writeAttributeValue(java.lang.String)>($r7);

        $r8 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r8.<nu.xom.TextWriter: void write(char)>(34);

        return;
    }

    protected void write(nu.xom.Comment) throws java.io.IOException
    {
        nu.xom.TextWriter $r1, $r2, $r4, $r6, $r7;
        nu.xom.Serializer r0;
        java.lang.String $r5;
        nu.xom.Comment r3;
        boolean $z0;

        r0 := @this: nu.xom.Serializer;

        r3 := @parameter0: nu.xom.Comment;

        $r1 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $z0 = virtualinvoke $r1.<nu.xom.TextWriter: boolean isIndenting()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r7.<nu.xom.TextWriter: void breakLine()>();

     label1:
        $r2 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r2.<nu.xom.TextWriter: void writeUncheckedMarkup(java.lang.String)>("<!--");

        $r4 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $r5 = virtualinvoke r3.<nu.xom.Comment: java.lang.String getValue()>();

        virtualinvoke $r4.<nu.xom.TextWriter: void writeMarkup(java.lang.String)>($r5);

        $r6 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r6.<nu.xom.TextWriter: void writeUncheckedMarkup(java.lang.String)>("-->");

        return;
    }

    protected void write(nu.xom.ProcessingInstruction) throws java.io.IOException
    {
        nu.xom.TextWriter $r1, $r2, $r4, $r8, $r9, $r10, $r11;
        nu.xom.Serializer r0;
        nu.xom.ProcessingInstruction r3;
        java.lang.String $r5, $r6, $r7;
        boolean $z0, $z1;

        r0 := @this: nu.xom.Serializer;

        r3 := @parameter0: nu.xom.ProcessingInstruction;

        $r1 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $z0 = virtualinvoke $r1.<nu.xom.TextWriter: boolean isIndenting()>();

        if $z0 == 0 goto label1;

        $r11 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r11.<nu.xom.TextWriter: void breakLine()>();

     label1:
        $r2 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r2.<nu.xom.TextWriter: void writeUncheckedMarkup(java.lang.String)>("<?");

        $r4 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $r5 = virtualinvoke r3.<nu.xom.ProcessingInstruction: java.lang.String getTarget()>();

        virtualinvoke $r4.<nu.xom.TextWriter: void writeName(java.lang.String)>($r5);

        $r6 = virtualinvoke r3.<nu.xom.ProcessingInstruction: java.lang.String getValue()>();

        $r7 = "";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label2;

        $r9 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r9.<nu.xom.TextWriter: void write(char)>(32);

        $r10 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r10.<nu.xom.TextWriter: void writeMarkup(java.lang.String)>($r6);

     label2:
        $r8 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r8.<nu.xom.TextWriter: void writeUncheckedMarkup(java.lang.String)>("?>");

        return;
    }

    protected void write(nu.xom.Text) throws java.io.IOException
    {
        nu.xom.TextWriter $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        nu.xom.Serializer r2;
        int $i0, $i1, i3, $i5;
        java.lang.String $r1;
        nu.xom.Text r0;
        boolean $z0, $z1, $z2, $z3;
        char $c2;

        r2 := @this: nu.xom.Serializer;

        r0 := @parameter0: nu.xom.Text;

        $r1 = virtualinvoke r0.<nu.xom.Text: java.lang.String getValue()>();

        $z0 = virtualinvoke r0.<nu.xom.Text: boolean isCDATASection()>();

        if $z0 == 0 goto label4;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("]]>");

        $i5 = (int) -1;

        if $i0 != $i5 goto label4;

        $r4 = r2.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $z2 = $r4 instanceof nu.xom.UnicodeWriter;

        if $z2 != 0 goto label3;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        i3 = 0;

     label1:
        if i3 >= $i1 goto label3;

        $r8 = r2.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i3);

        $z3 = virtualinvoke $r8.<nu.xom.TextWriter: boolean needsEscaping(char)>($c2);

        if $z3 == 0 goto label2;

        $r9 = r2.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r9.<nu.xom.TextWriter: void writePCDATA(java.lang.String)>($r1);

        return;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r5 = r2.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r5.<nu.xom.TextWriter: void writeUncheckedMarkup(java.lang.String)>("<![CDATA[");

        $r6 = r2.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r6.<nu.xom.TextWriter: void writeMarkup(java.lang.String)>($r1);

        $r7 = r2.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r7.<nu.xom.TextWriter: void writeUncheckedMarkup(java.lang.String)>("]]>");

        goto label6;

     label4:
        $z1 = specialinvoke r2.<nu.xom.Serializer: boolean isBoundaryWhitespace(nu.xom.Text,java.lang.String)>(r0, $r1);

        if $z1 == 0 goto label5;

        return;

     label5:
        $r3 = r2.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r3.<nu.xom.TextWriter: void writePCDATA(java.lang.String)>($r1);

     label6:
        return;
    }

    private boolean isBoundaryWhitespace(nu.xom.Text, java.lang.String)
    {
        nu.xom.Serializer r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        nu.xom.ParentNode $r2;
        java.lang.String r3, $r4, $r5, $r6, $r7;
        nu.xom.Text r1;
        boolean $z0, $z1, $z2, $z3;
        nu.xom.Node r8, r9;

        r0 := @this: nu.xom.Serializer;

        r1 := @parameter0: nu.xom.Text;

        r3 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<nu.xom.Serializer: int getIndent()>();

        if $i0 > 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<nu.xom.Text: nu.xom.ParentNode getParent()>();

        if $r2 != null goto label2;

        $r6 = "";

        $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        return $z3;

     label2:
        $i1 = virtualinvoke $r2.<nu.xom.ParentNode: int getChildCount()>();

        if $i1 != 1 goto label3;

        return 0;

     label3:
        $r4 = "";

        $r5 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        $i2 = virtualinvoke $r2.<nu.xom.ParentNode: int indexOf(nu.xom.Node)>(r1);

        r8 = null;

        r9 = null;

        if $i2 == 0 goto label5;

        $i5 = $i2 - 1;

        r8 = virtualinvoke $r2.<nu.xom.ParentNode: nu.xom.Node getChild(int)>($i5);

     label5:
        $i3 = $i1 - 1;

        if $i2 == $i3 goto label6;

        $i4 = $i2 + 1;

        r9 = virtualinvoke $r2.<nu.xom.ParentNode: nu.xom.Node getChild(int)>($i4);

     label6:
        if r8 == null goto label7;

        $z2 = virtualinvoke r8.<nu.xom.Node: boolean isText()>();

        if $z2 != 0 goto label9;

     label7:
        if r9 == null goto label8;

        $z1 = virtualinvoke r9.<nu.xom.Node: boolean isText()>();

        if $z1 != 0 goto label9;

     label8:
        return 1;

     label9:
        return 0;
    }

    protected void write(nu.xom.DocType) throws java.io.IOException
    {
        nu.xom.Serializer r0;
        boolean $z0;
        nu.xom.TextWriter $r1, $r3, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r22;
        java.lang.StringBuffer $r14, $r16, $r18, $r19, $r21, $r23, $r25, $r26, $r28, $r29;
        java.lang.String $r4, $r5, $r6, $r17, $r20, $r24, $r27, $r30, $r31;
        nu.xom.DocType r2;

        r0 := @this: nu.xom.Serializer;

        r2 := @parameter0: nu.xom.DocType;

        $r1 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r1.<nu.xom.TextWriter: void writeUncheckedMarkup(java.lang.String)>("<!DOCTYPE ");

        $r3 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $r4 = virtualinvoke r2.<nu.xom.DocType: java.lang.String getRootElementName()>();

        virtualinvoke $r3.<nu.xom.TextWriter: void writeName(java.lang.String)>($r4);

        $r5 = virtualinvoke r2.<nu.xom.DocType: java.lang.String getPublicID()>();

        if $r5 == null goto label1;

        $r22 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" PUBLIC \"");

        $r24 = virtualinvoke r2.<nu.xom.DocType: java.lang.String getPublicID()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" \"");

        $r27 = virtualinvoke r2.<nu.xom.DocType: java.lang.String getSystemID()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r22.<nu.xom.TextWriter: void writeMarkup(java.lang.String)>($r30);

        goto label2;

     label1:
        $r6 = virtualinvoke r2.<nu.xom.DocType: java.lang.String getSystemID()>();

        if $r6 == null goto label2;

        $r15 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" SYSTEM \"");

        $r17 = virtualinvoke r2.<nu.xom.DocType: java.lang.String getSystemID()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r15.<nu.xom.TextWriter: void writeMarkup(java.lang.String)>($r20);

     label2:
        $r31 = virtualinvoke r2.<nu.xom.DocType: java.lang.String getInternalDTDSubset()>();

        $z0 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label3;

        $r8 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r8.<nu.xom.TextWriter: void writeUncheckedMarkup(java.lang.String)>(" [");

        $r9 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r9.<nu.xom.TextWriter: void breakLine()>();

        $r10 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r10.<nu.xom.TextWriter: void setInDocType(boolean)>(1);

        $r11 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r11.<nu.xom.TextWriter: void writeMarkup(java.lang.String)>($r31);

        $r12 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r12.<nu.xom.TextWriter: void setInDocType(boolean)>(0);

        $r13 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r13.<nu.xom.TextWriter: void write(char)>(93);

     label3:
        $r7 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r7.<nu.xom.TextWriter: void write(char)>(62);

        return;
    }

    protected void writeChild(nu.xom.Node) throws java.io.IOException
    {
        nu.xom.Element $r14;
        nu.xom.Serializer r9;
        java.lang.StringBuffer $r2, $r3, $r6, $r7;
        java.lang.String $r5, $r8;
        nu.xom.ProcessingInstruction $r11;
        nu.xom.Comment $r12;
        nu.xom.Text $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        nu.xom.DocType $r10;
        nu.xom.Node r0;
        nu.xom.XMLException $r1;
        java.lang.Class $r4;

        r9 := @this: nu.xom.Serializer;

        r0 := @parameter0: nu.xom.Node;

        $z0 = virtualinvoke r0.<nu.xom.Node: boolean isElement()>();

        if $z0 == 0 goto label1;

        $r14 = (nu.xom.Element) r0;

        virtualinvoke r9.<nu.xom.Serializer: void write(nu.xom.Element)>($r14);

        goto label6;

     label1:
        $z1 = virtualinvoke r0.<nu.xom.Node: boolean isText()>();

        if $z1 == 0 goto label2;

        $r13 = (nu.xom.Text) r0;

        virtualinvoke r9.<nu.xom.Serializer: void write(nu.xom.Text)>($r13);

        goto label6;

     label2:
        $z2 = virtualinvoke r0.<nu.xom.Node: boolean isComment()>();

        if $z2 == 0 goto label3;

        $r12 = (nu.xom.Comment) r0;

        virtualinvoke r9.<nu.xom.Serializer: void write(nu.xom.Comment)>($r12);

        goto label6;

     label3:
        $z3 = virtualinvoke r0.<nu.xom.Node: boolean isProcessingInstruction()>();

        if $z3 == 0 goto label4;

        $r11 = (nu.xom.ProcessingInstruction) r0;

        virtualinvoke r9.<nu.xom.Serializer: void write(nu.xom.ProcessingInstruction)>($r11);

        goto label6;

     label4:
        $z4 = virtualinvoke r0.<nu.xom.Node: boolean isDocType()>();

        if $z4 == 0 goto label5;

        $r10 = (nu.xom.DocType) r0;

        virtualinvoke r9.<nu.xom.Serializer: void write(nu.xom.DocType)>($r10);

        goto label6;

     label5:
        $r1 = new nu.xom.XMLException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot write a ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from the writeChild() method");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<nu.xom.XMLException: void <init>(java.lang.String)>($r8);

        throw $r1;

     label6:
        return;
    }

    protected final void writeEscaped(java.lang.String) throws java.io.IOException
    {
        nu.xom.TextWriter $r2;
        java.lang.String r1;
        nu.xom.Serializer r0;

        r0 := @this: nu.xom.Serializer;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r2.<nu.xom.TextWriter: void writePCDATA(java.lang.String)>(r1);

        return;
    }

    protected final void writeAttributeValue(java.lang.String) throws java.io.IOException
    {
        nu.xom.TextWriter $r2;
        java.lang.String r1;
        nu.xom.Serializer r0;

        r0 := @this: nu.xom.Serializer;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r2.<nu.xom.TextWriter: void writeAttributeValue(java.lang.String)>(r1);

        return;
    }

    protected final void writeRaw(java.lang.String) throws java.io.IOException
    {
        nu.xom.TextWriter $r2;
        java.lang.String r1;
        nu.xom.Serializer r0;

        r0 := @this: nu.xom.Serializer;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r2.<nu.xom.TextWriter: void writeMarkup(java.lang.String)>(r1);

        return;
    }

    protected final void breakLine() throws java.io.IOException
    {
        nu.xom.TextWriter $r1;
        nu.xom.Serializer r0;

        r0 := @this: nu.xom.Serializer;

        $r1 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r1.<nu.xom.TextWriter: void breakLine()>();

        return;
    }

    public void flush() throws java.io.IOException
    {
        nu.xom.TextWriter $r1;
        nu.xom.Serializer r0;

        r0 := @this: nu.xom.Serializer;

        $r1 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r1.<nu.xom.TextWriter: void flush()>();

        return;
    }

    public int getIndent()
    {
        int $i0;
        nu.xom.TextWriter $r1;
        nu.xom.Serializer r0;

        r0 := @this: nu.xom.Serializer;

        $r1 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $i0 = virtualinvoke $r1.<nu.xom.TextWriter: int getIndent()>();

        return $i0;
    }

    public void setIndent(int)
    {
        nu.xom.TextWriter $r1;
        nu.xom.Serializer r0;
        int i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: nu.xom.Serializer;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Indent cannot be negative");

        throw $r2;

     label1:
        $r1 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r1.<nu.xom.TextWriter: void setIndent(int)>(i0);

        return;
    }

    public java.lang.String getLineSeparator()
    {
        nu.xom.TextWriter $r1;
        java.lang.String $r2;
        nu.xom.Serializer r0;

        r0 := @this: nu.xom.Serializer;

        $r1 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $r2 = virtualinvoke $r1.<nu.xom.TextWriter: java.lang.String getLineSeparator()>();

        return $r2;
    }

    public void setLineSeparator(java.lang.String)
    {
        nu.xom.TextWriter $r2;
        java.lang.String r1;
        nu.xom.Serializer r0;

        r0 := @this: nu.xom.Serializer;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r2.<nu.xom.TextWriter: void setLineSeparator(java.lang.String)>(r1);

        return;
    }

    public int getMaxLength()
    {
        int $i0;
        nu.xom.TextWriter $r1;
        nu.xom.Serializer r0;

        r0 := @this: nu.xom.Serializer;

        $r1 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $i0 = virtualinvoke $r1.<nu.xom.TextWriter: int getMaxLength()>();

        return $i0;
    }

    public void setMaxLength(int)
    {
        int i0;
        nu.xom.TextWriter $r1;
        nu.xom.Serializer r0;

        r0 := @this: nu.xom.Serializer;

        i0 := @parameter0: int;

        $r1 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r1.<nu.xom.TextWriter: void setMaxLength(int)>(i0);

        return;
    }

    public boolean getPreserveBaseURI()
    {
        nu.xom.Serializer r0;
        boolean $z0;

        r0 := @this: nu.xom.Serializer;

        $z0 = r0.<nu.xom.Serializer: boolean preserveBaseURI>;

        return $z0;
    }

    public void setPreserveBaseURI(boolean)
    {
        nu.xom.Serializer r0;
        boolean z0;

        r0 := @this: nu.xom.Serializer;

        z0 := @parameter0: boolean;

        r0.<nu.xom.Serializer: boolean preserveBaseURI> = z0;

        return;
    }

    public java.lang.String getEncoding()
    {
        nu.xom.TextWriter $r1;
        java.lang.String $r2;
        nu.xom.Serializer r0;

        r0 := @this: nu.xom.Serializer;

        $r1 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $r2 = virtualinvoke $r1.<nu.xom.TextWriter: java.lang.String getEncoding()>();

        return $r2;
    }

    public void setUnicodeNormalizationFormC(boolean)
    {
        nu.xom.TextWriter $r1;
        nu.xom.Serializer r0;
        boolean z0;

        r0 := @this: nu.xom.Serializer;

        z0 := @parameter0: boolean;

        $r1 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        virtualinvoke $r1.<nu.xom.TextWriter: void setNFC(boolean)>(z0);

        return;
    }

    public boolean getUnicodeNormalizationFormC()
    {
        nu.xom.TextWriter $r1;
        nu.xom.Serializer r0;
        boolean $z0;

        r0 := @this: nu.xom.Serializer;

        $r1 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $z0 = virtualinvoke $r1.<nu.xom.TextWriter: boolean getNFC()>();

        return $z0;
    }

    protected final int getColumnNumber()
    {
        int $i0;
        nu.xom.TextWriter $r1;
        nu.xom.Serializer r0;

        r0 := @this: nu.xom.Serializer;

        $r1 = r0.<nu.xom.Serializer: nu.xom.TextWriter escaper>;

        $i0 = virtualinvoke $r1.<nu.xom.TextWriter: int getColumnNumber()>();

        return $i0;
    }
}
