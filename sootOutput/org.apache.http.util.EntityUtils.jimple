public final class org.apache.http.util.EntityUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.http.util.EntityUtils r0;

        r0 := @this: org.apache.http.util.EntityUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void consumeQuietly(org.apache.http.HttpEntity)
    {
        org.apache.http.HttpEntity r0;
        java.io.IOException $r1;

        r0 := @parameter0: org.apache.http.HttpEntity;

     label1:
        staticinvoke <org.apache.http.util.EntityUtils: void consume(org.apache.http.HttpEntity)>(r0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void consume(org.apache.http.HttpEntity) throws java.io.IOException
    {
        org.apache.http.HttpEntity r0;
        boolean $z0;
        java.io.InputStream $r1;

        r0 := @parameter0: org.apache.http.HttpEntity;

        if r0 != null goto label1;

        return;

     label1:
        $z0 = interfaceinvoke r0.<org.apache.http.HttpEntity: boolean isStreaming()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke r0.<org.apache.http.HttpEntity: java.io.InputStream getContent()>();

        if $r1 == null goto label2;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

     label2:
        return;
    }

    public static byte[] toByteArray(org.apache.http.HttpEntity) throws java.io.IOException
    {
        java.lang.Throwable $r7;
        byte[] $r3, $r4;
        org.apache.http.HttpEntity r0;
        long $l0, $l2;
        java.lang.IllegalArgumentException $r8, $r9;
        byte $b1;
        int i3, $i4, $i5, $i7;
        java.io.InputStream $r1;
        org.apache.http.util.ByteArrayBuffer $r10;

        r0 := @parameter0: org.apache.http.HttpEntity;

        if r0 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP entity may not be null");

        throw $r8;

     label1:
        $r1 = interfaceinvoke r0.<org.apache.http.HttpEntity: java.io.InputStream getContent()>();

        if $r1 != null goto label2;

        return null;

     label2:
        $l0 = interfaceinvoke r0.<org.apache.http.HttpEntity: long getContentLength()>();

        $b1 = $l0 cmp 2147483647L;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label3;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP entity too large to be buffered in memory");

        throw $r9;

     label3:
        $l2 = interfaceinvoke r0.<org.apache.http.HttpEntity: long getContentLength()>();

        i3 = (int) $l2;

        if i3 >= 0 goto label4;

        i3 = 4096;

     label4:
        $r10 = new org.apache.http.util.ByteArrayBuffer;

        specialinvoke $r10.<org.apache.http.util.ByteArrayBuffer: void <init>(int)>(i3);

        $r4 = newarray (byte)[4096];

     label5:
        $i4 = virtualinvoke $r1.<java.io.InputStream: int read(byte[])>($r4);

        $i7 = (int) -1;

        if $i4 == $i7 goto label6;

        virtualinvoke $r10.<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>($r4, 0, $i4);

        goto label5;

     label6:
        $r3 = virtualinvoke $r10.<org.apache.http.util.ByteArrayBuffer: byte[] toByteArray()>();

     label7:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return $r3;

     label8:
        $r7 := @caughtexception;

     label9:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

        throw $r7;

        catch java.lang.Throwable from label2 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public static java.lang.String getContentCharSet(org.apache.http.HttpEntity) throws org.apache.http.ParseException
    {
        org.apache.http.HeaderElement[] $r3;
        org.apache.http.HttpEntity r0;
        org.apache.http.HeaderElement $r4;
        java.lang.IllegalArgumentException $r6;
        org.apache.http.Header $r1, $r2;
        int $i0;
        java.lang.String r7;
        org.apache.http.NameValuePair $r5;

        r0 := @parameter0: org.apache.http.HttpEntity;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP entity may not be null");

        throw $r6;

     label1:
        r7 = null;

        $r1 = interfaceinvoke r0.<org.apache.http.HttpEntity: org.apache.http.Header getContentType()>();

        if $r1 == null goto label2;

        $r2 = interfaceinvoke r0.<org.apache.http.HttpEntity: org.apache.http.Header getContentType()>();

        $r3 = interfaceinvoke $r2.<org.apache.http.Header: org.apache.http.HeaderElement[] getElements()>();

        $i0 = lengthof $r3;

        if $i0 <= 0 goto label2;

        $r4 = $r3[0];

        $r5 = interfaceinvoke $r4.<org.apache.http.HeaderElement: org.apache.http.NameValuePair getParameterByName(java.lang.String)>("charset");

        if $r5 == null goto label2;

        r7 = interfaceinvoke $r5.<org.apache.http.NameValuePair: java.lang.String getValue()>();

     label2:
        return r7;
    }

    public static java.lang.String getContentMimeType(org.apache.http.HttpEntity) throws org.apache.http.ParseException
    {
        org.apache.http.HeaderElement[] $r3;
        org.apache.http.HttpEntity r0;
        org.apache.http.HeaderElement $r4;
        java.lang.IllegalArgumentException $r5;
        org.apache.http.Header $r1, $r2;
        int $i0;
        java.lang.String r6;

        r0 := @parameter0: org.apache.http.HttpEntity;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP entity may not be null");

        throw $r5;

     label1:
        r6 = null;

        $r1 = interfaceinvoke r0.<org.apache.http.HttpEntity: org.apache.http.Header getContentType()>();

        if $r1 == null goto label2;

        $r2 = interfaceinvoke r0.<org.apache.http.HttpEntity: org.apache.http.Header getContentType()>();

        $r3 = interfaceinvoke $r2.<org.apache.http.Header: org.apache.http.HeaderElement[] getElements()>();

        $i0 = lengthof $r3;

        if $i0 <= 0 goto label2;

        $r4 = $r3[0];

        r6 = interfaceinvoke $r4.<org.apache.http.HeaderElement: java.lang.String getName()>();

     label2:
        return r6;
    }

    public static java.lang.String toString(org.apache.http.HttpEntity, java.nio.charset.Charset) throws java.io.IOException, org.apache.http.ParseException
    {
        java.lang.Throwable $r11;
        long $l0, $l2;
        byte $b1;
        java.nio.charset.Charset $r3, r8, r12;
        int i3, $i4, $i5, $i7;
        java.lang.String $r6;
        org.apache.http.HttpEntity r0;
        org.apache.http.entity.ContentType $r2;
        java.lang.IllegalArgumentException $r13, $r14;
        java.io.InputStreamReader $r15;
        org.apache.http.util.CharArrayBuffer $r16;
        char[] $r7;
        java.io.InputStream $r1;

        r0 := @parameter0: org.apache.http.HttpEntity;

        r8 := @parameter1: java.nio.charset.Charset;

        if r0 != null goto label01;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP entity may not be null");

        throw $r13;

     label01:
        $r1 = interfaceinvoke r0.<org.apache.http.HttpEntity: java.io.InputStream getContent()>();

        if $r1 != null goto label02;

        return null;

     label02:
        $l0 = interfaceinvoke r0.<org.apache.http.HttpEntity: long getContentLength()>();

        $b1 = $l0 cmp 2147483647L;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label03;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP entity too large to be buffered in memory");

        throw $r14;

     label03:
        $l2 = interfaceinvoke r0.<org.apache.http.HttpEntity: long getContentLength()>();

        i3 = (int) $l2;

        if i3 >= 0 goto label04;

        i3 = 4096;

     label04:
        $r2 = staticinvoke <org.apache.http.entity.ContentType: org.apache.http.entity.ContentType getOrDefault(org.apache.http.HttpEntity)>(r0);

        $r3 = virtualinvoke $r2.<org.apache.http.entity.ContentType: java.nio.charset.Charset getCharset()>();

        r12 = $r3;

        if $r3 != null goto label05;

        r12 = r8;

     label05:
        if r12 != null goto label06;

        r12 = <org.apache.http.protocol.HTTP: java.nio.charset.Charset DEF_CONTENT_CHARSET>;

     label06:
        $r15 = new java.io.InputStreamReader;

        specialinvoke $r15.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r1, r12);

        $r16 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r16.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(i3);

        $r7 = newarray (char)[1024];

     label07:
        $i4 = virtualinvoke $r15.<java.io.Reader: int read(char[])>($r7);

        $i7 = (int) -1;

        if $i4 == $i7 goto label08;

        virtualinvoke $r16.<org.apache.http.util.CharArrayBuffer: void append(char[],int,int)>($r7, 0, $i4);

        goto label07;

     label08:
        $r6 = virtualinvoke $r16.<org.apache.http.util.CharArrayBuffer: java.lang.String toString()>();

     label09:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return $r6;

     label10:
        $r11 := @caughtexception;

     label11:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

        throw $r11;

        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public static java.lang.String toString(org.apache.http.HttpEntity, java.lang.String) throws java.io.IOException, org.apache.http.ParseException
    {
        java.nio.charset.Charset $r2;
        org.apache.http.HttpEntity r0;
        java.lang.String r1, $r3;

        r0 := @parameter0: org.apache.http.HttpEntity;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r1);

        $r3 = staticinvoke <org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,java.nio.charset.Charset)>(r0, $r2);

        return $r3;
    }

    public static java.lang.String toString(org.apache.http.HttpEntity) throws java.io.IOException, org.apache.http.ParseException
    {
        org.apache.http.HttpEntity r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.http.HttpEntity;

        $r1 = staticinvoke <org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,java.nio.charset.Charset)>(r0, null);

        return $r1;
    }
}
