public class org.apache.lucene.index.MultiDocValues extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.apache.lucene.index.MultiDocValues r0;

        r0 := @this: org.apache.lucene.index.MultiDocValues;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.lucene.index.NumericDocValues getNormValues(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.NumericDocValues $r12, $r16, r17;
        java.lang.AssertionError $r8;
        int[] r6;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String r3;
        org.apache.lucene.index.FieldInfos $r2;
        org.apache.lucene.index.MultiDocValues$1 $r7;
        boolean $z0, $z1, z2;
        org.apache.lucene.index.NumericDocValues[] r5;
        java.util.List $r1;
        org.apache.lucene.index.FieldInfo $r4;
        java.lang.Object $r9, $r13;
        org.apache.lucene.index.IndexReader r0;
        org.apache.lucene.index.AtomicReaderContext r10, $r14;
        org.apache.lucene.index.AtomicReader $r11, $r15;

        r0 := @parameter0: org.apache.lucene.index.IndexReader;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: java.util.List leaves()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        if $i0 != 1 goto label2;

        $r13 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (org.apache.lucene.index.AtomicReaderContext) $r13;

        $r15 = virtualinvoke $r14.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r16 = virtualinvoke $r15.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.NumericDocValues getNormValues(java.lang.String)>(r3);

        return $r16;

     label2:
        $r2 = staticinvoke <org.apache.lucene.index.MultiFields: org.apache.lucene.index.FieldInfos getMergedFieldInfos(org.apache.lucene.index.IndexReader)>(r0);

        $r4 = virtualinvoke $r2.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)>(r3);

        if $r4 == null goto label3;

        $z0 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: boolean hasNorms()>();

        if $z0 != 0 goto label4;

     label3:
        return null;

     label4:
        z2 = 0;

        r5 = newarray (org.apache.lucene.index.NumericDocValues)[$i0];

        $i1 = $i0 + 1;

        r6 = newarray (int)[$i1];

        i4 = 0;

     label5:
        if i4 >= $i0 goto label8;

        $r9 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i4);

        r10 = (org.apache.lucene.index.AtomicReaderContext) $r9;

        $r11 = virtualinvoke r10.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r12 = virtualinvoke $r11.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.NumericDocValues getNormValues(java.lang.String)>(r3);

        r17 = $r12;

        if $r12 != null goto label6;

        r17 = <org.apache.lucene.index.NumericDocValues: org.apache.lucene.index.NumericDocValues EMPTY>;

        goto label7;

     label6:
        z2 = 1;

     label7:
        r5[i4] = r17;

        $i3 = r10.<org.apache.lucene.index.AtomicReaderContext: int docBase>;

        r6[i4] = $i3;

        i4 = i4 + 1;

        goto label5;

     label8:
        $i2 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: int maxDoc()>();

        r6[$i0] = $i2;

        $z1 = <org.apache.lucene.index.MultiDocValues: boolean $assertionsDisabled>;

        if $z1 != 0 goto label9;

        if z2 != 0 goto label9;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label9:
        $r7 = new org.apache.lucene.index.MultiDocValues$1;

        specialinvoke $r7.<org.apache.lucene.index.MultiDocValues$1: void <init>(int[],org.apache.lucene.index.NumericDocValues[])>(r6, r5);

        return $r7;
    }

    public static org.apache.lucene.index.NumericDocValues getNumericValues(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.NumericDocValues $r9, $r13, r14;
        int[] r3;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String r8;
        org.apache.lucene.index.MultiDocValues$2 $r4;
        boolean z0;
        org.apache.lucene.index.NumericDocValues[] r2;
        java.util.List $r1;
        java.lang.Object $r5, $r10;
        org.apache.lucene.index.IndexReader r0;
        org.apache.lucene.index.AtomicReaderContext r6, $r11;
        org.apache.lucene.index.AtomicReader $r7, $r12;

        r0 := @parameter0: org.apache.lucene.index.IndexReader;

        r8 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: java.util.List leaves()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        if $i0 != 1 goto label2;

        $r10 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (org.apache.lucene.index.AtomicReaderContext) $r10;

        $r12 = virtualinvoke $r11.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r13 = virtualinvoke $r12.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.NumericDocValues getNumericDocValues(java.lang.String)>(r8);

        return $r13;

     label2:
        z0 = 0;

        r2 = newarray (org.apache.lucene.index.NumericDocValues)[$i0];

        $i1 = $i0 + 1;

        r3 = newarray (int)[$i1];

        i4 = 0;

     label3:
        if i4 >= $i0 goto label6;

        $r5 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i4);

        r6 = (org.apache.lucene.index.AtomicReaderContext) $r5;

        $r7 = virtualinvoke r6.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r9 = virtualinvoke $r7.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.NumericDocValues getNumericDocValues(java.lang.String)>(r8);

        r14 = $r9;

        if $r9 != null goto label4;

        r14 = <org.apache.lucene.index.NumericDocValues: org.apache.lucene.index.NumericDocValues EMPTY>;

        goto label5;

     label4:
        z0 = 1;

     label5:
        r2[i4] = r14;

        $i3 = r6.<org.apache.lucene.index.AtomicReaderContext: int docBase>;

        r3[i4] = $i3;

        i4 = i4 + 1;

        goto label3;

     label6:
        $i2 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: int maxDoc()>();

        r3[$i0] = $i2;

        if z0 != 0 goto label7;

        return null;

     label7:
        $r4 = new org.apache.lucene.index.MultiDocValues$2;

        specialinvoke $r4.<org.apache.lucene.index.MultiDocValues$2: void <init>(int[],org.apache.lucene.index.NumericDocValues[])>(r3, r2);

        return $r4;
    }

    public static org.apache.lucene.index.BinaryDocValues getBinaryValues(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException
    {
        int[] r3;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String r8;
        org.apache.lucene.index.MultiDocValues$3 $r4;
        boolean z0;
        org.apache.lucene.index.BinaryDocValues[] r2;
        java.util.List $r1;
        java.lang.Object $r5, $r10;
        org.apache.lucene.index.BinaryDocValues $r9, $r13, r14;
        org.apache.lucene.index.IndexReader r0;
        org.apache.lucene.index.AtomicReaderContext r6, $r11;
        org.apache.lucene.index.AtomicReader $r7, $r12;

        r0 := @parameter0: org.apache.lucene.index.IndexReader;

        r8 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: java.util.List leaves()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        if $i0 != 1 goto label2;

        $r10 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (org.apache.lucene.index.AtomicReaderContext) $r10;

        $r12 = virtualinvoke $r11.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r13 = virtualinvoke $r12.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.BinaryDocValues getBinaryDocValues(java.lang.String)>(r8);

        return $r13;

     label2:
        z0 = 0;

        r2 = newarray (org.apache.lucene.index.BinaryDocValues)[$i0];

        $i1 = $i0 + 1;

        r3 = newarray (int)[$i1];

        i4 = 0;

     label3:
        if i4 >= $i0 goto label6;

        $r5 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i4);

        r6 = (org.apache.lucene.index.AtomicReaderContext) $r5;

        $r7 = virtualinvoke r6.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r9 = virtualinvoke $r7.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.BinaryDocValues getBinaryDocValues(java.lang.String)>(r8);

        r14 = $r9;

        if $r9 != null goto label4;

        r14 = <org.apache.lucene.index.BinaryDocValues: org.apache.lucene.index.BinaryDocValues EMPTY>;

        goto label5;

     label4:
        z0 = 1;

     label5:
        r2[i4] = r14;

        $i3 = r6.<org.apache.lucene.index.AtomicReaderContext: int docBase>;

        r3[i4] = $i3;

        i4 = i4 + 1;

        goto label3;

     label6:
        $i2 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: int maxDoc()>();

        r3[$i0] = $i2;

        if z0 != 0 goto label7;

        return null;

     label7:
        $r4 = new org.apache.lucene.index.MultiDocValues$3;

        specialinvoke $r4.<org.apache.lucene.index.MultiDocValues$3: void <init>(int[],org.apache.lucene.index.BinaryDocValues[])>(r3, r2);

        return $r4;
    }

    public static org.apache.lucene.index.SortedDocValues getSortedValues(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.SortedDocValues[] r2;
        int[] r3;
        org.apache.lucene.index.TermsEnum $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.String r11;
        org.apache.lucene.index.SortedDocValues $r7, $r12, $r16, r18;
        boolean z0;
        org.apache.lucene.index.MultiDocValues$MultiSortedDocValues $r6;
        org.apache.lucene.index.MultiDocValues$OrdinalMap $r4;
        java.util.List $r1;
        org.apache.lucene.index.TermsEnum[] r19;
        java.lang.Object $r5, $r9, $r13;
        org.apache.lucene.index.IndexReader r0;
        org.apache.lucene.index.AtomicReader $r10, $r15;
        org.apache.lucene.index.AtomicReaderContext $r14, r17;

        r0 := @parameter0: org.apache.lucene.index.IndexReader;

        r11 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: java.util.List leaves()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        if $i0 != 1 goto label2;

        $r13 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (org.apache.lucene.index.AtomicReaderContext) $r13;

        $r15 = virtualinvoke $r14.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r16 = virtualinvoke $r15.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.SortedDocValues getSortedDocValues(java.lang.String)>(r11);

        return $r16;

     label2:
        z0 = 0;

        r2 = newarray (org.apache.lucene.index.SortedDocValues)[$i0];

        $i1 = $i0 + 1;

        r3 = newarray (int)[$i1];

        i6 = 0;

     label3:
        if i6 >= $i0 goto label6;

        $r9 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i6);

        r17 = (org.apache.lucene.index.AtomicReaderContext) $r9;

        $r10 = virtualinvoke r17.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r12 = virtualinvoke $r10.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.SortedDocValues getSortedDocValues(java.lang.String)>(r11);

        r18 = $r12;

        if $r12 != null goto label4;

        r18 = <org.apache.lucene.index.SortedDocValues: org.apache.lucene.index.SortedDocValues EMPTY>;

        goto label5;

     label4:
        z0 = 1;

     label5:
        r2[i6] = r18;

        $i5 = r17.<org.apache.lucene.index.AtomicReaderContext: int docBase>;

        r3[i6] = $i5;

        i6 = i6 + 1;

        goto label3;

     label6:
        $i2 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: int maxDoc()>();

        r3[$i0] = $i2;

        if z0 != 0 goto label7;

        return null;

     label7:
        $i3 = lengthof r2;

        r19 = newarray (org.apache.lucene.index.TermsEnum)[$i3];

        i7 = 0;

     label8:
        $i4 = lengthof r2;

        if i7 >= $i4 goto label9;

        $r7 = r2[i7];

        $r8 = virtualinvoke $r7.<org.apache.lucene.index.SortedDocValues: org.apache.lucene.index.TermsEnum termsEnum()>();

        r19[i7] = $r8;

        i7 = i7 + 1;

        goto label8;

     label9:
        $r4 = new org.apache.lucene.index.MultiDocValues$OrdinalMap;

        $r5 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: java.lang.Object getCoreCacheKey()>();

        specialinvoke $r4.<org.apache.lucene.index.MultiDocValues$OrdinalMap: void <init>(java.lang.Object,org.apache.lucene.index.TermsEnum[])>($r5, r19);

        $r6 = new org.apache.lucene.index.MultiDocValues$MultiSortedDocValues;

        specialinvoke $r6.<org.apache.lucene.index.MultiDocValues$MultiSortedDocValues: void <init>(org.apache.lucene.index.SortedDocValues[],int[],org.apache.lucene.index.MultiDocValues$OrdinalMap)>(r2, r3, $r4);

        return $r6;
    }

    public static org.apache.lucene.index.SortedSetDocValues getSortedSetValues(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.SortedSetDocValues[] r2;
        int[] r3;
        org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues $r6;
        org.apache.lucene.index.TermsEnum $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        org.apache.lucene.index.SortedSetDocValues $r7, $r12, $r16, r18;
        java.lang.String r11;
        boolean z0;
        org.apache.lucene.index.MultiDocValues$OrdinalMap $r4;
        java.util.List $r1;
        org.apache.lucene.index.TermsEnum[] r19;
        java.lang.Object $r5, $r9, $r13;
        org.apache.lucene.index.IndexReader r0;
        org.apache.lucene.index.AtomicReader $r10, $r15;
        org.apache.lucene.index.AtomicReaderContext $r14, r17;

        r0 := @parameter0: org.apache.lucene.index.IndexReader;

        r11 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: java.util.List leaves()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        if $i0 != 1 goto label2;

        $r13 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (org.apache.lucene.index.AtomicReaderContext) $r13;

        $r15 = virtualinvoke $r14.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r16 = virtualinvoke $r15.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.SortedSetDocValues getSortedSetDocValues(java.lang.String)>(r11);

        return $r16;

     label2:
        z0 = 0;

        r2 = newarray (org.apache.lucene.index.SortedSetDocValues)[$i0];

        $i1 = $i0 + 1;

        r3 = newarray (int)[$i1];

        i6 = 0;

     label3:
        if i6 >= $i0 goto label6;

        $r9 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i6);

        r17 = (org.apache.lucene.index.AtomicReaderContext) $r9;

        $r10 = virtualinvoke r17.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r12 = virtualinvoke $r10.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.SortedSetDocValues getSortedSetDocValues(java.lang.String)>(r11);

        r18 = $r12;

        if $r12 != null goto label4;

        r18 = <org.apache.lucene.index.SortedSetDocValues: org.apache.lucene.index.SortedSetDocValues EMPTY>;

        goto label5;

     label4:
        z0 = 1;

     label5:
        r2[i6] = r18;

        $i5 = r17.<org.apache.lucene.index.AtomicReaderContext: int docBase>;

        r3[i6] = $i5;

        i6 = i6 + 1;

        goto label3;

     label6:
        $i2 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: int maxDoc()>();

        r3[$i0] = $i2;

        if z0 != 0 goto label7;

        return null;

     label7:
        $i3 = lengthof r2;

        r19 = newarray (org.apache.lucene.index.TermsEnum)[$i3];

        i7 = 0;

     label8:
        $i4 = lengthof r2;

        if i7 >= $i4 goto label9;

        $r7 = r2[i7];

        $r8 = virtualinvoke $r7.<org.apache.lucene.index.SortedSetDocValues: org.apache.lucene.index.TermsEnum termsEnum()>();

        r19[i7] = $r8;

        i7 = i7 + 1;

        goto label8;

     label9:
        $r4 = new org.apache.lucene.index.MultiDocValues$OrdinalMap;

        $r5 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: java.lang.Object getCoreCacheKey()>();

        specialinvoke $r4.<org.apache.lucene.index.MultiDocValues$OrdinalMap: void <init>(java.lang.Object,org.apache.lucene.index.TermsEnum[])>($r5, r19);

        $r6 = new org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues;

        specialinvoke $r6.<org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues: void <init>(org.apache.lucene.index.SortedSetDocValues[],int[],org.apache.lucene.index.MultiDocValues$OrdinalMap)>(r2, r3, $r4);

        return $r6;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/MultiDocValues;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.MultiDocValues: boolean $assertionsDisabled> = $z1;

        return;
    }
}
