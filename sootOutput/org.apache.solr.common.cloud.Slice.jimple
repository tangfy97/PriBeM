public class org.apache.solr.common.cloud.Slice extends org.apache.solr.common.cloud.ZkNodeProps
{
    public static java.lang.String REPLICAS;
    public static java.lang.String RANGE;
    public static java.lang.String STATE;
    public static java.lang.String LEADER;
    public static java.lang.String ACTIVE;
    public static java.lang.String INACTIVE;
    public static java.lang.String CONSTRUCTION;
    private final java.lang.String name;
    private final org.apache.solr.common.cloud.DocRouter$Range range;
    private final java.lang.Integer replicationFactor;
    private final java.util.Map replicas;
    private final org.apache.solr.common.cloud.Replica leader;
    private final java.lang.String state;

    public void <init>(java.lang.String, java.util.Map, java.util.Map)
    {
        java.util.Map r1, $r4, $r7, $r11, r12, $r14, $r16, $r17, $r19, $r24, $r27, $r32;
        boolean $z0, $z1;
        org.apache.solr.common.cloud.Replica $r20;
        org.apache.solr.common.cloud.DocRouter $r21;
        org.apache.solr.common.cloud.DocRouter$Range r31;
        java.util.LinkedHashMap $r30;
        java.lang.String r2, $r3, $r6, $r8, $r9, $r10, $r13, $r18, $r22, $r23, $r26, $r29;
        org.apache.solr.common.cloud.Slice r0;
        java.lang.Object $r5, $r15, $r25, $r28;

        r0 := @this: org.apache.solr.common.cloud.Slice;

        r2 := @parameter0: java.lang.String;

        r12 := @parameter1: java.util.Map;

        r1 := @parameter2: java.util.Map;

        if r1 != null goto label1;

        $r30 = new java.util.LinkedHashMap;

        specialinvoke $r30.<java.util.LinkedHashMap: void <init>(int)>(2);

        goto label2;

     label1:
        $r30 = new java.util.LinkedHashMap;

        specialinvoke $r30.<java.util.LinkedHashMap: void <init>(java.util.Map)>(r1);

     label2:
        specialinvoke r0.<org.apache.solr.common.cloud.ZkNodeProps: void <init>(java.util.Map)>($r30);

        r0.<org.apache.solr.common.cloud.Slice: java.lang.String name> = r2;

        $r4 = r0.<org.apache.solr.common.cloud.Slice: java.util.Map propMap>;

        $r3 = <org.apache.solr.common.cloud.Slice: java.lang.String RANGE>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r7 = r0.<org.apache.solr.common.cloud.Slice: java.util.Map propMap>;

        $r6 = <org.apache.solr.common.cloud.Slice: java.lang.String STATE>;

        $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        $r24 = r0.<org.apache.solr.common.cloud.Slice: java.util.Map propMap>;

        $r23 = <org.apache.solr.common.cloud.Slice: java.lang.String STATE>;

        $r25 = interfaceinvoke $r24.<java.util.Map: java.lang.Object get(java.lang.Object)>($r23);

        if $r25 == null goto label3;

        $r27 = r0.<org.apache.solr.common.cloud.Slice: java.util.Map propMap>;

        $r26 = <org.apache.solr.common.cloud.Slice: java.lang.String STATE>;

        $r28 = interfaceinvoke $r27.<java.util.Map: java.lang.Object get(java.lang.Object)>($r26);

        $r29 = (java.lang.String) $r28;

        r0.<org.apache.solr.common.cloud.Slice: java.lang.String state> = $r29;

        goto label4;

     label3:
        $r8 = <org.apache.solr.common.cloud.Slice: java.lang.String ACTIVE>;

        r0.<org.apache.solr.common.cloud.Slice: java.lang.String state> = $r8;

        $r11 = r0.<org.apache.solr.common.cloud.Slice: java.util.Map propMap>;

        $r10 = <org.apache.solr.common.cloud.Slice: java.lang.String STATE>;

        $r9 = r0.<org.apache.solr.common.cloud.Slice: java.lang.String state>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

     label4:
        r31 = null;

        $z1 = $r5 instanceof org.apache.solr.common.cloud.DocRouter$Range;

        if $z1 == 0 goto label5;

        r31 = (org.apache.solr.common.cloud.DocRouter$Range) $r5;

        goto label6;

     label5:
        if $r5 == null goto label6;

        $r21 = <org.apache.solr.common.cloud.DocRouter: org.apache.solr.common.cloud.DocRouter DEFAULT>;

        $r22 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        r31 = virtualinvoke $r21.<org.apache.solr.common.cloud.DocRouter: org.apache.solr.common.cloud.DocRouter$Range fromString(java.lang.String)>($r22);

     label6:
        r0.<org.apache.solr.common.cloud.Slice: org.apache.solr.common.cloud.DocRouter$Range range> = r31;

        r0.<org.apache.solr.common.cloud.Slice: java.lang.Integer replicationFactor> = null;

        if r12 == null goto label7;

        $r32 = r12;

        goto label8;

     label7:
        $r14 = r0.<org.apache.solr.common.cloud.Slice: java.util.Map propMap>;

        $r13 = <org.apache.solr.common.cloud.Slice: java.lang.String REPLICAS>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        $r16 = (java.util.Map) $r15;

        $r32 = specialinvoke r0.<org.apache.solr.common.cloud.Slice: java.util.Map makeReplicas(java.util.Map)>($r16);

     label8:
        r0.<org.apache.solr.common.cloud.Slice: java.util.Map replicas> = $r32;

        $r19 = r0.<org.apache.solr.common.cloud.Slice: java.util.Map propMap>;

        $r18 = <org.apache.solr.common.cloud.Slice: java.lang.String REPLICAS>;

        $r17 = r0.<org.apache.solr.common.cloud.Slice: java.util.Map replicas>;

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r17);

        $r20 = specialinvoke r0.<org.apache.solr.common.cloud.Slice: org.apache.solr.common.cloud.Replica findLeader()>();

        r0.<org.apache.solr.common.cloud.Slice: org.apache.solr.common.cloud.Replica leader> = $r20;

        return;
    }

    private java.util.Map makeReplicas(java.util.Map)
    {
        java.util.HashMap $r11;
        java.util.LinkedHashMap $r1;
        java.util.Map r0, $r10;
        int $i0;
        java.lang.String r7;
        boolean $z0, $z1;
        java.util.Map$Entry r5;
        org.apache.solr.common.cloud.Slice r12;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.solr.common.cloud.Replica $r9, r13;
        java.lang.Object $r4, $r6, $r8;

        r12 := @this: org.apache.solr.common.cloud.Slice;

        r0 := @parameter0: java.util.Map;

        if r0 != null goto label1;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>(int)>(1);

        return $r11;

     label1:
        $r1 = new java.util.LinkedHashMap;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = $r8 instanceof org.apache.solr.common.cloud.Replica;

        if $z1 == 0 goto label3;

        r13 = (org.apache.solr.common.cloud.Replica) $r8;

        goto label4;

     label3:
        $r9 = new org.apache.solr.common.cloud.Replica;

        $r10 = (java.util.Map) $r8;

        specialinvoke $r9.<org.apache.solr.common.cloud.Replica: void <init>(java.lang.String,java.util.Map)>(r7, $r10);

        r13 = $r9;

     label4:
        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r13);

        goto label2;

     label5:
        return $r1;
    }

    private org.apache.solr.common.cloud.Replica findLeader()
    {
        org.apache.solr.common.cloud.Slice r0;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        org.apache.solr.common.cloud.Replica r5;
        java.util.Map $r1;
        java.lang.Object $r4;
        java.lang.String $r6, $r7;
        boolean $z0;

        r0 := @this: org.apache.solr.common.cloud.Slice;

        $r1 = r0.<org.apache.solr.common.cloud.Slice: java.util.Map replicas>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.solr.common.cloud.Replica) $r4;

        $r6 = <org.apache.solr.common.cloud.Slice: java.lang.String LEADER>;

        $r7 = virtualinvoke r5.<org.apache.solr.common.cloud.Replica: java.lang.String getStr(java.lang.String)>($r6);

        if $r7 == null goto label2;

        return r5;

     label2:
        goto label1;

     label3:
        return null;
    }

    public java.lang.String getName()
    {
        org.apache.solr.common.cloud.Slice r0;
        java.lang.String $r1;

        r0 := @this: org.apache.solr.common.cloud.Slice;

        $r1 = r0.<org.apache.solr.common.cloud.Slice: java.lang.String name>;

        return $r1;
    }

    public java.util.Collection getReplicas()
    {
        org.apache.solr.common.cloud.Slice r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.solr.common.cloud.Slice;

        $r1 = r0.<org.apache.solr.common.cloud.Slice: java.util.Map replicas>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public java.util.Map getReplicasMap()
    {
        org.apache.solr.common.cloud.Slice r0;
        java.util.Map $r1;

        r0 := @this: org.apache.solr.common.cloud.Slice;

        $r1 = r0.<org.apache.solr.common.cloud.Slice: java.util.Map replicas>;

        return $r1;
    }

    public java.util.Map getReplicasCopy()
    {
        java.util.LinkedHashMap $r0;
        org.apache.solr.common.cloud.Slice r1;
        java.util.Map $r2;

        r1 := @this: org.apache.solr.common.cloud.Slice;

        $r0 = new java.util.LinkedHashMap;

        $r2 = r1.<org.apache.solr.common.cloud.Slice: java.util.Map replicas>;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r2);

        return $r0;
    }

    public org.apache.solr.common.cloud.Replica getLeader()
    {
        org.apache.solr.common.cloud.Slice r0;
        org.apache.solr.common.cloud.Replica $r1;

        r0 := @this: org.apache.solr.common.cloud.Slice;

        $r1 = r0.<org.apache.solr.common.cloud.Slice: org.apache.solr.common.cloud.Replica leader>;

        return $r1;
    }

    public org.apache.solr.common.cloud.Replica getReplica(java.lang.String)
    {
        org.apache.solr.common.cloud.Slice r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        org.apache.solr.common.cloud.Replica $r4;

        r0 := @this: org.apache.solr.common.cloud.Slice;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.solr.common.cloud.Slice: java.util.Map replicas>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.solr.common.cloud.Replica) $r3;

        return $r4;
    }

    public org.apache.solr.common.cloud.DocRouter$Range getRange()
    {
        org.apache.solr.common.cloud.Slice r0;
        org.apache.solr.common.cloud.DocRouter$Range $r1;

        r0 := @this: org.apache.solr.common.cloud.Slice;

        $r1 = r0.<org.apache.solr.common.cloud.Slice: org.apache.solr.common.cloud.DocRouter$Range range>;

        return $r1;
    }

    public java.lang.String getState()
    {
        org.apache.solr.common.cloud.Slice r0;
        java.lang.String $r1;

        r0 := @this: org.apache.solr.common.cloud.Slice;

        $r1 = r0.<org.apache.solr.common.cloud.Slice: java.lang.String state>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.solr.common.cloud.Slice r1;
        java.util.Map $r5;
        java.lang.StringBuilder $r0, $r3, $r4, $r7;
        java.lang.String $r2, $r6, $r8;

        r1 := @this: org.apache.solr.common.cloud.Slice;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.apache.solr.common.cloud.Slice: java.lang.String name>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r5 = r1.<org.apache.solr.common.cloud.Slice: java.util.Map propMap>;

        $r6 = staticinvoke <org.noggit.JSONUtil: java.lang.String toJSON(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public void write(org.noggit.JSONWriter)
    {
        org.noggit.JSONWriter r0;
        org.apache.solr.common.cloud.Slice r1;
        java.util.Map $r2;

        r1 := @this: org.apache.solr.common.cloud.Slice;

        r0 := @parameter0: org.noggit.JSONWriter;

        $r2 = r1.<org.apache.solr.common.cloud.Slice: java.util.Map propMap>;

        virtualinvoke r0.<org.noggit.JSONWriter: void write(java.util.Map)>($r2);

        return;
    }

    static void <clinit>()
    {
        <org.apache.solr.common.cloud.Slice: java.lang.String REPLICAS> = "replicas";

        <org.apache.solr.common.cloud.Slice: java.lang.String RANGE> = "range";

        <org.apache.solr.common.cloud.Slice: java.lang.String STATE> = "state";

        <org.apache.solr.common.cloud.Slice: java.lang.String LEADER> = "leader";

        <org.apache.solr.common.cloud.Slice: java.lang.String ACTIVE> = "active";

        <org.apache.solr.common.cloud.Slice: java.lang.String INACTIVE> = "inactive";

        <org.apache.solr.common.cloud.Slice: java.lang.String CONSTRUCTION> = "construction";

        return;
    }
}
