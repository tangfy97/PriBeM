public class org.waveprotocol.box.server.waveserver.FutureUtil extends java.lang.Object
{

    public static java.lang.Object getResultOrPropagateException(java.util.concurrent.Future, java.lang.Class) throws java.lang.Exception, java.lang.InterruptedException
    {
        java.lang.Throwable $r3;
        org.waveprotocol.box.server.waveserver.FutureUtil$UnexpectedExceptionFromFuture $r5;
        java.lang.Exception $r7;
        java.util.concurrent.ExecutionException $r2;
        java.util.concurrent.Future r0;
        java.lang.Object $r1, $r6;
        java.lang.Class r4;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.Future;

        r4 := @parameter1: java.lang.Class;

     label1:
        $r1 = interfaceinvoke r0.<java.util.concurrent.Future: java.lang.Object get()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        $z0 = virtualinvoke r4.<java.lang.Class: boolean isInstance(java.lang.Object)>($r3);

        if $z0 == 0 goto label4;

        $r6 = virtualinvoke r4.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r3);

        $r7 = (java.lang.Exception) $r6;

        throw $r7;

     label4:
        $r5 = new org.waveprotocol.box.server.waveserver.FutureUtil$UnexpectedExceptionFromFuture;

        specialinvoke $r5.<org.waveprotocol.box.server.waveserver.FutureUtil$UnexpectedExceptionFromFuture: void <init>(java.lang.Throwable)>($r3);

        throw $r5;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    private void <init>()
    {
        org.waveprotocol.box.server.waveserver.FutureUtil r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.FutureUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
