class org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState extends java.lang.Object implements org.waveprotocol.box.server.waveserver.WaveletState
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private static final org.waveprotocol.wave.model.id.IdURIEncoderDecoder URI_CODEC;
    private static final org.waveprotocol.wave.model.version.HashedVersionFactory HASH_FACTORY;
    private static final com.google.common.base.Function TRANSFORMED;
    private final java.util.concurrent.Executor persistExecutor;
    private final org.waveprotocol.wave.model.version.HashedVersion versionZero;
    private final org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess deltasAccess;
    private final java.lang.Object persistLock;
    private org.waveprotocol.wave.model.version.HashedVersion latestVersionToPersist;
    private com.google.common.util.concurrent.ListenableFutureTask nextPersistTask;
    private final java.util.concurrent.Callable persisterTask;
    private final java.util.concurrent.ConcurrentNavigableMap appliedDeltas;
    private final java.util.concurrent.ConcurrentNavigableMap transformedDeltas;
    private org.waveprotocol.wave.model.wave.data.WaveletData snapshot;
    private final java.util.concurrent.atomic.AtomicReference lastPersistedVersion;

    private static java.util.Map$Entry lookupCached(java.util.NavigableMap, long)
    {
        java.util.Map$Entry $r2, $r5;
        long l0, $l1;
        java.util.NavigableMap r1;
        byte $b2;
        org.waveprotocol.wave.model.version.HashedVersion $r0, $r4;
        java.lang.Object $r3;

        r1 := @parameter0: java.util.NavigableMap;

        l0 := @parameter1: long;

        $r0 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: org.waveprotocol.wave.model.version.HashedVersion unsigned(long)>(l0);

        $r2 = interfaceinvoke r1.<java.util.NavigableMap: java.util.Map$Entry ceilingEntry(java.lang.Object)>($r0);

        if $r2 == null goto label1;

        $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = (org.waveprotocol.wave.model.version.HashedVersion) $r3;

        $l1 = virtualinvoke $r4.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b2 = $l1 cmp l0;

        if $b2 != 0 goto label1;

        $r5 = $r2;

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    public static org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState create(org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess, java.util.concurrent.Executor) throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        org.waveprotocol.box.server.persistence.PersistenceException $r12, $r14;
        com.google.common.collect.ImmutableList $r1, $r10;
        org.waveprotocol.wave.model.operation.OperationException $r11;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState $r7, $r9;
        boolean $z0;
        org.waveprotocol.wave.model.id.WaveletName $r2;
        com.google.common.base.Function $r4;
        java.util.Iterator $r5;
        java.util.concurrent.Executor r8;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r6;
        java.io.IOException $r13;
        com.google.common.collect.UnmodifiableIterator $r3;
        org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess r0;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess;

        r8 := @parameter1: java.util.concurrent.Executor;

        $z0 = interfaceinvoke r0.<org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r9 = new org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        $r10 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        specialinvoke $r9.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: void <init>(org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess,java.util.List,org.waveprotocol.wave.model.wave.data.WaveletData,java.util.concurrent.Executor)>(r0, $r10, null, r8);

        return $r9;

     label1:
        $r1 = staticinvoke <org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: com.google.common.collect.ImmutableList readAll(org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader)>(r0);

        $r2 = interfaceinvoke r0.<org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        $r3 = virtualinvoke $r1.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();

        $r4 = <org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: com.google.common.base.Function TRANSFORMED>;

        $r5 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function)>($r3, $r4);

        $r6 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.wave.data.ObservableWaveletData buildWaveletFromDeltas(org.waveprotocol.wave.model.id.WaveletName,java.util.Iterator)>($r2, $r5);

        $r7 = new org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        specialinvoke $r7.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: void <init>(org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess,java.util.List,org.waveprotocol.wave.model.wave.data.WaveletData,java.util.concurrent.Executor)>(r0, $r1, $r6, r8);

     label2:
        return $r7;

     label3:
        $r13 := @caughtexception;

        $r14 = new org.waveprotocol.box.server.persistence.PersistenceException;

        specialinvoke $r14.<org.waveprotocol.box.server.persistence.PersistenceException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to read stored deltas", $r13);

        throw $r14;

     label4:
        $r11 := @caughtexception;

        $r12 = new org.waveprotocol.box.server.persistence.PersistenceException;

        specialinvoke $r12.<org.waveprotocol.box.server.persistence.PersistenceException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to compose stored deltas", $r11);

        throw $r12;

        catch java.io.IOException from label1 to label2 with label3;
        catch org.waveprotocol.wave.model.operation.OperationException from label1 to label2 with label4;
    }

    private static com.google.common.collect.ImmutableList readAll(org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader) throws java.io.IOException
    {
        com.google.common.collect.ImmutableList $r2;
        org.waveprotocol.wave.model.version.HashedVersion $r1;
        long $l0;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader r0;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader;

        $r1 = interfaceinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader: org.waveprotocol.wave.model.version.HashedVersion getEndVersion()>();

        $l0 = virtualinvoke $r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r2 = staticinvoke <org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: com.google.common.collect.ImmutableList readDeltasInRange(org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader,long,long)>(r0, 0L, $l0);

        return $r2;
    }

    private static com.google.common.collect.ImmutableList readDeltasInRange(org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader, long, long) throws java.io.IOException
    {
        long l0, l1, l2;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader r0;
        com.google.common.collect.ImmutableList $r2;
        byte $b3;
        org.waveprotocol.wave.model.version.HashedVersion $r4;
        int $i4;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r3;
        boolean $z0, $z1;
        com.google.common.collect.ImmutableList$Builder $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $z0 = interfaceinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z1);

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();

        l2 = l0;

     label3:
        $b3 = l2 cmp l1;

        $i4 = (int) $b3;

        if $i4 >= 0 goto label4;

        $r3 = interfaceinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord getDelta(long)>(l2);

        virtualinvoke $r1.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r3);

        $r4 = virtualinvoke $r3.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        l2 = virtualinvoke $r4.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        goto label3;

     label4:
        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        return $r2;
    }

    void <init>(org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess, java.util.List, org.waveprotocol.wave.model.wave.data.WaveletData, java.util.concurrent.Executor)
    {
        java.util.concurrent.atomic.AtomicReference $r12;
        org.waveprotocol.wave.model.version.HashedVersionFactory $r9;
        org.waveprotocol.wave.model.version.HashedVersion $r11, $r13;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;
        org.waveprotocol.wave.model.wave.data.WaveletData r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.model.id.WaveletName $r10;
        java.util.concurrent.Executor r8;
        java.util.concurrent.ConcurrentSkipListMap $r3, $r4;
        java.util.List r6;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState$2 $r2;
        java.lang.Object $r1;
        org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess r5;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        r5 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess;

        r6 := @parameter1: java.util.List;

        r7 := @parameter2: org.waveprotocol.wave.model.wave.data.WaveletData;

        r8 := @parameter3: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.lang.Object persistLock> = $r1;

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.version.HashedVersion latestVersionToPersist> = null;

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: com.google.common.util.concurrent.ListenableFutureTask nextPersistTask> = null;

        $r2 = new org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState$2;

        specialinvoke $r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState$2: void <init>(org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState)>(r0);

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.Callable persisterTask> = $r2;

        $r3 = new java.util.concurrent.ConcurrentSkipListMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap: void <init>()>();

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap appliedDeltas> = $r3;

        $r4 = new java.util.concurrent.ConcurrentSkipListMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentSkipListMap: void <init>()>();

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap transformedDeltas> = $r4;

        $z0 = interfaceinvoke r5.<org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess: boolean isEmpty()>();

        $z1 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>();

        if $z0 != $z1 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z3);

        $z2 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>();

        if r7 != null goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        if $z2 != $z4 goto label5;

        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z5);

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.Executor persistExecutor> = r8;

        $r9 = <org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.version.HashedVersionFactory HASH_FACTORY>;

        $r10 = interfaceinvoke r5.<org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        $r11 = interfaceinvoke $r9.<org.waveprotocol.wave.model.version.HashedVersionFactory: org.waveprotocol.wave.model.version.HashedVersion createVersionZero(org.waveprotocol.wave.model.id.WaveletName)>($r10);

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.version.HashedVersion versionZero> = $r11;

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess deltasAccess> = r5;

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.wave.data.WaveletData snapshot> = r7;

        $r12 = new java.util.concurrent.atomic.AtomicReference;

        $r13 = interfaceinvoke r5.<org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess: org.waveprotocol.wave.model.version.HashedVersion getEndVersion()>();

        specialinvoke $r12.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r13);

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.atomic.AtomicReference lastPersistedVersion> = $r12;

        return;
    }

    public org.waveprotocol.wave.model.id.WaveletName getWaveletName()
    {
        org.waveprotocol.wave.model.id.WaveletName $r2;
        org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess $r1;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess deltasAccess>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.wave.data.ReadableWaveletData getSnapshot()
    {
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;
        org.waveprotocol.wave.model.wave.data.WaveletData $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.wave.data.WaveletData snapshot>;

        return $r1;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()
    {
        org.waveprotocol.wave.model.version.HashedVersion $r3;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;
        org.waveprotocol.wave.model.wave.data.WaveletData $r1, $r2;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.wave.data.WaveletData snapshot>;

        if $r1 != null goto label1;

        $r3 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.version.HashedVersion versionZero>;

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.wave.data.WaveletData snapshot>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.data.WaveletData: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

     label2:
        return $r3;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getLastPersistedVersion()
    {
        org.waveprotocol.wave.model.version.HashedVersion r3, $r4;
        java.lang.Object $r2;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.atomic.AtomicReference lastPersistedVersion>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (org.waveprotocol.wave.model.version.HashedVersion) $r2;

        if r3 != null goto label1;

        $r4 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.version.HashedVersion versionZero>;

        goto label2;

     label1:
        $r4 = r3;

     label2:
        return $r4;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getHashedVersion(long)
    {
        long l0, $l2;
        com.google.gxp.compiler.io.RuntimeIOException $r12;
        byte $b1, $b3;
        org.waveprotocol.wave.model.version.HashedVersion $r7, $r9, $r10, $r13;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r5;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;
        org.waveprotocol.wave.model.wave.data.WaveletData $r3, $r4, $r8;
        java.util.Map$Entry $r2;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        java.io.IOException $r11;
        java.lang.Object $r6;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        l0 := @parameter0: long;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap transformedDeltas>;

        $r2 = staticinvoke <org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.Map$Entry lookupCached(java.util.NavigableMap,long)>($r1, l0);

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r10 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.version.HashedVersion versionZero>;

        return $r10;

     label1:
        $r3 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.wave.data.WaveletData snapshot>;

        if $r3 != null goto label2;

        return null;

     label2:
        $r4 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.wave.data.WaveletData snapshot>;

        $l2 = interfaceinvoke $r4.<org.waveprotocol.wave.model.wave.data.WaveletData: long getVersion()>();

        $b3 = l0 cmp $l2;

        if $b3 != 0 goto label3;

        $r8 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.wave.data.WaveletData snapshot>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.model.wave.data.WaveletData: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        return $r9;

     label3:
        $r5 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord lookup(long)>(l0);

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        $r12 = new com.google.gxp.compiler.io.RuntimeIOException;

        specialinvoke $r12.<com.google.gxp.compiler.io.RuntimeIOException: void <init>(java.io.IOException)>($r11);

        throw $r12;

     label6:
        if $r5 != null goto label7;

        if $r2 == null goto label7;

        $r6 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (org.waveprotocol.wave.model.version.HashedVersion) $r6;

        return $r7;

     label7:
        if $r5 == null goto label8;

        $r13 = virtualinvoke $r5.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.version.HashedVersion getAppliedAtVersion()>();

        goto label9;

     label8:
        $r13 = null;

     label9:
        return $r13;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta getTransformedDelta(org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r4, $r8;
        java.util.concurrent.ConcurrentNavigableMap $r2;
        long $l0;
        java.io.IOException $r6;
        com.google.gxp.compiler.io.RuntimeIOException $r7;
        org.waveprotocol.wave.model.version.HashedVersion r1;
        java.lang.Object $r3;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r5;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        r1 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap transformedDeltas>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) $r3;

        if r4 == null goto label1;

        return r4;

     label1:
        $l0 = virtualinvoke r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r5 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord lookup(long)>($l0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new com.google.gxp.compiler.io.RuntimeIOException;

        specialinvoke $r7.<com.google.gxp.compiler.io.RuntimeIOException: void <init>(java.io.IOException)>($r6);

        throw $r7;

     label4:
        if $r5 == null goto label5;

        $r8 = $r5.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta transformed>;

        goto label6;

     label5:
        $r8 = null;

     label6:
        return $r8;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta getTransformedDeltaByEndVersion(org.waveprotocol.wave.model.version.HashedVersion)
    {
        java.lang.Object[] $r1;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r9, r10, $r11;
        long $l0;
        byte $b1;
        org.waveprotocol.wave.model.version.HashedVersion r0, $r7;
        int $i2;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r6;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r2;
        org.waveprotocol.wave.model.wave.data.WaveletData $r5;
        boolean $z0, $z1;
        java.util.Map$Entry $r4;
        java.util.concurrent.ConcurrentNavigableMap $r3;
        java.lang.Object $r8;

        r2 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        r0 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r0;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "end version %s is not positive", $r1);

        $r3 = r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap transformedDeltas>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentNavigableMap: java.util.Map$Entry lowerEntry(java.lang.Object)>(r0);

        if $r4 == null goto label3;

        $r8 = interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) $r8;

        goto label4;

     label3:
        $r9 = null;

     label4:
        $r5 = r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.wave.data.WaveletData snapshot>;

        if $r5 != null goto label5;

        return null;

     label5:
        $r6 = specialinvoke r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord getDeltaRecordByEndVersion(org.waveprotocol.wave.model.version.HashedVersion)>(r0);

        if $r6 != null goto label6;

        if $r9 == null goto label6;

        $r7 = virtualinvoke $r9.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        $z0 = virtualinvoke $r7.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label6;

        r10 = $r9;

        goto label9;

     label6:
        if $r6 == null goto label7;

        $r11 = virtualinvoke $r6.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta getTransformedDelta()>();

        goto label8;

     label7:
        $r11 = null;

     label8:
        r10 = $r11;

     label9:
        return r10;
    }

    public org.waveprotocol.box.common.DeltaSequence getTransformedDeltaHistory(org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r15, $r21;
        byte $b2;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord r24;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.concurrent.ConcurrentNavigableMap $r5, $r6;
        java.util.Collection $r17;
        java.lang.Object[] $r2;
        long $l0, $l1, $l3, $l4;
        org.waveprotocol.box.common.DeltaSequence r25;
        java.util.ArrayList $r18;
        com.google.gxp.compiler.io.RuntimeIOException $r26;
        com.google.common.collect.ImmutableList $r8;
        org.waveprotocol.wave.model.version.HashedVersion r0, r1, $r12, $r16, $r20;
        int $i5;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r4;
        java.util.Map$Entry $r13;
        java.util.Iterator $r10;
        java.io.IOException $r22;
        java.util.TreeMap $r3, $r9;
        java.lang.Object $r11, $r14, $r19;
        org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess $r7;

        r4 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        r0 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        r1 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $l1 = virtualinvoke r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b2 = $l0 cmp $l1;

        $i5 = (int) $b2;

        if $i5 >= 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r0;

        $r2[1] = r1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z4, "Start version %s should be smaller than end version %s", $r2);

        $r3 = staticinvoke <com.google.common.collect.Maps: java.util.TreeMap newTreeMap()>();

        $r5 = r4.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap transformedDeltas>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentNavigableMap: java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r0, 1, r1, 0);

        interfaceinvoke $r3.<java.util.NavigableMap: void putAll(java.util.Map)>($r6);

     label03:
        $r7 = r4.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess deltasAccess>;

        $l3 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $l4 = virtualinvoke r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r8 = staticinvoke <org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: com.google.common.collect.ImmutableList readDeltasInRange(org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader,long,long)>($r7, $l3, $l4);

     label04:
        goto label06;

     label05:
        $r22 := @caughtexception;

        $r26 = new com.google.gxp.compiler.io.RuntimeIOException;

        specialinvoke $r26.<com.google.gxp.compiler.io.RuntimeIOException: void <init>(java.io.IOException)>($r22);

        throw $r26;

     label06:
        $r9 = staticinvoke <com.google.common.collect.Maps: java.util.TreeMap newTreeMap()>();

        interfaceinvoke $r9.<java.util.NavigableMap: void putAll(java.util.Map)>($r3);

        $r10 = virtualinvoke $r8.<com.google.common.collect.ImmutableList: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r19 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r24 = (org.waveprotocol.box.server.waveserver.WaveletDeltaRecord) $r19;

        $r20 = virtualinvoke r24.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.version.HashedVersion getAppliedAtVersion()>();

        $r21 = virtualinvoke r24.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta getTransformedDelta()>();

        interfaceinvoke $r9.<java.util.NavigableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r21);

        goto label07;

     label08:
        $z1 = interfaceinvoke $r9.<java.util.NavigableMap: boolean isEmpty()>();

        if $z1 != 0 goto label09;

        $r11 = interfaceinvoke $r9.<java.util.NavigableMap: java.lang.Object firstKey()>();

        $r12 = (org.waveprotocol.wave.model.version.HashedVersion) $r11;

        $z2 = virtualinvoke $r12.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label09;

        $r13 = interfaceinvoke $r9.<java.util.NavigableMap: java.util.Map$Entry lastEntry()>();

        $r14 = interfaceinvoke $r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15 = (org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) $r14;

        $r16 = virtualinvoke $r15.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        $z3 = virtualinvoke $r16.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label09;

        $r17 = interfaceinvoke $r9.<java.util.NavigableMap: java.util.Collection values()>();

        $r18 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r17);

        r25 = staticinvoke <org.waveprotocol.box.common.DeltaSequence: org.waveprotocol.box.common.DeltaSequence of(java.lang.Iterable)>($r18);

        goto label10;

     label09:
        r25 = null;

     label10:
        return r25;

        catch java.io.IOException from label03 to label04 with label05;
    }

    public org.waveprotocol.box.server.waveserver.ByteStringMessage getAppliedDelta(org.waveprotocol.wave.model.version.HashedVersion)
    {
        java.util.concurrent.ConcurrentNavigableMap $r2;
        org.waveprotocol.box.server.waveserver.ByteStringMessage r4, $r8;
        long $l0;
        java.io.IOException $r5;
        com.google.gxp.compiler.io.RuntimeIOException $r6;
        org.waveprotocol.wave.model.version.HashedVersion r1;
        java.lang.Object $r3;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord r7;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        r1 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap appliedDeltas>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.waveprotocol.box.server.waveserver.ByteStringMessage) $r3;

        if r4 == null goto label1;

        return r4;

     label1:
        r7 = null;

     label2:
        $l0 = virtualinvoke r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        r7 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord lookup(long)>($l0);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new com.google.gxp.compiler.io.RuntimeIOException;

        specialinvoke $r6.<com.google.gxp.compiler.io.RuntimeIOException: void <init>(java.io.IOException)>($r5);

     label5:
        if r7 == null goto label6;

        $r8 = r7.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.box.server.waveserver.ByteStringMessage applied>;

        goto label7;

     label6:
        $r8 = null;

     label7:
        return $r8;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public org.waveprotocol.box.server.waveserver.ByteStringMessage getAppliedDeltaByEndVersion(org.waveprotocol.wave.model.version.HashedVersion)
    {
        java.util.Map$Entry $r4;
        java.lang.Object[] $r1;
        java.util.concurrent.ConcurrentNavigableMap $r3;
        long $l0;
        org.waveprotocol.box.server.waveserver.ByteStringMessage $r7, r8, $r9;
        byte $b1;
        org.waveprotocol.wave.model.version.HashedVersion r0;
        int $i2;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r5;
        java.lang.Object $r6;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r2;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        r0 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r0;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "end version %s is not positive", $r1);

        $r3 = r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap appliedDeltas>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentNavigableMap: java.util.Map$Entry lowerEntry(java.lang.Object)>(r0);

        if $r4 == null goto label3;

        $r6 = interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (org.waveprotocol.box.server.waveserver.ByteStringMessage) $r6;

        goto label4;

     label3:
        $r7 = null;

     label4:
        $r5 = specialinvoke r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord getDeltaRecordByEndVersion(org.waveprotocol.wave.model.version.HashedVersion)>(r0);

        if $r5 != null goto label5;

        $z0 = specialinvoke r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: boolean isDeltaBoundary(org.waveprotocol.wave.model.version.HashedVersion)>(r0);

        if $z0 == 0 goto label5;

        r8 = $r7;

        goto label8;

     label5:
        if $r5 == null goto label6;

        $r9 = virtualinvoke $r5.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.box.server.waveserver.ByteStringMessage getAppliedDelta()>();

        goto label7;

     label6:
        $r9 = null;

     label7:
        r8 = $r9;

     label8:
        return r8;
    }

    public java.util.Collection getAppliedDeltaHistory(org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion)
    {
        java.util.concurrent.ConcurrentNavigableMap $r3, $r4;
        java.util.Collection $r5;
        long $l0, $l1;
        byte $b2;
        org.waveprotocol.wave.model.version.HashedVersion r0, r1;
        int $i3;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r2;
        boolean $z0, $z1, $z2;

        r2 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        r0 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        r1 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $l1 = virtualinvoke r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b2 = $l0 cmp $l1;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z2);

        $z0 = specialinvoke r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: boolean isDeltaBoundary(org.waveprotocol.wave.model.version.HashedVersion)>(r0);

        if $z0 == 0 goto label3;

        $z1 = specialinvoke r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: boolean isDeltaBoundary(org.waveprotocol.wave.model.version.HashedVersion)>(r1);

        if $z1 == 0 goto label3;

        $r3 = r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap appliedDeltas>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentNavigableMap: java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object,java.lang.Object)>(r0, r1);

        $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentNavigableMap: java.util.Collection values()>();

        goto label4;

     label3:
        $r5 = null;

     label4:
        return $r5;
    }

    public java.util.Collection getAppliedDeltaHistory1(org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion)
    {
        long $l0, $l1, $l3, $l4;
        org.waveprotocol.box.server.waveserver.ByteStringMessage r13, $r15;
        java.util.ArrayList $r10;
        com.google.gxp.compiler.io.RuntimeIOException $r19;
        java.util.HashSet $r2;
        byte $b2;
        com.google.common.collect.ImmutableList $r8;
        org.waveprotocol.wave.model.version.HashedVersion r0, r1;
        int $i5;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord r18;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r9, $r11;
        java.util.concurrent.ConcurrentNavigableMap $r4, $r5;
        java.util.Collection $r6;
        java.io.IOException $r16;
        java.lang.Object $r12, $r14;
        org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess $r7;

        r3 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        r0 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        r1 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $l1 = virtualinvoke r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b2 = $l0 cmp $l1;

        $i5 = (int) $b2;

        if $i5 >= 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z4);

        $r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>();

        $r4 = r3.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap appliedDeltas>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentNavigableMap: java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object,java.lang.Object)>(r0, r1);

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentNavigableMap: java.util.Collection values()>();

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

     label03:
        $r7 = r3.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess deltasAccess>;

        $l3 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $l4 = virtualinvoke r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r8 = staticinvoke <org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: com.google.common.collect.ImmutableList readDeltasInRange(org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader,long,long)>($r7, $l3, $l4);

     label04:
        goto label06;

     label05:
        $r16 := @caughtexception;

        $r19 = new com.google.gxp.compiler.io.RuntimeIOException;

        specialinvoke $r19.<com.google.gxp.compiler.io.RuntimeIOException: void <init>(java.io.IOException)>($r16);

        throw $r19;

     label06:
        $r9 = virtualinvoke $r8.<com.google.common.collect.ImmutableList: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r14 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.waveprotocol.box.server.waveserver.WaveletDeltaRecord) $r14;

        $r15 = virtualinvoke r18.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.box.server.waveserver.ByteStringMessage getAppliedDelta()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r15);

        goto label07;

     label08:
        $r10 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $z1 = specialinvoke r3.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: boolean isDeltaBoundary(org.waveprotocol.wave.model.version.HashedVersion)>(r0);

        if $z1 == 0 goto label10;

        $z2 = specialinvoke r3.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: boolean isDeltaBoundary(org.waveprotocol.wave.model.version.HashedVersion)>(r1);

        if $z2 == 0 goto label10;

        $r11 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z3 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.waveprotocol.box.server.waveserver.ByteStringMessage) $r12;

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>(r13);

        goto label09;

     label10:
        return $r10;

        catch java.io.IOException from label03 to label04 with label05;
    }

    public void appendDelta(org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta, org.waveprotocol.box.server.waveserver.ByteStringMessage) throws org.waveprotocol.wave.model.operation.OperationException
    {
        java.lang.Object[] $r3;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r4;
        long $l0;
        org.waveprotocol.box.server.waveserver.ByteStringMessage r7;
        java.util.concurrent.atomic.AtomicReference $r9;
        byte $b1;
        org.waveprotocol.wave.model.version.HashedVersion $r1, r2;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;
        org.waveprotocol.wave.model.wave.data.WaveletData $r5;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.id.WaveletName $r11;
        java.util.concurrent.ConcurrentNavigableMap $r6, $r8;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r12;
        java.lang.Object $r10;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        r2 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        r4 := @parameter1: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        r7 := @parameter2: org.waveprotocol.box.server.waveserver.ByteStringMessage;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()>();

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>(r2);

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r2;

        $r3[1] = $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Applied version %s doesn\'t match current version %s", $r3);

        $l0 = virtualinvoke r2.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label3;

        $r9 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.atomic.AtomicReference lastPersistedVersion>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r10 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z1);

        $r11 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        $r12 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.wave.data.ObservableWaveletData buildWaveletFromFirstDelta(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)>($r11, r4);

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.wave.data.WaveletData snapshot> = $r12;

        goto label4;

     label3:
        $r5 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.wave.data.WaveletData snapshot>;

        staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: void applyWaveletDelta(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta,org.waveprotocol.wave.model.wave.data.WaveletData)>(r4, $r5);

     label4:
        $r6 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap transformedDeltas>;

        interfaceinvoke $r6.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r4);

        $r8 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap appliedDeltas>;

        interfaceinvoke $r8.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r7);

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture persist(org.waveprotocol.wave.model.version.HashedVersion)
    {
        com.google.common.util.concurrent.ListenableFutureTask $r10, $r11, $r24, $r25;
        byte $b1, $b4;
        org.waveprotocol.wave.util.logging.Log $r15;
        boolean $z0, $z1;
        java.lang.StringBuilder $r16, $r17, $r18, $r20, $r23;
        java.lang.Throwable $r22;
        java.lang.Object[] $r1, $r3;
        long $l0, $l2, $l3;
        java.util.concurrent.Callable $r7, $r13;
        org.waveprotocol.wave.model.version.HashedVersion r0, $r5, $r9, $r19;
        int $i5, $i6;
        java.lang.String $r21;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r2;
        java.util.concurrent.Executor $r8;
        java.lang.Object $r4;

        r2 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        r0 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b1 = $l0 cmp 0L;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r0;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Cannot persist non-positive version %s", $r1);

        $z0 = specialinvoke r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: boolean isDeltaBoundary(org.waveprotocol.wave.model.version.HashedVersion)>(r0);

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r0;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Version to persist %s matches no delta", $r3);

        $r4 = r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.lang.Object persistLock>;

        entermonitor $r4;

     label03:
        $r5 = r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.version.HashedVersion latestVersionToPersist>;

        if $r5 == null goto label08;

        $l2 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r9 = r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.version.HashedVersion latestVersionToPersist>;

        $l3 = virtualinvoke $r9.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b4 = $l2 cmp $l3;

        $i6 = (int) $b4;

        if $i6 > 0 goto label04;

        $r15 = <org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.util.logging.Log LOG>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to persist version ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" smaller than last version requested ");

        $r19 = r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.version.HashedVersion latestVersionToPersist>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r21);

        goto label05;

     label04:
        r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.version.HashedVersion latestVersionToPersist> = r0;

     label05:
        $r10 = r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: com.google.common.util.concurrent.ListenableFutureTask nextPersistTask>;

        if $r10 != null goto label06;

        $r24 = new com.google.common.util.concurrent.ListenableFutureTask;

        $r13 = r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.Callable persisterTask>;

        specialinvoke $r24.<com.google.common.util.concurrent.ListenableFutureTask: void <init>(java.util.concurrent.Callable)>($r13);

        r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: com.google.common.util.concurrent.ListenableFutureTask nextPersistTask> = $r24;

     label06:
        $r11 = r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: com.google.common.util.concurrent.ListenableFutureTask nextPersistTask>;

        exitmonitor $r4;

     label07:
        return $r11;

     label08:
        r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.version.HashedVersion latestVersionToPersist> = r0;

        $r25 = new com.google.common.util.concurrent.ListenableFutureTask;

        $r7 = r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.Callable persisterTask>;

        specialinvoke $r25.<com.google.common.util.concurrent.ListenableFutureTask: void <init>(java.util.concurrent.Callable)>($r7);

        $r8 = r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.Executor persistExecutor>;

        interfaceinvoke $r8.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r25);

        exitmonitor $r4;

     label09:
        return $r25;

     label10:
        $r22 := @caughtexception;

        exitmonitor $r4;

     label11:
        throw $r22;

        catch java.lang.Throwable from label03 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void flush(org.waveprotocol.wave.model.version.HashedVersion)
    {
        java.util.concurrent.ConcurrentNavigableMap $r2, $r3, $r5, $r6;
        org.waveprotocol.wave.model.version.HashedVersion r1;
        java.lang.Object $r4, $r7;
        org.waveprotocol.wave.util.logging.Log $r8, $r10;
        java.lang.StringBuilder $r9, $r11, $r12;
        java.lang.String $r13;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        r1 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        $r3 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap transformedDeltas>;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap transformedDeltas>;

        $r4 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object lowerKey(java.lang.Object)>(r1);

        interfaceinvoke $r3.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object remove(java.lang.Object)>($r4);

        $r6 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap appliedDeltas>;

        $r5 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap appliedDeltas>;

        $r7 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object lowerKey(java.lang.Object)>(r1);

        interfaceinvoke $r6.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object remove(java.lang.Object)>($r7);

        $r8 = <org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.util.logging.Log LOG>;

        $z0 = virtualinvoke $r8.<org.waveprotocol.wave.util.logging.Log: boolean isFineLoggable()>();

        if $z0 == 0 goto label1;

        $r10 = <org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.util.logging.Log LOG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Flushed deltas up to version ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<org.waveprotocol.wave.util.logging.Log: void fine(java.lang.String)>($r13);

     label1:
        return;
    }

    public void close()
    {
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        return;
    }

    private org.waveprotocol.box.server.waveserver.WaveletDeltaRecord lookup(long) throws java.io.IOException
    {
        long l0;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r2;
        org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess $r1;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        l0 := @parameter0: long;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess deltasAccess>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord getDelta(long)>(l0);

        return $r2;
    }

    private org.waveprotocol.box.server.waveserver.WaveletDeltaRecord getDeltaRecordByEndVersion(org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.version.HashedVersion r0;
        long $l0;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r3;
        java.io.IOException $r4;
        org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess $r2;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r1;
        com.google.gxp.compiler.io.RuntimeIOException $r5;

        r1 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        r0 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

     label1:
        $r2 = r1.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess deltasAccess>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord getDeltaByEndVersion(long)>($l0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new com.google.gxp.compiler.io.RuntimeIOException;

        specialinvoke $r5.<com.google.gxp.compiler.io.RuntimeIOException: void <init>(java.io.IOException)>($r4);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private boolean isDeltaBoundary(org.waveprotocol.wave.model.version.HashedVersion)
    {
        java.util.concurrent.ConcurrentNavigableMap $r3;
        org.waveprotocol.wave.model.version.HashedVersion r0, $r2;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        r0 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "version is null");

        $r2 = virtualinvoke r1.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()>();

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r3 = r1.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap transformedDeltas>;

        $z1 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentNavigableMap: boolean containsKey(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    static java.lang.Object access$000(org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState)
    {
        java.lang.Object $r1;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.lang.Object persistLock>;

        return $r1;
    }

    static java.util.concurrent.atomic.AtomicReference access$100(org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState)
    {
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.atomic.AtomicReference lastPersistedVersion>;

        return $r1;
    }

    static org.waveprotocol.wave.model.version.HashedVersion access$200(org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState)
    {
        org.waveprotocol.wave.model.version.HashedVersion $r1;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.version.HashedVersion latestVersionToPersist>;

        return $r1;
    }

    static org.waveprotocol.wave.util.logging.Log access$300()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = <org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.util.logging.Log LOG>;

        return $r0;
    }

    static org.waveprotocol.wave.model.version.HashedVersion access$400(org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState)
    {
        org.waveprotocol.wave.model.version.HashedVersion $r1;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.version.HashedVersion versionZero>;

        return $r1;
    }

    static java.util.concurrent.ConcurrentNavigableMap access$500(org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState)
    {
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap appliedDeltas>;

        return $r1;
    }

    static java.util.concurrent.ConcurrentNavigableMap access$600(org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState)
    {
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.ConcurrentNavigableMap transformedDeltas>;

        return $r1;
    }

    static org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess access$700(org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState)
    {
        org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess $r1;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess deltasAccess>;

        return $r1;
    }

    static com.google.common.util.concurrent.ListenableFutureTask access$800(org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState)
    {
        com.google.common.util.concurrent.ListenableFutureTask $r1;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: com.google.common.util.concurrent.ListenableFutureTask nextPersistTask>;

        return $r1;
    }

    static java.util.concurrent.Executor access$900(org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState)
    {
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;
        java.util.concurrent.Executor $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: java.util.concurrent.Executor persistExecutor>;

        return $r1;
    }

    static com.google.common.util.concurrent.ListenableFutureTask access$802(org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState, com.google.common.util.concurrent.ListenableFutureTask)
    {
        com.google.common.util.concurrent.ListenableFutureTask r1;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        r1 := @parameter1: com.google.common.util.concurrent.ListenableFutureTask;

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: com.google.common.util.concurrent.ListenableFutureTask nextPersistTask> = r1;

        return r1;
    }

    static org.waveprotocol.wave.model.version.HashedVersion access$202(org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.version.HashedVersion r1;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState r0;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState;

        r1 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.version.HashedVersion latestVersionToPersist> = r1;

        return r1;
    }

    static void <clinit>()
    {
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState$1 $r5;
        org.waveprotocol.wave.util.escapers.jvm.JavaUrlCodec $r2;
        org.waveprotocol.wave.util.logging.Log $r0;
        org.waveprotocol.wave.model.id.IdURIEncoderDecoder $r1, $r4;
        org.waveprotocol.wave.model.version.HashedVersionFactoryImpl $r3;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/DeltaStoreBasedWaveletState;");

        <org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        $r1 = new org.waveprotocol.wave.model.id.IdURIEncoderDecoder;

        $r2 = new org.waveprotocol.wave.util.escapers.jvm.JavaUrlCodec;

        specialinvoke $r2.<org.waveprotocol.wave.util.escapers.jvm.JavaUrlCodec: void <init>()>();

        specialinvoke $r1.<org.waveprotocol.wave.model.id.IdURIEncoderDecoder: void <init>(org.waveprotocol.wave.model.id.URIEncoderDecoder$PercentEncoderDecoder)>($r2);

        <org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.id.IdURIEncoderDecoder URI_CODEC> = $r1;

        $r3 = new org.waveprotocol.wave.model.version.HashedVersionFactoryImpl;

        $r4 = <org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.id.IdURIEncoderDecoder URI_CODEC>;

        specialinvoke $r3.<org.waveprotocol.wave.model.version.HashedVersionFactoryImpl: void <init>(org.waveprotocol.wave.model.id.IdURIEncoderDecoder)>($r4);

        <org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: org.waveprotocol.wave.model.version.HashedVersionFactory HASH_FACTORY> = $r3;

        $r5 = new org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState$1;

        specialinvoke $r5.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState$1: void <init>()>();

        <org.waveprotocol.box.server.waveserver.DeltaStoreBasedWaveletState: com.google.common.base.Function TRANSFORMED> = $r5;

        return;
    }
}
