public class com.hp.hpl.jena.rdf.model.impl.ContainerImpl extends com.hp.hpl.jena.rdf.model.impl.ResourceImpl implements com.hp.hpl.jena.rdf.model.Container, com.hp.hpl.jena.rdf.model.impl.ContainerI
{
    static com.hp.hpl.jena.rdf.model.impl.NodeIteratorFactory iteratorFactory;

    public void <init>(com.hp.hpl.jena.rdf.model.impl.ModelCom)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        com.hp.hpl.jena.rdf.model.impl.ModelCom r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.impl.ModelCom;

        specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ResourceImpl: void <init>(com.hp.hpl.jena.rdf.model.impl.ModelCom)>(r1);

        return;
    }

    public void <init>(java.lang.String, com.hp.hpl.jena.rdf.model.impl.ModelCom)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        com.hp.hpl.jena.rdf.model.impl.ModelCom r2;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.impl.ModelCom;

        specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ResourceImpl: void <init>(java.lang.String,com.hp.hpl.jena.rdf.model.impl.ModelCom)>(r1, r2);

        return;
    }

    public void <init>(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.impl.ModelCom)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        com.hp.hpl.jena.rdf.model.impl.ModelCom r3;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.rdf.model.Resource r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r3 := @parameter1: com.hp.hpl.jena.rdf.model.impl.ModelCom;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ResourceImpl: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.rdf.model.impl.ModelCom)>($r2, r3);

        return;
    }

    public void <init>(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.enhanced.EnhGraph)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.enhanced.EnhGraph r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.enhanced.EnhGraph;

        specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ResourceImpl: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.enhanced.EnhGraph)>(r1, r2);

        return;
    }

    protected void <init>(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        com.hp.hpl.jena.rdf.model.Model $r2;
        com.hp.hpl.jena.rdf.model.impl.ModelCom $r3;
        com.hp.hpl.jena.rdf.model.Resource r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r3 = (com.hp.hpl.jena.rdf.model.impl.ModelCom) $r2;

        specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: void <init>(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.impl.ModelCom)>(r1, $r3);

        return;
    }

    private boolean is(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        com.hp.hpl.jena.rdf.model.Resource r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r2, r1);

        return $z0;
    }

    public boolean isAlt()
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        com.hp.hpl.jena.rdf.model.Resource $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        $r1 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource Alt>;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: boolean is(com.hp.hpl.jena.rdf.model.Resource)>($r1);

        return $z0;
    }

    public boolean isBag()
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        com.hp.hpl.jena.rdf.model.Resource $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        $r1 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource Bag>;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: boolean is(com.hp.hpl.jena.rdf.model.Resource)>($r1);

        return $z0;
    }

    public boolean isSeq()
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        com.hp.hpl.jena.rdf.model.Resource $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        $r1 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource Seq>;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: boolean is(com.hp.hpl.jena.rdf.model.Resource)>($r1);

        return $z0;
    }

    public com.hp.hpl.jena.rdf.model.Container add(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r2;
        com.hp.hpl.jena.rdf.model.Property $r1;
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        int $i0, $i1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: int size()>();

        $i1 = $i0 + 1;

        $r1 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property li(int)>($i1);

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r1, r2);

        return r0;
    }

    public com.hp.hpl.jena.rdf.model.Container add(boolean)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        java.lang.String $r1;
        com.hp.hpl.jena.rdf.model.Container $r2;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z0);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.Container add(java.lang.String)>($r1);

        return $r2;
    }

    public com.hp.hpl.jena.rdf.model.Container add(long)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        long l0;
        java.lang.String $r1;
        com.hp.hpl.jena.rdf.model.Container $r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.Container add(java.lang.String)>($r1);

        return $r2;
    }

    public com.hp.hpl.jena.rdf.model.Container add(char)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        char c0;
        java.lang.String $r1;
        com.hp.hpl.jena.rdf.model.Container $r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.Container add(java.lang.String)>($r1);

        return $r2;
    }

    public com.hp.hpl.jena.rdf.model.Container add(float)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        float f0;
        java.lang.String $r1;
        com.hp.hpl.jena.rdf.model.Container $r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        f0 := @parameter0: float;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(f0);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.Container add(java.lang.String)>($r1);

        return $r2;
    }

    public com.hp.hpl.jena.rdf.model.Container add(double)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        java.lang.String $r1;
        com.hp.hpl.jena.rdf.model.Container $r2;
        double d0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        d0 := @parameter0: double;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.Container add(java.lang.String)>($r1);

        return $r2;
    }

    public com.hp.hpl.jena.rdf.model.Container add(java.lang.Object)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        java.lang.Object r1;
        java.lang.String $r2;
        com.hp.hpl.jena.rdf.model.Container $r3;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.Container add(java.lang.String)>($r2);

        return $r3;
    }

    public com.hp.hpl.jena.rdf.model.Container add(java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        java.lang.String r1;
        com.hp.hpl.jena.rdf.model.Container $r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.Container add(java.lang.String,java.lang.String)>(r1, "");

        return $r2;
    }

    public com.hp.hpl.jena.rdf.model.Container add(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        java.lang.String r1, r2;
        com.hp.hpl.jena.rdf.model.Literal $r3;
        com.hp.hpl.jena.rdf.model.Container $r4;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.Literal literal(java.lang.String,java.lang.String)>(r1, r2);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.Container add(com.hp.hpl.jena.rdf.model.RDFNode)>($r3);

        return $r4;
    }

    public boolean contains(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        com.hp.hpl.jena.rdf.model.RDFNode r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: boolean containerContains(com.hp.hpl.jena.rdf.model.RDFNode)>(r1);

        return $z0;
    }

    public boolean contains(boolean)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        java.lang.String $r1;
        boolean z0, $z1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z0);

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: boolean contains(java.lang.String)>($r1);

        return $z1;
    }

    public boolean contains(long)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        long l0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: boolean contains(java.lang.String)>($r1);

        return $z0;
    }

    public boolean contains(char)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        char c0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: boolean contains(java.lang.String)>($r1);

        return $z0;
    }

    public boolean contains(float)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        float f0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        f0 := @parameter0: float;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(f0);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: boolean contains(java.lang.String)>($r1);

        return $z0;
    }

    public boolean contains(double)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        java.lang.String $r1;
        double d0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        d0 := @parameter0: double;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: boolean contains(java.lang.String)>($r1);

        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        java.lang.Object r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: boolean contains(java.lang.String)>($r2);

        return $z0;
    }

    public boolean contains(java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: boolean contains(java.lang.String,java.lang.String)>(r1, "");

        return $z0;
    }

    public boolean contains(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        java.lang.String r1, r2;
        com.hp.hpl.jena.rdf.model.Literal $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.Literal literal(java.lang.String,java.lang.String)>(r1, r2);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: boolean contains(com.hp.hpl.jena.rdf.model.RDFNode)>($r3);

        return $z0;
    }

    private com.hp.hpl.jena.rdf.model.Literal literal(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r4;
        com.hp.hpl.jena.rdf.model.impl.ModelCom $r5;
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl $r0;
        java.lang.String r1, r2;
        com.hp.hpl.jena.graph.Node $r3;

        r4 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,boolean)>(r1, r2, 0);

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.impl.ModelCom getModelCom()>();

        specialinvoke $r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.rdf.model.impl.ModelCom)>($r3, $r5);

        return $r0;
    }

    public com.hp.hpl.jena.rdf.model.NodeIterator iterator()
    {
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        com.hp.hpl.jena.rdf.model.NodeIterator $r2;
        com.hp.hpl.jena.rdf.model.impl.NodeIteratorFactory $r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        $r1 = <com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.impl.NodeIteratorFactory iteratorFactory>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.NodeIterator listContainerMembers(com.hp.hpl.jena.rdf.model.impl.NodeIteratorFactory)>($r1);

        return $r2;
    }

    public int size()
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r1;
        com.hp.hpl.jena.rdf.model.Property $r3;
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        int $i0, i1;
        com.hp.hpl.jena.rdf.model.Statement $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        i1 = 0;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.StmtIterator listProperties()>();

     label1:
        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        $i0 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Property: int getOrdinal()>();

        if $i0 == 0 goto label1;

        i1 = i1 + 1;

        goto label1;

     label2:
        interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        return i1;
    }

    public com.hp.hpl.jena.rdf.model.Container remove(com.hp.hpl.jena.rdf.model.Statement)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r6;
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        com.hp.hpl.jena.rdf.model.Statement r1, $r5;
        com.hp.hpl.jena.rdf.model.Property $r2, $r4;
        com.hp.hpl.jena.shared.AssertionFailureException $r8;
        int $i0, $i1, $i2, $i3;
        com.hp.hpl.jena.rdf.model.Model $r3, $r7, $r9;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: int size()>();

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        $i1 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Property: int getOrdinal()>();

        if $i1 != $i0 goto label1;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model remove(com.hp.hpl.jena.rdf.model.Statement)>(r1);

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r4 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property li(int)>($i0);

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r0, $r4);

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Statement changeObject(com.hp.hpl.jena.rdf.model.RDFNode)>($r6);

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model remove(com.hp.hpl.jena.rdf.model.Statement)>($r5);

     label2:
        $i2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: int size()>();

        $i3 = $i0 - 1;

        if $i2 == $i3 goto label3;

        $r8 = new com.hp.hpl.jena.shared.AssertionFailureException;

        specialinvoke $r8.<com.hp.hpl.jena.shared.AssertionFailureException: void <init>(java.lang.String)>("container size");

        throw $r8;

     label3:
        return r0;
    }

    public com.hp.hpl.jena.rdf.model.Container remove(int, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r3;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        com.hp.hpl.jena.rdf.model.Model $r1;
        int i0;
        com.hp.hpl.jena.rdf.model.Statement $r4;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        i0 := @parameter0: int;

        r3 := @parameter1: com.hp.hpl.jena.rdf.model.RDFNode;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r2 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property li(int)>(i0);

        $r4 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Statement createStatement(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r0, $r2, r3);

        virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.Container remove(com.hp.hpl.jena.rdf.model.Statement)>($r4);

        return r0;
    }

    public com.hp.hpl.jena.rdf.model.NodeIterator listContainerMembers(com.hp.hpl.jena.rdf.model.impl.NodeIteratorFactory)
    {
        java.util.Iterator $r4;
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        com.hp.hpl.jena.rdf.model.Statement $r6;
        com.hp.hpl.jena.rdf.model.impl.NodeIteratorFactory r3;
        com.hp.hpl.jena.rdf.model.NodeIterator $r5;
        java.util.Vector $r2;
        com.hp.hpl.jena.rdf.model.StmtIterator $r1;
        com.hp.hpl.jena.rdf.model.Property $r7;
        int $i0, $i1, i2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.impl.NodeIteratorFactory;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.StmtIterator listProperties()>();

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        i2 = 0;

     label1:
        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        $i0 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Property: int getOrdinal()>();

        if $i0 == 0 goto label3;

        if $i0 <= i2 goto label2;

        i2 = $i0;

        virtualinvoke $r2.<java.util.Vector: void setSize(int)>($i0);

     label2:
        $i1 = $i0 - 1;

        virtualinvoke $r2.<java.util.Vector: void setElementAt(java.lang.Object,int)>($r6, $i1);

     label3:
        goto label1;

     label4:
        interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        $r4 = virtualinvoke $r2.<java.util.Vector: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.impl.NodeIteratorFactory: com.hp.hpl.jena.rdf.model.NodeIterator createIterator(java.util.Iterator,java.lang.Object,com.hp.hpl.jena.rdf.model.Container)>($r4, $r2, r0);

        return $r5;
    }

    public int containerIndexOf(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r4, $r5;
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        com.hp.hpl.jena.rdf.model.Statement $r2;
        com.hp.hpl.jena.rdf.model.StmtIterator $r1;
        com.hp.hpl.jena.rdf.model.Property $r3;
        int $i0, i1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r4 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        i1 = 0;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.StmtIterator listProperties()>();

     label1:
        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        $i0 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Property: int getOrdinal()>();

        if $i0 == 0 goto label2;

        $r5 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z1 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label2;

        i1 = $i0;

        goto label3;

     label2:
        goto label1;

     label3:
        interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        return i1;
    }

    public boolean containerContains(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r1;
        com.hp.hpl.jena.rdf.model.impl.ContainerImpl r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ContainerImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ContainerImpl: int containerIndexOf(com.hp.hpl.jena.rdf.model.RDFNode)>(r1);

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.rdf.model.impl.ContNodeIteratorFactoryImpl $r0;

        $r0 = new com.hp.hpl.jena.rdf.model.impl.ContNodeIteratorFactoryImpl;

        specialinvoke $r0.<com.hp.hpl.jena.rdf.model.impl.ContNodeIteratorFactoryImpl: void <init>()>();

        <com.hp.hpl.jena.rdf.model.impl.ContainerImpl: com.hp.hpl.jena.rdf.model.impl.NodeIteratorFactory iteratorFactory> = $r0;

        return;
    }
}
