abstract enum class com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory extends java.lang.Enum
{
    public static final enum com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory STRONG;
    public static final enum com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory STRONG_EXPIRABLE;
    public static final enum com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory STRONG_EVICTABLE;
    public static final enum com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory STRONG_EXPIRABLE_EVICTABLE;
    public static final enum com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory SOFT;
    public static final enum com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory SOFT_EXPIRABLE;
    public static final enum com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory SOFT_EVICTABLE;
    public static final enum com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory SOFT_EXPIRABLE_EVICTABLE;
    public static final enum com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory WEAK;
    public static final enum com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory WEAK_EXPIRABLE;
    public static final enum com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory WEAK_EVICTABLE;
    public static final enum com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory WEAK_EXPIRABLE_EVICTABLE;
    static final int EXPIRABLE_MASK;
    static final int EVICTABLE_MASK;
    static final com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory[][] factories;
    private static final com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory[] $VALUES;

    public static com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory[] values()
    {
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory[] $r0, $r2;

        $r0 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory[]) $r1;

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/mycila/inject/internal/guava/collect/CustomConcurrentHashMap$EntryFactory;", r0);

        $r2 = (com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory getFactory(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength, boolean, boolean)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory[][] $r1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory $r3;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength r0;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory[] $r2;
        byte $b0, $b1;
        int $i2;
        boolean z0, z1, $z2;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if z1 == 0 goto label3;

        $b0 = 2;

        goto label4;

     label3:
        $b0 = 0;

     label4:
        $b1 = $z2 | $b0;

        $r1 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory[][] factories>;

        $i2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength: int ordinal()>();

        $r2 = $r1[$i2];

        $r3 = $r2[$b1];

        return $r3;
    }

    abstract com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry newEntry(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Segment, java.lang.Object, int, com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry);

    com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry copyEntry(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Segment, com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry, com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory r0;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Segment r1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry r2, r4, $r5;
        int $i0;
        java.lang.Object $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Segment;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry;

        r4 := @parameter2: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry;

        $r3 = interfaceinvoke r2.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        $i0 = interfaceinvoke r2.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry newEntry(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Segment,java.lang.Object,int,com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)>(r1, $r3, $i0, r4);

        return $r5;
    }

    void copyExpirableEntry(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry, com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry r0, r1, $r2, $r3;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory r4;
        long $l0;

        r4 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry;

        r0 := @parameter1: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry;

        $l0 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: long getExpirationTime()>();

        interfaceinvoke r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: void setExpirationTime(long)>($l0);

        $r2 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry getPreviousExpirable()>();

        staticinvoke <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap: void connectExpirables(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)>($r2, r0);

        $r3 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry getNextExpirable()>();

        staticinvoke <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap: void connectExpirables(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)>(r0, $r3);

        staticinvoke <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap: void nullifyExpirable(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)>(r1);

        return;
    }

    void copyEvictableEntry(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry, com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry r0, $r1, r2, $r3;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory r4;

        r4 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry;

        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry getPreviousEvictable()>();

        staticinvoke <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap: void connectEvictables(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)>($r1, r2);

        $r3 = interfaceinvoke r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry getNextEvictable()>();

        staticinvoke <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap: void connectEvictables(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)>(r2, $r3);

        staticinvoke <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap: void nullifyEvictable(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)>(r0);

        return;
    }

    void <init>(java.lang.String, int, com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1 r2;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory r0;
        int i0;
        java.lang.String r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$3 $r2;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r27, $r28, $r29, $r30, $r32, $r33, $r34, $r35, $r37, $r38, $r39, $r40;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$2 $r1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$1 $r0;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$7 $r6;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$6 $r5;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$5 $r4;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$4 $r3;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$9 $r8;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$8 $r7;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory[] $r12, $r26, $r31, $r36;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$12 $r11;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory[][] $r25;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$11 $r10;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$10 $r9;

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: int EVICTABLE_MASK> = 2;

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: int EXPIRABLE_MASK> = 1;

        $r0 = new com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$1;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$1: void <init>(java.lang.String,int)>("STRONG", 0);

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory STRONG> = $r0;

        $r1 = new com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$2;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$2: void <init>(java.lang.String,int)>("STRONG_EXPIRABLE", 1);

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory STRONG_EXPIRABLE> = $r1;

        $r2 = new com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$3;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$3: void <init>(java.lang.String,int)>("STRONG_EVICTABLE", 2);

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory STRONG_EVICTABLE> = $r2;

        $r3 = new com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$4;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$4: void <init>(java.lang.String,int)>("STRONG_EXPIRABLE_EVICTABLE", 3);

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory STRONG_EXPIRABLE_EVICTABLE> = $r3;

        $r4 = new com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$5;

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$5: void <init>(java.lang.String,int)>("SOFT", 4);

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory SOFT> = $r4;

        $r5 = new com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$6;

        specialinvoke $r5.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$6: void <init>(java.lang.String,int)>("SOFT_EXPIRABLE", 5);

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory SOFT_EXPIRABLE> = $r5;

        $r6 = new com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$7;

        specialinvoke $r6.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$7: void <init>(java.lang.String,int)>("SOFT_EVICTABLE", 6);

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory SOFT_EVICTABLE> = $r6;

        $r7 = new com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$8;

        specialinvoke $r7.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$8: void <init>(java.lang.String,int)>("SOFT_EXPIRABLE_EVICTABLE", 7);

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory SOFT_EXPIRABLE_EVICTABLE> = $r7;

        $r8 = new com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$9;

        specialinvoke $r8.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$9: void <init>(java.lang.String,int)>("WEAK", 8);

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory WEAK> = $r8;

        $r9 = new com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$10;

        specialinvoke $r9.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$10: void <init>(java.lang.String,int)>("WEAK_EXPIRABLE", 9);

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory WEAK_EXPIRABLE> = $r9;

        $r10 = new com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$11;

        specialinvoke $r10.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$11: void <init>(java.lang.String,int)>("WEAK_EVICTABLE", 10);

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory WEAK_EVICTABLE> = $r10;

        $r11 = new com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$12;

        specialinvoke $r11.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory$12: void <init>(java.lang.String,int)>("WEAK_EXPIRABLE_EVICTABLE", 11);

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory WEAK_EXPIRABLE_EVICTABLE> = $r11;

        $r12 = newarray (com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory)[12];

        $r13 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory STRONG>;

        $r12[0] = $r13;

        $r14 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory STRONG_EXPIRABLE>;

        $r12[1] = $r14;

        $r15 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory STRONG_EVICTABLE>;

        $r12[2] = $r15;

        $r16 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory STRONG_EXPIRABLE_EVICTABLE>;

        $r12[3] = $r16;

        $r17 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory SOFT>;

        $r12[4] = $r17;

        $r18 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory SOFT_EXPIRABLE>;

        $r12[5] = $r18;

        $r19 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory SOFT_EVICTABLE>;

        $r12[6] = $r19;

        $r20 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory SOFT_EXPIRABLE_EVICTABLE>;

        $r12[7] = $r20;

        $r21 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory WEAK>;

        $r12[8] = $r21;

        $r22 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory WEAK_EXPIRABLE>;

        $r12[9] = $r22;

        $r23 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory WEAK_EVICTABLE>;

        $r12[10] = $r23;

        $r24 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory WEAK_EXPIRABLE_EVICTABLE>;

        $r12[11] = $r24;

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory[] $VALUES> = $r12;

        $r25 = newarray (com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory[])[3];

        $r26 = newarray (com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory)[4];

        $r27 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory STRONG>;

        $r26[0] = $r27;

        $r28 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory STRONG_EXPIRABLE>;

        $r26[1] = $r28;

        $r29 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory STRONG_EVICTABLE>;

        $r26[2] = $r29;

        $r30 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory STRONG_EXPIRABLE_EVICTABLE>;

        $r26[3] = $r30;

        $r25[0] = $r26;

        $r31 = newarray (com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory)[4];

        $r32 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory SOFT>;

        $r31[0] = $r32;

        $r33 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory SOFT_EXPIRABLE>;

        $r31[1] = $r33;

        $r34 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory SOFT_EVICTABLE>;

        $r31[2] = $r34;

        $r35 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory SOFT_EXPIRABLE_EVICTABLE>;

        $r31[3] = $r35;

        $r25[1] = $r31;

        $r36 = newarray (com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory)[4];

        $r37 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory WEAK>;

        $r36[0] = $r37;

        $r38 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory WEAK_EXPIRABLE>;

        $r36[1] = $r38;

        $r39 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory WEAK_EVICTABLE>;

        $r36[2] = $r39;

        $r40 = <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory WEAK_EXPIRABLE_EVICTABLE>;

        $r36[3] = $r40;

        $r25[2] = $r36;

        <com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$EntryFactory[][] factories> = $r25;

        return;
    }
}
