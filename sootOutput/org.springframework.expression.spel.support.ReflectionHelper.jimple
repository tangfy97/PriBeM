public class org.springframework.expression.spel.support.ReflectionHelper extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.expression.spel.support.ReflectionHelper r0;

        r0 := @this: org.springframework.expression.spel.support.ReflectionHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo compareArguments(java.util.List, java.util.List, org.springframework.expression.TypeConverter)
    {
        java.lang.Integer $r5, $r12;
        int[] r18;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.springframework.expression.TypeConverter r11;
        java.util.List r0, r1;
        java.util.ArrayList $r13, r16;
        org.springframework.core.convert.TypeDescriptor r9, $r10, r17;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, i7;
        org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo $r3, $r6;
        org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind $r2, $r14, r15;
        java.lang.Object $r4, $r7, $r8;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r11 := @parameter2: org.springframework.expression.TypeConverter;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 != $i1 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z4, "Expected argument types and supplied argument types should be arrays of same length");

        r15 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind EXACT>;

        r16 = null;

        i5 = 0;

        goto label09;

     label03:
        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        r17 = (org.springframework.core.convert.TypeDescriptor) $r7;

        $r8 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i5);

        r9 = (org.springframework.core.convert.TypeDescriptor) $r8;

        $z0 = virtualinvoke r9.<org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>(r17);

        if $z0 != 0 goto label08;

        $r10 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor NULL>;

        if r17 != $r10 goto label04;

        $z3 = virtualinvoke r9.<org.springframework.core.convert.TypeDescriptor: boolean isPrimitive()>();

        if $z3 == 0 goto label08;

        r15 = null;

        goto label08;

     label04:
        $z1 = virtualinvoke r17.<org.springframework.core.convert.TypeDescriptor: boolean isAssignableTo(org.springframework.core.convert.TypeDescriptor)>(r9);

        if $z1 == 0 goto label05;

        $r14 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind REQUIRES_CONVERSION>;

        if r15 == $r14 goto label08;

        r15 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind CLOSE>;

        goto label08;

     label05:
        $z2 = interfaceinvoke r11.<org.springframework.expression.TypeConverter: boolean canConvert(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r17, r9);

        if $z2 == 0 goto label07;

        if r16 != null goto label06;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r16 = $r13;

     label06:
        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        interfaceinvoke r16.<java.util.List: boolean add(java.lang.Object)>($r12);

        r15 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind REQUIRES_CONVERSION>;

        goto label08;

     label07:
        r15 = null;

     label08:
        i5 = i5 + 1;

     label09:
        $i6 = interfaceinvoke r0.<java.util.List: int size()>();

        if i5 >= $i6 goto label10;

        if r15 != null goto label03;

     label10:
        if r15 != null goto label11;

        return null;

     label11:
        $r2 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind REQUIRES_CONVERSION>;

        if r15 != $r2 goto label14;

        $i2 = interfaceinvoke r16.<java.util.List: int size()>();

        r18 = newarray (int)[$i2];

        i7 = 0;

        goto label13;

     label12:
        $r4 = interfaceinvoke r16.<java.util.List: java.lang.Object get(int)>(i7);

        $r5 = (java.lang.Integer) $r4;

        $i4 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        r18[i7] = $i4;

        i7 = i7 + 1;

     label13:
        $i3 = interfaceinvoke r16.<java.util.List: int size()>();

        if i7 < $i3 goto label12;

        $r6 = new org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo;

        specialinvoke $r6.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: void <init>(org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind,int[])>(r15, r18);

        return $r6;

     label14:
        $r3 = new org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo;

        specialinvoke $r3.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: void <init>(org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind)>(r15);

        return $r3;
    }

    static org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo compareArgumentsVarargs(java.util.List, java.util.List, org.springframework.expression.TypeConverter)
    {
        java.lang.Integer $r11, $r17, $r25;
        java.util.ArrayList $r12, $r26, r31;
        org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind $r13, $r14, $r27, r30;
        int[] r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.springframework.expression.TypeConverter r9;
        java.util.List r0, r1;
        org.springframework.core.convert.TypeDescriptor $r3, $r7, $r10, $r20, $r24, $r29, r32, r33, r34;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, $i19, i20;
        org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo $r15, $r18;
        java.lang.Object $r2, $r5, $r16, $r19, $r21, $r22, $r23, $r28;
        java.lang.Class $r4, $r6, $r8;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r9 := @parameter2: org.springframework.expression.TypeConverter;

        if r0 == null goto label01;

        $i12 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i12 <= 0 goto label01;

        $z8 = 1;

        goto label02;

     label01:
        $z8 = 0;

     label02:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z8, "Expected arguments must at least include one array (the vargargs parameter)");

        $i13 = interfaceinvoke r0.<java.util.List: int size()>();

        $i14 = $i13 - 1;

        $r28 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i14);

        $r29 = (org.springframework.core.convert.TypeDescriptor) $r28;

        $z9 = virtualinvoke $r29.<org.springframework.core.convert.TypeDescriptor: boolean isArray()>();

        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z9, "Final expected argument should be array type (the varargs parameter)");

        r30 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind EXACT>;

        r31 = null;

        $i15 = interfaceinvoke r0.<java.util.List: int size()>();

        $i16 = $i15 - 1;

        i17 = 0;

        goto label09;

     label03:
        $r22 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i17);

        r32 = (org.springframework.core.convert.TypeDescriptor) $r22;

        $r23 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i17);

        r33 = (org.springframework.core.convert.TypeDescriptor) $r23;

        $r24 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor NULL>;

        if r32 != $r24 goto label04;

        $z7 = virtualinvoke r33.<org.springframework.core.convert.TypeDescriptor: boolean isPrimitive()>();

        if $z7 == 0 goto label08;

        r30 = null;

        goto label08;

     label04:
        $z4 = virtualinvoke r33.<org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>(r32);

        if $z4 != 0 goto label08;

        $z5 = virtualinvoke r32.<org.springframework.core.convert.TypeDescriptor: boolean isAssignableTo(org.springframework.core.convert.TypeDescriptor)>(r33);

        if $z5 == 0 goto label05;

        $r27 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind REQUIRES_CONVERSION>;

        if r30 == $r27 goto label08;

        r30 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind CLOSE>;

        goto label08;

     label05:
        $z6 = interfaceinvoke r9.<org.springframework.expression.TypeConverter: boolean canConvert(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r32, r33);

        if $z6 == 0 goto label07;

        if r31 != null goto label06;

        $r26 = new java.util.ArrayList;

        specialinvoke $r26.<java.util.ArrayList: void <init>()>();

        r31 = $r26;

     label06:
        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i17);

        interfaceinvoke r31.<java.util.List: boolean add(java.lang.Object)>($r25);

        r30 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind REQUIRES_CONVERSION>;

        goto label08;

     label07:
        r30 = null;

     label08:
        i17 = i17 + 1;

     label09:
        if i17 >= $i16 goto label10;

        if r30 != null goto label03;

     label10:
        if r30 != null goto label11;

        return null;

     label11:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != $i1 goto label12;

        $i8 = interfaceinvoke r0.<java.util.List: int size()>();

        $i9 = $i8 - 1;

        $r19 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i9);

        $r20 = (org.springframework.core.convert.TypeDescriptor) $r19;

        $i10 = interfaceinvoke r1.<java.util.List: int size()>();

        $i11 = $i10 - 1;

        $r21 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i11);

        $z3 = virtualinvoke $r20.<org.springframework.core.convert.TypeDescriptor: boolean equals(java.lang.Object)>($r21);

        if $z3 != 0 goto label20;

     label12:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i3);

        $r3 = (org.springframework.core.convert.TypeDescriptor) $r2;

        $r4 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getElementType()>();

        $i4 = interfaceinvoke r0.<java.util.List: int size()>();

        i18 = $i4 - 1;

        goto label19;

     label13:
        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i18);

        r34 = (org.springframework.core.convert.TypeDescriptor) $r5;

        $r6 = virtualinvoke r34.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        if $r4 == $r6 goto label18;

        $r7 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor NULL>;

        if r34 != $r7 goto label14;

        $z2 = virtualinvoke $r4.<java.lang.Class: boolean isPrimitive()>();

        if $z2 == 0 goto label18;

        r30 = null;

        goto label18;

     label14:
        $r8 = virtualinvoke r34.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($r4, $r8);

        if $z0 == 0 goto label15;

        $r13 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind REQUIRES_CONVERSION>;

        if r30 == $r13 goto label18;

        r30 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind CLOSE>;

        goto label18;

     label15:
        $r10 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>($r4);

        $z1 = interfaceinvoke r9.<org.springframework.expression.TypeConverter: boolean canConvert(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r34, $r10);

        if $z1 == 0 goto label17;

        if r31 != null goto label16;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r31 = $r12;

     label16:
        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i18);

        interfaceinvoke r31.<java.util.List: boolean add(java.lang.Object)>($r11);

        r30 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind REQUIRES_CONVERSION>;

        goto label18;

     label17:
        r30 = null;

     label18:
        i18 = i18 + 1;

     label19:
        $i19 = interfaceinvoke r1.<java.util.List: int size()>();

        if i18 < $i19 goto label13;

     label20:
        if r30 != null goto label21;

        return null;

     label21:
        $r14 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind REQUIRES_CONVERSION>;

        if r30 != $r14 goto label24;

        $i5 = interfaceinvoke r31.<java.util.List: int size()>();

        r35 = newarray (int)[$i5];

        i20 = 0;

        goto label23;

     label22:
        $r16 = interfaceinvoke r31.<java.util.List: java.lang.Object get(int)>(i20);

        $r17 = (java.lang.Integer) $r16;

        $i7 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        r35[i20] = $i7;

        i20 = i20 + 1;

     label23:
        $i6 = interfaceinvoke r31.<java.util.List: int size()>();

        if i20 < $i6 goto label22;

        $r18 = new org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo;

        specialinvoke $r18.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: void <init>(org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind,int[])>(r30, r35);

        return $r18;

     label24:
        $r15 = new org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo;

        specialinvoke $r15.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: void <init>(org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind)>(r30);

        return $r15;
    }

    static void convertArguments(org.springframework.expression.TypeConverter, java.lang.Object[], java.lang.Object, int[], java.lang.Integer) throws org.springframework.expression.EvaluationException
    {
        java.lang.Object[] r5;
        java.lang.Integer r1;
        int[] r0;
        org.springframework.core.convert.TypeDescriptor $r2, $r8, r11, $r14;
        org.springframework.core.MethodParameter $r4, $r7;
        int i0, i1, $i2, $i3, i4;
        org.springframework.expression.TypeConverter r6;
        java.lang.Object r3, $r12, $r13, $r15;
        java.lang.Class $r9, $r10;

        r6 := @parameter0: org.springframework.expression.TypeConverter;

        r5 := @parameter1: java.lang.Object[];

        r3 := @parameter2: java.lang.Object;

        r0 := @parameter3: int[];

        r1 := @parameter4: java.lang.Integer;

        i0 = lengthof r0;

        i4 = 0;

        goto label4;

     label1:
        i1 = r0[i4];

        if r1 == null goto label2;

        $i2 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        if i1 < $i2 goto label2;

        $i3 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        $r7 = staticinvoke <org.springframework.core.MethodParameter: org.springframework.core.MethodParameter forMethodOrConstructor(java.lang.Object,int)>(r3, $i3);

        $r8 = new org.springframework.core.convert.TypeDescriptor;

        $r9 = virtualinvoke $r7.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Class getComponentType()>();

        specialinvoke $r8.<org.springframework.core.convert.TypeDescriptor: void <init>(org.springframework.core.MethodParameter,java.lang.Class)>($r7, $r10);

        r11 = $r8;

        goto label3;

     label2:
        $r2 = new org.springframework.core.convert.TypeDescriptor;

        $r4 = staticinvoke <org.springframework.core.MethodParameter: org.springframework.core.MethodParameter forMethodOrConstructor(java.lang.Object,int)>(r3, i1);

        specialinvoke $r2.<org.springframework.core.convert.TypeDescriptor: void <init>(org.springframework.core.MethodParameter)>($r4);

        r11 = $r2;

     label3:
        $r12 = r5[i1];

        $r13 = r5[i1];

        $r14 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)>($r13);

        $r15 = interfaceinvoke r6.<org.springframework.expression.TypeConverter: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r12, $r14, r11);

        r5[i1] = $r15;

        i4 = i4 + 1;

     label4:
        if i4 < i0 goto label1;

        return;
    }

    public static void convertAllArguments(org.springframework.expression.TypeConverter, java.lang.Object[], java.lang.reflect.Method) throws org.springframework.expression.spel.SpelEvaluationException
    {
        java.lang.Integer r26;
        org.springframework.core.MethodParameter $r3, $r13;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2;
        org.springframework.expression.TypeConverter r5;
        org.springframework.expression.spel.SpelEvaluationException $r8, $r19, $r25;
        java.lang.Object[] r1, $r9, $r20;
        org.springframework.expression.EvaluationException $r18;
        org.springframework.core.convert.TypeDescriptor $r2, $r6, $r14, r27;
        int $i0, $i1, $i2, $i3, i4, $i5;
        java.lang.String $r12, $r24;
        org.springframework.expression.spel.SpelMessage $r10, $r22;
        java.lang.Class[] $r17;
        java.lang.Class $r4, $r11, $r15, $r16, $r23;
        java.lang.Object $r7, $r21, $r28;

        r5 := @parameter0: org.springframework.expression.TypeConverter;

        r1 := @parameter1: java.lang.Object[];

        r0 := @parameter2: java.lang.reflect.Method;

        r26 = null;

        $z0 = virtualinvoke r0.<java.lang.reflect.Method: boolean isVarArgs()>();

        if $z0 == 0 goto label01;

        $r17 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r17;

        $i3 = $i2 - 1;

        r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

     label01:
        i4 = 0;

        goto label10;

     label02:
        if r26 == null goto label03;

        $i0 = virtualinvoke r26.<java.lang.Integer: int intValue()>();

        if i4 < $i0 goto label03;

        $r13 = new org.springframework.core.MethodParameter;

        $i1 = virtualinvoke r26.<java.lang.Integer: int intValue()>();

        specialinvoke $r13.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>(r0, $i1);

        $r14 = new org.springframework.core.convert.TypeDescriptor;

        $r15 = virtualinvoke $r13.<org.springframework.core.MethodParameter: java.lang.Class getParameterType()>();

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.Class getComponentType()>();

        specialinvoke $r14.<org.springframework.core.convert.TypeDescriptor: void <init>(org.springframework.core.MethodParameter,java.lang.Class)>($r13, $r16);

        r27 = $r14;

        goto label04;

     label03:
        $r2 = new org.springframework.core.convert.TypeDescriptor;

        $r3 = new org.springframework.core.MethodParameter;

        specialinvoke $r3.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>(r0, i4);

        specialinvoke $r2.<org.springframework.core.convert.TypeDescriptor: void <init>(org.springframework.core.MethodParameter)>($r3);

        r27 = $r2;

     label04:
        $r28 = r1[i4];

        if $r28 == null goto label09;

        $r4 = virtualinvoke r27.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getObjectType()>();

        $z1 = virtualinvoke $r4.<java.lang.Class: boolean isInstance(java.lang.Object)>($r28);

        if $z1 != 0 goto label09;

        if r5 != null goto label05;

        $r8 = new org.springframework.expression.spel.SpelEvaluationException;

        $r10 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage TYPE_CONVERSION_ERROR>;

        $r9 = newarray (java.lang.Object)[2];

        $r11 = virtualinvoke $r28.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r9[0] = $r12;

        $r9[1] = r27;

        specialinvoke $r8.<org.springframework.expression.spel.SpelEvaluationException: void <init>(org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r10, $r9);

        throw $r8;

     label05:
        $r6 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)>($r28);

        $r7 = interfaceinvoke r5.<org.springframework.expression.TypeConverter: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r28, $r6, r27);

        r1[i4] = $r7;

     label06:
        goto label09;

     label07:
        $r18 := @caughtexception;

        $z2 = $r18 instanceof org.springframework.expression.spel.SpelEvaluationException;

        if $z2 == 0 goto label08;

        $r25 = (org.springframework.expression.spel.SpelEvaluationException) $r18;

        throw $r25;

     label08:
        $r19 = new org.springframework.expression.spel.SpelEvaluationException;

        $r22 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage TYPE_CONVERSION_ERROR>;

        $r20 = newarray (java.lang.Object)[2];

        $r21 = r1[i4];

        $r23 = virtualinvoke $r21.<java.lang.Object: java.lang.Class getClass()>();

        $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getName()>();

        $r20[0] = $r24;

        $r20[1] = r27;

        specialinvoke $r19.<org.springframework.expression.spel.SpelEvaluationException: void <init>(java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r18, $r22, $r20);

        throw $r19;

     label09:
        i4 = i4 + 1;

     label10:
        $i5 = lengthof r1;

        if i4 < $i5 goto label02;

        return;

        catch org.springframework.expression.EvaluationException from label04 to label06 with label07;
    }

    public static transient java.lang.Object[] setupArgumentsForVarargsInvocation(java.lang.Class[], java.lang.Object[])
    {
        java.lang.Object[] r1, $r7, r12;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16;
        java.lang.Class[] r0;
        java.lang.Class $r2, $r3, $r10, $r11;
        java.lang.Object $r4, $r5, $r6, $r8, $r9;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.Object[];

        i0 = lengthof r0;

        i1 = lengthof r1;

        $i2 = lengthof r1;

        if i0 != $i2 goto label3;

        $i11 = i0 - 1;

        $r10 = r0[$i11];

        $i12 = i1 - 1;

        $r8 = r1[$i12];

        if $r8 != null goto label1;

        $r11 = null;

        goto label2;

     label1:
        $i13 = i1 - 1;

        $r9 = r1[$i13];

        $r11 = virtualinvoke $r9.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        if $r10 == $r11 goto label9;

     label3:
        i14 = 0;

        if i1 < i0 goto label4;

        $i10 = i0 - 1;

        i14 = i1 - $i10;

     label4:
        $i3 = i0 - 1;

        $r2 = r0[$i3];

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>();

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r3, i14);

        $r7 = (java.lang.Object[]) $r4;

        i15 = 0;

        goto label6;

     label5:
        $i4 = i0 + i15;

        $i5 = $i4 - 1;

        $r5 = r1[$i5];

        $r7[i15] = $r5;

        i15 = i15 + 1;

     label6:
        if i15 < i14 goto label5;

        r12 = newarray (java.lang.Object)[i0];

        i16 = 0;

        goto label8;

     label7:
        $r6 = r1[i16];

        r12[i16] = $r6;

        i16 = i16 + 1;

     label8:
        $i6 = lengthof r12;

        $i7 = $i6 - 1;

        if i16 < $i7 goto label7;

        $i8 = lengthof r12;

        $i9 = $i8 - 1;

        r12[$i9] = $r7;

        return r12;

     label9:
        return r1;
    }
}
