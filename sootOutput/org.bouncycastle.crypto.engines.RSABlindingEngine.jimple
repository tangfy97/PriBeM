public class org.bouncycastle.crypto.engines.RSABlindingEngine extends java.lang.Object implements org.bouncycastle.crypto.AsymmetricBlockCipher
{
    private org.bouncycastle.crypto.engines.RSACoreEngine core;
    private org.bouncycastle.crypto.params.RSAKeyParameters key;
    private java.math.BigInteger blindingFactor;
    private boolean forEncryption;

    public void <init>()
    {
        org.bouncycastle.crypto.engines.RSABlindingEngine r0;
        org.bouncycastle.crypto.engines.RSACoreEngine $r1;

        r0 := @this: org.bouncycastle.crypto.engines.RSABlindingEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.bouncycastle.crypto.engines.RSACoreEngine;

        specialinvoke $r1.<org.bouncycastle.crypto.engines.RSACoreEngine: void <init>()>();

        r0.<org.bouncycastle.crypto.engines.RSABlindingEngine: org.bouncycastle.crypto.engines.RSACoreEngine core> = $r1;

        return;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.params.RSABlindingParameters r8;
        org.bouncycastle.crypto.engines.RSACoreEngine $r2;
        org.bouncycastle.crypto.params.RSAKeyParameters $r3, $r4;
        org.bouncycastle.crypto.params.ParametersWithRandom r6;
        org.bouncycastle.crypto.engines.RSABlindingEngine r1;
        java.math.BigInteger $r5;
        org.bouncycastle.crypto.CipherParameters r0, $r7;
        boolean $z0, z1;

        r1 := @this: org.bouncycastle.crypto.engines.RSABlindingEngine;

        z1 := @parameter0: boolean;

        r0 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $z0 = r0 instanceof org.bouncycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label1;

        r6 = (org.bouncycastle.crypto.params.ParametersWithRandom) r0;

        $r7 = virtualinvoke r6.<org.bouncycastle.crypto.params.ParametersWithRandom: org.bouncycastle.crypto.CipherParameters getParameters()>();

        r8 = (org.bouncycastle.crypto.params.RSABlindingParameters) $r7;

        goto label2;

     label1:
        r8 = (org.bouncycastle.crypto.params.RSABlindingParameters) r0;

     label2:
        $r2 = r1.<org.bouncycastle.crypto.engines.RSABlindingEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        $r3 = virtualinvoke r8.<org.bouncycastle.crypto.params.RSABlindingParameters: org.bouncycastle.crypto.params.RSAKeyParameters getPublicKey()>();

        virtualinvoke $r2.<org.bouncycastle.crypto.engines.RSACoreEngine: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(z1, $r3);

        r1.<org.bouncycastle.crypto.engines.RSABlindingEngine: boolean forEncryption> = z1;

        $r4 = virtualinvoke r8.<org.bouncycastle.crypto.params.RSABlindingParameters: org.bouncycastle.crypto.params.RSAKeyParameters getPublicKey()>();

        r1.<org.bouncycastle.crypto.engines.RSABlindingEngine: org.bouncycastle.crypto.params.RSAKeyParameters key> = $r4;

        $r5 = virtualinvoke r8.<org.bouncycastle.crypto.params.RSABlindingParameters: java.math.BigInteger getBlindingFactor()>();

        r1.<org.bouncycastle.crypto.engines.RSABlindingEngine: java.math.BigInteger blindingFactor> = $r5;

        return;
    }

    public int getInputBlockSize()
    {
        org.bouncycastle.crypto.engines.RSABlindingEngine r0;
        int $i0;
        org.bouncycastle.crypto.engines.RSACoreEngine $r1;

        r0 := @this: org.bouncycastle.crypto.engines.RSABlindingEngine;

        $r1 = r0.<org.bouncycastle.crypto.engines.RSABlindingEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        $i0 = virtualinvoke $r1.<org.bouncycastle.crypto.engines.RSACoreEngine: int getInputBlockSize()>();

        return $i0;
    }

    public int getOutputBlockSize()
    {
        org.bouncycastle.crypto.engines.RSABlindingEngine r0;
        int $i0;
        org.bouncycastle.crypto.engines.RSACoreEngine $r1;

        r0 := @this: org.bouncycastle.crypto.engines.RSABlindingEngine;

        $r1 = r0.<org.bouncycastle.crypto.engines.RSABlindingEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        $i0 = virtualinvoke $r1.<org.bouncycastle.crypto.engines.RSACoreEngine: int getOutputBlockSize()>();

        return $i0;
    }

    public byte[] processBlock(byte[], int, int)
    {
        byte[] r1, $r5;
        org.bouncycastle.crypto.engines.RSACoreEngine $r2, $r4;
        org.bouncycastle.crypto.engines.RSABlindingEngine r0;
        int i0, i1;
        java.math.BigInteger $r3, r6;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.engines.RSABlindingEngine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.bouncycastle.crypto.engines.RSABlindingEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.engines.RSACoreEngine: java.math.BigInteger convertInput(byte[],int,int)>(r1, i0, i1);

        $z0 = r0.<org.bouncycastle.crypto.engines.RSABlindingEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        r6 = specialinvoke r0.<org.bouncycastle.crypto.engines.RSABlindingEngine: java.math.BigInteger blindMessage(java.math.BigInteger)>($r3);

        goto label2;

     label1:
        r6 = specialinvoke r0.<org.bouncycastle.crypto.engines.RSABlindingEngine: java.math.BigInteger unblindMessage(java.math.BigInteger)>($r3);

     label2:
        $r4 = r0.<org.bouncycastle.crypto.engines.RSABlindingEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        $r5 = virtualinvoke $r4.<org.bouncycastle.crypto.engines.RSACoreEngine: byte[] convertOutput(java.math.BigInteger)>(r6);

        return $r5;
    }

    private java.math.BigInteger blindMessage(java.math.BigInteger)
    {
        org.bouncycastle.crypto.params.RSAKeyParameters $r2, $r4, $r8;
        org.bouncycastle.crypto.engines.RSABlindingEngine r0;
        java.math.BigInteger r1, $r3, $r5, $r6, $r7, $r9, $r10, r11;

        r0 := @this: org.bouncycastle.crypto.engines.RSABlindingEngine;

        r1 := @parameter0: java.math.BigInteger;

        r11 = r0.<org.bouncycastle.crypto.engines.RSABlindingEngine: java.math.BigInteger blindingFactor>;

        $r2 = r0.<org.bouncycastle.crypto.engines.RSABlindingEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getExponent()>();

        $r4 = r0.<org.bouncycastle.crypto.engines.RSABlindingEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r5 = virtualinvoke $r4.<org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $r6 = virtualinvoke r11.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r3, $r5);

        $r7 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r6);

        $r8 = r0.<org.bouncycastle.crypto.engines.RSABlindingEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r9 = virtualinvoke $r8.<org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $r10 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r9);

        return $r10;
    }

    private java.math.BigInteger unblindMessage(java.math.BigInteger)
    {
        org.bouncycastle.crypto.params.RSAKeyParameters $r1;
        org.bouncycastle.crypto.engines.RSABlindingEngine r0;
        java.math.BigInteger $r2, r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.bouncycastle.crypto.engines.RSABlindingEngine;

        r3 := @parameter0: java.math.BigInteger;

        $r1 = r0.<org.bouncycastle.crypto.engines.RSABlindingEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r2 = virtualinvoke $r1.<org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $r4 = r0.<org.bouncycastle.crypto.engines.RSABlindingEngine: java.math.BigInteger blindingFactor>;

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r2);

        $r6 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $r7 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r2);

        return $r7;
    }
}
