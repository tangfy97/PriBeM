public class org.codehaus.jackson.map.ser.impl.SimpleFilterProvider extends org.codehaus.jackson.map.ser.FilterProvider
{
    protected final java.util.Map _filtersById;
    protected org.codehaus.jackson.map.ser.BeanPropertyFilter _defaultFilter;
    protected boolean _cfgFailOnUnknownId;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.codehaus.jackson.map.ser.impl.SimpleFilterProvider r0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.SimpleFilterProvider;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        specialinvoke r0.<org.codehaus.jackson.map.ser.impl.SimpleFilterProvider: void <init>(java.util.Map)>($r1);

        return;
    }

    public void <init>(java.util.Map)
    {
        org.codehaus.jackson.map.ser.impl.SimpleFilterProvider r0;
        java.util.Map r1;

        r0 := @this: org.codehaus.jackson.map.ser.impl.SimpleFilterProvider;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.codehaus.jackson.map.ser.FilterProvider: void <init>()>();

        r0.<org.codehaus.jackson.map.ser.impl.SimpleFilterProvider: boolean _cfgFailOnUnknownId> = 1;

        r0.<org.codehaus.jackson.map.ser.impl.SimpleFilterProvider: java.util.Map _filtersById> = r1;

        return;
    }

    public org.codehaus.jackson.map.ser.impl.SimpleFilterProvider setDefaultFilter(org.codehaus.jackson.map.ser.BeanPropertyFilter)
    {
        org.codehaus.jackson.map.ser.BeanPropertyFilter r1;
        org.codehaus.jackson.map.ser.impl.SimpleFilterProvider r0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.SimpleFilterProvider;

        r1 := @parameter0: org.codehaus.jackson.map.ser.BeanPropertyFilter;

        r0.<org.codehaus.jackson.map.ser.impl.SimpleFilterProvider: org.codehaus.jackson.map.ser.BeanPropertyFilter _defaultFilter> = r1;

        return r0;
    }

    public org.codehaus.jackson.map.ser.BeanPropertyFilter getDefaultFilter()
    {
        org.codehaus.jackson.map.ser.BeanPropertyFilter $r1;
        org.codehaus.jackson.map.ser.impl.SimpleFilterProvider r0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.SimpleFilterProvider;

        $r1 = r0.<org.codehaus.jackson.map.ser.impl.SimpleFilterProvider: org.codehaus.jackson.map.ser.BeanPropertyFilter _defaultFilter>;

        return $r1;
    }

    public org.codehaus.jackson.map.ser.impl.SimpleFilterProvider setFailOnUnknownId(boolean)
    {
        org.codehaus.jackson.map.ser.impl.SimpleFilterProvider r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.SimpleFilterProvider;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.jackson.map.ser.impl.SimpleFilterProvider: boolean _cfgFailOnUnknownId> = z0;

        return r0;
    }

    public boolean willFailOnUnknownId()
    {
        org.codehaus.jackson.map.ser.impl.SimpleFilterProvider r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.SimpleFilterProvider;

        $z0 = r0.<org.codehaus.jackson.map.ser.impl.SimpleFilterProvider: boolean _cfgFailOnUnknownId>;

        return $z0;
    }

    public org.codehaus.jackson.map.ser.impl.SimpleFilterProvider addFilter(java.lang.String, org.codehaus.jackson.map.ser.BeanPropertyFilter)
    {
        org.codehaus.jackson.map.ser.BeanPropertyFilter r2;
        java.util.Map $r3;
        org.codehaus.jackson.map.ser.impl.SimpleFilterProvider r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jackson.map.ser.impl.SimpleFilterProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.codehaus.jackson.map.ser.BeanPropertyFilter;

        $r3 = r0.<org.codehaus.jackson.map.ser.impl.SimpleFilterProvider: java.util.Map _filtersById>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return r0;
    }

    public org.codehaus.jackson.map.ser.BeanPropertyFilter removeFilter(java.lang.String)
    {
        org.codehaus.jackson.map.ser.BeanPropertyFilter $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.codehaus.jackson.map.ser.impl.SimpleFilterProvider r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jackson.map.ser.impl.SimpleFilterProvider;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jackson.map.ser.impl.SimpleFilterProvider: java.util.Map _filtersById>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r4 = (org.codehaus.jackson.map.ser.BeanPropertyFilter) $r3;

        return $r4;
    }

    public org.codehaus.jackson.map.ser.BeanPropertyFilter findFilter(java.lang.Object)
    {
        org.codehaus.jackson.map.ser.BeanPropertyFilter r14;
        java.util.Map $r2;
        java.lang.String $r10, $r13;
        boolean $z0;
        org.codehaus.jackson.map.ser.impl.SimpleFilterProvider r0;
        java.lang.IllegalArgumentException $r4;
        java.lang.Object r1, $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r11, $r12;
        java.lang.Class $r9;

        r0 := @this: org.codehaus.jackson.map.ser.impl.SimpleFilterProvider;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.codehaus.jackson.map.ser.impl.SimpleFilterProvider: java.util.Map _filtersById>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r14 = (org.codehaus.jackson.map.ser.BeanPropertyFilter) $r3;

        if r14 != null goto label1;

        r14 = r0.<org.codehaus.jackson.map.ser.impl.SimpleFilterProvider: org.codehaus.jackson.map.ser.BeanPropertyFilter _defaultFilter>;

        if r14 != null goto label1;

        $z0 = r0.<org.codehaus.jackson.map.ser.impl.SimpleFilterProvider: boolean _cfgFailOnUnknownId>;

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No filter configured with id \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (type ");

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r4;

     label1:
        return r14;
    }
}
