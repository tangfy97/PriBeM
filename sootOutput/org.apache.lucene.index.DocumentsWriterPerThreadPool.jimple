abstract class org.apache.lucene.index.DocumentsWriterPerThreadPool extends java.lang.Object implements java.lang.Cloneable
{
    private org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates;
    private volatile int numThreadStatesActive;
    private org.apache.lucene.util.SetOnce globalFieldMap;
    private org.apache.lucene.util.SetOnce documentsWriter;
    static final boolean $assertionsDisabled;

    void <init>(int)
    {
        org.apache.lucene.index.DocumentsWriterPerThreadPool r0;
        org.apache.lucene.util.SetOnce $r1, $r2;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] $r3;
        java.lang.IllegalArgumentException $r4;
        int i0;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: org.apache.lucene.index.DocumentsWriterPerThreadPool;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.lucene.util.SetOnce;

        specialinvoke $r1.<org.apache.lucene.util.SetOnce: void <init>()>();

        r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.util.SetOnce globalFieldMap> = $r1;

        $r2 = new org.apache.lucene.util.SetOnce;

        specialinvoke $r2.<org.apache.lucene.util.SetOnce: void <init>()>();

        r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.util.SetOnce documentsWriter> = $r2;

        if i0 >= 1 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxNumThreadStates must be >= 1 but was: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r3 = newarray (org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)[i0];

        r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates> = $r3;

        r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: int numThreadStatesActive> = 0;

        return;
    }

    void initialize(org.apache.lucene.index.DocumentsWriter, org.apache.lucene.index.FieldInfos$FieldNumbers, org.apache.lucene.index.LiveIndexWriterConfig)
    {
        org.apache.lucene.index.DocumentsWriterPerThreadPool r0;
        org.apache.lucene.util.SetOnce $r2, $r4;
        org.apache.lucene.index.LiveIndexWriterConfig r12;
        org.apache.lucene.index.FieldInfos$Builder $r6;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] $r5, $r11;
        org.apache.lucene.index.DocumentsWriter r1;
        org.apache.lucene.index.DocumentsWriterPerThread$IndexingChain $r9;
        org.apache.lucene.index.FieldInfos$FieldNumbers r3;
        org.apache.lucene.store.Directory $r10;
        int $i0, i1;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState $r7;
        org.apache.lucene.index.DocumentsWriterPerThread $r8;

        r0 := @this: org.apache.lucene.index.DocumentsWriterPerThreadPool;

        r1 := @parameter0: org.apache.lucene.index.DocumentsWriter;

        r3 := @parameter1: org.apache.lucene.index.FieldInfos$FieldNumbers;

        r12 := @parameter2: org.apache.lucene.index.LiveIndexWriterConfig;

        $r2 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.util.SetOnce documentsWriter>;

        virtualinvoke $r2.<org.apache.lucene.util.SetOnce: void set(java.lang.Object)>(r1);

        $r4 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.util.SetOnce globalFieldMap>;

        virtualinvoke $r4.<org.apache.lucene.util.SetOnce: void set(java.lang.Object)>(r3);

        i1 = 0;

     label1:
        $r5 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates>;

        $i0 = lengthof $r5;

        if i1 >= $i0 goto label2;

        $r6 = new org.apache.lucene.index.FieldInfos$Builder;

        specialinvoke $r6.<org.apache.lucene.index.FieldInfos$Builder: void <init>(org.apache.lucene.index.FieldInfos$FieldNumbers)>(r3);

        $r11 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates>;

        $r7 = new org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState;

        $r8 = new org.apache.lucene.index.DocumentsWriterPerThread;

        $r10 = r1.<org.apache.lucene.index.DocumentsWriter: org.apache.lucene.store.Directory directory>;

        $r9 = r1.<org.apache.lucene.index.DocumentsWriter: org.apache.lucene.index.DocumentsWriterPerThread$IndexingChain chain>;

        specialinvoke $r8.<org.apache.lucene.index.DocumentsWriterPerThread: void <init>(org.apache.lucene.store.Directory,org.apache.lucene.index.DocumentsWriter,org.apache.lucene.index.FieldInfos$Builder,org.apache.lucene.index.DocumentsWriterPerThread$IndexingChain)>($r10, r1, $r6, $r9);

        specialinvoke $r7.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: void <init>(org.apache.lucene.index.DocumentsWriterPerThread)>($r8);

        $r11[i1] = $r7;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.apache.lucene.index.DocumentsWriterPerThreadPool clone()
    {
        org.apache.lucene.index.DocumentsWriterPerThreadPool r0, $r6;
        org.apache.lucene.util.SetOnce $r2, $r3;
        java.lang.AssertionError $r7;
        java.lang.RuntimeException $r9;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] $r4, $r5;
        java.lang.CloneNotSupportedException $r8;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.DocumentsWriterPerThreadPool;

        $z0 = <org.apache.lucene.index.DocumentsWriterPerThreadPool: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i1 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: int numThreadStatesActive>;

        if $i1 == 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (org.apache.lucene.index.DocumentsWriterPerThreadPool) $r1;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label4:
        $r2 = new org.apache.lucene.util.SetOnce;

        specialinvoke $r2.<org.apache.lucene.util.SetOnce: void <init>()>();

        $r6.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.util.SetOnce documentsWriter> = $r2;

        $r3 = new org.apache.lucene.util.SetOnce;

        specialinvoke $r3.<org.apache.lucene.util.SetOnce: void <init>()>();

        $r6.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.util.SetOnce globalFieldMap> = $r3;

        $r4 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates>;

        $i0 = lengthof $r4;

        $r5 = newarray (org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)[$i0];

        $r6.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates> = $r5;

        return $r6;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    int getMaxThreadStates()
    {
        int $i0;
        org.apache.lucene.index.DocumentsWriterPerThreadPool r0;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] $r1;

        r0 := @this: org.apache.lucene.index.DocumentsWriterPerThreadPool;

        $r1 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates>;

        $i0 = lengthof $r1;

        return $i0;
    }

    int getActiveThreadState()
    {
        int $i0;
        org.apache.lucene.index.DocumentsWriterPerThreadPool r0;

        r0 := @this: org.apache.lucene.index.DocumentsWriterPerThreadPool;

        $i0 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: int numThreadStatesActive>;

        return $i0;
    }

    synchronized org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState newThreadState()
    {
        java.lang.Throwable $r8;
        java.lang.AssertionError $r4, $r7;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState r3;
        org.apache.lucene.index.DocumentsWriterPerThread $r5, $r6;
        boolean $z0, $z1, $z2, $z3, z4;
        org.apache.lucene.index.DocumentsWriterPerThreadPool r0;

        r0 := @this: org.apache.lucene.index.DocumentsWriterPerThreadPool;

        $i1 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: int numThreadStatesActive>;

        $r1 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates>;

        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label11;

        $r2 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates>;

        $i2 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: int numThreadStatesActive>;

        r3 = $r2[$i2];

        virtualinvoke r3.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: void lock()>();

        z4 = 1;

     label01:
        $z0 = virtualinvoke r3.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: boolean isActive()>();

        if $z0 == 0 goto label05;

        $i3 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: int numThreadStatesActive>;

        $i4 = $i3 + 1;

        r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: int numThreadStatesActive> = $i4;

        $z3 = <org.apache.lucene.index.DocumentsWriterPerThreadPool: boolean $assertionsDisabled>;

        if $z3 != 0 goto label02;

        $r6 = r3.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: org.apache.lucene.index.DocumentsWriterPerThread dwpt>;

        if $r6 != null goto label02;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label02:
        $r5 = r3.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: org.apache.lucene.index.DocumentsWriterPerThread dwpt>;

        virtualinvoke $r5.<org.apache.lucene.index.DocumentsWriterPerThread: void initialize()>();

        z4 = 0;

     label03:
        if 0 == 0 goto label04;

        virtualinvoke r3.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: void unlock()>();

     label04:
        return r3;

     label05:
        $z1 = <org.apache.lucene.index.DocumentsWriterPerThreadPool: boolean $assertionsDisabled>;

        if $z1 != 0 goto label06;

        $z2 = specialinvoke r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: boolean assertUnreleasedThreadStatesInactive()>();

        if $z2 != 0 goto label06;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label06:
        if 1 == 0 goto label07;

        virtualinvoke r3.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: void unlock()>();

     label07:
        return null;

     label08:
        $r8 := @caughtexception;

     label09:
        if 1 == 0 goto label10;

        virtualinvoke r3.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: void unlock()>();

     label10:
        throw $r8;

     label11:
        return null;

        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private synchronized boolean assertUnreleasedThreadStatesInactive()
    {
        java.lang.Throwable $r10;
        java.lang.AssertionError $r6, $r9;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] $r1, $r2, $r4, $r7, $r11;
        int $i0, i1;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState $r3, $r5, $r8, $r12;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.index.DocumentsWriterPerThreadPool r0;

        r0 := @this: org.apache.lucene.index.DocumentsWriterPerThreadPool;

        i1 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: int numThreadStatesActive>;

     label1:
        $r1 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label7;

        $z0 = <org.apache.lucene.index.DocumentsWriterPerThreadPool: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r7 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates>;

        $r8 = $r7[i1];

        $z3 = virtualinvoke $r8.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: boolean tryLock()>();

        if $z3 != 0 goto label2;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>("unreleased threadstate should not be locked");

        throw $r9;

     label2:
        $z1 = <org.apache.lucene.index.DocumentsWriterPerThreadPool: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $r4 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates>;

        $r5 = $r4[i1];

        $z2 = virtualinvoke $r5.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: boolean isActive()>();

        if $z2 == 0 goto label3;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("expected unreleased thread state to be inactive");

        throw $r6;

     label3:
        $r2 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates>;

        $r3 = $r2[i1];

        virtualinvoke $r3.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: void unlock()>();

        goto label6;

     label4:
        $r10 := @caughtexception;

     label5:
        $r11 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates>;

        $r12 = $r11[i1];

        virtualinvoke $r12.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: void unlock()>();

        throw $r10;

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        return 1;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    synchronized void deactivateUnreleasedStates()
    {
        java.lang.Throwable $r4;
        org.apache.lucene.index.DocumentsWriterPerThreadPool r0;
        int $i0, i1;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState r3;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] $r1, $r2;

        r0 := @this: org.apache.lucene.index.DocumentsWriterPerThreadPool;

        i1 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: int numThreadStatesActive>;

     label1:
        $r1 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label7;

        $r2 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates>;

        r3 = $r2[i1];

        virtualinvoke r3.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: void lock()>();

     label2:
        staticinvoke <org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: void access$000(org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState,org.apache.lucene.index.DocumentsWriterPerThread)>(r3, null);

     label3:
        virtualinvoke r3.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: void unlock()>();

        goto label6;

     label4:
        $r4 := @caughtexception;

     label5:
        virtualinvoke r3.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: void unlock()>();

        throw $r4;

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    org.apache.lucene.index.DocumentsWriterPerThread replaceForFlush(org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState, boolean)
    {
        org.apache.lucene.index.FieldInfos$Builder $r1;
        java.lang.AssertionError $r10, $r11;
        org.apache.lucene.index.FieldInfos$FieldNumbers $r5;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState r0;
        org.apache.lucene.index.DocumentsWriterPerThread $r6, $r9;
        boolean $z0, $z1, z2, $z3;
        org.apache.lucene.index.DocumentsWriterPerThreadPool r2;
        org.apache.lucene.util.SetOnce $r3, $r7;
        java.lang.Object $r4, $r8;

        r2 := @this: org.apache.lucene.index.DocumentsWriterPerThreadPool;

        r0 := @parameter0: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState;

        z2 := @parameter1: boolean;

        $z0 = <org.apache.lucene.index.DocumentsWriterPerThreadPool: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z3 = virtualinvoke r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: boolean isHeldByCurrentThread()>();

        if $z3 != 0 goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        $z1 = <org.apache.lucene.index.DocumentsWriterPerThreadPool: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r7 = r2.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.util.SetOnce globalFieldMap>;

        $r8 = virtualinvoke $r7.<org.apache.lucene.util.SetOnce: java.lang.Object get()>();

        if $r8 != null goto label2;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label2:
        $r9 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: org.apache.lucene.index.DocumentsWriterPerThread dwpt>;

        if z2 != 0 goto label3;

        $r1 = new org.apache.lucene.index.FieldInfos$Builder;

        $r3 = r2.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.util.SetOnce globalFieldMap>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.util.SetOnce: java.lang.Object get()>();

        $r5 = (org.apache.lucene.index.FieldInfos$FieldNumbers) $r4;

        specialinvoke $r1.<org.apache.lucene.index.FieldInfos$Builder: void <init>(org.apache.lucene.index.FieldInfos$FieldNumbers)>($r5);

        $r6 = new org.apache.lucene.index.DocumentsWriterPerThread;

        specialinvoke $r6.<org.apache.lucene.index.DocumentsWriterPerThread: void <init>(org.apache.lucene.index.DocumentsWriterPerThread,org.apache.lucene.index.FieldInfos$Builder)>($r9, $r1);

        virtualinvoke $r6.<org.apache.lucene.index.DocumentsWriterPerThread: void initialize()>();

        staticinvoke <org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: void access$000(org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState,org.apache.lucene.index.DocumentsWriterPerThread)>(r0, $r6);

        goto label4;

     label3:
        staticinvoke <org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: void access$000(org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState,org.apache.lucene.index.DocumentsWriterPerThread)>(r0, null);

     label4:
        return $r9;
    }

    void recycle(org.apache.lucene.index.DocumentsWriterPerThread)
    {
        org.apache.lucene.index.DocumentsWriterPerThreadPool r0;
        org.apache.lucene.index.DocumentsWriterPerThread r1;

        r0 := @this: org.apache.lucene.index.DocumentsWriterPerThreadPool;

        r1 := @parameter0: org.apache.lucene.index.DocumentsWriterPerThread;

        return;
    }

    abstract org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState getAndLock(java.lang.Thread, org.apache.lucene.index.DocumentsWriter);

    org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState getThreadState(int)
    {
        org.apache.lucene.index.DocumentsWriterPerThreadPool r0;
        int i0;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState $r2;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] $r1;

        r0 := @this: org.apache.lucene.index.DocumentsWriterPerThreadPool;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates>;

        $r2 = $r1[i0];

        return $r2;
    }

    org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState minContendedThreadState()
    {
        org.apache.lucene.index.DocumentsWriterPerThreadPool r0;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] $r1;
        int i0, $i1, $i2, i3;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState r2, r3;

        r0 := @this: org.apache.lucene.index.DocumentsWriterPerThreadPool;

        r3 = null;

        i0 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: int numThreadStatesActive>;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        $r1 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates>;

        r2 = $r1[i3];

        if r3 == null goto label2;

        $i1 = virtualinvoke r2.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: int getQueueLength()>();

        $i2 = virtualinvoke r3.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: int getQueueLength()>();

        if $i1 >= $i2 goto label3;

     label2:
        r3 = r2;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return r3;
    }

    int numDeactivatedThreadStates()
    {
        java.lang.Throwable $r4;
        org.apache.lucene.index.DocumentsWriterPerThreadPool r0;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] $r1, $r2;
        int $i0, i1, i2;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.DocumentsWriterPerThreadPool;

        i1 = 0;

        i2 = 0;

     label1:
        $r1 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates>;

        $i0 = lengthof $r1;

        if i2 >= $i0 goto label7;

        $r2 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState[] threadStates>;

        r3 = $r2[i2];

        virtualinvoke r3.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: void lock()>();

     label2:
        $z0 = staticinvoke <org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: boolean access$100(org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)>(r3);

        if $z0 != 0 goto label3;

        i1 = i1 + 1;

     label3:
        virtualinvoke r3.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: void unlock()>();

        goto label6;

     label4:
        $r4 := @caughtexception;

     label5:
        virtualinvoke r3.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: void unlock()>();

        throw $r4;

     label6:
        i2 = i2 + 1;

        goto label1;

     label7:
        return i1;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void deactivateThreadState(org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)
    {
        org.apache.lucene.index.DocumentsWriterPerThreadPool r2;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState r0;
        java.lang.AssertionError $r1;
        boolean $z0, $z1;

        r2 := @this: org.apache.lucene.index.DocumentsWriterPerThreadPool;

        r0 := @parameter0: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState;

        $z0 = <org.apache.lucene.index.DocumentsWriterPerThreadPool: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: boolean isActive()>();

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        staticinvoke <org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: void access$000(org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState,org.apache.lucene.index.DocumentsWriterPerThread)>(r0, null);

        return;
    }

    void reinitThreadState(org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)
    {
        org.apache.lucene.index.DocumentsWriterPerThreadPool r5;
        java.lang.AssertionError $r3, $r4;
        int $i0;
        org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState r0;
        org.apache.lucene.index.DocumentsWriterPerThread $r1, $r2;
        boolean $z0, $z1, $z2;

        r5 := @this: org.apache.lucene.index.DocumentsWriterPerThreadPool;

        r0 := @parameter0: org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState;

        $z0 = <org.apache.lucene.index.DocumentsWriterPerThreadPool: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = staticinvoke <org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: boolean access$100(org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)>(r0);

        if $z2 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $z1 = <org.apache.lucene.index.DocumentsWriterPerThreadPool: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r2 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: org.apache.lucene.index.DocumentsWriterPerThread dwpt>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.index.DocumentsWriterPerThread: int getNumDocsInRAM()>();

        if $i0 == 0 goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $r1 = r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState: org.apache.lucene.index.DocumentsWriterPerThread dwpt>;

        virtualinvoke $r1.<org.apache.lucene.index.DocumentsWriterPerThread: void initialize()>();

        return;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.index.DocumentsWriterPerThreadPool r0, $r1;

        r0 := @this: org.apache.lucene.index.DocumentsWriterPerThreadPool;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.DocumentsWriterPerThreadPool: org.apache.lucene.index.DocumentsWriterPerThreadPool clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/DocumentsWriterPerThreadPool;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.DocumentsWriterPerThreadPool: boolean $assertionsDisabled> = $z1;

        return;
    }
}
