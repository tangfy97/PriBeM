final class kodkod.engine.bool.RBCFactory extends java.lang.Object
{
    private final kodkod.engine.bool.BooleanVariable[] vars;
    private final kodkod.util.collections.CacheSet[] cache;
    private int label;
    private int cmpMax;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/engine/bool/RBCFactory;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.engine.bool.RBCFactory: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(int, int)
    {
        kodkod.engine.bool.BooleanVariable $r2;
        java.lang.AssertionError $r8;
        kodkod.util.collections.CacheSet $r5, $r6, $r7;
        kodkod.engine.bool.BooleanVariable[] $r1, $r3;
        int i0, i1, $i2, $i3, i4;
        kodkod.engine.bool.RBCFactory r0;
        boolean $z0;
        kodkod.util.collections.CacheSet[] $r4;

        r0 := @this: kodkod.engine.bool.RBCFactory;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <kodkod.engine.bool.RBCFactory: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 <= 0 goto label1;

        if i1 >= 0 goto label2;

     label1:
        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label2:
        r0.<kodkod.engine.bool.RBCFactory: int cmpMax> = i0;

        $i2 = i1 + 1;

        r0.<kodkod.engine.bool.RBCFactory: int label> = $i2;

        $r1 = newarray (kodkod.engine.bool.BooleanVariable)[i1];

        r0.<kodkod.engine.bool.RBCFactory: kodkod.engine.bool.BooleanVariable[] vars> = $r1;

        i4 = 0;

        goto label4;

     label3:
        $r3 = r0.<kodkod.engine.bool.RBCFactory: kodkod.engine.bool.BooleanVariable[] vars>;

        $r2 = new kodkod.engine.bool.BooleanVariable;

        $i3 = i4 + 1;

        specialinvoke $r2.<kodkod.engine.bool.BooleanVariable: void <init>(int)>($i3);

        $r3[i4] = $r2;

        i4 = i4 + 1;

     label4:
        if i4 < i1 goto label3;

        $r4 = newarray (kodkod.util.collections.CacheSet)[3];

        $r5 = new kodkod.util.collections.CacheSet;

        specialinvoke $r5.<kodkod.util.collections.CacheSet: void <init>()>();

        $r4[0] = $r5;

        $r6 = new kodkod.util.collections.CacheSet;

        specialinvoke $r6.<kodkod.util.collections.CacheSet: void <init>()>();

        $r4[1] = $r6;

        $r7 = new kodkod.util.collections.CacheSet;

        specialinvoke $r7.<kodkod.util.collections.CacheSet: void <init>()>();

        $r4[2] = $r7;

        r0.<kodkod.engine.bool.RBCFactory: kodkod.util.collections.CacheSet[] cache> = $r4;

        return;
    }

    private kodkod.util.collections.CacheSet opCache(kodkod.engine.bool.Operator)
    {
        int $i0;
        kodkod.engine.bool.Operator r1;
        kodkod.util.collections.CacheSet $r3;
        kodkod.engine.bool.RBCFactory r0;
        kodkod.util.collections.CacheSet[] $r2;

        r0 := @this: kodkod.engine.bool.RBCFactory;

        r1 := @parameter0: kodkod.engine.bool.Operator;

        $r2 = r0.<kodkod.engine.bool.RBCFactory: kodkod.util.collections.CacheSet[] cache>;

        $i0 = r1.<kodkod.engine.bool.Operator: int ordinal>;

        $r3 = $r2[$i0];

        return $r3;
    }

    void setCmpMax(int)
    {
        int i0;
        java.lang.AssertionError $r1;
        boolean $z0;
        kodkod.engine.bool.RBCFactory r0;

        r0 := @this: kodkod.engine.bool.RBCFactory;

        i0 := @parameter0: int;

        $z0 = <kodkod.engine.bool.RBCFactory: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 > 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        r0.<kodkod.engine.bool.RBCFactory: int cmpMax> = i0;

        return;
    }

    int cmpMax()
    {
        int $i0;
        kodkod.engine.bool.RBCFactory r0;

        r0 := @this: kodkod.engine.bool.RBCFactory;

        $i0 = r0.<kodkod.engine.bool.RBCFactory: int cmpMax>;

        return $i0;
    }

    void clear()
    {
        kodkod.util.collections.CacheSet $r3, $r5, $r7;
        kodkod.engine.bool.BooleanVariable[] $r1;
        int $i0, $i1;
        kodkod.engine.bool.RBCFactory r0;
        kodkod.util.collections.CacheSet[] $r2, $r4, $r6;

        r0 := @this: kodkod.engine.bool.RBCFactory;

        $r1 = r0.<kodkod.engine.bool.RBCFactory: kodkod.engine.bool.BooleanVariable[] vars>;

        $i0 = lengthof $r1;

        $i1 = $i0 + 1;

        r0.<kodkod.engine.bool.RBCFactory: int label> = $i1;

        $r2 = r0.<kodkod.engine.bool.RBCFactory: kodkod.util.collections.CacheSet[] cache>;

        $r3 = $r2[0];

        virtualinvoke $r3.<kodkod.util.collections.CacheSet: void clear()>();

        $r4 = r0.<kodkod.engine.bool.RBCFactory: kodkod.util.collections.CacheSet[] cache>;

        $r5 = $r4[1];

        virtualinvoke $r5.<kodkod.util.collections.CacheSet: void clear()>();

        $r6 = r0.<kodkod.engine.bool.RBCFactory: kodkod.util.collections.CacheSet[] cache>;

        $r7 = $r6[2];

        virtualinvoke $r7.<kodkod.util.collections.CacheSet: void clear()>();

        return;
    }

    boolean canAssemble(kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanVariable $r10;
        kodkod.engine.bool.BooleanValue r11;
        kodkod.engine.bool.BooleanFormula r4;
        kodkod.engine.bool.Operator $r0, $r1, $r5;
        kodkod.engine.bool.BooleanVariable[] $r3, $r9;
        int $i0, $i1, $i2, $i3, $i4;
        kodkod.engine.bool.RBCFactory r2;
        boolean $z0;
        java.util.Iterator $r7;
        kodkod.util.collections.CacheSet $r6;
        java.lang.Object $r8;

        r2 := @this: kodkod.engine.bool.RBCFactory;

        r11 := @parameter0: kodkod.engine.bool.BooleanValue;

        $r0 = virtualinvoke r11.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.Operator op()>();

        $r1 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator CONST>;

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        $i0 = virtualinvoke r11.<kodkod.engine.bool.BooleanValue: int label()>();

        if $i0 >= 0 goto label2;

        r11 = virtualinvoke r11.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

     label2:
        $i1 = virtualinvoke r11.<kodkod.engine.bool.BooleanValue: int label()>();

        $r3 = r2.<kodkod.engine.bool.RBCFactory: kodkod.engine.bool.BooleanVariable[] vars>;

        $i2 = lengthof $r3;

        if $i1 > $i2 goto label4;

        $r9 = r2.<kodkod.engine.bool.RBCFactory: kodkod.engine.bool.BooleanVariable[] vars>;

        $i4 = $i1 - 1;

        $r10 = $r9[$i4];

        if r11 != $r10 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        r4 = (kodkod.engine.bool.BooleanFormula) r11;

        $r5 = virtualinvoke r4.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.Operator op()>();

        $r6 = specialinvoke r2.<kodkod.engine.bool.RBCFactory: kodkod.util.collections.CacheSet opCache(kodkod.engine.bool.Operator)>($r5);

        $i3 = virtualinvoke r4.<java.lang.Object: int hashCode()>();

        $r7 = virtualinvoke $r6.<kodkod.util.collections.CacheSet: java.util.Iterator get(int)>($i3);

        goto label6;

     label5:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        if $r8 != r4 goto label6;

        return 1;

     label6:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label5;

        return 0;
    }

    int numVars()
    {
        int $i0;
        kodkod.engine.bool.BooleanVariable[] $r1;
        kodkod.engine.bool.RBCFactory r0;

        r0 := @this: kodkod.engine.bool.RBCFactory;

        $r1 = r0.<kodkod.engine.bool.RBCFactory: kodkod.engine.bool.BooleanVariable[] vars>;

        $i0 = lengthof $r1;

        return $i0;
    }

    kodkod.engine.bool.BooleanVariable variable(int)
    {
        kodkod.engine.bool.BooleanVariable $r2;
        kodkod.engine.bool.BooleanVariable[] $r1;
        int i0, $i1;
        kodkod.engine.bool.RBCFactory r0;

        r0 := @this: kodkod.engine.bool.RBCFactory;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.engine.bool.RBCFactory: kodkod.engine.bool.BooleanVariable[] vars>;

        $i1 = i0 - 1;

        $r2 = $r1[$i1];

        return $r2;
    }

    kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanValue r0, r2, r3, $r8, $r11, $r12, $r13, $r16, $r17, $r18, $r21;
        kodkod.engine.bool.BooleanConstant $r1, $r4, $r5, $r9, $r14, $r19;
        kodkod.engine.bool.ITEGate $r27;
        boolean z0, $z1;
        kodkod.engine.bool.Operator$Nary $r7, $r10, $r15, $r20;
        kodkod.engine.bool.BooleanFormula r23, $r24, $r25, $r26, r30, r31, r32, $r37;
        kodkod.engine.bool.Operator$Ternary $r28, $r33, $r34;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        kodkod.engine.bool.RBCFactory r6;
        java.util.Iterator $r36;
        kodkod.util.collections.CacheSet $r29, $r35;
        java.lang.Object $r22;

        r6 := @this: kodkod.engine.bool.RBCFactory;

        r0 := @parameter0: kodkod.engine.bool.BooleanValue;

        r2 := @parameter1: kodkod.engine.bool.BooleanValue;

        r3 := @parameter2: kodkod.engine.bool.BooleanValue;

        $r1 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if r0 == $r1 goto label01;

        if r2 != r3 goto label02;

     label01:
        return r2;

     label02:
        $r4 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if r0 != $r4 goto label03;

        return r3;

     label03:
        $r5 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if r2 == $r5 goto label04;

        if r0 != r2 goto label05;

     label04:
        $r7 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        $r8 = virtualinvoke r6.<kodkod.engine.bool.RBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r7, r0, r3);

        return $r8;

     label05:
        $r9 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if r2 == $r9 goto label06;

        $r13 = virtualinvoke r0.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        if $r13 != r2 goto label07;

     label06:
        $r10 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r11 = virtualinvoke r0.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r12 = virtualinvoke r6.<kodkod.engine.bool.RBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r10, $r11, r3);

        return $r12;

     label07:
        $r14 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if r3 == $r14 goto label08;

        $r18 = virtualinvoke r0.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        if $r18 != r3 goto label09;

     label08:
        $r15 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        $r16 = virtualinvoke r0.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r17 = virtualinvoke r6.<kodkod.engine.bool.RBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r15, $r16, r2);

        return $r17;

     label09:
        $r19 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if r3 == $r19 goto label10;

        if r0 != r3 goto label11;

     label10:
        $r20 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r21 = virtualinvoke r6.<kodkod.engine.bool.RBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r20, r0, r2);

        return $r21;

     label11:
        $i0 = virtualinvoke r0.<kodkod.engine.bool.BooleanValue: int label()>();

        $i1 = virtualinvoke r2.<kodkod.engine.bool.BooleanValue: int label()>();

        $i2 = virtualinvoke r3.<kodkod.engine.bool.BooleanValue: int label()>();

        z0 = 0;

        r30 = (kodkod.engine.bool.BooleanFormula) r0;

        r31 = (kodkod.engine.bool.BooleanFormula) r2;

        r32 = (kodkod.engine.bool.BooleanFormula) r3;

        $i3 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        $i4 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        if $i3 != $i4 goto label14;

        if $i0 <= 0 goto label12;

        if $i1 >= 0 goto label12;

        if $i2 <= 0 goto label12;

        z0 = 1;

        r31 = virtualinvoke r31.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula negation()>();

        r32 = virtualinvoke r32.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula negation()>();

        goto label14;

     label12:
        if $i0 >= 0 goto label13;

        if $i1 <= 0 goto label13;

        if $i2 >= 0 goto label13;

        z0 = 1;

        r30 = virtualinvoke r30.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula negation()>();

        goto label14;

     label13:
        if $i0 >= 0 goto label14;

        if $i1 >= 0 goto label14;

        if $i2 <= 0 goto label14;

        r30 = virtualinvoke r30.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula negation()>();

        r31 = virtualinvoke r31.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula negation()>();

        r32 = virtualinvoke r32.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula negation()>();

     label14:
        $r33 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Ternary ITE>;

        $i7 = virtualinvoke $r33.<kodkod.engine.bool.Operator$Ternary: int hash(kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula)>(r30, r31, r32);

        $r34 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Ternary ITE>;

        $r35 = specialinvoke r6.<kodkod.engine.bool.RBCFactory: kodkod.util.collections.CacheSet opCache(kodkod.engine.bool.Operator)>($r34);

        $r36 = virtualinvoke $r35.<kodkod.util.collections.CacheSet: java.util.Iterator get(int)>($i7);

        goto label16;

     label15:
        $r22 = interfaceinvoke $r36.<java.util.Iterator: java.lang.Object next()>();

        r23 = (kodkod.engine.bool.BooleanFormula) $r22;

        $r24 = virtualinvoke r23.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula input(int)>(0);

        if $r24 != r0 goto label16;

        $r25 = virtualinvoke r23.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula input(int)>(1);

        if $r25 != r2 goto label16;

        $r26 = virtualinvoke r23.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula input(int)>(2);

        if $r26 != r3 goto label16;

        return r23;

     label16:
        $z1 = interfaceinvoke $r36.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label15;

        $r27 = new kodkod.engine.bool.ITEGate;

        $i5 = r6.<kodkod.engine.bool.RBCFactory: int label>;

        $i6 = $i5 + 1;

        r6.<kodkod.engine.bool.RBCFactory: int label> = $i6;

        specialinvoke $r27.<kodkod.engine.bool.ITEGate: void <init>(int,int,kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula)>($i5, $i7, r30, r31, r32);

        $r28 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Ternary ITE>;

        $r29 = specialinvoke r6.<kodkod.engine.bool.RBCFactory: kodkod.util.collections.CacheSet opCache(kodkod.engine.bool.Operator)>($r28);

        virtualinvoke $r29.<kodkod.util.collections.CacheSet: boolean add(java.lang.Object)>($r27);

        if z0 == 0 goto label17;

        $r37 = virtualinvoke $r27.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula negation()>();

        goto label18;

     label17:
        $r37 = $r27;

     label18:
        return $r37;
    }

    kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary, kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.Operator$Nary r0, $r1, $r15;
        kodkod.engine.bool.BooleanValue r2, r3, $r16, $r17, $r18, $r19;
        kodkod.engine.bool.BooleanConstant $r4, $r5, $r6, $r7, $r12, $r13, $r14;
        kodkod.engine.bool.BooleanFormula $r9, $r10, $r11;
        int $i0, $i1, $i2;
        kodkod.engine.bool.RBCFactory r8;

        r8 := @this: kodkod.engine.bool.RBCFactory;

        r0 := @parameter0: kodkod.engine.bool.Operator$Nary;

        r2 := @parameter1: kodkod.engine.bool.BooleanValue;

        r3 := @parameter2: kodkod.engine.bool.BooleanValue;

        $r1 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        if r0 != $r1 goto label1;

        $r15 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r16 = virtualinvoke r2.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r17 = virtualinvoke r3.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r18 = virtualinvoke r8.<kodkod.engine.bool.RBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r15, $r16, $r17);

        $r19 = virtualinvoke $r18.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        return $r19;

     label1:
        if r2 != r3 goto label2;

        return r2;

     label2:
        $i0 = virtualinvoke r2.<kodkod.engine.bool.BooleanValue: int label()>();

        $i1 = virtualinvoke r3.<kodkod.engine.bool.BooleanValue: int label()>();

        $i2 = neg $i1;

        if $i0 != $i2 goto label3;

        $r14 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        return $r14;

     label3:
        $r4 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if r2 != $r4 goto label4;

        return r3;

     label4:
        $r5 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        if r3 != $r5 goto label5;

        return r2;

     label5:
        $r6 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if r2 != $r6 goto label6;

        $r13 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        return $r13;

     label6:
        $r7 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        if r3 != $r7 goto label7;

        $r12 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        return $r12;

     label7:
        $r10 = (kodkod.engine.bool.BooleanFormula) r2;

        $r9 = (kodkod.engine.bool.BooleanFormula) r3;

        $r11 = specialinvoke r8.<kodkod.engine.bool.RBCFactory: kodkod.engine.bool.BooleanFormula cache(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula)>(r0, $r10, $r9);

        return $r11;
    }

    kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.BooleanAccumulator)
    {
        kodkod.engine.bool.BooleanValue $r5, $r7, $r8, $r11, r18, r20, $r21, $r26, r27;
        kodkod.engine.bool.BooleanConstant $r12, $r22, $r23, $r24;
        java.util.ListIterator $r16;
        boolean $z0;
        kodkod.engine.bool.Operator$Nary r1;
        kodkod.engine.bool.BooleanAccumulator r0;
        int $i0, $i1, $i2, i3, i4;
        java.util.LinkedList $r13;
        kodkod.engine.bool.RBCFactory r3;
        java.util.Iterator $r2, $r9, $r14;
        java.lang.Object $r4, $r6, $r10, $r15, $r17, $r19, $r25;

        r3 := @this: kodkod.engine.bool.RBCFactory;

        r0 := @parameter0: kodkod.engine.bool.BooleanAccumulator;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: int size()>();

        r1 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.Operator$Nary op>;

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            default: goto label04;
        };

     label01:
        $r12 = virtualinvoke r1.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant identity()>();

        return $r12;

     label02:
        $r9 = virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: java.util.Iterator iterator()>();

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (kodkod.engine.bool.BooleanValue) $r10;

        return $r11;

     label03:
        $r2 = virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (kodkod.engine.bool.BooleanValue) $r4;

        $r6 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (kodkod.engine.bool.BooleanValue) $r6;

        $r8 = virtualinvoke r3.<kodkod.engine.bool.RBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r1, $r5, $r7);

        return $r8;

     label04:
        $r13 = new java.util.LinkedList;

        specialinvoke $r13.<java.util.LinkedList: void <init>()>();

        $r14 = virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: java.util.Iterator iterator()>();

        goto label06;

     label05:
        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r27 = (kodkod.engine.bool.BooleanValue) $r15;

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r27);

     label06:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label05;

        goto label13;

     label07:
        $r16 = interfaceinvoke $r13.<java.util.List: java.util.ListIterator listIterator()>();

        i4 = 0;

        $i2 = interfaceinvoke $r13.<java.util.List: int size()>();

        i3 = $i2 - 1;

        goto label12;

     label08:
        $r17 = interfaceinvoke $r16.<java.util.ListIterator: java.lang.Object next()>();

        r18 = (kodkod.engine.bool.BooleanValue) $r17;

        interfaceinvoke $r16.<java.util.ListIterator: void remove()>();

        $r19 = interfaceinvoke $r16.<java.util.ListIterator: java.lang.Object next()>();

        r20 = (kodkod.engine.bool.BooleanValue) $r19;

        $r21 = virtualinvoke r3.<kodkod.engine.bool.RBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r1, r18, r20);

        $r22 = virtualinvoke r1.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        if $r21 != $r22 goto label09;

        $r24 = virtualinvoke r1.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        return $r24;

     label09:
        $r23 = virtualinvoke r1.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant identity()>();

        if $r21 != $r23 goto label10;

        interfaceinvoke $r16.<java.util.ListIterator: void remove()>();

        goto label11;

     label10:
        interfaceinvoke $r16.<java.util.ListIterator: void set(java.lang.Object)>($r21);

     label11:
        i4 = i4 + 2;

     label12:
        if i4 < i3 goto label08;

     label13:
        $i1 = interfaceinvoke $r13.<java.util.List: int size()>();

        if $i1 > 1 goto label07;

        $r25 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0);

        $r26 = (kodkod.engine.bool.BooleanValue) $r25;

        return $r26;
    }

    private kodkod.engine.bool.BooleanFormula cache(kodkod.engine.bool.Operator$Nary, kodkod.engine.bool.BooleanFormula, kodkod.engine.bool.BooleanFormula)
    {
        kodkod.engine.bool.Operator$Nary r2;
        kodkod.engine.bool.BooleanFormula r0, r1, r7, $r8, $r9, r12, r13;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        kodkod.engine.bool.RBCFactory r3;
        boolean $z0;
        java.util.Iterator $r5;
        kodkod.engine.bool.BinaryGate $r10;
        kodkod.util.collections.CacheSet $r4, $r11;
        java.lang.Object $r6;

        r3 := @this: kodkod.engine.bool.RBCFactory;

        r2 := @parameter0: kodkod.engine.bool.Operator$Nary;

        r0 := @parameter1: kodkod.engine.bool.BooleanFormula;

        r1 := @parameter2: kodkod.engine.bool.BooleanFormula;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.BooleanFormula: int label()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.BooleanFormula: int label()>();

        if $i0 >= $i1 goto label1;

        r12 = r0;

        r13 = r1;

        goto label2;

     label1:
        r12 = r1;

        r13 = r0;

     label2:
        $i2 = virtualinvoke r2.<kodkod.engine.bool.Operator$Nary: int hash(kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula)>(r12, r13);

        $r4 = specialinvoke r3.<kodkod.engine.bool.RBCFactory: kodkod.util.collections.CacheSet opCache(kodkod.engine.bool.Operator)>(r2);

        $r5 = virtualinvoke $r4.<kodkod.util.collections.CacheSet: java.util.Iterator get(int)>($i2);

        goto label4;

     label3:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (kodkod.engine.bool.BooleanFormula) $r6;

        $i3 = virtualinvoke r7.<kodkod.engine.bool.BooleanFormula: int size()>();

        if $i3 != 2 goto label4;

        $r8 = virtualinvoke r7.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula input(int)>(0);

        if $r8 != r12 goto label4;

        $r9 = virtualinvoke r7.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula input(int)>(1);

        if $r9 != r13 goto label4;

        return r7;

     label4:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        $r10 = new kodkod.engine.bool.BinaryGate;

        $i4 = r3.<kodkod.engine.bool.RBCFactory: int label>;

        $i5 = $i4 + 1;

        r3.<kodkod.engine.bool.RBCFactory: int label> = $i5;

        specialinvoke $r10.<kodkod.engine.bool.BinaryGate: void <init>(kodkod.engine.bool.Operator$Nary,int,int,kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula)>(r2, $i4, $i2, r12, r13);

        $r11 = specialinvoke r3.<kodkod.engine.bool.RBCFactory: kodkod.util.collections.CacheSet opCache(kodkod.engine.bool.Operator)>(r2);

        virtualinvoke $r11.<kodkod.util.collections.CacheSet: boolean add(java.lang.Object)>($r10);

        return $r10;
    }
}
