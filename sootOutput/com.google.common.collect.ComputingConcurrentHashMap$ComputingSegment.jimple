class com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment extends com.google.common.collect.CustomConcurrentHashMap$Segment
{
    final com.google.common.collect.ComputingConcurrentHashMap this$0;

    void <init>(com.google.common.collect.ComputingConcurrentHashMap, int, int)
    {
        com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment r0;
        int i0, i1;
        com.google.common.collect.ComputingConcurrentHashMap r1;

        r0 := @this: com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment;

        r1 := @parameter0: com.google.common.collect.ComputingConcurrentHashMap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: com.google.common.collect.ComputingConcurrentHashMap this$0> = r1;

        specialinvoke r0.<com.google.common.collect.CustomConcurrentHashMap$Segment: void <init>(com.google.common.collect.CustomConcurrentHashMap,int,int)>(r1, i0, i1);

        return;
    }

    java.lang.Object compute(java.lang.Object, int)
    {
        com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry r3, $r12, r27, r30, r31;
        com.google.common.collect.ComputingConcurrentHashMap $r5, $r11, $r13, $r15;
        java.util.concurrent.atomic.AtomicReferenceArray r29;
        java.lang.Thread $r8, $r9, $r20;
        boolean $z0, $z1, $z2, $z3, z4, $z5, z6, z7, z8;
        com.google.common.collect.CustomConcurrentHashMap$ValueReference $r6, $r17;
        java.lang.Throwable $r19, $r22, $r23, $r24;
        com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference $r4, r28;
        int i0, $i1, $i2, $i3, i4;
        com.google.common.base.Equivalence $r16;
        java.lang.InterruptedException $r21;
        com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment r0;
        java.lang.Object r1, $r2, $r7, $r10, $r14, $r18, $r25, r26;

        r0 := @this: com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

     label01:
        $r25 = virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: java.lang.Object get(java.lang.Object,int)>(r1, i0);

        r26 = $r25;

        if $r25 == null goto label02;

        return $r25;

     label02:
        r27 = null;

        r28 = null;

        virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: void lock()>();

     label03:
        virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: void preWriteCleanup()>();

        r29 = r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i1 = virtualinvoke r29.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i2 = $i1 - 1;

        i4 = i0 & $i2;

        $r2 = virtualinvoke r29.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i4);

        r3 = (com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry) $r2;

        r30 = r3;

     label04:
        if r30 == null goto label09;

        $r14 = interfaceinvoke r30.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        $i3 = interfaceinvoke r30.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        if $i3 != i0 goto label08;

        if $r14 == null goto label08;

        $r15 = r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: com.google.common.collect.ComputingConcurrentHashMap this$0>;

        $r16 = $r15.<com.google.common.collect.ComputingConcurrentHashMap: com.google.common.base.Equivalence keyEquivalence>;

        $z2 = interfaceinvoke $r16.<com.google.common.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(r1, $r14);

        if $z2 == 0 goto label08;

        $r17 = interfaceinvoke r30.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: com.google.common.collect.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $z3 = interfaceinvoke $r17.<com.google.common.collect.CustomConcurrentHashMap$ValueReference: boolean isComputingReference()>();

        if $z3 != 0 goto label07;

        $r18 = virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: java.lang.Object getLiveValue(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry)>(r30);

        r26 = $r18;

        if $r18 == null goto label06;

        virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: void recordLockedRead(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry)>(r30);

     label05:
        virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: void unlock()>();

        virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: void postWriteCleanup()>();

        return $r18;

     label06:
        virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: boolean unsetLiveEntry(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry,int)>(r30, i0);

     label07:
        r27 = r30;

        goto label09;

     label08:
        r30 = interfaceinvoke r30.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label04;

     label09:
        if r27 == null goto label10;

        $r13 = r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: com.google.common.collect.ComputingConcurrentHashMap this$0>;

        $z1 = virtualinvoke $r13.<com.google.common.collect.ComputingConcurrentHashMap: boolean isUnset(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry)>(r27);

        if $z1 == 0 goto label12;

     label10:
        $r4 = new com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference;

        $r5 = r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: com.google.common.collect.ComputingConcurrentHashMap this$0>;

        specialinvoke $r4.<com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference: void <init>(com.google.common.collect.ComputingConcurrentHashMap,com.google.common.collect.ComputingConcurrentHashMap$1)>($r5, null);

        r28 = $r4;

        if r27 != null goto label11;

        $r11 = r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: com.google.common.collect.ComputingConcurrentHashMap this$0>;

        $r12 = virtualinvoke $r11.<com.google.common.collect.ComputingConcurrentHashMap: com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry newEntry(java.lang.Object,int,com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry)>(r1, i0, r3);

        r27 = $r12;

        virtualinvoke r29.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i4, $r12);

     label11:
        interfaceinvoke r27.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: void setValueReference(com.google.common.collect.CustomConcurrentHashMap$ValueReference)>($r4);

     label12:
        virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: void unlock()>();

        virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: void postWriteCleanup()>();

        goto label15;

     label13:
        $r24 := @caughtexception;

     label14:
        virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: void unlock()>();

        virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: void postWriteCleanup()>();

        throw $r24;

     label15:
        if r28 == null goto label27;

     label16:
        r31 = r27;

        entermonitor r27;

     label17:
        $r10 = virtualinvoke r28.<com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference: java.lang.Object compute(java.lang.Object,int)>(r1, i0);

        r26 = $r10;

        exitmonitor r27;

     label18:
        goto label21;

     label19:
        $r23 := @caughtexception;

        exitmonitor r31;

     label20:
        throw $r23;

     label21:
        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r10, "compute() returned null unexpectedly");

     label22:
        if $r10 != null goto label23;

        virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: boolean clearValue(java.lang.Object,int,com.google.common.collect.CustomConcurrentHashMap$ValueReference)>(r1, i0, r28);

     label23:
        return $r10;

     label24:
        $r22 := @caughtexception;

     label25:
        if r26 != null goto label26;

        virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: boolean clearValue(java.lang.Object,int,com.google.common.collect.CustomConcurrentHashMap$ValueReference)>(r1, i0, r28);

     label26:
        throw $r22;

     label27:
        z4 = 0;

        z8 = 0;

        z7 = 0;

        z6 = 0;

     label28:
        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r27);

        if $z0 != 0 goto label29;

        $z5 = 1;

        goto label30;

     label29:
        $z5 = 0;

     label30:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z5, "Recursive computation");

        $r6 = interfaceinvoke r27.<com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry: com.google.common.collect.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r7 = interfaceinvoke $r6.<com.google.common.collect.CustomConcurrentHashMap$ValueReference: java.lang.Object waitForValue()>();

        if $r7 == null goto label33;

        virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: void recordRead(com.google.common.collect.CustomConcurrentHashMap$ReferenceEntry)>(r27);

     label31:
        if z8 == 0 goto label32;

        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r9.<java.lang.Thread: void interrupt()>();

     label32:
        return $r7;

     label33:
        if z6 == 0 goto label01;

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r8.<java.lang.Thread: void interrupt()>();

        goto label01;

     label34:
        $r21 := @caughtexception;

        z4 = 1;

        z8 = 1;

        z7 = 1;

        z6 = 1;

        goto label28;

     label35:
        $r19 := @caughtexception;

     label36:
        if z7 == 0 goto label37;

        $r20 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r20.<java.lang.Thread: void interrupt()>();

     label37:
        throw $r19;

        catch java.lang.Throwable from label03 to label05 with label13;
        catch java.lang.Throwable from label06 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.Throwable from label16 to label22 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
        catch java.lang.InterruptedException from label28 to label31 with label34;
        catch java.lang.Throwable from label28 to label31 with label35;
        catch java.lang.Throwable from label34 to label36 with label35;
    }
}
