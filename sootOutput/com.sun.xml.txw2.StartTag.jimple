class com.sun.xml.txw2.StartTag extends com.sun.xml.txw2.Content implements com.sun.xml.txw2.NamespaceResolver
{
    private java.lang.String uri;
    private final java.lang.String localName;
    private com.sun.xml.txw2.Attribute firstAtt;
    private com.sun.xml.txw2.Attribute lastAtt;
    private com.sun.xml.txw2.ContainerElement owner;
    private com.sun.xml.txw2.NamespaceDecl firstNs;
    private com.sun.xml.txw2.NamespaceDecl lastNs;
    final com.sun.xml.txw2.Document document;
    static final boolean $assertionsDisabled;

    public void <init>(com.sun.xml.txw2.ContainerElement, java.lang.String, java.lang.String)
    {
        java.lang.String r2, r3;
        com.sun.xml.txw2.Document $r4;
        com.sun.xml.txw2.ContainerElement r1;
        com.sun.xml.txw2.StartTag r0;

        r0 := @this: com.sun.xml.txw2.StartTag;

        r1 := @parameter0: com.sun.xml.txw2.ContainerElement;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r1.<com.sun.xml.txw2.ContainerElement: com.sun.xml.txw2.Document document>;

        specialinvoke r0.<com.sun.xml.txw2.StartTag: void <init>(com.sun.xml.txw2.Document,java.lang.String,java.lang.String)>($r4, r2, r3);

        r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.ContainerElement owner> = r1;

        return;
    }

    public void <init>(com.sun.xml.txw2.Document, java.lang.String, java.lang.String)
    {
        com.sun.xml.txw2.Document r3;
        java.lang.AssertionError $r4, $r5;
        com.sun.xml.txw2.StartTag r0;
        java.lang.String r1, r2;
        boolean $z0, $z1;

        r0 := @this: com.sun.xml.txw2.StartTag;

        r3 := @parameter0: com.sun.xml.txw2.Document;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.sun.xml.txw2.Content: void <init>()>();

        $z0 = <com.sun.xml.txw2.StartTag: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $z1 = <com.sun.xml.txw2.StartTag: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r2 != null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        r0.<com.sun.xml.txw2.StartTag: java.lang.String uri> = r1;

        r0.<com.sun.xml.txw2.StartTag: java.lang.String localName> = r2;

        r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.Document document> = r3;

        virtualinvoke r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.NamespaceDecl addNamespaceDecl(java.lang.String,java.lang.String,boolean)>(r1, null, 0);

        return;
    }

    public void addAttribute(java.lang.String, java.lang.String, java.lang.Object)
    {
        java.lang.AssertionError $r8, $r10;
        com.sun.xml.txw2.Document $r12;
        int $i0;
        java.lang.String r3, r4;
        boolean $z0, $z1, $z2;
        com.sun.xml.txw2.Attribute $r2, $r5, $r6, $r7, $r9, r11;
        com.sun.xml.txw2.StartTag r0;
        java.lang.Object r1;
        java.lang.StringBuilder $r13;

        r0 := @this: com.sun.xml.txw2.StartTag;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.sun.xml.txw2.StartTag: void checkWritable()>();

        r11 = r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.Attribute firstAtt>;

     label1:
        if r11 == null goto label3;

        $z2 = virtualinvoke r11.<com.sun.xml.txw2.Attribute: boolean hasName(java.lang.String,java.lang.String)>(r3, r4);

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        r11 = r11.<com.sun.xml.txw2.Attribute: com.sun.xml.txw2.Attribute next>;

        goto label1;

     label3:
        if r11 != null goto label8;

        $r2 = new com.sun.xml.txw2.Attribute;

        specialinvoke $r2.<com.sun.xml.txw2.Attribute: void <init>(java.lang.String,java.lang.String)>(r3, r4);

        r11 = $r2;

        $r5 = r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.Attribute lastAtt>;

        if $r5 != null goto label5;

        $z1 = <com.sun.xml.txw2.StartTag: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        $r9 = r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.Attribute firstAtt>;

        if $r9 == null goto label4;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label4:
        r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.Attribute lastAtt> = $r2;

        r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.Attribute firstAtt> = $r2;

        goto label7;

     label5:
        $z0 = <com.sun.xml.txw2.StartTag: boolean $assertionsDisabled>;

        if $z0 != 0 goto label6;

        $r7 = r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.Attribute firstAtt>;

        if $r7 != null goto label6;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label6:
        $r6 = r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.Attribute lastAtt>;

        $r6.<com.sun.xml.txw2.Attribute: com.sun.xml.txw2.Attribute next> = $r2;

        r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.Attribute lastAtt> = $r2;

     label7:
        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label8;

        virtualinvoke r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.NamespaceDecl addNamespaceDecl(java.lang.String,java.lang.String,boolean)>(r3, null, 1);

     label8:
        $r12 = r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.Document document>;

        $r13 = r11.<com.sun.xml.txw2.Attribute: java.lang.StringBuilder value>;

        virtualinvoke $r12.<com.sun.xml.txw2.Document: void writeValue(java.lang.Object,com.sun.xml.txw2.NamespaceResolver,java.lang.StringBuilder)>(r1, r0, $r13);

        return;
    }

    public com.sun.xml.txw2.NamespaceDecl addNamespaceDecl(java.lang.String, java.lang.String, boolean)
    {
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.sun.xml.txw2.StartTag r0;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r19, $r20;
        com.sun.xml.txw2.Document $r3;
        java.lang.AssertionError $r7, $r9;
        int $i0, $i2;
        java.lang.String r1, $r10, $r11, $r12, $r18, $r21, $r22, $r23, r27;
        char $c1;
        java.lang.IllegalArgumentException $r13, $r24, $r25, $r26;
        com.sun.xml.txw2.NamespaceDecl $r2, $r4, $r5, $r6, $r8, r28;

        r0 := @this: com.sun.xml.txw2.StartTag;

        r1 := @parameter0: java.lang.String;

        r27 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.sun.xml.txw2.StartTag: void checkWritable()>();

        if r1 != null goto label01;

        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r26;

     label01:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label04;

        if z0 == 0 goto label02;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The empty namespace cannot have a non-empty prefix");

        throw $r25;

     label02:
        if r27 == null goto label03;

        $i2 = virtualinvoke r27.<java.lang.String: int length()>();

        if $i2 <= 0 goto label03;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The empty namespace can be only bound to the empty prefix");

        throw $r24;

     label03:
        r27 = "";

     label04:
        r28 = r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.NamespaceDecl firstNs>;

     label05:
        if r28 == null goto label10;

        $r10 = r28.<com.sun.xml.txw2.NamespaceDecl: java.lang.String uri>;

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z3 == 0 goto label08;

        if r27 != null goto label06;

        $z10 = r28.<com.sun.xml.txw2.NamespaceDecl: boolean requirePrefix>;

        $z11 = $z10 | z0;

        r28.<com.sun.xml.txw2.NamespaceDecl: boolean requirePrefix> = $z11;

        return r28;

     label06:
        $r22 = r28.<com.sun.xml.txw2.NamespaceDecl: java.lang.String prefix>;

        if $r22 != null goto label07;

        r28.<com.sun.xml.txw2.NamespaceDecl: java.lang.String prefix> = r27;

        $z8 = r28.<com.sun.xml.txw2.NamespaceDecl: boolean requirePrefix>;

        $z9 = $z8 | z0;

        r28.<com.sun.xml.txw2.NamespaceDecl: boolean requirePrefix> = $z9;

        return r28;

     label07:
        $r23 = r28.<com.sun.xml.txw2.NamespaceDecl: java.lang.String prefix>;

        $z5 = virtualinvoke r27.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z5 == 0 goto label08;

        $z6 = r28.<com.sun.xml.txw2.NamespaceDecl: boolean requirePrefix>;

        $z7 = $z6 | z0;

        r28.<com.sun.xml.txw2.NamespaceDecl: boolean requirePrefix> = $z7;

        return r28;

     label08:
        if r27 == null goto label09;

        $r11 = r28.<com.sun.xml.txw2.NamespaceDecl: java.lang.String prefix>;

        if $r11 == null goto label09;

        $r12 = r28.<com.sun.xml.txw2.NamespaceDecl: java.lang.String prefix>;

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z4 == 0 goto label09;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Prefix \'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is already bound to \'");

        $r18 = r28.<com.sun.xml.txw2.NamespaceDecl: java.lang.String uri>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r13;

     label09:
        r28 = r28.<com.sun.xml.txw2.NamespaceDecl: com.sun.xml.txw2.NamespaceDecl next>;

        goto label05;

     label10:
        $r2 = new com.sun.xml.txw2.NamespaceDecl;

        $r3 = r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.Document document>;

        $c1 = virtualinvoke $r3.<com.sun.xml.txw2.Document: char assignNewId()>();

        specialinvoke $r2.<com.sun.xml.txw2.NamespaceDecl: void <init>(char,java.lang.String,java.lang.String,boolean)>($c1, r1, r27, z0);

        $r4 = r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.NamespaceDecl lastNs>;

        if $r4 != null goto label12;

        $z2 = <com.sun.xml.txw2.StartTag: boolean $assertionsDisabled>;

        if $z2 != 0 goto label11;

        $r8 = r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.NamespaceDecl firstNs>;

        if $r8 == null goto label11;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label11:
        r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.NamespaceDecl lastNs> = $r2;

        r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.NamespaceDecl firstNs> = $r2;

        goto label14;

     label12:
        $z1 = <com.sun.xml.txw2.StartTag: boolean $assertionsDisabled>;

        if $z1 != 0 goto label13;

        $r6 = r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.NamespaceDecl firstNs>;

        if $r6 != null goto label13;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label13:
        $r5 = r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.NamespaceDecl lastNs>;

        $r5.<com.sun.xml.txw2.NamespaceDecl: com.sun.xml.txw2.NamespaceDecl next> = $r2;

        r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.NamespaceDecl lastNs> = $r2;

     label14:
        return $r2;
    }

    private void checkWritable()
    {
        java.lang.IllegalStateException $r1;
        com.sun.xml.txw2.StartTag r0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7;
        java.lang.String $r4, $r8;
        boolean $z0;

        r0 := @this: com.sun.xml.txw2.StartTag;

        $z0 = virtualinvoke r0.<com.sun.xml.txw2.StartTag: boolean isWritten()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The start tag of ");

        $r4 = r0.<com.sun.xml.txw2.StartTag: java.lang.String localName>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has already been written. ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("If you need out of order writing, see the TypedXmlWriter.block method");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r1;

     label1:
        return;
    }

    boolean isWritten()
    {
        java.lang.String $r1;
        com.sun.xml.txw2.StartTag r0;
        boolean $z0;

        r0 := @this: com.sun.xml.txw2.StartTag;

        $r1 = r0.<com.sun.xml.txw2.StartTag: java.lang.String uri>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean isReadyToCommit()
    {
        com.sun.xml.txw2.Content r3;
        com.sun.xml.txw2.ContainerElement $r1, $r2;
        com.sun.xml.txw2.StartTag r0;
        boolean $z0, $z1;

        r0 := @this: com.sun.xml.txw2.StartTag;

        $r1 = r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.ContainerElement owner>;

        if $r1 == null goto label1;

        $r2 = r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.ContainerElement owner>;

        $z1 = virtualinvoke $r2.<com.sun.xml.txw2.ContainerElement: boolean isBlocked()>();

        if $z1 == 0 goto label1;

        return 0;

     label1:
        r3 = virtualinvoke r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.Content getNext()>();

     label2:
        if r3 == null goto label4;

        $z0 = virtualinvoke r3.<com.sun.xml.txw2.Content: boolean concludesPendingStartTag()>();

        if $z0 == 0 goto label3;

        return 1;

     label3:
        r3 = virtualinvoke r3.<com.sun.xml.txw2.Content: com.sun.xml.txw2.Content getNext()>();

        goto label2;

     label4:
        return 0;
    }

    public void written()
    {
        java.lang.AssertionError $r5;
        com.sun.xml.txw2.ContainerElement $r1, $r2, $r3;
        com.sun.xml.txw2.StartTag r0, $r4;
        boolean $z0;

        r0 := @this: com.sun.xml.txw2.StartTag;

        r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.Attribute lastAtt> = null;

        r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.Attribute firstAtt> = null;

        r0.<com.sun.xml.txw2.StartTag: java.lang.String uri> = null;

        $r1 = r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.ContainerElement owner>;

        if $r1 == null goto label2;

        $z0 = <com.sun.xml.txw2.StartTag: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.ContainerElement owner>;

        $r4 = $r3.<com.sun.xml.txw2.ContainerElement: com.sun.xml.txw2.StartTag startTag>;

        if $r4 == r0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r2 = r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.ContainerElement owner>;

        $r2.<com.sun.xml.txw2.ContainerElement: com.sun.xml.txw2.StartTag startTag> = null;

     label2:
        return;
    }

    boolean concludesPendingStartTag()
    {
        com.sun.xml.txw2.StartTag r0;

        r0 := @this: com.sun.xml.txw2.StartTag;

        return 1;
    }

    void accept(com.sun.xml.txw2.ContentVisitor)
    {
        com.sun.xml.txw2.NamespaceDecl $r2;
        com.sun.xml.txw2.Attribute $r3;
        com.sun.xml.txw2.ContentVisitor r0;
        java.lang.String $r4, $r5;
        com.sun.xml.txw2.StartTag r1;

        r1 := @this: com.sun.xml.txw2.StartTag;

        r0 := @parameter0: com.sun.xml.txw2.ContentVisitor;

        $r5 = r1.<com.sun.xml.txw2.StartTag: java.lang.String uri>;

        $r4 = r1.<com.sun.xml.txw2.StartTag: java.lang.String localName>;

        $r3 = r1.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.Attribute firstAtt>;

        $r2 = r1.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.NamespaceDecl firstNs>;

        interfaceinvoke r0.<com.sun.xml.txw2.ContentVisitor: void onStartTag(java.lang.String,java.lang.String,com.sun.xml.txw2.Attribute,com.sun.xml.txw2.NamespaceDecl)>($r5, $r4, $r3, $r2);

        return;
    }

    public java.lang.String getPrefix(java.lang.String)
    {
        com.sun.xml.txw2.NamespaceDecl $r2;
        java.lang.String r1, $r3, $r4, $r5;
        com.sun.xml.txw2.StartTag r0;

        r0 := @this: com.sun.xml.txw2.StartTag;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.sun.xml.txw2.StartTag: com.sun.xml.txw2.NamespaceDecl addNamespaceDecl(java.lang.String,java.lang.String,boolean)>(r1, null, 0);

        $r3 = $r2.<com.sun.xml.txw2.NamespaceDecl: java.lang.String prefix>;

        if $r3 == null goto label1;

        $r5 = $r2.<com.sun.xml.txw2.NamespaceDecl: java.lang.String prefix>;

        return $r5;

     label1:
        $r4 = $r2.<com.sun.xml.txw2.NamespaceDecl: java.lang.String dummyPrefix>;

        return $r4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/sun/xml/txw2/StartTag;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.txw2.StartTag: boolean $assertionsDisabled> = $z1;

        return;
    }
}
