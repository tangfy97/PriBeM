class com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphDft extends com.hp.hpl.jena.graph.impl.GraphBase
{
    final com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem this$0;

    void <init>(com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphDft r0;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphDft;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        r0.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphDft: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem this$0> = r1;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void <init>()>();

        return;
    }

    public void performAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet $r2;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphDft r0;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem $r1;
        com.hp.hpl.jena.graph.Triple r3;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphDft;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphDft: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem this$0>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet access$000(com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem)>($r1);

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet: void add(java.lang.Object)>(r3);

        return;
    }

    public void performDelete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet $r2;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphDft r0;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem $r1;
        com.hp.hpl.jena.graph.Triple r3;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphDft;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphDft: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem this$0>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet access$000(com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem)>($r1);

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet: void remove(java.lang.Object)>(r3);

        return;
    }

    protected com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.TripleMatch)
    {
        java.util.Iterator $r4, $r5;
        com.hp.hpl.jena.graph.Node $r10, $r11, $r12;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.graph.Triple r8;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet $r3;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphDft r1;
        java.lang.Object $r7;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem $r2;
        com.hp.hpl.jena.graph.TripleMatch r9;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphDft;

        r9 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphDft: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem this$0>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet access$000(com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem)>($r2);

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Triple) $r7;

        $r10 = interfaceinvoke r9.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchSubject()>();

        $r11 = interfaceinvoke r9.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchPredicate()>();

        $r12 = interfaceinvoke r9.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchObject()>();

        $z1 = virtualinvoke r8.<com.hp.hpl.jena.graph.Triple: boolean matches(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r10, $r11, $r12);

        if $z1 == 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r8);

     label2:
        goto label1;

     label3:
        $r5 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        $r6 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r5);

        return $r6;
    }
}
