public class org.apache.lucene.util.SentinelIntSet extends java.lang.Object
{
    public int[] keys;
    public int count;
    public final int emptyVal;
    public int rehashCount;
    static final boolean $assertionsDisabled;

    public void <init>(int, int)
    {
        int[] $r1;
        org.apache.lucene.util.SentinelIntSet r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;

        r0 := @this: org.apache.lucene.util.SentinelIntSet;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.SentinelIntSet: int emptyVal> = i0;

        $i2 = staticinvoke <org.apache.lucene.util.BitUtil: int nextHighestPowerOfTwo(int)>(i1);

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, 1);

        i9 = $i3;

        $i4 = $i3 >> 2;

        $i5 = $i3 - $i4;

        r0.<org.apache.lucene.util.SentinelIntSet: int rehashCount> = $i5;

        $i6 = r0.<org.apache.lucene.util.SentinelIntSet: int rehashCount>;

        if i1 < $i6 goto label1;

        i9 = $i3 << 1;

        $i7 = i9 >> 2;

        $i8 = i9 - $i7;

        r0.<org.apache.lucene.util.SentinelIntSet: int rehashCount> = $i8;

     label1:
        $r1 = newarray (int)[i9];

        r0.<org.apache.lucene.util.SentinelIntSet: int[] keys> = $r1;

        if i0 == 0 goto label2;

        virtualinvoke r0.<org.apache.lucene.util.SentinelIntSet: void clear()>();

     label2:
        return;
    }

    public void clear()
    {
        int $i0;
        int[] $r1;
        org.apache.lucene.util.SentinelIntSet r0;

        r0 := @this: org.apache.lucene.util.SentinelIntSet;

        $r1 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $i0 = r0.<org.apache.lucene.util.SentinelIntSet: int emptyVal>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r1, $i0);

        r0.<org.apache.lucene.util.SentinelIntSet: int count> = 0;

        return;
    }

    public int hash(int)
    {
        int i0;
        org.apache.lucene.util.SentinelIntSet r0;

        r0 := @this: org.apache.lucene.util.SentinelIntSet;

        i0 := @parameter0: int;

        return i0;
    }

    public int size()
    {
        int $i0;
        org.apache.lucene.util.SentinelIntSet r0;

        r0 := @this: org.apache.lucene.util.SentinelIntSet;

        $i0 = r0.<org.apache.lucene.util.SentinelIntSet: int count>;

        return $i0;
    }

    public int getSlot(int)
    {
        java.lang.AssertionError $r7;
        int[] $r1, $r2, $r3, $r4, $r5, $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18;
        boolean $z0;
        org.apache.lucene.util.SentinelIntSet r0;

        r0 := @this: org.apache.lucene.util.SentinelIntSet;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.SentinelIntSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i16 = r0.<org.apache.lucene.util.SentinelIntSet: int emptyVal>;

        if i0 != $i16 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $i1 = virtualinvoke r0.<org.apache.lucene.util.SentinelIntSet: int hash(int)>(i0);

        $r1 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $i2 = lengthof $r1;

        $i3 = $i2 - 1;

        $i17 = $i1 & $i3;

        i18 = $i17;

        $r2 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $i4 = $r2[$i17];

        if $i4 == i0 goto label2;

        $r3 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $i6 = $r3[$i17];

        $i5 = r0.<org.apache.lucene.util.SentinelIntSet: int emptyVal>;

        if $i6 != $i5 goto label3;

     label2:
        return $i17;

     label3:
        $i7 = $i1 >> 7;

        i8 = $i7 | 1;

     label4:
        $i11 = i18 + i8;

        $r4 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $i9 = lengthof $r4;

        $i10 = $i9 - 1;

        $i15 = $i11 & $i10;

        i18 = $i15;

        $r5 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $i12 = $r5[$i15];

        if $i12 == i0 goto label5;

        $r6 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $i14 = $r6[$i15];

        $i13 = r0.<org.apache.lucene.util.SentinelIntSet: int emptyVal>;

        if $i14 != $i13 goto label4;

     label5:
        return $i15;
    }

    public int find(int)
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0;
        java.lang.AssertionError $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22;
        org.apache.lucene.util.SentinelIntSet r0;

        r0 := @this: org.apache.lucene.util.SentinelIntSet;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.SentinelIntSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i20 = r0.<org.apache.lucene.util.SentinelIntSet: int emptyVal>;

        if i0 != $i20 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $i1 = virtualinvoke r0.<org.apache.lucene.util.SentinelIntSet: int hash(int)>(i0);

        $r1 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $i2 = lengthof $r1;

        $i3 = $i2 - 1;

        $i21 = $i1 & $i3;

        i22 = $i21;

        $r2 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $i4 = $r2[$i21];

        if $i4 != i0 goto label2;

        return $i21;

     label2:
        $r3 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $i6 = $r3[$i21];

        $i5 = r0.<org.apache.lucene.util.SentinelIntSet: int emptyVal>;

        if $i6 != $i5 goto label3;

        $i18 = neg $i21;

        $i19 = $i18 - 1;

        return $i19;

     label3:
        $i7 = $i1 >> 7;

        i8 = $i7 | 1;

     label4:
        $i11 = i22 + i8;

        $r4 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $i9 = lengthof $r4;

        $i10 = $i9 - 1;

        $i15 = $i11 & $i10;

        i22 = $i15;

        $r5 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $i12 = $r5[$i15];

        if $i12 != i0 goto label5;

        return $i15;

     label5:
        $r6 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $i14 = $r6[$i15];

        $i13 = r0.<org.apache.lucene.util.SentinelIntSet: int emptyVal>;

        if $i14 != $i13 goto label4;

        $i16 = neg $i15;

        $i17 = $i16 - 1;

        return $i17;
    }

    public boolean exists(int)
    {
        org.apache.lucene.util.SentinelIntSet r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.SentinelIntSet;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.lucene.util.SentinelIntSet: int find(int)>(i0);

        if $i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int put(int)
    {
        int[] $r1;
        org.apache.lucene.util.SentinelIntSet r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;

        r0 := @this: org.apache.lucene.util.SentinelIntSet;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.lucene.util.SentinelIntSet: int find(int)>(i0);

        i7 = $i1;

        if $i1 >= 0 goto label3;

        $i2 = r0.<org.apache.lucene.util.SentinelIntSet: int count>;

        $i3 = $i2 + 1;

        r0.<org.apache.lucene.util.SentinelIntSet: int count> = $i3;

        $i5 = r0.<org.apache.lucene.util.SentinelIntSet: int count>;

        $i4 = r0.<org.apache.lucene.util.SentinelIntSet: int rehashCount>;

        if $i5 < $i4 goto label1;

        virtualinvoke r0.<org.apache.lucene.util.SentinelIntSet: void rehash()>();

        i7 = virtualinvoke r0.<org.apache.lucene.util.SentinelIntSet: int getSlot(int)>(i0);

        goto label2;

     label1:
        $i6 = neg $i1;

        i7 = $i6 - 1;

     label2:
        $r1 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $r1[i7] = i0;

     label3:
        return i7;
    }

    public void rehash()
    {
        int[] $r1, r2, $r3, $r4, $r5;
        int $i0, i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, i10;
        org.apache.lucene.util.SentinelIntSet r0;

        r0 := @this: org.apache.lucene.util.SentinelIntSet;

        $r1 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $i0 = lengthof $r1;

        i1 = $i0 << 1;

        r2 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $r3 = newarray (int)[i1];

        r0.<org.apache.lucene.util.SentinelIntSet: int[] keys> = $r3;

        $i2 = r0.<org.apache.lucene.util.SentinelIntSet: int emptyVal>;

        if $i2 == 0 goto label1;

        $r5 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $i8 = r0.<org.apache.lucene.util.SentinelIntSet: int emptyVal>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r5, $i8);

     label1:
        $i9 = lengthof r2;

        i10 = 0;

     label2:
        if i10 >= $i9 goto label5;

        i5 = r2[i10];

        $i6 = r0.<org.apache.lucene.util.SentinelIntSet: int emptyVal>;

        if i5 != $i6 goto label3;

        goto label4;

     label3:
        $i7 = virtualinvoke r0.<org.apache.lucene.util.SentinelIntSet: int getSlot(int)>(i5);

        $r4 = r0.<org.apache.lucene.util.SentinelIntSet: int[] keys>;

        $r4[$i7] = i5;

     label4:
        i10 = i10 + 1;

        goto label2;

     label5:
        $i3 = i1 >> 2;

        $i4 = i1 - $i3;

        r0.<org.apache.lucene.util.SentinelIntSet: int rehashCount> = $i4;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/SentinelIntSet;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.SentinelIntSet: boolean $assertionsDisabled> = $z1;

        return;
    }
}
