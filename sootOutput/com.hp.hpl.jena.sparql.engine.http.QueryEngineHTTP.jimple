public class com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP extends java.lang.Object implements com.hp.hpl.jena.query.QueryExecution
{
    private static org.slf4j.Logger log;
    public static final java.lang.String QUERY_MIME_TYPE;
    private final com.hp.hpl.jena.query.Query query;
    private final java.lang.String queryString;
    private final java.lang.String service;
    private final com.hp.hpl.jena.sparql.util.Context context;
    com.hp.hpl.jena.sparql.engine.http.Params params;
    java.util.List defaultGraphURIs;
    java.util.List namedGraphURIs;
    private org.apache.jena.atlas.web.auth.HttpAuthenticator authenticator;
    private boolean finished;
    private long connectTimeout;
    private java.util.concurrent.TimeUnit connectTimeoutUnit;
    private long readTimeout;
    private java.util.concurrent.TimeUnit readTimeoutUnit;
    private boolean allowGZip;
    private boolean allowDeflate;
    private java.lang.String selectContentType;
    private java.lang.String askContentType;
    private java.lang.String modelContentType;
    public static java.lang.String[] supportedSelectContentTypes;
    public static java.lang.String[] supportedAskContentTypes;
    private java.io.InputStream retainedConnection;
    private org.apache.http.client.HttpClient retainedClient;

    public void <init>(java.lang.String, com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r2;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        java.lang.String r1, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.query.Query;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.query.Query: java.lang.String toString()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: void <init>(java.lang.String,com.hp.hpl.jena.query.Query,java.lang.String)>(r1, r2, $r3);

        return;
    }

    public void <init>(java.lang.String, com.hp.hpl.jena.query.Query, org.apache.jena.atlas.web.auth.HttpAuthenticator)
    {
        com.hp.hpl.jena.query.Query r2;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        org.apache.jena.atlas.web.auth.HttpAuthenticator r4;
        java.lang.String r1, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.query.Query;

        r4 := @parameter2: org.apache.jena.atlas.web.auth.HttpAuthenticator;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.query.Query: java.lang.String toString()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: void <init>(java.lang.String,com.hp.hpl.jena.query.Query,java.lang.String,org.apache.jena.atlas.web.auth.HttpAuthenticator)>(r1, r2, $r3, r4);

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        java.lang.String r1, r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: void <init>(java.lang.String,com.hp.hpl.jena.query.Query,java.lang.String)>(r1, null, r2);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, org.apache.jena.atlas.web.auth.HttpAuthenticator)
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        org.apache.jena.atlas.web.auth.HttpAuthenticator r3;
        java.lang.String r1, r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.jena.atlas.web.auth.HttpAuthenticator;

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: void <init>(java.lang.String,com.hp.hpl.jena.query.Query,java.lang.String,org.apache.jena.atlas.web.auth.HttpAuthenticator)>(r1, null, r2, r3);

        return;
    }

    private void <init>(java.lang.String, com.hp.hpl.jena.query.Query, java.lang.String)
    {
        com.hp.hpl.jena.query.Query r2;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        java.lang.String r1, r3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.query.Query;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: void <init>(java.lang.String,com.hp.hpl.jena.query.Query,java.lang.String,org.apache.jena.atlas.web.auth.HttpAuthenticator)>(r1, r2, r3, null);

        return;
    }

    private void <init>(java.lang.String, com.hp.hpl.jena.query.Query, java.lang.String, org.apache.jena.atlas.web.auth.HttpAuthenticator)
    {
        com.hp.hpl.jena.query.Query r5;
        org.apache.jena.atlas.web.auth.HttpAuthenticator r10;
        com.hp.hpl.jena.sparql.util.Context $r8, $r9;
        java.util.ArrayList $r1, $r2;
        java.util.concurrent.TimeUnit $r3, $r4;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        java.lang.String r6, r7;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r7 := @parameter0: java.lang.String;

        r5 := @parameter1: com.hp.hpl.jena.query.Query;

        r6 := @parameter2: java.lang.String;

        r10 := @parameter3: org.apache.jena.atlas.web.auth.HttpAuthenticator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.sparql.engine.http.Params params> = null;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.List defaultGraphURIs> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.List namedGraphURIs> = $r2;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: boolean finished> = 0;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: long connectTimeout> = -1L;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.concurrent.TimeUnit connectTimeoutUnit> = $r3;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: long readTimeout> = -1L;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.concurrent.TimeUnit readTimeoutUnit> = $r4;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: boolean allowGZip> = 1;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: boolean allowDeflate> = 1;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String selectContentType> = "application/sparql-results+xml";

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String askContentType> = "application/sparql-results+xml";

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String modelContentType> = "application/rdf+xml";

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.io.InputStream retainedConnection> = null;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.query.Query query> = r5;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String queryString> = r6;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String service> = r7;

        $r8 = new com.hp.hpl.jena.sparql.util.Context;

        $r9 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        specialinvoke $r8.<com.hp.hpl.jena.sparql.util.Context: void <init>(com.hp.hpl.jena.sparql.util.Context)>($r9);

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.sparql.util.Context context> = $r8;

        staticinvoke <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: void applyServiceConfig(java.lang.String,com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP)>(r7, r0);

        if r10 == null goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: void setAuthenticator(org.apache.jena.atlas.web.auth.HttpAuthenticator)>(r10);

     label1:
        return;
    }

    private static void applyServiceConfig(java.lang.String, com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP)
    {
        java.util.Map r5;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        java.lang.String r6, $r13, $r15, $r20, r21, $r22, r23;
        com.hp.hpl.jena.sparql.util.Symbol $r2, $r10, $r11, $r12, $r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.slf4j.Logger $r9, $r16, $r18, $r19;
        com.hp.hpl.jena.sparql.util.Context $r1, $r3, r8;
        char[] $r17;
        java.lang.Object $r4, $r7;

        r6 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.sparql.util.Context context>;

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.sparql.util.Context context>;

        $r2 = <com.hp.hpl.jena.sparql.engine.http.Service: com.hp.hpl.jena.sparql.util.Symbol serviceContext>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.util.Context: java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol)>($r2);

        r5 = (java.util.Map) $r4;

        if r5 == null goto label9;

        $z0 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r6);

        if $z0 == 0 goto label9;

        $r7 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r8 = (com.hp.hpl.jena.sparql.util.Context) $r7;

        $r9 = <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r9.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label2;

        $r19 = <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.slf4j.Logger log>;

        interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Endpoint URI {} has SERVICE Context: {} ", r6, r8);

     label2:
        $r10 = <com.hp.hpl.jena.sparql.engine.http.Service: com.hp.hpl.jena.sparql.util.Symbol queryGzip>;

        $z2 = virtualinvoke r8.<com.hp.hpl.jena.sparql.util.Context: boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>($r10);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: void setAllowGZip(boolean)>($z2);

        $r11 = <com.hp.hpl.jena.sparql.engine.http.Service: com.hp.hpl.jena.sparql.util.Symbol queryDeflate>;

        $z3 = virtualinvoke r8.<com.hp.hpl.jena.sparql.util.Context: boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>($r11);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: void setAllowDeflate(boolean)>($z3);

        staticinvoke <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: void applyServiceTimeouts(com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP,com.hp.hpl.jena.sparql.util.Context)>(r0, r8);

        $r12 = <com.hp.hpl.jena.sparql.engine.http.Service: com.hp.hpl.jena.sparql.util.Symbol queryAuthUser>;

        $r13 = virtualinvoke r8.<com.hp.hpl.jena.sparql.util.Context: java.lang.String getAsString(com.hp.hpl.jena.sparql.util.Symbol)>($r12);

        $r14 = <com.hp.hpl.jena.sparql.engine.http.Service: com.hp.hpl.jena.sparql.util.Symbol queryAuthPwd>;

        $r15 = virtualinvoke r8.<com.hp.hpl.jena.sparql.util.Context: java.lang.String getAsString(com.hp.hpl.jena.sparql.util.Symbol)>($r14);

        if $r13 != null goto label3;

        if $r15 == null goto label9;

     label3:
        if $r13 != null goto label4;

        $r20 = "";

        goto label5;

     label4:
        $r20 = $r13;

     label5:
        r21 = $r20;

        if $r15 != null goto label6;

        $r22 = "";

        goto label7;

     label6:
        $r22 = $r15;

     label7:
        r23 = $r22;

        $r16 = <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.slf4j.Logger log>;

        $z4 = interfaceinvoke $r16.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z4 == 0 goto label8;

        $r18 = <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.slf4j.Logger log>;

        interfaceinvoke $r18.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Setting basic HTTP authentication for endpoint URI {} with username: {} ", r6, r21);

     label8:
        $r17 = virtualinvoke r23.<java.lang.String: char[] toCharArray()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: void setBasicAuthentication(java.lang.String,char[])>(r21, $r17);

     label9:
        return;
    }

    private static void applyServiceTimeouts(com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP, com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r10;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.sparql.util.Context r0;
        java.lang.StringBuilder $r5, $r6, $r7, $r17, $r18, $r19;
        long $l1, $l4, $l5, $l7;
        java.lang.String[] $r11;
        com.hp.hpl.jena.query.QueryExecException $r4, $r16;
        int $i0, $i2, $i3, $i6;
        java.lang.String $r8, $r9, $r12, $r13, $r20;
        java.lang.Number $r14;
        com.hp.hpl.jena.sparql.util.Symbol $r1, $r2;
        java.lang.NumberFormatException $r15;
        java.lang.Object $r3;

        r10 := @parameter0: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r0 := @parameter1: com.hp.hpl.jena.sparql.util.Context;

        $r1 = <com.hp.hpl.jena.sparql.engine.http.Service: com.hp.hpl.jena.sparql.util.Symbol queryTimeout>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: boolean isDefined(com.hp.hpl.jena.sparql.util.Symbol)>($r1);

        if $z0 == 0 goto label7;

        $r2 = <com.hp.hpl.jena.sparql.engine.http.Service: com.hp.hpl.jena.sparql.util.Symbol queryTimeout>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol)>($r2);

        $z1 = $r3 instanceof java.lang.Number;

        if $z1 == 0 goto label1;

        $r14 = (java.lang.Number) $r3;

        $i6 = virtualinvoke $r14.<java.lang.Number: int intValue()>();

        $l7 = (long) $i6;

        virtualinvoke r10.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: void setTimeout(long,long)>(-1L, $l7);

        goto label7;

     label1:
        $z2 = $r3 instanceof java.lang.String;

        if $z2 == 0 goto label6;

     label2:
        $r9 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $z3 = virtualinvoke $r9.<java.lang.String: boolean contains(java.lang.CharSequence)>(",");

        if $z3 == 0 goto label3;

        $r11 = virtualinvoke $r9.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r12 = $r11[0];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12);

        $r13 = $r11[1];

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13);

        $l5 = (long) $i3;

        $l4 = (long) $i2;

        virtualinvoke r10.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: void setTimeout(long,long)>($l5, $l4);

        goto label4;

     label3:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        $l1 = (long) $i0;

        virtualinvoke r10.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: void setTimeout(long,long)>(-1L, $l1);

     label4:
        goto label7;

     label5:
        $r15 := @caughtexception;

        $r16 = new com.hp.hpl.jena.query.QueryExecException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t interpret string for timeout: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<com.hp.hpl.jena.query.QueryExecException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label6:
        $r4 = new com.hp.hpl.jena.query.QueryExecException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t interpret timeout: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.jena.query.QueryExecException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label7:
        return;

        catch java.lang.NumberFormatException from label2 to label4 with label5;
    }

    public void setFileManager(com.hp.hpl.jena.util.FileManager)
    {
        com.hp.hpl.jena.util.FileManager r2;
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r1;

        r1 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r2 := @parameter0: com.hp.hpl.jena.util.FileManager;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("FileManagers do not apply to remote query execution");

        throw $r0;
    }

    public void setInitialBinding(com.hp.hpl.jena.query.QuerySolution)
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r1;
        com.hp.hpl.jena.query.QuerySolution r2;

        r1 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r2 := @parameter0: com.hp.hpl.jena.query.QuerySolution;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Initial bindings not supported for remote queries, consider using a ParameterizedSparqlString to prepare a query for remote execution");

        throw $r0;
    }

    public void setInitialBindings(com.hp.hpl.jena.query.ResultSet)
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r1;
        com.hp.hpl.jena.query.ResultSet r2;

        r1 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r2 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Initial bindings not supported for remote queries, consider using a ParameterizedSparqlString to prepare a query for remote execution");

        throw $r0;
    }

    public void setDefaultGraphURIs(java.util.List)
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        java.util.List r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r1 := @parameter0: java.util.List;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.List defaultGraphURIs> = r1;

        return;
    }

    public void setNamedGraphURIs(java.util.List)
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        java.util.List r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r1 := @parameter0: java.util.List;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.List namedGraphURIs> = r1;

        return;
    }

    public void setAllowGZip(boolean)
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: boolean allowGZip> = z0;

        return;
    }

    public void setAllowDeflate(boolean)
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: boolean allowDeflate> = z0;

        return;
    }

    public void addParam(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        com.hp.hpl.jena.sparql.engine.http.Params $r1, $r4, $r5;
        java.lang.String r2, r3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.sparql.engine.http.Params params>;

        if $r1 != null goto label1;

        $r5 = new com.hp.hpl.jena.sparql.engine.http.Params;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.engine.http.Params: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.sparql.engine.http.Params params> = $r5;

     label1:
        $r4 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.sparql.engine.http.Params params>;

        virtualinvoke $r4.<com.hp.hpl.jena.sparql.engine.http.Params: void addParam(java.lang.String,java.lang.String)>(r2, r3);

        return;
    }

    public void addDefaultGraph(java.lang.String)
    {
        java.util.List $r1, $r3;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        java.lang.String r2;
        java.util.ArrayList $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.List defaultGraphURIs>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.List defaultGraphURIs> = $r4;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.List defaultGraphURIs>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void addNamedGraph(java.lang.String)
    {
        java.util.List $r1, $r3;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        java.lang.String r2;
        java.util.ArrayList $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.List namedGraphURIs>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.List namedGraphURIs> = $r4;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.List namedGraphURIs>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public boolean isUsingBasicAuthentication()
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        org.apache.jena.atlas.web.auth.HttpAuthenticator $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.apache.jena.atlas.web.auth.HttpAuthenticator authenticator>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setBasicAuthentication(java.lang.String, char[])
    {
        org.apache.jena.atlas.web.auth.SimpleAuthenticator $r1;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        char[] r3;
        java.lang.String r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: char[];

        $r1 = new org.apache.jena.atlas.web.auth.SimpleAuthenticator;

        specialinvoke $r1.<org.apache.jena.atlas.web.auth.SimpleAuthenticator: void <init>(java.lang.String,char[])>(r2, r3);

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.apache.jena.atlas.web.auth.HttpAuthenticator authenticator> = $r1;

        return;
    }

    public void setAuthenticator(org.apache.jena.atlas.web.auth.HttpAuthenticator)
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        org.apache.jena.atlas.web.auth.HttpAuthenticator r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r1 := @parameter0: org.apache.jena.atlas.web.auth.HttpAuthenticator;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.apache.jena.atlas.web.auth.HttpAuthenticator authenticator> = r1;

        return;
    }

    public com.hp.hpl.jena.query.ResultSet execSelect()
    {
        com.hp.hpl.jena.query.QueryException $r6;
        org.apache.http.client.HttpClient $r4;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        java.lang.String $r2, $r5, $r11, r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.sparql.engine.http.HttpQuery $r1;
        com.hp.hpl.jena.query.ResultSet $r12, $r13, $r14, $r15;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.io.InputStream $r3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.sparql.engine.http.HttpQuery makeHttpQuery()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String selectContentType>;

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: void setAccept(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: java.io.InputStream exec()>();

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.io.InputStream retainedConnection> = $r3;

        $r4 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: org.apache.http.client.HttpClient getClient()>();

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.apache.http.client.HttpClient retainedClient> = $r4;

        $r5 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: java.lang.String getContentType()>();

        r16 = $r5;

        if $r5 == null goto label1;

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z3 == 0 goto label2;

     label1:
        r16 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String selectContentType>;

     label2:
        $z4 = virtualinvoke r16.<java.lang.String: boolean equals(java.lang.Object)>("application/sparql-results+xml");

        if $z4 == 0 goto label3;

        $r15 = staticinvoke <com.hp.hpl.jena.query.ResultSetFactory: com.hp.hpl.jena.query.ResultSet fromXML(java.io.InputStream)>($r3);

        return $r15;

     label3:
        $z0 = virtualinvoke r16.<java.lang.String: boolean equals(java.lang.Object)>("application/sparql-results+json");

        if $z0 == 0 goto label4;

        $r14 = staticinvoke <com.hp.hpl.jena.query.ResultSetFactory: com.hp.hpl.jena.query.ResultSet fromJSON(java.io.InputStream)>($r3);

        return $r14;

     label4:
        $z1 = virtualinvoke r16.<java.lang.String: boolean equals(java.lang.Object)>("text/tab-separated-values");

        if $z1 == 0 goto label5;

        $r13 = staticinvoke <com.hp.hpl.jena.query.ResultSetFactory: com.hp.hpl.jena.query.ResultSet fromTSV(java.io.InputStream)>($r3);

        return $r13;

     label5:
        $z2 = virtualinvoke r16.<java.lang.String: boolean equals(java.lang.Object)>("text/csv");

        if $z2 == 0 goto label6;

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.resultset.CSVInput: com.hp.hpl.jena.query.ResultSet fromCSV(java.io.InputStream)>($r3);

        return $r12;

     label6:
        $r6 = new com.hp.hpl.jena.query.QueryException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Endpoint returned Content-Type: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which is not currently supported for SELECT queries");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String)>($r11);

        throw $r6;
    }

    public com.hp.hpl.jena.rdf.model.Model execConstruct()
    {
        com.hp.hpl.jena.rdf.model.Model $r1, $r2;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphFactory: com.hp.hpl.jena.rdf.model.Model makeJenaDefaultModel()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.rdf.model.Model execConstruct(com.hp.hpl.jena.rdf.model.Model)>($r1);

        return $r2;
    }

    public com.hp.hpl.jena.rdf.model.Model execConstruct(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r1, $r2;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.rdf.model.Model execModel(com.hp.hpl.jena.rdf.model.Model)>(r1);

        return $r2;
    }

    public java.util.Iterator execConstructTriples()
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        java.util.Iterator $r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.Iterator execTriples()>();

        return $r1;
    }

    public com.hp.hpl.jena.rdf.model.Model execDescribe()
    {
        com.hp.hpl.jena.rdf.model.Model $r1, $r2;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphFactory: com.hp.hpl.jena.rdf.model.Model makeJenaDefaultModel()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.rdf.model.Model execDescribe(com.hp.hpl.jena.rdf.model.Model)>($r1);

        return $r2;
    }

    public com.hp.hpl.jena.rdf.model.Model execDescribe(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r1, $r2;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.rdf.model.Model execModel(com.hp.hpl.jena.rdf.model.Model)>(r1);

        return $r2;
    }

    public java.util.Iterator execDescribeTriples()
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        java.util.Iterator $r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.Iterator execTriples()>();

        return $r1;
    }

    private com.hp.hpl.jena.rdf.model.Model execModel(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.query.QueryException $r6;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        java.lang.String $r2, $r4, $r11, r12;
        boolean $z0, $z1;
        org.apache.jena.riot.Lang $r13;
        com.hp.hpl.jena.sparql.engine.http.HttpQuery $r1;
        com.hp.hpl.jena.rdf.model.Model r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.io.InputStream $r3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r5 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.sparql.engine.http.HttpQuery makeHttpQuery()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String modelContentType>;

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: void setAccept(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: java.io.InputStream exec()>();

        $r4 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: java.lang.String getContentType()>();

        r12 = $r4;

        if $r4 == null goto label1;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

     label1:
        r12 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String modelContentType>;

     label2:
        $r13 = staticinvoke <org.apache.jena.riot.WebContent: org.apache.jena.riot.Lang contentTypeToLang(java.lang.String)>(r12);

        $z1 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean isTriples(org.apache.jena.riot.Lang)>($r13);

        if $z1 != 0 goto label3;

        $r6 = new com.hp.hpl.jena.query.QueryException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Endpoint returned Content Type: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which is not a valid RDF Graph syntax");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label3:
        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.rdf.model.Model,java.io.InputStream,org.apache.jena.riot.Lang)>(r5, $r3, $r13);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: void close()>();

        return r5;
    }

    private java.util.Iterator execTriples()
    {
        com.hp.hpl.jena.query.QueryException $r6;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        java.lang.String $r2, $r4, $r11, r12;
        boolean $z0, $z1;
        org.apache.jena.riot.Lang $r13;
        java.util.Iterator $r5;
        com.hp.hpl.jena.sparql.engine.http.HttpQuery $r1;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.io.InputStream $r3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.sparql.engine.http.HttpQuery makeHttpQuery()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String modelContentType>;

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: void setAccept(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: java.io.InputStream exec()>();

        $r4 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: java.lang.String getContentType()>();

        r12 = $r4;

        if $r4 == null goto label1;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

     label1:
        r12 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String modelContentType>;

     label2:
        $r13 = staticinvoke <org.apache.jena.riot.WebContent: org.apache.jena.riot.Lang contentTypeToLang(java.lang.String)>(r12);

        $z1 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean isTriples(org.apache.jena.riot.Lang)>($r13);

        if $z1 != 0 goto label3;

        $r6 = new com.hp.hpl.jena.query.QueryException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Endpoint returned Content Type: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which is not a valid RDF Graph syntax");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label3:
        $r5 = staticinvoke <org.apache.jena.riot.RiotReader: java.util.Iterator createIteratorTriples(java.io.InputStream,org.apache.jena.riot.Lang,java.lang.String)>($r3, $r13, null);

        return $r5;
    }

    public boolean execAsk()
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.Throwable $r13;
        com.hp.hpl.jena.query.QueryException $r5;
        java.lang.String $r2, $r4, $r10, r22;
        org.apache.jena.riot.Lang $r23;
        org.slf4j.Logger $r12, $r15, $r17, $r19, $r21;
        com.hp.hpl.jena.sparql.engine.http.HttpQuery $r1;
        java.io.IOException $r11, $r14, $r16, $r18, $r20;
        java.io.InputStream $r3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.sparql.engine.http.HttpQuery makeHttpQuery()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String askContentType>;

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: void setAccept(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: java.io.InputStream exec()>();

     label01:
        $r4 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: java.lang.String getContentType()>();

        r22 = $r4;

        if $r4 == null goto label02;

        $z8 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z8 == 0 goto label03;

     label02:
        r22 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String askContentType>;

     label03:
        $r23 = staticinvoke <org.apache.jena.riot.WebContent: org.apache.jena.riot.Lang contentTypeToLang(java.lang.String)>(r22);

        $z9 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean isTriples(org.apache.jena.riot.Lang)>($r23);

        if $z9 != 0 goto label08;

        $z6 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>("application/sparql-results+xml");

        if $z6 == 0 goto label08;

        $z7 = staticinvoke <com.hp.hpl.jena.sparql.resultset.XMLInput: boolean booleanFromXML(java.io.InputStream)>($r3);

     label04:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label05:
        goto label07;

     label06:
        $r20 := @caughtexception;

        $r21 = <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.slf4j.Logger log>;

        interfaceinvoke $r21.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to close connection", $r20);

     label07:
        return $z7;

     label08:
        $z0 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>("application/sparql-results+json");

        if $z0 == 0 goto label13;

        $z5 = staticinvoke <com.hp.hpl.jena.sparql.resultset.JSONInput: boolean booleanFromJSON(java.io.InputStream)>($r3);

     label09:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label10:
        goto label12;

     label11:
        $r18 := @caughtexception;

        $r19 = <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.slf4j.Logger log>;

        interfaceinvoke $r19.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to close connection", $r18);

     label12:
        return $z5;

     label13:
        $z1 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>("text/tab-separated-values");

        if $z1 == 0 goto label18;

        $z4 = staticinvoke <com.hp.hpl.jena.sparql.resultset.TSVInput: boolean booleanFromTSV(java.io.InputStream)>($r3);

     label14:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label15:
        goto label17;

     label16:
        $r16 := @caughtexception;

        $r17 = <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.slf4j.Logger log>;

        interfaceinvoke $r17.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to close connection", $r16);

     label17:
        return $z4;

     label18:
        $z2 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>("text/csv");

        if $z2 == 0 goto label23;

        $z3 = staticinvoke <com.hp.hpl.jena.sparql.resultset.CSVInput: boolean booleanFromCSV(java.io.InputStream)>($r3);

     label19:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label20:
        goto label22;

     label21:
        $r14 := @caughtexception;

        $r15 = <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.slf4j.Logger log>;

        interfaceinvoke $r15.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to close connection", $r14);

     label22:
        return $z3;

     label23:
        $r5 = new com.hp.hpl.jena.query.QueryException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Endpoint returned Content-Type: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which is not currently supported for ASK queries");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label24:
        $r13 := @caughtexception;

     label25:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label26:
        goto label28;

     label27:
        $r11 := @caughtexception;

        $r12 = <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.slf4j.Logger log>;

        interfaceinvoke $r12.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to close connection", $r11);

     label28:
        throw $r13;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.lang.Throwable from label01 to label04 with label24;
        catch java.lang.Throwable from label08 to label09 with label24;
        catch java.lang.Throwable from label13 to label14 with label24;
        catch java.lang.Throwable from label18 to label19 with label24;
        catch java.io.IOException from label25 to label26 with label27;
        catch java.lang.Throwable from label23 to label25 with label24;
    }

    public com.hp.hpl.jena.sparql.util.Context getContext()
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        com.hp.hpl.jena.sparql.util.Context $r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.sparql.util.Context context>;

        return $r1;
    }

    public com.hp.hpl.jena.query.Dataset getDataset()
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        return null;
    }

    public com.hp.hpl.jena.query.Query getQuery()
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        com.hp.hpl.jena.query.Query $r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.query.Query query>;

        return $r1;
    }

    public void setTimeout(long)
    {
        java.util.concurrent.TimeUnit $r1;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        long l0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        l0 := @parameter0: long;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: long readTimeout> = l0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.concurrent.TimeUnit readTimeoutUnit> = $r1;

        return;
    }

    public void setTimeout(long, long)
    {
        java.util.concurrent.TimeUnit $r1, $r2;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        long l0, l1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: long readTimeout> = l0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.concurrent.TimeUnit readTimeoutUnit> = $r1;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: long connectTimeout> = l1;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.concurrent.TimeUnit connectTimeoutUnit> = $r2;

        return;
    }

    public void setTimeout(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit r1;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        long l0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: long readTimeout> = l0;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.concurrent.TimeUnit readTimeoutUnit> = r1;

        return;
    }

    public void setTimeout(long, java.util.concurrent.TimeUnit, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit r1, r2;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        long l0, l1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        l1 := @parameter2: long;

        r2 := @parameter3: java.util.concurrent.TimeUnit;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: long readTimeout> = l0;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.concurrent.TimeUnit readTimeoutUnit> = r1;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: long connectTimeout> = l1;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.concurrent.TimeUnit connectTimeoutUnit> = r2;

        return;
    }

    public long getTimeout1()
    {
        java.util.concurrent.TimeUnit $r1;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        long $l0, $l1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        $l0 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: long readTimeout>;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.concurrent.TimeUnit readTimeoutUnit>;

        $l1 = staticinvoke <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: long asMillis(long,java.util.concurrent.TimeUnit)>($l0, $r1);

        return $l1;
    }

    public long getTimeout2()
    {
        java.util.concurrent.TimeUnit $r1;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        long $l0, $l1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        $l0 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: long connectTimeout>;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.concurrent.TimeUnit connectTimeoutUnit>;

        $l1 = staticinvoke <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: long asMillis(long,java.util.concurrent.TimeUnit)>($l0, $r1);

        return $l1;
    }

    public boolean getAllowGZip()
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        $z0 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: boolean allowGZip>;

        return $z0;
    }

    public boolean getAllowDeflate()
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        $z0 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: boolean allowDeflate>;

        return $z0;
    }

    private static long asMillis(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit r0;
        byte $b1;
        int $i3;
        long l0, $l2;

        l0 := @parameter0: long;

        r0 := @parameter1: java.util.concurrent.TimeUnit;

        $b1 = l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label1;

        $l2 = l0;

        goto label2;

     label1:
        $l2 = virtualinvoke r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

     label2:
        return $l2;
    }

    private com.hp.hpl.jena.sparql.engine.http.HttpQuery makeHttpQuery()
    {
        org.apache.jena.atlas.web.auth.HttpAuthenticator $r12;
        byte $b1, $b3;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        com.hp.hpl.jena.sparql.ARQException $r21;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.sparql.util.Context $r3;
        java.util.List $r7, $r9;
        com.hp.hpl.jena.sparql.engine.http.Params $r5, $r11, $r15;
        long $l0, $l2, $l4, $l5, $l7, $l8;
        int $i6, $i9, $i10, $i11;
        java.lang.String $r2, $r4, $r6, r19, r20;
        java.util.Iterator $r8, $r10;
        com.hp.hpl.jena.sparql.engine.http.HttpQuery $r22;
        java.util.concurrent.TimeUnit $r13, $r14;
        java.lang.Object $r16, $r17;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        $z0 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: boolean finished>;

        if $z0 == 0 goto label01;

        $r21 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r21.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("HTTP execution already closed");

        throw $r21;

     label01:
        $r22 = new com.hp.hpl.jena.sparql.engine.http.HttpQuery;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String service>;

        specialinvoke $r22.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: void <init>(java.lang.String)>($r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String service>;

        $r3 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.sparql.util.Context context>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.sparql.engine.http.Params getServiceParams(java.lang.String,com.hp.hpl.jena.sparql.util.Context)>($r4, $r3);

        virtualinvoke $r22.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: void merge(com.hp.hpl.jena.sparql.engine.http.Params)>($r5);

        $r6 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String queryString>;

        virtualinvoke $r22.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: void addParam(java.lang.String,java.lang.String)>("query", $r6);

        $r7 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.List defaultGraphURIs>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label03;

        $r17 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.lang.String) $r17;

        virtualinvoke $r22.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: void addParam(java.lang.String,java.lang.String)>("default-graph-uri", r19);

        goto label02;

     label03:
        $r9 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.List namedGraphURIs>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label05;

        $r16 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.String) $r16;

        virtualinvoke $r22.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: void addParam(java.lang.String,java.lang.String)>("named-graph-uri", r20);

        goto label04;

     label05:
        $r11 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.sparql.engine.http.Params params>;

        if $r11 == null goto label06;

        $r15 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.sparql.engine.http.Params params>;

        virtualinvoke $r22.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: void merge(com.hp.hpl.jena.sparql.engine.http.Params)>($r15);

     label06:
        $z3 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: boolean allowGZip>;

        if $z3 == 0 goto label07;

        virtualinvoke $r22.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: void setAllowGZip(boolean)>(1);

     label07:
        $z4 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: boolean allowDeflate>;

        if $z4 == 0 goto label08;

        virtualinvoke $r22.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: void setAllowDeflate(boolean)>(1);

     label08:
        $r12 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.apache.jena.atlas.web.auth.HttpAuthenticator authenticator>;

        virtualinvoke $r22.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: void setAuthenticator(org.apache.jena.atlas.web.auth.HttpAuthenticator)>($r12);

        $l0 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: long connectTimeout>;

        $b1 = $l0 cmp 0L;

        $i10 = (int) $b1;

        if $i10 <= 0 goto label09;

        $r14 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.concurrent.TimeUnit connectTimeoutUnit>;

        $l7 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: long connectTimeout>;

        $l8 = virtualinvoke $r14.<java.util.concurrent.TimeUnit: long toMillis(long)>($l7);

        $i9 = (int) $l8;

        virtualinvoke $r22.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: void setConnectTimeout(int)>($i9);

     label09:
        $l2 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: long readTimeout>;

        $b3 = $l2 cmp 0L;

        $i11 = (int) $b3;

        if $i11 <= 0 goto label10;

        $r13 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.util.concurrent.TimeUnit readTimeoutUnit>;

        $l4 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: long readTimeout>;

        $l5 = virtualinvoke $r13.<java.util.concurrent.TimeUnit: long toMillis(long)>($l4);

        $i6 = (int) $l5;

        virtualinvoke $r22.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: void setReadTimeout(int)>($i6);

     label10:
        return $r22;
    }

    protected static com.hp.hpl.jena.sparql.engine.http.Params getServiceParams(java.lang.String, com.hp.hpl.jena.sparql.util.Context) throws com.hp.hpl.jena.query.QueryExecException
    {
        java.util.Map r4, r7;
        com.hp.hpl.jena.query.QueryExecException $r18;
        java.lang.String r5, r11, $r12, r17;
        com.hp.hpl.jena.sparql.util.Symbol $r2;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r9, $r15;
        java.util.Set $r8;
        com.hp.hpl.jena.sparql.util.Context r1;
        java.util.List r14;
        java.lang.Object $r3, $r6, $r10, $r13, $r16;
        com.hp.hpl.jena.sparql.engine.http.Params $r0;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.sparql.util.Context;

        $r0 = new com.hp.hpl.jena.sparql.engine.http.Params;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.http.Params: void <init>()>();

        $r2 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol serviceParams>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.util.Context: java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol)>($r2);

        r4 = (java.util.Map) $r3;

        if r4 == null goto label5;

        $r6 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r7 = (java.util.Map) $r6;

        if r7 == null goto label5;

        $r8 = interfaceinvoke r7.<java.util.Map: java.util.Set keySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.String) $r10;

        $r12 = "query";

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r11);

        if $z1 == 0 goto label2;

        $r18 = new com.hp.hpl.jena.query.QueryExecException;

        specialinvoke $r18.<com.hp.hpl.jena.query.QueryExecException: void <init>(java.lang.String)>("ARQ serviceParams overrides the \'query\' SPARQL protocol parameter");

        throw $r18;

     label2:
        $r13 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r11);

        r14 = (java.util.List) $r13;

        $r15 = interfaceinvoke r14.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r16;

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.engine.http.Params: void addParam(java.lang.String,java.lang.String)>(r11, r17);

        goto label3;

     label4:
        goto label1;

     label5:
        return $r0;
    }

    public void cancel()
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: boolean finished> = 1;

        return;
    }

    public void abort()
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        org.slf4j.Logger $r2;
        java.lang.Exception $r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.slf4j.Logger log>;

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Error during abort", $r1);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void close()
    {
        java.lang.Throwable $r5, $r8;
        org.slf4j.Logger $r7, $r10;
        org.apache.http.conn.ClientConnectionManager $r3;
        java.io.IOException $r9;
        java.lang.RuntimeException $r6;
        org.apache.http.client.HttpClient $r2, $r11;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        java.io.InputStream $r1, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: boolean finished> = 1;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.io.InputStream retainedConnection>;

        if $r1 == null goto label07;

     label01:
        $r4 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.io.InputStream retainedConnection>;

        virtualinvoke $r4.<java.io.InputStream: void close()>();

     label02:
        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.io.InputStream retainedConnection> = null;

        goto label07;

     label03:
        $r9 := @caughtexception;

        $r10 = <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.slf4j.Logger log>;

        interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to close connection", $r9);

     label04:
        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.io.InputStream retainedConnection> = null;

        goto label07;

     label05:
        $r8 := @caughtexception;

     label06:
        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.io.InputStream retainedConnection> = null;

        throw $r8;

     label07:
        $r11 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.apache.http.client.HttpClient retainedClient>;

        if $r11 == null goto label14;

     label08:
        $r2 = r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.apache.http.client.HttpClient retainedClient>;

        $r3 = interfaceinvoke $r2.<org.apache.http.client.HttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        interfaceinvoke $r3.<org.apache.http.conn.ClientConnectionManager: void shutdown()>();

     label09:
        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.apache.http.client.HttpClient retainedClient> = null;

        goto label14;

     label10:
        $r6 := @caughtexception;

        $r7 = <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.slf4j.Logger log>;

        interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to shutdown HTTP client", $r6);

     label11:
        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.apache.http.client.HttpClient retainedClient> = null;

        goto label14;

     label12:
        $r5 := @caughtexception;

     label13:
        r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.apache.http.client.HttpClient retainedClient> = null;

        throw $r5;

     label14:
        return;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.RuntimeException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.sparql.engine.http.HttpQuery $r1;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r0;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: com.hp.hpl.jena.sparql.engine.http.HttpQuery makeHttpQuery()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GET ");

        $r4 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.http.HttpQuery: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public void setSelectContentType(java.lang.String)
    {
        java.lang.String[] r0;
        java.lang.IllegalArgumentException $r3;
        int i0, i1;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String r2, $r8, r9;
        boolean $z0, z1;

        r1 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r2 := @parameter0: java.lang.String;

        z1 = 0;

        r0 = <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String[] supportedSelectContentTypes>;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r9 = r0[i1];

        $z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        if z1 != 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Given Content Type \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a supported SELECT results format");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label4:
        r1.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String selectContentType> = r2;

        return;
    }

    public void setAskContentType(java.lang.String)
    {
        java.lang.String[] r0;
        java.lang.IllegalArgumentException $r3;
        int i0, i1;
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String r2, $r8, r9;
        boolean $z0, z1;

        r1 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r2 := @parameter0: java.lang.String;

        z1 = 0;

        r0 = <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String[] supportedAskContentTypes>;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r9 = r0[i1];

        $z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        if z1 != 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Given Content Type \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a supported ASK results format");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label4:
        r1.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String askContentType> = r2;

        return;
    }

    public void setModelContentType(java.lang.String)
    {
        com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP r2;
        java.lang.String r0, $r8, $r14;
        boolean $z0;
        org.apache.jena.riot.Lang $r1;
        java.lang.IllegalArgumentException $r3, $r9;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r13;

        r2 := @this: com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.jena.riot.WebContent: org.apache.jena.riot.Lang contentTypeToLang(java.lang.String)>(r0);

        if $r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Given Content Type \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported by RIOT");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label1:
        $z0 = staticinvoke <org.apache.jena.riot.RDFLanguages: boolean isTriples(org.apache.jena.riot.Lang)>($r1);

        if $z0 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Given Content Type \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a RDF Graph format");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        r2.<com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String modelContentType> = r0;

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r1, $r2;
        org.slf4j.Logger $r0;

        <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String QUERY_MIME_TYPE> = "application/sparql-query";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/sparql/engine/http/QueryEngineHTTP;");

        <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: org.slf4j.Logger log> = $r0;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "application/sparql-results+xml";

        $r1[1] = "application/sparql-results+json";

        $r1[2] = "text/tab-separated-values";

        $r1[3] = "text/csv";

        <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String[] supportedSelectContentTypes> = $r1;

        $r2 = newarray (java.lang.String)[4];

        $r2[0] = "application/sparql-results+xml";

        $r2[1] = "application/json";

        $r2[2] = "text/tab-separated-values";

        $r2[3] = "text/csv";

        <com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP: java.lang.String[] supportedAskContentTypes> = $r2;

        return;
    }
}
