final class com.hp.hpl.jena.graph.impl.LiteralLabelImpl extends java.lang.Object implements com.hp.hpl.jena.graph.impl.LiteralLabel
{
    private static org.slf4j.Logger log;
    private java.lang.String lexicalForm;
    private java.lang.Object value;
    private com.hp.hpl.jena.datatypes.RDFDatatype dtype;
    private java.lang.String lang;
    private boolean wellformed;
    private java.lang.String exceptionMsg;
    private int hash;

    void <init>(java.lang.String, java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype) throws com.hp.hpl.jena.datatypes.DatatypeFormatException
    {
        com.hp.hpl.jena.datatypes.RDFDatatype r3;
        java.lang.String r1, r2;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.hp.hpl.jena.datatypes.RDFDatatype;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean wellformed> = 1;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String exceptionMsg> = null;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: int hash> = 0;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: void setLiteralLabel_1(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r1, r2, r3);

        return;
    }

    private void setLiteralLabel_1(java.lang.String, java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype) throws com.hp.hpl.jena.datatypes.DatatypeFormatException
    {
        com.hp.hpl.jena.datatypes.RDFDatatype r2;
        java.lang.String r1, r3, $r4;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r2 := @parameter2: com.hp.hpl.jena.datatypes.RDFDatatype;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lexicalForm> = r1;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype> = r2;

        if r3 != null goto label1;

        $r4 = "";

        goto label2;

     label1:
        $r4 = r3;

     label2:
        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lang> = $r4;

        if r2 != null goto label3;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.Object value> = r1;

        goto label4;

     label3:
        specialinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: void setValue(java.lang.String)>(r1);

     label4:
        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: void normalize()>();

        return;
    }

    void <init>(java.lang.Object, java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype) throws com.hp.hpl.jena.datatypes.DatatypeFormatException
    {
        com.hp.hpl.jena.datatypes.RDFDatatype r3;
        java.lang.Object r1;
        java.lang.String r2;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.hp.hpl.jena.datatypes.RDFDatatype;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean wellformed> = 1;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String exceptionMsg> = null;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: int hash> = 0;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: void setLiteralLabel_2(java.lang.Object,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r1, r2, r3);

        return;
    }

    void <init>(java.lang.Object)
    {
        com.hp.hpl.jena.datatypes.TypeMapper $r1;
        com.hp.hpl.jena.datatypes.RDFDatatype $r3;
        java.lang.Object r2;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        r2 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean wellformed> = 1;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String exceptionMsg> = null;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: int hash> = 0;

        $r1 = staticinvoke <com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.TypeMapper getInstance()>();

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.RDFDatatype getTypeByValue(java.lang.Object)>(r2);

        if $r3 != null goto label1;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: void setWithNewDatatypeForValueClass(java.lang.Object)>(r2);

        goto label2;

     label1:
        specialinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: void setLiteralLabel_2(java.lang.Object,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r2, "", $r3);

     label2:
        return;
    }

    private void setWithNewDatatypeForValueClass(java.lang.Object)
    {
        com.hp.hpl.jena.graph.impl.AdhocDatatype $r7;
        org.slf4j.Logger $r3;
        com.hp.hpl.jena.datatypes.TypeMapper $r8;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r9;
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r6, $r10;

        r9 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = <com.hp.hpl.jena.graph.impl.LiteralLabelImpl: org.slf4j.Logger log>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inventing a datatype for ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>($r6);

        $r7 = new com.hp.hpl.jena.graph.impl.AdhocDatatype;

        specialinvoke $r7.<com.hp.hpl.jena.graph.impl.AdhocDatatype: void <init>(java.lang.Class)>($r1);

        $r8 = staticinvoke <com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.TypeMapper getInstance()>();

        virtualinvoke $r8.<com.hp.hpl.jena.datatypes.TypeMapper: void registerDatatype(com.hp.hpl.jena.datatypes.RDFDatatype)>($r7);

        r9.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lang> = "";

        r9.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype> = $r7;

        r9.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.Object value> = r0;

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        r9.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lexicalForm> = $r10;

        return;
    }

    private void setLiteralLabel_2(java.lang.Object, java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype) throws com.hp.hpl.jena.datatypes.DatatypeFormatException
    {
        com.hp.hpl.jena.datatypes.DatatypeFormatException $r6;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;
        com.hp.hpl.jena.datatypes.RDFDatatype r1, $r5;
        java.lang.Object r3, $r10;
        java.lang.String r2, $r4, $r7, r8, $r9;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        r3 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r1 := @parameter2: com.hp.hpl.jena.datatypes.RDFDatatype;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype> = r1;

        if r2 != null goto label1;

        $r9 = "";

        goto label2;

     label1:
        $r9 = r2;

     label2:
        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lang> = $r9;

        $z0 = r3 instanceof java.lang.String;

        if $z0 == 0 goto label5;

        r8 = (java.lang.String) r3;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lexicalForm> = r8;

        if r1 != null goto label3;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.Object value> = r8;

        goto label4;

     label3:
        specialinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: void setValue(java.lang.String)>(r8);

     label4:
        goto label8;

     label5:
        if r1 != null goto label6;

        $r10 = r3;

        goto label7;

     label6:
        $r10 = interfaceinvoke r1.<com.hp.hpl.jena.datatypes.RDFDatatype: java.lang.Object cannonicalise(java.lang.Object)>(r3);

     label7:
        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.Object value> = $r10;

     label8:
        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: void normalize()>();

        if r1 == null goto label9;

        $r4 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lexicalForm>;

        if $r4 != null goto label9;

        $r5 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        $z1 = interfaceinvoke $r5.<com.hp.hpl.jena.datatypes.RDFDatatype: boolean isValidValue(java.lang.Object)>(r3);

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean wellformed> = $z1;

        $z2 = <com.hp.hpl.jena.shared.impl.JenaParameters: boolean enableEagerLiteralValidation>;

        if $z2 == 0 goto label9;

        $z3 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean wellformed>;

        if $z3 != 0 goto label9;

        $r6 = new com.hp.hpl.jena.datatypes.DatatypeFormatException;

        $r7 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.datatypes.DatatypeFormatException: void <init>(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype,java.lang.String)>($r7, r1, "in literal creation");

        throw $r6;

     label9:
        return;
    }

    void <init>(java.lang.String, java.lang.String, boolean)
    {
        java.lang.String r1, r2;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean wellformed> = 1;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String exceptionMsg> = null;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: int hash> = 0;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: void setLiteralLabel_3(java.lang.String,java.lang.String,boolean)>(r1, r2, z0);

        return;
    }

    private void setLiteralLabel_3(java.lang.String, java.lang.String, boolean)
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r3;
        java.lang.String r1, r2, $r4;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lexicalForm> = r1;

        if r2 != null goto label1;

        $r4 = "";

        goto label2;

     label1:
        $r4 = r2;

     label2:
        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lang> = $r4;

        if z0 == 0 goto label3;

        $r3 = <com.hp.hpl.jena.datatypes.xsd.impl.XMLLiteralType: com.hp.hpl.jena.datatypes.RDFDatatype theXMLLiteralType>;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype> = $r3;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.Object value> = r1;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean wellformed> = 1;

        goto label4;

     label3:
        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.Object value> = r1;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype> = null;

     label4:
        return;
    }

    private void setValue(java.lang.String) throws com.hp.hpl.jena.datatypes.DatatypeFormatException
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r2;
        java.lang.Object $r3;
        java.lang.String r1, $r5;
        com.hp.hpl.jena.datatypes.DatatypeFormatException $r4;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.datatypes.RDFDatatype: java.lang.Object parse(java.lang.String)>(r1);

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.Object value> = $r3;

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean wellformed> = 1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        $z0 = <com.hp.hpl.jena.shared.impl.JenaParameters: boolean enableEagerLiteralValidation>;

        if $z0 == 0 goto label4;

        virtualinvoke $r4.<com.hp.hpl.jena.datatypes.DatatypeFormatException: java.lang.Throwable fillInStackTrace()>();

        throw $r4;

     label4:
        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean wellformed> = 0;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.datatypes.DatatypeFormatException: java.lang.String getMessage()>();

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String exceptionMsg> = $r5;

     label5:
        return;

        catch com.hp.hpl.jena.datatypes.DatatypeFormatException from label1 to label2 with label3;
    }

    protected void normalize()
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r1, $r3, $r5, $r6;
        java.lang.Object $r2, $r4;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        if $r1 == null goto label1;

        $r2 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.Object value>;

        if $r2 == null goto label1;

        $r5 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        $r4 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.Object value>;

        $r3 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.datatypes.RDFDatatype: com.hp.hpl.jena.datatypes.RDFDatatype normalizeSubType(java.lang.Object,com.hp.hpl.jena.datatypes.RDFDatatype)>($r4, $r3);

        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype> = $r6;

     label1:
        return;
    }

    public boolean isXML()
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r1, $r2;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        $r2 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.impl.XMLLiteralType: com.hp.hpl.jena.datatypes.RDFDatatype theXMLLiteralType>;

        if $r2 != $r1 goto label1;

        $z0 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean wellformed>;

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isWellFormed()
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r1;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        if $r1 == null goto label1;

        $z0 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean wellformed>;

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isWellFormedRaw()
    {
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        $z0 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean wellformed>;

        return $z0;
    }

    public java.lang.String toString(boolean)
    {
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r1;
        com.hp.hpl.jena.datatypes.RDFDatatype $r6, $r11;
        java.lang.StringBuffer $r0, $r5, $r9;
        java.lang.String $r2, $r3, $r4, $r7, $r8, $r10;
        boolean z0, $z1;

        r1 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        z0 := @parameter0: boolean;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        if z0 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String getLexicalForm()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        if z0 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

     label2:
        $r3 = r1.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lang>;

        if $r3 == null goto label3;

        $r8 = r1.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lang>;

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label3;

        $r9 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@");

        $r10 = r1.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lang>;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

     label3:
        $r11 = r1.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        if $r11 == null goto label4;

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("^^");

        $r6 = r1.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.datatypes.RDFDatatype: java.lang.String getURI()>();

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

     label4:
        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String toString(boolean)>(0);

        return $r1;
    }

    public java.lang.String getLexicalForm()
    {
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;
        com.hp.hpl.jena.datatypes.RDFDatatype $r2, $r4;
        java.lang.Object $r3, $r5;
        java.lang.String $r1, $r6, $r7;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lexicalForm>;

        if $r1 != null goto label3;

        $r2 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        if $r2 != null goto label1;

        $r5 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.Object value>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        goto label2;

     label1:
        $r4 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        $r3 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.Object value>;

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.datatypes.RDFDatatype: java.lang.String unparse(java.lang.Object)>($r3);

     label2:
        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lexicalForm> = $r6;

     label3:
        $r7 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lexicalForm>;

        return $r7;
    }

    public java.lang.Object getIndexingValue()
    {
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;
        java.util.Locale $r6;
        java.lang.StringBuilder $r2, $r4, $r5, $r9;
        java.lang.Object $r10;
        java.lang.String $r1, $r3, $r7, $r8;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean isXML()>();

        if $z0 == 0 goto label1;

        $r10 = r0;

        goto label4;

     label1:
        $r1 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lang>;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String getLexicalForm()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r7 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lang>;

        $r6 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r6);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label2:
        $z2 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean wellformed>;

        if $z2 == 0 goto label3;

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.Object getValue()>();

        goto label4;

     label3:
        $r10 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String getLexicalForm()>();

     label4:
        return $r10;
    }

    public java.lang.String language()
    {
        java.lang.String $r1;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lang>;

        return $r1;
    }

    public java.lang.Object getValue() throws com.hp.hpl.jena.datatypes.DatatypeFormatException
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r3;
        java.lang.Object $r5;
        java.lang.String $r2, $r4;
        com.hp.hpl.jena.datatypes.DatatypeFormatException $r1;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        $z0 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean wellformed>;

        if $z0 == 0 goto label1;

        $r5 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.Object value>;

        return $r5;

     label1:
        $r1 = new com.hp.hpl.jena.datatypes.DatatypeFormatException;

        $r4 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lexicalForm>;

        $r3 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        $r2 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String exceptionMsg>;

        specialinvoke $r1.<com.hp.hpl.jena.datatypes.DatatypeFormatException: void <init>(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype,java.lang.String)>($r4, $r3, $r2);

        throw $r1;
    }

    public com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r1;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        return $r1;
    }

    public java.lang.String getDatatypeURI()
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r1, $r2;
        java.lang.String $r3;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.datatypes.RDFDatatype: java.lang.String getURI()>();

        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.String $r6, $r7, $r8, $r9;
        boolean $z0, z1, $z2, $z3, $z4, $z5;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;
        com.hp.hpl.jena.datatypes.RDFDatatype $r3, $r4, $r5, $r10, $r11;
        com.hp.hpl.jena.graph.impl.LiteralLabel r2;
        java.lang.Object r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        if r1 == null goto label02;

        $z0 = r1 instanceof com.hp.hpl.jena.graph.impl.LiteralLabel;

        if $z0 != 0 goto label03;

     label02:
        return 0;

     label03:
        r2 = (com.hp.hpl.jena.graph.impl.LiteralLabel) r1;

        $r3 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        if $r3 != null goto label05;

        $r10 = interfaceinvoke r2.<com.hp.hpl.jena.graph.impl.LiteralLabel: com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()>();

        if $r10 != null goto label04;

        $z3 = 1;

        goto label06;

     label04:
        $z3 = 0;

        goto label06;

     label05:
        $r4 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        $r5 = interfaceinvoke r2.<com.hp.hpl.jena.graph.impl.LiteralLabel: com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()>();

        $z3 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

     label06:
        z1 = $z3;

        $r11 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        if $r11 != null goto label07;

        $r8 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lang>;

        $r9 = interfaceinvoke r2.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.String language()>();

        $z4 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        goto label08;

     label07:
        $z4 = 1;

     label08:
        if z1 == 0 goto label09;

        if $z4 == 0 goto label09;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String getLexicalForm()>();

        $r7 = interfaceinvoke r2.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.String getLexicalForm()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        return $z5;
    }

    public boolean sameValueAs(com.hp.hpl.jena.graph.impl.LiteralLabel)
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r2;
        com.hp.hpl.jena.graph.impl.LiteralLabel r0;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.LiteralLabel;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = r1.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean wellformed>;

        if $z0 == 0 goto label2;

        $z2 = interfaceinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabel: boolean isWellFormedRaw()>();

        if $z2 != 0 goto label3;

     label2:
        $z1 = specialinvoke r1.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean areIllFormedLiteralsSameValueAs(com.hp.hpl.jena.graph.impl.LiteralLabel)>(r0);

        return $z1;

     label3:
        $r2 = r1.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        if $r2 != null goto label4;

        $z3 = specialinvoke r1.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean isPlainLiteralSameValueAsOther(com.hp.hpl.jena.graph.impl.LiteralLabel)>(r0);

        goto label5;

     label4:
        $z3 = specialinvoke r1.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean isTypedLiteralSameValueAsOther(com.hp.hpl.jena.graph.impl.LiteralLabel)>(r0);

     label5:
        return $z3;
    }

    private boolean areIllFormedLiteralsSameValueAs(com.hp.hpl.jena.graph.impl.LiteralLabel)
    {
        com.hp.hpl.jena.graph.impl.LiteralLabel r0;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r1;

        r1 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.LiteralLabel;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabel: boolean isWellFormedRaw()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r1.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean sameByFormAndLanguage(com.hp.hpl.jena.graph.impl.LiteralLabel)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private boolean sameByFormAndLanguage(com.hp.hpl.jena.graph.impl.LiteralLabel)
    {
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;
        com.hp.hpl.jena.graph.impl.LiteralLabel r2;
        java.lang.String $r1, $r3, $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        r2 := @parameter0: com.hp.hpl.jena.graph.impl.LiteralLabel;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String getLexicalForm()>();

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.String getLexicalForm()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String lang>;

        $r5 = interfaceinvoke r2.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.String language()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private boolean isTypedLiteralSameValueAsOther(com.hp.hpl.jena.graph.impl.LiteralLabel)
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r1, $r3;
        com.hp.hpl.jena.graph.impl.LiteralLabel r0;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r2;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.LiteralLabel;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabel: com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()>();

        if $r1 != null goto label2;

        $z0 = specialinvoke r2.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean looksLikePlainString(com.hp.hpl.jena.graph.impl.LiteralLabel)>(r2);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r2.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean sameByFormAndLanguage(com.hp.hpl.jena.graph.impl.LiteralLabel)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label3;

     label1:
        $z2 = 0;

        goto label3;

     label2:
        $r3 = r2.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        $z2 = interfaceinvoke $r3.<com.hp.hpl.jena.datatypes.RDFDatatype: boolean isEqual(com.hp.hpl.jena.graph.impl.LiteralLabel,com.hp.hpl.jena.graph.impl.LiteralLabel)>(r2, r0);

     label3:
        return $z2;
    }

    private boolean isPlainLiteralSameValueAsOther(com.hp.hpl.jena.graph.impl.LiteralLabel)
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r1;
        com.hp.hpl.jena.graph.impl.LiteralLabel r0;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r2;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.LiteralLabel;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabel: com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()>();

        if $r1 == null goto label1;

        $z0 = specialinvoke r2.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean looksLikePlainString(com.hp.hpl.jena.graph.impl.LiteralLabel)>(r0);

        if $z0 == 0 goto label2;

     label1:
        $z1 = specialinvoke r2.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean sameByFormAndLanguage(com.hp.hpl.jena.graph.impl.LiteralLabel)>(r0);

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private boolean looksLikePlainString(com.hp.hpl.jena.graph.impl.LiteralLabel)
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r1;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        com.hp.hpl.jena.graph.impl.LiteralLabel r0;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r3;

        r3 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.LiteralLabel;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabel: com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()>();

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDstring>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $z1 = <com.hp.hpl.jena.shared.impl.JenaParameters: boolean enablePlainLiteralSameAsString>;

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r1, $r2;
        int $i0, $i1, $i2;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        $i0 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: int hash>;

        if $i0 != 0 goto label3;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        if $r1 != null goto label1;

        $i1 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: int getDefaultHashcode()>();

        goto label2;

     label1:
        $r2 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: com.hp.hpl.jena.datatypes.RDFDatatype dtype>;

        $i1 = interfaceinvoke $r2.<com.hp.hpl.jena.datatypes.RDFDatatype: int getHashCode(com.hp.hpl.jena.graph.impl.LiteralLabel)>(r0);

     label2:
        r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: int hash> = $i1;

     label3:
        $i2 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: int hash>;

        return $i2;
    }

    public int getDefaultHashcode()
    {
        int $i0;
        java.lang.Object $r1;
        com.hp.hpl.jena.graph.impl.LiteralLabelImpl r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.LiteralLabelImpl;

        $z0 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: boolean wellformed>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.Object value>;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabelImpl: java.lang.String getLexicalForm()>();

     label2:
        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/graph/impl/LiteralLabelImpl;");

        <com.hp.hpl.jena.graph.impl.LiteralLabelImpl: org.slf4j.Logger log> = $r0;

        return;
    }
}
