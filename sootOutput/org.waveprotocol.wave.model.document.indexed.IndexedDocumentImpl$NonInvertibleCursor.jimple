public class org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor extends java.lang.Object implements org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor
{
    private org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder;
    int sizeDiffSoFar;
    org.waveprotocol.wave.model.util.StringMap requestedValues;
    org.waveprotocol.wave.model.util.StringSet requestedKeys;
    org.waveprotocol.wave.model.util.StringMap newValues;
    org.waveprotocol.wave.model.util.StringSet endKeys;
    org.waveprotocol.wave.model.util.StringMap deletionValues;
    boolean didSomethingOtherThanDeletionSinceAnnotationBoundary;
    static final boolean $assertionsDisabled;
    final org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0;

    public void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)
    {
        org.waveprotocol.wave.model.util.StringSet $r3, $r5;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl r1;
        org.waveprotocol.wave.model.util.StringMap $r2, $r4, $r6;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        r1 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap requestedValues> = $r2;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringSet requestedKeys> = $r3;

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap newValues> = $r4;

        $r5 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringSet endKeys> = $r5;

        $r6 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap deletionValues> = $r6;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean didSomethingOtherThanDeletionSinceAnnotationBoundary> = 0;

        return;
    }

    private void begin2()
    {
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer $r5;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r1;
        org.waveprotocol.wave.model.document.operation.impl.UncheckedDocOpBuffer $r4, $r6;
        org.waveprotocol.wave.model.util.StringMap $r3;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        boolean $z0;
        org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer $r7;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void access$2100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r1);

        $r7 = new org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer;

        $z0 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: boolean performValidation>;

        if $z0 == 0 goto label1;

        $r5 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer;

        $r4 = $r5;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: void <init>()>();

        goto label2;

     label1:
        $r6 = new org.waveprotocol.wave.model.document.operation.impl.UncheckedDocOpBuffer;

        $r4 = $r6;

        specialinvoke $r6.<org.waveprotocol.wave.model.document.operation.impl.UncheckedDocOpBuffer: void <init>()>();

     label2:
        specialinvoke $r7.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void <init>(org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor)>($r4);

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder> = $r7;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: int sizeDiffSoFar> = 0;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap deletionValues>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: void clear()>();

        return;
    }

    private org.waveprotocol.wave.model.document.operation.DocOp finish2() throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r1;
        org.waveprotocol.wave.model.document.operation.DocOp $r4;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer $r2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void access$2200(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r1);

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: java.lang.Object finish()>();

        $r4 = (org.waveprotocol.wave.model.document.operation.DocOp) $r3;

        return $r4;
    }

    public void begin()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        return;
    }

    public void finish()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r1, $r2, $r3, $r4;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        int $i0, $i1, i2, $i3;
        org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer $r5;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int size()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i1 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r2);

        i2 = $i0 - $i1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void closeEndKeys()>();

        if i2 <= 0 goto label1;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        virtualinvoke $r5.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void retain(int)>(i2);

     label1:
        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i3 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int size()>();

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1002(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,int)>($r4, $i3);

        return;
    }

    public void startAnnotation(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringSet $r2, $r4, $r10, $r16;
        java.lang.AssertionError $r5;
        org.waveprotocol.wave.model.util.StringMap $r15, $r17;
        java.lang.String r1, r3, $r11, $r13;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r14;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r12;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringSet endKeys>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringSet: boolean contains(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        $z1 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        $z2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean didSomethingOtherThanDeletionSinceAnnotationBoundary>;

        if $z2 == 0 goto label1;

        $r5 = new java.lang.AssertionError;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" endKeys: ");

        $r10 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringSet endKeys>;

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13);

        throw $r5;

     label1:
        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringSet endKeys>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringSet: void remove(java.lang.String)>(r1);

     label2:
        $r14 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void access$1500(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,java.lang.String,java.lang.String)>($r14, r1, r3);

        $r15 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap requestedValues>;

        interfaceinvoke $r15.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r1, r3);

        $r16 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringSet requestedKeys>;

        interfaceinvoke $r16.<org.waveprotocol.wave.model.util.StringSet: void add(java.lang.String)>(r1);

        $r17 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap newValues>;

        interfaceinvoke $r17.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r1, r3);

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean didSomethingOtherThanDeletionSinceAnnotationBoundary> = 0;

        return;
    }

    public void endAnnotation(java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringSet $r3, $r7;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r6;
        org.waveprotocol.wave.model.util.StringMap $r2, $r4, $r5;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap requestedValues>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: void remove(java.lang.String)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringSet requestedKeys>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringSet: void remove(java.lang.String)>(r1);

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap newValues>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: void remove(java.lang.String)>(r1);

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap deletionValues>;

        $z0 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringSet endKeys>;

        interfaceinvoke $r7.<org.waveprotocol.wave.model.util.StringSet: void add(java.lang.String)>(r1);

     label1:
        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void access$1400(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,java.lang.String)>($r6, r1);

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean didSomethingOtherThanDeletionSinceAnnotationBoundary> = 0;

        return;
    }

    public void skip(int)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r1, $r2;
        int i0;
        java.lang.AssertionError $r3;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 > 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean didSomethingOtherThanDeletionSinceAnnotationBoundary> = 1;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void access$1200(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,int)>($r1, i0);

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void moveAndUpdateAnnotations(int)>(i0);

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void access$1300(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r2);

        return;
    }

    private void moveAndUpdateAnnotations(int)
    {
        org.waveprotocol.wave.model.util.StringSet $r14, $r17;
        org.waveprotocol.wave.model.util.StringMap $r4, $r29, $r42;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r2;
        org.waveprotocol.wave.model.util.ReadableStringMap $r40;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer $r9, $r27, $r33, $r36;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r1, $r3, $r5, $r6, $r8, $r10, $r13, $r15, $r16, $r21, $r24, $r35, $r37, $r39;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$2 $r20;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent r44;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1 $r41;
        org.waveprotocol.wave.model.util.Box $r12;
        java.lang.AssertionError $r7;
        java.lang.Iterable $r18;
        java.util.ArrayList $r11;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13;
        java.lang.String $r25, $r26, $r28, $r31, $r32, $r34;
        java.util.Iterator $r19, $r22;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        java.lang.Object $r23, $r30, $r38;
        org.waveprotocol.wave.model.document.AnnotationInterval r43;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        i0 := @parameter0: int;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void beginUpdate()>();

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet access$900(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r1);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: void skip(int)>(i0);

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i1 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r3);

        i2 = $i1 + i0;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap requestedValues>;

        $z0 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: boolean isEmpty()>();

        if $z0 != 0 goto label7;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $r12 = staticinvoke <org.waveprotocol.wave.model.util.Box: org.waveprotocol.wave.model.util.Box create()>();

        $r13 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i7 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r13);

        $r14 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        $r16 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r15 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i8 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r15);

        $r17 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringSet requestedKeys>;

        $r18 = virtualinvoke $r16.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Iterable annotationIntervals(int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>($i8, i2, $r17);

        $r19 = interfaceinvoke $r18.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r38 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r43 = (org.waveprotocol.wave.model.document.AnnotationInterval) $r38;

        $r39 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i13 = interfaceinvoke r43.<org.waveprotocol.wave.model.document.AnnotationInterval: int start()>();

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1002(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,int)>($r39, $i13);

        $r40 = interfaceinvoke r43.<org.waveprotocol.wave.model.document.AnnotationInterval: org.waveprotocol.wave.model.util.ReadableStringMap annotations()>();

        $r12.<org.waveprotocol.wave.model.util.Box: java.lang.Object boxed> = $r40;

        $r42 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap requestedValues>;

        $r41 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1;

        specialinvoke $r41.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor,org.waveprotocol.wave.model.util.Box,java.util.List,org.waveprotocol.wave.model.util.StringSet)>(r0, $r12, $r11, $r14);

        interfaceinvoke $r42.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r41);

        goto label1;

     label2:
        $r20 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$2;

        specialinvoke $r20.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$2: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor,java.util.List,int)>(r0, $r11, i2);

        interfaceinvoke $r14.<org.waveprotocol.wave.model.util.StringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r20);

        $r21 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1002(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,int)>($r21, $i7);

        $r22 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r44 = (org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent) $r23;

        i9 = r44.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: int index>;

        $r24 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i10 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r24);

        if i9 <= $i10 goto label4;

        $r36 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        $r35 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i11 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r35);

        $i12 = i9 - $i11;

        virtualinvoke $r36.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void retain(int)>($i12);

        $r37 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1002(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,int)>($r37, i9);

     label4:
        $r25 = virtualinvoke r44.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getEndKey()>();

        if $r25 == null goto label5;

        $r32 = virtualinvoke r44.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getEndKey()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void maybeRenewAnnotation(java.lang.String)>($r32);

        $r33 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        $r34 = virtualinvoke r44.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getEndKey()>();

        virtualinvoke $r33.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void endAnnotation(java.lang.String)>($r34);

        goto label6;

     label5:
        $r26 = virtualinvoke r44.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getChangeKey()>();

        $r27 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        $r28 = virtualinvoke r44.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getChangeOldValue()>();

        $r29 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap requestedValues>;

        $r30 = interfaceinvoke $r29.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String,java.lang.Object)>($r26, null);

        $r31 = (java.lang.String) $r30;

        virtualinvoke $r27.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void startAnnotation(java.lang.String,java.lang.String,java.lang.String)>($r26, $r28, $r31);

     label6:
        goto label3;

     label7:
        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i3 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r5);

        if $i3 >= i2 goto label8;

        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i5 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r8);

        $i6 = i2 - $i5;

        virtualinvoke $r9.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void retain(int)>($i6);

        $r10 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1002(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,int)>($r10, i2);

     label8:
        $z1 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label9;

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i4 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r6);

        if $i4 == i2 goto label9;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label9:
        return;
    }

    private void beginInsert()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$3 $r1;
        org.waveprotocol.wave.model.util.StringMap $r2, $r3, $r4, $r5, $r6;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap newValues>;

        $r1 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$3;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$3: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor)>(r0);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r1);

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap newValues>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: void clear()>();

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap deletionValues>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: void clear()>();

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap deletionValues>;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap requestedValues>;

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: void putAll(org.waveprotocol.wave.model.util.ReadableStringMap)>($r5);

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void closeEndKeys()>();

        return;
    }

    private void beginUpdate()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$4 $r1;
        org.waveprotocol.wave.model.util.StringMap $r2, $r3, $r4, $r5, $r6;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap requestedValues>;

        $r1 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$4;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$4: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor)>(r0);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r1);

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap newValues>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: void clear()>();

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap deletionValues>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: void clear()>();

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap deletionValues>;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap requestedValues>;

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: void putAll(org.waveprotocol.wave.model.util.ReadableStringMap)>($r5);

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void closeEndKeys()>();

        return;
    }

    private void closeEndKeys()
    {
        org.waveprotocol.wave.model.util.StringSet $r2, $r3;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$5 $r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringSet endKeys>;

        $r1 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$5;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$5: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor)>(r0);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r1);

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringSet endKeys>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringSet: void clear()>();

        return;
    }

    public void elementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r3;
        int $i0, $i1;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        org.waveprotocol.wave.model.document.operation.Attributes r2;
        org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer $r4;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean didSomethingOtherThanDeletionSinceAnnotationBoundary> = 1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void beginInsert()>();

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void access$1800(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>($r3, r1, r2);

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void elementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r1, r2);

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: int sizeDiffSoFar>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: int sizeDiffSoFar> = $i1;

        return;
    }

    public void characters(java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r2;
        int $i0, $i1, $i2;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean didSomethingOtherThanDeletionSinceAnnotationBoundary> = 1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void beginInsert()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void access$1600(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,java.lang.String)>($r2, r1);

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void characters(java.lang.String)>(r1);

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: int sizeDiffSoFar>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: int sizeDiffSoFar> = $i2;

        return;
    }

    public void elementEnd()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r1;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer $r2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean didSomethingOtherThanDeletionSinceAnnotationBoundary> = 1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void beginInsert()>();

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void access$1700(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r1);

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void elementEnd()>();

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: int sizeDiffSoFar>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: int sizeDiffSoFar> = $i1;

        return;
    }

    public void updateAttributes(java.util.Map)
    {
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r21;
        java.util.Map r1, $r11;
        boolean $z0;
        org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer $r23;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r3, $r5, $r9, $r14, $r15, $r16, $r19, $r20, $r24, $r25, $r35, $r37;
        java.util.Set $r12;
        org.waveprotocol.wave.model.document.raw.RawDocument $r4, $r10, $r36, $r38;
        java.lang.String[] r2;
        org.waveprotocol.wave.model.util.OffsetList$Container $r6, $r17, $r18;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String r30, r32, $r34;
        java.util.Map$Entry r28;
        java.util.Iterator $r13;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        java.lang.Object $r7, $r8, $r26, $r27, $r29, $r31, $r33;
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl $r22;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        r1 := @parameter0: java.util.Map;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean didSomethingOtherThanDeletionSinceAnnotationBoundary> = 1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void beginUpdate()>();

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $i1 = $i0 * 3;

        r2 = newarray (java.lang.String)[$i1];

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument access$100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r3);

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container access$300(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r5);

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r8 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asElement(java.lang.Object)>($r7);

        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r10 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument access$100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r9);

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.document.raw.RawDocument: java.util.Map getAttributes(java.lang.Object)>($r8);

        i4 = 0;

        $r12 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r27 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r28 = (java.util.Map$Entry) $r27;

        $r29 = interfaceinvoke r28.<java.util.Map$Entry: java.lang.Object getKey()>();

        r30 = (java.lang.String) $r29;

        $r31 = interfaceinvoke r28.<java.util.Map$Entry: java.lang.Object getValue()>();

        r32 = (java.lang.String) $r31;

        r2[i4] = r30;

        $i2 = i4 + 1;

        $r33 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r30);

        $r34 = (java.lang.String) $r33;

        r2[$i2] = $r34;

        $i3 = i4 + 2;

        r2[$i3] = r32;

        if r32 == null goto label2;

        $r37 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r38 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument access$100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r37);

        interfaceinvoke $r38.<org.waveprotocol.wave.model.document.raw.RawDocument: void setAttribute(java.lang.Object,java.lang.String,java.lang.String)>($r8, r30, r32);

        goto label3;

     label2:
        $r35 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r36 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument access$100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r35);

        interfaceinvoke $r36.<org.waveprotocol.wave.model.document.raw.RawDocument: void removeAttribute(java.lang.Object,java.lang.String)>($r8, r30);

     label3:
        i4 = i4 + 3;

        goto label1;

     label4:
        $r14 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1008(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r14);

        $r16 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r15 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r17 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container access$300(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r15);

        $r18 = interfaceinvoke $r17.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getNextContainer()>();

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container access$302(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,org.waveprotocol.wave.model.util.OffsetList$Container)>($r16, $r18);

        $r19 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object access$502(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,java.lang.Object)>($r19, $r8);

        $r20 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r21 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet access$900(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r20);

        interfaceinvoke $r21.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: void skip(int)>(1);

        $r22 = new org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl;

        specialinvoke $r22.<org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: void <init>(java.lang.String[])>(r2);

        $r23 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        virtualinvoke $r23.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void updateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>($r22);

        $r25 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r24 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r26 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object access$500(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r24);

        virtualinvoke $r25.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void onModifyAttributes(java.lang.Object,org.waveprotocol.wave.model.document.operation.AttributesUpdate)>($r26, $r22);

        return;
    }

    public void replaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r23;
        java.util.Map $r10;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer $r24;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r1, $r3, $r8, $r16, $r17, $r18, $r21, $r22, $r25, $r26, $r30, $r40;
        java.util.Set $r11, $r14;
        org.waveprotocol.wave.model.document.operation.Attributes r13;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r7;
        org.waveprotocol.wave.model.document.raw.RawDocument $r2, $r9, $r31, $r41;
        org.waveprotocol.wave.model.util.OffsetList$Container $r4, $r19, $r20;
        java.lang.String $r33, $r35, r39, $r43;
        java.util.Map$Entry r44, r45;
        java.util.Iterator $r12, $r15;
        org.waveprotocol.wave.model.operation.OpCursorException $r36;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        java.lang.Object $r5, $r6, $r27, $r28, $r29, $r32, $r34, $r37, $r38, $r42;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        r13 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean didSomethingOtherThanDeletionSinceAnnotationBoundary> = 1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void beginUpdate()>();

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument access$100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r1);

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container access$300(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r3);

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r6 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asElement(java.lang.Object)>($r5);

        $r7 = new org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r9 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument access$100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r8);

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.model.document.raw.RawDocument: java.util.Map getAttributes(java.lang.Object)>($r6);

        specialinvoke $r7.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: void <init>(java.util.Map)>($r10);

        $r11 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.operation.Attributes: java.util.Set entrySet()>();

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r37 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r44 = (java.util.Map$Entry) $r37;

        $r38 = interfaceinvoke r44.<java.util.Map$Entry: java.lang.Object getKey()>();

        r39 = (java.lang.String) $r38;

        $z2 = interfaceinvoke r13.<org.waveprotocol.wave.model.document.operation.Attributes: boolean containsKey(java.lang.Object)>(r39);

        if $z2 != 0 goto label2;

        $r40 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r41 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument access$100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r40);

        $r42 = interfaceinvoke r44.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r43 = (java.lang.String) $r42;

        interfaceinvoke $r41.<org.waveprotocol.wave.model.document.raw.RawDocument: void removeAttribute(java.lang.Object,java.lang.String)>($r6, $r43);

     label2:
        goto label1;

     label3:
        $r14 = interfaceinvoke r13.<org.waveprotocol.wave.model.document.operation.Attributes: java.util.Set entrySet()>();

        $r15 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r28 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r45 = (java.util.Map$Entry) $r28;

        $r29 = interfaceinvoke r45.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r29 != null goto label5;

        $r36 = new org.waveprotocol.wave.model.operation.OpCursorException;

        specialinvoke $r36.<org.waveprotocol.wave.model.operation.OpCursorException: void <init>(java.lang.String)>("Null attribute value in setAttributes");

        throw $r36;

     label5:
        $r30 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r31 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument access$100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r30);

        $r32 = interfaceinvoke r45.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r33 = (java.lang.String) $r32;

        $r34 = interfaceinvoke r45.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r35 = (java.lang.String) $r34;

        interfaceinvoke $r31.<org.waveprotocol.wave.model.document.raw.RawDocument: void setAttribute(java.lang.Object,java.lang.String,java.lang.String)>($r6, $r33, $r35);

        goto label4;

     label6:
        $r16 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1008(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r16);

        $r18 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r17 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r19 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container access$300(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r17);

        $r20 = interfaceinvoke $r19.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getNextContainer()>();

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container access$302(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,org.waveprotocol.wave.model.util.OffsetList$Container)>($r18, $r20);

        $r21 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object access$502(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,java.lang.Object)>($r21, $r6);

        $r22 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r23 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet access$900(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r22);

        interfaceinvoke $r23.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: void skip(int)>(1);

        $r24 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        virtualinvoke $r24.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void replaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.Attributes)>($r7, r13);

        $r26 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r25 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r27 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object access$500(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r25);

        virtualinvoke $r26.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void onModifyAttributes(java.lang.Object,org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.Attributes)>($r27, $r7, r13);

        return;
    }

    public void deleteElementStart()
    {
        org.waveprotocol.wave.model.util.OffsetList$Container $r4;
        java.util.Map $r13;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r9;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r1, $r3, $r7, $r11, $r14, $r15, $r16, $r17, $r18, $r19, $r21;
        org.waveprotocol.wave.model.operation.OpCursorException $r23;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r10;
        org.waveprotocol.wave.model.document.raw.RawDocument $r2, $r8, $r12, $r20;
        java.lang.Object $r5, $r6, $r22;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument access$100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r1);

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.util.OffsetList$Container access$300(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r3);

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r6 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object asElement(java.lang.Object)>($r5);

        if $r6 != null goto label1;

        $r23 = new org.waveprotocol.wave.model.operation.OpCursorException;

        specialinvoke $r23.<org.waveprotocol.wave.model.operation.OpCursorException: void <init>(java.lang.String)>("No element to delete at the current location.");

        throw $r23;

     label1:
        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument access$100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r7);

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.String getTagName(java.lang.Object)>($r6);

        $r10 = new org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        $r11 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r12 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument access$100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r11);

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.model.document.raw.RawDocument: java.util.Map getAttributes(java.lang.Object)>($r6);

        specialinvoke $r10.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: void <init>(java.util.Map)>($r13);

        $r14 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1900(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r14);

        if $i0 != 0 goto label2;

        $r19 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r20 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.raw.RawDocument access$100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r19);

        $r21 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r22 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Object access$500(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r21);

        interfaceinvoke $r20.<org.waveprotocol.wave.model.document.raw.RawDocument: void removeChild(java.lang.Object,java.lang.Object)>($r22, $r6);

     label2:
        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void doSingleDelete(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>($r9, $r10);

        $r15 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void access$2000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r15);

        $r16 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1908(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r16);

        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: int sizeDiffSoFar>;

        $i2 = $i1 - 1;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: int sizeDiffSoFar> = $i2;

        $r18 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r17 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i3 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r17);

        virtualinvoke $r18.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void onDeleteElementStart(int,java.lang.Object)>($i3, $r6);

        return;
    }

    public void deleteElementEnd()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r1, $r2, $r3;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void onDeleteElementEnd()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void doSingleDelete(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(null, null);

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void access$2000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r2);

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1910(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r3);

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: int sizeDiffSoFar>;

        $i1 = $i0 - 1;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: int sizeDiffSoFar> = $i1;

        return;
    }

    private void doSingleDelete(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        boolean $z0, $z1, $z2, $z3, z4, $z5, $z6, z7, z8, z9, z10, z11, z12;
        org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer $r11, $r16;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r8, $r19, $r22;
        org.waveprotocol.wave.model.document.operation.Attributes r4;
        java.util.List $r1;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent r7;
        java.lang.StringBuilder $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r31;
        java.lang.AssertionError $r32, $r33, $r34, $r35;
        int i0, $i1, $i2, $i3, $i4, i5, $i7;
        java.lang.String r3, $r9, $r10, $r12, $r13, $r15, $r17, $r30;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        java.lang.Object $r6;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: java.util.List deleteAnnotations(int)>(1);

        z4 = 0;

        z12 = 0;

        z11 = 0;

        z10 = 0;

        z9 = 0;

        z8 = 0;

        z7 = 0;

        i5 = 0;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r6 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent) $r6;

        i0 = r7.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: int index>;

        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i1 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r8);

        if i0 <= $i1 goto label02;

        if z9 != 0 goto label02;

        z4 = 1;

        z12 = 1;

        z11 = 1;

        z10 = 1;

        z9 = 1;

        z8 = 1;

        z7 = 1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void buildDelete(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r3, r4);

     label02:
        $z5 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean $assertionsDisabled>;

        if $z5 != 0 goto label05;

        $r19 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i2 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r19);

        if z11 == 0 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        $i3 = $i2 + $z6;

        if i0 == $i3 goto label05;

        $r32 = new java.lang.AssertionError;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r22 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i4 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r22);

        $r23 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z10);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.AssertionError: void <init>(java.lang.Object)>($r30);

        throw $r32;

     label05:
        $r9 = virtualinvoke r7.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getEndKey()>();

        if $r9 == null goto label07;

        $z3 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean $assertionsDisabled>;

        if $z3 != 0 goto label06;

        if z7 != 0 goto label06;

        $r33 = new java.lang.AssertionError;

        specialinvoke $r33.<java.lang.AssertionError: void <init>()>();

        throw $r33;

     label06:
        $r15 = virtualinvoke r7.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getEndKey()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void maybeRenewAnnotation(java.lang.String)>($r15);

        $r16 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        $r17 = virtualinvoke r7.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getEndKey()>();

        virtualinvoke $r16.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void endAnnotation(java.lang.String)>($r17);

        $i7 = (int) -1;

        i5 = i5 + $i7;

        goto label09;

     label07:
        $z2 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean $assertionsDisabled>;

        if $z2 != 0 goto label08;

        if z12 == 0 goto label08;

        $r34 = new java.lang.AssertionError;

        specialinvoke $r34.<java.lang.AssertionError: void <init>()>();

        throw $r34;

     label08:
        $r10 = virtualinvoke r7.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getChangeKey()>();

        $r11 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        $r12 = virtualinvoke r7.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getChangeOldValue()>();

        $r13 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: java.lang.String getLeftNeighbourAnnotation(java.lang.String)>($r10);

        virtualinvoke $r11.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void startAnnotation(java.lang.String,java.lang.String,java.lang.String)>($r10, $r12, $r13);

        i5 = i5 + 1;

     label09:
        goto label01;

     label10:
        $z1 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label11;

        if i5 == 0 goto label11;

        $r35 = new java.lang.AssertionError;

        specialinvoke $r35.<java.lang.AssertionError: void <init>()>();

        throw $r35;

     label11:
        if z8 != 0 goto label12;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void buildDelete(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r3, r4);

     label12:
        return;
    }

    private void buildDelete(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        java.lang.String r0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r1;
        org.waveprotocol.wave.model.document.operation.Attributes r3;
        org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer $r2, $r4;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        if r0 == null goto label1;

        $r4 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void deleteElementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r0, r3);

        goto label2;

     label1:
        $r2 = r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void deleteElementEnd()>();

     label2:
        return;
    }

    public void deleteCharacters(int)
    {
        org.waveprotocol.wave.model.util.StringMap $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer $r9, $r17, $r23, $r35;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r2, $r4, $r7, $r8, $r14;
        java.util.List $r1;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent r13;
        java.lang.StringBuilder $r28, $r29, $r31, $r32, $r33;
        java.lang.AssertionError $r11, $r27;
        int i0, $i1, $i2, $i3, i4, $i5, i6, i7;
        java.lang.String $r3, $r10, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r24, $r25, $r26, $r30, $r34, $r36;
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        java.lang.Object $r12;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: java.util.List deleteAnnotations(int)>(i0);

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.String access$1100(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl,int)>($r2, i0);

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r4);

        i6 = 0;

        $r5 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        $r6 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r12 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent) $r12;

        i4 = r13.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: int index>;

        $r14 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i5 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r14);

        i7 = i4 - $i5;

        if i7 <= i6 goto label2;

        $r35 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        $r36 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(i6, i7);

        virtualinvoke $r35.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void deleteCharacters(java.lang.String)>($r36);

        i6 = i7;

     label2:
        $r15 = virtualinvoke r13.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getEndKey()>();

        if $r15 == null goto label4;

        $r22 = virtualinvoke r13.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getEndKey()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void maybeRenewAnnotation(java.lang.String)>($r22);

        $r23 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        $r24 = virtualinvoke r13.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getEndKey()>();

        virtualinvoke $r23.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void endAnnotation(java.lang.String)>($r24);

        $z3 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean $assertionsDisabled>;

        if $z3 != 0 goto label3;

        $r26 = virtualinvoke r13.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getEndKey()>();

        $z4 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>($r26);

        if $z4 != 0 goto label3;

        $r27 = new java.lang.AssertionError;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key: ");

        $r30 = virtualinvoke r13.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getEndKey()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.AssertionError: void <init>(java.lang.Object)>($r34);

        throw $r27;

     label3:
        $r25 = virtualinvoke r13.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getEndKey()>();

        interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: void remove(java.lang.String)>($r25);

        goto label5;

     label4:
        $r16 = virtualinvoke r13.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getChangeKey()>();

        $r17 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        $r18 = virtualinvoke r13.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getChangeOldValue()>();

        $r19 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: java.lang.String getLeftNeighbourAnnotation(java.lang.String)>($r16);

        virtualinvoke $r17.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void startAnnotation(java.lang.String,java.lang.String,java.lang.String)>($r16, $r18, $r19);

        $r20 = virtualinvoke r13.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getChangeKey()>();

        $r21 = virtualinvoke r13.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEvent: java.lang.String getChangeOldValue()>();

        interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r20, $r21);

     label5:
        goto label1;

     label6:
        $z1 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label7;

        $z2 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: boolean isEmpty()>();

        if $z2 != 0 goto label7;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label7:
        if i6 >= i0 goto label8;

        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        $r10 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(i6, i0);

        virtualinvoke $r9.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void deleteCharacters(java.lang.String)>($r10);

     label8:
        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: int sizeDiffSoFar>;

        $i2 = $i1 - i0;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: int sizeDiffSoFar> = $i2;

        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i3 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r7);

        virtualinvoke $r8.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: void onDeleteCharacters(int,java.lang.String)>($i3, $r3);

        return;
    }

    private java.util.List deleteAnnotations(int)
    {
        org.waveprotocol.wave.model.util.StringSet $r1;
        org.waveprotocol.wave.model.util.StringMap $r2, $r5;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r13;
        org.waveprotocol.wave.model.util.ReadableStringMap $r17;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r6, $r7, $r8, $r12;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$6 $r4;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$7 $r16;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$8 $r18;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$9 $r11;
        java.lang.AssertionError $r19, $r20;
        java.lang.Iterable $r9;
        java.util.ArrayList $r0;
        int $i0, $i1, i2, i3, $i4, $i5, $i6, $i7;
        java.util.Iterator $r10;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r3;
        java.lang.Object $r14;
        org.waveprotocol.wave.model.document.AnnotationInterval r15;

        r3 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        i2 := @parameter0: int;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        $r5 = r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap deletionValues>;

        $r4 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$6;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$6: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor,org.waveprotocol.wave.model.util.StringMap)>(r3, $r2);

        interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r4);

        $r6 = r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r6);

        $r7 = r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i1 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r7);

        i3 = $i1 + i2;

        $r8 = r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: java.lang.Iterable annotationIntervals(int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>($i0, i3, null);

        $r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r14 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.waveprotocol.wave.model.document.AnnotationInterval) $r14;

        $z1 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i7 = interfaceinvoke r15.<org.waveprotocol.wave.model.document.AnnotationInterval: int end()>();

        if $i7 > $i0 goto label2;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label2:
        $z2 = <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $i6 = interfaceinvoke r15.<org.waveprotocol.wave.model.document.AnnotationInterval: int start()>();

        if $i6 < i3 goto label3;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label3:
        $i4 = interfaceinvoke r15.<org.waveprotocol.wave.model.document.AnnotationInterval: int start()>();

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i4);

        $r16 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$7;

        specialinvoke $r16.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$7: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor,java.util.List,int,org.waveprotocol.wave.model.util.StringSet)>(r3, $r0, $i5, $r1);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r16);

        $r17 = interfaceinvoke r15.<org.waveprotocol.wave.model.document.AnnotationInterval: org.waveprotocol.wave.model.util.ReadableStringMap annotations()>();

        $r18 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$8;

        specialinvoke $r18.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$8: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor,org.waveprotocol.wave.model.util.StringMap,java.util.List,int,org.waveprotocol.wave.model.util.StringSet)>(r3, $r2, $r0, $i5, $r1);

        interfaceinvoke $r17.<org.waveprotocol.wave.model.util.ReadableStringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r18);

        goto label1;

     label4:
        $r11 = new org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$9;

        specialinvoke $r11.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$9: void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor,java.util.List,int)>(r3, $r0, i3);

        interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r11);

        $r12 = r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r13 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet access$900(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r12);

        interfaceinvoke $r13.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: void delete(int)>(i2);

        return $r0;
    }

    private void maybeRenewAnnotation(java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringMap $r2, $r3, $r4, $r5;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        java.lang.Object $r6;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap newValues>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap requestedValues>;

        $z1 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap newValues>;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap requestedValues>;

        $r6 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r1, $r6);

     label1:
        return;
    }

    private java.lang.String getLeftNeighbourAnnotation(java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringMap $r2, $r8;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet $r5;
        int $i0, $i1, $i2;
        java.lang.String r1, $r10, $r11;
        boolean $z0;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r3, $r4, $r6;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        java.lang.Object $r7, $r9;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap deletionValues>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.util.StringMap deletionValues>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        $r10 = (java.lang.String) $r9;

        return $r10;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r3);

        if $i0 == 0 goto label2;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: org.waveprotocol.wave.model.document.indexed.RawAnnotationSet access$900(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r4);

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i1 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r6);

        $i2 = $i1 - 1;

        $r7 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet: java.lang.Object getAnnotation(int,java.lang.String)>($i2, r1);

        $r11 = (java.lang.String) $r7;

        goto label3;

     label2:
        $r11 = null;

     label3:
        return $r11;
    }

    static void access$700(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: void begin2()>();

        return;
    }

    static org.waveprotocol.wave.model.document.operation.DocOp access$800(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.DocOp finish2()>();

        return $r1;
    }

    static org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer access$2300(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r0;
        org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer builder>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/indexed/IndexedDocumentImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: boolean $assertionsDisabled> = $z1;

        return;
    }
}
