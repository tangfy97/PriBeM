public class org.apache.xpath.axes.DescendantIterator extends org.apache.xpath.axes.LocPathIterator
{
    protected transient org.apache.xml.dtm.DTMAxisTraverser m_traverser;
    protected int m_axis;
    protected int m_extendedTypeID;

    void <init>(org.apache.xpath.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.Compiler r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, $i11, $i12, $i14, $i16;
        java.lang.String $r2, $r3;
        boolean $z0, z1, z2;
        org.apache.xpath.axes.DescendantIterator r0;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int,boolean)>(r1, i0, i1, 0);

        $i2 = staticinvoke <org.apache.xpath.compiler.OpMap: int getFirstChildPos(int)>(i0);

        i9 = $i2;

        $i3 = virtualinvoke r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i2);

        if 42 != $i3 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        z1 = $z0;

        z2 = 0;

        if 48 != $i3 goto label03;

        z1 = 1;

        goto label04;

     label03:
        if 50 != $i3 goto label04;

        z2 = 1;

        $i7 = virtualinvoke r1.<org.apache.xpath.compiler.OpMap: int getNextStepPos(int)>($i2);

        $i8 = virtualinvoke r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i7);

        if $i8 != 42 goto label04;

        z1 = 1;

     label04:
        i10 = $i2;

        goto label05;

     label05:
        $i4 = virtualinvoke r1.<org.apache.xpath.compiler.OpMap: int getNextStepPos(int)>(i10);

        i10 = $i4;

        if $i4 <= 0 goto label06;

        $i6 = virtualinvoke r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i4);

        $i14 = (int) -1;

        if $i14 == $i6 goto label06;

        i9 = $i4;

        goto label05;

     label06:
        $i5 = i1 & 65536;

        if $i5 == 0 goto label07;

        z1 = 0;

     label07:
        if z2 == 0 goto label09;

        if z1 == 0 goto label08;

        r0.<org.apache.xpath.axes.DescendantIterator: int m_axis> = 18;

        goto label11;

     label08:
        r0.<org.apache.xpath.axes.DescendantIterator: int m_axis> = 17;

        goto label11;

     label09:
        if z1 == 0 goto label10;

        r0.<org.apache.xpath.axes.DescendantIterator: int m_axis> = 5;

        goto label11;

     label10:
        r0.<org.apache.xpath.axes.DescendantIterator: int m_axis> = 4;

     label11:
        $i11 = virtualinvoke r1.<org.apache.xpath.compiler.Compiler: int getWhatToShow(int)>(i9);

        $i12 = $i11 & 67;

        if 0 == $i12 goto label12;

        $i16 = (int) -1;

        if $i11 != $i16 goto label13;

     label12:
        virtualinvoke r0.<org.apache.xpath.patterns.NodeTest: void initNodeTest(int)>($i11);

        goto label14;

     label13:
        $r2 = virtualinvoke r1.<org.apache.xpath.compiler.OpMap: java.lang.String getStepNS(int)>(i9);

        $r3 = virtualinvoke r1.<org.apache.xpath.compiler.OpMap: java.lang.String getStepLocalName(int)>(i9);

        virtualinvoke r0.<org.apache.xpath.patterns.NodeTest: void initNodeTest(int,java.lang.String,java.lang.String)>($i11, $r2, $r3);

     label14:
        virtualinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: void initPredicateInfo(org.apache.xpath.compiler.Compiler,int)>(r1, i9);

        return;
    }

    public void <init>()
    {
        int $i1;
        org.apache.xpath.axes.DescendantIterator r0;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void <init>(org.apache.xml.utils.PrefixResolver)>(null);

        r0.<org.apache.xpath.axes.DescendantIterator: int m_axis> = 18;

        $i1 = (int) -1;

        virtualinvoke r0.<org.apache.xpath.patterns.NodeTest: void initNodeTest(int)>($i1);

        return;
    }

    public org.apache.xml.dtm.DTMIterator cloneWithReset() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.axes.DescendantIterator r0, r2;
        org.apache.xml.dtm.DTMIterator $r1;
        org.apache.xml.dtm.DTMAxisTraverser $r3;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        $r1 = specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.dtm.DTMIterator cloneWithReset()>();

        r2 = (org.apache.xpath.axes.DescendantIterator) $r1;

        $r3 = r0.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        r2.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser> = $r3;

        virtualinvoke r2.<org.apache.xpath.axes.PredicatedNodeTest: void resetProximityPositions()>();

        return r2;
    }

    public int nextNode()
    {
        org.apache.xpath.VariableStack $r6, r8;
        org.apache.xml.dtm.DTMAxisTraverser $r1, $r2, $r3, $r4;
        boolean $z0;
        java.lang.Throwable $r7;
        short $s10;
        org.apache.xpath.XPathContext $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, $i20, $i21, i22, $i23, i24, $i26, $i28, $i30, $i32, $i34, $i36, $i38, $i40, $i42, $i44, $i46, $i48;
        org.apache.xpath.axes.DescendantIterator r0;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        $z0 = r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean m_foundLast>;

        if $z0 == 0 goto label01;

        $i26 = (int) -1;

        return $i26;

     label01:
        $i0 = r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched>;

        $i28 = (int) -1;

        if $i28 != $i0 goto label02;

        virtualinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: void resetProximityPositions()>();

     label02:
        $i1 = r0.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame>;

        $i30 = (int) -1;

        if $i30 == $i1 goto label03;

        $r5 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext m_execContext>;

        $r6 = virtualinvoke $r5.<org.apache.xpath.XPathContext: org.apache.xpath.VariableStack getVarStack()>();

        r8 = $r6;

        i19 = virtualinvoke $r6.<org.apache.xpath.VariableStack: int getStackFrame()>();

        $i17 = r0.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame>;

        virtualinvoke $r6.<org.apache.xpath.VariableStack: void setStackFrame(int)>($i17);

        goto label04;

     label03:
        r8 = null;

        i19 = 0;

     label04:
        $i20 = r0.<org.apache.xpath.axes.DescendantIterator: int m_extendedTypeID>;

        if 0 != $i20 goto label07;

        $i13 = r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched>;

        $i32 = (int) -1;

        if $i32 != $i13 goto label05;

        $r4 = r0.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        $i16 = r0.<org.apache.xpath.axes.LocPathIterator: int m_context>;

        $i21 = virtualinvoke $r4.<org.apache.xml.dtm.DTMAxisTraverser: int first(int)>($i16);

        goto label06;

     label05:
        $r3 = r0.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        $i15 = r0.<org.apache.xpath.axes.LocPathIterator: int m_context>;

        $i14 = r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched>;

        $i21 = virtualinvoke $r3.<org.apache.xml.dtm.DTMAxisTraverser: int next(int,int)>($i15, $i14);

     label06:
        r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched> = $i21;

        i22 = $i21;

        goto label10;

     label07:
        $i2 = r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched>;

        $i34 = (int) -1;

        if $i34 != $i2 goto label08;

        $r2 = r0.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        $i12 = r0.<org.apache.xpath.axes.LocPathIterator: int m_context>;

        $i11 = r0.<org.apache.xpath.axes.DescendantIterator: int m_extendedTypeID>;

        $i23 = virtualinvoke $r2.<org.apache.xml.dtm.DTMAxisTraverser: int first(int,int)>($i12, $i11);

        goto label09;

     label08:
        $r1 = r0.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        $i5 = r0.<org.apache.xpath.axes.LocPathIterator: int m_context>;

        $i4 = r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched>;

        $i3 = r0.<org.apache.xpath.axes.DescendantIterator: int m_extendedTypeID>;

        $i23 = virtualinvoke $r1.<org.apache.xml.dtm.DTMAxisTraverser: int next(int,int,int)>($i5, $i4, $i3);

     label09:
        r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched> = $i23;

        i22 = $i23;

     label10:
        $i36 = (int) -1;

        if $i36 == i22 goto label12;

        $s10 = virtualinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: short acceptNode(int)>(i22);

        if 1 != $s10 goto label11;

        goto label12;

     label11:
        $i38 = (int) -1;

        if i22 != $i38 goto label04;

     label12:
        $i40 = (int) -1;

        if $i40 == i22 goto label14;

        $i7 = r0.<org.apache.xpath.axes.LocPathIterator: int m_pos>;

        $i8 = $i7 + 1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_pos> = $i8;

        i24 = i22;

        goto label18;

     label13:
        return i24;

     label14:
        r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean m_foundLast> = 1;

        goto label20;

     label15:
        $i42 = (int) -1;

        return $i42;

     label16:
        $r7 := @caughtexception;

        goto label22;

     label17:
        throw $r7;

     label18:
        $i9 = r0.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame>;

        $i44 = (int) -1;

        if $i44 == $i9 goto label19;

        virtualinvoke r8.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i19);

     label19:
        goto label13;

     label20:
        $i6 = r0.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame>;

        $i46 = (int) -1;

        if $i46 == $i6 goto label21;

        virtualinvoke r8.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i19);

     label21:
        goto label15;

     label22:
        $i18 = r0.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame>;

        $i48 = (int) -1;

        if $i48 == $i18 goto label23;

        virtualinvoke r8.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i19);

     label23:
        goto label17;

        catch java.lang.Throwable from label04 to label16 with label16;
    }

    public void setRoot(int, java.lang.Object)
    {
        org.apache.xpath.axes.DescendantIterator r0;
        int i0, $i1, i2, $i3, $i4, $i6;
        org.apache.xml.dtm.DTM $r2, $r6;
        java.lang.Object r1;
        java.lang.String $r4, $r5;
        org.apache.xml.dtm.DTMAxisTraverser $r3;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void setRoot(int,java.lang.Object)>(i0, r1);

        $r2 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.dtm.DTM m_cdtm>;

        $i1 = r0.<org.apache.xpath.axes.DescendantIterator: int m_axis>;

        $r3 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: org.apache.xml.dtm.DTMAxisTraverser getAxisTraverser(int)>($i1);

        r0.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser> = $r3;

        $r4 = virtualinvoke r0.<org.apache.xpath.patterns.NodeTest: java.lang.String getLocalName()>();

        $r5 = virtualinvoke r0.<org.apache.xpath.patterns.NodeTest: java.lang.String getNamespace()>();

        i2 = r0.<org.apache.xpath.patterns.NodeTest: int m_whatToShow>;

        $i6 = (int) -1;

        if $i6 == i2 goto label1;

        if $r4 == "*" goto label1;

        if $r5 != "*" goto label2;

     label1:
        r0.<org.apache.xpath.axes.DescendantIterator: int m_extendedTypeID> = 0;

        goto label3;

     label2:
        $i3 = staticinvoke <org.apache.xpath.patterns.NodeTest: int getNodeTypeTest(int)>(i2);

        $r6 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.dtm.DTM m_cdtm>;

        $i4 = interfaceinvoke $r6.<org.apache.xml.dtm.DTM: int getExpandedTypeID(java.lang.String,java.lang.String,int)>($r5, $r4, $i3);

        r0.<org.apache.xpath.axes.DescendantIterator: int m_extendedTypeID> = $i4;

     label3:
        return;
    }

    public int asNode(org.apache.xpath.XPathContext) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.XPathContext r1;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i10;
        java.lang.String $r4, $r5;
        org.apache.xml.dtm.DTMAxisTraverser $r3;
        org.apache.xpath.axes.DescendantIterator r0;
        org.apache.xml.dtm.DTM $r2;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        $i0 = virtualinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: int getPredicateCount()>();

        if $i0 <= 0 goto label1;

        $i7 = specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: int asNode(org.apache.xpath.XPathContext)>(r1);

        return $i7;

     label1:
        $i1 = virtualinvoke r1.<org.apache.xpath.XPathContext: int getCurrentNode()>();

        $r2 = virtualinvoke r1.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>($i1);

        $i2 = r0.<org.apache.xpath.axes.DescendantIterator: int m_axis>;

        $r3 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: org.apache.xml.dtm.DTMAxisTraverser getAxisTraverser(int)>($i2);

        $r4 = virtualinvoke r0.<org.apache.xpath.patterns.NodeTest: java.lang.String getLocalName()>();

        $r5 = virtualinvoke r0.<org.apache.xpath.patterns.NodeTest: java.lang.String getNamespace()>();

        i3 = r0.<org.apache.xpath.patterns.NodeTest: int m_whatToShow>;

        $i10 = (int) -1;

        if $i10 == i3 goto label2;

        if $r4 == "*" goto label2;

        if $r5 != "*" goto label3;

     label2:
        $i8 = virtualinvoke $r3.<org.apache.xml.dtm.DTMAxisTraverser: int first(int)>($i1);

        return $i8;

     label3:
        $i4 = staticinvoke <org.apache.xpath.patterns.NodeTest: int getNodeTypeTest(int)>(i3);

        $i5 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: int getExpandedTypeID(java.lang.String,java.lang.String,int)>($r5, $r4, $i4);

        $i6 = virtualinvoke $r3.<org.apache.xml.dtm.DTMAxisTraverser: int first(int,int)>($i1, $i5);

        return $i6;
    }

    public void detach()
    {
        org.apache.xpath.axes.DescendantIterator r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        $z0 = r0.<org.apache.xpath.axes.LocPathIterator: boolean m_allowDetach>;

        if $z0 == 0 goto label1;

        r0.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser> = null;

        r0.<org.apache.xpath.axes.DescendantIterator: int m_extendedTypeID> = 0;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void detach()>();

     label1:
        return;
    }

    public int getAxis()
    {
        int $i0;
        org.apache.xpath.axes.DescendantIterator r0;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        $i0 = r0.<org.apache.xpath.axes.DescendantIterator: int m_axis>;

        return $i0;
    }

    public boolean deepEquals(org.apache.xpath.Expression)
    {
        org.apache.xpath.Expression r1;
        org.apache.xpath.axes.DescendantIterator r0, $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        r1 := @parameter0: org.apache.xpath.Expression;

        $z0 = specialinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean deepEquals(org.apache.xpath.Expression)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i1 = r0.<org.apache.xpath.axes.DescendantIterator: int m_axis>;

        $r2 = (org.apache.xpath.axes.DescendantIterator) r1;

        $i0 = $r2.<org.apache.xpath.axes.DescendantIterator: int m_axis>;

        if $i1 == $i0 goto label2;

        return 0;

     label2:
        return 1;
    }
}
