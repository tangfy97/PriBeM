class org.waveprotocol.wave.concurrencycontrol.client.OperationQueue extends java.lang.Object
{
    private static final org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Transformer TRANSFORMER;
    private static final int ESTIMATE_DELTAS_TO_COUNT;
    private final java.util.LinkedList queue;
    private org.waveprotocol.wave.model.wave.ParticipantId tailCreator;
    private final org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Transformer transformer;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue r0;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Transformer $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Transformer TRANSFORMER>;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: void <init>(org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Transformer)>($r1);

        return;
    }

    void <init>(org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Transformer)
    {
        java.util.LinkedList $r2;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue r0;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Transformer r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Transformer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Transformer transformer> = r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue> = $r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: org.waveprotocol.wave.model.wave.ParticipantId tailCreator> = null;

        return;
    }

    public void add(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0;
        org.waveprotocol.wave.concurrencycontrol.client.MergingSequence $r13, $r18;
        org.waveprotocol.wave.model.wave.ParticipantId $r2, $r5;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState $r9, $r10, $r14;
        java.util.LinkedList $r4, $r6, $r11, $r15;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue r3;
        boolean $z0, $z1;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item $r8, $r12, $r17;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r1;
        java.lang.Object $r7, $r16;

        r3 := @this: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r4 = r3.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        $z0 = virtualinvoke $r4.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r5 = r3.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: org.waveprotocol.wave.model.wave.ParticipantId tailCreator>;

        $z1 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label1;

        $r6 = r3.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        $r7 = virtualinvoke $r6.<java.util.LinkedList: java.lang.Object getLast()>();

        $r8 = (org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item) $r7;

        $r10 = $r8.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState state>;

        $r9 = <org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState NONE>;

        if $r10 == $r9 goto label2;

     label1:
        $r11 = r3.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        $r12 = new org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item;

        $r13 = new org.waveprotocol.wave.concurrencycontrol.client.MergingSequence;

        specialinvoke $r13.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: void <init>()>();

        $r14 = <org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState NONE>;

        specialinvoke $r12.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item: void <init>(org.waveprotocol.wave.concurrencycontrol.client.MergingSequence,org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState)>($r13, $r14);

        virtualinvoke $r11.<java.util.LinkedList: void addLast(java.lang.Object)>($r12);

        r3.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: org.waveprotocol.wave.model.wave.ParticipantId tailCreator> = $r2;

     label2:
        $r15 = r3.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        $r16 = virtualinvoke $r15.<java.util.LinkedList: java.lang.Object getLast()>();

        $r17 = (org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item) $r16;

        $r18 = $r17.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item: org.waveprotocol.wave.concurrencycontrol.client.MergingSequence opSequence>;

        virtualinvoke $r18.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: boolean add(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r0);

        return;
    }

    public void insertHead(java.util.List)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r4;
        org.waveprotocol.wave.concurrencycontrol.client.MergingSequence $r1;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item $r2;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r5;
        org.waveprotocol.wave.model.wave.ParticipantId $r6;
        java.util.List r0;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState $r3;
        java.util.LinkedList $r8, $r9, $r10;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue r7;
        boolean $z0, $z1;

        r7 := @this: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue;

        r0 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new org.waveprotocol.wave.concurrencycontrol.client.MergingSequence;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: void <init>(java.lang.Iterable)>(r0);

        $r2 = new org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item;

        $r3 = <org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState SENT>;

        specialinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item: void <init>(org.waveprotocol.wave.concurrencycontrol.client.MergingSequence,org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState)>($r1, $r3);

        $r4 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: org.waveprotocol.wave.model.operation.wave.WaveletOperation get(int)>(0);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r8 = r7.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        $z1 = virtualinvoke $r8.<java.util.LinkedList: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r10 = r7.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        virtualinvoke $r10.<java.util.LinkedList: boolean add(java.lang.Object)>($r2);

        r7.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: org.waveprotocol.wave.model.wave.ParticipantId tailCreator> = $r6;

        goto label3;

     label2:
        $r9 = r7.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        virtualinvoke $r9.<java.util.LinkedList: void addFirst(java.lang.Object)>($r2);

     label3:
        return;
    }

    public boolean isEmpty()
    {
        java.util.LinkedList $r1;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        $z0 = virtualinvoke $r1.<java.util.LinkedList: boolean isEmpty()>();

        return $z0;
    }

    public int estimateSize()
    {
        org.waveprotocol.wave.concurrencycontrol.client.MergingSequence $r6, $r11;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i8;
        java.util.LinkedList $r1, $r3, $r7, $r8;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue r0;
        boolean $z0, $z1;
        java.util.Iterator $r2;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item $r5, $r10;
        java.lang.Object $r4, $r9;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue;

        i5 = 0;

        i6 = 4;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        if i6 <= 0 goto label2;

        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r9 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item) $r9;

        $r11 = $r10.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item: org.waveprotocol.wave.concurrencycontrol.client.MergingSequence opSequence>;

        $i4 = virtualinvoke $r11.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: int size()>();

        i5 = i5 + $i4;

        $i8 = (int) -1;

        i6 = i6 + $i8;

        goto label1;

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object getLast()>();

        $r5 = (org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item) $r4;

        $r6 = $r5.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item: org.waveprotocol.wave.concurrencycontrol.client.MergingSequence opSequence>;

        $i0 = virtualinvoke $r6.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: int size()>();

        i5 = i5 + $i0;

        $r7 = r0.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        $i1 = virtualinvoke $r7.<java.util.LinkedList: int size()>();

        if $i1 <= 5 goto label3;

        $r8 = r0.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        $i2 = virtualinvoke $r8.<java.util.LinkedList: int size()>();

        $i3 = $i2 - 5;

        i5 = i5 + $i3;

     label3:
        return i5;
    }

    public java.util.List take()
    {
        org.waveprotocol.wave.concurrencycontrol.client.MergingSequence $r3;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item $r2;
        java.util.LinkedList $r1;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item takeMergedAndOptimisedItem(java.util.Queue)>($r1);

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r0.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: org.waveprotocol.wave.model.wave.ParticipantId tailCreator> = null;

     label1:
        $r3 = $r2.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item: org.waveprotocol.wave.concurrencycontrol.client.MergingSequence opSequence>;

        return $r3;
    }

    public java.util.List transform(java.util.List) throws org.waveprotocol.wave.model.operation.TransformException
    {
        org.waveprotocol.wave.concurrencycontrol.client.MergingSequence r7, $r12;
        org.waveprotocol.wave.concurrencycontrol.common.DeltaPair $r9;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Transformer $r8;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState $r14;
        java.util.LinkedList $r1, $r3, $r4, $r5;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue r2;
        boolean $z0, $z1;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item $r6, $r11;
        java.util.List r0, $r10, $r13, r15;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue;

        r0 := @parameter0: java.util.List;

        r15 = r0;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

     label1:
        $r3 = r2.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        $z0 = virtualinvoke $r3.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r5 = r2.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        $r6 = specialinvoke r2.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item takeMergedAndOptimisedItem(java.util.Queue)>($r5);

        r7 = $r6.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item: org.waveprotocol.wave.concurrencycontrol.client.MergingSequence opSequence>;

        $r8 = r2.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Transformer transformer>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Transformer: org.waveprotocol.wave.concurrencycontrol.common.DeltaPair transform(java.lang.Iterable,java.lang.Iterable)>(r7, r15);

        r15 = virtualinvoke $r9.<org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: java.util.List getServer()>();

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: java.util.List getClient()>();

        $z1 = interfaceinvoke $r10.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r11 = new org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item;

        $r12 = new org.waveprotocol.wave.concurrencycontrol.client.MergingSequence;

        $r13 = virtualinvoke $r9.<org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: java.util.List getClient()>();

        specialinvoke $r12.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: void <init>(java.lang.Iterable)>($r13);

        $r14 = $r6.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState state>;

        specialinvoke $r11.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item: void <init>(org.waveprotocol.wave.concurrencycontrol.client.MergingSequence,org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState)>($r12, $r14);

        interfaceinvoke $r1.<java.util.Queue: boolean add(java.lang.Object)>($r11);

     label2:
        goto label1;

     label3:
        $r4 = r2.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        virtualinvoke $r4.<java.util.LinkedList: boolean addAll(java.util.Collection)>($r1);

        return r15;
    }

    private org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item takeMergedAndOptimisedItem(java.util.Queue)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r6, $r16;
        org.waveprotocol.wave.concurrencycontrol.client.MergingSequence r5, r15;
        org.waveprotocol.wave.model.wave.ParticipantId $r8, $r18;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState $r3, $r4, $r9, $r10, $r12, $r19, $r20;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue r21;
        boolean $z0, $z1, z2, $z3;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item r2, $r11, r14;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r7, $r17;
        java.lang.Object $r1, $r13;
        java.util.Queue r0;

        r21 := @this: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue;

        r0 := @parameter0: java.util.Queue;

        $r1 = interfaceinvoke r0.<java.util.Queue: java.lang.Object remove()>();

        r2 = (org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item) $r1;

        $r4 = r2.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState state>;

        $r3 = <org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState SENT>;

        if $r4 != $r3 goto label1;

        return r2;

     label1:
        r5 = r2.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item: org.waveprotocol.wave.concurrencycontrol.client.MergingSequence opSequence>;

        $r6 = virtualinvoke r5.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: org.waveprotocol.wave.model.operation.wave.WaveletOperation get(int)>(0);

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r10 = r2.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState state>;

        $r9 = <org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState OPTIMISED>;

        if $r10 == $r9 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z2 = $z1;

     label4:
        $z3 = interfaceinvoke r0.<java.util.Queue: boolean isEmpty()>();

        if $z3 != 0 goto label5;

        $r13 = interfaceinvoke r0.<java.util.Queue: java.lang.Object element()>();

        r14 = (org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item) $r13;

        r15 = r14.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item: org.waveprotocol.wave.concurrencycontrol.client.MergingSequence opSequence>;

        $r16 = virtualinvoke r15.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: org.waveprotocol.wave.model.operation.wave.WaveletOperation get(int)>(0);

        $r17 = virtualinvoke $r16.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        $r18 = virtualinvoke $r17.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r20 = r14.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState state>;

        $r19 = <org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState SENT>;

        if $r20 == $r19 goto label5;

        $z0 = virtualinvoke $r8.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>($r18);

        if $z0 == 0 goto label5;

        virtualinvoke r5.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: boolean addAll(java.util.Collection)>(r15);

        interfaceinvoke r0.<java.util.Queue: java.lang.Object remove()>();

        z2 = 1;

        goto label4;

     label5:
        if z2 == 0 goto label6;

        virtualinvoke r5.<org.waveprotocol.wave.concurrencycontrol.client.MergingSequence: void optimise()>();

     label6:
        $r11 = new org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item;

        $r12 = <org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState OPTIMISED>;

        specialinvoke $r11.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Item: void <init>(org.waveprotocol.wave.concurrencycontrol.client.MergingSequence,org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$ItemState)>(r5, $r12);

        return $r11;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.wave.ParticipantId $r11;
        int $i0;
        java.lang.String $r14;
        java.util.LinkedList $r3, $r7;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r6, $r8, $r9, $r10, $r12, $r13;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation Queue = [deltas: ");

        $r3 = r2.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        $i0 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] \n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[queue: ");

        $r7 = r2.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: java.util.LinkedList queue>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] \n");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[tailCreator: ");

        $r11 = r2.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: org.waveprotocol.wave.model.wave.ParticipantId tailCreator>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] \n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$1 $r0;

        <org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: int ESTIMATE_DELTAS_TO_COUNT> = 4;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$1;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$1: void <init>()>();

        <org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue$Transformer TRANSFORMER> = $r0;

        return;
    }
}
