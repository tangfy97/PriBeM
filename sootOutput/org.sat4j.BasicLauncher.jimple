public class org.sat4j.BasicLauncher extends org.sat4j.AbstractLauncher
{
    private static final long serialVersionUID;
    private final org.sat4j.core.ASolverFactory factory;

    public void <init>(org.sat4j.core.ASolverFactory)
    {
        org.sat4j.BasicLauncher r0;
        org.sat4j.core.ASolverFactory r1;

        r0 := @this: org.sat4j.BasicLauncher;

        r1 := @parameter0: org.sat4j.core.ASolverFactory;

        specialinvoke r0.<org.sat4j.AbstractLauncher: void <init>()>();

        r0.<org.sat4j.BasicLauncher: org.sat4j.core.ASolverFactory factory> = r1;

        return;
    }

    public static void main(java.lang.String[])
    {
        int $i0, $i1;
        org.sat4j.ExitCode $r3;
        java.lang.String[] r2;
        org.sat4j.minisat.SolverFactory $r1;
        org.sat4j.BasicLauncher $r0;

        r2 := @parameter0: java.lang.String[];

        $r0 = new org.sat4j.BasicLauncher;

        $r1 = staticinvoke <org.sat4j.minisat.SolverFactory: org.sat4j.minisat.SolverFactory instance()>();

        specialinvoke $r0.<org.sat4j.BasicLauncher: void <init>(org.sat4j.core.ASolverFactory)>($r1);

        $i0 = lengthof r2;

        if $i0 == 1 goto label1;

        virtualinvoke $r0.<org.sat4j.BasicLauncher: void usage()>();

        return;

     label1:
        virtualinvoke $r0.<org.sat4j.BasicLauncher: void run(java.lang.String[])>(r2);

        $r3 = virtualinvoke $r0.<org.sat4j.BasicLauncher: org.sat4j.ExitCode getExitCode()>();

        $i1 = virtualinvoke $r3.<org.sat4j.ExitCode: int value()>();

        staticinvoke <java.lang.System: void exit(int)>($i1);

        return;
    }

    protected org.sat4j.specs.ISolver configureSolver(java.lang.String[])
    {
        java.io.PrintWriter $r3;
        org.sat4j.core.ASolverFactory $r1;
        org.sat4j.specs.ISolver $r2;
        java.lang.String[] r5;
        java.lang.String $r4;
        org.sat4j.BasicLauncher r0;

        r0 := @this: org.sat4j.BasicLauncher;

        r5 := @parameter0: java.lang.String[];

        $r1 = r0.<org.sat4j.BasicLauncher: org.sat4j.core.ASolverFactory factory>;

        $r2 = virtualinvoke $r1.<org.sat4j.core.ASolverFactory: org.sat4j.specs.ISolver defaultSolver()>();

        interfaceinvoke $r2.<org.sat4j.specs.ISolver: void setTimeout(int)>(2147483647);

        interfaceinvoke $r2.<org.sat4j.specs.ISolver: void setDBSimplificationAllowed(boolean)>(1);

        $r3 = virtualinvoke r0.<org.sat4j.BasicLauncher: java.io.PrintWriter getLogWriter()>();

        $r4 = interfaceinvoke $r2.<org.sat4j.specs.ISolver: java.lang.String toString(java.lang.String)>("c ");

        virtualinvoke $r3.<java.io.PrintWriter: void println(java.lang.String)>($r4);

        return $r2;
    }

    protected org.sat4j.reader.Reader createReader(org.sat4j.specs.ISolver, java.lang.String)
    {
        org.sat4j.reader.InstanceReader $r0;
        org.sat4j.specs.ISolver r1;
        java.lang.String r3;
        org.sat4j.BasicLauncher r2;

        r2 := @this: org.sat4j.BasicLauncher;

        r1 := @parameter0: org.sat4j.specs.ISolver;

        r3 := @parameter1: java.lang.String;

        $r0 = new org.sat4j.reader.InstanceReader;

        specialinvoke $r0.<org.sat4j.reader.InstanceReader: void <init>(org.sat4j.specs.ISolver)>(r1);

        return $r0;
    }

    public void usage()
    {
        org.sat4j.BasicLauncher r0;

        r0 := @this: org.sat4j.BasicLauncher;

        virtualinvoke r0.<org.sat4j.BasicLauncher: void log(java.lang.String)>("java -jar org.sat4j.core.jar <cnffile>");

        return;
    }

    protected java.lang.String getInstanceName(java.lang.String[])
    {
        int $i0;
        java.lang.String[] r0;
        java.lang.String $r1;
        org.sat4j.BasicLauncher r2;

        r2 := @this: org.sat4j.BasicLauncher;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0[0];

        return $r1;
    }

    public static void <clinit>()
    {
        <org.sat4j.BasicLauncher: long serialVersionUID> = 1L;

        return;
    }
}
