public class org.apache.poi.hssf.record.crypto.Biff8RC4Key extends org.apache.poi.hssf.record.crypto.Biff8EncryptionKey
{
    public static final int KEY_DIGEST_LENGTH;
    private static final int PASSWORD_HASH_NUMBER_OF_BYTES_USED;
    private static org.apache.poi.util.POILogger log;

    void <init>(byte[])
    {
        byte[] r1;
        javax.crypto.spec.SecretKeySpec $r3;
        java.lang.IllegalArgumentException $r5;
        int $i0;
        org.apache.poi.hssf.record.crypto.Biff8RC4Key r0;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r4, $r8, $r10;
        org.apache.poi.poifs.crypt.CipherAlgorithm r2;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8RC4Key;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8EncryptionKey: void <init>()>();

        $i0 = lengthof r1;

        if $i0 == 5 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected 5 byte key digest, but got ");

        $r8 = staticinvoke <org.apache.poi.util.HexDump: java.lang.String toHex(byte[])>(r1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        r2 = <org.apache.poi.poifs.crypt.CipherAlgorithm: org.apache.poi.poifs.crypt.CipherAlgorithm rc4>;

        $r3 = new javax.crypto.spec.SecretKeySpec;

        $r4 = r2.<org.apache.poi.poifs.crypt.CipherAlgorithm: java.lang.String jceId>;

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, $r4);

        r0.<org.apache.poi.hssf.record.crypto.Biff8RC4Key: javax.crypto.SecretKey _secretKey> = $r3;

        return;
    }

    public static org.apache.poi.hssf.record.crypto.Biff8RC4Key create(java.lang.String, byte[])
    {
        byte[] r2, $r3;
        org.apache.poi.hssf.record.crypto.Biff8RC4Key $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $r0 = new org.apache.poi.hssf.record.crypto.Biff8RC4Key;

        $r3 = staticinvoke <org.apache.poi.hssf.record.crypto.Biff8RC4Key: byte[] createKeyDigest(java.lang.String,byte[])>(r1, r2);

        specialinvoke $r0.<org.apache.poi.hssf.record.crypto.Biff8RC4Key: void <init>(byte[])>($r3);

        return $r0;
    }

    public boolean validate(byte[], byte[])
    {
        byte[] r0, r1, r5, r7, $r10, $r12, $r13;
        java.security.MessageDigest $r9;
        javax.crypto.Cipher $r3;
        int $i0, $i1;
        java.lang.String $r15;
        boolean $z0, $z1;
        javax.crypto.ShortBufferException $r16;
        org.apache.poi.util.POILogger $r11, $r14;
        org.apache.poi.poifs.crypt.HashAlgorithm $r8;
        org.apache.poi.EncryptedDocumentException $r17;
        org.apache.poi.hssf.record.crypto.Biff8RC4Key r2;
        java.lang.Object $r4, $r6;

        r2 := @this: org.apache.poi.hssf.record.crypto.Biff8RC4Key;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        staticinvoke <org.apache.poi.hssf.record.crypto.Biff8RC4Key: void check16Bytes(byte[],java.lang.String)>(r0, "verifier");

        staticinvoke <org.apache.poi.hssf.record.crypto.Biff8RC4Key: void check16Bytes(byte[],java.lang.String)>(r1, "verifierHash");

        $r3 = virtualinvoke r2.<org.apache.poi.hssf.record.crypto.Biff8RC4Key: javax.crypto.Cipher getCipher()>();

        virtualinvoke r2.<org.apache.poi.hssf.record.crypto.Biff8RC4Key: void initCipherForBlock(javax.crypto.Cipher,int)>($r3, 0);

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r5 = (byte[]) $r4;

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        r7 = (byte[]) $r6;

     label1:
        $i0 = lengthof r5;

        virtualinvoke $r3.<javax.crypto.Cipher: int update(byte[],int,int,byte[])>(r5, 0, $i0, r5);

        $i1 = lengthof r7;

        virtualinvoke $r3.<javax.crypto.Cipher: int update(byte[],int,int,byte[])>(r7, 0, $i1, r7);

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        $r17 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r17.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String,java.lang.Throwable)>("buffer too short", $r16);

        throw $r17;

     label4:
        $r8 = <org.apache.poi.poifs.crypt.HashAlgorithm: org.apache.poi.poifs.crypt.HashAlgorithm md5>;

        $r9 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: java.security.MessageDigest getMessageDigest(org.apache.poi.poifs.crypt.HashAlgorithm)>($r8);

        virtualinvoke $r9.<java.security.MessageDigest: void update(byte[])>(r5);

        $r10 = virtualinvoke $r9.<java.security.MessageDigest: byte[] digest()>();

        $r11 = <org.apache.poi.hssf.record.crypto.Biff8RC4Key: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r11.<org.apache.poi.util.POILogger: boolean check(int)>(1);

        if $z0 == 0 goto label5;

        $r12 = staticinvoke <org.apache.poi.hssf.record.crypto.Biff8RC4Key: byte[] xor(byte[],byte[])>(r7, $r10);

        $r13 = staticinvoke <org.apache.poi.hssf.record.crypto.Biff8RC4Key: byte[] xor(byte[],byte[])>(r1, $r12);

        $r14 = <org.apache.poi.hssf.record.crypto.Biff8RC4Key: org.apache.poi.util.POILogger log>;

        $r15 = staticinvoke <org.apache.poi.util.HexDump: java.lang.String toHex(byte[])>($r13);

        virtualinvoke $r14.<org.apache.poi.util.POILogger: void log(int,java.lang.Object,java.lang.Object)>(1, "valid verifierHash value", $r15);

     label5:
        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r7, $r10);

        return $z1;

        catch javax.crypto.ShortBufferException from label1 to label2 with label3;
    }

    javax.crypto.Cipher getCipher()
    {
        org.apache.poi.hssf.record.crypto.Biff8RC4Key r1;
        javax.crypto.SecretKey $r2;
        org.apache.poi.poifs.crypt.CipherAlgorithm r0;
        javax.crypto.Cipher $r3;

        r1 := @this: org.apache.poi.hssf.record.crypto.Biff8RC4Key;

        r0 = <org.apache.poi.poifs.crypt.CipherAlgorithm: org.apache.poi.poifs.crypt.CipherAlgorithm rc4>;

        $r2 = r1.<org.apache.poi.hssf.record.crypto.Biff8RC4Key: javax.crypto.SecretKey _secretKey>;

        $r3 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: javax.crypto.Cipher getCipher(javax.crypto.SecretKey,org.apache.poi.poifs.crypt.CipherAlgorithm,org.apache.poi.poifs.crypt.ChainingMode,byte[],int)>($r2, r0, null, null, 1);

        return $r3;
    }

    static byte[] createKeyDigest(java.lang.String, byte[])
    {
        byte[] r0, r2, $r5, $r6, $r7;
        java.security.MessageDigest $r4;
        byte $b8, $b13;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i14, i15, i16, $i17, $i18;
        java.lang.String r1;
        char $c4;
        org.apache.poi.poifs.crypt.HashAlgorithm $r3;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: byte[];

        staticinvoke <org.apache.poi.hssf.record.crypto.Biff8RC4Key: void check16Bytes(byte[],java.lang.String)>(r0, "docId");

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 16);

        $i2 = $i1 * 2;

        r2 = newarray (byte)[$i2];

        i15 = 0;

     label1:
        if i15 >= $i1 goto label2;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i15);

        $i5 = i15 * 2;

        $i9 = $i5 + 0;

        $i17 = (int) $c4;

        $i6 = $i17 << 0;

        $i7 = $i6 & 255;

        $b8 = (byte) $i7;

        r2[$i9] = $b8;

        $i10 = i15 * 2;

        $i14 = $i10 + 1;

        $i18 = (int) $c4;

        $i11 = $i18 << 8;

        $i12 = $i11 & 255;

        $b13 = (byte) $i12;

        r2[$i14] = $b13;

        i15 = i15 + 1;

        goto label1;

     label2:
        $r3 = <org.apache.poi.poifs.crypt.HashAlgorithm: org.apache.poi.poifs.crypt.HashAlgorithm md5>;

        $r4 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: java.security.MessageDigest getMessageDigest(org.apache.poi.poifs.crypt.HashAlgorithm)>($r3);

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>(r2);

        $r5 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>();

        virtualinvoke $r4.<java.security.MessageDigest: void reset()>();

        i16 = 0;

     label3:
        if i16 >= 16 goto label4;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[],int,int)>($r5, 0, 5);

        $i3 = lengthof r0;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[],int,int)>(r0, 0, $i3);

        i16 = i16 + 1;

        goto label3;

     label4:
        $r6 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>();

        $r7 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] getBlock0(byte[],int)>($r6, 5);

        return $r7;
    }

    void initCipherForBlock(javax.crypto.Cipher, int)
    {
        byte[] r0, $r5, $r7;
        java.security.MessageDigest $r2;
        javax.crypto.spec.SecretKeySpec $r6;
        org.apache.poi.poifs.crypt.HashAlgorithm $r1;
        javax.crypto.Cipher r10;
        java.security.GeneralSecurityException $r11;
        org.apache.poi.EncryptedDocumentException $r12;
        int i0;
        org.apache.poi.hssf.record.crypto.Biff8RC4Key r3;
        javax.crypto.SecretKey $r4, $r8;
        java.lang.String $r9;

        r3 := @this: org.apache.poi.hssf.record.crypto.Biff8RC4Key;

        r10 := @parameter0: javax.crypto.Cipher;

        i0 := @parameter1: int;

        r0 = newarray (byte)[4];

        staticinvoke <org.apache.poi.util.LittleEndian: void putInt(byte[],int,int)>(r0, 0, i0);

        $r1 = <org.apache.poi.poifs.crypt.HashAlgorithm: org.apache.poi.poifs.crypt.HashAlgorithm md5>;

        $r2 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: java.security.MessageDigest getMessageDigest(org.apache.poi.poifs.crypt.HashAlgorithm)>($r1);

        $r4 = r3.<org.apache.poi.hssf.record.crypto.Biff8RC4Key: javax.crypto.SecretKey _secretKey>;

        $r5 = interfaceinvoke $r4.<javax.crypto.SecretKey: byte[] getEncoded()>();

        virtualinvoke $r2.<java.security.MessageDigest: void update(byte[])>($r5);

        virtualinvoke $r2.<java.security.MessageDigest: void update(byte[])>(r0);

        $r6 = new javax.crypto.spec.SecretKeySpec;

        $r7 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>();

        $r8 = r3.<org.apache.poi.hssf.record.crypto.Biff8RC4Key: javax.crypto.SecretKey _secretKey>;

        $r9 = interfaceinvoke $r8.<javax.crypto.SecretKey: java.lang.String getAlgorithm()>();

        specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, $r9);

     label1:
        virtualinvoke r10.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r6);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r12.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String,java.lang.Throwable)>("Can\'t rekey for next block", $r11);

        throw $r12;

     label4:
        return;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
    }

    private static byte[] xor(byte[], byte[])
    {
        byte[] r0, r1, r2;
        byte $b2, $b3, $b4, $b5;
        int $i0, $i1, i6;

        r0 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        $i0 = lengthof r0;

        r1 = newarray (byte)[$i0];

        i6 = 0;

     label1:
        $i1 = lengthof r1;

        if i6 >= $i1 goto label2;

        $b3 = r0[i6];

        $b2 = r2[i6];

        $b4 = $b3 ^ $b2;

        $b5 = (byte) $b4;

        r1[i6] = $b5;

        i6 = i6 + 1;

        goto label1;

     label2:
        return r1;
    }

    private static void check16Bytes(byte[], java.lang.String)
    {
        byte[] r0;
        java.lang.IllegalArgumentException $r1;
        int $i0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8;
        java.lang.String r4, $r7, $r9;

        r0 := @parameter0: byte[];

        r4 := @parameter1: java.lang.String;

        $i0 = lengthof r0;

        if $i0 == 16 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected 16 byte ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but got ");

        $r7 = staticinvoke <org.apache.poi.util.HexDump: java.lang.String toHex(byte[])>(r0);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r1;

     label1:
        return;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;

        <org.apache.poi.hssf.record.crypto.Biff8RC4Key: int PASSWORD_HASH_NUMBER_OF_BYTES_USED> = 5;

        <org.apache.poi.hssf.record.crypto.Biff8RC4Key: int KEY_DIGEST_LENGTH> = 5;

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/hssf/record/crypto/Biff8RC4Key;");

        <org.apache.poi.hssf.record.crypto.Biff8RC4Key: org.apache.poi.util.POILogger log> = $r0;

        return;
    }
}
