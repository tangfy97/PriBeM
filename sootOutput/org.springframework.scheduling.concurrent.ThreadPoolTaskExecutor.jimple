public class org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor extends org.springframework.scheduling.concurrent.ExecutorConfigurationSupport implements org.springframework.scheduling.SchedulingTaskExecutor
{
    private final java.lang.Object poolSizeMonitor;
    private int corePoolSize;
    private int maxPoolSize;
    private int keepAliveSeconds;
    private boolean allowCoreThreadTimeOut;
    private int queueCapacity;
    private java.util.concurrent.ThreadPoolExecutor threadPoolExecutor;

    public void <init>()
    {
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;
        java.lang.Object $r1;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        specialinvoke r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.lang.Object poolSizeMonitor> = $r1;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: int corePoolSize> = 1;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: int maxPoolSize> = 2147483647;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: int keepAliveSeconds> = 60;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: boolean allowCoreThreadTimeOut> = 0;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: int queueCapacity> = 2147483647;

        return;
    }

    public void setCorePoolSize(int)
    {
        java.lang.Throwable $r4;
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;
        java.util.concurrent.ThreadPoolExecutor $r2, $r3;
        int i0;
        java.lang.Object $r1;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        i0 := @parameter0: int;

        $r1 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.lang.Object poolSizeMonitor>;

        entermonitor $r1;

     label1:
        r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: int corePoolSize> = i0;

        $r2 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        if $r2 == null goto label2;

        $r3 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: void setCorePoolSize(int)>(i0);

     label2:
        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getCorePoolSize()
    {
        java.lang.Throwable $r2;
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        $r1 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.lang.Object poolSizeMonitor>;

        entermonitor $r1;

     label1:
        $i0 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: int corePoolSize>;

        exitmonitor $r1;

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setMaxPoolSize(int)
    {
        java.lang.Throwable $r4;
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;
        java.util.concurrent.ThreadPoolExecutor $r2, $r3;
        int i0;
        java.lang.Object $r1;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        i0 := @parameter0: int;

        $r1 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.lang.Object poolSizeMonitor>;

        entermonitor $r1;

     label1:
        r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: int maxPoolSize> = i0;

        $r2 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        if $r2 == null goto label2;

        $r3 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: void setMaximumPoolSize(int)>(i0);

     label2:
        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getMaxPoolSize()
    {
        java.lang.Throwable $r2;
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        $r1 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.lang.Object poolSizeMonitor>;

        entermonitor $r1;

     label1:
        $i0 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: int maxPoolSize>;

        exitmonitor $r1;

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setKeepAliveSeconds(int)
    {
        java.lang.Throwable $r5;
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;
        java.util.concurrent.ThreadPoolExecutor $r2, $r4;
        long $l1;
        java.util.concurrent.TimeUnit $r3;
        int i0;
        java.lang.Object $r1;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        i0 := @parameter0: int;

        $r1 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.lang.Object poolSizeMonitor>;

        entermonitor $r1;

     label1:
        r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: int keepAliveSeconds> = i0;

        $r2 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        if $r2 == null goto label2;

        $r4 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        $l1 = (long) i0;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r4.<java.util.concurrent.ThreadPoolExecutor: void setKeepAliveTime(long,java.util.concurrent.TimeUnit)>($l1, $r3);

     label2:
        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getKeepAliveSeconds()
    {
        java.lang.Throwable $r2;
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        $r1 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.lang.Object poolSizeMonitor>;

        entermonitor $r1;

     label1:
        $i0 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: int keepAliveSeconds>;

        exitmonitor $r1;

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setAllowCoreThreadTimeOut(boolean)
    {
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;
        boolean z0;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: boolean allowCoreThreadTimeOut> = z0;

        return;
    }

    public void setQueueCapacity(int)
    {
        int i0;
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        i0 := @parameter0: int;

        r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: int queueCapacity> = i0;

        return;
    }

    protected java.util.concurrent.ExecutorService initializeExecutor(java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)
    {
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;
        java.util.concurrent.ThreadPoolExecutor $r2;
        java.util.concurrent.BlockingQueue $r1;
        long $l2;
        java.util.concurrent.TimeUnit $r5;
        java.util.concurrent.RejectedExecutionHandler r4;
        int $i0, $i1, $i3, $i4;
        java.util.concurrent.ThreadFactory r3;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        r3 := @parameter0: java.util.concurrent.ThreadFactory;

        r4 := @parameter1: java.util.concurrent.RejectedExecutionHandler;

        $i0 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: int queueCapacity>;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.BlockingQueue createQueue(int)>($i0);

        $r2 = new java.util.concurrent.ThreadPoolExecutor;

        $i4 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: int corePoolSize>;

        $i3 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: int maxPoolSize>;

        $i1 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: int keepAliveSeconds>;

        $l2 = (long) $i1;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        specialinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>($i4, $i3, $l2, $r5, $r1, r3, r4);

        $z0 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: boolean allowCoreThreadTimeOut>;

        if $z0 == 0 goto label1;

        virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(1);

     label1:
        r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor> = $r2;

        return $r2;
    }

    protected java.util.concurrent.BlockingQueue createQueue(int)
    {
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r2;
        java.util.concurrent.SynchronousQueue $r0;
        int i0;
        java.util.concurrent.LinkedBlockingQueue $r1;

        r2 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $r1 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r1.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(i0);

        return $r1;

     label1:
        $r0 = new java.util.concurrent.SynchronousQueue;

        specialinvoke $r0.<java.util.concurrent.SynchronousQueue: void <init>()>();

        return $r0;
    }

    public java.util.concurrent.ThreadPoolExecutor getThreadPoolExecutor() throws java.lang.IllegalStateException
    {
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;
        java.util.concurrent.ThreadPoolExecutor $r1, $r2;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        $r1 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z0, "ThreadPoolTaskExecutor not initialized");

        $r2 = r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        return $r2;
    }

    public int getPoolSize()
    {
        int $i0;
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;
        java.util.concurrent.ThreadPoolExecutor $r1;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.ThreadPoolExecutor getThreadPoolExecutor()>();

        $i0 = virtualinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()>();

        return $i0;
    }

    public int getActiveCount()
    {
        int $i0;
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;
        java.util.concurrent.ThreadPoolExecutor $r1;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.ThreadPoolExecutor getThreadPoolExecutor()>();

        $i0 = virtualinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: int getActiveCount()>();

        return $i0;
    }

    public void execute(java.lang.Runnable)
    {
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;
        java.util.concurrent.ThreadPoolExecutor $r1;
        org.springframework.core.task.TaskRejectedException $r4;
        java.lang.Runnable r2;
        java.util.concurrent.RejectedExecutionException $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        r2 := @parameter0: java.lang.Runnable;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.ThreadPoolExecutor getThreadPoolExecutor()>();

     label1:
        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.springframework.core.task.TaskRejectedException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r3);

        throw $r4;

     label4:
        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public void execute(java.lang.Runnable, long)
    {
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;
        long l0;
        java.lang.Runnable r1;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void execute(java.lang.Runnable)>(r1);

        return;
    }

    public java.util.concurrent.Future submit(java.lang.Runnable)
    {
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;
        java.util.concurrent.ThreadPoolExecutor $r1;
        org.springframework.core.task.TaskRejectedException $r5;
        java.lang.Runnable r2;
        java.util.concurrent.Future $r3;
        java.util.concurrent.RejectedExecutionException $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        r2 := @parameter0: java.lang.Runnable;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.ThreadPoolExecutor getThreadPoolExecutor()>();

     label1:
        $r3 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>(r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.springframework.core.task.TaskRejectedException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r5;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public java.util.concurrent.Future submit(java.util.concurrent.Callable)
    {
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;
        java.util.concurrent.ThreadPoolExecutor $r1;
        java.util.concurrent.Callable r2;
        org.springframework.core.task.TaskRejectedException $r5;
        java.util.concurrent.Future $r3;
        java.util.concurrent.RejectedExecutionException $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        r2 := @parameter0: java.util.concurrent.Callable;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: java.util.concurrent.ThreadPoolExecutor getThreadPoolExecutor()>();

     label1:
        $r3 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.springframework.core.task.TaskRejectedException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r5;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public boolean prefersShortLivedTasks()
    {
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

        return 1;
    }
}
