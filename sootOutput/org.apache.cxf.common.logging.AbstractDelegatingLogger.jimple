public abstract class org.apache.cxf.common.logging.AbstractDelegatingLogger extends java.util.logging.Logger
{

    protected void <init>(java.lang.String, java.lang.String)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void log(java.util.logging.LogRecord)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.util.logging.LogRecord r1;
        java.util.logging.Level $r2;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r1 := @parameter0: java.util.logging.LogRecord;

        $r2 = virtualinvoke r1.<java.util.logging.LogRecord: java.util.logging.Level getLevel()>();

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord)>(r1);

     label1:
        return;
    }

    public void log(java.util.logging.Level, java.lang.String)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r3;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level r1;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r1 := @parameter0: java.util.logging.Level;

        r3 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r3);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord)>($r2);

     label1:
        return;
    }

    public void log(java.util.logging.Level, java.lang.String, java.lang.Object)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.Object[] $r4;
        java.lang.Object r5;
        java.lang.String r3;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level r1;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r1 := @parameter0: java.util.logging.Level;

        r3 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r3);

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

        virtualinvoke $r2.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>($r4);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord)>($r2);

     label1:
        return;
    }

    public void log(java.util.logging.Level, java.lang.String, java.lang.Object[])
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.Object[] r4;
        java.lang.String r3;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level r1;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r1 := @parameter0: java.util.logging.Level;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Object[];

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r3);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>(r4);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord)>($r2);

     label1:
        return;
    }

    public void log(java.util.logging.Level, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r4;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r3;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level r1;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r1 := @parameter0: java.util.logging.Level;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r3);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>(r4);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord)>($r2);

     label1:
        return;
    }

    public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r3, r4, r5;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level r1;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r1 := @parameter0: java.util.logging.Level;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r3);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r4);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r5);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord)>($r2);

     label1:
        return;
    }

    public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)
    {
        java.lang.Object[] $r6;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level r1;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.Object r7;
        java.lang.String r3, r4, r5;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r1 := @parameter0: java.util.logging.Level;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r7 := @parameter4: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r3);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r4);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r5);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r7;

        virtualinvoke $r2.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>($r6);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord)>($r2);

     label1:
        return;
    }

    public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r6;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level r1;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r3, r4, r5;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r1 := @parameter0: java.util.logging.Level;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r6 := @parameter4: java.lang.Object[];

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r3);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r4);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r5);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>(r6);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord)>($r2);

     label1:
        return;
    }

    public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r6;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level r1;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r3, r4, r5;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r1 := @parameter0: java.util.logging.Level;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r6 := @parameter4: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r3);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r4);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r5);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>(r6);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord)>($r2);

     label1:
        return;
    }

    public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.logging.LogRecord $r2;
        java.util.logging.Level r1;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r3, r4, r5, r6;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r1 := @parameter0: java.util.logging.Level;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r3);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r4);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r5);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord,java.lang.String)>($r2, r6);

     label1:
        return;
    }

    public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)
    {
        java.lang.Object[] $r6;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level r1;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.Object r7;
        java.lang.String r3, r4, r5, r8;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r1 := @parameter0: java.util.logging.Level;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r8 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r7 := @parameter5: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r3);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r4);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r5);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r7;

        virtualinvoke $r2.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>($r6);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord,java.lang.String)>($r2, r8);

     label1:
        return;
    }

    public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r6;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level r1;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r3, r4, r5, r7;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r1 := @parameter0: java.util.logging.Level;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r7 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.Object[];

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r3);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r4);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r5);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>(r6);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord,java.lang.String)>($r2, r7);

     label1:
        return;
    }

    public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r6;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level r1;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r3, r4, r5, r7;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r1 := @parameter0: java.util.logging.Level;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r7 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r3);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r4);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r5);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>(r6);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord,java.lang.String)>($r2, r7);

     label1:
        return;
    }

    public void entering(java.lang.String, java.lang.String)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r2, r3;
        java.util.logging.Level $r1, $r4;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label1;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r4, r2, r3, "ENTRY");

     label1:
        return;
    }

    public void entering(java.lang.String, java.lang.String, java.lang.Object)
    {
        java.lang.Object[] $r2;
        java.util.logging.Level $r1, $r6;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.Object r3;
        java.lang.String r4, r5;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label1;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r6 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])>($r6, r4, r5, "ENTRY {0}", $r2);

     label1:
        return;
    }

    public void entering(java.lang.String, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r2;
        java.util.logging.Level $r1, $r6, $r9;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        int $i0, i1;
        java.lang.StringBuilder $r3;
        java.lang.String r4, r5, $r7, $r8;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $r1 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label4;

        if r2 != null goto label1;

        $r9 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r9, r4, r5, "ENTRY");

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("ENTRY");

        i1 = 0;

     label2:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label3;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        i1 = i1 + 1;

        goto label2;

     label3:
        $r6 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])>($r6, r4, r5, $r7, r2);

     label4:
        return;
    }

    public void exiting(java.lang.String, java.lang.String)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r2, r3;
        java.util.logging.Level $r1, $r4;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label1;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r4, r2, r3, "RETURN");

     label1:
        return;
    }

    public void exiting(java.lang.String, java.lang.String, java.lang.Object)
    {
        java.lang.Object[] $r2;
        java.util.logging.Level $r1, $r6;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.Object r3;
        java.lang.String r4, r5;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label1;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r6 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])>($r6, r4, r5, "RETURN {0}", $r2);

     label1:
        return;
    }

    public void throwing(java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r6;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level $r1, $r3;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r4, r5;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.Throwable;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINER>;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r3, "THROW");

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r4);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r5);

        virtualinvoke $r2.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>(r6);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord)>($r2);

     label1:
        return;
    }

    public void severe(java.lang.String)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r3;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level $r1, $r4;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        $r4 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r4, r3);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord)>($r2);

     label1:
        return;
    }

    public void warning(java.lang.String)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r3;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level $r1, $r4;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        $r4 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r4, r3);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord)>($r2);

     label1:
        return;
    }

    public void info(java.lang.String)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r3;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level $r1, $r4;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        $r4 = <java.util.logging.Level: java.util.logging.Level INFO>;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r4, r3);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord)>($r2);

     label1:
        return;
    }

    public void config(java.lang.String)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r3;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level $r1, $r4;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.util.logging.Level: java.util.logging.Level CONFIG>;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        $r4 = <java.util.logging.Level: java.util.logging.Level CONFIG>;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r4, r3);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord)>($r2);

     label1:
        return;
    }

    public void fine(java.lang.String)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r3;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level $r1, $r4;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINE>;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r4, r3);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord)>($r2);

     label1:
        return;
    }

    public void finer(java.lang.String)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r3;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level $r1, $r4;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINER>;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r4, r3);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord)>($r2);

     label1:
        return;
    }

    public void finest(java.lang.String)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.lang.String r3;
        java.util.logging.LogRecord $r2;
        java.util.logging.Level $r1, $r4;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new java.util.logging.LogRecord;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        specialinvoke $r2.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r4, r3);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void doLog(java.util.logging.LogRecord)>($r2);

     label1:
        return;
    }

    public void setLevel(java.util.logging.Level) throws java.lang.SecurityException
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r1;
        java.util.logging.Level r2;

        r1 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r2 := @parameter0: java.util.logging.Level;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public abstract java.util.logging.Level getLevel();

    public boolean isLoggable(java.util.logging.Level)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        int $i0, $i1;
        java.util.logging.Level $r1, r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r2 := @parameter0: java.util.logging.Level;

        $r1 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: java.util.logging.Level getLevel()>();

        $i0 = virtualinvoke r2.<java.util.logging.Level: int intValue()>();

        $i1 = virtualinvoke $r1.<java.util.logging.Level: int intValue()>();

        if $i0 < $i1 goto label1;

        $r3 = <java.util.logging.Level: java.util.logging.Level OFF>;

        if $r1 == $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean supportsHandlers()
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        return 0;
    }

    public synchronized void addHandler(java.util.logging.Handler) throws java.lang.SecurityException
    {
        java.lang.UnsupportedOperationException $r1;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.util.logging.Handler r2;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r2 := @parameter0: java.util.logging.Handler;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean supportsHandlers()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>(r2);

        return;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public synchronized void removeHandler(java.util.logging.Handler) throws java.lang.SecurityException
    {
        java.lang.UnsupportedOperationException $r1;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.util.logging.Handler r2;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r2 := @parameter0: java.util.logging.Handler;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean supportsHandlers()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<java.util.logging.Logger: void removeHandler(java.util.logging.Handler)>(r2);

        return;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public synchronized java.util.logging.Handler[] getHandlers()
    {
        java.lang.UnsupportedOperationException $r1;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.util.logging.Handler[] $r2;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean supportsHandlers()>();

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<java.util.logging.Logger: java.util.logging.Handler[] getHandlers()>();

        return $r2;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public synchronized void setUseParentHandlers(boolean)
    {
        java.lang.UnsupportedOperationException $r1;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        boolean $z0, z1;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean supportsHandlers()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<java.util.logging.Logger: void setUseParentHandlers(boolean)>(z1);

        return;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public synchronized boolean getUseParentHandlers()
    {
        java.lang.UnsupportedOperationException $r1;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: boolean supportsHandlers()>();

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<java.util.logging.Logger: boolean getUseParentHandlers()>();

        return $z1;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.util.logging.Logger getParent()
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        return null;
    }

    public void setParent(java.util.logging.Logger)
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r1;
        java.util.logging.Logger r2;

        r1 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r2 := @parameter0: java.util.logging.Logger;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    protected void doLog(java.util.logging.LogRecord)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r1;
        java.util.ResourceBundle $r4;
        java.lang.String $r2, $r3;
        java.util.logging.LogRecord r0;

        r1 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r0 := @parameter0: java.util.logging.LogRecord;

        $r2 = virtualinvoke r1.<org.apache.cxf.common.logging.AbstractDelegatingLogger: java.lang.String getName()>();

        virtualinvoke r0.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<org.apache.cxf.common.logging.AbstractDelegatingLogger: java.lang.String getResourceBundleName()>();

        if $r3 == null goto label1;

        virtualinvoke r0.<java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)>($r3);

        $r4 = virtualinvoke r1.<org.apache.cxf.common.logging.AbstractDelegatingLogger: java.util.ResourceBundle getResourceBundle()>();

        virtualinvoke r0.<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)>($r4);

     label1:
        virtualinvoke r1.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void internalLog(java.util.logging.LogRecord)>(r0);

        return;
    }

    protected void doLog(java.util.logging.LogRecord, java.lang.String)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r1;
        java.util.ResourceBundle $r4;
        java.lang.String $r2, r3;
        java.util.logging.LogRecord r0;

        r1 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r0 := @parameter0: java.util.logging.LogRecord;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r1.<org.apache.cxf.common.logging.AbstractDelegatingLogger: java.lang.String getName()>();

        virtualinvoke r0.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r2);

        if r3 == null goto label1;

        virtualinvoke r0.<java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)>(r3);

        $r4 = staticinvoke <org.apache.cxf.common.logging.AbstractDelegatingLogger: java.util.ResourceBundle loadResourceBundle(java.lang.String)>(r3);

        virtualinvoke r0.<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)>($r4);

     label1:
        virtualinvoke r1.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void internalLog(java.util.logging.LogRecord)>(r0);

        return;
    }

    protected void internalLog(java.util.logging.LogRecord)
    {
        org.apache.cxf.common.logging.AbstractDelegatingLogger r0;
        java.util.logging.Filter $r1;
        java.lang.String $r3;
        java.util.logging.LogRecord r2;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r2 := @parameter0: java.util.logging.LogRecord;

        $r1 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: java.util.logging.Filter getFilter()>();

        if $r1 == null goto label1;

        $z0 = interfaceinvoke $r1.<java.util.logging.Filter: boolean isLoggable(java.util.logging.LogRecord)>(r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: java.lang.String formatMessage(java.util.logging.LogRecord)>(r2);

        virtualinvoke r0.<org.apache.cxf.common.logging.AbstractDelegatingLogger: void internalLogFormatted(java.lang.String,java.util.logging.LogRecord)>($r3, r2);

        return;
    }

    protected abstract void internalLogFormatted(java.lang.String, java.util.logging.LogRecord);

    protected java.lang.String formatMessage(java.util.logging.LogRecord)
    {
        java.lang.Object[] $r7;
        java.util.MissingResourceException $r4;
        java.util.logging.LogRecord r0;
        java.lang.Exception $r3;
        org.apache.cxf.common.logging.AbstractDelegatingLogger r5;
        java.util.ResourceBundle $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r2, r6, $r8;

        r5 := @this: org.apache.cxf.common.logging.AbstractDelegatingLogger;

        r0 := @parameter0: java.util.logging.LogRecord;

        r6 = virtualinvoke r0.<java.util.logging.LogRecord: java.lang.String getMessage()>();

        $r1 = virtualinvoke r0.<java.util.logging.LogRecord: java.util.ResourceBundle getResourceBundle()>();

        if $r1 == null goto label04;

     label01:
        $r2 = virtualinvoke r0.<java.util.logging.LogRecord: java.lang.String getMessage()>();

        r6 = virtualinvoke $r1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>($r2);

     label02:
        goto label04;

     label03:
        $r4 := @caughtexception;

        r6 = virtualinvoke r0.<java.util.logging.LogRecord: java.lang.String getMessage()>();

     label04:
        $r7 = virtualinvoke r0.<java.util.logging.LogRecord: java.lang.Object[] getParameters()>();

        if $r7 == null goto label05;

        $i0 = lengthof $r7;

        if $i0 != 0 goto label06;

     label05:
        return r6;

     label06:
        $i1 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String)>("{0");

        if $i1 >= 0 goto label07;

        $i2 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String)>("{1");

        if $i2 >= 0 goto label07;

        $i3 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String)>("{2");

        if $i3 >= 0 goto label07;

        $i4 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String)>("{3");

        if $i4 < 0 goto label09;

     label07:
        $r8 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>(r6, $r7);

     label08:
        return $r8;

     label09:
        return r6;

     label10:
        $r3 := @caughtexception;

        return r6;

        catch java.util.MissingResourceException from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label10;
        catch java.lang.Exception from label06 to label08 with label10;
    }

    static java.util.ResourceBundle loadResourceBundle(java.lang.String)
    {
        java.util.MissingResourceException $r8, $r9;
        java.util.ResourceBundle $r5, $r7;
        java.util.Locale $r4, $r6;
        java.lang.Thread $r0;
        java.lang.ClassLoader $r1, $r2;
        java.lang.String r3;

        r3 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        if null == $r1 goto label4;

     label1:
        $r6 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r7 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)>(r3, $r6, $r1);

     label2:
        return $r7;

     label3:
        $r9 := @caughtexception;

     label4:
        $r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        if null == $r2 goto label8;

     label5:
        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r5 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)>(r3, $r4, $r2);

     label6:
        return $r5;

     label7:
        $r8 := @caughtexception;

     label8:
        return null;

        catch java.util.MissingResourceException from label1 to label2 with label3;
        catch java.util.MissingResourceException from label5 to label6 with label7;
    }
}
