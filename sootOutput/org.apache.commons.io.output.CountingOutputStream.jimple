public class org.apache.commons.io.output.CountingOutputStream extends org.apache.commons.io.output.ProxyOutputStream
{
    private long count;

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        org.apache.commons.io.output.CountingOutputStream r0;

        r0 := @this: org.apache.commons.io.output.CountingOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.apache.commons.io.output.ProxyOutputStream: void <init>(java.io.OutputStream)>(r1);

        r0.<org.apache.commons.io.output.CountingOutputStream: long count> = 0L;

        return;
    }

    protected synchronized void beforeWrite(int)
    {
        org.apache.commons.io.output.CountingOutputStream r0;
        int i0;
        long $l1, $l2, $l3;

        r0 := @this: org.apache.commons.io.output.CountingOutputStream;

        i0 := @parameter0: int;

        $l2 = r0.<org.apache.commons.io.output.CountingOutputStream: long count>;

        $l1 = (long) i0;

        $l3 = $l2 + $l1;

        r0.<org.apache.commons.io.output.CountingOutputStream: long count> = $l3;

        return;
    }

    public int getCount()
    {
        org.apache.commons.io.output.CountingOutputStream r0;
        long $l0;
        byte $b1;
        int $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r7;
        java.lang.ArithmeticException $r8;
        java.lang.String $r6;

        r0 := @this: org.apache.commons.io.output.CountingOutputStream;

        $l0 = virtualinvoke r0.<org.apache.commons.io.output.CountingOutputStream: long getByteCount()>();

        $b1 = $l0 cmp 2147483647L;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label1;

        $r8 = new java.lang.ArithmeticException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The byte count ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too large to be converted to an int");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label1:
        $i2 = (int) $l0;

        return $i2;
    }

    public int resetCount()
    {
        org.apache.commons.io.output.CountingOutputStream r0;
        long $l0;
        byte $b1;
        int $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r7;
        java.lang.ArithmeticException $r8;
        java.lang.String $r6;

        r0 := @this: org.apache.commons.io.output.CountingOutputStream;

        $l0 = virtualinvoke r0.<org.apache.commons.io.output.CountingOutputStream: long resetByteCount()>();

        $b1 = $l0 cmp 2147483647L;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label1;

        $r8 = new java.lang.ArithmeticException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The byte count ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too large to be converted to an int");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label1:
        $i2 = (int) $l0;

        return $i2;
    }

    public synchronized long getByteCount()
    {
        org.apache.commons.io.output.CountingOutputStream r0;
        long $l0;

        r0 := @this: org.apache.commons.io.output.CountingOutputStream;

        $l0 = r0.<org.apache.commons.io.output.CountingOutputStream: long count>;

        return $l0;
    }

    public synchronized long resetByteCount()
    {
        org.apache.commons.io.output.CountingOutputStream r0;
        long l0;

        r0 := @this: org.apache.commons.io.output.CountingOutputStream;

        l0 = r0.<org.apache.commons.io.output.CountingOutputStream: long count>;

        r0.<org.apache.commons.io.output.CountingOutputStream: long count> = 0L;

        return l0;
    }
}
