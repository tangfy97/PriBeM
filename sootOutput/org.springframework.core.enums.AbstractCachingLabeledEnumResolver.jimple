public abstract class org.springframework.core.enums.AbstractCachingLabeledEnumResolver extends java.lang.Object implements org.springframework.core.enums.LabeledEnumResolver
{
    protected final transient org.apache.commons.logging.Log logger;
    private final org.springframework.core.enums.AbstractCachingLabeledEnumResolver$LabeledEnumCache labeledEnumCache;

    public void <init>()
    {
        org.springframework.core.enums.AbstractCachingLabeledEnumResolver$LabeledEnumCache $r3;
        org.springframework.core.enums.AbstractCachingLabeledEnumResolver r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.springframework.core.enums.AbstractCachingLabeledEnumResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.core.enums.AbstractCachingLabeledEnumResolver: org.apache.commons.logging.Log logger> = $r2;

        $r3 = new org.springframework.core.enums.AbstractCachingLabeledEnumResolver$LabeledEnumCache;

        specialinvoke $r3.<org.springframework.core.enums.AbstractCachingLabeledEnumResolver$LabeledEnumCache: void <init>(org.springframework.core.enums.AbstractCachingLabeledEnumResolver)>(r0);

        r0.<org.springframework.core.enums.AbstractCachingLabeledEnumResolver: org.springframework.core.enums.AbstractCachingLabeledEnumResolver$LabeledEnumCache labeledEnumCache> = $r3;

        return;
    }

    public java.util.Set getLabeledEnumSet(java.lang.Class) throws java.lang.IllegalArgumentException
    {
        java.util.Map $r3;
        java.util.Collection $r4;
        org.springframework.core.enums.AbstractCachingLabeledEnumResolver r1;
        java.lang.Class r2;
        java.util.TreeSet $r0;

        r1 := @this: org.springframework.core.enums.AbstractCachingLabeledEnumResolver;

        r2 := @parameter0: java.lang.Class;

        $r0 = new java.util.TreeSet;

        $r3 = virtualinvoke r1.<org.springframework.core.enums.AbstractCachingLabeledEnumResolver: java.util.Map getLabeledEnumMap(java.lang.Class)>(r2);

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r0.<java.util.TreeSet: void <init>(java.util.Collection)>($r4);

        return $r0;
    }

    public java.util.Map getLabeledEnumMap(java.lang.Class) throws java.lang.IllegalArgumentException
    {
        org.springframework.core.enums.AbstractCachingLabeledEnumResolver$LabeledEnumCache $r2;
        java.util.Map $r4;
        java.lang.Class r0;
        org.springframework.core.enums.AbstractCachingLabeledEnumResolver r1;
        java.lang.Object $r3;

        r1 := @this: org.springframework.core.enums.AbstractCachingLabeledEnumResolver;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "No type specified");

        $r2 = r1.<org.springframework.core.enums.AbstractCachingLabeledEnumResolver: org.springframework.core.enums.AbstractCachingLabeledEnumResolver$LabeledEnumCache labeledEnumCache>;

        $r3 = virtualinvoke $r2.<org.springframework.core.enums.AbstractCachingLabeledEnumResolver$LabeledEnumCache: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (java.util.Map) $r3;

        return $r4;
    }

    public org.springframework.core.enums.LabeledEnum getLabeledEnumByCode(java.lang.Class, java.lang.Comparable) throws java.lang.IllegalArgumentException
    {
        java.util.Map $r3;
        java.lang.String $r11, $r15;
        org.springframework.core.enums.LabeledEnum r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.Comparable r0;
        org.springframework.core.enums.AbstractCachingLabeledEnumResolver r1;
        java.lang.Class r2;
        java.lang.Object $r4;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12, $r13, $r14;

        r1 := @this: org.springframework.core.enums.AbstractCachingLabeledEnumResolver;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Comparable;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "No enum code specified");

        $r3 = virtualinvoke r1.<org.springframework.core.enums.AbstractCachingLabeledEnumResolver: java.util.Map getLabeledEnumMap(java.lang.Class)>(r2);

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r5 = (org.springframework.core.enums.LabeledEnum) $r4;

        if r5 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("No enumeration with code \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of type [");

        $r11 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] exists: this is likely a configuration error. ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Make sure the code value matches a valid instance\'s code property!");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r6;

     label1:
        return r5;
    }

    public org.springframework.core.enums.LabeledEnum getLabeledEnumByLabel(java.lang.Class, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.util.Map $r2;
        java.lang.String $r7, r8, $r16;
        boolean $z0, $z1;
        java.util.Iterator $r4;
        java.util.Collection $r3;
        org.springframework.core.enums.LabeledEnum r6;
        java.lang.IllegalArgumentException $r9;
        org.springframework.core.enums.AbstractCachingLabeledEnumResolver r0;
        java.lang.Class r1;
        java.lang.Object $r5;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @this: org.springframework.core.enums.AbstractCachingLabeledEnumResolver;

        r1 := @parameter0: java.lang.Class;

        r8 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.core.enums.AbstractCachingLabeledEnumResolver: java.util.Map getLabeledEnumMap(java.lang.Class)>(r1);

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.springframework.core.enums.LabeledEnum) $r5;

        $r7 = interfaceinvoke r6.<org.springframework.core.enums.LabeledEnum: java.lang.String getLabel()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r8);

        if $z1 == 0 goto label2;

        return r6;

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("No enumeration with label \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of type [");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] exists: this is likely a configuration error. ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Make sure the label string matches a valid instance\'s label property!");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r9;
    }

    protected abstract java.util.Set findLabeledEnums(java.lang.Class);
}
