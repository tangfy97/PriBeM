public final class org.sat4j.minisat.constraints.cnf.LearntWLClause extends org.sat4j.minisat.constraints.cnf.WLClause
{
    private static final long serialVersionUID;
    static final boolean $assertionsDisabled;

    public void <init>(org.sat4j.specs.IVecInt, org.sat4j.minisat.core.ILits)
    {
        org.sat4j.specs.IVecInt r1;
        org.sat4j.minisat.constraints.cnf.LearntWLClause r0;
        org.sat4j.minisat.core.ILits r2;

        r0 := @this: org.sat4j.minisat.constraints.cnf.LearntWLClause;

        r1 := @parameter0: org.sat4j.specs.IVecInt;

        r2 := @parameter1: org.sat4j.minisat.core.ILits;

        specialinvoke r0.<org.sat4j.minisat.constraints.cnf.WLClause: void <init>(org.sat4j.specs.IVecInt,org.sat4j.minisat.core.ILits)>(r1, r2);

        return;
    }

    public void register()
    {
        java.lang.AssertionError $r14;
        int[] $r1, $r3, $r4, $r5, $r6, $r7, $r9, $r11, $r13, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, $i12, i13;
        org.sat4j.minisat.core.ILits $r2, $r8, $r10, $r12;
        boolean $z0;
        org.sat4j.minisat.constraints.cnf.LearntWLClause r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.LearntWLClause;

        $z0 = <org.sat4j.minisat.constraints.cnf.LearntWLClause: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r13 = r0.<org.sat4j.minisat.constraints.cnf.LearntWLClause: int[] lits>;

        $i8 = lengthof $r13;

        if $i8 > 1 goto label1;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label1:
        i9 = 1;

        $r2 = r0.<org.sat4j.minisat.constraints.cnf.LearntWLClause: org.sat4j.minisat.core.ILits voc>;

        $r1 = r0.<org.sat4j.minisat.constraints.cnf.LearntWLClause: int[] lits>;

        $i0 = $r1[1];

        i10 = interfaceinvoke $r2.<org.sat4j.minisat.core.ILits: int getLevel(int)>($i0);

        i11 = 2;

     label2:
        $r15 = r0.<org.sat4j.minisat.constraints.cnf.LearntWLClause: int[] lits>;

        $i12 = lengthof $r15;

        if i11 >= $i12 goto label4;

        $r12 = r0.<org.sat4j.minisat.constraints.cnf.LearntWLClause: org.sat4j.minisat.core.ILits voc>;

        $r11 = r0.<org.sat4j.minisat.constraints.cnf.LearntWLClause: int[] lits>;

        $i6 = $r11[i11];

        $i7 = interfaceinvoke $r12.<org.sat4j.minisat.core.ILits: int getLevel(int)>($i6);

        if $i7 <= i10 goto label3;

        i9 = i11;

        i10 = $i7;

     label3:
        i11 = i11 + 1;

        goto label2;

     label4:
        $r3 = r0.<org.sat4j.minisat.constraints.cnf.LearntWLClause: int[] lits>;

        i13 = $r3[1];

        $r5 = r0.<org.sat4j.minisat.constraints.cnf.LearntWLClause: int[] lits>;

        $r4 = r0.<org.sat4j.minisat.constraints.cnf.LearntWLClause: int[] lits>;

        $i1 = $r4[i9];

        $r5[1] = $i1;

        $r6 = r0.<org.sat4j.minisat.constraints.cnf.LearntWLClause: int[] lits>;

        $r6[i9] = i13;

        $r8 = r0.<org.sat4j.minisat.constraints.cnf.LearntWLClause: org.sat4j.minisat.core.ILits voc>;

        $r7 = r0.<org.sat4j.minisat.constraints.cnf.LearntWLClause: int[] lits>;

        $i2 = $r7[0];

        $i3 = $i2 ^ 1;

        interfaceinvoke $r8.<org.sat4j.minisat.core.ILits: void watch(int,org.sat4j.minisat.core.Propagatable)>($i3, r0);

        $r10 = r0.<org.sat4j.minisat.constraints.cnf.LearntWLClause: org.sat4j.minisat.core.ILits voc>;

        $r9 = r0.<org.sat4j.minisat.constraints.cnf.LearntWLClause: int[] lits>;

        $i4 = $r9[1];

        $i5 = $i4 ^ 1;

        interfaceinvoke $r10.<org.sat4j.minisat.core.ILits: void watch(int,org.sat4j.minisat.core.Propagatable)>($i5, r0);

        return;
    }

    public boolean learnt()
    {
        org.sat4j.minisat.constraints.cnf.LearntWLClause r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.LearntWLClause;

        return 1;
    }

    public void setLearnt()
    {
        org.sat4j.minisat.constraints.cnf.LearntWLClause r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.LearntWLClause;

        return;
    }

    public void forwardActivity(double)
    {
        org.sat4j.minisat.constraints.cnf.LearntWLClause r0;
        double d0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.LearntWLClause;

        d0 := @parameter0: double;

        return;
    }

    public void incActivity(double)
    {
        org.sat4j.minisat.constraints.cnf.LearntWLClause r0;
        double d0, $d1, $d2;

        r0 := @this: org.sat4j.minisat.constraints.cnf.LearntWLClause;

        d0 := @parameter0: double;

        $d1 = r0.<org.sat4j.minisat.constraints.cnf.LearntWLClause: double activity>;

        $d2 = $d1 + d0;

        r0.<org.sat4j.minisat.constraints.cnf.LearntWLClause: double activity> = $d2;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.sat4j.minisat.constraints.cnf.LearntWLClause: long serialVersionUID> = 1L;

        $r0 = class "Lorg/sat4j/minisat/constraints/cnf/LearntWLClause;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.sat4j.minisat.constraints.cnf.LearntWLClause: boolean $assertionsDisabled> = $z1;

        return;
    }
}
