public abstract class com.sun.xml.bind.v2.runtime.property.PropertyFactory extends java.lang.Object
{
    private static final java.lang.reflect.Constructor[] propImpls;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        com.sun.xml.bind.v2.runtime.property.PropertyFactory r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.property.PropertyFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.sun.xml.bind.v2.runtime.property.Property create(com.sun.xml.bind.v2.runtime.JAXBContextImpl, com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo)
    {
        com.sun.xml.bind.v2.model.runtime.RuntimeValuePropertyInfo $r8;
        byte $b2, $b3;
        int[] $r2;
        java.lang.InstantiationException $r20;
        com.sun.xml.bind.v2.runtime.property.Property $r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalAccessException $r17;
        com.sun.xml.bind.v2.runtime.property.ValueProperty $r7;
        com.sun.xml.bind.v2.runtime.property.AttributeProperty $r9;
        java.lang.reflect.InvocationTargetException $r12;
        java.lang.IllegalAccessError $r18;
        com.sun.xml.bind.v2.runtime.property.ListElementProperty $r5;
        java.lang.Throwable $r13;
        java.lang.Object[] $r25;
        java.lang.Error $r16;
        java.lang.AssertionError $r11, $r14;
        java.lang.reflect.Constructor $r24;
        com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo r0;
        java.lang.reflect.Constructor[] $r23;
        int $i0, $i1, $i4, $i5, $i6;
        com.sun.xml.bind.v2.model.runtime.RuntimeElementPropertyInfo $r4, $r6;
        com.sun.xml.bind.v2.model.core.PropertyKind $r1;
        java.lang.String $r19, $r22;
        com.sun.xml.bind.v2.runtime.JAXBContextImpl r3;
        com.sun.xml.bind.v2.model.runtime.RuntimeAttributePropertyInfo $r10;
        java.lang.RuntimeException $r15;
        java.lang.InstantiationError $r21;
        java.lang.Object $r26;

        r3 := @parameter0: com.sun.xml.bind.v2.runtime.JAXBContextImpl;

        r0 := @parameter1: com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo;

        $r1 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo: com.sun.xml.bind.v2.model.core.PropertyKind kind()>();

        $r2 = <com.sun.xml.bind.v2.runtime.property.PropertyFactory$1: int[] $SwitchMap$com$sun$xml$bind$v2$model$core$PropertyKind>;

        $i0 = virtualinvoke $r1.<com.sun.xml.bind.v2.model.core.PropertyKind: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label04;
            default: goto label05;
        };

     label01:
        $r9 = new com.sun.xml.bind.v2.runtime.property.AttributeProperty;

        $r10 = (com.sun.xml.bind.v2.model.runtime.RuntimeAttributePropertyInfo) r0;

        specialinvoke $r9.<com.sun.xml.bind.v2.runtime.property.AttributeProperty: void <init>(com.sun.xml.bind.v2.runtime.JAXBContextImpl,com.sun.xml.bind.v2.model.runtime.RuntimeAttributePropertyInfo)>(r3, $r10);

        return $r9;

     label02:
        $r7 = new com.sun.xml.bind.v2.runtime.property.ValueProperty;

        $r8 = (com.sun.xml.bind.v2.model.runtime.RuntimeValuePropertyInfo) r0;

        specialinvoke $r7.<com.sun.xml.bind.v2.runtime.property.ValueProperty: void <init>(com.sun.xml.bind.v2.runtime.JAXBContextImpl,com.sun.xml.bind.v2.model.runtime.RuntimeValuePropertyInfo)>(r3, $r8);

        return $r7;

     label03:
        $r4 = (com.sun.xml.bind.v2.model.runtime.RuntimeElementPropertyInfo) r0;

        $z0 = interfaceinvoke $r4.<com.sun.xml.bind.v2.model.runtime.RuntimeElementPropertyInfo: boolean isValueList()>();

        if $z0 == 0 goto label06;

        $r5 = new com.sun.xml.bind.v2.runtime.property.ListElementProperty;

        $r6 = (com.sun.xml.bind.v2.model.runtime.RuntimeElementPropertyInfo) r0;

        specialinvoke $r5.<com.sun.xml.bind.v2.runtime.property.ListElementProperty: void <init>(com.sun.xml.bind.v2.runtime.JAXBContextImpl,com.sun.xml.bind.v2.model.runtime.RuntimeElementPropertyInfo)>(r3, $r6);

        return $r5;

     label04:
        goto label06;

     label05:
        $z1 = <com.sun.xml.bind.v2.runtime.property.PropertyFactory: boolean $assertionsDisabled>;

        if $z1 != 0 goto label06;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label06:
        $z4 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo: boolean isCollection()>();

        $z5 = staticinvoke <com.sun.xml.bind.v2.runtime.property.PropertyFactory: boolean isLeaf(com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo)>(r0);

        $r23 = <com.sun.xml.bind.v2.runtime.property.PropertyFactory: java.lang.reflect.Constructor[] propImpls>;

        if $z5 == 0 goto label07;

        $b2 = 0;

        goto label08;

     label07:
        $b2 = 6;

     label08:
        if $z4 == 0 goto label09;

        $b3 = 3;

        goto label10;

     label09:
        $b3 = 0;

     label10:
        $i4 = $b2 + $b3;

        $i5 = $r1.<com.sun.xml.bind.v2.model.core.PropertyKind: int propertyIndex>;

        $i6 = $i4 + $i5;

        $r24 = $r23[$i6];

     label11:
        $r25 = newarray (java.lang.Object)[2];

        $r25[0] = r3;

        $r25[1] = r0;

        $r26 = virtualinvoke $r24.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r25);

        $r27 = (com.sun.xml.bind.v2.runtime.property.Property) $r26;

     label12:
        return $r27;

     label13:
        $r20 := @caughtexception;

        $r21 = new java.lang.InstantiationError;

        $r22 = virtualinvoke $r20.<java.lang.InstantiationException: java.lang.String getMessage()>();

        specialinvoke $r21.<java.lang.InstantiationError: void <init>(java.lang.String)>($r22);

        throw $r21;

     label14:
        $r17 := @caughtexception;

        $r18 = new java.lang.IllegalAccessError;

        $r19 = virtualinvoke $r17.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        specialinvoke $r18.<java.lang.IllegalAccessError: void <init>(java.lang.String)>($r19);

        throw $r18;

     label15:
        $r12 := @caughtexception;

        $r13 = virtualinvoke $r12.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $z2 = $r13 instanceof java.lang.Error;

        if $z2 == 0 goto label16;

        $r16 = (java.lang.Error) $r13;

        throw $r16;

     label16:
        $z3 = $r13 instanceof java.lang.RuntimeException;

        if $z3 == 0 goto label17;

        $r15 = (java.lang.RuntimeException) $r13;

        throw $r15;

     label17:
        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13);

        throw $r14;

        catch java.lang.InstantiationException from label11 to label12 with label13;
        catch java.lang.IllegalAccessException from label11 to label12 with label14;
        catch java.lang.reflect.InvocationTargetException from label11 to label12 with label15;
    }

    static boolean isLeaf(com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo)
    {
        java.util.Iterator $r2;
        java.util.Collection $r1;
        com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo r0;
        com.sun.xml.bind.v2.model.runtime.RuntimeNonElement $r7;
        java.lang.reflect.Type $r9;
        com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo r4;
        int $i0;
        java.lang.Object $r3, $r10;
        com.sun.xml.bind.v2.runtime.Transducer $r8;
        com.sun.xml.bind.v2.model.core.ID $r5, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo;

        $r1 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo: java.util.Collection ref()>();

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        if $i0 == 1 goto label1;

        return 0;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo) $r3;

        $z0 = r4 instanceof com.sun.xml.bind.v2.model.runtime.RuntimeNonElement;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r5 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo: com.sun.xml.bind.v2.model.core.ID id()>();

        $r6 = <com.sun.xml.bind.v2.model.core.ID: com.sun.xml.bind.v2.model.core.ID IDREF>;

        if $r5 != $r6 goto label3;

        return 1;

     label3:
        $r7 = (com.sun.xml.bind.v2.model.runtime.RuntimeNonElement) r4;

        $r8 = interfaceinvoke $r7.<com.sun.xml.bind.v2.model.runtime.RuntimeNonElement: com.sun.xml.bind.v2.runtime.Transducer getTransducer()>();

        if $r8 != null goto label4;

        return 0;

     label4:
        $r9 = interfaceinvoke r0.<com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo: java.lang.reflect.Type getIndividualType()>();

        $r10 = interfaceinvoke r4.<com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo: java.lang.Object getType()>();

        $z1 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r1;
        java.lang.reflect.Constructor $r7;
        java.lang.reflect.Constructor[] $r2, $r5, $r6, $r8;
        int $i0, i1, $i2;
        java.lang.Class $r0, $r3, $r4;
        boolean $z0, $z1;

        $r0 = class "Lcom/sun/xml/bind/v2/runtime/property/PropertyFactory;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.runtime.property.PropertyFactory: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (java.lang.Class)[12];

        $r1[0] = class "Lcom/sun/xml/bind/v2/runtime/property/SingleElementLeafProperty;";

        $r1[1] = null;

        $r1[2] = null;

        $r1[3] = class "Lcom/sun/xml/bind/v2/runtime/property/ArrayElementLeafProperty;";

        $r1[4] = null;

        $r1[5] = null;

        $r1[6] = class "Lcom/sun/xml/bind/v2/runtime/property/SingleElementNodeProperty;";

        $r1[7] = class "Lcom/sun/xml/bind/v2/runtime/property/SingleReferenceNodeProperty;";

        $r1[8] = class "Lcom/sun/xml/bind/v2/runtime/property/SingleMapNodeProperty;";

        $r1[9] = class "Lcom/sun/xml/bind/v2/runtime/property/ArrayElementNodeProperty;";

        $r1[10] = class "Lcom/sun/xml/bind/v2/runtime/property/ArrayReferenceNodeProperty;";

        $r1[11] = null;

        $i0 = lengthof $r1;

        $r2 = newarray (java.lang.reflect.Constructor)[$i0];

        <com.sun.xml.bind.v2.runtime.property.PropertyFactory: java.lang.reflect.Constructor[] propImpls> = $r2;

        i1 = 0;

     label3:
        $r8 = <com.sun.xml.bind.v2.runtime.property.PropertyFactory: java.lang.reflect.Constructor[] propImpls>;

        $i2 = lengthof $r8;

        if i1 >= $i2 goto label5;

        $r3 = $r1[i1];

        if $r3 == null goto label4;

        $r5 = <com.sun.xml.bind.v2.runtime.property.PropertyFactory: java.lang.reflect.Constructor[] propImpls>;

        $r4 = $r1[i1];

        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $r7 = $r6[0];

        $r5[i1] = $r7;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return;
    }
}
