class org.apache.lucene.search.MinShouldMatchSumScorer extends org.apache.lucene.search.Scorer
{
    private int numScorers;
    private final int mm;
    private final org.apache.lucene.search.Scorer[] sortedSubScorers;
    private int sortedSubScorersIdx;
    private final org.apache.lucene.search.Scorer[] subScorers;
    private int nrInHeap;
    private final org.apache.lucene.search.Scorer[] mmStack;
    private int doc;
    protected int nrMatchers;
    private double score;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.search.Weight, java.util.List, int) throws java.io.IOException
    {
        boolean $z0, $z1;
        org.apache.lucene.search.Scorer $r12, $r15;
        org.apache.lucene.search.Scorer[] $r3, $r5, $r7, $r8, $r9, $r11, $r13, $r14, $r16;
        java.util.List r2;
        org.apache.lucene.search.MinShouldMatchSumScorer$1 $r21;
        java.lang.Object[] $r4;
        org.apache.lucene.search.Weight r1;
        java.lang.AssertionError $r22;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, $i22, $i24;
        java.lang.IllegalArgumentException $r19, $r20;
        org.apache.lucene.search.MinShouldMatchSumScorer r0;

        r0 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        r1 := @parameter0: org.apache.lucene.search.Weight;

        r2 := @parameter1: java.util.List;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.search.Scorer: void <init>(org.apache.lucene.search.Weight)>(r1);

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int sortedSubScorersIdx> = 0;

        $i22 = (int) -1;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int doc> = $i22;

        $i24 = (int) -1;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrMatchers> = $i24;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: double score> = #NaN;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int numScorers> = $i0;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap> = $i0;

        if i1 > 0 goto label1;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Minimum nr of matchers must be positive");

        throw $r19;

     label1:
        $i2 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int numScorers>;

        if $i2 > 1 goto label2;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("There must be at least 2 subScorers");

        throw $r20;

     label2:
        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm> = i1;

        $i3 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int numScorers>;

        $r3 = newarray (org.apache.lucene.search.Scorer)[$i3];

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.lucene.search.Scorer[]) $r4;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] sortedSubScorers> = $r5;

        $r7 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] sortedSubScorers>;

        $r21 = new org.apache.lucene.search.MinShouldMatchSumScorer$1;

        specialinvoke $r21.<org.apache.lucene.search.MinShouldMatchSumScorer$1: void <init>(org.apache.lucene.search.MinShouldMatchSumScorer)>(r0);

        staticinvoke <org.apache.lucene.util.ArrayUtil: void mergeSort(java.lang.Object[],java.util.Comparator)>($r7, $r21);

        $i4 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        $i5 = $i4 - 1;

        $r8 = newarray (org.apache.lucene.search.Scorer)[$i5];

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] mmStack> = $r8;

        i19 = 0;

     label3:
        $i6 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        $i7 = $i6 - 1;

        if i19 >= $i7 goto label4;

        $r16 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] mmStack>;

        $r14 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] sortedSubScorers>;

        $r15 = $r14[i19];

        $r16[i19] = $r15;

        i19 = i19 + 1;

        goto label3;

     label4:
        $i10 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap>;

        $i8 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        $i9 = $i8 - 1;

        $i11 = $i10 - $i9;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap> = $i11;

        $i12 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        $i13 = $i12 - 1;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int sortedSubScorersIdx> = $i13;

        $i14 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap>;

        $r9 = newarray (org.apache.lucene.search.Scorer)[$i14];

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers> = $r9;

        i20 = 0;

     label5:
        $i15 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap>;

        if i20 >= $i15 goto label6;

        $r13 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r11 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] sortedSubScorers>;

        $i16 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        $i17 = $i16 - 1;

        $i18 = $i17 + i20;

        $r12 = $r11[$i18];

        $r13[i20] = $r12;

        i20 = i20 + 1;

        goto label5;

     label6:
        virtualinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: void minheapHeapify()>();

        $z0 = <org.apache.lucene.search.MinShouldMatchSumScorer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label7;

        $z1 = virtualinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: boolean minheapCheck()>();

        if $z1 != 0 goto label7;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label7:
        return;
    }

    public void <init>(org.apache.lucene.search.Weight, java.util.List) throws java.io.IOException
    {
        org.apache.lucene.search.Weight r1;
        java.util.List r2;
        org.apache.lucene.search.MinShouldMatchSumScorer r0;

        r0 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        r1 := @parameter0: org.apache.lucene.search.Weight;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: void <init>(org.apache.lucene.search.Weight,java.util.List,int)>(r1, r2, 1);

        return;
    }

    public final java.util.Collection getChildren()
    {
        org.apache.lucene.search.Scorer $r4;
        java.util.ArrayList $r0;
        org.apache.lucene.search.Scorer[] $r3;
        org.apache.lucene.search.Scorer$ChildScorer $r2;
        org.apache.lucene.search.MinShouldMatchSumScorer r1;
        int $i0, $i1, i2;

        r1 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        $r0 = new java.util.ArrayList;

        $i0 = r1.<org.apache.lucene.search.MinShouldMatchSumScorer: int numScorers>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        i2 = 0;

     label1:
        $i1 = r1.<org.apache.lucene.search.MinShouldMatchSumScorer: int numScorers>;

        if i2 >= $i1 goto label2;

        $r2 = new org.apache.lucene.search.Scorer$ChildScorer;

        $r3 = r1.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r4 = $r3[i2];

        specialinvoke $r2.<org.apache.lucene.search.Scorer$ChildScorer: void <init>(org.apache.lucene.search.Scorer,java.lang.String)>($r4, "SHOULD");

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public int nextDoc() throws java.io.IOException
    {
        java.lang.AssertionError $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0;
        org.apache.lucene.search.Scorer $r2, $r5;
        org.apache.lucene.search.Scorer[] $r1, $r4;
        org.apache.lucene.search.MinShouldMatchSumScorer r0;

        r0 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        $z0 = <org.apache.lucene.search.MinShouldMatchSumScorer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i8 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int doc>;

        if $i8 != 2147483647 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r4 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r5 = $r4[0];

        $i9 = virtualinvoke $r5.<org.apache.lucene.search.Scorer: int docID()>();

        $i10 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int doc>;

        if $i9 != $i10 goto label3;

        $r1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r2 = $r1[0];

        $i3 = virtualinvoke $r2.<org.apache.lucene.search.Scorer: int nextDoc()>();

        if $i3 == 2147483647 goto label2;

        virtualinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: void minheapSiftDown(int)>(0);

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: void minheapRemoveRoot()>();

        $i4 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int numScorers>;

        $i5 = $i4 - 1;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int numScorers> = $i5;

        $i7 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int numScorers>;

        $i6 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        if $i7 >= $i6 goto label1;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int doc> = 2147483647;

        return 2147483647;

     label3:
        specialinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: void evaluateSmallestDocInHeap()>();

        $i1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrMatchers>;

        $i0 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        if $i1 < $i0 goto label1;

        goto label4;

     label4:
        $i2 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int doc>;

        return $i2;
    }

    private void evaluateSmallestDocInHeap() throws java.io.IOException
    {
        boolean $z0;
        org.apache.lucene.search.Scorer $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r19;
        org.apache.lucene.search.Scorer[] $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r16, $r17, $r18;
        float $f0, $f1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, i32, $i33, $i34, $i36;
        double $d0, $d1, $d2, $d3;
        org.apache.lucene.search.MinShouldMatchSumScorer r0;

        r0 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        $r1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r2 = $r1[0];

        $i0 = virtualinvoke $r2.<org.apache.lucene.search.Scorer: int docID()>();

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int doc> = $i0;

        $i1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int doc>;

        if $i1 != 2147483647 goto label01;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrMatchers> = 2147483647;

        return;

     label01:
        $r3 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r4 = $r3[0];

        $f0 = virtualinvoke $r4.<org.apache.lucene.search.Scorer: float score()>();

        $d0 = (double) $f0;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: double score> = $d0;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrMatchers> = 1;

        specialinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: void countMatches(int)>(1);

        specialinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: void countMatches(int)>(2);

        $i2 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        i32 = $i2 - 2;

     label02:
        if i32 < 0 goto label10;

        $r5 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] mmStack>;

        $r6 = $r5[i32];

        $i3 = virtualinvoke $r6.<org.apache.lucene.search.Scorer: int docID()>();

        $i4 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int doc>;

        if $i3 >= $i4 goto label03;

        $r11 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] mmStack>;

        $r12 = $r11[i32];

        $i12 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int doc>;

        $i13 = virtualinvoke $r12.<org.apache.lucene.search.Scorer: int advance(int)>($i12);

        if $i13 == 2147483647 goto label05;

     label03:
        $r7 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] mmStack>;

        $r8 = $r7[i32];

        $i5 = virtualinvoke $r8.<org.apache.lucene.search.Scorer: int docID()>();

        $i6 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int doc>;

        if $i5 != $i6 goto label04;

        $i10 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrMatchers>;

        $i11 = $i10 + 1;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrMatchers> = $i11;

        $d1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: double score>;

        $r9 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] mmStack>;

        $r10 = $r9[i32];

        $f1 = virtualinvoke $r10.<org.apache.lucene.search.Scorer: float score()>();

        $d2 = (double) $f1;

        $d3 = $d1 + $d2;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: double score> = $d3;

        goto label09;

     label04:
        $i7 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrMatchers>;

        $i9 = $i7 + i32;

        $i8 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        if $i9 >= $i8 goto label09;

        return;

     label05:
        $i14 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int numScorers>;

        $i15 = $i14 - 1;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int numScorers> = $i15;

        $i17 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int numScorers>;

        $i16 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        if $i17 >= $i16 goto label06;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int doc> = 2147483647;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrMatchers> = 2147483647;

        return;

     label06:
        $i18 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        $i19 = $i18 - 2;

        $i20 = $i19 - i32;

        if $i20 <= 0 goto label07;

        $r17 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] mmStack>;

        $i31 = i32 + 1;

        $r16 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] mmStack>;

        $i28 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        $i29 = $i28 - 2;

        $i30 = $i29 - i32;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r17, $i31, $r16, i32, $i30);

     label07:
        $r18 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] sortedSubScorers>;

        $i33 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int sortedSubScorersIdx>;

        $i34 = $i33 + 1;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int sortedSubScorersIdx> = $i34;

        $r19 = $r18[$i33];

        $z0 = virtualinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: boolean minheapRemove(org.apache.lucene.search.Scorer)>($r19);

        if $z0 != 0 goto label08;

        goto label07;

     label08:
        $r15 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] mmStack>;

        $i21 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        $i24 = $i21 - 2;

        $r13 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] sortedSubScorers>;

        $i22 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int sortedSubScorersIdx>;

        $i23 = $i22 - 1;

        $r14 = $r13[$i23];

        $r15[$i24] = $r14;

        $i25 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrMatchers>;

        $i27 = $i25 + i32;

        $i26 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        if $i27 >= $i26 goto label09;

        return;

     label09:
        $i36 = (int) -1;

        i32 = i32 + $i36;

        goto label02;

     label10:
        return;
    }

    private void countMatches(int) throws java.io.IOException
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        double $d0, $d1, $d2;
        org.apache.lucene.search.Scorer $r2, $r4;
        org.apache.lucene.search.Scorer[] $r1, $r3;
        org.apache.lucene.search.MinShouldMatchSumScorer r0;
        float $f0;

        r0 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap>;

        if i0 >= $i1 goto label1;

        $r1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r2 = $r1[i0];

        $i2 = virtualinvoke $r2.<org.apache.lucene.search.Scorer: int docID()>();

        $i3 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int doc>;

        if $i2 != $i3 goto label1;

        $i4 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrMatchers>;

        $i5 = $i4 + 1;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrMatchers> = $i5;

        $d0 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: double score>;

        $r3 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r4 = $r3[i0];

        $f0 = virtualinvoke $r4.<org.apache.lucene.search.Scorer: float score()>();

        $d1 = (double) $f0;

        $d2 = $d0 + $d1;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: double score> = $d2;

        $i6 = i0 << 1;

        $i7 = $i6 + 1;

        specialinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: void countMatches(int)>($i7);

        $i8 = i0 << 1;

        $i9 = $i8 + 2;

        specialinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: void countMatches(int)>($i9);

     label1:
        return;
    }

    public float score() throws java.io.IOException
    {
        float $f0;
        org.apache.lucene.search.MinShouldMatchSumScorer r0;
        double $d0;

        r0 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        $d0 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: double score>;

        $f0 = (float) $d0;

        return $f0;
    }

    public int docID()
    {
        int $i0;
        org.apache.lucene.search.MinShouldMatchSumScorer r0;

        r0 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        $i0 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int doc>;

        return $i0;
    }

    public int freq() throws java.io.IOException
    {
        int $i0;
        org.apache.lucene.search.MinShouldMatchSumScorer r0;

        r0 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        $i0 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrMatchers>;

        return $i0;
    }

    public int advance(int) throws java.io.IOException
    {
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.apache.lucene.search.Scorer $r2, $r4;
        org.apache.lucene.search.Scorer[] $r1, $r3;
        org.apache.lucene.search.MinShouldMatchSumScorer r0;

        r0 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        i2 := @parameter0: int;

        $i1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int numScorers>;

        $i0 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        if $i1 >= $i0 goto label1;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int doc> = 2147483647;

        return 2147483647;

     label1:
        $r3 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r4 = $r3[0];

        $i12 = virtualinvoke $r4.<org.apache.lucene.search.Scorer: int docID()>();

        if $i12 >= i2 goto label3;

        $r1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r2 = $r1[0];

        $i7 = virtualinvoke $r2.<org.apache.lucene.search.Scorer: int advance(int)>(i2);

        if $i7 == 2147483647 goto label2;

        virtualinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: void minheapSiftDown(int)>(0);

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: void minheapRemoveRoot()>();

        $i8 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int numScorers>;

        $i9 = $i8 - 1;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int numScorers> = $i9;

        $i11 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int numScorers>;

        $i10 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        if $i11 >= $i10 goto label1;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int doc> = 2147483647;

        return 2147483647;

     label3:
        specialinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: void evaluateSmallestDocInHeap()>();

        $i4 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrMatchers>;

        $i3 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        if $i4 < $i3 goto label4;

        $i6 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int doc>;

        return $i6;

     label4:
        $i5 = virtualinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nextDoc()>();

        return $i5;
    }

    public long cost()
    {
        long $l3, $l4, l5;
        int $i0, $i1, $i2, i6;
        org.apache.lucene.search.Scorer $r2;
        org.apache.lucene.search.Scorer[] $r1;
        org.apache.lucene.search.MinShouldMatchSumScorer r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;

        r0 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        l5 = 0L;

        i6 = 0;

     label1:
        $i0 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap>;

        if i6 >= $i0 goto label2;

        $r1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r2 = $r1[i6];

        $l4 = virtualinvoke $r2.<org.apache.lucene.search.Scorer: long cost()>();

        l5 = l5 + $l4;

        i6 = i6 + 1;

        goto label1;

     label2:
        $f0 = (float) l5;

        $f5 = 1.0F * $f0;

        $f1 = (float) l5;

        $f3 = 1.0F * $f1;

        $i1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int mm>;

        $i2 = $i1 - 1;

        $f2 = (float) $i2;

        $f4 = $f3 * $f2;

        $f6 = $f5 + $f4;

        $l3 = (long) $f6;

        return $l3;
    }

    protected final void minheapHeapify()
    {
        org.apache.lucene.search.MinShouldMatchSumScorer r0;
        int $i0, $i1, i2, $i4;

        r0 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        $i0 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap>;

        $i1 = $i0 >> 1;

        i2 = $i1 - 1;

     label1:
        if i2 < 0 goto label2;

        virtualinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: void minheapSiftDown(int)>(i2);

        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label2:
        return;
    }

    protected final void minheapSiftDown(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, i9, $i10, i11, i12;
        org.apache.lucene.search.Scorer r2, r4, r12;
        org.apache.lucene.search.Scorer[] $r1, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        org.apache.lucene.search.MinShouldMatchSumScorer r0;

        r0 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        r2 = $r1[i0];

        $i1 = virtualinvoke r2.<org.apache.lucene.search.Scorer: int docID()>();

        i11 = i0;

     label1:
        $i2 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap>;

        $i3 = $i2 >> 1;

        $i4 = $i3 - 1;

        if i11 > $i4 goto label7;

        $i5 = i11 << 1;

        i6 = $i5 + 1;

        $r3 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        r4 = $r3[i6];

        $i7 = virtualinvoke r4.<org.apache.lucene.search.Scorer: int docID()>();

        i12 = 2147483647;

        $i8 = i11 << 1;

        i9 = $i8 + 2;

        r12 = null;

        $i10 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap>;

        if i9 >= $i10 goto label2;

        $r11 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        r12 = $r11[i9];

        i12 = virtualinvoke r12.<org.apache.lucene.search.Scorer: int docID()>();

     label2:
        if $i7 >= $i1 goto label4;

        if i12 >= $i7 goto label3;

        $r9 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r9[i11] = r12;

        $r10 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r10[i9] = r2;

        i11 = i9;

        goto label6;

     label3:
        $r7 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r7[i11] = r4;

        $r8 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r8[i6] = r2;

        i11 = i6;

        goto label6;

     label4:
        if i12 >= $i1 goto label5;

        $r5 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r5[i11] = r12;

        $r6 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r6[i9] = r2;

        i11 = i9;

        goto label6;

     label5:
        return;

     label6:
        goto label1;

     label7:
        return;
    }

    protected final void minheapSiftUp(int)
    {
        org.apache.lucene.search.Scorer r2, r5, $r7;
        org.apache.lucene.search.Scorer[] $r1, $r3, $r4, $r6, $r8;
        org.apache.lucene.search.MinShouldMatchSumScorer r0;
        int $i0, $i1, i2, $i3, i4;

        r0 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        i4 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        r2 = $r1[i4];

        $i0 = virtualinvoke r2.<org.apache.lucene.search.Scorer: int docID()>();

     label1:
        if i4 <= 0 goto label2;

        $i1 = i4 - 1;

        i2 = $i1 >> 1;

        $r4 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        r5 = $r4[i2];

        $i3 = virtualinvoke r5.<org.apache.lucene.search.Scorer: int docID()>();

        if $i3 <= $i0 goto label2;

        $r8 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r6 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r7 = $r6[i2];

        $r8[i4] = $r7;

        i4 = i2;

        goto label1;

     label2:
        $r3 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r3[i4] = r2;

        return;
    }

    protected final void minheapRemoveRoot()
    {
        org.apache.lucene.search.Scorer $r2;
        org.apache.lucene.search.Scorer[] $r1, $r3;
        org.apache.lucene.search.MinShouldMatchSumScorer r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        $i0 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap>;

        if $i0 != 1 goto label1;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap> = 0;

        goto label2;

     label1:
        $i1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap>;

        $i2 = $i1 - 1;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap> = $i2;

        $r3 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $i3 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap>;

        $r2 = $r1[$i3];

        $r3[0] = $r2;

        virtualinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: void minheapSiftDown(int)>(0);

     label2:
        return;
    }

    protected final boolean minheapRemove(org.apache.lucene.search.Scorer)
    {
        org.apache.lucene.search.Scorer r2, $r3, $r6;
        org.apache.lucene.search.Scorer[] $r1, $r4, $r5;
        org.apache.lucene.search.MinShouldMatchSumScorer r0;
        int $i0, $i1, $i2, i3;

        r0 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        r2 := @parameter0: org.apache.lucene.search.Scorer;

        i3 = 0;

     label1:
        $i0 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap>;

        if i3 >= $i0 goto label3;

        $r1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r3 = $r1[i3];

        if $r3 != r2 goto label2;

        $r4 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r5 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $i1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap>;

        $i2 = $i1 - 1;

        r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap> = $i2;

        $r6 = $r5[$i2];

        $r4[i3] = $r6;

        virtualinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: void minheapSiftUp(int)>(i3);

        virtualinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: void minheapSiftDown(int)>(i3);

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    boolean minheapCheck()
    {
        org.apache.lucene.search.MinShouldMatchSumScorer r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        $z0 = specialinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: boolean minheapCheck(int)>(0);

        return $z0;
    }

    private boolean minheapCheck(int)
    {
        int i0, $i1, $i2, i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0, $z1, $z2;
        org.apache.lucene.search.Scorer $r2, $r4, $r6, $r8;
        org.apache.lucene.search.Scorer[] $r1, $r3, $r5, $r7;
        org.apache.lucene.search.MinShouldMatchSumScorer r0;

        r0 := @this: org.apache.lucene.search.MinShouldMatchSumScorer;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap>;

        if i0 < $i1 goto label1;

        return 1;

     label1:
        $i2 = i0 << 1;

        i3 = $i2 + 1;

        $i4 = i0 << 1;

        i5 = $i4 + 2;

        $i6 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap>;

        if i3 >= $i6 goto label2;

        $r5 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r6 = $r5[i0];

        $i10 = virtualinvoke $r6.<org.apache.lucene.search.Scorer: int docID()>();

        $r7 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r8 = $r7[i3];

        $i11 = virtualinvoke $r8.<org.apache.lucene.search.Scorer: int docID()>();

        if $i10 <= $i11 goto label2;

        return 0;

     label2:
        $i7 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: int nrInHeap>;

        if i5 >= $i7 goto label3;

        $r1 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r2 = $r1[i0];

        $i8 = virtualinvoke $r2.<org.apache.lucene.search.Scorer: int docID()>();

        $r3 = r0.<org.apache.lucene.search.MinShouldMatchSumScorer: org.apache.lucene.search.Scorer[] subScorers>;

        $r4 = $r3[i5];

        $i9 = virtualinvoke $r4.<org.apache.lucene.search.Scorer: int docID()>();

        if $i8 <= $i9 goto label3;

        return 0;

     label3:
        $z0 = specialinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: boolean minheapCheck(int)>(i3);

        if $z0 == 0 goto label4;

        $z1 = specialinvoke r0.<org.apache.lucene.search.MinShouldMatchSumScorer: boolean minheapCheck(int)>(i5);

        if $z1 == 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/search/MinShouldMatchSumScorer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.MinShouldMatchSumScorer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
