public class org.mozilla.javascript.tools.debugger.Main extends java.lang.Object implements org.mozilla.javascript.ContextListener
{
    private org.mozilla.javascript.tools.debugger.Dim dim;
    private org.mozilla.javascript.tools.debugger.SwingGui debugGui;

    public void <init>(java.lang.String)
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        java.lang.String r3;
        org.mozilla.javascript.tools.debugger.Dim $r1, $r4;
        org.mozilla.javascript.tools.debugger.SwingGui $r2;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        r3 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.mozilla.javascript.tools.debugger.Dim;

        specialinvoke $r1.<org.mozilla.javascript.tools.debugger.Dim: void <init>()>();

        r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.Dim dim> = $r1;

        $r2 = new org.mozilla.javascript.tools.debugger.SwingGui;

        $r4 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.Dim dim>;

        specialinvoke $r2.<org.mozilla.javascript.tools.debugger.SwingGui: void <init>(org.mozilla.javascript.tools.debugger.Dim,java.lang.String)>($r4, r3);

        r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.SwingGui debugGui> = $r2;

        return;
    }

    public javax.swing.JFrame getDebugFrame()
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        org.mozilla.javascript.tools.debugger.SwingGui $r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        return $r1;
    }

    public void doBreak()
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        org.mozilla.javascript.tools.debugger.Dim $r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.Dim dim>;

        virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.Dim: void setBreak()>();

        return;
    }

    public void setBreakOnExceptions(boolean)
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        org.mozilla.javascript.tools.debugger.Menubar $r3;
        org.mozilla.javascript.tools.debugger.Dim $r1;
        boolean z0;
        org.mozilla.javascript.tools.debugger.SwingGui $r2;
        javax.swing.JCheckBoxMenuItem $r4;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.Dim dim>;

        virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.Dim: void setBreakOnExceptions(boolean)>(z0);

        $r2 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.SwingGui: org.mozilla.javascript.tools.debugger.Menubar getMenubar()>();

        $r4 = virtualinvoke $r3.<org.mozilla.javascript.tools.debugger.Menubar: javax.swing.JCheckBoxMenuItem getBreakOnExceptions()>();

        virtualinvoke $r4.<javax.swing.JCheckBoxMenuItem: void setSelected(boolean)>(z0);

        return;
    }

    public void setBreakOnEnter(boolean)
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        org.mozilla.javascript.tools.debugger.Menubar $r3;
        org.mozilla.javascript.tools.debugger.Dim $r1;
        boolean z0;
        org.mozilla.javascript.tools.debugger.SwingGui $r2;
        javax.swing.JCheckBoxMenuItem $r4;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.Dim dim>;

        virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.Dim: void setBreakOnEnter(boolean)>(z0);

        $r2 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.SwingGui: org.mozilla.javascript.tools.debugger.Menubar getMenubar()>();

        $r4 = virtualinvoke $r3.<org.mozilla.javascript.tools.debugger.Menubar: javax.swing.JCheckBoxMenuItem getBreakOnEnter()>();

        virtualinvoke $r4.<javax.swing.JCheckBoxMenuItem: void setSelected(boolean)>(z0);

        return;
    }

    public void setBreakOnReturn(boolean)
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        org.mozilla.javascript.tools.debugger.Menubar $r3;
        org.mozilla.javascript.tools.debugger.Dim $r1;
        boolean z0;
        org.mozilla.javascript.tools.debugger.SwingGui $r2;
        javax.swing.JCheckBoxMenuItem $r4;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.Dim dim>;

        virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.Dim: void setBreakOnReturn(boolean)>(z0);

        $r2 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.SwingGui: org.mozilla.javascript.tools.debugger.Menubar getMenubar()>();

        $r4 = virtualinvoke $r3.<org.mozilla.javascript.tools.debugger.Menubar: javax.swing.JCheckBoxMenuItem getBreakOnReturn()>();

        virtualinvoke $r4.<javax.swing.JCheckBoxMenuItem: void setSelected(boolean)>(z0);

        return;
    }

    public void clearAllBreakpoints()
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        org.mozilla.javascript.tools.debugger.Dim $r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.Dim dim>;

        virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.Dim: void clearAllBreakpoints()>();

        return;
    }

    public void go()
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        org.mozilla.javascript.tools.debugger.Dim $r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.Dim dim>;

        virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.Dim: void go()>();

        return;
    }

    public void setScope(org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable r1;
        org.mozilla.javascript.tools.debugger.Main r0;
        org.mozilla.javascript.tools.debugger.ScopeProvider $r2;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        $r2 = staticinvoke <org.mozilla.javascript.tools.debugger.Main$IProxy: org.mozilla.javascript.tools.debugger.ScopeProvider newScopeProvider(org.mozilla.javascript.Scriptable)>(r1);

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.Main: void setScopeProvider(org.mozilla.javascript.tools.debugger.ScopeProvider)>($r2);

        return;
    }

    public void setScopeProvider(org.mozilla.javascript.tools.debugger.ScopeProvider)
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        org.mozilla.javascript.tools.debugger.ScopeProvider r1;
        org.mozilla.javascript.tools.debugger.Dim $r2;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        r1 := @parameter0: org.mozilla.javascript.tools.debugger.ScopeProvider;

        $r2 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.Dim dim>;

        virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.Dim: void setScopeProvider(org.mozilla.javascript.tools.debugger.ScopeProvider)>(r1);

        return;
    }

    public void setExitAction(java.lang.Runnable)
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        java.lang.Runnable r1;
        org.mozilla.javascript.tools.debugger.SwingGui $r2;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.SwingGui: void setExitAction(java.lang.Runnable)>(r1);

        return;
    }

    public java.io.InputStream getIn()
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        org.mozilla.javascript.tools.debugger.JSInternalConsole $r2;
        org.mozilla.javascript.tools.debugger.SwingGui $r1;
        java.io.InputStream $r3;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.SwingGui: org.mozilla.javascript.tools.debugger.JSInternalConsole getConsole()>();

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.JSInternalConsole: java.io.InputStream getIn()>();

        return $r3;
    }

    public java.io.PrintStream getOut()
    {
        java.io.PrintStream $r3;
        org.mozilla.javascript.tools.debugger.Main r0;
        org.mozilla.javascript.tools.debugger.JSInternalConsole $r2;
        org.mozilla.javascript.tools.debugger.SwingGui $r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.SwingGui: org.mozilla.javascript.tools.debugger.JSInternalConsole getConsole()>();

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.JSInternalConsole: java.io.PrintStream getOut()>();

        return $r3;
    }

    public java.io.PrintStream getErr()
    {
        java.io.PrintStream $r3;
        org.mozilla.javascript.tools.debugger.Main r0;
        org.mozilla.javascript.tools.debugger.JSInternalConsole $r2;
        org.mozilla.javascript.tools.debugger.SwingGui $r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.SwingGui: org.mozilla.javascript.tools.debugger.JSInternalConsole getConsole()>();

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.JSInternalConsole: java.io.PrintStream getErr()>();

        return $r3;
    }

    public void pack()
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        org.mozilla.javascript.tools.debugger.SwingGui $r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.SwingGui: void pack()>();

        return;
    }

    public void setSize(int, int)
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        int i0, i1;
        org.mozilla.javascript.tools.debugger.SwingGui $r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.SwingGui: void setSize(int,int)>(i0, i1);

        return;
    }

    public void setVisible(boolean)
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        boolean z0;
        org.mozilla.javascript.tools.debugger.SwingGui $r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.SwingGui: void setVisible(boolean)>(z0);

        return;
    }

    public boolean isVisible()
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        org.mozilla.javascript.tools.debugger.SwingGui $r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        $z0 = virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.SwingGui: boolean isVisible()>();

        return $z0;
    }

    public void dispose()
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        org.mozilla.javascript.tools.debugger.Dim $r1;
        org.mozilla.javascript.tools.debugger.SwingGui $r2;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.Main: void clearAllBreakpoints()>();

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.Dim dim>;

        virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.Dim: void go()>();

        $r2 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.SwingGui: void dispose()>();

        r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.Dim dim> = null;

        return;
    }

    public void attachTo(org.mozilla.javascript.ContextFactory)
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        org.mozilla.javascript.ContextFactory r1;
        org.mozilla.javascript.tools.debugger.Dim $r2;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        r1 := @parameter0: org.mozilla.javascript.ContextFactory;

        $r2 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.Dim dim>;

        virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.Dim: void attachTo(org.mozilla.javascript.ContextFactory)>(r1);

        return;
    }

    public void detach()
    {
        org.mozilla.javascript.tools.debugger.Main r0;
        org.mozilla.javascript.tools.debugger.Dim $r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.Dim dim>;

        virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.Dim: void detach()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.io.PrintStream $r3, $r4, $r7, $r8;
        org.mozilla.javascript.tools.debugger.Main $r0;
        java.lang.String[] r10;
        org.mozilla.javascript.tools.debugger.Main$IProxy $r1;
        org.mozilla.javascript.tools.shell.Global $r5;
        org.mozilla.javascript.tools.shell.ShellContextFactory $r9;
        java.io.InputStream $r2, $r6;

        r10 := @parameter0: java.lang.String[];

        $r0 = new org.mozilla.javascript.tools.debugger.Main;

        specialinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: void <init>(java.lang.String)>("Rhino JavaScript Debugger");

        virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: void doBreak()>();

        $r1 = new org.mozilla.javascript.tools.debugger.Main$IProxy;

        specialinvoke $r1.<org.mozilla.javascript.tools.debugger.Main$IProxy: void <init>(int)>(1);

        virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: void setExitAction(java.lang.Runnable)>($r1);

        $r2 = virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: java.io.InputStream getIn()>();

        staticinvoke <java.lang.System: void setIn(java.io.InputStream)>($r2);

        $r3 = virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: java.io.PrintStream getOut()>();

        staticinvoke <java.lang.System: void setOut(java.io.PrintStream)>($r3);

        $r4 = virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: java.io.PrintStream getErr()>();

        staticinvoke <java.lang.System: void setErr(java.io.PrintStream)>($r4);

        $r5 = staticinvoke <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global getGlobal()>();

        $r6 = virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: java.io.InputStream getIn()>();

        virtualinvoke $r5.<org.mozilla.javascript.tools.shell.Global: void setIn(java.io.InputStream)>($r6);

        $r7 = virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: java.io.PrintStream getOut()>();

        virtualinvoke $r5.<org.mozilla.javascript.tools.shell.Global: void setOut(java.io.PrintStream)>($r7);

        $r8 = virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: java.io.PrintStream getErr()>();

        virtualinvoke $r5.<org.mozilla.javascript.tools.shell.Global: void setErr(java.io.PrintStream)>($r8);

        $r9 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.ShellContextFactory shellContextFactory>;

        virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: void attachTo(org.mozilla.javascript.ContextFactory)>($r9);

        virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: void setScope(org.mozilla.javascript.Scriptable)>($r5);

        virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: void pack()>();

        virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: void setSize(int,int)>(600, 460);

        virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: void setVisible(boolean)>(1);

        staticinvoke <org.mozilla.javascript.tools.shell.Main: int exec(java.lang.String[])>(r10);

        return;
    }

    public static void mainEmbedded(java.lang.String)
    {
        org.mozilla.javascript.tools.shell.Global $r1;
        java.lang.String r2;
        org.mozilla.javascript.ContextFactory $r0;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.mozilla.javascript.ContextFactory: org.mozilla.javascript.ContextFactory getGlobal()>();

        $r1 = new org.mozilla.javascript.tools.shell.Global;

        specialinvoke $r1.<org.mozilla.javascript.tools.shell.Global: void <init>()>();

        virtualinvoke $r1.<org.mozilla.javascript.tools.shell.Global: void init(org.mozilla.javascript.ContextFactory)>($r0);

        staticinvoke <org.mozilla.javascript.tools.debugger.Main: void mainEmbedded(org.mozilla.javascript.ContextFactory,org.mozilla.javascript.Scriptable,java.lang.String)>($r0, $r1, r2);

        return;
    }

    public static void mainEmbedded(org.mozilla.javascript.ContextFactory, org.mozilla.javascript.Scriptable, java.lang.String)
    {
        org.mozilla.javascript.Scriptable r1;
        java.lang.String r2;
        org.mozilla.javascript.ContextFactory r0;

        r0 := @parameter0: org.mozilla.javascript.ContextFactory;

        r1 := @parameter1: org.mozilla.javascript.Scriptable;

        r2 := @parameter2: java.lang.String;

        staticinvoke <org.mozilla.javascript.tools.debugger.Main: void mainEmbeddedImpl(org.mozilla.javascript.ContextFactory,java.lang.Object,java.lang.String)>(r0, r1, r2);

        return;
    }

    public static void mainEmbedded(org.mozilla.javascript.ContextFactory, org.mozilla.javascript.tools.debugger.ScopeProvider, java.lang.String)
    {
        java.lang.String r2;
        org.mozilla.javascript.ContextFactory r0;
        org.mozilla.javascript.tools.debugger.ScopeProvider r1;

        r0 := @parameter0: org.mozilla.javascript.ContextFactory;

        r1 := @parameter1: org.mozilla.javascript.tools.debugger.ScopeProvider;

        r2 := @parameter2: java.lang.String;

        staticinvoke <org.mozilla.javascript.tools.debugger.Main: void mainEmbeddedImpl(org.mozilla.javascript.ContextFactory,java.lang.Object,java.lang.String)>(r0, r1, r2);

        return;
    }

    private static void mainEmbeddedImpl(org.mozilla.javascript.ContextFactory, java.lang.Object, java.lang.String)
    {
        java.io.PrintStream $r7, $r8;
        org.mozilla.javascript.tools.debugger.Main $r0;
        org.mozilla.javascript.tools.debugger.ScopeProvider $r9;
        org.mozilla.javascript.tools.debugger.Main$IProxy $r1;
        org.mozilla.javascript.tools.shell.Global r5;
        org.mozilla.javascript.Scriptable r4;
        java.lang.Object r3;
        java.lang.String r10;
        org.mozilla.javascript.ContextFactory r2;
        boolean $z0, $z1;
        java.io.InputStream $r6;

        r2 := @parameter0: org.mozilla.javascript.ContextFactory;

        r3 := @parameter1: java.lang.Object;

        r10 := @parameter2: java.lang.String;

        if r10 != null goto label1;

        r10 = "Rhino JavaScript Debugger (embedded usage)";

     label1:
        $r0 = new org.mozilla.javascript.tools.debugger.Main;

        specialinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: void <init>(java.lang.String)>(r10);

        virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: void doBreak()>();

        $r1 = new org.mozilla.javascript.tools.debugger.Main$IProxy;

        specialinvoke $r1.<org.mozilla.javascript.tools.debugger.Main$IProxy: void <init>(int)>(1);

        virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: void setExitAction(java.lang.Runnable)>($r1);

        virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: void attachTo(org.mozilla.javascript.ContextFactory)>(r2);

        $z0 = r3 instanceof org.mozilla.javascript.tools.debugger.ScopeProvider;

        if $z0 == 0 goto label2;

        $r9 = (org.mozilla.javascript.tools.debugger.ScopeProvider) r3;

        virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: void setScopeProvider(org.mozilla.javascript.tools.debugger.ScopeProvider)>($r9);

        goto label4;

     label2:
        r4 = (org.mozilla.javascript.Scriptable) r3;

        $z1 = r4 instanceof org.mozilla.javascript.tools.shell.Global;

        if $z1 == 0 goto label3;

        r5 = (org.mozilla.javascript.tools.shell.Global) r4;

        $r6 = virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: java.io.InputStream getIn()>();

        virtualinvoke r5.<org.mozilla.javascript.tools.shell.Global: void setIn(java.io.InputStream)>($r6);

        $r7 = virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: java.io.PrintStream getOut()>();

        virtualinvoke r5.<org.mozilla.javascript.tools.shell.Global: void setOut(java.io.PrintStream)>($r7);

        $r8 = virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: java.io.PrintStream getErr()>();

        virtualinvoke r5.<org.mozilla.javascript.tools.shell.Global: void setErr(java.io.PrintStream)>($r8);

     label3:
        virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: void setScope(org.mozilla.javascript.Scriptable)>(r4);

     label4:
        virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: void pack()>();

        virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: void setSize(int,int)>(600, 460);

        virtualinvoke $r0.<org.mozilla.javascript.tools.debugger.Main: void setVisible(boolean)>(1);

        return;
    }

    public void setSize(java.awt.Dimension)
    {
        java.awt.Dimension r1;
        org.mozilla.javascript.tools.debugger.Main r0;
        int $i0, $i1;
        org.mozilla.javascript.tools.debugger.SwingGui $r2;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        r1 := @parameter0: java.awt.Dimension;

        $r2 = r0.<org.mozilla.javascript.tools.debugger.Main: org.mozilla.javascript.tools.debugger.SwingGui debugGui>;

        $i1 = r1.<java.awt.Dimension: int width>;

        $i0 = r1.<java.awt.Dimension: int height>;

        virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.SwingGui: void setSize(int,int)>($i1, $i0);

        return;
    }

    public void setOptimizationLevel(int)
    {
        int i0;
        org.mozilla.javascript.tools.debugger.Main r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Main;

        i0 := @parameter0: int;

        return;
    }

    public void contextEntered(org.mozilla.javascript.Context)
    {
        java.lang.IllegalStateException $r0;
        org.mozilla.javascript.tools.debugger.Main r1;
        org.mozilla.javascript.Context r2;

        r1 := @this: org.mozilla.javascript.tools.debugger.Main;

        r2 := @parameter0: org.mozilla.javascript.Context;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    public void contextExited(org.mozilla.javascript.Context)
    {
        java.lang.IllegalStateException $r0;
        org.mozilla.javascript.tools.debugger.Main r1;
        org.mozilla.javascript.Context r2;

        r1 := @this: org.mozilla.javascript.tools.debugger.Main;

        r2 := @parameter0: org.mozilla.javascript.Context;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    public void contextCreated(org.mozilla.javascript.Context)
    {
        java.lang.IllegalStateException $r0;
        org.mozilla.javascript.tools.debugger.Main r1;
        org.mozilla.javascript.Context r2;

        r1 := @this: org.mozilla.javascript.tools.debugger.Main;

        r2 := @parameter0: org.mozilla.javascript.Context;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    public void contextReleased(org.mozilla.javascript.Context)
    {
        java.lang.IllegalStateException $r0;
        org.mozilla.javascript.tools.debugger.Main r1;
        org.mozilla.javascript.Context r2;

        r1 := @this: org.mozilla.javascript.tools.debugger.Main;

        r2 := @parameter0: org.mozilla.javascript.Context;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }
}
