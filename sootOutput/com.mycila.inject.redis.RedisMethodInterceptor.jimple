public final class com.mycila.inject.redis.RedisMethodInterceptor extends java.lang.Object implements org.aopalliance.intercept.MethodInterceptor
{
    private static final java.util.logging.Logger LOGGER;
    redis.clients.jedis.JedisPool pool;

    private void <init>()
    {
        com.mycila.inject.redis.RedisMethodInterceptor r0;

        r0 := @this: com.mycila.inject.redis.RedisMethodInterceptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void bind(com.google.inject.Binder)
    {
        java.lang.Class[] $r1;
        org.aopalliance.intercept.MethodInterceptor[] $r5, $r8;
        com.google.inject.Binder r0;
        com.google.inject.matcher.Matcher $r3, $r4, $r6, $r7;
        com.mycila.inject.redis.RedisMethodInterceptor $r2;

        r0 := @parameter0: com.google.inject.Binder;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Lcom/mycila/inject/redis/Redis;";

        interfaceinvoke r0.<com.google.inject.Binder: void requestStaticInjection(java.lang.Class[])>($r1);

        $r2 = new com.mycila.inject.redis.RedisMethodInterceptor;

        specialinvoke $r2.<com.mycila.inject.redis.RedisMethodInterceptor: void <init>()>();

        interfaceinvoke r0.<com.google.inject.Binder: void requestInjection(java.lang.Object)>($r2);

        $r3 = staticinvoke <com.google.inject.matcher.Matchers: com.google.inject.matcher.Matcher any()>();

        $r4 = staticinvoke <com.google.inject.matcher.Matchers: com.google.inject.matcher.Matcher annotatedWith(java.lang.Class)>(class "Lcom/mycila/inject/redis/RedisCall;");

        $r5 = newarray (org.aopalliance.intercept.MethodInterceptor)[1];

        $r5[0] = $r2;

        interfaceinvoke r0.<com.google.inject.Binder: void bindInterceptor(com.google.inject.matcher.Matcher,com.google.inject.matcher.Matcher,org.aopalliance.intercept.MethodInterceptor[])>($r3, $r4, $r5);

        $r6 = staticinvoke <com.google.inject.matcher.Matchers: com.google.inject.matcher.Matcher annotatedWith(java.lang.Class)>(class "Lcom/mycila/inject/redis/RedisCall;");

        $r7 = staticinvoke <com.google.inject.matcher.Matchers: com.google.inject.matcher.Matcher any()>();

        $r8 = newarray (org.aopalliance.intercept.MethodInterceptor)[1];

        $r8[0] = $r2;

        interfaceinvoke r0.<com.google.inject.Binder: void bindInterceptor(com.google.inject.matcher.Matcher,com.google.inject.matcher.Matcher,org.aopalliance.intercept.MethodInterceptor[])>($r6, $r7, $r8);

        return;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.lang.Throwable $r13;
        java.util.logging.Level $r1, $r7, $r14;
        org.aopalliance.intercept.MethodInvocation r0;
        redis.clients.jedis.JedisPool $r4, $r9, $r16;
        boolean $z0, $z1, $z2, $z3;
        java.util.logging.Logger $r2, $r6, $r8, $r12, $r15, $r18;
        redis.clients.jedis.Jedis $r5, $r11, $r17;
        java.lang.Object $r10, $r19;
        com.mycila.inject.redis.RedisMethodInterceptor r3;

        r3 := @this: com.mycila.inject.redis.RedisMethodInterceptor;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $z0 = staticinvoke <com.mycila.inject.redis.Redis: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r8 = <com.mycila.inject.redis.RedisMethodInterceptor: java.util.logging.Logger LOGGER>;

        $r7 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z2 = virtualinvoke $r8.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r7);

        if $z2 == 0 goto label1;

        $r12 = <com.mycila.inject.redis.RedisMethodInterceptor: java.util.logging.Logger LOGGER>;

        virtualinvoke $r12.<java.util.logging.Logger: void fine(java.lang.String)>("Getting Redis connection from pool...");

     label1:
        $r9 = r3.<com.mycila.inject.redis.RedisMethodInterceptor: redis.clients.jedis.JedisPool pool>;

        $r10 = virtualinvoke $r9.<redis.clients.jedis.JedisPool: java.lang.Object getResource()>();

        $r11 = (redis.clients.jedis.Jedis) $r10;

        staticinvoke <com.mycila.inject.redis.Redis: void set(redis.clients.jedis.Jedis)>($r11);

     label2:
        $r19 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.Object proceed()>();

     label3:
        if $z0 == 0 goto label5;

        $r2 = <com.mycila.inject.redis.RedisMethodInterceptor: java.util.logging.Logger LOGGER>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z1 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z1 == 0 goto label4;

        $r6 = <com.mycila.inject.redis.RedisMethodInterceptor: java.util.logging.Logger LOGGER>;

        virtualinvoke $r6.<java.util.logging.Logger: void fine(java.lang.String)>("Returning Redis connection to pool...");

     label4:
        $r4 = r3.<com.mycila.inject.redis.RedisMethodInterceptor: redis.clients.jedis.JedisPool pool>;

        $r5 = staticinvoke <com.mycila.inject.redis.Redis: redis.clients.jedis.Jedis remove()>();

        virtualinvoke $r4.<redis.clients.jedis.JedisPool: void returnResource(java.lang.Object)>($r5);

     label5:
        return $r19;

     label6:
        $r13 := @caughtexception;

     label7:
        if $z0 == 0 goto label9;

        $r15 = <com.mycila.inject.redis.RedisMethodInterceptor: java.util.logging.Logger LOGGER>;

        $r14 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z3 = virtualinvoke $r15.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r14);

        if $z3 == 0 goto label8;

        $r18 = <com.mycila.inject.redis.RedisMethodInterceptor: java.util.logging.Logger LOGGER>;

        virtualinvoke $r18.<java.util.logging.Logger: void fine(java.lang.String)>("Returning Redis connection to pool...");

     label8:
        $r16 = r3.<com.mycila.inject.redis.RedisMethodInterceptor: redis.clients.jedis.JedisPool pool>;

        $r17 = staticinvoke <com.mycila.inject.redis.Redis: redis.clients.jedis.Jedis remove()>();

        virtualinvoke $r16.<redis.clients.jedis.JedisPool: void returnResource(java.lang.Object)>($r17);

     label9:
        throw $r13;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lcom/mycila/inject/redis/RedisMethodInterceptor;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.mycila.inject.redis.RedisMethodInterceptor: java.util.logging.Logger LOGGER> = $r2;

        return;
    }
}
