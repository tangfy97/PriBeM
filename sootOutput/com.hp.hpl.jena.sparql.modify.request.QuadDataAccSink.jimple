public class com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink extends com.hp.hpl.jena.sparql.modify.request.QuadAccSink
{

    public void <init>(org.apache.jena.atlas.lib.Sink)
    {
        org.apache.jena.atlas.lib.Sink r1;
        com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink r0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink;

        r1 := @parameter0: org.apache.jena.atlas.lib.Sink;

        specialinvoke r0.<com.hp.hpl.jena.sparql.modify.request.QuadAccSink: void <init>(org.apache.jena.atlas.lib.Sink)>(r1);

        return;
    }

    protected void check(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r1, $r3, $r4, $r5, $r6;
        int $i1, $i3, $i5, $i7, $i9, $i11;
        com.hp.hpl.jena.query.QueryParseException $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.graph.Triple r2;
        com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink r0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink: com.hp.hpl.jena.graph.Node getGraph()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r1);

        if $z0 == 0 goto label1;

        $r10 = new com.hp.hpl.jena.query.QueryParseException;

        $i1 = (int) -1;

        $i3 = (int) -1;

        specialinvoke $r10.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>("Variables not permitted in data quad", $i1, $i3);

        throw $r10;

     label1:
        $r3 = virtualinvoke r2.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r3);

        if $z1 != 0 goto label2;

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r4);

        if $z2 != 0 goto label2;

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z3 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r5);

        if $z3 == 0 goto label3;

     label2:
        $r11 = new com.hp.hpl.jena.query.QueryParseException;

        $i5 = (int) -1;

        $i7 = (int) -1;

        specialinvoke $r11.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>("Variables not permitted in data quad", $i5, $i7);

        throw $r11;

     label3:
        $r6 = virtualinvoke r2.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z4 = virtualinvoke $r6.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z4 == 0 goto label4;

        $r12 = new com.hp.hpl.jena.query.QueryParseException;

        $i9 = (int) -1;

        $i11 = (int) -1;

        specialinvoke $r12.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>("Literals not allowed as subjects in data", $i9, $i11);

        throw $r12;

     label4:
        return;
    }

    protected void check(com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4, $r5;
        int $i1, $i3, $i5, $i7;
        com.hp.hpl.jena.query.QueryParseException $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.sparql.core.Quad r0;
        com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink r7;

        r7 := @this: com.hp.hpl.jena.sparql.modify.request.QuadDataAccSink;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r1);

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r2);

        if $z1 != 0 goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r3);

        if $z2 != 0 goto label1;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        $z3 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r4);

        if $z3 == 0 goto label2;

     label1:
        $r9 = new com.hp.hpl.jena.query.QueryParseException;

        $i1 = (int) -1;

        $i3 = (int) -1;

        specialinvoke $r9.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>("Variables not permitted in data quad", $i1, $i3);

        throw $r9;

     label2:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $z4 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z4 == 0 goto label3;

        $r10 = new com.hp.hpl.jena.query.QueryParseException;

        $i5 = (int) -1;

        $i7 = (int) -1;

        specialinvoke $r10.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>("Literals not allowed as subjects in quad data", $i5, $i7);

        throw $r10;

     label3:
        return;
    }
}
