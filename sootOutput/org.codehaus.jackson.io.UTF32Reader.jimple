public final class org.codehaus.jackson.io.UTF32Reader extends org.codehaus.jackson.io.BaseReader
{
    final boolean mBigEndian;
    char mSurrogate;
    int mCharCount;
    int mByteCount;

    public void <init>(org.codehaus.jackson.io.IOContext, java.io.InputStream, byte[], int, int, boolean)
    {
        org.codehaus.jackson.io.IOContext r1;
        byte[] r3;
        org.codehaus.jackson.io.UTF32Reader r0;
        int i0, i1;
        java.io.InputStream r2;
        boolean z0;

        r0 := @this: org.codehaus.jackson.io.UTF32Reader;

        r1 := @parameter0: org.codehaus.jackson.io.IOContext;

        r2 := @parameter1: java.io.InputStream;

        r3 := @parameter2: byte[];

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        z0 := @parameter5: boolean;

        specialinvoke r0.<org.codehaus.jackson.io.BaseReader: void <init>(org.codehaus.jackson.io.IOContext,java.io.InputStream,byte[],int,int)>(r1, r2, r3, i0, i1);

        r0.<org.codehaus.jackson.io.UTF32Reader: char mSurrogate> = 0;

        r0.<org.codehaus.jackson.io.UTF32Reader: int mCharCount> = 0;

        r0.<org.codehaus.jackson.io.UTF32Reader: int mByteCount> = 0;

        r0.<org.codehaus.jackson.io.UTF32Reader: boolean mBigEndian> = z0;

        return;
    }

    public int read(char[], int, int) throws java.io.IOException
    {
        byte[] $r1, $r3, $r4, $r5, $r6, $r13, $r14, $r15, $r16;
        byte $b3, $b5, $b10, $b15, $b33, $b35, $b40, $b45;
        java.lang.StringBuilder $r8, $r10, $r11, $r17;
        short $s6, $s8, $s11, $s36, $s41, $s46, $s66, $s68, $s70, $s72, $s73, $s76;
        java.lang.String $r9, $r12;
        org.codehaus.jackson.io.UTF32Reader r0;
        char[] r2;
        boolean $z0, $z1;
        int i0, $i1, $i2, $i4, $i7, $i9, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i28, $i30, $i31, $i32, $i34, $i37, $i38, $i39, $i42, $i43, $i44, $i47, $i49, $i50, i51, $i52, i53, i55, i56, i57, $i58, $i59, $i60, $i62, $i64, $i65, $i67, $i69, $i71, $i74, $i75, $i77, $i78, $i80, $i82, $i84;
        char $c21, $c27, $c29, $c48, $c54;

        r0 := @this: org.codehaus.jackson.io.UTF32Reader;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        i51 := @parameter2: int;

        $r1 = r0.<org.codehaus.jackson.io.UTF32Reader: byte[] mBuffer>;

        if $r1 != null goto label01;

        $i62 = (int) -1;

        return $i62;

     label01:
        if i51 >= 1 goto label02;

        return i51;

     label02:
        if i0 < 0 goto label03;

        $i50 = i0 + i51;

        $i49 = lengthof r2;

        if $i50 <= $i49 goto label04;

     label03:
        virtualinvoke r0.<org.codehaus.jackson.io.UTF32Reader: void reportBounds(char[],int,int)>(r2, i0, i51);

     label04:
        $i52 = i51 + i0;

        i53 = i0;

        $c54 = r0.<org.codehaus.jackson.io.UTF32Reader: char mSurrogate>;

        if $c54 == 0 goto label05;

        i53 = i0 + 1;

        $c48 = r0.<org.codehaus.jackson.io.UTF32Reader: char mSurrogate>;

        r2[i0] = $c48;

        r0.<org.codehaus.jackson.io.UTF32Reader: char mSurrogate> = 0;

        goto label06;

     label05:
        $i2 = r0.<org.codehaus.jackson.io.UTF32Reader: int mLength>;

        $i1 = r0.<org.codehaus.jackson.io.UTF32Reader: int mPtr>;

        i55 = $i2 - $i1;

        if i55 >= 4 goto label06;

        $z1 = specialinvoke r0.<org.codehaus.jackson.io.UTF32Reader: boolean loadMore(int)>(i55);

        if $z1 != 0 goto label06;

        $i64 = (int) -1;

        return $i64;

     label06:
        if i53 >= $i52 goto label12;

        i56 = r0.<org.codehaus.jackson.io.UTF32Reader: int mPtr>;

        $z0 = r0.<org.codehaus.jackson.io.UTF32Reader: boolean mBigEndian>;

        if $z0 == 0 goto label07;

        $r13 = r0.<org.codehaus.jackson.io.UTF32Reader: byte[] mBuffer>;

        $b33 = $r13[i56];

        $i65 = (int) $b33;

        $i38 = $i65 << 24;

        $r14 = r0.<org.codehaus.jackson.io.UTF32Reader: byte[] mBuffer>;

        $i34 = i56 + 1;

        $b35 = $r14[$i34];

        $s66 = (short) $b35;

        $s36 = $s66 & 255;

        $i67 = (int) $s36;

        $i37 = $i67 << 16;

        $i43 = $i38 | $i37;

        $r15 = r0.<org.codehaus.jackson.io.UTF32Reader: byte[] mBuffer>;

        $i39 = i56 + 2;

        $b40 = $r15[$i39];

        $s68 = (short) $b40;

        $s41 = $s68 & 255;

        $i69 = (int) $s41;

        $i42 = $i69 << 8;

        $i47 = $i43 | $i42;

        $r16 = r0.<org.codehaus.jackson.io.UTF32Reader: byte[] mBuffer>;

        $i44 = i56 + 3;

        $b45 = $r16[$i44];

        $s70 = (short) $b45;

        $s46 = $s70 & 255;

        $i71 = (int) $s46;

        i57 = $i47 | $i71;

        goto label08;

     label07:
        $r3 = r0.<org.codehaus.jackson.io.UTF32Reader: byte[] mBuffer>;

        $b3 = $r3[i56];

        $s72 = (short) $b3;

        $s8 = $s72 & 255;

        $r4 = r0.<org.codehaus.jackson.io.UTF32Reader: byte[] mBuffer>;

        $i4 = i56 + 1;

        $b5 = $r4[$i4];

        $s73 = (short) $b5;

        $s6 = $s73 & 255;

        $i74 = (int) $s6;

        $i7 = $i74 << 8;

        $i75 = (int) $s8;

        $i13 = $i75 | $i7;

        $r5 = r0.<org.codehaus.jackson.io.UTF32Reader: byte[] mBuffer>;

        $i9 = i56 + 2;

        $b10 = $r5[$i9];

        $s76 = (short) $b10;

        $s11 = $s76 & 255;

        $i77 = (int) $s11;

        $i12 = $i77 << 16;

        $i17 = $i13 | $i12;

        $r6 = r0.<org.codehaus.jackson.io.UTF32Reader: byte[] mBuffer>;

        $i14 = i56 + 3;

        $b15 = $r6[$i14];

        $i78 = (int) $b15;

        $i16 = $i78 << 24;

        i57 = $i17 | $i16;

     label08:
        $i18 = r0.<org.codehaus.jackson.io.UTF32Reader: int mPtr>;

        $i19 = $i18 + 4;

        r0.<org.codehaus.jackson.io.UTF32Reader: int mPtr> = $i19;

        $i80 = (int) 65535;

        if i57 <= $i80 goto label10;

        if i57 <= 1114111 goto label09;

        $i30 = i53 - i0;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(above ");

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(1114111);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.codehaus.jackson.io.UTF32Reader: void reportInvalid(int,int,java.lang.String)>(i57, $i30, $r12);

     label09:
        $i31 = i57 - 65536;

        $i24 = i53;

        i53 = i53 + 1;

        $i25 = $i31 >> 10;

        $i82 = (int) 55296;

        $i26 = $i82 + $i25;

        $c27 = (char) $i26;

        r2[$i24] = $c27;

        $i28 = $i31 & 1023;

        $i84 = (int) 56320;

        $i32 = $i84 | $i28;

        i57 = $i32;

        if i53 < $i52 goto label10;

        $c29 = (char) $i32;

        r0.<org.codehaus.jackson.io.UTF32Reader: char mSurrogate> = $c29;

        goto label12;

     label10:
        $i20 = i53;

        i53 = i53 + 1;

        $c21 = (char) i57;

        r2[$i20] = $c21;

        $i23 = r0.<org.codehaus.jackson.io.UTF32Reader: int mPtr>;

        $i22 = r0.<org.codehaus.jackson.io.UTF32Reader: int mLength>;

        if $i23 < $i22 goto label11;

        goto label12;

     label11:
        goto label06;

     label12:
        $i58 = i53 - i0;

        $i59 = r0.<org.codehaus.jackson.io.UTF32Reader: int mCharCount>;

        $i60 = $i59 + $i58;

        r0.<org.codehaus.jackson.io.UTF32Reader: int mCharCount> = $i60;

        return $i58;
    }

    private void reportUnexpectedEOF(int, int) throws java.io.IOException
    {
        int i0, $i1, i2, i3, i4;
        java.lang.String $r12;
        org.codehaus.jackson.io.UTF32Reader r0;
        java.io.CharConversionException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.codehaus.jackson.io.UTF32Reader;

        i0 := @parameter0: int;

        i4 := @parameter1: int;

        $i1 = r0.<org.codehaus.jackson.io.UTF32Reader: int mByteCount>;

        i2 = $i1 + i0;

        i3 = r0.<org.codehaus.jackson.io.UTF32Reader: int mCharCount>;

        $r1 = new java.io.CharConversionException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected EOF in the middle of a 4-byte UTF-32 char: got ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", needed ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", at char #");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", byte #");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.CharConversionException: void <init>(java.lang.String)>($r12);

        throw $r1;
    }

    private void reportInvalid(int, int, java.lang.String) throws java.io.IOException
    {
        int $i0, $i1, $i2, i3, i4, $i5, i6, i7;
        java.lang.String $r4, r6, $r13;
        org.codehaus.jackson.io.UTF32Reader r0;
        java.io.CharConversionException $r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: org.codehaus.jackson.io.UTF32Reader;

        i7 := @parameter0: int;

        i4 := @parameter1: int;

        r6 := @parameter2: java.lang.String;

        $i1 = r0.<org.codehaus.jackson.io.UTF32Reader: int mByteCount>;

        $i0 = r0.<org.codehaus.jackson.io.UTF32Reader: int mPtr>;

        $i2 = $i1 + $i0;

        i3 = $i2 - 1;

        $i5 = r0.<org.codehaus.jackson.io.UTF32Reader: int mCharCount>;

        i6 = $i5 + i4;

        $r1 = new java.io.CharConversionException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid UTF-32 character 0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i7);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at char #");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", byte #");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.CharConversionException: void <init>(java.lang.String)>($r13);

        throw $r1;
    }

    private boolean loadMore(int) throws java.io.IOException
    {
        byte[] $r1, $r3, $r4, $r6, $r7;
        byte $b15;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i16, $i17, $i18, $i19;
        org.codehaus.jackson.io.UTF32Reader r0;
        java.io.InputStream $r2, $r5;

        r0 := @this: org.codehaus.jackson.io.UTF32Reader;

        i0 := @parameter0: int;

        $i3 = r0.<org.codehaus.jackson.io.UTF32Reader: int mByteCount>;

        $i1 = r0.<org.codehaus.jackson.io.UTF32Reader: int mLength>;

        $i2 = $i1 - i0;

        $i4 = $i3 + $i2;

        r0.<org.codehaus.jackson.io.UTF32Reader: int mByteCount> = $i4;

        if i0 <= 0 goto label04;

        $i12 = r0.<org.codehaus.jackson.io.UTF32Reader: int mPtr>;

        if $i12 <= 0 goto label03;

        i16 = 0;

     label01:
        if i16 >= i0 goto label02;

        $r7 = r0.<org.codehaus.jackson.io.UTF32Reader: byte[] mBuffer>;

        $r6 = r0.<org.codehaus.jackson.io.UTF32Reader: byte[] mBuffer>;

        $i13 = r0.<org.codehaus.jackson.io.UTF32Reader: int mPtr>;

        $i14 = $i13 + i16;

        $b15 = $r6[$i14];

        $r7[i16] = $b15;

        i16 = i16 + 1;

        goto label01;

     label02:
        r0.<org.codehaus.jackson.io.UTF32Reader: int mPtr> = 0;

     label03:
        r0.<org.codehaus.jackson.io.UTF32Reader: int mLength> = i0;

        goto label07;

     label04:
        r0.<org.codehaus.jackson.io.UTF32Reader: int mPtr> = 0;

        $r2 = r0.<org.codehaus.jackson.io.UTF32Reader: java.io.InputStream mIn>;

        $r1 = r0.<org.codehaus.jackson.io.UTF32Reader: byte[] mBuffer>;

        $i5 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>($r1);

        if $i5 >= 1 goto label06;

        r0.<org.codehaus.jackson.io.UTF32Reader: int mLength> = 0;

        if $i5 >= 0 goto label05;

        virtualinvoke r0.<org.codehaus.jackson.io.UTF32Reader: void freeBuffers()>();

        return 0;

     label05:
        virtualinvoke r0.<org.codehaus.jackson.io.UTF32Reader: void reportStrangeStream()>();

     label06:
        r0.<org.codehaus.jackson.io.UTF32Reader: int mLength> = $i5;

     label07:
        $i17 = r0.<org.codehaus.jackson.io.UTF32Reader: int mLength>;

        if $i17 >= 4 goto label10;

        $r5 = r0.<org.codehaus.jackson.io.UTF32Reader: java.io.InputStream mIn>;

        $r4 = r0.<org.codehaus.jackson.io.UTF32Reader: byte[] mBuffer>;

        $i9 = r0.<org.codehaus.jackson.io.UTF32Reader: int mLength>;

        $r3 = r0.<org.codehaus.jackson.io.UTF32Reader: byte[] mBuffer>;

        $i7 = lengthof $r3;

        $i6 = r0.<org.codehaus.jackson.io.UTF32Reader: int mLength>;

        $i8 = $i7 - $i6;

        $i10 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>($r4, $i9, $i8);

        if $i10 >= 1 goto label09;

        if $i10 >= 0 goto label08;

        virtualinvoke r0.<org.codehaus.jackson.io.UTF32Reader: void freeBuffers()>();

        $i11 = r0.<org.codehaus.jackson.io.UTF32Reader: int mLength>;

        specialinvoke r0.<org.codehaus.jackson.io.UTF32Reader: void reportUnexpectedEOF(int,int)>($i11, 4);

     label08:
        virtualinvoke r0.<org.codehaus.jackson.io.UTF32Reader: void reportStrangeStream()>();

     label09:
        $i18 = r0.<org.codehaus.jackson.io.UTF32Reader: int mLength>;

        $i19 = $i18 + $i10;

        r0.<org.codehaus.jackson.io.UTF32Reader: int mLength> = $i19;

        goto label07;

     label10:
        return 1;
    }

    public volatile int read() throws java.io.IOException
    {
        int $i0;
        org.codehaus.jackson.io.UTF32Reader r0;

        r0 := @this: org.codehaus.jackson.io.UTF32Reader;

        $i0 = specialinvoke r0.<org.codehaus.jackson.io.BaseReader: int read()>();

        return $i0;
    }

    public volatile void close() throws java.io.IOException
    {
        org.codehaus.jackson.io.UTF32Reader r0;

        r0 := @this: org.codehaus.jackson.io.UTF32Reader;

        specialinvoke r0.<org.codehaus.jackson.io.BaseReader: void close()>();

        return;
    }
}
