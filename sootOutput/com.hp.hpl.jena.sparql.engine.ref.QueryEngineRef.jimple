public class com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef extends com.hp.hpl.jena.sparql.engine.QueryEngineBase
{
    private static com.hp.hpl.jena.sparql.engine.QueryEngineFactory factory;

    public void <init>(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r3;
        com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph r2;
        com.hp.hpl.jena.sparql.util.Context r4;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r4 := @parameter2: com.hp.hpl.jena.sparql.util.Context;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.Binding root()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef: void <init>(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.util.Context)>(r1, r2, $r3, r4);

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r3;
        com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph r2;
        com.hp.hpl.jena.sparql.util.Context r4;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r3 := @parameter2: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r4 := @parameter3: com.hp.hpl.jena.sparql.util.Context;

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.QueryEngineBase: void <init>(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.util.Context)>(r1, r2, r3, r4);

        return;
    }

    protected void <init>(com.hp.hpl.jena.query.Query, com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.sparql.engine.binding.Binding r3;
        com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph r2;
        com.hp.hpl.jena.sparql.util.Context r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r3 := @parameter2: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r4 := @parameter3: com.hp.hpl.jena.sparql.util.Context;

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.QueryEngineBase: void <init>(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.util.Context)>(r1, r2, r3, r4);

        return;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op modifyOp(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPropertyFunction $r0;
        com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef r1;
        com.hp.hpl.jena.sparql.util.Context $r2;
        com.hp.hpl.jena.sparql.algebra.Op $r3, r4;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef;

        r4 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformPropertyFunction;

        $r2 = r1.<com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef: com.hp.hpl.jena.sparql.util.Context context>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPropertyFunction: void <init>(com.hp.hpl.jena.sparql.util.Context)>($r2);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>($r0, r4);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.engine.QueryIterator eval(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.util.Context)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph r4;
        com.hp.hpl.jena.sparql.util.Context r3;
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef r11;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorCheck $r10;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2;
        com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory $r6;
        com.hp.hpl.jena.sparql.algebra.Table $r8;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r7;
        com.hp.hpl.jena.graph.Graph $r5;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r9;
        com.hp.hpl.jena.sparql.algebra.Op r12;
        boolean $z0;

        r11 := @this: com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef;

        r12 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r4 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r0 := @parameter2: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r3 := @parameter3: com.hp.hpl.jena.sparql.util.Context;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: java.util.Iterator vars()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        r12 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.sparql.algebra.Op substitute(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r12, r0);

     label1:
        $r2 = new com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r5 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.QC: com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory getFactory(com.hp.hpl.jena.sparql.util.Context)>(r3);

        specialinvoke $r2.<com.hp.hpl.jena.sparql.engine.ExecutionContext: void <init>(com.hp.hpl.jena.sparql.util.Context,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory)>(r3, $r5, r4, $r6);

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.engine.ref.EvaluatorFactory: com.hp.hpl.jena.sparql.engine.ref.Evaluator create(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2);

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.engine.ref.Eval: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.engine.ref.Evaluator,com.hp.hpl.jena.sparql.algebra.Op)>($r7, r12);

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2);

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorCheck: com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorCheck check(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r9, $r2);

        return $r10;
    }

    public static com.hp.hpl.jena.sparql.engine.QueryEngineFactory getFactory()
    {
        com.hp.hpl.jena.sparql.engine.QueryEngineFactory $r0;

        $r0 = <com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef: com.hp.hpl.jena.sparql.engine.QueryEngineFactory factory>;

        return $r0;
    }

    public static void register()
    {
        com.hp.hpl.jena.sparql.engine.QueryEngineFactory $r0;

        $r0 = <com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef: com.hp.hpl.jena.sparql.engine.QueryEngineFactory factory>;

        staticinvoke <com.hp.hpl.jena.sparql.engine.QueryEngineRegistry: void addFactory(com.hp.hpl.jena.sparql.engine.QueryEngineFactory)>($r0);

        return;
    }

    public static void unregister()
    {
        com.hp.hpl.jena.sparql.engine.QueryEngineFactory $r0;

        $r0 = <com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef: com.hp.hpl.jena.sparql.engine.QueryEngineFactory factory>;

        staticinvoke <com.hp.hpl.jena.sparql.engine.QueryEngineRegistry: void removeFactory(com.hp.hpl.jena.sparql.engine.QueryEngineFactory)>($r0);

        return;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef$1 $r0;

        $r0 = new com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef$1;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef$1: void <init>()>();

        <com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef: com.hp.hpl.jena.sparql.engine.QueryEngineFactory factory> = $r0;

        return;
    }
}
