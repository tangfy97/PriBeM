public class com.hp.hpl.jena.tdb.solver.SolverLib extends java.lang.Object
{
    private static org.slf4j.Logger log;
    public static final com.hp.hpl.jena.tdb.solver.SolverLib$ConvertNodeIDToNode converter;
    private static org.apache.jena.atlas.iterator.Action quadsToAnyTriples;

    public void <init>()
    {
        com.hp.hpl.jena.tdb.solver.SolverLib r0;

        r0 := @this: com.hp.hpl.jena.tdb.solver.SolverLib;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.tdb.store.GraphTDB, com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.sparql.engine.QueryIterator, org.apache.jena.atlas.iterator.Filter, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r3;
        com.hp.hpl.jena.graph.Node $r2;
        org.apache.jena.atlas.iterator.Filter r5;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r6;
        com.hp.hpl.jena.tdb.store.GraphTDB r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator r4, $r7;

        r0 := @parameter0: com.hp.hpl.jena.tdb.store.GraphTDB;

        r3 := @parameter1: com.hp.hpl.jena.sparql.core.BasicPattern;

        r4 := @parameter2: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r5 := @parameter3: org.apache.jena.atlas.iterator.Filter;

        r6 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.graph.Node getGraphName()>();

        $r7 = staticinvoke <com.hp.hpl.jena.tdb.solver.SolverLib: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.tdb.nodetable.NodeTupleTable,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.engine.QueryIterator,org.apache.jena.atlas.iterator.Filter,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r1, $r2, r3, r4, r5, r6);

        return $r7;
    }

    public static com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.tdb.store.DatasetGraphTDB, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.sparql.engine.QueryIterator, org.apache.jena.atlas.iterator.Filter, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r3;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.graph.Node r1;
        org.apache.jena.atlas.iterator.Filter r5;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r2;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r6;
        com.hp.hpl.jena.sparql.engine.QueryIterator r4, $r7;

        r0 := @parameter0: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.sparql.core.BasicPattern;

        r4 := @parameter3: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r5 := @parameter4: org.apache.jena.atlas.iterator.Filter;

        r6 := @parameter5: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable chooseNodeTupleTable(com.hp.hpl.jena.graph.Node)>(r1);

        $r7 = staticinvoke <com.hp.hpl.jena.tdb.solver.SolverLib: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.tdb.nodetable.NodeTupleTable,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.engine.QueryIterator,org.apache.jena.atlas.iterator.Filter,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2, r1, r3, r4, r5, r6);

        return $r7;
    }

    public static java.util.Iterator convertToIds(java.util.Iterator, com.hp.hpl.jena.tdb.nodetable.NodeTable)
    {
        org.apache.jena.atlas.iterator.Transform $r2;
        java.util.Iterator r0, $r3;
        com.hp.hpl.jena.tdb.nodetable.NodeTable r1;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: com.hp.hpl.jena.tdb.nodetable.NodeTable;

        $r2 = staticinvoke <com.hp.hpl.jena.tdb.solver.SolverLib: org.apache.jena.atlas.iterator.Transform convFromBinding(com.hp.hpl.jena.tdb.nodetable.NodeTable)>(r1);

        $r3 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator map(java.util.Iterator,org.apache.jena.atlas.iterator.Transform)>(r0, $r2);

        return $r3;
    }

    public static java.util.Iterator convertToNodes(java.util.Iterator, com.hp.hpl.jena.tdb.nodetable.NodeTable)
    {
        org.apache.jena.atlas.iterator.Transform $r2;
        java.util.Iterator r0, $r3;
        com.hp.hpl.jena.tdb.nodetable.NodeTable r1;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: com.hp.hpl.jena.tdb.nodetable.NodeTable;

        $r2 = staticinvoke <com.hp.hpl.jena.tdb.solver.SolverLib: org.apache.jena.atlas.iterator.Transform convToBinding(com.hp.hpl.jena.tdb.nodetable.NodeTable)>(r1);

        $r3 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator map(java.util.Iterator,org.apache.jena.atlas.iterator.Transform)>(r0, $r2);

        return $r3;
    }

    private static com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.tdb.nodetable.NodeTupleTable, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.sparql.engine.QueryIterator, org.apache.jena.atlas.iterator.Filter, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node r2, $r3, $r18, $r19, $r20, $r24, $r25, $r26;
        org.apache.jena.atlas.iterator.Transform $r8;
        com.hp.hpl.jena.tdb.index.TupleTable $r5;
        com.hp.hpl.jena.tdb.nodetable.NodeTable $r6;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r14;
        boolean z0, $z1, $z2;
        com.hp.hpl.jena.graph.Node[] $r17, $r23;
        org.apache.jena.atlas.iterator.Filter r21;
        com.hp.hpl.jena.graph.Triple r16;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable r4;
        java.util.List $r1;
        java.lang.StringBuilder $r28, $r29, $r30, $r33, $r34, $r35;
        com.hp.hpl.jena.sparql.engine.QueryIterator r7;
        org.apache.jena.atlas.lib.Tuple r38;
        com.hp.hpl.jena.tdb.solver.SolverLib$ConvertNodeIDToNode $r11;
        java.util.ArrayList $r9;
        int $i0;
        java.lang.String $r31, $r36;
        com.hp.hpl.jena.tdb.TDBException $r27, $r32;
        java.util.Iterator $r10, $r12, $r22, r37;
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        com.hp.hpl.jena.tdb.solver.QueryIterTDB $r13;
        java.lang.Object $r15;

        r4 := @parameter0: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r0 := @parameter2: com.hp.hpl.jena.sparql.core.BasicPattern;

        r7 := @parameter3: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r21 := @parameter4: org.apache.jena.atlas.iterator.Filter;

        r14 := @parameter5: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List getList()>();

        if r2 != null goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z1 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r2);

     label2:
        z0 = $z1;

        $r5 = interfaceinvoke r4.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.index.TupleTable getTupleTable()>();

        $i0 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.index.TupleTable: int getTupleLen()>();

        if r2 != null goto label3;

        if 3 == $i0 goto label4;

        $r32 = new com.hp.hpl.jena.tdb.TDBException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SolverLib: Null graph node but tuples are of length ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r36);

        throw $r32;

     label3:
        if 4 == $i0 goto label4;

        $r27 = new com.hp.hpl.jena.tdb.TDBException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SolverLib: Graph node specified but tuples are of length ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r31);

        throw $r27;

     label4:
        $r6 = interfaceinvoke r4.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()>();

        $r8 = staticinvoke <com.hp.hpl.jena.tdb.solver.SolverLib: org.apache.jena.atlas.iterator.Transform convFromBinding(com.hp.hpl.jena.tdb.nodetable.NodeTable)>($r6);

        r37 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator map(java.util.Iterator,org.apache.jena.atlas.iterator.Transform)>(r7, $r8);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r15 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r16 = (com.hp.hpl.jena.graph.Triple) $r15;

        if r2 != null goto label6;

        $r23 = newarray (com.hp.hpl.jena.graph.Node)[3];

        $r24 = virtualinvoke r16.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r23[0] = $r24;

        $r25 = virtualinvoke r16.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r23[1] = $r25;

        $r26 = virtualinvoke r16.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r23[2] = $r26;

        r38 = staticinvoke <org.apache.jena.atlas.lib.Tuple: org.apache.jena.atlas.lib.Tuple create(java.lang.Object[])>($r23);

        goto label7;

     label6:
        $r17 = newarray (com.hp.hpl.jena.graph.Node)[4];

        $r17[0] = r2;

        $r18 = virtualinvoke r16.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r17[1] = $r18;

        $r19 = virtualinvoke r16.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r17[2] = $r19;

        $r20 = virtualinvoke r16.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r17[3] = $r20;

        r38 = staticinvoke <org.apache.jena.atlas.lib.Tuple: org.apache.jena.atlas.lib.Tuple create(java.lang.Object[])>($r17);

     label7:
        $r22 = staticinvoke <com.hp.hpl.jena.tdb.solver.SolverLib: java.util.Iterator solve(com.hp.hpl.jena.tdb.nodetable.NodeTupleTable,org.apache.jena.atlas.lib.Tuple,boolean,java.util.Iterator,org.apache.jena.atlas.iterator.Filter,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r4, r38, z0, r37, r21, r14);

        r37 = staticinvoke <com.hp.hpl.jena.tdb.solver.SolverLib: java.util.Iterator makeAbortable(java.util.Iterator,java.util.List)>($r22, $r9);

        goto label5;

     label8:
        $r11 = <com.hp.hpl.jena.tdb.solver.SolverLib: com.hp.hpl.jena.tdb.solver.SolverLib$ConvertNodeIDToNode converter>;

        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.tdb.solver.SolverLib$ConvertNodeIDToNode: java.util.Iterator convert(com.hp.hpl.jena.tdb.nodetable.NodeTable,java.util.Iterator)>($r6, r37);

        $r13 = new com.hp.hpl.jena.tdb.solver.QueryIterTDB;

        specialinvoke $r13.<com.hp.hpl.jena.tdb.solver.QueryIterTDB: void <init>(java.util.Iterator,java.util.List,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r12, $r9, r7, r14);

        return $r13;
    }

    static java.util.Iterator makeAbortable(java.util.Iterator, java.util.List)
    {
        com.hp.hpl.jena.tdb.solver.SolverLib$IterAbortable $r1;
        java.util.List r0;
        java.util.Iterator r2;

        r2 := @parameter0: java.util.Iterator;

        r0 := @parameter1: java.util.List;

        if r0 != null goto label1;

        return r2;

     label1:
        $r1 = new com.hp.hpl.jena.tdb.solver.SolverLib$IterAbortable;

        specialinvoke $r1.<com.hp.hpl.jena.tdb.solver.SolverLib$IterAbortable: void <init>(java.util.Iterator)>(r2);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        return $r1;
    }

    private static java.util.Iterator solve(com.hp.hpl.jena.tdb.nodetable.NodeTupleTable, org.apache.jena.atlas.lib.Tuple, boolean, java.util.Iterator, org.apache.jena.atlas.iterator.Filter, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable r1;
        java.util.Iterator r2;
        org.apache.jena.atlas.lib.Tuple r3;
        org.apache.jena.atlas.iterator.Filter r4;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r5;
        com.hp.hpl.jena.tdb.solver.StageMatchTuple $r0;
        boolean z0;

        r1 := @parameter0: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable;

        r3 := @parameter1: org.apache.jena.atlas.lib.Tuple;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.util.Iterator;

        r4 := @parameter4: org.apache.jena.atlas.iterator.Filter;

        r5 := @parameter5: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r0 = new com.hp.hpl.jena.tdb.solver.StageMatchTuple;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.solver.StageMatchTuple: void <init>(com.hp.hpl.jena.tdb.nodetable.NodeTupleTable,java.util.Iterator,org.apache.jena.atlas.lib.Tuple,boolean,org.apache.jena.atlas.iterator.Filter,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, r2, r3, z0, r4, r5);

        return $r0;
    }

    private static org.apache.jena.atlas.iterator.Transform convToBinding(com.hp.hpl.jena.tdb.nodetable.NodeTable)
    {
        com.hp.hpl.jena.tdb.solver.SolverLib$2 $r0;
        com.hp.hpl.jena.tdb.nodetable.NodeTable r1;

        r1 := @parameter0: com.hp.hpl.jena.tdb.nodetable.NodeTable;

        $r0 = new com.hp.hpl.jena.tdb.solver.SolverLib$2;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.solver.SolverLib$2: void <init>(com.hp.hpl.jena.tdb.nodetable.NodeTable)>(r1);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.engine.binding.Binding convToBinding(com.hp.hpl.jena.tdb.nodetable.NodeTable, com.hp.hpl.jena.tdb.solver.BindingNodeId)
    {
        com.hp.hpl.jena.tdb.solver.BindingNodeId r1;
        com.hp.hpl.jena.tdb.nodetable.NodeTable r2;
        com.hp.hpl.jena.tdb.solver.BindingTDB $r0;

        r2 := @parameter0: com.hp.hpl.jena.tdb.nodetable.NodeTable;

        r1 := @parameter1: com.hp.hpl.jena.tdb.solver.BindingNodeId;

        $r0 = new com.hp.hpl.jena.tdb.solver.BindingTDB;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.solver.BindingTDB: void <init>(com.hp.hpl.jena.tdb.solver.BindingNodeId,com.hp.hpl.jena.tdb.nodetable.NodeTable)>(r1, r2);

        return $r0;
    }

    public static org.apache.jena.atlas.iterator.Transform convFromBinding(com.hp.hpl.jena.tdb.nodetable.NodeTable)
    {
        com.hp.hpl.jena.tdb.solver.SolverLib$3 $r0;
        com.hp.hpl.jena.tdb.nodetable.NodeTable r1;

        r1 := @parameter0: com.hp.hpl.jena.tdb.nodetable.NodeTable;

        $r0 = new com.hp.hpl.jena.tdb.solver.SolverLib$3;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.solver.SolverLib$3: void <init>(com.hp.hpl.jena.tdb.nodetable.NodeTable)>(r1);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.engine.QueryIterator testForGraphName(com.hp.hpl.jena.tdb.store.DatasetGraphTDB, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.QueryIterator, org.apache.jena.atlas.iterator.Filter, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.tdb.store.QuadTable $r6;
        com.hp.hpl.jena.tdb.store.NodeId[] $r8;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.tdb.store.NodeId $r2, $r9, $r10, $r11;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r4;
        boolean $z0, z2, $z3, $z4;
        java.util.Iterator $r12, r14;
        org.apache.jena.atlas.iterator.Filter r13;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r7;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r5;

        r0 := @parameter0: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r13 := @parameter3: org.apache.jena.atlas.iterator.Filter;

        r4 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r2 = staticinvoke <com.hp.hpl.jena.tdb.sys.TDBInternal: com.hp.hpl.jena.tdb.store.NodeId getNodeId(com.hp.hpl.jena.tdb.store.DatasetGraphTDB,com.hp.hpl.jena.graph.Node)>(r0, r1);

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.store.NodeId: boolean isDoesNotExist(com.hp.hpl.jena.tdb.store.NodeId)>($r2);

        if $z0 != 0 goto label1;

        $z4 = 1;

        $z3 = 1;

        goto label2;

     label1:
        $z4 = 0;

        $z3 = 0;

     label2:
        z2 = $z4;

        if $z3 == 0 goto label4;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()>();

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.tdb.store.QuadTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r8 = newarray (com.hp.hpl.jena.tdb.store.NodeId)[4];

        $r8[0] = $r2;

        $r9 = <com.hp.hpl.jena.tdb.store.NodeId: com.hp.hpl.jena.tdb.store.NodeId NodeIdAny>;

        $r8[1] = $r9;

        $r10 = <com.hp.hpl.jena.tdb.store.NodeId: com.hp.hpl.jena.tdb.store.NodeId NodeIdAny>;

        $r8[2] = $r10;

        $r11 = <com.hp.hpl.jena.tdb.store.NodeId: com.hp.hpl.jena.tdb.store.NodeId NodeIdAny>;

        $r8[3] = $r11;

        $r12 = interfaceinvoke $r7.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: java.util.Iterator find(com.hp.hpl.jena.tdb.store.NodeId[])>($r8);

        r14 = $r12;

        if r13 == null goto label3;

        r14 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator filter(java.util.Iterator,org.apache.jena.atlas.iterator.Filter)>($r12, r13);

     label3:
        z2 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

     label4:
        if z2 == 0 goto label5;

        return r3;

     label5:
        interfaceinvoke r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterNullIterator: com.hp.hpl.jena.sparql.engine.QueryIterator create(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r4);

        return $r5;
    }

    public static com.hp.hpl.jena.sparql.engine.QueryIterator graphNames(com.hp.hpl.jena.tdb.store.DatasetGraphTDB, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.QueryIterator, org.apache.jena.atlas.iterator.Filter, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.tdb.store.QuadTable $r2, $r15;
        com.hp.hpl.jena.tdb.store.NodeId[] $r4;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r1;
        com.hp.hpl.jena.graph.Node r19;
        com.hp.hpl.jena.tdb.solver.SolverLib$4 $r21;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.tdb.nodetable.NodeTable $r17;
        com.hp.hpl.jena.tdb.store.NodeId $r5, $r6, $r7, $r8;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r25;
        java.util.Iterator $r9, $r11, $r12, $r13, $r14, $r18, $r22, r26;
        org.apache.jena.atlas.iterator.Filter r10;
        com.hp.hpl.jena.sparql.core.Var $r20;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r3, $r16;
        com.hp.hpl.jena.tdb.solver.QueryIterTDB $r23;
        com.hp.hpl.jena.sparql.engine.QueryIterator r24;

        r1 := @parameter0: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r19 := @parameter1: com.hp.hpl.jena.graph.Node;

        r24 := @parameter2: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r10 := @parameter3: org.apache.jena.atlas.iterator.Filter;

        r25 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.store.QuadTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r4 = newarray (com.hp.hpl.jena.tdb.store.NodeId)[4];

        $r5 = <com.hp.hpl.jena.tdb.store.NodeId: com.hp.hpl.jena.tdb.store.NodeId NodeIdAny>;

        $r4[0] = $r5;

        $r6 = <com.hp.hpl.jena.tdb.store.NodeId: com.hp.hpl.jena.tdb.store.NodeId NodeIdAny>;

        $r4[1] = $r6;

        $r7 = <com.hp.hpl.jena.tdb.store.NodeId: com.hp.hpl.jena.tdb.store.NodeId NodeIdAny>;

        $r4[2] = $r7;

        $r8 = <com.hp.hpl.jena.tdb.store.NodeId: com.hp.hpl.jena.tdb.store.NodeId NodeIdAny>;

        $r4[3] = $r8;

        $r9 = interfaceinvoke $r3.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: java.util.Iterator find(com.hp.hpl.jena.tdb.store.NodeId[])>($r4);

        r26 = $r9;

        if r10 == null goto label1;

        r26 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator filter(java.util.Iterator,org.apache.jena.atlas.iterator.Filter)>($r9, r10);

     label1:
        $r11 = staticinvoke <org.apache.jena.atlas.lib.Tuple: java.util.Iterator project(int,java.util.Iterator)>(0, r26);

        $r12 = staticinvoke <com.hp.hpl.jena.tdb.solver.SolverLib: java.util.Iterator makeAbortable(java.util.Iterator,java.util.List)>($r11, $r0);

        $r13 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator distinct(java.util.Iterator)>($r12);

        $r14 = staticinvoke <com.hp.hpl.jena.tdb.solver.SolverLib: java.util.Iterator makeAbortable(java.util.Iterator,java.util.List)>($r13, $r0);

        $r15 = virtualinvoke r1.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()>();

        $r16 = virtualinvoke $r15.<com.hp.hpl.jena.tdb.store.QuadTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r17 = interfaceinvoke $r16.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()>();

        $r18 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeLib: java.util.Iterator nodes(com.hp.hpl.jena.tdb.nodetable.NodeTable,java.util.Iterator)>($r17, $r14);

        $r20 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r19);

        $r21 = new com.hp.hpl.jena.tdb.solver.SolverLib$4;

        specialinvoke $r21.<com.hp.hpl.jena.tdb.solver.SolverLib$4: void <init>(com.hp.hpl.jena.sparql.core.Var)>($r20);

        $r22 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator map(java.util.Iterator,org.apache.jena.atlas.iterator.Transform)>($r18, $r21);

        $r23 = new com.hp.hpl.jena.tdb.solver.QueryIterTDB;

        specialinvoke $r23.<com.hp.hpl.jena.tdb.solver.QueryIterTDB: void <init>(java.util.Iterator,java.util.List,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r22, $r0, r24, r25);

        return $r23;
    }

    public static java.lang.String strPattern(com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        java.lang.String $r2, $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List getList()>();

        $r2 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.lang.String asString(java.lang.Iterable,java.lang.String)>($r1, "\n  ");

        $r3 = staticinvoke <com.hp.hpl.jena.tdb.lib.Lib2: java.lang.String printAbbrev(java.lang.Object)>($r2);

        return $r3;
    }

    public static java.util.Set convertToNodeIds(java.util.Collection, com.hp.hpl.jena.tdb.store.DatasetGraphTDB)
    {
        com.hp.hpl.jena.tdb.store.QuadTable $r2;
        java.util.Iterator $r6;
        java.util.Collection r5;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r1;
        com.hp.hpl.jena.graph.Node r8;
        java.util.HashSet $r0;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r3;
        com.hp.hpl.jena.tdb.nodetable.NodeTable $r4;
        com.hp.hpl.jena.tdb.store.NodeId $r9;
        java.lang.Object $r7;
        boolean $z0;

        r5 := @parameter0: java.util.Collection;

        r1 := @parameter1: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.store.QuadTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()>();

        $r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Node) $r7;

        $r9 = interfaceinvoke $r4.<com.hp.hpl.jena.tdb.nodetable.NodeTable: com.hp.hpl.jena.tdb.store.NodeId getNodeIdForNode(com.hp.hpl.jena.graph.Node)>(r8);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        return $r0;
    }

    public static java.util.Iterator unionGraph(com.hp.hpl.jena.tdb.nodetable.NodeTupleTable)
    {
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable r0;
        java.util.Iterator $r2, $r4, $r5;
        com.hp.hpl.jena.tdb.store.NodeId[] $r1;
        org.apache.jena.atlas.iterator.Action $r3;

        r0 := @parameter0: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable;

        $r1 = newarray (com.hp.hpl.jena.tdb.store.NodeId)[4];

        $r1[0] = null;

        $r1[1] = null;

        $r1[2] = null;

        $r1[3] = null;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: java.util.Iterator find(com.hp.hpl.jena.tdb.store.NodeId[])>($r1);

        $r3 = <com.hp.hpl.jena.tdb.solver.SolverLib: org.apache.jena.atlas.iterator.Action quadsToAnyTriples>;

        $r4 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator operate(java.util.Iterator,org.apache.jena.atlas.iterator.Action)>($r2, $r3);

        $r5 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator distinctAdjacent(java.util.Iterator)>($r4);

        return $r5;
    }

    static org.apache.jena.atlas.iterator.Transform access$000(com.hp.hpl.jena.tdb.nodetable.NodeTable)
    {
        org.apache.jena.atlas.iterator.Transform $r1;
        com.hp.hpl.jena.tdb.nodetable.NodeTable r0;

        r0 := @parameter0: com.hp.hpl.jena.tdb.nodetable.NodeTable;

        $r1 = staticinvoke <com.hp.hpl.jena.tdb.solver.SolverLib: org.apache.jena.atlas.iterator.Transform convToBinding(com.hp.hpl.jena.tdb.nodetable.NodeTable)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.tdb.solver.SolverLib$5 $r2;
        org.slf4j.Logger $r0;
        com.hp.hpl.jena.tdb.solver.SolverLib$1 $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/tdb/solver/SolverLib;");

        <com.hp.hpl.jena.tdb.solver.SolverLib: org.slf4j.Logger log> = $r0;

        $r1 = new com.hp.hpl.jena.tdb.solver.SolverLib$1;

        specialinvoke $r1.<com.hp.hpl.jena.tdb.solver.SolverLib$1: void <init>()>();

        <com.hp.hpl.jena.tdb.solver.SolverLib: com.hp.hpl.jena.tdb.solver.SolverLib$ConvertNodeIDToNode converter> = $r1;

        $r2 = new com.hp.hpl.jena.tdb.solver.SolverLib$5;

        specialinvoke $r2.<com.hp.hpl.jena.tdb.solver.SolverLib$5: void <init>()>();

        <com.hp.hpl.jena.tdb.solver.SolverLib: org.apache.jena.atlas.iterator.Action quadsToAnyTriples> = $r2;

        return;
    }
}
