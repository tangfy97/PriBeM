public abstract class org.springframework.expression.common.TemplateAwareExpressionParser extends java.lang.Object implements org.springframework.expression.ExpressionParser
{
    private static final org.springframework.expression.ParserContext NON_TEMPLATE_PARSER_CONTEXT;

    static void <clinit>()
    {
        org.springframework.expression.common.TemplateAwareExpressionParser$1 $r0;

        $r0 = new org.springframework.expression.common.TemplateAwareExpressionParser$1;

        specialinvoke $r0.<org.springframework.expression.common.TemplateAwareExpressionParser$1: void <init>()>();

        <org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.ParserContext NON_TEMPLATE_PARSER_CONTEXT> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.expression.common.TemplateAwareExpressionParser r0;

        r0 := @this: org.springframework.expression.common.TemplateAwareExpressionParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.springframework.expression.Expression parseExpression(java.lang.String) throws org.springframework.expression.ParseException
    {
        org.springframework.expression.common.TemplateAwareExpressionParser r0;
        org.springframework.expression.ParserContext $r2;
        org.springframework.expression.Expression $r3;
        java.lang.String r1;

        r0 := @this: org.springframework.expression.common.TemplateAwareExpressionParser;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.ParserContext NON_TEMPLATE_PARSER_CONTEXT>;

        $r3 = virtualinvoke r0.<org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String,org.springframework.expression.ParserContext)>(r1, $r2);

        return $r3;
    }

    public org.springframework.expression.Expression parseExpression(java.lang.String, org.springframework.expression.ParserContext) throws org.springframework.expression.ParseException
    {
        org.springframework.expression.common.TemplateAwareExpressionParser r0;
        org.springframework.expression.ParserContext r4;
        org.springframework.expression.Expression $r2, $r3;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.expression.common.TemplateAwareExpressionParser;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.springframework.expression.ParserContext;

        if r4 != null goto label1;

        r4 = <org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.ParserContext NON_TEMPLATE_PARSER_CONTEXT>;

     label1:
        $z0 = interfaceinvoke r4.<org.springframework.expression.ParserContext: boolean isTemplate()>();

        if $z0 == 0 goto label2;

        $r3 = specialinvoke r0.<org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression parseTemplate(java.lang.String,org.springframework.expression.ParserContext)>(r1, r4);

        return $r3;

     label2:
        $r2 = virtualinvoke r0.<org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression doParseExpression(java.lang.String,org.springframework.expression.ParserContext)>(r1, r4);

        return $r2;
    }

    private org.springframework.expression.Expression parseTemplate(java.lang.String, org.springframework.expression.ParserContext) throws org.springframework.expression.ParseException
    {
        org.springframework.expression.Expression[] $r3;
        org.springframework.expression.ParserContext r2;
        org.springframework.expression.common.LiteralExpression $r6;
        org.springframework.expression.common.CompositeStringExpression $r4;
        org.springframework.expression.common.TemplateAwareExpressionParser r1;
        int $i0, $i1;
        org.springframework.expression.Expression $r5;
        java.lang.String r0;

        r1 := @this: org.springframework.expression.common.TemplateAwareExpressionParser;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.springframework.expression.ParserContext;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r6 = new org.springframework.expression.common.LiteralExpression;

        specialinvoke $r6.<org.springframework.expression.common.LiteralExpression: void <init>(java.lang.String)>("");

        return $r6;

     label1:
        $r3 = specialinvoke r1.<org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression[] parseExpressions(java.lang.String,org.springframework.expression.ParserContext)>(r0, r2);

        $i1 = lengthof $r3;

        if $i1 != 1 goto label2;

        $r5 = $r3[0];

        return $r5;

     label2:
        $r4 = new org.springframework.expression.common.CompositeStringExpression;

        specialinvoke $r4.<org.springframework.expression.common.CompositeStringExpression: void <init>(java.lang.String,org.springframework.expression.Expression[])>(r0, $r3);

        return $r4;
    }

    private org.springframework.expression.Expression[] parseExpressions(java.lang.String, org.springframework.expression.ParserContext) throws org.springframework.expression.ParseException
    {
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r20, $r21, $r22, $r23, $r27, $r28, $r29, $r30, $r32, $r40, $r42, $r44;
        java.lang.Object[] $r37;
        org.springframework.expression.ParserContext r1;
        org.springframework.expression.common.TemplateAwareExpressionParser r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i12;
        java.lang.String $r2, $r3, r4, $r6, $r8, $r9, $r17, $r24, $r31, $r33, $r34;
        java.util.LinkedList $r39;
        org.springframework.expression.ParseException $r41, $r43, $r45;
        org.springframework.expression.Expression[] $r36, $r38;
        org.springframework.expression.Expression $r7, $r10, $r35;

        r5 := @this: org.springframework.expression.common.TemplateAwareExpressionParser;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: org.springframework.expression.ParserContext;

        $r39 = new java.util.LinkedList;

        specialinvoke $r39.<java.util.LinkedList: void <init>()>();

        $r2 = interfaceinvoke r1.<org.springframework.expression.ParserContext: java.lang.String getExpressionPrefix()>();

        $r3 = interfaceinvoke r1.<org.springframework.expression.ParserContext: java.lang.String getExpressionSuffix()>();

        i9 = 0;

        goto label7;

     label1:
        $i0 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String,int)>($r2, i9);

        if $i0 < i9 goto label6;

        if $i0 <= i9 goto label2;

        $r34 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(i9, $i0);

        $r35 = specialinvoke r5.<org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression createLiteralExpression(org.springframework.expression.ParserContext,java.lang.String)>(r1, $r34);

        interfaceinvoke $r39.<java.util.List: boolean add(java.lang.Object)>($r35);

     label2:
        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i7 = $i0 + $i1;

        $i2 = specialinvoke r5.<org.springframework.expression.common.TemplateAwareExpressionParser: int skipToCorrectEndSuffix(java.lang.String,java.lang.String,java.lang.String,int)>($r2, $r3, r4, $i7);

        $i12 = (int) -1;

        if $i2 != $i12 goto label3;

        $r41 = new org.springframework.expression.ParseException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>(java.lang.String)>("No ending suffix \'");

        $r27 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for expression starting at character ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r31 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i0);

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<org.springframework.expression.ParseException: void <init>(java.lang.String,int,java.lang.String)>(r4, $i0, $r33);

        throw $r41;

     label3:
        if $i2 != $i7 goto label4;

        $r43 = new org.springframework.expression.ParseException;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>(java.lang.String)>("No expression defined within delimiter \'");

        $r20 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at character ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<org.springframework.expression.ParseException: void <init>(java.lang.String,int,java.lang.String)>(r4, $i0, $r24);

        throw $r43;

     label4:
        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i4 = $i0 + $i3;

        $r8 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>($i4, $i2);

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        $i5 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i5 != 0 goto label5;

        $r45 = new org.springframework.expression.ParseException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>(java.lang.String)>("No expression defined within delimiter \'");

        $r13 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at character ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<org.springframework.expression.ParseException: void <init>(java.lang.String,int,java.lang.String)>(r4, $i0, $r17);

        throw $r45;

     label5:
        $r10 = virtualinvoke r5.<org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression doParseExpression(java.lang.String,org.springframework.expression.ParserContext)>($r9, r1);

        interfaceinvoke $r39.<java.util.List: boolean add(java.lang.Object)>($r10);

        $i6 = virtualinvoke $r3.<java.lang.String: int length()>();

        i9 = $i2 + $i6;

        goto label7;

     label6:
        $r6 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>(i9);

        $r7 = specialinvoke r5.<org.springframework.expression.common.TemplateAwareExpressionParser: org.springframework.expression.Expression createLiteralExpression(org.springframework.expression.ParserContext,java.lang.String)>(r1, $r6);

        interfaceinvoke $r39.<java.util.List: boolean add(java.lang.Object)>($r7);

        i9 = virtualinvoke r4.<java.lang.String: int length()>();

     label7:
        $i10 = virtualinvoke r4.<java.lang.String: int length()>();

        if i9 < $i10 goto label1;

        $i8 = interfaceinvoke $r39.<java.util.List: int size()>();

        $r36 = newarray (org.springframework.expression.Expression)[$i8];

        $r37 = interfaceinvoke $r39.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r36);

        $r38 = (org.springframework.expression.Expression[]) $r37;

        return $r38;
    }

    private org.springframework.expression.Expression createLiteralExpression(org.springframework.expression.ParserContext, java.lang.String)
    {
        org.springframework.expression.common.TemplateAwareExpressionParser r2;
        org.springframework.expression.ParserContext r3;
        org.springframework.expression.common.LiteralExpression $r0;
        java.lang.String r1;

        r2 := @this: org.springframework.expression.common.TemplateAwareExpressionParser;

        r3 := @parameter0: org.springframework.expression.ParserContext;

        r1 := @parameter1: java.lang.String;

        $r0 = new org.springframework.expression.common.LiteralExpression;

        specialinvoke $r0.<org.springframework.expression.common.LiteralExpression: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    private boolean isSuffixHere(java.lang.String, int, java.lang.String)
    {
        char $c4, $c6;
        org.springframework.expression.common.TemplateAwareExpressionParser r2;
        int $i0, $i1, $i2, $i3, $i5, i7, i8, i9, $i10, $i11;
        java.lang.String r0, r1;

        r2 := @this: org.springframework.expression.common.TemplateAwareExpressionParser;

        r1 := @parameter0: java.lang.String;

        i7 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        i8 = 0;

        i9 = 0;

        goto label3;

     label1:
        $i3 = i7;

        i7 = i7 + 1;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i3);

        $i5 = i8;

        i8 = i8 + 1;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        $i10 = (int) $c4;

        $i11 = (int) $c6;

        if $i10 == $i11 goto label2;

        return 0;

     label2:
        i9 = i9 + 1;

     label3:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i9 >= $i0 goto label4;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if i7 < $i2 goto label1;

     label4:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i8 == $i1 goto label5;

        return 0;

     label5:
        return 1;
    }

    private int skipToCorrectEndSuffix(java.lang.String, java.lang.String, java.lang.String, int) throws org.springframework.expression.ParseException
    {
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r18, $r19, $r20, $r21, $r22, $r23, $r28, $r33, $r34, $r35, $r36, $r37, $r43, $r45, $r47, $r49;
        java.lang.String r0, r1, $r15, $r24, $r29, $r38, r39;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.springframework.expression.common.TemplateAwareExpressionParser$Bracket r5, r40, $r42;
        java.util.Stack $r41;
        org.springframework.expression.common.TemplateAwareExpressionParser r3;
        int i0, $i1, $i2, $i5, $i7, $i8, $i9, $i13, i14, $i16, $i18, $i19, $i20, $i22, $i24;
        org.springframework.expression.ParseException $r44, $r46, $r48, $r50;
        char $c3, $c4, $c6, $c10, $c11, $c12;
        java.lang.Object $r4, $r30;

        r3 := @this: org.springframework.expression.common.TemplateAwareExpressionParser;

        r39 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i14 = i0;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i0);

        $i16 = (int) -1;

        if $i2 != $i16 goto label01;

        $i18 = (int) -1;

        return $i18;

     label01:
        $r41 = new java.util.Stack;

        specialinvoke $r41.<java.util.Stack: void <init>()>();

        goto label10;

     label02:
        $z0 = specialinvoke r3.<org.springframework.expression.common.TemplateAwareExpressionParser: boolean isSuffixHere(java.lang.String,int,java.lang.String)>(r0, i14, r1);

        if $z0 == 0 goto label03;

        $z3 = virtualinvoke $r41.<java.util.Stack: boolean isEmpty()>();

        if $z3 == 0 goto label03;

        goto label11;

     label03:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i14);

        $i19 = (int) $c3;

        lookupswitch($i19)
        {
            case 34: goto label07;
            case 39: goto label07;
            case 40: goto label04;
            case 41: goto label05;
            case 91: goto label04;
            case 93: goto label05;
            case 123: goto label04;
            case 125: goto label05;
            default: goto label09;
        };

     label04:
        $r42 = new org.springframework.expression.common.TemplateAwareExpressionParser$Bracket;

        specialinvoke $r42.<org.springframework.expression.common.TemplateAwareExpressionParser$Bracket: void <init>(char,int)>($c3, i14);

        virtualinvoke $r41.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r42);

        goto label09;

     label05:
        $z1 = virtualinvoke $r41.<java.util.Stack: boolean isEmpty()>();

        if $z1 == 0 goto label06;

        $r44 = new org.springframework.expression.ParseException;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>(java.lang.String)>("Found closing \'");

        $r18 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at position ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without an opening \'");

        $c6 = staticinvoke <org.springframework.expression.common.TemplateAwareExpressionParser$Bracket: char theOpenBracketFor(char)>($c3);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r44.<org.springframework.expression.ParseException: void <init>(java.lang.String,int,java.lang.String)>(r0, i14, $r24);

        throw $r44;

     label06:
        $r4 = virtualinvoke $r41.<java.util.Stack: java.lang.Object pop()>();

        r5 = (org.springframework.expression.common.TemplateAwareExpressionParser$Bracket) $r4;

        $z2 = virtualinvoke r5.<org.springframework.expression.common.TemplateAwareExpressionParser$Bracket: boolean compatibleWithCloseBracket(char)>($c3);

        if $z2 != 0 goto label09;

        $r46 = new org.springframework.expression.ParseException;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>(java.lang.String)>("Found closing \'");

        $r8 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at position ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but most recent opening is \'");

        $c4 = r5.<org.springframework.expression.common.TemplateAwareExpressionParser$Bracket: char bracket>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at position ");

        $i5 = r5.<org.springframework.expression.common.TemplateAwareExpressionParser$Bracket: int pos>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r46.<org.springframework.expression.ParseException: void <init>(java.lang.String,int,java.lang.String)>(r0, i14, $r15);

        throw $r46;

     label07:
        $i7 = i14 + 1;

        $i20 = (int) $c3;

        $i8 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>($i20, $i7);

        $i22 = (int) -1;

        if $i8 != $i22 goto label08;

        $r48 = new org.springframework.expression.ParseException;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>(java.lang.String)>("Found non terminating string literal starting at position ");

        $r28 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r48.<org.springframework.expression.ParseException: void <init>(java.lang.String,int,java.lang.String)>(r0, i14, $r29);

        throw $r48;

     label08:
        i14 = $i8;

     label09:
        i14 = i14 + 1;

     label10:
        if i14 < $i1 goto label02;

     label11:
        $z4 = virtualinvoke $r41.<java.util.Stack: boolean isEmpty()>();

        if $z4 != 0 goto label12;

        $r30 = virtualinvoke $r41.<java.util.Stack: java.lang.Object pop()>();

        r40 = (org.springframework.expression.common.TemplateAwareExpressionParser$Bracket) $r30;

        $r50 = new org.springframework.expression.ParseException;

        $i9 = r40.<org.springframework.expression.common.TemplateAwareExpressionParser$Bracket: int pos>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>(java.lang.String)>("Missing closing \'");

        $c10 = r40.<org.springframework.expression.common.TemplateAwareExpressionParser$Bracket: char bracket>;

        $c11 = staticinvoke <org.springframework.expression.common.TemplateAwareExpressionParser$Bracket: char theCloseBracketFor(char)>($c10);

        $r33 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c11);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for \'");

        $c12 = r40.<org.springframework.expression.common.TemplateAwareExpressionParser$Bracket: char bracket>;

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c12);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at position ");

        $i13 = r40.<org.springframework.expression.common.TemplateAwareExpressionParser$Bracket: int pos>;

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r50.<org.springframework.expression.ParseException: void <init>(java.lang.String,int,java.lang.String)>(r0, $i9, $r38);

        throw $r50;

     label12:
        $z5 = specialinvoke r3.<org.springframework.expression.common.TemplateAwareExpressionParser: boolean isSuffixHere(java.lang.String,int,java.lang.String)>(r0, i14, r1);

        if $z5 != 0 goto label13;

        $i24 = (int) -1;

        return $i24;

     label13:
        return i14;
    }

    protected abstract org.springframework.expression.Expression doParseExpression(java.lang.String, org.springframework.expression.ParserContext) throws org.springframework.expression.ParseException;
}
