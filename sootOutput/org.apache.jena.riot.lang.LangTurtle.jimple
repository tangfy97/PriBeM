public class org.apache.jena.riot.lang.LangTurtle extends org.apache.jena.riot.lang.LangTurtleBase
{

    public void <init>(org.apache.jena.riot.tokens.Tokenizer, org.apache.jena.riot.system.ParserProfile, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.tokens.Tokenizer r1;
        org.apache.jena.riot.system.ParserProfile r2;
        org.apache.jena.riot.system.StreamRDF r3;
        org.apache.jena.riot.lang.LangTurtle r0;

        r0 := @this: org.apache.jena.riot.lang.LangTurtle;

        r1 := @parameter0: org.apache.jena.riot.tokens.Tokenizer;

        r2 := @parameter1: org.apache.jena.riot.system.ParserProfile;

        r3 := @parameter2: org.apache.jena.riot.system.StreamRDF;

        specialinvoke r0.<org.apache.jena.riot.lang.LangTurtleBase: void <init>(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.system.ParserProfile,org.apache.jena.riot.system.StreamRDF)>(r1, r2, r3);

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtle: void setCurrentGraph(com.hp.hpl.jena.graph.Node)>(null);

        return;
    }

    public org.apache.jena.riot.Lang getLang()
    {
        org.apache.jena.riot.Lang $r0;
        org.apache.jena.riot.lang.LangTurtle r1;

        r1 := @this: org.apache.jena.riot.lang.LangTurtle;

        $r0 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang TURTLE>;

        return $r0;
    }

    protected final void oneTopLevelElement()
    {
        org.apache.jena.riot.lang.LangTurtle r0;

        r0 := @this: org.apache.jena.riot.lang.LangTurtle;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtle: void triplesSameSubject()>();

        return;
    }

    protected void expectEndOfTriples()
    {
        org.apache.jena.riot.lang.LangTurtle r0;

        r0 := @this: org.apache.jena.riot.lang.LangTurtle;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangTurtle: void expectEndOfTriplesTurtle()>();

        return;
    }

    protected void emit(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.system.ParserProfile $r4;
        long $l0, $l1;
        org.apache.jena.riot.system.StreamRDF $r6;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        org.apache.jena.riot.lang.LangTurtle r0;
        com.hp.hpl.jena.graph.Triple $r5;

        r0 := @this: org.apache.jena.riot.lang.LangTurtle;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r4 = r0.<org.apache.jena.riot.lang.LangTurtle: org.apache.jena.riot.system.ParserProfile profile>;

        $l1 = r0.<org.apache.jena.riot.lang.LangTurtle: long currLine>;

        $l0 = r0.<org.apache.jena.riot.lang.LangTurtle: long currCol>;

        $r5 = interfaceinvoke $r4.<org.apache.jena.riot.system.ParserProfile: com.hp.hpl.jena.graph.Triple createTriple(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,long,long)>(r1, r2, r3, $l1, $l0);

        $r6 = r0.<org.apache.jena.riot.lang.LangTurtle: org.apache.jena.riot.system.StreamRDF dest>;

        interfaceinvoke $r6.<org.apache.jena.riot.system.StreamRDF: void triple(com.hp.hpl.jena.graph.Triple)>($r5);

        return;
    }
}
