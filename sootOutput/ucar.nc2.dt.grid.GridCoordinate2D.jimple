public class ucar.nc2.dt.grid.GridCoordinate2D extends java.lang.Object
{
    private static boolean debug;
    private static org.slf4j.Logger log;
    private ucar.nc2.dataset.CoordinateAxis2D latCoord;
    private ucar.nc2.dataset.CoordinateAxis2D lonCoord;
    private ucar.ma2.ArrayDouble$D2 latEdge;
    private ucar.ma2.ArrayDouble$D2 lonEdge;
    private ucar.ma2.MAMath$MinMax latMinMax;
    private ucar.ma2.MAMath$MinMax lonMinMax;
    int nrows;
    int ncols;
    static final boolean $assertionsDisabled;

    void <init>(ucar.nc2.dataset.CoordinateAxis2D, ucar.nc2.dataset.CoordinateAxis2D)
    {
        java.lang.AssertionError $r4, $r5;
        int[] $r3;
        ucar.nc2.dt.grid.GridCoordinate2D r0;
        ucar.nc2.dataset.CoordinateAxis2D r1, r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.dt.grid.GridCoordinate2D;

        r1 := @parameter0: ucar.nc2.dataset.CoordinateAxis2D;

        r2 := @parameter1: ucar.nc2.dataset.CoordinateAxis2D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.nc2.dataset.CoordinateAxis2D latCoord> = r1;

        r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.nc2.dataset.CoordinateAxis2D lonCoord> = r2;

        $z0 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i3 = virtualinvoke r1.<ucar.nc2.dataset.CoordinateAxis2D: int getRank()>();

        if $i3 == 2 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $z1 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i2 = virtualinvoke r2.<ucar.nc2.dataset.CoordinateAxis2D: int getRank()>();

        if $i2 == 2 goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $r3 = virtualinvoke r1.<ucar.nc2.dataset.CoordinateAxis2D: int[] getShape()>();

        $i0 = $r3[0];

        r0.<ucar.nc2.dt.grid.GridCoordinate2D: int nrows> = $i0;

        $i1 = $r3[1];

        r0.<ucar.nc2.dt.grid.GridCoordinate2D: int ncols> = $i1;

        return;
    }

    private void findBounds()
    {
        java.lang.Object[] $r12;
        java.lang.Double $r17, $r19, $r21, $r23;
        java.lang.Integer $r14, $r15;
        ucar.nc2.dt.grid.GridCoordinate2D r0;
        int $i0, $i1;
        boolean $z0;
        double $d0, $d1, $d2, $d3;
        java.io.PrintStream $r13;
        ucar.ma2.MAMath$MinMax $r1, $r9, $r11, $r16, $r18, $r20, $r22;
        ucar.ma2.ArrayDouble$D2 $r3, $r4, $r6, $r7, $r8, $r10;
        ucar.nc2.dataset.CoordinateAxis2D $r2, $r5;

        r0 := @this: ucar.nc2.dt.grid.GridCoordinate2D;

        $r1 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax lonMinMax>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.nc2.dataset.CoordinateAxis2D lonCoord>;

        $r3 = virtualinvoke $r2.<ucar.nc2.dataset.CoordinateAxis2D: ucar.ma2.ArrayDouble$D2 getMidpoints()>();

        $r4 = staticinvoke <ucar.nc2.dataset.CoordinateAxis2D: ucar.ma2.ArrayDouble$D2 makeXEdges(ucar.ma2.ArrayDouble$D2)>($r3);

        r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge> = $r4;

        $r5 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.nc2.dataset.CoordinateAxis2D latCoord>;

        $r6 = virtualinvoke $r5.<ucar.nc2.dataset.CoordinateAxis2D: ucar.ma2.ArrayDouble$D2 getMidpoints()>();

        $r7 = staticinvoke <ucar.nc2.dataset.CoordinateAxis2D: ucar.ma2.ArrayDouble$D2 makeYEdges(ucar.ma2.ArrayDouble$D2)>($r6);

        r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge> = $r7;

        $r8 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $r9 = staticinvoke <ucar.ma2.MAMath: ucar.ma2.MAMath$MinMax getMinMax(ucar.ma2.Array)>($r8);

        r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax latMinMax> = $r9;

        $r10 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $r11 = staticinvoke <ucar.ma2.MAMath: ucar.ma2.MAMath$MinMax getMinMax(ucar.ma2.Array)>($r10);

        r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax lonMinMax> = $r11;

        $z0 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean debug>;

        if $z0 == 0 goto label2;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = newarray (java.lang.Object)[6];

        $i0 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: int nrows>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r12[0] = $r14;

        $i1 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: int ncols>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r12[1] = $r15;

        $r16 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax latMinMax>;

        $d0 = $r16.<ucar.ma2.MAMath$MinMax: double min>;

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r12[2] = $r17;

        $r18 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax latMinMax>;

        $d1 = $r18.<ucar.ma2.MAMath$MinMax: double max>;

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r12[3] = $r19;

        $r20 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax lonMinMax>;

        $d2 = $r20.<ucar.ma2.MAMath$MinMax: double min>;

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r12[4] = $r21;

        $r22 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax lonMinMax>;

        $d3 = $r22.<ucar.ma2.MAMath$MinMax: double max>;

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $r12[5] = $r23;

        virtualinvoke $r13.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("Bounds (%d %d): lat= (%f,%f) lon = (%f,%f) %n", $r12);

     label2:
        return;
    }

    public boolean findCoordElementForce(double, double, int[])
    {
        byte $b0, $b1, $b2, $b3;
        int[] r5;
        ucar.nc2.dt.grid.GridCoordinate2D r0;
        int $i4, $i5, i6, i7, $i8, $i9, $i10, $i11;
        double d0, $d1, $d2, d3, $d4, $d5;
        boolean z0, $z1;
        ucar.ma2.MAMath$MinMax $r1, $r2, $r3, $r4;

        r0 := @this: ucar.nc2.dt.grid.GridCoordinate2D;

        d0 := @parameter0: double;

        d3 := @parameter1: double;

        r5 := @parameter2: int[];

        specialinvoke r0.<ucar.nc2.dt.grid.GridCoordinate2D: void findBounds()>();

        $r1 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax latMinMax>;

        $d1 = $r1.<ucar.ma2.MAMath$MinMax: double min>;

        $b0 = d0 cmpg $d1;

        $i8 = (int) $b0;

        if $i8 >= 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax latMinMax>;

        $d2 = $r2.<ucar.ma2.MAMath$MinMax: double max>;

        $b1 = d0 cmpl $d2;

        $i9 = (int) $b1;

        if $i9 <= 0 goto label2;

        return 0;

     label2:
        $r3 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax lonMinMax>;

        $d4 = $r3.<ucar.ma2.MAMath$MinMax: double min>;

        $b2 = d3 cmpg $d4;

        $i10 = (int) $b2;

        if $i10 >= 0 goto label3;

        return 0;

     label3:
        $r4 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax lonMinMax>;

        $d5 = $r4.<ucar.ma2.MAMath$MinMax: double max>;

        $b3 = d3 cmpl $d5;

        $i11 = (int) $b3;

        if $i11 <= 0 goto label4;

        return 0;

     label4:
        z0 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean debug>;

        <ucar.nc2.dt.grid.GridCoordinate2D: boolean debug> = 0;

        i6 = 0;

     label5:
        $i4 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: int nrows>;

        if i6 >= $i4 goto label9;

        i7 = 0;

     label6:
        $i5 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: int ncols>;

        if i7 >= $i5 goto label8;

        r5[0] = i6;

        r5[1] = i7;

        $z1 = specialinvoke r0.<ucar.nc2.dt.grid.GridCoordinate2D: boolean contains(double,double,int[])>(d0, d3, r5);

        if $z1 == 0 goto label7;

        <ucar.nc2.dt.grid.GridCoordinate2D: boolean debug> = z0;

        return 1;

     label7:
        i7 = i7 + 1;

        goto label6;

     label8:
        i6 = i6 + 1;

        goto label5;

     label9:
        return 0;
    }

    public boolean findCoordElement(double, double, int[])
    {
        int[] r1;
        ucar.nc2.dt.grid.GridCoordinate2D r0;
        double d0, d1;
        boolean $z0;

        r0 := @this: ucar.nc2.dt.grid.GridCoordinate2D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: int[];

        $z0 = virtualinvoke r0.<ucar.nc2.dt.grid.GridCoordinate2D: boolean findCoordElementNoForce(double,double,int[])>(d0, d1, r1);

        return $z0;
    }

    public boolean findCoordElementNoForce(double, double, int[])
    {
        java.lang.Integer $r14;
        byte $b0, $b1, $b2, $b3;
        int[] r11;
        ucar.nc2.dt.grid.GridCoordinate2D r0;
        boolean $z0, $z1, $z2, $z3;
        ucar.ma2.MAMath$MinMax $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.Object[] $r12;
        long $l6, $l8;
        int $i4, $i5, $i7, $i9, i10, $i11, $i12, $i13, $i14;
        double d0, $d1, $d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, d10, $d11, $d12, $d13, $d14, d15, $d16, d17, $d18, d19, $d20, $d21;
        java.io.PrintStream $r13;

        r0 := @this: ucar.nc2.dt.grid.GridCoordinate2D;

        d0 := @parameter0: double;

        d3 := @parameter1: double;

        r11 := @parameter2: int[];

        specialinvoke r0.<ucar.nc2.dt.grid.GridCoordinate2D: void findBounds()>();

        $r1 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax latMinMax>;

        $d1 = $r1.<ucar.ma2.MAMath$MinMax: double min>;

        $b0 = d0 cmpg $d1;

        $i11 = (int) $b0;

        if $i11 >= 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax latMinMax>;

        $d2 = $r2.<ucar.ma2.MAMath$MinMax: double max>;

        $b1 = d0 cmpl $d2;

        $i12 = (int) $b1;

        if $i12 <= 0 goto label2;

        return 0;

     label2:
        $r3 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax lonMinMax>;

        $d4 = $r3.<ucar.ma2.MAMath$MinMax: double min>;

        $b2 = d3 cmpg $d4;

        $i13 = (int) $b2;

        if $i13 >= 0 goto label3;

        return 0;

     label3:
        $r4 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax lonMinMax>;

        $d5 = $r4.<ucar.ma2.MAMath$MinMax: double max>;

        $b3 = d3 cmpl $d5;

        $i14 = (int) $b3;

        if $i14 <= 0 goto label4;

        return 0;

     label4:
        $r5 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax latMinMax>;

        $d7 = $r5.<ucar.ma2.MAMath$MinMax: double max>;

        $r6 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax latMinMax>;

        $d6 = $r6.<ucar.ma2.MAMath$MinMax: double min>;

        $d9 = $d7 - $d6;

        $i4 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: int nrows>;

        $d8 = (double) $i4;

        d10 = $d9 / $d8;

        $r7 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax lonMinMax>;

        $d12 = $r7.<ucar.ma2.MAMath$MinMax: double max>;

        $r8 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax lonMinMax>;

        $d11 = $r8.<ucar.ma2.MAMath$MinMax: double min>;

        $d14 = $d12 - $d11;

        $i5 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: int ncols>;

        $d13 = (double) $i5;

        d15 = $d14 / $d13;

        $r9 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax latMinMax>;

        $d16 = $r9.<ucar.ma2.MAMath$MinMax: double min>;

        d17 = d0 - $d16;

        $r10 = r0.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.MAMath$MinMax lonMinMax>;

        $d18 = $r10.<ucar.ma2.MAMath$MinMax: double min>;

        d19 = d3 - $d18;

        $d20 = d17 / d10;

        $l6 = staticinvoke <java.lang.Math: long round(double)>($d20);

        $i7 = (int) $l6;

        r11[0] = $i7;

        $d21 = d19 / d15;

        $l8 = staticinvoke <java.lang.Math: long round(double)>($d21);

        $i9 = (int) $l8;

        r11[1] = $i9;

        i10 = 0;

     label5:
        i10 = i10 + 1;

        $z0 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean debug>;

        if $z0 == 0 goto label6;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = newarray (java.lang.Object)[1];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        $r12[0] = $r14;

        virtualinvoke $r13.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("%nIteration %d %n", $r12);

     label6:
        $z1 = specialinvoke r0.<ucar.nc2.dt.grid.GridCoordinate2D: boolean contains(double,double,int[])>(d0, d3, r11);

        if $z1 == 0 goto label7;

        return 1;

     label7:
        $z2 = specialinvoke r0.<ucar.nc2.dt.grid.GridCoordinate2D: boolean jump2(double,double,int[])>(d0, d3, r11);

        if $z2 != 0 goto label8;

        return 0;

     label8:
        if i10 <= 10 goto label5;

        $z3 = specialinvoke r0.<ucar.nc2.dt.grid.GridCoordinate2D: boolean incr(double,double,int[])>(d0, d3, r11);

        return $z3;
    }

    private boolean containsOld(double, double, int[])
    {
        java.lang.Integer $r8, $r9;
        byte $b12, $b14, $b15, $b17;
        int[] r0;
        ucar.nc2.dt.grid.GridCoordinate2D r1;
        boolean $z0;
        ucar.ma2.ArrayDouble$D2 $r2, $r3, $r4, $r5, $r12, $r14, $r16, $r18;
        java.lang.Object[] $r6;
        java.lang.Double $r10, $r11, $r13, $r15, $r17, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, $i13, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25;
        double d0, $d1, $d2, d3, $d4, $d5, $d6, $d7, $d8, $d9;
        java.io.PrintStream $r7;

        r1 := @this: ucar.nc2.dt.grid.GridCoordinate2D;

        d0 := @parameter0: double;

        d3 := @parameter1: double;

        r0 := @parameter2: int[];

        $i2 = r0[0];

        $i0 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: int nrows>;

        $i1 = $i0 - 1;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, 0);

        r0[0] = $i4;

        $i7 = r0[1];

        $i5 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: int ncols>;

        $i6 = $i5 - 1;

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i6);

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>($i8, 0);

        r0[1] = $i9;

        i10 = r0[0];

        i11 = r0[1];

        $z0 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean debug>;

        if $z0 == 0 goto label1;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r6 = newarray (java.lang.Object)[8];

        $i18 = r0[0];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i18);

        $r6[0] = $r8;

        $i19 = r0[1];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i19);

        $r6[1] = $r9;

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r6[2] = $r10;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3);

        $r6[3] = $r11;

        $r12 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $d6 = virtualinvoke $r12.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i10, i11);

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        $r6[4] = $r13;

        $r14 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $i20 = i10 + 1;

        $d7 = virtualinvoke $r14.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i20, i11);

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        $r6[5] = $r15;

        $r16 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $d8 = virtualinvoke $r16.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i10, i11);

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d8);

        $r6[6] = $r17;

        $r18 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $i21 = i11 + 1;

        $d9 = virtualinvoke $r18.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i10, $i21);

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d9);

        $r6[7] = $r19;

        virtualinvoke $r7.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" (%d,%d) contains (%f,%f) in (lat=%f %f) (lon=%f %f) ?%n", $r6);

     label1:
        $r2 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $d1 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i10, i11);

        $b12 = d0 cmpg $d1;

        $i22 = (int) $b12;

        if $i22 >= 0 goto label2;

        return 0;

     label2:
        $r3 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $i13 = i10 + 1;

        $d2 = virtualinvoke $r3.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i13, i11);

        $b14 = d0 cmpl $d2;

        $i23 = (int) $b14;

        if $i23 <= 0 goto label3;

        return 0;

     label3:
        $r4 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $d4 = virtualinvoke $r4.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i10, i11);

        $b15 = d3 cmpg $d4;

        $i24 = (int) $b15;

        if $i24 >= 0 goto label4;

        return 0;

     label4:
        $r5 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $i16 = i11 + 1;

        $d5 = virtualinvoke $r5.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i10, $i16);

        $b17 = d3 cmpl $d5;

        $i25 = (int) $b17;

        if $i25 <= 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    private boolean contains(double, double, int[])
    {
        int[] r0;
        ucar.nc2.dt.grid.GridCoordinate2D r1;
        boolean $z0, $z1, $z2, $z3;
        ucar.ma2.ArrayDouble$D2 $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9;

        r1 := @this: ucar.nc2.dt.grid.GridCoordinate2D;

        d9 := @parameter0: double;

        d8 := @parameter1: double;

        r0 := @parameter2: int[];

        $i2 = r0[0];

        $i0 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: int nrows>;

        $i1 = $i0 - 1;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, 0);

        r0[0] = $i4;

        $i7 = r0[1];

        $i5 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: int ncols>;

        $i6 = $i5 - 1;

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i6);

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>($i8, 0);

        r0[1] = $i9;

        i10 = r0[0];

        i11 = r0[1];

        $r2 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $d0 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i10, i11);

        $r3 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $d1 = virtualinvoke $r3.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i10, i11);

        $r4 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $i12 = i11 + 1;

        $d2 = virtualinvoke $r4.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i10, $i12);

        $r5 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $i13 = i11 + 1;

        $d3 = virtualinvoke $r5.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i10, $i13);

        $r6 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $i15 = i10 + 1;

        $i14 = i11 + 1;

        $d4 = virtualinvoke $r6.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i15, $i14);

        $r7 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $i17 = i10 + 1;

        $i16 = i11 + 1;

        $d5 = virtualinvoke $r7.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i17, $i16);

        $r8 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $i18 = i10 + 1;

        $d6 = virtualinvoke $r8.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i18, i11);

        $r9 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $i19 = i10 + 1;

        $d7 = virtualinvoke $r9.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i19, i11);

        $z0 = specialinvoke r1.<ucar.nc2.dt.grid.GridCoordinate2D: boolean detIsPositive(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, d8, d9);

        $z1 = specialinvoke r1.<ucar.nc2.dt.grid.GridCoordinate2D: boolean detIsPositive(double,double,double,double,double,double)>($d2, $d3, $d4, $d5, d8, d9);

        if $z0 == $z1 goto label1;

        return 0;

     label1:
        $z2 = specialinvoke r1.<ucar.nc2.dt.grid.GridCoordinate2D: boolean detIsPositive(double,double,double,double,double,double)>($d4, $d5, $d6, $d7, d8, d9);

        if $z0 == $z2 goto label2;

        return 0;

     label2:
        $z3 = specialinvoke r1.<ucar.nc2.dt.grid.GridCoordinate2D: boolean detIsPositive(double,double,double,double,double,double)>($d6, $d7, $d0, $d1, d8, d9);

        if $z0 == $z3 goto label3;

        return 0;

     label3:
        return 1;
    }

    private boolean detIsPositive(double, double, double, double, double, double)
    {
        java.lang.Object[] $r0;
        byte $b0, $b1;
        ucar.nc2.dt.grid.GridCoordinate2D r2;
        int $i2;
        double d0, d1, d2, d3, $d4, $d5, d6, $d7, $d8, d9, $d10, $d11, $d12, $d13, $d14, $d15, d16;
        boolean $z0;
        java.io.PrintStream $r1;

        r2 := @this: ucar.nc2.dt.grid.GridCoordinate2D;

        d6 := @parameter0: double;

        d9 := @parameter1: double;

        d0 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        d1 := @parameter5: double;

        $d5 = d0 * d1;

        $d4 = d2 * d3;

        $d8 = $d5 - $d4;

        $d7 = d6 * d1;

        $d11 = $d8 - $d7;

        $d10 = d9 * d3;

        $d13 = $d11 + $d10;

        $d12 = d6 * d2;

        $d15 = $d13 + $d12;

        $d14 = d9 * d0;

        d16 = $d15 - $d14;

        $b0 = d16 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = newarray (java.lang.Object)[0];

        virtualinvoke $r1.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("determinate = 0%n", $r0);

     label1:
        $b1 = d16 cmpl 0.0;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private boolean jumpOld(double, double, int[])
    {
        java.lang.Integer $r10, $r11, $r16, $r17, $r22, $r23;
        ucar.nc2.dt.grid.GridCoordinate2D r1;
        ucar.ma2.ArrayDouble$D2 $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.Object[] $r8, $r12, $r14;
        java.lang.Double $r18, $r19, $r20, $r21;
        long $l12, $l14;
        int[] r0;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i13, i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;
        double $d0, $d1, d2, $d3, $d4, d5, d6, $d7, d8, d9, $d10, d11, $d12, $d13;
        java.io.PrintStream $r9, $r13, $r15;

        r1 := @this: ucar.nc2.dt.grid.GridCoordinate2D;

        d6 := @parameter0: double;

        d9 := @parameter1: double;

        r0 := @parameter2: int[];

        $i2 = r0[0];

        $i0 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: int nrows>;

        $i1 = $i0 - 1;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, 0);

        $i7 = r0[1];

        $i5 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: int ncols>;

        $i6 = $i5 - 1;

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i6);

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>($i8, 0);

        $r2 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $i10 = $i4 + 1;

        $d0 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i10, $i9);

        $r3 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $d1 = virtualinvoke $r3.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i4, $i9);

        d2 = $d0 - $d1;

        $r4 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $i11 = $i9 + 1;

        $d3 = virtualinvoke $r4.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i4, $i11);

        $r5 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $d4 = virtualinvoke $r5.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i4, $i9);

        d5 = $d3 - $d4;

        $r6 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $d7 = virtualinvoke $r6.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i4, $i9);

        d8 = d6 - $d7;

        $r7 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $d10 = virtualinvoke $r7.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i4, $i9);

        d11 = d9 - $d10;

        $d12 = d8 / d2;

        $l12 = staticinvoke <java.lang.Math: long round(double)>($d12);

        i13 = (int) $l12;

        $d13 = d11 / d5;

        $l14 = staticinvoke <java.lang.Math: long round(double)>($d13);

        i15 = (int) $l14;

        $z0 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean debug>;

        if $z0 == 0 goto label1;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r14 = newarray (java.lang.Object)[8];

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r14[0] = $r16;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r14[1] = $r17;

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r14[2] = $r18;

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        $r14[3] = $r19;

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d8);

        $r14[4] = $r20;

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d11);

        $r14[5] = $r21;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i13);

        $r14[6] = $r22;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i15);

        $r14[7] = $r23;

        virtualinvoke $r15.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("   jump from %d %d (grad=%f %f) (diff=%f %f) (delta=%d %d)", $r14);

     label1:
        if i13 != 0 goto label3;

        if i15 != 0 goto label3;

        $z2 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean debug>;

        if $z2 == 0 goto label2;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = newarray (java.lang.Object)[0];

        virtualinvoke $r13.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("%n   incr:", $r12);

     label2:
        $z3 = specialinvoke r1.<ucar.nc2.dt.grid.GridCoordinate2D: boolean incr(double,double,int[])>(d6, d9, r0);

        return $z3;

     label3:
        $i18 = $i4 + i13;

        $i16 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: int nrows>;

        $i17 = $i16 - 1;

        $i19 = staticinvoke <java.lang.Math: int min(int,int)>($i18, $i17);

        $i20 = staticinvoke <java.lang.Math: int max(int,int)>($i19, 0);

        r0[0] = $i20;

        $i23 = $i9 + i15;

        $i21 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: int ncols>;

        $i22 = $i21 - 1;

        $i24 = staticinvoke <java.lang.Math: int min(int,int)>($i23, $i22);

        $i25 = staticinvoke <java.lang.Math: int max(int,int)>($i24, 0);

        r0[1] = $i25;

        $z1 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean debug>;

        if $z1 == 0 goto label4;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = newarray (java.lang.Object)[2];

        $i28 = r0[0];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i28);

        $r8[0] = $r10;

        $i29 = r0[1];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i29);

        $r8[1] = $r11;

        virtualinvoke $r9.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" to (%d %d)%n", $r8);

     label4:
        $i26 = r0[0];

        if $i4 != $i26 goto label5;

        $i27 = r0[1];

        if $i9 != $i27 goto label5;

        return 0;

     label5:
        return 1;
    }

    private boolean jump2(double, double, int[])
    {
        java.lang.Integer $r14, $r15, $r20, $r21;
        ucar.nc2.dt.grid.GridCoordinate2D r1;
        ucar.ma2.ArrayDouble$D2 $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.Object[] $r12, $r16, $r18;
        java.lang.Double $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29;
        long $l14, $l15;
        int[] r0;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        double $d0, $d1, d2, $d3, $d4, d5, $d6, $d7, d8, $d9, $d10, d11, d12, $d13, d14, d15, $d16, d17, $d18, $d19, $d20, $d21, $d22, $d23, d24, $d25, $d26, d27;
        java.io.PrintStream $r13, $r17, $r19;

        r1 := @this: ucar.nc2.dt.grid.GridCoordinate2D;

        d12 := @parameter0: double;

        d15 := @parameter1: double;

        r0 := @parameter2: int[];

        $i2 = r0[0];

        $i0 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: int nrows>;

        $i1 = $i0 - 1;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, 0);

        $i7 = r0[1];

        $i5 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: int ncols>;

        $i6 = $i5 - 1;

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i6);

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>($i8, 0);

        $r2 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $i10 = $i4 + 1;

        $d0 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i10, $i9);

        $r3 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $d1 = virtualinvoke $r3.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i4, $i9);

        d2 = $d0 - $d1;

        $r4 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $i11 = $i9 + 1;

        $d3 = virtualinvoke $r4.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i4, $i11);

        $r5 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $d4 = virtualinvoke $r5.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i4, $i9);

        d5 = $d3 - $d4;

        $r6 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $i12 = $i9 + 1;

        $d6 = virtualinvoke $r6.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i4, $i12);

        $r7 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $d7 = virtualinvoke $r7.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i4, $i9);

        d8 = $d6 - $d7;

        $r8 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $i13 = $i4 + 1;

        $d9 = virtualinvoke $r8.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i13, $i9);

        $r9 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $d10 = virtualinvoke $r9.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i4, $i9);

        d11 = $d9 - $d10;

        $r10 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $d13 = virtualinvoke $r10.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i4, $i9);

        d14 = d12 - $d13;

        $r11 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $d16 = virtualinvoke $r11.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i4, $i9);

        d17 = d15 - $d16;

        $d18 = d11 * d14;

        $d19 = $d18 / d2;

        $d23 = d17 - $d19;

        $d20 = d5 * d11;

        $d21 = $d20 / d2;

        $d22 = d8 - $d21;

        d24 = $d23 / $d22;

        $d25 = d5 * d24;

        $d26 = d14 - $d25;

        d27 = $d26 / d2;

        $z0 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean debug>;

        if $z0 == 0 goto label1;

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r18 = newarray (java.lang.Object)[10];

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r18[0] = $r20;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r18[1] = $r21;

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d8);

        $r18[2] = $r22;

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d11);

        $r18[3] = $r23;

        $r24 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        $r18[4] = $r24;

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r18[5] = $r25;

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d14);

        $r18[6] = $r26;

        $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d17);

        $r18[7] = $r27;

        $r28 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d27);

        $r18[8] = $r28;

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d24);

        $r18[9] = $r29;

        virtualinvoke $r19.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("   jump from %d %d (dlondx=%f dlondy=%f dlatdx=%f dlatdy=%f) (diffLat,Lon=%f %f) (deltalat,Lon=%f %f)", $r18);

     label1:
        $l14 = staticinvoke <java.lang.Math: long round(double)>(d27);

        $i30 = (int) $l14;

        $l15 = staticinvoke <java.lang.Math: long round(double)>(d24);

        $i31 = (int) $l15;

        if $i30 != 0 goto label3;

        if $i31 != 0 goto label3;

        $z2 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean debug>;

        if $z2 == 0 goto label2;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = newarray (java.lang.Object)[0];

        virtualinvoke $r17.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("%n   incr:", $r16);

     label2:
        $z3 = specialinvoke r1.<ucar.nc2.dt.grid.GridCoordinate2D: boolean incr(double,double,int[])>(d12, d15, r0);

        return $z3;

     label3:
        $i18 = $i4 + $i30;

        $i16 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: int nrows>;

        $i17 = $i16 - 1;

        $i19 = staticinvoke <java.lang.Math: int min(int,int)>($i18, $i17);

        $i20 = staticinvoke <java.lang.Math: int max(int,int)>($i19, 0);

        r0[0] = $i20;

        $i23 = $i9 + $i31;

        $i21 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: int ncols>;

        $i22 = $i21 - 1;

        $i24 = staticinvoke <java.lang.Math: int min(int,int)>($i23, $i22);

        $i25 = staticinvoke <java.lang.Math: int max(int,int)>($i24, 0);

        r0[1] = $i25;

        $z1 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean debug>;

        if $z1 == 0 goto label4;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = newarray (java.lang.Object)[2];

        $i28 = r0[0];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i28);

        $r12[0] = $r14;

        $i29 = r0[1];

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i29);

        $r12[1] = $r15;

        virtualinvoke $r13.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" to (%d %d)%n", $r12);

     label4:
        $i26 = r0[0];

        if $i4 != $i26 goto label5;

        $i27 = r0[1];

        if $i9 != $i27 goto label5;

        return 0;

     label5:
        return 1;
    }

    private boolean incr(double, double, int[])
    {
        byte $b2, $b3, $b5, $b7, $b9, $b11, $b12, $b13, $b14;
        int[] r0;
        ucar.nc2.dt.grid.GridCoordinate2D r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        ucar.ma2.ArrayDouble$D2 $r2, $r3;
        int i0, i1, $i4, $i6, $i8, $i10, $i15, $i16, $i17, $i18, $i19;
        double d0, $d1, d2, d3, $d4, d5, $d6, $d7;

        r1 := @this: ucar.nc2.dt.grid.GridCoordinate2D;

        d0 := @parameter0: double;

        d3 := @parameter1: double;

        r0 := @parameter2: int[];

        i0 = r0[0];

        i1 = r0[1];

        $r2 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 latEdge>;

        $d1 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i0, i1);

        d2 = d0 - $d1;

        $r3 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: ucar.ma2.ArrayDouble$D2 lonEdge>;

        $d4 = virtualinvoke $r3.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i0, i1);

        d5 = d3 - $d4;

        $d6 = staticinvoke <java.lang.Math: double abs(double)>(d2);

        $d7 = staticinvoke <java.lang.Math: double abs(double)>(d5);

        $b2 = $d6 cmpl $d7;

        $i15 = (int) $b2;

        if $i15 <= 0 goto label06;

        $b7 = d2 cmpl 0.0;

        $i16 = (int) $b7;

        if $i16 <= 0 goto label01;

        $b11 = 1;

        goto label02;

     label01:
        $b11 = -1;

     label02:
        $i8 = i0 + $b11;

        r0[0] = $i8;

        $z3 = specialinvoke r1.<ucar.nc2.dt.grid.GridCoordinate2D: boolean contains(double,double,int[])>(d0, d3, r0);

        if $z3 == 0 goto label03;

        return 1;

     label03:
        $b9 = d5 cmpl 0.0;

        $i17 = (int) $b9;

        if $i17 <= 0 goto label04;

        $b12 = 1;

        goto label05;

     label04:
        $b12 = -1;

     label05:
        $i10 = i1 + $b12;

        r0[1] = $i10;

        $z4 = specialinvoke r1.<ucar.nc2.dt.grid.GridCoordinate2D: boolean contains(double,double,int[])>(d0, d3, r0);

        if $z4 == 0 goto label12;

        return 1;

     label06:
        $b3 = d5 cmpl 0.0;

        $i18 = (int) $b3;

        if $i18 <= 0 goto label07;

        $b13 = 1;

        goto label08;

     label07:
        $b13 = -1;

     label08:
        $i4 = i1 + $b13;

        r0[1] = $i4;

        $z0 = specialinvoke r1.<ucar.nc2.dt.grid.GridCoordinate2D: boolean contains(double,double,int[])>(d0, d3, r0);

        if $z0 == 0 goto label09;

        return 1;

     label09:
        $b5 = d2 cmpl 0.0;

        $i19 = (int) $b5;

        if $i19 <= 0 goto label10;

        $b14 = 1;

        goto label11;

     label10:
        $b14 = -1;

     label11:
        $i6 = i0 + $b14;

        r0[0] = $i6;

        $z1 = specialinvoke r1.<ucar.nc2.dt.grid.GridCoordinate2D: boolean contains(double,double,int[])>(d0, d3, r0);

        if $z1 == 0 goto label12;

        return 1;

     label12:
        r0[0] = i0;

        r0[1] = i1;

        $z2 = specialinvoke r1.<ucar.nc2.dt.grid.GridCoordinate2D: boolean box9(double,double,int[])>(d0, d3, r0);

        return $z2;
    }

    private boolean box9(double, double, int[])
    {
        java.lang.Object[] $r2;
        int[] r0;
        ucar.nc2.dt.grid.GridCoordinate2D r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        boolean $z0, $z1;
        double d0, d1;
        java.io.PrintStream $r3;

        r1 := @this: ucar.nc2.dt.grid.GridCoordinate2D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0 := @parameter2: int[];

        i0 = r0[0];

        $i1 = i0 - 1;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 0);

        $i4 = i0 + 1;

        $i3 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: int nrows>;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);

        i6 = r0[1];

        $i7 = i6 - 1;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>($i7, 0);

        $i10 = i6 + 1;

        $i9 = r1.<ucar.nc2.dt.grid.GridCoordinate2D: int ncols>;

        $i11 = staticinvoke <java.lang.Math: int min(int,int)>($i10, $i9);

        $z0 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean debug>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = newarray (java.lang.Object)[0];

        virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("%n   box9:", $r2);

     label1:
        i12 = $i2;

     label2:
        if i12 > $i5 goto label6;

        i13 = $i8;

     label3:
        if i13 > $i11 goto label5;

        r0[0] = i12;

        r0[1] = i13;

        $z1 = specialinvoke r1.<ucar.nc2.dt.grid.GridCoordinate2D: boolean contains(double,double,int[])>(d0, d1, r0);

        if $z1 == 0 goto label4;

        return 1;

     label4:
        i13 = i13 + 1;

        goto label3;

     label5:
        i12 = i12 + 1;

        goto label2;

     label6:
        return 0;
    }

    private static void doOne(ucar.nc2.dt.grid.GridCoordinate2D, double, double)
    {
        java.lang.Integer $r10, $r11, $r22, $r23;
        int[] r0;
        ucar.nc2.dt.grid.GridCoordinate2D r1;
        boolean $z0, $z1;
        java.lang.Object[] $r2, $r6, $r12, $r16, $r18;
        java.lang.Double $r4, $r5, $r8, $r9, $r14, $r15, $r20, $r21;
        int $i0, $i1, $i2, $i3;
        double d0, d1;
        java.io.PrintStream $r3, $r7, $r13, $r17, $r19;

        r1 := @parameter0: ucar.nc2.dt.grid.GridCoordinate2D;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r0 = newarray (int)[2];

        $z0 = virtualinvoke r1.<ucar.nc2.dt.grid.GridCoordinate2D: boolean findCoordElementForce(double,double,int[])>(d0, d1, r0);

        if $z0 == 0 goto label1;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r6 = newarray (java.lang.Object)[4];

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r6[1] = $r9;

        $i0 = r0[0];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6[2] = $r10;

        $i1 = r0[1];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6[3] = $r11;

        virtualinvoke $r7.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("Brute (%f %f) == (%d %d) %n", $r6);

        goto label2;

     label1:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r2[1] = $r5;

        virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("Brute (%f %f) FAIL", $r2);

        return;

     label2:
        $z1 = virtualinvoke r1.<ucar.nc2.dt.grid.GridCoordinate2D: boolean findCoordElement(double,double,int[])>(d0, d1, r0);

        if $z1 == 0 goto label3;

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r18 = newarray (java.lang.Object)[4];

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r18[0] = $r20;

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r18[1] = $r21;

        $i2 = r0[0];

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r18[2] = $r22;

        $i3 = r0[1];

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r18[3] = $r23;

        virtualinvoke $r19.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("(%f %f) == (%d %d) %n", $r18);

        goto label4;

     label3:
        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = newarray (java.lang.Object)[2];

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r12[0] = $r14;

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r12[1] = $r15;

        virtualinvoke $r13.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("(%f %f) FAIL %n", $r12);

     label4:
        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = newarray (java.lang.Object)[0];

        virtualinvoke $r17.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("----------------------------------------%n", $r16);

        return;
    }

    public static void test1() throws java.io.IOException
    {
        ucar.nc2.dt.grid.GridDataset $r0;
        java.lang.AssertionError $r8, $r9;
        ucar.nc2.dataset.CoordinateAxis $r3, $r4;
        ucar.nc2.dt.grid.GeoGrid $r1;
        ucar.nc2.dt.grid.GridCoordinate2D $r5;
        ucar.nc2.dataset.CoordinateAxis2D $r6, $r7;
        ucar.nc2.dt.GridCoordSystem $r2;
        boolean $z0, $z1, $z2, $z3;

        $r0 = staticinvoke <ucar.nc2.dt.grid.GridDataset: ucar.nc2.dt.grid.GridDataset open(java.lang.String)>("D:/work/asaScience/EGM200_3.ncml");

        $r1 = virtualinvoke $r0.<ucar.nc2.dt.grid.GridDataset: ucar.nc2.dt.grid.GeoGrid findGridByName(java.lang.String)>("u_wind");

        $r2 = virtualinvoke $r1.<ucar.nc2.dt.grid.GeoGrid: ucar.nc2.dt.GridCoordSystem getCoordinateSystem()>();

        $r3 = interfaceinvoke $r2.<ucar.nc2.dt.GridCoordSystem: ucar.nc2.dataset.CoordinateAxis getXHorizAxis()>();

        $z0 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z3 = $r3 instanceof ucar.nc2.dataset.CoordinateAxis2D;

        if $z3 != 0 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $r4 = interfaceinvoke $r2.<ucar.nc2.dt.GridCoordSystem: ucar.nc2.dataset.CoordinateAxis getYHorizAxis()>();

        $z1 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z2 = $r4 instanceof ucar.nc2.dataset.CoordinateAxis2D;

        if $z2 != 0 goto label2;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label2:
        $r5 = new ucar.nc2.dt.grid.GridCoordinate2D;

        $r7 = (ucar.nc2.dataset.CoordinateAxis2D) $r4;

        $r6 = (ucar.nc2.dataset.CoordinateAxis2D) $r3;

        specialinvoke $r5.<ucar.nc2.dt.grid.GridCoordinate2D: void <init>(ucar.nc2.dataset.CoordinateAxis2D,ucar.nc2.dataset.CoordinateAxis2D)>($r7, $r6);

        staticinvoke <ucar.nc2.dt.grid.GridCoordinate2D: void doOne(ucar.nc2.dt.grid.GridCoordinate2D,double,double)>($r5, 35.0, -6.0);

        staticinvoke <ucar.nc2.dt.grid.GridCoordinate2D: void doOne(ucar.nc2.dt.grid.GridCoordinate2D,double,double)>($r5, 34.667302, -5.008376);

        staticinvoke <ucar.nc2.dt.grid.GridCoordinate2D: void doOne(ucar.nc2.dt.grid.GridCoordinate2D,double,double)>($r5, 34.667303, -6.39424);

        staticinvoke <ucar.nc2.dt.grid.GridCoordinate2D: void doOne(ucar.nc2.dt.grid.GridCoordinate2D,double,double)>($r5, 36.6346, -5.0084);

        staticinvoke <ucar.nc2.dt.grid.GridCoordinate2D: void doOne(ucar.nc2.dt.grid.GridCoordinate2D,double,double)>($r5, 36.6346, -6.39424);

        virtualinvoke $r0.<ucar.nc2.dt.grid.GridDataset: void close()>();

        return;
    }

    public static void test2() throws java.io.IOException
    {
        ucar.nc2.dt.grid.GridDataset $r0;
        java.lang.AssertionError $r8, $r9;
        ucar.nc2.dataset.CoordinateAxis $r3, $r4;
        ucar.nc2.dt.grid.GeoGrid $r1;
        ucar.nc2.dt.grid.GridCoordinate2D $r5;
        ucar.nc2.dataset.CoordinateAxis2D $r6, $r7;
        ucar.nc2.dt.GridCoordSystem $r2;
        boolean $z0, $z1, $z2, $z3;

        $r0 = staticinvoke <ucar.nc2.dt.grid.GridDataset: ucar.nc2.dt.grid.GridDataset open(java.lang.String)>("C:/data/fmrc/apex_fmrc/Run_20091025_0000.nc");

        $r1 = virtualinvoke $r0.<ucar.nc2.dt.grid.GridDataset: ucar.nc2.dt.grid.GeoGrid findGridByName(java.lang.String)>("temp");

        $r2 = virtualinvoke $r1.<ucar.nc2.dt.grid.GeoGrid: ucar.nc2.dt.GridCoordSystem getCoordinateSystem()>();

        $r3 = interfaceinvoke $r2.<ucar.nc2.dt.GridCoordSystem: ucar.nc2.dataset.CoordinateAxis getXHorizAxis()>();

        $z0 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z3 = $r3 instanceof ucar.nc2.dataset.CoordinateAxis2D;

        if $z3 != 0 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $r4 = interfaceinvoke $r2.<ucar.nc2.dt.GridCoordSystem: ucar.nc2.dataset.CoordinateAxis getYHorizAxis()>();

        $z1 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z2 = $r4 instanceof ucar.nc2.dataset.CoordinateAxis2D;

        if $z2 != 0 goto label2;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label2:
        $r5 = new ucar.nc2.dt.grid.GridCoordinate2D;

        $r7 = (ucar.nc2.dataset.CoordinateAxis2D) $r4;

        $r6 = (ucar.nc2.dataset.CoordinateAxis2D) $r3;

        specialinvoke $r5.<ucar.nc2.dt.grid.GridCoordinate2D: void <init>(ucar.nc2.dataset.CoordinateAxis2D,ucar.nc2.dataset.CoordinateAxis2D)>($r7, $r6);

        staticinvoke <ucar.nc2.dt.grid.GridCoordinate2D: void doOne(ucar.nc2.dt.grid.GridCoordinate2D,double,double)>($r5, 40.166959, -73.954234);

        virtualinvoke $r0.<ucar.nc2.dt.grid.GridDataset: void close()>();

        return;
    }

    public static void test3() throws java.io.IOException
    {
        ucar.nc2.dt.grid.GridDataset $r0;
        java.lang.AssertionError $r8, $r9;
        ucar.nc2.dataset.CoordinateAxis $r3, $r4;
        ucar.nc2.dt.grid.GeoGrid $r1;
        ucar.nc2.dt.grid.GridCoordinate2D $r5;
        ucar.nc2.dataset.CoordinateAxis2D $r6, $r7;
        ucar.nc2.dt.GridCoordSystem $r2;
        boolean $z0, $z1, $z2, $z3;

        $r0 = staticinvoke <ucar.nc2.dt.grid.GridDataset: ucar.nc2.dt.grid.GridDataset open(java.lang.String)>("/data/testdata/cdmUnitTest/fmrc/rtofs/ofs.20091122/ofs_atl.t00z.F024.grb.grib2");

        $r1 = virtualinvoke $r0.<ucar.nc2.dt.grid.GridDataset: ucar.nc2.dt.grid.GeoGrid findGridByName(java.lang.String)>("Sea_Surface_Height_Relative_to_Geoid");

        $r2 = virtualinvoke $r1.<ucar.nc2.dt.grid.GeoGrid: ucar.nc2.dt.GridCoordSystem getCoordinateSystem()>();

        $r3 = interfaceinvoke $r2.<ucar.nc2.dt.GridCoordSystem: ucar.nc2.dataset.CoordinateAxis getXHorizAxis()>();

        $z0 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z3 = $r3 instanceof ucar.nc2.dataset.CoordinateAxis2D;

        if $z3 != 0 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $r4 = interfaceinvoke $r2.<ucar.nc2.dt.GridCoordSystem: ucar.nc2.dataset.CoordinateAxis getYHorizAxis()>();

        $z1 = <ucar.nc2.dt.grid.GridCoordinate2D: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z2 = $r4 instanceof ucar.nc2.dataset.CoordinateAxis2D;

        if $z2 != 0 goto label2;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label2:
        $r5 = new ucar.nc2.dt.grid.GridCoordinate2D;

        $r7 = (ucar.nc2.dataset.CoordinateAxis2D) $r4;

        $r6 = (ucar.nc2.dataset.CoordinateAxis2D) $r3;

        specialinvoke $r5.<ucar.nc2.dt.grid.GridCoordinate2D: void <init>(ucar.nc2.dataset.CoordinateAxis2D,ucar.nc2.dataset.CoordinateAxis2D)>($r7, $r6);

        staticinvoke <ucar.nc2.dt.grid.GridCoordinate2D: void doOne(ucar.nc2.dt.grid.GridCoordinate2D,double,double)>($r5, -15.554099426977835, -0.7742870290336263);

        virtualinvoke $r0.<ucar.nc2.dt.grid.GridDataset: void close()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <ucar.nc2.dt.grid.GridCoordinate2D: void test3()>();

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/nc2/dt/grid/GridCoordinate2D;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.dt.grid.GridCoordinate2D: boolean $assertionsDisabled> = $z1;

        <ucar.nc2.dt.grid.GridCoordinate2D: boolean debug> = 0;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/dt/grid/GridCoordinate2D;");

        <ucar.nc2.dt.grid.GridCoordinate2D: org.slf4j.Logger log> = $r1;

        return;
    }
}
