public final class org.apache.poi.ss.util.NumberToTextConverter extends java.lang.Object
{
    private static final long EXCEL_NAN_BITS;
    private static final int MAX_TEXT_LEN;

    private void <init>()
    {
        org.apache.poi.ss.util.NumberToTextConverter r0;

        r0 := @this: org.apache.poi.ss.util.NumberToTextConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String toText(double)
    {
        long $l0;
        java.lang.String $r0;
        double d0;

        d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $r0 = staticinvoke <org.apache.poi.ss.util.NumberToTextConverter: java.lang.String rawDoubleBitsToText(long)>($l0);

        return $r0;
    }

    static java.lang.String rawDoubleBitsToText(long)
    {
        org.apache.poi.ss.util.NormalisedDecimal $r1;
        long l0, l6;
        org.apache.poi.ss.util.ExpandedDouble $r6;
        byte $b1, $b2, $b5;
        int $i3, $i4, $i7, $i9;
        java.lang.String $r3, $r4, $r5;
        boolean z1, $z2, $z3;
        java.lang.StringBuilder $r7;

        l0 := @parameter0: long;

        l6 = l0;

        $b1 = l0 cmp 0L;

        $i7 = (int) $b1;

        if $i7 >= 0 goto label01;

        $z3 = 1;

        $z2 = 1;

        goto label02;

     label01:
        $z3 = 0;

        $z2 = 0;

     label02:
        z1 = $z3;

        if $z2 == 0 goto label03;

        l6 = l0 & 9223372036854775807L;

     label03:
        $b2 = l6 cmp 0L;

        if $b2 != 0 goto label06;

        if z1 == 0 goto label04;

        $r4 = "-0";

        goto label05;

     label04:
        $r4 = "0";

     label05:
        return $r4;

     label06:
        $r6 = new org.apache.poi.ss.util.ExpandedDouble;

        specialinvoke $r6.<org.apache.poi.ss.util.ExpandedDouble: void <init>(long)>(l6);

        $i3 = virtualinvoke $r6.<org.apache.poi.ss.util.ExpandedDouble: int getBinaryExponent()>();

        $i9 = (int) -1022;

        if $i3 >= $i9 goto label09;

        if z1 == 0 goto label07;

        $r5 = "-0";

        goto label08;

     label07:
        $r5 = "0";

     label08:
        return $r5;

     label09:
        $i4 = virtualinvoke $r6.<org.apache.poi.ss.util.ExpandedDouble: int getBinaryExponent()>();

        if $i4 != 1024 goto label11;

        $b5 = l6 cmp -276939487313920L;

        if $b5 != 0 goto label10;

        return "3.484840871308E+308";

     label10:
        z1 = 0;

     label11:
        $r1 = virtualinvoke $r6.<org.apache.poi.ss.util.ExpandedDouble: org.apache.poi.ss.util.NormalisedDecimal normaliseBaseTen()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>(21);

        if z1 == 0 goto label12;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label12:
        staticinvoke <org.apache.poi.ss.util.NumberToTextConverter: void convertToText(java.lang.StringBuilder,org.apache.poi.ss.util.NormalisedDecimal)>($r7, $r1);

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private static void convertToText(java.lang.StringBuilder, org.apache.poi.ss.util.NormalisedDecimal)
    {
        org.apache.poi.ss.util.NormalisedDecimal r0, $r1;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.StringBuilder r2;
        java.lang.String $r3, r4;

        r2 := @parameter0: java.lang.StringBuilder;

        r0 := @parameter1: org.apache.poi.ss.util.NormalisedDecimal;

        $r1 = virtualinvoke r0.<org.apache.poi.ss.util.NormalisedDecimal: org.apache.poi.ss.util.NormalisedDecimal roundUnits()>();

        $i0 = virtualinvoke $r1.<org.apache.poi.ss.util.NormalisedDecimal: int getDecimalExponent()>();

        i3 = $i0;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        if $i1 <= 98 goto label1;

        $r3 = virtualinvoke $r1.<org.apache.poi.ss.util.NormalisedDecimal: java.lang.String getSignificantDecimalDigitsLastDigitRounded()>();

        r4 = $r3;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i2 != 16 goto label2;

        i3 = $i0 + 1;

        goto label2;

     label1:
        r4 = virtualinvoke $r1.<org.apache.poi.ss.util.NormalisedDecimal: java.lang.String getSignificantDecimalDigits()>();

     label2:
        $i4 = staticinvoke <org.apache.poi.ss.util.NumberToTextConverter: int countSignifantDigits(java.lang.String)>(r4);

        if i3 >= 0 goto label3;

        staticinvoke <org.apache.poi.ss.util.NumberToTextConverter: void formatLessThanOne(java.lang.StringBuilder,java.lang.String,int,int)>(r2, r4, i3, $i4);

        goto label4;

     label3:
        staticinvoke <org.apache.poi.ss.util.NumberToTextConverter: void formatGreaterThanOne(java.lang.StringBuilder,java.lang.String,int,int)>(r2, r4, i3, $i4);

     label4:
        return;
    }

    private static void formatLessThanOne(java.lang.StringBuilder, java.lang.String, int, int)
    {
        java.lang.CharSequence $r2, $r3;
        char $c6;
        int i0, $i1, i2, i3, $i4, i5, $i7, i8, $i10;
        java.lang.StringBuilder r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i3 := @parameter3: int;

        $i1 = neg i0;

        i2 = $i1 - 1;

        $i4 = 2 + i2;

        i5 = $i4 + i3;

        $z0 = staticinvoke <org.apache.poi.ss.util.NumberToTextConverter: boolean needsScientificNotation(int)>(i5);

        if $z0 == 0 goto label2;

        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        if i3 <= 1 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(1, i3);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r3);

     label1:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("E-");

        $i7 = neg i0;

        staticinvoke <org.apache.poi.ss.util.NumberToTextConverter: void appendExp(java.lang.StringBuilder,int)>(r0, $i7);

        return;

     label2:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0.");

        i8 = i2;

     label3:
        if i8 <= 0 goto label4;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        $i10 = (int) -1;

        i8 = i8 + $i10;

        goto label3;

     label4:
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(0, i3);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r2);

        return;
    }

    private static void formatGreaterThanOne(java.lang.StringBuilder, java.lang.String, int, int)
    {
        java.lang.CharSequence $r2, $r3, $r4, $r5;
        char $c6;
        int i0, i1, $i2, i3, $i4, $i5, i7, $i9;
        java.lang.StringBuilder r0;
        java.lang.String r1;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if i0 <= 19 goto label2;

        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        if i1 <= 1 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(1, i1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r5);

     label1:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("E+");

        staticinvoke <org.apache.poi.ss.util.NumberToTextConverter: void appendExp(java.lang.StringBuilder,int)>(r0, i0);

        return;

     label2:
        $i2 = i1 - i0;

        i3 = $i2 - 1;

        if i3 <= 0 goto label3;

        $i4 = i0 + 1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(0, $i4);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r3);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i5 = i0 + 1;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.CharSequence subSequence(int,int)>($i5, i1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r4);

        return;

     label3:
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(0, i1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r2);

        i7 = neg i3;

     label4:
        if i7 <= 0 goto label5;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        $i9 = (int) -1;

        i7 = i7 + $i9;

        goto label4;

     label5:
        return;
    }

    private static boolean needsScientificNotation(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 <= 20 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static int countSignifantDigits(java.lang.String)
    {
        char $c1;
        java.lang.RuntimeException $r2;
        int $i0, $i2, i3, $i4, $i6;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = $i0 - 1;

     label1:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c1;

        if $i4 != 48 goto label2;

        $i6 = (int) -1;

        i3 = i3 + $i6;

        if i3 >= 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("No non-zero digits found");

        throw $r2;

     label2:
        $i2 = i3 + 1;

        return $i2;
    }

    private static void appendExp(java.lang.StringBuilder, int)
    {
        int i0, $i1;
        java.lang.StringBuilder r0;
        char $c2;

        r0 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        if i0 >= 10 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        $i1 = 48 + i0;

        $c2 = (char) $i1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        return;

     label1:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.poi.ss.util.NumberToTextConverter: int MAX_TEXT_LEN> = 20;

        <org.apache.poi.ss.util.NumberToTextConverter: long EXCEL_NAN_BITS> = -276939487313920L;

        return;
    }
}
