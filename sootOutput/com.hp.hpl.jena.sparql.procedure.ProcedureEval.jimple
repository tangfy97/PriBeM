public abstract class com.hp.hpl.jena.sparql.procedure.ProcedureEval extends com.hp.hpl.jena.sparql.procedure.ProcedureBase
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.procedure.ProcedureEval r0;

        r0 := @this: com.hp.hpl.jena.sparql.procedure.ProcedureEval;

        specialinvoke r0.<com.hp.hpl.jena.sparql.procedure.ProcedureBase: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.engine.QueryIterator exec(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r9, $r12;
        com.hp.hpl.jena.graph.Node r13;
        com.hp.hpl.jena.sparql.expr.Expr r8;
        com.hp.hpl.jena.sparql.expr.ExprList $r0, r1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r5;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.core.Var $r11;
        com.hp.hpl.jena.sparql.procedure.ProcedureEval r3;
        com.hp.hpl.jena.sparql.engine.binding.Binding r4;
        java.lang.Object $r7;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r6;
        com.hp.hpl.jena.sparql.expr.ExprVar $r10;

        r3 := @this: com.hp.hpl.jena.sparql.procedure.ProcedureEval;

        r4 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r13 := @parameter1: com.hp.hpl.jena.graph.Node;

        r1 := @parameter2: com.hp.hpl.jena.sparql.expr.ExprList;

        r5 := @parameter3: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.sparql.expr.Expr) $r7;

        $z1 = interfaceinvoke r8.<com.hp.hpl.jena.sparql.expr.Expr: boolean isVariable()>();

        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke r8.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.ExprVar getExprVar()>();

        $r11 = virtualinvoke $r10.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var asVar()>();

        $z2 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.engine.binding.Binding: boolean contains(com.hp.hpl.jena.sparql.core.Var)>($r11);

        if $z2 == 0 goto label2;

        $r12 = interfaceinvoke r8.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r4, r5);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r12);

        goto label3;

     label2:
        virtualinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>(r8);

     label3:
        goto label5;

     label4:
        $r9 = interfaceinvoke r8.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r4, r5);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r9);

     label5:
        goto label1;

     label6:
        $r6 = virtualinvoke r3.<com.hp.hpl.jena.sparql.procedure.ProcedureEval: com.hp.hpl.jena.sparql.engine.QueryIterator execEval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r4, $r0, r5);

        return $r6;
    }

    public abstract com.hp.hpl.jena.sparql.engine.QueryIterator execEval(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.engine.ExecutionContext);
}
