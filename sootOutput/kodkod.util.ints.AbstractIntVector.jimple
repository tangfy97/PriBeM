public abstract class kodkod.util.ints.AbstractIntVector extends kodkod.util.ints.AbstractIntCollection implements kodkod.util.ints.IntVector
{

    protected void <init>()
    {
        kodkod.util.ints.AbstractIntVector r0;

        r0 := @this: kodkod.util.ints.AbstractIntVector;

        specialinvoke r0.<kodkod.util.ints.AbstractIntCollection: void <init>()>();

        return;
    }

    public boolean contains(int)
    {
        int $i0, $i1, i2, i3;
        kodkod.util.ints.AbstractIntVector r0;

        r0 := @this: kodkod.util.ints.AbstractIntVector;

        i2 := @parameter0: int;

        i3 = 0;

        $i0 = virtualinvoke r0.<kodkod.util.ints.AbstractIntVector: int size()>();

        goto label3;

     label1:
        $i1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntVector: int get(int)>(i3);

        if $i1 != i2 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < $i0 goto label1;

        return 0;
    }

    public int set(int, int)
    {
        java.lang.UnsupportedOperationException $r0;
        int i0, i1;
        kodkod.util.ints.AbstractIntVector r1;

        r1 := @this: kodkod.util.ints.AbstractIntVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int indexOf(int)
    {
        int $i0, $i1, i2, i3, $i5;
        kodkod.util.ints.AbstractIntVector r0;

        r0 := @this: kodkod.util.ints.AbstractIntVector;

        i2 := @parameter0: int;

        i3 = 0;

        $i0 = virtualinvoke r0.<kodkod.util.ints.AbstractIntVector: int size()>();

        goto label3;

     label1:
        $i1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntVector: int get(int)>(i3);

        if $i1 != i2 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < $i0 goto label1;

        $i5 = (int) -1;

        return $i5;
    }

    public int lastIndexOf(int)
    {
        int $i0, $i1, i2, i3, $i5, $i7;
        kodkod.util.ints.AbstractIntVector r0;

        r0 := @this: kodkod.util.ints.AbstractIntVector;

        i2 := @parameter0: int;

        $i0 = virtualinvoke r0.<kodkod.util.ints.AbstractIntVector: int size()>();

        i3 = $i0 - 1;

        goto label3;

     label1:
        $i1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntVector: int get(int)>(i3);

        if $i1 != i2 goto label2;

        return i3;

     label2:
        $i5 = (int) -1;

        i3 = i3 + $i5;

     label3:
        if i3 >= 0 goto label1;

        $i7 = (int) -1;

        return $i7;
    }

    public boolean add(int)
    {
        int $i0, i1, $i2;
        kodkod.util.ints.AbstractIntVector r0;

        r0 := @this: kodkod.util.ints.AbstractIntVector;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<kodkod.util.ints.AbstractIntVector: int size()>();

        virtualinvoke r0.<kodkod.util.ints.AbstractIntVector: void add(int,int)>($i0, i1);

        $i2 = virtualinvoke r0.<kodkod.util.ints.AbstractIntVector: int size()>();

        if $i0 == $i2 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void add(int, int)
    {
        java.lang.UnsupportedOperationException $r0;
        int i0, i1;
        kodkod.util.ints.AbstractIntVector r1;

        r1 := @this: kodkod.util.ints.AbstractIntVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean addAll(kodkod.util.ints.IntCollection)
    {
        int $i0;
        kodkod.util.ints.AbstractIntVector r0;
        kodkod.util.ints.IntCollection r1;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractIntVector;

        r1 := @parameter0: kodkod.util.ints.IntCollection;

        $i0 = virtualinvoke r0.<kodkod.util.ints.AbstractIntVector: int size()>();

        $z0 = virtualinvoke r0.<kodkod.util.ints.AbstractIntVector: boolean addAll(int,kodkod.util.ints.IntCollection)>($i0, r1);

        return $z0;
    }

    public boolean addAll(int, kodkod.util.ints.IntCollection)
    {
        java.lang.UnsupportedOperationException $r0;
        int i0;
        kodkod.util.ints.AbstractIntVector r1;
        kodkod.util.ints.IntCollection r2;

        r1 := @this: kodkod.util.ints.AbstractIntVector;

        i0 := @parameter0: int;

        r2 := @parameter1: kodkod.util.ints.IntCollection;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int removeAt(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        kodkod.util.ints.AbstractIntVector r1;

        r1 := @this: kodkod.util.ints.AbstractIntVector;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public kodkod.util.ints.IntIterator iterator()
    {
        int $i0;
        kodkod.util.ints.AbstractIntVector r0;
        kodkod.util.ints.IntIterator $r1;

        r0 := @this: kodkod.util.ints.AbstractIntVector;

        $i0 = virtualinvoke r0.<kodkod.util.ints.AbstractIntVector: int size()>();

        $r1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntVector: kodkod.util.ints.IntIterator iterator(int,int)>(0, $i0);

        return $r1;
    }

    public kodkod.util.ints.IntIterator iterator(int, int)
    {
        int i0, i1;
        kodkod.util.ints.AbstractIntVector$AscendingIntVectorIterator $r2;
        kodkod.util.ints.AbstractIntVector$DescendingIntVectorIterator $r3;
        kodkod.util.ints.AbstractIntVector r0;
        kodkod.util.ints.AbstractIntVector$IntVectorIterator $r1;

        r0 := @this: kodkod.util.ints.AbstractIntVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 > i1 goto label1;

        $r2 = new kodkod.util.ints.AbstractIntVector$AscendingIntVectorIterator;

        $r1 = $r2;

        specialinvoke $r2.<kodkod.util.ints.AbstractIntVector$AscendingIntVectorIterator: void <init>(kodkod.util.ints.AbstractIntVector,int,int)>(r0, i0, i1);

        goto label2;

     label1:
        $r3 = new kodkod.util.ints.AbstractIntVector$DescendingIntVectorIterator;

        $r1 = $r3;

        specialinvoke $r3.<kodkod.util.ints.AbstractIntVector$DescendingIntVectorIterator: void <init>(kodkod.util.ints.AbstractIntVector,int,int)>(r0, i0, i1);

     label2:
        return $r1;
    }

    public int hashCode()
    {
        int $i0, $i1, $i2, i3, i4;
        kodkod.util.ints.AbstractIntVector r0;

        r0 := @this: kodkod.util.ints.AbstractIntVector;

        $i0 = virtualinvoke r0.<kodkod.util.ints.AbstractIntVector: int size()>();

        i3 = $i0;

        i4 = 0;

        goto label2;

     label1:
        $i1 = virtualinvoke r0.<kodkod.util.ints.AbstractIntVector: int get(int)>(i4);

        i3 = staticinvoke <kodkod.util.ints.Ints: int superFastHashIncremental(int,int)>($i1, i3);

        i4 = i4 + 1;

     label2:
        if i4 < $i0 goto label1;

        $i2 = staticinvoke <kodkod.util.ints.Ints: int superFastHashAvalanche(int)>(i3);

        return $i2;
    }

    public boolean equals(java.lang.Object)
    {
        kodkod.util.ints.AbstractIntVector r1;
        kodkod.util.ints.IntVector r2;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object r0;
        boolean $z0;

        r1 := @this: kodkod.util.ints.AbstractIntVector;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof kodkod.util.ints.IntVector;

        if $z0 == 0 goto label5;

        r2 = (kodkod.util.ints.IntVector) r0;

        $i0 = virtualinvoke r1.<kodkod.util.ints.AbstractIntVector: int size()>();

        $i1 = interfaceinvoke r2.<kodkod.util.ints.IntVector: int size()>();

        if $i1 != $i0 goto label5;

        i4 = 0;

        goto label4;

     label2:
        $i2 = virtualinvoke r1.<kodkod.util.ints.AbstractIntVector: int get(int)>(i4);

        $i3 = interfaceinvoke r2.<kodkod.util.ints.IntVector: int get(int)>(i4);

        if $i2 == $i3 goto label3;

        return 0;

     label3:
        i4 = i4 + 1;

     label4:
        if i4 < $i0 goto label2;

        return 1;

     label5:
        return 0;
    }

    public java.lang.String toString()
    {
        kodkod.util.ints.AbstractIntVector r1;
        kodkod.util.ints.IntIterator $r2;
        int $i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.String $r3;
        boolean $z0, $z1;

        r1 := @this: kodkod.util.ints.AbstractIntVector;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r2 = virtualinvoke r1.<kodkod.util.ints.AbstractIntVector: kodkod.util.ints.IntIterator iterator()>();

        $z0 = interfaceinvoke $r2.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = interfaceinvoke $r2.<kodkod.util.ints.IntIterator: int next()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        goto label2;

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i0 = interfaceinvoke $r2.<kodkod.util.ints.IntIterator: int next()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

     label2:
        $z1 = interfaceinvoke $r2.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
