class com.mycila.inject.internal.cglib.proxy.MixinEmitter extends com.mycila.inject.internal.cglib.core.ClassEmitter
{
    private static final java.lang.String FIELD_NAME;
    private static final com.mycila.inject.internal.cglib.core.Signature CSTRUCT_OBJECT_ARRAY;
    private static final com.mycila.inject.internal.asm.Type MIXIN;
    private static final com.mycila.inject.internal.cglib.core.Signature NEW_INSTANCE;

    public void <init>(com.mycila.inject.internal.asm.ClassVisitor, java.lang.String, java.lang.Class[], int[])
    {
        com.mycila.inject.internal.asm.Type $r4, $r8, $r21;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r10, $r18;
        com.mycila.inject.internal.cglib.proxy.MixinEmitter r0;
        java.lang.reflect.Method[] $r13;
        com.mycila.inject.internal.cglib.core.MethodInfo $r17;
        java.util.HashSet $r11;
        int[] r19;
        int $i0, $i1, i2, i3, $i4;
        java.lang.String r2;
        com.mycila.inject.internal.asm.Type[] $r6;
        com.mycila.inject.internal.asm.ClassVisitor r1;
        java.lang.reflect.Method $r14, $r16;
        com.mycila.inject.internal.cglib.core.ClassInfo $r20;
        boolean $z0;
        com.mycila.inject.internal.cglib.core.Signature $r7, $r9;
        java.lang.Class[] r3, $r5;
        java.lang.Class $r12;
        java.lang.Object $r15;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.MixinEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class[];

        r19 := @parameter3: int[];

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: void <init>(com.mycila.inject.internal.asm.ClassVisitor)>(r1);

        $r4 = <com.mycila.inject.internal.cglib.proxy.MixinEmitter: com.mycila.inject.internal.asm.Type MIXIN>;

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.cglib.proxy.MixinEmitter: java.lang.Class[] getInterfaces(java.lang.Class[])>(r3);

        $r6 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type[] getTypes(java.lang.Class[])>($r5);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.proxy.MixinEmitter: void begin_class(int,int,java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[],java.lang.String)>(46, 1, r2, $r4, $r6, "<generated>");

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void null_constructor(com.mycila.inject.internal.cglib.core.ClassEmitter)>(r0);

        $r7 = <com.mycila.inject.internal.cglib.proxy.MixinEmitter: com.mycila.inject.internal.cglib.core.Signature NEW_INSTANCE>;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void factory_method(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.cglib.core.Signature)>(r0, $r7);

        $r8 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT_ARRAY>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.proxy.MixinEmitter: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(2, "CGLIB$DELEGATES", $r8, null);

        $r9 = <com.mycila.inject.internal.cglib.proxy.MixinEmitter: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_OBJECT_ARRAY>;

        $r10 = virtualinvoke r0.<com.mycila.inject.internal.cglib.proxy.MixinEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r9, null);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void super_invoke_constructor()>();

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putfield(java.lang.String)>("CGLIB$DELEGATES");

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>()>();

        i2 = 0;

     label1:
        $i0 = lengthof r3;

        if i2 >= $i0 goto label7;

        $r12 = r3[i2];

        $r13 = virtualinvoke r0.<com.mycila.inject.internal.cglib.proxy.MixinEmitter: java.lang.reflect.Method[] getMethods(java.lang.Class)>($r12);

        i3 = 0;

     label2:
        $i1 = lengthof $r13;

        if i3 >= $i1 goto label6;

        $r14 = $r13[i3];

        $r15 = staticinvoke <com.mycila.inject.internal.cglib.core.MethodWrapper: java.lang.Object create(java.lang.reflect.Method)>($r14);

        $z0 = interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>($r15);

        if $z0 == 0 goto label5;

        $r16 = $r13[i3];

        $r17 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.MethodInfo getMethodInfo(java.lang.reflect.Member)>($r16);

        $r18 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.cglib.core.MethodInfo,int)>(r0, $r17, 1);

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>("CGLIB$DELEGATES");

        if r19 == null goto label3;

        $i4 = r19[i2];

        goto label4;

     label3:
        $i4 = i2;

     label4:
        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aaload(int)>($i4);

        $r20 = virtualinvoke $r17.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.ClassInfo getClassInfo()>();

        $r21 = virtualinvoke $r20.<com.mycila.inject.internal.cglib.core.ClassInfo: com.mycila.inject.internal.asm.Type getType()>();

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r21);

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_args()>();

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke(com.mycila.inject.internal.cglib.core.MethodInfo)>($r17);

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

     label5:
        i3 = i3 + 1;

        goto label2;

     label6:
        i2 = i2 + 1;

        goto label1;

     label7:
        virtualinvoke r0.<com.mycila.inject.internal.cglib.proxy.MixinEmitter: void end_class()>();

        return;
    }

    protected java.lang.Class[] getInterfaces(java.lang.Class[])
    {
        java.lang.Class[] r0;
        com.mycila.inject.internal.cglib.proxy.MixinEmitter r1;

        r1 := @this: com.mycila.inject.internal.cglib.proxy.MixinEmitter;

        r0 := @parameter0: java.lang.Class[];

        return r0;
    }

    protected java.lang.reflect.Method[] getMethods(java.lang.Class)
    {
        java.lang.Class r0;
        com.mycila.inject.internal.cglib.proxy.MixinEmitter r2;
        java.lang.reflect.Method[] $r1;

        r2 := @this: com.mycila.inject.internal.cglib.proxy.MixinEmitter;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        return $r1;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.core.Signature $r0, $r2;
        com.mycila.inject.internal.asm.Type $r1, $r4, $r5;
        com.mycila.inject.internal.asm.Type[] $r3;

        <com.mycila.inject.internal.cglib.proxy.MixinEmitter: java.lang.String FIELD_NAME> = "CGLIB$DELEGATES";

        $r0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseConstructor(java.lang.String)>("Object[]");

        <com.mycila.inject.internal.cglib.proxy.MixinEmitter: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_OBJECT_ARRAY> = $r0;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("com.mycila.inject.internal.cglib.proxy.Mixin");

        <com.mycila.inject.internal.cglib.proxy.MixinEmitter: com.mycila.inject.internal.asm.Type MIXIN> = $r1;

        $r2 = new com.mycila.inject.internal.cglib.core.Signature;

        $r5 = <com.mycila.inject.internal.cglib.proxy.MixinEmitter: com.mycila.inject.internal.asm.Type MIXIN>;

        $r3 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r4 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT_ARRAY>;

        $r3[0] = $r4;

        specialinvoke $r2.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("newInstance", $r5, $r3);

        <com.mycila.inject.internal.cglib.proxy.MixinEmitter: com.mycila.inject.internal.cglib.core.Signature NEW_INSTANCE> = $r2;

        return;
    }
}
