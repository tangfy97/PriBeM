public class org.apache.zookeeper.common.PathTrie extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    private final org.apache.zookeeper.common.PathTrie$TrieNode rootNode;

    public void <init>()
    {
        org.apache.zookeeper.common.PathTrie r0;
        org.apache.zookeeper.common.PathTrie$TrieNode $r1;

        r0 := @this: org.apache.zookeeper.common.PathTrie;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.zookeeper.common.PathTrie$TrieNode;

        specialinvoke $r1.<org.apache.zookeeper.common.PathTrie$TrieNode: void <init>(org.apache.zookeeper.common.PathTrie$TrieNode,org.apache.zookeeper.common.PathTrie$1)>(null, null);

        r0.<org.apache.zookeeper.common.PathTrie: org.apache.zookeeper.common.PathTrie$TrieNode rootNode> = $r1;

        return;
    }

    public void addPath(java.lang.String)
    {
        org.apache.zookeeper.common.PathTrie r2;
        java.lang.String[] $r1;
        java.lang.IllegalArgumentException $r5;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r0, $r9, r11;
        org.apache.zookeeper.common.PathTrie$TrieNode $r3, $r4, r10;

        r2 := @this: org.apache.zookeeper.common.PathTrie;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        r10 = r2.<org.apache.zookeeper.common.PathTrie: org.apache.zookeeper.common.PathTrie$TrieNode rootNode>;

        $i0 = lengthof $r1;

        if $i0 > 1 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid path ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        i2 = 1;

     label3:
        $i1 = lengthof $r1;

        if i2 >= $i1 goto label5;

        r11 = $r1[i2];

        $r3 = virtualinvoke r10.<org.apache.zookeeper.common.PathTrie$TrieNode: org.apache.zookeeper.common.PathTrie$TrieNode getChild(java.lang.String)>(r11);

        if $r3 != null goto label4;

        $r4 = new org.apache.zookeeper.common.PathTrie$TrieNode;

        specialinvoke $r4.<org.apache.zookeeper.common.PathTrie$TrieNode: void <init>(org.apache.zookeeper.common.PathTrie$TrieNode,org.apache.zookeeper.common.PathTrie$1)>(r10, null);

        virtualinvoke r10.<org.apache.zookeeper.common.PathTrie$TrieNode: void addChild(java.lang.String,org.apache.zookeeper.common.PathTrie$TrieNode)>(r11, $r4);

     label4:
        r10 = virtualinvoke r10.<org.apache.zookeeper.common.PathTrie$TrieNode: org.apache.zookeeper.common.PathTrie$TrieNode getChild(java.lang.String)>(r11);

        i2 = i2 + 1;

        goto label3;

     label5:
        virtualinvoke r10.<org.apache.zookeeper.common.PathTrie$TrieNode: void setProperty(boolean)>(1);

        return;
    }

    public void deletePath(java.lang.String)
    {
        java.lang.String[] $r1;
        int $i0, $i1, i2;
        java.lang.String r0, $r11, r13;
        org.apache.zookeeper.common.PathTrie$TrieNode $r3, $r4, $r5, r12;
        org.slf4j.Logger $r6;
        org.apache.zookeeper.common.PathTrie r2;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;

        r2 := @this: org.apache.zookeeper.common.PathTrie;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        r12 = r2.<org.apache.zookeeper.common.PathTrie: org.apache.zookeeper.common.PathTrie$TrieNode rootNode>;

        r13 = null;

        $i0 = lengthof $r1;

        if $i0 > 1 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid path ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label2:
        i2 = 1;

     label3:
        $i1 = lengthof $r1;

        if i2 >= $i1 goto label5;

        r13 = $r1[i2];

        $r4 = virtualinvoke r12.<org.apache.zookeeper.common.PathTrie$TrieNode: org.apache.zookeeper.common.PathTrie$TrieNode getChild(java.lang.String)>(r13);

        if $r4 != null goto label4;

        return;

     label4:
        $r5 = virtualinvoke r12.<org.apache.zookeeper.common.PathTrie$TrieNode: org.apache.zookeeper.common.PathTrie$TrieNode getChild(java.lang.String)>(r13);

        r12 = $r5;

        $r6 = <org.apache.zookeeper.common.PathTrie: org.slf4j.Logger LOG>;

        interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("{}", $r5);

        i2 = i2 + 1;

        goto label3;

     label5:
        $r3 = virtualinvoke r12.<org.apache.zookeeper.common.PathTrie$TrieNode: org.apache.zookeeper.common.PathTrie$TrieNode getParent()>();

        virtualinvoke $r3.<org.apache.zookeeper.common.PathTrie$TrieNode: void deleteChild(java.lang.String)>(r13);

        return;
    }

    public java.lang.String findMaxPrefix(java.lang.String)
    {
        org.apache.zookeeper.common.PathTrie$TrieNode $r14, $r15, r21;
        boolean $z0, $z1;
        org.apache.zookeeper.common.PathTrie r3;
        java.lang.StringBuilder $r8, $r11, $r18, $r19, $r24, $r26, $r27;
        java.lang.String[] $r2;
        java.util.ArrayList $r23;
        int $i0, $i1, i2, i3, i4, $i5, $i7;
        java.lang.String r0, $r1, $r6, $r10, $r12, $r13, $r20, r22;
        java.lang.IllegalArgumentException $r25;
        java.lang.Object $r9;

        r3 := @this: org.apache.zookeeper.common.PathTrie;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = "/";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        return r0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        r21 = r3.<org.apache.zookeeper.common.PathTrie: org.apache.zookeeper.common.PathTrie$TrieNode rootNode>;

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

        $i0 = lengthof $r2;

        if $i0 > 1 goto label3;

        $r25 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid path ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r25;

     label3:
        i2 = 1;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $i7 = (int) -1;

        i3 = $i7;

     label4:
        $i1 = lengthof $r2;

        if i2 >= $i1 goto label6;

        $r13 = $r2[i2];

        $r14 = virtualinvoke r21.<org.apache.zookeeper.common.PathTrie$TrieNode: org.apache.zookeeper.common.PathTrie$TrieNode getChild(java.lang.String)>($r13);

        if $r14 == null goto label6;

        r22 = $r2[i2];

        $r15 = virtualinvoke r21.<org.apache.zookeeper.common.PathTrie$TrieNode: org.apache.zookeeper.common.PathTrie$TrieNode getChild(java.lang.String)>(r22);

        r21 = $r15;

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>(r22);

        $z1 = virtualinvoke $r15.<org.apache.zookeeper.common.PathTrie$TrieNode: boolean getProperty()>();

        if $z1 == 0 goto label5;

        i3 = i2 - 1;

     label5:
        i2 = i2 + 1;

        goto label4;

     label6:
        i4 = 0;

     label7:
        $i5 = i3 + 1;

        if i4 >= $i5 goto label8;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r9 = interfaceinvoke $r23.<java.util.List: java.lang.Object get(int)>(i4);

        $r10 = (java.lang.String) $r9;

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        i4 = i4 + 1;

        goto label7;

     label8:
        $r6 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/common/PathTrie;");

        <org.apache.zookeeper.common.PathTrie: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
