public abstract class org.joda.time.DateTimeZone extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    public static final org.joda.time.DateTimeZone UTC;
    private static org.joda.time.tz.Provider cProvider;
    private static org.joda.time.tz.NameProvider cNameProvider;
    private static java.util.Set cAvailableIDs;
    private static org.joda.time.DateTimeZone cDefault;
    private static org.joda.time.format.DateTimeFormatter cOffsetFormatter;
    private static java.util.Map iFixedOffsetCache;
    private static java.util.Map cZoneIdConversion;
    private final java.lang.String iID;

    public static org.joda.time.DateTimeZone getDefault()
    {
        org.joda.time.DateTimeZone $r0;

        $r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>;

        return $r0;
    }

    public static void setDefault(org.joda.time.DateTimeZone) throws java.lang.SecurityException
    {
        org.joda.time.DateTimeZone r1;
        org.joda.time.JodaTimePermission $r3;
        java.lang.IllegalArgumentException $r2;
        java.lang.SecurityManager $r0;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        $r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r0 == null goto label1;

        $r3 = new org.joda.time.JodaTimePermission;

        specialinvoke $r3.<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>("DateTimeZone.setDefault");

        virtualinvoke $r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r3);

     label1:
        if r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The datetime zone must not be null");

        throw $r2;

     label2:
        <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r1;

        return;
    }

    public static org.joda.time.DateTimeZone forID(java.lang.String)
    {
        org.joda.time.DateTimeZone $r1, $r3, $r4, $r10, $r11;
        long $l1;
        byte $b2;
        java.lang.StringBuffer $r6, $r7, $r8;
        int $i0;
        java.lang.String $r2, $r9, r12;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r5;
        org.joda.time.tz.Provider $r0;

        r12 := @parameter0: java.lang.String;

        if r12 != null goto label1;

        $r11 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        return $r11;

     label1:
        $z0 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("UTC");

        if $z0 == 0 goto label2;

        $r10 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r10;

     label2:
        $r0 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider>;

        $r1 = interfaceinvoke $r0.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>(r12);

        if $r1 == null goto label3;

        return $r1;

     label3:
        $z1 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>("+");

        if $z1 != 0 goto label4;

        $z2 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z2 == 0 goto label6;

     label4:
        $i0 = staticinvoke <org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>(r12);

        $l1 = (long) $i0;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label5;

        $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r4;

     label5:
        $r2 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>($i0);

        $r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>($r2, $i0);

        return $r3;

     label6:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The datetime zone id is not recognised: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;
    }

    public static org.joda.time.DateTimeZone forOffsetHours(int) throws java.lang.IllegalArgumentException
    {
        int i0;
        org.joda.time.DateTimeZone $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int)>(i0, 0);

        return $r0;
    }

    public static org.joda.time.DateTimeZone forOffsetHoursMinutes(int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.DateTimeZone $r5, $r6;
        java.lang.StringBuffer $r2, $r3, $r9;
        int i0, $i1, $i2, $i3, i4, i5, $i7;
        java.lang.ArithmeticException $r7;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r10, $r11;

        i0 := @parameter0: int;

        i4 := @parameter1: int;

        if i0 != 0 goto label1;

        if i4 != 0 goto label1;

        $r6 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r6;

     label1:
        if i4 < 0 goto label2;

        if i4 <= 59 goto label3;

     label2:
        $r10 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Minutes out of range: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r10;

     label3:
        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>(i0, 60);

        if $i1 >= 0 goto label4;

        $i3 = neg i4;

        i5 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i1, $i3);

        goto label5;

     label4:
        i5 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i1, i4);

     label5:
        $i7 = (int) 60000;

        $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>(i5, $i7);

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Offset is too large");

        throw $r11;

     label8:
        $r5 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>($i2);

        return $r5;

        catch java.lang.ArithmeticException from label3 to label6 with label7;
    }

    public static org.joda.time.DateTimeZone forOffsetMillis(int)
    {
        int i0;
        org.joda.time.DateTimeZone $r1;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>(i0);

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>($r0, i0);

        return $r1;
    }

    public static org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)
    {
        org.joda.time.DateTimeZone $r11, $r12, $r15, $r16, r17;
        long $l1;
        byte $b2;
        java.lang.StringBuffer $r4, $r5, $r6;
        int $i0;
        java.lang.String $r1, $r2, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2;
        java.util.TimeZone r0;
        java.lang.IllegalArgumentException $r3;
        org.joda.time.tz.Provider $r13, $r14;

        r0 := @parameter0: java.util.TimeZone;

        if r0 != null goto label1;

        $r16 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        return $r16;

     label1:
        $r1 = virtualinvoke r0.<java.util.TimeZone: java.lang.String getID()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("UTC");

        if $z0 == 0 goto label2;

        $r15 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r15;

     label2:
        r17 = null;

        $r2 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>($r1);

        if $r2 == null goto label3;

        $r14 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider>;

        r17 = interfaceinvoke $r14.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>($r2);

     label3:
        if r17 != null goto label4;

        $r13 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider>;

        r17 = interfaceinvoke $r13.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>($r1);

     label4:
        if r17 == null goto label5;

        return r17;

     label5:
        if $r2 != null goto label8;

        $r8 = virtualinvoke r0.<java.util.TimeZone: java.lang.String getDisplayName()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("GMT+");

        if $z1 != 0 goto label6;

        $z2 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("GMT-");

        if $z2 == 0 goto label8;

     label6:
        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int)>(3);

        $i0 = staticinvoke <org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>($r9);

        $l1 = (long) $i0;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label7;

        $r12 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r12;

     label7:
        $r10 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>($i0);

        $r11 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>($r10, $i0);

        return $r11;

     label8:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The datetime zone id is not recognised: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    private static synchronized org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String, int)
    {
        org.joda.time.DateTimeZone $r10, r11;
        java.util.HashMap $r8;
        org.joda.time.tz.FixedDateTimeZone $r4;
        java.lang.ref.Reference $r9;
        java.util.Map $r0, $r2, $r6;
        int i0;
        java.lang.Object $r3, $r7;
        java.lang.String r1;
        java.lang.ref.SoftReference $r5;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        $r10 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        return $r10;

     label1:
        $r0 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>;

        if $r0 != null goto label2;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache> = $r8;

     label2:
        $r2 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r9 = (java.lang.ref.Reference) $r3;

        if $r9 == null goto label3;

        $r7 = virtualinvoke $r9.<java.lang.ref.Reference: java.lang.Object get()>();

        r11 = (org.joda.time.DateTimeZone) $r7;

        if r11 == null goto label3;

        return r11;

     label3:
        $r4 = new org.joda.time.tz.FixedDateTimeZone;

        specialinvoke $r4.<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>(r1, null, i0, i0);

        $r6 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>;

        $r5 = new java.lang.ref.SoftReference;

        specialinvoke $r5.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r4);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        return $r4;
    }

    public static java.util.Set getAvailableIDs()
    {
        java.util.Set $r0;

        $r0 = <org.joda.time.DateTimeZone: java.util.Set cAvailableIDs>;

        return $r0;
    }

    public static org.joda.time.tz.Provider getProvider()
    {
        org.joda.time.tz.Provider $r0;

        $r0 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider>;

        return $r0;
    }

    public static void setProvider(org.joda.time.tz.Provider) throws java.lang.SecurityException
    {
        org.joda.time.tz.Provider r1;
        java.lang.SecurityManager $r0;
        org.joda.time.JodaTimePermission $r2;

        r1 := @parameter0: org.joda.time.tz.Provider;

        $r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r0 == null goto label1;

        $r2 = new org.joda.time.JodaTimePermission;

        specialinvoke $r2.<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>("DateTimeZone.setProvider");

        virtualinvoke $r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label1:
        staticinvoke <org.joda.time.DateTimeZone: void setProvider0(org.joda.time.tz.Provider)>(r1);

        return;
    }

    private static void setProvider0(org.joda.time.tz.Provider)
    {
        org.joda.time.DateTimeZone $r2, $r3;
        java.util.Set $r0;
        java.lang.IllegalArgumentException $r1, $r4, $r5;
        org.joda.time.tz.Provider r6;
        int $i0;
        boolean $z0, $z1;

        r6 := @parameter0: org.joda.time.tz.Provider;

        if r6 != null goto label1;

        r6 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>();

     label1:
        $r0 = interfaceinvoke r6.<org.joda.time.tz.Provider: java.util.Set getAvailableIDs()>();

        if $r0 == null goto label2;

        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        if $i0 != 0 goto label3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The provider doesn\'t have any available ids");

        throw $r1;

     label3:
        $z0 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>("UTC");

        if $z0 != 0 goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The provider doesn\'t support UTC");

        throw $r5;

     label4:
        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r3 = interfaceinvoke r6.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>("UTC");

        $z1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label5;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid UTC zone provided");

        throw $r4;

     label5:
        <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider> = r6;

        <org.joda.time.DateTimeZone: java.util.Set cAvailableIDs> = $r0;

        return;
    }

    private static org.joda.time.tz.Provider getDefaultProvider()
    {
        org.joda.time.tz.UTCProvider $r1;
        java.lang.ThreadGroup $r7, $r11;
        java.lang.Exception $r5, $r9;
        org.joda.time.tz.Provider r12;
        java.lang.Thread $r6, $r10;
        org.joda.time.tz.ZoneInfoProvider $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        java.lang.SecurityException $r8;
        java.lang.String $r0;

        r12 = null;

     label01:
        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.joda.time.DateTimeZone.Provider");

        if $r0 == null goto label05;

     label02:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        r12 = (org.joda.time.tz.Provider) $r4;

     label03:
        goto label05;

     label04:
        $r9 := @caughtexception;

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r11 = virtualinvoke $r10.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        virtualinvoke $r11.<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r10, $r9);

     label05:
        goto label07;

     label06:
        $r8 := @caughtexception;

     label07:
        if r12 != null goto label11;

     label08:
        $r2 = new org.joda.time.tz.ZoneInfoProvider;

        specialinvoke $r2.<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String)>("org/joda/time/tz/data");

        r12 = $r2;

     label09:
        goto label11;

     label10:
        $r5 := @caughtexception;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = virtualinvoke $r6.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        virtualinvoke $r7.<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r6, $r5);

     label11:
        if r12 != null goto label12;

        $r1 = new org.joda.time.tz.UTCProvider;

        specialinvoke $r1.<org.joda.time.tz.UTCProvider: void <init>()>();

        r12 = $r1;

     label12:
        return r12;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.SecurityException from label01 to label05 with label06;
        catch java.lang.Exception from label08 to label09 with label10;
    }

    public static org.joda.time.tz.NameProvider getNameProvider()
    {
        org.joda.time.tz.NameProvider $r0;

        $r0 = <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider cNameProvider>;

        return $r0;
    }

    public static void setNameProvider(org.joda.time.tz.NameProvider) throws java.lang.SecurityException
    {
        org.joda.time.tz.NameProvider r1;
        java.lang.SecurityManager $r0;
        org.joda.time.JodaTimePermission $r2;

        r1 := @parameter0: org.joda.time.tz.NameProvider;

        $r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r0 == null goto label1;

        $r2 = new org.joda.time.JodaTimePermission;

        specialinvoke $r2.<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>("DateTimeZone.setNameProvider");

        virtualinvoke $r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label1:
        staticinvoke <org.joda.time.DateTimeZone: void setNameProvider0(org.joda.time.tz.NameProvider)>(r1);

        return;
    }

    private static void setNameProvider0(org.joda.time.tz.NameProvider)
    {
        org.joda.time.tz.NameProvider r0;

        r0 := @parameter0: org.joda.time.tz.NameProvider;

        if r0 != null goto label1;

        r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>();

     label1:
        <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider cNameProvider> = r0;

        return;
    }

    private static org.joda.time.tz.NameProvider getDefaultNameProvider()
    {
        java.lang.ThreadGroup $r7;
        org.joda.time.tz.DefaultNameProvider $r1;
        java.lang.Exception $r5;
        java.lang.Thread $r6;
        org.joda.time.tz.NameProvider r8;
        java.lang.Class $r2;
        java.lang.Object $r3;
        java.lang.SecurityException $r4;
        java.lang.String $r0;

        r8 = null;

     label1:
        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.joda.time.DateTimeZone.NameProvider");

        if $r0 == null goto label5;

     label2:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

        r8 = (org.joda.time.tz.NameProvider) $r3;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = virtualinvoke $r6.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        virtualinvoke $r7.<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r6, $r5);

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

     label7:
        if r8 != null goto label8;

        $r1 = new org.joda.time.tz.DefaultNameProvider;

        specialinvoke $r1.<org.joda.time.tz.DefaultNameProvider: void <init>()>();

        r8 = $r1;

     label8:
        return r8;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.SecurityException from label1 to label5 with label6;
    }

    private static synchronized java.lang.String getConvertedId(java.lang.String)
    {
        java.util.Map r4;
        java.lang.Object $r1;
        java.util.HashMap $r3;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        r4 = <org.joda.time.DateTimeZone: java.util.Map cZoneIdConversion>;

        if r4 != null goto label1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r4 = $r3;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("GMT", "UTC");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("MIT", "Pacific/Apia");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("HST", "Pacific/Honolulu");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("AST", "America/Anchorage");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("PST", "America/Los_Angeles");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("MST", "America/Denver");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("PNT", "America/Phoenix");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CST", "America/Chicago");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("EST", "America/New_York");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("IET", "America/Indianapolis");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("PRT", "America/Puerto_Rico");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CNT", "America/St_Johns");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("AGT", "America/Buenos_Aires");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("BET", "America/Sao_Paulo");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("WET", "Europe/London");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ECT", "Europe/Paris");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ART", "Africa/Cairo");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CAT", "Africa/Harare");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("EET", "Europe/Bucharest");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("EAT", "Africa/Addis_Ababa");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("MET", "Asia/Tehran");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("NET", "Asia/Yerevan");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("PLT", "Asia/Karachi");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("IST", "Asia/Calcutta");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("BST", "Asia/Dhaka");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("VST", "Asia/Saigon");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CTT", "Asia/Shanghai");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("JST", "Asia/Tokyo");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ACT", "Australia/Darwin");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("AET", "Australia/Sydney");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("SST", "Pacific/Guadalcanal");

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("NST", "Pacific/Auckland");

        <org.joda.time.DateTimeZone: java.util.Map cZoneIdConversion> = $r3;

     label1:
        $r1 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    private static int parseOffset(java.lang.String)
    {
        org.joda.time.DateTimeZone $r0;
        org.joda.time.format.DateTimeFormatter $r2, $r3;
        long $l0;
        int $i1, $i2;
        org.joda.time.DateTimeZone$1 $r1;
        org.joda.time.chrono.BaseChronology r5;
        java.lang.String r4;

        r4 := @parameter0: java.lang.String;

        $r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>;

        if $r0 == null goto label1;

        r5 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        goto label2;

     label1:
        $r1 = new org.joda.time.DateTimeZone$1;

        specialinvoke $r1.<org.joda.time.DateTimeZone$1: void <init>()>();

        r5 = $r1;

     label2:
        $r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter offsetFormatter()>();

        $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r5);

        $l0 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>(r4);

        $i1 = (int) $l0;

        $i2 = neg $i1;

        return $i2;
    }

    private static java.lang.String printOffset(int)
    {
        java.lang.StringBuffer $r4;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i11, $i13;
        java.lang.String $r1, $r2, $r3;

        i8 := @parameter0: int;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        if i8 < 0 goto label1;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43);

        goto label2;

     label1:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        i8 = neg i8;

     label2:
        $i4 = i8 / 3600000;

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>($r4, $i4, 2);

        $i0 = $i4 * 3600000;

        $i5 = i8 - $i0;

        $i11 = (int) 60000;

        $i6 = $i5 / $i11;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>($r4, $i6, 2);

        $i13 = (int) 60000;

        $i1 = $i6 * $i13;

        $i7 = $i5 - $i1;

        if $i7 != 0 goto label3;

        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

     label3:
        i2 = $i7 / 1000;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>($r4, i2, 2);

        $i3 = i2 * 1000;

        i9 = $i7 - $i3;

        if i9 != 0 goto label4;

        $r2 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label4:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>($r4, i9, 3);

        $r1 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    private static synchronized org.joda.time.format.DateTimeFormatter offsetFormatter()
    {
        org.joda.time.format.DateTimeFormatterBuilder $r2, $r3;
        org.joda.time.format.DateTimeFormatter $r0, $r1, $r4;

        $r0 = <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter cOffsetFormatter>;

        if $r0 != null goto label1;

        $r2 = new org.joda.time.format.DateTimeFormatterBuilder;

        specialinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>(null, 1, 2, 4);

        $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>();

        <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter cOffsetFormatter> = $r4;

     label1:
        $r1 = <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter cOffsetFormatter>;

        return $r1;
    }

    protected void <init>(java.lang.String)
    {
        org.joda.time.DateTimeZone r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.joda.time.DateTimeZone;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Id must not be null");

        throw $r2;

     label1:
        r0.<org.joda.time.DateTimeZone: java.lang.String iID> = r1;

        return;
    }

    public final java.lang.String getID()
    {
        org.joda.time.DateTimeZone r0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.DateTimeZone;

        $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        return $r1;
    }

    public abstract java.lang.String getNameKey(long);

    public final java.lang.String getShortName(long)
    {
        org.joda.time.DateTimeZone r0;
        long l0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>(l0, null);

        return $r1;
    }

    public java.lang.String getShortName(long, java.util.Locale)
    {
        org.joda.time.DateTimeZone r0;
        long l0;
        java.util.Locale r7;
        int $i1;
        org.joda.time.tz.NameProvider $r3;
        java.lang.String $r1, $r2, $r4, $r5, $r6;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        r7 := @parameter1: java.util.Locale;

        if r7 != null goto label1;

        r7 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0);

        if $r1 != null goto label2;

        $r6 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        return $r6;

     label2:
        $r3 = <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider cNameProvider>;

        $r2 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        $r4 = interfaceinvoke $r3.<org.joda.time.tz.NameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String)>(r7, $r2, $r1);

        if $r4 == null goto label3;

        return $r4;

     label3:
        $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        $r5 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>($i1);

        return $r5;
    }

    public final java.lang.String getName(long)
    {
        org.joda.time.DateTimeZone r0;
        long l0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>(l0, null);

        return $r1;
    }

    public java.lang.String getName(long, java.util.Locale)
    {
        org.joda.time.DateTimeZone r0;
        long l0;
        java.util.Locale r7;
        int $i1;
        org.joda.time.tz.NameProvider $r3;
        java.lang.String $r1, $r2, $r4, $r5, $r6;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        r7 := @parameter1: java.util.Locale;

        if r7 != null goto label1;

        r7 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0);

        if $r1 != null goto label2;

        $r6 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        return $r6;

     label2:
        $r3 = <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider cNameProvider>;

        $r2 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        $r4 = interfaceinvoke $r3.<org.joda.time.tz.NameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String)>(r7, $r2, $r1);

        if $r4 == null goto label3;

        return $r4;

     label3:
        $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        $r5 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>($i1);

        return $r5;
    }

    public abstract int getOffset(long);

    public final int getOffset(org.joda.time.ReadableInstant)
    {
        org.joda.time.DateTimeZone r1;
        int $i1, $i3;
        org.joda.time.ReadableInstant r0;
        long $l0, $l2;

        r1 := @this: org.joda.time.DateTimeZone;

        r0 := @parameter0: org.joda.time.ReadableInstant;

        if r0 != null goto label1;

        $l2 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $i3 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>($l2);

        return $i3;

     label1:
        $l0 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>();

        $i1 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        return $i1;
    }

    public abstract int getStandardOffset(long);

    public boolean isStandardOffset(long)
    {
        org.joda.time.DateTimeZone r0;
        int $i1, $i2;
        long l0;
        boolean $z0;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        $i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getStandardOffset(long)>(l0);

        if $i1 != $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getOffsetFromLocal(long)
    {
        org.joda.time.DateTimeZone r0;
        long l0, $l2, $l3, $l6, $l7, $l8, $l9, $l10, $l11;
        byte $b12;
        int $i1, $i4, $i5;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        $l2 = (long) $i1;

        $l3 = l0 - $l2;

        $i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l3);

        if $i1 == $i4 goto label1;

        $i5 = $i1 - $i4;

        if $i5 >= 0 goto label1;

        $l6 = (long) $i1;

        $l7 = l0 - $l6;

        $l8 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l7);

        $l9 = (long) $i4;

        $l10 = l0 - $l9;

        $l11 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l10);

        $b12 = $l8 cmp $l11;

        if $b12 == 0 goto label1;

        return $i1;

     label1:
        return $i4;
    }

    public long convertUTCToLocal(long)
    {
        org.joda.time.DateTimeZone r0;
        long l0, $l2, l3, $l4, $l6, $l7;
        byte $b5, $b8;
        int $i1, $i9, $i10;
        java.lang.ArithmeticException $r2;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        $l2 = (long) $i1;

        l3 = l0 + $l2;

        $l4 = l0 ^ l3;

        $b5 = $l4 cmp 0L;

        $i9 = (int) $b5;

        if $i9 >= 0 goto label1;

        $l6 = (long) $i1;

        $l7 = l0 ^ $l6;

        $b8 = $l7 cmp 0L;

        $i10 = (int) $b8;

        if $i10 < 0 goto label1;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Adding time zone offset caused overflow");

        throw $r2;

     label1:
        return l3;
    }

    public long convertLocalToUTC(long, boolean)
    {
        org.joda.time.DateTimeZone r0;
        byte $b7, $b14, $b19;
        java.lang.ArithmeticException $r17;
        boolean z0;
        long l0, $l2, $l3, $l5, $l6, $l8, $l9, $l10, $l11, $l12, $l13, $l16, $l17, $l18;
        java.lang.StringBuffer $r4, $r8, $r9, $r11, $r12, $r14;
        int $i1, $i4, i15, $i20, $i21;
        java.lang.String $r7, $r10, $r13;
        org.joda.time.format.DateTimeFormatter $r5;
        java.lang.IllegalArgumentException $r16;
        org.joda.time.Instant $r15;

        r0 := @this: org.joda.time.DateTimeZone;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        $l2 = (long) $i1;

        $l3 = l0 - $l2;

        $i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l3);

        i15 = $i4;

        if $i1 == $i4 goto label3;

        if z0 != 0 goto label1;

        if $i1 >= 0 goto label3;

     label1:
        $l8 = (long) $i1;

        $l9 = l0 - $l8;

        $l10 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l9);

        $l11 = (long) $i4;

        $l12 = l0 - $l11;

        $l13 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l12);

        $b14 = $l10 cmp $l13;

        if $b14 == 0 goto label3;

        if z0 == 0 goto label2;

        $r16 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal instant due to time zone offset transition: ");

        $r5 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSS");

        $r15 = new org.joda.time.Instant;

        specialinvoke $r15.<org.joda.time.Instant: void <init>(long)>(l0);

        $r7 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>($r15);

        $r8 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r10 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r16;

     label2:
        i15 = $i1;

     label3:
        $l16 = (long) i15;

        $l17 = l0 - $l16;

        $l18 = l0 ^ $l17;

        $b19 = $l18 cmp 0L;

        $i20 = (int) $b19;

        if $i20 >= 0 goto label4;

        $l5 = (long) i15;

        $l6 = l0 ^ $l5;

        $b7 = $l6 cmp 0L;

        $i21 = (int) $b7;

        if $i21 >= 0 goto label4;

        $r17 = new java.lang.ArithmeticException;

        specialinvoke $r17.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Subtracting time zone offset caused overflow");

        throw $r17;

     label4:
        return $l17;
    }

    public long getMillisKeepLocal(org.joda.time.DateTimeZone, long)
    {
        org.joda.time.DateTimeZone r0, r1;
        long l0, $l2, l3, $l5, $l6;
        int $i1, $i4;

        r0 := @this: org.joda.time.DateTimeZone;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        l0 := @parameter1: long;

        if r1 != null goto label1;

        r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        if r1 != r0 goto label2;

        return l0;

     label2:
        $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        $l2 = (long) $i1;

        l3 = l0 + $l2;

        $i4 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l3);

        $l5 = (long) $i4;

        $l6 = l3 - $l5;

        return $l6;
    }

    public boolean isLocalDateTimeGap(org.joda.time.LocalDateTime)
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.LocalDateTime r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r0 := @this: org.joda.time.DateTimeZone;

        r1 := @parameter0: org.joda.time.LocalDateTime;

        $z0 = virtualinvoke r0.<org.joda.time.DateTimeZone: boolean isFixed()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>(r0);

     label2:
        return 0;

     label3:
        $r2 := @caughtexception;

        return 1;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public abstract boolean isFixed();

    public abstract long nextTransition(long);

    public abstract long previousTransition(long);

    public java.util.TimeZone toTimeZone()
    {
        org.joda.time.DateTimeZone r0;
        java.lang.String $r1;
        java.util.TimeZone $r2;

        r0 := @this: org.joda.time.DateTimeZone;

        $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r1);

        return $r2;
    }

    public abstract boolean equals(java.lang.Object);

    public int hashCode()
    {
        org.joda.time.DateTimeZone r0;
        int $i0, $i1;
        java.lang.String $r1;

        r0 := @this: org.joda.time.DateTimeZone;

        $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i1 = 57 + $i0;

        return $i1;
    }

    public java.lang.String toString()
    {
        org.joda.time.DateTimeZone r0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.DateTimeZone;

        $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        return $r1;
    }

    protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
    {
        org.joda.time.DateTimeZone r1;
        org.joda.time.DateTimeZone$Stub $r0;
        java.lang.String $r2;

        r1 := @this: org.joda.time.DateTimeZone;

        $r0 = new org.joda.time.DateTimeZone$Stub;

        $r2 = r1.<org.joda.time.DateTimeZone: java.lang.String iID>;

        specialinvoke $r0.<org.joda.time.DateTimeZone$Stub: void <init>(java.lang.String)>($r2);

        return $r0;
    }

    static void <clinit>()
    {
        org.joda.time.DateTimeZone $r2, $r3, $r4, $r5, $r7;
        java.util.TimeZone $r6;
        java.lang.RuntimeException $r9;
        java.lang.IllegalArgumentException $r8;
        org.joda.time.tz.FixedDateTimeZone $r0;
        java.lang.String $r1;

        <org.joda.time.DateTimeZone: long serialVersionUID> = 5546345482340108586L;

        $r0 = new org.joda.time.tz.FixedDateTimeZone;

        specialinvoke $r0.<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>("UTC", "UTC", 0, 0);

        <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> = $r0;

        staticinvoke <org.joda.time.DateTimeZone: void setProvider0(org.joda.time.tz.Provider)>(null);

        staticinvoke <org.joda.time.DateTimeZone: void setNameProvider0(org.joda.time.tz.NameProvider)>(null);

     label1:
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.timezone");

        $r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>($r1);

        <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = $r2;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        $r3 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>;

        if $r3 != null goto label5;

        $r6 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        $r7 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>($r6);

        <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = $r7;

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

     label7:
        $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>;

        if $r4 != null goto label8;

        $r5 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = $r5;

     label8:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label5 with label6;
    }
}
