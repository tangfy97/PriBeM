public class org.apache.pdfbox.util.operator.pagedrawer.Invoke extends org.apache.pdfbox.util.operator.OperatorProcessor
{
    private static final org.apache.commons.logging.Log LOG;

    public void <init>()
    {
        org.apache.pdfbox.util.operator.pagedrawer.Invoke r0;

        r0 := @this: org.apache.pdfbox.util.operator.pagedrawer.Invoke;

        specialinvoke r0.<org.apache.pdfbox.util.operator.OperatorProcessor: void <init>()>();

        return;
    }

    public void process(org.apache.pdfbox.util.PDFOperator, java.util.List) throws java.io.IOException
    {
        byte $b2, $b3;
        java.util.Map $r8;
        org.apache.pdfbox.pdmodel.PDResources $r7, $r19;
        java.awt.geom.AffineTransform $r58;
        java.lang.Exception $r54;
        org.apache.pdfbox.pdmodel.PDPage $r3;
        java.lang.StringBuilder $r37, $r38, $r39, $r40, $r49, $r51, $r52, $r60, $r61;
        org.apache.pdfbox.util.PDFOperator r56;
        java.lang.String $r9, $r41, $r50, $r53;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage r57;
        boolean $z0, $z1, $z2;
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState $r15, $r17, $r26, $r28, $r32, $r42, $r45;
        java.awt.image.BufferedImage $r33;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectForm r59;
        java.util.List r4;
        java.awt.Dimension $r34;
        org.apache.pdfbox.pdfviewer.PageDrawer r2;
        float $f0, $f1, $f2, $f3, $f4, $f5, f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18;
        org.apache.pdfbox.util.operator.pagedrawer.Invoke r0;
        java.util.Stack $r13, $r24;
        int $i0, $i1, $i4, $i5;
        org.apache.pdfbox.cos.COSStream $r18;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;
        org.apache.pdfbox.cos.COSName r6;
        org.apache.pdfbox.util.PDFStreamEngine $r1, $r12, $r14, $r21, $r22, $r23, $r27, $r31;
        org.apache.pdfbox.util.Matrix $r20, $r29, $r30, $r43;
        java.lang.Object $r5, $r10, $r16, $r25;
        org.apache.commons.logging.Log $r36, $r44, $r48, $r55;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorState $r46;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject r11;

        r0 := @this: org.apache.pdfbox.util.operator.pagedrawer.Invoke;

        r56 := @parameter0: org.apache.pdfbox.util.PDFOperator;

        r4 := @parameter1: java.util.List;

        $r1 = r0.<org.apache.pdfbox.util.operator.pagedrawer.Invoke: org.apache.pdfbox.util.PDFStreamEngine context>;

        r2 = (org.apache.pdfbox.pdfviewer.PageDrawer) $r1;

        $r3 = virtualinvoke r2.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.PDPage getPage()>();

        $r5 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        r6 = (org.apache.pdfbox.cos.COSName) $r5;

        $r7 = virtualinvoke r2.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.PDResources getResources()>();

        $r8 = virtualinvoke $r7.<org.apache.pdfbox.pdmodel.PDResources: java.util.Map getXObjects()>();

        $r9 = virtualinvoke r6.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>();

        $r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        r11 = (org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject) $r10;

        if r11 != null goto label01;

        $r48 = <org.apache.pdfbox.util.operator.pagedrawer.Invoke: org.apache.commons.logging.Log LOG>;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find the XObject for \'");

        $r50 = virtualinvoke r6.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r48.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r53);

        goto label12;

     label01:
        $z0 = r11 instanceof org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage;

        if $z0 == 0 goto label10;

        r57 = (org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage) r11;

     label02:
        $z2 = virtualinvoke r57.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage: boolean getImageMask()>();

        if $z2 == 0 goto label03;

        $r45 = virtualinvoke r2.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r46 = virtualinvoke $r45.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState getNonStrokingColor()>();

        virtualinvoke r57.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage: void setStencilColor(org.apache.pdfbox.pdmodel.graphics.color.PDColorState)>($r46);

     label03:
        $r33 = virtualinvoke r57.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage: java.awt.image.BufferedImage getRGBImage()>();

        if $r33 != null goto label05;

        $r44 = <org.apache.pdfbox.util.operator.pagedrawer.Invoke: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r44.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("getRGBImage returned NULL");

     label04:
        return;

     label05:
        $i0 = virtualinvoke $r33.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke $r33.<java.awt.image.BufferedImage: int getHeight()>();

        $r34 = virtualinvoke r2.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Dimension getPageSize()>();

        $d0 = virtualinvoke $r34.<java.awt.Dimension: double getHeight()>();

        $r36 = <org.apache.pdfbox.util.operator.pagedrawer.Invoke: org.apache.commons.logging.Log LOG>;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("imageWidth: ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\timageHeight: ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r36.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r41);

        $r42 = virtualinvoke r2.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r43 = virtualinvoke $r42.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.util.Matrix getCurrentTransformationMatrix()>();

        $f0 = virtualinvoke $r43.<org.apache.pdfbox.util.Matrix: float getYScale()>();

        $f1 = virtualinvoke $r43.<org.apache.pdfbox.util.Matrix: float getValue(int,int)>(0, 0);

        $f2 = virtualinvoke $r43.<org.apache.pdfbox.util.Matrix: float getXScale()>();

        $f3 = $f1 / $f2;

        $d1 = (double) $f3;

        $d2 = staticinvoke <java.lang.Math: double acos(double)>($d1);

        f6 = (float) $d2;

        $f4 = virtualinvoke $r43.<org.apache.pdfbox.util.Matrix: float getValue(int,int)>(0, 1);

        $b2 = $f4 cmpg 0.0F;

        $i4 = (int) $b2;

        if $i4 >= 0 goto label06;

        $f5 = virtualinvoke $r43.<org.apache.pdfbox.util.Matrix: float getValue(int,int)>(1, 0);

        $b3 = $f5 cmpl 0.0F;

        $i5 = (int) $b3;

        if $i5 <= 0 goto label06;

        f6 = -1.0F * f6;

     label06:
        $f7 = virtualinvoke $r43.<org.apache.pdfbox.util.Matrix: float getYPosition()>();

        $d3 = (double) $f7;

        $d4 = $d0 - $d3;

        $d5 = (double) f6;

        $d6 = staticinvoke <java.lang.Math: double cos(double)>($d5);

        $d7 = (double) $f0;

        $d8 = $d6 * $d7;

        $d9 = $d4 - $d8;

        $f8 = (float) $d9;

        virtualinvoke $r43.<org.apache.pdfbox.util.Matrix: void setValue(int,int,float)>(2, 1, $f8);

        $f9 = virtualinvoke $r43.<org.apache.pdfbox.util.Matrix: float getXPosition()>();

        $d10 = (double) $f9;

        $d11 = (double) f6;

        $d12 = staticinvoke <java.lang.Math: double sin(double)>($d11);

        $d13 = (double) $f0;

        $d14 = $d12 * $d13;

        $d15 = $d10 - $d14;

        $f10 = (float) $d15;

        virtualinvoke $r43.<org.apache.pdfbox.util.Matrix: void setValue(int,int,float)>(2, 0, $f10);

        $f11 = virtualinvoke $r43.<org.apache.pdfbox.util.Matrix: float getValue(int,int)>(0, 1);

        $f12 = -1.0F * $f11;

        virtualinvoke $r43.<org.apache.pdfbox.util.Matrix: void setValue(int,int,float)>(0, 1, $f12);

        $f13 = virtualinvoke $r43.<org.apache.pdfbox.util.Matrix: float getValue(int,int)>(1, 0);

        $f14 = -1.0F * $f13;

        virtualinvoke $r43.<org.apache.pdfbox.util.Matrix: void setValue(int,int,float)>(1, 0, $f14);

        $r58 = virtualinvoke $r43.<org.apache.pdfbox.util.Matrix: java.awt.geom.AffineTransform createAffineTransform()>();

        $f15 = (float) $i0;

        $f16 = 1.0F / $f15;

        $d16 = (double) $f16;

        $f17 = (float) $i1;

        $f18 = 1.0F / $f17;

        $d17 = (double) $f18;

        virtualinvoke $r58.<java.awt.geom.AffineTransform: void scale(double,double)>($d16, $d17);

        virtualinvoke r2.<org.apache.pdfbox.pdfviewer.PageDrawer: void drawImage(java.awt.Image,java.awt.geom.AffineTransform)>($r33, $r58);

     label07:
        goto label09;

     label08:
        $r54 := @caughtexception;

        $r55 = <org.apache.pdfbox.util.operator.pagedrawer.Invoke: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r55.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r54, $r54);

     label09:
        goto label12;

     label10:
        $z1 = r11 instanceof org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectForm;

        if $z1 == 0 goto label12;

        $r12 = r0.<org.apache.pdfbox.util.operator.pagedrawer.Invoke: org.apache.pdfbox.util.PDFStreamEngine context>;

        $r13 = virtualinvoke $r12.<org.apache.pdfbox.util.PDFStreamEngine: java.util.Stack getGraphicsStack()>();

        $r14 = r0.<org.apache.pdfbox.util.operator.pagedrawer.Invoke: org.apache.pdfbox.util.PDFStreamEngine context>;

        $r15 = virtualinvoke $r14.<org.apache.pdfbox.util.PDFStreamEngine: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r16 = virtualinvoke $r15.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.lang.Object clone()>();

        $r17 = (org.apache.pdfbox.pdmodel.graphics.PDGraphicsState) $r16;

        virtualinvoke $r13.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r17);

        r59 = (org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectForm) r11;

        $r18 = virtualinvoke r59.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectForm: org.apache.pdfbox.cos.COSStream getCOSStream()>();

        $r19 = virtualinvoke r59.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectForm: org.apache.pdfbox.pdmodel.PDResources getResources()>();

        $r20 = virtualinvoke r59.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectForm: org.apache.pdfbox.util.Matrix getMatrix()>();

        if $r20 == null goto label11;

        $r27 = r0.<org.apache.pdfbox.util.operator.pagedrawer.Invoke: org.apache.pdfbox.util.PDFStreamEngine context>;

        $r28 = virtualinvoke $r27.<org.apache.pdfbox.util.PDFStreamEngine: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r29 = virtualinvoke $r28.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.util.Matrix getCurrentTransformationMatrix()>();

        $r30 = virtualinvoke $r20.<org.apache.pdfbox.util.Matrix: org.apache.pdfbox.util.Matrix multiply(org.apache.pdfbox.util.Matrix)>($r29);

        $r31 = r0.<org.apache.pdfbox.util.operator.pagedrawer.Invoke: org.apache.pdfbox.util.PDFStreamEngine context>;

        $r32 = virtualinvoke $r31.<org.apache.pdfbox.util.PDFStreamEngine: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        virtualinvoke $r32.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: void setCurrentTransformationMatrix(org.apache.pdfbox.util.Matrix)>($r30);

     label11:
        $r21 = virtualinvoke r0.<org.apache.pdfbox.util.operator.pagedrawer.Invoke: org.apache.pdfbox.util.PDFStreamEngine getContext()>();

        virtualinvoke $r21.<org.apache.pdfbox.util.PDFStreamEngine: void processSubStream(org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.cos.COSStream)>($r3, $r19, $r18);

        $r23 = r0.<org.apache.pdfbox.util.operator.pagedrawer.Invoke: org.apache.pdfbox.util.PDFStreamEngine context>;

        $r22 = r0.<org.apache.pdfbox.util.operator.pagedrawer.Invoke: org.apache.pdfbox.util.PDFStreamEngine context>;

        $r24 = virtualinvoke $r22.<org.apache.pdfbox.util.PDFStreamEngine: java.util.Stack getGraphicsStack()>();

        $r25 = virtualinvoke $r24.<java.util.Stack: java.lang.Object pop()>();

        $r26 = (org.apache.pdfbox.pdmodel.graphics.PDGraphicsState) $r25;

        virtualinvoke $r23.<org.apache.pdfbox.util.PDFStreamEngine: void setGraphicsState(org.apache.pdfbox.pdmodel.graphics.PDGraphicsState)>($r26);

     label12:
        return;

        catch java.lang.Exception from label02 to label04 with label08;
        catch java.lang.Exception from label05 to label07 with label08;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/util/operator/pagedrawer/Invoke;");

        <org.apache.pdfbox.util.operator.pagedrawer.Invoke: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }
}
