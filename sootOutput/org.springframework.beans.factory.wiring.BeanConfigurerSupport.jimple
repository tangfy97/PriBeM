public class org.springframework.beans.factory.wiring.BeanConfigurerSupport extends java.lang.Object implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    protected final org.apache.commons.logging.Log logger;
    private volatile org.springframework.beans.factory.wiring.BeanWiringInfoResolver beanWiringInfoResolver;
    private volatile org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory;

    public void <init>()
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.springframework.beans.factory.wiring.BeanConfigurerSupport r0;

        r0 := @this: org.springframework.beans.factory.wiring.BeanConfigurerSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.apache.commons.logging.Log logger> = $r2;

        return;
    }

    public void setBeanWiringInfoResolver(org.springframework.beans.factory.wiring.BeanWiringInfoResolver)
    {
        org.springframework.beans.factory.wiring.BeanWiringInfoResolver r0;
        org.springframework.beans.factory.wiring.BeanConfigurerSupport r1;

        r1 := @this: org.springframework.beans.factory.wiring.BeanConfigurerSupport;

        r0 := @parameter0: org.springframework.beans.factory.wiring.BeanWiringInfoResolver;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "BeanWiringInfoResolver must not be null");

        r1.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.springframework.beans.factory.wiring.BeanWiringInfoResolver beanWiringInfoResolver> = r0;

        return;
    }

    public void setBeanFactory(org.springframework.beans.factory.BeanFactory)
    {
        org.springframework.beans.factory.wiring.BeanWiringInfoResolver $r3, $r4;
        java.lang.IllegalArgumentException $r5;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r2;
        org.springframework.beans.factory.BeanFactory r0;
        java.lang.StringBuilder $r6, $r7;
        java.lang.String $r8;
        boolean $z0;
        org.springframework.beans.factory.wiring.BeanConfigurerSupport r1;

        r1 := @this: org.springframework.beans.factory.wiring.BeanConfigurerSupport;

        r0 := @parameter0: org.springframework.beans.factory.BeanFactory;

        $z0 = r0 instanceof org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bean configurer aspect needs to run in a ConfigurableListableBeanFactory: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label1:
        $r2 = (org.springframework.beans.factory.config.ConfigurableListableBeanFactory) r0;

        r1.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory> = $r2;

        $r3 = r1.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.springframework.beans.factory.wiring.BeanWiringInfoResolver beanWiringInfoResolver>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r1.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.springframework.beans.factory.wiring.BeanWiringInfoResolver createDefaultBeanWiringInfoResolver()>();

        r1.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.springframework.beans.factory.wiring.BeanWiringInfoResolver beanWiringInfoResolver> = $r4;

     label2:
        return;
    }

    protected org.springframework.beans.factory.wiring.BeanWiringInfoResolver createDefaultBeanWiringInfoResolver()
    {
        org.springframework.beans.factory.wiring.ClassNameBeanWiringInfoResolver $r0;
        org.springframework.beans.factory.wiring.BeanConfigurerSupport r1;

        r1 := @this: org.springframework.beans.factory.wiring.BeanConfigurerSupport;

        $r0 = new org.springframework.beans.factory.wiring.ClassNameBeanWiringInfoResolver;

        specialinvoke $r0.<org.springframework.beans.factory.wiring.ClassNameBeanWiringInfoResolver: void <init>()>();

        return $r0;
    }

    public void afterPropertiesSet()
    {
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1;
        org.springframework.beans.factory.wiring.BeanConfigurerSupport r0;

        r0 := @this: org.springframework.beans.factory.wiring.BeanConfigurerSupport;

        $r1 = r0.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory>;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>($r1, "BeanFactory must be set");

        return;
    }

    public void destroy()
    {
        org.springframework.beans.factory.wiring.BeanConfigurerSupport r0;

        r0 := @this: org.springframework.beans.factory.wiring.BeanConfigurerSupport;

        r0.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory> = null;

        r0.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.springframework.beans.factory.wiring.BeanWiringInfoResolver beanWiringInfoResolver> = null;

        return;
    }

    public void configureBean(java.lang.Object)
    {
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r1, $r5, $r6, $r9, $r12, $r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r15, $r19, $r20, $r21, $r23, $r24, $r32, $r35, $r36, $r39, $r40, $r41, $r42;
        org.springframework.beans.factory.wiring.BeanConfigurerSupport r0;
        java.lang.Throwable $r27;
        org.springframework.beans.factory.wiring.BeanWiringInfoResolver $r3;
        org.springframework.beans.factory.BeanCreationException $r26, r28;
        int $i0;
        java.lang.String $r7, $r10, $r13, $r18, $r22, $r25, $r30, $r34, $r38, $r43;
        org.springframework.beans.factory.wiring.BeanWiringInfo $r4;
        java.lang.Object r2, $r8, $r11;
        org.apache.commons.logging.Log $r14, $r16, $r31, $r33;
        java.lang.Class $r17, $r37;

        r0 := @this: org.springframework.beans.factory.wiring.BeanConfigurerSupport;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory>;

        if $r1 != null goto label02;

        $r14 = r0.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.apache.commons.logging.Log logger>;

        $z4 = interfaceinvoke $r14.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z4 == 0 goto label01;

        $r16 = r0.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.apache.commons.logging.Log logger>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("BeanFactory has not been set on ");

        $r17 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r18 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>($r17);

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Make sure this configurer runs in a Spring container. Unable to configure bean of type [");

        $r22 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getDescriptiveType(java.lang.Object)>(r2);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Proceeding without injection.");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25);

     label01:
        return;

     label02:
        $r3 = r0.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.springframework.beans.factory.wiring.BeanWiringInfoResolver beanWiringInfoResolver>;

        $r4 = interfaceinvoke $r3.<org.springframework.beans.factory.wiring.BeanWiringInfoResolver: org.springframework.beans.factory.wiring.BeanWiringInfo resolveWiringInfo(java.lang.Object)>(r2);

        if $r4 != null goto label03;

        return;

     label03:
        $z0 = virtualinvoke $r4.<org.springframework.beans.factory.wiring.BeanWiringInfo: boolean indicatesAutowiring()>();

        if $z0 != 0 goto label04;

        $z2 = virtualinvoke $r4.<org.springframework.beans.factory.wiring.BeanWiringInfo: boolean isDefaultBeanName()>();

        if $z2 == 0 goto label05;

        $r12 = r0.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory>;

        $r13 = virtualinvoke $r4.<org.springframework.beans.factory.wiring.BeanWiringInfo: java.lang.String getBeanName()>();

        $z3 = interfaceinvoke $r12.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: boolean containsBean(java.lang.String)>($r13);

        if $z3 != 0 goto label05;

     label04:
        $r5 = r0.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory>;

        $i0 = virtualinvoke $r4.<org.springframework.beans.factory.wiring.BeanWiringInfo: int getAutowireMode()>();

        $z1 = virtualinvoke $r4.<org.springframework.beans.factory.wiring.BeanWiringInfo: boolean getDependencyCheck()>();

        interfaceinvoke $r5.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void autowireBeanProperties(java.lang.Object,int,boolean)>(r2, $i0, $z1);

        $r6 = r0.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory>;

        $r7 = virtualinvoke $r4.<org.springframework.beans.factory.wiring.BeanWiringInfo: java.lang.String getBeanName()>();

        $r8 = interfaceinvoke $r6.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.Object initializeBean(java.lang.Object,java.lang.String)>(r2, $r7);

        specialinvoke r0.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: void checkExposedObject(java.lang.Object,java.lang.Object)>($r8, r2);

        goto label10;

     label05:
        $r9 = r0.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory>;

        $r10 = virtualinvoke $r4.<org.springframework.beans.factory.wiring.BeanWiringInfo: java.lang.String getBeanName()>();

        $r11 = interfaceinvoke $r9.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.Object configureBean(java.lang.Object,java.lang.String)>(r2, $r10);

        specialinvoke r0.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: void checkExposedObject(java.lang.Object,java.lang.Object)>($r11, r2);

     label06:
        goto label10;

     label07:
        $r26 := @caughtexception;

        $r27 = virtualinvoke $r26.<org.springframework.beans.factory.BeanCreationException: java.lang.Throwable getMostSpecificCause()>();

        $z5 = $r27 instanceof org.springframework.beans.factory.BeanCurrentlyInCreationException;

        if $z5 == 0 goto label09;

        r28 = (org.springframework.beans.factory.BeanCreationException) $r27;

        $r29 = r0.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory>;

        $r30 = virtualinvoke r28.<org.springframework.beans.factory.BeanCreationException: java.lang.String getBeanName()>();

        $z6 = interfaceinvoke $r29.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: boolean isCurrentlyInCreation(java.lang.String)>($r30);

        if $z6 == 0 goto label09;

        $r31 = r0.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.apache.commons.logging.Log logger>;

        $z7 = interfaceinvoke $r31.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z7 == 0 goto label08;

        $r33 = r0.<org.springframework.beans.factory.wiring.BeanConfigurerSupport: org.apache.commons.logging.Log logger>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to create target bean \'");

        $r34 = virtualinvoke r28.<org.springframework.beans.factory.BeanCreationException: java.lang.String getBeanName()>();

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' while configuring object of type [");

        $r37 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r38 = virtualinvoke $r37.<java.lang.Class: java.lang.String getName()>();

        $r39 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] - probably due to a circular reference. This is a common startup situation ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("and usually not fatal. Proceeding without injection. Original exception: ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r33.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r43);

     label08:
        return;

     label09:
        throw $r26;

     label10:
        return;

        catch org.springframework.beans.factory.BeanCreationException from label03 to label06 with label07;
    }

    private void checkExposedObject(java.lang.Object, java.lang.Object)
    {
        java.lang.IllegalStateException $r2;
        java.lang.Object r0, r1;
        java.lang.StringBuilder $r3, $r6, $r7, $r10, $r11;
        java.lang.Class $r4, $r8;
        java.lang.String $r5, $r9, $r12;
        org.springframework.beans.factory.wiring.BeanConfigurerSupport r13;

        r13 := @this: org.springframework.beans.factory.wiring.BeanConfigurerSupport;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 == r1 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Post-processor tried to replace bean instance of type [");

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] with (proxy) object of type [");

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] - not supported for aspect-configured classes!");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r2;

     label1:
        return;
    }
}
