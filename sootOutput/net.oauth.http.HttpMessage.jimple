public class net.oauth.http.HttpMessage extends java.lang.Object
{
    public java.lang.String method;
    public java.net.URL url;
    public final java.util.List headers;
    protected java.io.InputStream body;
    public static final java.lang.String REQUEST;
    public static final java.lang.String RESPONSE;
    public static final java.lang.String STATUS_CODE;
    public static final java.lang.String ACCEPT_ENCODING;
    public static final java.lang.String CONTENT_ENCODING;
    public static final java.lang.String CONTENT_LENGTH;
    public static final java.lang.String CONTENT_TYPE;
    public static final java.lang.String DEFAULT_CHARSET;
    private static final java.util.regex.Pattern CHARSET;

    public void <init>()
    {
        net.oauth.http.HttpMessage r0;

        r0 := @this: net.oauth.http.HttpMessage;

        specialinvoke r0.<net.oauth.http.HttpMessage: void <init>(java.lang.String,java.net.URL)>(null, null);

        return;
    }

    public void <init>(java.lang.String, java.net.URL)
    {
        net.oauth.http.HttpMessage r0;
        java.lang.String r1;
        java.net.URL r2;

        r0 := @this: net.oauth.http.HttpMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.net.URL;

        specialinvoke r0.<net.oauth.http.HttpMessage: void <init>(java.lang.String,java.net.URL,java.io.InputStream)>(r1, r2, null);

        return;
    }

    public void <init>(java.lang.String, java.net.URL, java.io.InputStream)
    {
        net.oauth.http.HttpMessage r0;
        java.net.URL r3;
        java.lang.String r2;
        java.util.ArrayList $r1;
        java.io.InputStream r4;

        r0 := @this: net.oauth.http.HttpMessage;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.net.URL;

        r4 := @parameter2: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<net.oauth.http.HttpMessage: java.util.List headers> = $r1;

        r0.<net.oauth.http.HttpMessage: java.io.InputStream body> = null;

        r0.<net.oauth.http.HttpMessage: java.lang.String method> = r2;

        r0.<net.oauth.http.HttpMessage: java.net.URL url> = r3;

        r0.<net.oauth.http.HttpMessage: java.io.InputStream body> = r4;

        return;
    }

    public final java.lang.String getHeader(java.lang.String)
    {
        net.oauth.http.HttpMessage r0;
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.List $r1;
        java.lang.Object $r3, $r6, $r8;
        java.lang.String r5, $r7, r9;
        boolean $z0, $z1;

        r0 := @this: net.oauth.http.HttpMessage;

        r5 := @parameter0: java.lang.String;

        r9 = null;

        $r1 = r0.<net.oauth.http.HttpMessage: java.util.List headers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        $z1 = staticinvoke <net.oauth.http.HttpMessage: boolean equalsIgnoreCase(java.lang.String,java.lang.String)>(r5, $r7);

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.String) $r8;

     label2:
        goto label1;

     label3:
        return r9;
    }

    public java.lang.String removeHeaders(java.lang.String)
    {
        net.oauth.http.HttpMessage r0;
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.List $r1;
        java.lang.Object $r3, $r6, $r8;
        java.lang.String r5, $r7, r9;
        boolean $z0, $z1;

        r0 := @this: net.oauth.http.HttpMessage;

        r5 := @parameter0: java.lang.String;

        r9 = null;

        $r1 = r0.<net.oauth.http.HttpMessage: java.util.List headers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        $z1 = staticinvoke <net.oauth.http.HttpMessage: boolean equalsIgnoreCase(java.lang.String,java.lang.String)>(r5, $r7);

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.String) $r8;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        return r9;
    }

    public final java.lang.String getContentCharset()
    {
        net.oauth.http.HttpMessage r0;
        java.lang.String $r1, $r2;

        r0 := @this: net.oauth.http.HttpMessage;

        $r1 = virtualinvoke r0.<net.oauth.http.HttpMessage: java.lang.String getHeader(java.lang.String)>("Content-Type");

        $r2 = staticinvoke <net.oauth.http.HttpMessage: java.lang.String getCharset(java.lang.String)>($r1);

        return $r2;
    }

    public final java.io.InputStream getBody() throws java.io.IOException
    {
        net.oauth.client.ExcerptInputStream $r3;
        net.oauth.http.HttpMessage r0;
        java.io.InputStream $r1, $r2, $r4;

        r0 := @this: net.oauth.http.HttpMessage;

        $r1 = r0.<net.oauth.http.HttpMessage: java.io.InputStream body>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<net.oauth.http.HttpMessage: java.io.InputStream openBody()>();

        if $r2 == null goto label1;

        $r3 = new net.oauth.client.ExcerptInputStream;

        specialinvoke $r3.<net.oauth.client.ExcerptInputStream: void <init>(java.io.InputStream)>($r2);

        r0.<net.oauth.http.HttpMessage: java.io.InputStream body> = $r3;

     label1:
        $r4 = r0.<net.oauth.http.HttpMessage: java.io.InputStream body>;

        return $r4;
    }

    protected java.io.InputStream openBody() throws java.io.IOException
    {
        net.oauth.http.HttpMessage r0;

        r0 := @this: net.oauth.http.HttpMessage;

        return null;
    }

    public void dump(java.util.Map) throws java.io.IOException
    {
        net.oauth.http.HttpMessage r0;
        java.util.Map r1;

        r0 := @this: net.oauth.http.HttpMessage;

        r1 := @parameter0: java.util.Map;

        return;
    }

    public static net.oauth.http.HttpMessage newRequest(net.oauth.OAuthMessage, net.oauth.ParameterStyle) throws java.io.IOException
    {
        byte[] $r12, $r27;
        java.net.URL $r45;
        java.io.ByteArrayInputStream $r19, $r34;
        int[] $r42;
        net.oauth.ParameterStyle $r4, r36;
        net.oauth.OAuth$Parameter $r5, $r13, $r14, $r28, $r29;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r7, $r24, $r35, $r41, $r46;
        java.lang.StringBuilder $r15, $r16, $r17, $r30, $r31, $r32;
        java.util.ArrayList $r8, $r40;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1, $r2, $r6, $r10, $r11, $r18, $r23, $r25, $r26, $r33, $r38, r39, $r44;
        java.util.Map$Entry $r21;
        net.oauth.http.HttpMessage $r43;
        java.util.Iterator $r9;
        net.oauth.OAuthMessage r0;
        java.lang.Object $r20, $r22;
        java.io.InputStream $r3, r37;

        r0 := @parameter0: net.oauth.OAuthMessage;

        r36 := @parameter1: net.oauth.ParameterStyle;

        $r2 = "POST";

        $r1 = r0.<net.oauth.OAuthMessage: java.lang.String method>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        $r3 = virtualinvoke r0.<net.oauth.OAuthMessage: java.io.InputStream getBodyAsStream()>();

        r37 = $r3;

        $r4 = <net.oauth.ParameterStyle: net.oauth.ParameterStyle BODY>;

        if r36 != $r4 goto label2;

        if $z0 == 0 goto label1;

        if $r3 == null goto label2;

     label1:
        r36 = <net.oauth.ParameterStyle: net.oauth.ParameterStyle QUERY_STRING>;

     label2:
        $r38 = r0.<net.oauth.OAuthMessage: java.lang.String URL>;

        r39 = $r38;

        $r40 = new java.util.ArrayList;

        $r41 = virtualinvoke r0.<net.oauth.OAuthMessage: java.util.List getHeaders()>();

        specialinvoke $r40.<java.util.ArrayList: void <init>(java.util.Collection)>($r41);

        $r42 = <net.oauth.http.HttpMessage$1: int[] $SwitchMap$net$oauth$ParameterStyle>;

        $i2 = virtualinvoke r36.<net.oauth.ParameterStyle: int ordinal()>();

        $i3 = $r42[$i2];

        tableswitch($i3)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label9;
        };

     label3:
        $r35 = virtualinvoke r0.<net.oauth.OAuthMessage: java.util.List getParameters()>();

        r39 = staticinvoke <net.oauth.OAuth: java.lang.String addParameters(java.lang.String,java.lang.Iterable)>($r38, $r35);

        goto label9;

     label4:
        $r24 = virtualinvoke r0.<net.oauth.OAuthMessage: java.util.List getParameters()>();

        $r25 = staticinvoke <net.oauth.OAuth: java.lang.String formEncode(java.lang.Iterable)>($r24);

        $r26 = virtualinvoke r0.<net.oauth.OAuthMessage: java.lang.String getBodyEncoding()>();

        $r27 = virtualinvoke $r25.<java.lang.String: byte[] getBytes(java.lang.String)>($r26);

        $r28 = new net.oauth.OAuth$Parameter;

        specialinvoke $r28.<net.oauth.OAuth$Parameter: void <init>(java.lang.String,java.lang.String)>("Content-Type", "application/x-www-form-urlencoded");

        interfaceinvoke $r40.<java.util.List: boolean add(java.lang.Object)>($r28);

        $r29 = new net.oauth.OAuth$Parameter;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $i1 = lengthof $r27;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<net.oauth.OAuth$Parameter: void <init>(java.lang.String,java.lang.String)>("Content-Length", $r33);

        interfaceinvoke $r40.<java.util.List: boolean add(java.lang.Object)>($r29);

        $r34 = new java.io.ByteArrayInputStream;

        specialinvoke $r34.<java.io.ByteArrayInputStream: void <init>(byte[])>($r27);

        r37 = $r34;

        goto label9;

     label5:
        $r5 = new net.oauth.OAuth$Parameter;

        $r6 = virtualinvoke r0.<net.oauth.OAuthMessage: java.lang.String getAuthorizationHeader(java.lang.String)>(null);

        specialinvoke $r5.<net.oauth.OAuth$Parameter: void <init>(java.lang.String,java.lang.String)>("Authorization", $r6);

        interfaceinvoke $r40.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r7 = virtualinvoke r0.<net.oauth.OAuthMessage: java.util.List getParameters()>();

        if $r7 == null goto label9;

        $z1 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label9;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z3 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r20 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r21 = (java.util.Map$Entry) $r20;

        $r22 = interfaceinvoke $r21.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r23 = (java.lang.String) $r22;

        $z2 = virtualinvoke $r23.<java.lang.String: boolean startsWith(java.lang.String)>("oauth_");

        if $z2 == 0 goto label6;

        interfaceinvoke $r9.<java.util.Iterator: void remove()>();

        goto label6;

     label7:
        if $z0 == 0 goto label8;

        if $r3 != null goto label8;

        $r10 = staticinvoke <net.oauth.OAuth: java.lang.String formEncode(java.lang.Iterable)>($r8);

        $r11 = virtualinvoke r0.<net.oauth.OAuthMessage: java.lang.String getBodyEncoding()>();

        $r12 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.lang.String)>($r11);

        $r13 = new net.oauth.OAuth$Parameter;

        specialinvoke $r13.<net.oauth.OAuth$Parameter: void <init>(java.lang.String,java.lang.String)>("Content-Type", "application/x-www-form-urlencoded");

        interfaceinvoke $r40.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = new net.oauth.OAuth$Parameter;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $i0 = lengthof $r12;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<net.oauth.OAuth$Parameter: void <init>(java.lang.String,java.lang.String)>("Content-Length", $r18);

        interfaceinvoke $r40.<java.util.List: boolean add(java.lang.Object)>($r14);

        $r19 = new java.io.ByteArrayInputStream;

        specialinvoke $r19.<java.io.ByteArrayInputStream: void <init>(byte[])>($r12);

        r37 = $r19;

        goto label9;

     label8:
        r39 = staticinvoke <net.oauth.OAuth: java.lang.String addParameters(java.lang.String,java.lang.Iterable)>($r38, $r8);

     label9:
        $r43 = new net.oauth.http.HttpMessage;

        $r44 = r0.<net.oauth.OAuthMessage: java.lang.String method>;

        $r45 = new java.net.URL;

        specialinvoke $r45.<java.net.URL: void <init>(java.lang.String)>(r39);

        specialinvoke $r43.<net.oauth.http.HttpMessage: void <init>(java.lang.String,java.net.URL,java.io.InputStream)>($r44, $r45, r37);

        $r46 = $r43.<net.oauth.http.HttpMessage: java.util.List headers>;

        interfaceinvoke $r46.<java.util.List: boolean addAll(java.util.Collection)>($r40);

        return $r43;
    }

    private static boolean equalsIgnoreCase(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label3;

        if r1 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        return $z0;
    }

    private static final java.lang.String getCharset(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        int $i0, $i2, $i3, $i5, $i6, $i7, $i8;
        java.lang.String r0, $r3, $r4, r5;
        boolean $z0;
        char $c1, $c4;
        java.util.regex.Pattern $r1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label2;

        $r1 = <net.oauth.http.HttpMessage: java.util.regex.Pattern CHARSET>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        r5 = $r3;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 < 2 goto label1;

        $c1 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        $i7 = (int) $c1;

        if $i7 != 34 goto label1;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        $c4 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i3);

        $i8 = (int) $c4;

        if $i8 != 34 goto label1;

        $i5 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i6 = $i5 - 1;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(1, $i6);

        r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\\"", "\"");

     label1:
        return r5;

     label2:
        return "ISO-8859-1";
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <net.oauth.http.HttpMessage: java.lang.String DEFAULT_CHARSET> = "ISO-8859-1";

        <net.oauth.http.HttpMessage: java.lang.String CONTENT_TYPE> = "Content-Type";

        <net.oauth.http.HttpMessage: java.lang.String CONTENT_LENGTH> = "Content-Length";

        <net.oauth.http.HttpMessage: java.lang.String CONTENT_ENCODING> = "Content-Encoding";

        <net.oauth.http.HttpMessage: java.lang.String ACCEPT_ENCODING> = "Accept-Encoding";

        <net.oauth.http.HttpMessage: java.lang.String STATUS_CODE> = "HTTP status";

        <net.oauth.http.HttpMessage: java.lang.String RESPONSE> = "HTTP response";

        <net.oauth.http.HttpMessage: java.lang.String REQUEST> = "HTTP request";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("; *charset *= *([^;\"]*|\"([^\"]|\\\\\")*\")(;|$)");

        <net.oauth.http.HttpMessage: java.util.regex.Pattern CHARSET> = $r0;

        return;
    }
}
