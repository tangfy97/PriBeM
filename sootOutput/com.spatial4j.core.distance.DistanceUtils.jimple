public class com.spatial4j.core.distance.DistanceUtils extends java.lang.Object
{
    public static final double DEG_45_AS_RADS;
    public static final double SIN_45_AS_RADS;
    public static final double DEG_90_AS_RADS;
    public static final double DEG_180_AS_RADS;
    public static final double DEG_225_AS_RADS;
    public static final double DEG_270_AS_RADS;
    public static final double DEGREES_TO_RADIANS;
    public static final double RADIANS_TO_DEGREES;
    public static final double KM_TO_MILES;
    public static final double MILES_TO_KM;
    public static final double EARTH_MEAN_RADIUS_KM;
    public static final double EARTH_EQUATORIAL_RADIUS_KM;
    public static final double EARTH_MEAN_RADIUS_MI;
    public static final double EARTH_EQUATORIAL_RADIUS_MI;

    private void <init>()
    {
        com.spatial4j.core.distance.DistanceUtils r0;

        r0 := @this: com.spatial4j.core.distance.DistanceUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double vectorDistance(double[], double[], double)
    {
        double[] r0, r1;
        double d0, $d1, $d2;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d0 := @parameter2: double;

        $d1 = 1.0 / d0;

        $d2 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double vectorDistance(double[],double[],double,double)>(r0, r1, d0, $d1);

        return $d2;
    }

    public static double vectorDistance(double[], double[], double, double)
    {
        byte $b0, $b1, $b2, $b3, $b7;
        boolean $z0;
        double[] r0, r1;
        int $i4, $i5, $i6, i8, i9, i10, $i11, i12;
        double d0, $d1, $d2, $d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, d17, $d18;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d0 := @parameter2: double;

        d4 := @parameter3: double;

        d17 = 0.0;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label05;

        i8 = 0;

     label01:
        $i6 = lengthof r0;

        if i8 >= $i6 goto label04;

        $d16 = d17;

        $d14 = r0[i8];

        $d13 = r1[i8];

        $d15 = $d14 - $d13;

        $b7 = $d15 cmpl 0.0;

        if $b7 != 0 goto label02;

        $d18 = 0.0;

        goto label03;

     label02:
        $d18 = 1.0;

     label03:
        d17 = $d16 + $d18;

        i8 = i8 + 1;

        goto label01;

     label04:
        goto label16;

     label05:
        $b1 = d0 cmpl 1.0;

        if $b1 != 0 goto label08;

        i9 = 0;

     label06:
        $i5 = lengthof r0;

        if i9 >= $i5 goto label07;

        $d11 = r0[i9];

        $d10 = r1[i9];

        $d12 = $d11 - $d10;

        d17 = d17 + $d12;

        i9 = i9 + 1;

        goto label06;

     label07:
        goto label16;

     label08:
        $b2 = d0 cmpl 2.0;

        if $b2 != 0 goto label09;

        $d9 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double distSquaredCartesian(double[],double[])>(r0, r1);

        d17 = staticinvoke <java.lang.Math: double sqrt(double)>($d9);

        goto label16;

     label09:
        $b3 = d0 cmpl 2.147483647E9;

        if $b3 == 0 goto label10;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 == 0 goto label13;

     label10:
        i10 = 0;

     label11:
        $i11 = lengthof r0;

        if i10 >= $i11 goto label12;

        $d2 = r0[i10];

        $d1 = r1[i10];

        $d3 = staticinvoke <java.lang.Math: double max(double,double)>($d2, $d1);

        d17 = staticinvoke <java.lang.Math: double max(double,double)>(d17, $d3);

        i10 = i10 + 1;

        goto label11;

     label12:
        goto label16;

     label13:
        i12 = 0;

     label14:
        $i4 = lengthof r0;

        if i12 >= $i4 goto label15;

        $d6 = r0[i12];

        $d5 = r1[i12];

        $d7 = $d6 - $d5;

        $d8 = staticinvoke <java.lang.Math: double pow(double,double)>($d7, d0);

        d17 = d17 + $d8;

        i12 = i12 + 1;

        goto label14;

     label15:
        d17 = staticinvoke <java.lang.Math: double pow(double,double)>(d17, d4);

     label16:
        return d17;
    }

    public static double[] vectorBoxCorner(double[], double[], double, boolean)
    {
        double[] r0, r1;
        int $i0, $i1, $i2, i3, $i4;
        boolean z0;
        double $d0, $d1, $d2, $d3, d4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d4 := @parameter2: double;

        z0 := @parameter3: boolean;

        if r1 == null goto label1;

        $i2 = lengthof r1;

        $i1 = lengthof r0;

        if $i2 == $i1 goto label2;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (double)[$i0];

     label2:
        if z0 != 0 goto label3;

        d4 = neg d4;

     label3:
        $d0 = <com.spatial4j.core.distance.DistanceUtils: double SIN_45_AS_RADS>;

        $d3 = $d0 * d4;

        i3 = 0;

     label4:
        $i4 = lengthof r0;

        if i3 >= $i4 goto label5;

        $d1 = r0[i3];

        $d2 = $d1 + $d3;

        r1[i3] = $d2;

        i3 = i3 + 1;

        goto label4;

     label5:
        return r1;
    }

    public static com.spatial4j.core.shape.Point pointOnBearingRAD(double, double, double, double, com.spatial4j.core.context.SpatialContext, com.spatial4j.core.shape.Point)
    {
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        com.spatial4j.core.shape.Point r0, $r2;
        com.spatial4j.core.context.SpatialContext r1;
        int $i6, $i7, $i8, $i9, $i10, $i11;
        double d0, $d1, d2, $d3, $d4, $d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, d26, d27;

        d2 := @parameter0: double;

        d13 := @parameter1: double;

        d0 := @parameter2: double;

        d6 := @parameter3: double;

        r1 := @parameter4: com.spatial4j.core.context.SpatialContext;

        r0 := @parameter5: com.spatial4j.core.shape.Point;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        $d3 = staticinvoke <java.lang.Math: double cos(double)>(d2);

        $d4 = staticinvoke <java.lang.Math: double sin(double)>(d0);

        $d5 = staticinvoke <java.lang.Math: double sin(double)>(d2);

        $d7 = $d5 * $d1;

        $d8 = $d3 * $d4;

        $d9 = staticinvoke <java.lang.Math: double cos(double)>(d6);

        $d10 = $d8 * $d9;

        $d11 = $d7 + $d10;

        $d12 = staticinvoke <java.lang.Math: double asin(double)>($d11);

        d26 = $d12;

        $d14 = staticinvoke <java.lang.Math: double sin(double)>(d6);

        $d15 = $d14 * $d4;

        $d16 = $d15 * $d3;

        $d17 = staticinvoke <java.lang.Math: double sin(double)>($d12);

        $d18 = $d5 * $d17;

        $d19 = $d1 - $d18;

        $d20 = staticinvoke <java.lang.Math: double atan2(double,double)>($d16, $d19);

        d27 = d13 + $d20;

        $b0 = d27 cmpl 3.141592653589793;

        $i6 = (int) $b0;

        if $i6 <= 0 goto label1;

        $d24 = d27 - 3.141592653589793;

        $d25 = 3.141592653589793 - $d24;

        d27 = -1.0 * $d25;

        goto label2;

     label1:
        $b1 = d27 cmpg -3.141592653589793;

        $i7 = (int) $b1;

        if $i7 >= 0 goto label2;

        $d23 = d27 + 3.141592653589793;

        d27 = $d23 + 3.141592653589793;

     label2:
        $b5 = $d12 cmpl 1.5707963267948966;

        $i8 = (int) $b5;

        if $i8 <= 0 goto label4;

        $d22 = $d12 - 1.5707963267948966;

        d26 = 1.5707963267948966 - $d22;

        $b4 = d27 cmpg 0.0;

        $i9 = (int) $b4;

        if $i9 >= 0 goto label3;

        d27 = d27 + 3.141592653589793;

        goto label6;

     label3:
        d27 = d27 - 3.141592653589793;

        goto label6;

     label4:
        $b2 = $d12 cmpg -1.5707963267948966;

        $i10 = (int) $b2;

        if $i10 >= 0 goto label6;

        $d21 = $d12 + 1.5707963267948966;

        d26 = -1.5707963267948966 - $d21;

        $b3 = d27 cmpg 0.0;

        $i11 = (int) $b3;

        if $i11 >= 0 goto label5;

        d27 = d27 + 3.141592653589793;

        goto label6;

     label5:
        d27 = d27 - 3.141592653589793;

     label6:
        if r0 != null goto label7;

        $r2 = virtualinvoke r1.<com.spatial4j.core.context.SpatialContext: com.spatial4j.core.shape.Point makePoint(double,double)>(d27, d26);

        return $r2;

     label7:
        interfaceinvoke r0.<com.spatial4j.core.shape.Point: void reset(double,double)>(d27, d26);

        return r0;
    }

    public static double normLonDEG(double)
    {
        byte $b0, $b1, $b2, $b3, $b4;
        int $i5, $i6, $i7, $i8;
        double d0, $d1, $d2, $d3, $d4;

        d0 := @parameter0: double;

        $b0 = d0 cmpl -180.0;

        $i5 = (int) $b0;

        if $i5 < 0 goto label1;

        $b4 = d0 cmpg 180.0;

        $i6 = (int) $b4;

        if $i6 > 0 goto label1;

        return d0;

     label1:
        $d1 = d0 + 180.0;

        $d4 = $d1 % 360.0;

        $b1 = $d4 cmpg 0.0;

        $i7 = (int) $b1;

        if $i7 >= 0 goto label2;

        $d3 = 180.0 + $d4;

        return $d3;

     label2:
        $b2 = $d4 cmpl 0.0;

        if $b2 != 0 goto label3;

        $b3 = d0 cmpl 0.0;

        $i8 = (int) $b3;

        if $i8 <= 0 goto label3;

        return 180.0;

     label3:
        $d2 = -180.0 + $d4;

        return $d2;
    }

    public static double normLatDEG(double)
    {
        byte $b0, $b1, $b2;
        int $i3, $i4, $i5;
        double d0, $d1, $d2, $d3, $d4, $d5;

        d0 := @parameter0: double;

        $b0 = d0 cmpl -90.0;

        $i3 = (int) $b0;

        if $i3 < 0 goto label1;

        $b2 = d0 cmpg 90.0;

        $i4 = (int) $b2;

        if $i4 > 0 goto label1;

        return d0;

     label1:
        $d1 = d0 + 90.0;

        $d2 = $d1 % 360.0;

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $b1 = $d3 cmpg 180.0;

        $i5 = (int) $b1;

        if $i5 > 0 goto label2;

        $d5 = $d3;

        goto label3;

     label2:
        $d5 = 360.0 - $d3;

     label3:
        $d4 = $d5 - 90.0;

        return $d4;
    }

    public static com.spatial4j.core.shape.Rectangle calcBoxByDistFromPtDEG(double, double, double, com.spatial4j.core.context.SpatialContext, com.spatial4j.core.shape.Rectangle)
    {
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7;
        int $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d10, d11;
        com.spatial4j.core.shape.Rectangle r0, $r2;
        com.spatial4j.core.context.SpatialContext r1;

        d1 := @parameter0: double;

        d2 := @parameter1: double;

        d0 := @parameter2: double;

        r1 := @parameter3: com.spatial4j.core.context.SpatialContext;

        r0 := @parameter4: com.spatial4j.core.shape.Rectangle;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        d8 = d2;

        d9 = d2;

        d10 = d1;

        d11 = d1;

        goto label7;

     label1:
        $b1 = d0 cmpl 180.0;

        $i8 = (int) $b1;

        if $i8 < 0 goto label2;

        d8 = -180.0;

        d9 = 180.0;

        d10 = -90.0;

        d11 = 90.0;

        goto label7;

     label2:
        d11 = d1 + d0;

        d10 = d1 - d0;

        $b2 = d11 cmpl 90.0;

        $i9 = (int) $b2;

        if $i9 >= 0 goto label3;

        $b6 = d10 cmpg -90.0;

        $i10 = (int) $b6;

        if $i10 > 0 goto label6;

     label3:
        d8 = -180.0;

        d9 = 180.0;

        $b3 = d11 cmpg 90.0;

        $i11 = (int) $b3;

        if $i11 > 0 goto label4;

        $b5 = d10 cmpl -90.0;

        $i12 = (int) $b5;

        if $i12 < 0 goto label4;

        $d3 = d2 - 90.0;

        d8 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double normLonDEG(double)>($d3);

        $d4 = d2 + 90.0;

        d9 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double normLonDEG(double)>($d4);

     label4:
        $b7 = d11 cmpl 90.0;

        $i13 = (int) $b7;

        if $i13 <= 0 goto label5;

        d11 = 90.0;

     label5:
        $b4 = d10 cmpg -90.0;

        $i14 = (int) $b4;

        if $i14 >= 0 goto label7;

        d10 = -90.0;

        goto label7;

     label6:
        $d5 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double calcBoxByDistFromPt_deltaLonDEG(double,double,double)>(d1, d2, d0);

        $d6 = d2 - $d5;

        d8 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double normLonDEG(double)>($d6);

        $d7 = d2 + $d5;

        d9 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double normLonDEG(double)>($d7);

     label7:
        if r0 != null goto label8;

        $r2 = virtualinvoke r1.<com.spatial4j.core.context.SpatialContext: com.spatial4j.core.shape.Rectangle makeRectangle(double,double,double,double)>(d8, d9, d10, d11);

        return $r2;

     label8:
        interfaceinvoke r0.<com.spatial4j.core.shape.Rectangle: void reset(double,double,double,double)>(d8, d9, d10, d11);

        return r0;
    }

    public static double calcBoxByDistFromPt_deltaLonDEG(double, double, double)
    {
        byte $b0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9;
        boolean $z0;

        d1 := @parameter0: double;

        d9 := @parameter1: double;

        d0 := @parameter2: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $d2 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toRadians(double)>(d1);

        $d3 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toRadians(double)>(d0);

        $d4 = staticinvoke <java.lang.Math: double sin(double)>($d3);

        $d5 = staticinvoke <java.lang.Math: double cos(double)>($d2);

        $d6 = $d4 / $d5;

        $d7 = staticinvoke <java.lang.Math: double asin(double)>($d6);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d7);

        if $z0 != 0 goto label2;

        $d8 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toDegrees(double)>($d7);

        return $d8;

     label2:
        return 90.0;
    }

    public static double calcBoxByDistFromPt_latHorizAxisDEG(double, double, double)
    {
        byte $b0, $b1, $b2;
        int $i3, $i4;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9;
        boolean $z0;

        d1 := @parameter0: double;

        d9 := @parameter1: double;

        d0 := @parameter2: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return d1;

     label1:
        $d2 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toRadians(double)>(d1);

        $d3 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toRadians(double)>(d0);

        $d4 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        $d5 = staticinvoke <java.lang.Math: double cos(double)>($d3);

        $d6 = $d4 / $d5;

        $d7 = staticinvoke <java.lang.Math: double asin(double)>($d6);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d7);

        if $z0 != 0 goto label2;

        $d8 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toDegrees(double)>($d7);

        return $d8;

     label2:
        $b1 = d1 cmpl 0.0;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label3;

        return 90.0;

     label3:
        $b2 = d1 cmpg 0.0;

        $i4 = (int) $b2;

        if $i4 >= 0 goto label4;

        return -90.0;

     label4:
        return d1;
    }

    public static double distSquaredCartesian(double[], double[])
    {
        double[] r0, r1;
        int $i0, i1;
        double $d0, $d1, d2, $d3, d4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d4 = 0.0;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $d1 = r0[i1];

        $d0 = r1[i1];

        d2 = $d1 - $d0;

        $d3 = d2 * d2;

        d4 = d4 + $d3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d4;
    }

    public static double distHaversineRAD(double, double, double, double)
    {
        byte $b0, $b1;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        d1 := @parameter2: double;

        d3 := @parameter3: double;

        $b0 = d0 cmpl d1;

        if $b0 != 0 goto label1;

        $b1 = d2 cmpl d3;

        if $b1 != 0 goto label1;

        return 0.0;

     label1:
        $d4 = d2 - d3;

        $d5 = $d4 * 0.5;

        $d6 = staticinvoke <java.lang.Math: double sin(double)>($d5);

        $d7 = d0 - d1;

        $d8 = $d7 * 0.5;

        $d9 = staticinvoke <java.lang.Math: double sin(double)>($d8);

        $d10 = $d9 * $d9;

        $d11 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        $d12 = staticinvoke <java.lang.Math: double cos(double)>(d1);

        $d13 = $d11 * $d12;

        $d14 = $d13 * $d6;

        $d15 = $d14 * $d6;

        $d21 = $d10 + $d15;

        $d16 = staticinvoke <java.lang.Math: double sqrt(double)>($d21);

        $d17 = 1.0 - $d21;

        $d18 = staticinvoke <java.lang.Math: double sqrt(double)>($d17);

        $d19 = staticinvoke <java.lang.Math: double atan2(double,double)>($d16, $d18);

        $d20 = 2.0 * $d19;

        return $d20;
    }

    public static double distLawOfCosinesRAD(double, double, double, double)
    {
        byte $b0, $b1, $b2, $b3;
        int $i4, $i5;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;

        d0 := @parameter0: double;

        d3 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $b0 = d0 cmpl d1;

        if $b0 != 0 goto label1;

        $b3 = d3 cmpl d2;

        if $b3 != 0 goto label1;

        return 0.0;

     label1:
        $d13 = d2 - d3;

        $d14 = 1.5707963267948966 - d0;

        $d15 = 1.5707963267948966 - d1;

        $d4 = staticinvoke <java.lang.Math: double cos(double)>($d14);

        $d5 = staticinvoke <java.lang.Math: double cos(double)>($d15);

        $d6 = $d4 * $d5;

        $d7 = staticinvoke <java.lang.Math: double sin(double)>($d14);

        $d8 = staticinvoke <java.lang.Math: double sin(double)>($d15);

        $d9 = $d7 * $d8;

        $d10 = staticinvoke <java.lang.Math: double cos(double)>($d13);

        $d11 = $d9 * $d10;

        $d16 = $d6 + $d11;

        $b1 = $d16 cmpg -1.0;

        $i4 = (int) $b1;

        if $i4 >= 0 goto label2;

        return 3.141592653589793;

     label2:
        $b2 = $d16 cmpl 1.0;

        $i5 = (int) $b2;

        if $i5 < 0 goto label3;

        return 0.0;

     label3:
        $d12 = staticinvoke <java.lang.Math: double acos(double)>($d16);

        return $d12;
    }

    public static double distVincentyRAD(double, double, double, double)
    {
        byte $b0, $b1;
        double d0, d1, $d2, $d3, $d4, $d5, d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24;

        d0 := @parameter0: double;

        d7 := @parameter1: double;

        d1 := @parameter2: double;

        d6 := @parameter3: double;

        $b0 = d0 cmpl d1;

        if $b0 != 0 goto label1;

        $b1 = d7 cmpl d6;

        if $b1 != 0 goto label1;

        return 0.0;

     label1:
        $d2 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        $d3 = staticinvoke <java.lang.Math: double cos(double)>(d1);

        $d4 = staticinvoke <java.lang.Math: double sin(double)>(d0);

        $d5 = staticinvoke <java.lang.Math: double sin(double)>(d1);

        $d21 = d6 - d7;

        $d8 = staticinvoke <java.lang.Math: double cos(double)>($d21);

        $d9 = staticinvoke <java.lang.Math: double sin(double)>($d21);

        $d22 = $d3 * $d9;

        $d12 = $d2 * $d5;

        $d10 = $d4 * $d3;

        $d11 = $d10 * $d8;

        $d23 = $d12 - $d11;

        $d15 = $d4 * $d5;

        $d13 = $d2 * $d3;

        $d14 = $d13 * $d8;

        $d24 = $d15 + $d14;

        $d17 = $d22 * $d22;

        $d16 = $d23 * $d23;

        $d18 = $d17 + $d16;

        $d19 = staticinvoke <java.lang.Math: double sqrt(double)>($d18);

        $d20 = staticinvoke <java.lang.Math: double atan2(double,double)>($d19, $d24);

        return $d20;
    }

    public static double dist2Degrees(double, double)
    {
        double d0, d1, $d2, $d3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double dist2Radians(double,double)>(d0, d1);

        $d3 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toDegrees(double)>($d2);

        return $d3;
    }

    public static double degrees2Dist(double, double)
    {
        double d0, $d1, d2, $d3;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        $d1 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toRadians(double)>(d0);

        $d3 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double radians2Dist(double,double)>($d1, d2);

        return $d3;
    }

    public static double dist2Radians(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = d0 / d1;

        return $d2;
    }

    public static double radians2Dist(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = d0 * d1;

        return $d2;
    }

    public static double toRadians(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = d0 * 0.017453292519943295;

        return $d1;
    }

    public static double toDegrees(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = d0 * 57.29577951308232;

        return $d1;
    }

    static void <clinit>()
    {
        double $d0;

        <com.spatial4j.core.distance.DistanceUtils: double EARTH_EQUATORIAL_RADIUS_MI> = 3963.190590429304;

        <com.spatial4j.core.distance.DistanceUtils: double EARTH_MEAN_RADIUS_MI> = 3958.7613145272735;

        <com.spatial4j.core.distance.DistanceUtils: double EARTH_EQUATORIAL_RADIUS_KM> = 6378.137;

        <com.spatial4j.core.distance.DistanceUtils: double EARTH_MEAN_RADIUS_KM> = 6371.0087714;

        <com.spatial4j.core.distance.DistanceUtils: double MILES_TO_KM> = 1.6093440006146922;

        <com.spatial4j.core.distance.DistanceUtils: double KM_TO_MILES> = 0.621371192;

        <com.spatial4j.core.distance.DistanceUtils: double RADIANS_TO_DEGREES> = 57.29577951308232;

        <com.spatial4j.core.distance.DistanceUtils: double DEGREES_TO_RADIANS> = 0.017453292519943295;

        <com.spatial4j.core.distance.DistanceUtils: double DEG_270_AS_RADS> = 4.71238898038469;

        <com.spatial4j.core.distance.DistanceUtils: double DEG_225_AS_RADS> = 3.9269908169872414;

        <com.spatial4j.core.distance.DistanceUtils: double DEG_180_AS_RADS> = 3.141592653589793;

        <com.spatial4j.core.distance.DistanceUtils: double DEG_90_AS_RADS> = 1.5707963267948966;

        <com.spatial4j.core.distance.DistanceUtils: double DEG_45_AS_RADS> = 0.7853981633974483;

        $d0 = staticinvoke <java.lang.Math: double sin(double)>(0.7853981633974483);

        <com.spatial4j.core.distance.DistanceUtils: double SIN_45_AS_RADS> = $d0;

        return;
    }
}
