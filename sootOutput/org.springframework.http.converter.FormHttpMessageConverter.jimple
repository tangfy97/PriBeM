public class org.springframework.http.converter.FormHttpMessageConverter extends java.lang.Object implements org.springframework.http.converter.HttpMessageConverter
{
    private static final byte[] BOUNDARY_CHARS;
    private final java.util.Random rnd;
    private java.nio.charset.Charset charset;
    private java.util.List supportedMediaTypes;
    private java.util.List partConverters;

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[64];

        $r0[0] = 45;

        $r0[1] = 95;

        $r0[2] = 49;

        $r0[3] = 50;

        $r0[4] = 51;

        $r0[5] = 52;

        $r0[6] = 53;

        $r0[7] = 54;

        $r0[8] = 55;

        $r0[9] = 56;

        $r0[10] = 57;

        $r0[11] = 48;

        $r0[12] = 97;

        $r0[13] = 98;

        $r0[14] = 99;

        $r0[15] = 100;

        $r0[16] = 101;

        $r0[17] = 102;

        $r0[18] = 103;

        $r0[19] = 104;

        $r0[20] = 105;

        $r0[21] = 106;

        $r0[22] = 107;

        $r0[23] = 108;

        $r0[24] = 109;

        $r0[25] = 110;

        $r0[26] = 111;

        $r0[27] = 112;

        $r0[28] = 113;

        $r0[29] = 114;

        $r0[30] = 115;

        $r0[31] = 116;

        $r0[32] = 117;

        $r0[33] = 118;

        $r0[34] = 119;

        $r0[35] = 120;

        $r0[36] = 121;

        $r0[37] = 122;

        $r0[38] = 65;

        $r0[39] = 66;

        $r0[40] = 67;

        $r0[41] = 68;

        $r0[42] = 69;

        $r0[43] = 70;

        $r0[44] = 71;

        $r0[45] = 72;

        $r0[46] = 73;

        $r0[47] = 74;

        $r0[48] = 75;

        $r0[49] = 76;

        $r0[50] = 77;

        $r0[51] = 78;

        $r0[52] = 79;

        $r0[53] = 80;

        $r0[54] = 81;

        $r0[55] = 82;

        $r0[56] = 83;

        $r0[57] = 84;

        $r0[58] = 85;

        $r0[59] = 86;

        $r0[60] = 87;

        $r0[61] = 88;

        $r0[62] = 89;

        $r0[63] = 90;

        <org.springframework.http.converter.FormHttpMessageConverter: byte[] BOUNDARY_CHARS> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.http.converter.ByteArrayHttpMessageConverter $r9;
        org.springframework.http.MediaType $r5, $r7;
        java.util.Random $r1;
        java.util.ArrayList $r3, $r4;
        org.springframework.http.converter.StringHttpMessageConverter $r11;
        org.springframework.http.converter.FormHttpMessageConverter r0;
        org.springframework.http.converter.ResourceHttpMessageConverter $r13;
        java.util.List $r6, $r8, $r10, $r12, $r14;
        java.nio.charset.Charset $r2;

        r0 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        r0.<org.springframework.http.converter.FormHttpMessageConverter: java.util.Random rnd> = $r1;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        r0.<org.springframework.http.converter.FormHttpMessageConverter: java.nio.charset.Charset charset> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.springframework.http.converter.FormHttpMessageConverter: java.util.List supportedMediaTypes> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.springframework.http.converter.FormHttpMessageConverter: java.util.List partConverters> = $r4;

        $r6 = r0.<org.springframework.http.converter.FormHttpMessageConverter: java.util.List supportedMediaTypes>;

        $r5 = <org.springframework.http.MediaType: org.springframework.http.MediaType APPLICATION_FORM_URLENCODED>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r8 = r0.<org.springframework.http.converter.FormHttpMessageConverter: java.util.List supportedMediaTypes>;

        $r7 = <org.springframework.http.MediaType: org.springframework.http.MediaType MULTIPART_FORM_DATA>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r10 = r0.<org.springframework.http.converter.FormHttpMessageConverter: java.util.List partConverters>;

        $r9 = new org.springframework.http.converter.ByteArrayHttpMessageConverter;

        specialinvoke $r9.<org.springframework.http.converter.ByteArrayHttpMessageConverter: void <init>()>();

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r11 = new org.springframework.http.converter.StringHttpMessageConverter;

        specialinvoke $r11.<org.springframework.http.converter.StringHttpMessageConverter: void <init>()>();

        virtualinvoke $r11.<org.springframework.http.converter.StringHttpMessageConverter: void setWriteAcceptCharset(boolean)>(0);

        $r12 = r0.<org.springframework.http.converter.FormHttpMessageConverter: java.util.List partConverters>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r14 = r0.<org.springframework.http.converter.FormHttpMessageConverter: java.util.List partConverters>;

        $r13 = new org.springframework.http.converter.ResourceHttpMessageConverter;

        specialinvoke $r13.<org.springframework.http.converter.ResourceHttpMessageConverter: void <init>()>();

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r13);

        return;
    }

    public final void setPartConverters(java.util.List)
    {
        org.springframework.http.converter.FormHttpMessageConverter r1;
        java.util.List r0;

        r1 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r0 := @parameter0: java.util.List;

        staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r0, "\'partConverters\' must not be empty");

        r1.<org.springframework.http.converter.FormHttpMessageConverter: java.util.List partConverters> = r0;

        return;
    }

    public final void addPartConverter(org.springframework.http.converter.HttpMessageConverter)
    {
        org.springframework.http.converter.FormHttpMessageConverter r1;
        java.util.List $r2;
        org.springframework.http.converter.HttpMessageConverter r0;

        r1 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r0 := @parameter0: org.springframework.http.converter.HttpMessageConverter;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'partConverter\' must not be NULL");

        $r2 = r1.<org.springframework.http.converter.FormHttpMessageConverter: java.util.List partConverters>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public void setCharset(java.nio.charset.Charset)
    {
        org.springframework.http.converter.FormHttpMessageConverter r0;
        java.nio.charset.Charset r1;

        r0 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r1 := @parameter0: java.nio.charset.Charset;

        r0.<org.springframework.http.converter.FormHttpMessageConverter: java.nio.charset.Charset charset> = r1;

        return;
    }

    public boolean canRead(java.lang.Class, org.springframework.http.MediaType)
    {
        java.util.Iterator $r5;
        org.springframework.http.MediaType r2, r7, $r8;
        org.springframework.http.converter.FormHttpMessageConverter r3;
        java.util.List $r4;
        java.lang.Class r0, $r1;
        java.lang.Object $r6;
        boolean $z0, $z1, $z2, $z3;

        r3 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.http.MediaType;

        $r1 = class "Lorg/springframework/util/MultiValueMap;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        if r2 != null goto label2;

        return 1;

     label2:
        $r4 = virtualinvoke r3.<org.springframework.http.converter.FormHttpMessageConverter: java.util.List getSupportedMediaTypes()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.springframework.http.MediaType) $r6;

        $r8 = <org.springframework.http.MediaType: org.springframework.http.MediaType MULTIPART_FORM_DATA>;

        $z1 = virtualinvoke r7.<org.springframework.http.MediaType: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label4;

        $z2 = virtualinvoke r7.<org.springframework.http.MediaType: boolean includes(org.springframework.http.MediaType)>(r2);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label3;

        return 0;
    }

    public boolean canWrite(java.lang.Class, org.springframework.http.MediaType)
    {
        java.util.Iterator $r6;
        org.springframework.http.MediaType r2, $r3, r8;
        org.springframework.http.converter.FormHttpMessageConverter r4;
        java.util.List $r5;
        java.lang.Class r0, $r1;
        java.lang.Object $r7;
        boolean $z0, $z1, $z2, $z3;

        r4 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.http.MediaType;

        $r1 = class "Lorg/springframework/util/MultiValueMap;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        if r2 == null goto label2;

        $r3 = <org.springframework.http.MediaType: org.springframework.http.MediaType ALL>;

        $z1 = virtualinvoke $r3.<org.springframework.http.MediaType: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label3;

     label2:
        return 1;

     label3:
        $r5 = virtualinvoke r4.<org.springframework.http.converter.FormHttpMessageConverter: java.util.List getSupportedMediaTypes()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        goto label5;

     label4:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.springframework.http.MediaType) $r7;

        $z3 = virtualinvoke r8.<org.springframework.http.MediaType: boolean isCompatibleWith(org.springframework.http.MediaType)>(r2);

        if $z3 == 0 goto label5;

        return 1;

     label5:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label4;

        return 0;
    }

    public void setSupportedMediaTypes(java.util.List)
    {
        org.springframework.http.converter.FormHttpMessageConverter r0;
        java.util.List r1;

        r0 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r1 := @parameter0: java.util.List;

        r0.<org.springframework.http.converter.FormHttpMessageConverter: java.util.List supportedMediaTypes> = r1;

        return;
    }

    public java.util.List getSupportedMediaTypes()
    {
        org.springframework.http.converter.FormHttpMessageConverter r0;
        java.util.List $r1, $r2;

        r0 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        $r1 = r0.<org.springframework.http.converter.FormHttpMessageConverter: java.util.List supportedMediaTypes>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public org.springframework.util.MultiValueMap read(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException
    {
        java.lang.String[] $r9;
        org.springframework.http.converter.FormHttpMessageConverter r4;
        java.nio.charset.Charset $r3, r5, $r21;
        int $i0, $i1, $i2, $i3, i4, $i6;
        java.lang.String $r8, r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        org.springframework.http.HttpHeaders $r1;
        org.springframework.http.MediaType $r2;
        java.io.InputStreamReader $r22;
        org.springframework.http.HttpInputMessage r0;
        java.lang.Class r20;
        org.springframework.util.LinkedMultiValueMap $r23;
        java.io.InputStream $r7;

        r4 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r20 := @parameter0: java.lang.Class;

        r0 := @parameter1: org.springframework.http.HttpInputMessage;

        $r1 = interfaceinvoke r0.<org.springframework.http.HttpInputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        $r2 = virtualinvoke $r1.<org.springframework.http.HttpHeaders: org.springframework.http.MediaType getContentType()>();

        $r3 = virtualinvoke $r2.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

        if $r3 == null goto label1;

        $r21 = virtualinvoke $r2.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

        goto label2;

     label1:
        $r21 = r4.<org.springframework.http.converter.FormHttpMessageConverter: java.nio.charset.Charset charset>;

     label2:
        r5 = $r21;

        $r22 = new java.io.InputStreamReader;

        $r7 = interfaceinvoke r0.<org.springframework.http.HttpInputMessage: java.io.InputStream getBody()>();

        specialinvoke $r22.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r7, $r21);

        $r8 = staticinvoke <org.springframework.util.FileCopyUtils: java.lang.String copyToString(java.io.Reader)>($r22);

        $r9 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] tokenizeToStringArray(java.lang.String,java.lang.String)>($r8, "&");

        $r23 = new org.springframework.util.LinkedMultiValueMap;

        $i0 = lengthof $r9;

        specialinvoke $r23.<org.springframework.util.LinkedMultiValueMap: void <init>(int)>($i0);

        $i3 = lengthof $r9;

        i4 = 0;

        goto label6;

     label3:
        r11 = $r9[i4];

        $i1 = virtualinvoke r11.<java.lang.String: int indexOf(int)>(61);

        $i6 = (int) -1;

        if $i1 != $i6 goto label4;

        $r18 = virtualinvoke r5.<java.nio.charset.Charset: java.lang.String name()>();

        $r19 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r11, $r18);

        interfaceinvoke $r23.<org.springframework.util.MultiValueMap: void add(java.lang.Object,java.lang.Object)>($r19, null);

        goto label5;

     label4:
        $r12 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r13 = virtualinvoke r5.<java.nio.charset.Charset: java.lang.String name()>();

        $r14 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r12, $r13);

        $i2 = $i1 + 1;

        $r15 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>($i2);

        $r16 = virtualinvoke r5.<java.nio.charset.Charset: java.lang.String name()>();

        $r17 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r15, $r16);

        interfaceinvoke $r23.<org.springframework.util.MultiValueMap: void add(java.lang.Object,java.lang.Object)>($r14, $r17);

     label5:
        i4 = i4 + 1;

     label6:
        if i4 < $i3 goto label3;

        return $r23;
    }

    public void write(org.springframework.util.MultiValueMap, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException
    {
        org.springframework.http.converter.FormHttpMessageConverter r0;
        org.springframework.http.MediaType r2;
        org.springframework.util.MultiValueMap r1;
        boolean $z0;
        org.springframework.http.HttpOutputMessage r3;

        r0 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r1 := @parameter0: org.springframework.util.MultiValueMap;

        r2 := @parameter1: org.springframework.http.MediaType;

        r3 := @parameter2: org.springframework.http.HttpOutputMessage;

        $z0 = specialinvoke r0.<org.springframework.http.converter.FormHttpMessageConverter: boolean isMultipart(org.springframework.util.MultiValueMap,org.springframework.http.MediaType)>(r1, r2);

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.springframework.http.converter.FormHttpMessageConverter: void writeForm(org.springframework.util.MultiValueMap,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>(r1, r2, r3);

        goto label2;

     label1:
        specialinvoke r0.<org.springframework.http.converter.FormHttpMessageConverter: void writeMultipart(org.springframework.util.MultiValueMap,org.springframework.http.HttpOutputMessage)>(r1, r3);

     label2:
        return;
    }

    private boolean isMultipart(org.springframework.util.MultiValueMap, org.springframework.http.MediaType)
    {
        org.springframework.http.converter.FormHttpMessageConverter r11;
        java.lang.String r5;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r3, $r8;
        org.springframework.http.MediaType r0, $r10;
        org.springframework.util.MultiValueMap r1;
        java.util.Set $r2;
        java.util.List $r7;
        java.lang.Object $r4, $r6, $r9;

        r11 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r1 := @parameter0: org.springframework.util.MultiValueMap;

        r0 := @parameter1: org.springframework.http.MediaType;

        if r0 == null goto label1;

        $r10 = <org.springframework.http.MediaType: org.springframework.http.MediaType MULTIPART_FORM_DATA>;

        $z2 = virtualinvoke $r10.<org.springframework.http.MediaType: boolean equals(java.lang.Object)>(r0);

        return $z2;

     label1:
        $r2 = interfaceinvoke r1.<org.springframework.util.MultiValueMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label5;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = interfaceinvoke r1.<org.springframework.util.MultiValueMap: java.lang.Object get(java.lang.Object)>(r5);

        $r7 = (java.util.List) $r6;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        if $r9 == null goto label4;

        $z1 = $r9 instanceof java.lang.String;

        if $z1 != 0 goto label4;

        return 1;

     label4:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label3;

     label5:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return 0;
    }

    private void writeForm(org.springframework.util.MultiValueMap, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException
    {
        byte[] $r22;
        org.springframework.http.converter.FormHttpMessageConverter r4;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.http.HttpHeaders $r2, $r23, $r25;
        org.springframework.http.MediaType r0, $r3;
        java.util.Set $r7;
        java.util.List $r12;
        java.lang.StringBuilder $r5;
        long $l1;
        java.nio.charset.Charset $r26, $r27, r28;
        int $i0;
        java.lang.String r10, r15, $r16, $r17, $r18, $r19, $r20, $r21;
        java.io.OutputStream $r24;
        java.util.Iterator $r8, $r13;
        org.springframework.util.MultiValueMap r6;
        java.lang.Object $r9, $r11, $r14;
        org.springframework.http.HttpOutputMessage r1;

        r4 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r6 := @parameter0: org.springframework.util.MultiValueMap;

        r0 := @parameter1: org.springframework.http.MediaType;

        r1 := @parameter2: org.springframework.http.HttpOutputMessage;

        if r0 == null goto label3;

        $r25 = interfaceinvoke r1.<org.springframework.http.HttpOutputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        virtualinvoke $r25.<org.springframework.http.HttpHeaders: void setContentType(org.springframework.http.MediaType)>(r0);

        $r26 = virtualinvoke r0.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

        if $r26 == null goto label1;

        $r27 = virtualinvoke r0.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

        goto label2;

     label1:
        $r27 = r4.<org.springframework.http.converter.FormHttpMessageConverter: java.nio.charset.Charset charset>;

     label2:
        r28 = $r27;

        goto label4;

     label3:
        $r2 = interfaceinvoke r1.<org.springframework.http.HttpOutputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        $r3 = <org.springframework.http.MediaType: org.springframework.http.MediaType APPLICATION_FORM_URLENCODED>;

        virtualinvoke $r2.<org.springframework.http.HttpHeaders: void setContentType(org.springframework.http.MediaType)>($r3);

        r28 = r4.<org.springframework.http.converter.FormHttpMessageConverter: java.nio.charset.Charset charset>;

     label4:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = interfaceinvoke r6.<org.springframework.util.MultiValueMap: java.util.Set keySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

        goto label8;

     label5:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r9;

        $r11 = interfaceinvoke r6.<org.springframework.util.MultiValueMap: java.lang.Object get(java.lang.Object)>(r10);

        $r12 = (java.util.List) $r11;

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

        goto label7;

     label6:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.String) $r14;

        $r16 = virtualinvoke r28.<java.nio.charset.Charset: java.lang.String name()>();

        $r17 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>(r10, $r16);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        if r15 == null goto label7;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r18 = virtualinvoke r28.<java.nio.charset.Charset: java.lang.String name()>();

        $r19 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>(r15, $r18);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(38);

     label7:
        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label6;

        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(38);

     label8:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label5;

        $r20 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = virtualinvoke r28.<java.nio.charset.Charset: java.lang.String name()>();

        $r22 = virtualinvoke $r20.<java.lang.String: byte[] getBytes(java.lang.String)>($r21);

        $r23 = interfaceinvoke r1.<org.springframework.http.HttpOutputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        $i0 = lengthof $r22;

        $l1 = (long) $i0;

        virtualinvoke $r23.<org.springframework.http.HttpHeaders: void setContentLength(long)>($l1);

        $r24 = interfaceinvoke r1.<org.springframework.http.HttpOutputMessage: java.io.OutputStream getBody()>();

        staticinvoke <org.springframework.util.FileCopyUtils: void copy(byte[],java.io.OutputStream)>($r22, $r24);

        return;
    }

    private void writeMultipart(org.springframework.util.MultiValueMap, org.springframework.http.HttpOutputMessage) throws java.io.IOException
    {
        java.io.OutputStream $r8, $r10;
        byte[] $r1;
        org.springframework.http.HttpHeaders $r7;
        org.springframework.http.MediaType $r4, $r5;
        org.springframework.util.MultiValueMap r9;
        org.springframework.http.converter.FormHttpMessageConverter r0;
        java.util.Map $r3;
        java.lang.String $r2;
        org.springframework.http.HttpOutputMessage r6;

        r0 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r9 := @parameter0: org.springframework.util.MultiValueMap;

        r6 := @parameter1: org.springframework.http.HttpOutputMessage;

        $r1 = virtualinvoke r0.<org.springframework.http.converter.FormHttpMessageConverter: byte[] generateMultipartBoundary()>();

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, "US-ASCII");

        $r3 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("boundary", $r2);

        $r4 = new org.springframework.http.MediaType;

        $r5 = <org.springframework.http.MediaType: org.springframework.http.MediaType MULTIPART_FORM_DATA>;

        specialinvoke $r4.<org.springframework.http.MediaType: void <init>(org.springframework.http.MediaType,java.util.Map)>($r5, $r3);

        $r7 = interfaceinvoke r6.<org.springframework.http.HttpOutputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        virtualinvoke $r7.<org.springframework.http.HttpHeaders: void setContentType(org.springframework.http.MediaType)>($r4);

        $r8 = interfaceinvoke r6.<org.springframework.http.HttpOutputMessage: java.io.OutputStream getBody()>();

        specialinvoke r0.<org.springframework.http.converter.FormHttpMessageConverter: void writeParts(java.io.OutputStream,org.springframework.util.MultiValueMap,byte[])>($r8, r9, $r1);

        $r10 = interfaceinvoke r6.<org.springframework.http.HttpOutputMessage: java.io.OutputStream getBody()>();

        specialinvoke r0.<org.springframework.http.converter.FormHttpMessageConverter: void writeEnd(byte[],java.io.OutputStream)>($r1, $r10);

        return;
    }

    private void writeParts(java.io.OutputStream, org.springframework.util.MultiValueMap, byte[]) throws java.io.IOException
    {
        byte[] r12;
        org.springframework.http.converter.FormHttpMessageConverter r11;
        java.lang.String r6;
        boolean $z0, $z1;
        java.io.OutputStream r13;
        java.util.Map$Entry r4;
        java.util.Iterator $r2, $r9;
        org.springframework.util.MultiValueMap r0;
        java.util.Set $r1;
        java.util.List $r8;
        org.springframework.http.HttpEntity $r14;
        java.lang.Object $r3, $r5, $r7, $r10;

        r11 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r13 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: org.springframework.util.MultiValueMap;

        r12 := @parameter2: byte[];

        $r1 = interfaceinvoke r0.<org.springframework.util.MultiValueMap: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.lang.String) $r5;

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.util.List) $r7;

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        specialinvoke r11.<org.springframework.http.converter.FormHttpMessageConverter: void writeBoundary(byte[],java.io.OutputStream)>(r12, r13);

        $r14 = specialinvoke r11.<org.springframework.http.converter.FormHttpMessageConverter: org.springframework.http.HttpEntity getEntity(java.lang.Object)>($r10);

        specialinvoke r11.<org.springframework.http.converter.FormHttpMessageConverter: void writePart(java.lang.String,org.springframework.http.HttpEntity,java.io.OutputStream)>(r6, $r14, r13);

        specialinvoke r11.<org.springframework.http.converter.FormHttpMessageConverter: void writeNewLine(java.io.OutputStream)>(r13);

     label3:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

     label4:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    private void writeBoundary(byte[], java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        org.springframework.http.converter.FormHttpMessageConverter r2;
        byte[] r1;

        r2 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r1 := @parameter0: byte[];

        r0 := @parameter1: java.io.OutputStream;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(45);

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(45);

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>(r1);

        specialinvoke r2.<org.springframework.http.converter.FormHttpMessageConverter: void writeNewLine(java.io.OutputStream)>(r0);

        return;
    }

    private org.springframework.http.HttpEntity getEntity(java.lang.Object)
    {
        org.springframework.http.converter.FormHttpMessageConverter r3;
        org.springframework.http.HttpEntity $r1, $r2;
        java.lang.Object r0;
        boolean $z0;

        r3 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.springframework.http.HttpEntity;

        if $z0 == 0 goto label1;

        $r2 = (org.springframework.http.HttpEntity) r0;

        return $r2;

     label1:
        $r1 = new org.springframework.http.HttpEntity;

        specialinvoke $r1.<org.springframework.http.HttpEntity: void <init>(java.lang.Object)>(r0);

        return $r1;
    }

    private void writePart(java.lang.String, org.springframework.http.HttpEntity, java.io.OutputStream) throws java.io.IOException
    {
        org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage $r10;
        org.springframework.http.converter.HttpMessageNotWritableException $r16;
        org.springframework.http.converter.FormHttpMessageConverter r5;
        java.lang.String r13, $r14, $r18, $r21;
        boolean $z0, $z1, $z2;
        java.io.OutputStream r11;
        java.util.Iterator $r7;
        org.springframework.http.HttpHeaders $r3, $r12, $r15;
        org.springframework.http.MediaType $r4;
        org.springframework.http.HttpEntity r0;
        java.util.List $r6;
        org.springframework.http.converter.HttpMessageConverter r9;
        java.lang.Object $r1, $r8;
        java.lang.Class $r2;
        java.lang.StringBuilder $r17, $r19, $r20;

        r5 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r13 := @parameter0: java.lang.String;

        r0 := @parameter1: org.springframework.http.HttpEntity;

        r11 := @parameter2: java.io.OutputStream;

        $r1 = virtualinvoke r0.<org.springframework.http.HttpEntity: java.lang.Object getBody()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<org.springframework.http.HttpEntity: org.springframework.http.HttpHeaders getHeaders()>();

        $r4 = virtualinvoke $r3.<org.springframework.http.HttpHeaders: org.springframework.http.MediaType getContentType()>();

        $r6 = r5.<org.springframework.http.converter.FormHttpMessageConverter: java.util.List partConverters>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.springframework.http.converter.HttpMessageConverter) $r8;

        $z1 = interfaceinvoke r9.<org.springframework.http.converter.HttpMessageConverter: boolean canWrite(java.lang.Class,org.springframework.http.MediaType)>($r2, $r4);

        if $z1 == 0 goto label3;

        $r10 = new org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage;

        specialinvoke $r10.<org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage: void <init>(org.springframework.http.converter.FormHttpMessageConverter,java.io.OutputStream)>(r5, r11);

        $r12 = interfaceinvoke $r10.<org.springframework.http.HttpOutputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        $r14 = virtualinvoke r5.<org.springframework.http.converter.FormHttpMessageConverter: java.lang.String getFilename(java.lang.Object)>($r1);

        virtualinvoke $r12.<org.springframework.http.HttpHeaders: void setContentDispositionFormData(java.lang.String,java.lang.String)>(r13, $r14);

        $z2 = virtualinvoke $r3.<org.springframework.http.HttpHeaders: boolean isEmpty()>();

        if $z2 != 0 goto label2;

        $r15 = interfaceinvoke $r10.<org.springframework.http.HttpOutputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        virtualinvoke $r15.<org.springframework.http.HttpHeaders: void putAll(java.util.Map)>($r3);

     label2:
        interfaceinvoke r9.<org.springframework.http.converter.HttpMessageConverter: void write(java.lang.Object,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>($r1, $r4, $r10);

        return;

     label3:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r16 = new org.springframework.http.converter.HttpMessageNotWritableException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not write request: no suitable HttpMessageConverter found for request type [");

        $r18 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.springframework.http.converter.HttpMessageNotWritableException: void <init>(java.lang.String)>($r21);

        throw $r16;
    }

    private void writeEnd(byte[], java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        org.springframework.http.converter.FormHttpMessageConverter r2;
        byte[] r1;

        r2 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r1 := @parameter0: byte[];

        r0 := @parameter1: java.io.OutputStream;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(45);

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(45);

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>(r1);

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(45);

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(45);

        specialinvoke r2.<org.springframework.http.converter.FormHttpMessageConverter: void writeNewLine(java.io.OutputStream)>(r0);

        return;
    }

    private void writeNewLine(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        org.springframework.http.converter.FormHttpMessageConverter r1;

        r1 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r0 := @parameter0: java.io.OutputStream;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(13);

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(10);

        return;
    }

    protected byte[] generateMultipartBoundary()
    {
        byte[] r2, $r3, $r5;
        java.util.Random $r1, $r4;
        org.springframework.http.converter.FormHttpMessageConverter r0;
        byte $b5;
        int $i0, $i1, $i2, $i3, $i4, i6;

        r0 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        $r1 = r0.<org.springframework.http.converter.FormHttpMessageConverter: java.util.Random rnd>;

        $i0 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>(11);

        $i1 = $i0 + 30;

        r2 = newarray (byte)[$i1];

        i6 = 0;

        goto label2;

     label1:
        $r5 = <org.springframework.http.converter.FormHttpMessageConverter: byte[] BOUNDARY_CHARS>;

        $r4 = r0.<org.springframework.http.converter.FormHttpMessageConverter: java.util.Random rnd>;

        $r3 = <org.springframework.http.converter.FormHttpMessageConverter: byte[] BOUNDARY_CHARS>;

        $i3 = lengthof $r3;

        $i4 = virtualinvoke $r4.<java.util.Random: int nextInt(int)>($i3);

        $b5 = $r5[$i4];

        r2[i6] = $b5;

        i6 = i6 + 1;

     label2:
        $i2 = lengthof r2;

        if i6 < $i2 goto label1;

        return r2;
    }

    protected java.lang.String getFilename(java.lang.Object)
    {
        org.springframework.http.converter.FormHttpMessageConverter r3;
        java.lang.Object r0;
        java.lang.String $r2;
        boolean $z0;
        org.springframework.core.io.Resource r1;

        r3 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.springframework.core.io.Resource;

        if $z0 == 0 goto label1;

        r1 = (org.springframework.core.io.Resource) r0;

        $r2 = interfaceinvoke r1.<org.springframework.core.io.Resource: java.lang.String getFilename()>();

        return $r2;

     label1:
        return null;
    }

    public volatile java.lang.Object read(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException
    {
        org.springframework.http.converter.FormHttpMessageConverter r0;
        org.springframework.http.HttpInputMessage r2;
        org.springframework.util.MultiValueMap $r4;
        java.lang.Class r1, $r3;

        r0 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.http.HttpInputMessage;

        $r3 = (java.lang.Class) r1;

        $r4 = virtualinvoke r0.<org.springframework.http.converter.FormHttpMessageConverter: org.springframework.util.MultiValueMap read(java.lang.Class,org.springframework.http.HttpInputMessage)>($r3, r2);

        return $r4;
    }

    public volatile void write(java.lang.Object, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException
    {
        org.springframework.http.converter.FormHttpMessageConverter r0;
        org.springframework.http.MediaType r2;
        org.springframework.util.MultiValueMap $r4;
        java.lang.Object r1;
        org.springframework.http.HttpOutputMessage r3;

        r0 := @this: org.springframework.http.converter.FormHttpMessageConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.springframework.http.MediaType;

        r3 := @parameter2: org.springframework.http.HttpOutputMessage;

        $r4 = (org.springframework.util.MultiValueMap) r1;

        virtualinvoke r0.<org.springframework.http.converter.FormHttpMessageConverter: void write(org.springframework.util.MultiValueMap,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>($r4, r2, r3);

        return;
    }

    static void access$2(org.springframework.http.converter.FormHttpMessageConverter, java.io.OutputStream) throws java.io.IOException
    {
        org.springframework.http.converter.FormHttpMessageConverter r0;
        java.io.OutputStream r1;

        r0 := @parameter0: org.springframework.http.converter.FormHttpMessageConverter;

        r1 := @parameter1: java.io.OutputStream;

        specialinvoke r0.<org.springframework.http.converter.FormHttpMessageConverter: void writeNewLine(java.io.OutputStream)>(r1);

        return;
    }
}
