public final enum class org.xmpp.packet.PacketError$Condition extends java.lang.Enum
{
    public static final enum org.xmpp.packet.PacketError$Condition bad_request;
    public static final enum org.xmpp.packet.PacketError$Condition conflict;
    public static final enum org.xmpp.packet.PacketError$Condition feature_not_implemented;
    public static final enum org.xmpp.packet.PacketError$Condition forbidden;
    public static final enum org.xmpp.packet.PacketError$Condition gone;
    public static final enum org.xmpp.packet.PacketError$Condition internal_server_error;
    public static final enum org.xmpp.packet.PacketError$Condition item_not_found;
    public static final enum org.xmpp.packet.PacketError$Condition jid_malformed;
    public static final enum org.xmpp.packet.PacketError$Condition not_acceptable;
    public static final enum org.xmpp.packet.PacketError$Condition not_allowed;
    public static final enum org.xmpp.packet.PacketError$Condition not_authorized;
    public static final enum org.xmpp.packet.PacketError$Condition payment_required;
    public static final enum org.xmpp.packet.PacketError$Condition recipient_unavailable;
    public static final enum org.xmpp.packet.PacketError$Condition redirect;
    public static final enum org.xmpp.packet.PacketError$Condition registration_required;
    public static final enum org.xmpp.packet.PacketError$Condition remote_server_not_found;
    public static final enum org.xmpp.packet.PacketError$Condition remote_server_timeout;
    public static final enum org.xmpp.packet.PacketError$Condition resource_constraint;
    public static final enum org.xmpp.packet.PacketError$Condition service_unavailable;
    public static final enum org.xmpp.packet.PacketError$Condition subscription_required;
    public static final enum org.xmpp.packet.PacketError$Condition undefined_condition;
    public static final enum org.xmpp.packet.PacketError$Condition unexpected_request;
    private java.lang.String value;
    private int code;
    private org.xmpp.packet.PacketError$Type defaultType;
    private static final org.xmpp.packet.PacketError$Condition[] $VALUES;

    public static org.xmpp.packet.PacketError$Condition[] values()
    {
        org.xmpp.packet.PacketError$Condition[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.xmpp.packet.PacketError$Condition[]) $r1;

        return $r2;
    }

    public static org.xmpp.packet.PacketError$Condition valueOf(java.lang.String)
    {
        org.xmpp.packet.PacketError$Condition $r2;
        java.lang.String r0;
        java.lang.Enum $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/xmpp/packet/PacketError$Condition;", r0);

        $r2 = (org.xmpp.packet.PacketError$Condition) $r1;

        return $r2;
    }

    public static org.xmpp.packet.PacketError$Condition fromXMPP(java.lang.String)
    {
        java.lang.StringBuilder $r46, $r47, $r48;
        java.lang.String $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r49, r73;
        java.lang.NullPointerException $r72;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21;
        org.xmpp.packet.PacketError$Condition $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71;
        java.lang.IllegalArgumentException $r45;

        r73 := @parameter0: java.lang.String;

        if r73 != null goto label01;

        $r72 = new java.lang.NullPointerException;

        specialinvoke $r72.<java.lang.NullPointerException: void <init>()>();

        throw $r72;

     label01:
        $r0 = virtualinvoke r73.<java.lang.String: java.lang.String toLowerCase()>();

        $r1 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition bad_request>;

        $r2 = virtualinvoke $r1.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label02;

        $r71 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition bad_request>;

        return $r71;

     label02:
        $r3 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition conflict>;

        $r4 = virtualinvoke $r3.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z1 == 0 goto label03;

        $r70 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition conflict>;

        return $r70;

     label03:
        $r5 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition feature_not_implemented>;

        $r6 = virtualinvoke $r5.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z2 == 0 goto label04;

        $r69 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition feature_not_implemented>;

        return $r69;

     label04:
        $r7 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition forbidden>;

        $r8 = virtualinvoke $r7.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z3 == 0 goto label05;

        $r68 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition forbidden>;

        return $r68;

     label05:
        $r9 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition gone>;

        $r10 = virtualinvoke $r9.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z4 == 0 goto label06;

        $r67 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition gone>;

        return $r67;

     label06:
        $r11 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition internal_server_error>;

        $r12 = virtualinvoke $r11.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z5 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z5 == 0 goto label07;

        $r66 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition internal_server_error>;

        return $r66;

     label07:
        $r13 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition item_not_found>;

        $r14 = virtualinvoke $r13.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z6 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z6 == 0 goto label08;

        $r65 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition item_not_found>;

        return $r65;

     label08:
        $r15 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition jid_malformed>;

        $r16 = virtualinvoke $r15.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z7 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z7 == 0 goto label09;

        $r64 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition jid_malformed>;

        return $r64;

     label09:
        $r17 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_acceptable>;

        $r18 = virtualinvoke $r17.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z8 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z8 == 0 goto label10;

        $r63 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_acceptable>;

        return $r63;

     label10:
        $r19 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_allowed>;

        $r20 = virtualinvoke $r19.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z9 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z9 == 0 goto label11;

        $r62 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_allowed>;

        return $r62;

     label11:
        $r21 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_authorized>;

        $r22 = virtualinvoke $r21.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z10 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z10 == 0 goto label12;

        $r61 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_authorized>;

        return $r61;

     label12:
        $r23 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition payment_required>;

        $r24 = virtualinvoke $r23.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z11 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z11 == 0 goto label13;

        $r60 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition payment_required>;

        return $r60;

     label13:
        $r25 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition recipient_unavailable>;

        $r26 = virtualinvoke $r25.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z12 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z12 == 0 goto label14;

        $r59 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition recipient_unavailable>;

        return $r59;

     label14:
        $r27 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition redirect>;

        $r28 = virtualinvoke $r27.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z13 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z13 == 0 goto label15;

        $r58 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition redirect>;

        return $r58;

     label15:
        $r29 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition registration_required>;

        $r30 = virtualinvoke $r29.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z14 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z14 == 0 goto label16;

        $r57 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition registration_required>;

        return $r57;

     label16:
        $r31 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition remote_server_not_found>;

        $r32 = virtualinvoke $r31.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z15 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z15 == 0 goto label17;

        $r56 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition remote_server_not_found>;

        return $r56;

     label17:
        $r33 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition remote_server_timeout>;

        $r34 = virtualinvoke $r33.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z16 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z16 == 0 goto label18;

        $r55 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition remote_server_timeout>;

        return $r55;

     label18:
        $r35 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition resource_constraint>;

        $r36 = virtualinvoke $r35.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z17 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z17 == 0 goto label19;

        $r54 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition resource_constraint>;

        return $r54;

     label19:
        $r37 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition service_unavailable>;

        $r38 = virtualinvoke $r37.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z18 = virtualinvoke $r38.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z18 == 0 goto label20;

        $r53 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition service_unavailable>;

        return $r53;

     label20:
        $r39 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition subscription_required>;

        $r40 = virtualinvoke $r39.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z19 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z19 == 0 goto label21;

        $r52 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition subscription_required>;

        return $r52;

     label21:
        $r41 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition undefined_condition>;

        $r42 = virtualinvoke $r41.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z20 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z20 == 0 goto label22;

        $r51 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition undefined_condition>;

        return $r51;

     label22:
        $r43 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition unexpected_request>;

        $r44 = virtualinvoke $r43.<org.xmpp.packet.PacketError$Condition: java.lang.String toXMPP()>();

        $z21 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z21 == 0 goto label23;

        $r50 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition unexpected_request>;

        return $r50;

     label23:
        $r45 = new java.lang.IllegalArgumentException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Condition invalid:");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r49);

        throw $r45;
    }

    public static org.xmpp.packet.PacketError$Condition fromLegacyCode(int)
    {
        java.lang.StringBuilder $r23, $r24, $r25;
        java.lang.String $r26;
        org.xmpp.packet.PacketError$Condition $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        java.lang.IllegalArgumentException $r22;

        i1 := @parameter0: int;

        $r0 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition bad_request>;

        $i0 = virtualinvoke $r0.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i0 != i1 goto label01;

        $r48 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition bad_request>;

        return $r48;

     label01:
        $r1 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition conflict>;

        $i2 = virtualinvoke $r1.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i2 != i1 goto label02;

        $r47 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition conflict>;

        return $r47;

     label02:
        $r2 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition feature_not_implemented>;

        $i3 = virtualinvoke $r2.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i3 != i1 goto label03;

        $r46 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition feature_not_implemented>;

        return $r46;

     label03:
        $r3 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition forbidden>;

        $i4 = virtualinvoke $r3.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i4 != i1 goto label04;

        $r45 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition forbidden>;

        return $r45;

     label04:
        $r4 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition gone>;

        $i5 = virtualinvoke $r4.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i5 != i1 goto label05;

        $r44 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition gone>;

        return $r44;

     label05:
        $r5 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition internal_server_error>;

        $i6 = virtualinvoke $r5.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i6 != i1 goto label06;

        $r43 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition internal_server_error>;

        return $r43;

     label06:
        $r6 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition item_not_found>;

        $i7 = virtualinvoke $r6.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i7 != i1 goto label07;

        $r42 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition item_not_found>;

        return $r42;

     label07:
        $r7 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition jid_malformed>;

        $i8 = virtualinvoke $r7.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i8 != i1 goto label08;

        $r41 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition jid_malformed>;

        return $r41;

     label08:
        $r8 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_acceptable>;

        $i9 = virtualinvoke $r8.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i9 != i1 goto label09;

        $r40 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_acceptable>;

        return $r40;

     label09:
        $r9 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_allowed>;

        $i10 = virtualinvoke $r9.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i10 != i1 goto label10;

        $r39 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_allowed>;

        return $r39;

     label10:
        $r10 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_authorized>;

        $i11 = virtualinvoke $r10.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i11 != i1 goto label11;

        $r38 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_authorized>;

        return $r38;

     label11:
        $r11 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition payment_required>;

        $i12 = virtualinvoke $r11.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i12 != i1 goto label12;

        $r37 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition payment_required>;

        return $r37;

     label12:
        $r12 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition recipient_unavailable>;

        $i13 = virtualinvoke $r12.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i13 != i1 goto label13;

        $r36 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition recipient_unavailable>;

        return $r36;

     label13:
        $r13 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition redirect>;

        $i14 = virtualinvoke $r13.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i14 != i1 goto label14;

        $r35 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition redirect>;

        return $r35;

     label14:
        $r14 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition registration_required>;

        $i15 = virtualinvoke $r14.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i15 != i1 goto label15;

        $r34 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition registration_required>;

        return $r34;

     label15:
        $r15 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition remote_server_not_found>;

        $i16 = virtualinvoke $r15.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i16 != i1 goto label16;

        $r33 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition remote_server_not_found>;

        return $r33;

     label16:
        $r16 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition remote_server_timeout>;

        $i17 = virtualinvoke $r16.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i17 != i1 goto label17;

        $r32 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition remote_server_timeout>;

        return $r32;

     label17:
        $r17 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition resource_constraint>;

        $i18 = virtualinvoke $r17.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i18 != i1 goto label18;

        $r31 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition resource_constraint>;

        return $r31;

     label18:
        $r18 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition service_unavailable>;

        $i19 = virtualinvoke $r18.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i19 != i1 goto label19;

        $r30 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition service_unavailable>;

        return $r30;

     label19:
        $r19 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition subscription_required>;

        $i20 = virtualinvoke $r19.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i20 != i1 goto label20;

        $r29 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition subscription_required>;

        return $r29;

     label20:
        $r20 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition undefined_condition>;

        $i21 = virtualinvoke $r20.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i21 != i1 goto label21;

        $r28 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition undefined_condition>;

        return $r28;

     label21:
        $r21 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition unexpected_request>;

        $i22 = virtualinvoke $r21.<org.xmpp.packet.PacketError$Condition: int getLegacyCode()>();

        if $i22 != i1 goto label22;

        $r27 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition unexpected_request>;

        return $r27;

     label22:
        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Code invalid:");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r22;
    }

    private void <init>(java.lang.String, int, java.lang.String, org.xmpp.packet.PacketError$Type, int)
    {
        int i0, i1;
        org.xmpp.packet.PacketError$Type r3;
        org.xmpp.packet.PacketError$Condition r0;
        java.lang.String r1, r2;

        r0 := @this: org.xmpp.packet.PacketError$Condition;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: org.xmpp.packet.PacketError$Type;

        i1 := @parameter4: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.xmpp.packet.PacketError$Condition: java.lang.String value> = r2;

        r0.<org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Type defaultType> = r3;

        r0.<org.xmpp.packet.PacketError$Condition: int code> = i1;

        return;
    }

    public org.xmpp.packet.PacketError$Type getDefaultType()
    {
        org.xmpp.packet.PacketError$Type $r1;
        org.xmpp.packet.PacketError$Condition r0;

        r0 := @this: org.xmpp.packet.PacketError$Condition;

        $r1 = r0.<org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Type defaultType>;

        return $r1;
    }

    public int getLegacyCode()
    {
        int $i0;
        org.xmpp.packet.PacketError$Condition r0;

        r0 := @this: org.xmpp.packet.PacketError$Condition;

        $i0 = r0.<org.xmpp.packet.PacketError$Condition: int code>;

        return $i0;
    }

    public java.lang.String toXMPP()
    {
        org.xmpp.packet.PacketError$Condition r0;
        java.lang.String $r1;

        r0 := @this: org.xmpp.packet.PacketError$Condition;

        $r1 = r0.<org.xmpp.packet.PacketError$Condition: java.lang.String value>;

        return $r1;
    }

    static void <clinit>()
    {
        org.xmpp.packet.PacketError$Type $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43;
        org.xmpp.packet.PacketError$Condition[] $r44;
        org.xmpp.packet.PacketError$Condition $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66;

        $r0 = new org.xmpp.packet.PacketError$Condition;

        $r1 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type modify>;

        specialinvoke $r0.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("bad_request", 0, "bad-request", $r1, 400);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition bad_request> = $r0;

        $r2 = new org.xmpp.packet.PacketError$Condition;

        $r3 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type cancel>;

        specialinvoke $r2.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("conflict", 1, "conflict", $r3, 409);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition conflict> = $r2;

        $r4 = new org.xmpp.packet.PacketError$Condition;

        $r5 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type cancel>;

        specialinvoke $r4.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("feature_not_implemented", 2, "feature-not-implemented", $r5, 501);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition feature_not_implemented> = $r4;

        $r6 = new org.xmpp.packet.PacketError$Condition;

        $r7 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type auth>;

        specialinvoke $r6.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("forbidden", 3, "forbidden", $r7, 403);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition forbidden> = $r6;

        $r8 = new org.xmpp.packet.PacketError$Condition;

        $r9 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type modify>;

        specialinvoke $r8.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("gone", 4, "gone", $r9, 302);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition gone> = $r8;

        $r10 = new org.xmpp.packet.PacketError$Condition;

        $r11 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type wait>;

        specialinvoke $r10.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("internal_server_error", 5, "internal-server-error", $r11, 500);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition internal_server_error> = $r10;

        $r12 = new org.xmpp.packet.PacketError$Condition;

        $r13 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type cancel>;

        specialinvoke $r12.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("item_not_found", 6, "item-not-found", $r13, 404);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition item_not_found> = $r12;

        $r14 = new org.xmpp.packet.PacketError$Condition;

        $r15 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type modify>;

        specialinvoke $r14.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("jid_malformed", 7, "jid-malformed", $r15, 400);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition jid_malformed> = $r14;

        $r16 = new org.xmpp.packet.PacketError$Condition;

        $r17 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type modify>;

        specialinvoke $r16.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("not_acceptable", 8, "not-acceptable", $r17, 406);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_acceptable> = $r16;

        $r18 = new org.xmpp.packet.PacketError$Condition;

        $r19 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type cancel>;

        specialinvoke $r18.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("not_allowed", 9, "not-allowed", $r19, 405);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_allowed> = $r18;

        $r20 = new org.xmpp.packet.PacketError$Condition;

        $r21 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type auth>;

        specialinvoke $r20.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("not_authorized", 10, "not-authorized", $r21, 401);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_authorized> = $r20;

        $r22 = new org.xmpp.packet.PacketError$Condition;

        $r23 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type auth>;

        specialinvoke $r22.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("payment_required", 11, "payment-required", $r23, 402);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition payment_required> = $r22;

        $r24 = new org.xmpp.packet.PacketError$Condition;

        $r25 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type wait>;

        specialinvoke $r24.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("recipient_unavailable", 12, "recipient-unavailable", $r25, 404);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition recipient_unavailable> = $r24;

        $r26 = new org.xmpp.packet.PacketError$Condition;

        $r27 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type modify>;

        specialinvoke $r26.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("redirect", 13, "redirect", $r27, 302);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition redirect> = $r26;

        $r28 = new org.xmpp.packet.PacketError$Condition;

        $r29 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type auth>;

        specialinvoke $r28.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("registration_required", 14, "registration-required", $r29, 407);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition registration_required> = $r28;

        $r30 = new org.xmpp.packet.PacketError$Condition;

        $r31 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type cancel>;

        specialinvoke $r30.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("remote_server_not_found", 15, "remote-server-not-found", $r31, 404);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition remote_server_not_found> = $r30;

        $r32 = new org.xmpp.packet.PacketError$Condition;

        $r33 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type wait>;

        specialinvoke $r32.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("remote_server_timeout", 16, "remote-server-timeout", $r33, 504);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition remote_server_timeout> = $r32;

        $r34 = new org.xmpp.packet.PacketError$Condition;

        $r35 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type wait>;

        specialinvoke $r34.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("resource_constraint", 17, "resource-constraint", $r35, 500);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition resource_constraint> = $r34;

        $r36 = new org.xmpp.packet.PacketError$Condition;

        $r37 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type cancel>;

        specialinvoke $r36.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("service_unavailable", 18, "service-unavailable", $r37, 503);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition service_unavailable> = $r36;

        $r38 = new org.xmpp.packet.PacketError$Condition;

        $r39 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type auth>;

        specialinvoke $r38.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("subscription_required", 19, "subscription-required", $r39, 407);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition subscription_required> = $r38;

        $r40 = new org.xmpp.packet.PacketError$Condition;

        $r41 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type wait>;

        specialinvoke $r40.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("undefined_condition", 20, "undefined-condition", $r41, 500);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition undefined_condition> = $r40;

        $r42 = new org.xmpp.packet.PacketError$Condition;

        $r43 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type wait>;

        specialinvoke $r42.<org.xmpp.packet.PacketError$Condition: void <init>(java.lang.String,int,java.lang.String,org.xmpp.packet.PacketError$Type,int)>("unexpected_request", 21, "unexpected-request", $r43, 400);

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition unexpected_request> = $r42;

        $r44 = newarray (org.xmpp.packet.PacketError$Condition)[22];

        $r45 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition bad_request>;

        $r44[0] = $r45;

        $r46 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition conflict>;

        $r44[1] = $r46;

        $r47 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition feature_not_implemented>;

        $r44[2] = $r47;

        $r48 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition forbidden>;

        $r44[3] = $r48;

        $r49 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition gone>;

        $r44[4] = $r49;

        $r50 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition internal_server_error>;

        $r44[5] = $r50;

        $r51 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition item_not_found>;

        $r44[6] = $r51;

        $r52 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition jid_malformed>;

        $r44[7] = $r52;

        $r53 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_acceptable>;

        $r44[8] = $r53;

        $r54 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_allowed>;

        $r44[9] = $r54;

        $r55 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition not_authorized>;

        $r44[10] = $r55;

        $r56 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition payment_required>;

        $r44[11] = $r56;

        $r57 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition recipient_unavailable>;

        $r44[12] = $r57;

        $r58 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition redirect>;

        $r44[13] = $r58;

        $r59 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition registration_required>;

        $r44[14] = $r59;

        $r60 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition remote_server_not_found>;

        $r44[15] = $r60;

        $r61 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition remote_server_timeout>;

        $r44[16] = $r61;

        $r62 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition resource_constraint>;

        $r44[17] = $r62;

        $r63 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition service_unavailable>;

        $r44[18] = $r63;

        $r64 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition subscription_required>;

        $r44[19] = $r64;

        $r65 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition undefined_condition>;

        $r44[20] = $r65;

        $r66 = <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition unexpected_request>;

        $r44[21] = $r66;

        <org.xmpp.packet.PacketError$Condition: org.xmpp.packet.PacketError$Condition[] $VALUES> = $r44;

        return;
    }
}
