class org.apache.batik.ext.awt.image.rendered.IndexImage$Cube extends java.lang.Object
{
    static final byte[] RGB_BLACK;
    int[] min;
    int[] max;
    boolean done;
    final org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[][] colors;
    int count;
    static final int RED;
    static final int GRN;
    static final int BLU;

    void <init>(org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[][], int)
    {
        org.apache.batik.ext.awt.image.rendered.IndexImage$Cube r0;
        org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[][] r3;
        int[] $r1, $r2;
        int i0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.IndexImage$Cube;

        r3 := @parameter0: org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[][];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[3];

        $r1[0] = 0;

        $r1[1] = 0;

        $r1[2] = 0;

        r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min> = $r1;

        $r2 = newarray (int)[3];

        $r2[0] = 255;

        $r2[1] = 255;

        $r2[2] = 255;

        r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max> = $r2;

        r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: boolean done> = 0;

        r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count> = 0;

        r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[][] colors> = r3;

        r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count> = i0;

        return;
    }

    public boolean isDone()
    {
        org.apache.batik.ext.awt.image.rendered.IndexImage$Cube r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.IndexImage$Cube;

        $z0 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: boolean done>;

        return $z0;
    }

    private boolean contains(int[])
    {
        org.apache.batik.ext.awt.image.rendered.IndexImage$Cube r1;
        int[] r0, $r2, $r3, $r4, $r5, $r6, $r7;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;

        r1 := @this: org.apache.batik.ext.awt.image.rendered.IndexImage$Cube;

        r0 := @parameter0: int[];

        i0 = r0[0];

        i1 = r0[1];

        i2 = r0[2];

        $r2 = r1.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $i3 = $r2[0];

        if $i3 > i0 goto label1;

        $r3 = r1.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $i4 = $r3[0];

        if i0 > $i4 goto label1;

        $r4 = r1.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $i5 = $r4[1];

        if $i5 > i1 goto label1;

        $r5 = r1.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $i6 = $r5[1];

        if i1 > $i6 goto label1;

        $r6 = r1.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $i7 = $r6[2];

        if $i7 > i2 goto label1;

        $r7 = r1.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $i8 = $r7[2];

        if i2 > $i8 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    org.apache.batik.ext.awt.image.rendered.IndexImage$Cube split()
    {
        org.apache.batik.ext.awt.image.rendered.IndexImage$Cube r0, $r7, $r8, $r9;
        byte b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22;
        int[] $r1, $r2, $r3, $r4, $r5, $r6;
        boolean z0;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, i11;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.IndexImage$Cube;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $i1 = $r1[0];

        $r2 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $i0 = $r2[0];

        $i2 = $i1 - $i0;

        i3 = $i2 + 1;

        $r3 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $i5 = $r3[1];

        $r4 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $i4 = $r4[1];

        $i6 = $i5 - $i4;

        i7 = $i6 + 1;

        $r5 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $i9 = $r5[2];

        $r6 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $i8 = $r6[2];

        $i10 = $i9 - $i8;

        i11 = $i10 + 1;

        if i3 < i7 goto label2;

        if i3 < i11 goto label1;

        b12 = 0;

        b22 = 0;

        b21 = 0;

        b20 = 0;

        z0 = 1;

        b16 = 1;

        b15 = 1;

        b14 = 1;

        b13 = 2;

        b19 = 2;

        b18 = 2;

        b17 = 2;

        goto label4;

     label1:
        b12 = 2;

        b22 = 2;

        b21 = 2;

        b20 = 2;

        z0 = 0;

        b16 = 0;

        b15 = 0;

        b14 = 0;

        b13 = 1;

        b19 = 1;

        b18 = 1;

        b17 = 1;

        goto label4;

     label2:
        if i7 < i11 goto label3;

        b12 = 1;

        b22 = 1;

        b21 = 1;

        b20 = 1;

        z0 = 0;

        b16 = 0;

        b15 = 0;

        b14 = 0;

        b13 = 2;

        b19 = 2;

        b18 = 2;

        b17 = 2;

        goto label4;

     label3:
        b12 = 2;

        b22 = 2;

        b21 = 2;

        b20 = 2;

        z0 = 1;

        b16 = 1;

        b15 = 1;

        b14 = 1;

        b13 = 0;

        b19 = 0;

        b18 = 0;

        b17 = 0;

     label4:
        $r9 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: org.apache.batik.ext.awt.image.rendered.IndexImage$Cube splitChannel(int,int,int)>(b22, b16, b19);

        if $r9 == null goto label5;

        return $r9;

     label5:
        $r7 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: org.apache.batik.ext.awt.image.rendered.IndexImage$Cube splitChannel(int,int,int)>(b14, b21, b17);

        if $r7 == null goto label6;

        return $r7;

     label6:
        $r8 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: org.apache.batik.ext.awt.image.rendered.IndexImage$Cube splitChannel(int,int,int)>(b18, b20, b15);

        if $r8 == null goto label7;

        return $r8;

     label7:
        r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: boolean done> = 1;

        return null;
    }

    private void normalize(int, int[])
    {
        org.apache.batik.ext.awt.image.rendered.IndexImage$Cube r0;
        int[] $r1, $r2, r3, $r4, $r5;
        int $i0, i1, i2, i3, $i4, $i5, i6, i7, i8, i9, $i11, $i13, $i15, $i17, $i19;
        boolean z0, z1, $z2, $z3;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.IndexImage$Cube;

        i1 := @parameter0: int;

        r3 := @parameter1: int[];

        $i0 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count>;

        if $i0 != 0 goto label01;

        return;

     label01:
        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        i2 = $r1[i1];

        $r2 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        i3 = $r2[i1];

        $i11 = (int) -1;

        i6 = $i11;

        $i13 = (int) -1;

        i7 = $i13;

        i8 = i2;

        goto label05;

     label02:
        $i4 = r3[i8];

        if $i4 != 0 goto label03;

        goto label04;

     label03:
        i6 = i8;

        goto label06;

     label04:
        i8 = i8 + 1;

     label05:
        if i8 <= i3 goto label02;

     label06:
        i9 = i3;

        goto label10;

     label07:
        $i5 = r3[i9];

        if $i5 != 0 goto label08;

        goto label09;

     label08:
        i7 = i9;

        goto label11;

     label09:
        $i15 = (int) -1;

        i9 = i9 + $i15;

     label10:
        if i9 >= i2 goto label07;

     label11:
        $i17 = (int) -1;

        if i6 == $i17 goto label12;

        if i2 == i6 goto label12;

        $z2 = 1;

        goto label13;

     label12:
        $z2 = 0;

     label13:
        z0 = $z2;

        $i19 = (int) -1;

        if i7 == $i19 goto label14;

        if i3 == i7 goto label14;

        $z3 = 1;

        goto label15;

     label14:
        $z3 = 0;

     label15:
        z1 = $z3;

        if z0 == 0 goto label16;

        $r5 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $r5[i1] = i6;

     label16:
        if z1 == 0 goto label17;

        $r4 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $r4[i1] = i7;

     label17:
        return;
    }

    org.apache.batik.ext.awt.image.rendered.IndexImage$Cube splitChannel(int, int, int)
    {
        org.apache.batik.ext.awt.image.rendered.IndexImage$Cube r0, $r26;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25;
        org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[][] $r13;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20, i21, i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i32, $i34;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.IndexImage$Cube;

        i0 := @parameter0: int;

        i6 := @parameter1: int;

        i7 := @parameter2: int;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $i2 = $r1[i0];

        $r2 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $i1 = $r2[i0];

        if $i2 != $i1 goto label01;

        return null;

     label01:
        $i3 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count>;

        if $i3 != 0 goto label02;

        return null;

     label02:
        $i4 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count>;

        i5 = $i4 / 2;

        $r3 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] computeCounts(int,int,int)>(i0, i6, i7);

        i17 = 0;

        $i32 = (int) -1;

        i18 = $i32;

        $r4 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        i19 = $r4[i0];

        $r5 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        i20 = $r5[i0];

        $r6 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        i21 = $r6[i0];

        goto label12;

     label03:
        i22 = $r3[i21];

        if i22 != 0 goto label04;

        if i17 != 0 goto label11;

        $r9 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $i15 = $r9[i0];

        if i21 >= $i15 goto label11;

        $r10 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $i16 = i21 + 1;

        $r10[i0] = $i16;

        goto label11;

     label04:
        $i8 = i17 + i22;

        if $i8 >= i5 goto label05;

        i18 = i21;

        i17 = i17 + i22;

        goto label11;

     label05:
        $i11 = i5 - i17;

        $i9 = i17 + i22;

        $i10 = $i9 - i5;

        if $i11 > $i10 goto label08;

        $i34 = (int) -1;

        if i18 != $i34 goto label07;

        $i14 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count>;

        if i22 != $i14 goto label06;

        $r8 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $r8[i0] = i21;

        return null;

     label06:
        i19 = i21;

        i20 = i21 + 1;

        i17 = i17 + i22;

        goto label13;

     label07:
        i19 = i18;

        i20 = i21;

        goto label13;

     label08:
        $r7 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $i12 = $r7[i0];

        if i21 != $i12 goto label10;

        $i13 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count>;

        if i22 != $i13 goto label09;

        return null;

     label09:
        i19 = i18;

        i20 = i21;

        goto label13;

     label10:
        i17 = i17 + i22;

        i19 = i21;

        i20 = i21 + 1;

        goto label13;

     label11:
        i21 = i21 + 1;

     label12:
        $r11 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $i23 = $r11[i0];

        if i21 <= $i23 goto label03;

     label13:
        $r26 = new org.apache.batik.ext.awt.image.rendered.IndexImage$Cube;

        $r13 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[][] colors>;

        specialinvoke $r26.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: void <init>(org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[][],int)>($r13, i17);

        $i24 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count>;

        $i25 = $i24 - i17;

        r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count> = $i25;

        $r14 = $r26.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $r15 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $i26 = $r15[i0];

        $r14[i0] = $i26;

        $r16 = $r26.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $r16[i0] = i19;

        $r17 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $r17[i0] = i20;

        $r18 = $r26.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $r19 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $i27 = $r19[i6];

        $r18[i6] = $i27;

        $r20 = $r26.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $r21 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $i28 = $r21[i6];

        $r20[i6] = $i28;

        $r22 = $r26.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $r23 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $i29 = $r23[i7];

        $r22[i7] = $i29;

        $r24 = $r26.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $r25 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $i30 = $r25[i7];

        $r24[i7] = $i30;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: void normalize(int,int[])>(i0, $r3);

        specialinvoke $r26.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: void normalize(int,int[])>(i0, $r3);

        return $r26;
    }

    private int[] computeCounts(int, int, int)
    {
        org.apache.batik.ext.awt.image.rendered.IndexImage$Cube r0;
        org.apache.batik.ext.awt.image.rendered.IndexImage$Counter r13;
        int[] r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r14, r15;
        org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[] r12;
        boolean $z0;
        org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[][] $r11;
        int i0, $i1, i2, i3, $i4, i5, i6, $i7, i8, i9, i10, i11, i12, i13, i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, $i23, $i24, i25, $i26, $i27, i28, $i29, $i30, $i31, $i32, $i33, i34, i35, i36, i37, $i38;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.IndexImage$Cube;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        i6 := @parameter2: int;

        $i1 = 2 - i0;

        i2 = $i1 * 4;

        $i4 = 2 - i3;

        i5 = $i4 * 4;

        $i7 = 2 - i6;

        i8 = $i7 * 4;

        r1 = newarray (int)[256];

        $r2 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        i9 = $r2[0];

        $r3 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        i10 = $r3[1];

        $r4 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        i11 = $r4[2];

        $r5 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        i12 = $r5[0];

        $r6 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        i13 = $r6[1];

        $r7 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        i14 = $r7[2];

        $r8 = newarray (int)[3];

        $i15 = i9 >> 4;

        $r8[0] = $i15;

        $i16 = i10 >> 4;

        $r8[1] = $i16;

        $i17 = i11 >> 4;

        $r8[2] = $i17;

        $r9 = newarray (int)[3];

        $i18 = i12 >> 4;

        $r9[0] = $i18;

        $i19 = i13 >> 4;

        $r9[1] = $i19;

        $i20 = i14 >> 4;

        $r9[2] = $i20;

        $r10 = newarray (int)[3];

        $r10[0] = 0;

        $r10[1] = 0;

        $r10[2] = 0;

        r15 = $r10;

        i34 = $r8[i0];

        goto label9;

     label1:
        i22 = i34 << i2;

        i35 = $r8[i3];

        goto label8;

     label2:
        $i24 = i35 << i5;

        i25 = i22 | $i24;

        i36 = $r8[i6];

        goto label7;

     label3:
        $i27 = i36 << i8;

        i28 = i25 | $i27;

        $r11 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[][] colors>;

        r12 = $r11[i28];

        i37 = 0;

        goto label6;

     label4:
        r13 = r12[i37];

        $r14 = virtualinvoke r13.<org.apache.batik.ext.awt.image.rendered.IndexImage$Counter: int[] getRgb(int[])>(r15);

        r15 = $r14;

        $z0 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: boolean contains(int[])>($r14);

        if $z0 == 0 goto label5;

        $i29 = $r14[i0];

        $i31 = r1[$i29];

        $i30 = r13.<org.apache.batik.ext.awt.image.rendered.IndexImage$Counter: int count>;

        $i32 = $i31 + $i30;

        r1[$i29] = $i32;

        $i33 = r13.<org.apache.batik.ext.awt.image.rendered.IndexImage$Counter: int count>;

     label5:
        i37 = i37 + 1;

     label6:
        $i38 = lengthof r12;

        if i37 < $i38 goto label4;

        i36 = i36 + 1;

     label7:
        $i26 = $r9[i6];

        if i36 <= $i26 goto label3;

        i35 = i35 + 1;

     label8:
        $i23 = $r9[i3];

        if i35 <= $i23 goto label2;

        i34 = i34 + 1;

     label9:
        $i21 = $r9[i0];

        if i34 <= $i21 goto label1;

        return r1;
    }

    public java.lang.String toString()
    {
        org.apache.batik.ext.awt.image.rendered.IndexImage$Cube r2;
        int[] $r3, $r6, $r9, $r12, $r15, $r18;
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r19, $r20, $r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r22;

        r2 := @this: org.apache.batik.ext.awt.image.rendered.IndexImage$Cube;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cube: [");

        $r3 = r2.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $i0 = $r3[0];

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $r6 = r2.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $i1 = $r6[0];

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] [");

        $r9 = r2.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $i2 = $r9[1];

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $r12 = r2.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $i3 = $r12[1];

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] [");

        $r15 = r2.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        $i4 = $r15[2];

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $r18 = r2.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        $i5 = $r18[2];

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] n:");

        $i6 = r2.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count>;

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r22;
    }

    public int averageColor()
    {
        org.apache.batik.ext.awt.image.rendered.IndexImage$Cube r0;
        byte[] $r1;
        short $s8, $s15;
        byte $b1, $b3, $b7;
        int $i0, $i2, $i4, $i5, $i6, $i9, $i10, $i11, $i12, $i14, $i16;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.IndexImage$Cube;

        $i0 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count>;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: byte[] averageColorRGB(byte[])>(null);

        $b1 = $r1[0];

        $i11 = (int) $b1;

        $i2 = $i11 << 16;

        $i6 = $i2 & 16711680;

        $b3 = $r1[1];

        $i12 = (int) $b3;

        $i4 = $i12 << 8;

        $i14 = (int) 65280;

        $i5 = $i4 & $i14;

        $i9 = $i6 | $i5;

        $b7 = $r1[2];

        $s15 = (short) $b7;

        $s8 = $s15 & 255;

        $i16 = (int) $s8;

        $i10 = $i9 | $i16;

        return $i10;
    }

    public byte[] averageColorRGB(byte[])
    {
        byte[] r13, $r14, $r16;
        byte $b25, $b27, $b29;
        org.apache.batik.ext.awt.image.rendered.IndexImage$Cube r0;
        org.apache.batik.ext.awt.image.rendered.IndexImage$Counter r11;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r12, r15;
        org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[] r10;
        boolean $z0;
        org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[][] $r9;
        float $f0, $f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12, f13, f14;
        int $i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, $i17, i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i28, i30, i31, i32, i33, i34, $i35;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.IndexImage$Cube;

        r13 := @parameter0: byte[];

        $i0 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count>;

        if $i0 != 0 goto label01;

        $r14 = <org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: byte[] RGB_BLACK>;

        return $r14;

     label01:
        f12 = 0.0F;

        f13 = 0.0F;

        f14 = 0.0F;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        i1 = $r1[0];

        $r2 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        i2 = $r2[1];

        $r3 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] min>;

        i3 = $r3[2];

        $r4 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        i4 = $r4[0];

        $r5 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        i5 = $r5[1];

        $r6 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int[] max>;

        i6 = $r6[2];

        $r7 = newarray (int)[3];

        $i7 = i1 >> 4;

        $r7[0] = $i7;

        $i8 = i2 >> 4;

        $r7[1] = $i8;

        $i9 = i3 >> 4;

        $r7[2] = $i9;

        $r8 = newarray (int)[3];

        $i10 = i4 >> 4;

        $r8[0] = $i10;

        $i11 = i5 >> 4;

        $r8[1] = $i11;

        $i12 = i6 >> 4;

        $r8[2] = $i12;

        r15 = newarray (int)[3];

        i30 = $r7[0];

        goto label10;

     label02:
        i31 = i30 << 8;

        i32 = $r7[1];

        goto label09;

     label03:
        $i15 = i32 << 4;

        i16 = i31 | $i15;

        i33 = $r7[2];

        goto label08;

     label04:
        i18 = i16 | i33;

        $r9 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: org.apache.batik.ext.awt.image.rendered.IndexImage$Counter[][] colors>;

        r10 = $r9[i18];

        i34 = 0;

        goto label07;

     label05:
        r11 = r10[i34];

        $r12 = virtualinvoke r11.<org.apache.batik.ext.awt.image.rendered.IndexImage$Counter: int[] getRgb(int[])>(r15);

        r15 = $r12;

        $z0 = specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: boolean contains(int[])>($r12);

        if $z0 == 0 goto label06;

        $i19 = r11.<org.apache.batik.ext.awt.image.rendered.IndexImage$Counter: int count>;

        $f1 = (float) $i19;

        $i20 = r0.<org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int count>;

        $f0 = (float) $i20;

        f2 = $f1 / $f0;

        $i21 = $r12[0];

        $f3 = (float) $i21;

        $f4 = $f3 * f2;

        f12 = f12 + $f4;

        $i22 = $r12[1];

        $f5 = (float) $i22;

        $f6 = $f5 * f2;

        f13 = f13 + $f6;

        $i23 = $r12[2];

        $f7 = (float) $i23;

        $f8 = $f7 * f2;

        f14 = f14 + $f8;

     label06:
        i34 = i34 + 1;

     label07:
        $i35 = lengthof r10;

        if i34 < $i35 goto label05;

        i33 = i33 + 1;

     label08:
        $i17 = $r8[2];

        if i33 <= $i17 goto label04;

        i32 = i32 + 1;

     label09:
        $i14 = $r8[1];

        if i32 <= $i14 goto label03;

        i30 = i30 + 1;

     label10:
        $i13 = $r8[0];

        if i30 <= $i13 goto label02;

        if r13 != null goto label11;

        $r16 = newarray (byte)[3];

        goto label12;

     label11:
        $r16 = r13;

     label12:
        $f9 = f12 + 0.5F;

        $i24 = (int) $f9;

        $b25 = (byte) $i24;

        $r16[0] = $b25;

        $f10 = f13 + 0.5F;

        $i26 = (int) $f10;

        $b27 = (byte) $i26;

        $r16[1] = $b27;

        $f11 = f14 + 0.5F;

        $i28 = (int) $f11;

        $b29 = (byte) $i28;

        $r16[2] = $b29;

        return $r16;
    }

    static void <clinit>()
    {
        byte[] $r0;

        <org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int BLU> = 2;

        <org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int GRN> = 1;

        <org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: int RED> = 0;

        $r0 = newarray (byte)[3];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        <org.apache.batik.ext.awt.image.rendered.IndexImage$Cube: byte[] RGB_BLACK> = $r0;

        return;
    }
}
