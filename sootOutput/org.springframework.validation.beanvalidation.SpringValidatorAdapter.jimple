public class org.springframework.validation.beanvalidation.SpringValidatorAdapter extends java.lang.Object implements org.springframework.validation.Validator, javax.validation.Validator
{
    private static final java.util.Set internalAnnotationAttributes;
    private javax.validation.Validator targetValidator;

    static void <clinit>()
    {
        java.util.HashSet $r0;
        java.util.Set $r1, $r2, $r3;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>(int)>(3);

        <org.springframework.validation.beanvalidation.SpringValidatorAdapter: java.util.Set internalAnnotationAttributes> = $r0;

        $r1 = <org.springframework.validation.beanvalidation.SpringValidatorAdapter: java.util.Set internalAnnotationAttributes>;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>("message");

        $r2 = <org.springframework.validation.beanvalidation.SpringValidatorAdapter: java.util.Set internalAnnotationAttributes>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("groups");

        $r3 = <org.springframework.validation.beanvalidation.SpringValidatorAdapter: java.util.Set internalAnnotationAttributes>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("payload");

        return;
    }

    public void <init>(javax.validation.Validator)
    {
        org.springframework.validation.beanvalidation.SpringValidatorAdapter r0;
        javax.validation.Validator r1;

        r0 := @this: org.springframework.validation.beanvalidation.SpringValidatorAdapter;

        r1 := @parameter0: javax.validation.Validator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Target Validator must not be null");

        r0.<org.springframework.validation.beanvalidation.SpringValidatorAdapter: javax.validation.Validator targetValidator> = r1;

        return;
    }

    void <init>()
    {
        org.springframework.validation.beanvalidation.SpringValidatorAdapter r0;

        r0 := @this: org.springframework.validation.beanvalidation.SpringValidatorAdapter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void setTargetValidator(javax.validation.Validator)
    {
        org.springframework.validation.beanvalidation.SpringValidatorAdapter r0;
        javax.validation.Validator r1;

        r0 := @this: org.springframework.validation.beanvalidation.SpringValidatorAdapter;

        r1 := @parameter0: javax.validation.Validator;

        r0.<org.springframework.validation.beanvalidation.SpringValidatorAdapter: javax.validation.Validator targetValidator> = r1;

        return;
    }

    public boolean supports(java.lang.Class)
    {
        org.springframework.validation.beanvalidation.SpringValidatorAdapter r0;
        java.lang.Class r1;

        r0 := @this: org.springframework.validation.beanvalidation.SpringValidatorAdapter;

        r1 := @parameter0: java.lang.Class;

        return 1;
    }

    public void validate(java.lang.Object, org.springframework.validation.Errors)
    {
        javax.validation.metadata.ConstraintDescriptor $r12, $r19;
        java.lang.IllegalStateException $r23;
        org.springframework.validation.Errors r10;
        java.lang.Object[] $r20;
        org.springframework.validation.beanvalidation.SpringValidatorAdapter r0;
        javax.validation.Path $r8;
        java.lang.String $r9, $r17, $r18, $r21, $r28;
        javax.validation.ConstraintViolation r7;
        boolean $z0, $z1;
        java.util.Iterator $r5;
        org.springframework.validation.FieldError $r11;
        java.lang.Class[] $r2;
        javax.validation.Validator $r3;
        java.util.Set $r4;
        java.lang.'annotation'.Annotation $r13, $r15;
        java.lang.Object r1, $r6, $r14;
        java.lang.Class $r16;
        java.lang.StringBuilder $r24, $r25, $r26, $r27;
        org.springframework.beans.NotReadablePropertyException $r22;

        r0 := @this: org.springframework.validation.beanvalidation.SpringValidatorAdapter;

        r1 := @parameter0: java.lang.Object;

        r10 := @parameter1: org.springframework.validation.Errors;

        $r3 = r0.<org.springframework.validation.beanvalidation.SpringValidatorAdapter: javax.validation.Validator targetValidator>;

        $r2 = newarray (java.lang.Class)[0];

        $r4 = interfaceinvoke $r3.<javax.validation.Validator: java.util.Set validate(java.lang.Object,java.lang.Class[])>(r1, $r2);

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label5;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.validation.ConstraintViolation) $r6;

        $r8 = interfaceinvoke r7.<javax.validation.ConstraintViolation: javax.validation.Path getPropertyPath()>();

        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        $r11 = interfaceinvoke r10.<org.springframework.validation.Errors: org.springframework.validation.FieldError getFieldError(java.lang.String)>($r9);

        if $r11 == null goto label2;

        $z0 = virtualinvoke $r11.<org.springframework.validation.FieldError: boolean isBindingFailure()>();

        if $z0 != 0 goto label5;

     label2:
        $r12 = interfaceinvoke r7.<javax.validation.ConstraintViolation: javax.validation.metadata.ConstraintDescriptor getConstraintDescriptor()>();

        $r13 = interfaceinvoke $r12.<javax.validation.metadata.ConstraintDescriptor: java.lang.'annotation'.Annotation getAnnotation()>();

        $r14 = (java.lang.Object) $r13;

        $r15 = (java.lang.'annotation'.Annotation) $r14;

        $r16 = interfaceinvoke $r15.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getSimpleName()>();

        $r18 = interfaceinvoke r10.<org.springframework.validation.Errors: java.lang.String getObjectName()>();

        $r19 = interfaceinvoke r7.<javax.validation.ConstraintViolation: javax.validation.metadata.ConstraintDescriptor getConstraintDescriptor()>();

        $r20 = virtualinvoke r0.<org.springframework.validation.beanvalidation.SpringValidatorAdapter: java.lang.Object[] getArgumentsForConstraint(java.lang.String,java.lang.String,javax.validation.metadata.ConstraintDescriptor)>($r18, $r9, $r19);

        $r21 = interfaceinvoke r7.<javax.validation.ConstraintViolation: java.lang.String getMessage()>();

        interfaceinvoke r10.<org.springframework.validation.Errors: void rejectValue(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)>($r9, $r17, $r20, $r21);

     label3:
        goto label5;

     label4:
        $r22 := @caughtexception;

        $r23 = new java.lang.IllegalStateException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("JSR-303 validated property \'");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not have a corresponding accessor for Spring data binding - ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("check your DataBinder\'s configuration (bean property versus direct field access)");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r28, $r22);

        throw $r23;

     label5:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        return;

        catch org.springframework.beans.NotReadablePropertyException from label2 to label3 with label4;
    }

    protected java.lang.Object[] getArgumentsForConstraint(java.lang.String, java.lang.String, javax.validation.metadata.ConstraintDescriptor)
    {
        javax.validation.metadata.ConstraintDescriptor r11;
        java.lang.Object[] $r22, $r23;
        java.lang.String[] $r1;
        org.springframework.context.support.DefaultMessageSourceResolvable $r9;
        java.util.Map $r12;
        int $i0;
        org.springframework.validation.beanvalidation.SpringValidatorAdapter r24;
        java.lang.String r3, $r4, r6, $r8, r18;
        java.util.LinkedList $r0;
        boolean $z0, $z1;
        java.util.Map$Entry r16;
        java.util.Iterator $r14;
        java.util.Collection $r21;
        java.util.Set $r13, $r20;
        java.util.TreeMap $r10;
        java.lang.StringBuilder $r2, $r5, $r7;
        java.lang.Object $r15, $r17, $r19;

        r24 := @this: org.springframework.validation.beanvalidation.SpringValidatorAdapter;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r11 := @parameter2: javax.validation.metadata.ConstraintDescriptor;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        $r1 = newarray (java.lang.String)[2];

        $r2 = new java.lang.StringBuilder;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1[0] = $r8;

        $r1[1] = r6;

        $r9 = new org.springframework.context.support.DefaultMessageSourceResolvable;

        specialinvoke $r9.<org.springframework.context.support.DefaultMessageSourceResolvable: void <init>(java.lang.String[],java.lang.String)>($r1, r6);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = new java.util.TreeMap;

        specialinvoke $r10.<java.util.TreeMap: void <init>()>();

        $r12 = interfaceinvoke r11.<javax.validation.metadata.ConstraintDescriptor: java.util.Map getAttributes()>();

        $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Set entrySet()>();

        $r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.util.Map$Entry) $r15;

        $r17 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getKey()>();

        r18 = (java.lang.String) $r17;

        $r19 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = <org.springframework.validation.beanvalidation.SpringValidatorAdapter: java.util.Set internalAnnotationAttributes>;

        $z0 = interfaceinvoke $r20.<java.util.Set: boolean contains(java.lang.Object)>(r18);

        if $z0 != 0 goto label2;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r18, $r19);

     label2:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r21 = interfaceinvoke $r10.<java.util.Map: java.util.Collection values()>();

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r21);

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r22 = newarray (java.lang.Object)[$i0];

        $r23 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r22);

        return $r23;
    }

    public transient java.util.Set validate(java.lang.Object, java.lang.Class[])
    {
        org.springframework.validation.beanvalidation.SpringValidatorAdapter r0;
        java.lang.Class[] r2;
        javax.validation.Validator $r3;
        java.util.Set $r4;
        java.lang.Object r1;

        r0 := @this: org.springframework.validation.beanvalidation.SpringValidatorAdapter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class[];

        $r3 = r0.<org.springframework.validation.beanvalidation.SpringValidatorAdapter: javax.validation.Validator targetValidator>;

        $r4 = interfaceinvoke $r3.<javax.validation.Validator: java.util.Set validate(java.lang.Object,java.lang.Class[])>(r1, r2);

        return $r4;
    }

    public transient java.util.Set validateProperty(java.lang.Object, java.lang.String, java.lang.Class[])
    {
        org.springframework.validation.beanvalidation.SpringValidatorAdapter r0;
        java.lang.Class[] r3;
        javax.validation.Validator $r4;
        java.util.Set $r5;
        java.lang.Object r1;
        java.lang.String r2;

        r0 := @this: org.springframework.validation.beanvalidation.SpringValidatorAdapter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class[];

        $r4 = r0.<org.springframework.validation.beanvalidation.SpringValidatorAdapter: javax.validation.Validator targetValidator>;

        $r5 = interfaceinvoke $r4.<javax.validation.Validator: java.util.Set validateProperty(java.lang.Object,java.lang.String,java.lang.Class[])>(r1, r2, r3);

        return $r5;
    }

    public transient java.util.Set validateValue(java.lang.Class, java.lang.String, java.lang.Object, java.lang.Class[])
    {
        org.springframework.validation.beanvalidation.SpringValidatorAdapter r0;
        java.lang.Class[] r4;
        javax.validation.Validator $r5;
        java.util.Set $r6;
        java.lang.Class r1;
        java.lang.Object r3;
        java.lang.String r2;

        r0 := @this: org.springframework.validation.beanvalidation.SpringValidatorAdapter;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Class[];

        $r5 = r0.<org.springframework.validation.beanvalidation.SpringValidatorAdapter: javax.validation.Validator targetValidator>;

        $r6 = interfaceinvoke $r5.<javax.validation.Validator: java.util.Set validateValue(java.lang.Class,java.lang.String,java.lang.Object,java.lang.Class[])>(r1, r2, r3, r4);

        return $r6;
    }

    public javax.validation.metadata.BeanDescriptor getConstraintsForClass(java.lang.Class)
    {
        org.springframework.validation.beanvalidation.SpringValidatorAdapter r0;
        javax.validation.Validator $r2;
        java.lang.Class r1;
        javax.validation.metadata.BeanDescriptor $r3;

        r0 := @this: org.springframework.validation.beanvalidation.SpringValidatorAdapter;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.springframework.validation.beanvalidation.SpringValidatorAdapter: javax.validation.Validator targetValidator>;

        $r3 = interfaceinvoke $r2.<javax.validation.Validator: javax.validation.metadata.BeanDescriptor getConstraintsForClass(java.lang.Class)>(r1);

        return $r3;
    }

    public java.lang.Object unwrap(java.lang.Class)
    {
        org.springframework.validation.beanvalidation.SpringValidatorAdapter r0;
        javax.validation.Validator $r2;
        java.lang.Class r1;
        java.lang.Object $r3;

        r0 := @this: org.springframework.validation.beanvalidation.SpringValidatorAdapter;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.springframework.validation.beanvalidation.SpringValidatorAdapter: javax.validation.Validator targetValidator>;

        $r3 = interfaceinvoke $r2.<javax.validation.Validator: java.lang.Object unwrap(java.lang.Class)>(r1);

        return $r3;
    }
}
