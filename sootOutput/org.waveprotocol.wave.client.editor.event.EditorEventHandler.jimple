public final class org.waveprotocol.wave.client.editor.event.EditorEventHandler extends java.lang.Object
{
    private static final int SELECTION_LOG_CULL_FACTOR;
    private static final org.waveprotocol.wave.common.logging.LoggerBundle logger;
    private static boolean cancelUnsafeKeyEvents;
    private final org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener compositionListener;
    private final boolean weirdComposition;
    private final boolean useCompositionEvents;
    private final boolean useWhiteListing;
    private org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection;
    private final org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor;
    private final org.waveprotocol.wave.client.editor.content.NodeEventRouter router;
    private boolean needToSetSelectionAffinity;
    private boolean selectionAffinityMaybeChanged;
    private boolean hadInitialSelection;
    private org.waveprotocol.wave.client.editor.event.EditorEventHandler$State state;
    private final org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler subHandler;
    private final org.waveprotocol.wave.client.editor.event.CompositionEventHandler compositionHandler;
    static int selectionLogCullRotation;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.client.editor.event.EditorInteractor, org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler, org.waveprotocol.wave.client.editor.content.NodeEventRouter, boolean, boolean)
    {
        org.waveprotocol.wave.client.scheduler.SchedulerTimerService $r7;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r5;
        org.waveprotocol.wave.client.scheduler.Scheduler $r1;
        org.waveprotocol.wave.client.scheduler.Scheduler$Priority $r2;
        org.waveprotocol.wave.client.scheduler.TimerService $r8;
        org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler r4;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        org.waveprotocol.wave.client.editor.event.EditorInteractor r3;
        boolean z0, $z1, $z2, z3, $z4;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorInteractor;

        r4 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler;

        r5 := @parameter2: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        z0 := @parameter3: boolean;

        z3 := @parameter4: boolean;

        $r7 = new org.waveprotocol.wave.client.scheduler.SchedulerTimerService;

        $r1 = staticinvoke <org.waveprotocol.wave.client.scheduler.SchedulerInstance: org.waveprotocol.wave.client.scheduler.Scheduler get()>();

        $r2 = <org.waveprotocol.wave.client.scheduler.Scheduler$Priority: org.waveprotocol.wave.client.scheduler.Scheduler$Priority CRITICAL>;

        specialinvoke $r7.<org.waveprotocol.wave.client.scheduler.SchedulerTimerService: void <init>(org.waveprotocol.wave.client.scheduler.Scheduler,org.waveprotocol.wave.client.scheduler.Scheduler$Priority)>($r1, $r2);

        $z1 = <org.waveprotocol.wave.client.common.util.QuirksConstants: boolean SUPPORTS_COMPOSITION_EVENTS>;

        if $z1 == 0 goto label2;

        $z2 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isWebkit()>();

        if $z2 == 0 goto label1;

        if z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        $r8 = (org.waveprotocol.wave.client.scheduler.TimerService) $r7;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void <init>(org.waveprotocol.wave.client.scheduler.TimerService,org.waveprotocol.wave.client.editor.event.EditorInteractor,org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler,org.waveprotocol.wave.client.editor.content.NodeEventRouter,boolean,boolean)>($r8, r3, r4, r5, z0, $z4);

        return;
    }

    void <init>(org.waveprotocol.wave.client.scheduler.TimerService, org.waveprotocol.wave.client.editor.event.EditorInteractor, org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler, org.waveprotocol.wave.client.editor.content.NodeEventRouter, boolean, boolean)
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler$1 $r1;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r5;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler$State $r2;
        org.waveprotocol.wave.common.logging.LoggerBundle $r8;
        org.waveprotocol.wave.client.scheduler.TimerService r7;
        org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler r4;
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener $r9;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        org.waveprotocol.wave.client.editor.event.EditorInteractor r3;
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler $r6;
        boolean $z0, z1, $z2, z3;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r7 := @parameter0: org.waveprotocol.wave.client.scheduler.TimerService;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorInteractor;

        r4 := @parameter2: org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler;

        r5 := @parameter3: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        z1 := @parameter4: boolean;

        z3 := @parameter5: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.client.editor.event.EditorEventHandler$1;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.event.EditorEventHandler$1: void <init>(org.waveprotocol.wave.client.editor.event.EditorEventHandler)>(r0);

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener compositionListener> = $r1;

        $z0 = <org.waveprotocol.wave.client.common.util.QuirksConstants: boolean MODIFIES_DOM_AND_FIRES_TEXTINPUT_AFTER_COMPOSITION>;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean weirdComposition> = $z0;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean needToSetSelectionAffinity> = 1;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean selectionAffinityMaybeChanged> = 1;

        $r2 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler$State: org.waveprotocol.wave.client.editor.event.EditorEventHandler$State NORMAL>;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorEventHandler$State state> = $r2;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor> = r3;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler subHandler> = r4;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.NodeEventRouter router> = r5;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean useWhiteListing> = z1;

        $r6 = new org.waveprotocol.wave.client.editor.event.CompositionEventHandler;

        $r9 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener compositionListener>;

        $r8 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $z2 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean weirdComposition>;

        specialinvoke $r6.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: void <init>(org.waveprotocol.wave.client.scheduler.TimerService,org.waveprotocol.wave.client.editor.event.CompositionEventHandler$CompositionListener,org.waveprotocol.wave.common.logging.LoggerBundle,boolean)>(r7, $r9, $r8, $z2);

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.CompositionEventHandler compositionHandler> = $r6;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean useCompositionEvents> = z3;

        return;
    }

    org.waveprotocol.wave.client.editor.event.EditorEventHandler$State getState()
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler$State $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        $r1 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorEventHandler$State state>;

        return $r1;
    }

    public boolean handleEvent(org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler$SelectionLostException $r4;
        org.waveprotocol.wave.common.logging.Logger $r6;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        org.waveprotocol.wave.common.logging.LoggerBundle $r5;
        org.waveprotocol.wave.client.editor.event.EditorEvent r1;
        org.waveprotocol.wave.client.editor.event.EditorInteractor $r2, $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r2 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.event.EditorInteractor: boolean notifyListeners(org.waveprotocol.wave.client.common.util.SignalEvent)>(r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean selectionAffinityMaybeChanged> = 1;

        $r3 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $z1 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.event.EditorInteractor: boolean hasContentSelection()>();

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean hadInitialSelection> = $z1;

     label2:
        z4 = specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean handleEventInner(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r1);

     label3:
        goto label7;

     label4:
        $r4 := @caughtexception;

        $z2 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.event.EditorEventHandler$SelectionLostException: boolean hasLostSelection()>();

        if $z2 == 0 goto label6;

        $z3 = staticinvoke <org.waveprotocol.wave.client.debug.logger.LogLevel: boolean showDebug()>();

        if $z3 != 0 goto label5;

        $i0 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: int selectionLogCullRotation>;

        $i1 = $i0 + 1;

        <org.waveprotocol.wave.client.editor.event.EditorEventHandler: int selectionLogCullRotation> = $i1;

        $i2 = $i0 % 100;

        if $i2 != 0 goto label6;

     label5:
        $r5 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r6.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.Throwable)>($r4);

     label6:
        z4 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.event.EditorEventHandler$SelectionLostException: boolean hasLostSelection()>();

     label7:
        $z5 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean selectionAffinityMaybeChanged>;

        if $z5 == 0 goto label8;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean needToSetSelectionAffinity> = 1;

     label8:
        return z4;

        catch org.waveprotocol.wave.client.editor.event.EditorEventHandler$SelectionLostException from label2 to label3 with label4;
    }

    private boolean handleEventInner(org.waveprotocol.wave.client.editor.event.EditorEvent) throws org.waveprotocol.wave.client.editor.event.EditorEventHandler$SelectionLostException
    {
        org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection $r38;
        com.google.gwt.dom.client.Element $r11, $r33;
        java.lang.StringBuilder $r5, $r7, $r41;
        org.waveprotocol.wave.client.editor.event.EditorInteractor $r9, $r12, $r19, $r30, $r31, $r32, $r37, $r39;
        org.waveprotocol.wave.common.logging.Logger $r3, $r17, $r22;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter $r36;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r34;
        java.lang.String $r6, $r8;
        org.waveprotocol.wave.model.document.util.Point $r20;
        org.waveprotocol.wave.client.editor.event.EditorEvent r1;
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler $r28;
        com.google.gwt.dom.client.Node $r42;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r40;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25;
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r13, $r14, $r15, $r18, $r29;
        org.waveprotocol.wave.common.logging.LoggerBundle $r2, $r16, $r21;
        org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler $r10, $r23, $r24, $r25;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler$State $r26, $r27;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void invalidateSelection()>();

        $z0 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isMouseEvent()>();

        if $z0 == 0 goto label04;

        $r31 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        interfaceinvoke $r31.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void forceFlush()>();

        $r32 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r33 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: com.google.gwt.dom.client.Element getTarget()>();

        $r34 = interfaceinvoke $r32.<org.waveprotocol.wave.client.editor.event.EditorInteractor: org.waveprotocol.wave.client.editor.content.ContentElement findElementWrapper(com.google.gwt.dom.client.Element)>($r33);

        $r40 = new org.waveprotocol.wave.client.editor.content.ContentPoint;

        specialinvoke $r40.<org.waveprotocol.wave.client.editor.content.ContentPoint: void <init>(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>($r34, null);

        interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: void setCaret(org.waveprotocol.wave.client.editor.content.ContentPoint)>($r40);

        if $r34 == null goto label03;

        $z21 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isClickEvent()>();

        if $z21 == 0 goto label03;

        $r36 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.NodeEventRouter router>;

        virtualinvoke $r36.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleClick(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r34, r1);

        $r37 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        interfaceinvoke $r37.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void clearCaretAnnotations()>();

        $r39 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r38 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection NEUTRAL>;

        interfaceinvoke $r39.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void rebiasSelection(org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)>($r38);

        $z22 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean shouldAllowBrowserDefault()>();

        if $z22 != 0 goto label01;

        $z23 = 1;

        goto label02;

     label01:
        $z23 = 0;

     label02:
        return $z23;

     label03:
        return 0;

     label04:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean checkIfValidSelectionNeeded(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r1);

        if $z1 == 0 goto label05;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void refreshEditorWithCaret(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r1);

        $r29 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        if $r29 != null goto label05;

        $r30 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $z20 = interfaceinvoke $r30.<org.waveprotocol.wave.client.editor.event.EditorInteractor: boolean isEditing()>();

        return $z20;

     label05:
        $z2 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean weirdComposition>;

        if $z2 == 0 goto label06;

        $r27 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorEventHandler$State state>;

        $r26 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler$State: org.waveprotocol.wave.client.editor.event.EditorEventHandler$State COMPOSITION>;

        if $r27 != $r26 goto label06;

        $z19 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isCompositionEvent()>();

        if $z19 != 0 goto label06;

        $r28 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.CompositionEventHandler compositionHandler>;

        virtualinvoke $r28.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: void handleOtherEvent()>();

     label06:
        $z24 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isKeyEvent()>();

        if $z24 == 0 goto label07;

        $z18 = specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean handleKeyEvent(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r1);

        return $z18;

     label07:
        $z3 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isCompositionEvent()>();

        if $z3 == 0 goto label09;

        $z16 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean useCompositionEvents>;

        if $z16 == 0 goto label08;

        $z17 = specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean handleCompositionEvent(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r1);

        return $z17;

     label08:
        return 0;

     label09:
        $z4 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isClipboardEvent()>();

        if $z4 == 0 goto label13;

        $z10 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isPasteEvent()>();

        if $z10 == 0 goto label10;

        $r25 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler subHandler>;

        $z15 = interfaceinvoke $r25.<org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler: boolean handlePaste(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r1);

        return $z15;

     label10:
        $z11 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isCutEvent()>();

        if $z11 == 0 goto label11;

        $r24 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler subHandler>;

        $z14 = interfaceinvoke $r24.<org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler: boolean handleCut(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r1);

        return $z14;

     label11:
        $z12 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isCopyEvent()>();

        if $z12 == 0 goto label12;

        $r23 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler subHandler>;

        $z13 = interfaceinvoke $r23.<org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler: boolean handleCopy(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r1);

        return $z13;

     label12:
        return 0;

     label13:
        $z5 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isMutationEvent()>();

        if $z5 == 0 goto label17;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean selectionAffinityMaybeChanged> = 0;

        $r9 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $z7 = interfaceinvoke $r9.<org.waveprotocol.wave.client.editor.event.EditorInteractor: boolean isExpectingMutationEvents()>();

        if $z7 != 0 goto label15;

        $r11 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: com.google.gwt.dom.client.Element getTarget()>();

        $r42 = (com.google.gwt.dom.client.Node) $r11;

        $z8 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>($r42);

        if $z8 == 0 goto label15;

        $r12 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.client.editor.event.EditorInteractor: org.waveprotocol.wave.client.editor.content.FocusedContentRange getSelectionPoints()>();

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection> = $r13;

        $r14 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        if $r14 == null goto label15;

        $r15 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        $z9 = virtualinvoke $r15.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: boolean isCollapsed()>();

        if $z9 != 0 goto label14;

        $r21 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r22 = interfaceinvoke $r21.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r22.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String)>("WARNING: Probable IME input on non-collapsed range not handled!!!");

     label14:
        $r16 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r17 = interfaceinvoke $r16.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r17.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String)>("Notifying typing extractor for probable IME-caused mutation event");

        $r19 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r18 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        $r20 = virtualinvoke $r18.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        interfaceinvoke $r19.<org.waveprotocol.wave.client.editor.event.EditorInteractor: boolean notifyTypingExtractor(org.waveprotocol.wave.model.document.util.Point,boolean,boolean)>($r20, 0, 0);

     label15:
        $z25 = <org.waveprotocol.wave.client.common.util.QuirksConstants: boolean LIES_ABOUT_CARET_AT_LINK_END_BOUNDARY>;

        if $z25 == 0 goto label16;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void checkForWebkitEndOfLinkHack(org.waveprotocol.wave.client.common.util.SignalEvent)>(r1);

     label16:
        $r10 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler subHandler>;

        interfaceinvoke $r10.<org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler: void handleDomMutation(org.waveprotocol.wave.client.common.util.SignalEvent)>(r1);

        return 0;

     label17:
        $z6 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isFocusEvent()>();

        if $z6 == 0 goto label18;

        return 0;

     label18:
        $r2 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cancelling: ");

        $r6 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: java.lang.String getType()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r8);

        return 1;
    }

    void checkForWebkitEndOfLinkHack(org.waveprotocol.wave.client.common.util.SignalEvent)
    {
        com.google.gwt.dom.client.Text $r16;
        int $i0, $i1;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r10;
        java.lang.String $r2, $r8, $r9, $r15;
        org.waveprotocol.wave.model.document.util.Point $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r12;
        com.google.gwt.core.client.JavaScriptObject $r4, $r6;
        com.google.gwt.dom.client.Element $r1, $r3, $r7;
        org.waveprotocol.wave.client.common.util.SignalEvent r0;
        org.waveprotocol.wave.client.editor.event.EditorInteractor $r11, $r14;
        com.google.gwt.dom.client.Node $r5, $r17;

        r10 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: com.google.gwt.dom.client.Element getTarget()>();

        $r17 = (com.google.gwt.dom.client.Node) $r1;

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>($r17);

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: java.lang.String getType()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("DOMCharacterDataModified");

        if $z1 != 0 goto label1;

        $r15 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: java.lang.String getType()>();

        $z5 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("DOMNodeInserted");

        if $z5 == 0 goto label2;

     label1:
        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: com.google.gwt.dom.client.Element getTarget()>();

        $r4 = virtualinvoke $r3.<com.google.gwt.dom.client.Element: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r16 = (com.google.gwt.dom.client.Text) $r4;

        $i0 = virtualinvoke $r16.<com.google.gwt.dom.client.Text: int getLength()>();

        if $i0 <= 0 goto label2;

        $r5 = virtualinvoke $r16.<com.google.gwt.dom.client.Text: com.google.gwt.dom.client.Node getPreviousSibling()>();

        if $r5 == null goto label2;

        $z2 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>($r5);

        if $z2 != 0 goto label2;

        $r6 = virtualinvoke $r5.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r7 = (com.google.gwt.dom.client.Element) $r6;

        $r8 = virtualinvoke $r7.<com.google.gwt.dom.client.Element: java.lang.String getTagName()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase()>();

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("a");

        if $z3 == 0 goto label2;

        $r11 = r10.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r12 = interfaceinvoke $r11.<org.waveprotocol.wave.client.editor.event.EditorInteractor: org.waveprotocol.wave.model.document.util.FocusedPointRange getHtmlSelection()>();

        $z4 = virtualinvoke $r12.<org.waveprotocol.wave.model.document.util.FocusedPointRange: boolean isCollapsed()>();

        if $z4 == 0 goto label2;

        $r13 = virtualinvoke $r12.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $i1 = virtualinvoke $r13.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        if $i1 != 0 goto label2;

        $r14 = r10.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        interfaceinvoke $r14.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void noteWebkitEndOfLinkHackOccurred(com.google.gwt.dom.client.Text)>($r16);

     label2:
        return;
    }

    private boolean handleKeyEvent(org.waveprotocol.wave.client.editor.event.EditorEvent) throws org.waveprotocol.wave.client.editor.event.EditorEventHandler$SelectionLostException
    {
        int[] $r4, $r5;
        org.waveprotocol.wave.client.editor.content.ContentRange $r11, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r10, $r12, $r15, $r17;
        org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler $r7, $r9, $r14, $r18;
        org.waveprotocol.wave.client.editor.event.EditorInteractor $r8, $r13;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler$State $r3;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r2;
        int $i0, $i1, $i2, $i3;
        org.waveprotocol.wave.model.document.util.Point $r19;
        java.lang.RuntimeException $r6, $r20;
        org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r0;

        r2 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType getKeySignalType()>();

        $r4 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler$2: int[] $SwitchMap$org$waveprotocol$wave$client$editor$event$EditorEventHandler$State>;

        $r3 = r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorEventHandler$State state>;

        $i0 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.event.EditorEventHandler$State: int ordinal()>();

        $i1 = $r4[$i0];

        lookupswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label11;
            default: goto label12;
        };

     label01:
        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean isAccelerator(org.waveprotocol.wave.client.common.util.SignalEvent)>(r0);

        if $z0 == 0 goto label06;

        specialinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void refreshEditorWithCaret(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r0);

        $r7 = r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler subHandler>;

        $z3 = interfaceinvoke $r7.<org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler: boolean handleCommand(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r0);

        if $z3 != 0 goto label02;

        $r9 = r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler subHandler>;

        $r10 = r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        $r8 = r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $z4 = interfaceinvoke $r8.<org.waveprotocol.wave.client.editor.event.EditorInteractor: boolean selectionIsOrdered()>();

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.client.editor.content.ContentRange asOrderedRange(boolean)>($z4);

        $z5 = interfaceinvoke $r9.<org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler: boolean handleBlockLevelCommands(org.waveprotocol.wave.client.editor.event.EditorEvent,org.waveprotocol.wave.client.editor.content.ContentRange)>(r0, $r11);

        if $z5 == 0 goto label03;

     label02:
        return 1;

     label03:
        $r12 = r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        $z6 = virtualinvoke $r12.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: boolean isCollapsed()>();

        if $z6 == 0 goto label04;

        $r18 = r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler subHandler>;

        $r17 = r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        $r19 = virtualinvoke $r17.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $z10 = interfaceinvoke $r18.<org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler: boolean handleCollapsedKeyCombo(org.waveprotocol.wave.client.editor.event.EditorEvent,org.waveprotocol.wave.model.document.util.Point)>(r0, $r19);

        if $z10 == 0 goto label05;

        return 1;

     label04:
        $r14 = r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler subHandler>;

        $r15 = r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        $r13 = r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $z7 = interfaceinvoke $r13.<org.waveprotocol.wave.client.editor.event.EditorInteractor: boolean selectionIsOrdered()>();

        $r16 = virtualinvoke $r15.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.client.editor.content.ContentRange asOrderedRange(boolean)>($z7);

        $z8 = interfaceinvoke $r14.<org.waveprotocol.wave.client.editor.event.EditorEventsSubHandler: boolean handleRangeKeyCombo(org.waveprotocol.wave.client.editor.event.EditorEvent,org.waveprotocol.wave.client.editor.content.ContentRange)>(r0, $r16);

        if $z8 == 0 goto label05;

        return 1;

     label05:
        $z9 = specialinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean shouldCancelAcceleratorBrowserDefault(org.waveprotocol.wave.client.common.util.SignalEvent)>(r0);

        return $z9;

     label06:
        $r5 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler$2: int[] $SwitchMap$org$waveprotocol$wave$client$common$util$SignalEvent$KeySignalType>;

        $i2 = virtualinvoke $r1.<org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType: int ordinal()>();

        $i3 = $r5[$i2];

        tableswitch($i3)
        {
            case 1: goto label07;
            case 2: goto label07;
            case 3: goto label08;
            case 4: goto label09;
            default: goto label10;
        };

     label07:
        $z2 = specialinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean handleInputOrDeleteKeyEvent(org.waveprotocol.wave.client.editor.event.EditorEvent,org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType)>(r0, $r1);

        return $z2;

     label08:
        $z1 = specialinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean handleNavigationKeyEvents(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r0);

        return $z1;

     label09:
        return 0;

     label10:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unhandled signal type");

        throw $r6;

     label11:
        return 0;

     label12:
        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unhandled state");

        throw $r20;
    }

    private boolean handleCompositionEvent(org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        java.lang.String $r3;
        org.waveprotocol.wave.client.editor.event.EditorEvent r1;
        org.waveprotocol.wave.client.editor.event.CompositionEventHandler $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r2 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.CompositionEventHandler compositionHandler>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: java.lang.String getType()>();

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.event.CompositionEventHandler: boolean handleCompositionEvent(java.lang.Object,java.lang.String)>(r1, $r3);

        return $z0;
    }

    private void compositionStart(org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r3, $r4, $r5;
        org.waveprotocol.wave.common.logging.Logger $r7, $r9;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler$State $r1, $r2, $r12;
        org.waveprotocol.wave.common.logging.LoggerBundle $r6, $r8;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r10;
        org.waveprotocol.wave.client.editor.event.EditorInteractor $r13;
        org.waveprotocol.wave.model.document.util.Point r11;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r10 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r2 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorEventHandler$State state>;

        $r1 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler$State: org.waveprotocol.wave.client.editor.event.EditorEventHandler$State COMPOSITION>;

        if $r2 != $r1 goto label1;

        $r8 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r9.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("State was already IME during a compositionstart event!");

     label1:
        $r3 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        if $r3 != null goto label2;

        $r6 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r7.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("No selection during a composition start event? Maybe it\'s deep inside some doodad\'s html?");

        r11 = null;

        goto label4;

     label2:
        $r4 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        $z0 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: boolean isCollapsed()>();

        if $z0 == 0 goto label3;

        $r5 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        r11 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        goto label4;

     label3:
        r11 = specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.model.document.util.Point deleteCachedSelectionRangeAndInvalidate(boolean)>(1);

     label4:
        $r12 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler$State: org.waveprotocol.wave.client.editor.event.EditorEventHandler$State COMPOSITION>;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorEventHandler$State state> = $r12;

        $r13 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        interfaceinvoke $r13.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void compositionStart(org.waveprotocol.wave.model.document.util.Point)>(r11);

        return;
    }

    private void compositionUpdate()
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        org.waveprotocol.wave.client.editor.event.EditorInteractor $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        $r1 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void compositionUpdate()>();

        return;
    }

    private void compositionEnd()
    {
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r2;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler$State $r3;
        org.waveprotocol.wave.client.editor.event.EditorInteractor $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        $r1 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.event.EditorInteractor: org.waveprotocol.wave.client.editor.content.FocusedContentRange compositionEnd()>();

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection> = $r2;

        $r3 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler$State: org.waveprotocol.wave.client.editor.event.EditorEventHandler$State NORMAL>;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorEventHandler$State state> = $r3;

        return;
    }

    private boolean handleInputOrDeleteKeyEvent(org.waveprotocol.wave.client.editor.event.EditorEvent, org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType) throws org.waveprotocol.wave.client.editor.event.EditorEventHandler$SelectionLostException
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r38;
        int[] $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, z11, $z12, $z13, $z14;
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r7, $r10, $r24, $r29, $r32;
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r2, $r36;
        org.waveprotocol.wave.client.common.util.KeyCombo $r13;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection $r14, $r18, $r21;
        org.waveprotocol.wave.client.editor.event.EditorInteractor $r1, $r11, $r15, $r19, $r22, $r31, $r34, $r35;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter $r16, $r20, $r23;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        int $i0, $i1, $i2, $i3;
        org.waveprotocol.wave.model.document.util.Point $r8, $r30, $r33, r37;
        java.lang.RuntimeException $r17;
        org.waveprotocol.wave.client.common.util.SignalEvent$MoveUnit $r25, $r26, $r27, $r28;
        org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType r4, $r5, $r6;
        java.lang.Object $r9;
        org.waveprotocol.wave.client.editor.event.EditorEvent r3;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        r4 := @parameter1: org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType;

        $r1 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.event.EditorInteractor: org.waveprotocol.wave.model.document.util.FocusedPointRange getHtmlSelection()>();

        if $r2 == null goto label01;

        $r35 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r36 = interfaceinvoke $r35.<org.waveprotocol.wave.client.editor.event.EditorInteractor: org.waveprotocol.wave.model.document.util.FocusedPointRange getHtmlSelection()>();

        $z7 = virtualinvoke $r36.<org.waveprotocol.wave.model.document.util.FocusedPointRange: boolean isCollapsed()>();

        if $z7 == 0 goto label01;

        $z8 = 1;

        goto label02;

     label01:
        $z8 = 0;

     label02:
        z9 = 0;

        if $z8 == 0 goto label06;

        $r25 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.common.util.SignalEvent$MoveUnit getMoveUnit()>();

        $r26 = <org.waveprotocol.wave.client.common.util.SignalEvent$MoveUnit: org.waveprotocol.wave.client.common.util.SignalEvent$MoveUnit CHARACTER>;

        if $r25 == $r26 goto label05;

        $r27 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.common.util.SignalEvent$MoveUnit getMoveUnit()>();

        $r28 = <org.waveprotocol.wave.client.common.util.SignalEvent$MoveUnit: org.waveprotocol.wave.client.common.util.SignalEvent$MoveUnit WORD>;

        if $r27 != $r28 goto label04;

        $i2 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.event.EditorEvent: int getKeyCode()>();

        if $i2 != 8 goto label03;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void refreshEditorWithCaret(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r3);

        $r32 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        $r33 = virtualinvoke $r32.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $r34 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        interfaceinvoke $r34.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void deleteWordEndingAt(org.waveprotocol.wave.model.document.util.Point)>($r33);

        goto label04;

     label03:
        $i3 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.event.EditorEvent: int getKeyCode()>();

        if $i3 != 46 goto label04;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void refreshEditorWithCaret(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r3);

        $r29 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        $r30 = virtualinvoke $r29.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $r31 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        interfaceinvoke $r31.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void deleteWordStartingAt(org.waveprotocol.wave.model.document.util.Point)>($r30);

     label04:
        return 1;

     label05:
        r37 = null;

        goto label14;

     label06:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void refreshEditorWithCaret(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r3);

        $r5 = <org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType: org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType DELETE>;

        if r4 != $r5 goto label07;

        $z14 = 1;

        $z13 = 1;

        goto label08;

     label07:
        $z14 = 0;

        $z13 = 0;

     label08:
        z11 = $z13;

        $z0 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isImeKeyEvent()>();

        if $z0 == 0 goto label09;

        $r24 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        r37 = virtualinvoke $r24.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        goto label12;

     label09:
        if $z14 != 0 goto label10;

        $z12 = 1;

        goto label11;

     label10:
        $z12 = 0;

     label11:
        r37 = specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.model.document.util.Point deleteCachedSelectionRangeAndInvalidate(boolean)>($z12);

     label12:
        if z11 == 0 goto label13;

        return 1;

     label13:
        z9 = 1;

     label14:
        $r6 = <org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType: org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType DELETE>;

        if r4 != $r6 goto label20;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void refreshEditorWithCaret(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r3);

        $r7 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        r37 = $r8;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        r38 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r9;

        $r11 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r10 = new org.waveprotocol.wave.client.editor.content.FocusedContentRange;

        specialinvoke $r10.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: void <init>(org.waveprotocol.wave.model.document.util.Point)>($r8);

        interfaceinvoke $r11.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void checkpoint(org.waveprotocol.wave.client.editor.content.FocusedContentRange)>($r10);

        $r12 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler$2: int[] $SwitchMap$org$waveprotocol$wave$client$common$util$KeyCombo>;

        $r13 = staticinvoke <org.waveprotocol.wave.client.common.util.EventWrapper: org.waveprotocol.wave.client.common.util.KeyCombo getKeyCombo(org.waveprotocol.wave.client.common.util.SignalEvent)>(r3);

        $i0 = virtualinvoke $r13.<org.waveprotocol.wave.client.common.util.KeyCombo: int ordinal()>();

        $i1 = $r12[$i0];

        tableswitch($i1)
        {
            case 1: goto label15;
            case 2: goto label15;
            case 3: goto label16;
            case 4: goto label18;
            default: goto label19;
        };

     label15:
        $r22 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r21 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection FROM_RIGHT>;

        interfaceinvoke $r22.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void rebiasSelection(org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)>($r21);

        $r23 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.NodeEventRouter router>;

        $z6 = virtualinvoke $r23.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleBackspace(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>(r38, r3);

        return $z6;

     label16:
        $z4 = <org.waveprotocol.wave.client.common.util.QuirksConstants: boolean HAS_OLD_SCHOOL_CLIPBOARD_SHORTCUTS>;

        if $z4 != 0 goto label17;

        $r19 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r18 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection FROM_LEFT>;

        interfaceinvoke $r19.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void rebiasSelection(org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)>($r18);

        $r20 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.NodeEventRouter router>;

        $z5 = virtualinvoke $r20.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleDelete(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>(r38, r3);

        return $z5;

     label17:
        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>("Shift delete should have been caughtas an accelerator event!");

        throw $r17;

     label18:
        $r15 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r14 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection FROM_LEFT>;

        interfaceinvoke $r15.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void rebiasSelection(org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)>($r14);

        $r16 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.NodeEventRouter router>;

        $z3 = virtualinvoke $r16.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleDelete(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>(r38, r3);

        return $z3;

     label19:
        goto label21;

     label20:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean handleEventsManuallyOnNode(org.waveprotocol.wave.client.editor.event.EditorEvent,org.waveprotocol.wave.model.document.util.Point)>(r3, r37);

        if $z1 == 0 goto label21;

        return 1;

     label21:
        $z2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean handleNormalTyping(org.waveprotocol.wave.client.editor.event.EditorEvent,org.waveprotocol.wave.model.document.util.Point,boolean)>(r3, r37, z9);

        return $z2;
    }

    private org.waveprotocol.wave.model.document.util.Point deleteCachedSelectionRangeAndInvalidate(boolean)
    {
        java.lang.AssertionError $r9;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        org.waveprotocol.wave.model.document.util.Point $r7, r12, r13;
        boolean $z0, z1, $z2;
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r1, $r4, $r5, $r8, $r10, $r11;
        org.waveprotocol.wave.client.editor.event.EditorInteractor $r2, $r3, $r6;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        z1 := @parameter0: boolean;

        $r2 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r1 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void checkpoint(org.waveprotocol.wave.client.editor.content.FocusedContentRange)>($r1);

        $r3 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $z0 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.event.EditorInteractor: boolean selectionIsOrdered()>();

        if $z0 == 0 goto label1;

        $r10 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        r12 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getAnchor()>();

        $r11 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        r13 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        goto label2;

     label1:
        $r4 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        r13 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getAnchor()>();

        $r5 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        r12 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

     label2:
        $r6 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.client.editor.event.EditorInteractor: org.waveprotocol.wave.model.document.util.Point deleteRange(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point,boolean)>(r12, r13, z1);

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r7);

        $z2 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r8 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        if $r8 == null goto label3;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label3:
        return $r7;
    }

    private boolean handleNormalTyping(org.waveprotocol.wave.client.editor.event.EditorEvent, org.waveprotocol.wave.model.document.util.Point, boolean) throws org.waveprotocol.wave.client.editor.event.EditorEventHandler$SelectionLostException
    {
        org.waveprotocol.wave.client.editor.content.ContentPoint $r16, $r19;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r2;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection $r9;
        org.waveprotocol.wave.common.logging.LoggerBundle $r12, $r20;
        org.waveprotocol.wave.client.editor.event.EditorInteractor $r4, $r7, $r10, $r11, $r14;
        org.waveprotocol.wave.common.logging.Logger $r13, $r21;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        int $i0;
        java.lang.String $r5;
        org.waveprotocol.wave.model.document.util.Point $r3, $r6, $r8, $r15, $r17, $r18, r22;
        char c1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r1;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        r22 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        z1 := @parameter2: boolean;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean selectionAffinityMaybeChanged> = 0;

        $z0 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isImeKeyEvent()>();

        if $z0 != 0 goto label1;

        $z5 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isFirefox()>();

        if $z5 == 0 goto label2;

     label1:
        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        if $z6 == 0 goto label9;

        $r11 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $z2 = interfaceinvoke $r11.<org.waveprotocol.wave.client.editor.event.EditorInteractor: boolean isTyping()>();

        if $z2 == 0 goto label4;

        $r20 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r21 = interfaceinvoke $r20.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r21.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Not notifying typing extractor, already notified");

        goto label8;

     label4:
        $z3 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isFirefox()>();

        if $z3 == 0 goto label5;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void refreshEditorWithCaret(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r1);

        $r16 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        $r17 = virtualinvoke $r16.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.model.document.util.Point asPoint()>();

        $r18 = specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.model.document.util.Point maybeSetSelectionLeftAffinity(org.waveprotocol.wave.model.document.util.Point)>($r17);

        r22 = $r18;

        $r19 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentPoint fromPoint(org.waveprotocol.wave.model.document.util.Point)>($r18);

        interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: void setCaret(org.waveprotocol.wave.client.editor.content.ContentPoint)>($r19);

     label5:
        $r12 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r13.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Notifying typing extractor");

        $r14 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r15 = r22;

        if r22 != null goto label6;

        $z7 = 1;

        goto label7;

     label6:
        $z7 = 0;

     label7:
        $z4 = interfaceinvoke $r14.<org.waveprotocol.wave.client.editor.event.EditorInteractor: boolean notifyTypingExtractor(org.waveprotocol.wave.model.document.util.Point,boolean,boolean)>($r15, $z7, z1);

        return $z4;

     label8:
        return 0;

     label9:
        $i0 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: int getKeyCode()>();

        c1 = (char) $i0;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void refreshEditorWithCaret(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r1);

        $r2 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $r4 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c1);

        $r6 = interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.event.EditorInteractor: org.waveprotocol.wave.model.document.util.Point insertText(org.waveprotocol.wave.model.document.util.Point,java.lang.String,boolean)>($r3, $r5, z1);

        $r7 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.client.editor.event.EditorInteractor: org.waveprotocol.wave.model.document.util.Point normalizePoint(org.waveprotocol.wave.model.document.util.Point)>($r6);

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r8);

        $r10 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r9 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection FROM_LEFT>;

        interfaceinvoke $r10.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void rebiasSelection(org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)>($r9);

        return 1;
    }

    private boolean handleEventsManuallyOnNode(org.waveprotocol.wave.client.editor.event.EditorEvent, org.waveprotocol.wave.model.document.util.Point) throws org.waveprotocol.wave.client.editor.event.EditorEventHandler$SelectionLostException
    {
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r5;
        org.waveprotocol.wave.client.editor.content.ContentNode $r9;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter $r7;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection $r10;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r2;
        java.lang.Object $r8;
        org.waveprotocol.wave.client.common.util.SignalEvent$KeyModifier $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r0;
        org.waveprotocol.wave.client.editor.event.EditorInteractor $r6, $r11;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r3;
        org.waveprotocol.wave.model.document.util.Point $r4, r12;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        r12 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $z0 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isOnly(int)>(13);

        if $z0 == 0 goto label1;

        specialinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void refreshEditorWithCaret(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r0);

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.model.document.util.Point asPoint()>();

        $r6 = r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r5 = new org.waveprotocol.wave.client.editor.content.FocusedContentRange;

        specialinvoke $r5.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: void <init>(org.waveprotocol.wave.model.document.util.Point)>($r4);

        interfaceinvoke $r6.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void checkpoint(org.waveprotocol.wave.client.editor.content.FocusedContentRange)>($r5);

        $r7 = r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.NodeEventRouter router>;

        $r8 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r9 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r8;

        virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleEnter(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r9, r0);

        $r11 = r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r10 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection FROM_LEFT>;

        interfaceinvoke $r11.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void rebiasSelection(org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)>($r10);

        return 1;

     label1:
        $r1 = <org.waveprotocol.wave.client.common.util.SignalEvent$KeyModifier: org.waveprotocol.wave.client.common.util.SignalEvent$KeyModifier SHIFT>;

        $z1 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isCombo(int,org.waveprotocol.wave.client.common.util.SignalEvent$KeyModifier)>(13, $r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private boolean handleNavigationKeyEvents(org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r6;
        org.waveprotocol.wave.common.logging.Logger $r8;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter $r12, $r15;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.Point $r4;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r3;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection $r10, $r13, $r16;
        org.waveprotocol.wave.common.logging.LoggerBundle $r7;
        java.lang.Object $r5;
        org.waveprotocol.wave.client.editor.event.EditorInteractor $r1, $r2, $r11, $r14, $r17;
        org.waveprotocol.wave.client.editor.event.EditorEvent r9;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r9 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void checkpoint(org.waveprotocol.wave.client.editor.content.FocusedContentRange)>(null);

        $r2 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void clearCaretAnnotations()>();

        $r3 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        r6 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r5;

        $r7 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r8.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Navigation event");

        $i0 = interfaceinvoke r9.<org.waveprotocol.wave.client.editor.event.EditorEvent: int getKeyCode()>();

        if $i0 != 37 goto label3;

        $r15 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.NodeEventRouter router>;

        virtualinvoke $r15.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleLeft(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>(r6, r9);

        $r17 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r16 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection FROM_RIGHT>;

        interfaceinvoke $r17.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void rebiasSelection(org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)>($r16);

        $z1 = interfaceinvoke r9.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean shouldAllowBrowserDefault()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        $i1 = interfaceinvoke r9.<org.waveprotocol.wave.client.editor.event.EditorEvent: int getKeyCode()>();

        if $i1 != 39 goto label6;

        $r12 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.NodeEventRouter router>;

        virtualinvoke $r12.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleRight(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>(r6, r9);

        $r14 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r13 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection FROM_LEFT>;

        interfaceinvoke $r14.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void rebiasSelection(org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)>($r13);

        $z0 = interfaceinvoke r9.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean shouldAllowBrowserDefault()>();

        if $z0 != 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;

     label6:
        $r11 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r10 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection NEUTRAL>;

        interfaceinvoke $r11.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void rebiasSelection(org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)>($r10);

        return 0;
    }

    private org.waveprotocol.wave.model.document.util.Point maybeSetSelectionLeftAffinity(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        org.waveprotocol.wave.client.editor.event.EditorInteractor $r2, $r4;
        org.waveprotocol.wave.model.document.util.Point r1, $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $z0 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean needToSetSelectionAffinity>;

        if $z0 != 0 goto label1;

        return r1;

     label1:
        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean needToSetSelectionAffinity> = 0;

        $r2 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.event.EditorInteractor: org.waveprotocol.wave.model.document.util.Point normalizePoint(org.waveprotocol.wave.model.document.util.Point)>(r1);

        if $r3 == r1 goto label2;

        $r4 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r3);

     label2:
        return $r3;
    }

    static boolean isAccelerator(org.waveprotocol.wave.client.common.util.SignalEvent)
    {
        org.waveprotocol.wave.client.common.util.SignalEvent r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent;

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isMac()>();

        $z1 = <org.waveprotocol.wave.client.common.util.QuirksConstants: boolean HAS_OLD_SCHOOL_CLIPBOARD_SHORTCUTS>;

        $z2 = staticinvoke <org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean isAcceleratorInner(org.waveprotocol.wave.client.common.util.SignalEvent,boolean,boolean)>(r0, $z0, $z1);

        return $z2;
    }

    static boolean isAcceleratorInner(org.waveprotocol.wave.client.common.util.SignalEvent, boolean, boolean)
    {
        int[] $r1;
        int $i0, $i1, $i2, $i3;
        org.waveprotocol.wave.client.common.util.SignalEvent$KeyModifier $r3;
        boolean z0, $z1, z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.RuntimeException $r4;
        org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType $r2;
        org.waveprotocol.wave.client.common.util.SignalEvent r0;

        r0 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent;

        z2 := @parameter1: boolean;

        z0 := @parameter2: boolean;

        $r1 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler$2: int[] $SwitchMap$org$waveprotocol$wave$client$common$util$SignalEvent$KeySignalType>;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType getKeySignalType()>();

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label07;
            case 3: goto label09;
            case 4: goto label10;
            default: goto label11;
        };

     label01:
        if z2 != 0 goto label02;

        $z4 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: boolean getAltKey()>();

        if $z4 == 0 goto label02;

        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        $z6 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: boolean getCtrlKey()>();

        if $z6 != 0 goto label04;

        $z3 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: boolean getMetaKey()>();

        if $z3 != 0 goto label04;

        $i3 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: int getKeyCode()>();

        if $i3 == 9 goto label04;

        if $z5 == 0 goto label05;

     label04:
        $z7 = 1;

        goto label06;

     label05:
        $z7 = 0;

     label06:
        return $z7;

     label07:
        if z0 == 0 goto label08;

        $i2 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: int getKeyCode()>();

        if $i2 != 46 goto label08;

        $r3 = <org.waveprotocol.wave.client.common.util.SignalEvent$KeyModifier: org.waveprotocol.wave.client.common.util.SignalEvent$KeyModifier SHIFT>;

        $z1 = virtualinvoke $r3.<org.waveprotocol.wave.client.common.util.SignalEvent$KeyModifier: boolean check(org.waveprotocol.wave.client.common.util.SignalEvent)>(r0);

        if $z1 == 0 goto label08;

        return 1;

     label08:
        return 0;

     label09:
        return 0;

     label10:
        return 1;

     label11:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unknown KeySignal type");

        throw $r4;
    }

    private boolean shouldCancelAcceleratorBrowserDefault(org.waveprotocol.wave.client.common.util.SignalEvent)
    {
        java.lang.Object[] $r7;
        org.waveprotocol.wave.common.logging.Logger $r4, $r6, $r11;
        java.lang.Integer $r9;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r2;
        int $i0, $i1;
        org.waveprotocol.wave.client.common.util.SignalEvent$KeyModifier $r1;
        java.lang.String $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3, $r5, $r10;
        org.waveprotocol.wave.client.common.util.SignalEvent r0;

        r2 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent;

        $r1 = <org.waveprotocol.wave.client.common.util.SignalEvent$KeyModifier: org.waveprotocol.wave.client.common.util.SignalEvent$KeyModifier NONE>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.client.common.util.SignalEvent$KeyModifier: boolean check(org.waveprotocol.wave.client.common.util.SignalEvent)>(r0);

        if $z0 == 0 goto label2;

        $i1 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: int getKeyCode()>();

        if $i1 != 45 goto label1;

        return 1;

     label1:
        $z4 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean cancelUnsafeKeyEvents>;

        return $z4;

     label2:
        $z1 = specialinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean isAllowableCombo(org.waveprotocol.wave.client.common.util.SignalEvent)>(r0);

        if $z1 == 0 goto label3;

        $r10 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r11.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Allowing event");

        return 0;

     label3:
        $r3 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $z2 = interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.Logger: boolean shouldLog()>();

        if $z2 == 0 goto label4;

        $r5 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r7 = newarray (java.lang.Object)[3];

        $r7[0] = "unsafe combo: ";

        $r8 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: java.lang.String getType()>();

        $r7[1] = $r8;

        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: int getKeyCode()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r7[2] = $r9;

        interfaceinvoke $r6.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.Object[])>($r7);

     label4:
        $z3 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean cancelUnsafeKeyEvents>;

        return $z3;
    }

    private boolean isAllowableCombo(org.waveprotocol.wave.client.common.util.SignalEvent)
    {
        org.waveprotocol.wave.common.logging.Logger $r3, $r5;
        org.waveprotocol.wave.common.logging.LoggerBundle $r2, $r4;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        org.waveprotocol.wave.client.common.util.SignalEvent r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean checkBlackWhiteListConsistency(org.waveprotocol.wave.client.common.util.SignalEvent)>(r1);

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean isWhiteListedCombo(org.waveprotocol.wave.client.common.util.SignalEvent)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean useWhiteListing>;

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $r2 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $z2 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.Logger: boolean shouldLog()>();

        if $z2 == 0 goto label3;

        $r4 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r5.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String,java.lang.Object)>("not in whitelist: ", r1);

     label3:
        $z3 = specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean isBlackListedCombo(org.waveprotocol.wave.client.common.util.SignalEvent)>(r1);

        if $z3 != 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;
    }

    private boolean checkBlackWhiteListConsistency(org.waveprotocol.wave.client.common.util.SignalEvent)
    {
        org.waveprotocol.wave.common.logging.Logger $r7;
        java.lang.AssertionError $r8;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        int $i0;
        java.lang.String $r5;
        boolean $z0, z1, $z2, $z3, $z5, $z6;
        org.waveprotocol.wave.common.logging.LoggerBundle $r6;
        java.lang.StringBuilder $r2, $r3, $r4;
        org.waveprotocol.wave.client.common.util.SignalEvent r1;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean isWhiteListedCombo(org.waveprotocol.wave.client.common.util.SignalEvent)>(r1);

        if $z0 == 0 goto label1;

        $z3 = specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean isBlackListedCombo(org.waveprotocol.wave.client.common.util.SignalEvent)>(r1);

        if $z3 != 0 goto label2;

     label1:
        $z6 = 1;

        $z5 = 1;

        goto label3;

     label2:
        $z6 = 0;

        $z5 = 0;

     label3:
        z1 = $z5;

        if $z6 != 0 goto label5;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Combo both whitelisted and blacklisted! ");

        $i0 = interfaceinvoke r1.<org.waveprotocol.wave.client.common.util.SignalEvent: int getKeyCode()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $z2 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5);

        throw $r8;

     label4:
        $r6 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r7.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String)>($r5);

     label5:
        return z1;
    }

    private boolean isWhiteListedCombo(org.waveprotocol.wave.client.common.util.SignalEvent)
    {
        org.waveprotocol.wave.client.common.util.KeyCombo $r1;
        int[] $r2, $r3;
        int $i0, $i1, $i2, $i3;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r4;
        org.waveprotocol.wave.client.common.util.SignalEvent r0;
        boolean $z0, $z1, $z2, $z3;

        r4 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent;

        $r1 = staticinvoke <org.waveprotocol.wave.client.common.util.EventWrapper: org.waveprotocol.wave.client.common.util.KeyCombo getKeyCombo(org.waveprotocol.wave.client.common.util.SignalEvent)>(r0);

        $r2 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler$2: int[] $SwitchMap$org$waveprotocol$wave$client$common$util$KeyCombo>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.client.common.util.KeyCombo: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label1;
            case 9: goto label1;
            case 10: goto label1;
            case 11: goto label1;
            case 12: goto label1;
            case 13: goto label1;
            case 14: goto label1;
            case 15: goto label1;
            case 16: goto label1;
            case 17: goto label1;
            case 18: goto label1;
            case 19: goto label1;
            case 20: goto label1;
            case 21: goto label1;
            case 22: goto label1;
            case 23: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        $z0 = <org.waveprotocol.wave.client.common.util.QuirksConstants: boolean HAS_OLD_SCHOOL_CLIPBOARD_SHORTCUTS>;

        if $z0 == 0 goto label3;

        $z3 = specialinvoke r4.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean isAlternateClipboardCombo(org.waveprotocol.wave.client.common.util.SignalEvent)>(r0);

        if $z3 == 0 goto label3;

        return 1;

     label3:
        $z1 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isSafari()>();

        if $z1 == 0 goto label5;

        $z2 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isMac()>();

        if $z2 == 0 goto label5;

        $r3 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler$2: int[] $SwitchMap$org$waveprotocol$wave$client$common$util$KeyCombo>;

        $i2 = virtualinvoke $r1.<org.waveprotocol.wave.client.common.util.KeyCombo: int ordinal()>();

        $i3 = $r3[$i2];

        tableswitch($i3)
        {
            case 24: goto label4;
            case 25: goto label4;
            case 26: goto label4;
            case 27: goto label4;
            default: goto label5;
        };

     label4:
        return 1;

     label5:
        return 0;
    }

    private boolean isBlackListedCombo(org.waveprotocol.wave.client.common.util.SignalEvent)
    {
        int[] $r2, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r7;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.client.common.util.KeyCombo $r1, $r3;
        org.waveprotocol.wave.client.common.util.SignalEvent r0;

        r7 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent;

        $r1 = staticinvoke <org.waveprotocol.wave.client.common.util.EventWrapper: org.waveprotocol.wave.client.common.util.KeyCombo getKeyCombo(org.waveprotocol.wave.client.common.util.SignalEvent)>(r0);

        $r2 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler$2: int[] $SwitchMap$org$waveprotocol$wave$client$common$util$KeyCombo>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.client.common.util.KeyCombo: int ordinal()>();

        $i1 = $r2[$i0];

        lookupswitch($i1)
        {
            case 28: goto label01;
            default: goto label02;
        };

     label01:
        return 1;

     label02:
        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isMac()>();

        if $z0 == 0 goto label09;

        $r4 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler$2: int[] $SwitchMap$org$waveprotocol$wave$client$common$util$KeyCombo>;

        $i2 = virtualinvoke $r1.<org.waveprotocol.wave.client.common.util.KeyCombo: int ordinal()>();

        $i3 = $r4[$i2];

        tableswitch($i3)
        {
            case 29: goto label03;
            case 30: goto label03;
            case 31: goto label03;
            default: goto label04;
        };

     label03:
        return 1;

     label04:
        $z1 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isFirefox()>();

        if $z1 == 0 goto label07;

        $r6 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler$2: int[] $SwitchMap$org$waveprotocol$wave$client$common$util$KeyCombo>;

        $i6 = virtualinvoke $r1.<org.waveprotocol.wave.client.common.util.KeyCombo: int ordinal()>();

        $i7 = $r6[$i6];

        lookupswitch($i7)
        {
            case 32: goto label05;
            case 33: goto label06;
            default: goto label07;
        };

     label05:
        return 1;

     label06:
        return 1;

     label07:
        $z2 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isWebkit()>();

        if $z2 == 0 goto label09;

        $r5 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler$2: int[] $SwitchMap$org$waveprotocol$wave$client$common$util$KeyCombo>;

        $i4 = virtualinvoke $r1.<org.waveprotocol.wave.client.common.util.KeyCombo: int ordinal()>();

        $i5 = $r5[$i4];

        lookupswitch($i5)
        {
            case 34: goto label08;
            default: goto label09;
        };

     label08:
        return 1;

     label09:
        $z3 = <org.waveprotocol.wave.client.common.util.QuirksConstants: boolean PLAINTEXT_PASTE_DOES_NOT_EMIT_PASTE_EVENT>;

        if $z3 == 0 goto label10;

        $r3 = <org.waveprotocol.wave.client.common.util.KeyCombo: org.waveprotocol.wave.client.common.util.KeyCombo ORDER_ALT_SHIFT_V>;

        if $r1 != $r3 goto label10;

        return 1;

     label10:
        return 0;
    }

    private boolean isAlternateClipboardCombo(org.waveprotocol.wave.client.common.util.SignalEvent)
    {
        int[] $r1;
        org.waveprotocol.wave.client.common.util.KeyCombo $r2;
        int $i0, $i1;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r3;
        org.waveprotocol.wave.client.common.util.SignalEvent r0;

        r3 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent;

        $r1 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler$2: int[] $SwitchMap$org$waveprotocol$wave$client$common$util$KeyCombo>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.common.util.EventWrapper: org.waveprotocol.wave.client.common.util.KeyCombo getKeyCombo(org.waveprotocol.wave.client.common.util.SignalEvent)>(r0);

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.client.common.util.KeyCombo: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 3: goto label1;
            case 35: goto label1;
            case 36: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    private void setCaret(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        org.waveprotocol.wave.client.editor.event.EditorInteractor $r2;
        org.waveprotocol.wave.model.document.util.Point r1;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void invalidateSelection()>();

        $r2 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void setCaret(org.waveprotocol.wave.model.document.util.Point)>(r1);

        return;
    }

    private void invalidateSelection()
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection> = null;

        return;
    }

    private void refreshEditorWithCaret(org.waveprotocol.wave.client.editor.event.EditorEvent) throws org.waveprotocol.wave.client.editor.event.EditorEventHandler$SelectionLostException
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler$SelectionLostException $r5;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        java.lang.String $r9, $r11;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r14;
        org.waveprotocol.wave.model.document.util.Point $r13;
        boolean $z0;
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r3, $r4, $r12;
        java.lang.StringBuilder $r6, $r7, $r10;
        org.waveprotocol.wave.client.editor.event.EditorInteractor $r1, $r2;
        org.waveprotocol.wave.client.editor.event.EditorEvent r8;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r8 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.event.EditorInteractor: void forceFlush()>();

        $r2 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorInteractor editorInteractor>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.event.EditorInteractor: org.waveprotocol.wave.client.editor.content.FocusedContentRange getSelectionPoints()>();

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection> = $r3;

        $r4 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        if $r4 == null goto label1;

        $r12 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        $r13 = virtualinvoke $r12.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $r14 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentPoint fromPoint(org.waveprotocol.wave.model.document.util.Point)>($r13);

        interfaceinvoke r8.<org.waveprotocol.wave.client.editor.event.EditorEvent: void setCaret(org.waveprotocol.wave.client.editor.content.ContentPoint)>($r14);

        goto label2;

     label1:
        $r5 = new org.waveprotocol.wave.client.editor.event.EditorEventHandler$SelectionLostException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Null selection after force flushing editor, event = ");

        $r9 = interfaceinvoke r8.<org.waveprotocol.wave.client.editor.event.EditorEvent: java.lang.String getType()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean hadInitialSelection>;

        specialinvoke $r5.<org.waveprotocol.wave.client.editor.event.EditorEventHandler$SelectionLostException: void <init>(java.lang.String,boolean)>($r11, $z0);

        throw $r5;

     label2:
        return;
    }

    private boolean checkIfValidSelectionNeeded(org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler$State $r2, $r3;
        org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType $r4, $r5;
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r0;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $z0 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isMutationEvent()>();

        if $z0 != 0 goto label1;

        $z1 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isFocusEvent()>();

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        $z2 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isKeyEvent()>();

        if $z2 == 0 goto label4;

        $r3 = r1.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.event.EditorEventHandler$State state>;

        $r2 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler$State: org.waveprotocol.wave.client.editor.event.EditorEventHandler$State NORMAL>;

        if $r3 != $r2 goto label4;

        $z3 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEvent: boolean isImeKeyEvent()>();

        if $z3 == 0 goto label3;

        return 0;

     label3:
        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType getKeySignalType()>();

        $r5 = <org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType: org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType INPUT>;

        if $r4 != $r5 goto label4;

        return 0;

     label4:
        return 1;
    }

    public org.waveprotocol.wave.client.editor.content.FocusedContentRange getCachedSelection()
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        $r1 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.client.editor.content.FocusedContentRange cachedSelection>;

        return $r1;
    }

    public static void setCancelUnsafeCombos(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean cancelUnsafeKeyEvents> = z0;

        return;
    }

    public static boolean getCancelUnsafeCombos()
    {
        boolean $z0;

        $z0 = <org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean cancelUnsafeKeyEvents>;

        return $z0;
    }

    static void access$000(org.waveprotocol.wave.client.editor.event.EditorEventHandler, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;
        org.waveprotocol.wave.client.editor.event.EditorEvent r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void compositionStart(org.waveprotocol.wave.client.editor.event.EditorEvent)>(r1);

        return;
    }

    static void access$100(org.waveprotocol.wave.client.editor.event.EditorEventHandler)
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void compositionUpdate()>();

        return;
    }

    static void access$200(org.waveprotocol.wave.client.editor.event.EditorEventHandler)
    {
        org.waveprotocol.wave.client.editor.event.EditorEventHandler r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEventHandler;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventHandler: void compositionEnd()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1;
        boolean $z0, $z1;

        <org.waveprotocol.wave.client.editor.event.EditorEventHandler: int SELECTION_LOG_CULL_FACTOR> = 100;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/event/EditorEventHandler;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean $assertionsDisabled> = $z1;

        $r1 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        <org.waveprotocol.wave.client.editor.event.EditorEventHandler: org.waveprotocol.wave.common.logging.LoggerBundle logger> = $r1;

        <org.waveprotocol.wave.client.editor.event.EditorEventHandler: boolean cancelUnsafeKeyEvents> = 1;

        <org.waveprotocol.wave.client.editor.event.EditorEventHandler: int selectionLogCullRotation> = 0;

        return;
    }
}
