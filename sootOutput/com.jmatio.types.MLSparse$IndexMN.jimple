class com.jmatio.types.MLSparse$IndexMN extends java.lang.Object implements java.lang.Comparable
{
    int m;
    int n;
    final com.jmatio.types.MLSparse this$0;

    public void <init>(com.jmatio.types.MLSparse, int, int)
    {
        com.jmatio.types.MLSparse r1;
        com.jmatio.types.MLSparse$IndexMN r0;
        int i0, i1;

        r0 := @this: com.jmatio.types.MLSparse$IndexMN;

        r1 := @parameter0: com.jmatio.types.MLSparse;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<com.jmatio.types.MLSparse$IndexMN: com.jmatio.types.MLSparse this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jmatio.types.MLSparse$IndexMN: int m> = i0;

        r0.<com.jmatio.types.MLSparse$IndexMN: int n> = i1;

        return;
    }

    public int compareTo(com.jmatio.types.MLSparse$IndexMN)
    {
        com.jmatio.types.MLSparse $r1, $r3;
        com.jmatio.types.MLSparse$IndexMN r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: com.jmatio.types.MLSparse$IndexMN;

        r2 := @parameter0: com.jmatio.types.MLSparse$IndexMN;

        $r1 = r0.<com.jmatio.types.MLSparse$IndexMN: com.jmatio.types.MLSparse this$0>;

        $i1 = r0.<com.jmatio.types.MLSparse$IndexMN: int m>;

        $i0 = r0.<com.jmatio.types.MLSparse$IndexMN: int n>;

        $i2 = virtualinvoke $r1.<com.jmatio.types.MLSparse: int getIndex(int,int)>($i1, $i0);

        $r3 = r0.<com.jmatio.types.MLSparse$IndexMN: com.jmatio.types.MLSparse this$0>;

        $i4 = r2.<com.jmatio.types.MLSparse$IndexMN: int m>;

        $i3 = r2.<com.jmatio.types.MLSparse$IndexMN: int n>;

        $i5 = virtualinvoke $r3.<com.jmatio.types.MLSparse: int getIndex(int,int)>($i4, $i3);

        $i6 = $i2 - $i5;

        return $i6;
    }

    public boolean equals(java.lang.Object)
    {
        com.jmatio.types.MLSparse$IndexMN r1, $r2, $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r1 := @this: com.jmatio.types.MLSparse$IndexMN;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.jmatio.types.MLSparse$IndexMN;

        if $z0 == 0 goto label3;

        $i1 = r1.<com.jmatio.types.MLSparse$IndexMN: int m>;

        $r2 = (com.jmatio.types.MLSparse$IndexMN) r0;

        $i0 = $r2.<com.jmatio.types.MLSparse$IndexMN: int m>;

        if $i1 != $i0 goto label1;

        $i3 = r1.<com.jmatio.types.MLSparse$IndexMN: int n>;

        $r3 = (com.jmatio.types.MLSparse$IndexMN) r0;

        $i2 = $r3.<com.jmatio.types.MLSparse$IndexMN: int n>;

        if $i3 != $i2 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        $z1 = specialinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        return $z1;
    }

    public java.lang.String toString()
    {
        com.jmatio.types.MLSparse$IndexMN r3;
        java.lang.StringBuffer $r0;
        int $i0, $i1;
        java.lang.StringBuilder $r1, $r2, $r4, $r6, $r7, $r8;
        java.lang.String $r5, $r9, $r10;

        r3 := @this: com.jmatio.types.MLSparse$IndexMN;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("{");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("m=");

        $i0 = r3.<com.jmatio.types.MLSparse$IndexMN: int m>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("n=");

        $i1 = r3.<com.jmatio.types.MLSparse$IndexMN: int n>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        $r10 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r10;
    }

    public volatile int compareTo(java.lang.Object)
    {
        com.jmatio.types.MLSparse$IndexMN r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: com.jmatio.types.MLSparse$IndexMN;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.jmatio.types.MLSparse$IndexMN) r1;

        $i0 = virtualinvoke r0.<com.jmatio.types.MLSparse$IndexMN: int compareTo(com.jmatio.types.MLSparse$IndexMN)>($r2);

        return $i0;
    }
}
