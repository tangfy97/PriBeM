public abstract class javax.xml.bind.JAXBContext extends java.lang.Object
{
    public static final java.lang.String JAXB_CONTEXT_FACTORY;

    protected void <init>()
    {
        javax.xml.bind.JAXBContext r0;

        r0 := @this: javax.xml.bind.JAXBContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static javax.xml.bind.JAXBContext newInstance(java.lang.String) throws javax.xml.bind.JAXBException
    {
        java.lang.Thread $r1;
        java.lang.String r0;
        java.lang.ClassLoader $r2;
        javax.xml.bind.JAXBContext $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = virtualinvoke $r1.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r3 = staticinvoke <javax.xml.bind.JAXBContext: javax.xml.bind.JAXBContext newInstance(java.lang.String,java.lang.ClassLoader)>(r0, $r2);

        return $r3;
    }

    public static javax.xml.bind.JAXBContext newInstance(java.lang.String, java.lang.ClassLoader) throws javax.xml.bind.JAXBException
    {
        java.util.Map $r2;
        java.lang.String r0;
        java.lang.ClassLoader r1;
        javax.xml.bind.JAXBContext $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r3 = staticinvoke <javax.xml.bind.JAXBContext: javax.xml.bind.JAXBContext newInstance(java.lang.String,java.lang.ClassLoader,java.util.Map)>(r0, r1, $r2);

        return $r3;
    }

    public static javax.xml.bind.JAXBContext newInstance(java.lang.String, java.lang.ClassLoader, java.util.Map) throws javax.xml.bind.JAXBException
    {
        java.util.Map r2;
        java.lang.String r0;
        java.lang.ClassLoader r1;
        javax.xml.bind.JAXBContext $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 := @parameter2: java.util.Map;

        $r3 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext find(java.lang.String,java.lang.String,java.lang.ClassLoader,java.util.Map)>("javax.xml.bind.context.factory", r0, r1, r2);

        return $r3;
    }

    public static transient javax.xml.bind.JAXBContext newInstance(java.lang.Class[]) throws javax.xml.bind.JAXBException
    {
        java.lang.Class[] r0;
        javax.xml.bind.JAXBContext $r2;
        java.util.Map $r1;

        r0 := @parameter0: java.lang.Class[];

        $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r2 = staticinvoke <javax.xml.bind.JAXBContext: javax.xml.bind.JAXBContext newInstance(java.lang.Class[],java.util.Map)>(r0, $r1);

        return $r2;
    }

    public static javax.xml.bind.JAXBContext newInstance(java.lang.Class[], java.util.Map) throws javax.xml.bind.JAXBException
    {
        java.lang.Class[] r0;
        java.lang.IllegalArgumentException $r6, $r7;
        java.util.Map r1;
        int $i0, i1, $i3;
        java.lang.Class $r3;
        javax.xml.bind.JAXBContext $r2;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.util.Map;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        $i0 = lengthof r0;

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label4;

        $r3 = r0[i1];

        if $r3 != null goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label3:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label2;

     label4:
        $r2 = staticinvoke <javax.xml.bind.ContextFinder: javax.xml.bind.JAXBContext find(java.lang.Class[],java.util.Map)>(r0, r1);

        return $r2;
    }

    public abstract javax.xml.bind.Unmarshaller createUnmarshaller() throws javax.xml.bind.JAXBException;

    public abstract javax.xml.bind.Marshaller createMarshaller() throws javax.xml.bind.JAXBException;

    public abstract javax.xml.bind.Validator createValidator() throws javax.xml.bind.JAXBException;

    public javax.xml.bind.Binder createBinder(java.lang.Class)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Class r2;
        javax.xml.bind.JAXBContext r1;

        r1 := @this: javax.xml.bind.JAXBContext;

        r2 := @parameter0: java.lang.Class;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public javax.xml.bind.Binder createBinder()
    {
        javax.xml.bind.JAXBContext r0;
        javax.xml.bind.Binder $r1;

        r0 := @this: javax.xml.bind.JAXBContext;

        $r1 = virtualinvoke r0.<javax.xml.bind.JAXBContext: javax.xml.bind.Binder createBinder(java.lang.Class)>(class "Lorg/w3c/dom/Node;");

        return $r1;
    }

    public javax.xml.bind.JAXBIntrospector createJAXBIntrospector()
    {
        java.lang.UnsupportedOperationException $r0;
        javax.xml.bind.JAXBContext r1;

        r1 := @this: javax.xml.bind.JAXBContext;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void generateSchema(javax.xml.bind.SchemaOutputResolver) throws java.io.IOException
    {
        java.lang.UnsupportedOperationException $r0;
        javax.xml.bind.JAXBContext r1;
        javax.xml.bind.SchemaOutputResolver r2;

        r1 := @this: javax.xml.bind.JAXBContext;

        r2 := @parameter0: javax.xml.bind.SchemaOutputResolver;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public static void <clinit>()
    {
        <javax.xml.bind.JAXBContext: java.lang.String JAXB_CONTEXT_FACTORY> = "javax.xml.bind.context.factory";

        return;
    }
}
