class org.jsoup.parser.HtmlTreeBuilder extends org.jsoup.parser.TreeBuilder
{
    private org.jsoup.parser.HtmlTreeBuilderState state;
    private org.jsoup.parser.HtmlTreeBuilderState originalState;
    private boolean baseUriSetFromDoc;
    private org.jsoup.nodes.Element headElement;
    private org.jsoup.nodes.Element formElement;
    private org.jsoup.nodes.Element contextElement;
    private org.jsoup.helper.DescendableLinkedList formattingElements;
    private java.util.List pendingTableCharacters;
    private boolean framesetOk;
    private boolean fosterInserts;
    private boolean fragmentParsing;
    static final boolean $assertionsDisabled;

    void <init>()
    {
        org.jsoup.helper.DescendableLinkedList $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        java.util.ArrayList $r2;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        specialinvoke r0.<org.jsoup.parser.TreeBuilder: void <init>()>();

        r0.<org.jsoup.parser.HtmlTreeBuilder: boolean baseUriSetFromDoc> = 0;

        $r1 = new org.jsoup.helper.DescendableLinkedList;

        specialinvoke $r1.<org.jsoup.helper.DescendableLinkedList: void <init>()>();

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.jsoup.parser.HtmlTreeBuilder: java.util.List pendingTableCharacters> = $r2;

        r0.<org.jsoup.parser.HtmlTreeBuilder: boolean framesetOk> = 1;

        r0.<org.jsoup.parser.HtmlTreeBuilder: boolean fosterInserts> = 0;

        r0.<org.jsoup.parser.HtmlTreeBuilder: boolean fragmentParsing> = 0;

        return;
    }

    org.jsoup.nodes.Document parse(java.lang.String, java.lang.String, org.jsoup.parser.ParseErrorList)
    {
        org.jsoup.parser.HtmlTreeBuilderState $r1;
        org.jsoup.nodes.Document $r5;
        java.lang.String r2, r3;
        org.jsoup.parser.ParseErrorList r4;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: org.jsoup.parser.ParseErrorList;

        $r1 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState Initial>;

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState state> = $r1;

        $r5 = specialinvoke r0.<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>(r2, r3, r4);

        return $r5;
    }

    java.util.List parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.ParseErrorList)
    {
        org.jsoup.nodes.Document$QuirksMode $r27;
        org.jsoup.parser.Tokeniser $r14, $r16, $r18, $r20, $r22, $r24;
        org.jsoup.nodes.Element r5, r28, $r29;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.jsoup.parser.Tag $r30;
        java.util.List $r7, $r8;
        org.jsoup.parser.HtmlTreeBuilderState $r1;
        org.jsoup.nodes.Document $r6, $r9, $r25, $r26, $r31;
        org.jsoup.parser.TokeniserState $r13, $r15, $r17, $r19, $r21, $r23;
        org.jsoup.parser.HtmlTreeBuilder r0;
        java.lang.String[] $r11, $r12;
        org.jsoup.parser.ParseErrorList r4;
        java.lang.String r2, r3, $r10;
        org.jsoup.helper.DescendableLinkedList $r32;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: org.jsoup.nodes.Element;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.jsoup.parser.ParseErrorList;

        $r1 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState Initial>;

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState state> = $r1;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void initialiseParse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>(r2, r3, r4);

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element contextElement> = r5;

        r0.<org.jsoup.parser.HtmlTreeBuilder: boolean fragmentParsing> = 1;

        r28 = null;

        if r5 == null goto label8;

        $r9 = virtualinvoke r5.<org.jsoup.nodes.Element: org.jsoup.nodes.Document ownerDocument()>();

        if $r9 == null goto label1;

        $r25 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document doc>;

        $r26 = virtualinvoke r5.<org.jsoup.nodes.Element: org.jsoup.nodes.Document ownerDocument()>();

        $r27 = virtualinvoke $r26.<org.jsoup.nodes.Document: org.jsoup.nodes.Document$QuirksMode quirksMode()>();

        virtualinvoke $r25.<org.jsoup.nodes.Document: org.jsoup.nodes.Document quirksMode(org.jsoup.nodes.Document$QuirksMode)>($r27);

     label1:
        $r10 = virtualinvoke r5.<org.jsoup.nodes.Element: java.lang.String tagName()>();

        $r11 = newarray (java.lang.String)[2];

        $r11[0] = "title";

        $r11[1] = "textarea";

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r10, $r11);

        if $z0 == 0 goto label2;

        $r24 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        $r23 = <org.jsoup.parser.TokeniserState: org.jsoup.parser.TokeniserState Rcdata>;

        virtualinvoke $r24.<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>($r23);

        goto label7;

     label2:
        $r12 = newarray (java.lang.String)[5];

        $r12[0] = "iframe";

        $r12[1] = "noembed";

        $r12[2] = "noframes";

        $r12[3] = "style";

        $r12[4] = "xmp";

        $z1 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r10, $r12);

        if $z1 == 0 goto label3;

        $r22 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        $r21 = <org.jsoup.parser.TokeniserState: org.jsoup.parser.TokeniserState Rawtext>;

        virtualinvoke $r22.<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>($r21);

        goto label7;

     label3:
        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("script");

        if $z2 == 0 goto label4;

        $r20 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        $r19 = <org.jsoup.parser.TokeniserState: org.jsoup.parser.TokeniserState ScriptData>;

        virtualinvoke $r20.<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>($r19);

        goto label7;

     label4:
        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("noscript");

        if $z3 == 0 goto label5;

        $r18 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        $r17 = <org.jsoup.parser.TokeniserState: org.jsoup.parser.TokeniserState Data>;

        virtualinvoke $r18.<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>($r17);

        goto label7;

     label5:
        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("plaintext");

        if $z4 == 0 goto label6;

        $r16 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        $r15 = <org.jsoup.parser.TokeniserState: org.jsoup.parser.TokeniserState Data>;

        virtualinvoke $r16.<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>($r15);

        goto label7;

     label6:
        $r14 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        $r13 = <org.jsoup.parser.TokeniserState: org.jsoup.parser.TokeniserState Data>;

        virtualinvoke $r14.<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>($r13);

     label7:
        $r29 = new org.jsoup.nodes.Element;

        $r30 = staticinvoke <org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>("html");

        specialinvoke $r29.<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String)>($r30, r3);

        r28 = $r29;

        $r31 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document doc>;

        virtualinvoke $r31.<org.jsoup.nodes.Document: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>($r29);

        $r32 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        virtualinvoke $r32.<org.jsoup.helper.DescendableLinkedList: void push(java.lang.Object)>($r29);

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>();

     label8:
        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void runParser()>();

        if r5 == null goto label9;

        $r8 = virtualinvoke r28.<org.jsoup.nodes.Element: java.util.List childNodes()>();

        return $r8;

     label9:
        $r6 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document doc>;

        $r7 = virtualinvoke $r6.<org.jsoup.nodes.Document: java.util.List childNodes()>();

        return $r7;
    }

    protected boolean process(org.jsoup.parser.Token)
    {
        org.jsoup.parser.HtmlTreeBuilderState $r2;
        org.jsoup.parser.Token r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: org.jsoup.parser.Token;

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Token currentToken> = r1;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState state>;

        $z0 = virtualinvoke $r2.<org.jsoup.parser.HtmlTreeBuilderState: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>(r1, r0);

        return $z0;
    }

    boolean process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilderState)
    {
        org.jsoup.parser.HtmlTreeBuilderState r2;
        org.jsoup.parser.Token r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: org.jsoup.parser.Token;

        r2 := @parameter1: org.jsoup.parser.HtmlTreeBuilderState;

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Token currentToken> = r1;

        $z0 = virtualinvoke r2.<org.jsoup.parser.HtmlTreeBuilderState: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>(r1, r0);

        return $z0;
    }

    void transition(org.jsoup.parser.HtmlTreeBuilderState)
    {
        org.jsoup.parser.HtmlTreeBuilderState r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: org.jsoup.parser.HtmlTreeBuilderState;

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState state> = r1;

        return;
    }

    org.jsoup.parser.HtmlTreeBuilderState state()
    {
        org.jsoup.parser.HtmlTreeBuilderState $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState state>;

        return $r1;
    }

    void markInsertionMode()
    {
        org.jsoup.parser.HtmlTreeBuilderState $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState state>;

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState originalState> = $r1;

        return;
    }

    org.jsoup.parser.HtmlTreeBuilderState originalState()
    {
        org.jsoup.parser.HtmlTreeBuilderState $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState originalState>;

        return $r1;
    }

    void framesetOk(boolean)
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        z0 := @parameter0: boolean;

        r0.<org.jsoup.parser.HtmlTreeBuilder: boolean framesetOk> = z0;

        return;
    }

    boolean framesetOk()
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $z0 = r0.<org.jsoup.parser.HtmlTreeBuilder: boolean framesetOk>;

        return $z0;
    }

    org.jsoup.nodes.Document getDocument()
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        org.jsoup.nodes.Document $r1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document doc>;

        return $r1;
    }

    java.lang.String getBaseUri()
    {
        java.lang.String $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: java.lang.String baseUri>;

        return $r1;
    }

    void maybeSetBaseUri(org.jsoup.nodes.Element)
    {
        org.jsoup.nodes.Element r1;
        org.jsoup.nodes.Document $r3;
        int $i0;
        java.lang.String $r2;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: org.jsoup.nodes.Element;

        $z0 = r0.<org.jsoup.parser.HtmlTreeBuilder: boolean baseUriSetFromDoc>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<org.jsoup.nodes.Element: java.lang.String absUrl(java.lang.String)>("href");

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        r0.<org.jsoup.parser.HtmlTreeBuilder: java.lang.String baseUri> = $r2;

        r0.<org.jsoup.parser.HtmlTreeBuilder: boolean baseUriSetFromDoc> = 1;

        $r3 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document doc>;

        virtualinvoke $r3.<org.jsoup.nodes.Document: void setBaseUri(java.lang.String)>($r2);

     label2:
        return;
    }

    boolean isFragmentParsing()
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $z0 = r0.<org.jsoup.parser.HtmlTreeBuilder: boolean fragmentParsing>;

        return $z0;
    }

    void error(org.jsoup.parser.HtmlTreeBuilderState)
    {
        org.jsoup.parser.ParseError $r2;
        java.lang.Object[] $r5;
        org.jsoup.parser.Token $r6;
        org.jsoup.parser.ParseErrorList $r1, $r4;
        org.jsoup.parser.CharacterReader $r3;
        org.jsoup.parser.HtmlTreeBuilderState r8;
        int $i0;
        java.lang.String $r7;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r8 := @parameter0: org.jsoup.parser.HtmlTreeBuilderState;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.ParseErrorList errors>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.ParseErrorList: boolean canAddError()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.ParseErrorList errors>;

        $r2 = new org.jsoup.parser.ParseError;

        $r3 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.CharacterReader reader>;

        $i0 = virtualinvoke $r3.<org.jsoup.parser.CharacterReader: int pos()>();

        $r5 = newarray (java.lang.Object)[2];

        $r6 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Token currentToken>;

        $r7 = virtualinvoke $r6.<org.jsoup.parser.Token: java.lang.String tokenType()>();

        $r5[0] = $r7;

        $r5[1] = r8;

        specialinvoke $r2.<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>($i0, "Unexpected token [%s] when in state [%s]", $r5);

        virtualinvoke $r4.<org.jsoup.parser.ParseErrorList: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }

    org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)
    {
        org.jsoup.nodes.Attributes $r5;
        org.jsoup.helper.DescendableLinkedList $r8;
        org.jsoup.parser.Token$StartTag r0;
        org.jsoup.parser.Tokeniser $r10;
        org.jsoup.parser.Tag $r3;
        org.jsoup.parser.Token$EndTag $r9;
        org.jsoup.nodes.Element $r1, $r7;
        java.lang.String $r2, $r6, $r11;
        org.jsoup.parser.HtmlTreeBuilder r4;
        boolean $z0;

        r4 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r0 := @parameter0: org.jsoup.parser.Token$StartTag;

        $z0 = virtualinvoke r0.<org.jsoup.parser.Token$StartTag: boolean isSelfClosing()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r4.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>(r0);

        $r8 = r4.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        virtualinvoke $r8.<org.jsoup.helper.DescendableLinkedList: boolean add(java.lang.Object)>($r7);

        $r10 = r4.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        $r9 = new org.jsoup.parser.Token$EndTag;

        $r11 = virtualinvoke $r7.<org.jsoup.nodes.Element: java.lang.String tagName()>();

        specialinvoke $r9.<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>($r11);

        virtualinvoke $r10.<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>($r9);

        return $r7;

     label1:
        $r1 = new org.jsoup.nodes.Element;

        $r2 = virtualinvoke r0.<org.jsoup.parser.Token$StartTag: java.lang.String name()>();

        $r3 = staticinvoke <org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>($r2);

        $r6 = r4.<org.jsoup.parser.HtmlTreeBuilder: java.lang.String baseUri>;

        $r5 = r0.<org.jsoup.parser.Token$StartTag: org.jsoup.nodes.Attributes attributes>;

        specialinvoke $r1.<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String,org.jsoup.nodes.Attributes)>($r3, $r6, $r5);

        virtualinvoke r4.<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.nodes.Element)>($r1);

        return $r1;
    }

    org.jsoup.nodes.Element insert(java.lang.String)
    {
        org.jsoup.nodes.Element $r0;
        java.lang.String r1, $r4;
        org.jsoup.parser.Tag $r2;
        org.jsoup.parser.HtmlTreeBuilder r3;

        r3 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.jsoup.nodes.Element;

        $r2 = staticinvoke <org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>(r1);

        $r4 = r3.<org.jsoup.parser.HtmlTreeBuilder: java.lang.String baseUri>;

        specialinvoke $r0.<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String)>($r2, $r4);

        virtualinvoke r3.<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.nodes.Element)>($r0);

        return $r0;
    }

    void insert(org.jsoup.nodes.Element)
    {
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.parser.HtmlTreeBuilder r0;
        org.jsoup.nodes.Element r1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: org.jsoup.nodes.Element;

        specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>(r1);

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: boolean add(java.lang.Object)>(r1);

        return;
    }

    org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)
    {
        org.jsoup.nodes.Attributes $r5;
        org.jsoup.parser.Token$StartTag r0;
        org.jsoup.parser.Tokeniser $r7, $r8;
        org.jsoup.parser.Tag $r2;
        org.jsoup.nodes.Element $r3;
        java.lang.String $r1, $r6;
        org.jsoup.parser.HtmlTreeBuilder r4;
        boolean $z0, $z1, $z2;

        r4 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r0 := @parameter0: org.jsoup.parser.Token$StartTag;

        $r1 = virtualinvoke r0.<org.jsoup.parser.Token$StartTag: java.lang.String name()>();

        $r2 = staticinvoke <org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>($r1);

        $r3 = new org.jsoup.nodes.Element;

        $r6 = r4.<org.jsoup.parser.HtmlTreeBuilder: java.lang.String baseUri>;

        $r5 = r0.<org.jsoup.parser.Token$StartTag: org.jsoup.nodes.Attributes attributes>;

        specialinvoke $r3.<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String,org.jsoup.nodes.Attributes)>($r2, $r6, $r5);

        specialinvoke r4.<org.jsoup.parser.HtmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>($r3);

        $z0 = virtualinvoke r0.<org.jsoup.parser.Token$StartTag: boolean isSelfClosing()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke $r2.<org.jsoup.parser.Tag: boolean isKnownTag()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke $r2.<org.jsoup.parser.Tag: boolean isSelfClosing()>();

        if $z2 == 0 goto label2;

        $r8 = r4.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        virtualinvoke $r8.<org.jsoup.parser.Tokeniser: void acknowledgeSelfClosingFlag()>();

        goto label2;

     label1:
        virtualinvoke $r2.<org.jsoup.parser.Tag: org.jsoup.parser.Tag setSelfClosing()>();

        $r7 = r4.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        virtualinvoke $r7.<org.jsoup.parser.Tokeniser: void acknowledgeSelfClosingFlag()>();

     label2:
        return $r3;
    }

    void insert(org.jsoup.parser.Token$Comment)
    {
        org.jsoup.nodes.Comment $r0;
        org.jsoup.parser.Token$Comment r1;
        java.lang.String $r2, $r4;
        org.jsoup.parser.HtmlTreeBuilder r3;

        r3 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: org.jsoup.parser.Token$Comment;

        $r0 = new org.jsoup.nodes.Comment;

        $r2 = virtualinvoke r1.<org.jsoup.parser.Token$Comment: java.lang.String getData()>();

        $r4 = r3.<org.jsoup.parser.HtmlTreeBuilder: java.lang.String baseUri>;

        specialinvoke $r0.<org.jsoup.nodes.Comment: void <init>(java.lang.String,java.lang.String)>($r2, $r4);

        specialinvoke r3.<org.jsoup.parser.HtmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>($r0);

        return;
    }

    void insert(org.jsoup.parser.Token$Character)
    {
        org.jsoup.nodes.TextNode $r4;
        java.lang.String[] $r3;
        org.jsoup.parser.Token$Character r5;
        org.jsoup.nodes.Node r12;
        org.jsoup.nodes.Element $r1, $r8;
        java.lang.String $r2, $r6, $r7, $r10, $r11;
        org.jsoup.nodes.DataNode $r9;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r5 := @parameter0: org.jsoup.parser.Token$Character;

        $r1 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element currentElement()>();

        $r2 = virtualinvoke $r1.<org.jsoup.nodes.Element: java.lang.String tagName()>();

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "script";

        $r3[1] = "style";

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r2, $r3);

        if $z0 == 0 goto label1;

        $r9 = new org.jsoup.nodes.DataNode;

        $r10 = virtualinvoke r5.<org.jsoup.parser.Token$Character: java.lang.String getData()>();

        $r11 = r0.<org.jsoup.parser.HtmlTreeBuilder: java.lang.String baseUri>;

        specialinvoke $r9.<org.jsoup.nodes.DataNode: void <init>(java.lang.String,java.lang.String)>($r10, $r11);

        r12 = $r9;

        goto label2;

     label1:
        $r4 = new org.jsoup.nodes.TextNode;

        $r6 = virtualinvoke r5.<org.jsoup.parser.Token$Character: java.lang.String getData()>();

        $r7 = r0.<org.jsoup.parser.HtmlTreeBuilder: java.lang.String baseUri>;

        specialinvoke $r4.<org.jsoup.nodes.TextNode: void <init>(java.lang.String,java.lang.String)>($r6, $r7);

        r12 = $r4;

     label2:
        $r8 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element currentElement()>();

        virtualinvoke $r8.<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>(r12);

        return;
    }

    private void insertNode(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node r3;
        org.jsoup.helper.DescendableLinkedList $r1;
        org.jsoup.nodes.Element $r2;
        org.jsoup.nodes.Document $r4;
        int $i0;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r3 := @parameter0: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $i0 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: int size()>();

        if $i0 != 0 goto label1;

        $r4 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document doc>;

        virtualinvoke $r4.<org.jsoup.nodes.Document: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>(r3);

        goto label3;

     label1:
        $z0 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean isFosterInserts()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void insertInFosterParent(org.jsoup.nodes.Node)>(r3);

        goto label3;

     label2:
        $r2 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element currentElement()>();

        virtualinvoke $r2.<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>(r3);

     label3:
        return;
    }

    org.jsoup.nodes.Element pop()
    {
        org.jsoup.nodes.Element $r3, $r7, $r12;
        java.lang.String $r4, $r9, $r13;
        boolean $z0, $z1, $z2;
        org.jsoup.helper.DescendableLinkedList $r1, $r5, $r10;
        org.jsoup.parser.HtmlTreeBuilderState $r8;
        java.lang.Object $r2, $r6, $r11;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.lang.Object peekLast()>();

        $r3 = (org.jsoup.nodes.Element) $r2;

        $r4 = virtualinvoke $r3.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("td");

        if $z0 == 0 goto label1;

        $r8 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState state>;

        $r9 = virtualinvoke $r8.<org.jsoup.parser.HtmlTreeBuilderState: java.lang.String name()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("InCell");

        if $z1 != 0 goto label1;

        staticinvoke <org.jsoup.helper.Validate: void isFalse(boolean,java.lang.String)>(1, "pop td not in cell");

     label1:
        $r10 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r11 = virtualinvoke $r10.<org.jsoup.helper.DescendableLinkedList: java.lang.Object peekLast()>();

        $r12 = (org.jsoup.nodes.Element) $r11;

        $r13 = virtualinvoke $r12.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("html");

        if $z2 == 0 goto label2;

        staticinvoke <org.jsoup.helper.Validate: void isFalse(boolean,java.lang.String)>(1, "popping html!");

     label2:
        $r5 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r6 = virtualinvoke $r5.<org.jsoup.helper.DescendableLinkedList: java.lang.Object pollLast()>();

        $r7 = (org.jsoup.nodes.Element) $r6;

        return $r7;
    }

    void push(org.jsoup.nodes.Element)
    {
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.parser.HtmlTreeBuilder r0;
        org.jsoup.nodes.Element r1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: org.jsoup.nodes.Element;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: boolean add(java.lang.Object)>(r1);

        return;
    }

    org.jsoup.helper.DescendableLinkedList getStack()
    {
        org.jsoup.helper.DescendableLinkedList $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        return $r1;
    }

    boolean onStack(org.jsoup.nodes.Element)
    {
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.nodes.Element r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: org.jsoup.nodes.Element;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $z0 = specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean isElementInQueue(org.jsoup.helper.DescendableLinkedList,org.jsoup.nodes.Element)>($r2, r1);

        return $z0;
    }

    private boolean isElementInQueue(org.jsoup.helper.DescendableLinkedList, org.jsoup.nodes.Element)
    {
        java.util.Iterator $r1;
        org.jsoup.helper.DescendableLinkedList r0;
        org.jsoup.nodes.Element r3, r4;
        java.lang.Object $r2;
        org.jsoup.parser.HtmlTreeBuilder r5;
        boolean $z0;

        r5 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r0 := @parameter0: org.jsoup.helper.DescendableLinkedList;

        r4 := @parameter1: org.jsoup.nodes.Element;

        $r1 = virtualinvoke r0.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.jsoup.nodes.Element) $r2;

        if r3 != r4 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    org.jsoup.nodes.Element getFromStack(java.lang.String)
    {
        java.util.Iterator $r2;
        org.jsoup.helper.DescendableLinkedList $r1;
        org.jsoup.nodes.Element r4;
        java.lang.Object $r3;
        java.lang.String $r5, r6;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jsoup.nodes.Element) $r3;

        $r5 = virtualinvoke r4.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    boolean removeFromStack(org.jsoup.nodes.Element)
    {
        java.util.Iterator $r2;
        org.jsoup.helper.DescendableLinkedList $r1;
        org.jsoup.nodes.Element r4, r5;
        java.lang.Object $r3;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r5 := @parameter0: org.jsoup.nodes.Element;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jsoup.nodes.Element) $r3;

        if r4 != r5 goto label2;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    void popStackToClose(java.lang.String)
    {
        java.util.Iterator $r2;
        org.jsoup.helper.DescendableLinkedList $r1;
        org.jsoup.nodes.Element r4;
        java.lang.Object $r3;
        java.lang.String $r5, r6;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jsoup.nodes.Element) $r3;

        $r5 = virtualinvoke r4.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        goto label3;

     label2:
        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        goto label1;

     label3:
        return;
    }

    transient void popStackToClose(java.lang.String[])
    {
        java.util.Iterator $r2;
        org.jsoup.helper.DescendableLinkedList $r1;
        java.lang.String[] r6;
        org.jsoup.nodes.Element r4;
        java.lang.Object $r3;
        java.lang.String $r5;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r6 := @parameter0: java.lang.String[];

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jsoup.nodes.Element) $r3;

        $r5 = virtualinvoke r4.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z1 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r5, r6);

        if $z1 == 0 goto label2;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        goto label3;

     label2:
        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        goto label1;

     label3:
        return;
    }

    void popStackToBefore(java.lang.String)
    {
        java.util.Iterator $r2;
        org.jsoup.helper.DescendableLinkedList $r1;
        org.jsoup.nodes.Element r4;
        java.lang.Object $r3;
        java.lang.String $r5, r6;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jsoup.nodes.Element) $r3;

        $r5 = virtualinvoke r4.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        goto label1;

     label3:
        return;
    }

    void clearStackToTableContext()
    {
        java.lang.String[] $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "table";

        specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void clearStackToContext(java.lang.String[])>($r1);

        return;
    }

    void clearStackToTableBodyContext()
    {
        java.lang.String[] $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "tbody";

        $r1[1] = "tfoot";

        $r1[2] = "thead";

        specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void clearStackToContext(java.lang.String[])>($r1);

        return;
    }

    void clearStackToTableRowContext()
    {
        java.lang.String[] $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "tr";

        specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void clearStackToContext(java.lang.String[])>($r1);

        return;
    }

    private transient void clearStackToContext(java.lang.String[])
    {
        java.util.Iterator $r2;
        org.jsoup.helper.DescendableLinkedList $r1;
        java.lang.String[] r6;
        org.jsoup.nodes.Element r4;
        java.lang.Object $r3;
        java.lang.String $r5, $r7;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r6 := @parameter0: java.lang.String[];

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jsoup.nodes.Element) $r3;

        $r5 = virtualinvoke r4.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z1 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r5, r6);

        if $z1 != 0 goto label3;

        $r7 = virtualinvoke r4.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("html");

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        goto label1;

     label3:
        return;
    }

    org.jsoup.nodes.Element aboveOnStack(org.jsoup.nodes.Element)
    {
        java.util.Iterator $r2;
        org.jsoup.helper.DescendableLinkedList $r1;
        java.lang.AssertionError $r8;
        org.jsoup.nodes.Element r4, r5, $r7;
        java.lang.Object $r3, $r6;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r5 := @parameter0: org.jsoup.nodes.Element;

        $z0 = <org.jsoup.parser.HtmlTreeBuilder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean onStack(org.jsoup.nodes.Element)>(r5);

        if $z1 != 0 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label2:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jsoup.nodes.Element) $r3;

        if r4 != r5 goto label3;

        $r6 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.jsoup.nodes.Element) $r6;

        return $r7;

     label3:
        goto label2;

     label4:
        return null;
    }

    void insertOnStackAfter(org.jsoup.nodes.Element, org.jsoup.nodes.Element)
    {
        org.jsoup.helper.DescendableLinkedList $r2, $r4;
        org.jsoup.nodes.Element r1, r3;
        int $i0, $i1, $i3;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: org.jsoup.nodes.Element;

        r3 := @parameter1: org.jsoup.nodes.Element;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $i0 = virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: int lastIndexOf(java.lang.Object)>(r1);

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean)>($z0);

        $r4 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $i1 = $i0 + 1;

        virtualinvoke $r4.<org.jsoup.helper.DescendableLinkedList: void add(int,java.lang.Object)>($i1, r3);

        return;
    }

    void replaceOnStack(org.jsoup.nodes.Element, org.jsoup.nodes.Element)
    {
        org.jsoup.helper.DescendableLinkedList $r3;
        org.jsoup.nodes.Element r1, r2;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: org.jsoup.nodes.Element;

        r2 := @parameter1: org.jsoup.nodes.Element;

        $r3 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void replaceInQueue(java.util.LinkedList,org.jsoup.nodes.Element,org.jsoup.nodes.Element)>($r3, r1, r2);

        return;
    }

    private void replaceInQueue(java.util.LinkedList, org.jsoup.nodes.Element, org.jsoup.nodes.Element)
    {
        org.jsoup.nodes.Element r1, r2;
        int $i0, $i2;
        java.util.LinkedList r0;
        org.jsoup.parser.HtmlTreeBuilder r3;
        boolean $z0;

        r3 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r0 := @parameter0: java.util.LinkedList;

        r1 := @parameter1: org.jsoup.nodes.Element;

        r2 := @parameter2: org.jsoup.nodes.Element;

        $i0 = virtualinvoke r0.<java.util.LinkedList: int lastIndexOf(java.lang.Object)>(r1);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean)>($z0);

        virtualinvoke r0.<java.util.LinkedList: java.lang.Object remove(int)>($i0);

        virtualinvoke r0.<java.util.LinkedList: void add(int,java.lang.Object)>($i0, r2);

        return;
    }

    void resetInsertionMode()
    {
        org.jsoup.nodes.Element r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, z16, z17, z18;
        org.jsoup.parser.HtmlTreeBuilderState $r7, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r31;
        org.jsoup.parser.HtmlTreeBuilder r0;
        java.lang.String $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        java.util.Iterator $r2;
        org.jsoup.helper.DescendableLinkedList $r1;
        java.lang.Object $r3;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        z16 = 0;

        z18 = 0;

        z17 = 0;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label17;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r30 = (org.jsoup.nodes.Element) $r3;

        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label02;

        z16 = 1;

        z18 = 1;

        z17 = 1;

        r30 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element contextElement>;

     label02:
        $r4 = virtualinvoke r30.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $r5 = "select";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label03;

        $r29 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InSelect>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r29);

        goto label17;

     label03:
        $r6 = "td";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z3 != 0 goto label04;

        $r8 = "td";

        $z4 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z4 == 0 goto label05;

        if z18 != 0 goto label05;

     label04:
        $r7 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InCell>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r7);

        goto label17;

     label05:
        $r9 = "tr";

        $z5 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z5 == 0 goto label06;

        $r28 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InRow>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r28);

        goto label17;

     label06:
        $r10 = "tbody";

        $z6 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z6 != 0 goto label07;

        $r11 = "thead";

        $z7 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z7 != 0 goto label07;

        $r12 = "tfoot";

        $z8 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z8 == 0 goto label08;

     label07:
        $r31 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InTableBody>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r31);

        goto label17;

     label08:
        $r13 = "caption";

        $z9 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z9 == 0 goto label09;

        $r27 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InCaption>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r27);

        goto label17;

     label09:
        $r14 = "colgroup";

        $z10 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z10 == 0 goto label10;

        $r26 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InColumnGroup>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r26);

        goto label17;

     label10:
        $r15 = "table";

        $z11 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z11 == 0 goto label11;

        $r25 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InTable>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r25);

        goto label17;

     label11:
        $r16 = "head";

        $z12 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z12 == 0 goto label12;

        $r24 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InBody>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r24);

        goto label17;

     label12:
        $r17 = "body";

        $z13 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z13 == 0 goto label13;

        $r23 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InBody>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r23);

        goto label17;

     label13:
        $r18 = "frameset";

        $z14 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z14 == 0 goto label14;

        $r22 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InFrameset>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r22);

        goto label17;

     label14:
        $r19 = "html";

        $z15 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z15 == 0 goto label15;

        $r21 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState BeforeHead>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r21);

        goto label17;

     label15:
        if z17 == 0 goto label16;

        $r20 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InBody>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r20);

        goto label17;

     label16:
        goto label01;

     label17:
        return;
    }

    private boolean inSpecificScope(java.lang.String, java.lang.String[], java.lang.String[])
    {
        java.lang.String[] $r1, r3, r4;
        java.lang.String r2;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String[];

        r4 := @parameter2: java.lang.String[];

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        $z0 = specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String[],java.lang.String[],java.lang.String[])>($r1, r3, r4);

        return $z0;
    }

    private boolean inSpecificScope(java.lang.String[], java.lang.String[], java.lang.String[])
    {
        java.util.Iterator $r2;
        org.jsoup.helper.DescendableLinkedList $r1;
        java.lang.String[] r6, r7, r8;
        org.jsoup.nodes.Element r4;
        java.lang.Object $r3;
        java.lang.String $r5;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r6 := @parameter0: java.lang.String[];

        r7 := @parameter1: java.lang.String[];

        r8 := @parameter2: java.lang.String[];

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jsoup.nodes.Element) $r3;

        $r5 = virtualinvoke r4.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z1 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r5, r6);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r5, r7);

        if $z2 == 0 goto label3;

        return 0;

     label3:
        if r8 == null goto label4;

        $z3 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r5, r8);

        if $z3 == 0 goto label4;

        return 0;

     label4:
        goto label1;

     label5:
        staticinvoke <org.jsoup.helper.Validate: void fail(java.lang.String)>("Should not be reachable");

        return 0;
    }

    boolean inScope(java.lang.String[])
    {
        java.lang.String[] r1, $r2;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: java.lang.String[];

        $r2 = newarray (java.lang.String)[8];

        $r2[0] = "applet";

        $r2[1] = "caption";

        $r2[2] = "html";

        $r2[3] = "table";

        $r2[4] = "td";

        $r2[5] = "th";

        $r2[6] = "marquee";

        $r2[7] = "object";

        $z0 = specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String[],java.lang.String[],java.lang.String[])>(r1, $r2, null);

        return $z0;
    }

    boolean inScope(java.lang.String)
    {
        java.lang.String r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String,java.lang.String[])>(r1, null);

        return $z0;
    }

    boolean inScope(java.lang.String, java.lang.String[])
    {
        java.lang.String[] $r2, r3;
        java.lang.String r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String[];

        $r2 = newarray (java.lang.String)[8];

        $r2[0] = "applet";

        $r2[1] = "caption";

        $r2[2] = "html";

        $r2[3] = "table";

        $r2[4] = "td";

        $r2[5] = "th";

        $r2[6] = "marquee";

        $r2[7] = "object";

        $z0 = specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String,java.lang.String[],java.lang.String[])>(r1, $r2, r3);

        return $z0;
    }

    boolean inListItemScope(java.lang.String)
    {
        java.lang.String[] $r2;
        java.lang.String r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "ol";

        $r2[1] = "ul";

        $z0 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String,java.lang.String[])>(r1, $r2);

        return $z0;
    }

    boolean inButtonScope(java.lang.String)
    {
        java.lang.String[] $r2;
        java.lang.String r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "button";

        $z0 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String,java.lang.String[])>(r1, $r2);

        return $z0;
    }

    boolean inTableScope(java.lang.String)
    {
        java.lang.String[] $r2;
        java.lang.String r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "html";

        $r2[1] = "table";

        $z0 = specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String,java.lang.String[],java.lang.String[])>(r1, $r2, null);

        return $z0;
    }

    boolean inSelectScope(java.lang.String)
    {
        java.util.Iterator $r2;
        org.jsoup.helper.DescendableLinkedList $r1;
        java.lang.String[] $r7;
        org.jsoup.nodes.Element r4;
        java.lang.Object $r3;
        java.lang.String $r5, r6;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jsoup.nodes.Element) $r3;

        $r5 = virtualinvoke r4.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r7 = newarray (java.lang.String)[2];

        $r7[0] = "optgroup";

        $r7[1] = "option";

        $z2 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r5, $r7);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        goto label1;

     label4:
        staticinvoke <org.jsoup.helper.Validate: void fail(java.lang.String)>("Should not be reachable");

        return 0;
    }

    void setHeadElement(org.jsoup.nodes.Element)
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        org.jsoup.nodes.Element r1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: org.jsoup.nodes.Element;

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element headElement> = r1;

        return;
    }

    org.jsoup.nodes.Element getHeadElement()
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        org.jsoup.nodes.Element $r1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element headElement>;

        return $r1;
    }

    boolean isFosterInserts()
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $z0 = r0.<org.jsoup.parser.HtmlTreeBuilder: boolean fosterInserts>;

        return $z0;
    }

    void setFosterInserts(boolean)
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        z0 := @parameter0: boolean;

        r0.<org.jsoup.parser.HtmlTreeBuilder: boolean fosterInserts> = z0;

        return;
    }

    org.jsoup.nodes.Element getFormElement()
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        org.jsoup.nodes.Element $r1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element formElement>;

        return $r1;
    }

    void setFormElement(org.jsoup.nodes.Element)
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        org.jsoup.nodes.Element r1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: org.jsoup.nodes.Element;

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element formElement> = r1;

        return;
    }

    void newPendingTableCharacters()
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        java.util.ArrayList $r1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.jsoup.parser.HtmlTreeBuilder: java.util.List pendingTableCharacters> = $r1;

        return;
    }

    java.util.List getPendingTableCharacters()
    {
        java.util.List $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: java.util.List pendingTableCharacters>;

        return $r1;
    }

    void setPendingTableCharacters(java.util.List)
    {
        java.util.List r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: java.util.List;

        r0.<org.jsoup.parser.HtmlTreeBuilder: java.util.List pendingTableCharacters> = r1;

        return;
    }

    void generateImpliedEndTags(java.lang.String)
    {
        java.lang.String[] $r6;
        org.jsoup.nodes.Element $r2, $r4;
        java.lang.String r0, $r3, $r5;
        org.jsoup.parser.HtmlTreeBuilder r1;
        boolean $z0, $z1;

        r1 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r0 := @parameter0: java.lang.String;

     label1:
        if r0 == null goto label2;

        $r2 = virtualinvoke r1.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element currentElement()>();

        $r3 = virtualinvoke $r2.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke r1.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element currentElement()>();

        $r5 = virtualinvoke $r4.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $r6 = newarray (java.lang.String)[8];

        $r6[0] = "dd";

        $r6[1] = "dt";

        $r6[2] = "li";

        $r6[3] = "option";

        $r6[4] = "optgroup";

        $r6[5] = "p";

        $r6[6] = "rp";

        $r6[7] = "rt";

        $z1 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r5, $r6);

        if $z1 == 0 goto label2;

        virtualinvoke r1.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>();

        goto label1;

     label2:
        return;
    }

    void generateImpliedEndTags()
    {
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags(java.lang.String)>(null);

        return;
    }

    boolean isSpecial(org.jsoup.nodes.Element)
    {
        org.jsoup.nodes.Element r0;
        java.lang.String[] $r2;
        java.lang.String $r1;
        org.jsoup.parser.HtmlTreeBuilder r3;
        boolean $z0;

        r3 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r0 := @parameter0: org.jsoup.nodes.Element;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $r2 = newarray (java.lang.String)[79];

        $r2[0] = "address";

        $r2[1] = "applet";

        $r2[2] = "area";

        $r2[3] = "article";

        $r2[4] = "aside";

        $r2[5] = "base";

        $r2[6] = "basefont";

        $r2[7] = "bgsound";

        $r2[8] = "blockquote";

        $r2[9] = "body";

        $r2[10] = "br";

        $r2[11] = "button";

        $r2[12] = "caption";

        $r2[13] = "center";

        $r2[14] = "col";

        $r2[15] = "colgroup";

        $r2[16] = "command";

        $r2[17] = "dd";

        $r2[18] = "details";

        $r2[19] = "dir";

        $r2[20] = "div";

        $r2[21] = "dl";

        $r2[22] = "dt";

        $r2[23] = "embed";

        $r2[24] = "fieldset";

        $r2[25] = "figcaption";

        $r2[26] = "figure";

        $r2[27] = "footer";

        $r2[28] = "form";

        $r2[29] = "frame";

        $r2[30] = "frameset";

        $r2[31] = "h1";

        $r2[32] = "h2";

        $r2[33] = "h3";

        $r2[34] = "h4";

        $r2[35] = "h5";

        $r2[36] = "h6";

        $r2[37] = "head";

        $r2[38] = "header";

        $r2[39] = "hgroup";

        $r2[40] = "hr";

        $r2[41] = "html";

        $r2[42] = "iframe";

        $r2[43] = "img";

        $r2[44] = "input";

        $r2[45] = "isindex";

        $r2[46] = "li";

        $r2[47] = "link";

        $r2[48] = "listing";

        $r2[49] = "marquee";

        $r2[50] = "menu";

        $r2[51] = "meta";

        $r2[52] = "nav";

        $r2[53] = "noembed";

        $r2[54] = "noframes";

        $r2[55] = "noscript";

        $r2[56] = "object";

        $r2[57] = "ol";

        $r2[58] = "p";

        $r2[59] = "param";

        $r2[60] = "plaintext";

        $r2[61] = "pre";

        $r2[62] = "script";

        $r2[63] = "section";

        $r2[64] = "select";

        $r2[65] = "style";

        $r2[66] = "summary";

        $r2[67] = "table";

        $r2[68] = "tbody";

        $r2[69] = "td";

        $r2[70] = "textarea";

        $r2[71] = "tfoot";

        $r2[72] = "th";

        $r2[73] = "thead";

        $r2[74] = "title";

        $r2[75] = "tr";

        $r2[76] = "ul";

        $r2[77] = "wbr";

        $r2[78] = "xmp";

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r1, $r2);

        return $z0;
    }

    void pushActiveFormattingElements(org.jsoup.nodes.Element)
    {
        java.util.Iterator $r2;
        org.jsoup.helper.DescendableLinkedList $r1, $r6;
        org.jsoup.nodes.Element r3, r5;
        int i0;
        java.lang.Object $r4;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r3 := @parameter0: org.jsoup.nodes.Element;

        i0 = 0;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Element) $r4;

        if r5 != null goto label2;

        goto label5;

     label2:
        $z1 = specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean isSameFormattingElement(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>(r3, r5);

        if $z1 == 0 goto label3;

        i0 = i0 + 1;

     label3:
        if i0 != 3 goto label4;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        goto label5;

     label4:
        goto label1;

     label5:
        $r6 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        virtualinvoke $r6.<org.jsoup.helper.DescendableLinkedList: boolean add(java.lang.Object)>(r3);

        return;
    }

    private boolean isSameFormattingElement(org.jsoup.nodes.Element, org.jsoup.nodes.Element)
    {
        org.jsoup.nodes.Attributes $r4, $r5;
        org.jsoup.nodes.Element r0, r2;
        java.lang.String $r1, $r3;
        org.jsoup.parser.HtmlTreeBuilder r6;
        boolean $z0, $z1, $z2;

        r6 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r0 := @parameter0: org.jsoup.nodes.Element;

        r2 := @parameter1: org.jsoup.nodes.Element;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $r3 = virtualinvoke r2.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Attributes attributes()>();

        $r5 = virtualinvoke r2.<org.jsoup.nodes.Element: org.jsoup.nodes.Attributes attributes()>();

        $z1 = virtualinvoke $r4.<org.jsoup.nodes.Attributes: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    void reconstructFormattingElements()
    {
        org.jsoup.nodes.Attributes $r13, $r14;
        org.jsoup.nodes.Element $r6, $r12, r19;
        int $i0, $i1, $i2, i3, $i5;
        java.lang.String $r11;
        boolean $z0, $z1, z2;
        org.jsoup.helper.DescendableLinkedList $r1, $r2, $r4, $r7, $r9, $r15, $r16, $r17;
        java.lang.Object $r3, $r5, $r8, $r10, $r18;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $i0 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: int size()>();

        if $i0 == 0 goto label1;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $r3 = virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: java.lang.Object getLast()>();

        if $r3 == null goto label1;

        $r4 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $r5 = virtualinvoke $r4.<org.jsoup.helper.DescendableLinkedList: java.lang.Object getLast()>();

        $r6 = (org.jsoup.nodes.Element) $r5;

        $z0 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean onStack(org.jsoup.nodes.Element)>($r6);

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        $r7 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $r8 = virtualinvoke $r7.<org.jsoup.helper.DescendableLinkedList: java.lang.Object getLast()>();

        r19 = (org.jsoup.nodes.Element) $r8;

        i3 = $i0 - 1;

        z2 = 0;

     label3:
        if i3 != 0 goto label4;

        z2 = 1;

        goto label5;

     label4:
        $r9 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $i5 = (int) -1;

        i3 = i3 + $i5;

        $r10 = virtualinvoke $r9.<org.jsoup.helper.DescendableLinkedList: java.lang.Object get(int)>(i3);

        r19 = (org.jsoup.nodes.Element) $r10;

        if r19 == null goto label5;

        $z1 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean onStack(org.jsoup.nodes.Element)>(r19);

        if $z1 == 0 goto label3;

        goto label5;

     label5:
        if z2 != 0 goto label6;

        $r17 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        i3 = i3 + 1;

        $r18 = virtualinvoke $r17.<org.jsoup.helper.DescendableLinkedList: java.lang.Object get(int)>(i3);

        r19 = (org.jsoup.nodes.Element) $r18;

     label6:
        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r19);

        z2 = 0;

        $r11 = virtualinvoke r19.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $r12 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<org.jsoup.nodes.Element: org.jsoup.nodes.Attributes attributes()>();

        $r14 = virtualinvoke r19.<org.jsoup.nodes.Element: org.jsoup.nodes.Attributes attributes()>();

        virtualinvoke $r13.<org.jsoup.nodes.Attributes: void addAll(org.jsoup.nodes.Attributes)>($r14);

        $r15 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        virtualinvoke $r15.<org.jsoup.helper.DescendableLinkedList: void add(int,java.lang.Object)>(i3, $r12);

        $r16 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $i1 = i3 + 1;

        virtualinvoke $r16.<org.jsoup.helper.DescendableLinkedList: java.lang.Object remove(int)>($i1);

        $i2 = $i0 - 1;

        if i3 != $i2 goto label7;

        goto label8;

     label7:
        goto label5;

     label8:
        return;
    }

    void clearFormattingElementsToLastMarker()
    {
        org.jsoup.helper.DescendableLinkedList $r1, $r2, $r5;
        org.jsoup.nodes.Element r4;
        java.lang.Object $r3;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

     label1:
        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $z0 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $r3 = virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: java.lang.Object peekLast()>();

        r4 = (org.jsoup.nodes.Element) $r3;

        $r5 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        virtualinvoke $r5.<org.jsoup.helper.DescendableLinkedList: java.lang.Object removeLast()>();

        if r4 != null goto label2;

        goto label3;

     label2:
        goto label1;

     label3:
        return;
    }

    void removeFromActiveFormattingElements(org.jsoup.nodes.Element)
    {
        java.util.Iterator $r2;
        org.jsoup.helper.DescendableLinkedList $r1;
        org.jsoup.nodes.Element r4, r5;
        java.lang.Object $r3;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r5 := @parameter0: org.jsoup.nodes.Element;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jsoup.nodes.Element) $r3;

        if r4 != r5 goto label2;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        goto label3;

     label2:
        goto label1;

     label3:
        return;
    }

    boolean isInActiveFormattingElements(org.jsoup.nodes.Element)
    {
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.nodes.Element r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: org.jsoup.nodes.Element;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $z0 = specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean isElementInQueue(org.jsoup.helper.DescendableLinkedList,org.jsoup.nodes.Element)>($r2, r1);

        return $z0;
    }

    org.jsoup.nodes.Element getActiveFormattingElement(java.lang.String)
    {
        java.util.Iterator $r2;
        org.jsoup.helper.DescendableLinkedList $r1;
        org.jsoup.nodes.Element r4;
        java.lang.Object $r3;
        java.lang.String $r5, r6;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jsoup.nodes.Element) $r3;

        if r4 != null goto label2;

        goto label4;

     label2:
        $r5 = virtualinvoke r4.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label3;

        return r4;

     label3:
        goto label1;

     label4:
        return null;
    }

    void replaceActiveFormattingElement(org.jsoup.nodes.Element, org.jsoup.nodes.Element)
    {
        org.jsoup.helper.DescendableLinkedList $r3;
        org.jsoup.nodes.Element r1, r2;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: org.jsoup.nodes.Element;

        r2 := @parameter1: org.jsoup.nodes.Element;

        $r3 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void replaceInQueue(java.util.LinkedList,org.jsoup.nodes.Element,org.jsoup.nodes.Element)>($r3, r1, r2);

        return;
    }

    void insertMarkerToFormattingElements()
    {
        org.jsoup.helper.DescendableLinkedList $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: boolean add(java.lang.Object)>(null);

        return;
    }

    void insertInFosterParent(org.jsoup.nodes.Node)
    {
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.nodes.Node r4;
        org.jsoup.nodes.Element $r1, $r5, r6;
        java.lang.Object $r3;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r4 := @parameter0: org.jsoup.nodes.Node;

        $r1 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getFromStack(java.lang.String)>("table");

        z0 = 0;

        if $r1 == null goto label2;

        $r5 = virtualinvoke $r1.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        if $r5 == null goto label1;

        r6 = virtualinvoke $r1.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        z0 = 1;

        goto label3;

     label1:
        r6 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element aboveOnStack(org.jsoup.nodes.Element)>($r1);

        goto label3;

     label2:
        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r3 = virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: java.lang.Object get(int)>(0);

        r6 = (org.jsoup.nodes.Element) $r3;

     label3:
        if z0 == 0 goto label4;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        virtualinvoke $r1.<org.jsoup.nodes.Element: org.jsoup.nodes.Element before(org.jsoup.nodes.Node)>(r4);

        goto label5;

     label4:
        virtualinvoke r6.<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>(r4);

     label5:
        return;
    }

    public java.lang.String toString()
    {
        org.jsoup.parser.Token $r3;
        org.jsoup.parser.HtmlTreeBuilderState $r6;
        org.jsoup.nodes.Element $r9;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7, $r8, $r10, $r11;
        java.lang.String $r12;
        org.jsoup.parser.HtmlTreeBuilder r2;

        r2 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TreeBuilder{currentToken=");

        $r3 = r2.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Token currentToken>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", state=");

        $r6 = r2.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState state>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", currentElement=");

        $r9 = virtualinvoke r2.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element currentElement()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/jsoup/parser/HtmlTreeBuilder;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.jsoup.parser.HtmlTreeBuilder: boolean $assertionsDisabled> = $z1;

        return;
    }
}
