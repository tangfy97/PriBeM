public class com.hp.hpl.jena.ontology.OntDocumentManager extends java.lang.Object
{
    public static final java.lang.String DEFAULT_METADATA_PATH;
    public static final java.lang.String NS;
    public static final java.lang.String ANCHOR;
    public static final com.hp.hpl.jena.rdf.model.Resource ONTOLOGY_SPEC;
    public static final com.hp.hpl.jena.rdf.model.Property PUBLIC_URI;
    public static final com.hp.hpl.jena.rdf.model.Property ALT_URL;
    public static final com.hp.hpl.jena.rdf.model.Property PREFIX;
    public static final com.hp.hpl.jena.rdf.model.Property LANGUAGE;
    public static final com.hp.hpl.jena.rdf.model.Resource DOC_MGR_POLICY;
    public static final com.hp.hpl.jena.rdf.model.Property CACHE_MODELS;
    public static final com.hp.hpl.jena.rdf.model.Property PROCESS_IMPORTS;
    public static final com.hp.hpl.jena.rdf.model.Property IGNORE_IMPORT;
    public static final com.hp.hpl.jena.rdf.model.Property USE_DECLARED_NS_PREFIXES;
    private static com.hp.hpl.jena.ontology.OntDocumentManager s_instance;
    private static org.slf4j.Logger log;
    protected java.lang.String m_searchPath;
    protected com.hp.hpl.jena.util.FileManager m_fileMgr;
    protected boolean m_usingGlobalFileMgr;
    protected boolean m_processImports;
    protected java.util.Set m_ignoreImports;
    protected com.hp.hpl.jena.shared.PrefixMapping m_prefixMap;
    protected boolean m_useDeclaredPrefixes;
    protected java.lang.String m_policyURL;
    protected com.hp.hpl.jena.ontology.OntDocumentManager$ReadFailureHandler m_rfHandler;
    protected com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook m_readHook;

    public void <init>()
    {
        com.hp.hpl.jena.ontology.OntDocumentManager r0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        specialinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void <init>(java.lang.String)>("file:ont-policy.rdf;file:etc/ont-policy.rdf");

        return;
    }

    public void <init>(java.lang.String)
    {
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void <init>(com.hp.hpl.jena.util.FileManager,java.lang.String)>(null, r1);

        return;
    }

    public void <init>(com.hp.hpl.jena.util.FileManager, java.lang.String)
    {
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.util.HashSet $r1;
        com.hp.hpl.jena.util.FileManager r4;
        java.lang.String r5, $r6, $r7;
        com.hp.hpl.jena.shared.impl.PrefixMappingImpl $r2;
        com.hp.hpl.jena.ontology.OntDocumentManager$DefaultReadHook $r3;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r4 := @parameter0: com.hp.hpl.jena.util.FileManager;

        r5 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: java.lang.String m_searchPath> = "file:ont-policy.rdf;file:etc/ont-policy.rdf";

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: boolean m_usingGlobalFileMgr> = 0;

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: boolean m_processImports> = 1;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: java.util.Set m_ignoreImports> = $r1;

        $r2 = new com.hp.hpl.jena.shared.impl.PrefixMappingImpl;

        specialinvoke $r2.<com.hp.hpl.jena.shared.impl.PrefixMappingImpl: void <init>()>();

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.shared.PrefixMapping m_prefixMap> = $r2;

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: boolean m_useDeclaredPrefixes> = 1;

        $r3 = new com.hp.hpl.jena.ontology.OntDocumentManager$DefaultReadHook;

        specialinvoke $r3.<com.hp.hpl.jena.ontology.OntDocumentManager$DefaultReadHook: void <init>()>();

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook m_readHook> = $r3;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void setFileManager(com.hp.hpl.jena.util.FileManager)>(r4);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void setDefaults()>();

        if r5 != null goto label1;

        $r7 = "";

        goto label2;

     label1:
        $r7 = r5;

     label2:
        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: java.lang.String m_searchPath> = $r7;

        $r6 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: java.lang.String m_searchPath>;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void initialiseMetadata(java.lang.String)>($r6);

        return;
    }

    public void <init>(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        specialinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void <init>(com.hp.hpl.jena.util.FileManager,com.hp.hpl.jena.rdf.model.Model)>(null, r1);

        return;
    }

    public void <init>(com.hp.hpl.jena.util.FileManager, com.hp.hpl.jena.rdf.model.Model)
    {
        java.util.HashSet $r1;
        com.hp.hpl.jena.util.FileManager r4;
        com.hp.hpl.jena.rdf.model.Model r5;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        com.hp.hpl.jena.shared.impl.PrefixMappingImpl $r2;
        com.hp.hpl.jena.ontology.OntDocumentManager$DefaultReadHook $r3;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r4 := @parameter0: com.hp.hpl.jena.util.FileManager;

        r5 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: java.lang.String m_searchPath> = "file:ont-policy.rdf;file:etc/ont-policy.rdf";

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: boolean m_usingGlobalFileMgr> = 0;

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: boolean m_processImports> = 1;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: java.util.Set m_ignoreImports> = $r1;

        $r2 = new com.hp.hpl.jena.shared.impl.PrefixMappingImpl;

        specialinvoke $r2.<com.hp.hpl.jena.shared.impl.PrefixMappingImpl: void <init>()>();

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.shared.PrefixMapping m_prefixMap> = $r2;

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: boolean m_useDeclaredPrefixes> = 1;

        $r3 = new com.hp.hpl.jena.ontology.OntDocumentManager$DefaultReadHook;

        specialinvoke $r3.<com.hp.hpl.jena.ontology.OntDocumentManager$DefaultReadHook: void <init>()>();

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook m_readHook> = $r3;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void setFileManager(com.hp.hpl.jena.util.FileManager)>(r4);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void setDefaults()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void configure(com.hp.hpl.jena.rdf.model.Model,boolean)>(r5, 0);

        return;
    }

    public static com.hp.hpl.jena.ontology.OntDocumentManager getInstance()
    {
        com.hp.hpl.jena.ontology.OntDocumentManager $r0, $r1, $r2;

        $r0 = <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.ontology.OntDocumentManager s_instance>;

        if $r0 != null goto label1;

        $r2 = new com.hp.hpl.jena.ontology.OntDocumentManager;

        specialinvoke $r2.<com.hp.hpl.jena.ontology.OntDocumentManager: void <init>()>();

        <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.ontology.OntDocumentManager s_instance> = $r2;

     label1:
        $r1 = <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.ontology.OntDocumentManager s_instance>;

        return $r1;
    }

    public com.hp.hpl.jena.util.FileManager getFileManager()
    {
        com.hp.hpl.jena.util.FileManager $r1;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        $r1 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager m_fileMgr>;

        return $r1;
    }

    public com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook setReadHook(com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook)
    {
        com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook r0, r2;
        com.hp.hpl.jena.ontology.OntDocumentManager r1;
        java.lang.IllegalArgumentException $r3;

        r1 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r0 := @parameter0: com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadHook cannot be null");

        throw $r3;

     label1:
        r2 = r1.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook m_readHook>;

        r1.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook m_readHook> = r0;

        return r2;
    }

    public com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook getReadHook()
    {
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook $r1;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        $r1 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook m_readHook>;

        return $r1;
    }

    public void setFileManager()
    {
        com.hp.hpl.jena.util.FileManager $r1, $r2;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        $r1 = staticinvoke <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager get()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager clone()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void setFileManager(com.hp.hpl.jena.util.FileManager)>($r2);

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: boolean m_usingGlobalFileMgr> = 1;

        return;
    }

    public void setFileManager(com.hp.hpl.jena.util.FileManager)
    {
        com.hp.hpl.jena.util.FileManager r0;
        com.hp.hpl.jena.ontology.OntDocumentManager r1;

        r1 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r0 := @parameter0: com.hp.hpl.jena.util.FileManager;

        if r0 != null goto label1;

        virtualinvoke r1.<com.hp.hpl.jena.ontology.OntDocumentManager: void setFileManager()>();

        goto label2;

     label1:
        r1.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager m_fileMgr> = r0;

        r1.<com.hp.hpl.jena.ontology.OntDocumentManager: boolean m_usingGlobalFileMgr> = 0;

     label2:
        return;
    }

    public java.lang.String getMetadataSearchPath()
    {
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        $r1 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: java.lang.String m_searchPath>;

        return $r1;
    }

    public void setMetadataSearchPath(java.lang.String, boolean)
    {
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void reset()>();

     label1:
        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: java.lang.String m_searchPath> = r1;

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: java.lang.String m_policyURL> = null;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void initialiseMetadata(java.lang.String)>(r1);

        return;
    }

    public void setReadFailureHandler(com.hp.hpl.jena.ontology.OntDocumentManager$ReadFailureHandler)
    {
        com.hp.hpl.jena.ontology.OntDocumentManager$ReadFailureHandler r1;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r1 := @parameter0: com.hp.hpl.jena.ontology.OntDocumentManager$ReadFailureHandler;

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.ontology.OntDocumentManager$ReadFailureHandler m_rfHandler> = r1;

        return;
    }

    public com.hp.hpl.jena.ontology.OntDocumentManager$ReadFailureHandler getReadFailureHandler()
    {
        com.hp.hpl.jena.ontology.OntDocumentManager$ReadFailureHandler $r1;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        $r1 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.ontology.OntDocumentManager$ReadFailureHandler m_rfHandler>;

        return $r1;
    }

    public void configure(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void configure(com.hp.hpl.jena.rdf.model.Model,boolean)>(r1, 1);

        return;
    }

    public void configure(com.hp.hpl.jena.rdf.model.Model, boolean)
    {
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void reset(boolean)>(0);

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void processMetadata(com.hp.hpl.jena.rdf.model.Model)>(r1);

        return;
    }

    public void reset(boolean)
    {
        com.hp.hpl.jena.util.FileManager $r1;
        java.util.Set $r2;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String $r4;
        boolean $z0, z1;
        com.hp.hpl.jena.shared.impl.PrefixMappingImpl $r3;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        z1 := @parameter0: boolean;

        $z0 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: boolean m_usingGlobalFileMgr>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void setFileManager()>();

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        virtualinvoke $r1.<com.hp.hpl.jena.util.FileManager: void resetCache()>();

     label2:
        $r2 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: java.util.Set m_ignoreImports>;

        interfaceinvoke $r2.<java.util.Set: void clear()>();

        $r3 = new com.hp.hpl.jena.shared.impl.PrefixMappingImpl;

        specialinvoke $r3.<com.hp.hpl.jena.shared.impl.PrefixMappingImpl: void <init>()>();

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.shared.PrefixMapping m_prefixMap> = $r3;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void setDefaults()>();

        if z1 == 0 goto label3;

        $r4 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: java.lang.String m_searchPath>;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void initialiseMetadata(java.lang.String)>($r4);

     label3:
        return;
    }

    public void reset()
    {
        com.hp.hpl.jena.ontology.OntDocumentManager r0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void reset(boolean)>(0);

        return;
    }

    public java.util.Iterator listDocuments()
    {
        java.util.Iterator $r3;
        com.hp.hpl.jena.util.LocationMapper $r2;
        com.hp.hpl.jena.util.FileManager $r1;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper getLocationMapper()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.util.LocationMapper: java.util.Iterator listAltEntries()>();

        return $r3;
    }

    public java.lang.String doAltURLMapping(java.lang.String)
    {
        com.hp.hpl.jena.util.FileManager $r1;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String r2, $r3;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.util.FileManager: java.lang.String mapURI(java.lang.String)>(r2);

        return $r3;
    }

    public com.hp.hpl.jena.rdf.model.Model getModel(java.lang.String)
    {
        com.hp.hpl.jena.util.FileManager $r1, $r4;
        com.hp.hpl.jena.rdf.model.Model $r3, r5;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model getFromCache(java.lang.String)>(r2);

        r5 = $r3;

        if $r3 == null goto label1;

        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Model: boolean isClosed()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        virtualinvoke $r4.<com.hp.hpl.jena.util.FileManager: void removeCacheModel(java.lang.String)>(r2);

        r5 = null;

     label1:
        return r5;
    }

    public void addAltEntry(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.util.LocationMapper $r2;
        com.hp.hpl.jena.util.FileManager $r1;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String r3, r4;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper getLocationMapper()>();

        virtualinvoke $r2.<com.hp.hpl.jena.util.LocationMapper: void addAltEntry(java.lang.String,java.lang.String)>(r3, r4);

        return;
    }

    public void addModel(java.lang.String, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r2;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void addModel(java.lang.String,com.hp.hpl.jena.rdf.model.Model,boolean)>(r1, r2, 0);

        return;
    }

    public void addModel(java.lang.String, com.hp.hpl.jena.rdf.model.Model, boolean)
    {
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        com.hp.hpl.jena.util.FileManager $r1, $r2, $r5;
        com.hp.hpl.jena.rdf.model.Model r4;
        java.lang.String r3;
        boolean $z0, z1, $z2;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        z1 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.util.FileManager: boolean isCachingModels()>();

        if $z0 == 0 goto label2;

        if z1 != 0 goto label1;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        $z2 = virtualinvoke $r5.<com.hp.hpl.jena.util.FileManager: boolean hasCachedModel(java.lang.String)>(r3);

        if $z2 != 0 goto label2;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        virtualinvoke $r2.<com.hp.hpl.jena.util.FileManager: void addCacheModel(java.lang.String,com.hp.hpl.jena.rdf.model.Model)>(r3, r4);

     label2:
        return;
    }

    public void forget(java.lang.String)
    {
        com.hp.hpl.jena.util.LocationMapper $r2;
        com.hp.hpl.jena.util.FileManager $r1, $r4;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String r3;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r3 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper getLocationMapper()>();

        virtualinvoke $r2.<com.hp.hpl.jena.util.LocationMapper: void removeAltEntry(java.lang.String)>(r3);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        virtualinvoke $r4.<com.hp.hpl.jena.util.FileManager: void removeCacheModel(java.lang.String)>(r3);

        return;
    }

    public com.hp.hpl.jena.ontology.OntModel getOntology(java.lang.String, com.hp.hpl.jena.ontology.OntModelSpec)
    {
        com.hp.hpl.jena.ontology.OntDocumentManager $r1, r2;
        com.hp.hpl.jena.ontology.OntModelSpec r0, $r10, r11;
        com.hp.hpl.jena.util.FileManager $r3, $r6;
        com.hp.hpl.jena.rdf.model.Model $r7;
        java.lang.String r4;
        com.hp.hpl.jena.ontology.OntModel $r5, $r8, $r9;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.ontology.OntModelSpec;

        r11 = r0;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntModelSpec: com.hp.hpl.jena.ontology.OntDocumentManager getDocumentManager()>();

        if $r1 == r2 goto label1;

        $r10 = new com.hp.hpl.jena.ontology.OntModelSpec;

        specialinvoke $r10.<com.hp.hpl.jena.ontology.OntModelSpec: void <init>(com.hp.hpl.jena.ontology.OntModelSpec)>(r0);

        r11 = $r10;

        virtualinvoke $r10.<com.hp.hpl.jena.ontology.OntModelSpec: void setDocumentManager(com.hp.hpl.jena.ontology.OntDocumentManager)>(r2);

     label1:
        $r3 = virtualinvoke r2.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        $z0 = virtualinvoke $r3.<com.hp.hpl.jena.util.FileManager: boolean hasCachedModel(java.lang.String)>(r4);

        if $z0 == 0 goto label3;

        $r6 = virtualinvoke r2.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model getFromCache(java.lang.String)>(r4);

        $z1 = $r7 instanceof com.hp.hpl.jena.ontology.OntModel;

        if $z1 == 0 goto label2;

        $r9 = (com.hp.hpl.jena.ontology.OntModel) $r7;

        return $r9;

     label2:
        $r8 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.ontology.OntModel createOntologyModel(com.hp.hpl.jena.ontology.OntModelSpec,com.hp.hpl.jena.rdf.model.Model)>(r11, $r7);

        return $r8;

     label3:
        $r5 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.ontology.OntModel createOntologyModel(com.hp.hpl.jena.ontology.OntModelSpec,com.hp.hpl.jena.rdf.model.Model)>(r11, null);

        virtualinvoke r2.<com.hp.hpl.jena.ontology.OntDocumentManager: boolean read(com.hp.hpl.jena.rdf.model.Model,java.lang.String,boolean)>($r5, r4, 1);

        virtualinvoke r2.<com.hp.hpl.jena.ontology.OntDocumentManager: void addModel(java.lang.String,com.hp.hpl.jena.rdf.model.Model)>(r4, $r5);

        return $r5;
    }

    public boolean getProcessImports()
    {
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        $z0 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: boolean m_processImports>;

        return $z0;
    }

    public boolean getCacheModels()
    {
        com.hp.hpl.jena.util.FileManager $r1;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.util.FileManager: boolean isCachingModels()>();

        return $z0;
    }

    public void setProcessImports(boolean)
    {
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.ontology.OntDocumentManager: boolean m_processImports> = z0;

        return;
    }

    public void setCacheModels(boolean)
    {
        com.hp.hpl.jena.util.FileManager $r1;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        virtualinvoke $r1.<com.hp.hpl.jena.util.FileManager: void setModelCaching(boolean)>(z0);

        return;
    }

    public void addIgnoreImport(java.lang.String)
    {
        java.util.Set $r2;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: java.util.Set m_ignoreImports>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeIgnoreImport(java.lang.String)
    {
        java.util.Set $r2;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: java.util.Set m_ignoreImports>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public java.util.Iterator listIgnoredImports()
    {
        java.util.Set $r1;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.util.Iterator $r2;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        $r1 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: java.util.Set m_ignoreImports>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        return $r2;
    }

    public boolean ignoringImport(java.lang.String)
    {
        java.util.Set $r2;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: java.util.Set m_ignoreImports>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public void clearCache()
    {
        com.hp.hpl.jena.util.FileManager $r1;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        virtualinvoke $r1.<com.hp.hpl.jena.util.FileManager: void resetCache()>();

        return;
    }

    public void loadImports(com.hp.hpl.jena.ontology.OntModel)
    {
        com.hp.hpl.jena.ontology.Profile $r3;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        com.hp.hpl.jena.ontology.OntModel r2;
        boolean $z0;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r2 := @parameter0: com.hp.hpl.jena.ontology.OntModel;

        $z0 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: boolean m_processImports>;

        if $z0 == 0 goto label1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.ontology.Profile getProfile()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void queueImports(com.hp.hpl.jena.rdf.model.Model,java.util.List,com.hp.hpl.jena.ontology.Profile)>(r2, $r1, $r3);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void loadImports(com.hp.hpl.jena.ontology.OntModel,java.util.List)>(r2, $r1);

     label1:
        return;
    }

    public void loadImport(com.hp.hpl.jena.ontology.OntModel, java.lang.String)
    {
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String r2;
        com.hp.hpl.jena.ontology.OntModel r3;
        boolean $z0;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r3 := @parameter0: com.hp.hpl.jena.ontology.OntModel;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: boolean m_processImports>;

        if $z0 == 0 goto label1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r2);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void loadImports(com.hp.hpl.jena.ontology.OntModel,java.util.List)>(r3, $r1);

     label1:
        return;
    }

    public void unloadImport(com.hp.hpl.jena.ontology.OntModel, java.lang.String)
    {
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String r2;
        com.hp.hpl.jena.ontology.OntModel r3;
        boolean $z0;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r3 := @parameter0: com.hp.hpl.jena.ontology.OntModel;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: boolean m_processImports>;

        if $z0 == 0 goto label1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r2);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void unloadImports(com.hp.hpl.jena.ontology.OntModel,java.util.List)>(r3, $r1);

     label1:
        return;
    }

    public java.lang.String getLoadedPolicyURL()
    {
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        $r1 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: java.lang.String m_policyURL>;

        return $r1;
    }

    protected void loadImports(com.hp.hpl.jena.ontology.OntModel, java.util.List)
    {
        com.hp.hpl.jena.ontology.OntDocumentManager r4;
        java.util.List r0;
        java.lang.Object $r2;
        java.lang.String r3;
        com.hp.hpl.jena.ontology.OntModel r1;
        boolean $z0, $z1, $z2;

        r4 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r1 := @parameter0: com.hp.hpl.jena.ontology.OntModel;

        r0 := @parameter1: java.util.List;

     label1:
        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>(0);

        r3 = (java.lang.String) $r2;

        $z1 = interfaceinvoke r1.<com.hp.hpl.jena.ontology.OntModel: boolean hasLoadedImport(java.lang.String)>(r3);

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r4.<com.hp.hpl.jena.ontology.OntDocumentManager: boolean ignoringImport(java.lang.String)>(r3);

        if $z2 != 0 goto label2;

        virtualinvoke r4.<com.hp.hpl.jena.ontology.OntDocumentManager: void loadImport(com.hp.hpl.jena.ontology.OntModel,java.lang.String,java.util.List)>(r1, r3, r0);

     label2:
        goto label1;

     label3:
        interfaceinvoke r1.<com.hp.hpl.jena.ontology.OntModel: void rebind()>();

        return;
    }

    protected void unloadImports(com.hp.hpl.jena.ontology.OntModel, java.util.List)
    {
        java.util.ArrayList $r6;
        com.hp.hpl.jena.rdf.model.StmtIterator $r9, $r12;
        com.hp.hpl.jena.rdf.model.Property $r8, $r11;
        java.lang.String r3, $r15, $r18;
        com.hp.hpl.jena.ontology.OntModel r1;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.ontology.Profile $r7, $r10;
        com.hp.hpl.jena.ontology.OntDocumentManager r4;
        com.hp.hpl.jena.rdf.model.Statement $r13, $r16;
        com.hp.hpl.jena.rdf.model.Resource $r14, $r17;
        java.util.List r0;
        com.hp.hpl.jena.rdf.model.Model $r5;
        java.lang.Object $r2;

        r4 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r1 := @parameter0: com.hp.hpl.jena.ontology.OntModel;

        r0 := @parameter1: java.util.List;

     label1:
        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label7;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>(0);

        r3 = (java.lang.String) $r2;

        $z1 = interfaceinvoke r1.<com.hp.hpl.jena.ontology.OntModel: boolean hasLoadedImport(java.lang.String)>(r3);

        if $z1 == 0 goto label6;

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Model getModel(java.lang.String)>(r3);

        if $r5 == null goto label6;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = interfaceinvoke r1.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property IMPORTS()>();

        $r9 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r8, null);

     label2:
        $z2 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r16 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r17 = interfaceinvoke $r16.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $r18 = interfaceinvoke $r17.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r18);

        goto label2;

     label3:
        interfaceinvoke r1.<com.hp.hpl.jena.ontology.OntModel: void removeSubModel(com.hp.hpl.jena.rdf.model.Model,boolean)>($r5, 0);

        interfaceinvoke r1.<com.hp.hpl.jena.ontology.OntModel: void removeLoadedImport(java.lang.String)>(r3);

        $r10 = interfaceinvoke r1.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r11 = interfaceinvoke $r10.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property IMPORTS()>();

        $r12 = interfaceinvoke r1.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r11, null);

     label4:
        $z3 = interfaceinvoke $r12.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r13 = interfaceinvoke $r12.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r14 = interfaceinvoke $r13.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $r15 = interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        interfaceinvoke $r6.<java.util.List: boolean remove(java.lang.Object)>($r15);

        goto label4;

     label5:
        interfaceinvoke r0.<java.util.List: boolean addAll(java.util.Collection)>($r6);

     label6:
        goto label1;

     label7:
        interfaceinvoke r1.<com.hp.hpl.jena.ontology.OntModel: void rebind()>();

        return;
    }

    protected void queueImports(com.hp.hpl.jena.rdf.model.Model, java.util.List, com.hp.hpl.jena.ontology.Profile)
    {
        com.hp.hpl.jena.ontology.Profile r1;
        java.util.Set $r9;
        com.hp.hpl.jena.ontology.OntDocumentManager r10;
        com.hp.hpl.jena.rdf.model.Statement $r5;
        com.hp.hpl.jena.rdf.model.Resource $r6;
        java.util.List r4;
        com.hp.hpl.jena.rdf.model.StmtIterator $r3;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.rdf.model.Model r0;
        java.lang.String $r7;
        com.hp.hpl.jena.ontology.OntModel $r8;
        boolean $z0, $z1;

        r10 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r4 := @parameter1: java.util.List;

        r1 := @parameter2: com.hp.hpl.jena.ontology.Profile;

        $z0 = r0 instanceof com.hp.hpl.jena.ontology.OntModel;

        if $z0 == 0 goto label1;

        $r8 = (com.hp.hpl.jena.ontology.OntModel) r0;

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.ontology.OntModel: java.util.Set listImportedOntologyURIs()>();

        interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>($r9);

        goto label3;

     label1:
        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property IMPORTS()>();

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r2, null);

     label2:
        $z1 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        return;
    }

    protected void initialiseMetadata(java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.Model $r2;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Model findMetadata(java.lang.String)>(r1);

        if $r2 == null goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void processMetadata(com.hp.hpl.jena.rdf.model.Model)>($r2);

     label1:
        return;
    }

    protected com.hp.hpl.jena.rdf.model.Model findMetadata(java.lang.String)
    {
        com.hp.hpl.jena.shared.JenaException $r9;
        java.util.StringTokenizer $r4;
        com.hp.hpl.jena.util.FileManager $r1;
        java.lang.String r0, $r5, $r8, $r13, $r15, r16;
        boolean $z0;
        org.slf4j.Logger $r11;
        com.hp.hpl.jena.ontology.OntDocumentManager r7;
        com.hp.hpl.jena.rdf.model.Model $r6;
        java.lang.Class $r2;
        java.lang.StringBuilder $r10, $r12, $r14;
        java.lang.ClassLoader $r3;
        java.io.InputStream r17;

        r7 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.hp.hpl.jena.util.FileManager;

        specialinvoke $r1.<com.hp.hpl.jena.util.FileManager: void <init>()>();

        virtualinvoke $r1.<com.hp.hpl.jena.util.FileManager: void addLocatorFile()>();

        virtualinvoke $r1.<com.hp.hpl.jena.util.FileManager: void addLocatorURL()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r1.<com.hp.hpl.jena.util.FileManager: void addLocatorClassLoader(java.lang.ClassLoader)>($r3);

     label2:
        r16 = null;

        r17 = null;

        $r4 = new java.util.StringTokenizer;

        specialinvoke $r4.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r0, ";");

     label3:
        if r17 != null goto label4;

        $z0 = virtualinvoke $r4.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label4;

        $r8 = virtualinvoke $r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r16 = $r8;

        r17 = virtualinvoke $r1.<com.hp.hpl.jena.util.FileManager: java.io.InputStream openNoMap(java.lang.String)>($r8);

        goto label3;

     label4:
        if r17 == null goto label6;

        $r5 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String guessLang(java.lang.String)>(r16);

        $r6 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model read(java.io.InputStream,java.lang.String,java.lang.String)>(r17, r16, $r5);

        r7.<com.hp.hpl.jena.ontology.OntDocumentManager: java.lang.String m_policyURL> = r16;

     label5:
        return $r6;

     label6:
        goto label8;

     label7:
        $r9 := @caughtexception;

        $r11 = <com.hp.hpl.jena.ontology.OntDocumentManager: org.slf4j.Logger log>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while reading configuration: ");

        $r13 = virtualinvoke $r9.<com.hp.hpl.jena.shared.JenaException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r15, $r9);

     label8:
        return null;

        catch com.hp.hpl.jena.shared.JenaException from label2 to label5 with label7;
    }

    protected void processMetadata(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r21;
        com.hp.hpl.jena.rdf.model.Property $r5, $r8, $r11, $r16, $r23, $r24, $r25, $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.hp.hpl.jena.util.LocationMapper $r2;
        com.hp.hpl.jena.rdf.model.ResIterator $r6, $r9;
        com.hp.hpl.jena.util.FileManager $r1;
        java.lang.String $r15, $r19, $r28;
        org.slf4j.Logger $r13;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        com.hp.hpl.jena.rdf.model.Statement $r12, $r17, $r22;
        com.hp.hpl.jena.rdf.model.Resource $r4, $r7, $r10, $r14, $r18, $r20, $r27;
        com.hp.hpl.jena.rdf.model.Model r3;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper getLocationMapper()>();

        virtualinvoke $r2.<com.hp.hpl.jena.util.LocationMapper: void processConfig(com.hp.hpl.jena.rdf.model.Model)>(r3);

        $r5 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r4 = <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Resource DOC_MGR_POLICY>;

        $r6 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.ResIterator listResourcesWithProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r5, $r4);

     label01:
        $z0 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.ResIterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r20 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.ResIterator: com.hp.hpl.jena.rdf.model.Resource nextResource()>();

        $r21 = interfaceinvoke $r20.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties()>();

     label02:
        $z2 = interfaceinvoke $r21.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r22 = interfaceinvoke $r21.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r23 = interfaceinvoke $r22.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        $r24 = <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Property CACHE_MODELS>;

        $z3 = virtualinvoke $r23.<java.lang.Object: boolean equals(java.lang.Object)>($r24);

        if $z3 == 0 goto label03;

        $z7 = interfaceinvoke $r22.<com.hp.hpl.jena.rdf.model.Statement: boolean getBoolean()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void setCacheModels(boolean)>($z7);

        goto label05;

     label03:
        $r25 = <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Property PROCESS_IMPORTS>;

        $z4 = virtualinvoke $r23.<java.lang.Object: boolean equals(java.lang.Object)>($r25);

        if $z4 == 0 goto label04;

        $z6 = interfaceinvoke $r22.<com.hp.hpl.jena.rdf.model.Statement: boolean getBoolean()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void setProcessImports(boolean)>($z6);

        goto label05;

     label04:
        $r26 = <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Property IGNORE_IMPORT>;

        $z5 = virtualinvoke $r23.<java.lang.Object: boolean equals(java.lang.Object)>($r26);

        if $z5 == 0 goto label05;

        $r27 = interfaceinvoke $r22.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $r28 = interfaceinvoke $r27.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void addIgnoreImport(java.lang.String)>($r28);

     label05:
        goto label02;

     label06:
        goto label01;

     label07:
        $r8 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r7 = <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Resource ONTOLOGY_SPEC>;

        $r9 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.ResIterator listResourcesWithProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r8, $r7);

     label08:
        $z1 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.ResIterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.ResIterator: com.hp.hpl.jena.rdf.model.Resource nextResource()>();

        $r11 = <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Property PUBLIC_URI>;

        $r12 = interfaceinvoke $r10.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getProperty(com.hp.hpl.jena.rdf.model.Property)>($r11);

        if $r12 == null goto label10;

        $r14 = interfaceinvoke $r12.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $r15 = interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $r16 = <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Property ALT_URL>;

        $r17 = interfaceinvoke $r10.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getProperty(com.hp.hpl.jena.rdf.model.Property)>($r16);

        if $r17 == null goto label09;

        $r18 = interfaceinvoke $r17.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $r19 = interfaceinvoke $r18.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void addAltEntry(java.lang.String,java.lang.String)>($r15, $r19);

     label09:
        goto label11;

     label10:
        $r13 = <com.hp.hpl.jena.ontology.OntDocumentManager: org.slf4j.Logger log>;

        interfaceinvoke $r13.<org.slf4j.Logger: void warn(java.lang.String)>("Ontology specification node lists no public URI - node ignored");

     label11:
        goto label08;

     label12:
        return;
    }

    protected void loadImport(com.hp.hpl.jena.ontology.OntModel, java.lang.String, java.util.List)
    {
        java.util.List r4;
        com.hp.hpl.jena.rdf.model.Model $r3;
        com.hp.hpl.jena.ontology.Profile $r5;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String r2;
        com.hp.hpl.jena.ontology.OntModel r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r1 := @parameter0: com.hp.hpl.jena.ontology.OntModel;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.util.List;

        $z0 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: boolean m_processImports>;

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<com.hp.hpl.jena.ontology.OntModel: void addLoadedImport(java.lang.String)>(r2);

        $r3 = specialinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Model fetchPossiblyCachedImportModel(com.hp.hpl.jena.ontology.OntModel,java.lang.String)>(r1, r2);

        if $r3 == r1 goto label1;

        $r5 = interfaceinvoke r1.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.ontology.Profile getProfile()>();

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void queueImports(com.hp.hpl.jena.rdf.model.Model,java.util.List,com.hp.hpl.jena.ontology.Profile)>($r3, r4, $r5);

        interfaceinvoke r1.<com.hp.hpl.jena.ontology.OntModel: void addSubModel(com.hp.hpl.jena.rdf.model.Model,boolean)>($r3, 0);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void addModel(java.lang.String,com.hp.hpl.jena.rdf.model.Model)>(r2, $r3);

     label1:
        return;
    }

    private com.hp.hpl.jena.rdf.model.Model fetchPossiblyCachedImportModel(com.hp.hpl.jena.ontology.OntModel, java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.Model $r2, r5;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.String r1;
        com.hp.hpl.jena.ontology.OntModel r3;
        com.hp.hpl.jena.ontology.OntModelSpec $r4;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r3 := @parameter0: com.hp.hpl.jena.ontology.OntModel;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Model getModel(java.lang.String)>(r1);

        r5 = $r2;

        if $r2 != null goto label1;

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.ontology.OntModelSpec getSpecification()>();

        r5 = specialinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Model fetchLoadedImportModel(com.hp.hpl.jena.ontology.OntModelSpec,java.lang.String)>($r4, r1);

     label1:
        return r5;
    }

    private com.hp.hpl.jena.rdf.model.Model fetchLoadedImportModel(com.hp.hpl.jena.ontology.OntModelSpec, java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.ModelMaker $r1;
        com.hp.hpl.jena.rdf.model.ModelGetter $r3;
        com.hp.hpl.jena.ontology.OntDocumentManager r5;
        com.hp.hpl.jena.ontology.OntModelSpec r0;
        com.hp.hpl.jena.ontology.OntDocumentManager$1 $r4;
        com.hp.hpl.jena.rdf.model.Model $r6, $r7;
        java.lang.String r2;
        boolean $z0, $z1;

        r5 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r0 := @parameter0: com.hp.hpl.jena.ontology.OntModelSpec;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntModelSpec: com.hp.hpl.jena.rdf.model.ModelMaker getImportModelMaker()>();

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.ModelMaker: boolean hasModel(java.lang.String)>(r2);

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.ModelMaker: com.hp.hpl.jena.rdf.model.Model getModel(java.lang.String)>(r2);

        $z1 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Model: boolean isClosed()>();

        if $z1 != 0 goto label1;

        return $r7;

     label1:
        interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.ModelMaker: void removeModel(java.lang.String)>(r2);

     label2:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntModelSpec: com.hp.hpl.jena.rdf.model.ModelGetter getImportModelGetter()>();

        $r4 = new com.hp.hpl.jena.ontology.OntDocumentManager$1;

        specialinvoke $r4.<com.hp.hpl.jena.ontology.OntDocumentManager$1: void <init>(com.hp.hpl.jena.ontology.OntDocumentManager)>(r5);

        $r6 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.ModelGetter: com.hp.hpl.jena.rdf.model.Model getModel(java.lang.String,com.hp.hpl.jena.rdf.model.ModelReader)>(r2, $r4);

        return $r6;
    }

    protected boolean read(com.hp.hpl.jena.rdf.model.Model, java.lang.String, boolean)
    {
        com.hp.hpl.jena.util.FileManager $r5;
        com.hp.hpl.jena.ontology.OntDocumentManager$ReadFailureHandler $r13, $r23;
        java.lang.String r2, $r4, $r11, $r19, $r22, r24;
        boolean z0, z1;
        org.slf4j.Logger $r8, $r15;
        com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook $r3, $r6;
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        java.lang.Exception $r12;
        com.hp.hpl.jena.rdf.model.Model r1;
        java.lang.StringBuilder $r7, $r9, $r10, $r14, $r16, $r17, $r18, $r20, $r21;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 = 0;

     label1:
        $r3 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook m_readHook>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook: java.lang.String beforeRead(com.hp.hpl.jena.rdf.model.Model,java.lang.String,com.hp.hpl.jena.ontology.OntDocumentManager)>(r1, r2, r0);

        r24 = $r4;

        if $r4 != null goto label2;

        $r8 = <com.hp.hpl.jena.ontology.OntDocumentManager: org.slf4j.Logger log>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Read hook returned null source, so assuming old value: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String)>($r11);

        r24 = r2;

        goto label3;

     label2:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.util.FileManager getFileManager()>();

        virtualinvoke $r5.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model readModel(com.hp.hpl.jena.rdf.model.Model,java.lang.String)>(r1, $r4);

     label3:
        $r6 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook m_readHook>;

        interfaceinvoke $r6.<com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook: void afterRead(com.hp.hpl.jena.rdf.model.Model,java.lang.String,com.hp.hpl.jena.ontology.OntDocumentManager)>(r1, r24, r0);

        z1 = 1;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        $r13 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.ontology.OntDocumentManager$ReadFailureHandler getReadFailureHandler()>();

        if $r13 == null goto label6;

        $r23 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.ontology.OntDocumentManager$ReadFailureHandler getReadFailureHandler()>();

        interfaceinvoke $r23.<com.hp.hpl.jena.ontology.OntDocumentManager$ReadFailureHandler: void handleFailedRead(java.lang.String,com.hp.hpl.jena.rdf.model.Model,java.lang.Exception)>(r2, r1, $r12);

        goto label7;

     label6:
        $r15 = <com.hp.hpl.jena.ontology.OntDocumentManager: org.slf4j.Logger log>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An error occurred while attempting to read from ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Msg was \'");

        $r19 = virtualinvoke $r12.<java.lang.Exception: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r22, $r12);

     label7:
        return z1;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    protected void setDefaults()
    {
        com.hp.hpl.jena.ontology.OntDocumentManager r0;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void setCacheModels(boolean)>(1);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void setProcessImports(boolean)>(1);

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntDocumentManager: void setDefaultPrefixMappings()>();

        return;
    }

    protected void setDefaultPrefixMappings()
    {
        com.hp.hpl.jena.ontology.OntDocumentManager r0;
        com.hp.hpl.jena.shared.PrefixMapping $r1, $r2, $r3;

        r0 := @this: com.hp.hpl.jena.ontology.OntDocumentManager;

        $r2 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.shared.PrefixMapping m_prefixMap>;

        $r1 = <com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping Standard>;

        interfaceinvoke $r2.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(com.hp.hpl.jena.shared.PrefixMapping)>($r1);

        $r3 = r0.<com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.shared.PrefixMapping m_prefixMap>;

        interfaceinvoke $r3.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping removeNsPrefix(java.lang.String)>("dc");

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r10;
        com.hp.hpl.jena.rdf.model.Resource $r0, $r5;
        com.hp.hpl.jena.rdf.model.Property $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9;

        <com.hp.hpl.jena.ontology.OntDocumentManager: java.lang.String ANCHOR> = "#";

        <com.hp.hpl.jena.ontology.OntDocumentManager: java.lang.String NS> = "http://jena.hpl.hp.com/schemas/2003/03/ont-manager#";

        <com.hp.hpl.jena.ontology.OntDocumentManager: java.lang.String DEFAULT_METADATA_PATH> = "file:ont-policy.rdf;file:etc/ont-policy.rdf";

        $r0 = <com.hp.hpl.jena.vocabulary.OntDocManagerVocab: com.hp.hpl.jena.rdf.model.Resource OntologySpec>;

        <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Resource ONTOLOGY_SPEC> = $r0;

        $r1 = <com.hp.hpl.jena.vocabulary.OntDocManagerVocab: com.hp.hpl.jena.rdf.model.Property publicURI>;

        <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Property PUBLIC_URI> = $r1;

        $r2 = <com.hp.hpl.jena.vocabulary.OntDocManagerVocab: com.hp.hpl.jena.rdf.model.Property altURL>;

        <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Property ALT_URL> = $r2;

        $r3 = <com.hp.hpl.jena.vocabulary.OntDocManagerVocab: com.hp.hpl.jena.rdf.model.Property prefix>;

        <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Property PREFIX> = $r3;

        $r4 = <com.hp.hpl.jena.vocabulary.OntDocManagerVocab: com.hp.hpl.jena.rdf.model.Property language>;

        <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Property LANGUAGE> = $r4;

        $r5 = <com.hp.hpl.jena.vocabulary.OntDocManagerVocab: com.hp.hpl.jena.rdf.model.Resource DocumentManagerPolicy>;

        <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Resource DOC_MGR_POLICY> = $r5;

        $r6 = <com.hp.hpl.jena.vocabulary.OntDocManagerVocab: com.hp.hpl.jena.rdf.model.Property cacheModels>;

        <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Property CACHE_MODELS> = $r6;

        $r7 = <com.hp.hpl.jena.vocabulary.OntDocManagerVocab: com.hp.hpl.jena.rdf.model.Property processImports>;

        <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Property PROCESS_IMPORTS> = $r7;

        $r8 = <com.hp.hpl.jena.vocabulary.OntDocManagerVocab: com.hp.hpl.jena.rdf.model.Property ignoreImport>;

        <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Property IGNORE_IMPORT> = $r8;

        $r9 = <com.hp.hpl.jena.vocabulary.OntDocManagerVocab: com.hp.hpl.jena.rdf.model.Property useDeclaredNsPrefixes>;

        <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.rdf.model.Property USE_DECLARED_NS_PREFIXES> = $r9;

        <com.hp.hpl.jena.ontology.OntDocumentManager: com.hp.hpl.jena.ontology.OntDocumentManager s_instance> = null;

        $r10 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/OntDocumentManager;");

        <com.hp.hpl.jena.ontology.OntDocumentManager: org.slf4j.Logger log> = $r10;

        return;
    }
}
