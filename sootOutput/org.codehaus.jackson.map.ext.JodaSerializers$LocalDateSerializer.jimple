public final class org.codehaus.jackson.map.ext.JodaSerializers$LocalDateSerializer extends org.codehaus.jackson.map.ext.JodaSerializers$JodaSerializer
{

    public void <init>()
    {
        org.codehaus.jackson.map.ext.JodaSerializers$LocalDateSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ext.JodaSerializers$LocalDateSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ext.JodaSerializers$JodaSerializer: void <init>(java.lang.Class)>(class "Lorg/joda/time/LocalDate;");

        return;
    }

    public void serialize(org.joda.time.LocalDate, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.SerializerProvider r0;
        org.codehaus.jackson.map.ext.JodaSerializers$LocalDateSerializer r3;
        org.joda.time.LocalDate$Property $r6, $r7, $r8;
        org.joda.time.LocalDate r4;
        org.codehaus.jackson.JsonGenerator r2;
        int $i0, $i1, $i2;
        org.joda.time.ReadablePartial $r9;
        java.lang.String $r5;
        org.codehaus.jackson.map.SerializationConfig$Feature $r1;
        boolean $z0;

        r3 := @this: org.codehaus.jackson.map.ext.JodaSerializers$LocalDateSerializer;

        r4 := @parameter0: org.joda.time.LocalDate;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r0 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r1 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_DATES_AS_TIMESTAMPS>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r2.<org.codehaus.jackson.JsonGenerator: void writeStartArray()>();

        $r6 = virtualinvoke r4.<org.joda.time.LocalDate: org.joda.time.LocalDate$Property year()>();

        $i0 = virtualinvoke $r6.<org.joda.time.LocalDate$Property: int get()>();

        virtualinvoke r2.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i0);

        $r7 = virtualinvoke r4.<org.joda.time.LocalDate: org.joda.time.LocalDate$Property monthOfYear()>();

        $i1 = virtualinvoke $r7.<org.joda.time.LocalDate$Property: int get()>();

        virtualinvoke r2.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i1);

        $r8 = virtualinvoke r4.<org.joda.time.LocalDate: org.joda.time.LocalDate$Property dayOfMonth()>();

        $i2 = virtualinvoke $r8.<org.joda.time.LocalDate$Property: int get()>();

        virtualinvoke r2.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i2);

        virtualinvoke r2.<org.codehaus.jackson.JsonGenerator: void writeEndArray()>();

        goto label2;

     label1:
        $r9 = (org.joda.time.ReadablePartial) r4;

        $r5 = virtualinvoke r3.<org.codehaus.jackson.map.ext.JodaSerializers$LocalDateSerializer: java.lang.String printLocalDate(org.joda.time.ReadablePartial)>($r9);

        virtualinvoke r2.<org.codehaus.jackson.JsonGenerator: void writeString(java.lang.String)>($r5);

     label2:
        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        java.lang.reflect.Type r4;
        org.codehaus.jackson.map.SerializerProvider r1;
        org.codehaus.jackson.map.ext.JodaSerializers$LocalDateSerializer r0;
        java.lang.String $r5;
        org.codehaus.jackson.map.SerializationConfig$Feature $r2;
        boolean $z0;
        org.codehaus.jackson.node.ObjectNode $r3;

        r0 := @this: org.codehaus.jackson.map.ext.JodaSerializers$LocalDateSerializer;

        r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r4 := @parameter1: java.lang.reflect.Type;

        $r2 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_DATES_AS_TIMESTAMPS>;

        $z0 = virtualinvoke r1.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r2);

        if $z0 == 0 goto label1;

        $r5 = "array";

        goto label2;

     label1:
        $r5 = "string";

     label2:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.ext.JodaSerializers$LocalDateSerializer: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>($r5, 1);

        return $r3;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.joda.time.LocalDate $r4;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.Object r1;
        org.codehaus.jackson.map.ext.JodaSerializers$LocalDateSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ext.JodaSerializers$LocalDateSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (org.joda.time.LocalDate) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ext.JodaSerializers$LocalDateSerializer: void serialize(org.joda.time.LocalDate,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r2, r3);

        return;
    }
}
