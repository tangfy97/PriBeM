final class org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache extends org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache
{
    final org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1;

    private void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r1;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$1)>(null);

        return;
    }

    void resolveRetain(int)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target $r1, $r2;
        int i0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void access$500(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r1);

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: int access$306(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r2);

        return;
    }

    void resolveDeleteElementEnd()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target $r1, $r2, $r3;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: int access$306(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r1);

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target access$400(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r2);

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: int access$306(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r3);

        return;
    }

    void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target, org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$1)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r1;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$1 r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>(r1);

        return;
    }
}
