public class com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer extends com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer
{
    private com.mycila.inject.internal.asm.Type wrapper;
    static java.lang.Class class$java$lang$Throwable;

    public void <init>(java.lang.Class)
    {
        com.mycila.inject.internal.asm.Type $r2;
        java.lang.reflect.Constructor $r9;
        java.lang.reflect.Constructor[] $r3;
        com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer r0;
        java.lang.StringBuffer $r5, $r6, $r7;
        int $i0, $i1, i2;
        java.lang.String $r8;
        boolean $z0, z1;
        java.lang.Class[] $r10;
        java.lang.IllegalArgumentException $r4;
        java.lang.Class r1, $r11, $r12, $r13;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: void <init>()>();

        $r2 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>(r1);

        r0.<com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer: com.mycila.inject.internal.asm.Type wrapper> = $r2;

        z1 = 0;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        i2 = 0;

     label1:
        $i0 = lengthof $r3;

        if i2 >= $i0 goto label5;

        $r9 = $r3[i2];

        $r10 = virtualinvoke $r9.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r10;

        if $i1 != 1 goto label4;

        $r12 = $r10[0];

        $r11 = <com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer: java.lang.Class class$java$lang$Throwable>;

        if $r11 != null goto label2;

        $r13 = staticinvoke <com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer: java.lang.Class class$(java.lang.String)>("java.lang.Throwable");

        <com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer: java.lang.Class class$java$lang$Throwable> = $r13;

        goto label3;

     label2:
        $r13 = <com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer: java.lang.Class class$java$lang$Throwable>;

     label3:
        $z0 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label4;

        z1 = 1;

        goto label5;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        if z1 != 0 goto label6;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not have a single-arg constructor that takes a Throwable");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label6:
        return;
    }

    public com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int, com.mycila.inject.internal.cglib.core.Signature, com.mycila.inject.internal.asm.Type[])
    {
        com.mycila.inject.internal.cglib.core.Signature r1, $r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r3;
        com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer$1 $r5;
        com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer r0;
        int i0;
        com.mycila.inject.internal.asm.Type[] r2;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer;

        i0 := @parameter0: int;

        r1 := @parameter1: com.mycila.inject.internal.cglib.core.Signature;

        r2 := @parameter2: com.mycila.inject.internal.asm.Type[];

        $r3 = specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(i0, r1, r2);

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isAbstract(int)>(i0);

        if $z0 != 0 goto label1;

        $r4 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.cglib.core.Signature SIG_STATIC>;

        $z1 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.Signature: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

     label1:
        return $r3;

     label2:
        $r5 = new com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer$1;

        specialinvoke $r5.<com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer$1: void <init>(com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer,com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type[])>(r0, $r3, r2);

        return $r5;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static com.mycila.inject.internal.asm.Type access$000(com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer)
    {
        com.mycila.inject.internal.asm.Type $r1;
        com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer r0;

        r0 := @parameter0: com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer;

        $r1 = r0.<com.mycila.inject.internal.cglib.transform.impl.UndeclaredThrowableTransformer: com.mycila.inject.internal.asm.Type wrapper>;

        return $r1;
    }
}
