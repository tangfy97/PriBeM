abstract class com.sun.xml.bind.v2.model.impl.PropertyInfoImpl extends java.lang.Object implements com.sun.xml.bind.v2.model.core.PropertyInfo, com.sun.xml.bind.v2.model.'annotation'.Locatable, java.lang.Comparable
{
    protected final com.sun.xml.bind.v2.model.impl.PropertySeed seed;
    private final boolean isCollection;
    private final com.sun.xml.bind.v2.model.core.ID id;
    private final javax.activation.MimeType expectedMimeType;
    private final boolean inlineBinary;
    private final javax.xml.namespace.QName schemaType;
    protected final com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent;
    private final com.sun.xml.bind.v2.model.core.Adapter adapter;

    protected void <init>(com.sun.xml.bind.v2.model.impl.ClassInfoImpl, com.sun.xml.bind.v2.model.impl.PropertySeed)
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed r1, $r4, $r14, $r17, $r47, $r51, $r52, $r58;
        javax.xml.namespace.QName $r61;
        com.sun.xml.bind.v2.model.core.ID $r56;
        java.lang.Object[] $r22, $r41;
        java.lang.AssertionError $r49;
        java.lang.String $r26, $r28, $r29, $r45, $r46;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r3, $r23, $r30, $r43;
        com.sun.xml.bind.v2.model.core.Adapter $r11, $r31, $r36;
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        com.sun.xml.bind.v2.model.nav.Navigator $r6, $r7, $r13, $r25, $r27, $r32, $r34, $r35, $r38;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r12, $r19, $r37, $r57;
        javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter $r10, $r54, r55;
        boolean $z0, $z1, $z2, $z3, $z4;
        javax.xml.bind.'annotation'.XmlAttachmentRef r16;
        com.sun.xml.bind.v2.model.impl.Messages $r24, $r44;
        java.lang.'annotation'.Annotation $r15, $r18, $r48;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r21, $r40;
        javax.activation.MimeType $r5, r50;
        com.sun.xml.bind.v2.model.core.PropertyKind $r39;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r2;
        java.lang.Object $r8, $r9, $r20, $r33, $r53, $r59, $r60;
        java.lang.Class $r42;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        r2 := @parameter0: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r1 := @parameter1: com.sun.xml.bind.v2.model.impl.PropertySeed;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed> = r1;

        r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent> = r2;

        if r2 != null goto label01;

        $r49 = new java.lang.AssertionError;

        specialinvoke $r49.<java.lang.AssertionError: void <init>()>();

        throw $r49;

     label01:
        $r4 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r3 = r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r5 = staticinvoke <com.sun.xml.bind.v2.model.impl.Util: javax.activation.MimeType calcExpectedMediaType(com.sun.xml.bind.v2.model.'annotation'.AnnotationSource,com.sun.xml.bind.v2.model.impl.ModelBuilder)>($r4, $r3);

        r50 = $r5;

        if $r5 == null goto label02;

        $r39 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.core.PropertyKind kind()>();

        $z2 = $r39.<com.sun.xml.bind.v2.model.core.PropertyKind: boolean canHaveXmlMimeType>;

        if $z2 != 0 goto label02;

        $r43 = r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r40 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r44 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages ILLEGAL_ANNOTATION>;

        $r41 = newarray (java.lang.Object)[1];

        $r42 = class "Ljavax/xml/bind/annotation/XmlMimeType;";

        $r45 = virtualinvoke $r42.<java.lang.Class: java.lang.String getName()>();

        $r41[0] = $r45;

        $r46 = virtualinvoke $r44.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r41);

        $r47 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r48 = interfaceinvoke $r47.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.'annotation'.Annotation readAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlMimeType;");

        specialinvoke $r40.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,java.lang.'annotation'.Annotation)>($r46, $r48);

        virtualinvoke $r43.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r40);

        r50 = null;

     label02:
        r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: javax.activation.MimeType expectedMimeType> = r50;

        $r51 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $z3 = interfaceinvoke $r51.<com.sun.xml.bind.v2.model.impl.PropertySeed: boolean hasAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlInlineBinaryData;");

        r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: boolean inlineBinary> = $z3;

        $r52 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r53 = interfaceinvoke $r52.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.Object getRawType()>();

        $r54 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter getApplicableAdapter(java.lang.Object)>($r53);

        if $r54 == null goto label03;

        r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: boolean isCollection> = 0;

        $r36 = new com.sun.xml.bind.v2.model.core.Adapter;

        $r37 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r38 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        specialinvoke $r36.<com.sun.xml.bind.v2.model.core.Adapter: void <init>(javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter,com.sun.xml.bind.v2.model.'annotation'.AnnotationReader,com.sun.xml.bind.v2.model.nav.Navigator)>($r54, $r37, $r38);

        r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.core.Adapter adapter> = $r36;

        goto label10;

     label03:
        $r6 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r7 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r8 = interfaceinvoke $r7.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object ref(java.lang.Class)>(class "Ljava/util/Collection;");

        $z0 = interfaceinvoke $r6.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSubClassOf(java.lang.Object,java.lang.Object)>($r53, $r8);

        if $z0 != 0 goto label04;

        $r35 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z1 = interfaceinvoke $r35.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isArrayButNotByteArray(java.lang.Object)>($r53);

        if $z1 == 0 goto label05;

     label04:
        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: boolean isCollection> = $z4;

        $r9 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: java.lang.Object getIndividualType()>();

        $r10 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter getApplicableAdapter(java.lang.Object)>($r9);

        if $r10 != null goto label09;

        $r14 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r15 = interfaceinvoke $r14.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.'annotation'.Annotation readAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlAttachmentRef;");

        r16 = (javax.xml.bind.'annotation'.XmlAttachmentRef) $r15;

        if r16 == null goto label07;

        $r30 = r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r30.<com.sun.xml.bind.v2.model.impl.ModelBuilder: boolean hasSwaRef> = 1;

        $r31 = new com.sun.xml.bind.v2.model.core.Adapter;

        $r32 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r33 = interfaceinvoke $r32.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object asDecl(java.lang.Class)>(class "Lcom/sun/xml/bind/v2/runtime/SwaRefAdapter;");

        $r34 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        specialinvoke $r31.<com.sun.xml.bind.v2.model.core.Adapter: void <init>(java.lang.Object,com.sun.xml.bind.v2.model.nav.Navigator)>($r33, $r34);

        r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.core.Adapter adapter> = $r31;

        goto label08;

     label07:
        r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.core.Adapter adapter> = null;

        $r17 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r18 = interfaceinvoke $r17.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.'annotation'.Annotation readAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/adapters/XmlJavaTypeAdapter;");

        r55 = (javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter) $r18;

        if r55 == null goto label08;

        $r19 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r20 = interfaceinvoke $r19.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.Object getClassValue(java.lang.'annotation'.Annotation,java.lang.String)>(r55, "value");

        $r23 = r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r21 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r24 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages UNMATCHABLE_ADAPTER>;

        $r22 = newarray (java.lang.Object)[2];

        $r25 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r26 = interfaceinvoke $r25.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getTypeName(java.lang.Object)>($r20);

        $r22[0] = $r26;

        $r27 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r28 = interfaceinvoke $r27.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getTypeName(java.lang.Object)>($r53);

        $r22[1] = $r28;

        $r29 = virtualinvoke $r24.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r22);

        specialinvoke $r21.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,java.lang.'annotation'.Annotation)>($r29, r55);

        virtualinvoke $r23.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r21);

     label08:
        goto label10;

     label09:
        $r11 = new com.sun.xml.bind.v2.model.core.Adapter;

        $r12 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r13 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        specialinvoke $r11.<com.sun.xml.bind.v2.model.core.Adapter: void <init>(javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter,com.sun.xml.bind.v2.model.'annotation'.AnnotationReader,com.sun.xml.bind.v2.model.nav.Navigator)>($r10, $r12, $r13);

        r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.core.Adapter adapter> = $r11;

     label10:
        $r56 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.core.ID calcId()>();

        r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.core.ID id> = $r56;

        $r57 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r58 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r59 = r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        $r60 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: java.lang.Object getIndividualType()>();

        $r61 = staticinvoke <com.sun.xml.bind.v2.model.impl.Util: javax.xml.namespace.QName calcSchemaType(com.sun.xml.bind.v2.model.'annotation'.AnnotationReader,com.sun.xml.bind.v2.model.'annotation'.AnnotationSource,java.lang.Object,java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r57, $r58, $r59, $r60, r0);

        r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: javax.xml.namespace.QName schemaType> = $r61;

        return;
    }

    public com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent()
    {
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        return $r1;
    }

    protected final com.sun.xml.bind.v2.model.nav.Navigator nav()
    {
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r1;
        com.sun.xml.bind.v2.model.nav.Navigator $r2;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r2 = virtualinvoke $r1.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        return $r2;
    }

    protected final com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()
    {
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r1;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r2;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r2 = virtualinvoke $r1.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        return $r2;
    }

    public java.lang.Object getRawType()
    {
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        java.lang.Object $r2;
        com.sun.xml.bind.v2.model.impl.PropertySeed $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r2 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.Object getRawType()>();

        return $r2;
    }

    public java.lang.Object getIndividualType()
    {
        boolean $z0, $z1, $z2;
        com.sun.xml.bind.v2.model.core.Adapter $r1, $r15;
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        java.lang.Object $r2, $r6, $r7, $r10, $r12, $r14, $r16;
        com.sun.xml.bind.v2.model.nav.Navigator $r3, $r4, $r5, $r8, $r9, $r11, $r13;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.core.Adapter adapter>;

        if $r1 == null goto label1;

        $r15 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.core.Adapter adapter>;

        $r16 = $r15.<com.sun.xml.bind.v2.model.core.Adapter: java.lang.Object defaultType>;

        return $r16;

     label1:
        $r2 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: java.lang.Object getRawType()>();

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: boolean isCollection()>();

        if $z0 != 0 goto label2;

        return $r2;

     label2:
        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z1 = interfaceinvoke $r3.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isArrayButNotByteArray(java.lang.Object)>($r2);

        if $z1 == 0 goto label3;

        $r13 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r14 = interfaceinvoke $r13.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object getComponentType(java.lang.Object)>($r2);

        return $r14;

     label3:
        $r4 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r5 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r6 = interfaceinvoke $r5.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object asDecl(java.lang.Class)>(class "Ljava/util/Collection;");

        $r7 = interfaceinvoke $r4.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object getBaseClass(java.lang.Object,java.lang.Object)>($r2, $r6);

        $r8 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z2 = interfaceinvoke $r8.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isParameterizedType(java.lang.Object)>($r7);

        if $z2 == 0 goto label4;

        $r11 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r12 = interfaceinvoke $r11.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object getTypeArgument(java.lang.Object,int)>($r7, 0);

        return $r12;

     label4:
        $r9 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r10 = interfaceinvoke $r9.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object ref(java.lang.Class)>(class "Ljava/lang/Object;");

        return $r10;
    }

    public final java.lang.String getName()
    {
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.PropertySeed $r1;
        java.lang.String $r2;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r2 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.String getName()>();

        return $r2;
    }

    private boolean isApplicable(javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter, java.lang.Object)
    {
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r2, $r6;
        javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter r0;
        boolean $z0, $z1, $z2;
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r1;
        java.lang.Object $r3, r5, $r7, $r10, $r11, $r14;
        com.sun.xml.bind.v2.model.nav.Navigator $r4, $r8, $r9, $r12, $r13, $r15;

        r1 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        r0 := @parameter0: javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter;

        r5 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r3 = interfaceinvoke $r2.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.Object getClassValue(java.lang.'annotation'.Annotation,java.lang.String)>(r0, "type");

        $r4 = virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z0 = interfaceinvoke $r4.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSameType(java.lang.Object,java.lang.Object)>(r5, $r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r6 = virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r7 = interfaceinvoke $r6.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.Object getClassValue(java.lang.'annotation'.Annotation,java.lang.String)>(r0, "value");

        $r8 = virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r9 = virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r10 = interfaceinvoke $r9.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object asDecl(java.lang.Class)>(class "Ljavax/xml/bind/annotation/adapters/XmlAdapter;");

        $r11 = interfaceinvoke $r8.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object getBaseClass(java.lang.Object,java.lang.Object)>($r7, $r10);

        $r12 = virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z1 = interfaceinvoke $r12.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isParameterizedType(java.lang.Object)>($r11);

        if $z1 != 0 goto label3;

        return 1;

     label3:
        $r13 = virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r14 = interfaceinvoke $r13.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object getTypeArgument(java.lang.Object,int)>($r11, 1);

        $r15 = virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z2 = interfaceinvoke $r15.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSubClassOf(java.lang.Object,java.lang.Object)>(r5, $r14);

        return $z2;
    }

    private javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter getApplicableAdapter(java.lang.Object)
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed $r1, $r5, $r10, $r17;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r3, $r8, $r16;
        int i0, i1;
        javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter $r20, r21, r23, r24;
        boolean $z0, $z1, $z2, $z3;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r4, $r9;
        javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter[] $r19;
        java.lang.'annotation'.Annotation $r2, $r7, $r12, $r18;
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        java.lang.Object $r6, $r11, r13, $r15;
        javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapters $r22;
        com.sun.xml.bind.v2.model.nav.Navigator $r14;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        r13 := @parameter0: java.lang.Object;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r2 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.'annotation'.Annotation readAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/adapters/XmlJavaTypeAdapter;");

        r23 = (javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter) $r2;

        if r23 == null goto label1;

        $z3 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: boolean isApplicable(javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter,java.lang.Object)>(r23, r13);

        if $z3 == 0 goto label1;

        return r23;

     label1:
        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r4 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r6 = $r4.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        $r5 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r7 = interfaceinvoke $r3.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation getPackageAnnotation(java.lang.Class,java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(class "Ljavax/xml/bind/annotation/adapters/XmlJavaTypeAdapters;", $r6, $r5);

        $r22 = (javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapters) $r7;

        if $r22 == null goto label4;

        $r19 = interfaceinvoke $r22.<javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapters: javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter[] value()>();

        i0 = lengthof $r19;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r21 = $r19[i1];

        $z2 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: boolean isApplicable(javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter,java.lang.Object)>(r21, r13);

        if $z2 == 0 goto label3;

        return r21;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $r8 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r9 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r11 = $r9.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        $r10 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r12 = interfaceinvoke $r8.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation getPackageAnnotation(java.lang.Class,java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(class "Ljavax/xml/bind/annotation/adapters/XmlJavaTypeAdapter;", $r11, $r10);

        $r20 = (javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter) $r12;

        $z0 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: boolean isApplicable(javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter,java.lang.Object)>($r20, r13);

        if $z0 == 0 goto label5;

        return $r20;

     label5:
        $r14 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r15 = interfaceinvoke $r14.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object asDecl(java.lang.Object)>(r13);

        if $r15 == null goto label6;

        $r16 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r17 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r18 = interfaceinvoke $r16.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation getClassAnnotation(java.lang.Class,java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(class "Ljavax/xml/bind/annotation/adapters/XmlJavaTypeAdapter;", $r15, $r17);

        r24 = (javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter) $r18;

        if r24 == null goto label6;

        $z1 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: boolean isApplicable(javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter,java.lang.Object)>(r24, r13);

        if $z1 == 0 goto label6;

        return r24;

     label6:
        return null;
    }

    public com.sun.xml.bind.v2.model.core.Adapter getAdapter()
    {
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        com.sun.xml.bind.v2.model.core.Adapter $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.core.Adapter adapter>;

        return $r1;
    }

    public final java.lang.String displayName()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r3;
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r1;
        java.lang.StringBuilder $r0, $r6, $r7, $r9;
        java.lang.Object $r4;
        java.lang.String $r5, $r8, $r10;
        com.sun.xml.bind.v2.model.nav.Navigator $r2;

        r1 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r3 = r1.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r4 = virtualinvoke $r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object getClazz()>();

        $r5 = interfaceinvoke $r2.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getClassName(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

        $r8 = virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public final com.sun.xml.bind.v2.model.core.ID id()
    {
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        com.sun.xml.bind.v2.model.core.ID $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.core.ID id>;

        return $r1;
    }

    private com.sun.xml.bind.v2.model.core.ID calcId()
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed $r1, $r2, $r17;
        java.lang.Object[] $r12;
        java.lang.String $r15, $r16;
        boolean $z0, $z1, $z2;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r13;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r10;
        com.sun.xml.bind.v2.model.impl.Messages $r14;
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r11;
        java.lang.Object $r6, $r8;
        com.sun.xml.bind.v2.model.core.ID $r3, $r4, $r9;
        com.sun.xml.bind.v2.model.nav.Navigator $r5, $r7;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $z0 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.impl.PropertySeed: boolean hasAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlID;");

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r6 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: java.lang.Object getIndividualType()>();

        $r7 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r8 = interfaceinvoke $r7.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object ref(java.lang.Class)>(class "Ljava/lang/String;");

        $z2 = interfaceinvoke $r5.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSameType(java.lang.Object,java.lang.Object)>($r6, $r8);

        if $z2 != 0 goto label1;

        $r10 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r13 = $r10.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r11 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r14 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages ID_MUST_BE_STRING>;

        $r12 = newarray (java.lang.Object)[1];

        $r15 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: java.lang.String getName()>();

        $r12[0] = $r15;

        $r16 = virtualinvoke $r14.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r12);

        $r17 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        specialinvoke $r11.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r16, $r17);

        virtualinvoke $r13.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r11);

     label1:
        $r9 = <com.sun.xml.bind.v2.model.core.ID: com.sun.xml.bind.v2.model.core.ID ID>;

        return $r9;

     label2:
        $r2 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $z1 = interfaceinvoke $r2.<com.sun.xml.bind.v2.model.impl.PropertySeed: boolean hasAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlIDREF;");

        if $z1 == 0 goto label3;

        $r4 = <com.sun.xml.bind.v2.model.core.ID: com.sun.xml.bind.v2.model.core.ID IDREF>;

        return $r4;

     label3:
        $r3 = <com.sun.xml.bind.v2.model.core.ID: com.sun.xml.bind.v2.model.core.ID NONE>;

        return $r3;
    }

    public final javax.activation.MimeType getExpectedMimeType()
    {
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        javax.activation.MimeType $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: javax.activation.MimeType expectedMimeType>;

        return $r1;
    }

    public final boolean inlineBinaryData()
    {
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $z0 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: boolean inlineBinary>;

        return $z0;
    }

    public final javax.xml.namespace.QName getSchemaType()
    {
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        javax.xml.namespace.QName $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: javax.xml.namespace.QName schemaType>;

        return $r1;
    }

    public final boolean isCollection()
    {
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $z0 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: boolean isCollection>;

        return $z0;
    }

    protected void link()
    {
        java.lang.Object[] $r9;
        java.lang.String $r16, $r17;
        boolean $z0, $z1;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r11, $r12;
        com.sun.xml.bind.v2.model.core.TypeInfo r6;
        java.util.Iterator $r4;
        java.util.Collection $r3;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r7, $r10;
        com.sun.xml.bind.v2.model.impl.Messages $r13;
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r8;
        java.lang.Object $r5, $r15;
        com.sun.xml.bind.v2.model.core.ID $r1, $r2;
        com.sun.xml.bind.v2.model.nav.Navigator $r14;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r2 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.core.ID id>;

        $r1 = <com.sun.xml.bind.v2.model.core.ID: com.sun.xml.bind.v2.model.core.ID IDREF>;

        if $r2 != $r1 goto label3;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: java.util.Collection ref()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.sun.xml.bind.v2.model.core.TypeInfo) $r5;

        $z1 = interfaceinvoke r6.<com.sun.xml.bind.v2.model.core.TypeInfo: boolean canBeReferencedByIDREF()>();

        if $z1 != 0 goto label2;

        $r7 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r12 = $r7.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r8 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r13 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages INVALID_IDREF>;

        $r9 = newarray (java.lang.Object)[1];

        $r10 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r11 = $r10.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r14 = $r11.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.nav.Navigator nav>;

        $r15 = interfaceinvoke r6.<com.sun.xml.bind.v2.model.core.TypeInfo: java.lang.Object getType()>();

        $r16 = interfaceinvoke $r14.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getTypeName(java.lang.Object)>($r15);

        $r9[0] = $r16;

        $r17 = virtualinvoke $r13.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r9);

        specialinvoke $r8.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r17, r0);

        virtualinvoke $r12.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r8);

     label2:
        goto label1;

     label3:
        return;
    }

    public com.sun.xml.bind.v2.model.'annotation'.Locatable getUpstream()
    {
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        return $r1;
    }

    public com.sun.xml.bind.v2.runtime.Location getLocation()
    {
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.PropertySeed $r1;
        com.sun.xml.bind.v2.runtime.Location $r2;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r2 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.impl.PropertySeed: com.sun.xml.bind.v2.runtime.Location getLocation()>();

        return $r2;
    }

    protected final javax.xml.namespace.QName calcXmlName(javax.xml.bind.'annotation'.XmlElement)
    {
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r1;
        javax.xml.namespace.QName $r2, $r5;
        java.lang.String $r3, $r4;
        javax.xml.bind.'annotation'.XmlElement r0;

        r1 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        r0 := @parameter0: javax.xml.bind.'annotation'.XmlElement;

        if r0 == null goto label1;

        $r3 = interfaceinvoke r0.<javax.xml.bind.'annotation'.XmlElement: java.lang.String namespace()>();

        $r4 = interfaceinvoke r0.<javax.xml.bind.'annotation'.XmlElement: java.lang.String name()>();

        $r5 = specialinvoke r1.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: javax.xml.namespace.QName calcXmlName(java.lang.String,java.lang.String)>($r3, $r4);

        return $r5;

     label1:
        $r2 = specialinvoke r1.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: javax.xml.namespace.QName calcXmlName(java.lang.String,java.lang.String)>("##default", "##default");

        return $r2;
    }

    protected final javax.xml.namespace.QName calcXmlName(javax.xml.bind.'annotation'.XmlElementWrapper)
    {
        javax.xml.bind.'annotation'.XmlElementWrapper r0;
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r1;
        javax.xml.namespace.QName $r2, $r5;
        java.lang.String $r3, $r4;

        r1 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        r0 := @parameter0: javax.xml.bind.'annotation'.XmlElementWrapper;

        if r0 == null goto label1;

        $r3 = interfaceinvoke r0.<javax.xml.bind.'annotation'.XmlElementWrapper: java.lang.String namespace()>();

        $r4 = interfaceinvoke r0.<javax.xml.bind.'annotation'.XmlElementWrapper: java.lang.String name()>();

        $r5 = specialinvoke r1.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: javax.xml.namespace.QName calcXmlName(java.lang.String,java.lang.String)>($r3, $r4);

        return $r5;

     label1:
        $r2 = specialinvoke r1.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: javax.xml.namespace.QName calcXmlName(java.lang.String,java.lang.String)>("##default", "##default");

        return $r2;
    }

    private javax.xml.namespace.QName calcXmlName(java.lang.String, java.lang.String)
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed $r1;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r2;
        javax.xml.bind.'annotation'.XmlNsForm $r8;
        int[] $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.String r13, r14, $r16, $r17;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r12;
        boolean $z0, $z1;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r3, $r9, $r11;
        java.lang.'annotation'.Annotation $r5;
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        java.lang.Object $r4;
        javax.xml.namespace.QName $r10, $r15;
        javax.xml.bind.'annotation'.XmlSchema r6;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        r13 := @parameter0: java.lang.String;

        r14 := @parameter1: java.lang.String;

        staticinvoke <com.sun.xml.bind.v2.TODO: void checkSpec()>();

        $i0 = virtualinvoke r14.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $z0 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>("##default");

        if $z0 == 0 goto label2;

     label1:
        $r1 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        r14 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.String getName()>();

     label2:
        $z1 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("##default");

        if $z1 == 0 goto label9;

        $r2 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r3 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r4 = virtualinvoke $r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object getClazz()>();

        $r5 = interfaceinvoke $r2.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation getPackageAnnotation(java.lang.Class,java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(class "Ljavax/xml/bind/annotation/XmlSchema;", $r4, r0);

        r6 = (javax.xml.bind.'annotation'.XmlSchema) $r5;

        if r6 == null goto label8;

        $r7 = <com.sun.xml.bind.v2.model.impl.PropertyInfoImpl$1: int[] $SwitchMap$javax$xml$bind$annotation$XmlNsForm>;

        $r8 = interfaceinvoke r6.<javax.xml.bind.'annotation'.XmlSchema: javax.xml.bind.'annotation'.XmlNsForm elementFormDefault()>();

        $i1 = virtualinvoke $r8.<javax.xml.bind.'annotation'.XmlNsForm: int ordinal()>();

        $i2 = $r7[$i1];

        tableswitch($i2)
        {
            case 1: goto label3;
            case 2: goto label6;
            case 3: goto label6;
            default: goto label7;
        };

     label3:
        $r9 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r10 = virtualinvoke $r9.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: javax.xml.namespace.QName getTypeName()>();

        if $r10 == null goto label4;

        r13 = virtualinvoke $r10.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        goto label5;

     label4:
        r13 = interfaceinvoke r6.<javax.xml.bind.'annotation'.XmlSchema: java.lang.String namespace()>();

     label5:
        $i3 = virtualinvoke r13.<java.lang.String: int length()>();

        if $i3 != 0 goto label7;

        $r11 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r12 = $r11.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        r13 = $r12.<com.sun.xml.bind.v2.model.impl.ModelBuilder: java.lang.String defaultNsUri>;

        goto label7;

     label6:
        r13 = "";

     label7:
        goto label9;

     label8:
        r13 = "";

     label9:
        $r15 = new javax.xml.namespace.QName;

        $r16 = virtualinvoke r13.<java.lang.String: java.lang.String intern()>();

        $r17 = virtualinvoke r14.<java.lang.String: java.lang.String intern()>();

        specialinvoke $r15.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r16, $r17);

        return $r15;
    }

    public int compareTo(com.sun.xml.bind.v2.model.impl.PropertyInfoImpl)
    {
        int $i0;
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0, r2;
        java.lang.String $r1, $r3;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        r2 := @parameter0: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: java.lang.String getName()>();

        $r3 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3);

        return $i0;
    }

    public final java.lang.'annotation'.Annotation readAnnotation(java.lang.Class)
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed $r2;
        java.lang.'annotation'.Annotation $r3;
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        java.lang.Class r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r3 = interfaceinvoke $r2.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.'annotation'.Annotation readAnnotation(java.lang.Class)>(r1);

        return $r3;
    }

    public final boolean hasAnnotation(java.lang.Class)
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed $r2;
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        java.lang.Class r1;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $z0 = interfaceinvoke $r2.<com.sun.xml.bind.v2.model.impl.PropertySeed: boolean hasAnnotation(java.lang.Class)>(r1);

        return $z0;
    }

    public volatile com.sun.xml.bind.v2.model.core.TypeInfo parent()
    {
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent()>();

        return $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        int $i0;
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r0, $r2;
        java.lang.Object r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.PropertyInfoImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.sun.xml.bind.v2.model.impl.PropertyInfoImpl) r1;

        $i0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: int compareTo(com.sun.xml.bind.v2.model.impl.PropertyInfoImpl)>($r2);

        return $i0;
    }
}
