public class org.codehaus.jackson.Version extends java.lang.Object implements java.lang.Comparable
{
    private static final org.codehaus.jackson.Version UNKNOWN_VERSION;
    protected final int _majorVersion;
    protected final int _minorVersion;
    protected final int _patchLevel;
    protected final java.lang.String _snapshotInfo;

    public void <init>(int, int, int, java.lang.String)
    {
        org.codehaus.jackson.Version r0;
        int i0, i1, i2;
        java.lang.String r1;

        r0 := @this: org.codehaus.jackson.Version;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.Version: int _majorVersion> = i0;

        r0.<org.codehaus.jackson.Version: int _minorVersion> = i1;

        r0.<org.codehaus.jackson.Version: int _patchLevel> = i2;

        r0.<org.codehaus.jackson.Version: java.lang.String _snapshotInfo> = r1;

        return;
    }

    public static org.codehaus.jackson.Version unknownVersion()
    {
        org.codehaus.jackson.Version $r0;

        $r0 = <org.codehaus.jackson.Version: org.codehaus.jackson.Version UNKNOWN_VERSION>;

        return $r0;
    }

    public boolean isUknownVersion()
    {
        org.codehaus.jackson.Version r0, $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.Version;

        $r1 = <org.codehaus.jackson.Version: org.codehaus.jackson.Version UNKNOWN_VERSION>;

        if r0 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isSnapshot()
    {
        org.codehaus.jackson.Version r0;
        int $i0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.Version;

        $r1 = r0.<org.codehaus.jackson.Version: java.lang.String _snapshotInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.Version: java.lang.String _snapshotInfo>;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getMajorVersion()
    {
        int $i0;
        org.codehaus.jackson.Version r0;

        r0 := @this: org.codehaus.jackson.Version;

        $i0 = r0.<org.codehaus.jackson.Version: int _majorVersion>;

        return $i0;
    }

    public int getMinorVersion()
    {
        int $i0;
        org.codehaus.jackson.Version r0;

        r0 := @this: org.codehaus.jackson.Version;

        $i0 = r0.<org.codehaus.jackson.Version: int _minorVersion>;

        return $i0;
    }

    public int getPatchLevel()
    {
        int $i0;
        org.codehaus.jackson.Version r0;

        r0 := @this: org.codehaus.jackson.Version;

        $i0 = r0.<org.codehaus.jackson.Version: int _patchLevel>;

        return $i0;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.Version r1;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r0, $r2, $r3, $r5;
        java.lang.String $r4, $r6;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.Version;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $i0 = r1.<org.codehaus.jackson.Version: int _majorVersion>;

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i1 = r1.<org.codehaus.jackson.Version: int _minorVersion>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i2 = r1.<org.codehaus.jackson.Version: int _patchLevel>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $z0 = virtualinvoke r1.<org.codehaus.jackson.Version: boolean isSnapshot()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $r6 = r1.<org.codehaus.jackson.Version: java.lang.String _snapshotInfo>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

     label1:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public int hashCode()
    {
        org.codehaus.jackson.Version r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.codehaus.jackson.Version;

        $i1 = r0.<org.codehaus.jackson.Version: int _majorVersion>;

        $i0 = r0.<org.codehaus.jackson.Version: int _minorVersion>;

        $i3 = $i1 + $i0;

        $i2 = r0.<org.codehaus.jackson.Version: int _patchLevel>;

        $i4 = $i3 + $i2;

        return $i4;
    }

    public boolean equals(java.lang.Object)
    {
        org.codehaus.jackson.Version r1, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object r0;
        java.lang.Class $r2, $r3;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.Version;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.codehaus.jackson.Version) r0;

        $i1 = r4.<org.codehaus.jackson.Version: int _majorVersion>;

        $i0 = r1.<org.codehaus.jackson.Version: int _majorVersion>;

        if $i1 != $i0 goto label4;

        $i3 = r4.<org.codehaus.jackson.Version: int _minorVersion>;

        $i2 = r1.<org.codehaus.jackson.Version: int _minorVersion>;

        if $i3 != $i2 goto label4;

        $i5 = r4.<org.codehaus.jackson.Version: int _patchLevel>;

        $i4 = r1.<org.codehaus.jackson.Version: int _patchLevel>;

        if $i5 != $i4 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    public int compareTo(org.codehaus.jackson.Version)
    {
        org.codehaus.jackson.Version r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;

        r0 := @this: org.codehaus.jackson.Version;

        r1 := @parameter0: org.codehaus.jackson.Version;

        $i1 = r0.<org.codehaus.jackson.Version: int _majorVersion>;

        $i0 = r1.<org.codehaus.jackson.Version: int _majorVersion>;

        i6 = $i1 - $i0;

        if i6 != 0 goto label1;

        $i3 = r0.<org.codehaus.jackson.Version: int _minorVersion>;

        $i2 = r1.<org.codehaus.jackson.Version: int _minorVersion>;

        i6 = $i3 - $i2;

        if i6 != 0 goto label1;

        $i5 = r0.<org.codehaus.jackson.Version: int _patchLevel>;

        $i4 = r1.<org.codehaus.jackson.Version: int _patchLevel>;

        i6 = $i5 - $i4;

     label1:
        return i6;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.codehaus.jackson.Version r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.codehaus.jackson.Version;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.codehaus.jackson.Version) r1;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.Version: int compareTo(org.codehaus.jackson.Version)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.Version $r0;

        $r0 = new org.codehaus.jackson.Version;

        specialinvoke $r0.<org.codehaus.jackson.Version: void <init>(int,int,int,java.lang.String)>(0, 0, 0, null);

        <org.codehaus.jackson.Version: org.codehaus.jackson.Version UNKNOWN_VERSION> = $r0;

        return;
    }
}
