public class org.apache.tika.parser.chm.lzx.ChmLzxState extends java.lang.Object
{
    private int window;
    private long window_size;
    private int window_position;
    private int main_tree_elements;
    private org.apache.tika.parser.chm.core.ChmCommons$LzxState hadStarted;
    private int block_type;
    private int block_length;
    private int block_remaining;
    private int frames_read;
    private int intel_file_size;
    private long intel_current_possition;
    private org.apache.tika.parser.chm.core.ChmCommons$IntelState intel_state;
    private long R0;
    private long R1;
    private long R2;
    protected short[] mainTreeLengtsTable;
    protected short[] mainTreeTable;
    protected short[] lengthTreeTable;
    protected short[] lengthTreeLengtsTable;
    protected short[] alignedLenTable;
    protected short[] alignedTreeTable;

    protected short[] getMainTreeTable()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        short[] $r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $r1 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] mainTreeTable>;

        return $r1;
    }

    protected short[] getAlignedTreeTable()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        short[] $r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $r1 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] alignedTreeTable>;

        return $r1;
    }

    protected void setAlignedTreeTable(short[])
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        short[] r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        r1 := @parameter0: short[];

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] alignedTreeTable> = r1;

        return;
    }

    protected short[] getLengthTreeTable() throws org.apache.tika.exception.TikaException
    {
        org.apache.tika.parser.chm.exception.ChmParsingException $r2;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        short[] $r1, $r3;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $r1 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] lengthTreeTable>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] lengthTreeTable>;

        return $r3;

     label1:
        $r2 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r2.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("lengthTreeTable is null");

        throw $r2;
    }

    protected void setLengthTreeTable(short[])
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        short[] r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        r1 := @parameter0: short[];

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] lengthTreeTable> = r1;

        return;
    }

    protected void setMainTreeTable(short[])
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        short[] r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        r1 := @parameter0: short[];

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] mainTreeTable> = r1;

        return;
    }

    protected short[] getAlignedLenTable()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        short[] $r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $r1 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] alignedLenTable>;

        return $r1;
    }

    protected void setAlignedLenTable(short[])
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        short[] r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        r1 := @parameter0: short[];

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] alignedLenTable> = r1;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.tika.parser.chm.core.ChmCommons$LzxState $r28;
        java.lang.StringBuilder $r0, $r1, $r2, $r4, $r6, $r8, $r9, $r10, $r12, $r14, $r15, $r16, $r18, $r20, $r21, $r22, $r24, $r26, $r27, $r29, $r31, $r33, $r34, $r35, $r37, $r39, $r40, $r41, $r43, $r45, $r46, $r47, $r49, $r51, $r52, $r53, $r55, $r57, $r58, $r59, $r61, $r63, $r64, $r65, $r67, $r69, $r70, $r72, $r74, $r76, $r77, $r78, $r80, $r82, $r83, $r84, $r86, $r88, $r89, $r90, $r92, $r94, $r95, $r97, $r99, $r101, $r102, $r104, $r106;
        long $l1, $l9, $l10, $l11, $l12;
        java.lang.String $r5, $r7, $r11, $r13, $r17, $r19, $r23, $r25, $r30, $r32, $r36, $r38, $r42, $r44, $r48, $r50, $r54, $r56, $r60, $r62, $r66, $r68, $r73, $r75, $r79, $r81, $r85, $r87, $r91, $r93, $r98, $r100, $r105, $r107, $r108;
        org.apache.tika.parser.chm.lzx.ChmLzxState r3;
        org.apache.tika.parser.chm.core.ChmCommons$IntelState $r71;
        short[] $r96, $r103;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i13, $i14;

        r3 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("actual decoding window:=");

        $i0 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getWindow()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("window size (32Kb through 2Mb):=");

        $l1 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getWindowSize()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r11 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("current offset within the window:=");

        $i2 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getWindowPosition()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("number of main tree elements:=");

        $i3 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getMainTreeElements()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r23 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("have we started decoding at all yet?:=");

        $r28 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: org.apache.tika.parser.chm.core.ChmCommons$LzxState getHadStarted()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("type of this block:=");

        $i4 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockType()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r36 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uncompressed length of this block:=");

        $i5 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockLength()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r42 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uncompressed bytes still left to decode:=");

        $i6 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockRemaining()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r48 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the number of CFDATA blocks processed:=");

        $i7 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getFramesRead()>();

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r54 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("magic header value used for transform:=");

        $i8 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getIntelFileSize()>();

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r60 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r61 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("current offset in transform space:=");

        $l9 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getIntelCurrentPossition()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r66 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r67 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("have we seen any translatable data yet?:=");

        $r71 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: org.apache.tika.parser.chm.core.ChmCommons$IntelState getIntelState()>();

        $r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r71);

        $r73 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75);

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("R0 for the LRU offset system:=");

        $l10 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getR0()>();

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        $r79 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r80 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r79);

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r81);

        $r82 = new java.lang.StringBuilder;

        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("R1 for the LRU offset system:=");

        $l11 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getR1()>();

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l11);

        $r85 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r86 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r85);

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r87);

        $r88 = new java.lang.StringBuilder;

        specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("R2 for the LRU offset system:=");

        $l12 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getR2()>();

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l12);

        $r91 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r92 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r91);

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r93);

        $r94 = new java.lang.StringBuilder;

        specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();

        $r95 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("main tree length:=");

        $r96 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getMainTreeLengtsTable()>();

        $i13 = lengthof $r96;

        $r97 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r98 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r99 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r98);

        $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r100);

        $r101 = new java.lang.StringBuilder;

        specialinvoke $r101.<java.lang.StringBuilder: void <init>()>();

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("secondary tree length:=");

        $r103 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getLengthTreeLengtsTable()>();

        $i14 = lengthof $r103;

        $r104 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r105 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r106 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r105);

        $r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r107);

        $r108 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r108;
    }

    public void <init>(int) throws org.apache.tika.exception.TikaException
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        org.apache.tika.parser.chm.core.ChmCommons$IntelState $r4;
        java.util.concurrent.CancellationException $r1;
        long $l3;
        org.apache.tika.parser.chm.core.ChmCommons$LzxState $r3;
        org.apache.tika.parser.chm.exception.ChmParsingException $r2;
        int i0, $i1, $i2, $i4;
        short[] $r5, $r6;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 < 0 goto label5;

        $i1 = staticinvoke <org.apache.tika.parser.chm.core.ChmCommons: int getWindowSize(int)>(i0);

        $i2 = 1 << $i1;

        $l3 = (long) $i2;

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setWindowSize(long)>($l3);

        if $i1 < 15 goto label1;

        if $i1 <= 21 goto label2;

     label1:
        $r2 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r2.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("window less than 15 or window greater than 21");

        throw $r2;

     label2:
        if $i1 != 20 goto label3;

        goto label4;

     label3:
        if $i1 != 21 goto label4;

        goto label4;

     label4:
        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR0(long)>(1L);

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR1(long)>(1L);

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR2(long)>(1L);

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setMainTreeElements(int)>(512);

        $r3 = <org.apache.tika.parser.chm.core.ChmCommons$LzxState: org.apache.tika.parser.chm.core.ChmCommons$LzxState NOT_STARTED_DECODING>;

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setHadStarted(org.apache.tika.parser.chm.core.ChmCommons$LzxState)>($r3);

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setFramesRead(int)>(0);

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setBlockRemaining(int)>(0);

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setBlockType(int)>(0);

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setIntelCurrentPossition(long)>(0L);

        $r4 = <org.apache.tika.parser.chm.core.ChmCommons$IntelState: org.apache.tika.parser.chm.core.ChmCommons$IntelState NOT_STARTED>;

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setIntelState(org.apache.tika.parser.chm.core.ChmCommons$IntelState)>($r4);

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setWindowPosition(int)>(0);

        $i4 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getMainTreeElements()>();

        $r5 = newarray (short)[$i4];

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setMainTreeLengtsTable(short[])>($r5);

        $r6 = newarray (short)[249];

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setLengthTreeLengtsTable(short[])>($r6);

        goto label6;

     label5:
        $r1 = new java.util.concurrent.CancellationException;

        specialinvoke $r1.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>("window size should be more than zero");

        throw $r1;

     label6:
        return;
    }

    protected void setWindow(int)
    {
        int i0;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int window> = i0;

        return;
    }

    protected int getWindow()
    {
        int $i0;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $i0 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int window>;

        return $i0;
    }

    protected void setWindowSize(long)
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        long l0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: long window_size> = l0;

        return;
    }

    protected long getWindowSize()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        long $l0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $l0 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: long window_size>;

        return $l0;
    }

    protected void setWindowPosition(int)
    {
        int i0;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int window_position> = i0;

        return;
    }

    protected int getWindowPosition()
    {
        int $i0;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $i0 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int window_position>;

        return $i0;
    }

    protected void setMainTreeElements(int)
    {
        int i0;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int main_tree_elements> = i0;

        return;
    }

    protected int getMainTreeElements()
    {
        int $i0;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $i0 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int main_tree_elements>;

        return $i0;
    }

    protected void setHadStarted(org.apache.tika.parser.chm.core.ChmCommons$LzxState)
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        org.apache.tika.parser.chm.core.ChmCommons$LzxState r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        r1 := @parameter0: org.apache.tika.parser.chm.core.ChmCommons$LzxState;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: org.apache.tika.parser.chm.core.ChmCommons$LzxState hadStarted> = r1;

        return;
    }

    protected org.apache.tika.parser.chm.core.ChmCommons$LzxState getHadStarted()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        org.apache.tika.parser.chm.core.ChmCommons$LzxState $r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $r1 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: org.apache.tika.parser.chm.core.ChmCommons$LzxState hadStarted>;

        return $r1;
    }

    protected void setBlockType(int)
    {
        int i0;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int block_type> = i0;

        return;
    }

    public int getBlockType()
    {
        int $i0;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $i0 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int block_type>;

        return $i0;
    }

    protected void setBlockLength(int)
    {
        int i0;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int block_length> = i0;

        return;
    }

    protected int getBlockLength()
    {
        int $i0;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $i0 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int block_length>;

        return $i0;
    }

    protected void setBlockRemaining(int)
    {
        int i0;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int block_remaining> = i0;

        return;
    }

    protected int getBlockRemaining()
    {
        int $i0;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $i0 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int block_remaining>;

        return $i0;
    }

    protected void setFramesRead(int)
    {
        int i0;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int frames_read> = i0;

        return;
    }

    protected void increaseFramesRead()
    {
        int $i0, $i1;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $i0 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getFramesRead()>();

        $i1 = $i0 + 1;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int frames_read> = $i1;

        return;
    }

    protected int getFramesRead()
    {
        int $i0;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $i0 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int frames_read>;

        return $i0;
    }

    protected void setIntelFileSize(int)
    {
        int i0;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int intel_file_size> = i0;

        return;
    }

    protected int getIntelFileSize()
    {
        int $i0;
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $i0 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: int intel_file_size>;

        return $i0;
    }

    protected void setIntelCurrentPossition(long)
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        long l0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: long intel_current_possition> = l0;

        return;
    }

    protected long getIntelCurrentPossition()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        long $l0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $l0 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: long intel_current_possition>;

        return $l0;
    }

    protected void setIntelState(org.apache.tika.parser.chm.core.ChmCommons$IntelState)
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        org.apache.tika.parser.chm.core.ChmCommons$IntelState r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        r1 := @parameter0: org.apache.tika.parser.chm.core.ChmCommons$IntelState;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: org.apache.tika.parser.chm.core.ChmCommons$IntelState intel_state> = r1;

        return;
    }

    protected org.apache.tika.parser.chm.core.ChmCommons$IntelState getIntelState()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        org.apache.tika.parser.chm.core.ChmCommons$IntelState $r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $r1 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: org.apache.tika.parser.chm.core.ChmCommons$IntelState intel_state>;

        return $r1;
    }

    protected void setR0(long)
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        long l0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: long R0> = l0;

        return;
    }

    protected long getR0()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        long $l0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $l0 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: long R0>;

        return $l0;
    }

    protected void setR1(long)
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        long l0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: long R1> = l0;

        return;
    }

    protected long getR1()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        long $l0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $l0 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: long R1>;

        return $l0;
    }

    protected void setR2(long)
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        long l0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: long R2> = l0;

        return;
    }

    protected long getR2()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        long $l0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $l0 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: long R2>;

        return $l0;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        return;
    }

    public void setMainTreeLengtsTable(short[])
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        short[] r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        r1 := @parameter0: short[];

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] mainTreeLengtsTable> = r1;

        return;
    }

    public short[] getMainTreeLengtsTable()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        short[] $r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $r1 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] mainTreeLengtsTable>;

        return $r1;
    }

    public void setLengthTreeLengtsTable(short[])
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        short[] r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        r1 := @parameter0: short[];

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] lengthTreeLengtsTable> = r1;

        return;
    }

    public short[] getLengthTreeLengtsTable()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState r0;
        short[] $r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxState;

        $r1 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] lengthTreeLengtsTable>;

        return $r1;
    }
}
