public class org.apache.lucene.search.spans.SpanTermQuery extends org.apache.lucene.search.spans.SpanQuery
{
    protected org.apache.lucene.index.Term term;

    public void <init>(org.apache.lucene.index.Term)
    {
        org.apache.lucene.search.spans.SpanTermQuery r0;
        org.apache.lucene.index.Term r1;

        r0 := @this: org.apache.lucene.search.spans.SpanTermQuery;

        r1 := @parameter0: org.apache.lucene.index.Term;

        specialinvoke r0.<org.apache.lucene.search.spans.SpanQuery: void <init>()>();

        r0.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term> = r1;

        return;
    }

    public org.apache.lucene.index.Term getTerm()
    {
        org.apache.lucene.search.spans.SpanTermQuery r0;
        org.apache.lucene.index.Term $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanTermQuery;

        $r1 = r0.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        return $r1;
    }

    public java.lang.String getField()
    {
        org.apache.lucene.search.spans.SpanTermQuery r0;
        org.apache.lucene.index.Term $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.lucene.search.spans.SpanTermQuery;

        $r1 = r0.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.Term: java.lang.String field()>();

        return $r2;
    }

    public void extractTerms(java.util.Set)
    {
        org.apache.lucene.search.spans.SpanTermQuery r1;
        org.apache.lucene.index.Term $r2;
        java.util.Set r0;

        r1 := @this: org.apache.lucene.search.spans.SpanTermQuery;

        r0 := @parameter0: java.util.Set;

        $r2 = r1.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>($r2);

        return;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.apache.lucene.search.spans.SpanTermQuery r1;
        org.apache.lucene.index.Term $r2, $r5, $r9;
        float $f0;
        java.lang.StringBuilder $r0;
        java.lang.String $r3, r4, $r6, $r7, $r8, $r10;
        boolean $z0;

        r1 := @this: org.apache.lucene.search.spans.SpanTermQuery;

        r4 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.Term: java.lang.String field()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label1;

        $r9 = r1.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        $r10 = virtualinvoke $r9.<org.apache.lucene.index.Term: java.lang.String text()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        goto label2;

     label1:
        $r5 = r1.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.index.Term: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

     label2:
        $f0 = virtualinvoke r1.<org.apache.lucene.search.spans.SpanTermQuery: float getBoost()>();

        $r7 = staticinvoke <org.apache.lucene.util.ToStringUtils: java.lang.String boost(float)>($f0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public int hashCode()
    {
        org.apache.lucene.search.spans.SpanTermQuery r0;
        int $i0, $i1, $i2, $i3;
        org.apache.lucene.index.Term $r1, $r2;

        r0 := @this: org.apache.lucene.search.spans.SpanTermQuery;

        $i0 = specialinvoke r0.<org.apache.lucene.search.spans.SpanQuery: int hashCode()>();

        $i1 = 31 * $i0;

        $r1 = r0.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        if $r1 != null goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        $i3 = virtualinvoke $r2.<org.apache.lucene.index.Term: int hashCode()>();

     label2:
        $i2 = $i1 + $i3;

        return $i2;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.search.spans.SpanTermQuery r0, r4;
        org.apache.lucene.index.Term $r5, $r6, $r7, $r8;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.search.spans.SpanTermQuery;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r0.<org.apache.lucene.search.spans.SpanQuery: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.apache.lucene.search.spans.SpanTermQuery) r1;

        $r5 = r0.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        if $r5 != null goto label4;

        $r8 = r4.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        if $r8 == null goto label5;

        return 0;

     label4:
        $r7 = r0.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        $r6 = r4.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        $z1 = virtualinvoke $r7.<org.apache.lucene.index.Term: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map) throws java.io.IOException
    {
        java.lang.IllegalStateException $r15;
        org.apache.lucene.index.Term $r2, $r7, $r11, $r18, $r22, $r28, $r32, $r36;
        org.apache.lucene.index.Fields $r31;
        org.apache.lucene.index.DocsAndPositionsEnum $r14;
        org.apache.lucene.index.TermsEnum $r10, $r35;
        java.util.Map r0;
        boolean $z0;
        org.apache.lucene.index.Terms $r9, $r34;
        org.apache.lucene.util.BytesRef $r12, $r37;
        java.lang.StringBuilder $r16, $r17, $r20, $r21, $r24, $r25;
        org.apache.lucene.index.AtomicReader $r6, $r30;
        org.apache.lucene.search.spans.SpanTermQuery r1;
        org.apache.lucene.search.spans.TermSpans $r27, $r29;
        int $i0;
        java.lang.String $r8, $r19, $r23, $r26, $r33;
        org.apache.lucene.util.Bits r13;
        org.apache.lucene.index.TermState r38;
        org.apache.lucene.index.TermContext r4;
        java.lang.Object $r3;
        org.apache.lucene.index.AtomicReaderContext r5;

        r1 := @this: org.apache.lucene.search.spans.SpanTermQuery;

        r5 := @parameter0: org.apache.lucene.index.AtomicReaderContext;

        r13 := @parameter1: org.apache.lucene.util.Bits;

        r0 := @parameter2: java.util.Map;

        $r2 = r1.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        $r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (org.apache.lucene.index.TermContext) $r3;

        if r4 != null goto label07;

        $r30 = virtualinvoke r5.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r31 = virtualinvoke $r30.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Fields fields()>();

        if $r31 == null goto label05;

        $r32 = r1.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        $r33 = virtualinvoke $r32.<org.apache.lucene.index.Term: java.lang.String field()>();

        $r34 = virtualinvoke $r31.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>($r33);

        if $r34 == null goto label03;

        $r35 = virtualinvoke $r34.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null);

        $r36 = r1.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        $r37 = virtualinvoke $r36.<org.apache.lucene.index.Term: org.apache.lucene.util.BytesRef bytes()>();

        $z0 = virtualinvoke $r35.<org.apache.lucene.index.TermsEnum: boolean seekExact(org.apache.lucene.util.BytesRef,boolean)>($r37, 1);

        if $z0 == 0 goto label01;

        r38 = virtualinvoke $r35.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.TermState termState()>();

        goto label02;

     label01:
        r38 = null;

     label02:
        goto label04;

     label03:
        r38 = null;

     label04:
        goto label06;

     label05:
        r38 = null;

     label06:
        goto label08;

     label07:
        $i0 = r5.<org.apache.lucene.index.AtomicReaderContext: int ord>;

        r38 = virtualinvoke r4.<org.apache.lucene.index.TermContext: org.apache.lucene.index.TermState get(int)>($i0);

     label08:
        if r38 != null goto label09;

        $r29 = <org.apache.lucene.search.spans.TermSpans: org.apache.lucene.search.spans.TermSpans EMPTY_TERM_SPANS>;

        return $r29;

     label09:
        $r6 = virtualinvoke r5.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r7 = r1.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        $r8 = virtualinvoke $r7.<org.apache.lucene.index.Term: java.lang.String field()>();

        $r9 = virtualinvoke $r6.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Terms terms(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null);

        $r11 = r1.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        $r12 = virtualinvoke $r11.<org.apache.lucene.index.Term: org.apache.lucene.util.BytesRef bytes()>();

        virtualinvoke $r10.<org.apache.lucene.index.TermsEnum: void seekExact(org.apache.lucene.util.BytesRef,org.apache.lucene.index.TermState)>($r12, r38);

        $r14 = virtualinvoke $r10.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits,org.apache.lucene.index.DocsAndPositionsEnum,int)>(r13, null, 2);

        if $r14 == null goto label10;

        $r27 = new org.apache.lucene.search.spans.TermSpans;

        $r28 = r1.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        specialinvoke $r27.<org.apache.lucene.search.spans.TermSpans: void <init>(org.apache.lucene.index.DocsAndPositionsEnum,org.apache.lucene.index.Term)>($r14, $r28);

        return $r27;

     label10:
        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("field \"");

        $r18 = r1.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        $r19 = virtualinvoke $r18.<org.apache.lucene.index.Term: java.lang.String field()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" was indexed without position data; cannot run SpanTermQuery (term=");

        $r22 = r1.<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term term>;

        $r23 = virtualinvoke $r22.<org.apache.lucene.index.Term: java.lang.String text()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r26);

        throw $r15;
    }
}
