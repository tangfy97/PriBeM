public class tdb.tools.dumpnodetable extends arq.cmdline.CmdGeneral
{
    tdb.cmdline.ModLocation modLocation;

    public static transient void main(java.lang.String[])
    {
        java.lang.String[] r1;
        tdb.tools.dumpnodetable $r0;

        r1 := @parameter0: java.lang.String[];

        staticinvoke <org.apache.jena.atlas.logging.Log: boolean setLog4j()>();

        $r0 = new tdb.tools.dumpnodetable;

        specialinvoke $r0.<tdb.tools.dumpnodetable: void <init>(java.lang.String[])>(r1);

        virtualinvoke $r0.<tdb.tools.dumpnodetable: void mainRun()>();

        return;
    }

    protected void exec()
    {
        java.io.PrintStream $r10;
        com.hp.hpl.jena.tdb.store.QuadTable $r7;
        tdb.tools.dumpnodetable r2;
        java.lang.String[] $r0, $r1;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r6;
        com.hp.hpl.jena.tdb.base.file.Location $r4;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r8;
        com.hp.hpl.jena.tdb.nodetable.NodeTable $r9;
        tdb.cmdline.ModLocation $r3;
        com.hp.hpl.jena.tdb.StoreConnection $r5;

        r2 := @this: tdb.tools.dumpnodetable;

        $r0 = <com.hp.hpl.jena.tdb.sys.Names: java.lang.String[] tripleIndexes>;

        staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        $r1 = <com.hp.hpl.jena.tdb.sys.Names: java.lang.String[] quadIndexes>;

        staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r3 = r2.<tdb.tools.dumpnodetable: tdb.cmdline.ModLocation modLocation>;

        $r4 = virtualinvoke $r3.<tdb.cmdline.ModLocation: com.hp.hpl.jena.tdb.base.file.Location getLocation()>();

        $r5 = staticinvoke <com.hp.hpl.jena.tdb.StoreConnection: com.hp.hpl.jena.tdb.StoreConnection make(com.hp.hpl.jena.tdb.base.file.Location)>($r4);

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.StoreConnection: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getBaseDataset()>();

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()>();

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.tdb.store.QuadTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()>();

        $r10 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <tdb.tools.dumpnodetable: void dump(java.io.OutputStream,com.hp.hpl.jena.tdb.nodetable.NodeTable)>($r10, $r9);

        return;
    }

    protected void <init>(java.lang.String[])
    {
        tdb.tools.dumpnodetable r0;
        tdb.cmdline.ModLocation $r2, $r3;
        java.lang.String[] r1;

        r0 := @this: tdb.tools.dumpnodetable;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<arq.cmdline.CmdGeneral: void <init>(java.lang.String[])>(r1);

        $r2 = new tdb.cmdline.ModLocation;

        specialinvoke $r2.<tdb.cmdline.ModLocation: void <init>()>();

        r0.<tdb.tools.dumpnodetable: tdb.cmdline.ModLocation modLocation> = $r2;

        $r3 = r0.<tdb.tools.dumpnodetable: tdb.cmdline.ModLocation modLocation>;

        specialinvoke r0.<arq.cmdline.CmdGeneral: void addModule(arq.cmdline.ArgModuleGeneral)>($r3);

        return;
    }

    public static void dumpNodes(java.io.OutputStream, java.lang.String)
    {
        java.io.OutputStream r0;
        int $i0, $i1;
        java.lang.String r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.lang.String;

        $i1 = <com.hp.hpl.jena.tdb.sys.SystemTDB: int Node2NodeIdCacheSize>;

        $i0 = <com.hp.hpl.jena.tdb.sys.SystemTDB: int NodeId2NodeCacheSize>;

        staticinvoke <tdb.tools.dumpnodetable: void dump(java.io.OutputStream,java.lang.String,java.lang.String,int,java.lang.String,int,int)>(r0, r1, "node2id", $i1, "nodes", $i0, 100);

        return;
    }

    public static void dumpPrefixes(java.io.OutputStream, java.lang.String)
    {
        java.io.OutputStream r0;
        java.lang.String r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.lang.String;

        staticinvoke <tdb.tools.dumpnodetable: void dump(java.io.OutputStream,java.lang.String,java.lang.String,int,java.lang.String,int,int)>(r0, r1, "prefix2id", 100, "prefixes", 100, 10);

        return;
    }

    public static void dump(java.io.OutputStream, java.lang.String, java.lang.String, int, java.lang.String, int, int)
    {
        java.io.OutputStream r4;
        com.hp.hpl.jena.tdb.base.file.Location $r0;
        int i0, i1, i2;
        java.lang.String r1, r2, r3;

        r4 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        $r0 = new com.hp.hpl.jena.tdb.base.file.Location;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.base.file.Location: void <init>(java.lang.String)>(r1);

        staticinvoke <com.hp.hpl.jena.tdb.sys.SetupTDB: com.hp.hpl.jena.tdb.nodetable.NodeTable makeNodeTable(com.hp.hpl.jena.tdb.base.file.Location,java.lang.String,int,java.lang.String,int,int)>($r0, r2, i0, r3, i1, i2);

        return;
    }

    public static void dump(java.io.OutputStream, com.hp.hpl.jena.tdb.nodetable.NodeTable)
    {
        java.lang.Object[] $r8;
        long l0;
        com.hp.hpl.jena.graph.Node r15;
        com.hp.hpl.jena.tdb.nodetable.NodeTable r0;
        com.hp.hpl.jena.tdb.store.NodeId $r12;
        java.lang.String $r7, $r13, $r16;
        boolean $z0;
        java.io.OutputStream r3;
        java.util.Iterator $r1;
        org.apache.jena.atlas.io.IndentedWriter $r2;
        org.apache.jena.atlas.lib.Pair r10;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.Object $r9, $r11, $r14;

        r3 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: com.hp.hpl.jena.tdb.nodetable.NodeTable;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTable: java.util.Iterator all()>();

        l0 = 0L;

        $r2 = new org.apache.jena.atlas.io.IndentedWriter;

        specialinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void <init>(java.io.OutputStream)>(r3);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.jena.atlas.lib.Pair) $r9;

        $r11 = virtualinvoke r10.<org.apache.jena.atlas.lib.Pair: java.lang.Object car()>();

        $r12 = (com.hp.hpl.jena.tdb.store.NodeId) $r11;

        $r13 = virtualinvoke $r12.<com.hp.hpl.jena.tdb.store.NodeId: java.lang.String toString()>();

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>($r13);

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(" : ");

        $r14 = virtualinvoke r10.<org.apache.jena.atlas.lib.Pair: java.lang.Object cdr()>();

        r15 = (com.hp.hpl.jena.graph.Node) $r14;

        $r16 = staticinvoke <tdb.tools.dumpnodetable: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>(r15);

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>($r16);

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void println()>();

        l0 = l0 + 1L;

        goto label1;

     label2:
        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void println()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = newarray (java.lang.Object)[0];

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void printf(java.lang.String,java.lang.Object[])>($r7, $r8);

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void println()>();

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    private static java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r1;
        java.lang.String $r5, $r6, $r9, $r11, $r12, $r13, $r15, $r18, $r20;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.graph.Node_Literal $r14;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r8, $r10, $r16, $r17, $r19;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        if r0 != null goto label1;

        return "<<null>>";

     label1:
        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 == 0 goto label2;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_:");

        $r18 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getBlankNodeLabel()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r20;

     label2:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 == 0 goto label3;

        $r14 = (com.hp.hpl.jena.graph.Node_Literal) r0;

        $r15 = staticinvoke <tdb.tools.dumpnodetable: java.lang.String stringForLiteral(com.hp.hpl.jena.graph.Node_Literal)>($r14);

        return $r15;

     label3:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z2 == 0 goto label4;

        $r12 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r13 = staticinvoke <tdb.tools.dumpnodetable: java.lang.String stringForURI(java.lang.String)>($r12);

        return $r13;

     label4:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z3 == 0 goto label5;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

     label5:
        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z4 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r1);

        if $z4 == 0 goto label6;

        return "ANY";

     label6:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to turn a node into a string: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/util/FmtUtils;", $r5);

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String stringForURI(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.String r2, $r5;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String stringForLiteral(com.hp.hpl.jena.graph.Node_Literal)
    {
        com.hp.hpl.jena.graph.Node_Literal r0;
        int $i0;
        java.lang.StringBuilder $r4;
        java.lang.String $r1, $r2, $r3, $r5, $r6;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node_Literal;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node_Literal: java.lang.String getLiteralDatatypeURI()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node_Literal: java.lang.String getLiteralLanguage()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node_Literal: java.lang.String getLiteralLexicalForm()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: void stringEsc(java.lang.StringBuilder,java.lang.String,boolean)>($r4, $r3, 1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        if $r2 == null goto label1;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label1:
        if $r1 == null goto label2;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^^");

        $r6 = staticinvoke <tdb.tools.dumpnodetable: java.lang.String stringForURI(java.lang.String)>($r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

     label2:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected void processModulesAndArgs()
    {
        tdb.tools.dumpnodetable r0;
        tdb.cmdline.ModLocation $r2;
        com.hp.hpl.jena.tdb.base.file.Location $r3;
        arq.cmdline.ModVersion $r1, $r4;
        boolean $z0;

        r0 := @this: tdb.tools.dumpnodetable;

        $r1 = r0.<tdb.tools.dumpnodetable: arq.cmdline.ModVersion modVersion>;

        $z0 = virtualinvoke $r1.<arq.cmdline.ModVersion: boolean getVersionFlag()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<tdb.tools.dumpnodetable: arq.cmdline.ModVersion modVersion>;

        virtualinvoke $r4.<arq.cmdline.ModVersion: void printVersionAndExit()>();

     label1:
        $r2 = r0.<tdb.tools.dumpnodetable: tdb.cmdline.ModLocation modLocation>;

        $r3 = virtualinvoke $r2.<tdb.cmdline.ModLocation: com.hp.hpl.jena.tdb.base.file.Location getLocation()>();

        if $r3 != null goto label2;

        virtualinvoke r0.<tdb.tools.dumpnodetable: void cmdError(java.lang.String)>("Location required");

     label2:
        return;
    }

    protected java.lang.String getSummary()
    {
        tdb.tools.dumpnodetable r1;
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.String $r2, $r5;

        r1 := @this: tdb.tools.dumpnodetable;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<tdb.tools.dumpnodetable: java.lang.String getCommandName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --loc=DIR IndexName");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected java.lang.String getCommandName()
    {
        java.lang.String $r1;
        tdb.tools.dumpnodetable r0;

        r0 := @this: tdb.tools.dumpnodetable;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r0);

        return $r1;
    }
}
