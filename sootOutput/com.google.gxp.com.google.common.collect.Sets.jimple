public final class com.google.gxp.com.google.common.collect.Sets extends java.lang.Object
{

    private void <init>()
    {
        com.google.gxp.com.google.common.collect.Sets r0;

        r0 := @this: com.google.gxp.com.google.common.collect.Sets;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient java.util.Set immutableEnumSet(java.lang.Enum, java.lang.Enum[])
    {
        java.lang.Enum r0;
        java.lang.Enum[] r1;
        java.util.Set $r3;
        java.util.EnumSet $r2;

        r0 := @parameter0: java.lang.Enum;

        r1 := @parameter1: java.lang.Enum[];

        $r2 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum[])>(r0, r1);

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r3;
    }

    public static java.util.EnumSet newEnumSet(java.lang.Iterable, java.lang.Class)
    {
        java.lang.Class r1;
        java.lang.Iterable r0;
        java.util.EnumSet $r2;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(r1);

        staticinvoke <com.google.gxp.com.google.common.collect.Iterables: boolean addAll(java.util.Collection,java.lang.Iterable)>($r2, r0);

        return $r2;
    }

    public static java.util.HashSet newHashSet()
    {
        java.util.HashSet $r0;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        return $r0;
    }

    public static transient java.util.HashSet newHashSet(java.lang.Object[])
    {
        java.util.HashSet $r1;
        java.lang.Object[] r0;
        int $i0, $i1;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        $i1 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: int capacity(int)>($i0);

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>(int)>($i1);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r1, r0);

        return $r1;
    }

    public static java.util.HashSet newHashSetWithExpectedSize(int)
    {
        java.util.HashSet $r0;
        int i0, $i1;

        i0 := @parameter0: int;

        $r0 = new java.util.HashSet;

        $i1 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: int capacity(int)>(i0);

        specialinvoke $r0.<java.util.HashSet: void <init>(int)>($i1);

        return $r0;
    }

    public static java.util.HashSet newHashSet(java.lang.Iterable)
    {
        java.util.HashSet $r2, $r4;
        java.util.Iterator $r1;
        java.util.Collection r3;
        java.lang.Iterable r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Iterable;

        $z0 = r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        r3 = (java.util.Collection) r0;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>(java.util.Collection)>(r3);

        return $r4;

     label1:
        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r2 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.HashSet newHashSet(java.util.Iterator)>($r1);

        return $r2;
    }

    public static java.util.HashSet newHashSet(java.util.Iterator)
    {
        java.util.HashSet $r0;
        java.util.Iterator r1;
        java.lang.Object $r2;
        boolean $z0;

        r1 := @parameter0: java.util.Iterator;

        $r0 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.HashSet newHashSet()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r0.<java.util.HashSet: boolean add(java.lang.Object)>($r2);

        goto label1;

     label2:
        return $r0;
    }

    private static java.util.Set fixedRemoveAllAndRetainAll(java.util.Set)
    {
        java.util.Set r1;
        com.google.gxp.com.google.common.collect.Sets$1 $r0;

        r1 := @parameter0: java.util.Set;

        $r0 = new com.google.gxp.com.google.common.collect.Sets$1;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.Sets$1: void <init>(java.util.Set)>(r1);

        return $r0;
    }

    public static java.util.Set newConcurrentHashSet()
    {
        java.util.Set $r1;
        com.google.gxp.com.google.common.collect.Sets$ForwardingConcurrentMap $r0;

        $r0 = new com.google.gxp.com.google.common.collect.Sets$ForwardingConcurrentMap;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.Sets$ForwardingConcurrentMap: void <init>()>();

        $r1 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.Set newSetFromMap(java.util.Map)>($r0);

        return $r1;
    }

    public static transient java.util.Set newConcurrentHashSet(java.lang.Object[])
    {
        java.lang.Object[] r0;
        com.google.gxp.com.google.common.collect.Sets$ForwardingConcurrentMap $r1;
        int $i0, $i1;
        java.util.Set $r2;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        $i1 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: int capacity(int)>($i0);

        $r1 = new com.google.gxp.com.google.common.collect.Sets$ForwardingConcurrentMap;

        specialinvoke $r1.<com.google.gxp.com.google.common.collect.Sets$ForwardingConcurrentMap: void <init>(int)>($i1);

        $r2 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.Set newSetFromMap(java.util.Map)>($r1);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r2, r0);

        return $r2;
    }

    public static java.util.Set newConcurrentHashSet(java.lang.Iterable)
    {
        java.util.Set $r2;
        java.util.Iterator $r1;
        java.lang.Iterable r0;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r2 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.Set newConcurrentHashSet(java.util.Iterator)>($r1);

        return $r2;
    }

    public static java.util.Set newConcurrentHashSet(java.util.Iterator)
    {
        java.util.Iterator r1;
        java.util.Set $r0;
        java.lang.Object $r2;
        boolean $z0;

        r1 := @parameter0: java.util.Iterator;

        $r0 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.Set newConcurrentHashSet()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r2);

        goto label1;

     label2:
        return $r0;
    }

    public static java.util.LinkedHashSet newLinkedHashSet()
    {
        java.util.LinkedHashSet $r0;

        $r0 = new java.util.LinkedHashSet;

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>();

        return $r0;
    }

    public static java.util.LinkedHashSet newLinkedHashSet(java.lang.Iterable)
    {
        java.util.LinkedHashSet $r0;
        java.lang.Iterable r1;

        r1 := @parameter0: java.lang.Iterable;

        $r0 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.LinkedHashSet newLinkedHashSet()>();

        staticinvoke <com.google.gxp.com.google.common.collect.Iterables: boolean addAll(java.util.Collection,java.lang.Iterable)>($r0, r1);

        return $r0;
    }

    public static java.util.TreeSet newTreeSet()
    {
        java.util.TreeSet $r0;

        $r0 = new java.util.TreeSet;

        specialinvoke $r0.<java.util.TreeSet: void <init>()>();

        return $r0;
    }

    public static transient java.util.TreeSet newTreeSet(java.lang.Comparable[])
    {
        java.lang.Comparable[] r1;
        java.util.TreeSet $r0;

        r1 := @parameter0: java.lang.Comparable[];

        $r0 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.TreeSet newTreeSet()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r0, r1);

        return $r0;
    }

    public static java.util.TreeSet newTreeSet(java.lang.Iterable)
    {
        java.util.Iterator $r1;
        java.lang.Iterable r0;
        java.util.TreeSet $r2;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r2 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.TreeSet newTreeSet(java.util.Iterator)>($r1);

        return $r2;
    }

    public static java.util.TreeSet newTreeSet(java.util.Iterator)
    {
        java.util.Iterator r1;
        java.lang.Object $r2;
        java.util.TreeSet $r0;
        boolean $z0;

        r1 := @parameter0: java.util.Iterator;

        $r0 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.TreeSet newTreeSet()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r0.<java.util.TreeSet: boolean add(java.lang.Object)>($r2);

        goto label1;

     label2:
        return $r0;
    }

    public static java.util.TreeSet newTreeSet(java.util.Comparator)
    {
        java.lang.Object $r2;
        java.util.Comparator r1, $r3;
        java.util.TreeSet $r0;

        r1 := @parameter0: java.util.Comparator;

        $r0 = new java.util.TreeSet;

        $r2 = staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.Comparator) $r2;

        specialinvoke $r0.<java.util.TreeSet: void <init>(java.util.Comparator)>($r3);

        return $r0;
    }

    public static transient java.util.TreeSet newTreeSet(java.util.Comparator, java.lang.Object[])
    {
        java.lang.Object[] r2;
        java.util.Comparator r0;
        java.util.TreeSet $r1;

        r0 := @parameter0: java.util.Comparator;

        r2 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.TreeSet newTreeSet(java.util.Comparator)>(r0);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r1, r2);

        return $r1;
    }

    public static java.util.TreeSet newTreeSet(java.util.Comparator, java.lang.Iterable)
    {
        java.util.Iterator $r2;
        java.util.Comparator r0;
        java.lang.Iterable r1;
        java.util.TreeSet $r3;

        r0 := @parameter0: java.util.Comparator;

        r1 := @parameter1: java.lang.Iterable;

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.TreeSet newTreeSet(java.util.Comparator,java.util.Iterator)>(r0, $r2);

        return $r3;
    }

    public static java.util.TreeSet newTreeSet(java.util.Comparator, java.util.Iterator)
    {
        java.util.Iterator r2;
        java.lang.Object $r3;
        java.util.Comparator r0;
        java.util.TreeSet $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Comparator;

        r2 := @parameter1: java.util.Iterator;

        $r1 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.TreeSet newTreeSet(java.util.Comparator)>(r0);

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r1.<java.util.TreeSet: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r1;
    }

    public static java.util.Set newIdentityHashSet(com.google.gxp.com.google.common.base.ReferenceType)
    {
        java.util.AbstractMap r6;
        com.google.gxp.com.google.common.base.ReferenceType r0, $r1, $r3;
        java.util.IdentityHashMap $r5;
        java.util.Set $r4;
        com.google.gxp.com.google.common.collect.ReferenceMap $r2;

        r0 := @parameter0: com.google.gxp.com.google.common.base.ReferenceType;

        $r1 = <com.google.gxp.com.google.common.base.ReferenceType: com.google.gxp.com.google.common.base.ReferenceType STRONG>;

        if r0 != $r1 goto label1;

        $r5 = new java.util.IdentityHashMap;

        specialinvoke $r5.<java.util.IdentityHashMap: void <init>()>();

        r6 = $r5;

        goto label2;

     label1:
        $r2 = new com.google.gxp.com.google.common.collect.ReferenceMap;

        $r3 = <com.google.gxp.com.google.common.base.ReferenceType: com.google.gxp.com.google.common.base.ReferenceType STRONG>;

        specialinvoke $r2.<com.google.gxp.com.google.common.collect.ReferenceMap: void <init>(com.google.gxp.com.google.common.base.ReferenceType,com.google.gxp.com.google.common.base.ReferenceType)>(r0, $r3);

        r6 = $r2;

     label2:
        $r4 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.Set newSetFromMap(java.util.Map)>(r6);

        return $r4;
    }

    public static java.util.EnumSet complementOf(java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.lang.Enum $r3;
        java.lang.Object $r2;
        java.lang.Class $r4;
        java.util.EnumSet $r5, $r6, $r7;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof java.util.EnumSet;

        if $z0 == 0 goto label1;

        $r6 = (java.util.EnumSet) r0;

        $r7 = staticinvoke <java.util.EnumSet: java.util.EnumSet complementOf(java.util.EnumSet)>($r6);

        return $r7;

     label1:
        $z1 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "collection is empty; use the other version of this method");

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.Enum) $r2;

        $r4 = virtualinvoke $r3.<java.lang.Enum: java.lang.Class getDeclaringClass()>();

        $r5 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.EnumSet makeComplementByHand(java.util.Collection,java.lang.Class)>(r0, $r4);

        return $r5;
    }

    public static java.util.EnumSet complementOf(java.util.Collection, java.lang.Class)
    {
        java.util.Collection r0;
        java.lang.Class r1;
        java.util.EnumSet $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = r0 instanceof java.util.EnumSet;

        if $z0 == 0 goto label1;

        $r2 = (java.util.EnumSet) r0;

        $r3 = staticinvoke <java.util.EnumSet: java.util.EnumSet complementOf(java.util.EnumSet)>($r2);

        goto label2;

     label1:
        $r3 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.EnumSet makeComplementByHand(java.util.Collection,java.lang.Class)>(r0, r1);

     label2:
        return $r3;
    }

    private static java.util.EnumSet makeComplementByHand(java.util.Collection, java.lang.Class)
    {
        java.lang.Class r0;
        java.util.EnumSet $r1;
        java.util.Collection r2;

        r2 := @parameter0: java.util.Collection;

        r0 := @parameter1: java.lang.Class;

        $r1 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(r0);

        virtualinvoke $r1.<java.util.EnumSet: boolean removeAll(java.util.Collection)>(r2);

        return $r1;
    }

    public static java.util.Set newSetFromMap(java.util.Map)
    {
        com.google.gxp.com.google.common.collect.Sets$SetFromMap $r0;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        $r0 = new com.google.gxp.com.google.common.collect.Sets$SetFromMap;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.Sets$SetFromMap: void <init>(java.util.Map)>(r1);

        return $r0;
    }

    public static com.google.gxp.com.google.common.collect.Sets$SetView union(java.util.Set, java.util.Set)
    {
        com.google.gxp.com.google.common.collect.Sets$SetView $r2;
        com.google.gxp.com.google.common.collect.Sets$2 $r4;
        java.util.Set r0, r1;
        java.lang.Iterable $r3;

        r1 := @parameter0: java.util.Set;

        r0 := @parameter1: java.util.Set;

        $r2 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: com.google.gxp.com.google.common.collect.Sets$SetView difference(java.util.Set,java.util.Set)>(r0, r1);

        $r3 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable)>(r1, $r2);

        $r4 = new com.google.gxp.com.google.common.collect.Sets$2;

        specialinvoke $r4.<com.google.gxp.com.google.common.collect.Sets$2: void <init>(java.util.Set,java.util.Set,java.util.Set,java.lang.Iterable)>(r1, $r2, r0, $r3);

        return $r4;
    }

    public static com.google.gxp.com.google.common.collect.Sets$SetView intersection(java.util.Set, java.util.Set)
    {
        com.google.gxp.com.google.common.collect.Sets$3 $r3;
        java.util.Set r0, r1;
        com.google.gxp.com.google.common.base.Predicate $r2;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.util.Set;

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = staticinvoke <com.google.gxp.com.google.common.base.Predicates: com.google.gxp.com.google.common.base.Predicate in(java.util.Collection)>(r1);

        $r3 = new com.google.gxp.com.google.common.collect.Sets$3;

        specialinvoke $r3.<com.google.gxp.com.google.common.collect.Sets$3: void <init>(java.util.Set,com.google.gxp.com.google.common.base.Predicate,java.util.Set)>(r0, $r2, r1);

        return $r3;
    }

    public static com.google.gxp.com.google.common.collect.Sets$SetView difference(java.util.Set, java.util.Set)
    {
        com.google.gxp.com.google.common.collect.Sets$4 $r4;
        java.util.Set r0, r1;
        com.google.gxp.com.google.common.base.Predicate $r2, $r3;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.util.Set;

        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = staticinvoke <com.google.gxp.com.google.common.base.Predicates: com.google.gxp.com.google.common.base.Predicate in(java.util.Collection)>(r1);

        $r3 = staticinvoke <com.google.gxp.com.google.common.base.Predicates: com.google.gxp.com.google.common.base.Predicate not(com.google.gxp.com.google.common.base.Predicate)>($r2);

        $r4 = new com.google.gxp.com.google.common.collect.Sets$4;

        specialinvoke $r4.<com.google.gxp.com.google.common.collect.Sets$4: void <init>(java.util.Set,com.google.gxp.com.google.common.base.Predicate,java.util.Set)>(r0, $r3, r1);

        return $r4;
    }

    public static java.util.Set filter(java.util.Set, com.google.gxp.com.google.common.base.Predicate)
    {
        java.util.Set r1;
        com.google.gxp.com.google.common.collect.Sets$FilteredSet $r0;
        com.google.gxp.com.google.common.base.Predicate r2;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: com.google.gxp.com.google.common.base.Predicate;

        $r0 = new com.google.gxp.com.google.common.collect.Sets$FilteredSet;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.Sets$FilteredSet: void <init>(java.util.Set,com.google.gxp.com.google.common.base.Predicate)>(r1, r2);

        return $r0;
    }

    static boolean equalsImpl(java.util.Set, java.lang.Object)
    {
        int $i0, $i1;
        java.util.Set r1, r2;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.Set;

        r0 := @parameter1: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof java.util.Set;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (java.util.Set) r0;

        $i0 = interfaceinvoke r2.<java.util.Set: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Set: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $z1 = interfaceinvoke r1.<java.util.Set: boolean containsAll(java.util.Collection)>(r2);

        return $z1;
    }

    static int hashCodeImpl(java.util.Set)
    {
        java.util.Iterator $r1;
        int $i0, i1, $i2;
        java.util.Set r0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Set;

        i1 = 0;

        $r1 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $i0 = i1;

        if $r2 == null goto label2;

        $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        goto label3;

     label2:
        $i2 = 0;

     label3:
        i1 = $i0 + $i2;

        goto label1;

     label4:
        return i1;
    }

    static java.util.Set access$000(java.util.Set)
    {
        java.util.Set r0, $r1;

        r0 := @parameter0: java.util.Set;

        $r1 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.Set fixedRemoveAllAndRetainAll(java.util.Set)>(r0);

        return $r1;
    }
}
