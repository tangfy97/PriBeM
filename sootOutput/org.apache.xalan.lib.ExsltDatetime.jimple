public class org.apache.xalan.lib.ExsltDatetime extends java.lang.Object
{
    static final java.lang.String dt;
    static final java.lang.String d;
    static final java.lang.String gym;
    static final java.lang.String gy;
    static final java.lang.String gmd;
    static final java.lang.String gm;
    static final java.lang.String gd;
    static final java.lang.String t;
    static final java.lang.String EMPTY_STR;

    public void <init>()
    {
        org.apache.xalan.lib.ExsltDatetime r0;

        r0 := @this: org.apache.xalan.lib.ExsltDatetime;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String dateTime()
    {
        java.util.Date $r1;
        java.text.SimpleDateFormat $r2;
        java.util.Calendar $r0;
        java.lang.StringBuffer $r3, $r5, $r6, $r8, $r9, $r11;
        int $i0, $i1, i2, i3, i4;
        java.lang.String $r4, $r7, $r10, $r12, $r13;
        char $c5;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r1 = virtualinvoke $r0.<java.util.Calendar: java.util.Date getTime()>();

        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss");

        $r3 = new java.lang.StringBuffer;

        $r4 = virtualinvoke $r2.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r1);

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>($r4);

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(15);

        $i1 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(16);

        i2 = $i0 + $i1;

        if i2 != 0 goto label1;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Z");

        goto label4;

     label1:
        i3 = i2 / 3600000;

        i4 = i2 % 3600000;

        if i3 >= 0 goto label2;

        $c5 = 45;

        goto label3;

     label2:
        $c5 = 43;

     label3:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c5);

        $r7 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String formatDigits(int)>(i3);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r10 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String formatDigits(int)>(i4);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

     label4:
        $r13 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r13;
    }

    private static java.lang.String formatDigits(int)
    {
        java.lang.StringBuffer $r1, $r2, $r3;
        int i0, $i1, $i2;
        java.lang.String $r0, $r4;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i2 != 1 goto label1;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label1:
        $r4 = $r0;

     label2:
        return $r4;
    }

    public static java.lang.String date(java.lang.String) throws java.text.ParseException
    {
        java.util.Date $r6;
        java.text.SimpleDateFormat $r7;
        java.lang.String[] $r1, $r5;
        java.lang.StringBuffer $r9, $r10, $r11, $r12;
        int $i0;
        java.lang.String r0, r2, r3, r4, $r8, $r13;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String[] getEraDatetimeZone(java.lang.String)>(r0);

        r2 = $r1[0];

        r3 = $r1[1];

        r4 = $r1[2];

        if r3 == null goto label1;

        if r4 != null goto label2;

     label1:
        return "";

     label2:
        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r5[1] = "yyyy-MM-dd";

        $r6 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.util.Date testFormats(java.lang.String,java.lang.String[])>(r3, $r5);

        if $r6 != null goto label3;

        return "";

     label3:
        $r7 = new java.text.SimpleDateFormat;

        specialinvoke $r7.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd");

        virtualinvoke $r7.<java.text.DateFormat: void setLenient(boolean)>(0);

        $r8 = virtualinvoke $r7.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r6);

        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i0 != 0 goto label4;

        return "";

     label4:
        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r13;
    }

    public static java.lang.String date()
    {
        java.lang.StringBuffer $r4, $r5, $r6;
        int $i0, $i1;
        java.lang.String $r0, $r1, $r2, $r3, $r7;

        $r0 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String dateTime()>();

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("T");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: int getZoneStart(java.lang.String)>($r1);

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String time(java.lang.String) throws java.text.ParseException
    {
        java.util.Date $r5;
        java.text.SimpleDateFormat $r6;
        java.lang.String[] $r1, $r4;
        java.lang.StringBuffer $r8, $r9, $r10;
        java.lang.String r0, r2, r3, $r7, $r11;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String[] getEraDatetimeZone(java.lang.String)>(r0);

        r2 = $r1[1];

        r3 = $r1[2];

        if r2 == null goto label1;

        if r3 != null goto label2;

     label1:
        return "";

     label2:
        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r4[1] = "yyyy-MM-dd";

        $r5 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.util.Date testFormats(java.lang.String,java.lang.String[])>(r2, $r4);

        if $r5 != null goto label3;

        return "";

     label3:
        $r6 = new java.text.SimpleDateFormat;

        specialinvoke $r6.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("HH:mm:ss");

        $r7 = virtualinvoke $r6.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r5);

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }

    public static java.lang.String time()
    {
        java.lang.StringBuffer $r4, $r5, $r6;
        int $i0, $i1, $i2;
        java.lang.String $r0, $r1, $r2, $r3, $r7;

        $r0 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String dateTime()>();

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("T");

        $i1 = $i0 + 1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $i2 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: int getZoneStart(java.lang.String)>($r1);

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i2);

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public static double year(java.lang.String) throws java.text.ParseException
    {
        java.lang.String[] $r1, $r3;
        byte $b1;
        int $i0;
        java.lang.String r0, $r2, $r4;
        double $d0, $d1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String[] getEraDatetimeZone(java.lang.String)>(r0);

        $r2 = $r1[0];

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r4 = $r1[1];

        if $r4 != null goto label3;

        return #NaN;

     label3:
        $r3 = newarray (java.lang.String)[4];

        $r3[0] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r3[1] = "yyyy-MM-dd";

        $r3[2] = "yyyy-MM";

        $r3[3] = "yyyy";

        $d0 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: double getNumber(java.lang.String,java.lang.String[],int)>($r4, $r3, 1);

        if $z0 != 0 goto label4;

        $b1 = $d0 cmpl #NaN;

        if $b1 != 0 goto label5;

     label4:
        return $d0;

     label5:
        $d1 = neg $d0;

        return $d1;
    }

    public static double year()
    {
        int $i0;
        java.util.Calendar $r0;
        double $d0;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(1);

        $d0 = (double) $i0;

        return $d0;
    }

    public static double monthInYear(java.lang.String) throws java.text.ParseException
    {
        java.lang.String[] $r1, $r3;
        java.lang.String r0, r2;
        double $d0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String[] getEraDatetimeZone(java.lang.String)>(r0);

        r2 = $r1[1];

        if r2 != null goto label1;

        return #NaN;

     label1:
        $r3 = newarray (java.lang.String)[5];

        $r3[0] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r3[1] = "yyyy-MM-dd";

        $r3[2] = "yyyy-MM";

        $r3[3] = "--MM--";

        $r3[4] = "--MM-dd";

        $d0 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: double getNumber(java.lang.String,java.lang.String[],int)>(r2, $r3, 2);

        return $d0;
    }

    public static double monthInYear()
    {
        int $i0;
        java.util.Calendar $r0;
        double $d0;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(2);

        $d0 = (double) $i0;

        return $d0;
    }

    public static double weekInYear(java.lang.String) throws java.text.ParseException
    {
        java.lang.String[] $r1, $r3;
        java.lang.String r0, r2;
        double $d0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String[] getEraDatetimeZone(java.lang.String)>(r0);

        r2 = $r1[1];

        if r2 != null goto label1;

        return #NaN;

     label1:
        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r3[1] = "yyyy-MM-dd";

        $d0 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: double getNumber(java.lang.String,java.lang.String[],int)>(r2, $r3, 3);

        return $d0;
    }

    public static double weekInYear()
    {
        int $i0;
        java.util.Calendar $r0;
        double $d0;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(3);

        $d0 = (double) $i0;

        return $d0;
    }

    public static double dayInYear(java.lang.String) throws java.text.ParseException
    {
        java.lang.String[] $r1, $r3;
        java.lang.String r0, r2;
        double $d0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String[] getEraDatetimeZone(java.lang.String)>(r0);

        r2 = $r1[1];

        if r2 != null goto label1;

        return #NaN;

     label1:
        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r3[1] = "yyyy-MM-dd";

        $d0 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: double getNumber(java.lang.String,java.lang.String[],int)>(r2, $r3, 6);

        return $d0;
    }

    public static double dayInYear()
    {
        int $i0;
        java.util.Calendar $r0;
        double $d0;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(6);

        $d0 = (double) $i0;

        return $d0;
    }

    public static double dayInMonth(java.lang.String) throws java.text.ParseException
    {
        java.lang.String[] $r1, $r3;
        java.lang.String r0, r2;
        double $d0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String[] getEraDatetimeZone(java.lang.String)>(r0);

        r2 = $r1[1];

        $r3 = newarray (java.lang.String)[4];

        $r3[0] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r3[1] = "yyyy-MM-dd";

        $r3[2] = "--MM-dd";

        $r3[3] = "---dd";

        $d0 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: double getNumber(java.lang.String,java.lang.String[],int)>(r2, $r3, 5);

        return $d0;
    }

    public static double dayInMonth()
    {
        int $i0;
        java.util.Calendar $r0;
        double $d0;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(5);

        $d0 = (double) $i0;

        return $d0;
    }

    public static double dayOfWeekInMonth(java.lang.String) throws java.text.ParseException
    {
        java.lang.String[] $r1, $r3;
        java.lang.String r0, r2;
        double $d0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String[] getEraDatetimeZone(java.lang.String)>(r0);

        r2 = $r1[1];

        if r2 != null goto label1;

        return #NaN;

     label1:
        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r3[1] = "yyyy-MM-dd";

        $d0 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: double getNumber(java.lang.String,java.lang.String[],int)>(r2, $r3, 8);

        return $d0;
    }

    public static double dayOfWeekInMonth()
    {
        int $i0;
        java.util.Calendar $r0;
        double $d0;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(8);

        $d0 = (double) $i0;

        return $d0;
    }

    public static double dayInWeek(java.lang.String) throws java.text.ParseException
    {
        java.lang.String[] $r1, $r3;
        java.lang.String r0, r2;
        double $d0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String[] getEraDatetimeZone(java.lang.String)>(r0);

        r2 = $r1[1];

        if r2 != null goto label1;

        return #NaN;

     label1:
        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r3[1] = "yyyy-MM-dd";

        $d0 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: double getNumber(java.lang.String,java.lang.String[],int)>(r2, $r3, 7);

        return $d0;
    }

    public static double dayInWeek()
    {
        int $i0;
        java.util.Calendar $r0;
        double $d0;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(7);

        $d0 = (double) $i0;

        return $d0;
    }

    public static double hourInDay(java.lang.String) throws java.text.ParseException
    {
        java.lang.String[] $r1, $r3;
        java.lang.String r0, r2;
        double $d0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String[] getEraDatetimeZone(java.lang.String)>(r0);

        r2 = $r1[1];

        if r2 != null goto label1;

        return #NaN;

     label1:
        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r3[1] = "HH:mm:ss";

        $d0 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: double getNumber(java.lang.String,java.lang.String[],int)>(r2, $r3, 11);

        return $d0;
    }

    public static double hourInDay()
    {
        int $i0;
        java.util.Calendar $r0;
        double $d0;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(11);

        $d0 = (double) $i0;

        return $d0;
    }

    public static double minuteInHour(java.lang.String) throws java.text.ParseException
    {
        java.lang.String[] $r1, $r3;
        java.lang.String r0, r2;
        double $d0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String[] getEraDatetimeZone(java.lang.String)>(r0);

        r2 = $r1[1];

        if r2 != null goto label1;

        return #NaN;

     label1:
        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r3[1] = "HH:mm:ss";

        $d0 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: double getNumber(java.lang.String,java.lang.String[],int)>(r2, $r3, 12);

        return $d0;
    }

    public static double minuteInHour()
    {
        int $i0;
        java.util.Calendar $r0;
        double $d0;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(12);

        $d0 = (double) $i0;

        return $d0;
    }

    public static double secondInMinute(java.lang.String) throws java.text.ParseException
    {
        java.lang.String[] $r1, $r3;
        java.lang.String r0, r2;
        double $d0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String[] getEraDatetimeZone(java.lang.String)>(r0);

        r2 = $r1[1];

        if r2 != null goto label1;

        return #NaN;

     label1:
        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r3[1] = "HH:mm:ss";

        $d0 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: double getNumber(java.lang.String,java.lang.String[],int)>(r2, $r3, 13);

        return $d0;
    }

    public static double secondInMinute()
    {
        int $i0;
        java.util.Calendar $r0;
        double $d0;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(13);

        $d0 = (double) $i0;

        return $d0;
    }

    public static org.apache.xpath.objects.XObject leapYear(java.lang.String) throws java.text.ParseException
    {
        org.apache.xpath.objects.XNumber $r4, $r5;
        java.lang.String[] $r1, $r3;
        org.apache.xpath.objects.XBoolean $r6;
        byte $b0;
        int i1, $i2, $i3, $i4;
        java.lang.String r0, r2;
        double $d0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String[] getEraDatetimeZone(java.lang.String)>(r0);

        r2 = $r1[1];

        if r2 != null goto label1;

        $r5 = new org.apache.xpath.objects.XNumber;

        specialinvoke $r5.<org.apache.xpath.objects.XNumber: void <init>(double)>(#NaN);

        return $r5;

     label1:
        $r3 = newarray (java.lang.String)[4];

        $r3[0] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r3[1] = "yyyy-MM-dd";

        $r3[2] = "yyyy-MM";

        $r3[3] = "yyyy";

        $d0 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: double getNumber(java.lang.String,java.lang.String[],int)>(r2, $r3, 1);

        $b0 = $d0 cmpl #NaN;

        if $b0 != 0 goto label2;

        $r4 = new org.apache.xpath.objects.XNumber;

        specialinvoke $r4.<org.apache.xpath.objects.XNumber: void <init>(double)>(#NaN);

        return $r4;

     label2:
        i1 = (int) $d0;

        $r6 = new org.apache.xpath.objects.XBoolean;

        $i2 = i1 % 400;

        if $i2 == 0 goto label3;

        $i3 = i1 % 100;

        if $i3 == 0 goto label4;

        $i4 = i1 % 4;

        if $i4 != 0 goto label4;

     label3:
        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        specialinvoke $r6.<org.apache.xpath.objects.XBoolean: void <init>(boolean)>($z0);

        return $r6;
    }

    public static boolean leapYear()
    {
        java.util.Calendar $r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(1);

        $i1 = $i0 % 400;

        if $i1 == 0 goto label1;

        $i2 = $i0 % 100;

        if $i2 == 0 goto label2;

        $i3 = $i0 % 4;

        if $i3 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static java.lang.String monthName(java.lang.String) throws java.text.ParseException
    {
        java.lang.String[] $r1, $r3;
        java.lang.String r0, r2, $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String[] getEraDatetimeZone(java.lang.String)>(r0);

        r2 = $r1[1];

        if r2 != null goto label1;

        return "";

     label1:
        $r3 = newarray (java.lang.String)[4];

        $r3[0] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r3[1] = "yyyy-MM-dd";

        $r3[2] = "yyyy-MM";

        $r3[3] = "--MM--";

        $r4 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String getNameOrAbbrev(java.lang.String,java.lang.String[],java.lang.String)>(r0, $r3, "MMMM");

        return $r4;
    }

    public static java.lang.String monthName()
    {
        java.lang.String $r0;

        staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r0 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String getNameOrAbbrev(java.lang.String)>("MMMM");

        return $r0;
    }

    public static java.lang.String monthAbbreviation(java.lang.String) throws java.text.ParseException
    {
        java.lang.String[] $r1, $r3;
        java.lang.String r0, r2, $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String[] getEraDatetimeZone(java.lang.String)>(r0);

        r2 = $r1[1];

        if r2 != null goto label1;

        return "";

     label1:
        $r3 = newarray (java.lang.String)[4];

        $r3[0] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r3[1] = "yyyy-MM-dd";

        $r3[2] = "yyyy-MM";

        $r3[3] = "--MM--";

        $r4 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String getNameOrAbbrev(java.lang.String,java.lang.String[],java.lang.String)>(r0, $r3, "MMM");

        return $r4;
    }

    public static java.lang.String monthAbbreviation()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String getNameOrAbbrev(java.lang.String)>("MMM");

        return $r0;
    }

    public static java.lang.String dayName(java.lang.String) throws java.text.ParseException
    {
        java.lang.String[] $r1, $r3;
        java.lang.String r0, r2, $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String[] getEraDatetimeZone(java.lang.String)>(r0);

        r2 = $r1[1];

        if r2 != null goto label1;

        return "";

     label1:
        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r3[1] = "yyyy-MM-dd";

        $r4 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String getNameOrAbbrev(java.lang.String,java.lang.String[],java.lang.String)>(r0, $r3, "EEEE");

        return $r4;
    }

    public static java.lang.String dayName()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String getNameOrAbbrev(java.lang.String)>("EEEE");

        return $r0;
    }

    public static java.lang.String dayAbbreviation(java.lang.String) throws java.text.ParseException
    {
        java.lang.String[] $r1, $r3;
        java.lang.String r0, r2, $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String[] getEraDatetimeZone(java.lang.String)>(r0);

        r2 = $r1[1];

        if r2 != null goto label1;

        return "";

     label1:
        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "yyyy-MM-dd\'T\'HH:mm:ss";

        $r3[1] = "yyyy-MM-dd";

        $r4 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String getNameOrAbbrev(java.lang.String,java.lang.String[],java.lang.String)>(r0, $r3, "EEE");

        return $r4;
    }

    public static java.lang.String dayAbbreviation()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String getNameOrAbbrev(java.lang.String)>("EEE");

        return $r0;
    }

    private static java.lang.String[] getEraDatetimeZone(java.lang.String)
    {
        char $c0;
        java.lang.String[] $r4;
        int $i1, $i2, $i4;
        java.lang.String r0, r1, r2, r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 = "";

        r2 = r0;

        r3 = "";

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c0;

        if $i2 != 45 goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("--");

        if $z0 != 0 goto label1;

        r1 = "-";

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        $i1 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: int getZoneStart(java.lang.String)>(r2);

        if $i1 <= 0 goto label2;

        r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i1);

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        goto label3;

     label2:
        $i4 = (int) -2;

        if $i1 != $i4 goto label3;

        r3 = null;

     label3:
        $r4 = newarray (java.lang.String)[3];

        $r4[0] = r1;

        $r4[1] = r2;

        $r4[2] = r3;

        return $r4;
    }

    private static int getZoneStart(java.lang.String)
    {
        java.text.ParseException $r3;
        java.text.SimpleDateFormat $r9;
        java.lang.StringBuffer $r6, $r7, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i26;
        java.lang.String r0, $r2, $r8;
        java.io.PrintStream $r5;
        char $c6, $c9, $c16;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("Z");

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        if $i0 != $i2 goto label1;

        $i17 = virtualinvoke r0.<java.lang.String: int length()>();

        $i18 = $i17 - 1;

        return $i18;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i3 < 6 goto label4;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        $i5 = $i4 - 3;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        $i20 = (int) $c6;

        if $i20 != 58 goto label4;

        $i7 = virtualinvoke r0.<java.lang.String: int length()>();

        $i8 = $i7 - 6;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i8);

        $i21 = (int) $c9;

        if $i21 == 43 goto label2;

        $i14 = virtualinvoke r0.<java.lang.String: int length()>();

        $i15 = $i14 - 6;

        $c16 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i15);

        $i22 = (int) $c16;

        if $i22 != 45 goto label4;

     label2:
        $r9 = new java.text.SimpleDateFormat;

        specialinvoke $r9.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("HH:mm");

        virtualinvoke $r9.<java.text.DateFormat: void setLenient(boolean)>(0);

        $i10 = virtualinvoke r0.<java.lang.String: int length()>();

        $i11 = $i10 - 5;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i11);

        virtualinvoke $r9.<java.text.DateFormat: java.util.Date parse(java.lang.String)>($r2);

        $i12 = virtualinvoke r0.<java.lang.String: int length()>();

        $i13 = $i12 - 6;

        return $i13;

     label3:
        $r3 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ParseException ");

        $i19 = virtualinvoke $r3.<java.text.ParseException: int getErrorOffset()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i19);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r8);

        $i24 = (int) -2;

        return $i24;

     label4:
        $i26 = (int) -1;

        return $i26;

        catch java.text.ParseException from label2 to label3 with label3;
    }

    private static java.util.Date testFormats(java.lang.String, java.lang.String[]) throws java.text.ParseException
    {
        java.util.Date $r4;
        java.text.SimpleDateFormat $r1;
        java.lang.String[] r0;
        int $i0, i1;
        java.lang.String $r2, r3;
        java.text.ParseException $r5;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String[];

        i1 = 0;

        goto label3;

     label1:
        $r1 = new java.text.SimpleDateFormat;

        $r2 = r0[i1];

        specialinvoke $r1.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r2);

        virtualinvoke $r1.<java.text.DateFormat: void setLenient(boolean)>(0);

        $r4 = virtualinvoke $r1.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r3);

        return $r4;

     label2:
        $r5 := @caughtexception;

        i1 = i1 + 1;

     label3:
        $i0 = lengthof r0;

        if i1 < $i0 goto label1;

        return null;

        catch java.text.ParseException from label1 to label2 with label2;
    }

    private static double getNumber(java.lang.String, java.lang.String[], int) throws java.text.ParseException
    {
        java.util.Calendar $r0;
        java.util.Date $r3;
        int i0, $i1;
        java.lang.String[] r2;
        java.lang.String r1;
        double $d0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        i0 := @parameter2: int;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke $r0.<java.util.Calendar: void setLenient(boolean)>(0);

        $r3 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.util.Date testFormats(java.lang.String,java.lang.String[])>(r1, r2);

        if $r3 != null goto label1;

        return #NaN;

     label1:
        virtualinvoke $r0.<java.util.Calendar: void setTime(java.util.Date)>($r3);

        $i1 = virtualinvoke $r0.<java.util.Calendar: int get(int)>(i0);

        $d0 = (double) $i1;

        return $d0;
    }

    private static java.lang.String getNameOrAbbrev(java.lang.String, java.lang.String[], java.lang.String) throws java.text.ParseException
    {
        java.util.Date $r4;
        java.text.SimpleDateFormat $r1;
        java.lang.String[] r0;
        int $i0, i1;
        java.lang.String $r2, r3, r5, $r6;
        java.text.ParseException $r7;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String[];

        r5 := @parameter2: java.lang.String;

        i1 = 0;

        goto label3;

     label1:
        $r1 = new java.text.SimpleDateFormat;

        $r2 = r0[i1];

        specialinvoke $r1.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r2);

        virtualinvoke $r1.<java.text.DateFormat: void setLenient(boolean)>(0);

        $r4 = virtualinvoke $r1.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r3);

        virtualinvoke $r1.<java.text.SimpleDateFormat: void applyPattern(java.lang.String)>(r5);

        $r6 = virtualinvoke $r1.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r4);

        return $r6;

     label2:
        $r7 := @caughtexception;

        i1 = i1 + 1;

     label3:
        $i0 = lengthof r0;

        if i1 < $i0 goto label1;

        return "";

        catch java.text.ParseException from label1 to label2 with label2;
    }

    private static java.lang.String getNameOrAbbrev(java.lang.String)
    {
        java.util.Calendar $r0;
        java.util.Date $r3;
        java.text.SimpleDateFormat $r1;
        java.lang.String r2, $r4;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r1 = new java.text.SimpleDateFormat;

        specialinvoke $r1.<java.text.SimpleDateFormat: void <init>(java.lang.String)>(r2);

        $r3 = virtualinvoke $r0.<java.util.Calendar: java.util.Date getTime()>();

        $r4 = virtualinvoke $r1.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r3);

        return $r4;
    }

    public static java.lang.String formatDate(java.lang.String, java.lang.String)
    {
        java.text.SimpleDateFormat $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75;
        java.lang.StringBuffer $r2, $r3, $r9, $r10, $r11, $r14, $r15, $r47, $r48, $r52, $r53, $r61, $r62, $r63, $r64, $r65;
        java.lang.String $r1, r4, $r5, $r6, $r8, $r12, $r16, $r22, $r23, $r28, $r29, $r32, $r35, $r39, $r40, r42, r44, $r49, $r54, $r57, $r58, r59, r60;
        java.util.Date $r20, $r26, $r33, $r37, $r55;
        java.text.ParseException $r17, $r18, $r24, $r30, $r41;
        boolean $z0, $z1, $z2, $z3;
        java.util.TimeZone r43;
        java.lang.String[] $r45;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i16, i17, $i18, $i19, $i20;
        char $c5, $c8, $c15;

        r42 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r42.<java.lang.String: boolean endsWith(java.lang.String)>("Z");

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke r42.<java.lang.String: boolean endsWith(java.lang.String)>("z");

        if $z1 == 0 goto label02;

     label01:
        r43 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        $r61 = new java.lang.StringBuffer;

        specialinvoke $r61.<java.lang.StringBuffer: void <init>()>();

        $i0 = virtualinvoke r42.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r1 = virtualinvoke r42.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r2 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("GMT");

        r42 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        r44 = "z";

        r60 = "z";

        r59 = "z";

        goto label08;

     label02:
        $i2 = virtualinvoke r42.<java.lang.String: int length()>();

        if $i2 < 6 goto label07;

        $i3 = virtualinvoke r42.<java.lang.String: int length()>();

        $i4 = $i3 - 3;

        $c5 = virtualinvoke r42.<java.lang.String: char charAt(int)>($i4);

        $i18 = (int) $c5;

        if $i18 != 58 goto label07;

        $i6 = virtualinvoke r42.<java.lang.String: int length()>();

        $i7 = $i6 - 6;

        $c8 = virtualinvoke r42.<java.lang.String: char charAt(int)>($i7);

        $i19 = (int) $c8;

        if $i19 == 43 goto label03;

        $i13 = virtualinvoke r42.<java.lang.String: int length()>();

        $i14 = $i13 - 6;

        $c15 = virtualinvoke r42.<java.lang.String: char charAt(int)>($i14);

        $i20 = (int) $c15;

        if $i20 != 45 goto label07;

     label03:
        $i9 = virtualinvoke r42.<java.lang.String: int length()>();

        $i10 = $i9 - 6;

        $r5 = virtualinvoke r42.<java.lang.String: java.lang.String substring(int)>($i10);

        $r6 = "+00:00";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label04;

        $r12 = "-00:00";

        $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z3 == 0 goto label05;

     label04:
        r43 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        goto label06;

     label05:
        $r62 = new java.lang.StringBuffer;

        specialinvoke $r62.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("GMT");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        r43 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r16);

     label06:
        r44 = "z";

        r60 = "z";

        r59 = "z";

        $r63 = new java.lang.StringBuffer;

        specialinvoke $r63.<java.lang.StringBuffer: void <init>()>();

        $i11 = virtualinvoke r42.<java.lang.String: int length()>();

        $i12 = $i11 - 6;

        $r8 = virtualinvoke r42.<java.lang.String: java.lang.String substring(int,int)>(0, $i12);

        $r9 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("GMT");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        r42 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label08;

     label07:
        r43 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        r44 = "";

        r60 = "";

        r59 = "";

     label08:
        $r45 = newarray (java.lang.String)[4];

        $r64 = new java.lang.StringBuffer;

        specialinvoke $r64.<java.lang.StringBuffer: void <init>()>();

        $r47 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss");

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r60);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.String toString()>();

        $r45[0] = $r49;

        $r45[1] = "yyyy-MM-dd";

        $r45[2] = "yyyy-MM";

        $r45[3] = "yyyy";

     label09:
        $r66 = new java.text.SimpleDateFormat;

        $r65 = new java.lang.StringBuffer;

        specialinvoke $r65.<java.lang.StringBuffer: void <init>()>();

        $r52 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("HH:mm:ss");

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r59);

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r66.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r54);

        virtualinvoke $r66.<java.text.DateFormat: void setLenient(boolean)>(0);

        $r55 = virtualinvoke $r66.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r42);

        $r67 = new java.text.SimpleDateFormat;

        $r57 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String strip(java.lang.String,java.lang.String)>("GyMdDEFwW", r4);

        specialinvoke $r67.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r57);

        virtualinvoke $r67.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(r43);

        $r58 = virtualinvoke $r67.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r55);

        return $r58;

     label10:
        $r41 := @caughtexception;

        i17 = 0;

        goto label13;

     label11:
        $r68 = new java.text.SimpleDateFormat;

        $r32 = $r45[i17];

        specialinvoke $r68.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r32);

        virtualinvoke $r68.<java.text.DateFormat: void setLenient(boolean)>(0);

        $r33 = virtualinvoke $r68.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r42);

        $r69 = new java.text.SimpleDateFormat;

        specialinvoke $r69.<java.text.SimpleDateFormat: void <init>(java.lang.String)>(r4);

        virtualinvoke $r69.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(r43);

        $r35 = virtualinvoke $r69.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r33);

        return $r35;

     label12:
        $r30 := @caughtexception;

        i17 = i17 + 1;

     label13:
        $i16 = lengthof $r45;

        if i17 < $i16 goto label11;

     label14:
        $r70 = new java.text.SimpleDateFormat;

        specialinvoke $r70.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("--MM-dd");

        virtualinvoke $r70.<java.text.DateFormat: void setLenient(boolean)>(0);

        $r37 = virtualinvoke $r70.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r42);

        $r71 = new java.text.SimpleDateFormat;

        $r39 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String strip(java.lang.String,java.lang.String)>("Gy", r4);

        specialinvoke $r71.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r39);

        virtualinvoke $r71.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(r43);

        $r40 = virtualinvoke $r71.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r37);

        return $r40;

     label15:
        $r24 := @caughtexception;

     label16:
        $r72 = new java.text.SimpleDateFormat;

        specialinvoke $r72.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("--MM--");

        virtualinvoke $r72.<java.text.DateFormat: void setLenient(boolean)>(0);

        $r26 = virtualinvoke $r72.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r42);

        $r73 = new java.text.SimpleDateFormat;

        $r28 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String strip(java.lang.String,java.lang.String)>("Gy", r4);

        specialinvoke $r73.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r28);

        virtualinvoke $r73.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(r43);

        $r29 = virtualinvoke $r73.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r26);

        return $r29;

     label17:
        $r18 := @caughtexception;

     label18:
        $r74 = new java.text.SimpleDateFormat;

        specialinvoke $r74.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("---dd");

        virtualinvoke $r74.<java.text.DateFormat: void setLenient(boolean)>(0);

        $r20 = virtualinvoke $r74.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r42);

        $r75 = new java.text.SimpleDateFormat;

        $r22 = staticinvoke <org.apache.xalan.lib.ExsltDatetime: java.lang.String strip(java.lang.String,java.lang.String)>("GyM", r4);

        specialinvoke $r75.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r22);

        virtualinvoke $r75.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(r43);

        $r23 = virtualinvoke $r75.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r20);

        return $r23;

     label19:
        $r17 := @caughtexception;

        return "";

        catch java.text.ParseException from label09 to label10 with label10;
        catch java.text.ParseException from label11 to label12 with label12;
        catch java.text.ParseException from label14 to label15 with label15;
        catch java.text.ParseException from label16 to label17 with label17;
        catch java.text.ParseException from label18 to label19 with label19;
    }

    private static java.lang.String strip(java.lang.String, java.lang.String)
    {
        java.lang.StringBuffer $r5;
        int $i0, $i2, $i3, $i4, i5, i6, $i7, $i8, $i10, $i11, $i13;
        java.lang.String r1, r2, $r3, $r4;
        char $c1;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i5 = 0;

        $r5 = new java.lang.StringBuffer;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r5.<java.lang.StringBuffer: void <init>(int)>($i0);

        goto label5;

     label1:
        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        $i8 = (int) $c1;

        if $i8 != 39 goto label3;

        $i3 = i5 + 1;

        $i4 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(39, $i3);

        i6 = $i4;

        $i10 = (int) -1;

        if $i4 != $i10 goto label2;

        i6 = virtualinvoke r1.<java.lang.String: int length()>();

     label2:
        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i5, i6);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        i5 = i6;

        goto label5;

     label3:
        $i11 = (int) $c1;

        $i2 = virtualinvoke r2.<java.lang.String: int indexOf(int)>($i11);

        $i13 = (int) -1;

        if $i2 <= $i13 goto label4;

        i5 = i5 + 1;

        goto label5;

     label4:
        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        i5 = i5 + 1;

     label5:
        $i7 = virtualinvoke r1.<java.lang.String: int length()>();

        if i5 < $i7 goto label1;

        $r4 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static void <clinit>()
    {
        <org.apache.xalan.lib.ExsltDatetime: java.lang.String EMPTY_STR> = "";

        <org.apache.xalan.lib.ExsltDatetime: java.lang.String t> = "HH:mm:ss";

        <org.apache.xalan.lib.ExsltDatetime: java.lang.String gd> = "---dd";

        <org.apache.xalan.lib.ExsltDatetime: java.lang.String gm> = "--MM--";

        <org.apache.xalan.lib.ExsltDatetime: java.lang.String gmd> = "--MM-dd";

        <org.apache.xalan.lib.ExsltDatetime: java.lang.String gy> = "yyyy";

        <org.apache.xalan.lib.ExsltDatetime: java.lang.String gym> = "yyyy-MM";

        <org.apache.xalan.lib.ExsltDatetime: java.lang.String d> = "yyyy-MM-dd";

        <org.apache.xalan.lib.ExsltDatetime: java.lang.String dt> = "yyyy-MM-dd\'T\'HH:mm:ss";

        return;
    }
}
