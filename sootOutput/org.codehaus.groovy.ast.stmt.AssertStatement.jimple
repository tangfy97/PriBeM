public class org.codehaus.groovy.ast.stmt.AssertStatement extends org.codehaus.groovy.ast.stmt.Statement
{
    private org.codehaus.groovy.ast.expr.BooleanExpression booleanExpression;
    private org.codehaus.groovy.ast.expr.Expression messageExpression;

    public void <init>(org.codehaus.groovy.ast.expr.BooleanExpression)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression r1;
        org.codehaus.groovy.ast.expr.ConstantExpression $r2;
        org.codehaus.groovy.ast.stmt.AssertStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.AssertStatement;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.BooleanExpression;

        $r2 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression NULL>;

        specialinvoke r0.<org.codehaus.groovy.ast.stmt.AssertStatement: void <init>(org.codehaus.groovy.ast.expr.BooleanExpression,org.codehaus.groovy.ast.expr.Expression)>(r1, $r2);

        return;
    }

    public void <init>(org.codehaus.groovy.ast.expr.BooleanExpression, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression r1;
        org.codehaus.groovy.ast.expr.Expression r2;
        org.codehaus.groovy.ast.stmt.AssertStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.AssertStatement;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.BooleanExpression;

        r2 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        specialinvoke r0.<org.codehaus.groovy.ast.stmt.Statement: void <init>()>();

        r0.<org.codehaus.groovy.ast.stmt.AssertStatement: org.codehaus.groovy.ast.expr.BooleanExpression booleanExpression> = r1;

        r0.<org.codehaus.groovy.ast.stmt.AssertStatement: org.codehaus.groovy.ast.expr.Expression messageExpression> = r2;

        return;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.GroovyCodeVisitor r0;
        org.codehaus.groovy.ast.stmt.AssertStatement r1;

        r1 := @this: org.codehaus.groovy.ast.stmt.AssertStatement;

        r0 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        interfaceinvoke r0.<org.codehaus.groovy.ast.GroovyCodeVisitor: void visitAssertStatement(org.codehaus.groovy.ast.stmt.AssertStatement)>(r1);

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression getMessageExpression()
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.stmt.AssertStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.AssertStatement;

        $r1 = r0.<org.codehaus.groovy.ast.stmt.AssertStatement: org.codehaus.groovy.ast.expr.Expression messageExpression>;

        return $r1;
    }

    public org.codehaus.groovy.ast.expr.BooleanExpression getBooleanExpression()
    {
        org.codehaus.groovy.ast.expr.BooleanExpression $r1;
        org.codehaus.groovy.ast.stmt.AssertStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.AssertStatement;

        $r1 = r0.<org.codehaus.groovy.ast.stmt.AssertStatement: org.codehaus.groovy.ast.expr.BooleanExpression booleanExpression>;

        return $r1;
    }

    public void setBooleanExpression(org.codehaus.groovy.ast.expr.BooleanExpression)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression r1;
        org.codehaus.groovy.ast.stmt.AssertStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.AssertStatement;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.BooleanExpression;

        r0.<org.codehaus.groovy.ast.stmt.AssertStatement: org.codehaus.groovy.ast.expr.BooleanExpression booleanExpression> = r1;

        return;
    }

    public void setMessageExpression(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.Expression r1;
        org.codehaus.groovy.ast.stmt.AssertStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.AssertStatement;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r0.<org.codehaus.groovy.ast.stmt.AssertStatement: org.codehaus.groovy.ast.expr.Expression messageExpression> = r1;

        return;
    }
}
