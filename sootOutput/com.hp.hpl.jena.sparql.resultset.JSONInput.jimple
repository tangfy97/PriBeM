public class com.hp.hpl.jena.sparql.resultset.JSONInput extends com.hp.hpl.jena.sparql.resultset.SPARQLResult
{
    java.lang.Boolean booleanResult;
    java.util.List rows;
    java.util.List vars;
    org.apache.jena.riot.lang.LabelToNode labelMap;

    public static com.hp.hpl.jena.query.ResultSet fromJSON(java.io.InputStream)
    {
        com.hp.hpl.jena.sparql.resultset.JSONInput $r0;
        com.hp.hpl.jena.query.ResultSet $r3;
        com.hp.hpl.jena.sparql.resultset.SPARQLResult $r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new com.hp.hpl.jena.sparql.resultset.JSONInput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: void <init>()>();

        $r2 = specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: com.hp.hpl.jena.sparql.resultset.SPARQLResult process(java.io.InputStream,com.hp.hpl.jena.rdf.model.Model)>(r1, null);

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.resultset.SPARQLResult: com.hp.hpl.jena.query.ResultSet getResultSet()>();

        return $r3;
    }

    public static boolean booleanFromJSON(java.io.InputStream)
    {
        com.hp.hpl.jena.sparql.resultset.JSONInput $r0;
        com.hp.hpl.jena.sparql.resultset.SPARQLResult $r2;
        java.io.InputStream r1;
        boolean $z0;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new com.hp.hpl.jena.sparql.resultset.JSONInput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: void <init>()>();

        $r2 = specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: com.hp.hpl.jena.sparql.resultset.SPARQLResult process(java.io.InputStream,com.hp.hpl.jena.rdf.model.Model)>(r1, null);

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.resultset.SPARQLResult: boolean getBooleanResult()>();

        return $z0;
    }

    public static com.hp.hpl.jena.sparql.resultset.SPARQLResult make(java.io.InputStream)
    {
        com.hp.hpl.jena.sparql.resultset.SPARQLResult $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.resultset.JSONInput: com.hp.hpl.jena.sparql.resultset.SPARQLResult make(java.io.InputStream,com.hp.hpl.jena.rdf.model.Model)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.resultset.SPARQLResult make(java.io.InputStream, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.sparql.resultset.JSONInput $r0;
        com.hp.hpl.jena.rdf.model.Model r2;
        com.hp.hpl.jena.sparql.resultset.SPARQLResult $r3;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r0 = new com.hp.hpl.jena.sparql.resultset.JSONInput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: void <init>()>();

        $r3 = specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: com.hp.hpl.jena.sparql.resultset.SPARQLResult process(java.io.InputStream,com.hp.hpl.jena.rdf.model.Model)>(r1, r2);

        return $r3;
    }

    public void <init>()
    {
        com.hp.hpl.jena.sparql.resultset.JSONInput r0;
        org.apache.jena.riot.lang.LabelToNode $r1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInput;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.SPARQLResult: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: java.lang.Boolean booleanResult> = null;

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: java.util.List rows> = null;

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: java.util.List vars> = null;

        $r1 = staticinvoke <org.apache.jena.riot.system.SyntaxLabels: org.apache.jena.riot.lang.LabelToNode createLabelToNode()>();

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: org.apache.jena.riot.lang.LabelToNode labelMap> = $r1;

        return;
    }

    public void <init>(java.io.InputStream)
    {
        com.hp.hpl.jena.sparql.resultset.JSONInput r0;
        java.io.InputStream r1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInput;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: void <init>(java.io.InputStream,com.hp.hpl.jena.rdf.model.Model)>(r1, null);

        return;
    }

    public void <init>(java.io.InputStream, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.sparql.resultset.JSONInput r0;
        org.apache.jena.riot.lang.LabelToNode $r1;
        com.hp.hpl.jena.rdf.model.Model r3;
        java.io.InputStream r2;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInput;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.SPARQLResult: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: java.lang.Boolean booleanResult> = null;

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: java.util.List rows> = null;

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: java.util.List vars> = null;

        $r1 = staticinvoke <org.apache.jena.riot.system.SyntaxLabels: org.apache.jena.riot.lang.LabelToNode createLabelToNode()>();

        r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: org.apache.jena.riot.lang.LabelToNode labelMap> = $r1;

        if r3 != null goto label1;

        r3 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphFactory: com.hp.hpl.jena.rdf.model.Model makeJenaDefaultModel()>();

     label1:
        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: com.hp.hpl.jena.sparql.resultset.SPARQLResult process(java.io.InputStream,com.hp.hpl.jena.rdf.model.Model)>(r2, r3);

        return;
    }

    private com.hp.hpl.jena.sparql.resultset.SPARQLResult process(java.io.InputStream, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper $r4;
        com.hp.hpl.jena.sparql.resultset.JSONInput r0;
        java.util.Iterator $r6;
        com.hp.hpl.jena.sparql.engine.ResultSetStream $r7;
        java.util.List $r2, $r5, $r8, $r9;
        com.hp.hpl.jena.rdf.model.Model r10;
        java.lang.Boolean $r3;
        java.io.InputStream r1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.JSONInput;

        r1 := @parameter0: java.io.InputStream;

        r10 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: void parse(java.io.InputStream)>(r1);

        if r10 != null goto label1;

        r10 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphFactory: com.hp.hpl.jena.rdf.model.Model makeJenaDefaultModel()>();

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: java.util.List rows>;

        if $r2 == null goto label2;

        $r4 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper;

        $r5 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: java.util.List rows>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper: void <init>(java.util.Iterator)>($r6);

        $r7 = new com.hp.hpl.jena.sparql.engine.ResultSetStream;

        $r8 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: java.util.List vars>;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: java.util.List varNames(java.util.Collection)>($r8);

        specialinvoke $r7.<com.hp.hpl.jena.sparql.engine.ResultSetStream: void <init>(java.util.List,com.hp.hpl.jena.rdf.model.Model,java.util.Iterator)>($r9, r10, $r4);

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.SPARQLResult: void set(com.hp.hpl.jena.query.ResultSet)>($r7);

        goto label3;

     label2:
        $r3 = r0.<com.hp.hpl.jena.sparql.resultset.JSONInput: java.lang.Boolean booleanResult>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.SPARQLResult: void set(java.lang.Boolean)>($r3);

     label3:
        return r0;
    }

    private void parse(java.io.InputStream)
    {
        com.hp.hpl.jena.graph.Node $r32;
        org.apache.jena.atlas.json.JsonBoolean $r85;
        java.util.Set $r24;
        java.lang.StringBuilder $r35, $r36, $r37, $r38, $r39, $r56, $r57, $r58, $r61, $r62, $r65, $r72, $r73, $r76;
        java.util.ArrayList $r4, $r43;
        java.lang.String $r2, $r6, $r7, $r8, $r9, $r10, $r12, $r15, $r16, r28, $r40, $r44, $r46, $r48, $r54, $r59, $r63, $r66, $r67, $r70, $r74, $r77, $r81, $r82, $r83, $r89, $r92;
        org.apache.jena.atlas.json.JsonObject $r1, $r14, $r23, $r31, $r91;
        com.hp.hpl.jena.sparql.resultset.JSONInput r3;
        org.apache.jena.atlas.json.JsonArray $r18, $r50;
        org.apache.jena.atlas.json.JsonValue $r11, $r13, $r17, r22, $r30, $r45, $r47, $r49, $r64, $r68, $r75, $r84, r87, $r90, $r93;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        java.util.List $r26, $r29, $r88;
        java.lang.String[] $r5, $r80;
        org.apache.jena.atlas.json.JsonString $r53, $r69;
        java.lang.Boolean $r86;
        com.hp.hpl.jena.sparql.resultset.ResultSetException $r34, $r41, $r42, $r55, $r60, $r71, $r78, $r79;
        java.util.Iterator $r19, $r25, $r51;
        com.hp.hpl.jena.sparql.core.Var $r33;
        java.lang.Object $r21, $r27, $r52;
        java.io.InputStream r0;

        r3 := @this: com.hp.hpl.jena.sparql.resultset.JSONInput;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.apache.jena.atlas.json.JSON: org.apache.jena.atlas.json.JsonObject parse(java.io.InputStream)>(r0);

        $r2 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kBoolean>;

        $z0 = virtualinvoke $r1.<org.apache.jena.atlas.json.JsonObject: boolean hasKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label01;

        $r80 = newarray (java.lang.String)[2];

        $r81 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kHead>;

        $r80[0] = $r81;

        $r82 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kBoolean>;

        $r80[1] = $r82;

        staticinvoke <com.hp.hpl.jena.sparql.resultset.JSONInput: void checkContains(org.apache.jena.atlas.json.JsonObject,java.lang.String[])>($r1, $r80);

        $r83 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kBoolean>;

        $r84 = virtualinvoke $r1.<org.apache.jena.atlas.json.JsonObject: org.apache.jena.atlas.json.JsonValue get(java.lang.String)>($r83);

        $r85 = virtualinvoke $r84.<org.apache.jena.atlas.json.JsonValue: org.apache.jena.atlas.json.JsonBoolean getAsBoolean()>();

        $z14 = virtualinvoke $r85.<org.apache.jena.atlas.json.JsonBoolean: boolean value()>();

        $r86 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z14);

        r3.<com.hp.hpl.jena.sparql.resultset.JSONInput: java.lang.Boolean booleanResult> = $r86;

        r3.<com.hp.hpl.jena.sparql.resultset.JSONInput: java.util.List rows> = null;

        return;

     label01:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(1000);

        r3.<com.hp.hpl.jena.sparql.resultset.JSONInput: java.util.List rows> = $r4;

        $r5 = newarray (java.lang.String)[2];

        $r6 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kHead>;

        $r5[0] = $r6;

        $r7 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kResults>;

        $r5[1] = $r7;

        staticinvoke <com.hp.hpl.jena.sparql.resultset.JSONInput: void checkContains(org.apache.jena.atlas.json.JsonObject,java.lang.String[])>($r1, $r5);

        $r8 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kHead>;

        $z1 = virtualinvoke $r1.<org.apache.jena.atlas.json.JsonObject: boolean hasKey(java.lang.Object)>($r8);

        if $z1 != 0 goto label02;

        $r79 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        specialinvoke $r79.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>("No \'head\' for results");

        throw $r79;

     label02:
        $r9 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kResults>;

        $z2 = virtualinvoke $r1.<org.apache.jena.atlas.json.JsonObject: boolean hasKey(java.lang.Object)>($r9);

        if $z2 != 0 goto label03;

        $r78 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        specialinvoke $r78.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>("No \'results\' for results");

        throw $r78;

     label03:
        $r10 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kHead>;

        $r11 = virtualinvoke $r1.<org.apache.jena.atlas.json.JsonObject: org.apache.jena.atlas.json.JsonValue get(java.lang.String)>($r10);

        $z3 = virtualinvoke $r11.<org.apache.jena.atlas.json.JsonValue: boolean isObject()>();

        if $z3 != 0 goto label04;

        $r71 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key \'head\' must have a JSON object as value: found: ");

        $r74 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kHead>;

        $r75 = virtualinvoke $r1.<org.apache.jena.atlas.json.JsonObject: org.apache.jena.atlas.json.JsonValue get(java.lang.String)>($r74);

        $r76 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r75);

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r71.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>($r77);

        throw $r71;

     label04:
        $r12 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kHead>;

        $r13 = virtualinvoke $r1.<org.apache.jena.atlas.json.JsonObject: org.apache.jena.atlas.json.JsonValue get(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<org.apache.jena.atlas.json.JsonValue: org.apache.jena.atlas.json.JsonObject getAsObject()>();

        $r15 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kLink>;

        $z4 = virtualinvoke $r14.<org.apache.jena.atlas.json.JsonObject: boolean hasKey(java.lang.Object)>($r15);

        if $z4 == 0 goto label09;

        $r43 = new java.util.ArrayList;

        specialinvoke $r43.<java.util.ArrayList: void <init>()>();

        $r44 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kLink>;

        $r45 = virtualinvoke $r14.<org.apache.jena.atlas.json.JsonObject: org.apache.jena.atlas.json.JsonValue get(java.lang.String)>($r44);

        $z10 = virtualinvoke $r45.<org.apache.jena.atlas.json.JsonValue: boolean isString()>();

        if $z10 == 0 goto label05;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r3, "Link field is a string, should be an array of strings");

        $r67 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kLink>;

        $r68 = virtualinvoke $r14.<org.apache.jena.atlas.json.JsonObject: org.apache.jena.atlas.json.JsonValue get(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<org.apache.jena.atlas.json.JsonValue: org.apache.jena.atlas.json.JsonString getAsString()>();

        $r70 = virtualinvoke $r69.<org.apache.jena.atlas.json.JsonString: java.lang.String value()>();

        interfaceinvoke $r43.<java.util.List: boolean add(java.lang.Object)>($r70);

        goto label09;

     label05:
        $r46 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kLink>;

        $r47 = virtualinvoke $r14.<org.apache.jena.atlas.json.JsonObject: org.apache.jena.atlas.json.JsonValue get(java.lang.String)>($r46);

        $z11 = virtualinvoke $r47.<org.apache.jena.atlas.json.JsonValue: boolean isArray()>();

        if $z11 != 0 goto label06;

        $r60 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key \'link\' must have be an array: found: ");

        $r63 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kLink>;

        $r64 = virtualinvoke $r1.<org.apache.jena.atlas.json.JsonObject: org.apache.jena.atlas.json.JsonValue get(java.lang.String)>($r63);

        $r65 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r64);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r60.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>($r66);

        throw $r60;

     label06:
        $r48 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kLink>;

        $r49 = virtualinvoke $r14.<org.apache.jena.atlas.json.JsonObject: org.apache.jena.atlas.json.JsonValue get(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<org.apache.jena.atlas.json.JsonValue: org.apache.jena.atlas.json.JsonArray getAsArray()>();

        $r51 = virtualinvoke $r50.<org.apache.jena.atlas.json.JsonArray: java.util.Iterator iterator()>();

     label07:
        $z12 = interfaceinvoke $r51.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label09;

        $r52 = interfaceinvoke $r51.<java.util.Iterator: java.lang.Object next()>();

        r87 = (org.apache.jena.atlas.json.JsonValue) $r52;

        $z13 = virtualinvoke r87.<org.apache.jena.atlas.json.JsonValue: boolean isString()>();

        if $z13 != 0 goto label08;

        $r55 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key \'link\' must have be an array of strings: found: ");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r87);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r55.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>($r59);

        throw $r55;

     label08:
        $r53 = virtualinvoke r87.<org.apache.jena.atlas.json.JsonValue: org.apache.jena.atlas.json.JsonString getAsString()>();

        $r54 = virtualinvoke $r53.<org.apache.jena.atlas.json.JsonString: java.lang.String value()>();

        interfaceinvoke $r43.<java.util.List: boolean add(java.lang.Object)>($r54);

        goto label07;

     label09:
        $r88 = specialinvoke r3.<com.hp.hpl.jena.sparql.resultset.JSONInput: java.util.List parseVars(org.apache.jena.atlas.json.JsonObject)>($r14);

        r3.<com.hp.hpl.jena.sparql.resultset.JSONInput: java.util.List vars> = $r88;

        $r89 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kResults>;

        $r90 = virtualinvoke $r1.<org.apache.jena.atlas.json.JsonObject: org.apache.jena.atlas.json.JsonValue get(java.lang.String)>($r89);

        $r91 = virtualinvoke $r90.<org.apache.jena.atlas.json.JsonValue: org.apache.jena.atlas.json.JsonObject getAsObject()>();

        $r92 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kBindings>;

        $r93 = virtualinvoke $r91.<org.apache.jena.atlas.json.JsonObject: org.apache.jena.atlas.json.JsonValue get(java.lang.String)>($r92);

        $z15 = virtualinvoke $r93.<org.apache.jena.atlas.json.JsonValue: boolean isArray()>();

        if $z15 != 0 goto label10;

        $r42 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        specialinvoke $r42.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>("\'bindings\' must be an array");

        throw $r42;

     label10:
        $r16 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kBindings>;

        $r17 = virtualinvoke $r91.<org.apache.jena.atlas.json.JsonObject: org.apache.jena.atlas.json.JsonValue get(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<org.apache.jena.atlas.json.JsonValue: org.apache.jena.atlas.json.JsonArray getAsArray()>();

        $r19 = virtualinvoke $r18.<org.apache.jena.atlas.json.JsonArray: java.util.Iterator iterator()>();

     label11:
        $z5 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label17;

        $r20 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create()>();

        $r21 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r22 = (org.apache.jena.atlas.json.JsonValue) $r21;

        $z6 = virtualinvoke r22.<org.apache.jena.atlas.json.JsonValue: boolean isObject()>();

        if $z6 != 0 goto label12;

        $r41 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        specialinvoke $r41.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>("Entry in \'bindings\' array must be an object {}");

        throw $r41;

     label12:
        $r23 = virtualinvoke r22.<org.apache.jena.atlas.json.JsonValue: org.apache.jena.atlas.json.JsonObject getAsObject()>();

        $r24 = virtualinvoke $r23.<org.apache.jena.atlas.json.JsonObject: java.util.Set keys()>();

        $r25 = interfaceinvoke $r24.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z7 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label16;

        $r27 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        r28 = (java.lang.String) $r27;

        $r29 = r3.<com.hp.hpl.jena.sparql.resultset.JSONInput: java.util.List vars>;

        $z8 = interfaceinvoke $r29.<java.util.List: boolean contains(java.lang.Object)>(r28);

        if $z8 != 0 goto label14;

     label14:
        $r30 = virtualinvoke $r23.<org.apache.jena.atlas.json.JsonObject: org.apache.jena.atlas.json.JsonValue get(java.lang.String)>(r28);

        $z9 = virtualinvoke $r30.<org.apache.jena.atlas.json.JsonValue: boolean isObject()>();

        if $z9 != 0 goto label15;

        $r34 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Binding for variable \'");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a JSON object: ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>($r40);

        throw $r34;

     label15:
        $r31 = virtualinvoke $r30.<org.apache.jena.atlas.json.JsonValue: org.apache.jena.atlas.json.JsonObject getAsObject()>();

        $r32 = specialinvoke r3.<com.hp.hpl.jena.sparql.resultset.JSONInput: com.hp.hpl.jena.graph.Node parseOneTerm(org.apache.jena.atlas.json.JsonObject)>($r31);

        $r33 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>(r28);

        interfaceinvoke $r20.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r33, $r32);

        goto label13;

     label16:
        $r26 = r3.<com.hp.hpl.jena.sparql.resultset.JSONInput: java.util.List rows>;

        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>($r20);

        goto label11;

     label17:
        return;
    }

    private java.util.List parseVars(org.apache.jena.atlas.json.JsonObject)
    {
        com.hp.hpl.jena.sparql.resultset.JSONInput r15;
        java.util.ArrayList $r7;
        org.apache.jena.atlas.json.JsonArray $r5;
        org.apache.jena.atlas.json.JsonString $r10;
        org.apache.jena.atlas.json.JsonValue $r2, $r4, r9;
        java.lang.String $r1, $r3, $r11;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.sparql.resultset.ResultSetException $r13, $r14;
        java.util.Iterator $r6;
        com.hp.hpl.jena.sparql.core.Var $r12;
        org.apache.jena.atlas.json.JsonObject r0;
        java.lang.Object $r8;

        r15 := @this: com.hp.hpl.jena.sparql.resultset.JSONInput;

        r0 := @parameter0: org.apache.jena.atlas.json.JsonObject;

        $r1 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kVars>;

        $r2 = virtualinvoke r0.<org.apache.jena.atlas.json.JsonObject: org.apache.jena.atlas.json.JsonValue get(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<org.apache.jena.atlas.json.JsonValue: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r14 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        specialinvoke $r14.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>("Key \'vars\' must be a JSON array");

        throw $r14;

     label1:
        $r3 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kVars>;

        $r4 = virtualinvoke r0.<org.apache.jena.atlas.json.JsonObject: org.apache.jena.atlas.json.JsonValue get(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<org.apache.jena.atlas.json.JsonValue: org.apache.jena.atlas.json.JsonArray getAsArray()>();

        $r6 = virtualinvoke $r5.<org.apache.jena.atlas.json.JsonArray: java.util.Iterator iterator()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

     label2:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.jena.atlas.json.JsonValue) $r8;

        $z2 = virtualinvoke r9.<org.apache.jena.atlas.json.JsonValue: boolean isString()>();

        if $z2 != 0 goto label3;

        $r13 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>("Entries in vars array must be strings");

        throw $r13;

     label3:
        $r10 = virtualinvoke r9.<org.apache.jena.atlas.json.JsonValue: org.apache.jena.atlas.json.JsonString getAsString()>();

        $r11 = virtualinvoke $r10.<org.apache.jena.atlas.json.JsonString: java.lang.String value()>();

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>($r11);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label2;

     label4:
        return $r7;
    }

    private com.hp.hpl.jena.graph.Node parseOneTerm(org.apache.jena.atlas.json.JsonObject)
    {
        com.hp.hpl.jena.sparql.resultset.JSONInput r31;
        com.hp.hpl.jena.graph.Node $r18, $r34, $r38;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r20, $r21, $r22, $r27, $r28, $r29;
        com.hp.hpl.jena.datatypes.TypeMapper $r16;
        java.lang.String[] $r1, $r35;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r23, $r24, $r25, $r30, $r36, $r37;
        com.hp.hpl.jena.sparql.resultset.ResultSetException $r19, $r26;
        org.apache.jena.atlas.json.JsonObject r0;
        org.apache.jena.riot.lang.LabelToNode $r32;
        com.hp.hpl.jena.datatypes.RDFDatatype $r17;
        java.lang.Object $r33;

        r31 := @this: com.hp.hpl.jena.sparql.resultset.JSONInput;

        r0 := @parameter0: org.apache.jena.atlas.json.JsonObject;

        $r1 = newarray (java.lang.String)[4];

        $r2 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kType>;

        $r1[0] = $r2;

        $r3 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kValue>;

        $r1[1] = $r3;

        $r4 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kXmlLang>;

        $r1[2] = $r4;

        $r5 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kDatatype>;

        $r1[3] = $r5;

        staticinvoke <com.hp.hpl.jena.sparql.resultset.JSONInput: void checkContains(org.apache.jena.atlas.json.JsonObject,java.lang.String[])>(r0, $r1);

        $r6 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kType>;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.resultset.JSONInput: java.lang.String stringOrNull(org.apache.jena.atlas.json.JsonObject,java.lang.String)>(r0, $r6);

        $r8 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kValue>;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.resultset.JSONInput: java.lang.String stringOrNull(org.apache.jena.atlas.json.JsonObject,java.lang.String)>(r0, $r8);

        $r10 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kUri>;

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        $r35 = newarray (java.lang.String)[2];

        $r36 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kType>;

        $r35[0] = $r36;

        $r37 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kValue>;

        $r35[1] = $r37;

        staticinvoke <com.hp.hpl.jena.sparql.resultset.JSONInput: void checkContains(org.apache.jena.atlas.json.JsonObject,java.lang.String[])>(r0, $r35);

        $r38 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r9);

        return $r38;

     label1:
        $r11 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kLiteral>;

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label2;

        $r24 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kTypedLiteral>;

        $z2 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label4;

     label2:
        $r12 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kXmlLang>;

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.resultset.JSONInput: java.lang.String stringOrNull(org.apache.jena.atlas.json.JsonObject,java.lang.String)>(r0, $r12);

        $r14 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kDatatype>;

        $r15 = staticinvoke <com.hp.hpl.jena.sparql.resultset.JSONInput: java.lang.String stringOrNull(org.apache.jena.atlas.json.JsonObject,java.lang.String)>(r0, $r14);

        if $r13 == null goto label3;

        if $r15 == null goto label3;

        $r19 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Both language and datatype defined: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>($r23);

        throw $r19;

     label3:
        $r16 = staticinvoke <com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.TypeMapper getInstance()>();

        $r17 = virtualinvoke $r16.<com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.RDFDatatype getSafeTypeByName(java.lang.String)>($r15);

        $r18 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r9, $r13, $r17);

        return $r18;

     label4:
        $r25 = <com.hp.hpl.jena.sparql.resultset.JSONResultsKW: java.lang.String kBnode>;

        $z3 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label5;

        $r32 = r31.<com.hp.hpl.jena.sparql.resultset.JSONInput: org.apache.jena.riot.lang.LabelToNode labelMap>;

        $r33 = virtualinvoke $r32.<org.apache.jena.riot.lang.LabelToNode: java.lang.Object get(java.lang.Object,java.lang.Object)>(null, $r9);

        $r34 = (com.hp.hpl.jena.graph.Node) $r33;

        return $r34;

     label5:
        $r26 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object key not recognized as valid for an RDF term: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>($r30);

        throw $r26;
    }

    private static java.lang.String stringOrNull(org.apache.jena.atlas.json.JsonObject, java.lang.String)
    {
        com.hp.hpl.jena.sparql.resultset.ResultSetException $r5;
        org.apache.jena.atlas.json.JsonObject r0;
        org.apache.jena.atlas.json.JsonString $r3;
        org.apache.jena.atlas.json.JsonValue $r2;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r1, $r4, $r9;
        boolean $z0;

        r0 := @parameter0: org.apache.jena.atlas.json.JsonObject;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.jena.atlas.json.JsonObject: org.apache.jena.atlas.json.JsonValue get(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke $r2.<org.apache.jena.atlas.json.JsonValue: boolean isString()>();

        if $z0 != 0 goto label2;

        $r5 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a string: key: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        $r3 = virtualinvoke $r2.<org.apache.jena.atlas.json.JsonValue: org.apache.jena.atlas.json.JsonString getAsString()>();

        $r4 = virtualinvoke $r3.<org.apache.jena.atlas.json.JsonString: java.lang.String value()>();

        return $r4;
    }

    private static transient void checkContains(org.apache.jena.atlas.json.JsonObject, java.lang.String[])
    {
        java.lang.String[] r0;
        java.lang.String r6, $r15;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.resultset.ResultSetException $r7;
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.apache.jena.atlas.json.JsonObject r2;
        java.util.List $r1, $r10;
        java.lang.Object $r5;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r13, $r14;

        r2 := @parameter0: org.apache.jena.atlas.json.JsonObject;

        r0 := @parameter1: java.lang.String[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r3 = virtualinvoke r2.<org.apache.jena.atlas.json.JsonObject: java.util.Set keys()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $z1 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>(r6);

        if $z1 != 0 goto label2;

        $r7 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected only object keys ");

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but encountered \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>($r15);

        throw $r7;

     label2:
        goto label1;

     label3:
        return;
    }
}
