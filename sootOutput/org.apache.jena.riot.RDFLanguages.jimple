public class org.apache.jena.riot.RDFLanguages extends java.lang.Object
{
    public static final java.lang.String strLangRDFXML;
    public static final java.lang.String strLangTurtle;
    public static final java.lang.String strLangNTriples;
    public static final java.lang.String strLangN3;
    public static final java.lang.String strLangRDFJSON;
    public static final java.lang.String strLangNQuads;
    public static final java.lang.String strLangTriG;
    public static final org.apache.jena.riot.Lang RDFXML;
    public static final org.apache.jena.riot.Lang TURTLE;
    public static final org.apache.jena.riot.Lang TTL;
    public static final org.apache.jena.riot.Lang N3;
    public static final org.apache.jena.riot.Lang NTRIPLES;
    public static final org.apache.jena.riot.Lang NT;
    public static final org.apache.jena.riot.Lang RDFJSON;
    public static final org.apache.jena.riot.Lang TRIG;
    public static final org.apache.jena.riot.Lang NQUADS;
    public static final org.apache.jena.riot.Lang NQ;
    public static final org.apache.jena.riot.Lang RDFNULL;
    private static java.util.Map mapLabelToLang;
    private static java.util.Map mapContentTypeToLang;
    private static java.util.Map mapFileExtToLang;

    public void <init>()
    {
        org.apache.jena.riot.RDFLanguages r0;

        r0 := @this: org.apache.jena.riot.RDFLanguages;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Collection getRegisteredLanguages()
    {
        java.util.Map $r0;
        java.util.Collection $r1, $r2;

        $r0 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapLabelToLang>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Collection values()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

        return $r2;
    }

    public static void init()
    {
        return;
    }

    private static synchronized void init$()
    {
        org.apache.jena.riot.Lang $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        staticinvoke <org.apache.jena.riot.RDFLanguages: void initStandard()>();

        $r0 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFXML>;

        <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang RDFXML> = $r0;

        $r1 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NTRIPLES>;

        <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang NTRIPLES> = $r1;

        $r2 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NT>;

        <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang NT> = $r2;

        $r3 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang N3>;

        <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang N3> = $r3;

        $r4 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang TURTLE>;

        <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang TURTLE> = $r4;

        $r5 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang TTL>;

        <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang TTL> = $r5;

        $r6 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFJSON>;

        <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang RDFJSON> = $r6;

        $r7 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NQUADS>;

        <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang NQUADS> = $r7;

        $r8 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NQ>;

        <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang NQ> = $r8;

        $r9 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang TRIG>;

        <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang TRIG> = $r9;

        $r10 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFNULL>;

        <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang RDFNULL> = $r10;

        return;
    }

    private static void initStandard()
    {
        org.apache.jena.riot.Lang $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        $r0 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFXML>;

        staticinvoke <org.apache.jena.riot.RDFLanguages: void register(org.apache.jena.riot.Lang)>($r0);

        $r1 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang TURTLE>;

        staticinvoke <org.apache.jena.riot.RDFLanguages: void register(org.apache.jena.riot.Lang)>($r1);

        $r2 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang N3>;

        staticinvoke <org.apache.jena.riot.RDFLanguages: void register(org.apache.jena.riot.Lang)>($r2);

        $r3 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NTRIPLES>;

        staticinvoke <org.apache.jena.riot.RDFLanguages: void register(org.apache.jena.riot.Lang)>($r3);

        $r4 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFJSON>;

        staticinvoke <org.apache.jena.riot.RDFLanguages: void register(org.apache.jena.riot.Lang)>($r4);

        $r5 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang TRIG>;

        staticinvoke <org.apache.jena.riot.RDFLanguages: void register(org.apache.jena.riot.Lang)>($r5);

        $r6 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NQUADS>;

        staticinvoke <org.apache.jena.riot.RDFLanguages: void register(org.apache.jena.riot.Lang)>($r6);

        $r7 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFNULL>;

        staticinvoke <org.apache.jena.riot.RDFLanguages: void register(org.apache.jena.riot.Lang)>($r7);

        return;
    }

    public static void register(org.apache.jena.riot.Lang)
    {
        java.util.Map $r1, $r6, $r15, $r18, $r21;
        java.lang.String $r2, $r3, $r8, $r9, $r16, $r19, $r22, r24, r25, r26;
        boolean $z0, $z1, $z2, $z3;
        org.apache.jena.riot.Lang r0;
        java.util.Iterator $r5, $r11, $r13;
        java.lang.IllegalArgumentException $r23;
        java.util.List $r4, $r10, $r12;
        java.lang.Object $r14, $r17, $r20;
        org.apache.jena.atlas.web.ContentType $r7;

        r0 := @parameter0: org.apache.jena.riot.Lang;

        if r0 != null goto label1;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null for language");

        throw $r23;

     label1:
        staticinvoke <org.apache.jena.riot.RDFLanguages: void checkRegistration(org.apache.jena.riot.Lang)>(r0);

        $r1 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapLabelToLang>;

        $r2 = virtualinvoke r0.<org.apache.jena.riot.Lang: java.lang.String getLabel()>();

        $r3 = staticinvoke <org.apache.jena.riot.RDFLanguages: java.lang.String canonicalKey(java.lang.String)>($r2);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r0);

        $r4 = virtualinvoke r0.<org.apache.jena.riot.Lang: java.util.List getAltNames()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r20 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.lang.String) $r20;

        $r21 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapLabelToLang>;

        $r22 = staticinvoke <org.apache.jena.riot.RDFLanguages: java.lang.String canonicalKey(java.lang.String)>(r24);

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, r0);

        goto label2;

     label3:
        $r6 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapContentTypeToLang>;

        $r7 = virtualinvoke r0.<org.apache.jena.riot.Lang: org.apache.jena.atlas.web.ContentType getContentType()>();

        $r8 = virtualinvoke $r7.<org.apache.jena.atlas.web.ContentType: java.lang.String getContentType()>();

        $r9 = staticinvoke <org.apache.jena.riot.RDFLanguages: java.lang.String canonicalKey(java.lang.String)>($r8);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r0);

        $r10 = virtualinvoke r0.<org.apache.jena.riot.Lang: java.util.List getAltContentTypes()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r17 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.lang.String) $r17;

        $r18 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapContentTypeToLang>;

        $r19 = staticinvoke <org.apache.jena.riot.RDFLanguages: java.lang.String canonicalKey(java.lang.String)>(r25);

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, r0);

        goto label4;

     label5:
        $r12 = virtualinvoke r0.<org.apache.jena.riot.Lang: java.util.List getFileExtensions()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r26 = (java.lang.String) $r14;

        $z3 = virtualinvoke r26.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        if $z3 == 0 goto label7;

        r26 = virtualinvoke r26.<java.lang.String: java.lang.String substring(int)>(1);

     label7:
        $r15 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapFileExtToLang>;

        $r16 = staticinvoke <org.apache.jena.riot.RDFLanguages: java.lang.String canonicalKey(java.lang.String)>(r26);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r0);

        goto label6;

     label8:
        return;
    }

    private static void checkRegistration(org.apache.jena.riot.Lang)
    {
        java.util.Map $r3, $r6, $r16, $r21, $r28, $r33, $r40, $r45, $r57;
        java.lang.StringBuilder $r17, $r18, $r19, $r20, $r23, $r24, $r25, $r29, $r30, $r31, $r32, $r35, $r36, $r37, $r41, $r42, $r43, $r44, $r47, $r48, $r49, $r53, $r54, $r55, $r56, $r59, $r60, $r61;
        java.lang.String $r1, $r2, $r8, $r26, $r38, $r50, $r52, $r62, r63, r64, r65;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.List $r9, $r11, $r13;
        org.apache.jena.riot.Lang r0, r5;
        java.util.Iterator $r10, $r12, $r14;
        java.lang.Object $r4, $r15, $r22, $r27, $r34, $r39, $r46, $r58;
        org.apache.jena.atlas.web.ContentType $r7, $r51;

        r0 := @parameter0: org.apache.jena.riot.Lang;

        if r0 != null goto label01;

        return;

     label01:
        $r1 = virtualinvoke r0.<org.apache.jena.riot.Lang: java.lang.String getLabel()>();

        $r2 = staticinvoke <org.apache.jena.riot.RDFLanguages: java.lang.String canonicalKey(java.lang.String)>($r1);

        $r3 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapLabelToLang>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (org.apache.jena.riot.Lang) $r4;

        if r5 != null goto label02;

        return;

     label02:
        $z0 = virtualinvoke r0.<org.apache.jena.riot.Lang: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label03;

        return;

     label03:
        $r6 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapContentTypeToLang>;

        $r7 = virtualinvoke r0.<org.apache.jena.riot.Lang: org.apache.jena.atlas.web.ContentType getContentType()>();

        $r8 = virtualinvoke $r7.<org.apache.jena.atlas.web.ContentType: java.lang.String getContentType()>();

        $z1 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z1 == 0 goto label04;

        $r51 = virtualinvoke r0.<org.apache.jena.riot.Lang: org.apache.jena.atlas.web.ContentType getContentType()>();

        $r52 = virtualinvoke $r51.<org.apache.jena.atlas.web.ContentType: java.lang.String getContentType()>();

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Language overlap: ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r57 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapContentTypeToLang>;

        $r58 = interfaceinvoke $r57.<java.util.Map: java.lang.Object get(java.lang.Object)>($r52);

        $r59 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on content type ");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.riot.RDFLanguages: void error(java.lang.String)>($r62);

     label04:
        $r9 = virtualinvoke r0.<org.apache.jena.riot.Lang: java.util.List getAltNames()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z7 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label07;

        $r39 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r63 = (java.lang.String) $r39;

        $r40 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapLabelToLang>;

        $z6 = interfaceinvoke $r40.<java.util.Map: boolean containsKey(java.lang.Object)>(r63);

        if $z6 == 0 goto label06;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Language overlap: ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r45 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapLabelToLang>;

        $r46 = interfaceinvoke $r45.<java.util.Map: java.lang.Object get(java.lang.Object)>(r63);

        $r47 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on name ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r63);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.riot.RDFLanguages: void error(java.lang.String)>($r50);

     label06:
        goto label05;

     label07:
        $r11 = virtualinvoke r0.<org.apache.jena.riot.Lang: java.util.List getAltContentTypes()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r27 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r64 = (java.lang.String) $r27;

        $r28 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapContentTypeToLang>;

        $z5 = interfaceinvoke $r28.<java.util.Map: boolean containsKey(java.lang.Object)>(r64);

        if $z5 == 0 goto label09;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Language overlap: ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r33 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapContentTypeToLang>;

        $r34 = interfaceinvoke $r33.<java.util.Map: java.lang.Object get(java.lang.Object)>(r64);

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on content type ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r64);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.riot.RDFLanguages: void error(java.lang.String)>($r38);

     label09:
        goto label08;

     label10:
        $r13 = virtualinvoke r0.<org.apache.jena.riot.Lang: java.util.List getFileExtensions()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z3 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label13;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r65 = (java.lang.String) $r15;

        $r16 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapFileExtToLang>;

        $z4 = interfaceinvoke $r16.<java.util.Map: boolean containsKey(java.lang.Object)>(r65);

        if $z4 == 0 goto label12;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Language overlap: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r21 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapFileExtToLang>;

        $r22 = interfaceinvoke $r21.<java.util.Map: java.lang.Object get(java.lang.Object)>(r65);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on file extension type ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r65);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.riot.RDFLanguages: void error(java.lang.String)>($r26);

     label12:
        goto label11;

     label13:
        return;
    }

    public static void unregister(org.apache.jena.riot.Lang)
    {
        java.util.Map $r1, $r4, $r13, $r16;
        java.lang.String $r2, $r3, $r6, $r7, $r14, $r17, r19, r20;
        boolean $z0, $z1;
        org.apache.jena.riot.Lang r0;
        java.util.Iterator $r9, $r11;
        java.lang.IllegalArgumentException $r18;
        java.util.List $r8, $r10;
        java.lang.Object $r12, $r15;
        org.apache.jena.atlas.web.ContentType $r5;

        r0 := @parameter0: org.apache.jena.riot.Lang;

        if r0 != null goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null for language");

        throw $r18;

     label1:
        staticinvoke <org.apache.jena.riot.RDFLanguages: void checkRegistration(org.apache.jena.riot.Lang)>(r0);

        $r1 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapLabelToLang>;

        $r2 = virtualinvoke r0.<org.apache.jena.riot.Lang: java.lang.String getLabel()>();

        $r3 = staticinvoke <org.apache.jena.riot.RDFLanguages: java.lang.String canonicalKey(java.lang.String)>($r2);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        $r4 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapContentTypeToLang>;

        $r5 = virtualinvoke r0.<org.apache.jena.riot.Lang: org.apache.jena.atlas.web.ContentType getContentType()>();

        $r6 = virtualinvoke $r5.<org.apache.jena.atlas.web.ContentType: java.lang.String getContentType()>();

        $r7 = staticinvoke <org.apache.jena.riot.RDFLanguages: java.lang.String canonicalKey(java.lang.String)>($r6);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r7);

        $r8 = virtualinvoke r0.<org.apache.jena.riot.Lang: java.util.List getAltContentTypes()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r15 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.lang.String) $r15;

        $r16 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapContentTypeToLang>;

        $r17 = staticinvoke <org.apache.jena.riot.RDFLanguages: java.lang.String canonicalKey(java.lang.String)>(r19);

        interfaceinvoke $r16.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r17);

        goto label2;

     label3:
        $r10 = virtualinvoke r0.<org.apache.jena.riot.Lang: java.util.List getFileExtensions()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.String) $r12;

        $r13 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapFileExtToLang>;

        $r14 = staticinvoke <org.apache.jena.riot.RDFLanguages: java.lang.String canonicalKey(java.lang.String)>(r20);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r14);

        goto label4;

     label5:
        return;
    }

    public static boolean isRegistered(org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r0, r5;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.String $r1, $r2;
        java.lang.IllegalArgumentException $r6;

        r0 := @parameter0: org.apache.jena.riot.Lang;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null for language");

        throw $r6;

     label1:
        $r1 = virtualinvoke r0.<org.apache.jena.riot.Lang: java.lang.String getLabel()>();

        $r2 = staticinvoke <org.apache.jena.riot.RDFLanguages: java.lang.String canonicalKey(java.lang.String)>($r1);

        $r3 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapLabelToLang>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (org.apache.jena.riot.Lang) $r4;

        if r5 != null goto label2;

        return 0;

     label2:
        staticinvoke <org.apache.jena.riot.RDFLanguages: void checkRegistration(org.apache.jena.riot.Lang)>(r0);

        return 1;
    }

    public static boolean isTriples(org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r0;
        boolean $z0;

        r0 := @parameter0: org.apache.jena.riot.Lang;

        $z0 = staticinvoke <org.apache.jena.riot.RDFParserRegistry: boolean isTriples(org.apache.jena.riot.Lang)>(r0);

        return $z0;
    }

    public static boolean isQuads(org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r0;
        boolean $z0;

        r0 := @parameter0: org.apache.jena.riot.Lang;

        $z0 = staticinvoke <org.apache.jena.riot.RDFParserRegistry: boolean isQuads(org.apache.jena.riot.Lang)>(r0);

        return $z0;
    }

    public static org.apache.jena.riot.Lang contentTypeToLang(java.lang.String)
    {
        org.apache.jena.riot.Lang $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.jena.riot.RDFLanguages: java.lang.String canonicalKey(java.lang.String)>(r0);

        $r2 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapContentTypeToLang>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.apache.jena.riot.Lang) $r3;

        return $r4;
    }

    public static org.apache.jena.riot.Lang contentTypeToLang(org.apache.jena.atlas.web.ContentType)
    {
        org.apache.jena.riot.Lang $r5;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.String $r1, $r2;
        org.apache.jena.atlas.web.ContentType r0;

        r0 := @parameter0: org.apache.jena.atlas.web.ContentType;

        $r1 = virtualinvoke r0.<org.apache.jena.atlas.web.ContentType: java.lang.String getContentType()>();

        $r2 = staticinvoke <org.apache.jena.riot.RDFLanguages: java.lang.String canonicalKey(java.lang.String)>($r1);

        $r3 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapContentTypeToLang>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (org.apache.jena.riot.Lang) $r4;

        return $r5;
    }

    public static org.apache.jena.riot.Lang shortnameToLang(java.lang.String)
    {
        org.apache.jena.riot.Lang $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.jena.riot.RDFLanguages: java.lang.String canonicalKey(java.lang.String)>(r0);

        $r2 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapLabelToLang>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.apache.jena.riot.Lang) $r3;

        return $r4;
    }

    public static org.apache.jena.riot.Lang fileExtToLang(java.lang.String)
    {
        org.apache.jena.riot.Lang $r3;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String $r0, r4;
        boolean $z0;

        r4 := @parameter0: java.lang.String;

        if r4 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        if $z0 == 0 goto label2;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>(1);

     label2:
        $r0 = staticinvoke <org.apache.jena.riot.RDFLanguages: java.lang.String canonicalKey(java.lang.String)>(r4);

        $r1 = <org.apache.jena.riot.RDFLanguages: java.util.Map mapFileExtToLang>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r3 = (org.apache.jena.riot.Lang) $r2;

        return $r3;
    }

    public static org.apache.jena.riot.Lang filenameToLang(java.lang.String)
    {
        org.apache.jena.riot.Lang $r1;
        int $i0, $i1;
        java.lang.String $r0, r2;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        if r2 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>(".gz");

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $i1 = $i0 - 3;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label2:
        $r0 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String getFilenameExt(java.lang.String)>(r2);

        $r1 = staticinvoke <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang fileExtToLang(java.lang.String)>($r0);

        return $r1;
    }

    public static org.apache.jena.riot.Lang filenameToLang(java.lang.String, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang $r1, r2, $r3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.jena.riot.Lang;

        $r1 = staticinvoke <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang filenameToLang(java.lang.String)>(r0);

        if $r1 != null goto label1;

        $r3 = r2;

        goto label2;

     label1:
        $r3 = $r1;

     label2:
        return $r3;
    }

    public static org.apache.jena.riot.Lang nameToLang(java.lang.String)
    {
        org.apache.jena.riot.Lang $r1, $r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang shortnameToLang(java.lang.String)>(r0);

        if $r1 == null goto label2;

        return $r1;

     label2:
        $r2 = staticinvoke <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang contentTypeToLang(java.lang.String)>(r0);

        return $r2;
    }

    static java.lang.String canonicalKey(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.util.Locale $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r1);

        return $r2;
    }

    public static org.apache.jena.atlas.web.ContentType guessContentType(java.lang.String)
    {
        org.apache.jena.riot.Lang $r1;
        java.lang.String r0;
        org.apache.jena.atlas.web.ContentType $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang filenameToLang(java.lang.String)>(r0);

        if $r1 != null goto label2;

        return null;

     label2:
        $r2 = virtualinvoke $r1.<org.apache.jena.riot.Lang: org.apache.jena.atlas.web.ContentType getContentType()>();

        return $r2;
    }

    private static void error(java.lang.String)
    {
        org.apache.jena.riot.RiotException $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.jena.riot.RiotException;

        specialinvoke $r0.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>(r1);

        throw $r0;
    }

    public static boolean sameLang(org.apache.jena.riot.Lang, org.apache.jena.riot.Lang)
    {
        org.apache.jena.riot.Lang r0, r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @parameter0: org.apache.jena.riot.Lang;

        r1 := @parameter1: org.apache.jena.riot.Lang;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        if r0 != r1 goto label3;

        return 1;

     label3:
        $r2 = virtualinvoke r0.<org.apache.jena.riot.Lang: java.lang.String getLabel()>();

        $r3 = virtualinvoke r1.<org.apache.jena.riot.Lang: java.lang.String getLabel()>();

        if $r2 != $r3 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    static void <clinit>()
    {
        java.util.Map $r55, $r56, $r57;
        org.apache.jena.riot.LangBuilder $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r46, $r48, $r51, $r53;
        java.lang.String[] $r1, $r3, $r7, $r9, $r11, $r16, $r18, $r22, $r24, $r26, $r31, $r33, $r37, $r39, $r43, $r45, $r47, $r52;
        org.apache.jena.riot.Lang $r5, $r13, $r14, $r20, $r28, $r29, $r35, $r41, $r49, $r50, $r54;

        <org.apache.jena.riot.RDFLanguages: java.lang.String strLangTriG> = "TriG";

        <org.apache.jena.riot.RDFLanguages: java.lang.String strLangNQuads> = "N-Quads";

        <org.apache.jena.riot.RDFLanguages: java.lang.String strLangRDFJSON> = "RDF/JSON";

        <org.apache.jena.riot.RDFLanguages: java.lang.String strLangN3> = "N3";

        <org.apache.jena.riot.RDFLanguages: java.lang.String strLangNTriples> = "N-Triples";

        <org.apache.jena.riot.RDFLanguages: java.lang.String strLangTurtle> = "Turtle";

        <org.apache.jena.riot.RDFLanguages: java.lang.String strLangRDFXML> = "RDF/XML";

        $r0 = staticinvoke <org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder create(java.lang.String,java.lang.String)>("RDF/XML", "application/rdf+xml");

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "RDFXML";

        $r1[1] = "RDF/XML-ABBREV";

        $r1[2] = "RDFXML-ABBREV";

        $r2 = virtualinvoke $r0.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addAltNames(java.lang.String[])>($r1);

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "rdf";

        $r3[1] = "xml";

        $r4 = virtualinvoke $r2.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addFileExtensions(java.lang.String[])>($r3);

        $r5 = virtualinvoke $r4.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.Lang build()>();

        <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFXML> = $r5;

        $r6 = staticinvoke <org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder create(java.lang.String,java.lang.String)>("Turtle", "text/turtle");

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "TTL";

        $r8 = virtualinvoke $r6.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addAltNames(java.lang.String[])>($r7);

        $r9 = newarray (java.lang.String)[2];

        $r9[0] = "application/turtle";

        $r9[1] = "application/x-turtle";

        $r10 = virtualinvoke $r8.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addAltContentTypes(java.lang.String[])>($r9);

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = "ttl";

        $r12 = virtualinvoke $r10.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addFileExtensions(java.lang.String[])>($r11);

        $r13 = virtualinvoke $r12.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.Lang build()>();

        <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang TURTLE> = $r13;

        $r14 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang TURTLE>;

        <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang TTL> = $r14;

        $r15 = staticinvoke <org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder create(java.lang.String,java.lang.String)>("N3", "text/rdf+n3");

        $r16 = newarray (java.lang.String)[3];

        $r16[0] = "text/rdf+n3";

        $r16[1] = "application/n3";

        $r16[2] = "text/n3";

        $r17 = virtualinvoke $r15.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addAltContentTypes(java.lang.String[])>($r16);

        $r18 = newarray (java.lang.String)[1];

        $r18[0] = "n3";

        $r19 = virtualinvoke $r17.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addFileExtensions(java.lang.String[])>($r18);

        $r20 = virtualinvoke $r19.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.Lang build()>();

        <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang N3> = $r20;

        $r21 = staticinvoke <org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder create(java.lang.String,java.lang.String)>("N-Triples", "application/n-triples");

        $r22 = newarray (java.lang.String)[5];

        $r22[0] = "NT";

        $r22[1] = "NTriples";

        $r22[2] = "NTriple";

        $r22[3] = "N-Triple";

        $r22[4] = "N-Triples";

        $r23 = virtualinvoke $r21.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addAltNames(java.lang.String[])>($r22);

        $r24 = newarray (java.lang.String)[1];

        $r24[0] = "text/plain";

        $r25 = virtualinvoke $r23.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addAltContentTypes(java.lang.String[])>($r24);

        $r26 = newarray (java.lang.String)[1];

        $r26[0] = "nt";

        $r27 = virtualinvoke $r25.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addFileExtensions(java.lang.String[])>($r26);

        $r28 = virtualinvoke $r27.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.Lang build()>();

        <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NTRIPLES> = $r28;

        $r29 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NTRIPLES>;

        <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NT> = $r29;

        $r30 = staticinvoke <org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder create(java.lang.String,java.lang.String)>("RDF/JSON", "application/rdf+json");

        $r31 = newarray (java.lang.String)[1];

        $r31[0] = "RDFJSON";

        $r32 = virtualinvoke $r30.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addAltNames(java.lang.String[])>($r31);

        $r33 = newarray (java.lang.String)[2];

        $r33[0] = "rj";

        $r33[1] = "json";

        $r34 = virtualinvoke $r32.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addFileExtensions(java.lang.String[])>($r33);

        $r35 = virtualinvoke $r34.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.Lang build()>();

        <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFJSON> = $r35;

        $r36 = staticinvoke <org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder create(java.lang.String,java.lang.String)>("TriG", "text/trig");

        $r37 = newarray (java.lang.String)[2];

        $r37[0] = "application/x-trig";

        $r37[1] = "application/trig";

        $r38 = virtualinvoke $r36.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addAltContentTypes(java.lang.String[])>($r37);

        $r39 = newarray (java.lang.String)[1];

        $r39[0] = "trig";

        $r40 = virtualinvoke $r38.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addFileExtensions(java.lang.String[])>($r39);

        $r41 = virtualinvoke $r40.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.Lang build()>();

        <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang TRIG> = $r41;

        $r42 = staticinvoke <org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder create(java.lang.String,java.lang.String)>("N-Quads", "application/n-quads");

        $r43 = newarray (java.lang.String)[5];

        $r43[0] = "NQ";

        $r43[1] = "NQuads";

        $r43[2] = "NQuad";

        $r43[3] = "N-Quad";

        $r43[4] = "N-Quads";

        $r44 = virtualinvoke $r42.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addAltNames(java.lang.String[])>($r43);

        $r45 = newarray (java.lang.String)[2];

        $r45[0] = "text/n-quads";

        $r45[1] = "text/nquads";

        $r46 = virtualinvoke $r44.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addAltContentTypes(java.lang.String[])>($r45);

        $r47 = newarray (java.lang.String)[1];

        $r47[0] = "nq";

        $r48 = virtualinvoke $r46.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addFileExtensions(java.lang.String[])>($r47);

        $r49 = virtualinvoke $r48.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.Lang build()>();

        <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NQUADS> = $r49;

        $r50 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NQUADS>;

        <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang NQ> = $r50;

        $r51 = staticinvoke <org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder create(java.lang.String,java.lang.String)>("rdf/null", "null/rdf");

        $r52 = newarray (java.lang.String)[2];

        $r52[0] = "NULL";

        $r52[1] = "null";

        $r53 = virtualinvoke $r51.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.LangBuilder addAltNames(java.lang.String[])>($r52);

        $r54 = virtualinvoke $r53.<org.apache.jena.riot.LangBuilder: org.apache.jena.riot.Lang build()>();

        <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFNULL> = $r54;

        $r55 = staticinvoke <org.apache.jena.atlas.lib.DS: java.util.Map map()>();

        <org.apache.jena.riot.RDFLanguages: java.util.Map mapLabelToLang> = $r55;

        $r56 = staticinvoke <org.apache.jena.atlas.lib.DS: java.util.Map map()>();

        <org.apache.jena.riot.RDFLanguages: java.util.Map mapContentTypeToLang> = $r56;

        $r57 = staticinvoke <org.apache.jena.atlas.lib.DS: java.util.Map map()>();

        <org.apache.jena.riot.RDFLanguages: java.util.Map mapFileExtToLang> = $r57;

        staticinvoke <org.apache.jena.riot.RDFLanguages: void init$()>();

        return;
    }
}
