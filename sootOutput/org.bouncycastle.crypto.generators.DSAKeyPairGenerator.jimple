public class org.bouncycastle.crypto.generators.DSAKeyPairGenerator extends java.lang.Object implements org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator
{
    private static final java.math.BigInteger ONE;
    private org.bouncycastle.crypto.params.DSAKeyGenerationParameters param;

    public void <init>()
    {
        org.bouncycastle.crypto.generators.DSAKeyPairGenerator r0;

        r0 := @this: org.bouncycastle.crypto.generators.DSAKeyPairGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init(org.bouncycastle.crypto.KeyGenerationParameters)
    {
        org.bouncycastle.crypto.generators.DSAKeyPairGenerator r0;
        org.bouncycastle.crypto.KeyGenerationParameters r1;
        org.bouncycastle.crypto.params.DSAKeyGenerationParameters $r2;

        r0 := @this: org.bouncycastle.crypto.generators.DSAKeyPairGenerator;

        r1 := @parameter0: org.bouncycastle.crypto.KeyGenerationParameters;

        $r2 = (org.bouncycastle.crypto.params.DSAKeyGenerationParameters) r1;

        r0.<org.bouncycastle.crypto.generators.DSAKeyPairGenerator: org.bouncycastle.crypto.params.DSAKeyGenerationParameters param> = $r2;

        return;
    }

    public org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()
    {
        org.bouncycastle.crypto.params.DSAParameters $r2;
        org.bouncycastle.crypto.params.DSAPublicKeyParameters $r11;
        org.bouncycastle.crypto.generators.DSAKeyPairGenerator r0;
        org.bouncycastle.crypto.params.DSAPrivateKeyParameters $r12;
        java.security.SecureRandom $r5;
        org.bouncycastle.crypto.params.DSAKeyGenerationParameters $r1, $r4;
        org.bouncycastle.crypto.AsymmetricCipherKeyPair $r10;
        java.math.BigInteger $r3, $r6, $r7, $r8, $r9;

        r0 := @this: org.bouncycastle.crypto.generators.DSAKeyPairGenerator;

        $r1 = r0.<org.bouncycastle.crypto.generators.DSAKeyPairGenerator: org.bouncycastle.crypto.params.DSAKeyGenerationParameters param>;

        $r2 = virtualinvoke $r1.<org.bouncycastle.crypto.params.DSAKeyGenerationParameters: org.bouncycastle.crypto.params.DSAParameters getParameters()>();

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r4 = r0.<org.bouncycastle.crypto.generators.DSAKeyPairGenerator: org.bouncycastle.crypto.params.DSAKeyGenerationParameters param>;

        $r5 = virtualinvoke $r4.<org.bouncycastle.crypto.params.DSAKeyGenerationParameters: java.security.SecureRandom getRandom()>();

        $r6 = staticinvoke <org.bouncycastle.crypto.generators.DSAKeyPairGenerator: java.math.BigInteger generatePrivateKey(java.math.BigInteger,java.security.SecureRandom)>($r3, $r5);

        $r7 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getP()>();

        $r8 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getG()>();

        $r9 = staticinvoke <org.bouncycastle.crypto.generators.DSAKeyPairGenerator: java.math.BigInteger calculatePublicKey(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r7, $r8, $r6);

        $r10 = new org.bouncycastle.crypto.AsymmetricCipherKeyPair;

        $r11 = new org.bouncycastle.crypto.params.DSAPublicKeyParameters;

        specialinvoke $r11.<org.bouncycastle.crypto.params.DSAPublicKeyParameters: void <init>(java.math.BigInteger,org.bouncycastle.crypto.params.DSAParameters)>($r9, $r2);

        $r12 = new org.bouncycastle.crypto.params.DSAPrivateKeyParameters;

        specialinvoke $r12.<org.bouncycastle.crypto.params.DSAPrivateKeyParameters: void <init>(java.math.BigInteger,org.bouncycastle.crypto.params.DSAParameters)>($r6, $r2);

        specialinvoke $r10.<org.bouncycastle.crypto.AsymmetricCipherKeyPair: void <init>(org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters)>($r11, $r12);

        return $r10;
    }

    private static java.math.BigInteger generatePrivateKey(java.math.BigInteger, java.security.SecureRandom)
    {
        java.security.SecureRandom r4;
        java.math.BigInteger r0, $r1, $r2, $r3, $r5;

        r0 := @parameter0: java.math.BigInteger;

        r4 := @parameter1: java.security.SecureRandom;

        $r2 = <org.bouncycastle.crypto.generators.DSAKeyPairGenerator: java.math.BigInteger ONE>;

        $r1 = <org.bouncycastle.crypto.generators.DSAKeyPairGenerator: java.math.BigInteger ONE>;

        $r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

        $r5 = staticinvoke <org.bouncycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r2, $r3, r4);

        return $r5;
    }

    private static java.math.BigInteger calculatePublicKey(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, r2, $r3;

        r2 := @parameter0: java.math.BigInteger;

        r0 := @parameter1: java.math.BigInteger;

        r1 := @parameter2: java.math.BigInteger;

        $r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>(r1, r2);

        return $r3;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.bouncycastle.crypto.generators.DSAKeyPairGenerator: java.math.BigInteger ONE> = $r0;

        return;
    }
}
