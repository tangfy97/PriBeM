public final class org.bouncycastle.util.io.Streams extends java.lang.Object
{
    private static int BUFFER_SIZE;

    public void <init>()
    {
        org.bouncycastle.util.io.Streams r0;

        r0 := @this: org.bouncycastle.util.io.Streams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void drain(java.io.InputStream) throws java.io.IOException
    {
        byte[] r0;
        int $i0, $i1, $i2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $i0 = <org.bouncycastle.util.io.Streams: int BUFFER_SIZE>;

        r0 = newarray (byte)[$i0];

     label1:
        $i1 = lengthof r0;

        $i2 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>(r0, 0, $i1);

        if $i2 < 0 goto label2;

        goto label1;

     label2:
        return;
    }

    public static byte[] readAll(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r2;
        java.io.ByteArrayOutputStream $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.bouncycastle.util.io.Streams: void pipeAll(java.io.InputStream,java.io.OutputStream)>(r1, $r0);

        $r2 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public static byte[] readAllLimited(java.io.InputStream, int) throws java.io.IOException
    {
        byte[] $r2;
        java.io.ByteArrayOutputStream $r0;
        int i0;
        long $l1;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $l1 = (long) i0;

        staticinvoke <org.bouncycastle.util.io.Streams: long pipeAllLimited(java.io.InputStream,long,java.io.OutputStream)>(r1, $l1, $r0);

        $r2 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public static int readFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        byte[] r1;
        int $i0, $i1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        $i0 = lengthof r1;

        $i1 = staticinvoke <org.bouncycastle.util.io.Streams: int readFully(java.io.InputStream,byte[],int,int)>(r0, r1, 0, $i0);

        return $i1;
    }

    public static int readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, i5;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        i5 = 0;

     label1:
        if i5 >= i0 goto label3;

        $i3 = i1 + i5;

        $i2 = i0 - i5;

        $i4 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, $i3, $i2);

        if $i4 >= 0 goto label2;

        goto label3;

     label2:
        i5 = i5 + $i4;

        goto label1;

     label3:
        return i5;
    }

    public static void pipeAll(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] r0;
        int $i0, $i1, $i2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        $i0 = <org.bouncycastle.util.io.Streams: int BUFFER_SIZE>;

        r0 = newarray (byte)[$i0];

     label1:
        $i1 = lengthof r0;

        $i2 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>(r0, 0, $i1);

        if $i2 < 0 goto label2;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i2);

        goto label1;

     label2:
        return;
    }

    public static long pipeAllLimited(java.io.InputStream, long, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] r0;
        long $l3, l4, l6;
        byte $b5;
        org.bouncycastle.util.io.StreamOverflowException $r4;
        int $i0, $i1, $i2, $i7;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        l4 := @parameter1: long;

        r2 := @parameter2: java.io.OutputStream;

        l6 = 0L;

        $i0 = <org.bouncycastle.util.io.Streams: int BUFFER_SIZE>;

        r0 = newarray (byte)[$i0];

     label1:
        $i1 = lengthof r0;

        $i2 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>(r0, 0, $i1);

        if $i2 < 0 goto label3;

        $l3 = (long) $i2;

        l6 = l6 + $l3;

        $b5 = l6 cmp l4;

        $i7 = (int) $b5;

        if $i7 <= 0 goto label2;

        $r4 = new org.bouncycastle.util.io.StreamOverflowException;

        specialinvoke $r4.<org.bouncycastle.util.io.StreamOverflowException: void <init>(java.lang.String)>("Data Overflow");

        throw $r4;

     label2:
        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i2);

        goto label1;

     label3:
        return l6;
    }

    static void <clinit>()
    {
        <org.bouncycastle.util.io.Streams: int BUFFER_SIZE> = 512;

        return;
    }
}
