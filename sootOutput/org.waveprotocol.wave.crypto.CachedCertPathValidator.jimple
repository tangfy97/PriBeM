public class org.waveprotocol.wave.crypto.CachedCertPathValidator extends java.lang.Object implements org.waveprotocol.wave.crypto.WaveCertPathValidator
{
    private static final java.lang.String VALIDATOR_TYPE;
    private static final java.lang.String CERTIFICATE_TYPE;
    private final org.waveprotocol.wave.crypto.VerifiedCertChainCache certPathCache;
    private final org.waveprotocol.wave.crypto.TimeSource timeSource;
    private final java.util.Set trustRoots;
    private static org.waveprotocol.wave.crypto.CachedCertPathValidator$WaveOidChecker WAVE_OID_CHECKER;

    public void <init>(org.waveprotocol.wave.crypto.VerifiedCertChainCache, org.waveprotocol.wave.crypto.TimeSource, org.waveprotocol.wave.crypto.TrustRootsProvider)
    {
        org.waveprotocol.wave.crypto.CachedCertPathValidator r0;
        org.waveprotocol.wave.crypto.TrustRootsProvider r3;
        org.waveprotocol.wave.crypto.VerifiedCertChainCache r1;
        org.waveprotocol.wave.crypto.TimeSource r2;
        java.util.Set $r4;

        r0 := @this: org.waveprotocol.wave.crypto.CachedCertPathValidator;

        r1 := @parameter0: org.waveprotocol.wave.crypto.VerifiedCertChainCache;

        r2 := @parameter1: org.waveprotocol.wave.crypto.TimeSource;

        r3 := @parameter2: org.waveprotocol.wave.crypto.TrustRootsProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.crypto.CachedCertPathValidator: org.waveprotocol.wave.crypto.VerifiedCertChainCache certPathCache> = r1;

        r0.<org.waveprotocol.wave.crypto.CachedCertPathValidator: org.waveprotocol.wave.crypto.TimeSource timeSource> = r2;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.crypto.CachedCertPathValidator: java.util.Set getTrustRoots(org.waveprotocol.wave.crypto.TrustRootsProvider)>(r3);

        r0.<org.waveprotocol.wave.crypto.CachedCertPathValidator: java.util.Set trustRoots> = $r4;

        return;
    }

    public void validate(java.util.List) throws org.waveprotocol.wave.crypto.SignatureException
    {
        org.waveprotocol.wave.crypto.CachedCertPathValidator r0;
        java.util.List r1;
        org.waveprotocol.wave.crypto.VerifiedCertChainCache $r2, $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.crypto.CachedCertPathValidator;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.waveprotocol.wave.crypto.CachedCertPathValidator: org.waveprotocol.wave.crypto.VerifiedCertChainCache certPathCache>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.crypto.VerifiedCertChainCache: boolean contains(java.util.List)>(r1);

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.waveprotocol.wave.crypto.CachedCertPathValidator: void validateNoCache(java.util.List)>(r1);

        $r3 = r0.<org.waveprotocol.wave.crypto.CachedCertPathValidator: org.waveprotocol.wave.crypto.VerifiedCertChainCache certPathCache>;

        interfaceinvoke $r3.<org.waveprotocol.wave.crypto.VerifiedCertChainCache: void add(java.util.List)>(r1);

     label1:
        return;
    }

    private java.util.Set getTrustRoots(org.waveprotocol.wave.crypto.TrustRootsProvider)
    {
        java.security.cert.X509Certificate r6;
        org.waveprotocol.wave.crypto.CachedCertPathValidator r8;
        com.google.common.collect.ImmutableSet $r4;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.crypto.TrustRootsProvider r1;
        java.lang.Object $r5;
        boolean $z0;
        java.security.cert.TrustAnchor $r7;

        r8 := @this: org.waveprotocol.wave.crypto.CachedCertPathValidator;

        r1 := @parameter0: org.waveprotocol.wave.crypto.TrustRootsProvider;

        $r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.crypto.TrustRootsProvider: java.util.Collection getTrustRoots()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.security.cert.X509Certificate) $r5;

        $r7 = new java.security.cert.TrustAnchor;

        specialinvoke $r7.<java.security.cert.TrustAnchor: void <init>(java.security.cert.X509Certificate,byte[])>(r6, null);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        $r4 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>($r0);

        return $r4;
    }

    private void validateNoCache(java.util.List) throws org.waveprotocol.wave.crypto.SignatureException
    {
        org.waveprotocol.wave.crypto.CachedCertPathValidator r2;
        java.security.cert.CertificateFactory $r7;
        java.util.Date $r6;
        java.security.cert.CertPathValidator $r0;
        java.util.Set $r3;
        java.security.cert.CertPath $r9;
        java.security.cert.PKIXParameters $r1;
        java.util.List r8;
        java.security.GeneralSecurityException $r10;
        org.waveprotocol.wave.crypto.SignatureException $r11;
        org.waveprotocol.wave.crypto.TimeSource $r5;
        org.waveprotocol.wave.crypto.CachedCertPathValidator$WaveOidChecker $r4;

        r2 := @this: org.waveprotocol.wave.crypto.CachedCertPathValidator;

        r8 := @parameter0: java.util.List;

     label1:
        $r0 = staticinvoke <java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String)>("PKIX");

        $r1 = new java.security.cert.PKIXParameters;

        $r3 = r2.<org.waveprotocol.wave.crypto.CachedCertPathValidator: java.util.Set trustRoots>;

        specialinvoke $r1.<java.security.cert.PKIXParameters: void <init>(java.util.Set)>($r3);

        $r4 = <org.waveprotocol.wave.crypto.CachedCertPathValidator: org.waveprotocol.wave.crypto.CachedCertPathValidator$WaveOidChecker WAVE_OID_CHECKER>;

        virtualinvoke $r1.<java.security.cert.PKIXParameters: void addCertPathChecker(java.security.cert.PKIXCertPathChecker)>($r4);

        $r5 = r2.<org.waveprotocol.wave.crypto.CachedCertPathValidator: org.waveprotocol.wave.crypto.TimeSource timeSource>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.crypto.TimeSource: java.util.Date now()>();

        virtualinvoke $r1.<java.security.cert.PKIXParameters: void setDate(java.util.Date)>($r6);

        virtualinvoke $r1.<java.security.cert.PKIXParameters: void setRevocationEnabled(boolean)>(0);

        $r7 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r9 = virtualinvoke $r7.<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.util.List)>(r8);

        virtualinvoke $r0.<java.security.cert.CertPathValidator: java.security.cert.CertPathValidatorResult validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)>($r9, $r1);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = new org.waveprotocol.wave.crypto.SignatureException;

        specialinvoke $r11.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>("Certificate validation failure", $r10);

        throw $r11;

     label4:
        return;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.crypto.CachedCertPathValidator$WaveOidChecker $r0;

        <org.waveprotocol.wave.crypto.CachedCertPathValidator: java.lang.String CERTIFICATE_TYPE> = "X.509";

        <org.waveprotocol.wave.crypto.CachedCertPathValidator: java.lang.String VALIDATOR_TYPE> = "PKIX";

        $r0 = new org.waveprotocol.wave.crypto.CachedCertPathValidator$WaveOidChecker;

        specialinvoke $r0.<org.waveprotocol.wave.crypto.CachedCertPathValidator$WaveOidChecker: void <init>(org.waveprotocol.wave.crypto.CachedCertPathValidator$1)>(null);

        <org.waveprotocol.wave.crypto.CachedCertPathValidator: org.waveprotocol.wave.crypto.CachedCertPathValidator$WaveOidChecker WAVE_OID_CHECKER> = $r0;

        return;
    }
}
