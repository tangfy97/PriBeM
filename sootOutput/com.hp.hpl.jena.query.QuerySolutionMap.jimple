public class com.hp.hpl.jena.query.QuerySolutionMap extends com.hp.hpl.jena.sparql.core.QuerySolutionBase
{
    private java.util.Map map;

    public void <init>()
    {
        java.util.HashMap $r1;
        com.hp.hpl.jena.query.QuerySolutionMap r0;

        r0 := @this: com.hp.hpl.jena.query.QuerySolutionMap;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QuerySolutionBase: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.query.QuerySolutionMap: java.util.Map map> = $r1;

        return;
    }

    public void add(java.lang.String, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r4;
        java.util.Map $r2;
        java.lang.String r1, $r3;
        com.hp.hpl.jena.query.QuerySolutionMap r0;

        r0 := @this: com.hp.hpl.jena.query.QuerySolutionMap;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: com.hp.hpl.jena.rdf.model.RDFNode;

        $r2 = r0.<com.hp.hpl.jena.query.QuerySolutionMap: java.util.Map map>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: java.lang.String canonical(java.lang.String)>(r1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r4);

        return;
    }

    protected com.hp.hpl.jena.rdf.model.RDFNode _get(java.lang.String)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        com.hp.hpl.jena.query.QuerySolutionMap r0;

        r0 := @this: com.hp.hpl.jena.query.QuerySolutionMap;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.query.QuerySolutionMap: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.hp.hpl.jena.rdf.model.RDFNode) $r3;

        return $r4;
    }

    protected boolean _contains(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.String r1;
        com.hp.hpl.jena.query.QuerySolutionMap r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.QuerySolutionMap;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.query.QuerySolutionMap: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Iterator varNames()
    {
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Set $r2;
        com.hp.hpl.jena.query.QuerySolutionMap r0;

        r0 := @this: com.hp.hpl.jena.query.QuerySolutionMap;

        $r1 = r0.<com.hp.hpl.jena.query.QuerySolutionMap: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public void addAll(com.hp.hpl.jena.query.QuerySolutionMap)
    {
        java.util.Map $r2, $r3;
        com.hp.hpl.jena.query.QuerySolutionMap r0, r1;

        r0 := @this: com.hp.hpl.jena.query.QuerySolutionMap;

        r1 := @parameter0: com.hp.hpl.jena.query.QuerySolutionMap;

        $r3 = r0.<com.hp.hpl.jena.query.QuerySolutionMap: java.util.Map map>;

        $r2 = r1.<com.hp.hpl.jena.query.QuerySolutionMap: java.util.Map map>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r2);

        return;
    }

    public void addAll(com.hp.hpl.jena.query.QuerySolution)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.rdf.model.RDFNode $r4;
        com.hp.hpl.jena.query.QuerySolutionMap r5;
        com.hp.hpl.jena.query.QuerySolution r0;
        java.util.Map $r6;
        java.lang.Object $r2;
        java.lang.String r3;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.query.QuerySolutionMap;

        r0 := @parameter0: com.hp.hpl.jena.query.QuerySolution;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.QuerySolution: java.util.Iterator varNames()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.query.QuerySolution: com.hp.hpl.jena.rdf.model.RDFNode get(java.lang.String)>(r3);

        $r6 = r5.<com.hp.hpl.jena.query.QuerySolutionMap: java.util.Map map>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r4);

        goto label1;

     label2:
        return;
    }

    public void clear()
    {
        com.hp.hpl.jena.query.QuerySolutionMap r0;
        java.util.Map $r1;

        r0 := @this: com.hp.hpl.jena.query.QuerySolutionMap;

        $r1 = r0.<com.hp.hpl.jena.query.QuerySolutionMap: java.util.Map map>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public java.lang.String toString()
    {
        java.lang.String r3, $r5, r14;
        boolean $z0;
        java.util.Iterator $r1;
        com.hp.hpl.jena.rdf.model.RDFNode $r4;
        com.hp.hpl.jena.query.QuerySolutionMap r0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: com.hp.hpl.jena.query.QuerySolutionMap;

        r14 = "";

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.QuerySolutionMap: java.util.Iterator varNames()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.query.QuerySolutionMap: com.hp.hpl.jena.rdf.model.RDFNode _get(java.lang.String)>(r3);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForRDFNode(com.hp.hpl.jena.rdf.model.RDFNode)>($r4);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("( ?");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" )");

        r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label2:
        return r14;
    }
}
